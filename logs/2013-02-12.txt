--- Log opened Tue Feb 12 00:00:05 2013
--- Day changed Tue Feb 12 2013
00:00 <@isaacs> CoverSlide: iriscouch maintains npmjs.org at least as much as i do :)
00:00 < Zak> isaacs: i love you man
00:00 <@isaacs> chilts, superjoe: iriscouch sponsors the npm registry
00:00 <@isaacs> Zak: thanks! <3
00:01 < Zak> i wish i had the energy you did
00:01 < Zak> i'm just a corporate whore :(
00:01 < superjoe> isaacs, I realize that - my curiosity is: how much would it cost if iriscouch was charging normally for it.
00:01 <@konobi> isaacs: when can we get namespaces on npm!? *oh snap*
00:01 < superjoe> to get an idea of how much it would cost to create a website such as npm
00:02 <@isaacs> Zak: the preferred nomenclature is "corporate stooge"
00:02 <@konobi> superjoe: nodezoo is open source, iirc
00:02 <@isaacs> Zak: "corporate whores" are when your company pays someone to have sex with the employees.
00:02 < superjoe> ha
00:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:03 <@isaacs> Zak: like the woman who became the chief operations office in Arrested Development
00:03 <@isaacs> s/office/officer/
00:03 < chilts> heh, I've never seen that
00:04 <@isaacbw> :O
00:06 < Zak> isaacs: then in that case, i wish I was the corporate whore
00:06 < raphie_> does anyone have experience working with serial ports in node.js? I'd like to proxy serial connections
00:07 <@isaacbw> the motto of node should be "there's a module for that"
00:07 < Zak> raphie_: very shallow experience. There's a serial module and for windows it requires you install some Visual Studio thing
00:07 < OTBS4Life> raphie_, Do you need Windows support?
00:07 <@isaacs> chilts: if you've never seen arrested development, i envy you.
00:07 < Zak> raphie_: https://github.com/voodootikigod/node-serialport
00:07 < superjoe> isaacbw, I think python already has dibs
00:07 <@isaacs> chilts: get it.  asap.  watch it.  omg, soooooo good.
00:08 <@isaacbw> :( oh, that's probably true
00:09 <@konobi> new series coming up too
00:09 <@konobi> um... season, even
00:13 < raphie_> Zak: that's actually what I've been using. what I want to accomplish is a proxy. so basically, a program on my computer could access a virtual serial port, which would be proxied by node to a real one
00:14 < chilts> isaacs: ok ... harder to do in New Zealand, but I'm sure I can find a way :)
00:14 <@isaacs> chilts: the torrents are there for you.
00:15 < isao1> this work in NZ? http://www.hulu.com/search?q=arrested+development
00:15 < chilts> apparently is has been on TV here :)
00:16 < raphie_> OTBS4Life: any idea how I could do that?
00:16 < OTBS4Life> raphie_, Sounds like you have I figured out.  What is your question?
00:17 < raphie_> OTBS4Life: basically, the lib Zak posted lets you connect to an arduino over serial. I'd like for other programs to be able to connect to node, and then that would be proxied over to the arduino
00:18 < OTBS4Life> raphie_, Right, so what specifically is giving you trouble?  You should just be able to pipe a socket to the serial stream.
00:19 < raphie_> OTBS4Life: as in, the other program would connect to node *via serial*
00:19 < OTBS4Life> raphie_, So connect to a pair of serial ports and pipe them together?
00:19 < raphie_> yes!
00:19 < OTBS4Life> Right, so what is the problem?  Open two serial ports and pipe them.
00:19 < OTBS4Life> I haven't used that library... but it seems straightforward.
00:20 < Zak> raphie_: by proxy, i assume you're talking about proxying over a network?
00:20 < raphie_> no, Zak
00:20 < Zak> so you want to proxy stuff from one serial connection to another?
00:21 < raphie_> I've got a program that controls my 3D printer, which connects to it via serial. I'd like this program to connect to node and think it's talking directly to the printer, but also have the ability for node to inject other commands
00:21 < Zak> right
00:21 < raphie_> I don't know how to set up the port for the control program to talk to
00:21 < OTBS4Life> raphie_, You need a virtual serial pot driver.  There are about 500 of them out there.
00:21 < raphie_> basically, I know how to use node as a client, but not as a host
00:22 < OTBS4Life> raphie_, It's the same thing.
00:22 < Zak> yeah, you'll need a virtual driver as OTBS said
00:22 < OTBS4Life> http://com0com.sourceforge.net/
00:22 < Zak> i don't have experience with that with node
00:22 < Zak> but just start googling
00:22 < Zak> it sounds like something somebody would have done before
00:22 < OTBS4Life> Node or not is irrelevant.  The drivers are generic.  They enumerate two ports that connect to each other.  There are tons of them.
00:22 < OTBS4Life> Your software connects to one end of the port, and your Node app connects to the other.
00:23 < OTBS4Life> Then, your Node app connects to your 3D printer.
00:24 < raphie_> and then I can just pipe the streams, right?
00:24 < OTBS4Life> raphie_, Yes
00:25 < raphie_> perfect, thanks guys
00:28 < CodingBean> Hey everyone! I just created a Javascript wrapper for the Google URL API. Makes creating short links and getting URL stats a breeze! Be sure to star the repo! https://github.com/codingbean/Shorten
00:29 < DarkArgon> has n1 done this before?
00:29 < DarkArgon> *no one
00:29 < CodingBean> Nope~
00:29 < CodingBean> !
00:29 < OTBS4Life> CodingBean, Don't use Github to host your scripts.  It's not allowed by their ToS, and some browsers won't like it due to the incorrect content-type header.
00:29 < CodingBean> I don't.
00:30 < CodingBean> Ahh... For the script header?
00:30 < OTBS4Life> CodingBean, You do, it's in your README.md.
00:30 < CodingBean> Yea... Oops! I'll take that out until I find a good CDN. Thanks for the warning!
00:31 < DarkArgon> cdnjs.com
00:31 < CodingBean> Updated! @OSBS4Life
00:32 < DarkArgon> jsonlib ?
00:32 < CodingBean> Yes... What?
00:32 < CodingBean> :^)
00:32 < CodingBean> It's just a cute little wrapper.
00:33 < DarkArgon> maybe u should mention that in the readme
00:33 < CodingBean> You like it? @DarkArgon
00:33 < misterhat> WHERE IS NIGGLER?!
00:33 < misterhat> :'(
00:34 < CodingBean> Yea... I didn't know if just putting it in the example was good enough. -- Do you know anything about NPM? @DarkArgon
00:34 < DarkArgon> also for the browser i prefer a jquery plugin
00:35 < DarkArgon> anything? yea i know some basic command :P
00:35 < _pash> hello, does anyone have a codeschool account?
00:35 < DarkArgon> *commands
00:35 < DarkArgon> i have one
00:35 < CodingBean> OK... I am not TOO familiar with jQuery.
00:35 < _pash> DarkArgon: would you mind helping me out if you are free?
00:36 < CodingBean> Well... Would you be willing to help make a port to NPM from this? @DarArgon
00:36 < DarkArgon> ok.. pm me
00:36 < DarkArgon> sure pm me CodingBean xD
00:37 < CodingBean> Great!
00:46 < MI6> joyent/node: isaacs master * 02374d0 : tls: Cycle data when underlying socket drains (+2 more commits) - http://git.io/CBrnpA
00:50 -!- mode/#Node.js [+o isaacbw] by ChanServ
00:51 < Voting>  If I need a good package to connect node to postgresql, what do you folks recommend?  
00:53 < Aria> node-pg?
01:00 < Voting> Aria: Have you used  https://github.com/brianc/node-postgres ? 
01:01 < Aria> Yup. Works.
01:10 < CodingBean> GITHUB DOWN!
01:11 < CodingBean> :^(
01:11 < fenduru> I'm a bit new to async programming, so I'm wondering how to manage event dependencies? For instance, I'm handling a push 'data' event, but that requires a child_process to be spawned first. How do I hold off the data event until the child_process is ready?
01:13 < DarkArgon> spawn the childprocess and give it a callback
01:13 < DarkArgon> after the callback is called start listening on "data"
01:14 < fenduru> That's what I'm doing, however the first few 'data' events are being dropped (I'm assuming because they're coming in before I'm listening for them?)
01:14 < DarkArgon> yep
01:15 < fenduru> That's the part that I'm not sure how to handle.
01:18 < DarkArgon> for example you could do
01:18 < DarkArgon> var childReady = false;
01:18 <@Nexxy> or .pause()
01:19 < chilts> CodingBean: http://www.downforeveryoneorjustme.com/github.com :)
01:19 < DarkArgon> its up again
01:22 < fenduru> So if I use a childready flag is there a proper way to wait for it to turn true?
01:22 < fenduru> Or should I just be storing the data from the 'data' events in a buffer then dealing with it that way
01:31 < fenduru> I'm receiving HTTP POST upload data and piping it into ffmpeg to reencode audio files. It was working perfectly fine until I added more processing before the ffmpeg process was created
01:32 < Voting> Aria: How long have you used it? How much? 
01:33 < Aria> Not THAT much. Most of my Postgres interaction is still ruby.
01:33 < Aria> But postgres isn't so hard to get right.
01:33 < Voting> Aria: what do you mean by that?
01:34 < Aria> (It's a simple protocol -- well designed, not hard to get right.)
01:50 < alunny> exit
01:50 < alunny> .exit
01:50 < alunny> gaaa
01:57 < tongcx> in node, is there anything like help() in python?
02:03 < airtanah_> tongcx: what does help() do?
02:06 <@konobi> tongcx: i'll go out on a limb and say no
02:08 < thomaslnx_> someone kows any basic documentation about node for beginners?
02:08 <@konobi> thomaslnx_: there's lot of articles/books out thre... just google em
02:21 < tongcx> in python, help will show detailed documentation for an object
02:21 < tongcx> seems in node world, there aren't very detailed docs
02:21 <@Nexxy> tongcx, what kind of object do you want documentation for?
02:22 < gluxon> tongcx: The core modules are very well documented.
02:23 < harrisonm> tongcx: Yeah, you don't have the built-in doc generation of Python in node, documentation's all on dedicated doc sites
02:23 < harrisonm> There may be a module that does comment-based doc generation, but it's not in wide use
02:24 < asdf12> there are
02:24 < harrisonm> The core docs are really good, and modules are generally documented on their own sites or in the README's
02:30 < bendman> (in express) how does one parse POST array parameters from a request?  I'm just getting undefined with req.params.paramName
02:31 < tjholowaychuk> bendman if it's json that'll be req.body
02:44 < bendman> ok, how do I get an array of GET parameters from the request?
02:46 < gluxon> bendman: http://nodejs.org/api/http.html#http_request_url
02:46 < gluxon> Look at the part that starts with "If you would like to extract the params from the query string, you can use the require('querystring').parse function, or pass true as the second argument to require('url').parse. "
03:01 < fenduru> Nexxy, ty for suggesting .pause(), I hadn't realized HTTPRequest implements ReadableStream
03:02 < Engin> offtopic: do you guys now a good vps provider in europe ?
03:07 < fenduru> I've recently begun using Amazon's web services. Very neat and easy to use. I can't really speak for performance yet though because I'm only using their micro instances
03:25 <@Nexxy> fenduru, you're welcome :)
03:31 < rcombs> anyone had experience with Facebook's <fb:login-button>?
03:31 < rcombs> after authenticating with that, I'm getting "This authorization code has been used" about every other request
03:34 < tongcx> hi guys, how to make socket.io work with telnet?
03:34 < SomeoneWeird> tongcx, you don't
03:34 < tongcx> so sad :)
03:44 < Engin> fenduru: yeah, they have amazing service -- though I just launched an instance in Ireland -- serving a static page takes 500ms
03:44 < Engin> http://ec2-176-34-67-53.eu-west-1.compute.amazonaws.com/
03:44 < Engin> is it just me
03:45 < asdf12> fast to me
03:45 < Engin> measurements ?
03:45 < Aria> 0.29s for me.
03:45 < fenduru> What are you using to get the load time?
03:45 < Engin> chrome dev tools
03:45 < Aria> time curl url
03:45 < Engin> now I'll do ab
03:46 < airtanah_> we are using AWS with auto-scaling groups - definitely cool
03:46 < Engin> yeah their services are mind blowing
03:46 < rcombs> aws ftw
03:46 < Engin> Time per request:       257.585 [ms] (mean)
03:46 < fenduru> .378s for me
03:46 < Engin> 100 requests
03:47 < rcombs> anyone know what's up with that Facebook issue, though?
03:47 < Engin> Connect:      101  143  52.3    117     500
03:47 < Engin> Processing:   103  114  35.3    110     461
03:47 < Engin> Waiting:      103  113  35.3    109     460
03:47 < Engin> mean processing is 114ms, it's too long, no ?
03:52 < dominicasley> still having issues with sockets
03:52 < fenduru> Yeah, I'm getting sub 0.1s on my AWS micro instance (US Northeast Datacenter)
03:52 < dominicasley> could someone have a look for me
03:52 < dominicasley> is pastebin okay?
03:53 < fenduru> Yeah, post it. What problems are you having?
03:53 < dominicasley> the emit won
03:53 < dominicasley> won't* go through
03:53 < dominicasley> like the server receives it but none of the clients do
03:54 < dominicasley> server code: http://pastebin.com/JuNuuEtu
03:54 < fenduru> so client>server works fine but server>client isn't getting through?
03:54 < dominicasley> yeah
03:55 < dominicasley> client code: http://pastebin.com/StCKhTyg
03:55 < fenduru> is that directly cut/pasted?
03:56 < dominicasley> yeah
03:56 < fenduru> (nevermind, I forgot that JS doesn't REQUIRE semicolons haha)
03:57 < dominicasley> yeah I'm trying not to use them
03:57 < dominicasley> but sometimes i do by habbit
04:01 < dominicasley> any ideas?
04:01 < asdf12> socket.emit('message', msg)
04:02 < dominicasley> thanks that worked
04:03 < asdf12> pastebin is really overloading the ads
04:04 < asdf12> 4 ad banners on such a tiny page :o
04:04 < fenduru> Have to pay for all those bytes ;)
04:19 <@Nexxy> fenduru, JS requires semicolons, it just inserts them for you if you're to lazy to do it yourself ;P
04:21 < fenduru> Me? Lazy?? Never...
04:21 < fenduru> but in all seriousness I forgot that they weren't required. Out of habit I use them unconditionally
04:23 < asdf12> semicolonless!!!!
04:23 <@Nexxy> justaskingfortrouble!!!!
04:24 < dominicasley> i like to think by not using them I'm saving time
04:24 < asdf12> so true
04:24 < asdf12> i've wasted so much of my life inserting semi colons!!!!! NO MORE
04:25 < fenduru> I don't even notice myself typing them
04:25 < asdf12> WOOOO freedom this is liberating writing semicolon less code
04:25 <@Nexxy> you can use ST2 to enter them for you
04:25 < fenduru> sometimes if I chat with someone while programming I'll end my line with one;
04:25 < JasonSmith> substack: YT? I wanted to ask about your git stuff
04:25 < asdf12> next up , why write code with clothes on ???
04:25 < substack> JasonSmith: yep
04:26 < substack> going through security in just a moment though
04:26 < fenduru> asdf12, right? what a waste of time
04:26 < asdf12> no more semi colons, no more clothes! whos with me
04:26 <@Nexxy> asdf12, there's no reason to necessarily
04:26 <@Nexxy> unless you're in an office
04:26 <@mbalho> asdf12: me except im abotu to board a plane and i think they would report me
04:26 <@Nexxy> with other people who may be 
04:26 < dominicasley> asdf12: I work from home, never wear a shirt
04:26 <@Nexxy> uncomfortable
04:26 < fenduru> they're just uncomfortable with the idea of hyperproductivity
04:26 < asdf12> oh you don't just turn on and off semicolons, you gotta take it everywhere, personal or work code
04:26 < asdf12> so why do the same with the new no clothes policy?
04:27 <@Nexxy> JS has ASI as a policy
04:27 < asdf12> when the person at the coffee store asks why im naked, i'll tell them i went semi colon less
04:27 <@Nexxy> which means the clothing policy would be an optional one
04:27 < bradleymeck> dominictarr: have you read module-smith?
04:28 < dominicasley> imagine how much time we waste getting dressed every day
04:28 < fenduru> asdf12, your semicolon is showing
04:28 < dominicasley> also shitting 
04:29 < dominictarr> bradleymeck: no, link?
04:29 < bradleymeck> dominictarr : https://github.com/nodejitsu/module-smith
04:29 < dominictarr> asdf12: ALL DAY BATHROBE
04:31 < asdf12> OPEN*** bathrobe
04:31 < asdf12> or else you're just limiting yourself like writing code with semicolons
04:31 <@Nexxy> try writing C w/o semicolons
04:31 < dominictarr> asdf12: adjust to suit temperature. some times you need a semi colon
04:31 < dominictarr> like
04:31 < dominictarr> var thing = k
04:31 < dominictarr> (function () {…})()
04:32 < asdf12> yea its ok then
04:32 < dominictarr> you need ;(function () {…})()
04:32 < asdf12> because, it's like you need water
04:32 < asdf12> so water is ok
04:32 < asdf12> you know?
04:32 < dominictarr> asdf12: agree
04:33 < asdf12> that was deep
04:33 < asdf12> i hope someone wrote that down
04:33 < dominictarr> a bath robe is a reasonable compromise between nudity and clothed, it allows you to gracefully transition between the two states as you deem appropriate. 
04:34 < asdf12> i feel like
04:34 < asdf12> this is what the founding fathers felt when they wrote the declaration of independence
04:35 < dominictarr> bradleymeck: how far is that off of a travis like service that and build everyone's modules?
04:35 < asdf12> you guys will remember this moment when you finally give up semicolons
04:35 <@Nexxy> I will never give them up
04:35 < fenduru> real question: can you create a local scope in javascript?
04:35 <@Nexxy> I keep one on my website 
04:35 <@Nexxy> as a last resort
04:36 < fenduru> like {var localvar = 1; }
04:36 < bradleymeck> dominictarr: needs a small patch for window's `runas` profiles, other than that works on *nix/mac fine. Could probably build out the service using pkgcloud in like 2 weeks and have it be somewhat well tested?
04:37 < dominictarr> oh that is awesome, you should tweet that, so that someone might see it and be inspired
04:37 < bradleymeck> dominictarr: i replied to you
04:37 < dominictarr> ah, cool - I closed twitter because it's too distracting
04:38 <@Nexxy> RT PLX
04:40 < bradleymeck> Nexxy: https://twitter.com/bradleymeck/status/301184572568260608
04:42 <@Nexxy> oooh
04:42 <@Nexxy> IDEK about module-smith
04:43 <@mbalho> wat is IDEK
04:43 < Nuck> I Don't Even Know
04:43 <@mbalho> o
04:44 <@Nexxy> or didn't, in this case
04:45 <@Nexxy> mbalho, ICBYDKWIDEKM
04:45 <@Nexxy> "I can't believe you didn't know what 'I don't even know' meant"
04:45 <@mbalho> i know IDK but IDEK seems excessive
04:46 <@Nexxy> mbalho, y u hatin tho
04:47 <@Nexxy> mbalho, IDEK is one less syllable if you pronounce it outloud
04:47 <@mbalho> substack just creeped up on my IRL
04:47 <@mbalho> me*
04:50 <@Nexxy> mbalho, did he go sssssssSSsssSss?
04:50 < substack> fact
04:50 <@Nexxy> lolol
04:54 < samholmes> Anyone shed some light on this? https://github.com/visionmedia/connect-redis/issues/69
05:12 < tpayne> can a partial include another partial?
05:14 < ashnur> partialception?
05:15 < dominictarr> if it can't it's not very useful
05:15 < asdf12> i don't like that bitbucket doesn't show commits in it's issues
05:17 < dominictarr> asdf12: hey, I have an idea for you: skype puppets
05:18 < dominictarr> it uses face recognition to animate a puppet with your expressions for skype so that you don't have to put a shirt on for video calls.
05:18 < asdf12> is that based on that new ios app
05:18 < dominictarr> it's just an idea
05:18 < asdf12> how about i just cut all my t-shirts in half
05:18 < asdf12> and only wear the top half on skype calls?
05:19 < asdf12> if its a profession call, i'll cut my tie in half too
05:19 < dominictarr> I guess that would work. 
05:20 < dominictarr> but the half t-shirt is not a technology that excites me greatly
05:20 < dominictarr> however, the skype puppet could be pivoted to all sorts of interesting things
05:21 < asdf12> yes but puppets are creepy
05:21 < asdf12> and i am naked, not ugly
05:21 < asdf12> people should enjoy my beautiful face
05:22 < dominictarr> NAKED SKYPE: DEAL WITH IT
05:22 < asdf12> naked skype exists already its called omegle
05:22 < asdf12> or whatever that thing is called ha
05:23 < asdf12> im scared
05:24 < asdf12> i started a project, and didnt write any tests, and its grown and grown
05:24 < asdf12> now im scared that i might have to start writing tests for it
05:26 < nomad111> Hey all, is there an equivalent to pythons urlparse.urljoin (http://docs.python.org/2/library/urlparse.html#urlparse.urljoin) in node.js? the url module did have it and path.join isn't quite appropriate
05:26 < nomad111> url module didn't have*
05:29 <@Nexxy> nomad111, url.resolve isn't what you want?
05:30 <@Nexxy> > url.resolve("http://www.lol.com", "/wat");
05:30 <@Nexxy> 'http://www.lol.com/wat'
05:30 < nomad111> Nexxy: i want to do something along the lines of: urlparse.urljoin('some', 'path/', '/segments') to get '/some/path/segments'
05:35 <@Nexxy> nomad111, 
05:35 <@Nexxy> what about this?
05:35 <@Nexxy> ["http://www.lol.com", "/wat", "/ohai"].reduce(path.join);
05:36 <@Nexxy> I guess it screws up the //
05:36 <@Nexxy> but it's close :D
05:38 < AAA_awright> nomad111: It's called "concat"
05:38 < AAA_awright> ECMAScript even has a fancy operator for it, +
05:39 <@Nexxy> AAA_awright, that doesn't necessarily take care of stuff like
05:39 < ashnur> nomad111: what about using https://github.com/medialize/URI.js ?
05:39 <@Nexxy> adding something with a trailing slash to something with a leading slash
05:40 < bradleymeck> nomad111: path.resolve may be more your style if its just paths and not urls
05:40 < AAA_awright> Unfortunately Node.js's URL parsing utilities aren't up to standards
05:40 < ashnur> i still say URI.js is the best. 
05:40 < AAA_awright> But the URL normalization function is very well-defined
05:41 < nomad111> thanks for all the help folks, I'll check out URL.js
05:41 < AAA_awright> nomad111: What are you trying to *do*
05:42 < ashnur> it's URI, not URL :)
05:42 < AAA_awright> It's RFC 3986 to be exact
05:43 < ashnur> the module's name is URI.js 
05:49 < YamilG> hello :)
05:50 < YamilG> can anybody explain me what kind of sorcery is this? frame = (frame+1) % frames.length;
05:51 < YamilG> ping
05:51 < Lorentz> pwang
05:51 < AAA_awright> pong
05:51 < YamilG> help plz!
05:51 < AAA_awright> YamilG: What does it look like it does
05:51 < AAA_awright> What does (frame+1) do
05:52 < ashnur> magic!
05:52 < YamilG> add 1 to the value of frame if...
05:52 < Lorentz> if?
05:52 < YamilG> is less than the value of frames.length?
05:52 < AAA_awright> YamilG: The % is modulus
05:52 < fenduru> no if.
05:53 < AAA_awright> YamilG: Find (frame+1), but wrap around to 0 when you hit frames.length
05:54 < dxeh> frame+1 does exactly what it says it does, and in that case there is no need for operator precedence so the parenthesis are unneeded
05:54 < AAA_awright> I've seen worse...
05:54 < AAA_awright> f + 1%len
05:54 < YamilG> context http://forums.udacity.com/questions/100021129/how-to-see-my-robot
05:54 < AAA_awright> ^ Doesn't do what it looks like it does
05:54 < dxeh> and well no, frame + 1 does not add a value of 1 to frame
05:54 < dxeh> it gets the value of frame + 1
05:55 < Lorentz> AAA_awright: see, if you make it really close and far apart
05:55 < Lorentz> like f     +     1%len
05:55 < dxeh> no equate symbol (not an equation)
05:55 < Lorentz> it'll work differently
05:55 < AAA_awright> dxeh: Who said it adds anything to `frame`
05:55 < dxeh> <YamilG> add 1 to the value of frame if...
05:56 < YamilG> i read some other comments
05:56 < YamilG> I thought that was some kind of sort syntax or something
05:56 < YamilG> short*
05:56 < ashnur> :)
05:58 < ashnur> it's the hour of strange help requests. on #js someone came with this: http://jsfiddle.net/q69J2/ .
05:58 < ashnur> lovely
06:29 < xdomox> hey
06:29 < xdomox> what key is the key which produces ~
06:29 < asdf12> hey
06:29 < xdomox> squigly
06:29 < asdf12> ~~~~~~~ squiggle
06:29 < xdomox> what do you call that key
06:29 < xdomox> the actual name
06:29 < asdf12> tilde
06:30 < fenduru> tilde
06:30 < xdomox> TIL
06:38 < asdf12> ~ squiggle
06:51 < gf3> JOAD NAY ESS
07:08 < cloudbender> asdf12 do you have a fast machine ?
07:09 < cloudbender> I would like to know what this code reports on a fast machine with lots of ram
07:09 < cloudbender> https://gist.github.com/cloudbender/4760702
07:09 < cloudbender> brb
07:10 < fenduru> I can test that for you cloudbender, but I'm not on win32
07:12 < fenduru> 125ms (Intel i7-2600k @3.4GHz, 8GB RAM)
07:13 < cloudbender> thats pretty good fenduru
07:13 < cloudbender> mine was 500 ms
07:13 < cloudbender> it's an old laptop
07:14 < cloudbender> thank you so much
07:15 < fenduru> sure thing. what are you trying to do
07:16 < cloudbender> Well, index1 is the thing.  the recordset will mostly just sit there.
07:16 < cloudbender> I'll sort the index instead
07:16 < cloudbender> And add other indexes
07:16 < cloudbender> index2,index3,index4
07:22 < cloudbender> index1 holds only references to database records, not whole records
07:23 < cloudbender> I'll be adding date values, invoice numbers, etcetra
07:31 < bodhi_> hi
07:31 < bodhi_> anyone here?
07:31 < cloudbender> checking ...
07:31 < cloudbender> nope
07:31 < cloudbender> ok I lied
07:31 < bodhi_> why?
07:32 < bodhi_> @cloudbender
07:32 < cloudbender> what's up ?
07:37 < asdf12> meow
07:37 < fenduru> woof
07:39 < aguuu> Would anybody recommend a linux distro for amazon cloud services? I am a beginner to linux servers. I just want to install apache, php, maybe node.js and python, etc. Run my own DNS server.
07:39 < asdf12> ubuntu
07:39 < dch> aguuu: if you are new to linux, I'd suggest ubuntu. run the same at home / work and in the cloud.
07:40 < dch> for DNS don't bother running your own, use iwantmyname.com or similar. it will save you a lot of time.
07:40 < dch> skip apache, php, and go straight for couchdb + nodejs.
07:40 < SomeoneWeird> and nginx
07:40 < dch> if you need it, for sure. 
07:40 < dch> russian tech is hawt
07:40 < SomeoneWeird> :)
07:41 < fenduru> I've just started using couchdb and nodejs for the first time each on this peronal project I'm working on
07:42 < fenduru> still wrapping my head around how couch documents should be setup
07:46 < cloudbender> I'm totally interested in couch, for next month
07:47 < airtanah_> i like couchdb, but it has its limitations
07:48 < fenduru|sleep> I just haven't figured out how to semantically separate document types
07:48 < airtanah_> npm uses couchdb
07:48 < airtanah_> database or namespace
07:50 < fenduru|sleep> take care all
07:50 < cloudbender> gnite
07:50 < cloudbender> couchdb is now called couchbase
07:51 < cloudbender> and I'm curious if npm uses a newer release ?
07:51 < airtanah_> isn't couchbase just a commercial product based on couchdb?
07:52 < cloudbender> and fenduru I just got the routine down to 313 milliseconds
07:52 < cloudbender> I do not beleive so. I could be wrong
07:52 < fenduru|sleep> couchbase != couchdb
07:52 < airtanah_> http://couchdb.apache.org/
07:53 < dch> airtanah_: no. couchbase is 50% memcache protocol + 50% underlying couchdb  storage engine. only tangentially related to couchdb, and 99% trademark infringement.
07:53 < cloudbender> hmmm
07:53 < airtanah_> yah, couchbase is confusing as hell. i've only ever used couchdb
07:53 < cloudbender> that's not a good thing
07:53 < fenduru|sleep> whats that other 1%?
07:53 < cloudbender> oatmeal
07:53 < cloudbender> or something
07:53 < fenduru|sleep> http://www.couchbase.com/couchbase-vs-couchdb#Couchbase vs. Apache CouchDB Technical Comparison Chart
07:53 < dch> hah, and some very smart people. they do have smart people
07:54 < fenduru|sleep> oh dear.... why does that URL have spaces in it
07:54 < airtanah_> lol so couchbase is couchdb minus the HTTP api
07:55 < airtanah_> i.e. useless
07:55 < dch> depends, if you want a clustering layer with an SDK that's aware of it, its a great fit. 
07:55 < dch> but personally, yup, it is a step in the wrong direction for what I want.
07:55 < cloudbender> that's what I want
07:56 < airtanah_> it looks like couchbase = redis wannabe = better memcache
07:56 < cloudbender> I think they almost had to rework the cache for the document model they facilitate
07:57 < cloudbender> And their documentation seems awesome, but time will tell
07:58 < aguuu> Do you know how to use the free tier storage when creating a compute unit at amazon cloud?
07:58 < cloudbender> No, but if you hum a few bars I can fake it ...
07:58 < airtanah_> aguuu: stay under the quota
07:59 < aguuu> which is?
07:59 < airtanah_> whatever teh website says
07:59 < airtanah_> http://aws.amazon.com/free/
08:00 < cloudbender> hmmm cats just broke something ...
08:01 < GreenDog> always blame the cat
08:11 < cloudbender> goodnight fellow geniuses
08:17 -!- mode/#Node.js [+v mda] by isaacs
08:17 <@isaacs> mda: be voiced
08:21 < asdf12> scroogled!
08:22 < asdf12> aws-lib is THEE aws lib right?
08:24 < asdf12> what was that module that tied all the cloud provider apis into one api?
08:33 < azylman> Does anyone know why the --max-old-space-size command line option would be having no effect (i.e. not raising the memory limit)
08:33 < kmdm> Hi guys, having a problem with node/npm latest tarball (v0.8.19) on RHEL5 (glibc 2.5) - it segfaults :( : Debug backtrace of all threads: http://pastie.org/6123399 - Any ideas?
08:34 < kmdm> I found a relevant old google groups discussion - but no clear outcome/resolution
08:42 < AAA_awright> What's an easy way to save the function call history of a process?
08:43 < [AD]Turbo> hi there
08:44 <@Nexxy> AAA_awright, http://i.qkme.me/3syieg.jpg
08:45 < AAA_awright> D: That's... what I was hoping to avoid
08:45 <@Nexxy> lol
08:46 < AAA_awright> And the various v8 logging options are rather useless...
08:53 < samholmes> Shit..
08:54 < Gabriel403> I trust the world is prepared for the zombie onslaught http://www.masslive.com/entertainment/index.ssf/2013/02/hackers_break_into_montana_tv.html
09:01 < kmdm> hmm, well, I'm not surprised it segfaulted: x handle --> 0x00000000 :/ Wonder why handle has a null value 
09:02 < kmdm> (gdb) x handle
09:02 < kmdm> 0x11b9ea8 <default_loop_struct+168>:    0x00000000
09:02 < kmdm> infact.
09:04 < kmdm> which naturally makes handle->loop a null pointer deference ...hmm.
09:05 < azylman> Is anyone here familiar with the difference between --max-new-space-size and --max-old-space-size?
09:11 < kmdm> I suppose uv__handle_init never getting called might be a problem.
09:13 < kmdm> So uv_async_init is bailing out due to uv__async_init(loop) giving EBADF - thus never calling uv__handle_init which I'm guessing is my problem
09:23 < kmdm> Ok, so, I suspect it's failing because it tries to create the pipes with O_CLOEXEC (valid since 2.6.23) but my kernel is 2.6.18 - changing the relevant function's #if __linux__ to #if 0 so it goes ahead and uses the pipe() function fixes the issue.
09:23 < kmdm> </monologue>
09:26 < kmdm> (I guess the question is why it's not returning ENOSYS)
09:26 < kmdm> or some-such
09:30 < kmdm> well, that's obvious - *engages brain*
10:05 < idank> is it possible to run node.js client side? this is for a standalone application that wouldn't be served on the internet
10:06 <@Nexxy> idank, what?
10:06 < gildean> idank: what do you mean clientside?
10:06 < idank> include it from a plain html and open it in the browser
10:06 <@Nexxy> no
10:06 < gildean> idank: no, you're misunderstading what node.js is
10:07 <@Nexxy> but you can run node.js on the computer
10:07 <@Nexxy> and then open a browser 
10:07 < gildean> you can even build a desktop app with node.js
10:07 < gildean> so you don't even need a browser
10:07 < idank> hehe
10:07 <@Nexxy> I hear you can build robots with node.js
10:08 < idank> so i basically need the my node.js app to act as an http server and manually write the request?
10:08 < azylman> I built Skynet with Node.
10:08 <@Nexxy> idank, which requests are these?
10:09 < idank> Nexxy: imagine i could <script src='node.js'> and then use it directly in an html file
10:10 < idank> that's what i'd like to achieve
10:10 <@Nexxy> idank, node.js is a program
10:10 <@Nexxy> executable
10:10 < idank> i know
10:10 < idank> i'm saying what i want to achieve in the end
10:10 < azylman> Why are you trying to do that?
10:10 < Aidan88> World domination
10:10 < azylman> My guess is that there's a better way to do what you want...
10:11 <@Nexxy> idank, you could <script src="/some.js"></script> that is served *from* Node.js locally
10:11 < mscdex> it's annoying how you cannot reply to a question without answering if you have less than some amount of "reputation"
10:11 < mscdex> on stackoverflow
10:11 < idank> i need to build a simple interface in a browser that can launch processes and do things that are normally not available in javascript
10:11 <@Nexxy> idank, so run node.js and use it to serve the page you load with your browser
10:11 <@Nexxy> idank, you're thinking backwards, basically
10:12 < poikon_> idank: simply put: no you can't
10:12 < idank> isn't that what i said earlier? :)
10:12 < azylman> Why do you need to do that?
10:12 <@Nexxy> no 
10:12 <@Nexxy> you said you wanted to put node.js in the browser
10:12 < idank> <idank> so i basically need the my node.js app to act as an http server and manually write the request?
10:12 <@Nexxy> which is not currently possible
10:12 < idank> ^ that
10:12 <@Nexxy> yep
10:12 <+mda> yes
10:12 < mscdex> YES
10:12 < hipsterslapfight> yah
10:12 <@Nexxy> YEAH~!!!!
10:12 < mscdex> WOO HOO!
10:12 <+mda> hell yea
10:12 < idank> :)
10:12 <@Nexxy> fuck yeah
10:12 <+mda> lol
10:13 <@Nexxy> wait, I have a gif for this
10:13 < mscdex> lucky, i only have one jpg
10:13 <@Nexxy> http://i.imgur.com/LD47S.gif
10:13 <+mda> haha
10:25 < MI61> joyent/node: Victor Costan master * e235bce : Fix crypto.hmac behavior with empty keys.  node 0.9.6 introduced Buffer c - http://git.io/FDUkLg
10:36 < AAA_awright> Blargh, Is there some way to log the code execution of a process?
10:38 < robbe__> AAA_awright, strace ?
10:38 < AAA_awright> robbe__: That's for system calls...
10:38 < robbe__> yeah, sry, forgot the channel for a second /
10:39 < AAA_awright> Oh come on, no one ever wanted to profile Node.js code?
10:39 < mscdex> dtrace?
10:39 < mscdex> heh
10:40 < RLaa> built-in v8 profiler not enough?
10:40 < AAA_awright> RLaa: It doesn't seem to print anything useful, like timestamp nor, well, anything
10:40 < AAA_awright> But maybe I'm missing something
10:42 < RLaa> well, you run node --prof benchmark.js
10:43 < RLaa> then it creates v8.log file
10:43 < RLaa> then you use node-tick-processor to view the file
10:44 < RLa> AAA_awright, does that work?
10:44 < AAA_awright> I'm not familiar with `node-tick-processor`
10:44 < RLa> check it out
10:45 < AAA_awright> Where?
10:45 < RLa> https://github.com/drewfish/node-tick-processor
10:50 < AAA_awright> "easy-to-install" but no Makefile?
10:52 < SomeoneWeird> npm install -g tick
10:52 < SomeoneWeird> maybe
10:52 < AAA_awright> RLa: That doesn't tell me anything either
10:53 < RLa> but does it tell something at all?
10:53 < AAA_awright> There's no references to any code whatsoever
10:53 < RLa> easy to install usually means npm command
10:54 < AAA_awright> Also a good few hundred lines of "line 12566: unknown code state: undefined"
10:54 < RLa> weird
10:54 < RLa> you got special build of node with v8's debug stuff disabled?
10:55 < AAA_awright> Idk about special
10:55 < AAA_awright> Standard node, system libraries
11:00 < gildean> AAA_awright: "easy to install" and then it says npm install....
11:00 < gildean> without the -g btw
11:00 < AAA_awright> I don't have npm, so...
11:01 <@Nexxy>  wat
11:01 <@Nexxy> > standard node
11:01 <@Nexxy> > don't have npm
11:02 < gildean> hmm, but the package.json on that module states: preferGlobal, so i guess they want you to install it globally
11:02 < mscdex> fight the man!
11:02 <@Nexxy> mscdex
11:02 < AAA_awright> It's a train wreck of a "package manager", right. So I don't install it. Not that hard.
11:02 <@Nexxy> wait, what? lol
11:03 < AAA_awright> ...?
11:03 <@Nexxy> how are you installing a "standard node" that's anywhere near current w/o installing npm?
11:03 < mscdex> `./configure --without-npm` i assume
11:05 < AAA_awright> Ugh that's right
11:07 < AAA_awright> But that's besides the point, is there just a simple program that'll say "call x(...)\n\tcall y(..)\n..."
11:08 < AAA_awright> Does profiler even keep that information?
11:31 < MI61> joyent/node: Fedor Indutny master * c34326b : test: fix tests after ECONNRESET patch - http://git.io/BYRivQ
11:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:40 < kmdm> Huh? So the problem appears to be that on RHEL5 the syscall(__NR_pipe2, ...); call doesn't return anything (the return value is still __NR_pipe2) and it doesn't touch errno so the errno == ENOSYS check fails since ERRNO was untouched by the syscall. (I've isolated this case from the node.js code-base as well!) ... *blames Redhat*.
11:41 < kmdm> That is to say: http://pastie.org/6124175
11:41 < kmdm> Is it just me, or is that very weird?
11:46 < bnoordhuis> kmdm: are you having libuv/node trouble?
11:47 < kmdm> I was, but I solved it
11:47 < kmdm> Not letting it do the __NR_pipe2 call works.
11:47 < bnoordhuis> hm, i've never seen that behavior before
11:47 < bnoordhuis> what kernel is that?
11:48 < kmdm>  2.6.18-8.el5 #1 SMP Fri Jan 26 14:15:14 EST 2007 x86_64 x86_64 x86_64
11:49 < bnoordhuis> odd. i know people are running libuv/node on 2.6.18 kernels without issues
11:49 < kmdm> I am, on another server... but that's a different kernel build
11:49 < bnoordhuis> what does strace print?
11:50 < kmdm> hm, I didn't do strace yet, just gdb stepping :)
11:51 < kmdm> syscall_293(0x7fff61357860, 0, 0x400580, 0x3559b49270, 0x355940d3c0, 0x7fff61357950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) = 0x125
11:51 < kmdm> fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0
11:51 < kmdm> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2aaaaaaac000
11:52 < bnoordhuis> weird
11:52 < bnoordhuis> it's as you say, it's just returning the sysno
11:52 < kmdm> it's like the syscall never happened, but it did, since rax got the __NR_pipe2 value and hence rc did cause it was never changed :/
11:53 < kmdm> so from that google group discussion I saw ages ago for RHEL5.1  - this was probably the issue
11:53 < bnoordhuis> what discussion was that?
11:54 < kmdm> The one you dabbled in (I think): https://groups.google.com/forum/?fromgroups=#!msg/nodejs/ePqzZ7rPdzU/2RErZBs32q8J
11:55 < kmdm> (I also refuse to trace the syscall entry point in entry.S any further ... xD)
11:55 < bnoordhuis> haha, right you are
11:56 < kmdm> The only possible node.js bug here is the segfault if pipe creation fails - but that might be pushing it :P
11:56 < bnoordhuis> i don't want to go pointing fingers but it looks and feels like a kernel bug to me
11:57 < bnoordhuis> i've seen somewhat similar behavior on some arm systems
11:57 < bnoordhuis> where the vendor added a couple of "secret" syscalls that overlap with later mainline syscalls
11:57 < kmdm> Yes, that bit is... but surely node.js shouldn't try to write to the pipes if they failed to be created and/or uv__handle_init() was never called
11:59 < bnoordhuis> no indeed
11:59 < bnoordhuis> how/where does that happen?
11:59 < kmdm> but anyway, I'm happy fixing it by removing the __NR_pipe2 call so it at least works - although I worry what else might be affected :/
11:59 < bnoordhuis> come to think of it, libuv checks that rc == 0 || errno == ENOSYS
12:00 < bnoordhuis> err, errno != ENOSYS
12:00 < kmdm> it does
12:00 < kmdm> and that would work if the syscall() set errno correctly :(
12:00 < kmdm> as it is if pipes fail... uv__Handle_init() isn't called but it seems like it continues if it worked given it later tries to write() to the pipes
12:00 < kmdm> but it's very minor really :)
12:00 < bnoordhuis> sorry, gotta run - back in 30 minutes
12:01 < kmdm> np
12:04 < kakeeeeee> events.js:71  throw arguments[1]; // Unhandled 'error' event  ^ Error: connect ECONNREFUSED  at errnoException (net.js:770:11)  at Object.afterConnect [as oncomplete] (net.js:761:19)
12:05 < kakeeeeee> help for that error
12:08 <@Nexxy> kakeeeeee, you're trying to connect to something that isn't listening
12:08 < kakeeeeee> how to overcome
12:09 <@Nexxy> perseverance
12:09 <@Nexxy> dedication
12:09 <@Nexxy> kakeeeeee, it's hard to say w/o a gist of what you're doing
12:11 < _ior> tls broken: http://nakedsecurity.sophos.com/2013/02/07/boffins-crack-https-encryptionin-lucky-thirteen-attack/
12:13 < _ior> and now lunchtime
12:17 < aandy> hey, i've had this "bug" on one of my node servers for a while. http://pastie.org/private/z40k9a0fjpju3l9zuefww can anyone point me in the direction of some debug module/tool that i can use to narrow it down? it seems rather cryptic to me
12:17 <@Nexxy> _ior, have you even read that article? lol
12:21 < wieshka> I am using Deployd (http://deployd.com/) - built on top of node.js and to match my needs, i have to create events, where i can call system exec from deployed module. Where should i start as i am not familiar of architecture of node.js modules
12:30 < aandy> (it was a http.get which i forgot to handle "error" events for, in case anyone else were curious)
12:58 < ggherdov> Hello. How do I import a JS module in the node REPL? for instance, say that I want to charge this file https://github.com/mbostock/d3/blob/master/d3.js in the JS environment in the REPL, to test out a couple of functions "on the fly". How do I do that?
13:01 < ggherdov> by REPL, I mean "shell", or "console"
13:06 < spion> ggherdov, the module must be a CommonJS module.
13:07 < spion> alternatively, you could instrument (wrap) it to provide window and document using the jsdom module
13:08 < ggherdov> spion: i see. I am googling for "commonjs", to find out what it is. Could you give me a hint?
13:08 < ggherdov> spion: and cool, didn't know that there is a module who can fake window and document
13:09 < spion> commonjs modules attach things they want to export to a global "export" variable instead of the global namespace (or window)
13:09 < ggherdov> spion: I see. thank you for the heads up!
13:10 < spion> then they can be used from other modules using a globally defined require() function: var mymodule = require('mymodule');
13:10 < spion> no problem :)
13:10 < fwg> spion: err... exports is *not* global. it's local to the module
13:10 < spion> oh right. a brain fart :)
13:11 < fwg> require btw is also not global ;)
13:11 < spion> right.
13:13 < spion> what happens behind is that the module is actually wrapped and local require, exports and module variables are provided.
13:17 < nico_> hi
13:17 < nico_> who is someone that use node and mqtt?
13:19 < spion> ggherdov, however if you want to use d3 to render raster images, then I suggest looking at phantomjs. (if you want svg then jsdom *should* do fine)
13:25 < _ior> nexxy sure, i never said it was an attack that was easy to execute in the wild
13:25 < _ior> but still :D
13:26 < ggherdov> spion: I see
13:43 < oberhamsi> parse streaming JSON - what's the best lib?
13:44 < fwg> oberhamsi: I use clarinet. I like that I can just .pipe() stuff into it
13:46 < oberhamsi> fwg: thanks looks good.. trying it now
13:47 < mscdex> node.js rules!
13:54 < kmdm> bnoordhuis: <random other info>Compiling my test st.c with -m32 makes it work fine as well.</random info>
13:54 < Ov3rTaf> ne1 can try connecting here : http://91.121.18.18:4004/ ty :)
13:55  * mscdex shakes a fist at people who throw strings instead of Error objects
13:55 < Vill> Hello Noders! Can You tell me, if it's ok to use Socket.IO with status "failing" ? Which version was stable?
13:58 < mscdex> Vill: whatever the latest stable is.... 0.9.13 or something
14:00 -!- mode/#Node.js [+o isaacbw] by ChanServ
14:01 < hhuuggoo_> hi.. I got some errors doing npm update, and now any npm operation i do results in, "Error: Cannot find module 'semver'"
14:02 <@isaacbw> argh, why are Q delays so... not working
14:03 <@isaacbw> oh nevermind
14:03 <@isaacbw> I'm just retarded
14:07 <@isaacbw> if you aren't using promises, you aren't cool
14:07 < hhuuggoo_> so now I'm trying to reinstall node from source, after ./configure, make reponds with multiple target patterns....
14:08 <@isaacbw> is it important that you use unstable node?
14:08 < creationix> isaacbw, I thought it was that you're uncool if you use promises
14:09 <@isaacbw> that's a common misconception
14:09 <@isaacbw> promises are, in fact, the coolest thing in the universe ever
14:09 < SomeoneWeird> pfft
14:09 < Sorella> They are not, but they're still a decent abstraction
14:10 < Sorella> In fact, I think someone should write a promise-based FS library (if one doesn't exist yet)
14:10 < creationix> my favorite part of last year's node summer camp was during the domain talk
14:10 <@isaacbw> here's an example of using promises in a way other than as a simple callback replacement: http://hastebin.com/kejuxadeje.js
14:10 < creationix> when domenic funally und
14:11 <@isaacbw> that's angular code, btw
14:11 < creationix> when domenic finally understood what node domains were and said "But promises already solve those problems"
14:11 <@isaacbw> I haven't found them quite as useful server-side
14:11 <@isaacbw> heh
14:11 < Sorella> Promises don't work as callback replacements though, one can use they that way, but the interesting thing about them is that they represent an actual value you can manipulate before it's ready for you. It's like bringing some kind of laziness over to JS.
14:11 < creationix> isaacbw, did you see my halfway proposal between promises and node style callbacks?
14:11 <@isaacbw> yea, I think most of the promise hate is because people see them as a more verbose replacement for callbacks
14:11 <@isaacbw> which is a poor use of promises
14:12 <@isaacbw> creationix, nope, do you have a link?
14:12 <@isaacbw> just so everyone's clear, I'm not isaac/s
14:12 <@isaacbw> :P
14:12 < creationix> I know :)
14:12 < medikoo> Sorella: https://github.com/medikoo/fs2 returns promises and works with callbacks as well
14:12 < creationix> http://howtonode.org/do-it-fast
14:12 < creationix> proposed it back in 2010 when node still had something called "promises" and was getting rid of it
14:13 < creationix> isaacbw, the basic idea is you return a closure that accepts the callback and errback
14:13 < creationix> or from a promise point of view, it's a promise that's nothing more then the .then() function
14:14 < creationix> it gives callbacks code many of the benefits (but not all) of promises without having to use a new abstraction and library
14:14 <@isaacbw> creationix, oh, this is really interesting
14:14 < spion> basically the main thing is having a return value which you can pass around :)
14:15 < creationix> yep, I've got that benifit
14:15 < creationix> now there are many things real promises can do this can't
14:15 < creationix> I'm not sure you can chain these
14:15 <@isaacbw> chaining?
14:15 <@isaacbw> mm
14:15 <@isaacbw> (ninja)
14:15 < creationix> I'm told the main benefit of promises is chaining them
14:15 < creationix> a promise can return a new promise
14:15 <@isaacbw> you can chain a bunch of promises and the chain returns a new promise which represents the collective
14:15 < creationix> so sequential actions are promise.then(function () {}).then(...).then(...)
14:16 < creationix> with my abstraction there is no library to implement the chaining
14:16 <@isaacbw> but I do like your syntax much more than having if(err) { } else { } in every callback
14:16 < Sorella> A promise always returns a new promise (or should).
14:16 < creationix> though since there is a return value you can manipulate, it's trivial for a control-flow library to manage the continuatinos
14:16 < creationix> *continuations
14:16 <@isaacbw> Q does a good job of abstracting promises and values
14:16 < Sorella> Also, sequentially(doX, doY, doZ) is easy with promises.
14:16 <@isaacbw> values are treated as promises fulfilled with that value
14:17 < creationix> I don't always like promises, but then I do, I like Q
14:17 < Sorella> when doX, doY and doZ are asynchronous functions
14:17 < medikoo> creationix: simple comparison of sequential ops configuraiton: async: https://gist.github.com/othiym23/4737859#file-asynced-js promises: https://gist.github.com/medikoo/4737974
14:17 <@isaacbw> promises are one situation where operator overloading could be really neat in js, because you could treat promises as normal values to the very end
14:18 < Sorella> You can "hack" it in v8. Benvie did it a while ago iirc
14:18 < creationix> isaacbw, think so?
14:18 < spion> what I believe is the issue here is conflating error handling and return values into one
14:18 < spion> some people prefer C-style error handling
14:18 < spion> some prefer exception-style error handling
14:18 <@isaacbw> or whatever that ruby thing is for handling unknown properties
14:19 < Sorella> Too much people are non-functional programmers, I guess ;3
14:19 < spion> but I think most would agree that returning a function which can be passed a callback is more useful than passing the callback to the original function
14:19 < creationix> spion, that's my thinking
14:19 < creationix> it's not as powerful as promises
14:19 < creationix> but a lot more powerful than callback-last
14:19 <@isaacbw> creationix, yea, something like promiseA + promiseB would return a promise which is fulfilled with the sum of the promise fulfillments
14:19 <@isaacbw> er
14:20 < creationix> isaacbw, so since we lack operator overloading you could just write your own math libraries
14:20 < creationix> a.add(b)
14:20 < creationix> it gets ugly though
14:20 <@isaacbw> yea, I was thinking of something like that
14:20 <@isaacbw> honestly though I don't know how often you have promises which are fulfilled by numerical values
14:20 < jrajav> It's a good thing we lack operator overloading too
14:21 < jrajav> It prevents silly ideas like + for promises
14:21 <@isaacbw> heh
14:21 <@isaacbw> a . operator would be more useful
14:21 < Sorella> Operator overloading does make reasoning about things a little bit more difficult. I just wish JS had infix functions.
14:21 < jrajav> I think we should have a . operator anyway
14:21 < Sorella> (that's one of the reasons I use LiveScript)
14:21 < jrajav> A separate string interpolation operator, that is
14:21 < creationix> Sorella, what languages have infix functions?
14:22 < creationix> other than the "+", "-", etc..
14:22 < Sorella> creationix: Haskell, Magpie, LiveScript.
14:22 < Sorella> There are possibly others, but none that comes to my mind right now.
14:22 < jrajav> Haskell's the only one I knew about
14:22 <@isaacbw> I wouldn't really suggest operator overloading, but it could make promises really interesting
14:23 < Sorella> LiveScript's implementation is influenced by Haskell's. So it's just: foo `concat` bar
14:23 < spion> I think scala also supports infix
14:23 < Sorella> I guess. Scala does that by messages though, no?
14:23 <@isaacbw> maybe something that parses js-ish expressions from strings
14:23 < creationix> Sorella, 1 `add` 2 ?
14:23 < jrajav> Sorella, do you run into any noticeable performance issues with LiveScript?
14:23 < Sorella> creationix: yep.
14:24 < jrajav> I imagine it's even more difficult to optimize (not to mention less mature) than Haskell
14:24 < creationix> but "add" is a local/global value, not a property of "a" or "b" right?
14:24 < Sorella> jrajav: not really. It's a close compilation (almost 1-1), like CoffeeScript. So, unless you curry all your functions, it should be okay.
14:24 <@isaacbw> evalQ('a + b', a, b).then(function(sum) { ... })
14:25 < Sorella> creationix: yes, it's a local function. Say: `function add(a, b){ return a + b }; var c = a `add` b;`
14:25 < Sorella> Ignore the ` symbols around the code.
14:25 < creationix> right, so that wouldn't help where we want operator overloading
14:26 < creationix> or "add" would have to know about all types
14:26 < creationix> but it could at least know about real values and promises I guess
14:27 < jrajav> Why would "add" have to know anything about the types?
14:27 < jrajav> That would be precisely equivalent to add(a, b)
14:27 < creationix> jrajav, right
14:27 < creationix> so if I pass a number and a promise, what will it do?
14:27 < jrajav> Whatever + will do
14:27 < jrajav> THAT'S the issue, not the infix
14:27 < jrajav> But you could do whatever you want in the function
14:27 < Sorella> creationix: nope. If LiveScript did have multiple dispatching (which it doesn't implement, but I've been thinking about trying), then it could. For example, you could first define: `add :: Int -> Int -> Int => (a, b) --> a + b; add :: Promise -> Promise -> Promise => (a, b) --> /* add both when they're fulfilled */`
14:28 < creationix> Sorella, that would help
14:28 < Sorella> And in that case, you'd have a single local `add`, which would dispatch to the correct underlying function definition depending on the type
14:28 < Sorella> But it's difficult to optimise that reasonably without static guarantees
14:28 < creationix> or the promises could have an "__add"  property
14:28 < creationix> we do that today in node with __inspect
14:29 < creationix> and .toJson
14:29 < creationix> so that util.inspect and JSON.stringify know how to handle custom values
14:29 < creationix> or maybe a generic .valueOf
14:29 < creationix> that's async and promise based somehow
14:30 < mscdex> .jsonInspectionValueOf
14:30 < Sorella> You can optimise dynamic dispatches with by creating and simplifying a DAG with all the possible values, but I'm still reading the researches on that =/
14:30 < tongcx> hi guys, do you think socket.io will replace ajax?
14:30 <@isaacbw> or even something like method_missing (I think) in ruby for properties, so you could have something like promise.prop1 which will return a promise fulfilled by prop1
14:30 < Sorella> isaacbw: you can do that with Proxies
14:30 < mscdex> tongcx: i think you misunderstand what socket.io is
14:31 < tongcx> mscdex: probably, but i feel socket.io can handle all ajax functionality
14:31 < Sorella> tongcx: I think you misunderstand what Ajax is. Oh, wait, Ajax is just a buzz-word anyways
14:31 <@isaacbw> Sorella, oh neat. How widely supported is this?
14:31 < Sorella> Not sure if it's implemented in v8 yet, I think it is.
14:32 < spion> i think the status is assigned
14:32 < mscdex> tongcx: socket.io is just a high-level abstraction
14:32 <@isaacbw> hmm
14:32 < spion> err Accepted
14:32 < mscdex> tongcx: and "ajax" is just one transport it can use
14:32 <@isaacbw> Sorella, very cool
14:32 < spion> http://code.google.com/p/v8/issues/detail?id=1543
14:32 < Sorella> tongcx: socket.io doesn't work with REST endpoints. XHR doesn't handle real-time communication. That's the difference :3
14:32 < tongcx> mscdex: yes, but do that means we will work directly with socket.io and never think about ajax?
14:33 < luminous> hi! I am trying to learn something new and so have an idea for which I can use node.js + socket.io. I have gotten basic node.js server hello world and echo() working.. and so moved on to the socket.io simple stuff. I am confused what to do about the client.html example on http://socket.io/#how-to-use
14:33 <@isaacbw> but it looks like I'll have to wait
14:33 < Sorella> tongcx: please, stop saying Ajax. It's a silly buzz-word, really. No one uses "Asynchronous JavaScript and XML" (specially the XML part)
14:33 < luminous> specifically, do you need to do anything special for node to host that file?
14:33 <@isaacbw> xhr is the preferred term
14:34 < spion> and that one still contains XML :)
14:34 < tongcx> Sorella: sorry, by ajax, I mean $.ajax in jquery
14:34 <@isaacbw> :(
14:34 < luminous> I have nginx on :80, so I am running node on another port, but I could also have nginx host client.html
14:34 < mscdex> tongcx: i dunno, that's up to whoever. it's much like how developers can choose between "plain js" and jquery
14:34 < Sorella> tongcx: $.ajax in jQuery does lots of stuff.
14:34 <@isaacbw> I say ajax a lot though
14:35 < tongcx> can someone explain me a little bit more on REST endpoint?
14:35 < mscdex> my pillow is a rest endpoint!
14:35 < tongcx> i agree, and i like to spend time on my pillow
14:35 < iwalkbarefoot> luminous: are you also using the app.js example from that page?  You'll see that the function handler (req, res) is reading from the index.html file on any request essentially
14:35 < creationix> tongcx, socket.io is way overkill if you just want to query a webservice and get a single answer
14:36 < luminous> tongcx: REST is an "Architectural Style" - a way to layout and a set of principals for designing usable APIs
14:36 < tongcx> much more overhead than xhr, right?
14:36 < creationix> a single xhr (or generally said, http request) is much better
14:36 < Sorella> tongcx: XHR (XMLHttpRequest) is one of the DOM APIs it abstracts. That lets you query some web page through the HTTP protocol, thus you can use it to interact with REST APIs (which several websites provide). It also abstracts over JSON-P (JSON with Padding), which is a "dirty hack" for handling cross-domain interaction over HTTP where the domain doesn't provide a CORS alternative, or the browser does not support it. JSON-P uses a script
14:36 < Sorella> tag to perform a GET request on an HTTP server on a particular end-point, which then returns valid JS code to be executed (which is a potential security risk)
14:36 <@isaacbw> socket.io is useful for abstracting persistent connections to a server
14:37 < creationix> tongcx, socket.io maintains a persistent connection to a server so either side can push data to the other
14:37 < tongcx> i agree, so for REST, do people only use GET and POST? I read somewhere DELETE and PUT are not considered good practice
14:37 < BlakeRG> does anyone know where the log module stores it's log files?
14:37 < luminous> iwalkbarefoot: ah! so that example has it already, and that would be why it didn't work for me out of box.. Imade index.html client.html
14:37 <@isaacbw> GET POST DELETE and PUT are all fine
14:37 < Sorella> tongcx: WebSockets are a protocol for real-time communication between server and client with low latency, it was designed because people were misusing XHR for doing push services (where the server sends the data to the client).
14:37 < luminous> tongcx: there's a lot of FUD out there
14:37 <@isaacbw> and if you want to be crazy, use PATCH as well
14:37 < luminous> hah
14:38 < luminous> what's crazy about PATCH?
14:38 < tongcx> i think people gave me very good infos
14:38 < tongcx> clarify some of my misunderstanding, make the big picture clearer
14:38 < Sorella> Google APIs use PATCH to update part of a Resource
14:38 < tongcx> thanks a lot, guys
14:39 <@isaacbw> the reason people say anything but GET and POST is bad practice is because browsers might give you trouble, but I don't know how much of an issue that is now
14:40 < luminous> iwalkbarefoot: actually.. I used the super bare minimum example at the top
14:40 < Sorella> isaacbw: so, with Proxies, you could potentially hack in multiple dynamic delegation, like you have in other prototypical languages :3
14:40 < luminous> iwalkbarefoot: so I see how the second example is using the http server.. what would you do in the case of using that first example on socket.io?
14:40 < Trex005> Hello folks.  I'm having a scope issue I was looking for some help with.  I do all my requires using var, but then when I need to call a module from another module it's not defined.  Is there a way to do that without removing all the var and making everything global.
14:40 <@isaacbw> Sorella, it looks like you can't proxyify existing objects though, which is too bad
14:41 < Sorella> isaacbw: what do you mean?
14:41 < Sorella> I haven't read the specs recently, just when they were first designed, actually.
14:41 <@isaacbw> I'm only looking at firefox's implementation. I don't know how close it is to the es6 stuff
14:41 < iwalkbarefoot> luminous: so if I understand it correctly node is currently not serving your index.html file?
14:41 < ggherdov> Hello. In the node REPL (or 'shell', or 'console') is there a way to set a different limit for the maximum level at which nested objects are pretty-printed? for instance, if I input a = [ [ [ [ [] ] ] ] ]; the pretty printer only show [ [ [ [Object] ] ] ] i.e. it cuts off two nesting levels
14:42 < luminous> iwalkbarefoot: sorry, I confused you with the link. I started with the first example: http://socket.io/#home
14:42 < luminous> iwalkbarefoot: in this case, how does the client get index.html?
14:42 < Sorella> Trex005: there is a way of making things global, but *YOU DON'T WANT TO DO THAT*. Global variables add tight coupling and defeat the use for modules. What you should probably do is just `require` the module in your other modules, or make them parametric, so you can pass objects over to them.
14:43 < iwalkbarefoot> I think that example assumes that you're hosting the file elsewhere
14:43 < Trex005> Sorella: alright, I'll probably just do the require in the other modules.  Thanks.
14:43 < Sorella> Trex005: say, moduleA requires an object that moduleB and moduleC should get. You make moduleB and moduleC return a function that receive as a parameter the object moduleA should provide, and then, when you require moduleB from moduleA you pass that object as parameter.
14:44  * Sorella loves parametric modules
14:44 < luminous> iwalkbarefoot: where is the actual socket.io client library? I woudl think it'd be in the module installed with npm, no?
14:45 < DarkArgon> do you want the client lib for node or the browser?
14:45 < luminous> DarkArgon: the browser
14:45 < luminous> this? node_modules/socket.io/node_modules/socket.io-client/node_modules/ 
14:45 < Trex005> Sorella: unfortunately, it's a very complex app, so I'd need way too many extra params.  Would love to do it that way to save memory though.
14:45 < iwalkbarefoot> luminous: it is, whenever you have io configured per #how-to-use it will serve the file via /socket.io/socket.io.js
14:45 < Sorella> Trex005: even doing requires in other modules you don't waste memory on new objects. Node caches the `require` calls for you
14:46 < luminous> DarkArgon: are those libs found in different places?
14:47 < luminous> iwalkbarefoot: do you know where I could "extract" the browser lib from, so I could host with nginx?
14:47 < Trex005> Sorella: so if I use a module from a given socket connection, and I have 100 of those connections, it won't need to load those all as objects?
14:47 < Trex005> Sorella: Sorry. load them all as modules.
14:48 < Trex005> Sorella: ie, it acts like a static class in most other languages.
14:48 < iwalkbarefoot> luminous: sure it's under node_modules/socket.io/lib
14:48 < DarkArgon> https://github.com/LearnBoost/socket.io-client/blob/master/socket.io-client.js
14:48 < Sorella> Trex005: sorry, you lost me. What do you mean `a module from a socket connection`? Are you dynamically loading modules from the internet?
14:48 < luminous> ah
14:48 < luminous> thanks iwalkbarefoot & DarkArgon 
14:50 < Trex005> Sorella: I was loading the modules from my base app file.  However, every time someone connects to my server (using socket.io) I run their specific commands, which use modules that require other modules.  There could be 500 connections at a time.  So my question is, even with caching, wouldn't it still need to load those modules individually?
14:51 < cloudbender> why not have the modules loaded and give each new connection a reference
14:53 < cloudbender> or perhaps I presume too much
14:53 < iwalkbarefoot> luminous: i'm assuming you probably took the HTTP link as it was easier, but if you want the version that came from your NPM install the path is actually node_modes/socket.io/node_modules/socket.io-client/dist/socket.io.min.js .  Sorry about that
14:53 < cloudbender> good day nodesters
14:54 < mscdex> I'm your MC Double Def DP, that's for Disk Protector for you and the posse.
14:54 < Sorella> Trex005: when you do `require('foo')`, node will resolve the path, load the module and execute it. When you do `require('foo')`, node will resolve the path, verify that there's already a module like that loaded and give you back the Module object. At least, if I remember correctly, someone with more knowledge of the internals of `require` than me can probaly correct me if I'm wrong.
14:55 < Trex005> awesome... well that is what I was hoping for.
14:55 < Sorella> So you save file reading, parsing and evaluation, but still has some overhead. If you can avoid the path resolution overhead, good. If not, well, you're going to have some slight overhead on each incoming connetion
14:55 < Trex005> Sorella: Wonderful.  Thanks
14:56 < TechnoCat> hello nodesters
14:56 < cloudbender> lol
15:09 < cloudbender> This is my last day of 'vacation holidays'
15:10 < cloudbender> I've spent the entire time working node
15:10 < cloudbender> I have no regrets, for the first time in years
15:10 < cloudbender> Well, I did go see 'skyfall'
15:12 < mrvisser> Any require.js-savvy folks in here that may not be hanging out in #requirejs by any chance?
15:13 < mscdex> skyfall.js!
15:13 <@isaacbw> are you using it with node?
15:14 < mrvisser> isaacbw: yes I am
15:14 <@isaacbw> my first question is: why
15:14  * Sorella assumes people using Node are more likely to be using CommonJS modules in the front-end if they do front-end stuff
15:14 < jocafa> mrvisser:  whatcha need?
15:15 < Sorella> My second question is: no, really, why?
15:15 < mrvisser> for concat and minify of the modules ?
15:15 <@isaacbw> third question: why?
15:15 < jocafa> i use requirejs a *ton* client-side, and do server-side optimization (not at runtime)
15:15 < Sorella> What does AMD provides that isn't better handled by CommonJS
15:15 <@isaacbw> why would you want to minify node modules
15:15 <@isaacbw> do you mean you're using it to minify client-side js and deploy it?
15:15 < mrvisser> isaacbw: our front-end build is managed by grunt and node
15:15 <@isaacbw> aahhh
15:16 <@isaacbw> there we go :)
15:16 <@isaacbw> we thought you were using it as a replacement to node's module api
15:16 < mrvisser> no no
15:16 < mrvisser> jocafa: I'm running into the infamous "Timeout while loading moduels..." error
15:16 <@isaacbw> which is advertised on require.js's site
15:16 < jocafa> i've been considering moving from my sexy makefile over to grunt…
15:16 <@isaacbw> :\
15:17 < mrvisser> jocafa: I've gone through the "common problems" section, I don't think they are impacting me: http://pastebin.com/Y4JRVTe3
15:17 < Sorella> isaacbw: they... advertise themselves as a replacement for Node's module API?
15:17  * jocafa looks
15:17 <@isaacbw> Sorella, they do
15:17 <@isaacbw> http://requirejs.org/docs/node.html
15:18  * Sorella still thinks front-end devs should use CommonJS modules and NPM.
15:18 < mrvisser> jocafa: so the thing that really confuses me is, if I switch out the alias of "oae.api.i18n" in the define statement for the path "oae/api/oae.api.i18n", things seem to work fine
15:18 < mrvisser> it appears to just be the alias that is causing problems
15:18 < Sorella> isaacbw: that's really silly. There's nothing that AMD provides that CommonJS doesn't do better.
15:18 <@isaacbw> yea it is
15:19 < jocafa> i ♥ amd… for client-side.
15:19 < cloudbender> << is paying attention
15:20 < Sorella> jocafa: may I ask why?
15:20 < amurdaca> other thank playing with express and build websites and apis what can i do with node????
15:20 < jocafa> mrvisser:  i was going to say something about having two dots in the path, but there are already a couple of other lines that have 'em
15:20 < amurdaca> *than
15:20 < cloudbender> everything ?
15:20 < mrvisser> jocafa: yea. another thing I was thinking of is maybe have "oae.api" *and* "oae.api.i18n" as modules ?
15:20 < amurdaca> cloudbender everything what?!
15:20 < jocafa> Sorella:  modular development, selective loading, hand-tuned delivery and optimization
15:20 < cloudbender> Or should I say almost anything
15:21 < amurdaca> can you make me an example?
15:21 < BlakeRG> how do i get the type of a var in JS?
15:21 <@isaacbw> typeof
15:21 < Sorella> amurdaca: I'm currently writing an OS on it. Uglify (a minifier is written on it). NWM (a Window Manager for X) is written on it. Desktop apps are written on it.
15:21 < cloudbender> TypeOf
15:22 <@isaacbw> and/or instanceof
15:22 < chuckpreslar> www.npmjs.org - there are plenty of non express examples to browse through amurdaca :)
15:22 < amurdaca> Sorella :O
15:22 <@isaacbw> Sorella, I just put you on my crazy list
15:22 < Sorella> jocafa: I think the selective loading (by which I guess you mean the on-demand) is the only part you can't do with CommonJS.
15:22 < jocafa> Sorella:  right, which is *great* for client-side
15:23 < jocafa> mrvisser:  the error message on line 43 looks very odd
15:23 < cloudbender> node was designed as a server-side technology
15:23 < Sorella> Hm. I haven't had problems with CommonJS by making a single bundle and delivering it with CommonJS yet, but perhaps I haven't tackled overtly complex problems yet?
15:23 < cloudbender> but it's not chained to the server-side
15:24 < MI61> joyent/libuv: Ben Noordhuis master * b6f72e5 : linux: fix O_CLOEXEC/O_NONBLOCK defines - http://git.io/HB7A5g
15:24 < Sorella> server-side is a really weird term here.
15:24 < cloudbender> yes it is
15:24 < cloudbender> sorry
15:24 < jocafa> Sorella:  when optimization time comes, i like to bundle a lot of the common files together, then lazy load others as needed… for instance, why load the code for a very complex widget if it's only used in one spot
15:25 < Sorella> I'd say that phrasing it as "writing servers is not the only thing you can do with it" is a better way of saying that :3
15:25 < jocafa> mrvisser:  any chance you can get a stack trace on that error?
15:25 < tommydudebreaux> @amurdaca - node is great for building lightweight proxy services, aggregate services, etc.  It is very small and efficient.  it is great for scripting, building, etc.  Lots of people use it for build process or other tooling (grunt being a popular tool there)
15:26 < mrvisser> jocafa: I cannot, there seem to be no other errors except for the timeout itself
15:26 < mrvisser> jocafa: oh wait, I can get the stack trace for the timeout error :)
15:26 < mrvisser> one sec
15:26 < Sorella> jocafa: yes, that's one of the good parts of it. But I'm really thrown away by AMD syntax.
15:26 < jocafa> yeah you should be able to break on exceptions :)
15:27 < amurdaca> mmm i still don't have anything to do other than webdev with node atm lol
15:27 < jocafa> doublecheck your network pane too, to see what url it's trying to load
15:27 < amurdaca> if i need a system app i'll go for c++/c 
15:28 < amurdaca> i see node as server oriented.don't know to explain why
15:29 < Sorella> isaacbw: heh. I'm not going to use node all the way down to the bootloader (I can't even do that ;3). It's more of an abstraction over a bare host OS (Linux now, but could be anything), with a tagged virtual File System implementation, its own security layer, and a websocket API for communicating with the WM in a WebKit browser. I could bundle that all as a single Linux distro, though.
15:29 < cloudbender> amurcada the only thing keeping it out of the browser, is the browser(S), for now
15:29 < jocafa> amurdaca:  here at work, we once built a little node app that checked the state of our builds and sent that information to an arduino, which lit up ping-pong balls with LEDs to show us if anything was broken :)
15:30 < Sorella> jocafa: ahaha, neat :3
15:30 < mrvisser> sorry jocafa just resetting some config to get the same error
15:31 < jocafa> np
15:31 < jocafa> that LED build monitor is actually sitting right by me… in pieces.  i need to rebuild it and make it modular
15:32 < Sorella> amurdaca: Node lets you do lots of things using a very high-level language (JS). If you don't need to do extensive processing, you can save up on programming time and complexity by using a higher-level implementation to write your app.
15:32 < jocafa> (and probably just use bare AVR instead of an Arduino)
15:32 < Sorella> amurdaca: and you get easy concurrency through the event poll.
15:32 < Sendoushi> guys... i'm having this http://pastebin.com/UseyYBcA doing "sudo npm install" under a folder which has a package.json. ideas on what is the problem?
15:33 < Sendoushi> i've changed to static ip maybe that's the problem...
15:33 < Sorella> amurdaca: and you have plenty of bindings of cool stuff that can be provided as C++ modules. So, you can use GTK, Qt, etc.
15:34 < mrvisser> jocafa: This is the most info I can get: http://pastebin.com/MSaBSDam
15:35 < mrvisser> basically it's just a timed loop that determines that the resources haven't loaded yet. don't think it's very helpful
15:35 < jocafa> doh
15:35 < jocafa> check network pane for the actual request?
15:36 < mscdex> Sendoushi: are you able to reach https://registry.npmjs.org/stylus from that machine?
15:36 < mscdex> via curl, etc ?
15:36 < Sendoushi> got it back to automatic dhcp and it's working
15:36 < Sendoushi> the problem was the static ip
15:36 < mscdex> ah
15:36 < Sendoushi> i have to check it later
15:37 < mrvisser> jocafa: there were many requests leading up to it as it loaded resources
15:37 < Sendoushi> it doesn't recognize that -t. any idea why? ./node_modules/express/bin/express -t jade -c stylus
15:37 < Sendoushi> "unknown option -t"
15:38 < mrvisser> the latest was for /shared/vendor/js/trimpath.js.. and there was already a request for /shared/oae/api/oae.api.i18n.js previously before this error occurs as well.
15:38 < jocafa> panorama of our dev space, you can kinda see the projector wall: https://twitter.com/reddshack/status/281868174004191232/photo/1
15:38 < jocafa> does oae.api.i18n.js contain a define() that actually returns something?
15:39 < jocafa> i don't know how many times i've forgotten to return something :P
15:40 < mrvisser> jocafa: no it doesn't return anything...
15:40 < mrvisser> interesting, others do though. what should it be returning?
15:41 < mrvisser> jocafa: The define statement takes in an "exports" object that it uses to bind exported functions onto
15:41 < mrvisser> should it return that exports variable?
15:42 < jocafa> ohh you're using that notation
15:42 < jocafa> i've always used:   define(['foo', 'bar'], function (foo, bar) { var Baz = stuff;  return Baz; });
15:43 < jocafa> i'm not very familiar with the other notation
15:43  * jocafa checks docs
15:43 < mrvisser> right. maybe I'll try and switch it
15:44 < jocafa> are you doing this?  http://requirejs.org/docs/api.html#cjsmodule
15:46 < mrvisser> jocafa: kinda, more like this https://github.com/jrburke/requirejs/wiki/Differences-between-the-simplified-CommonJS-wrapper-and-standard-AMD-define#wiki-magic
15:46 < mrvisser> just the "exports" dependency
15:46 < jocafa> ah ok
15:46 < jocafa> hrm, probably not the problem then
15:46 < jocafa> make sure you're using the latest version of requirejs?
15:46 < mrvisser> the thing that gets me is just switching the alias for the path triggers the problem
15:47 < jocafa> yeah
15:47 < mrvisser> we have 2.1.1 in there
15:47 < jocafa> current is 2.1.4
15:48 < mrvisser> yea, will upgrade that, fingers crossed
15:49 < mrvisser> no dice :(
15:49 < cloudbender> cut the crap whoever
15:50 < jocafa> mrvisser:  hrm, i'm running out of ideas :T
15:50 < mrvisser> doh. what a pain. I think we might have some circular dependencies in here
15:51 < mrvisser> I wonder if it's a race condition of some sort
15:51 < BlakeRG> what's the best way to strip HTML from a string? something like PHP's strip_tags() would be nice.
15:54 -!- mode/#Node.js [+o isaacbw] by ChanServ
15:57 < gildean> BlakeRG: i wrote a stupidly simple module for that: https://npmjs.org/package/html-strings
15:58 < mrvisser> jocafa: thanks any way for your help, much appreciated
15:58 < harbhub> what is the best way to protect my server?
15:58 < mrvisser> I'm going to start dropping console.log's into require.js I suppose :(
15:58 < harbhub> i am already only serving public files
15:58 < jocafa> mrvisser:  no prob, sorry i wasn't more help :T
15:58 < BlakeRG> gildean: i don't need to escape HTML i need to remove it
15:59 <@isaacbw> harbhub, there are lots of different things to protect it from
15:59 < gildean> BlakeRG: that's a lot more difficult
15:59 <@isaacbw> so there's no short answer to that
15:59 < harbhub> can we take it from the top?
15:59 < eaz> a one, two, three
15:59 < harbhub> what are those things? how do you prevent each one?
15:59 < eaz> :)
15:59 < gildean> BlakeRG: but for example you could use something like cheerio to load the html, and then just .text() it
15:59 < harbhub> ideally, no one can see the files on my server (other than the public files)
16:00 < harbhub> ideally, all the passwords stored on the server are hashed
16:00 <@isaacbw> harbhub, not over irc ;)
16:00 <@isaacbw> you should buy a book
16:00 < harbhub> what book?
16:00 <@isaacbw> or listen to some computer science lectures on the web
16:00 <@isaacbw> software engineering, probably
16:00 <@isaacbw> I don't have any recommendations
16:00 <@isaacbw> it's a complex topic
16:01 <@isaacbw> http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-857-network-and-computer-security-fall-2003/
16:02 <@isaacbw> that's probably quite a bit more than you need, but it could give you an idea of what to read about
16:03 <@isaacbw> harbhub?
16:03 <@isaacbw> :(
16:03 <@isaacbw> someone say something
16:03 < DarkArgon> i wanna ensure that a file only exists once. best practice? md5 is not secure enough
16:04 < amurdaca> sha1
16:04 < amurdaca> lol
16:04 <@isaacbw> why would security matter for matching files
16:04 < DarkArgon> one md5sum can match multiple files
16:04 <@isaacbw> not really
16:05 <@isaacbw> possibly, yes
16:05 <@isaacbw> but not really
16:05 <@isaacbw> unless you're mega
16:05 <@isaacbw> but even then
16:06 <@isaacbw> it would be really really really really unlikely
16:06 < fwg> where's the hurt in using a longer hash?
16:06 < harbhub> hey isaacbw
16:07 <@isaacbw> did you see the things I said?
16:07 < harbhub> sorry i was searching the web for software engineering lol
16:07 < harbhub> yes i just read them
16:07 <@isaacbw> fwg, it could be slow
16:07 < fwg> well of course. but that is *always* the tradeoff. precision vs. speed of computation.
16:08 <@isaacbw> that's the answer to your question though
16:08 < harbhub> ok
16:08 <@isaacbw> when speed is an issue, you want to find the 'good enough' solution
16:08 < harbhub> thank you, i will slowly read that MIT course
16:08 < harbhub> and learn from it
16:08 < BlakeRG> i'm going to use node to build missile guidance software
16:08 < harbhub> cool
16:08 < harbhub> do it
16:09 < harbhub> that should be easy
16:09 < harbhub> javascript controlling inputs and outputs of a missile heh
16:09 <@isaacbw> keep in mind that it's a grad level course
16:10 < harbhub> isaacbw, i've taken engineering graduate courses
16:10 < harbhub> so i will be able to decipher this one just the same
16:10 < harbhub> <-- engineer
16:11 < DarkArgon> if 2 different files have the same md5sum, do they also have the same sha1?
16:12 < fwg> that depends if they contain the same things
16:12 < DarkArgon> 2 different files
16:13 < fwg> well what do you mean by 'different'?
16:13 < DarkArgon> different content
16:13 < DarkArgon> but same md5
16:14 < fwg> that is a highly unlikely event but if that would be the case, having the same sha1 is even more unlikely
16:14 < DarkArgon> ok problem solved :D
16:14 -!- mode/#Node.js [+o isaacbw] by ChanServ
16:15 < geNAZt> diffenerent content _can_ have the same hashes
16:15 < DarkArgon> what do big file hosters do? compare the files bitwise?
16:15 < fwg> no
16:15 < fwg> hash is good enough
16:15 < geNAZt> no via hashes :D
16:16 < DarkArgon> just oldschool md5/sha1?
16:16 < bradleymeck> DarkArgon: only compare if sha matches
16:16 < bradleymeck> then use ETAGs for sanity
16:18 < geNAZt> here is a little guide on md5 hash collision: http://www.mathstat.dal.ca/~selinger/md5collision/
16:19 < foobar321> Hi all. Was express or any other engine created in mind that I can use the same language on the server and client side? Let's suppose I have some sophisticated function called validateForm() and I want this function to be both client and server-side. Where should I put it? Into app.locals ? And then print it? It does not fit :/
16:19 < DarkArgon> ok i'm not so into crypto. sha1, sha2, sha3. what should i use?
16:22 < bradleymeck> foobar321: browserify + resourceful once you serialize your form
16:22 < Ov3rTaf> mongodb is a must for nodejs ? :)
16:22 < geNAZt> Ov3rTaf: no
16:23 < geNAZt> DarkArgon: i would use sha1 it has lesser collisions
16:23 < Ov3rTaf> what would u preconize ? :)
16:23 < geNAZt> DarkArgon: but it also uses more bytes that you have to store
16:23 < geNAZt> Ov3rTaf: well that depends on your use case
16:23 < bnoordhuis> DarkArgon: crc16. it's superfast!
16:23 < Ov3rTaf> realtime multiplayer game ^^
16:24 < Ov3rTaf> node/socketio
16:24 < geNAZt> Ov3rTaf: thats not a use case
16:24 < Ov3rTaf> oO
16:24 < geNAZt> do you need to store persitent data ? i think yes
16:24 < Sorella> Ov3rTaf: what are you trying to build?
16:24 < bradleymeck> Ov3rTaf: if syncing state for game logic id use _changes from couch
16:24 < geNAZt> do you have data that builds ontop of each other ?
16:25 < Ov3rTaf> atm nothing building :) i'm at very start, searchin' what nosql to use
16:25 < geNAZt> do you search much ? do you write much into database ? do you sort ? do you use indicies ?
16:25 < DarkArgon> if sha1 is better than sha2 why does it has the 2? just faster?
16:25 < Sorella> Ov3rTaf: you're deciding what DB to use before you decide what data concerns you have to consider? Don't do that.
16:25 < mscdex> DarkArgon: it's twice as sha-y
16:26 < Sorella> You're choosing technology before deciding what problem to solve.
16:26 <@isaacbw> mscdex, are there any issues with sending a new imap request before the last one has returned?
16:26 <@isaacbw> do I need to implement my own queuing?
16:26 < Sorella> Say, you say "Oh, right I'll use Node", and then "Now, I want to write applicatiosn to run on small-end embedded systems". It just won't work.
16:26 < Sorella> low-end, even.
16:26 < geNAZt> Just answer youself my questions then you have a use case with which you can find a good dbms for you
16:27 <@isaacbw> mscdex, actually, my problem might be unrelated
16:28 < mscdex> isaacbw: no, it queues internally
16:28 <@isaacbw> awesome
16:31 < mscdex> Sorella: node can work on embedded systems
16:32 < Sorella> mscdex: I don't think anyone would want to run node on low-end embedded systems, who have almost no processing power.
16:32 < mscdex> define "almost no processing power"
16:32 < DarkArgon> raspberry
16:32 < Sorella> Raspberry still has okay processing power, afaik.
16:33 < mscdex> lots of people run node on pi
16:33 < Sorella> I mean things like, your toaster.
16:33 < bradleymeck> Sorella: depends, memory on embedded systems is much more a problem, battery usage on node is good though
16:33 < Sorella> Or your calculator.
16:33 < mscdex> Sorella: chances are your toaster is not going to be running linux anyway
16:33 < DarkArgon> node toaster, that would be awesome
16:33 < mscdex> or your calculator
16:34 < creationix> the smallest device I've seen that runs linux is the $10 routers I saw in China
16:34 < mscdex> it's going to be running its own custom logic
16:34 < Sorella> mscdex: yes.
16:34 < creationix> about 6mb hard-drive
16:34 < DarkArgon> toasting new tweets on your toasts
16:34 < creationix> mips processor
16:34 < creationix> the little routers run lua just fine, though v8 would probably be too heavy
16:34 < Sorella> mscdex: I was just trying to illustrate that choosing your technology before knowing what you're going to build is not a good thing.
16:34 < creationix> also I'm not sure how well v8 runs on mips
16:35 < Sorella> Does v8 even run on ARM?
16:35 < creationix> arm, yes
16:35 < creationix> chrome on android uses v8
16:35 < Sorella> Hm, interesting, didn't know that.
16:35 < bradleymeck> yes but building it still sees a few hiccups you may need to google
16:35 < gildean> Sorella: sure, why wouldn't it?
16:35 < DarkArgon> raspberry is arm
16:35 < mrvisser> jocafa: FWIW, when I switched *all* instances of path access to aliases, I think it's working properly
16:35 < creationix> we shipped node on the webos phones
16:35 < mrvisser> before, I had some access oae.api.i18n with alias, some by path
16:36 < creationix> startup time was a bit too slow and it ate more memory that we liked
16:36 < modgod> I'm still learning nodejs. I'm using express and ejs right now to help me learn and use best practices.
16:36 < creationix> but we were also starting dozens of node processes on demand
16:36 < mrvisser> and I think it was causing duplicate modules to be loaded and stuff. I can't quite put my finger on the exact issue
16:36 < mrvisser> now I have circular dependency issues to work through, but I think I have a grip on things.
16:36 < modgod> what are some good resources and video tutorials do you guys recommend to help me good a grasp on build node apps?
16:36 < creationix> (in fact, node on webos was what prompted me to look at lua)
16:37 < Sorella> creationix: you work on WebOS or wrote an app to run on it?
16:37 < creationix> I worked for Palm
16:37 < Sorella> Oh. Interesting :3
16:37 < creationix> also my node knockout winning entry from a couple years back was a native webos app implemented in nodejs with custom webgl bindings I wrote
16:38 < cloudbender> with node, would there be any reason to insure I use var names of two or four characters ? 
16:38 < Sorella> cloudbender: why would you limit the number of characters of your variables like that?
16:38 < bradleymeck> cloudbender: if you hate reading your code
16:39 < creationix> Sorella, https://developer.palm.com/appredirect/?packageid=com.creationix.minimason and https://github.com/webos-commons/com.creationix.minimason
16:39 < Sorella> Choosing concise names is one thing, coding like you're a mathematician is another thing entirely
16:39 < bradleymeck> math, adding to unicode because two letter names are impure
16:39 < jrajav> Why exactly would you WANT to code like a mathematician?
16:39 < creationix> I generally go for descriptive names, one short word or two is best
16:39 < cloudbender> I usually create a symbol table during development, usually four characters.
16:39 < jrajav> They kind of suck at it as a rule
16:40 < creationix> though, my code from today is pretty dense https://github.com/openpeer/cifre/blob/master/sha256.js#L65-L72
16:40 < mscdex> what if you are a mathematician that does coding?
16:40 < cloudbender> I'm a linguist, not a methematician.
16:40 < jrajav> Then you're an exception to the rule :P
16:40 < creationix> or a coder doing maths :)
16:40 < jocafa> mrvisser:  cool, glad you're able to track it down :)
16:40 < cloudbender> lol metheme
16:40 < mscdex> :-D
16:40 < Sorella> creationix: cool. I'll take a look once I have internets again :3
16:40 < cloudbender> Math is a language, nothing more.
16:40 < cloudbender> SOme people speak it badly
16:40 < cloudbender> and politically
16:41 < mscdex> math needs a package manager!
16:41 < creationix> p + (ror(a, 2) ^ ror(a, 13) ^ ror(a, 22)) + ((a & (b ^ c)) ^ (b & c))
16:41  * creationix wonders what he just said in "math"
16:41 < Sorella> Mathematicians are too busy using APL.
16:42 < cloudbender> lol
16:42 < bradleymeck> mscdex: would never happen since modern math is piecewise or procedural on comps :/
16:42 < cloudbender> I loved apl
16:42 < bradleymeck> APL made me sad
16:42 < Sorella> Well, no wonder you want 2-character variables!
16:42 < creationix> hey, there are times when 1-character and 2-character variables make a lot of sense
16:42 < Sorella> APL looked like a cool language, actually.
16:42 < bradleymeck> although, im all for roman numerals for loo indexes
16:43 < bradleymeck> loop*
16:43 < cloudbender> OK, I have been duely spanked and humiliated.
16:43  * Sorella wanted to write a toy language based on set theory that would have even more unicode weird symbols
16:43 < Sorella> creationix: the only ones I can think of are `x`, `n`, `xs`, `ys`, etc.
16:43 < creationix> for example, what would you use for the 10 inputs, 5 temporary variables, and 7 outputs of this function http://en.wikipedia.org/wiki/File:SHA-2.svg
16:43 < Sorella> Oh, and `f`
16:43 < bradleymeck> cloudbender: we don't mean to cause any insult, we are just confused which makes it sound aggressive
16:44 < cloudbender> I know bradleymeck, it's a great channel
16:44 < bradleymeck> if you have something that works and is readable to other people, do what works
16:44 < Sorella> (and that might be because I dabble in Haskell from time to time)
16:44 < mscdex> Crockford needs to release "Math: The Good Parts"
16:44 < cloudbender> My point is, is there any reason to assure the character count falls within a two-byte or four-byte boundry
16:44 < cloudbender> in the var name
16:45 < Sorella> cloudbender: nope.
16:45 < Sorella> Why would there be?
16:45 < creationix> cloudbender, if you're worried about performance, the variable names are compiled away long before it gets jitted to machine code
16:45 < Sorella> v8 is JIT compiled, and bindings are really "easy" to optimise
16:45 < cloudbender> becuase they are bytes, sometimes avoiding breaking the 32bit or 64bit boundries improve performence
16:46 < mscdex> cloudbender: make sure it fits within the 80-character width of your source file ;-)
16:46 < cloudbender> ok good to know
16:46 < cloudbender> , erm, you mean 120 character width right ?
16:46 < creationix> also strings in JS are 16bits per character
16:46 < mscdex> 80 characters!
16:46 < cloudbender> right wide chars in js
16:46 < mscdex> to fit a terminal!
16:46  * Sorella has moved from 80 characters to 120
16:47 < Sorella> Although my laptop has a really small resolution, having a second monitor fixes the issue :3
16:47 < cloudbender> ok, stay compatible with the wyse60. ok
16:47 < cloudbender> or vt100
16:47 < mscdex> i shouldn't need to resize my terminal to read code! :-D
16:47 < creationix> sorry, 16 bits per code-point.  Characters outside the BMP have multiple code-points in JS
16:47 < gkatsev> my 80chars is more of a guideline than a hard wrap. If a line is longer, it's probably too long
16:47 < cloudbender> I never wrap
16:48 < mscdex> i never rap
16:48 < gkatsev> cloudbender: all your code is on one lines? :P
16:48 < mscdex> a whole other meaning to "one liner" ;-)
16:48 < creationix> he node people, should me new language be whitespace sensitive like coffeescript and python, or brace based?
16:49 < cloudbender> no, I just don't wrap if a few lines extend past the right gutter
16:49 < mscdex> braces for life!
16:49 < gkatsev> cloudbender: like softwrapping?
16:49 < creationix> it's all the same to the parser, I'll just insert INDENT and OUTDENT tokens or { and } tokens
16:49 < bradleymeck> creationix: whitespace so ppl dont argue about braces
16:50 < bradleymeck> just nuke it from the start
16:50 < creationix> only problem is it's hard to minimize then
16:50 < mscdex> that's the one thing i can't stand about python
16:50 < creationix> especially deeply nested code
16:50 < cloudbender> always ignore whitespace outside of strings
16:50 < creationix> what about optional terminators
16:50 < bradleymeck> gzip will often challenge the ideas you think about braces
16:50 < gkatsev> bradleymeck: instead they'll argue about how to indent. tabs/spaces. Not that they don't already argue about that.
16:50 < creationix> or allowing newlines to be terminators
16:50 < mscdex> it's much easier to see where a long block ends with braces
16:50 < mscdex> as far as alignment goes
16:51 < cloudbender> braces and parens please, and semi's where I might want them
16:51 < BlakeRG> i have a couple of nested loops and async function calls and i'm having a hard time figuring out when all of the logic is "done" so that i can preform some more operations. is there a particular design pattern i should be following?
16:51 < mscdex> semicolons always! and comma-last!
16:51 < creationix> how about newlines can be terminators or semis if you want one-liners
16:51 < bnoordhuis> creationix: http://en.wikipedia.org/wiki/Whitespace_%28programming_language%29 <- base your language on that and people'll shut up about tabs vs spaces
16:51 -!- mode/#Node.js [+o isaacbw] by ChanServ
16:51 < creationix> bnoordhuis, :)
16:52 < mscdex> BlakeRG: the easy way is to use a module like 'async'
16:52 <@isaacbw> or be cool and use promises
16:52 < creationix> BlakeRG, promises!
16:52  * creationix hides
16:52 <@isaacbw> :P
16:52 < bradleymeck> promises :(
16:52 < cloudbender> newlines as terminators mess up the parsers.  allow for semicolons to indicate a statement termination
16:52 < bradleymeck> turtles all the way down
16:52 < cloudbender> and braces and parens
16:53 < creationix> I should bake promises into my language
16:53 < gkatsev> adopt ASI from js :P
16:53 < cloudbender> fat free promises
16:53 <@isaacbw> you should totally do that
16:53 < BlakeRG> mscdex: i just put in async but mayble i don't know which methods to use
16:54 < mscdex> fat free promise? i think that's a brand that already exists
16:54 < BlakeRG> i've got a rest call within another rest call and i do a couple of loops inside of that, i'm not sure how to tell when those calls/loops are done
16:54 < creationix> isaacbw, actually, trolling aside, my current plan is to allow C bindings to block the green threads, but allow the event loop to run other green threads while waiting
16:54 < mscdex> ;-)
16:54 < creationix> so I don't think I'll need promises as known in JS
16:54 <@isaacbw> that sounds pretty intense, actually
16:54 < creationix> BlakeRG, the simplest solution is to just use counters and named functions
16:54 < bradleymeck> BlakeRG: async.*(set, performStep(.., callbackWhenStepDone), callbackWhenErrorOrCompletelyDone)
16:54 < creationix> or learn a library like async
16:55 < creationix> personally I avoid libraries
16:55 < bradleymeck> i use async when it gets really ugly
16:55 < cloudbender> but, libraries have librarians
16:55 < cloudbender> and they are hhhhhot
16:56 < cloudbender> ok back to work me
16:57 < creationix> I actually think node-fibers is an interesting experiment
16:57 < creationix> though I want something lighter-weight
16:57 < bradleymeck> creationix: including async stuff lets me actually code this, the code before moving to async was an abomination (it still is)
16:57 < bradleymeck> https://github.com/nodejitsu/module-smith/blob/master/lib/builder.js &
16:57 < creationix> bradleymeck, have you tried promises
16:58 < bradleymeck> creationix: i have but i mix things soo often in terms of split / joins I get bothered by em
16:58 < bradleymeck> for linear flows like testing, I love em, but for trees, I hates em
16:59 < creationix> bradleymeck, care to share the shape of your use cases to inform my language design (in another channel perhaps)
16:59 < BlakeRG> can i fix my problem using event emiters
17:00 < cloudbender> try process.nextTick
17:01 < bradleymeck> BlakeRG: theoretically, yes, I would not take that approach though as its still going to need counters
17:01 < BlakeRG> bradleymeck: is this a good start? http://wekeroad.com/2012/04/05/cleaning-up-deep-callback-nesting-with-nodes-eventemitter
17:02 < bradleymeck> dunno, too busy with other stuff to read. but its a start
17:03 < amurdaca> can someone explain me what is instinct.js for?
17:05 < brainproxy> bradleymeck: maybe something in the vein of a dataflow library would suit your needs
17:05 < brainproxy> like bacon.js or flapjax
17:05 < brainproxy> or Microsoft's RxJS
17:06 < foobar321> bradleymeck: so can you give me an example how should I perform this task ?
17:09 < kenperkins> in the fs docs, there are a bunch of (2) after the description. I.e.e Asynchronous rename(2). What does that mean?
17:12 < IRCxB0T|> Can anyone tell me what the best way to make an api at somewhat regular intervals?
17:12 < mscdex> kenperkins: man page section
17:12 <@isaacbw> IRCxB0T|, that question doesn't make sense
17:12 < kenperkins> mscdex? I'm looking at the html docs
17:12 < Sorella> creationix: a little late but, if your language won't have Haskell-style indentation, then braces.
17:12 < Sorella> Python is just too cumbersome exactly because of that.
17:13 < mscdex> kenperkins: in your example, it's referring to the rename syscall, which is under section 2 of the linux man pages
17:13 < creationix> but coffeescript is whitespace sensitive because it's "easier"
17:13 < IRCxB0T|> By that I mean depending on the time of day wait for 2 hours but the next time wait 5 hours the time after that wait 40 minutes
17:13 < creationix> people seem to love it
17:13 < creationix> (or hate it)
17:13 < kenperkins> ah, thanks for being more specific
17:13 < IRCxB0T|> Et cetera
17:14 < airtanah_> creationix: isaacs made a great point about coffeescript on his airbnb talk. he said IF you use it, compile it and let node execute it directly
17:14 < airtanah_> creationix: also make sure you publish your npm modules as the compiled js
17:14 < kenperkins>      link(2), lstat(2), readlink(2), stat(2), symlink(2), symlink(7)
17:14 < mscdex> airtanah_: if only every coffeescript developer did that
17:14 < creationix> airtanah_, don't worry, I write all my node libraries in vanilla js
17:14 < creationix> airtanah_, I'm just trying to understand the pros and cons to that style of whitespace
17:15 < IRCxB0T|> Right now I emit an event when I start the program then inside the event handler I calculate the new time and call setTimeout again
17:15 < airtanah_> creationix: i've used coffee script a lot, and used to use python - generally i find whitepsace-sensitive languages are fine
17:15 < airtanah_> as long as you don't start mix tabs and spaces
17:15 < Sorella> creationix: CoffeeScript's parser is a mess though, and you often have perfectly fine programs parsed the wrong way. At least with Haskell it's more natural
17:15 < airtanah_> i would say, avoid tabs at all costs
17:16  * Sorella uses Python and LiveScript, which are whitespace strict languages.
17:16 < harbhub> i need help with formidable
17:16 < airtanah_> mscdex: i would hope the free-market nature of npm would un-favour those modules
17:16 < creationix> Sorella, but that's not because of the whitespace blocks
17:16 < harbhub> i can't get the file for some reason
17:16 < creationix> I wrote coffeescript's first parser, I'm fully aware how hard a language to parse it is
17:16 < harbhub> i am parsing the form
17:16 < harbhub> it gets the fields correctly
17:16 < harbhub> however, the file doesn't show up
17:16 < mscdex> airtanah_: i won't name names, but there are some prominent modules written in coffeescript that still don't publish js
17:16 < airtanah_> Sorella: i have modified the coffee script parser - what don't you like about it? seemed clean to me
17:16 < Sorella> creationix: okay so: don't do that again :3
17:17 < airtanah_> mscdex: i wonder if they'd accept that pull-request... LOL
17:17 < Sorella> airtanah_: indentation is not natural, and seemingly perfect fine programs give break your expectations way too often. Specially with lists/objects.
17:17 < harbhub> can someone help me that has used formidable?
17:17 < Sorella> I had a gist about it somewhere. But too lazy to search
17:17 < airtanah_> Sorella: can you post an example? perhaps we can fix it in a PR
17:18 < mscdex> airtanah_: i've actually submitted PRs and issues, but they've either been ignored or stubbornly refused
17:18 < Sorella> Which basically amounted to almost the same code on list/objects compiled four different ways
17:18 < harbhub> is anyone familiar with formidable?
17:18 < harbhub> i am retrieving the fields correctly, but not the files
17:18 < kenperkins> are there any standards for docs anywhere? I'm seeing inconsistencies when mentions to node objects, i.e. (in markdown) buffer, `buffer`, `Buffer` and Buffer
17:18 < Sorella> I remember discussing it with satyr or someone else in the coffeescript channel ages ago. Haven't used coffeescript since then
17:18 < airtanah_> mscdex: ahhh, well now you can say you've tried.
17:21 < luminous> so I have `npm install socket.io` and pasted the super simple (first) example from the site, worked out some issues with hosting the client files, and finally hitting node with my client.. but getting through to socket.io is failing with: Uncaught Error: failed to require "socket.io" from "root"
17:21 < harbhub> can someone help me with formidable?
17:21 < luminous> I've run node app.js from the directory where I ran npm install
17:21 < mscdex> kenperkins: generally "class-like" objects that are meant to be instantiated with 'new' start with a capital letter
17:21 < luminous> so app.js and node_modules are in the same directory
17:21 < Sorella> creationix: so, if you're going to go with whitespace based indentation, have indentation work like: `<indent-block> :: <newline> INDENT <block> DEDENT | <indented-block>`, where `indented-block` forces everything to start on the same column the block starts.
17:21 < kenperkins> mscdex: I was more curious if the convention in the markdown was to use the code highlight, i.e. `Buffer` versus just Buffer
17:22 < kenperkins> I am aware that functions invoked with the new keyword are generally capitalized :P
17:22 <@isaacbw> I think it's prettier that way
17:22 < Sorella> creationix: that, as far as I have seen, was the only sane indentation-based syntax I've seen.
17:22 < kenperkins> isaacbw: prettier with ``
17:22 < kenperkins> ?
17:22 < fenduru> luminous, how are you including socket.io.js
17:22 <@isaacbw> yes
17:22 < mscdex> kenperkins: me personally, i generally use backticks like that for code in-line
17:23 < creationix> Sorella, isn't that what python does?
17:23 < luminous> fenduru: client/server?
17:23 < creationix> Sorella, gist an example please?
17:23 < kenperkins> mscdex: rgr
17:23 < fenduru> luminous, client
17:23 < luminous> <script src="/static/socket.io/socket.io.js"></script>
17:24 < luminous> fenduru: and I can confirm the client receiving that script/etc
17:24 < fenduru> luminous, oh sorry. maybe I misread your issue
17:25 < luminous> fenduru: yea, it's server side, which is an app.js copy/pasta from socket.io's first example
17:27 < luminous> fenduru: I tried cp node_modules/socket.io to the same directory as app.js and where I run node from, thinking that might be it, but that failed
17:27 < fenduru> luminous, just double checking, did you manually copy/paste socket.io/socket.io.js into /static?
17:27 < luminous> fenduru: nope, I wget compressed: https://github.com/LearnBoost/socket.io-client/blob/master/socket.io-client.js
17:28 < Sorella> creationix: https://gist.github.com/killdream/4771507
17:28 < luminous> and gave that to the client
17:28 < creationix> Sorella, so you're saying to allow both styles?
17:28 < luminous> what's cumbersome Sorella ?
17:29 < fenduru> luminous, the only reason I ask is because I had a problem with that too, and had to let socket.io serve up the js file to the client
17:29 < cloudbender> guess it's time to learn node debug
17:30 < luminous> cloudbender: could I use debug to figure out why node can't find socket.io/
17:30 < luminous> ?
17:30 < harbhub> i need help with formidable
17:30 < cloudbender> I'm no expert with node debug
17:30 < cloudbender> yet
17:30 < Sorella> airtanah: https://gist.github.com/killdream/2433107
17:30 < luminous> harbhub: generally, in IRC or technical forums, you need to be specific to get anywhere
17:30 < Sorella> creationix: yes.
17:30 < harbhub> isaacbw, can you help me with formidable?
17:30 < fenduru> lol
17:30 < luminous> harbhub: so repeating "I need help" will just get ignored more than tended to
17:30 < geNAZt> rofl
17:30 < harbhub> i am getting the posted fields just fine
17:30 < harbhub> but the .on('file'...
17:30 < harbhub> that isn't working
17:31 < luminous> harbhub: best place to start is posting code with errors or description of problem
17:31 < creationix> Sorella, I can't imagine a single case where the second style would be preferred
17:31 < fenduru> isaacbw, can you help me with formidable.... please?
17:31 < Sorella> luminous: it makes the program grow unnecessarily too much vertically. And vertical space is worse when wasted than horizontal space.
17:31 < creationix> but it wouldn't be hard to add to the parser I think
17:31 < harbhub> lol luminous ok
17:31 < luminous> Sorella: O.o
17:31 < Sorella> creationix: https://gist.github.com/killdream/1522457#file-test-hs
17:31 < Sorella> Compare that with all the other implementations on that gist =/
17:32 < luminous> the pythonista in me is just staring back blankly, sorry :P
17:32 < fenduru> luminous, If you'd like to post the relevent bits of your server/client code I'll take a look. other than that out of ideas
17:32 < creationix> Sorella, I guess I an too sensitive to excessive indentation
17:33 < creationix> I never like indenting more than 2 columns at a time
17:33 < harbhub> https://gist.github.com/harbhub/4771548
17:33 < harbhub> that is the error i am having with formidable
17:34 < Sorella> luminous: you have more horizontal space than vertical space in your screen. I usually code with my screen split in two horizontally and vertically. So, having a language require me to waste vertical space is not a good thing, because then I have to potentially scroll up and down to see a function (given I have usually 6 lines of documentation).
17:34 < harbhub> the problem is that the file, when i try to upload one, does not show up in the .on('file'
17:34 < Sorella> luminous: creationix: plus, a more structural use of indentation makes it easier to read a program when you have more than a single indentation point in your function.
17:34 < Sorella> E.g.: callbacks, etc.
17:34 < airtanah> Sorella: interesting, did you ever open an issue? what did they say?
17:35 < fenduru> harbhub, first you need to me more specific with your questions. What debugging output do you get, what have you tried, etc. Second, why is it in a .txt??? Now there is no formatting/highlighting on gist
17:35 < creationix> Sorella, that's the difference, my editor windows are tall and narrow
17:35 < harbhub> well
17:35 < creationix> barely 80 cols wide usually
17:36 < harbhub> fenduru, it has html, js, and the console.log
17:36 < airtanah> creationix: on a side note, python does a cool thing with multi-line strings. They actuall remove the indentation from your string so you can indent the whole block
17:36 < harbhub> if you read to the bottom
17:36 < creationix> airtanah, yeah, I've always done multi-line strings that way
17:36 < creationix> just not sure my language will have them
17:36 < airtanah> creationix: ahh you're creating a language... link?
17:36 < harbhub> https://gist.github.com/harbhub/4771548
17:36 < Sorella> airtanah: I did not open an issue, I talked about it on the coffeescript channel as I said previously.
17:37 < harbhub> fenduru, i updated the gist
17:37 < harbhub> it is js
17:37 < harbhub> also, the goal is to upload a file to the tmp directory
17:37 < creationix> airtanah, https://github.com/creationix/jack/blob/master/samples/maze.jk
17:37 < luminous> Sorella: what is more readable to you, is there another language that does what you would like?
17:37 < airtanah> Sorella: because those are definitely legitimate cases
17:37 < Sorella> creationix: my editor windows are narrow horizontally AND vertically
17:37 < harbhub> by having the client fill out a form on the client side, and posting that to the server
17:37 < Sorella> luminous: Haskell has that kind of indentation. LiveScript can simulate that with `do` blocks, but then you waste one line.
17:37 < CoverSlide> all my editor windows are 20x20 characters
17:37 < creationix> Sorella, but what is the aspect ratio?  Taller or Wider?
17:37 < airtanah> creationix: cool, do you have a language spec?
17:38 < creationix> airtanah, no, it's still in development
17:38 < CoverSlide> creationix: what's the story with candor?
17:38 < ddod> hey all, could someone explain why this returns NaN? Math.pow(-1.4980384019370192, 1.8)
17:38 < harbhub> so i am stuck on trying to make formidable parse a file
17:38 < creationix> CoverSlide, not sure, I think indutny still works on it from time to time
17:38 < CoverSlide> ic ic
17:38 < airtanah> creationix: looking for any help/suggestions?
17:38 < jocafa> downside of an AMD project (unoptimized):  i'm staring at 190 requests for js files
17:38 < Sorella> creationix: depends if I split a window vertically or not.
17:39 < CoverSlide> >> Math.pow(-1.4, 1.8)
17:39 < purr> CoverSlide: (number) NaN
17:39 < creationix> airtanah, yep
17:39 < airtanah> creationix: cool, i'll do that on gh issues
17:39 < ddod> coverslide: so it doesn't take more than one decimal place?
17:42 < airtanah> creationix: is it typed? or at least type-hinted?
17:42 < CoverSlide> amd can suck it
17:42 < CoverSlide> browserify all the way
17:42 < creationix> airtanah, nope, no types at all
17:42 < creationix> not even instanceof
17:43 < airtanah> creationix: you weren't kidding about minimal
17:43 < harbhub> https://gist.github.com/harbhub/4771627
17:43 < harbhub> that is my issue
17:43 < harbhub> formidable is not registering the file
17:44 < airtanah> CoverSlide: browserify looks awesome, i hate amd/require
17:44 < diogogmt> anybody knows which plugin backbones is using to generate its documentation page? http://backbonejs.org/docs/backbone.html
17:44 < harbhub> https://gist.github.com/harbhub/4771631
17:44 < harbhub> here is the html 
17:47 < creationix> diogogmt, it's called docco
17:47 < creationix> http://jashkenas.github.com/docco/
17:47 < diogogmt> creationix: awesome! thanks
17:47 < Sorella> It's not a plugin :3
17:48 < CoverSlide> beware: coffeescript
17:48  * Sorella rewrites Docco in LiveScript and calls it YOLO
17:48 < CoverSlide> haha
17:52 < geNAZt> Fight against Coffeescript :D
17:54 < harbhub> sweet!
17:54 < harbhub> i got it working!
17:54 < harbhub> formidable is nice  :)
17:58 < eydaimon> The following seems to be something that happens often in js: http://pastie.org/6136209  with the solution below. Is there a better way of doing this?
18:04 < CoverSlide> eydaimon: http://pastie.org/6136247
18:06 < CoverSlide> the key is to build a new closure using the field argument.
18:06 <@isaacbw> fenduru, I don't know anything about formidable
18:07 < eydaimon> CoverSlide: thank you. is it better, or about the same?
18:07 < CoverSlide> i think it's better since you're not instantiating 2 functions on each loop, only one
18:08 < CoverSlide> if you want to go even further, you can just return console.log.bind(console, field)
18:08 < CoverSlide> but that's just for that specific example
18:08 < eydaimon> ok, thanks :)  much appriciated
18:09 < eydaimon> I think I do like your approach better
18:09 < eydaimon> seems like it can be cleaner when reading too
18:16 < spion> for cleanness i prefer each(obj, function(key, val) { ... }) or array.forEach(function(item) { ... }) when I know I'll need the closure
18:17 <@isaacbw> woah, is that first one normal js?
18:17 < spion> not really, var each = require('./my-each.js'); 
18:17 < spion> :)
18:17 <@isaacbw> god, I've been doing for ( in ) this whole time
18:17 <@isaacbw> oh :(
18:17 <@isaacbw> still cool
18:18 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:19 < luminous> Sorella`: I had a feeling you'd point at haskell, and I would agree, except that I've only barely begun to learn haskell. I still find python more readable because it isn't so difficult / is easier to follow even for non-programmers (obviously dependent on how well-written). either way, it seems like a really silly snag to have against the language, particularly when so many other languages abuse special symbols
18:24 < Sendoushi> how can i set a method inside app.js to reload node? so i can just make something like reload(); on the node console and it starts over?
18:25 < amurdaca> is this good practise to do async stuff? -> http://wekeroad.com/2012/04/05/cleaning-up-deep-callback-nesting-with-nodes-eventemitter
18:25 < amurdaca> i just realized that i awlways did sync based on what that post says
18:26 < cloudbender> does node debug stop at the debugger; keyword ?
18:26 < spion> amurdaca, that part of that post is wrong.
18:27 < amurdaca> why?
18:27 <@isaacbw> promises are the cool thing to do
18:27 < amurdaca> could you explain? i'm fairly new
18:27 < spion> amurdaca, because none of the I/O is synchronous there.
18:27 < amurdaca> isaacbw where is can learn about promises?
18:27 < spion> those are just two different methods of writing async code.
18:27 <@isaacbw> amurdaca, https://github.com/kriskowal/q
18:28 <@isaacbw> I would make sure to understand why callbacks can be bad first, though
18:28 <@isaacbw> *can* be bad
18:28 < amurdaca> where could i learn this?
18:28 < spion> too bad he made his code uncopyable
18:28 <@isaacbw> by using them a lot
18:28 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:29 < Guest71601> Hello.. I recently started to test nodejs. I get 'Property '$' of object #<Object> is not a function.. When i try to use node with backbone.
18:29 < amurdaca> so basically the eventemitter stuff is not async in that example?
18:29 < Sorella`> luminous: by a "silly snag", what are you referring to? Haskell might be more difficult to follow because of the functional conceptual baggage and heavy influence of typed lambda calculus / math / category theory / etc.
18:29 <@isaacbw> when you try to use node with backbone?
18:29 < spion> and i can't make a less nested callback version
18:29 <@isaacbw> what?
18:29 < Guest71601> Sorry when i use backbone in node 
18:29 < medikoo> amurdaca: see also http://www.medikoo.com/asynchronous-javascript/
18:30 < luminous> Sorella`: the "silly snag" was RE indentation/verticle space in python being cumbersome
18:30 <@isaacbw> Guest50830, using backbone with node doesn't make much sense. Backbone is a client-side browser framework and node is generally an out-of-browser js platform
18:30 <@isaacbw> what exactly are you doing
18:31 < spion> amurdaca, code isn't async. I/O is, and both event emitters and callbacks can be used to handle async I/O results...
18:31 < spion> ... of course, the first example is deeply nested and that can be bothersome.
18:31 <@isaacbw> fugly
18:31 <@isaacbw> and prone to error
18:31 < amurdaca> spion so it's only about how readable is the code?
18:32 < amurdaca> becouse he says the first example is not async like the second
18:32 < spion> in this particular case, yes
18:32 <@isaacbw> and how easy it is to modify
18:32 < Guest71601> I am using backbone for "structure".. According to allot of blogg post this should be possible?
18:32 < spion> the real power of event emitters comes when you realize you can attach multiple callbacks to them :D
18:32 <@isaacbw> Guest50830, I see, so you're serving a backbone app from node?
18:32 < spion> (for a single event)
18:32 < amurdaca> spion thanks got it
18:32 <@isaacbw> they aren't actually used together
18:33 <@isaacbw> the javascript is separate between the two
18:33 < amurdaca> i should move to learn promises now lol
18:33 <@isaacbw> not now :(
18:33 <@isaacbw> figure out callbacks first
18:33 < amurdaca> oh
18:33 < spion> there is a way to simplify this code and use callbacks.
18:33 < spion> i just can't copy the thing and write a simplified version :)
18:33 < spion> because all the code is images
18:33 < amurdaca> isaacbw other than http://www.medikoo.com/asynchronous-javascript/ which other resources could i take to learn from?
18:34 < Sorella`> luminous: Oh. Well, that's my opinion :3 I do find it rather cumbersome not being able to reflect better the structure of the source code through its indentation, because the semantic indentation isn't flexible in Python. And I find it makes it more difficult for me to understand how everything relates to the stuff inside a code block.
18:34 <@isaacbw> amurdaca, I dunno
18:34 <@isaacbw> just do it a lot
18:34 <@isaacbw> look at how the async module attempts to solve the problems
18:34 < amurdaca> but wait
18:34 < amurdaca> i actually know what callbacks are
18:34 < cloudbender> My oncly question about callbacks is when you return FROM a callback with a function.  Is it placed on the loop ?
18:34 < amurdaca> and how they are used
18:34 < amurdaca> what am i missing?
18:35 < luminous> Sorella`: I would agree except that (from my world) you then run out of horizontal space :P
18:35 < luminous> particularly if you do 2/4 splits
18:36 < gmoneyhbomb> cloudbender by and large returns values from callbacks are not retained
18:36 < cloudbender> right
18:36 < cloudbender> but what is thier execution context ?
18:36 < cloudbender> tough question sorry I'll do my homework
18:38 < Sorella`> luminous: depends on the language.
18:38 < Sorella`> luminous: if the language is minimal and doesn't give you a way to control your bindings so you don't run out of horizontal space (as is the case with python), then surely.
18:38 < gmoneyhbomb> cloudbender: it depends on who is running the callback stack, but generally speaking the method that loops through the callbacks would be the outer context, each callback of course has it's own execution context
18:39 < luminous> Sorella`: what do you mean by bindings? or controlling them?
18:39 < luminous> I think it is hilarious we are talking about these details in a place for js-based discussion :P
18:40 < cloudbender> imagine this callback ... cbfunction() { return(functionreturnedfromcb(){...})}
18:40 < cloudbender> is functionreturnedfromcb placed on the loop ?
18:41 < tuhoojabotti> huh
18:41 < Sorella`> luminous: "binding" could be equal to "variables" in the python world. Basically, any name that refers to a value in your code. Haskell lets you control these using `where`, for example.
18:41 < cloudbender> lol hi t
18:41 < tuhoojabotti> cloudbender: Making progress? 
18:41 < cloudbender> oh yeah
18:41 < MI61> joyent/node: Ben Noordhuis master * 19d29aa : bench: make io.c file path configurable - http://git.io/bBgITQ
18:42 < cloudbender> I had the sort comparator wrong the other night
18:42 < spion> amurdaca, there is a neat little property of JS which allows you to define a function below the place it is referenced. this allows you to both avoid nesting and still have the code flow linearly from top to bottom: https://gist.github.com/spion/4772125
18:42 < luminous> Sorella`: mmmmm
18:42 < tuhoojabotti> I don't know think the return value of the callback does anything 
18:42 < luminous> Sorella`: I'm thinking that learning haskell will do me well :)
18:42 < spion> amurdaca, with the caveat that you must define all variables you want reused between callbacks in the outer scope.
18:43 < luminous> anyway, back to tickets..
18:43 < tuhoojabotti> Unless you invoke cbfunction and pass the return value as the callback 
18:43 < tuhoojabotti> cloudbender: ^
18:43 < Sorella`> luminous: https://gist.github.com/killdream/1522457#file-test-hs
18:44 < Sorella`> An example of `where`
18:44 < cloudbender> tuhoojabotti, will copy-paste and consider
18:48 < chovy_> niftylettuce: you here?
18:48 < niftylettuce> chovy_: yo yo
18:48 < chovy_> hey, i was curious if there was a module for nodejs that will convert css rules to inline css.
18:48 < chovy_> i think  you're doign that for node-email-tempaltes
18:49 < niftylettuce> chovy_: yeah so juice got merged with another module
18:49 < niftylettuce> chovy_: boost
18:50 < kenperkins> reading the docs, it makes reference to buffer.inspect… is this just a proxy to util.inspect?
18:50 < niftylettuce> chovy: https://github.com/LearnBoost/juice
18:50 < chovy> niftylettuce: perfect, thanks
18:50 < niftylettuce> chovy: there is also JSDOM which you can use too if needed
18:50 < niftylettuce> chovy: but juice is <3 lovely
18:51 < amurdaca> is deferred really faster than Q?
18:52 < medikoo> amurdaca: it is significantly, but it's noticeable only with heavy promise usage, e.g. stat calls for all files in a dir
18:53 < amurdaca> i'll keep that in mind
18:53 < amurdaca> thanks :)
18:54 < amurdaca> medikoo from what i understand promises are good for writing async code that is readable right?
18:54 < amurdaca> what's the difference between promises and normal callbacks?
18:54 < medikoo> amurdace: yes, they're great for configuring async flows
18:54 < medikoo> a
18:54 <@isaacbw> promises are good for abstracting async data
18:55 < medikoo> you may work in more declarative way
18:55 < amurdaca> i see, so it's about how you code
18:55 <@isaacbw> it's about how you treat async calls
18:55 < medikoo> amurdaca: check this comparison, first is done with callbacks, second with promises: https://github.com/medikoo/deferred#example
18:55 <@isaacbw> what they mean
18:55 < airtanah> i think, if you can't handle async calls, promises won't magically make anything better
18:56 < chovy> niftylettuce: so juice is the one to to use moving forward?
18:56 < niftylettuce> yes
18:56 < niftylettuce> chovy: ^
18:56 < chovy> l;
18:56 < medikoo> airtanah: what do you mean exactly?
18:56 < chovy> k
18:56 <@isaacbw> mscdex, do you have any idea why I might be getting different messages.total counts (off by one) at different times?
18:56 < amurdaca> medikoo i see only that code is much less with promises
18:56 < chovy> niftylettuce: thanks
18:56 < amurdaca> *deferred
18:56 < niftylettuce> chovy: <3
18:56 < chovy> niftylettuce: hey, did you ever get a chance to look at supporting layouts?
18:57 < airtanah> medikoo: if you're suffering from callback hell, it's because your application is not designed well. using promises won't change that
18:57 < medikoo> amurdaca: it's also much more readable and easier to maintain, imho
18:58 < airtanah> medikoo: for the record, i do think promises are a better abstraction than callbacks
18:58 <@isaacbw> you know what? I think gmail is just unreliable with status() counts
18:58 < Sorella`> amurdaca: callbacks basically says: hey, when you finish this computation, jump to this point in the code and give me the value. Promises basically say: hey I'll be doing a computation, but it'll take a while, hold on to this token while you wait, it represents the value i'll give you back, and you can do computations over it while you wait.
18:58 < medikoo> airtanah: callback hell is different story, thing is, that you can't solve some things nicely with callbacks as you would with promises
18:58 < cloudbender> broke my references sux
18:58 < bitfed> Does anyone have a decent Twitter list of node.js folks?
18:59 < bitfed> *sharable
18:59 < amurdaca> Sorella` thanks got it perfectly :D
18:59 <@isaacbw> mscdex, yup, openBox() and status() are giving me varying messages.total values again. *sigh*
18:59 <@isaacbw> openBox is the correct one
18:59 < nb-ben> if I fs.watch a  directory, will it notify upon addition of new files and removal of files?
19:00 < Sorella`> airtanah: they also happen to be a different abstraction :3
19:00 < cloudbender> woohoo got my indexer down to 250ms
19:00 < nb-ben> what does it do cloudbender ?
19:00 < Sorella`> It's a shame that you can't force a promise in Node though =/
19:00 < Sorella`> (Like you can do in AliceML)
19:00 < cloudbender> it sorts a huge array on an old laptop
19:01 < nb-ben> how big and sorts by what?
19:01 < airtanah> medikoo: i think promises do error handling better, but a lot of people just change callback hell for promise.then().then().then().then() which is just as bad
19:01 < cloudbender> 100,000 object ascii by a descended name property
19:01 < cloudbender> it's whacky
19:02 < Sorella`> airtanah: not really. See, promises are *actual* values, different from computations, and you can "lift" pure functions onto a promise.
19:02 < nb-ben> lol
19:02 < medikoo> airtanah: yeah, getting promises also takes time, I remember that I also started with some crazy constructs, while everything can be pretty simple with promises
19:02 < nb-ben> cloudbender, can I see it?
19:02 < Sorella`> airtanah: lemme see if I can find my gist showing off what promises can do.
19:03 < chovy> niftylettuce: do you know if there's a way to preserve vendor prefixes with juice?
19:04 < niftylettuce> chovy: not sure, it doesn't preserve automatically?
19:04 < chovy> no
19:04 < chovy> it strips it down
19:04 < niftylettuce> chovy: you might need to patch it, i think it uses cssom/jsdom or something
19:04 < tongcx> hi guys, what's the point of package request?
19:04 < tongcx> is it easier to use than xhr in jquery?
19:04 < Sorella`> airtanah: https://gist.github.com/killdream/2891107#file-asynchronous-js
19:04 < cloudbender> nb-ben wait
19:04 < chovy> niftylettuce: https://github.com/LearnBoost/juice/issues/27
19:05 < Sorella`> airtanah: also https://gist.github.com/killdream/2901763 (just for the giggles)
19:05 < niftylettuce> nice
19:08 < tongcx> hello~~~ do anyone use "request" package?
19:08 < tommydudebreaux> yes.  lots of folks use request
19:08 < tommydudebreaux> what do you need to know about it?
19:09 < cloudbender> nb-ben this is a first draft.  Would be intrested in what you get for a test value
19:09 < cloudbender> https://gist.github.com/cloudbender/4760702
19:10 < tongcx> so, what's the point of this package?
19:10 < airtanah> Sorella`: i've never been satisified with the node.js version of promises.. i like what scalaz does, which uses monadic composisition
19:10 < tongcx> I am new to this package, and didn't see why it's helpful
19:12 < Sorella`> airtanah: Scala has a lot more of functional features, though =/
19:12 < quellhorst> do node.js apps take up much ram?
19:12 < tongcx> tommydudebreaux: so seems "request" makes it easier to use xhr?
19:12 < airtanah> Sorella`: agreed. how do promises work when the next 'then' returns another promise?
19:13 < ClaudioAlbertin> no, quellhorst
19:13 < nb-ben> cloudbender, wonder how sort was implemented
19:13 < Sorella`> airtanah: it returns a new promise that delegates to the previous promise. The old promise then fulfills this new promise with a failure or success depending on how it is fulfilled itself.
19:13 < cloudbender> array.sort(function());
19:13 < quellhorst> ClaudioAlbertin: so a node app could live in a VM with 128mb ram?
19:14 < cloudbender> it's an ascii sort
19:14 < cloudbender> I can make it alhpa later
19:14 < tommydudebreaux> tongcx: request is generally a wrapper for the node.js request api which helps with more complex things like poolign etc.
19:14 < nb-ben> cloudbender, if it does mapreduce sort
19:14 < ClaudioAlbertin> depends on the application of course, but in most cases without any problems, quellhorst
19:14 < nb-ben> that's what I wonder
19:14 < tommydudebreaux> you don't really NEED it..
19:14 < quellhorst> ClaudioAlbertin: ok thanks
19:14 < BlakeRG> i'm having a flow control problem with node.. I have an array, i loop over the array and inside of the loop i call an async function. How can i figure out that all of the callbacks that the loop kicked off are complete?
19:14 < tommydudebreaux> but if you are doing more complex things then it can be handy
19:15 < nb-ben> cloudbender, and perhaps if you make your own sorted array you could make it faster by caching each item's weight
19:15 < tommydudebreaux> if you are making plain old http gets for say an upstream api, then it is a bit bigger than you need
19:15 < ktk> anyone with request experience could tell me how to do this POST with request? really can't manage to find the right way http://pastebin.com/aFiHCDQV
19:15 < tommydudebreaux> BlakeRG: https://github.com/caolan/async#parallel
19:15 < Sorella`> BlakeRG: you can use a processing queue instead, you can have a callback that is initialised with `n` (the number of elements to be processed), and is called after every element is processed, when that number reaches 0 it calls the success callback. You could use promises and manage dependency between promises.
19:16 < Sorella`> BlakeRG: or any other library that does that for you, like the one mentioned above.
19:16 < cloudbender> nb-ben it seems the database is in ram.  what's to cache ?
19:16 < tommydudebreaux> async is a really well-done library
19:17 < BlakeRG> I'm looking at async right now, the part i don't understand yet is how to add a variable number of parallel tasks to the .parallel() method
19:17 < BlakeRG> since i need to add the tasks via a loop
19:17 < tommydudebreaux> I wrote a module for chaining operations (similar to async.waterfall) called pipeline  https://github.com/tommydudebreaux/pipeline
19:17 < cloudbender> I need to learn map/reduce
19:17 < othiym23> creationix: I ended up adopting medikoo's approach for promisifying my sequential ops, and I'm really happy with how the code worked once I went through and replaced all the code using async with an approach using promises
19:17 < cloudbender> I'm coming from an SQL background
19:17 < tommydudebreaux> it is a little less opaque than the waterfall IMO
19:18 < othiym23> the results were much more composable and led to a better-factored API
19:18 < airtanah> Sorella`: cool i'll check it out.. look *puts shades on* promising ... YYYYEEEEEeeeeeahhhhhhhhhh
19:18 < tommydudebreaux> BlakeRG - use the loop to generate an array of functions.. then pass that array to parallel()
19:18 < othiym23> probably worth trying the same thing with step at some point, and I definitely found myself wanting a type system to help DRY up some of the boilerplate, but overall I was pleased
19:19 < BlakeRG> tommydudebreaux: you are a genius sir
19:19 < tommydudebreaux> if order of execution matters, then async.waterfall or my pipeline module would help
19:19 < BlakeRG> i never thought of that…..
19:19 < Sorella`> BlakeRG: with promises, you would create a plain promise before the loop, define your success/failure conditions. Then for each new process you create a new promise and make the initial promise depend on that one. then you fulfill the initial promise at the end of the loop.
19:20 < BlakeRG> Sorella`: i think i'll stick with async right now, but is there a link for promises? or is that something build into JS?
19:20 < Sorella`> BlakeRG: `var p = promise(); while(<cond>){ var p2 = promise(); p.waitFor(p2); }; p.bind()`
19:20 < tommydudebreaux> yes.. and then there are promises (or futures in scala)
19:20 < Sorella`> BlakeRG: promises are concepts, they're not in the standard library, but there are plenty of implementations in JS.
19:21 < Ardivaba> Hai.
19:21 < tommydudebreaux> BlakeRG: probably good to read up on promises and futures and see how you like them.  I know a lot of people have strong opinion on this topic in the node community. 
19:21 < Sorella`> A better promise library would probably give you a new promise when you call `waitFor`
19:21 < tommydudebreaux> promises are a great tool and very widely used
19:21 < tommydudebreaux> but it is really a style thing
19:22 < Ardivaba> Can anyone tell me what is the best way for following: Log in to external website using POST, then gather the data from other pages that you get access after you have successfully logged in. Note: I don't want to use Selenium. Any help is APRECIATED ALOT!
19:22 < Sorella`> I argue promises allow a better separation of concerns. Keep your computations pure and out of the asynchronous world. Manipulate real values (even if they're proxied as promises)
19:22 < tommydudebreaux> ktk: you probably need to call write and end on the body of the request
19:22 < Sorella`> But then, everything has to be a promise. Just like Haskell's everything has to be a Monad once you descend to the I/O world.
19:23 < Sorella`> (your computations can still be pure, though, which is the good part)
19:23 < tommydudebreaux> Ardivaba: you need a sequencing liobrary like step, async, or pipeline
19:24 < tommydudebreaux> that is where I would start
19:25 < Sorella`> Ardivaba: if you need to deal with real web pages, rather tha with just the HTML code it returns, I'd recommend looking at PhantomJS.
19:25 < tommydudebreaux> ktk: maybe something like this:  
19:25 < tommydudebreaux> var req = request({ /* options */});
19:25 < tommydudebreaux> req.write('body content');
19:25 < tommydudebreaux> req.end();
19:25 < tommydudebreaux> +1 phantomjs is awesome
19:26 < ktk> tommydudebreaux: ah tnx that I didn't try yet
19:26 < Sorella`> Also, PhantomJS now supports CommonJS modules. Not sure if their implementation allows you to use NPM modules just fine (I've only used it before they implemented CJS)
19:26 < chovy> niftylettuce: i found a cssom that has a patch, but how do i get juice to u se it?
19:26 < chovy> cssom-papandreou
19:27 < niftylettuce> chovy: just fork juice, then in your project's package.json change the path for juice to your fork's github tarball path
19:27 < airtanah> Sorella`: i can't access cassie on github
19:27 < chovy> niftylettuce: juice depends on cssom
19:27 < niftylettuce> chovy: then in your forked juice go and point the CSSOM dependency to the cssom patch fork, or you could fork cssom yourself and then point to your fork's github tarball
19:27 < chovy> i want to swap out cssom 
19:27 < Sorella`> airtanah: it's moved over to `Orphoundation/cassie`.
19:28 < airtanah> Sorella`: thanks, you should update npm
19:28 < Sorella`> airtanah: I'll probably redesign it to abuse immutability more. Right now it has too much side-effects to my likings.
19:28 < niftylettuce> chovy: e.g. https://github.com/niftylettuce/node-email-templates/blob/master/package.json#L23
19:28 < Sorella`> airtanah: yeah, I've moved a few libraries to this organization, but haven't updated the packages yet.
19:28 < airtanah> Sorella`: not sure about the slogan LOL
19:29 < Sorella`> airtanah: ahaha. It's a joke on Greek mythology ;3
19:29 < chovy> niftylettuce: ok.
19:29 < niftylettuce> chovy: and then you'd do similar in your juice fork for cssom path
19:30 < niftylettuce> and you'd have a fork or just use cssom fork that has the patch
19:30 < airtanah> Sorella`: what other functional languages have you used?
19:30 < Ardivaba> Sorella and tommydudebreaux, thank you both for answers. These both suggestions are not something that i've looked into yet. I've been searching npm for keywords like post and get mostly...which is kinda stupid now that i think about it.
19:31 < chovy> ok
19:31 < chovy> i'm just patching the files
19:32 < tongcx> is the old "do" library replaced by "async" now?
19:32 < Ardivaba> So PhantomJS is like Selenium just without the server requirement?
19:32 < Ardivaba> Or did i miss completely?
19:32 < Sorella`> airtanah: Haskell, Scheme, Clojure. Haskell is the only one that goes full-way functional, but I've only started learning it yet. I've been meaning to look at Scala for a while.
19:33 < Sorella`> Ardivaba: PhantomJS is a browser (WebKit) that has no graphical interface, and you can run from the command line and script it using JS.
19:33 < Ardivaba> Thanks, this clears this up.
19:35 < DTrejo> does substack roll his own custom http server thing for his sites? i feel like i haven't heard of a server/framework thing he has published, and i've never heard smack talking the other web servers/frameworks
19:35 < DTrejo> *heard him
19:36 < tommydudebreaux> I have rolled my own http server.. much closer to node.js core
19:36 < tommydudebreaux> express is cool, but middleware is a weird mess of function bindings to me
19:37 < tommydudebreaux> I based most of my stuff on flatiron broadway for plugins instead of middleware
19:38 < tommydudebreaux> that said, I use express and our own regularly.. depending on what I need
19:38 < DTrejo> mm
19:38 < DTrejo> cool
19:39 < gildean> DTrejo: iirc he said he uses ecstatic for static files over http
19:39 < DTrejo> cool
19:39 < DTrejo> that's what i've been using lately
19:39 < DTrejo> cause jesusabdullah is cool
19:41 < gildean> jesusabdullah: i hear you're cool
19:43 < Exx2xxO> hey ! A question: I want to develop a Java based filesystem and use it with node. Does anyone has an example how to use java with node ?
19:43 < CoverSlide> if there's one thing i can't stand is being lied to
19:43 < CoverSlide> diet dr pepper DOES NOT taste like regular dr pepper
19:43 <@isaacbw> lol
19:43 < Exx2xxO> xD
19:44 < Sembiance> Exx2xxO: uhm, is your question a serious one?
19:45 < Exx2xxO> yes
19:45 <@isaacbw> why
19:45 < CoverSlide> if it's a java based file system, can't you just use fs?
19:45 < Sembiance> Exx2xxO: so if you are developing a "filesystem" then wouldn't it just be... well.. a file system?
19:46 < CoverSlide> like hdfs?
19:46 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:46 < Exx2xxO> sorry I wrote it wrong I want to develop a java program which has access to the os file system
19:46 <@isaacbw> this is not a java channel
19:46 < CoverSlide> if it's mounted on the os
19:46 < Sembiance> Exx2xxO: what parts are pushing you to use Java that you feel node can't handle?
19:47 < Raydiation> can i tell node to fetch from git?
19:47 < Raydiation> npm*
19:47 < Raydiation> i want master of https://npmjs.org/package/grunt-coffeelint
19:47 < Exx2xxO> Sembiance node has not the access to the os file system I need
19:47 < Sorella`> Exx2xxO: is it a virtual file system? JS has no interoperation with the JVM, but you can use some sort of message passing to communicate between the two.
19:47 < Raydiation> npm install grunt-coffeelint@master doesnt work though
19:48 < Exx2xxO> So how can I use Java with node.js ? Any API ...or examples?
19:48 < Sorella`> Exx2xxO: which kind of access to the OS file system you need? You can always write something on C++
19:48 < Sembiance> Exx2xxO: usually if node doesn't have direct access to something, someone has written an NPM module that wraps a C/C++ library to access said resource
19:48 < CoverSlide> you'd have to figure out some type of intermediate messaging protocol, like maybe thrift or something
19:49 < CoverSlide> there is a thrift library for node
19:49 < Sembiance> Exx2xxO: as far as communicating between java and node... search google for something like  java node rpc  (I saw lots of results for that) or smoething like that.
19:49 < Sorella`> Exx2xxO: again, what is this kind of access to the underlying file system that you need? Are you working with a file system that isn't hierarchical?
19:50 < CoverSlide> what is the name of this njava-based filesystem
19:50 < CoverSlide> maybe that would be a question to ask
19:51 < Sembiance> Raydiation: the way I do it, is if I want to pull a GIT URL package into my local node app, I have in my app package.json  "dependencies" : { "mylib" : "git://github.com/Sembiance/mylib" }
19:51 < Sembiance> Raydiation: then doing `npm install` will pull down from git instead of from NPM
19:51 < Raydiation> Sembiance: ty
19:52 < Exx2xxO> Come on guys .. I didn't questioned for the fs or anythign for java. I just want to know how to use node.js with java ;)
19:52 < Sorella`> Exx2xxO: we did answer that question. Right now I just have this feeling that you're trying to troll on this channel, which is sad.
19:53 < Sembiance> Exx2xxO: CoverSlide's advice for thrift is good advice. I also gave you advice to search google for "java node rpc"  both of them will lead you to your answers
19:53 < amurdaca> are promises used in express websites?
19:53 < amurdaca> i mean could i use em too?
19:53 < rideh> recommended rest api auth scheme?
19:53 < amurdaca> oauth2
19:53 < Exx2xxO> yeah I'm allready googling it... thanks :) I just wanted to stop all the questions about the fs and so on ;)
19:53 < Sorella`> amurdaca: express doesn't use promises as far as I know, but you could use them.
19:54 < Sembiance> Exx2xxO: thrift is probably a better bet than traditional rpc
19:54 < Sorella`> Exx2xxO: yeah, right, because answering things without context is super effective.
19:54 < amurdaca> Sorella` becouse in the web api specs i read: There is elegance and flexibility in promises, but to date they are used in no Web specification. 
19:54 < Sorella`> amurdaca: there is an specification for promises in CommonJS.
19:54 < Exx2xxO> and no sorella I didn't want to troll on this channel...I actual like this channel ;) you helped me alot
19:54 < Sorella`> !g commonjs promises a
19:54 < Sorella`> Ah, we don't have an IRC bot here =/
19:56 < daekano> I'm in a channel with a bot that has cleverbot integration
19:56 < daekano> it's great
19:56 < daekano> I can talk to him for hours
19:57 < Sorella`> daekano: what is cleverbot? Something that can do natural language parsing to a decent level?
19:57 < daekano> Sorella`: yeah
19:57 < daekano> Sorella`: http://cleverbot.com/
19:57 < Sorella`> Interesting, didn't know there were decent NLP out there
19:58 < daekano> it's okay. you can detect quite a few trigger words/phrases
19:58 < daekano> for example you can instruct it to write you a haiku
19:59 < geNAZt> is it assumed that a vm context doesnt change when the vm script contains async code ?
19:59 < geNAZt> example: https://gist.github.com/geNAZt/4755698
20:00 < peterschmidler> How can I create a file that executes multiple terminal calls when being executed?
20:00 <@isaacbw> child_process
20:03 <@isaacbw> https://gist.github.com/isaacbwagner/4772886
20:03 <@isaacbw> promises are cool
20:04 <@isaacbw> I don't even know how you would do that with callbacks
20:04 < Raydiation> whats the difference between --save-deps and --dev? --dev takes ages to install. it seems that it pulls in the whole npm repo
20:04 <@isaacbw> bask in the awe of promises
20:05 <@isaacbw> awesomeness
20:05 < geNAZt> so i have to create a child_process for each vm i need ? 
20:05 < geNAZt> well thats bad
20:05 <@isaacbw> if you want a vm you can just use the vm module
20:05 < Raydiation> i also see this again and again npm http 304 https://registry.npmjs.org/uglify-js
20:05 < Raydiation> stuck in a loop?
20:05 < Sorella`> Raydiation: `dev` installs all `devDependencies`.
20:05 <@isaacbw> I'm sorry
20:05 < geNAZt> i want a vm but i want to change the context if async code is in it
20:05 <@isaacbw> I mean, geNAZt, why do you need a different process
20:05 < geNAZt> i dont need
20:05 <@isaacbw> like, give it a new context?
20:05 < geNAZt> i only need seperated contextes
20:06 < Raydiation> Sorella`: doesnt seem like it http://dpaste.org/SjugI/
20:07 < Exx2xxO> Okay hm I don't get it. I'm trying to run a Java program from within Node.js not a communication between a node server and an java program. Does anyone know an example? Or maybe how to implement a Module/Plugin for node in java?
20:07 < geNAZt> it would be nice if the context keeps chaning when async code is in it
20:07 < Raydiation> with --save-deps everything is installed in 30secs
20:07 < Raydiation> --dev is taking 3 minutes already and i see the same urls again and again
20:07 < geNAZt> and that the vm instance throws an event ("finished" or so) if the vm has completed
20:07 < MI61> joyent/node: isaacs v0.8 * 6dcadb9 : blog: Peer Dependencies article  Thanks, @domenic - http://git.io/B3ETsQ
20:08 < Sorella`> Exx2xxO: child_process.
20:10 < mansoor-s> :\
20:10 < Sorella`> Raydiation: `--save-deps` instal something and saves the version of the package on your package.json. `--deps` installs something and all its devDependencies, and the devDependencies of every project, it doesn't save things on devDependencies of your package.json. Sometimes, that involves compiling quite a lot of C++ code.
20:11 < mansoor-s> request module has been working fine, now, all the sudden its giving me undefined for the body
20:11 < Sorella`> mansoor-s: something clearly changed.
20:11 < mansoor-s> yah..
20:11 < mansoor-s> thats wiered trying the same things in the browser ig et a response
20:13 < unr3al011> hello
20:14 < DarkArgon> hi
20:14 < CoverSlide> earth! fire! wind! water! heart!
20:14 < unr3al011> i have a large queue in mysql table but i am thinking of switching it to nodejs + mongo db for better performance. does somebody have experience with that and maybe knows what is best?
20:14 < CoverSlide> by your powers combined, i am captain planet!
20:14 < tongcx> hi guys, what's the main difference between mongodb and redis?
20:14 < CoverSlide> um everything
20:15 < DarkArgon> complete different concept
20:15 < cloudbender> CovereSlide you left out Mila Jojovic.
20:15 < CoverSlide> redis stores simple structures like hashes and lists
20:15 < CoverSlide> also strings too
20:15 < CoverSlide> mongo stores JSON objects
20:15 < tongcx> both seems to be key/value pairs to be
20:15 < Sembiance> tongcx: redis is AWESOME. just have to let you know that :)
20:16 < tongcx> both seems key/value pairs to me
20:16 < CoverSlide> right, but with redis you can't nest structures
20:16 < Sorella`> tongcx: Redis is a key/value store that runs on memory. MongoDB is a document store that has some stuff like sharding(?) and stuff.
20:16 <@isaacbw> tongcx, do some actual reading about mongo
20:16 < Sorella`> (actually, Redis has some other data structures like sets/hashmaps/lists)
20:16 < CoverSlide> Redis will get sharding at some point
20:16 < Sembiance> tongcx: redis is written in pure C. Is ROCK solid. 100% atomic for all operations and blazingly fast. It deals directly with lists, hashes, strings as data types.
20:16 <@isaacbw> it has powerful lookup and document modification tools
20:16 <@isaacbw> redis is all simple key lookups
20:16 < Sembiance> tongcx: mongodb is a different beast alltogether. mostly dealing with 'JSON'
20:16 < Raydiation> Sorella`: --deps worked
20:17 < Sorella`> MongoDB uses BSON, no?
20:17 < Sorella`> Or something like that.
20:17 < CoverSlide> yeah
20:17 < unr3al011> what is better for storing 100-200kb html documents, selecting them and updating them? redis or mongodb?
20:17 < CoverSlide> i think, that's only for when it contains binary data
20:17 < tongcx> so mongodb is more like a db, but redis is like a big hash list in memory?
20:17 < CoverSlide> or maybe it's all the time, i dunno
20:18 <@isaacbw> mongo *is* a db
20:18 < whyhankee> BSON is a a binariy json document structure
20:18 < Sorella`> tongcx: both are databases. But the concept of data base of everyone seems to be Relational Data Bases.
20:18 <@isaacbw> CoverSlide, it uses bson all the time
20:18 < CoverSlide> redis is like memcached, but with persistence, more structures, and i don't think it has that 1MB limit
20:18 < whyhankee> hwat i like about mongodb is that you can query on every part of the document (and even create indexes on those parts)
20:19 < tongcx> so why people still use mongodb if redis is faster?
20:19 <@isaacbw> bson has a few minor differences
20:19 < Sorella`> tongcx: MongoDB is a document store. You use it to store data as documents that have little to no relationships to the other documents you store. Redis is a key/value store in memory, you use it for anything that you need blazing fast access (read/write) for simple data.
20:19 <@isaacbw> mostly having to do with typed values
20:19 < CoverSlide> i would love to see a databse that uses msgpack as a transport protocol
20:19 < unr3al011> redis sais it can access data only by key, cant i do a lookup like select * from x limit 100?
20:20 < tongcx> so redis won't work well with hugh data and inhomogenous data?
20:20 < tongcx> i c, good point
20:20 < tongcx> exactly like memcache
20:20 < Sembiance> tongcx: honestly, if you are considering Mongo because you like the JSON part... you should consider using http://www.rethinkdb.com/
20:20 <@isaacbw> unr3al011, no
20:20 < Sorella`> tongcx: redis stores all your data in the memory. I think it doesn't outputs that to the disk anymore either.
20:20 <@isaacbw> tongcx, it would be fine
20:20 < CoverSlide> or couch
20:20 < CoverSlide> couch is nice
20:21 <@isaacbw> mongo 4 lyfe
20:21 < Sorella`> You could have huge amount of data stored in Redis, but then you need huge amount of RAM as well.
20:21 < CoverSlide> Sorella`: it can do periodic saves or an append-only list that it can initialize on startup
20:21 < Gabriel403> Sorella`: it does every once in a while dependent on value change 
20:21 < Sorella`> Okay, something I've read on the internets had led me to believe that periodic saves where out.
20:21 < tongcx> i c... i like the analogy of memcache, i feel it hits the point
20:21 < brycebaril> Sorella`: Redis will serialize your data to disk, but never reads from disk
20:22 < unr3al011> what is typical use for redis db and mongo db?
20:22 < CoverSlide> the append-only list is great, but it may need to be rewritten once in a while
20:22 < unr3al011> are there som real world examples?
20:22 < brycebaril> or never queries from disk rather
20:22 < CoverSlide> redis is often use for a caching layer or for pub/sub 
20:22 < CoverSlide> also for simple data structures that are very volatile and may change rapidly
20:23 < brycebaril> Redis also makes a decent primary database if you don't expect to have to store a lot of information
20:23 < Sembiance> tongcx: I used mongodb for a small project (that never went live) and while I liked some things about it, I'll never ever use it again. it seemed needlessly complex/fragile in several parts. I may look at using RethinkDB future future projects where redis isn't the right tool for me
20:23 < Sorella`> unr3al011: Redis can be used for caching (which is the obvious use case), or for optimisation of some stuff you need to read often, but can build again.
20:23 < unr3al011> ah okay
20:23 < unr3al011> so i think it doesnt fit my needs
20:23 < Sorella`> You can maintain indexes, etc.
20:23 < unr3al011> can you recommend something for building huge database driven queues?
20:23 < CoverSlide> the pub/sub features of redis are also a major use-case, things like socket.io can use redis' pub/sub for getting realtimey stuff from different servers
20:23 < brycebaril> You'll start to run into problems with Redis if you need to store more than somewhere around 50% of your system ram.
20:23 < Kakera> there are way too many database systems
20:23 < tongcx> i guess, you need more work to use redis as db because you need to handle search yourself
20:24 < CoverSlide> Kakera: true that
20:24 < CoverSlide> tongcx: there are ways to do it
20:24 <@isaacbw> tongcx, that's just not how redis is used
20:24 <@isaacbw> there's scripting
20:24 < CoverSlide> tongcx: https://github.com/visionmedia/reds
20:24 <@isaacbw> but if you need search, redis may not be was you need
20:24 < Sembiance> unr3al011: Fast, simple message queue server made to handle data sets larger than RAM: https://github.com/wavii/darner
20:24 <@isaacbw> what
20:24 <@isaacbw> *
20:25 < CoverSlide> although relying on sql for search isn't ideal either. if you really need a competent search solution, use solr or elasticsearch
20:25 < brycebaril> If you're going to use Redis as your primary db you're going to need to know all your access patterns up front.
20:25 < brycebaril> Building a redis schema is much like deciding what indexes to build for a sql db
20:25 < Sembiance> brycebaril: except all you have are 'indexes' :)
20:25 < brycebaril> exactly
20:26 < Sembiance> I love redis. I recently got a 128GB RAM box because I outgrew my old machine.
20:26 < tongcx> thanks guys, very helpful
20:26 < CoverSlide> there are ways to do it with indexes
20:27 < CoverSlide> but as i said, if you really rely on search as a feature, your best bet is elasticsearch or solr
20:27 < brycebaril> well, text search
20:27 < Sembiance> tongcx: honestly though, you should look at what types of data you will be storing, and more importantly how you will be accessing that data. Then from there decide if redis, rethinkdb, neo4j, some SQL DB or some other DB is the right choice.
20:27 < Sembiance> elasticsearch++
20:28 < CoverSlide> or voltdb, or orientdb, or titandb, or riak, or cassandra
20:28 < brycebaril> type of data, scale, search patterns, availability requirements, consistency needs, etc.
20:28 < Sorella`> You may also end up having different DBs in a single project.
20:28 < unr3al011> Sembiance are there any examples for darner? i want to use it within java
20:29 < tongcx> i need a lot of sql queries, probably rethinkdb or mongodb
20:29 < CoverSlide> using multiple dbs are a plus
20:29 < brycebaril> I typically end up with Redis + something else. I've done Redis + Mongo, Redis + Postgres
20:29 < tongcx> i already know mongodb, may change to rethinkdb if it's much better
20:29 < Sembiance> unr3al011: darner is very new although it looks really nice. I have not used it myself.
20:29 < Sorella`> tongcx: you need SQL queries? Is your data entirely relational?
20:29 < unr3al011> oh okay
20:29 <@isaacbw> 'I need a lot of sql queries'
20:29 < unr3al011> because i cant find any usage examples
20:29 < Sorella`> You should use a relational database for that.
20:29 <@isaacbw> 'probably ... mongodb'
20:29 < tongcx> no
20:29 <@isaacbw> I don't think you understand mongodb
20:30 < Sorella`> Then you don't need SQL queries at all!
20:30 < CoverSlide> Redis is great for a caching layer / memcached replacement. if you are using anything that you expect a decent amount of traffic, you should use memcached / redis
20:30 < Sorella`> You might need to query your data and process/transform them, but definitely you don't need SQL
20:30 < tongcx> i basically want to do search based on mutliple keys
20:31 < tongcx> well, i think i don't know enough about db theories
20:31 < tongcx> i only vaguely know mongodb is kind of nosql
20:31 <@isaacbw> it's completely nosql
20:31 < CoverSlide> nosql is such  a horrible buzzword
20:31 < Gabriel403> rdbs have a place too :P
20:32 < unr3al011> Sembiance i do not think it it nice cuz even the documentation is broken :<
20:33 < Sorella`> Relational DBs work with basis on relational algebra. You probably learned that in SQL. Relational DBs are good if your data is relational. Document Stores (like mongo) are what you use if your data is not really relational, like Posts in a blog. Then you rely on documents, sometimes do some processing on them, don't need JOINs, etc. Key/Value stores are generally used for fast operations on simple data (e.g.: Redis). Graph DBs are used
20:33 < Sorella`> if your data looks like Graphs, for example if you do something like machine learning on social graphs, you might end up using one of those.
20:33 < Sorella`> tongcx: ^
20:34 < Sorella`> tongcx: defining what kind of data you have, what kind of access patterns you expect this data to have, how much it needs to scale, how do you plan on processing it/querying it, etc. Are things you have to answer before choosing which DB you're going to use.
20:34  * Sorella` agrees with CoverSlide that NoSQL is a terrible buzz-word.
20:35 < tongcx> i c... i need to learn more
20:35 <@isaacbw> you also need to never write 'i c' again
20:35 < tongcx> why some people has @ in their username?
20:36 < tongcx> why no 'i c'?
20:36 <@isaacbw> ergh
20:36 < Sorella`> tongcx: they're channel operators, probably.
20:36 <@isaacbw> you're hurting me
20:36 < unr3al011> i c q
20:36 < Sorella`> tongcx: that's something on your IRC client, not on that person's username.
20:36 < tongcx> hehe, why * in username?
20:36 < tongcx> i use irssi
20:36 < unr3al011> because they are stars of the internet
20:37 < Sorella`> tongcx: then you'll have to read irssi's documentation to see how it displays the different status within IRC.
20:37 <@isaacbw> @ is op
20:37 < Gabriel403> i c U
20:37 <@isaacbw> fjjjjjjjjj
20:37  * Sorella` wanders off to do some actual work on his tagged file system
20:37 < tongcx> isaacbw: op is operator?
20:38 <@isaacbw> yes
20:38 <@isaacbw> it's an irc thing
20:38 < tongcx> isaacbw: so what's *?
20:38 <@isaacbw> probably voice
20:38 <@isaacbw> wait
20:38 <@isaacbw> no one has voice here
20:38 <@isaacbw> maybe afk?
20:38 <@isaacbw> I don't know. Read the irssi docs
20:39 < Sembiance> oh man, I feel old. I've been on IRC since 1993 and here is someone who is relatively new to it. I feel soooo old rofl
20:39 < unr3al011> damn i need a fast queue server for use with java :|
20:39 < unr3al011> no suggestions except darner?
20:39 < gildean> Sembiance: i've been on since 1996 too, we're not all noobs
20:40 < fwg> Sorella`: do you have it on gh?
20:40 < Sorella`> unr3al011: See if someone has written one in Clojure?
20:40 < unr3al011> what is clojure?
20:40 < s4muel> lmgtfy.com ...
20:40 < Sorella`> fwg: you mean the tagged fs? I'm still designing it, haven't started implementing yet.
20:40 < Sembiance> gildean: ahh, welcome friend :)
20:40 < fwg> Sorella`: ah
20:40 < Sorella`> unr3al011: a JVM language.
20:41 < Sembiance> not to be confused with closures or the google compilier closure. rofl
20:42 < unr3al011> i read zeromq should be really fast
20:42 < unr3al011> anyone experiences with it?
20:43 < asdf12> i updated my iphone
20:44 < asdf12> no wonder sometimes i couldn't connect to anything !
20:46 < Sembiance> unr3al011: I used zeromq and activemq in past projects. Both were so 'heavy' and needlessly complex in my opinion. I'll never use either again. ever.
20:46 < unr3al011> okay :D
20:46 < unr3al011> it looks really complex too
20:47 < unr3al011> i have 2 problems: i want a scalable system and have to store mainly 2 things: html documents and urls, and i have ALOT of them
20:47 < unr3al011> i thought of something line mongodb for the documents maybe and something else for the url queue
20:47 < unr3al011> line = like
20:47 < Sembiance> unr3al011: what are you gonna do with them? how do you want to access or search them?
20:47 < unr3al011> actually i have it in mysql, each one (the url and the doc) has a md5 hashed url as key
20:48 < unr3al011> so i store: url hash + html source in table 1 and url + url hash in table 2
20:48 < asdf12> i like mongodb because you can get fast writessss
20:48 < asdf12> well control that
20:48 < tjgillies> whats the current reaction to using web workers in node?
20:48 < Stephen> unr3al011: Is the purpose of the DB to backend them being served to the web, or are you querying them?
20:48 < tjgillies> is that the right way/wrong way/or neutral way?
20:48 < Sembiance> unr3al011: storing them is pretty easy in any database. even just storing them on a filesystem.  it's all about what you want to DO with them
20:49 < Stephen> tjgillies: use Processes, not web workers
20:49 < unr3al011> it is for internal use of my java application. it is only a data storage. my appliocation processes this data and stores it to another db for web access
20:49 < tjgillies> Stephen: thnx
20:49 < unr3al011> it only stores the result of processing in another db
20:49 < Stephen> tjgillies: Web Workers are for simulating threads where they can't be used
20:50 < Stephen> unr3al011: MongoDB is a decent choice, but it might even be overkill
20:50 < unr3al011> i want to store > 1m documents and even more links
20:50 < unr3al011> do you think mysql will fit my needs too?
20:50 < Stephen> unr3al011: Here's a great article to help too: http://highscalability.com/blog/2011/6/20/35-use-cases-for-choosing-your-next-nosql-database.html
20:51 < unr3al011> thx@ stephen will have a look @ that ;)
20:51 < asdf12> quick web front end question, keyboard shortcuts, javascript or accesskey attribute ?
20:52 < Sembiance> unr3al011: why not just store them to disk? heh
20:52 < Stephen> Sembiance: That's really a fair question
20:52 < unr3al011> mhh good question...
20:52 < unr3al011> decentalization
20:53 < unr3al011> i want to have 1 storage server but multiple "worker servers"
20:53 < Sembiance> unr3al011: NFS? :)
20:53 < Stephen> unr3al011: Yeah, just setup an rsync cron
20:53 < unr3al011> nfs?
20:53 < Stephen> network file system
20:53 < Stephen> Are your servers running linux?
20:53 < unr3al011> mhhh i have no experience with that
20:54 < unr3al011> yes
20:54 < Stephen> It's very simple
20:54 < unr3al011> yeah but i think storing to disk directly is not what i want
20:55 < unr3al011> i want to use some sort of databse i think
20:56 < Stephen> unr3al011: Ok then, a key-value system should suffice you
20:56 < unr3al011> yes
20:56 < Stephen> unr3al011: What's the primary key on how you retrieve them?
20:56 < Stephen> MD5 hash?
20:56 < unr3al011> primary key is md5 hash of processed url
20:56 < Stephen> from the URL?
20:56 < Stephen> :-)
20:56 < Stephen> I have one of those too
20:57 < unr3al011> works fine?
20:57 < Stephen> I use MySQL to store meta data on the URLS, yeah, it works fine
20:57 < unr3al011> do you store the whole documents too?
20:57 < Stephen> I've in the process of moving to MongoDB
20:58 < unr3al011> ah okay
20:58 < unr3al011> mine is not running live now
20:58 < Stephen> Whole documents don't belong in Databases unless they are being queried on
20:58 < unr3al011> so i can plan everything like i want ;)
20:58 < unr3al011> mhh okay
20:58 < Stephen> unr3al011: Put the documents in the file system, and put the link to the file system in the Db
20:58 < unr3al011> yeah but then i have to use network file systems
20:59 < unr3al011> it doesnt sound secure to me
20:59 < Stephen> ?!
20:59 < unr3al011> or how can i access the data over multiple servers?
20:59 < Stephen> It will be much faster, and very secure
20:59 < Stephen> unr3al011: Do you know anything about SSH?
20:59 < unr3al011> not that much. i only use it to connect to my servers :D
21:00 < Stephen> unr3al011: Have you ever setup keys to login instead of passwords?
21:00 < unr3al011> yes
21:00 < unr3al011> everytime
21:00 < Stephen> Ok
21:00 < Stephen> scratch NFS
21:00 < Stephen> Use SCP
21:00 < Stephen> As the file transfer part
21:00 < Stephen> It's basically the same thing as SSH (It works over the SSH server)
21:01 < Stephen> You give each of the worker machines a key to access the main server
21:01 < Stephen> turn off passwords
21:01 < Stephen> Done.
21:01 < unr3al011> okay and then its like a network drive?
21:02 < Stephen> unr3al011: Here's a doc on how that process works, and what file transfers look like:
21:02 < Stephen> http://www.it.cornell.edu/services/managed_servers/howto/file_transfer/fileunattendunixunix.cfm
21:02 < jedahan> so, with the repl, how come `Function` evaluates to `[Function: Function]`, if I define a function a with property a.name='myname' I don't get `[myname: Function]` ?
21:03 < Stephen> SCP will remind you of FTP transfers, with SSH logins
21:03 < unr3al011> mhhh okay
21:03 < unr3al011> sounds really complicated :D i have no experience with that
21:03 < unr3al011> but i begin to like the idea of storing it on the disk
21:03 < Stephen> jedahan: Function is a 1st Class member in Javascript
21:04 < Stephen> unr3al011: Storing Documents in MongoDB is very possible, but there is a lot of overhead, and it's generally just a bad idea
21:04 < unr3al011> mh yes
21:04 < systemfault> Would be nice if JS had a composition operator for functions :P
21:04 < systemfault> A bit like the (.) in haskell
21:04 < unr3al011> with managing the document storage on disk i could stay with mysql i think, it could be fast enough for larger datasets then
21:05 < Stephen> unr3al011: But, using the SSH server as the proxy, you could even have the Worker servers login to the main one and tunnel the ports necessary
21:05 < unr3al011> o.0
21:05 < unr3al011> this even sounds more confusing to me :D
21:05 < Stephen> That means your Storage Server would only need the SSH port open to the outside. Everything else would run on localhost
21:05 < unr3al011> mh okay
21:05 < Stephen> Read that doc first
21:05 < Stephen> It's not hard to setup
21:05 < Stephen> If you have any questions after you get  finished on that, feel free to message me
21:06 < unr3al011> okay
21:06 < Stephen> Doing things with keys like this is a fairly standard industry practice, and it's frankly the most secure. You need to learn it eventually
21:07 < unr3al011> yeah but i am just wondering now
21:07 < Stephen> What's the DB for?
21:07 < Stephen> heh
21:07 < unr3al011> no
21:07 < unr3al011> why the hell i am storing the doc after processing it
21:07 < unr3al011> it could be deleted...
21:07 < unr3al011> because, it is already processed, so why keep it? :D
21:08 < unr3al011> i just need to store the url
21:08 < Stephen> Well, what if there was an error
21:08 < unr3al011> then i have to refetch it
21:08 < Stephen> You need to keep it for /some/ period of time
21:08 < unr3al011> yes sure
21:08 < unr3al011> but it is always a small ammount
21:08 < unr3al011> i am fetching about 30 docs/ second
21:09 < unr3al011> and can process these in the same second i think
21:09 < Stephen> unr3al011: Also, I think you should look into http://commoncrawl.org/
21:09 < Stephen> Depending on your use case, they may have all the data you need
21:10 < unr3al011> yeah but i just think i will delete my data after processing it
21:10 < unr3al011> so i also can keep server costs low
21:10 < jedahan> thanks
21:10 < unr3al011> maybe there is 5% of error, but that is so less that i just can fetch it again than searching through millions of documents
21:16 < JohnMcLear> guys...
21:16 < JohnMcLear> http://blog.nodejs.org/2013/02/07/undefined/
21:16 < JohnMcLear> undefined?  Really?
21:30 < segomos> obviously
21:31 < segomos> it's good for SEO
21:38 < cxreg> http://jobs.nodejs.org hardly seems very active, is there a better place to recruit node devs?
21:39 < creationix> cxreg, I would look there more if people posted jobs more there
21:39 < creationix> usually I only see one or two
21:42 < Rolken> the obvious background color inconsistency, page links that don't go anywhere, etc don't exactly scream "high attention" either
21:43 < nemothekid> Hi, I am currently using the express framework to handle my requests. What I want to do is have a user issue a request, immediately deliver a response, and then do some "extra work" (so I don't want the users request to hang while something is still being processed. If I use setTimeout will that function execute independently from the request?
21:46 < VeXii_2> you can just keep doing stuff after res.end() ?
21:48 < systemfault> nemothekid: Usually, you would return the URL of a status resource to poll
21:52 < amurdaca> i always ask myself if i should learn client-side javascript (jquery&co) before diving into node (i come from php backend dev)
21:52 < FunnyLookinHat> systemfault,  ( or anyone else for that matter ) - have you ever considered using socket.io with a persistent session to replace polling ?  So that everything can become event based?
21:53 < FunnyLookinHat> amurdaca, most people are really familiar with client-side because it's so popular even for backend PHP development...  but JS is JS - learning node first will probably frustrate you a bit on the client side but otherwise it's all the same.
21:53 < systemfault> I'm a fan of HTTP's statelessness… so no, I wouldn't personally use socket.io
21:53 < systemfault> (Not for that)
21:54 < amurdaca> FunnyLookinHat i know...but node is everything but frustrating..
21:54 < FunnyLookinHat> yeah I tend to feel the same... but I'm new to NodeJS so I figured I'd shoot from the hip  :D
21:54 < amurdaca> i easly built a mongodb (first time ever used this db) backed blog in no time..
21:55 < FunnyLookinHat> amurdaca, Hah!  If/when you look at client side JS you should make sure to check out things like ember.js in addition to jQuery and Mootools ( etc. ) to try to wrap your mind around client-side mvc, etc.
21:55 < amurdaca> FunnyLookinHat i don't get you lol i only use some sporadic jquery for real simple animation
21:55 < amurdaca> i just never like graphic things
21:56 < amurdaca> i tried to use backbone but then gave out lol
22:09 < ngl> --force forces npm to look for remote resources... Anybody know the opposite?
22:10 < ruff_> --beg
22:10 < ngl> --for-real
22:11 < ngl> git outtahere
22:19 < Jamiltz> Hey. How can parse two parameters with the url module. For example in this call http://127.0.0.1:3000/?url=http://api1.asos.com/productlisting/category/6993/1/AlphaDescending/en_API/GBP?api_key=qwc... I have url and api_key to parse. I tried to query separately and then concatenate but it didn't work :(
22:22 < unr3al011> Stephen do you have any idea for my queue problem?
22:30 < babonk> Hey all, for some reason I can't send a node http request: http://stackoverflow.com/questions/14843019/node-http-request-does-nothing
22:34 < fenduru> do you need to do .end()?
22:34 < cjb> yeah, that's the problem
22:34 < gf3> babonk: You are also not using http.request correctly
22:35 < gf3> babonk: Note the parameters expected for the callback vs. what you're providing
22:36 < babonk> What parameters are expected for the callback?
22:36 < fenduru> rtfm
22:36 < cjb> babonk: this would be an excellent time to read http://nodejs.org/api/http.html#http_event_request
22:37 < babonk> Thanks
22:37 < babonk> will read the docs
22:40 < Jamiltz> Aouch! I'm trying to get a proxy server running. I parse the url by using the query method here http://cl.ly/image/1r390y0w2R0Z. But in the url there is an ?api_key parameter and the query on the url will not include the api_key. How can I parse the whole url so it doesn't stop before ?api_key
22:40 < Jamiltz> ?
22:42 < Jamiltz> does it make sense?
23:14 < st_luke> anyone in nyc want a giant box of brand new free clothing that amazon mistakenly sent me?
23:25 < samholmes> Anyone here know how Express' session IDs work?
23:26 < denom> samholmes, work in what way?
23:26 < samholmes> I guess I should have asked how connect's session middleware works
23:26 <@TooTallNate> it uses a session cookie
23:27 < samholmes> TooTallNate: Yes, but this cookie isn't the session ID I found
23:27 <@TooTallNate> which gets sent by the browser on subsequent requests
23:27 < samholmes> not exactly
23:27 < denom> As I understand it, the connect middleware is just a chain of function calls..
23:27 <@TooTallNate> samholmes: how do you mean?
23:27 < jlord> hi TooTallNate!
23:28 <@TooTallNate> jlord: jess! hello! long time :)
23:28 < denom> at each step in the middlware stack, the request is passed in. The cookie is parsed and the session info is looked up and attached to the request?
23:28 < denom> (I'm kind of guessing)
23:29 < jlord> TooTallNate:  I know! Sometimes I creep in here haha
23:29 < samholmes> TooTallNate: connect.sid cookie looks something like this format: s:asdfghjkl.asdfghjkl
23:29 < samholmes> TooTallNate: The session ID is stored as just asdfghjkl
23:30 <@TooTallNate> samholmes: it's a signed cookie - it gets decoded on the server
23:30 < samholmes> or if you're using redis, sess:asdfghjkl
23:30 < samholmes> TooTallNate: What is a signed cookie. This is why I ask.
23:30 < samholmes> *?
23:30 <@TooTallNate> http://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs
23:31 <@TooTallNate> samholmes: in short, it's a cookie that can only be altered by the server
23:31 <@TooTallNate> not the clinet
23:31 <@TooTallNate> client
23:31 <@TooTallNate> since it has no idea what's inside
23:31 < denom> mongoose.js question, does anyone know how to query all the documents in a collection if the collection does not fit in memory?
23:32 < samholmes> TooTallNate: I haven't understood enough yet. The cookie has two parts, the first part being a 64 bit string and the second same; both separated by a dot.
23:32 < samholmes> Have I got that right?
23:32 < samholmes> Also there is a 's:' prefixed to it all.
23:33 <@TooTallNate> samholmes: i mean the implementation doesn't really matter, but ya i think you're on the right track
23:33 < samholmes> TooTallNate: Now what does the second hash do?
23:33 < samholmes> I
23:33 < denom> samholmes, what's the problem you're trying to solve?
23:33 < samholmes> I'm able to get the session data using just the first hash
23:33 < samholmes> denom: Not knowing.
23:34 < denom> ahh, there is so much I don't know...it could be a full time job :)
23:34 <@TooTallNate> i don't know tbh, but it shouldn't really matter either
23:34 < samholmes> denom: If I knew how connect's session middleware worked, I wouldn't have been set back on work.
23:34 < samholmes> TooTallNate: It did matter. Check out my issue: https://github.com/visionmedia/connect-redis/issues/69#issuecomment-13464054
23:34 < Fishrock123> Could be a full-time job? It kind of is. O_o
23:34 < samholmes> eh, no comment
23:35  * samholmes didn't mean to post the link with the comment hash
23:37 < RSA_> hi! What is the most substainable way of web scraping? would you suggest to use which framework with node.js therefor or shall I focus on python or which methods are best for future to know?
23:37 < RSA_> What I want to realize for the beginning is: aggregating different sources of RSS Feeds, and "data base queries"(?) (- I do not know the name for those, but structures like: http://xx.com?q=a&w=12), XPATH queries, filter them and output them on a website / in an app, and store them.
23:37 < RSA_> I have had a look at diverse strategies (from yahoo pipes, YUI, python-based scraper frames like beautifulsoup, lxml, scrapy, the javascript based ones like jsoup, dom4j, standalone tools like rapidminer, and methods with spreadsheets, etc), but I still do not know which environment to set up. node.js seemed promissing...
23:37 < denom> hmm, I think it's best to start with what one knows and then work towards what one does not know
23:38 < groundwater> samholmes: TooTallNate usually signed cookies contain a plain cookie with an HMAC signature, which is a secure way of signing something
23:40 < samholmes> groundwater: What's the signature used for?
23:41 < denom> samholmes, to prevent tampering
23:41 < groundwater> samholmes: i send you your session-id along with a signature that only i can verify/create
23:41 < groundwater> samholmes: every http connection you make to me, you include the session-id + signature
23:42 < groundwater> samholmes: i can just verify the signature, then trust that the session-id is real
23:42 < groundwater> samholmes: avoid a database lookup
23:44 < denom> samholmes, I just created a new express app using `express --sessions myapp` ,  in that base example there are no parameters being passed to the `express.session()` middleware invocation
23:45 < denom> maybe you could try simplifying your example?
23:45 < owen1> how to send some errors to stderr?
23:45 < samholmes> denom: What is there to tamper with?
23:46 < denom> samholmes, exactly
23:46 <@TooTallNate> owen1: console.error() ?
23:46 < owen1> TooTallNate: right, didn't realize it. thanks
23:46 < samholmes> groundwater: What do you mean real?
23:47 < groundwater> samholmes: usually it's your user-id not a session-id. if i didn't verify that you ARE who you say you are, then you can impersonate anyone on the site.
23:47 < RSA_> dear @denom, the thing is: I come from a cross angle. I am fresh to coding. so to say: I know hardly anything, but have kind of an overview about web technologies now. I dream of an module based system, to combine the things that I need. I just need an architecture or a path where I can move along. Can you suggest free pdfs / ebooks starting from the self-educative beginners angle on abstract most clear level? scraping with node.js in comparis
23:47 < RSA_> to other methods? 
23:47 < samholmes> Even if I tampered with a sessionId that doesn't mean I'd get one that works.
23:48 < groundwater> samholmes: session-id is the alternative to using HMAC signed cookies, but then you need a database to store the session data
23:48  * samholmes can't figure out HMAC in a reasonable amount of time.
23:49 < samholmes> groundwater: The session ID usually is a long hash that represents a unique identifier of a user. Someone cannot simply guess this sort of thing, and it's most certainly isn't the user ID.
23:50 < groundwater> samholmes: then the HMAC serves no cryptographic purpose
23:50 < samholmes> Two unique sessions can technically be the same user just on different user-agents
23:50 < groundwater> samholmes: maybe it makes people feel secure
23:50 < samholmes> groundwater: I guess so; as far as I'm aware
23:50 < denom> RSA_, node is a pretty neat way to write a scraper (always a fun project)
23:50 < samholmes> This is why I ask, wtf does it do?
23:50 < groundwater> samholmes: nothing is more secure than a random number, so as long as the session-id is a random number of sufficient length, it's secure
23:51 < denom> RSA_, I can recommend a couple technologies to try out
23:51 < groundwater> samholmes: HMAC is only required when you are transmitting non-random tokens that need to be trusted again in future
23:51 < FrozenFire> groundwater, Assuming the seed cannot be influenced
23:51 < samholmes> groundwater: All sarcasm aside, this is true?
23:51 < groundwater> FrozenFire: seeded generators are pseudo-random anyways
23:52 < groundwater> samholmes: what is true?
23:52 < asdf12> anyone know bargin vps host thats established? 
23:52 < asdf12> only ones i can find are in europe
23:52 < samholmes> groundwater: What you said about a number being secure if it's long enough.
23:53 < FrozenFire> groundwater, Well, without getting into the whole metaphysics of it, everything is technically pseudo-random.
23:53 < FrozenFire> The question is whether the truly random seed can be determined (sniffed) or influenced.
23:53 < RSA_> @denom: cool! which would you recommend?
23:54 <@TooTallNate> RSA_: cheerio
23:54 < denom> RSA_, the goal of a scraper is to accumulate a list of things to scrape: https://github.com/caolan/async#queue
23:55 < groundwater> FrozenFire: perhaps on most machines, but definitely not in general
23:55 < denom> RSA_, for any particular thing, you can fetch it and then manipulate it: https://github.com/mikeal/request
23:55 < FrozenFire> groundwater, Depends on what is providing the random fluctuations you use to generate the data.
23:55 < thorie> hi, im new to node.. how do i access something i've installed via npm?
23:55 < FrozenFire> If you're using ambient noise (hardware input seed), then that can be influenced at the physical level.
23:56 < groundwater> samholmes: a 100-character string has more possibilities than are seconds since the big bang
23:56 < FrozenFire> Or even simply captured at that level.
23:56 <@TooTallNate> thorie: require() it in a script
23:57 < thorie> TooTallNate: i'm installing this: https://github.com/kof/node-qunit and i ran 'npm i qunit' and the example says in the shell, i can type: qunit -h ... But when i do that, it says command not found
23:57 < samholmes> groundwater: then what is the point of the complexity within the session middleware's cookies?
23:57 < groundwater> FrozenFire: pseudo-random has a very specific meaning, it don't just mean "something which you can guess given enough time"
23:58 <@TooTallNate> thorie: then that's what's called a "global install", you're gonna want to do `npm i -g qunit` instead
23:58 < groundwater> samholmes: i don't know, i didn't made the middleware. what is your exact issue again?
23:58 <@TooTallNate> thorie: so that it gets installed "globally" and is placed into your $PAT
23:58 <@TooTallNate> $PATH
23:59 < samholmes> groundwater: the complexity is bothering me. I'm trying to use the session ID within my websocket code
23:59 <@TooTallNate> samholmes: you should just be accessing req.signedCookies and be done with it
23:59 < thorie> TooTallNate: nice thanks!
--- Log closed Wed Feb 13 00:00:23 2013
