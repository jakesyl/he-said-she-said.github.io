--- Log opened Mon May 06 00:00:51 2013
00:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:25 < s3shs> In node, what do I do if I get a request I do not want to handle?  (I don't want anything returned.  I just want it ignored.)
00:25 < s3shs> I'm using connect.
00:26 < Havvy> s3shs: Make a middleware that detects it and just returns.
00:29 < s3shs> Right.  I can add a function that sees the request and never calls "next().  Is that what you mean?
00:29 < s3shs> But doesn't the request hang out in some queue somewhere holding up resources?
00:29 < chrisdickinson> s3shs: you have to respond to it
00:29 < s3shs> Ok.  How?
00:30 < chrisdickinson> resp.statusCode = 400; resp.end('bad request')
00:30 < chrisdickinson> or something of the sort
00:30 < s3shs> Fair 'nuf.
00:31 < s3shs> On the same note, I'm a little surprised connect hasn't been updated at all.  Is there some other version I should be using it its place?  https://github.com/senchalabs/connect
00:32 <@isaacbw> there isn't much that needs updating
00:32 <@isaacbw> it was updated 11 days ago? that's pretty recent s3shs 
00:32 < s3shs> I get that.  But that page says "build failing"
00:32 <@isaacbw> https://travis-ci.org/senchalabs/connect
00:32 < s3shs> Oh, 11 /days/.  I need more updates than that!  Just kidding.
00:33 < asdffa43> how can i see what socket.emit are being sent in the shell running node?
00:33 < s3shs> Thanks all.  Been in the sun all day.  Eyes are failing me.
00:33 <@isaacbw> I don't know why the status image says failing, but it's passing on travis
00:35 < tgies> greetings
00:35 < tgies> is this the best place to talk about connect/express-related matters or do they have their own channels i wasn't able to find?
00:37 <@isaacbw> ask away
00:39 < chilts> tgies: there is also #express
00:39 < chilts> but either channel is fine
00:39 < asdffa43> var socket=io.connect(document.location.href);  didn't solve my "served static content /socket.io.js" error , how to fix it?
00:42 < tgies> of course there's #express, i don't know why i didn't just check. didn't turn it up in a google search
00:42 < tgies> thanks
00:43 < tgies> but anyway, i've just made a middleware library of the sort used in connect/express, to do SSL/TLS client certificate auth
00:43 < tgies> and as I'm a bit new to node, I was wondering if anyone might be curious enough to take a look at it and tell me if i've followed proper conventions especially with regard to error handling
00:43 < tgies> and if not, well, maybe someone will find it useful anyway
00:44 < tgies> https://github.com/tgies/client-certificate-auth
00:45 < tgies> i made it as a supporting library for a CAS server i'm working on in node
00:45 < tgies> I'm not sure whether that's a good idea or not
00:46 < tgies> since it's security-oriented code
00:46 < tgies> but I'm making it more as a learning experience than for real production use
01:05 < sandfox> tgies: can you access certificate information if the SSL is terminated by something like a load balancer before it hits node?
01:06 < sandfox> tgies: thinking mainly of heroku  here -> https://github.com/tgies/client-certificate-auth/blob/master/lib/clientCertificateAuth.js#L19
01:07 < tjmehta> Hello all, if I am using the request module to download a file (piping the stream to fs.createWriteStream). How do I access the headers before the entire download has completed (to access the content-length)?
01:08 < asdffa43> socket.io says 'welcome ..' but socket.emit('newuser', prompt("What's your name?"));  isn't throwing a prompt box
01:08 < asdffa43> after  socket.on('connect',function(){
01:08 < asdffa43> what's wrong?
01:09 < tjmehta> asdffa43 does this help? -- http://runnable.com/socketio/UTlPMV-f2W1TAAAu/Sending-and-receiving-events
01:10 < owen1> can someone try this? it's not printing anything on my tests - http://www.reddit.com/r/node/comments/1b4ro1/why_programming_in_node_isnt_like_anything_youve/c93ukfu
01:10 < asdffa43> tjmehta: webpage is loading slow
01:10 < owen1> also if anyone can explain what's up with concat-stream it would be great!
01:13 < tjmehta> asdffa43, okay Im not sure of what you're referring to by your explanation above. I can atleast guess two things that may be an issue with your "socket.emit('newuser', prompt("What's your name?"));" statement:
01:13 < tjmehta> 1: you should wrap that prompt call in a function "function () {prompt('...');}"
01:14 < tjmehta> 2: are you sure you are trying to emit or did you mean socket.on
01:15 < tjmehta> Anyone? -- repost -> Hello all, if I am using the request module to download a file (piping the stream to fs.createWriteStream). How do I access the headers before the entire download has completed (to access the content-length)?
01:45 < ericelliott> What is the best promise library for Node?
01:51 < ericelliott> tjmehta: Is request.head() useful?
01:57 < glacialheart> ##leveldb
02:00 < ningu> ericelliott: when and q are the two people generally use. but I haven't used them.
02:02 < tgies> sandfox, you caught me out, i haven't actually tested that yet ;p
02:02 < tgies> but I'm led to believe you can. I should probably stop being lazy and test it
02:03 < tgies> I know that you can have nginx acting as a reverse proxy pass the raw certificate into node
02:06 < ericelliott> ningu: yeah, I have been using Q, but wondering if there's a compelling reason to use something else. Is there a reason you haven't used them
02:06 < ericelliott> ?
02:10 < ningu> ericelliott: basically, I haven't really seen how it would help me.
02:11 < ningu> and I'm conerned it promises can introduce as many subtle bugs as it may solve.
02:11 < ningu> s/it/they/
02:25 < ningu> ericelliott: what problem do you think promises solve? well, I guess I should rephrase that: why do you think promises are a better solution than the alternative?
02:33 < ThePrimeMedian> is there a fix for the > 0.8.23 Error: spawn ENOENT when uploading files?
02:35 < ningu> ThePrimeMedian: eh? I've never seen that error and I have apps that receive uploads.
02:38 < ThePrimeMedian> im using https://github.com/madhums/node-imager/blob/master/package.json perhaps it's their code then
02:40 < AAA_awright> ningu: None?
02:41 < ningu> AAA_awright: huh?
02:53 < AAA_awright> ningu: Re promises
03:07 < craftynewby> Trying to get Crafty.js up and running with Node.js. having a hard time finding any functioning tutorials. any suggestions for functioning tutorials? 
03:12 < ningu> craftynewby: is your problem with crafty or with node? I have no idea what crafty is, but I know node....
03:12 < craftynewby> trying to go through this example: http://buildnewgames.com/real-time-multiplayer/
03:13 < craftynewby> but it dosnt work -_-
03:13 < Havvy> Isn't Craftyjs for the browser?
03:14 < craftynewby> yep!
03:14 < craftynewby> trying to create a multiplayer game
03:14 < ningu> craftynewby: ok, were you able to run the server in https://gist.github.com/FuzzYspo0N/2216646 ?
03:15 < craftynewby> I tried running it locally, but the console spat out an error on load
03:15 < craftynewby> on pageload
03:15 < ningu> what error?
03:15 < craftynewby> TypeError: Arguments to path.join must be strings     at f (path.js:204:15)
03:15 < craftynewby> it goes on
03:15 < ningu> hmmm
03:15 < craftynewby>     at Object.filter (native)     at exports.join (path.js:209:40)     at exports.send (c:\www\game\node_modules\express\node_modules\connect\lib\m iddleware\static.js:129:20)
03:16 < craftynewby> and I ran npm install
03:16 < craftynewby> so the manifest file created all the nod_modules files
03:16 < ningu> one sec
03:16 < ningu> what version of node, btw?
03:16 < craftynewby> fresh off the site
03:16 < craftynewby> how can i check?
03:16 < ningu> node -v
03:17 < craftynewby> v0.10.5
03:17 < ningu> either 0.8 or 0.10 should be fine for this app
03:17 < craftynewby> Should I revert back to v0.10.0?
03:17 < ningu> no
03:17 < ningu> I meant 0.8.x or 0.10.x
03:17 < craftynewby> thats what i though
03:18 < craftynewby> t
03:18 < craftynewby> does the app work for you?
03:18 < ningu> no, I got the same error
03:18 < ningu> let me take a look, it's probably a subtle standard lib incompatibility
03:18 < ningu> not sure though
03:19 < craftynewby> cool... thanks! another question though. more general. I'm looking to get started with node and multiplayer games. do you know of a up to date refrence to get started?
03:19 < craftynewby> I'm having a hell of a time finding a good resource
03:20 < ningu> I haven't done any games myself, but I know other folks here have
03:20 < ningu> so if you just wait until one of those people shows up... :P
03:21 < craftynewby> haha thanks
03:22 < ningu> hmm
03:23 < ningu> well, the app is using an old version of express, but on the other hand it's the latest 2.5.x and 1.9.x
03:24 < ningu> it looks like connect is trying to do path.join(null, foo) and path.join doesn't allow that... maybe it used to allow it in older versions of node
03:24 < craftynewby> ic
03:24 < ningu> fortunately there is a pretty easy fix, I think
03:24 < ningu> one sec
03:24 < craftynewby> sweet
03:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:29 < ningu> craftynewby: ok, in app.js you need to change line 37 to:
03:29 < ningu>         res.sendfile( 'index.html', { root: __dirname } );
03:29 < ningu> I mean 36
03:29 < ningu> and change like 53 to:
03:29 < ningu> erm, 52, sorry, my text editor is being weird about its line numbers :)
03:29 < ningu>         res.sendfile( file, { root: __dirname } );
03:30 < ningu> craftynewby: the static file serving is being done a bit strangely in this example app... anyway, I assume this issue/glitch would not happen in express 3.x
03:30 < craftynewby> alright i'll give it a go
03:30 < ningu> but changing those lines is hte easiest fix
03:31 < ningu> basically, you have to specify the root dir or path.join() will choke
03:31 < ningu> since if there is no root dir it uses null, which causes that error
03:31 < ningu> but it must have been ok to do that in earlier node's
03:32 < craftynewby> gotch
03:32 < craftynewby> a
03:32 < ningu> anyway, none of this is very interesting or relevant to the multiplayer game stuff
03:33 < ningu> node has been changing pretty quickly, so using something written 10 months ago sometimes causes small issues like this -- although it seems to be slowing down somewhat
03:34 < craftynewby> its working!
03:34 < craftynewby> thanks dude!
03:34 < ningu> :)
03:34 < craftynewby> you fixed me up ningu =P
03:34 < ningu> I tried connecting two users and I can move each user's icon around with the arrow keys
03:34 < ningu> yeah, all of the socket stuff looks like it works fine
03:34 < ningu> was just the silly path.join thing
03:35 < craftynewby> awesome now i'm off to play around thanks again!
03:35 < ningu> :)
03:35 < ningu> sure
04:36 < TheAceOfHearts> Guys! it works :D 
04:36 < TheAceOfHearts> it's a bit rough around the edges! 
04:36 < TheAceOfHearts> but it works :D
04:36 < ChrisPartridge> huzzah!
04:45 < ningu> TheAceOfHearts: what is "it"?
04:48 < TheAceOfHearts> my app! 
04:48 < TheAceOfHearts> so
04:49 < TheAceOfHearts> I built a laser tag system using an ARM Cortex-M3
04:49 < TheAceOfHearts> it connects through bluetooth to an android phone, so one gun per phone 
04:49 < TheAceOfHearts> then that hooks up to a server running node.js + socket.io 
04:49 < TheAceOfHearts> and the server keeps track of everything :D
04:49 < TheAceOfHearts> and I just ran through a Deathmatch game, and it wooorked :D
04:49 < ningu> how do you fire lasers?
04:50 < TheAceOfHearts> the gun has a trigger, and it has an IR Laser, so it transmits the gun's player ID
04:50 < ChrisPartridge> TheAceOfHearts: please make a video :P
04:50 < TheAceOfHearts> oh, I'll be making a video soon; it's not really finished at all, but it works! :D
04:50 < ningu> wait, I thought you said the guns were phones
04:50 < TheAceOfHearts> no no, like
04:51 < TheAceOfHearts> gun + vest = ARM Cortex-M3
04:51 < TheAceOfHearts> that connects through bluetooth to android phone 
04:51 < TheAceOfHearts> and then android phone connects to server 
04:51 < ningu> so each player keeps their phone in their pocket or whatever
04:51 < TheAceOfHearts> yup
04:51 < ChrisPartridge> TheAceOfHearts: cant get a wifi module, so phone isn't required?
04:51 < ningu> how's the lag?
04:51 < TheAceOfHearts> well, right now I just tested it all on my local network; I literally JUST got it to work @_@
04:52 < TheAceOfHearts> Chris: that's a mod I'm considering doing, so that all the guns play in one wifi
04:52 < TheAceOfHearts> and it shouldn't be very hard at all, since the MCU's code is pretty modular 
04:54 < ChrisPartridge> TheAceOfHearts: sounds like fun :-)
04:54 < TheAceOfHearts> it's also all gonna be open source :p, gonna put up the schematics and such; so building it should be ez pz
04:54 < TheAceOfHearts> it's a project for a class, so we had to add a lot of worthless parts which I'd remove if I were legitimately building it
04:54 < TheAceOfHearts> like… our professor made us add a GPS to the gun… even though the phone has one ~_~ 
05:02 < ChrisPartridge> TheAceOfHearts: removing the phone requirement is the first thing i'd do though (if not for a class project)
05:06 < TheAceOfHearts> shouldn't be too bad as well
05:06 < TheAceOfHearts> our goal was supposed to be something cheap + easy to use 
05:06 < TheAceOfHearts> but it ended up costing a lot ~_~ 
05:06 < ChrisPartridge> hah, what did it set you back?
05:07 < TheAceOfHearts> well, we're a team of four; according to our final report, each gun+vest apparently costs around $200~ which is absurd
05:07 < TheAceOfHearts> and by the amount of hours that we collectively worked, I think we charged our employer like $40,000 or something like that
05:07 < TheAceOfHearts> so they got ripped off pretty bad, imo
05:08 < TheAceOfHearts> sadly nobody seriously paid us $40,000 :P
05:08 < TheAceOfHearts> the $40k is just a make believe number after our collective hours at our imaginary fee
05:25 < mh512> Is nodejs v8 slower than chrome v8?
05:26 < mh512> I am running some stuff and it seems that nodejs is giving me 10x slower performance... thanks!
05:26 < ChrisPartridge> mh512: you're welcome!
05:28 < astropirate> #mongodb is dead, so i hope you guys don't mind me asking here
05:28 < astropirate> I have a collection with documents with the following structure:   { aliases [ 'bob', 'john', 'jack']}          how can i find "findOne"     find the first document that has an alias we are looking for?
05:28 < astropirate> right now i have   findOne( { aliases: { $in: [ myAliasValue ] } } )
05:28 < astropirate> and it can't find anything
05:30 < TheAceOfHearts> Chris, do you have a twitter? 
05:31 < ningu> astropirate: $elemMatch
05:32 < ChrisPartridge> TheAceOfHearts: nup
05:32 < TheAceOfHearts> kk
05:32 < ChrisPartridge> well, i do - i think, but rarely use it
05:32 < TheAceOfHearts> ah, it's okay, I was just gonna tag you for this: http://cl.ly/image/2F1p2l3R2f3E
05:33 < ChrisPartridge> hah
05:35 < astropirate> ningu, with that i have db.collection.find( { $elemMatch: { aliases: "myAlias" } } )   and it returns me nothing
05:35 < astropirate> and i knwo there exists a document with a field "aliases" that has a value of "myAlias"
05:36 < ningu> astropirate: no, { aliases: { $elemMatch: "myAlias" } }
05:37 < astropirate> ningu, i also tried exactly that
05:37 < astropirate> i tried this first infact
05:37 < astropirate> and no results
05:38 < ningu> dunno then, it looks right to me
05:38 < astropirate> it gives me an error sorry
05:38 < astropirate> it says
05:38 < astropirate> invalid parameter: expected an object ($elemMatch)
05:38 < ningu> hmm
05:39 < astropirate> so i did this too jsut now
05:39 < astropirate> { aliases: { $elemMatch: { "myAlias": 1 }   } }
05:39 < astropirate> to no avail
05:39 < astropirate> shot in the dark :)
05:39 < ningu> I've done this before, but it's been a while
05:40 < astropirate> i don't knnow why this is such a hard problem to find an answer to
05:40 < astropirate> i have been googling this all day
05:41 < ningu> astropirate: apparently you can just do, aliases: "myAlias"
05:42 < astropirate> right, someone jsut told me that in #mongodb this instant too
05:42 < astropirate> and that works, when there is only one element in the array
05:42 < astropirate> when i put in more elements int he array, it couldn't find anything anymore
05:50 < astropirate> thank you ningu!
05:55 < TheAceOfHearts> woot, now Timed Deathmatch works :D
06:32 < bmatusiak_> http://qrcode.bmatusiak.us/
06:37 < minibn> porting from PHP to nodejs, makes think that im producing more lines in nodejs
06:37 < minibn> is this normal?
06:37 < minibn> with callbacks and stuffs
06:38 < ljharb> line counts aren't a good metric of much of anything in either direction
06:41 < bmatusiak_> minibn i had same problem, untill i started modualizing everything
06:41 < ningu> it does take time to adjust to the paradigm
06:42 < minibn> how do you modualize?
06:42 < ningu> you should find a way to reuse whatever you can, there is almost always a way
06:42 < ningu> make a file that declares module.exports = foo
06:42 < ningu> require() that file
06:42 < minibn> in my case right now is kind of impossible
06:42 < ningu> doubtful
06:42 < minibn> because im doing the routes
06:42 < minibn> getting multiple data
06:43 < minibn> and each data request function has callbacks
06:43 < ningu> is there any common logic between your routes?
06:43 < minibn> no
06:43 < minibn> just getting data
06:43 < minibn> my logic is mostly done in models
06:43 < bmatusiak_> minibn you can also pass a objects instead of callback and use function off the object is another way to get use to the callback idea
06:44 < minibn> how do you do that
06:44 < minibn> pass object instead of callback
06:44 < ningu> minibn: well, I don't know your app but I suspect you can factor out more logic than you have
06:44 < minibn> ya ive been trying to do that
06:44 < minibn> some are not possible
06:45 < greelgorke> learn software design or die in (callback/classes/templates) hell
06:45 < Bergle_1> greelgorke -  you left out 'promises'   :) 
06:45 < ningu> minibn: is there any common logic in your data retrieving methods? e.g. stuff you do at the beginning of each callback?
06:46 < greelgorke> Bergle_1: whatever
06:46 < minibn> in php i can do var something = getData();
06:46 < minibn> thats only one line
06:46 < greelgorke> cyclomatic complexity
06:46 < minibn> but in js i gotta do getData(function(something) {
06:46 < minibn> 2 lines
06:46 < minibn> 3 lines with });
06:46 < greelgorke> minibn: getData(dataHandler)
06:46 < minibn> how can you factor that?
06:47 < minibn> and extra lines for the dataHandler function too
06:47 < greelgorke> put your function somewhere eles, give it a name and a hug of module environment
06:47 < minibn> i only use it once
06:47 < minibn> for a particular page
06:47 < greelgorke> and?
06:48 < greelgorke> it's no excuse for better structure
06:48 < minibn> so theres no other solution to reduce the total number of lines?
06:48 < greelgorke> if it's to small to be an own module, then put the functions in the same file
06:49 < minibn> i will end up with more lines in async than sync
06:49 < greelgorke> minibn: you could cofeescript :D
06:49 < minibn> ill stick with js
06:49 < greelgorke> if lines are so important to you, stick with php and live on :)
06:49 < minibn> so my actual question is that is this normal? to end up with more lines?
06:50 < minibn> no, PHP is not exciting anymore for me
06:50 < ningu> minibn: it depends on a lot of factors. sometime I end up with less, sometimes the same, sometimes more
06:50 < greelgorke> it depends on your legacy code and your expirience with node
06:50 < minibn> im kind of new with nodejs so its more exciting -> more motivation
06:50 < ningu> but to give you one example
06:50 < minibn> how about for people with more experience
06:50 < ningu> I recently refactored my client-side code for an app to make it use angularjs
06:50 < Lorentz> code should be just like music
06:50 < Lorentz> just as many notes as there needs to be
06:50 < minibn> that problem of var aa = getValue();
06:51 < minibn> in js 
06:51 < ningu> I ended up with *slightly* more lines of code, like, 20 lines more or something. however it was *vastly* easier to understand and maintain
06:51 < Lorentz> sometimes it's a lot of code, sometimes not
06:51 < minibn> will experienced people end up with more lines too?
06:51 < worldhacker> Hey could anyone tell me where console.js is located in node.js? I have a very strange server-breaking error every time I do a console.log
06:51 < Lorentz> who cares how many lines there are as long as it's well written
06:51 < worldhacker> and I would like to look at the code it is pointing to
06:51 < greelgorke> minibn: the question is not: ow many line. the question is: how good is your code
06:52 < greelgorke> worldhacker: in lib
06:52 < minibn> i was just asking if its normal to have more lines or not
06:52 < minibn> :(
06:53 < worldhacker> minibn: I'm not sure where my lib file is. How would I discover it?
06:53 < greelgorke> minibn: and the answer is: there is now yes or no
06:53 < greelgorke> no*
06:53 < ChrisPartridge> minibn: gist/pastebin an example of your code perhaps
06:54 < greelgorke> worldhacker: https://github.com/greelgorke/node/blob/master/lib/console.js
06:54 < greelgorke> oops
06:54 < worldhacker> many thanks
06:54 < greelgorke> take this https://github.com/joyent/node/blob/master/lib/console.js
06:54 < greelgorke> not my fork :D
06:55 < minibn> http://paste2.org/m2cF3Fw2
06:55 < minibn> thats my code
06:55 < minibn> just part of them
06:56 < minibn> im still continuing to port the next part
06:56 < bmatusiak_> minibn  heres a example for peace of min https://gist.github.com/bmatusiak/b1b88eea6477c703fd19
06:57 < minibn> ya thats one solution to make it easier to read
06:58 < minibn> but i prefer to just continue since im using it only once
06:58 < bmatusiak_> heh yea
06:58 < ningu> minibn: also, what is the backend -- sql db, mongo or what?
06:58 < minibn> sql
06:58 < minibn> im porting from PHP to node
06:59 < ningu> is there a reason you are re-implementing joins in node?
06:59 < minibn> joins?
06:59 < ningu> yeah, you know, that thing sql lets you do
07:00  * ChrisPartridge laughs
07:00 < minibn> ya, because i dont prefer to read SQL joins
07:00 < minibn> and i have to do a lot more like explode stuffs
07:00 < minibn> how can i explode in sql
07:00 < ningu> well, I don't see why you'd have a relational database and not use it for what it's good at
07:01 < minibn> i do it in other part
07:01 < minibn> this one is special case
07:01 < ningu> explode?
07:01 < minibn> cos more complex data crunching
07:01 < minibn> split
07:01 < minibn> array.split(' ')
07:01 < arnorhs> i'm trying to find a good job queue type of thing, like resque for ruby.. do you guys have an recommendations?
07:01 < ningu> you split a string, not an array
07:01 < minibn> ya
07:01 < minibn> string
07:01 < minibn> string.split('a');
07:01 < arnorhs> i find a lot of them out there, but they don't have many downloads so i don't know which one to choose
07:02 < ningu> why are you not storing the data normalized?
07:02 < ningu> if it's logically an array it shouldn't be stored as a string
07:02 < minibn> because that data was taken from somewhere else
07:02 < minibn> like a dictionary database
07:03 < ningu> ok
07:03 < ningu> well, postgres lets you split strings into arrays
07:03 < minibn> im using mysql
07:03 < ningu> anyway that wasn't really my point
07:03 < ningu> splitting a string into an array != a join
07:04 < minibn> i need to split
07:04 < ningu> e.g. the thing that finds edicts for each kanji
07:04 < ningu> that's exactly what you should be using a join for
07:04 < minibn> oh
07:05 < minibn> ya i can do join for that
07:05 < minibn> but i kind of hate having too many sqls
07:06 < ChrisPartridge> well, if you did a JOIN query, you will be removing 1 query - so yay!
07:07 < minibn> several js codes
07:07 < minibn> ya
07:10 < minibn> ok then ill use join for the sake of having more simple route function
07:10 < minibn> thanks
07:23 < minibn> i cannot do join
07:24 < minibn> because sometimes the edict returns multiple results
07:35 < Sadtaco> Have any of you tried writing in dart and compiling dart2js for your node.js apps??
07:36 < worldhacker> Has anyone ever encountered an error similar to 
07:36 < worldhacker> TypeError: Cannot call method 'write' of undefined
07:36 < worldhacker>     at Console.log (console.js:53:16)
07:36 < worldhacker>     at Server.<anonymous>
07:36 < worldhacker> I don't get the errors on my windows node 0.8.14 install, but they break my server on linux 0.10.4
07:37 < worldhacker> when I call console.log()
07:38 < Sadtaco> whatever you're chaining .write() on isn't defined
07:39 < greelgorke> worldhacker: have you messed up console._stdout?
07:39 < worldhacker> sadly, no. That would be winderfully obvious
07:40 < worldhacker> wonderfully
07:40 < [AD]Turbo> hola
07:40 < greelgorke> would you post your codepiece?
07:40 < greelgorke> on gist/pastebin
07:43 < worldhacker> greelgorke: That would be difficult. I'm working with a few mb of code
07:44 < worldhacker> greelgorke: While I have tried to narrow the source of the problem down by commenting out entire files and slowly commenting them back in again, the issue is unpredictable. For instance
07:44 < worldhacker> console.log('THIS IS A TEST');
07:44 < worldhacker> var utils = require('./utils');
07:44 < worldhacker> worked, while
07:44 < worldhacker> / console.log('THIS IS A TEST');
07:44 < worldhacker> var utils = require('./utils');
07:44 < worldhacker> did not
07:45 < worldhacker> the only difference being, I commented out the console.log. When I did that, the error came back.
07:46 < greelgorke> well, i guess some piece of code messed up with the console object. hard to say for sure without code knowledge
07:47 < worldhacker> I have run mulitple searches for references to the console, _stdout and log objects. No luck. Thanks for your help.
07:54 < ningu> worldhacker: https://github.com/joyent/node/blob/master/lib/console.js
07:57 < worldhacker> ningu: thank you ningu, I have already looked at it
08:18 < nfour> sadtaco, that dart2js for node sounds intersting. maybe you should give it a go and report back ;p
08:21 < nfour> https://groups.google.com/a/dartlang.org/forum/?fromgroups=#!topic/misc/B-IR59mRE1U
08:50 < paul_> Hallo, irgendjemand aus Deutschland hier?
08:51 < lubiana> Ja
08:52 < paul_> @lubiana Hi
09:00 < lubiana> Hi
09:02 < minibn> hi
09:11 < ningu> paul_: ich have 2,5 Jahr in Deutschland gewohnt aber ich in Amerikaner :)
09:11 < ningu> habe*
09:12 < sambarino> lol, i can actually understand that and i don't know dutch
09:12 < ningu> it isn't dutch
09:12 < sambarino> or german
09:12 < sambarino> lol
09:12 < ningu> my dutch is *much* worse
09:13 < ningu> I can't spell it to save my life
09:13 < sambarino> i'm from south africa so we have afrikaans here which is sort of dutch like
09:13 < ningu> yeah
09:14 < ningu> fortunately there isn't much academic literature in afrikaans
09:14 < sambarino> fortunately?
09:14 < ningu> well, fortunately for me so I don't have to try to read it :)
09:14 < sambarino> lol
09:15 < sambarino> reading the novels at school was quite a challenge
09:15 < ningu> "A man held hostage by Somali pirates says he was bemused when he encountered a crowd of eye patch-wearing, plastic sword-wielding women on the lecture circuit earlier this month."
09:19 < garthk> Ok, pushing several million tiny JavaScript objects through a stream turned out to be a rotten idea for performance. 
09:21 < bee> I have a question to ask,if I code "http.createServer(function (req,res) {     i = i + 1;     console.log(i);     res.end("done"); }).listen(8124);", the console output 1 and 2,why console.log(i) has been excuted twice but not once
09:21 < ningu> bee: it calls that function once for every request.
09:22 < bee> just one request
09:22 < ningu> how are you generating the request?
09:23 < bee> i just open the  site "http://localhost:8124/" in chrome
09:23 < ningu> it's probably sending a request for favicon as well as the main page
09:24 < bee> ningu,how i validate the point you issue
09:25 < ningu> bee: console.log(req.url);
09:28 < bee> ningu,u r right
09:29 < bee> ths for ur helping
10:13 < korilo> hey alllll
10:20 < MiracleBlue> Hey there :)
10:23 < minibn> hi
10:29 < MiracleBlue> What's going on guys?
10:33 < rhalff> Hi, could any of you recommend a good C++ online book, so I better understand how to write modules for V8? I can hack around in existing modules but I would like to better understand those modules and how to write my own.
10:37 < thewanderer1> Hi. I'm trying to write items to a stream obtained from fs.createWriteStreams and the performance is very poor. Here is my test case: http://paste.debian.net/hidden/f1a61aac/  . The writing speed, as indicated by `stat` and `du`, is about 1KB/s. Any ideas why?
10:44 < greelgorke> thewanderer1: seems to me you're doing complicated things there, needlessly copying buffers, using depricated 'binary' encoding etc.
10:45 < thewanderer1> greelgorke, what I'm trying to do is write a file of "events", or blobs, where each blob is prepended by a 4-byte unsigned int, marking its length
10:45 < thewanderer1> (kind of like a length-prefixed string)
10:48 < greelgorke> var envelope_buffer = new Buffer(buffer_blob + 4); creates probably not what you want
10:49 < thewanderer1> okay, that would be one bug... (I meant the length)
10:50 < greelgorke> your stream writer expects that it's write is always called with a complete event? so it never have to concatanate/parse the load?
10:50 < thewanderer1> greelgorke, yes
10:54 < thewanderer1> it just seems that the writable stream writes the data extremely slow - if I call the success callback immediately and just let it run through the buffer, it still only writes at a few KB/s
11:00 < greelgorke> thewanderer1: i posted a comment. but i'm not sure about performance.
11:00 < sambhav_> how to use json schema file in nodejs express for getting data from mongodb
11:03 < greelgorke> sambhav_: http://lmgtfy.com/?q=how+to+use+json+schema+file+in+nodejs+express+for+getting+data+from+mongodb
11:04 < sambhav_> greelgorke:already done that m not d kid to search for.m asking for help if u know
11:06 < greelgorke> then you have found enough tutorials and guides that answer your questions, i guess
11:07 < sambhav_> no not yet actually..
11:08 < greelgorke> what exactly is your problem?
11:15 < thewanderer1> greelgorke, I'll try to use that approach and let you know how it impacts performance, just a moment
11:24 < saso> Hy! I am working on some project and I need to include XML schemes and so on (DTD, XSLT i think). I have on statistics of some games played and I need them to save it to XML file (to download it). So i need to include (not sure really) DTD, XSLT and XML files somehow right? Can you help me please? What is the best and the easiest way to do this? So just save some data to XML file and download it. (within DTD and XSLT files maybe) Thanks
11:28 < thewanderer1> greelgorke, it's not faster at all, unfortunately...
12:20 < yug> anyone tried knox?
12:24 < Qalqi> http://stackoverflow.com/questions/16398344/integrating-yeoman-with-socketstream
12:24 < Qalqi> someone help me on this
12:24 < Hounddog> hey, lets say i installed some software using npm which has dependencies... now i would like to extend one of these dependencies... how would i go ahead about that to add the additional functionality?
12:25 < Qalqi> socketstream and yeoman channels are not at all responsive
12:26 < alfonsodev> @Hounddog that sounds like you want to do a fork
12:26 < alfonsodev> I think you should find in npmjs.org the package, see the github repo
12:26 < alfonsodev> then fork to your user account
12:26 < Hounddog> alfonsodev: fork the software change the dependency and fork the dependency also?
12:27 < alfonsodev> Yes I think so,
12:28 < alfonsodev> and then you could do a pull request to the original author, in case he want to merge your changes
12:28 < Hounddog> i am even thinking if i just make a wrapper
12:28 < Hounddog> the thing is... it is already merged but not up on npm yet
12:29 < Hounddog> one of the functions i need
12:34 < asdf43> if i put client-side code in a file user.js that is included in my html, do i need a special rule?
12:37 < Guest34473> child=require('child-process');  child.fork('script.js') ;  child.send('hello') ;  in script.js  process.on('message',function(){process.send('hi')}); 
12:38 < Guest34473> this code is not working can anyone help out 
12:39 < asdf43> when i put the clientside code from my index.html into a user.js, it doesn't function as it should
12:40 < __pradeep> child=require('child-process');  child.fork('script.js') ;  child.send('hello') ;  in script.js  process.on('message',function(){process.send('hi')}); 
12:40 < __pradeep> his code is not working can anyone help me out 
12:40 < minibn> sorry to interupt
12:40 < minibn> i have a question
12:40 < minibn> is there any difference between php regex with javascript regex
12:40 < minibn> like i have this regex on php /\(\d*\)|\/\(P\)\//
12:40 < minibn> it doesnt work on js
12:41 < __pradeep> child=require('child-process');  child.fork('script.js') ;  child.send('hello') ;  in script.js  process.on('message',function(){process.send('hi')}); 
12:41 < SomeoneWeird> stop spamming
12:41 < __pradeep> this code is not working can anyone help me outhis code is not working can anyone help me out
12:42 < __pradeep> so help me then
12:42 < Qalqi> __pradeep
12:43 < __pradeep> hi Qaliqi
12:43 < asdf43> node.js can't find user.js after moving the code from index.html into a file named user.js that is included, how to fix?
12:43 < Qalqi> __pradeep: whose code is not working?
12:43 < __pradeep> child=require('child-process');  child.fork('script.js') ;  child.send('hello') ;  in script.js  process.on('message',function(){process.send('hi')});
12:43 < Qalqi>  where is the rest of the code? 
12:44 < __pradeep> that is it
12:44 < Qalqi> i cant make anything out of it 
12:44 < Qalqi> ok
12:44 < Qalqi> let me check
12:44 < Qalqi> __pradeep: wats the error you get?
12:45 < __pradeep> no error child process do not get message , i mean on.message event do not invoke
12:45 < __pradeep> is node still support .fork method
12:46 < asdf43> how do i include a js file in my index.html (client side js) so that node can load it?
12:46 < asdf43> <script src="user.js"></script> not work
12:46 < greelgorke> __pradeep: you should wait a bit before you posting the first message
12:47 < __pradeep> ok
12:47 < greelgorke> ". Assume at least 30ms startup and 10mb memory for each new Node"
12:48 < __pradeep> but if i run parent process using forever-monitor then above code work perfectly
12:48 < geekie> Hi everyone, I have a problem when trying to run a call to a localhostname (blaha.dev) defined in my hosts file. Got error: getaddrinfo ENOTFOUND how do I get it to actually accept the hosts file too?
12:49 < __pradeep> like var fm_child=foreverMon.init(pathLib.join(__dirname,'app.js')) ; fm_child.start();
12:49 < __pradeep> this trick work
12:50 < __pradeep> app.js has this part of code :  child=require('child-process');  child.fork('script.js') ;  child.send('hello') ;
12:50 < __pradeep> sorry wrong code
12:50 < __pradeep> var parent = new (foreverMonitor.Monitor)(scriptPath,opt);
12:51 < __pradeep> in scriptPath : above code reside
12:51 < Qalqi> __pradeep: it must be require('child_process'_
12:51 < Qalqi> __pradeep: it must be require('child_process')
12:51 < __pradeep> yes i have done
12:51 < __pradeep> let me show you my code
12:51 < Qalqi> paste it on pastebin or dpaste
12:51 < __pradeep> require(pathLib.join(__dirname,'app.js'));
12:51 < __pradeep> and in app.js
12:52 < __pradeep> var cp = require('child_process');
12:52 < __pradeep> var parent = cp.fork(pathLib.join(__dirname,'parent.js'),config.spawnOptions(app_dir));
12:53 < __pradeep> Qalqi
12:54 < Qalqi> i am still not sure wat to say
12:55 < __pradeep> same code work if i run parent code with forever-monitor 
12:55 < __pradeep> is forever-monitor do anything which i dont
13:02 < __pradeep> Qalqi
13:03 < Qalqi> where did you get this code you are working on?
13:03 < __pradeep> i code it
13:03 < __pradeep> from scratch
13:22 < inimino> Hello nodely folks.
13:28 < squeeks> Let's talk about npm. Let's talk about having the ability to install dependencies exclusively from a designated folder in the filesystem who's existence didn't come about by doing nasty business with install —cache.
13:35 < mscdex_> node.js rules!
13:44 < asdf43> mscdex: no it doesn't
13:45 < asdf43> squeeks: there's some dependency plugins that makes things nice, but i dont have time to get into it because node.js decided it will fuck my shit when i move client side code to user.js instead of leaving it in index.html
13:49 < sandfox> asdf43: troll much?
13:49 < squeeks> asdf43: somehow I suspect said plugins are either wheel reinventions or hiding the true problems.
13:49 < asdf43> sandfox: i don't know - i've never really seen you before
13:49 < asdf43> squeeks: yea but they work
13:49 < asdf43> there's more than one
13:50 < mscdex> asdf43: it does!
13:50 < squeeks> I hear using saran wrap and a rubber band works as well as durex...
13:50 < asdf43> mscdex: ok - you go talk to yourself in the closet
13:50 < sandfox> asdf43: Don't blame node, 99% of problems lie in user land, either with module authors, or application writers
13:50 < mattd> squeeks: where did you read that? and have you tried it?
13:50 < asdf43> squeeks: look 'node.js dependency management' on stackoverflow
13:50 < mscdex> asdf43: node.js rules!!!
13:50 < asdf43> mscdex: shut up
13:50 < asdf43> sandfox: go to hell
13:51 < sandfox> asdf43: Already got a season ticket
13:51 < asdf43> ok now get over it and fuck off
13:51 < Qalqi> there is a bullshit.js on github 
13:51 < Qalqi> wth?
13:52 < mscdex> pebkac.js
13:52 < sandfox> asdf43: Your problem seems to be with the way some modules are working with each other, you really should look into that first before going mental at the platform
13:52 < asdf43> sandfox: no tnx
13:53 < squeeks> asdf43: plenty of questions, none I find appear relevant, any recommendations?
13:53 < asdf43> squeeks: yes maybe i have one
13:53 < asdf43> i have to check all my over 100 tabs
13:53 < sandfox> asdf43: therein lies your real problem
13:54 < asdf43> squeeks: http://stackoverflow.com/questions/12893046/how-to-manage-client-side-javascript-dependencies
13:54 < asdf43> sandfox: you're useless
13:54 < mscdex> node.js is awesome!
13:54 < sandfox> asdf43: So is your mother but I try not whine about it too much
13:54 < asdf43> stop spamming that, even if you want to troll me
13:54 < asdf43> use pm instead
13:55 < mscdex> asdf43: you must be new here
13:55 < echo|> ^
13:55 < sandfox> asdf43: You don't seem to want any help and just want to whinge
13:55 < asdf43> sandfox: that's because you're full of shit
13:55 < asdf43> keep the help to yourself
13:55 < mattd> can you guys wait a minute while I make some popcorn
13:56 < echo|> Or just launching explicatives for no apparent reason 
13:56 < kevinswiber> So glad I popped into IRC for a moment.  ;)
13:56 < squeeks> https://github.com/isaacs/npm/blob/master/lib/cache.js#L1141-L1144 someone want to explain this to me? What the hell is this?
13:56 < kevinswiber> Some patterns never change.
13:56 < sandfox> hehe, though seriously, is there a question anywhere amongst this? I can troll all day, but i'd rather get something constructive done either by learning something or helping someone
13:58 < Qalqi> please continue
13:58 < kevinswiber> squeeks: A demonstration of a known wart in the language.  A fix will be available in ES6.
13:58 < mscdex> squeeks: it's checking optional parameters
13:58 < echo|> squeeks: Those appear to be optional parameters and it's attempting to identify which one is the callback with a passed function.
13:58 < devoidfury> squeeks: it allows the function to accept different args, as there isn't a cleaner way to do it atm\
13:58 < mscdex> :-)
13:58 < Qalqi> asdf43,sandfox we are with you 
13:59 < mscdex> may the node be with you
13:59 < sandfox> out of interest is anyone here using node v0.10.x in production much?
13:59 < asdf43> squeeks: if you decide on one solution, please let me know
13:59 < mscdex> sandfox: yes
13:59 < devoidfury> sandfox: yes
14:00 < kevinswiber> sandfox: Yes, but only for a small API proxy.  Nothing major.
14:00 < squeeks> asdf43: "decide".. I can't even see a solution.
14:00 < devoidfury> sandfox: had an issue in 0.10.0 with sockets not closing cleanly, but it's been fixed and haven't had any other breakage
14:00 < asdf43> squeeks: chandra suggested requirejs, there's others if you scroll down
14:01 < Qalqi> asdf43: no offensive talk here, kid
14:02 < sandfox> thanks guys, nice to know it's getting some usage - thinking about deploying at work but wondered if everyone was sticking with 0.8 for a while
14:02 < asdf43> is this where all the expert trolls congregate?
14:03 < squeeks> asdf43: still failing to see how any of these are of any use to me. 0 client side code going on here.
14:03 < mscdex> it's where all noders congregate!
14:03 < squeeks> and hem wants to install half of npm thus far
14:05 < squeeks> I know, we like user stories, don't we? Let's user story!
14:05 < squeeks> Given I have servers with no internet connectivity
14:05 < squeeks>  And I'm expected to have the uncompiled source for all dependencies
14:05 < squeeks> As a Monkey with a Typewriter
14:05 < squeeks> I want npm to compile and install all dependencies from somewhere on the filesystem without having to use —cache
14:05 < echo|> Sounds as though it's time for you to fork npm
14:05 < echo|> :3
14:06 < sandfox> squeaks - use git uri's?
14:06 < Qalqi> asdf43: thats not how you talk here
14:06 < asdf43> wow, even the trolling is pathetic in the node community - in the way scum is pathetic, not in the way cute rabbits are pathetic
14:07 < sandfox> anyone doing continuous deployment off the back of travis-ci with node projects?
14:08 < devoidfury> squeeks: add your ./node_modules to your deploy codebase and run npm rebuild
14:09 < devoidfury> that will compile all the packages that need it
14:09 < squeeks> devoidfury: so, uhh, how is that going to give me source tarballs?
14:09 < thearchitectnlog> hi guys am new to node who is free to support me for 5 mins 
14:10 < devoidfury> squeeks: I missed the original question, but the source is still in there
14:10 < squeeks> I want the tarballs as they were pulled from the registry.
14:11 < squeeks> and then to be able to install exclusively from said tarballs.
14:13 < thearchitectnlog> how do i solve https://github.com/dreamerslab/express-todo-example
14:13 < sandfox> squeaks - npm can install from any url that resolves down to a tar ball, could you just copy all the ones you want locally? or do you want to avoid messy package.json?
14:14 < echo|> thearchitectnlog: What's the issue you're encountering?
14:15 < squeeks> sandfax: clearly the latter.
14:16 < devoidfury> squeeks: you can get the tarball from a source by using 'npm pack', so write up a little script that does that automatically for your package.json => dependencies. Next, a little bash script that does something like "npm install *.tgz"
14:17 < mscdex> find . -name "*.tar.gz" | xargs npm install
14:17 < mscdex> :-D
14:17 < sandfox> squeeks: sorry, apparently I can't spell today. No clean option i think of with npm apart from what devoidfury and mscdex  suggest
14:17 < squeeks> mscdex: that won't work, deps of deps will still attempt to go out on wire
14:18 < mscdex> squeeks: i just read what devoidfury said
14:19 < sandfox> squeeks: no chance of cloning just part of nom-couch locally? realise that is a massive faff at the very least..
14:20 < devoidfury> so do -- npm cache clean && npm install && tar xvf ~/.npm -- then on server side npm install --cache
14:20 < squeeks> ^ uses cache, expiclitly said I wanted to avoid that like the plague
14:20 < devoidfury> my bash foo needs a bit of work, but that's the gist
14:21 < devoidfury> squeeks: looks like you'll need a DIY solution then, sorry mate
14:22 < squeeks> getting the sec clearances for npm-couch in this neck of the woods would be more difficult than attempting to cross the 38 parallel over land
14:23 < squeeks> thanks anyway, looks like I need to go buy some more diet coke
14:23 < tomshreds> Hi guys, is Handlebars still a good templating engine choice for node.js? It's been a while since I played with it
14:24 < minibn> im using jade
14:24 < minibn> swig can be good too
14:24 < minibn> but never tried it
14:24 < sandfox> squeeks: just for curiosity - whats the pain with --cache?
14:26 < tomshreds> woah swig looks nice
14:26 < minibn> yes
14:26 < minibn> but still need to write html
14:26 < minibn> i like jade cos it looks good
14:26 < minibn> sometimes its annoying to debug though
14:27 -!- mode/#Node.js [+mi] by isaacs
14:27 -!- mode/#Node.js [+Cimnt]
14:27 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
14:29 -!- mode/#Node.js [-o konobi] by ChanServ
14:30 -!- mode/#Node.js [-o konobi] by ChanServ
14:30 -!- mode/#Node.js [-b Omid!*@*] by isaacs
14:34 -!- 1 - #Node.js: ban *!*rodyhadda@206.248.136.* [by isaacbw!~ubuntu@ec2-54-235-250-85.compute-1.amazonaws.com, 657350 secs ago]
14:34 -!- 2 - #Node.js: ban *!*Dogalog@174.255.0.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 3 - #Node.js: ban *!*dertuloun@220.82.34.219 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 4 - #Node.js: ban *!*b8207a5d@*.184.32.122.93 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 5 - #Node.js: ban *!*@74.88.87.158 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 6 - #Node.js: ban *!*@ool-4a58579e.dyn.optonline.net [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 7 - #Node.js: ban *!*@176.96.167.187 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 8 - #Node.js: ban *!*darknoise@*.masturb8.in [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 9 - #Node.js: ban *!*@*.sub-174-253-132.myvzw.com [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 10 - #Node.js: ban CAPSLOCKBOT!*@* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 11 - #Node.js: ban *!*@75.69.51.184 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 12 - #Node.js: ban ryan_opper!*@* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 13 - #Node.js: ban *!*ukitas14a@*.static.zebra.lt [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 14 - #Node.js: ban *!*@24.69.197.34 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 15 - #Node.js: ban *!*colin@pdpc/supporter/professional/riven [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 16 - #Node.js: ban *!*78c232c2@*.120.194.50.194 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 17 - #Node.js: ban *!*cryptopsy@*.cpe.net.cable.rogers.com [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 18 - #Node.js: ban *!*sokaeoals@*.bb.sky.com [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 19 - #Node.js: ban *!*bfishe200@68.87.42.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 20 - #Node.js: ban *!*JohnBlack@114.106.26.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 21 - #Node.js: ban *!*nodebot@gsxm.net [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 22 - #Node.js: ban *!*@178.22.51.87 [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 23 - #Node.js: ban Ensut*!*@* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 24 - #Node.js: ban *!*JohnMurde@119.186.244.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 25 - #Node.js: ban *!*10458ED75@*.euronet.net.pl [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 26 - #Node.js: ban *!*nmosis@*.static.stls.mo.charter.com [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 27 - #Node.js: ban *!*neurosys@*.static.stls.mo.charter.com [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 28 - #Node.js: ban *!*@c-68-81-255-153.hsd1.pa.comcast.net [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 29 - #Node.js: ban *!*currymunc@*.and.daddy.dont.appreci8.me [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 30 - #Node.js: ban *!*nodeuser@*.and.you.cant.annihil8.us [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 31 - #Node.js: ban *!*wot@199.15.118.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 32 - #Node.js: ban *!*@199.15.118.* [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 33 - #Node.js: ban *!*@ool-457a8633.dyn.optonline.net [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 34 - #Node.js: ban *!*clwfngr@*.mullvad.net [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- 35 - #Node.js: ban *!*dan@unaffiliated/mindvirus [by calvino.freenode.net, 3065852 secs ago]
14:34 -!- #Node.js End of Channel Ban List
14:55 -!- mode/#Node.js [+Cimnt]
14:55 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
14:55 -!- mode/#Node.js [-i] by isaacs
14:55 -!- mode/#Node.js [+Cmnt]
14:55 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
14:55 -!- mode/#Node.js [-m] by isaacs
15:09 < szubrawca> hello
15:10 < kenperkins> hm
15:10 < kenperkins> morning
15:10 <@isaacs> sorry for the 20 minutes of invite-only mode :)
15:10 <@isaacs> and de-voicing
15:11 <@isaacs> think of it as a brief moment of silence to contemplate node and your life
15:11 <@isaacs> :)
15:11 < kenperkins> I was confused what happened to my client :P
15:11 < squeeks> No, it was a brief moment to go buy another bottle of diet coke because npm isn't going to fix itself.
15:12 < standoo> squeeks: what app are you making?
15:12 < squeeks> wat
15:12 < kenperkins> mostly I'm overwhelmed by the delta between what pkgcloud does and what I need it to do :D
15:12 < standoo> isaacs: invite-only mode?
15:13 <@isaacs> standoo: yeah, irc mode messup
15:14 < greelgorke> i'm glad someone woke a mod..
15:14 < greelgorke> now time for going home
15:17 < kevwil> happy to hear it was that simple
15:17 < szubrawca> hi guys. could you help a newbie to design an app?
15:21 < standoo> standoo:
15:21 < Virunga> lol
15:22 < standoo> oopps
15:22 < Virunga> Odor!
15:22 < standoo> Odor!?
15:22 < Virunga> Odor Odor!
15:22 < standoo> Odor Odor
15:22 < Virunga> Or maybe Hodor
15:22 < standoo> what does that mean?
15:22 < EyePulp> heh
15:22 < Virunga> He's a Game Of Thrones' character 
15:23 < standoo> Odor
15:23 < standoo> odour?
15:23 <@isaacs> Virunga: why do they call him odor?  does he smell bad?
15:23 < EyePulp> Callbacks are coming.
15:24 < standoo> EyePulp: from where./
15:24 < Virunga> isaacs: likely. He's a big middle-age chubby man
15:24 < EyePulp> standoo: Probably somewhere past the wall.
15:25 < Virunga> ( I've never though i'd chat with isaacs for the first time about Hodor... )
15:25 < Virunga> Hi isaacs!
15:26 < EyePulp> Seriously - he's a Mother of Dragons type if ever there was one.
15:26 < other_guy> I'm trying to figure out why this causes memory consumption to soar unbounded...
15:26 < other_guy> https://gist.github.com/nathanaschbacher/5481454ad7151be525a8
15:27 < jsmonkey> Hi, I am doing a quick grunt task for searching in my project and finding // TODO : something, comments. Is there a good npm package for finding in files or even better folders for a search phrase?
15:27 < jsmonkey> of course there is.. but could anyone care to recommend one :)
15:28 < squeeks> ack.
15:30 < other_guy> My best guess on the code 200 case is that requests are piling up and being queued faster than the http.get() is getting responses
15:30 < other_guy> however, if true, that makes no sense for the error case if you set the GET url to some known bad address like http://localhost:12312
15:30 < devoidfury> it'll take a little bet for the request to return, so you're stacking a whole bunch of callbacks
15:30 < other_guy> where the ECONNREFUSED should kick out immediately and garbage collection should be happening.
15:32 < other_guy> devoidfury, what about the error case?
15:32 < devoidfury> other_guy: it has a timeout
15:32 < Fishrock123> Is there documentation somewhere on what Math functions node supports? (Like sine, etc?)
15:32 < other_guy> the ECONNREFUSED error comes back immediately.
15:34 < korilo> hello again
15:34 < szubrawca> is express + backbone + mongoose good combo for single-page app? or could you recommend something else?
15:35 < devoidfury> other_guy: https://gist.github.com/devoidfury/bf2417b2efc91674e037
15:36 < EyePulp> szubrawca: depending on the type of work you want to do on the front end, I've had a lot of fun using knockout.js for data-binding and skipping a lot of manual dom manipulation
15:37 < other_guy> devoidfury, right you are
15:38 < other_guy> Well… I don't have a good way to deal with that since the point of the tool I'm building is a load generator.
15:38 < other_guy> so the whole idea is to throw as many requests as possible at the thing until it tips over.
15:38 < c4milo> konobi: https://twitter.com/c4milo/status/331432260203053056
15:38 < other_guy> but at least now I know where that is coming from
15:39 < other_guy> c4milo, I was just on your github repo :-)
15:39 < devoidfury> other_guy: start it slow -- rate limit it, and increase it over time until it croaks
15:39 < c4milo> other_guy: nice :)
15:40 < other_guy> Yeah, I could queue up the requests and check the size of the queue before pushing a new one on, and pull them off as they complete.
15:40 < szubrawca> EyePulp: backbone is perfect for front end, but im not sure if express a good for spa. it will be my first node app
15:41 < ExxKA> Hey Guys. Is async blocking on its control flow operations like series, parallel and each?
15:42 < EyePulp> szubrawca: Sorry, I misread you as asking for opinions on the stack you had picked.  my bad. =)
15:48 < szubrawca> EyePulp: well, it is ;) another question, i will have to synchronize local db with soundcloud's account content, is it good idea to run two different instances of node, one for app itself and another one for sync and admin stuff?
15:50 < EyePulp> szubrawca: one instance / app  under node would be fine.
15:51 < EyePulp> All the functions you want to do are just that - separate functions related to the same concept.
15:53 < szubrawca> so, one instance for app and admin?
15:54 < EyePulp> is your admin just another web page to serve?
16:01 < szubrawca> EyePulp: i'm not sure if understand you right. admin will create / edit data and put it in db, app just take the whole collection from db, and put it in google map
16:02 < szubrawca> so basically they will share db connection
16:03 < EyePulp> szubrawca: The answer is that a single node instance can handle this.  
16:04 < szubrawca> ok thanks
16:04 < szubrawca> nice to meet you guys, see you later
16:18 < saso> Hy! Can you help me something about creating XML files and add functionality to download them?
16:18 < mkozjak> any ideas on using a 'timeout' event to check the other side of the half-open tcp connection if it died periodically (twice per minute, let's say) but not to use any pinging modules?
16:19 < mkozjak> just found out that there's no setsockopts configuring via nodejs
16:19 < other_guy> does anyone know how to generate dynamic JS using JADE?
16:20 < other_guy> I can see how to inline static JS using the 'script' statement
16:20 < mkozjak> the server i'm 'sniffing' on is mostly silent, so i can't just consider it to be dead just based on the 'timeout' event..
16:20 < other_guy> but it's not clear how I'd generate dynamic JS to be served up from my express app based on bound information from my controllers/routes
16:36 < minibn> how to get unix time stamp in js
16:36 < minibn> i tried new Date().getTime();
16:36 < minibn> but it gives me different
16:36 < minibn> different with time() in php
16:36 < minibn> 1367858185
16:36 < minibn> 1367858180829
16:36 < minibn> why it has 3 digits extra 
16:37 < squeeks> javascript gives you miliseconds.
16:37 < geNAZt> divide it through 1000
16:37 < geNAZt> and everything is fine
16:37 < geNAZt> :D
16:38 < minibn> oh
16:38 < minibn> ive been using second until now
16:38 < minibn> in my database
16:38 < minibn> i didnt use mysql timestamp ><
16:38 < geNAZt> trololol
16:38 < geNAZt> :D
16:39 < minibn> i started my project like 4 years ago
16:40 < geNAZt> well its okay
16:40 < geNAZt> >> (new Date()).getTime() / 1000;
16:40 < purr> geNAZt: (number) 1367858429.68
16:40 < geNAZt> >> Math.floor((new Date()).getTime() / 1000);
16:40 < purr> geNAZt: (number) 1367858439
16:40 < geNAZt> unix timestamp made in js
16:40 < minibn> is there anyway to avoid "undefined" !== typeof variable
16:41 < minibn> i do Date.now() /1000 |0
16:41 < minibn> from stack overflow
16:41 < geNAZt> well it can cause bad numbers
16:41 < minibn> bad numbers?
16:41 < geNAZt> yes it safer to rely on Date.getTime();
16:41 < geNAZt> then on Date.now()
16:42 < minibn> ok
16:42 < minibn> so Date.getTime() | 0 is good?
16:42 < geNAZt> and also the | isnt needed since v8 has the getTime() in the date objeczt
16:42 < geNAZt> well the pipe does that
16:42 < geNAZt> if this doesnt work | use that
16:43 < minibn> no its not ||
16:43 < minibn> | 0 is like flooring
16:43 < minibn> if i do without | 0
16:43 < minibn> it will give me commas
16:43 < geNAZt> (new Date()).getTime() / 1000 | 0;
16:43 < geNAZt> >> (new Date()).getTime() / 1000 | 0;
16:43 < purr> geNAZt: (number) 1367858618
16:43 < geNAZt> o doesnt know that
16:43 < geNAZt> nice
16:44 < minibn> ya
16:44 < minibn> i just know that just now
16:45 < DiegoMax> hello
16:45 < minibn> how about the undefined thing
16:45 < DiegoMax> i need some help with something
16:45 < geNAZt> DiegoMax, just ask
16:45 < geNAZt> minibn, in which case ?
16:45 < DiegoMax> i have an array where im storking some objects
16:45 < DiegoMax> at some point
16:45 < DiegoMax> i delete objects from it by doing
16:45 < DiegoMax> delete blah blah
16:45 < DiegoMax> and the objects get removed
16:45 < minibn> in my day job, i dont have to do undefined anymore
16:45 < DiegoMax> however, if i do a console.log of the array
16:45 < DiegoMax> it shows as : bookingsArray: [  ]
16:45 < geNAZt> yes 
16:45 < DiegoMax> (notice the spaces inside [ ])
16:46 < minibn> i dont know how to project is structured
16:46 < geNAZt> because it isnt delted
16:46 < DiegoMax> and the lenght is 1
16:46 < geNAZt> the array value of this index gets nulled
16:46 < DiegoMax> it isnt deleted ?
16:46 < geNAZt> no it is marked as "can be freed" for the gc
16:46 < DiegoMax> so what is the way to remove an object completely from an array ?
16:47 < geNAZt> http://www.w3schools.com/jsref/jsref_splice.asp
16:47 < DiegoMax> splice ??
16:47 < geNAZt> yes
16:48 < minibn> ya i had that problem too
16:48 < minibn> and i use splice now
16:48 < geNAZt> minibn, in which cases do you use this "undefined" !== typeof variable ?
16:48 < minibn> some array
16:48 < minibn> "undefined" !== typeof array[0]
16:48 < DiegoMax> interesting....
16:48 < DiegoMax> thanks geNAZt
16:48 < geNAZt> for normal you dont have to do it
16:49 < minibn> according to http://jsperf.com/date-now-vs-new-date-gettime/10
16:49 < julianduque> geNAZt: http://w3fools.com/
16:49 < minibn> Date.now() is the fastest
16:49 < minibn> really_
16:49 < DiegoMax> geNAZt, just another quick question, by using this splice method, will the GC also remove the object from memory ?
16:49 < DiegoMax> or do i still need to call delete on it ?
16:49 < geNAZt> gc does catch it
16:49 < DiegoMax> k thanks
16:49 < Soarez> shorter: +new Date
16:50 < minibn> +new Date is slow
16:50 < minibn> the slowest
16:51 < geNAZt> well i will test it in a node use case
16:51 < geNAZt> one moment
16:51 < minibn> http://jsperf.com/date-now-vs-new-date-gettime/10
16:51 < minibn> i use chrome
16:52 < shlevy> Is there a consensus on what the best object-extend npm package is?
16:53 < minibn> underscore
16:53 < shlevy> minibn: Ah, that looks useful! Thanks
16:54 < minibn> i dont know somehow in JS i feel like my code is more in control. like i own it.
16:54 < minibn> while in JS
16:54 < minibn> i mean while in PHP
16:54 < minibn> i feel like its a jungle
16:54 < geNAZt> well Date.now seams to be the fastest
16:54 < minibn> although i fully wrote both of them
16:54 < geNAZt> even in node
16:54 < minibn> ya so im using date
16:54 < minibn> im using that
16:55 < minibn> Date.now
16:55 < geNAZt> well in my code i use caches for this kind of tasks :D
16:55 < minibn> although the codes in nodes got more lines than php
16:56 < geNAZt> but you can do more with node as with php :D
16:56 < minibn> ya
16:56 < minibn> now im having another problem
16:56 < minibn> still porting
16:56 < minibn> php -> node
16:57 < minibn> dont know when this will finish
16:57 < geNAZt> just ask :D
16:57 < minibn> i have this
16:57 < minibn> switch(aa) { case something: var = async } render('aa', var);
16:58 < minibn> and it has many cases with async 
16:58 < minibn> the solution is to write callback render for each case
16:58 < minibn> its kind of bad
16:58 < minibn> any better solution to refactor?
16:58 < minibn> oh
16:59 < minibn> maybe i can use async module
16:59 < geNAZt> well swicth can be bad in js
16:59 < minibn> async.series(case, function(err, result)
16:59 < geNAZt> so i never used it
17:05 < beeant> i changed my nick
17:07 < bmatusiak_> yea geNAZt is trying to change the world from php to nodejs, 1 minibn at a time :P
17:07 < geNAZt> php2node convertor 1.0
17:07 < geNAZt> :D
17:08 < bmatusiak_> you know we should make such a converter
17:10 < bmatusiak_> parse the php to a AST and convert it to javascript AST and compile to bin :P
17:11 < Willox> bmatusiak_, that's easy
17:11 < bmatusiak_> i know
17:12 < bmatusiak_> its a good idea
17:12 < bmatusiak_> :P
17:12 < Willox> I'll see you in 10 minutes
17:12 < beeant-macbook> theres no more minibn
17:12 < beeant-macbook> i changed my nick
17:12 < beeant-macbook> i saw a book
17:12 < beeant-macbook> from oriely
17:13 < Willox> bent is a great nick
17:13 < beeant> http://www.amazon.com/Node-js-PHP-Developers-Porting/dp/1449333605
17:13 < beeant> its bee ant not bent
17:13 < Willox> I was making a cruel juke :(
17:13 < beeant> that book talks about a tool like node2php
17:13 <@MI6> joyent/node: Timothy J Fontaine v0.10 * 76cbd03 : build: only use DESTDIR instead of PREFIX for pkg - http://git.io/bZofww
17:14 < beeant> but i dont know if its good or not so i dont buy the book
17:14 < beeant> i bought node.js in action from MEAP
17:15 < other_guy> is there a template engine like Jade that lets you generate static JS files rather than HTML?
17:15 < ForSpareParts> What's the standard/preferred library for SQLite database access from node applications? I see references to several around the web.
17:15 < beeant> coffee script
17:15 < beeant> other_guy coffeescript
17:16 < other_guy> ugh, not exactly what I had in mind.
17:16 < tomshreds> Hi! using substack's node-optimist I'd like to accept arguments containing spaces so node test.js --name=My Name would work and argv.name would = My Name
17:16 < beeant> http://coffeescript.org/
17:16 < tomshreds> Anyone knows how to do so? thanks
17:16 < other_guy> But, yes that fulfills the reqs I stated.
17:16 < Willox> other_guy, be more specific then :)
17:16 < squeeks> tomshreds: —name="Tom Shreds" doesn't work?
17:16 < beeant> maybe i should write in coffeescript instead of js 
17:17 < tomshreds> squeeks: nope it gives me name = "tom"
17:17 < AAA_awright> tomshreds: That's between your and your shell, shells decide how to pass arguments, most just seperate by spaces
17:17 < tomshreds> and there's a "Shreds" parameter lonely
17:17 < Willox> I actually think coffeescript looks awful, beeant
17:17 < squeeks> tomshreds: smells like a bug!
17:17 < tomshreds> AAA_awright: oh right
17:17 < beeant> ya thats what i thought too
17:18 < AAA_awright> tomshreds: You should be able to go like:
17:18 < AAA_awright> $ node test.js "--name=My Name"
17:18 < AAA_awright> $ node test.js --name='My Name'
17:18 < AAA_awright> $ node test.js --name=My\ Name
17:18 < AAA_awright> or similar
17:19 < tomshreds> oh I'll try these
17:19 < beeant> why do you use AAA in ur nick
17:19 < beeant> like batteries
17:19 < beeant> AAA
17:19 < AAA_awright> beeant: I stole it from the guy who has all the high scores on all the arcade machines
17:20 < tomshreds> AAA_awright: 1st: same bug, 2nd: same bug, 3rd: same bug :-/
17:20 < AAA_awright> tomshreds: What do you mean same bug
17:20 < beeant> ooh ya i saw that many times
17:20 < AAA_awright> What shell are you using?!
17:20 < AAA_awright> tomshreds: console.log(process.argv)
17:20 < tomshreds> AAA_awright: it does the same, it only keeps the first string. I'm using bash.
17:21 < tomshreds> AAA_awright:
17:21 < tomshreds> { _: [ 'create', 'THE', 'THING' ],
17:21 < tomshreds>   '$0': 'node ./index.js',
17:21 < tomshreds>   tier: 'ALL' }
17:21 < tomshreds> with --tier='ALL THE THING'
17:21 < AAA_awright> What the hell, that's supposed to be an Array
17:21 < tomshreds> or "--tier=ALL THE THING" OR --tier=ALL\ THE\ THING
17:22 < tomshreds> OH WAIT
17:22 < AAA_awright> ['node', 'test.js', '--name=My Name']
17:22 < tomshreds> I was outputing optimist's argv, but process' is:
17:22 < tomshreds> [ 'node',
17:22 < tomshreds>   '/Users/tommybergeron/Desktop/GameDev/KeyManager/index.js',
17:22 < tomshreds>   'create',
17:22 < tomshreds>   '--tier=ALL',
17:22 < tomshreds>   'THE',
17:22 < tomshreds>   'THING' ]
17:22 < tomshreds> WOAH fuck sorry about that
17:23 < AAA_awright> What are you using on your shell?
17:23 < AAA_awright> Include leading $ to show it's a shell
17:24 < tomshreds> Tommys-MacBook-Pro:KeyManager tommybergeron$ keyman create --tier='ALL THE THING'
17:24 < tomshreds> that was my last attempt
17:24 < squeeks> nice PS1 bro
17:24 < AAA_awright> That should definitely work
17:24 < bren> hi everybody.. is there anybody interested in looking at a small snippet of code and telling me what I'm doing wrong with streams? :)
17:24 < tomshreds> I'll try out on my linux box lol
17:25 < geNAZt> bren, show me
17:25 < AAA_awright> tomshreds: Aside, I wouldn't consider using an argument parser, it's not very hard to parse arguments yourself... Just use a for loop starting at `var i=2` and a switch block.
17:25 < tomshreds> ...
17:25 < tomshreds> tbergeron@Brainpad:~/test$ node index.js --tier='ALL THE THINGS'
17:25 < tomshreds> [ 'node',
17:25 < tomshreds>   '/home/tbergeron/test/index.js',
17:25 < tomshreds>   '--tier=ALL THE THINGS' ]
17:26 < bren> geNAZt: thanks!  https://gist.github.com/anonymous/3018deb9925800d94eaf
17:26 < tomshreds> AAA_awright: but node-optimist is full of "holy cow" ( https://github.com/substack/node-optimist ) it should spare me some time hehe
17:26 < d2dchat> Are streams supposed to eat up memory? Thought they cleared memory as they got read to
17:26 < geNAZt> bren, which node version ?
17:26 < bren> geNAZt: I'm trying to do what's in this article: http://blog.dump.ly/post/19819897856/why-node-js-streams-are-awesome  ... take the output of the zipstream library and pipe it to a http request result.
17:27 < geNAZt> first the zlib module from the core also has a stream interface
17:27 < bren> geNAZt: 0.8.22 for now.
17:27 < geNAZt> and 2. since 0.10.x it is not wise to use data events anymore
17:28 < tomshreds> all of my wat… AAA_awright on linux it works
17:28 < tomshreds>   tier: 'ALL THE THINGS'
17:28 <@MI6> joyent/node: Timothy J Fontaine master * 5037f9a : build: only use DESTDIR instead of PREFIX for pkg - http://git.io/EPtHug
17:29 < AAA_awright> tomshreds: You certainly have some unknown shell variable set somewhere... maybe try opening a new shell, type $ bash
17:29 < bren> genNAZt: i'm confused because it seems that zipstream is emitting data events that never make it to res.. instead, res is getting everything direct from the s3 download.
17:30 < tomshreds> AAA_awright: good idea, but same thing
17:30 < beeant-macbook> do you think php.js is good?
17:30 < tomshreds> that's weird
17:30 < AAA_awright> PHP is under-appreciated as a templating language
17:30 < tomshreds> maybe it's something with OSX' shell but I thought it was plain bash
17:30 < geNAZt> bren, it sounds like a bug in the zipstream module
17:31 < bren> most likely i'm not quite using it right.. :)
17:32 < bren> is my use of inputStream the correct way to create a readable/writable stream?
17:33 < geNAZt> bren: it should be 
17:35 < chadams42> what does this mean? routes = require('./routes')
17:36 < chadams42> I don;t see what this load?
17:36 < chadams42> loads
17:36 < kzurawel> chadams42: it loads routes.js, in the same directory as the main node app
17:36 < geNAZt> ./routes.js
17:36 < geNAZt> or ./routes/index.js
17:36 < chadams42> oh it loads the index.js
17:36 < chadams42> is that some default behavior
17:36 < geNAZt> y
17:39 < beeant-macbook> thats a default behavior , im using ./models/index.js and routes/index.js
17:42 < d2dchat> streams are supposed to release memory as the data event is fired right??
17:42 < geNAZt> no
17:43 < d2dchat> geNAZt: so if you're streaming a large file, it will use up all that memory?
17:43 < geNAZt> the data out of a stream is hold so long as you have reference to it
17:43 < geNAZt> it depends on what you do with the read
17:43 < geNAZt> or data
17:43 < d2dchat> I see
17:43 < d2dchat> geNAZt: can I get the data event to free up memory somehow?
17:44 < geNAZt> the event itself never causes memory from not getting freed
17:45 < geNAZt> little example: var store = []; stream.on('data', function(data) { store.push(data); });
17:45 < geNAZt> will alway use up memory
17:46 < geNAZt> stream.on('data', function(data) { makeSomeParsingOnChunk(data); }); would release if you dont reference to it
17:47 < tomshreds> Hey guys, I'd like to output the content of a JSON collection in a command line, and display its content per column (I don't mind the alignment as long as the properties are all in the same order). I don't know if it's clear enough, kinda like the CLI version of mysql when you make a select
17:48 < beeant-macbook> node is so much faster than php
17:48 < geNAZt-laptop> yes 
17:48 < geNAZt-laptop> because it runs forever
17:48 < geNAZt-laptop> and can be optimized while running
17:49 < beeant-macbook> it takes like 0.2s to load the page
17:49 < beeant-macbook> while in php it takes 1s
17:49 < geNAZt-laptop> if it takes 200ms for a page it is slow :D
17:50 < geNAZt-laptop> i have hittimes lower 15ms
17:50 < geNAZt-laptop> oO
17:50 < geNAZt-laptop> on localhost ofc
17:50 < beeant-macbook> im using mysql
17:51 < beeant-macbook> sometimes its 0.1
17:51 < geNAZt-laptop> well i use mongo
17:51 < geNAZt-laptop> :D
17:51 < beeant-macbook> and i load lots of data from the pge
17:52 < geNAZt-laptop> do you benchmarked it ?
17:52 < sandfox> mongo - because some data isn't always worth persisting :-p
17:52 < beeant-macbook> and then some data processing
17:52 < geNAZt-laptop> sandfox, false
17:52 < geNAZt-laptop> you can have writepolicy
17:52 < geNAZt-laptop> like in mysql
17:53 < sandfox> geNAZt-laptop: I know, was just joking a little
17:54 < sandfox> node is generally always going to whip PHP a runtime because it doesn't have to start-up from scratch every request, but don't forget there is more to software than just runtime performance
17:54 < ForSpareParts> What's the simplest way to remove comment lines from a SQL script? Should I just use a regex, or…?
17:54 < geNAZt-laptop> sandfox, php doesnt need to startup on each request
17:54 < niggler> ForSpareParts regex
17:55 < yields> geNAZt-laptop, it does unless you're using apc.
17:55 < sandfox> geNAZt-laptop: Also mostly true when using FPM, but so many places/people still don't for some unknown reason
17:55 < geNAZt-laptop> php-fpm
17:55 < geNAZt-laptop> <3
17:55 < ForSpareParts> niggler: Alright, thanks. I was wondering if maybe there was some 'iterate over the lines in this string' construction I ought to be using. I suppose a regex is more efficient, but well, "now you have two problems," etc.
17:55 < sandfox> geNAZt-laptop: There is still some start-up / tear down though between requests
17:56 < geNAZt-laptop> yes but not at the cost of process spawning
17:56 < niggler> ForSpareParts the presence of multiline comments makes it tricky to split the lines first
17:56 < ForSpareParts> niggler: Ah. I don't think I actually have any multiline comments in my particular case, but that is a very good point.
17:57 < sandfox> geNAZt-laptop: the cost is much much smaller, but still a cost more than nodejs has
17:57 < JHartig> Does setEncoding on a readable stream make read() return a string?
17:57 < JHartig> The docs say that it only affects the "data" event.
17:57 < ForSpareParts> (ordinarily I would be very concerned about correctness and scalability, but this is a school project that's due in like, a day)
17:57 < geNAZt-laptop> sandfox, but nodejs has also downsides which php doesnt have :D
17:57 < geNAZt-laptop> like over time memory leakage
17:57 < niggler> isn't it a bit late for a school project?
17:58 < sandfox> geNAZt-laptop: Oh yes…. so so many, esp when you come from a per-request lifecycle orientated language like PHP
17:58 < geNAZt-laptop> sandfox, i come from php
17:58 < beeant-macbook> whats the downside
17:58 < geNAZt-laptop> it was scary first
17:58 < beeant-macbook> like having longer lines
17:58 < geNAZt-laptop> over time memory leakage, in php you just dont care about memory
17:59 < geNAZt-laptop> because php flushed everything after a request
17:59 < sandfox> geNAZt-laptop: me too, and the fact many many problems are 'solved' in PHP (CMS things etc), but still getting there in node 
17:59 < AAA_awright> sandfox: Working on the CMS thing
17:59 < niggler> LOL CMS
17:59 < niggler> didn't someone raise some money to do a CMS
17:59 < geNAZt-laptop> sandfox, i never used complete written software for php, most likley i used symfony2 and built my own things
17:59 < sandfox> niggler: Ghost i think
18:00 < AAA_awright> People should contact be before trying to duplicate efforts >_>
18:00 < niggler> 100966 out of 25K
18:00 < beeant-macbook> i used codeigniter and laravel
18:00 < niggler> AAA_awright are you this John O'Nolan character?
18:00 < AAA_awright> niggler: No
18:00 < sandfox> geNAZt-laptop: ditto, i spent more time bolting together higher level stuff than I do in node, but then again I know solve lower level problems now (mostly because I can without going into C)
18:01 < sandfox> AAA_awright: what are you working on?
18:01 < AAA_awright> sandfox: http://magnode.org/
18:01 < geNAZt-laptop> sandfox, i also like the way node enables abi, in php it was the hell on earth
18:01 < geNAZt-laptop> :D
18:01 < x1337807x> I have the save-dev flag set to true in my npmrc file - am I correct that this should add everything I install with npm to my package.json file if there is one?
18:01 < nikkubhai> What do people generally use as server for nodejs ? node http server or nginx?
18:02 < geNAZt-laptop> nikkubhai, i use varnish
18:02 < sandfox> geNAZt-laptop: with great power comes the ability to well truly break everything :-p
18:02 < AAA_awright> nikkubhai: Nginx to load-balance usually
18:02 < sandfox> nikkubhai: Nginx 1.3 / 1.4
18:02 < AAA_awright> nikkubhai: And it serves static content efficently
18:02 < geNAZt-laptop> sandfox, but thats one strength in the node ecosystem, you can make anything and break anything
18:02 < geNAZt-laptop> it doesnt restrict you
18:02 < beeant-macbook> this is the problem i have to think about after i finished with porting php 2 node
18:02 < beeant-macbook> the web server
18:02 < geNAZt-laptop> varnish :D
18:03 < geNAZt-laptop> best webserver in the world
18:03 < AAA_awright> Varnish is another event-loop server?
18:03 < beeant-macbook> i saw varnish about 2 years ago
18:03 < nikkubhai> geNAZt-laptop: Just Varnish?  or do you use it with something else. Actually, I come from php background (using drupal ) so right now I use varnish and apache . I want to know what is best for node
18:03 < beeant-macbook> i thought it wasnt a web server
18:03 < beeant-macbook> but caching or something
18:03 < sandfox> I have one response, varnish configs, sometimes wtf is going on there
18:03 < kzurawel> beeant-macbook: I'd be really happy if more hosting companies supported Node the way they do PHP. It's a lot less complicated (IMHO) than hosting something like Rails or Django...
18:03 < geNAZt-laptop> well varnish is a combination out of a loadbalancer and a file cache
18:03 < sandfox> does varnish SSL terminate?
18:04 < AAA_awright> nikkubhai: Nginx is also an event-loop and better suited for Node.js
18:04 < geNAZt-laptop> so its balances your requests to backends (your node application), but keep serving static files from the memory (once requested from the backend)
18:04 < AAA_awright> nikkubhai: Unlike threaded servers
18:04 < beeant-macbook> i use VPS
18:04 < beeant-macbook> so i can do anything i want
18:04 < beeant-macbook> like installing and stuffs
18:05 < geNAZt-laptop> well varnish can handle about 35k req/s static from a 2x1.6 Ghz cpu using a 2 GB Ram disc
18:05 < AAA_awright> sandfox: If you'd like to test Magnode it would be much appreciated
18:05 < geNAZt-laptop> oO
18:05 < AAA_awright> geNAZt-laptop: Basically it saturates the network connection... Nginx has the same bottleneck for me, but more features
18:05 < kzurawel> beeant-macbook: I'm on WebFaction, it's shared hosting but with SSH access and the ability to run pretty much whatever. Their setup for hosting Node is to make a "custom app listening on port", you set up your Node server to listen to that port and then they run an Nginx proxy in front of it
18:06 < sandfox> AAA_awright: Well, I don't have anything in the pipeline right now workwise to throw it at, but I'll certainly give it a spin at home.
18:06 < geNAZt-laptop> AAA_awright, i like how varnish keeps loadbalancing and how you can control the cache in it
18:06 < nikkubhai> AAA_awright: geNAZt-laptop: Thanks. I will read more about using nginx and varnish with node and decide
18:06 < sandfox> AAA_awright: I did look a while back for one but your didn't come up in my googling
18:06 < AAA_awright> sandfox: Huh it's been up for a year. I'm not sure else how to promote it.
18:07 < geNAZt-laptop> does nginx support proxyin websockets ?
18:07 < AAA_awright> sandfox: Though only now is it very usable
18:07 < sandfox> geNAZt-laptop: yeps as of 1.3.{recent version} and 1.4
18:07 < geNAZt-laptop> ah ok so its a new feature
18:07 < sandfox> nikkubhai: check this out - it's AWS oriented but should be helpful :: https://gist.github.com/sandfox/403a501a6e1046537cf1
18:07 < x1337807x> npm config list yields this: npm config set save-dev true = true
18:08 < x1337807x> Does that not indicate that installed packages should be saved to packages.json?
18:08 < sandfox> AAA_awright: :-p https://hacks.mozilla.org/2013/05/how-to-spread-the-word-about-your-code/ (i'm pretty sure everyone has seen this today thanks to HN)
18:09 < sandfox> right kids, off for now,see you all later
18:09 < beeant-macbook> WebFaction only has 256MB ram
18:09 < beeant-macbook> i need much more than that
18:09 < x1337807x> Do I need to tell NPM to use my .npmrc file?
18:09 < geNAZt-laptop> beeant-macbook, why ?
18:09 < beeant-macbook> bcos i have 36k+ users 
18:09 < geNAZt-laptop> my nodejs apps never go over ~120 MB ram
18:09 < beeant-macbook> my app
18:09 < x1337807x> How do I get npm install to automatically write to the packages.json file?
18:10 < geNAZt-laptop> x1337807x, npm install xyz --save
18:10 < x1337807x> geNAZt-laptop: The only line in my npmrc file is: npm config set save-dev true
18:10 < beeant-macbook> im using 8GB ram VPS for the php version
18:10 < beeant-macbook> and it uses almost all of them
18:10 < nikkubhai> sandfox: Thanks :)
18:10 < beeant-macbook> its mysql that uses them
18:10 < beeant-macbook> the mst
18:11 < geNAZt-laptop> x1337807x, try to write only save-dev in the npmrc
18:11 < geNAZt-laptop> beeant-macbook, its php
18:11 < kzurawel> beeant-macbook: Yeah, WebFaction's RAM count is for your actual processes - MySQL runs system-wide, it doesn't count against that limit
18:11 < geNAZt-laptop> which has a ground memory usage of around 80-130 MB
18:11 < x1337807x> geNAZt-laptop: Just this `save-dev`?
18:12 < geNAZt-laptop> x1337807x, yes
18:12 < beeant-macbook> php5.4 has less memory footprint
18:12 < kzurawel> I've only really run into problems when running things like Dropbox, which needs well over 120MB while syncing. That plus a couple dozen running sites took me over the memory limit
18:12 < geNAZt-laptop> well i got of from php after 5.3.4 or 6
18:12 < geNAZt-laptop> around that time
18:12 < Venemo> hi
18:12 < x1337807x> geNAZt-laptop: That worked, thank you
18:13 < geNAZt-laptop> x1337807x, no problem
18:13 < Damn3d> is node.native https://github.com/d5/node.native an official part of the node.js project?
18:13 < x1337807x> geNAZt-laptop: save-dev for development dependencies, save for dependencies eh?
18:13 < x1337807x> Sounds like this is something I can't automate anymore
18:13 < beeant-macbook> i just got off last week
18:13 < x1337807x> I hate memorizing flags
18:13 < geNAZt-laptop> x1337807x, well i dont know but you read it up in the npmjs.org docs
18:13 < Venemo> if I use uv_queue_work in a native Node module, can it guarantee that all my stuff will run on the same background thread?
18:14 < geNAZt-laptop> Venemo, yes i assume so
18:14 < Sly> Does anyone here know where X.509 certs go after ASN.1 parsing?
18:14 < geNAZt-laptop> as long as you only have one loop spinned up
18:14 < Venemo> geNAZt-laptop, I was under the impression that it uses a thread pool. so if I queue multiple work items, I thought they might go to different threads
18:15 < geNAZt-laptop> well as long as i understood libuv uses a thread pool for the async fs calls
18:15 < Venemo> yep
18:15 < AAA_awright> sandfox: Yeah I've tried much of that
18:15 < geNAZt-laptop> so it puts a fs call into a thread and spins it of
18:15 < Venemo> indeed
18:15 < AAA_awright> ... at least the good documentation part
18:15 < geNAZt-laptop> but the main event loop is a single loop where v8 runs in
18:16 < geNAZt-laptop> so i assume its only this loop for work
18:16 < Venemo> geNAZt-laptop, I'm writing a binding for a native library and it seems that there are some objects which must not be accessed from different threads.
18:17 < geNAZt-laptop> uv_queue_work() is a convenience function that allows an application to run a task in a separate thread, and have a callback that is triggered when the task is done. 
18:17 < ForSpareParts> Follow-up on previous question about removing comments from a SQL script: I wanted to grab every line that began with a double-hyphen (the SQL comment syntax) and I used this: /^--.*$/m
18:17 < geNAZt-laptop> http://nikhilm.github.io/uvbook/threads.html#libuv-work-queue
18:17 < ForSpareParts> It only grabs the first line, though. Any clue why?
18:17 < geNAZt-laptop> ForSpareParts, try adding the g modifier
18:18 < ForSpareParts> geNAZt-laptop: Perfect! Thank you! What did that do?
18:20 < Venemo> geNAZt-laptop, ok, I'm reading that link
18:20 < NoFaTe> geNAZt-laptop, do you like laptops? :o
18:21 < geNAZt-laptop> ForSpareParts, g enables global matching mode, normally regex doesnt match after the first match
18:21 < geNAZt-laptop> yes :D
18:21 < NoFaTe> what laptop you got?
18:21 < ForSpareParts> geNAZt-laptop: Gotcha. Thanks again!
18:21 < NoFaTe> as in, specs
18:21 < geNAZt-laptop> 4x1.6 ghz amd 
18:21 < geNAZt-laptop> 8GB ram
18:21 < geNAZt-laptop> 500GB HDD
18:22 < NoFaTe> GPU?
18:22 < geNAZt-laptop> and a amd 7670 + amd 6620G built in the cpu
18:22 < NoFaTe> mm
18:22 < geNAZt-laptop> on windows i can bundle them via crossfire
18:23 < NoFaTe> I'm just about to format my laptop
18:23 < geNAZt-laptop> but it doesnt work on unix :D
18:23 < NoFaTe> which ain't that good anyway
18:23 < NoFaTe> AMD Athlon 2 (2 x 2.3Ghz)
18:23 < geNAZt-laptop> NoFaTe, http://www.mediamarkt.de/mcs/product/PACKARD-BELL-EasyNote-TS11SB-250GE-A8-3520M-8GB-500GB-AMD-HD7670,48353,343048,471170.html?langId=-3
18:24 < geNAZt-laptop> its a german discounter
18:24 < NoFaTe> I know what mediamarkt is
18:24 < geNAZt-laptop> ok
18:24 < NoFaTe> we also have em here
18:24 < NoFaTe> :P
18:24 < NoFaTe> anyway...
18:24 < geNAZt-laptop> you are from germany ?
18:24 < NoFaTe> 8GB DDR3
18:24 < NoFaTe> no
18:24 < NoFaTe> a 320GB HDD
18:24 < NoFaTe> and an HD5470 and an HD42XX
18:25 < NoFaTe> which now malfunctions due to 4XXX being legacy and 5XXX not being legacy
18:25 < NoFaTe> great huh?
18:25 < geNAZt-laptop> oO
18:25 < geNAZt-laptop> :D
18:25 < diminoten> hey is there a sort of primer on node.js and memory management?
18:26 < geNAZt-laptop> for working it is okay
18:26 < NoFaTe> not when you do what I do
18:27 < geNAZt-laptop> but for gaming i use my desktop :D because gaming on a laptop sucks
18:27 < geNAZt-laptop> well i use it to write and execute code
18:27 < geNAZt-laptop> and emulate servers
18:27 < geNAZt-laptop> its okay
18:27 < NoFaTe> Well, I'm at my hometown
18:27 < NoFaTe> And my desktop is back home
18:27 < NoFaTe> otherwise I wouldn't be on my laptop
18:27 < NoFaTe> :P
18:27 < geNAZt-laptop> :D
18:28 < geNAZt-laptop> the only problem i got into with this laptop is heat :D
18:29 < geNAZt-laptop> it goes up to ~70 celsius
18:29 < geNAZt-laptop> and you cant touch the keyboard for long time
18:29 < geNAZt-laptop> :D
18:29 < NoFaTe> also, my battery is fucked
18:29 < NoFaTe> it doesn't last for over an hour
18:29 < NoFaTe> even if I'm not doing anything
18:29 < NoFaTe> and am in safe mode
18:29 < NoFaTe> lol
18:29 < geNAZt-laptop> well in most cases i got my power supply with me :D
18:29 < NoFaTe> me too
18:29 < NoFaTe> but just sayin'.
18:30 < geNAZt-laptop> yes batteries in laptops never was that good
18:30 < geNAZt-laptop> i got a netbook intel atom 2x1.2
18:30 < geNAZt-laptop> it holds for ~6 hours
18:30 < geNAZt-laptop> but it is slow as hell
18:31 < squeeks> So… laptop batteries === /b/ ?
18:31 < geNAZt-laptop> currently i am using it as nas :P
18:31 < geNAZt-laptop> and media server
18:31 < NoFaTe> squeeks, laptop batteries === null
18:32 < geNAZt-laptop> about 2 hours with the background light out :D
18:33 < diminoten> what's a link that explains how node.js works, under the hood?
18:33 < diminoten> I get the basic, one-thread nonblocking stuff
18:33 < geNAZt-laptop> diminoten, its easy, it is libuv (a event loop c library) and a v8 engine mounted into it
18:33 < diminoten> but I want to understand how the gc comes into play
18:34 < diminoten> yeah I want to know more about how the event loop is implemented and the V8 engine's role in the event loop
18:34 < diminoten> memory management specifically is what interests me
18:35 < geNAZt-laptop> well the c world of nodejs doesnt count into v8 garbage collection
18:35 < vampi-the-frog> hi guys. in express, how do I make it so I get a callback for all url's of the form "/board/*.json"?
18:35 < vampi-the-frog> can I just pass wildcards to .get()?
18:35 < geNAZt-laptop> and v8 keeps tracking objects and their references
18:35 < geNAZt-laptop> if references on an object => null its gets freed
18:35 < diminoten> so there's just the one virtual machine and that... is where v8 stores data?
18:35 < geNAZt-laptop> vampi-the-frog, you can use regex inside the routes
18:35 < diminoten> see this is where I'm fuzzy
18:36 < geNAZt-laptop> yes v8 is one big "virtual" machine
18:36 < vampi-the-frog> geNAZt-laptop: thanks, I just used '/board/*.json' and it created a regexp automatically :D
18:37 < diminoten> so is there a place I can read about libuv then?
18:37 < geNAZt-laptop> diminoten, http://nikhilm.github.io/uvbook/
18:38 < diminoten> hm okay, so libuv is what... runs v8?
18:38 < geNAZt-laptop> libuv is the event loop which does the filesystem calls and the c running
18:38 < geNAZt-laptop> v8 is the engine which enables the usage of javascript
18:38 < vampi-the-frog> it parses and executes it :P
18:39 < geNAZt-laptop> inside libuv ofc
18:39 < Rantanen> Ow yay. C-world discussion. Just what I wanted.
18:39 < Rantanen> My C++ is a bit rusty. How do I make this compile? Local<Object> evt; Local<Value>* argv[1] = { &evt }; >.>
18:40 < diminoten> yeah okay so v8 is run, a v8 VM keeps track of data for the thread, and it will manage its own garbage collection
18:40 < Rantanen> I'm performing a MakeCallback, which I believe expects a Local<Value>* array.
18:40 < Rantanen> How do I create that array with Local<Object> and Local<String>?
18:40 < diminoten> so if I write a crappy node.js app that leaks memory, it's going to leak into the v8 vm then?
18:40 < Rantanen> (Or Handle<Value> array)
18:40 < geNAZt-laptop> diminoten, first yes
18:40 < diminoten> I can do more damage with a node.js app?
18:40 < Rantanen> Can't get my head around the inheritance chains and conversion methods.
18:40 < diminoten> than just fill the VM
18:41 < diminoten> via leaks that is
18:41 < diminoten> obviously I can do worse heh
18:41 < geNAZt-laptop> diminoten, you can crash the libuv event loop
18:41 < geNAZt-laptop> and cause the app to crash
18:41 < diminoten> ah okay, but that's usually pretty loud... yes?
18:41 < geNAZt-laptop> it says JS_ALLOCATION_ERROR or something like that
18:41 < geNAZt-laptop> and then its over
18:42 < diminoten> okay and I've read that v8 has a VM memory limit
18:42 < jjore> Hey, what's a reasonable way to write an identity set or identity map?
18:42 < geNAZt-laptop> diminoten, yes it is hard coded to ~1.8 GB
18:42 < geNAZt-laptop> or something like that
18:43 < geNAZt-laptop> but that only affects the v8 vm
18:43 < diminoten> what do you mean
18:43 < geNAZt-laptop> if you have c code it allocates out of the vm
18:43 < diminoten> oh!
18:43 < geNAZt-laptop> so Buffers in node doesnt count inside the v8 vm
18:43 < diminoten> ooh that's a good point, so I can get around the 1.8gig limit by writing C code that handles its own memory
18:43 < geNAZt-laptop> yes you could
18:43 < geNAZt-laptop> but its bad :D
18:43 < diminoten> heh
18:44 < diminoten> so... hm
18:44 < d2dchat> how do I console.out a pipe stream?
18:44 < nathan7> d2dchat: process.stdout
18:45 < d2dchat> nathan7: request.pipe(process.stdout) ?
18:45 < nathan7> d2dchat: yep
18:45 < diminoten> so libuv is basically what tells the os to notify it when things happen
18:46 < diminoten> and when there aren't any events to process it just sleeps?
18:46 < d2dchat> nathan7: I get something about invalid data
18:46 < d2dchat> nathan7: https://gist.github.com/lancecarlson/81f333d72f1175827b84
18:46 < nathan7> d2dchat: yep
18:46 < nathan7> err, diminoten 
18:46 < nathan7> d2dchat: that's weird
18:46 < diminoten> okay
18:47 < nathan7> diminoten: it'll sleep if there are listeners but no events
18:47 < nathan7> diminoten: if there are no more listeners, it'll exit
18:47 < diminoten> ah okay
18:47 < diminoten> another thing I don't quite understand... so if I write a node.js app that has a number of child processes... do those child processes still get run under node.js's single thread?
18:48 < diminoten> doesn't having child processes slow down the thread 
18:48 < diminoten> because it has to keep switching
18:48 < nathan7> ..no
18:48 < nathan7> they're separate processes
18:48 < diminoten> hm
18:48 < nathan7> a thread is a thing within a process
18:48 < diminoten> is there something I can read
18:49 < mattd> whats new homies
18:49 < nathan7> diminoten: https://en.wikipedia.org/wiki/Preemptive_multitasking
18:49 < diminoten> nathan7: thanks
18:49 < nathan7> diminoten: https://en.wikipedia.org/wiki/Multithreading_(software)
18:49 < FooBarWidget> diminoten: threads and processes are not the same
18:49 < FooBarWidget> a process has one or more threads
18:49 < diminoten> that's what I thought
18:50 < FooBarWidget> if a process crashes, other processes are unaffected
18:50 < diminoten> but then how do I do two things at once in node.js.... I can't, right?
18:50 < diminoten> or can I?
18:50 < FooBarWidget> but if a thread crashes, the entire process (including other threads in it) go down
18:50 < geNAZt-laptop> diminoten,  right you cant
18:50 < nathan7> diminoten: https://en.wikipedia.org/wiki/Multithreading_(software)#Processes.2C_kernel_threads.2C_user_threads.2C_and_fibers
18:50 < nathan7> diminoten: that section is fucking brilliant
18:50 < nathan7> diminoten: doing two things at once is concurrency
18:50 < diminoten> see all these links are more like how I thought I understood things
18:50 < nathan7> diminoten: executing two pieces of code at the same instant in time is parallelism
18:50 < geNAZt-laptop> which is not supported in node
18:50 < diminoten> but then I'm looking at a node app that has "workers"
18:51 < nathan7> diminoten: yeah
18:51 < nathan7> diminoten: that's parallelism
18:51 < diminoten> ah
18:51 < FooBarWidget> you cannot do two things in parallel in a single node process
18:51 < FooBarWidget> but you can if you have 2 node processes
18:51 < nathan7> diminoten: within a single thread you can do concurrency
18:51 < geNAZt-laptop> in nodejs workers are new processes that speak to each other
18:51 < nathan7> diminoten: you can handle thousands of requests
18:51 < nathan7> diminoten: you can't be processing all of them at once, however
18:51 < diminoten> yeah that's what I thought
18:51 < geNAZt-laptop> but thats cause the event loop never waits for a request
18:51 < geNAZt-laptop> it moves on
18:52 < nathan7> geNAZt-laptop: otherwise you'd lose concurrency - and with that, parallelism
18:52 < diminoten> new events just get thrown onto the loop yes?
18:52 < nathan7> yep
18:52 < nathan7> while (shit is coming in) handler[event](event)
18:52 < diminoten> okay but I guess that's what confuses me
18:52 < nathan7> (something like that)
18:52 < geNAZt-laptop> well nodejs javscript events are handled in the same event loop tick
18:53 < diminoten> so you've got all these things coming onto the event loop, and that's fine they're all getting dealt with in their own "processes" but not literally at the same time 
18:53 < diminoten> but you're swapping between them all?
18:53 < diminoten> or
18:53 < nathan7> you're looping through them
18:54 < diminoten> as it goes through each event, it just keeps throwing the callbacks back onto the event loop?
18:54 < nathan7> one thing completes, the next event handler (callbacks) is fired
18:54 < geNAZt-laptop> but that happens all in one libuv event loop tick
18:54 < diminoten> ah
18:54 < geNAZt-laptop> so if you throw out events to be infinite
18:54 < diminoten> so one tick follows it all the way through
18:55 < geNAZt-laptop> libuv never reads from the sockets or any other i/o
18:55 < diminoten> so a hanging event will block the... thread?
18:55 < diminoten> even if it's just one of many processes?
18:55 < diminoten> node process, not real process
18:56 < diminoten> is there terminology confusion there or is that just me
18:56 < geNAZt-laptop> well 1 node process => 1 libuv event loop
18:56 < geNAZt-laptop> 4 node processes => 4 libuv event loops
18:56 < geNAZt-laptop> they are independent
18:56 < geNAZt-laptop> so if 1 libuv event loop hangs the other 3 keep spinning
18:56 < diminoten> independent?  that is, they're isolated but not parallel
18:57 < geNAZt-laptop> well thats because they are in seperated processes
18:57 < diminoten> okay so the system does a context switch to handle the multiple processes
18:58 < diminoten> when it feels like it should
18:58 < diminoten> but those context switches are all happening in the one thread
18:59 < diminoten> so if I get ten events and one of those events hangs, the other 9 will complete once context switches to them
18:59 < diminoten> and then it'll switch back to my hanging event and keep churning until it has other contexts to switch to again
18:59 < diminoten> but that context takes up space somehow... is that VM space or some other set of space?
19:00 < diminoten> context aka "node process"
19:00 < geNAZt-laptop> no
19:00 < geNAZt-laptop> if one hangs all hang
19:00 < diminoten> oh?
19:00 < diminoten> so it won't switch out of a hung context
19:00 < geNAZt-laptop> no
19:01 < diminoten> ah okay
19:01 < geNAZt-laptop> if you have a infinite loop for example libuv has no chance to get out of that
19:03 < diminoten> okay but
19:03 < diminoten> so you do a thing that takes awhile, and with it you pass a callback
19:04 < diminoten> so the thing takes awhile, and while it's waiting for a response, libuv knows to go do something else in another context 
19:04 < geNAZt-laptop> for example
19:04 < geNAZt-laptop> thats how i/o work in libuv
19:04 < geNAZt-laptop> "here do that and notify me when done"
19:12 < dwierenga> do y'all use node for things like cron jobs etc. too, or do you have another language that you use for those type of things?
19:14 < dwierenga> i'm new to node and was trying to write a data-loading script (i.e. 'read all the files in this dir, load each line of every file into a database') and it seemed just.. really unwieldy to try to do something like that in node
19:16 < mattd> dwierenga: focus your energy!
19:16 < vampi-the-frog> only release when it's over 9000!
19:16 < mattd> vampi-the-frog: you went there ;p
19:17 < dwierenga> mattd: i'm not really sure how to interpret that.
19:17 < mattd> dwierenga: im far from a champion of node, but what did you find to be so unwieldy? and just intepret that as encouragement
19:19 < dwierenga> mattd: mostly the ordering of things in terms of syncronicity
19:23 < vampi-the-frog> dwierenga: if you're a corporate thinker, just force synchronous operation. but if you want to wield the true force of node, start thinking asynchronously
19:25 < dwierenga> vampi-the-frog: that's what i'd been trying to do.  i just wondered if that's how other people *really* did it
19:26 < dwierenga> like, i've read a bajillion blog posts on how great node is for making a web server
19:26 < geNAZt-laptop> dwierenga, do what ?
19:26 < geNAZt-laptop> yes because it can handle much connections at "once"
19:27 < AWinterman> dwierenga: I think asynchronously all the time. 
19:27 < vampi-the-frog> dwierenga: what you need to realize is that the same script serves tens of thousands of clients, so it cannot wait for an internal operation to finish while other clients are making more requests
19:27 < dwierenga> and i just wondered if all those blog posts have a footnote in tiny print of "oh yeah, and we use python/java/perl/whatever for cron jobs"
19:27 < subsilico> if i call a sync function inside an async will that sync block other async functions?
19:27 < vampi-the-frog> subsilico: yes
19:27 < geNAZt-laptop> yes
19:27 < subsilico> bummer
19:28 < vampi-the-frog> just use the callback, there should be one
19:28 < vampi-the-frog> even the mysql module has callbacks, so you don't have to wait for queries. but you can delay serving the http response
19:30 < dwierenga> vampi-the-frog: i get why async is necessary and awesome for massive concurrency.  what i wondered is if people actually use node to write things that have absolutely no concurrency needs at all.
19:30 < vampi-the-frog> yep
19:30 < geNAZt-laptop> no
19:30 < geNAZt-laptop> use the right tool for the right job
19:30 < geNAZt-laptop> node is no overall wonder
19:30 < vampi-the-frog> dwierenga: you don't need to use node for EVERYTHING though
19:30 < ashnur> so. how can I avoid this? https://gist.github.com/ashnur/5527500
19:31 < dwierenga> vampi-the-frog: i didn't.  i ended up writing my job in perl
19:32 < geNAZt-laptop> well i write my crons in bash
19:32 < vampi-the-frog> good. you can call your perl script from your node script and get the output after the perl script executes (concurrency preserved)
19:32 < vampi-the-frog> geNAZt-laptop: you mean you write your bash commands in cron?
19:33 < Nijiko> o.0
19:33 < geNAZt-laptop> no
19:33 < geNAZt-laptop> using sh files
19:33 < geNAZt-laptop> bash scripting
19:33 < vampi-the-frog> yes
19:33 < dwierenga> i was just curious if even the people who REALLY "get" node use something else.  sounds like they do.
19:33 < geNAZt-laptop> well if i use crons i want to make sure they get executed
19:34 < vampi-the-frog> dwierenga: does it matter what people use? just use what you like, it's that age
19:34 < vampi-the-frog> it's the age of using whatever code interpreter you like
19:34 < geNAZt-laptop> if i use any third party manager for this i cant be sure it gets executed
19:34 < geNAZt-laptop> what if node crashes and the crons never gets executed
19:34 < geNAZt-laptop> like log cleanup or something or automated backups
19:36 < ericelliott_> Looking for feedback on this... anything I missed? Did I say anything stupid? http://ericleads.com/2013/05/getting-started-with-node-and-express/
19:39 < dwierenga> vampi-the-frog: i was more looking for a general-purpose replacement for perl.  doesn't seem like node is really it.
19:40 < NoFaTe> dwierenga, php /troll/
19:40 < vampi-the-frog> dwierenga: you can still run node js scripts synchronously, via command line,  and wait for them to finish
19:40 < vampi-the-frog> dwierenga: though the api calls might usually be async
19:40 < vampi-the-frog> dwierenga: so you'll have to use explicit sync calls
19:40 < vampi-the-frog> so it's a matter of comfort
19:41 < vampi-the-frog> dwierenga: just try it out for a while, try to write some scripts and see how you like it
19:41 < dwierenga> vampi-the-frog: i wasn't sure how to mix the fs Sync calls and the DB async calls
19:41 < ashnur> i really wish i could exit without a whole new exception :(
19:41 < ashnur> but I am unable to find anything on the web
19:42 < vampi-the-frog> dwierenga: maybe you can find a sync DB module
19:42 < ashnur> if you guys could give me some pointers to what the problem is
19:42 < ashnur> maybe i could find it
19:42 < ManneW> ericelliott_: I haven't used Node for a while (actually more than a year) and not that much before either. So I'll use that blog post as a refresher :)
19:43 < ManneW> ericelliott_: BTW, is the book worth buying? ;) (leading question)
19:44 < vampi-the-frog> dwierenga: in the end, all you really need is a shotgun and an attitude
19:55 < ashnur> :(
20:08 < arielserafini> any reason I should use the Node.js installer over "brew install node"  on OS X?
20:08 < owen1> what's the easiest way to generate unique id to each request my server gets? https://github.com/dominictarr/monotonic-timestamp maybe?
20:08 < owen1> (by easy i mean fast)
20:10 < vampi-the-frog> you might as well do var n; n++ on each request
20:11 < owen1> vampi-the-frog: but if my server restarts, i'll have duplicates
20:11 < vampi-the-frog> owen1: then you can get timestamp + n++
20:11 < vampi-the-frog> owen1: or store your n somewhere
20:13 < owen1> vampi-the-frog: i guess so, but it seems like monotonic-timestamp is doing this for me
20:14 < owen1> maybe your approach is faster timestamp + n, where n is just a variable that lives on the server. but if i scale my app to more than 1 server i'll have to store than n in a db
20:15 < owen1> which seems slower than just using this little package.
20:28 < robinson1k> hey
20:28 < DrPizza> Can anyone suggest (a) how I might see how much memory is being allocated (b) how to allow allocating more memory?
20:28 < DrPizza> I'm receiving the following error: FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory 
20:30 -!- mode/#Node.js [+o konobi] by ChanServ
20:30 < robinson_k> is today something like a vacation day in the us? my github notices are so calm
20:30 < pachet> its a monday
20:31 < pachet> we all take day trips to apathyville
20:31 < robinson_k> haha
20:31 < euoia> it's a holiday in the UK
20:32 < euoia> or England and Wales at least
20:32 < JohnMcLear2> Indeed :)
20:33 < JohnMcLear2> I haven't commited anthing today i don't think
20:33 < JohnMcLear2> except beer to my brain
20:33 < vampi-the-frog> what template engine do you guys use (with express)?
20:34 < Willox> JohnMcLear2, I've had a similar day
20:34 < JohnMcLear2> none
20:34 < JohnMcLear2> actually, I use eejs..
20:34 < JohnMcLear2> It's not so much a templating engine though
20:34 < vampi-the-frog> eejs or ejs?
20:34 < euoia> I use ejs also
20:34 < robinson_k> vampi-the-frog: mostly jae but used ejs too
20:34 < JohnMcLear2> id need to check, whatever etherpad uses though
20:34 < robinson_k> *jade
20:35 < vampi-the-frog> ejs seems most friendly for someone coming from php
20:35 < vampi-the-frog> is any of these template engines written in C?
20:35 < vampi-the-frog> or whatever you call them
20:36 < Willox> I don't know how well mustache works with express, but I love it
20:36 < qard> Why would you write a template engine in C? :S
20:38 < vampi-the-frog> so it's super fast
20:38 < vampi-the-frog> maybe even assembler
20:38 < JohnMcLear2> im gonna assume vampi-the-frog is trolling
20:39 < JohnMcLear2> or doesn't get that node compiles to c but is, and always will be, slower than native c
20:39 < vampi-the-frog> not really. there's a PHP framework, YAF, written in C entirely
20:39 < vampi-the-frog> JohnMcLear2: afaik, node modules can be compiled
20:39 < JohnMcLear2> this concept I can't fathom tonight
20:40 < robinson_k> usually compiled templates are cached so this should not matter
20:40 < JohnMcLear2> compile JS to C binary that performs aswell as C?
20:40 < vampi-the-frog> no, write it in C entirely and interface with noe
20:40 < vampi-the-frog> ndoe*
20:40 < vampi-the-frog> node**
20:40 < JohnMcLear2> you are still going "through" node, so you still have the overheads that introduces
20:41 < JohnMcLear2> I mean if you really want performance, surely caching with edge side include is the solution
20:41 < JohnMcLear2> ?
20:41 < npc__> Hi everybody
20:41 < vampi-the-frog> this module for example uses some C stuff https://github.com/Sannis/node-mysql-libmysqlclient
20:41 < vampi-the-frog> C++ for that matter
20:42 < vampi-the-frog> but what I mean is the hard string processing can be done in C, which is the most time consuming
20:42 < vampi-the-frog> inside a template engine
20:43 < npc__> Maybe sombody can answer to question: which best node.js practice to write chat
20:43 < npc__> using some framwork
20:43 < npc__> ?
20:43 < conphile> work
20:43 < conphile> of fram
20:43 < JohnMcLear2> wtf is it with people wanting frameworks for really basic things?
20:44 < vampi-the-frog> npc__: you might want to take a look at socket.io, and write the rest by hand
20:44 < Willox> JohnMcLear2, I guess that's what happens when installing modules is super-easy
20:44 < JohnMcLear2> I guess so ;\
20:44 < Willox> I think it's an issue I'm having
20:44 < JohnMcLear2> I think writing the whole of chat for etherpad took like 1 day
20:45 < npc__> and how save chat history for long term ? 
20:45 < Willox> Not that I've even written an application
20:45 < JohnMcLear2> and maybe 1 or 2 hours to make it real time
20:45 < npc__> mongodb, mysql ?
20:45 < JohnMcLear2> any database.
20:45 < vampi-the-frog> npc__: your choice
20:45 < JohnMcLear2> if you want to abstract, use ueberdb
20:45 < JohnMcLear2> but don't, cause it sucks.
20:46 < JohnMcLear2> when you come here asking what is best to make a chat client we assume your chat client isn't going to get used so much, so we aren't about to overengineer your database =)
20:47 < npc__> thanks i just try figure out which starting point is best :) 
20:48 < JohnMcLear2> npc__ np & good luck
20:50 < npc__> :) 
20:50 < amartens> I've been working on developing a node.js module in C++, which works just great.  One thing I'm not clear about is whether it's possible to have a mixed C++ and javascript module.
20:51 < amartens> based on what I've read here http://nodejs.org/api/modules.html#modules_file_modules I don't think it's necessarily possible, but I would be thrilled to hear otherwise (or confirmation if my suspicions are true)
21:08 <@MI6> joyent/node: tjfontaine created branch v0.7.8 - http://git.io/a_S5uQ
21:09 < therealkoopa> Anyone know of a list of documented APIs for npm? For instance some http endpoint to get all recently updated npm packages?
21:13 < ljharb> therealkoopa: https://npmjs.org/doc/
21:17 < therealkoopa> ljharb: No, I was looking for endpoints that can return things like the recently updated packages that you find on npmjs.org. I figured there might be a sheet that gives endpoints similar to http://isaacs.couchone.com/registry/
21:18 < brettlangdon> amartens yes you can, here is a module I have (https://github.com/brettlangdon/v8type) it doesn't use very much javascript, but hopefully you can get an idea of how you can mix and match between them
21:19 < amartens> brettlangdon:  thanks!  I think I sort of figured it out already (seems like I had to do the main access point in js and then export the C++ functions from there), but I'll definitely take a look at your approach
21:20 < brettlangdon> yeah, I basically do the same thing, you just require the native code in the js for the module
21:20 < brettlangdon> I am not sure about using custom js in your native code though… but I assume you dont mean to go that way?
21:23 < qard> Lots of modules are a mix of C++ and Javascript. Usually there is an index.js file that requires the binding and adds some extra stuff to make the interface prettier. https://github.com/dannycoates/v8-profiler/blob/master/v8-profiler.js
21:33 < tgronk> I am looking for the best way to dynamically load and unload scripts? For example if I had a game server and wanted to switch between server side game scripts. Can anyone point me at some good references?
21:36 < May> k
21:38 < ljharb> tgronk: if it's on the server, just require in what you need
21:38 < ljharb> tgronk: since you shouldn't be modifying globals, you'd just call a different function if you want different games
21:41 < tgronk> ljharb: are you suggesting that all games can be loaded at the same time?
21:42 < ljharb> sure, why not?
21:43 < dypsilon> Hi, I'm getting "[Error: Invalid URI "http://127.0.0.1:8103"]" from the request module but the URL is correct and gives something with curl. Any idea what's wrong?
21:44 < tgronk> ljharb: honestly hadn't thought about that. it is crazy enough that it just might work. I was initially thinking about reusing a single game object.
21:46 < ljharb> tgronk: pass data to functions instead of maintaining state, i think you'll find your programs much more maintainable
21:51 < tgronk> ljharb: now I am intrigued. games inherently have state so what do you mean? can you expand on this?
21:51 < ljharb> the gamestate can be 
21:51 < ljharb> the game's state can be an object literal with data in it, passed into functions. the new state is what they return
21:52 < ljharb> i don't know your specific use case, i'm just giving a general suggestion
21:53 < tgronk> ljharb: yes, I see what you are getting at. create state objects for each game. functions initialize based on the state and then execute to create a new state. multiple games can be played and stored as objects.
21:54 < ljharb> note that my suggestion is object *literals*, ie, not instances
21:54 < ljharb> but sure, passing things around instead of just touching globals
21:56 < tgronk> ljharb: thanks - somewhat new to js but a long time dev so sorry if I miss subtleties. I will need to look that up. Let me do some quick research on object literals.
22:00 < Fuzzyma> heyho :) - Does anyone use formidable here? I habe problems using it in my compound-app
22:02 < tgronk> ljharb: so the object literals could still be persisted in a hash or map on the server, right?
22:02 < ljharb> tgronk: by "object literal" i mean "hash" or "map" as well - they're all basically synonyms in JS
22:03 < ljharb> tgronk: yes, unless you wanted the client to pass the game state with every request, you'd have to persist something somewhere
22:03 < tgronk> ljharb: yes, I was thinking about 2-player games and anti-cheating requirements. :)
22:04 < JoeAndrieu_> does anyone have any tips for troubleshooting remote debugging? I can't get node-inspector to work on the box and Eclipse is failing to connect even though the process is running with --debug and seems to be running just fine.
22:05 < tgronk> ljharb: thanks for the discussion. It has me thinking about a new approach that I think will work out pretty great.
22:05 < ljharb> awesome
22:05 < Benvie> >> Map
22:05 < purr> Benvie: ReferenceError: Map is not defined
22:05 < Benvie> way out of date Spidermonkey
22:06 < Benvie> er woops
22:06 < Benvie> wrong channel
22:06 < ashnur> :))))4
22:14 < dypsilon> Fuzzyma, I think 90% of the people here use formidable in one way or another.
22:14 < ForSpareParts> Conceptual question about asynchronous data access: I have some data models in a SQLite db that I want to expose to the user. The sqlite3 library is async, which is fine, but I'm suddenly unsure what the "right way" is to get data back up to the route function for rendering. I could pass information about the request (and the target template and all that) down into the models so that the callbacks from database access can do t
22:14 < ForSpareParts> that sounds REALLY messy and bad and unmaintainable. What am I missing?
22:15 < ForSpareParts> It seems like the behavior I *want* is synchronous: I can't very well render the page until all the data's in. But maybe I'm off-base…?
22:16 < devoidfury> ForSpareParts: You'll want to delay rendering until a callback is called that you passed in. Something like `queryData(query, function (err, results) { render(); });
22:17 < JoeAndrieu_> ForSpareParts: typically you just pass in a callback function to the DB and the callback does the rendering and response
22:17 < JoeAndrieu_> devoidfury <== what he said
22:18 < ForSpareParts> devoidfury, JoeAndrieu_: That makes a bit more sense. And if I need to do multiple queries, I just pass the rendering callback down through each one?
22:18 < JoeAndrieu_> you have to nest the callbacks
22:18 < JoeAndrieu_> or otherwise synchronize them
22:19 < devoidfury> If you're doing several, I'd recommend looking into the async package to help manage the mess
22:22 < Fuzzyma> dypsilon, since bodyParser from express is based on formidable everyone will use it, yes. My Problem is, that there is no real access to the progress-event with bodyParser only. Thats why I searched for another solution and i found formidable (i didnt realize that express uses this at this time). Formidable has a progressevent and easy access to it - why not bodyParser? What iam doing wrong?
22:23 < dypsilon> Fuzzyma, because express is that? Can't help you, I don't use express.
22:24 < dypsilon> *express is that way
22:26 < Fuzzyma> okay
22:27 < TheAceOfHearts> so.. I'm using Sublime Text 2 with this plugin: https://github.com/SublimeLinter/SublimeLinter and I'm using socket.io, and it keeps complaining when I do things like:         io.sockets.in(room).emit('game:score', result); … because of the 'in' keyword, which is reserved. so… does anyone know a way around this? 
22:29 < Fuzzyma> io.sockets['in'](room)?
22:29 < TheAceOfHearts> Huh, I didn't know I could do that
22:29 < TheAceOfHearts> ty
22:31 < shoerain> TheAceOfHearts: . vs [] notation http://stackoverflow.com/questions/4968406
22:32 < TheAceOfHearts> oh, very cool, I didn't know this; thanks a lot for the link
22:33 < devdazed> using http.request, does the responding server have to repond with keep-alive for the connection to keep alive?
22:34 < devdazed> or will node keep the connection open, irrespective of the headers
22:34 < devdazed> from the server
22:34 < devdazed> fwiw, node is sending the keep-alive by default, its just not being sent by the server that responds
22:52 < ForSpareParts> Using sqlite3 and I'm having parameter trouble -- could somebody tell me what's wrong with my syntax here? https://gist.github.com/anonymous/5528901
22:52 < ForSpareParts> The result is an error indicating that ? is not valid query syntax, but based on the API I was expecting it to be replaced with "agent"
22:53 < ForSpareParts> The API is: https://github.com/developmentseed/node-sqlite3/wiki/API
22:57 < ljharb> ForSpareParts: usually ? replaces condition values
22:57 < ljharb> ForSpareParts: ie, not the table name, but "where id = ?"
22:57 < JoeAndrieu_>  Second attempt: anyone have suggestions for troubleshooting remote debugging? I can't run node-inspector on the box and Eclipse fails to connect...
22:57 < ljharb> it's primarily to escape user input. but table names shouldn't come from users - why not just hardcode it in the query?
22:58 < ForSpareParts> ljharb: I'm attempting a bit of metaprogramming. No reason for every model to repeat the get and list, right?
22:59 < ljharb> there's a great reason. predictable, greppable code :-)
23:01 < ForSpareParts> ljharb: Well, fair enough. This project's turning into a bit of a mess (it's the first thing I've done in Node), but it's for school and sadly, I just don't have time to scrap what I've done so far. For what it's worth, I tried the named parameter syntax and got exactly the same results -- it's like they just aren't applying my parameters to the sql string at all.
23:01 < ljharb> code?
23:01 < beg> You know whats equal to sodomizing yourself?
23:01 < beg> programming without glasses.
23:01 < ForSpareParts> ljharb: Sure, gimme a sec...
23:01 < LegCow> ForSpareParts: What what're you using to connect to sql? msnodesql?
23:02 < tylersmith> I hope you mean == equal, and not === equal :/
23:02 < ForSpareParts> LegCow: sqlite3
23:02 < ljharb> beg: i don't get it, and i don't see how that's contributing anything
23:02 < LegCow> ForSpareParts: how're you finding it?
23:03 < ForSpareParts> LegCow: It's sort of a tough question, as my opinions are mixed up in my initial impressions of Node overall. I'm still wrapping my brain around doing everything on the server side asynchronously.
23:06 < ForSpareParts> LegCow: For what it's worth, I would never, ever, ever be doing hand-written SQL like this if I wasn't required to for my project. I desperately want to be using an ORM instead -- I understand there are a few for Node.
23:07 < ljharb> so use an orm
23:07 < ljharb> or youre saying it's homework and you can't
23:08 < ForSpareParts> ljharb: The latter, unfortunately : (
23:08 < beg> ljharb, apparently I used the word wrong, and I didn't know what it actually ment, now that I googled it. Sorry
23:08 < ljharb> alrighty
23:10 < ForSpareParts> ljharb: Here's what I was doing before: https://gist.github.com/anonymous/5529006
23:19 < s3shs> When I get a logout request I'd like to delete the cookie from the browser.  I'm using connect.  Do I just do req.session = null and let the response roll?
23:28 < jdelgado> Any great ideas on how to generate a hash of a string, but without random data, so it always comes out the same?
23:28 < LegCow> ForSpareParts: sorry, fire drill. heh. I'm sort of in the position where I need to use SQL Server. Just not comfortable with Node's support for it
23:30 < keyosk> jdelgado: crypto.createHash('md5').update('zomg string').digest('hex');
23:32 < jdelgado> keyosk: Thank you so much - Completely forgot about that API
23:33 < keyosk> jdelgado: np
23:33 < ForSpareParts> LegCow: No worries. Yeah, I wouldn't be surprised if the MS SQL Server support were bad. Proprietary stuff, closed source, etc. I looked into Oracle briefly (they run an Oracle server for the class and use it for some assignments) but it was… well… not fun in Node. Download and install external dependencies, perform hours of command-line environment variable voodoo, still no connection to my server, and I couldn't even ge
23:33 < ForSpareParts> out the connection string it was generating from my parameters, or force it to use one that I wrote by hand.
23:35 <@MI6> joyent/node: Timothy J Fontaine master * a90dc41 : test: reap children when cluster-bind-twice fails - http://git.io/fNSg7g
23:38 < LegCow> ForSpareParts: I couldn't see much better support for Oracle either. It all seems to be directed towards the noSQL varieties. I'm not sure i'm comfortable using that for business. People here only really know T-SQL. and... VBA! I eventually got Node connected to Azure but I felt dirty doing it
23:41 < ForSpareParts> I don't really know anything about practical use of NoSQL -- it's just not something I've learned yet. I imagine there are really good situations for it, or it wouldn't be so popular, but I don't know what that scenario looks like or how you play to it. I've gotten very used to the relational way of doing things since I've been seeing/using/making relational DB setups for a couple years now. 
23:41 < ForSpareParts> It'd probably be really cool to learn about, actually.
23:44 < ForSpareParts> For that matter: could someone else in here suggest some good reading on idiomatic use of NoSQL DBs? Or a project to study that'd set me on the right track?
23:45 < LegCow> ForSpareParts: I'm not qualified to really mention anything more than the term 'noSQL'. It does look interesting though. Appears to have excellent node support though through things like mongoose. relational DB's seem to tick all my boxes. I've mostly been .NET but there's something appealing about Node.
23:45 < jdelgado> MongoDB ftw :)
23:45 < keyosk> redis ftw :P
23:45 < jdelgado> indeed
23:46 < keyosk> I wanted to use MongoDB for the project i'm currently working on, but the powers that be demanded I do it in redis
23:46 < jdelgado> MongoDB if you are doing some hardcore replication and need uptime, redis if you are doing local storage and can get away with a key store
23:46 < keyosk> Redis supports uptime through persitence
23:46 < keyosk> And if you want to replicate redis they're supporting that now.
23:47 < jdelgado> No shit?
23:47 < keyosk> No kidding
23:47 < LegCow> i hear much FTW directed at MongoDB :P Would you recommend it for business applications?
23:47 < jdelgado> Since when? lmao
23:47 < jdelgado> I guess i'm falling behind
23:47 < keyosk> http://redis.io/topics/replication
23:47 < jdelgado> LegCow: All day long.
23:48 < jdelgado> LegCow: Beat the shit out of SQL
23:48 < jdelgado> keyosk: Cool beans!
23:48 < keyosk> ^^
23:48 < jdelgado> keyosk: No auto failover though :(
23:48 < LegCow> jdelgado: fanboy ;D but i'm now going to look into it.
23:49 < keyosk> I've not spent a whole lot of time looking into it jdelgado, but it's possible to get around with the write monit
23:49 < keyosk> 'right monit' **
23:49 < jdelgado> keyosk: Right on, anything can be done with some hacking :)
23:50 < jdelgado> LegCow: Trust me, best choice I've ever made
23:50 < jdelgado> LegCow: Replication is amazing, auto failovers allow me to sleep at night, I can choose which collections have safties and which don't, and best of all, it is all javascript objects.
23:51 < LegCow> jdelgado: Ever done a RESTful API in Node with it?
23:51 < jdelgado> LegCow: Yeah
23:52 < ForSpareParts> So, what I'm trying to wrap my head around is whether NoSQL DBs are good/efficient for the same problem space as SQL, where you have all this data that maps pretty cleanly to (what I tend to think of as) a bunch of related data structures you could model as classes. I can certainly imagine modeling the same data in a key/value store, but I have no idea if that would be efficient. Or do you just approach that problem differentl
23:52 < LegCow> jdelgado: haha, ok ok. I'll give it a whirl. It did look pretty appealing.
23:54 < mikeal> anyone using async a lot here?
23:54 < ljharb> ForSpareParts: i use mongodb via mongoose to do that, and i use its DBRefs to simulate foreign keys
23:54 < mikeal> is there a parellel that doesn't fail immediately on error
23:55 < draginx> mikeal: would .apply work?
23:55 < draginx> may be not hmm
23:56 < jdelgado> LegCow: Depending on your project complexity - use mongoose for crazy projects to keep everything clean, or just the native driver if it's quick
23:56 < jdelgado> mikeal: Yes
23:56 < jdelgado> mikeal: Oh Just read the question.. uhh sec
23:57 < jdelgado> mikeal: Why not try/catch it?
23:57 < mikeal> huh?
23:57 < ForSpareParts> ljharb: Cool. Well, I guess I'll give Mongoose a shot next time I've got a project to work on and see how it strikes me. I didn't realize at first that I'd be going against the grain by doing relational stuff in Node, but I'm totally game to try something new.
23:57 < ljharb> mikeal: doesn't look like it. what would the callback receive if 2 of the items had errors?
23:57 < jdelgado> mikeal: Do try {} catch {} blocks within the async, so no errors get exposed to the async functions?
23:57 < mikeal> i'm thinking something like function (errors, results)
23:57 < mikeal> all ordered
23:58 < mikeal> jdelgado: async doesn't trap those anyway, i'm talking about errors passed to the callback
23:58 < mikeal> async will stop after the first one
23:58 < draginx> right
23:58 < ljharb> mikeal: if you're deviating from the "error, single value" node signature, might as well use promises, eh? ;-)
23:58 < draginx> you might have to do do something like callback(null, Array(errs, values)) and then check for results[0] ? :/
23:59 < jdelgado> mikeal: Yeah, are these errors exceptions, or just data for you?
23:59 < ljharb> mikeal: maybe that's a good usecase for adding "parallelAll" to async?
23:59 < mikeal> ljharb: i'm not deviating, you're mistaken
23:59 < jdelgado> jdelgado: If they are data, use them as data
--- Log closed Tue May 07 00:00:12 2013
