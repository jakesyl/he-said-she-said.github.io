--- Log opened Mon Oct 01 00:00:49 2012
00:01 < superjoe30> so
00:01 < superjoe30> formidable is actually pretty shitty
00:05 < astropirate> superjoe30, explain
00:05 < superjoe30> while trying to fix an issue I noticed, I put together a list of things that are broken.
00:06 < superjoe30> I'll post it in a sec.
00:06 < astropirate> Tnx :D
00:06 < astropirate> You going to make a bug report?
00:06 < superjoe30> well that's part of the problem
00:07 < superjoe30> I already have
00:07 < superjoe30> but it's largely unmaintained at this point
00:07 < superjoe30> lots of people have submitted fixes 
00:07 < superjoe30> and they're just sitting there rotting
00:07 < astropirate> I see
00:07 < astropirate> i guess time for a f0rk
00:07 < superjoe30> yeah. ButI was hoping it wouldn't come to this.
00:08 < superjoe30> and then I have to convince tjhollowaychuck to use the fork instead of the original in express.
00:10 < astropirate> superjoe30, lol why is that?
00:10 < superjoe30> because express uses formidable to parse multipart requests, and my code depends on express
00:10 < superjoe30> that's why I'm knee deep in this shit right now
00:11 < astropirate> AHHH
00:14 < superjoe30> astropirate, http://pastie.org/4888647
00:23 < euoia> in express, how should I pass information (other than req & res) to my routes from app.js? For example, I want to configure the page to redirect to after a successful login
00:23 < mscdex> superjoe30: have you tried parted?
00:23 < superjoe30> mscdex, I'm actually doing that this very second
00:23 < mscdex> ah ok
00:23 < superjoe30> was right about to press enter and see it in action
00:23 < superjoe30> :)
00:23 < STRML> euoia: I keep an environment.js that I include in most of my files, store static options in there
00:26 < euoia> STRML: That makes good sense... are there any other ways to do it?
00:26 < STRML> Not that I know of, you have to set global configuration somewhere.
00:26 < euoia> STRML: I'm just asking out of curiousity now - I will make an environment.js file
00:27 < euoia> STRML: yep... okay thanks
00:27 < STRML> It's good to have one anyway. Who knows, you might need local/dev/stage/test/prod configurations
00:28 < STRML> I split mine out and load them within environment.js. e.g. http://pastie.org/4888683
00:28 < superjoe30> mscdex, looks like parted has the same glitch that formidable does.
00:29 < superjoe30> also no activity for 8 months.
00:29 < STRML> euoia: So all common vars go in environment.js, then you put environment-specific vars in environment-{env}.js. simple
00:30 < mscdex> superjoe30: what glitch?
00:30 < superjoe30> mscdex, https://github.com/felixge/node-formidable/issues/169
00:32 < mscdex> superjoe30: that's 70 characters in the multipart body?
00:33 < superjoe30> mscdex, irrelevant
00:33 < mscdex> eh?
00:33 < superjoe30> content-length is irrelevant here.
00:34 < mscdex> why?
00:34 < superjoe30> 1. because it's the same behavior whether the content length is exactly correct, or greater than the correct value
00:35 < superjoe30> 2. because even if it's a parsing error, the issue is that it is closing the socket yet still emitting the "file" event.
00:38 < Raynos> I want to write some improved npm search tools
00:38 < Raynos> I was thinking of npm-used which shows you a list of modules your "favourite authors" use by order of how much they use them
00:44 < mscdex> superjoe30: time to roll your own and publish it on npm!
00:44 < mscdex> :-)
00:44 < superjoe30> mscdex, I sent an email asking him to make me the new maintainer
00:45 < superjoe30> hope he grants it. gonna refactor the shit outta that module
00:48 < niggler> lol
00:51 < Raynos> if I write a CLI
00:51 < Raynos> and want to store some config somewhere
00:51 < Raynos> what's a good unixy folder to store it?
01:01 < deoxxa> Raynos: ~/.your-app-name is pretty common
01:01 < Raynos> i think ill use ~/.config/my-app-name
01:01 < deoxxa> why?
01:01 < deoxxa> (just wondering)
01:03 < Raynos> becuase thats what browserify does
01:03 < deoxxa> fair enough
01:03 < deoxxa> maybe make it configurable for users with an environment variable
01:04 < deoxxa> var config_directory = process.env.YOUR_APP_CONFIG || "~/.config/your-app"; // or something
01:05 < Raynos> later :P
01:05 < deoxxa> you're right, that's hard to code
01:46 < InternetFriends> now you're going to die...
01:48 < astropirate> ohh dear
01:48 < astropirate> InternetFriends, This is the internet police
01:48 < astropirate> dawwwwww :(
01:52 < sinclair_> how many people here did browser programming, and then went straight to node without trying out Java or C#?
01:53 < niggler> fuck java
01:53 < sinclair_> yes, java sucks
01:53 < sinclair_> not what im asking
01:55 < astropirate> sinclair_, i programed a browser once
01:55 < astropirate> is that what you are asking
01:56 < astropirate> i also make a operating system for funny
01:56 < sinclair_> astropirate: ever do any web server side development in any other language?
01:56 < astropirate> I used to do PHP
01:57 < astropirate> played around with GO
01:57 < astropirate> Go*/Golang w/e it goes by :S
01:57 < astropirate> sinclair_, why do you inquire?
01:58 < sinclair_> just wondering if node.js developers originate from browser programming, or server side programming environments
01:58 < astropirate> I'd say we have a healthy mix
01:58 < sinclair_> if there was a ratio, what would it be?
01:59 < astropirate> a number
02:00 < TehShrike> :-P
02:01 < niggler> 50:50
02:01 < astropirate> 20/30
02:02 < TehShrike> sinclair_: most of my career has been on a thick-ish Windows desktop CRUD application, MySQL backend.  Lots of random minor webdev mixed in there.  This last year, mostly JavaScript/PHP.  We're a small shop, so I'm full-stack on every project.
02:02 < TehShrike> There, have an anecdotal data point!
02:02 < InternetFriends> die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die die
02:02 < TehShrike> Good luck with the rest of the ratio :-)
02:03 < TehShrike> konobi, mbalho, Nexxy, ryah: a small +b might be in order ^
02:03 < sinclair_> TehShrike: i think you are kinda typical, but a little suprised just how many desktop developers are using node
02:03 < astropirate> {0}_{0}
02:04 < TehShrike> Yeah, by the time I got to node.js the Windows installer was pretty excellent (around 0.6, I think).  It was a good excuse to throw out PHP as my random-scripts language.
02:06 < justinfr> what's a 'desktop dev'?
02:06 < justinfr> aren't we all?
02:06 < astropirate> no
02:06 < justinfr> developing on our desktops
02:06 < astropirate> i am a cloud dev
02:07 < justinfr> <-- just a dev.
02:07 < TehShrike> I'm a fire dev
02:07 < astropirate> justinfr, you are working in the stone age
02:07 < sinclair> astropirate: cloud dev? that sounds like marketing blah
02:07 < TehShrike> I'm mostly elemental, with a few points in swordplay
02:07 < justinfr> stone age gave us the wheel.
02:07 < justinfr> fire
02:07 < justinfr> hairy men
02:08 < justinfr> and women
02:08 < justinfr> astropirate, you develop on your ipad?
02:09 < astropirate> No, i have a neural interface
02:09 < astropirate> justinfr, but I jest,
02:10 < astropirate> I run Linux
02:10 < TehShrike> astropirate: if you use a console editor, you could probably develop on an iPad easier than most
02:10 < justinfr> nice, i don't trust my neural cells
02:10 < TehShrike> I've tried Diet Coda a bit
02:10 < InternetFriends> java script is for faggots
02:10 < astropirate> I am dreading that I might have to buy a Mac :(  for compiling
02:10  * justinfr is waiting for vim 4 ipad
02:11 < TehShrike> astropirate: compiling what? 8-|
02:11 < astropirate> my code
02:11 < TehShrike> I compile code... on Windows... :-x
02:11 < justinfr> but surely you code via ssh'ing to the cloud
02:11 < astropirate> no
02:11 < astropirate> for it to run on mac
02:11 < justinfr> and the cloud has your tools
02:11 < astropirate> i have to compile it on a mac
02:11 < justinfr> and you have awesomely low latency
02:12 < astropirate> o_O
02:12 < InternetFriends> only faggots use javascript no homopobia
02:12 < justinfr> lol
02:12 < astropirate> InternetFriends, do you need a hug?
02:12 < InternetFriends> no
02:12 < InternetFriends> but your mom does
02:12 < astropirate> you seem like you do
02:13 < InternetFriends> fuck you
02:13 < astropirate> here, virual internet hug for you
02:13 < astropirate> <3
02:13 < astropirate> <3
02:13 < InternetFriends> I don't want hugs from a noob
02:13 < justinfr> he came in here for more than hugs
02:13 < sinclair> InternetFriends: what's wrong with JavaScript (a real argument, not just some stupid shit)
02:13 < astropirate> everyone give InternetFriends  a hug
02:13 < sinclair> InternetFriends: go
02:13 < astropirate> sinclair, dont feed troll
02:13 < InternetFriends> It sucks donkey cock
02:13 < InternetFriends> and it's going to die
02:13 < sinclair> InternetFriends: i said, a "real" argument
02:14 < sinclair> go
02:14 < InternetFriends> at least it's not Microsoft Word
02:14 < justinfr> well thought out response InternetFriends
02:14 < sinclair> InternetFriends: where is your argument? do you have one?
02:14 < InternetFriends> It's poorly coded bloatware
02:14 < InternetFriends> and it has a ton of vulnerbilities
02:14 < sinclair> InternetFriends: such as?
02:14 < InternetFriends> like any ball sucking sack of monkey shit coding language does
02:14 < sinclair> need specifics
02:15 < sinclair> you don't actually have an argument do you
02:15 < InternetFriends> I don't need to have one
02:15 < justinfr> so what's your language/runtime of choice InternetFriends
02:15 < InternetFriends> I'm better then petty arguements
02:15 < InternetFriends> assembly
02:15 < justinfr> right on
02:15 < sinclair> InternetFriends: liar
02:15 < InternetFriends> no lies
02:16 < justinfr> what processor?
02:16 < InternetFriends> ur mom's processor
02:16 < InternetFriends> I work on her core
02:16 < InternetFriends> I put 1 in her 0
02:16 < justinfr> shes all vacuum tubes, have fun
02:17 < InternetFriends> I will
02:17 < sinclair> InternetFriends: seems you're the n00b. I gave you the stage to express your opinions of why JS sucks, and you couldn't offer anything up. Which is unfortunate, because im looking for good reasons not to use node.
02:17 < sinclair> InternetFriends: you suck, one more stupid comment from you, and you're on ignore
02:18 < justinfr> O_o, encouraging the troll
02:18 < Fishrock123> InternetFriends: Why are you even here?
02:18 < InternetFriends> why do I have to stage my opinion on something that sucks a plethora of balls
02:18 < InternetFriends> cause you blocked me on Freenode
02:18 < InternetFriends> and now you're going to die
02:18 < Fishrock123> w/e
02:18 < crewmoss> *sigh*
02:19 < crewmoss> Who fed the troll...
02:19 < Franz__> lol
02:19 < Fishrock123> He'll get bored eventually.
02:19 < Franz__> where are the ops?
02:19 < InternetFriends> busy dying
02:19 < Franz__> isaacs konobi mbalho Nexxy ryah ...
02:19 < jerrysv> nexxy: ping
02:22 < euoia> anyone have any advice about a unit testing framework for an express app before I start digging around for nodeunit tutorials?
02:22 < crewmoss> InternetFriends, surely you have something better to do?
02:22 < sinclair> euoia: Jasmine?
02:22 < crewmoss> If you don't, you need to consider finding a hobby.
02:22 < crewmoss> Like my mother.
02:22 < crewmoss> Or something along those lines.
02:22 < jerrysv> euoia: express seems to be very friendly to mocha
02:23  * sinclair struggles on with node.js
02:23 < justinfr> test without the test framework using plain-old js, mikeal has some good examples on githun
02:23 < euoia> excellent, thanks
02:23 < jerrysv> personally, i prefer vows
02:23 < euoia> justinfr: do you have a link?
02:24 < crewmoss> Ah… have to love /ignore...
02:25 < justinfr> here's mikeal simple 'plain javascript' test runner https://github.com/mikeal/request/blob/master/tests/run.js
02:25 < euoia> justinfr: thanks
02:25 -!- mode/#Node.js [+b *!*@24.69.197.34] by Nexxy
02:25 <@Nexxy> uh huh.
02:25 < Fishrock123> Thanks.
02:26 <@Nexxy> what was that all about
02:26 <@Nexxy> lol
02:26 < Fishrock123> Troll
02:26 <@Nexxy> thanks jerrysv
02:26 < jerrysv> dunno, glad you saw my tweet :)
02:26 < justinfr> unhappy troll
02:26 < jerrysv> somewhere, 10000 lines back there was a bunch of troll
02:26 < jerrysv> then my status window started going nutso
02:26 <@Nexxy> was there a confrontation? i can't see it on my phone
02:26 <@Nexxy> ah
02:26 < justinfr> just some node/js bashing lol
02:27 < crewmoss> And mother bashing too. ;-)
02:27 < jerrysv> and gay bashing
02:27 < crewmoss> Don't forget that part.
02:27 <@Nexxy> oh fun
02:27 < jerrysv> and everything bashing
02:27 < jerrysv> that's as far back as my history goes
02:27 < sinclair> trolls typically have a bit more tact than that guy, retard springs to mind
02:28 < jerrysv> anyways, now that my status scrolling has slowed down, back to ignoring the channel for a while
02:28 < jerrysv> thanks nexxy :)
02:28 <@Nexxy> thanks too :)
02:29 <@Nexxy> if ever I'm not around and something similar happens, I get pings on twitter: @nexxylove
02:30 < Fishrock123> Mmkay
02:33 < mscdex> ugh ubuntu doesn't compile ncurses static libraries with fPIC
02:33 < mscdex> i think this is why i started bundling ncurses with my module in the first place ...
02:40 < jesusabdullah> Nexxy: wat happen?
02:40 < jesusabdullah> holy shit
02:40 < jesusabdullah> NEVERMIND
02:40 < jesusabdullah> Nexxy: how r u?
02:40 <@Nexxy> I'm great! on the road though, be back soon :)
02:41 <@Nexxy> hru?
02:41 < jesusabdullah> n2b
02:41 < jesusabdullah> fairly relaxing weekend
02:41 < jesusabdullah> wish I could concentrate on some codez a little better but you know
02:41 < jesusabdullah> that'll work itself out
02:44 < deoxxa> substack: y u no implement real streams in node-binary
02:45 < deoxxa> substack: also where exactly is data emitted from that thing - i can't make heads or tails of the program flow
02:49 < deoxxa> what the hell? there are precisely 0 emit() calls in node-binary
02:49 < deoxxa> there's a couple in chainsaw, but nothing that emits data (as far as i can tell)
02:50 < vicapow> anyone ever work with ico files  before? trying to ready them in and convert them to pngs
02:54 < sinclair> https://www.destroyallsoftware.com/talks/wat
02:55 < deoxxa> sinclair: awesome, never seen that before
02:55 < sinclair> some interesting quirks on JS there
02:56 < deoxxa> (that was sarcasm)
02:56 < deoxxa> (that link has been posted at least 9000 times here)
02:56 < sinclair> ....oh?
02:57 < sinclair> deoxxa: i had no idea
03:28 < euoia> question about using mocha to test my express app - I have refactored so the tests can start my server, but I don't actually seem to get the full logging from my server when running the tests
03:42 < sinclair> http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis
04:04 <@Nexxy> so synergy is pretty cool
04:04 < niggler> fuck synergy
04:04 <@Nexxy> I uh...
04:04 <@Nexxy> ok
04:05 <@Nexxy> I like it
04:05 < terinjokes> synergy happens
04:05 <@Nexxy> niggler, do you know of something better?
04:05 <@Nexxy> http://synergy-foss.org/
04:06 < niggler> you know, i used to use multiple monitors
04:06 < niggler> but now i use one mammoth and its great
04:06 <@Nexxy> I just have a bunch of 22" touchscreens
04:07 < sinclair> Nexxy: how many?
04:07 <@Nexxy> 3
04:07 < sinclair> nice
04:08 <@Nexxy> only really using 2 right now
04:08 < niggler> ooh i still struggle to use up the full real estate of two imacs
04:08 <@Nexxy> but the point is that I only need 1 keyboard and mouse now
04:09 <@Nexxy> a tiling window manager helps with that
04:11 < niggler> i haven't tried the thunderbolt 3-display version
04:26 < tuhoojabotti> I played Synergy for 7 hours last week 
04:26 < tuhoojabotti> weekend
04:26 < tuhoojabotti> Great hl2 mod
04:27 < niggler> how's black mesa?
04:27 < tuhoojabotti> its awesome, too
04:27 < niggler> better than the valve conversion?
04:28 < niggler> the OST is really good
04:28 < tuhoojabotti> wat
04:28 < niggler> http://www.blackmesasource.com/soundtrack.html
04:28 < tuhoojabotti> the valve conversion? You mean half-Life source? 
04:28 < niggler> good coding music
04:28 < niggler> yeah half-life source
04:29 < tuhoojabotti> that's crap 
04:29 < tuhoojabotti> Black Mesa has hl2 graphics 
04:30 < tuhoojabotti> I'm out, bye
04:30 < niggler> same gameplay terinjokes 
04:30 < niggler> *tuhoojabotti 
04:31 < sinclair> i completed Black Mesa
04:31 < sinclair> good game, looking forward to the Xen levels
04:34 < niggler> i need to play more video games
04:34 < niggler> any recommendations?
04:34 < justinfr> what do people prefer nvm or nave?
04:36 < justinfr> hmmm, prefer silence
04:39 < niggler> why are you running multiple node versions?
04:41 < sinclair> niggler: chess
04:41 < niggler> ?
04:42 < niggler> chess as in the board game?
04:43 < mclenithan> hi, i installed phantomjs && npm install phantomjs, i tried doing the tutorial code on http://net.tutsplus.com/tutorials/javascript-ajax/web-scraping-with-node-js/ and still keep getting... phantom stdout: TypeError: 'undefined' is not a function (evaluating 'phantom.loadModuleSource('webpage')')
04:45 < mclenithan> i even tried different versions of phantomjs :(
04:47 < mclenithan> has anyone else come across this problem?
04:48 < niggler> is the function called loadmodulesource?
04:49 < mclenithan> no...
04:49 < mclenithan> it seems the error is coming from the module itself, nothing in my code is similiar
04:50 < cryptops1> how to handle the event that a user goes to mysite.com/SOMETHING, where something is a page that doesn't exist, and then load a page for all such URL requests?
04:51 < SomeoneWeird> cryptops1, app.get("*", function(req, res) { res.send("oops", 404); });
04:51 < SomeoneWeird> as the last route
04:52 < mscdex> gah gypifying ncurses is more of a pain than gypifying libmysqlclient was
04:52 < mscdex> :(
04:52 < SomeoneWeird> :c
04:52 < niggler> haha mscdex thanks for your labor
04:52 < niggler> are you in nyc?
04:52 < mscdex> the upside is at least i don't have to get this working on Windows ;-)
04:52 < SomeoneWeird> hehe
04:52 < mscdex> no
04:56 < cryptops1> SomeoneWeird: that would also include / , how to exclude root page?
04:58 < SomeoneWeird> if you have it as your last route, it will only get activated if no other routes match
04:58 < SomeoneWeird> so if you have app.get('/') before it, ('*') won't get activated
04:59 < very> mclenithan: Phantom::loadModuleSource() has been renamed to Phantom::readNativeModule()
05:00 < very> oh, you're gone.
05:00 < very> renamed on june 23
05:01 < very> maybe the versions of phantomjs and the node package are mismatching
05:02 < _Tristan> anybody know of a good prng that works in node and browser?
05:04 < LouisT> Can someone please explain to me the main differences between net.Socket() and net.connect()?
05:06 < _Tristan> net.Socket is an object. If you create a new socket, it won't actually connect to anything, but you can specify a file descriptor of an existing socket
05:06 < _Tristan> unless I'm mistaken, net.connect should give you a socket object
05:07 < niggler> _Tristan: im working on it
05:07 < niggler> if by prng you mean pseudorandom number generator
05:08 < LouisT> ah ok, does localAddress work with  net.Socket()'s connect?
05:08 < _Tristan> no way, I want a portable rotary notary goatery.
05:08 < SomeoneWeird> omg i want one too _Tristan 
05:08 < SomeoneWeird> Math.Random()
05:08 < SomeoneWeird> ;)
05:08 < _Tristan> it must be seeded
05:09 < _Tristan> and I'm hoping to use strings as seeds. Also, specifying a range for the number would be awesome.
05:09 < _Tristan> niggler: when you say you're working on it, do you mean you're making one or finding one?
05:09 < niggler> no Math.random doesnt work SomeoneWeird 
05:09 < niggler> _Tristan: ive written a few
05:10 < SomeoneWeird> hence the winky face niggler 
05:10 < niggler> i implemented a few LCGs with an srand
05:10 < mscdex> LouisT: yes
05:10 < niggler> im working on some low discrepancy versions
05:11 < niggler> im seeing some performance problems on niederreiter sequences which im tinkering with
05:11 < niggler> although sobol' works pretty well for quasirandom MC
05:11 < cryptops1> is socket.emit("adduser"..) necessary to put the users on your site in an array when it already exists in socket.on('connect') ?
05:12 < LouisT> mscdex: for connecting to something like IRC, is it better to use net.Socket() or just net.connect()?
05:19 < mscdex> LouisT: i've been in the habit of doing `var sock = new net.Socket(); /* set up sock event handlers */ sock.connect(...);`
05:20 < cryptops1> SomeoneWeird: i have a list of websites in an array, how can i app.get( ..) send them all automatically (such that i dont have to write out all the app.get lines manually
05:21 < cryptops1> can i pass that aray to app.get() as the first parameter or should i iterate with a loop over the array?
05:22 < cryptops1> res.sendfile must match the parameter of app.get()
05:24 < cryptops1> is there something like lambda in whatever js node is interpreting?
05:27 < gkatsev> lambda being...?
05:29 < cryptops1> lisp lambda function
05:31 < jesusabdullah> cryptops1: it's called a function
05:32 < jesusabdullah> cryptops1: javascript has functions with names and functions without names. You can inline either.
05:34 < cryptops1> can socket.on('assuser' ..) avoid having the client side send 'adduser' emit , since the server already knows when a user has connected before that?
05:36 < cryptops1> in the chat example, the .js file that runs clientside has 'socket.on('connect ..)' and then socket.emit('adduser', ...) , but the server-side js that node understand also have socket.on('adduser', ...)
05:37 < NeuroticSquirrel> exit
05:37 < syskk> anyone knows how Tower.js compares to derby.js ?
05:44 < cryptops1> how2 console.log( ..) when a user has connected?
05:45 < cryptops1> i dont understand why socket.emit('adduser') must sit in socket.on('connect') on the clientside, and then socket.on('adduser') in the server-side
05:46 < mscdex> woohoo! success! a working gypified ncurses!
05:46 < niggler> any chance of mouse support mscdex ?
05:46 < mscdex> niggler: first things first ;-)
05:47 < niggler> lemme say that im very glad you are doing this :)
05:47 < mscdex> i wanna get this out there and fix the ev_io message
05:58 < cryptops1> how does node know when a use have connected to your server?
05:58 < cryptops1> is there better way than embed socket.emit in the user's page?
05:59 < Raynos> https://gist.github.com/3809709
05:59 < Raynos> Is the phrase "npm-used" a good name?
05:59 < Raynos> is it obvouis enough?
06:00 < shalotelli> yes
06:03 < Raynos> Who other then TJ is a "node community leader originating from ruby"
06:03 < cryptops1> is socket.io deprecated by some better way of handling sockets?
06:03 < cryptops1> ...what?
06:20 <@Nexxy> mbalho, \o/
06:34 < mscdex> Nexxy, \o/
06:35 <@Nexxy> mscdex, \o/
06:43 <@mbalho> Nexxy: o/ o/ \o \o
07:06  * mscdex shakes a fist at Windows' case-insensitive file systems
07:07 < sinclair> mscdex: perhaps you should code consistently
07:07 < sinclair> anyone here dabble in F#?
07:08 < mscdex> sinclair: not my call. i have upstream directories with upper and lowercase versions of the same name
07:08 < nathan7> heh
07:09 < sinclair> no one here uses F#?
07:35 < [AD]Turbo> hola
08:04 < mikrowelt> o/
08:06 <@Nexxy> \o
08:08 < thealphanerd> 0/
08:11 < mon> o/
08:13 < thealphanerd> anyone in here going to start up school in october?'
08:27 < sinclair> skydrive is looking quite slick nowadays
08:27 < LouisT> sinclair: is that the thing from microsoft?
08:28 < sinclair> yes
08:29 < sinclair> its actually nicer to look at and use than google drive. 
08:30 < LouisT> i've not used either
08:30 < sinclair> hey, whats a good linux http performance/request response benchmarking tool i can run at the command line
08:30 < LouisT> i've always just used ab.. i don't know of any others
08:31 < sinclair> ab?
08:31 < LouisT> apachebenchmark
08:31 < sinclair> jmeter?
08:31 < sinclair> what about that one
08:31 < LouisT> er, bench*
08:32 < LouisT> http://en.wikipedia.org/wiki/ApacheBench
08:32  * sinclair is going to read a book about node
08:32 < LouisT> sinclair: jmeter seems more gui than cli
08:32 < substack> I would just read the node core docs
08:32 < substack> node isn't the important part about node
08:32 < substack> it's userspace
08:33 < sinclair> substack: userspace?
08:33 < substack> sinclair: the stuff on npm
08:33 < syskk> do modules within the same process share the same global scope?
08:33 < sinclair> substack, i can't even get express working :(
08:33 < sinclair> im not liking node all that much
08:34 < substack> syskk: they do not
08:34 < sinclair> LouisT: thanks, ab looks good thanks :)
08:34 < substack> well they do insofar as it is global
08:34 < substack> but all the declarations are scoped to each file
08:34 < substack> and those are almost always lexical declarations
08:34 < syskk> weird
08:35 < substack> not weird, isolated by default
08:39 < sinclair> substack: im stuggling with node,
08:40 < substack> the first step is to realize that you are confused
08:41 < sinclair> substack: i get it, i have researched it, coding a few trivial things, looked at the evented streams, etc. but I don't get the appeal of nodejs 
08:41 < sinclair> why the hell is it so popular
08:41 < nathan7> Because JavaScript
08:41 < LouisT> well the reason i like it is because it's so incredibly easy to use
08:41 < nathan7> and because asynchronous IO is fast
08:41 < nathan7> JavaScript gives you a lot of freedom
08:41 < sinclair> nathan7: but async io is not limited to node
08:42 < nathan7> sinclair: No, certainly not
08:42 < nathan7> You have.. fucking Twisted
08:42 < nathan7> don't get me started on Twisted, man
08:42 < sinclair> nathan7: well, there is .NET F# been doing it for years, C#'s doing it out of the box now. 
08:43 < LouisT> sinclair: it really all depends on what you want to use it for.. just like any language
08:43 < nathan7> Can I rely on something in C# doing shit asynchronously?
08:44 < nathan7> and man, first-class functions
08:44 < sinclair> LouisT: i appreciate this, but when i develop stuff, i typically go LARGE with it. Node feels flaky (100% the fault of JS mind you)
08:44 < nathan7> Really they are the thing I love most about JS
08:44 < sinclair> nathan7: i have a love hate relationship with JS
08:44 < graeme_f> don't c# async callbacks happen on another thread?
08:44 < nathan7> ..what the fuck
08:44 < syskk> where does app come from in this file if the module doesnt have access to the processe's global scope? https://gist.github.com/3810362
08:45 < nathan7> syskk: nowhere
08:45 < nathan7> syskk: you have to do var app=express();
08:45 < sinclair> graeme_f: http://msdn.microsoft.com/en-us/library/hh191443.aspx#BKMK_Threads
08:45 < nathan7> syskk: Use the express utility
08:45 < graeme_f> (i haven't used c# 5 yet, still on .NET 4.0 here)
08:45 < syskk> well, it's generated code from RailwayJS
08:45 < syskk> seems to run fine
08:46 < LouisT> nathan7: is that really true? because in a file i have "randomFunctionName = function () { };" and all i have to do is require the file without actually using exports to use it
08:46 < sinclair> graeme_f: 4.5 is out and doing fine, you could always spawn and manage threads yourself mind you. .NET has been through 3 iterations of async programming models, the second generation was evented 
08:46 < graeme_f> sinclair: ah, cool, step in the right direction :)
08:46 < nathan7> LouisT: If you require() it in node that shouldn't work
08:47 < LouisT> nathan7: really? O_o i think my install is messed up then because it works for me
08:47 < nathan7> and either way, sticking shit into globals is bad
08:47 < nathan7> It works fine, for years even
08:47 < nathan7> Until one day you add some stuff and everything breaks
08:48 < sinclair> graeme_f: C# is advanced afterall, and all the IO stuff has been tightly integrated into the TPL (Task Parallel Library)
08:48 < sinclair> graeme_f: in C#, you essentially write async sequentially, and the compiler irons out the details of callbacks etc
08:49 < nathan7> Hm
08:49 < LouisT> nathan7: $ node .
08:49 < LouisT> This was added by require()
08:49 < LouisT> var randRequire = require('./blah');
08:49 < LouisT> console.log(blah());
08:50 < nathan7> ..I'm not sure on the internals of node's module loading
08:50 < nathan7> but afaik it creates a separate context
08:50  * nathan7 taps substack 
08:50 < sinclair> graeme_f: which brings me back the why node? 
08:51 < LouisT> in blah.js all i have is: blah = function () { return "This was added by require()"; };
08:51 < syskk> nathan7: it seems you are wrong. i just did a quick test and a required module can access the global scope it was required in
08:51 < LouisT> hm, i guess it's because i don't do "var blah = ..."
08:52 < graeme_f> sinclair: personally i'm enjoying javascript a lot - it's nice not to have to go through all that ceremony with classes when you don't need to
08:52 < sinclair> graeme_f: classes are good tho
08:52 < syskk> nathan7: main.js:    app = {test: "123"};require('./module.js');   module.js: console.log(app);    
08:52 < graeme_f> sinclair: i also like how async is just the way node has always been (probably :)
08:52 < sinclair> graeme_f: im pretty sure that isn't just opinion either
08:52 < LouisT> syskk: yea i just went over the same thing lol
08:52 < syskk> that will output {test: "123"}
08:53 < LouisT> syskk: test with "var app = ..."
08:53 < syskk> LouisT: yea that fails ;)
08:53 < sinclair> graeme_f: i appreciated JS and sync on the client, but on the server, not so much
08:53 < graeme_f> sinclair: so everybody's stuff works the same way - async wasn't added in the latest drop that most people still can't use
08:53 < graeme_f> sinclair: then don't use it!
08:54 < sinclair> graeme_f: but ... its popular
08:54 < sinclair> like rails
08:54 < nathan7> That's a silly argument
08:54 < nathan7> PHP is popular too..
08:55 < terinjokes> but NodeJS is nothing like rails
08:55 < sinclair> nathan7: there seems to be a lot of jobs going for node
08:55 < sinclair> terinjokes: i know this
08:55 < nathan7> The job market is fortunately not my business ye
08:55 < nathan7> *yet
08:55 < terinjokes> there's a lot of jobs looking for cheap PHP too
08:55 < nathan7> So I can't comment on that
08:56 < nathan7> For a whole $7/hour you can write PHP all day!
08:56 < nathan7> I'd probably spend the other half of my day on self-loathing, though
08:56 < sinclair> nathan7: this is essentially my point, community marketed technologies take off, regardless of how flawed they are (not saying node is flawed, im saying JS is)
08:56 < LouisT> nathan7: i'd do that if i didn't care about what food or healthcare i had
08:56 < terinjokes> nathan7: you dont get paid for the time you take reading the PHP documentation, sadly
08:57 < nathan7> Sure you do. You need to have the docs next to it.
08:57 < terinjokes> sinclair: how is JS flawed?
08:57 < nathan7> A variety of minor ways
08:57 < terinjokes> nathan7: i'm trolling at this point, but eye tracking software?
08:57 < sinclair> it is inappropriate for the domain (excluding the fact it does async well)
08:57 < terinjokes> nathan7: like what?
08:58 < nathan7> There's the whole Object.create matter
08:58 < nathan7> and == vs ===
08:58 < terinjokes> i'm not trolling here, I use node all day, how's that inappropriate?
08:58 < sinclair> i guess this is my biggest issue with node, the JS part is kind crap, the concept is awesome, the language sucks
08:58 < shinaku_> I like JS
08:58 < nathan7> sinclair: Go play with luev
08:58 < terinjokes> how does it suck?
08:58 < nathan7> or whatever it's called
08:59 < sinclair> yeah, i like JS too
08:59 < graeme_f> sinclair: have you read The Good Parts?
08:59 < shinaku_> I'm a little unused to the loose typing, coming from a C++ background, but JS seems nice
09:00 < nathan7> Loose typing makes for fast programming
09:00 < nathan7> C++ and such make me think about interfaces all day
09:00 < sinclair> shinaku_: see, that's the thing, perhaps ive seen too much of .NET to appreciate node 
09:00 < nathan7> Excellent for boring lessons
09:00 < nathan7> Not really for productivity
09:00 < shinaku_> sinclair: I work with .net professionally, I'm writing c# atm
09:00 < sinclair> shinaku_: its good right?
09:01 < shinaku_> I only discovered node.js this weekend, I spent the whole time playing with it
09:01 < shinaku_> sinclair: I like c# and .net
09:01 < sinclair> nathan7: loose typing is a bad idea, for any language, plus the V8 optimizations it does with hidden classes freak out with loosely typed things
09:01 < shinaku_> I'm reevaluating some reasons why I like it after playing with nodejs though
09:02 < guor> +1 to sinclair
09:02 < mikrowelt> guys anyone made a multi room chat? i have some logic question
09:03 < nathan7> sinclair: I think the type conversions are somewhat silly
09:03 < nathan7> I consider that the biggest JS flaw
09:04 < shinaku_> I've not looked at type conversions in js, is it just casting?
09:04 < shinaku_> not something which I've needed to do so far
09:05 < sinclair> id like to know what people actually do with node, and how it holds up for really large projects
09:05 < terinjokes> there's some type conversions for comparisons, that if you're not careful do some interesting things
09:05 < nathan7> shinaku_: it casts weirdly
09:05 < sinclair> maintainability is a huge thing, debugging is also hugely important. Node lacks in both instances
09:05 < nathan7> shinaku_: "0" == 0
09:05 < sinclair> mainly because of the language
09:05 < nathan7> Debugging is where node is lacking.
09:05 < terinjokes> sinclair: i use node fora streaming media server as well as interaction withUSB devices in a binary protocol
09:06 < terinjokes> sinclair: node lacks debugging?
09:06 < AAA_awright> >> "0"==0
09:06 < purr> AAA_awright: (boolean) true
09:06 < shinaku_> nathan7: ..really?
09:06 < nathan7> But it's still not the worst
09:06 < shinaku_> "0" == 0?
09:06 < AAA_awright> >> [0]==0
09:06 < purr> AAA_awright: (boolean) true
09:06 < nathan7> See, this is what's fucking ridiculous
09:06 < AAA_awright> >> 0==[0]
09:06 < shinaku_> So it's treating them both as strings or ints there?
09:06 < purr> AAA_awright: (boolean) true
09:06 < nathan7> >> [0] !== 0
09:06 < purr> nathan7: (boolean) true
09:06 < AAA_awright> Everyone say, "wtfjs!"
09:06 < sinclair> terinjokes: that's awesome mate, and i think node suites in that space, but how is your applications codebase?
09:07 < terinjokes> look at node-inspector, just as good as debugging with gdb
09:07 < sinclair> terinjokes: thanks, i will
09:07 < nathan7> but hey, I can sling around functions and objects and shit, that's what I love most about JS
09:07 < nathan7> I'm not stuck with silly pure OO
09:07 < nathan7> I'm not stuck with silly pure FP
09:07 < nathan7> I have the awesome of both.
09:08 < shinaku_> debugging, did I hear? The cloud9 debugger is awesome.
09:08 < sinclair> nathan7: neither am I, and im rocking C# for a job
09:08 < terinjokes> sinclair: at work node is used more boring, with building my javascript files and running unit tests and stuff
09:08 < sinclair> terinjokes: test driven development is a artform
09:08 < terinjokes> sinclair: i'm not sure what you mean, how's my application code?
09:08 < shinaku_> I TDD in c# for work
09:09 < terinjokes> sinclair: indeed, working on reimplementing the test suite now, big fun project
09:09 < sinclair> also, another thing i hear, when using nodejs for website work, i often here people slapping nginx in front, which is self defeating
09:10 < sinclair> appreciated, node isn't about "building websites", but still, its a pretty big obvious use case for it
09:11 < nathan7> hm
09:11 < nathan7> sinclair: nginx is good at serving static shit
09:11 < nathan7> sinclair: and caching
09:11 < nathan7> sinclair: You don't see people writing web servers in PHP either q=
09:12 < sinclair> nathan7: no, you have apache for that
09:13 < terinjokes> what do you mean, PHP has an embdedded web server!
09:13 < shinaku_> I like lighttpd for static stuff
09:13 < nathan7> I use lighttpd personally
09:13 < shinaku_> but nodejs is totally something else entirely, when I watched a demo so many use cases came to mind
09:13 < terinjokes> all my static sites are lighttpd + cludflare
09:14 < sinclair> this time last year, i was scraping around the web looking for up and coming tech, one year on, im hardly spoiled for choice, 
09:19 < terinjokes> sinclair: node is certainly exciting
09:19 < terinjokes> i dismissed it about a year ago, glad to have reversed that decision
09:20 < nathan7> node.js ninjas data from a large variety of sources around effortlessly and can do processing, lighttpd ninjas HTTP stuff and disk stuff around effortlessly
09:20 < sinclair> terinjokes: yeah, it is quite exciting, but i'm having trouble with it none the less. (too many years handling threads myself, and procedurally programming)
09:21 < terinjokes> different mindset for you: i have similar issues picking up clojure or haskell
09:21 < shinaku_> < terinjokes> sinclair: node is certainly exciting <- this.
09:21 < shinaku_> I've never been so excited with a project before. 
09:22 < shinaku_> I really want to get involved with node
09:22 < terinjokes> and i have no clue what aspect oriented programming is
09:23 < nathan7> ..a what
09:23 < Ralt> javascript paradigm is actually close to scheme (lisp dialect) while being quite imperative (procedural), but also fully object. The syntax is close to java (meh), but the biggest thing about javascript is its prototype matters.
09:23 < nathan7> Prototypal inheritance <3
09:23 < guor> prototypal inheritance is ... :/
09:24 < Ralt> in node.js, Object.create is great :)
09:24  * nathan7 nods
09:24 < shinaku_> I should learn more JS oddities
09:24 < shinaku_> atm I'm coding it mostly like C#, which is probably not the best way to go about it
09:25 < terinjokes> if you're trying to shoehorn classical inheritance into Javascript: :rageface:
09:25 < Ralt> parseInt( '09' ) === 0;
09:25 < nathan7> http://killdream.github.com/blog/2011/10/understanding-javascript-oop/index.html  http://killdream.github.com/blog/2011/11/for-sugary-object-oriented-js/index.html
09:25 < shinaku_> Ralt: stop D:
09:25 < futuresoon> what would be a general strategy for having a microphone input over the web?
09:25 < futuresoon> does node.js help with that?
09:25 < paulwe> Ralt '09' >> 0 == 9 :P
09:26 < Ralt> Array( 15 ).join( +'a' ) + ' batman!';
09:26 < Ralt> put this in your js console ^
09:26 < paulwe> also parseInt('09', 10) == 9
09:26 < Ralt> paulwe : I know, he wanted js oddities :3
09:26 < nathan7> >> Array( 15 ).join( +'a' ) + ' batman!';
09:26 < purr> nathan7: (string) 'NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN batman!'
09:27 < guor> the parseInt issue should be solved once node.js catches up to newer v8
09:27 < Ralt> >> {}+[];
09:27 < purr> Ralt: (number) 0
09:27 < Ralt> >> []+{};
09:27 < purr> Ralt: (string) '[object Object]'
09:27 < nathan7> <3
09:27 < BennyLava> dear lord, aren't we past that yet?
09:27 < BennyLava> how long am I going to see this for
09:27 < Ralt> >> [][[]];
09:27 < purr> Ralt: undefined
09:28 < Ralt> quick way to get undefined ^
09:28 < terinjokes> hey, i'm sure your favorite web browser comes with a javscript console…
09:28 < sinclair> BennyLava: till the js part in nodejs is replace with something else?
09:28 < BennyLava> uh-huh
09:28 < BennyLava> troll on
09:28 < sinclair> ok
09:28 < guor> Ralt: void 0
09:28 < guor> >> void 0
09:28 < purr> guor: undefined
09:28 < Ralt> mine is funnier. :(
09:29 < guor> i found it funnier that there is void 0 at all
09:29 < sinclair> anyone run node on IIS before?
09:29 < shinaku_> Sounds like hell
09:30 < sinclair> shinaku_: but then i would get port sharing, security, url rewriting, compression, caching and logging out of the box
09:30 < sinclair> without having to mess around changing application source code
09:30 < sinclair> (that's a good thing btw)
09:30 < shinaku_> I'm sure there's something in npm for all of those
09:31 < shinaku_> getting a million and one things out of the box isn't really the node.js philiosphy, is it?
09:31  * shinaku_ is a .net guy so I'm not adverse to IIS at all
09:32 < christkv> I assumed iis is thread based not sure how well it plays with an evented system like node
09:32 < sinclair> shinaku_: these are kinda the things you want, IIS is a bit more than just a web server afterall, 
09:34 < christkv> http://tomasz.janczuk.org/2012/06/performance-of-hosting-nodejs.html
09:35 < LouisT> has anyone documented any noticeable differences for speed with node on windows and say linux?
09:39 < rendar> what is iisnode? implementation of node apis by M$?
09:39 < terinjokes> alright gang, I'm heading to bed
09:39 < terinjokes> ttyl
09:39 < sinclair> rendar: stop with the M$ reference
09:40 < sinclair> http://tomasz.janczuk.org/2011/08/hosting-nodejs-applications-in-iis-on.html <-- support for node on iis is actually quite good
09:41 < sinclair> i wonder if this is all hooked up ready to go on Azure sites now
09:41 < graeme_f> sinclair: it is afaik
09:41 < sinclair> graeme_f: i thought node needed to be hosted as a web worker
09:42 < sinclair> in a IIS scenario, (As a Azure Website) node could be hosted side by side
09:42 < graeme_f> dunno, i don't use azure but i thought it was done already.
09:42 < graeme_f> we use iisnode here on our own servers
09:42 < sinclair> which would be cool, then i wouldn't feel so bad about ditching node and going back to MVC
09:42 < graeme_f> feels a bit hacky but it does work
09:43 < graeme_f> one of the nice things about node is you don't have to run it on windows :)
09:43 < sinclair> graeme_f: yes, i know, i actually run linux here
09:44 < sinclair> graeme_f: ok, should i give this a try
09:44 < sinclair> ill try bang up a hello world js up on azure 
09:47 < shinaku_> I've been using cloud9 as an ide for the nice breakpoints/call stack. Are there any other ides with similar features debugging wise?
09:48 < graeme_f> shinaku_: webstorm? i don't use the debugger but i hear it's good.
09:48 < shinaku_> unfortunatly visual studio has c# have spoilt me a bit with how good the debugging tools are
09:49 < shinaku_> Oh, it's by jetbrains, interesting. 
09:49 < graeme_f> shinaku_: I hardly use the debugger in VS now either - tdd ftw :)
09:49 < shinaku_> I use tdd, but it's nice still being able to slap a break point in when things are going wrong
09:53 < sinclair> http://sinclair.azurewebsites.net/hello.js <--- looks promising
09:54 < sinclair> oh, f**king sweet
09:54 < sinclair> process.env.PORT 
09:54 < sinclair> that'll do the trick
09:55 < sinclair> so, Azure hosting for node is pretty sweet, also, i have this running on a MVC application
09:55 < sinclair> side by side
09:55 < sinclair> scripty scripty
09:56 < shinaku_> "Fixin' tests, breakin' hearts"
09:56 < shinaku_> My commit messages are the best
09:56 < shinaku_> "Broke all the things"
09:57 < LouisT> sinclair: did you get it to work?
09:57 < sinclair> yes
09:57 < LouisT> hm
09:57 < sinclair> http://sinclair.azurewebsites.net/hello.js
09:57 < LouisT> just sits on connecting for me
09:57 < sinclair> try a refresh
09:57 < LouisT> same thing
09:57 < sinclair> LouisT: hmm
09:58 < sinclair> LouisT: shouldn't be idling for you
09:59 < sinclair> LouisT: can you access 	http://sinclair.azurewebsites.net ?
09:59 < LouisT> nope
09:59 < sinclair> *shrug
10:00 < sinclair> can't access the host perhaps?
10:00 < sinclair> can you see the domain?
10:01 < LouisT> yes
10:01 < LouisT> wait, what do you mean see the domain?
10:01 < LouisT> you mean dns?
10:02 < sinclair> sure
10:02 < sinclair> that's quite weird, i have just started up the site
10:02 < sinclair> can see it fine here
10:02 < LouisT> no idea
10:03 < sinclair> LouisT: whatever the case, running node on Azure websites works :)
10:03 < sinclair> just fine
10:04 < LouisT> i assumed so, otherwise they wouldn't advertise it as such >.>
10:04 < sinclair> LouisT: i was under the impression that i had to run node as a web worker
10:04 < LouisT> oh
10:05 < rendar> sinclair: sorry, i'll stop, but why? is that offensive?
10:05 < sinclair> LouisT: i literally have node running in the same directory as my mvc application
10:05 < sinclair> LouisT: FTP copy of hello.js, and a small update to the webServer / handlers web.config element
10:06 < sinclair> rendar: im just tired of the microsoft bashing is all
10:06 < rendar> sinclair: ok, sorry, i was saying what is the difference in that sheet about issnode and node.exe?
10:06 < sinclair> rendar: despite popular opinion, microsoft produce some of the best development technologies around
10:07 < rendar> sinclair: yeah, but i think so..i agree
10:07 < sinclair> rendar: iisnode appears to be a ISAPI module that binds node to IIS
10:07 < rendar> hmm i see
10:08 < rendar> so why this big disparity in some tests?
10:08 < sinclair> rendar: this is a really really really good thing, you get all the IIS process management, security, compression, caching configuration stuff for IIS to work with node. thats awesome.
10:08 < rendar> yeah
10:08 < sinclair> rendar: don't know
10:09 < sinclair> rendar: im just happy it runs, im not so concerned about performance of it at this stage.
10:09 < sinclair> as it stands, performance is well in exceed of anything im liable to hit in the next year or so
10:09 < graeme_f> sinclair: it's far from my area of expertese, but wouldn't you rather use node to do all that and gain portability rather than depend on iis?
10:09 < rendar> sinclair: all of those IIS benefits are completely trasnaprent to the node.exe, right? i mean, node.exe just run, and the IIS server will think about process management etc by itself..correct?
10:10 < sinclair> graeme_f: IIS makes things portable
10:10 < BennyLava> rofl
10:10 < graeme_f> sinclair: so i can host it on linux? :S
10:10 < BennyLava> he trolls well
10:10 < sinclair> graeme_f: yup
10:10 < graeme_f> sinclair: that's amazeballs!
10:11 < sinclair> graeme_f: i see IIS less as a web server and more of a process management / hosting environment
10:11 < sinclair> it just happens to be use as a web server most commonly
10:11 < mon> somebody from $MS?:)
10:12 < sinclair> mon: the $ reference is really annoying 
10:14 < graeme_f> yeah, that's so nineties! now we pick on APPL€
10:15 < sinclair> graeme_f: IIS is just another way to "double click" an application to start it. 
10:15 < graeme_f> sinclair: what abput all the security, compression, caching configuration stuff?
10:16 < sinclair> those are bolt on modules
10:16 < graeme_f> so you'd use node alternatives to get portability?
10:16 < graeme_f> and not actually use iis for that?
10:17 < sinclair> graeme_f: these things are at the IIS level, not the application level
10:17 < graeme_f> i just don't see how using iis makes things portable ;)
10:17 < sinclair> graeme_f: well, its not plug and play
10:17 < BennyLava> learn to spot a troll please
10:19 < graeme_f> BennyLava: sorry, i'm trying to be more cynical but it's tough :)
10:21 < sinclair> graeme_f: http://www.toptensoftware.com/Articles/6/Setting-up-a-Ubuntu-Apache-MySQL-Mono-ASP-NET-MVC-2-Development-Server
10:21 < sinclair> BennyLava: whose trolling, you?
10:22 < sinclair> graeme_f: at the end of the day, you could run node native, or in iisnode
10:22 < sinclair> personally, running node as a iis process makes sense (as it would on any other configurable environment)
10:23 < sinclair> graeme_f: noting, i haven't explored all the command line options for node, i doubt it would be as flexible as iis
10:30 < graeme_f> sinclair: ootb no, but there are many modules that do the stuff you are talking about.
10:31 < sinclair> sorry, ootb?
10:31 < Oddman> "i doubt it would be as flexible as iis"
10:31 < Oddman> that's really quite funny
10:31 < Oddman> considering that iis is a webserver
10:31 < Oddman> and node is a platform
10:31 < sinclair> Oddman: by that, i simply meant, being able to configure what you want, rather than code it
10:31 < Oddman> that alone should give you an indication as to how flexible node is compared with iis ;)
10:32 < Oddman> yeah but you're comparing two totally different things.
10:32 < sinclair> Oddman: same concept tho
10:32 < mikrowelt> Guys if im making multi chat room app how should notice users when some join and some one leaves the room? In a lot of tutorial they just send an "update chat list" function which resend users list in the room... what im doing is sending just 1 username that leaves or joins room to all sockets.... plz help guys what is the best choice here?
10:33 < sinclair> Oddman: configuration over programmatic changes is a good thing, you don't want system admins getting in there tweaking code on a production environment right?
10:33 < Oddman> that's debatable, sinclair 
10:33 < sinclair> not really
10:33 < Oddman> configuration means more complexity
10:33 < Oddman> of course it is, i'm debating it with you now =\
10:34 < sinclair> Internet Information Services isn't complicated, however, i do agree with you to some degree
10:34 < sinclair> Oddman: in fact, there have been instances i have introduced scripting solutions to cater to "non configurable things"
10:35 < sinclair> Oddman: 99% of the time, so long as you weren't doing anything weird, configs win out everytime
10:36 < Oddman> if it's already catered for, sure. But configurability still introduces complexity at the software layer. Again, going back to my point before - comparing IIS to node is a silly comparison
10:36 < sinclair> Oddman: see, i wasn't
10:36 < sinclair> Oddman: i was discussing hosting node with iisnode vs running node natively
10:37 < Oddman> ah I see, my mistake
10:37 < Oddman> in that context then
10:37 < Oddman> I would argue that native is far better than running it via iis
10:37 < Oddman> each to their own, however
10:37 < sinclair> just for the sake of argument :)
10:37 < sinclair> why?
10:38 < Oddman> well you're skipping a layer, for starters
10:38 < Oddman> I also note that you linked a .NET via ubuntu earlier
10:38 < BennyLava> no no
10:38 < Oddman> that notion scares me. haha
10:38 < BennyLava> using iis makes it more portable
10:38 < BennyLava> didn't you know?
10:38 < Oddman> :P
10:38 < Oddman> sarcasm reader just went way off the charts...
10:38 < Oddman> thank god I was running that natively :P
10:39 < sinclair> Oddman: me too, i wouldn't bother porting to linux anyway
10:39 < BennyLava> I like me some sarcasm
10:39 < Oddman> heh
10:39 < sinclair> Oddman: in terms of "skipping" a layer, what layer are you referring to?
10:39 < BennyLava> oh and.. we have a massively successful troll indahouse
10:39 < Oddman> sinclair, tbh I don't know why you'd bother with node on windows, but that's just me
10:39 < BennyLava> congrats sinclair
10:39 < BennyLava> I'm impressed
10:40 < BennyLava> it's rare to see a troll who knows his stuff nowadays
10:40 < Oddman> BennyLava, apart from talking about IIS I don't see sinclair as trolling, but he can correct me if I'm wrong :P
10:40 < BennyLava> iis makes it more portable weeeeee
10:40 < BennyLava> no you're right, no trolling took place
10:40 < BennyLava> my bad
10:41  * BennyLava slaps himself
10:41 < sinclair> BennyLava: my reference was with regard to abstracting the very layer Oddman is about to tell me about
10:41 < shinaku_> Windows has its uses.
10:41 < Oddman> BennyLava, a point of view doesn't make him a troll
10:41 < Oddman> sinclair, the layer I'm talking about - is IIS.
10:41 < BennyLava> Oddman: no, trolling makes him a troll
10:42 < sinclair> Oddman: from what i've seen tho, there is little or no coupling between node and iisnode
10:42 < sinclair> other than... process.env.PORT
10:42 < BennyLava> guys
10:42 < BennyLava> did y'all know
10:42 < sinclair> which is hardly a coupling
10:42 < BennyLava> that running node on iss makes it more protable??
10:42 < Oddman> BennyLava, quit it
10:42 < BennyLava> Oddman: or else?
10:43 < Oddman> rofl
10:43 < Oddman> what are you, 2?
10:43 < BennyLava> no, what are YOU?
10:43 < sinclair> BennyLava: shush already
10:43 < Oddman> I see you as the only troll here.
10:43  * BennyLava hugs Oddman
10:43 < Oddman> lol
10:43 < Oddman> ewwww
10:43 < Oddman> troll germs!
10:43 < BennyLava> can someone put 'iis makes node more portable' in the topic please?
10:43 < Oddman> haha
10:43 <@Nexxy> ITC: trolls trolling trolls
10:44 < BennyLava> Nexxy!
10:44 < BennyLava> Update topic pls
10:44 <@Nexxy> noplz
10:44 < BennyLava> ysplz
10:44 < BennyLava> doeeeeeet
10:44 < BennyLava> we're talking BIG news here
10:44 <@Nexxy> Y U so ded horse kickey
10:44 < BennyLava> I'm expecting a blog post from sinclair detailing this revelation any minute now
10:45 < sinclair> BennyLava: i didn't say that, stop trying to drag me into your dumb argument
10:45 <@Nexxy> it's ok that sinclair likes .net/CLR stuff
10:45 <@Nexxy> you don't have to hammer away at the things they say
10:46 < BennyLava> sinclair • graeme_f: IIS makes things portable
10:46 < sinclair> BennyLava: the reference was to do with .NET application code, also, given that there is next to no coupling between node and iisnode, it might as well be true enough
10:47 < BennyLava> you can't post something like that and NOT expect ridicule - but I'm done ;)
10:47 < Oddman> finally.
10:47 < BennyLava> yeah yeah, blah blah sinclair
10:47 < BennyLava> zzzzzz
10:47 < Oddman> sinclair, going back to our discussion
10:47 < Oddman> it's not about coupling
10:47 < Oddman> it's the fact that you're running node via another layer - in this case a web server
10:47 < BennyLava> coupling - great sitcom
10:47 < BennyLava> the uk version anyway
10:48 < sinclair> Oddman: that layer does offer quite a bit tho
10:49 < sinclair> Oddman: rather than manage these things at the application layer, why not defer it off to a web host?
10:49 < Oddman> a few reasons come to mind, mostly to do with performance
10:50 < Oddman> that plus I'm really not an IIS fan ;)
10:50 < Oddman> I've never liked the windows approach to development
10:50 < sinclair> Oddman: yeah, will be interesting to see how performance goes with iisnode, 
10:50 < BennyLava> you don't like vendor lock-in? WHAT
10:51 < Oddman> ignored, BennyLava 
10:51 < sinclair> Oddman: the only thing i don't like about Microsoft dev is insane licensing cost
10:51  * BennyLava hugs Oddman
10:51 < Oddman> sinclair, the complete closed source environment surrounding it means there isn't much free stuff you can work from, compared with the OS community
10:51 < sinclair> Oddman: given that i can run node on azure, (really cool btw), i wonder about nosql solutions 
10:51 < Oddman> lol
10:52 < sinclair> Oddman: i think the view point that there isn't much of a OS community for .NET is a old one.
10:52 < sinclair> Oddman: its gotten....better
10:53 < Oddman> not really (in regards to it being old). You said it yourself - licensing costs. Developers releasing stuff for free when they have to pay to work with what they have is a stupid move.
10:53 < sinclair> well, server licensing, sql server licensing etc, these can get expensive, 
10:54 < sinclair> but, microsoft is offering free options
10:54 < sinclair> like the express stuff, its quite good
10:55 < sinclair> Oddman: also, i see MS putting a lot more stuff on Github nowadays
10:55 < malditogeek> Hi, what's the best way to debug an unresponsive node process? it's consuming 100% of the CPU but strace shows no activity…. what can I do to debug this?
10:58 < sinclair> Oddman: http://aspnetwebstack.codeplex.com/ 
10:58 < sinclair> Oddman: MS have put the entire MVC platform up for check out ^
10:59 < sinclair> (not something you would have seen 10 years ago)
10:59 < BennyLava> mvc, fuck yeah
10:59 < sinclair> BennyLava: kinda annoying yeah?
10:59 < sinclair> BennyLava: are you trying to spur on a response? or are you mad you aint getting one?
11:00 < BennyLava> dude I'm *so* mad
11:00 < aandy> i aint even mad
11:00 < gotwig> jo folks
11:01  * sinclair wonders if Azure will let him open up random ports
11:01 < gotwig> I want to do XMLHttpRequest's with nodeJS, I found  https://github.com/driverdan/node-XMLHttpRequest . Do you know about a better solution? I want to parse stuff with this nodeJS service, and than provide an JSON API so another javascript service can request it from the nodeJS service
11:02 < deoxxa> gotwig: RTFM, friend
11:02 < aandy> sinclair: don't you have access to security "groups" in the api?
11:02 < gotwig> * a local running normal javascript service
11:02 < gotwig> deoxxa: lol^^?
11:02 < deoxxa> gotwig: http://nodejs.org/docs/latest/api/all.html
11:02 < sinclair> aandy: which api?
11:02 < gotwig> deoxxa: I asked if there is a better sollution out there, e.g xmlhttprequest level 2 is not supported by this xmlhttprequest module
11:02 < deoxxa> gotwig: yes, there is a better solution, and its secrets are kept within the documentation
11:03 < aandy> gotwig: at least use http.get then, i assume you need an async http request
11:03 < deoxxa> aandy: aw, you've ruined him now. he won't read the docs.
11:03 < gotwig> meeeh
11:03 < aandy> sinclair: the azure api http://msdn.microsoft.com/en-us/library/windowsazure/ff800682.aspx
11:03 < aandy> deoxxa: no i haven't. he still needs to read them in order to use http.get :)
11:04 < deoxxa> aandy: good point!
11:04 <@Nexxy> oh man is it a full moon or something?
11:04 <@Nexxy> why is everyone so fucking bitchy?
11:04 < deoxxa> Nexxy: nope, you still look human
11:04 < deoxxa> HA
11:04 < aandy> burn
11:04 < gotwig> When I get this stuff, can I access it via DOM ?
11:04 < deoxxa> (you're a werewolf)
11:04 <@Nexxy> deoxxa, give me time
11:04 < sinclair> aandy: i don't really use any Azure API's
11:04 < sinclair> aandy: outside of the Azure Service Bus
11:04 < deoxxa> gotwig: by reading the documentation there, you'll be able to answer that question on your own :D
11:05 < aandy> gotwig: i think perhabs you're thinking about this wrong. node is for server side scripting, you seem to think in browser terms. perhabs you should check out one of the excellent intro videos on nodejs.org
11:05 < sinclair> aandy: this was with regards to getting nodejs to open up random ports on Azure
11:05 < sinclair> aandy: :)
11:05 < deoxxa> gotwig: i'm not just being a jerk here. the docs are quite good and it'll be quicker for you to read them than to try to formulate questions around what you want to know.
11:05 < aandy> sinclair: yeah, but i'd expect you could do that through the azure rest api
11:05 < gotwig> aandy: yeah, I want to use it for providing an API, what wrong with it? I saw tut's out there
11:05 <@Nexxy> notice he says not *just* being a jerk
11:06 < aandy> i was asking not telling, as I'm wondering myself :) was looking into azure for a small project the other day
11:06 < sinclair> aandy: probably not, ill give it a go tho :)
11:06 < gotwig> Do you know Nodester?
11:06 < deoxxa> Nexxy: it's equal parts of snark and help
11:06 < deoxxa> Nexxy: arguably the best combination
11:06 < deoxxa> Nexxy: as the great philosopher mr slick rick said, "treat 'em like a prostitute"
11:07  * Nexxy blinks.
11:07 < deoxxa> http://www.youtube.com/watch?v=6hsOSC6RVhk
11:07 < aandy> deoxxa: as a prostitute i take great offence
11:07 < gotwig> Do you know if node.JS can suit this case good?
11:08 < deoxxa> aandy: i assure you, slick rick means no harm
11:09 < deoxxa> gotwig: providing an api is an incredibly broadly defined task. the answer is "maybe".
11:09 < aandy> sinclair: you have to define the ports in a config format, but other than that's it's "kind of REST'ish": http://msdn.microsoft.com/en-us/library/windowsazure/jj157181.aspx
11:09 < gotwig> JSON API..
11:09 < deoxxa> gotwig: but srsly, read dem docs son
11:10 < gotwig> but which ones >.< I already know how to get my stuff done in *normal* clientside javascript
11:11 < deoxxa> gotwig: http://nodejs.org/docs/latest/api/all.html << these ones, the official node.js docs
11:11 <@Nexxy>  /win 11
11:11 <@Nexxy> err
11:11 < BennyLava> /fail
11:11 < aandy> at least you use irssi
11:15 < sinclair> aandy: not running a webrole here :(
11:16 < gotwig> what about  jsdom for parsing into a DOM?
11:27  * sinclair achieved something today
11:27 < sinclair> yay \o/
11:29 < gotwig> Tiramisu FTW
11:29 < gotwig> I love nodeJS D:
11:35 < ashnur> wtf
11:37 < aandy> a bit off topic: i know it's a gray area, but with crawling (saving 3 pieces of information that are widely public, and not "authored" by any particular source), i'd be able to have an okay defence against cease and desist (not hosted in the US) or worse legal action, when i'm using different sources to get the facts, right? say i have 3 sources where the info is available, randomly checking one or the other should be "ok"? any thoughts?
11:40 < Oddman> aandy, not really a gray area at all
11:40 < Oddman> if you're not creating your own content, you can get in trouble
11:40 < deoxxa> depends where you are
11:40 < Oddman> we have advised clients against this numerous times
11:40 < deoxxa> that's perfectly legal in australia, as long as you don't breach the terms of use of the site you're accessing
11:40 < aandy> Oddman: okay, that makes sense
11:40 < deoxxa> information can't be copyrighted, presentation can
11:41 < Oddman> deoxxa, that's not entirely true. There's a reason why newspapers highlight where the source was from on their websites.
11:41 < aandy> deoxxa: in most cases you will be, even if your terms cover more than just their own content
11:41 < Oddman> ie. First posted in the Daily Telegraph.etc.
11:41 < Oddman> aandy, if you can - try setting up partnerships
11:41 < Oddman> ultimately though you should talk to a lawyer who specializes in copyright :)
11:42 < deoxxa> Oddman: that's presentation
11:42 < gotwig> I think I can get in trouble in what I wanna do :D
11:42 < deoxxa> Oddman: if you report "the temperature is 32 degrees", that's information
11:42 < Oddman> deoxxa, he's crawling sites for content - I don't know how "unique" it will end up on his site
11:43 < aandy> Oddman: i have one source where I've gotten historical data for free, and I wouldn't mind aggregating the data just like my sources are doing. So i'll keep digging for the "internal" sources
11:43 < deoxxa> Oddman: i used to run a website that operated on data scraped from a bunch of websites, but it was purely data
11:43 < aandy> Oddman: not unique at all. it's very similar to "temperature is 32 degrees" (without the phrasing of course)
11:44 < deoxxa> Oddman: i like to think i know what i'm talking about when it comes to this particular facet of australian copyright law. it might not be so useful if you're dealing with something that isn't constrained to australia though ;)
11:44 < aandy> me having the data is not a legal issue. what i'm concerned about is if one source suddently says "we sue because you've collected some of it from our site"
11:46 < aandy> but i guess then it's more about "is TOS enforceable by law", which seems to be a case much more difficult for them to win
11:46 < aandy> not to be a wiseguy, i'm just speculating
11:47 < deoxxa> yeah, that bit's a little harder
11:47 < aandy> seen from their perspective, it doesn't matter to them that i could've gotten it from anywhere. what matters is that i got it from them. their load, their electrical bill for running a website etc. :)
11:48 < aandy> and perhabs worse, that i'm not clicking on all those stupid banners i wouldn't click anyway!! lost revenue on "doctors hate him, click to see why". 
11:48 < aandy> a bad day for humanity all around
11:49 < aandy> Oddman and deoxxa, thanks for letting me pick your brain about it :)
11:49 < deoxxa> good luck!
11:49 < deoxxa> scraping is fun
11:50 < Oddman> especially in node :P
11:50 < Oddman> so easy.
11:50 < deoxxa> request + cheerio = wheeeeee
11:50 < aandy> well sure, but i haven't done scraping yet actually. it's still build manually and is still a personal, not public, db. i'm just thinking about possibilities (or rather lack of) :)
11:50 < CestSebastian> hey, looking for a way to implement models in node, can you point me in the right direction? Maybe a good tutorial?
11:51 < Bren_> what is a model?
11:52 < aandy> a model as in MVC or?
11:52 < CestSebastian> yes, a model as in the M in MVC
11:52 < aandy> "model" is usually when you do: var my_obj = new Animal({ species: "Dog" });
11:52 < aandy> :D
11:52 < gotwig> how can I use getElementsByClassName in nodeJS with domjs?
11:53 < Bren_> gotwig, do you really want that or might you be interested in even more DOM abstraction?
11:54 < Bren_> -even
11:54 < gotwig> Bren_: don't get what ya mean :D
11:55 < gotwig> nodecomposite seems to offer that
11:55 < Bren_> gotwig, it depents on what you want to do with that list of elements. e.g. if you plan to use it for templating, i could introduce you to nice templating systems
11:55 < gotwig> https://npmjs.org/package/nodecomposite
11:55 < gotwig> Bren_: I want to get the src of these entries in the array
11:56 < gotwig> a loop should be enough
11:56 < gotwig> "Set operations on nodeLists are pretty cool. There is no small library that allows you to do this without adding a DOM abstraction or a lot of bloat. "
11:57 < Bren_> well ok, if "small" is an important issue, a selfmade loop construct seems to be the right way.
11:58 < gotwig> Bren_: well speed is very important for this, becouse I want to offer the informations from these src's later via JSON
11:59 < Bren_> depending on your document, a regexp might suffice and be even faster than domjs's parsing
12:02 < gotwig> RegEXP is the wrong way I guess...
12:04 < aandy> gotwig: why?
12:04 < gotwig> people always say that ;O
12:04 < aandy> good argument..
12:04 < gotwig> I first try to do it this way
12:05 < aandy> these people know your use case? context is everything
12:05 < gotwig> but getElementsByClassName seems not to work somehow
12:05 < gotwig> wanna take a look at my code :X?
12:05 < Bren_> well generlly yes, because the majority of "programmers" out there use regexps mostly for things where they aren't suited. however, in this case, domjs might be even less suited.
12:05 < plato> dom exists, right?
12:05 < plato> you're calling getElementsByClassName after dom is loaded?
12:06 < gotwig> yip, just take a look
12:06 < Bren_> i'd like to see that code. also, an example page, so i can compare a regexp approch
12:07 < Bren_> s/page/source document/
12:07 < gotwig> something like that : http://paste.ubuntu.com/1253775/
12:08 < gotwig> I tried to use somehow the normal DOM javascript for browser clients
12:11 < Bren_> oh wow you're also loading jQuery? if there aren't some very good other reasons to load jQuery, a RegExp will be a LOT more effective.
12:11 < Bren_> *efficient
12:11 < gotwig> Bren_: meeh :/
12:11 < gotwig> But I have to work a lot more on a RegEXP..
12:12 < Bren_> i'll make you a RegExp. what className?
12:12 < gotwig> there are different ones
12:12 < gotwig> you see in the code, I try to get the info's from each recipe
12:12 < gotwig> for the begginning, recipe-img 
12:12 < gotwig> it src has the image uri of the recipe
12:13 < Bren_> ok... so you need the image, the title and the URI for each?
12:13 < gotwig> and rating, just try to get all info's :D
12:13 < gotwig> there are three different sources , you see, but they are all having the same classes, etc.
12:14 < Bren_> and of course you have permission to scrape that data, right? because otherwise i wasn't allowed to help you with this and we'd have to make up an example page.
12:15 < gotwig> Bren_: I already did that before, and I wrote them a mail about them, etc.
12:15 < gotwig> *that
12:15 < gotwig> they know about it
12:15 < Bren_> ok
12:16 < gotwig> Bren_: are you going to do it with your brain xD?
12:16 < gotwig> the regular expr.
12:16 < aandy> "they know about it" != "it's ok" :P
12:17 < gotwig> I also wrote other recipe companies. A few ones even helped me ;P
12:17 < gotwig> I did such stuff before with Python LXML
12:18 < aandy> that's still not an answer. you seem to be dancing around the question
12:18 < gotwig> ok, wait.. I wanna search for a good answer ^^
12:19 < Bren_> it might be easier tp just replace jQuery with a NodeJS compatible DOM abstraction library, like YUI.
12:19 < Bren_> it's not as effective as a regexp but i don't have to care about helping in a copyright violation ;)
12:20 < gotwig> Bren_: Ok, I know about another recipe site, that 100% accepts it ;P fine?
12:20 < gotwig> http://www.recipefy.com/en/all/dishes/all/explore/latest
12:20 < aandy> Bren_: how does that change when using regex?
12:20 < Bren_> ok, might take a while
12:21 < gotwig> I am still waiting for a *good* reply by chefkoch.de
12:21 < gotwig> They don't said anywhere that you are not allowed to do it
12:21 < gotwig> they just say, not supported, etc.
12:21 < aandy> gotwig: what is it you're trying to build btw?
12:22 < gotwig> aandy: in the end :D 
12:22 < gotwig> for now, I try to offer an API for searching very many recipe sites
12:22 < gotwig> this API, I am going to use for my own APP, any I am probably going to release it under an open source license..
12:22 < gotwig> *and
12:24 < gotwig> and it seems there is no copyright stuff about such "recipes" in Germany
12:24 < gotwig> I am going to call the author names, etc.
12:25 < aandy> copyright might be on a user basis
12:25 < aandy> that said, and i'm not a lawyer, intent usually plays the bigger role
12:26 < gotwig> its ok with recipefy, trust me ;P
12:26 < gotwig> but not really with chefkoch.de
12:26  * gotwig gotta go eating
12:26 < gotwig> thank you for your great help
12:26 < aandy> so sell them the idea that it's an aggregated search engine
12:26 < aandy> hehe, go eat.. nice timing ;)
12:30 < Bren_> be warned. even if there's weak copyright for single receipes, there's the "Datenbankwerk" for such collections
12:37 < mikrowelt> Guys um having problem with async can someone help me plz?
12:37 < aandy> Bren_: do you happen to know about press releases? reading http://en.wikipedia.org/wiki/Wikipedia:FAQ/Copyright says without explicit permission can't be reproduced, but doesn't specifically mention derivative work. here i'm thinking more about citing though (as in, Source: Company X Press Release # y)
12:39 < Bren_> aandy, dunno, ianal
12:39 < aandy> hehe
12:40 < nathan7> mikrowelt: I bet someone can!
12:40 < mikrowelt> nathan7: thats a good point )
12:40 < Bren_> gotwig, i failed to write a regexp example within my time limit for free support. i could extend it if you pledge to make your app open source. or you could try with YUI instead of jQuery.
12:41 < nathan7> mikrowelt: Maybe you could even tell us what eactly you need help with!
12:42 < aandy> Bren_: just found a copyright notice which gives permission to use, so I'm scott free (at least while i'm building) :) so nvm
12:42 < mikrowelt> nathan7: http://pastebin.com/ktn39CvF look at this function... im using async.... and when i do for each... the callback function doesnt work ((
12:42 < mikrowelt> nathan7: nothing happens it simple dont run.... i use var q for the async lub
12:42 < aandy> i'm even allowed to use photos if i wanted to. neat source :)
12:42 < mikrowelt> lib
12:42 < nathan7> mikrowelt: where are you calling the callback?
12:43 < nathan7> mikrowelt: I don't even see you taking the callback
12:43 < mikrowelt> nathan7: q.async(arr, dosomthing, callback)
12:43 < mikrowelt> isnt that right?
12:44 < mikrowelt> nathan7: function(err) is the callback
12:44  * gotwig is back
12:45 < gotwig> I have already informed them
12:46 < gotwig> they can tell me instantly, shtu down or we sue you ;P
12:46 < gotwig> *shut
12:46 < gotwig> Bren_: Do you have results ;P?
12:47 < Bren_> gotwig, yes, but due to the time limit they are no longer available as public domain, only as free software or commercially
12:47 < gotwig> ?
12:48 < gotwig> Bren_: How do you build these RegEXP's ?
12:49 < mikrowelt> nathan7:  what u think mate? i was looking throu the source code of a sync
12:49 < mikrowelt> https://github.com/caolan/async/blob/master/lib/async.js
12:49 < mikrowelt> at 79
12:49 < mikrowelt> it should workd
12:49 < mikrowelt> wtf(((
12:51 < mikrowelt> guyzz plz help me.... why this doesnt work
12:51 < mikrowelt> source code is ok i checked i should do the trick but it doesnt
12:51 < mikrowelt> no errors no nothing
12:51 < Bren_> gotwig, i write regexps with my hands, transforming perl magic into unreadable /[^#]*%+/
12:52 < gotwig> Bren_: :-|
12:53 < gotwig> Bren_: Can I use a tool to automate that?
12:54 < nathan7> mikrowelt: dude
12:54 < mikrowelt> nathan7: yeah mate.. sup? ;)
12:54 < nathan7> mikrowelt: you need to have async(function(item,callback){ callback(); },
12:55 < nathan7> mikrowelt: there is no magic way that async inserts a callback when your iterator is done
12:55 < mikrowelt> ok let me try TY alot <3
12:55 < mikrowelt> nathan7: w8 did you see the source?
12:55 < nathan7> sorry for the late reply, my laptop's battery died halfway and I had to leave for some irl magic
12:56 < nathan7> mikrowelt: source of?
12:56 < mikrowelt> nathan7: async
12:56 < nathan7>         q.forEach(clients, function(client){
12:57 < nathan7> a moment
12:57 < mikrowelt> i mean async lib
12:57 < gotwig> Bren_: any idea :-) ?
12:57 < mikrowelt> they have 3 args
12:57 < nathan7> mikrowelt: yes
12:57 < mikrowelt> array, action, callback
12:57 < nathan7> mikrowelt: but your iterator (what you call 'action') needs to take a callback
12:57 < nathan7> mikrowelt: async cannot magically know if your 'action' is done
12:58 < Bren_> gotwig, as of now the ideas are use YUI, pledge your app will be open source, or buy the scaper commercially
12:58 < mikrowelt> hmmm
12:58 < mikrowelt> u confused me )
12:58 < gotwig> Bren_: ^^ you know I am usually an opensource guy
12:58 < gotwig> but I need some money :/
12:58 < nathan7> mikrowelt: from my code: http://sprunge.us/LfgX
12:59 < gotwig> Bren_: but you can combine that, so ok. It will be opensource.
12:59 < mikrowelt> ok i got it now
12:59 < mikrowelt> TY mate
12:59 < nathan7> C=
12:59 < gotwig> I am e.g ubuntu member :D
12:59 < nathan7> Go forth, and enjoy the wonders of async!
12:59 < nathan7> also, damn, awesome
12:59 < nathan7> I completely missed forEachLimit
13:00 < gotwig> Bren_: do you want to take a look at my last recipe search project for Ubuntu? Made with python3 and lxml
13:00 < jrajav> Why does everyone insist on hiding away dirty, DIRTY asynchronous functions and pretending they don't exist?
13:00 < jrajav> Name your functions, write modular code, be better.
13:01 < nathan7> dude
13:01 < nathan7> Look at async
13:01 < Bren_> gotwig, http://paste.ohai.su/1517/
13:01 < gotwig> Bren_: do you think regexp will be the fastest choice?
13:02 < nathan7> I prefer to show what is relevant
13:02 < nathan7> instead of re-expressing the same implementation details
13:02 < nathan7> if I type the same pattern a thousand times
13:02 < nathan7> and have to explain every single time
13:02 < Bren_> gotwig, no. the second fastest. the fastest would be to write a NodeJS module which does it in C.
13:02 < nathan7> vs using async and having something like forEachLimit
13:03 < gotwig> Bren_: but it looks ugly :D
13:03 < gotwig> at least to m,e
13:03 < nathan7> do someFunction for each element of arr, n in parallel, call doneFunction when done: async.forEachLimit(arr,n,someFunction,doneFunction);
13:03 < aandy> that's one way to compliment someone for writing a scraper for them
13:04 < gotwig> aandy: :D
13:04 < Bren_> gotwig, yeah. RegExps tend to do that. if you'd like to avoid that, use the NodeJS version of YUI.
13:05 < aandy> it's not that ugly
13:05 < gotwig> Bren_: why have you used fs ?
13:05 < aandy> and if you're superficial like that, perhabs you should try coffee, lol :)
13:06 < aandy> gotwig: abstraction. you can substitute for a http async call and leave parse as the callback
13:06 < Bren_> gotwig, because i didn't want to include sample source HTML in my script directly
13:06 < pachet> *if you're superficial like that perhaps you should try ruby
13:06 < Bren_> and neither wanted to use webserver resources unnecessarily
13:07 < aandy> first rule of scrape club: save your target locally while debugging so you don't spam and waste bw
13:08 < Bren_> well if he'd be in the scrape club, he'd not be afraid of regexps anyway ;D
13:08 < aandy> i love regex :) maybe that's why i don't see the "ugly" hehe
13:08 < gotwig> how to convert lxml expressions into regular expressions :D ?
13:09 < aandy> dude come on
13:09 < Bren_> it would be ugly if i had ironed out the jslint warnings about [^...]
13:09 < Bren_> gotwig, impossible due to complexity
13:09 < Bren_> regexps can only match stack automatons
13:12 < aandy> Bren_: out of curiosity, is db.length faster than a db.push?
13:12 < Bren_> aandy, no. it's just an MSIE habit
13:13 < aandy> ok :)
13:18 < gotwig> Bren_: what is the best way, to get the website into that function?
13:19 < Bren_> gotwig, view the source in MSIE4, tar it, put it on pigeons, unpack with common lisp. ;)
13:19 < aandy> gotwig: we already told you hours ago. http.get({..}, function(res) { data = ''; res.on('data', function(d) { data += d; }; res.on('end', function() { parse(data) } });
13:20 < Bren_> (npm install commonlisp before)
13:21 < gotwig> well^^
13:21 < aandy> if we you as fast as possible you could do a parsing of your data on the data event and emit if you have complete <div>'s that you can scrape, but you'd have to modify Bren_'s scrape function
13:21 < aandy> or actually, no, you wouldn't have to, sorry
13:21 < Bren_> he'd have to adapt the split
13:22 < gotwig> server side javascript is way more complicated than your mother's javascript ;P
13:22 < superjoe> gotwig, it doesn't have to be.
13:22 < aandy> not if he cleans out the buffer
13:22 < superjoe> if it is, you're doing abstraction wrong
13:22 < Bren_> just don't recommend Fortran courses to your mother.
13:23 < gotwig> where do I have to embed the url string in this http.get thing??
13:23 < gotwig> It seems in {..} right?
13:23 < Bren_> gotwig, in the RTFM parameter
13:23 < superjoe> gotwig, read the docs
13:23 < aandy> gotwig: you already got the docs, PLEASE read them for fucks sake. it's 5 lines 
13:24 < Bren_> what'd you expect from someone who imported jQuery into domjs because it seemed better than regexps.
13:24 < aandy> effort
13:24 < aandy> ;)
13:24 < Bren_> optimist.
13:24 < gotwig> hey, it was example code from domJS ;P
13:25 < Bren_> ewww.
13:25 < Bren_> so btw, is there a native implementation of some DOM yet?
13:25 < Bren_> with NodeJS bindings of course
13:25 < superjoe> ...why?
13:26 < aandy> well, there is for xml i think
13:27  * gotwig should kill hisself
13:27 < aandy> oh, you
13:29 < gotwig> so I now have this thing in http
13:29 < hillct> that's not a good way to start the morning. Tends to screw up the rest of your day
13:29 < aandy> gotwig: not to rile you up, but why did you move from python to node for scraping purposes?
13:29 < gotwig> aandy: well, there are not much python servers out today
13:30 < gotwig> *many ;D
13:30 < aandy> i'm asking because it's two very different languages by heart. one is async by heart, the other is sync by heart. both can be changed in either, but that's kind of like making an android-looking app in iOS
13:30 < aandy> gotwig: there isn't? tell that to two of my webservers
13:30 < aandy> tell that to pinterest
13:30 < gotwig> ;O
13:30 < aandy> tornado, django
13:30 < aandy> is it the same "people" who said regex is bad?
13:31 < aandy> you need to get your info from more reliable sources ;)
13:31 < gotwig> so how do I get the source of the URL? Its in http I think
13:31 < gotwig> what is the property
13:31 < gotwig> .toString does not seem to work
13:31 < gotwig> undefined for me
13:31 < aandy> the one i said for three times. .get
13:31 < aandy> .toString on what?
13:32 < gotwig> http
13:32 < aandy> you're calling http.toString() ?
13:32 < gotwig> aandy: he's already "got" it
13:32 < aandy> he?
13:32 < gotwig> aandy: yes
13:32 < aandy> what
13:32 < gotwig> the http object
13:32 < aandy> http is the "library", it's not the request object
13:33 < aandy> response object*
13:33 < gotwig> .. but I made a variable that got the attributes of it.. at the begging
13:33 < gotwig> *beggining
13:33 < gotwig> how do I get the HTML code out of http object
13:33 < aandy> and the response object doesn't have toString (in the way you want). which is why i showed you how to aggregate it to a "data" variable (as the response is a stream)
13:34 < aandy> i showed you that already. my oneline from 15 minutes ago
13:34 < jaseemabid> What exactly did node do over v8? Can somebody point me to a doc or something? v8 can evaluate a string of js. Thats what happens when i do node file.js. Can somebody help? 
13:34 < gotwig> aandy: I still don't get it, sry -..-
13:35 < aandy> if you mean the resposne code (200 OK, 404 not found) then it's res.statusCode
13:35 < superjoe> jaseemabid, node.js is merely an API. See http://nodejs.org/api/
13:35 < gotwig> aandy: no, just the "data"
13:35 < aandy> that's a stream, so you need to listen for the response's data and end events, and aggregate the data from that
13:35 < superjoe> jslatts, but it's a pretty damn good API at that
13:35 < jaseemabid> superjoe, So a set of libraries? 
13:36 < superjoe> sorry jslatts I meant jaseemabid. 
13:36 < superjoe> jaseemabid, no, I meant exactly what I said. click the link.
13:39 < aandy> gotwig: substack wrote a nice article on streams you might be interested in checking out: https://github.com/substack/stream-handbook
13:39 < gotwig> I like pipes ;D
13:40 < jaseemabid> superjoe, I have read that. I have written quite some node stuff. Like apps, hubot, express.js websites etc. Its my calculator since a long rime. repl comes as a quick js checker. I use it for mocha, jslint... Now, I am building a git wrapper in js with v8 in c++. Now i am wondering what exactly did node do? I have a repl here I made myself in like 20- 30 lines of c++, i might be albe to evaluate  a js file with c++ and v8 alone with another 20 more
13:40 < jaseemabid>  lines. So what is node? 
13:41 < deoxxa> jaseemabid: now take that, add non-blocking file and network i/o, process management, a bunch of handy other things, and make it work on all platforms
13:41 < deoxxa> jaseemabid: that's node
13:42 < gotwig> aandy: if thats the way to do it, its overly complicated, IMHO.
13:42 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:42 < jaseemabid> deoxxa, That makes sense :)
13:44 < gotwig> DAMN
13:44 < aandy> gotwig: many things in node are as streams, and that's one of the advantages of node. the article should explain why.
13:44 < gotwig> so the only recipesite I can use so far is recipefy.com -..-
13:44 < aandy> it's not an article that explains how YOU should write YOUR usecase. as i said, context
13:45 < aandy> a search engine with only one source.. might be better off writing recipefy.com's search function and sell it to them ;)
13:45 < jaseemabid> deoxxa, Basically it added the *non-blocking* part right? You can do file & n/w io etc with c++ alone? Process stuff from libuv? 
13:46 < gotwig> aandy: Its not all about selling. The web should be damn open.
13:46 < gotwig> >.<
13:46 < gotwig> And now I can also deactive my python parsers
13:46 < gotwig> or they sue my extremly I guess
13:47 < aandy> I agree, but have you checked their website? it's pretty open to me :)
13:47 < gotwig> aandy: they have all copyrights it seems. For about 220,000 recipes O:0
13:48 < aandy> i thought you were doing a search engine, not stealing their db and republishing recipes on another site? :P
13:48 < gotwig> aandy: yeah, and they say they dont allow it.
13:48 < gotwig> using it for any case
13:49 < gotwig> my users gonnabe sad I guess
13:51 < aandy> as opposed to users on recipefy who would be thrilled that you take the recipes they wrote and put them on another site? come on now
13:51 < gotwig> recipefy.com allows it
13:51 < gotwig> ;P
13:51 < gotwig> so I don't care, if they say I can, I do it..
13:52 < aandy> you just said they don't
13:52 < gotwig> now I have to remove my parsing methods in lxml for cooksunited
13:52 < gotwig> cooksunited and all services dont allow it
13:52 < gotwig> that is the thing
13:52 < gotwig> its the biggest recipe database in this bloody world..
13:52 < aandy> then you shouldn't have wasted your time making it in the first place
13:55 < gotwig> this world is unfair 
13:55 < gotwig> but thanks for your help :-)
14:01 < aandy> gotwig: how is it unfair? it's unfair to recipefy for you to take their hard work. see it from both sides, not just yours
14:01 < gotwig> aandy: Do you understand? Chefkoch/Cooksunited disallows me. I am in contact with recipefy, I know there some dudes, they allow it.
14:02 < aandy> s/recipefy/chefkkoch\/cooksunited/
14:02 < Bren_> "this world is unfair" <- strange world you live in. might seem so unfair because of the way poeple treat you. which might relate to the way you treat people.
14:03 < gotwig> All is commercial, but that is the wrong room for this "issue"
14:03 < aandy> gotwig: you should've learned this as a child: the world isn't fair. deal with it
14:04 < aandy> the world wasn't fair to cooksunited either, yet they managed to build their database
14:04 < gotwig> I should just support sites that help me // allow it. 
14:04 < gotwig> and don't blame others that dont do it ;P
14:05 < aandy> you should shift your way of thought. if you can't provide a good partnership with those who don't allow it, you're doing it wrong
14:05 < Bren_> gotwig, it wouldn't have to be so commercial if more people would think of others. like at least saying thanks some times. or maybe even give them some spare resources if you have any.
14:06 < gotwig> spare resources? :-)
14:06 < Bren_> well, that works better iRL with people near you
14:08 < gotwig> whatever, I would have to learn how to handle these streams..
14:08 < Bren_> omg i have to learn how data flow works in order to write programs
14:09 < Bren_> or ypu could get PaaS then you wouldn't have to programm yourself
14:09 < gotwig> no :X
14:09 < Bren_> your app might be more successful that way, too
14:09 < mscdex> niggler: can you give the node-ncurses master branch a whirl?
14:09 < gotwig> I am not familiar at all with such stuff
14:10 < Bren_> and still you write apps. that's why there are so many problems with so many apps.
14:10 < gotwig> I talk about PaaS
14:10 < thl0> Bren_: if you need help controlling streams, I just released a blog post to help people with that: http://thlorenz.com/#/blog/post/event-stream
14:11 < Bren_> thl0, that "omg" remark was ironic ;)
14:12 < gotwig> hahaha
14:12 < Bren_> PaaS is when you get me food and i get you an app
14:12 < gotwig> Bren_: No. I get you an app. And I want nothing OR money
14:13 < Bren_> and other people's time to copy TFM into IRC
14:13 < gotwig> ^^
14:14 < Bren_> i'll be getting a break now, hope this world has disconnected from app world when i come back
14:14 < gotwig> Bren_: have you worked with PaaS before?
14:14 < gotwig> Bren_: bye.
14:14 < Bren_> gotwig, yes if have offered Programming as a Service to many customers in the past
14:15 < deoxxa> that used to just be called "programming"
14:16 < Bren_> PaaS is for customers who like Java :)
14:16 < gotwig> Bren_: there are such people out there o.0??
14:17 < thl0> Bren_: didn't catch the irony, but now you could point your customers that way ;)
14:19 < gotwig> Yeah, maybe I should checkout the cloud...
14:19 < gotwig> but I think I would have to relearn/learn very very much stuff
14:20 < gotwig> but I am under 20 so I've got the time I guess ;)
14:25 < aandy> gotwig: that's the spirit. when i was under 20 i built a community where people helped build a db. that's pretty much how any sustainable db growth happens. either that or hire a staff
14:25 < aandy> either that or that, or establish a partnership
14:26 < gotwig> or just get a normal job :D ^^
14:26 < aandy> now.. where's the fun in that
14:26 < gotwig> no fun, included ^^
14:26 < pachet> all play and no work makes jack a poor boy
14:27 < aandy> no fun intended :D
14:27 < gotwig> aandy: what is db
14:28 < aandy> abstract. could be anything you're looking to build a db of
14:29 < gotwig> what is db :D
14:29 < Fishrock123> gotwig: Databse...?
14:29 < Fishrock123> Oooh fail typing. :s
14:29 < gotwig> Fishrock123: database. If you ask me.
14:29 < aandy> but yeah, Fishrock123 is right
14:29 < gotwig> ok, than I don't see the context here :D
14:30 < aandy> lol
14:30 < gotwig> what you mean with building a db lol?
14:30 < aandy> you're scraping websites for recipes, how do you not see the context? :D
14:30 < gotwig> ;D
14:31 < aandy> but if it helps, substitute "db" for "stuff" in my statement
14:32 < gotwig> it's still very hacky to do such stuff. Parsing data from websites, which comes from databases... Without JSON
14:32 < gotwig> or an API
14:32 < aandy> gee, it almost sounds as if they don't want you to have the data ;)
14:33 < gotwig> :^|
14:33 < gotwig> can't be ^^
14:33 < gotwig> they know I like cookies
14:52 < STRML> Does anyone around here have any experience with sending out an email at a specified time? I have about 8 servers in production (2 vms, 4 cores), but I want to make sure one and only one server sends out the email, and will handle it even if there is a server reboot. Any ideas?
14:53 < pachet> STRML: i use redis for that
14:53 < nathan7> STRML: you're looking for some kind of task queue
14:54 < STRML> Pachet: How do you use redis to do this? I'm not too familiar with it
14:55 < metal55> Hey all
14:55 < STRML> I suppose I could store cron jobs in a 'jobs' collection in my DB and read it into node-cron, but I need to ensure that only one instance does this, not all 8
14:55 < metal55> Whats the best way to identify when multiple asynchronous process have completed?
14:55 < STRML> metal55: I use underscore.after
14:55 < pachet> STRML: you can just keep a redis list of messages that need to go out
14:56 < pachet> STRML: or by extension, any processes that need doing
14:56 < nathan7> A redis pop is atomic
14:56 < pachet> STRML: since operations -- yeah
14:56 < nathan7> Use it!
14:56 < pachet> since operations are atomic only one server will fetch that entry
14:56 < STRML> pachet: I see. Is Redis required to do that or can I work it into my existing MongoDB?
14:56 < pachet> as a nice bonus you can do pubsub between instances for one big happy family
14:57 < nathan7> That raises an interesting point, STRML 
14:57 < nathan7> ..and a flaw in my programming!
14:58 < nathan7> or not
14:58 < STRML> nathan7: I see a $pop operator in mongo but it appears to be for arrays within a doc. 
14:58 < nathan7> Yeah, mongoDB is an entirely different concurrency model
14:59 < pachet> it'll let you do atomic reads but you have to kind of twist its arm :[
14:59 < nathan7> I think having both redis and mongoDB is an excellent model
14:59 < nathan7> MongoDB/CouchDB are really awesome and stuff
14:59 < STRML> It might be, but I'd like to avoid including Redis if I can help it. Of course I'll do it if it's the only reliable way
15:00 < nathan7> But Redis really is the tool for the job at times
15:00 < STRML> So should I just run a redis instance on one of my 2 vms and have all node servers connect to it?
15:01 < nathan7> Sure
15:01 < STRML> Interesting. Thanks for the help guys. I have to run and see a client but I may be back on later. I appreciate it
15:09 < Bren_> re
15:12 < metal55> STRML: underscore.after?
15:12 < STRML> metal55: http://underscorejs.org/#after
15:13 < metal55> STRML: thanks, this works with Node.js?
15:15 < gkatsev> npm install underscore
15:15 < punjabikura> so I'm making net.Socket.write() calls and the response is coming back in chunks (multiple callback callbacks). When a bunch of commands get sent to the server, the callback needs to know what was the command sent if there is more data coming in, any idea how I can go about doing this?
15:17 < metal55> gkatsev: thanks
15:38 < newjonaslund> what's the best approach of creating new blobs, the new Blob([data], {type: 'text/html'}); seems to fail in most browsers...
15:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:44 < superjoe> newjonaslund, this is a question for #html5 or #javascript
15:45 < newjonaslund> true, was sort of relating to nodejs, socket.io etc.. but you're right
15:49 < punjabikura> any help on the socket.write callback/data issue?
15:50 < nathan7> punjabikura: I'd apply the magic of closures
15:51 < nathan7> punjabikura: var command='blah'; var data=''; socket.on('data',function(newData){ data+=newData; }); socket.on('end',function(){ console.log('ohmygod, data!',data); });
15:52 < punjabikura> nathan7: does end get called after the server has finished sending data?
15:52 < nathan7> punjabikura: when the connection is closed
15:53 < nathan7> punjabikura: if you have some other 'finished sending data' indication, process it in your data event
15:53 < punjabikura> nathan7: ah so the thing is, I'm opening 1 connection to a server, connecting to multiple clients via socket.io and the clients query the server through the nodeapp, so the connection basically stays open
15:53 < punjabikura> I just need to be able to get the right response to the right client
15:53 < nathan7> punjabikura: yes, you pass the client around
15:53 < nathan7> punjabikura: You know closures, right?
15:53 < punjabikura> nathan7: haha yes I do
15:53 < nathan7> punjabikura: well, either nest shit and use closures
15:54 < nathan7> punjabikura: or pass your client around
15:55 < punjabikura> nathan7: so I basically use a stack, everytime a client asks for something, I put the request and callback in a stack, a separate process picks up commands from the command stack and executes them in order, when data is received, I pop off the callback from the callback stack and do the magic
15:55 < nathan7> punjabikura: possibly, yes
15:56 < nathan7> punjabikura: async provides a stack I've been playing with
15:56 < punjabikura> nathan7: the problem is, sometimes the response to one command comes in chunks, multiple .on('data' events, and I've already popped off the callback and thats when I run into an issue
15:56 < nathan7> punjabikura: assemble your response first, then start messing with stuff
15:57 < punjabikura> yeah, I think my approach to the callback solution is wrong
15:57 < nathan7> got any code for me to look at?
15:57 < punjabikura> nathan7: its a mess right now, I'll take a stab at what you suggested first. Thanks!
15:57 < nathan7> punjabikura: Have fun and scope responsibly!
16:15 < q_> cant believe I havent been using underscore, I wonder what else I'm missing :S, async has been a nice addition
16:16 < garrensmith> how do you turn the logging on when using nanoCouch
16:24 < metal55> I am trying to create an application that itereates through an object collection, deletes specific folder in a directory referenced by that object collection and then creates a new directory with the same name in the same location. Because its all async its getting into a right mess and I can't work out how to get the underscore.after thing to work
16:24 < metal55> arrrahghhh! - sorry
16:24 < metal55> spent all day strugelling with this
16:25 < metal55> child_process exec won't let me fire a custom callback
16:26 < aandy> metal55: is there a reason you don't use fs rather than spawning child processes?
16:27 < metal55> oh .. is fs synchronous? 
16:27 < aandy> for those operations you listed, there are sync version yes
16:28 < metal55> I need to delete a bunch of files (symlinks) and then create them again
16:28 < aandy> there's readdirSync, mkdirSync and you can iterate over your readdirSync with a for (var i = 0, l = dirs.length; i < l; i++)
16:28 < AAA_awright> metal55: Something that simple shouldn't require any external libraries
16:28 < aandy> http://nodejs.org/api/all.html#all_file_system
16:28 < aandy> there are also symlink functions
16:28 < AAA_awright> At some point more abstraction makes things more confusing
16:29 < metal55> aandy: THANK YOU !!!!!
16:29 < aandy> hehe, np
16:30 < draginx> Error: parser error, 0 of 65536 bytes parsed <-- any idea why formidable cant process a file upload..?
16:30 < user123> I have a version of casperjs installed via npm installed a few months ago.  I'd like to use the latest code on it's Github repo.  I'm wondering what the proper way to do this is?  I think "git clone http://...capserjs.git" then "npm install casperjs.git".  Docs do not mention so thought I'd ask.
16:33 < metal55> if I call fs.rmdirSync on a symlink it will just delete the link.. no the linked to directory right?
16:33 < metal55> aandy: Thanks again ... I have no idea why I was wondering lost through the rabbit hole of async child processes!
16:35 < aandy> metal55: i haven't used the symlink function so i'd suggest you make a proof of concept first. make a test dir where you create a symlink (like you would without node, like you created the others), and then delete it with node
16:35 < aandy> as long as they're soft symlinks you should be fine
16:36 < aandy> it should be up to the OS, so make sure your symlinks are soft, then yes
16:41 < q_> yeah windows has only hard links
16:43 < AAA_awright> NTFS has only hardlinks, at that
16:43 < AAA_awright> Though there's also shortcuts, though that's a file format
16:43 < AAA_awright> I forget if Node.js looks for that or not
17:03 < shlevy> Does 'langpavel' from github hang out here?
17:09 < jhsto> Is it possible to make a POST to a foreign site and respond to the client with the response from the POST, with all the headers and cookies possible?
17:12 < adrianF> node-de
17:17 < TehShrike> mikeal: I wouldn't mind type errors in JS for primitives... I just don't see it making sense for objects
17:17 < TehShrike> And that's why God invented ===, I suppose
17:18 < TehShrike> I also do not favor shoehorning a "class" into JavaScript... silly ES6
17:22 < nathan7> TehShrike: ..WHAT?
17:22 < nathan7> Classes?!
17:22 < AAA_awright> jhsto: Say that again?
17:23 < TehShrike> nathan7: yeah, so that people switching from classical inheritance to JavaScript can be even MORE confused!
17:23 < mikeal> === is makeup on a pig :)
17:23 < jhsto> AAA_awright: I think I solved my question by using http.request
17:24 < TehShrike> mikeal: error-generating makeup, at least!  I like a language that breaks when I do something wrong
17:25 < s5fs> TehShrike: that's a good start, now if i could stop using languages that break when i do something right..
17:25 < jfroma> typescript all the modules!
17:25 < jfroma> kidding
17:25 < mikeal> === is not an error tho, just a proper comparison
17:25 < TehShrike> True
17:26 < nathan7> I need to go set everyone trying to stick classses into my beloved javascript on fire
17:26 < TehShrike> I wish you luck in your quest
17:27 < s5fs> I've never worked with another language that supported prototypal inheritance, just js
17:28 < astropirate_> I love JS but after learning haskell I miss strong type system :(
17:29 < s5fs> i'm mainly working in java these days, i could stand a bit more brevity
17:29 < s5fs> still need to spend some time with dart, it's an interesting idea being able to be strongly typed at times
17:33 < luite> astropirate_: come help working on one of the haskell->js compilers :)
17:36 < jocafa> just support source maps and all is good
17:37 < astropirate_> luite, nahh if i'm going to do JS work it will be in JS. less complexing = good
17:38 < luite> it's really difficult to support source maps with haskell due to all the inlining and other transformations that happen. an approximation is possible, but one line of haskell may give you 5 or 10 javascript functions in some situations
17:40 < luite> astropirate_: right, at the moment everything is still relatively early in development, so only really usable if you like compiler hacking :)
17:41 < luite> though in the longer term, writing haskell should save time
17:42 < astropirate_> luite, frankly, i'm more of a fan of a threaded model. I only use Node because its JS :p
17:42 < s5fs> astropirate_: big fan of livelocks, deadlocks and other concurrency challenges, eh? haha!
17:42 < luite> astropirate_: one of the compilers implements green threads in javascript
17:43 < astropirate_> o_O
17:43 < astropirate_> well funny story
17:43 < luite> s5fs: actually those are not as much of a problem in haskell as in many other languages
17:43 < astropirate_> i've been working on a framework for Node.js to deal with the complexity of serverside code
17:43 < astropirate_> i feel like i am ending up implementing therads :S
17:43 < astropirate_> on top of an event loop
17:43 < astropirate_> hmmm lol that sounds familiar!
17:44 < s5fs> luite: i'm doing lots of multithreaded work in java right now and its a mess, if you say haskell reduces complexity i'll certainly have to take a look
17:44 < s5fs> can't port this project but could be useful for future work
17:44 < luite> s5fs: don't mean they don't exist, but with purity and laziness (almost everything is immutable), and software-transactional memory, most concurrency challenges aren't terribly challenging compared to other langs :)
17:45 < luite> haskell green threads are also quite lightweight, so it's actually acceptable to spawn a new thread for each new connection in a webserver
17:45 < astropirate_> luite, do you know how they compare with gorotines?
17:45 < s5fs> stm does clean things up but i haven't worked with them before
17:46 < luite> (internally they're handled by their own scheduler and async IO)
17:47 < nathan7> astropirate_: You mean fibers?
17:48 < luite> astropirate_: hm, i haven't used Go yet, but looks like they're similar in some ways, that they're lightweight threads, using dynamically allocated stacks
17:51 < etcetera> s5fs: what kind of project are you working on?
17:51 < draginx> How does formidable handle images in /tmp ?
17:51 < etcetera> anyone looked at typescript...sexay
17:51 < draginx> does it eventually get rid of old files?
17:52 < sandfox> etcetera: don't be a troll :-p
17:52 < luite> astropirate_: but in haskell there are more ways to do things in parallel. lightweight threads are most similar to goroutines, but it looks like many goroutine examples would in haskell be accomplished with `par`, whcih doesn't give you a full thread, but indicates that some part of the computation can be computed in parallel with another
17:53 < astropirate_> I see
17:53 < luite> for true concurrency, like handling a webserver connection, you still need threads of course :)
17:54 < mscdex> 2 threads for every connection! 1 for backup!
17:54 < mscdex> :-D
17:54 < astropirate_> luite, given the choice why do you choose node over haskell?
17:54 < etcetera> sandfox: ?
17:55 < astropirate_> etcetera, yes dont troll
17:55 < etcetera> ?
17:55 < luite> astropirate_: uh i don't really, but i use node to run testcases for the haskell->js compiler i'm writing :)
17:55 < sandfox> etcetera: you may not have noticed the small implosion suffered by half the node dev's on twitter
17:55 < etcetera> sandfox: what?
17:56 < haploid> small implosion ?
17:56 < astropirate_> luite, AHHH :D :D thats cool. I am still somewhat of a newb with haskell... but i want to make the switch
17:56 < sandfox> etcetera: but in short, what does it actually add that anyone actually wants? (genuinely interested)
17:56 < luite> I'd probably choose node over haskell if for my application a well-tested node library was available, perhaps things related to websockets with fallback, sockjs?
17:56 < etcetera> sandfox: what implosion?
17:57 < sandfox> https://twitter.com/mikeal
17:58 < sandfox> haploid: maybe explosion would have been a better choice of a would
17:59 < nerph> looking for 2 legged server side oauth, is passport-oauth a good or even best choice? 
17:59 < draginx> Whats a good way of renaming an image file name to something random based on time() or something like that to ensure it doesn't conflict with something else?
17:59 < milani> there is no TypeScript struggle here?!! :D
18:00 < sandfox> member:draginx: node-uuid ?
18:00 < draginx> hmm that could work :)
18:01 < sandfox> draginx: might be overkill but it's deco going to be pretty unique (unless you use it wrongly)
18:01 < draginx> right, ok thanks man :D
18:01 < RLa> hm, seems like typescript is compared to dart a lot?
18:02 < RLa> how good is typescript's "hello world" compiled to js? is less than 17k lines as dart's version?
18:02 < sandfox> RLa: it's mostly because it's part of the "compile to JS or nearly" generation of languages
18:02 < milani> RLa, yeah. and twitter is full of tweets about how good or bad is typing in js
18:04 < context> i like how they use import instead of just using var
18:05 < astropirate_> luite, you know anything about ASTs?
18:05 < astropirate_> experience*
18:05 < luite> uh well, they are pretty common in compilers :p
18:06 < astropirate_> aye
18:06 < context> typescript doesnt look half bad
18:06 < luite> this hs->js ast more or less consists of walking some intermediate representation of haskell AST, then outputting a simplified js ast, walking that again a few times to optimize it, and then prettyprinting javascript
18:07 < context> and typescript looks to be pretty straight forward: http://www.typescriptlang.org/Playground/
18:09 < context> not sure how well the type casting will go with dynamic variables
18:09 < context> err... type enforcement
18:10 < milani> context, typescript is not on github right?
18:11 < sandfox> milani: NOPE! 
18:11 < milani> oh codeplex. why?!!
18:12 < context> milani: its open source either way
18:13 < context> milani: its on codeplex cause MS runs codeplex, and MS made typescript
18:13 < context> milani: why would it not be ?
18:14 < milani> yup. 
18:14 -!- ryah changed the topic of #Node.js to: node.js in yr computer
18:14 < milani> the syntax is very much like actionscript!!
18:15 < astropirate_> Github??
18:15 < creationix> ryah, if only v8 was more portable, then it could be nodejs in your $10 router
18:15 < astropirate_> thats sooo.. yesterday
18:15 < astropirate_> all the cool kids use gitorious
18:15 < creationix> s/portable/lightweiht/
18:16 < context> holy crap tsc.js is BIG
18:21 < milani> astropirate_, I take it as a kidding!
18:31 < mykul> Is there a way to modify an INCLUDE path or something in order to get npm to find installed dependencies? npm install is failing in the preinstall stage because a couple of header files cannot be found
18:41 < rwaldron> milani, I spoke to the typescript devs and they are going to work getting it mirrored on github
18:41 < rwaldron> context: the whole concept of types in typescript only exists at the development phase
18:41 < milani> rwaldron, it would be great.
18:42 < rwaldron> and besides, dynamic values is different then dynamic types
18:42 < jerrysv> rwaldron: you're on board for cascadiajs it looks like?
18:42 < rwaldron> if your mixing types, you're already writing code that v8, ionmonkey, nitro and chakra can't optimize well
18:42 < rwaldron> jerrysv i am
18:42 < jerrysv> rwaldron: awesome!
18:44 < milani> rwaldron, static types in these languages that compile to js are fake, right? they only control at compile time to force you avoid mixing types I guess.
18:45 < bubbles10101> hey guys.. im getting 'Error: Cannot find module' even though i've installed the module with 'npm install -g module-name'... any ideas?
18:46 < creationix> milani, "only control at compile time" is the feature
18:46 < luite> milani: that's not really fake, in many statically typed languages the types disappear mostly in the compiled result. the point is that you get the compile time guarantees
18:46 < creationix> it's in the same vein as code linting
18:46 < creationix> yeah, C has zero runtime type checking
18:47 < creationix> and not the best static type system either
18:47 < bubbles10101> not sure if it makes a difference... but im writing a shell script, so my first line starts with '#!/usr/bin/env node'
18:47 < creationix> bubbles10101, don't install with -g
18:47 < creationix> only global scripts can use globalls installed dependencies
18:47 < codex__> i'm developing a mobile/web app and planning to use nodejs, does anyone have any good sources to read on designing good service architecture via node?
18:47 < bubbles10101> creationix.. why not? i want my scripts to be global...
18:47 < milani> creationix, I mean there is no optimization or something that a real static lang would do
18:48 < milani> it's just checking types and raising errors if they didn't match. 
18:48 < creationix> milani, sure there is, have you read up on how v8 and friends optimize
18:48 < milani> am I missing something?
18:48 < bubbles10101> im attempting to recode my bash scripts in node.js rather
18:48 < bubbles10101> but failing hard hehe
18:48 < creationix> bubbles10101, while developing use local dependencies
18:48 < creationix> bubbles10101, and document your deps using package.json
18:48 < milani> v8 is js. I'm talking about compile-to-js langauges.
18:49 < creationix> when when people install your script using -g your deps will then get installed globalls
18:49 < creationix> milani, it's a lint tool that helps the developer not accidentally mix types
18:49 < creationix> milani, and it happens to force you to write code that v8 can optimize easier
18:49 < milani> aha:)
18:50 < bubbles10101> ahh.. creationx, was hoping to get away with a single file gist... these are simple scripts
18:50 < bubbles10101> :(
18:50 < bubbles10101> not really creating whole apps in this instance
18:50 < creationix> bubbles10101, if you want globally accessable deps, put your node_modules tree high up in the tree
18:51 < creationix> node looks in ./node_modules, ../node_modules, ../../node_modules all the way to /node_modules
18:51 < creationix> which doesn't include where -g installs them at $PREFIX/lib/node_modules
18:52 < bubbles10101> hmm ok.. so, what kind of scripts are allowed to use '$PREFIX/lib/node_modules'?
18:52 < rwaldron> creationix, that's a good parallel.. I've been trying to describe it as "a dev tool"
18:52 < creationix> scripts installed with -g
18:52 < rwaldron> but the way you put it... "same vein as linting"
18:52 < jeromegn> Regarding Object.defineProperty. How come when I have set a value, when I inspect the element, instead of finding `key: val`, I get: `key: [Getter/Setter]`? is there a way to go around that? (sorry for the cross-post, but nobody is answering in #javascript)
18:52 < rwaldron> gets the point across much better.
18:52 < creationix> rwaldron, :)
18:52 < bubbles10101> basically im recreating ~/bin and want to convert a whole bunch of bash files in there to node
18:53 < creationix> bubbles10101, ok, then install them to ~/node_modules
18:53 < bubbles10101> so not sure the ../ and ../../ thinking works
18:53 < creationix> bubbles10101, just mkdir ~/node_modules
18:53 < creationix> or better ~/bin/node_modules
18:53 < creationix> so it doesn't infect your entire home folder
18:54 < aandy> or make a package.json and use "npm install"?
18:55 < aandy> { name: "something", "private": true, "dependencies": {"somelib": "3.0.0" } }
18:55 < bubbles10101> creationix, mmm ok its a bit messier i guess, kinda liked the idea of a globally accessible set of modules for scripting, but without the requirement of having to install a script
18:55 < bubbles10101> creationix, i suppose  ~/bin/node_modules is the wtg though
18:56  * graeme_f waits for the inevitable pull request porting node.js to typescript
18:57 < creationix> bubbles10101, you can have globally installed deps
18:57 < creationix> just put them in /node_modules
18:57 < creationix> but that's rarely what you really want
18:57 < niggler> is there a way to fork with the C semantics?
18:57 < creationix> node's sytem lets you decide how broad or narrow your's module's influence is
18:58 < creationix> niggler, just child_process.spawn and friends
18:58 < creationix> niggler, nothing where you check the return value to see which half of the fork you're on
18:58 < bubbles10101> creationix, just wondering why node.js does not allow a script to access $PREFIX/lib/node_modules global modules?
18:58 < bubbles10101> is it a security issue?
18:58 < niggler> so that means the child can't share the variables of the parent :/
18:58 < creationix> bubbles10101, because it's a bad practice
18:58 < niggler> *it doesnt inherit the parents' variables
18:59 < creationix> niggler, correct, it's a shared-nothing system
18:59 < creationix> niggler, node isn't very thread-safe
18:59 < creationix> bubbles10101, there is $NODE_PATH
18:59 < creationix> but I recommend not using $NODE_PATH
18:59 < creationix> better if you want all your scripts in ~/bin to have access to shared modules to install them at ~/bin/node_modules
19:00 < niggler> creationix: so im trying to do something akin to vim's !
19:00 < bubbles10101> creationix, ok thanks this has been helpful. i have a better understanding of the issues now
19:00 < niggler> e.g. if you type !ls it does a fork/exec, shows you the output of ls, and then on keypress brings you back
19:00 < creationix> niggler, you don't need to share state to do that
19:01 < niggler> i don't see a "wait" call -- is it impilicit that the child waits?
19:01 < creationix> no, it's non-blocking
19:01 < creationix> but you can wait in your logic till the child-process exits
19:01 < creationix> you can even share your stdio fds with the child
19:03 < creationix> niggler, child_process.execFile is probably what you want
19:03 < creationix> it auto buffers the stdout and stderr and notifies you when it's done
19:03 < niggler> need the shell processing
19:03 < creationix> but you can still pass in options like customFDs
19:03 < niggler> also creationix "customFds Array Deprecated File descriptors for the child to use for stdio. (See above)
19:03 < niggler> "
19:03 < niggler> deprecated
19:03 < creationix> don't worry about that
19:24 < scott_gonzalez> isaacs: Is it possible for multiple people to be able to publish a given module?
19:29 < benpourquoi> Hello everybody
19:29 < benpourquoi> newbie here
19:30 < Fishrock123> Ohai
19:30 < benpourquoi> was wondering if you guys feel the node.js community is growing and if you feel the technology gets some traction
19:31 < niggler> what node.js is missing is a high-profile project that uses it
19:31 < benpourquoi> Niggler: thanks. would you know of any high visibility project going on?
19:32 < haploid> geekli.st, for one
19:32 < niggler> benpourquoi id like to hope what I'm doing now will become a high profile project :)
19:32 < haploid> and klout
19:32 < niggler> what's klout?
19:32 < haploid> also, okcupid uses it in places
19:32 < Fishrock123> lol
19:32 < benpourquoi> niggler: I hope too :)
19:33 < niggler> i feel so behind
19:33 < niggler> i
19:33 < niggler>  h
19:33 < niggler> av
19:33 < niggler> en
19:33 < niggler> t h
19:33 < niggler> eard of any of these
19:33 < niggler> geeklist looks like a bootstrap site
19:33 < benpourquoi> Klout uses node.js ? interesting.
19:33 < Fishrock123> klout is a weird twitter thing.
19:33 < haploid> iirc clipboard.com uses it also
19:33 < niggler> klout requires twitter or facebook, nonstarter
19:33 < benpourquoi> Klout has a lot of visibility
19:34 < niggler> and okcupid looks like a dating site
19:34 < benpourquoi> okcupid is huge too
19:34 < niggler> ok i stand corrected
19:34 < benpourquoi> somehow "famous" as a good, smart website
19:34 < benpourquoi> do you guys have more details about the Klout usage of node.js
19:35 < niggler> http://corp.klout.com/blog/2011/10/the-tech-behind-klout-com/
19:35 < niggler> ooh
19:36 < Fishrock123> Oooh nice, that really shows off how much node.js can handle from a bigger source. :D
19:37 < benpourquoi> really nice indeed
19:37 < benpourquoi> is it advertised on node.js website?
19:37 < optimus55> Can someone explain to me how/if this is possible with nodejs? There's a lot of chat about it but i'm not exactly sure if it's meant to solve my problem. I want to trigger a server request that returns information to 5 categories. Seeing as it could take some time to process, i'd like the 5 categories to be updates asynchronously, so the data updates the view whenever that category's info is ready. Is this possible?
19:38 < haploid> voxer is the largest node installation I'm aware of.  iirc they are running a very large scale operation with node.js throughout
19:38 < optimus55> updated*
19:38 < haploid> well, not *very* large scale, but on the order of hundreds of hosts, which is rather large for node installations
19:38 < optimus55> I'd want to do this instead of say.. triggering 5 separate ajax requests
19:40 < benpourquoi> niggler: thanks for the link btw. great stuff
19:40 < benpourquoi> one year old. would love to find out where they stand now
19:42 < benpourquoi> http://corp.klout.com/blog/2011/12/find-your-klout/
19:42 < kanzure> i need help naming a tool
19:43 < Fishrock123> What is the tool...?
19:43 < kanzure> it demangles variable names in obfuscated javascript
19:43 < LouisT> demangler? >.>
19:43 < Fishrock123> lol
19:43 < kanzure> so http://js.adsonar.com/js/adsonar.js becomes http://paste.ubuntu.com/1254595/
19:43 < kanzure> if (hamburger.indexOf("previous") > -1 && pumpkin == "" || pumpkin && pumpkin !== "undefined") cheese.srcUrl === "undefined".... etc
19:44 < kanzure> ok i guess demangler could work, kinda hard on those consonants though
19:44 < Fishrock123> Nahh
19:49 < nerph> looking for 2 legged server side oauth, is passport a good or even best choice?
19:50 < jjjohnny> por favor, is there a better way to know your modules path than: require.resolve('thismodule')?
19:51 < milani> jjjohnny, isn't it good enough?!
19:52 < jjjohnny> milani: thats the thing, I don't know, and the nature of it makes me question whether it will work in all circumstances
19:54 < jjjohnny> guess i'll trust it
19:54 < jjjohnny> one more for the machines
19:54 < sent-hil> I get: 500 Error: Failed to lookup view "views/login", however I do have a login.jade file in views/.
19:55 < sent-hil> I've both those files under apps/authentication: https://gist.github.com/25f43387afad4143b076
19:55 < sent-hil> my routes.coffee https://gist.github.com/fab6ae3d27f5cdaf22dd
19:58 < victusfate> hi
19:59 < victusfate> checking in to see if there's an equivalent to http://nodejs.org/api/tty.html#tty_tty_isatty_fd that is callable from within a native module
20:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:00 < TooTallNate> victusfate: look at uv.h and look for "uv_guess_handle()"
20:01 < victusfate> thanks TooTallNate, that'll work
20:01 < victusfate> was going to do it with conditional compile flags on our deployed servers but that felt like the wrong way to do it
20:02 < victusfate> ok I see the comment, check for UV_TTY
20:03 < victusfate> +1 to @TooTallNate
20:04 < sent-hil> i set app.set('views', __dirname + '/views'); explicity inside routes.coffee and it works now
20:15 < LouisT> is there a way to force net.connect() to use IPv6 over IPv4 first?
20:22 < mattvv> architecture question, I want to build a REST API in node that consumes a SOAP Api, what npms would you recommend for this?
20:23 < BennyLava> the latest npm
20:23 < BennyLava> for sure
20:23 < aandy> a bit too cocky, BennyLava
20:24 < BennyLava> I'm sorry, aandy?
20:25 < mattvv> thanks for the smartass reply BennyLava. I was more meaning would people recommend tools such as express or are there better packages for restful apis
20:25 < TheEmpath> i, too, would like know the answer for mattvv's question
20:25 < aandy> mattvv: disclaimer: i have never done a soap api, but https://github.com/milewise/node-soap seems mature
20:25 < BennyLava> ooooh, I see.
20:25 < BennyLava> U just jelly cuz I funny.
20:25 < aandy> or mad because you're not
20:25 < aandy> either way
20:25 < mattvv> thanks aandy - that looks perfect for the soap side of things
20:26 < TheEmpath> mattvv: I found that the problem with REST is its rarely fully supported OR its supported in a very specific way
20:26 < mattvv> for the restful side is there a standard package in the node world, or is this simply handled by base node
20:26 < TheEmpath> there are two ways to interpret the standard: one assumes PUT passes all children, the other assumes you POST to collections
20:26 < aandy> mattvv: you could go with express or restify (if restify has improved)
20:26 < mattvv> TheEmpath: I'm going to be designing my own restful api side which consumes the soap, so i'm not sure i'll have too many issues
20:27 < mattvv> thanks aandy - so express seems to be the standard then, looks like sinatra so should be easy
20:27 < aandy> for stuff like /lookup/:search_term, express has a built in markup for that
20:27 < TheEmpath> mattvv: thats what i mean.  you'll end up having to pick your own definition eventually.
20:27 < mattvv> thanks for the help guys :)
20:27 < TheEmpath> the real fun is when you are 5 months into a project, and you realize that to change a user's email preference via REST, you have to pass all 300 friends into the PUT as well :X
20:27 < TheEmpath> then you've made terrible, terrible life choices
20:27 < aandy> restify is the same, but limited to just api stuff, and with more debug. but i haven't benchmarked it lately. it had some speed issues compared with express about a year ago (but might be due to the excess debug info)
20:27 < aandy> anyway, express should handle it just fine
20:28 < aandy> TheEmpath: graph db! :)
20:28 < TheEmpath> is that how graphDB works?
20:28 < aandy> well, define your problem again
20:28 < aandy> i might have assumed it was about relationships and "timeline"'ish email properties
20:29 < TheEmpath> While HTTP 1.1/REST has a very strict spec, it has a philosophical divide on how to handle child resources.  The common way is to pass all children and all children of children
20:29 < TheEmpath> for PUT at least
20:30 < TheEmpath> so assuming I have a social media site, if I want to update a user's email preference via PUT, i have to pass all 300 friends I may have as well
20:30 < aandy> well, you could do that with graphs if you have relationships (which you usually rely heavily on in graph dbs)
20:30 < aandy> TheEmpath: in neo4j for instance, that would probably not happen as you'd assign the email to a node, and not to 300 nodes
20:30 < TheEmpath> the other way is to recognize that collections are unique concepts, and just POST and DELETE to them
20:32 < TheEmpath> so instead of PUT /api/user/5 my[email]=bob@face.lol&my[friend][1]=167&my[friend][2]=516
20:33 < TheEmpath> you do POST /api/user/5/friend/516
20:33 < aandy> i don't understand why you add &my[friend] arrays?
20:33 < TheEmpath> err lol POST /api/user/5/friend friend[id]=516
20:33 < TheEmpath> because if you ahead to the strict HTTP standard, anything that isn't submitted gets erased
20:33 < TheEmpath> so if you PUT a blank record, its the same as DELETE :O
20:33 < TheEmpath> minus removing the ID
20:34 < aandy> right, but what do you use the array for? what do you use the fact that my[friend][2]=516 for?
20:34 < aandy> i thought you were changing the email addr of one user
20:34 < TheEmpath> if its a user with friends, and the user owns the friend relationship, then if you do a PUT, especially with ORMS, you have to pass that up
20:35 < TheEmpath> its a total pain in the mouf
20:35 < TheEmpath> the whole mouf
20:35 < aandy> well, that might be in the specifics (and interpretation of) REST. that's not how i'd do it. i'd leave the email and friends as separate PUT/POST/DELETE areas
20:35 < TheEmpath> exactly lol.  thats not how i do it either
20:35 < TheEmpath> but some REST framework stick to that standard, others dont
20:36 < aandy> some frameworks are too generic by nature :)
20:36 < TheEmpath> im currently dealing with one that does stick to that standard
20:36 < TheEmpath> i've had to write a collection mutator class that does array diffs… ugh
20:36 < TheEmpath> i'd honestly rather make out with a landmine :/
20:37 < aandy> but in relations to graph dbs, you could think of it as mongo with sql'ish relationships. you have two types of "things": nodes and relationships
20:37 < TheEmpath> technically, Mongo's PUT on its REST server operates by strict HTTP too :O  so you have to submit the entire JSON (and its children)
20:37 < aandy> you have nodes which are somewhat like docs, even schemaless, which may have properties. and relationships which are also objects, only that they tie together two nodes
20:38 < aandy> i don't mean mongo as in mongo, i just mean it's a "javascript object" in a doc way
20:38 < mattvv> kk i think i'm going to use express, it looks really well supported
20:38 < TheEmpath> ya
20:38 < TheEmpath> aandy: ya
20:38 < aandy> mattvv: it is by far one of the most supported, and i think you'll be well off with it for this, yes
20:38 < mattvv> aandy: the project is literally just going to be a layer ontop of the soap api, do you see any issues with running it in node
20:38 < mattvv> with a few extra logic things like authentication
20:39 < aandy> mattvv: i'm really out of soap (3+ years) so i honestly can't advice on this
20:39 < TheEmpath> hrmm i never checked… does express support OPTION and PATCH methods?
20:39 < mattvv> well think of soap as if it was another rest api
20:39 < aandy> a generic "keep the auth schemes in sync" might suffice
20:40 < aandy> as in, don't make a loophole where you expose everything behind a authed soap in a public rest api, hehe
20:40 < mattvv> i'm assuming that node is a good fit due to reactor pattern and lots of http calls
20:40 < mattvv> yeah of course
20:40 < mattvv> i'm going to write a new authlayer anyway
20:41 < mattvv> that will occur before any api call is made
20:41 < aandy> other than that, not really. there are plenty of good wrappers in node which use http as an interface to a db
20:41 < mattvv> ok cool
20:42 < aandy> that said, http is always overheaded, but in terms of security problems, not many unpredictable problems no (predictable being the ones you already know, auth, shared resources and such)
20:43 < aandy> mattvv: is your REST json or xml? conversion might be an issue. making sure xml is translated and handlded correctly as json
20:43 < mattvv> that's a good point
20:43 < mattvv> soap is obviously xml
20:44 < mattvv> but i would like to expose mine as json
20:44 < mattvv> since xml sucks
20:44 < mattvv> but i don't think that will be a huge issue
20:44 < mattvv> i'm only going to allow a few calls
20:44 < aandy> i haven't problems with it, but remember reading a post about it, on how to handle propertiers in DOMs and lists
20:44 < s5fs> mattvv: if the soap service is .net based you should be able to enable json access easily
20:44 < mattvv> s5fs: unfortunately not .net based
20:45 < mattvv> one of the things i was wondering about aandy is if its worth caching common requests
20:45 < mattvv> but i think i'll tackle that a bit later
20:46 < TheEmpath> in general, you have a serilaizer/formatter layer on the input and output
20:46 < aandy> mattvv: only because it's json, i'd might use memcache, but it depends on your use case. check your logs to see if commons are really common
20:46 < mattvv> yeah so you'd cache it beacuse of the conversion rather then the http request
20:47 < TheEmpath> detect format, convert to native JSON, handle it as such in code, then spit it out to a specified/default output
20:47 < TheEmpath> correct
20:47 < mattvv> interesting
20:47 < aandy> i mean, you could put varnished or something on top of it if you know how often it changes, or if you have peak hours at certain requests, like "NFL_SCORE" at the superbowl
20:47 < mattvv> i thought the http would be the bottleneck, but i guess the reactor pattern takes that nicely
20:47 < aandy> mattvv: both actually, but i'd weight it agains the cost obviously
20:47 < mattvv> yeah exactly, well i'd want to cache the authentication for a certain amount of hours for example
20:48 < aandy> hmm, on an api? i'm not an api expert, but don't you normally have nonce etc for the sake of NOT caching requests (and abusing in case they're sniffed)?
20:49 < mattvv> yeah thats a good point
20:49 < aandy> as in, if i get your token, i might do some harm before the cache is invalidated
20:49 < aandy> i'd rather cache the results
20:49 < mattvv> true, true
20:49 < mattvv> thanks aandy
20:50 < aandy> np, if it was any help :P
20:50 < mattvv> heaps! going to start playing around with this api now hehe
20:51 < aandy> i had a job about 6 months ago. it involed me translating their xml api to json in order to work properly with a web client they had in mind. long story short, after a week of working on it, i convinced the previous tech to add json output :D
20:52 < aandy> took 2 days, vs. a forever of agonizing xml->json->xml + overhead. just keep that in mind when people complain about your REST api as a defence
20:52 < aandy> if* ;)
20:52 < mattvv> haha yeah aandy
20:52 < mattvv> that's a good point
20:52 < mattvv> :)
20:53 < mattvv> well this gives me a good reason to try out node anyway
20:53 < krisu> can I run 2 node servers in one shell?
20:54 < mattvv> is coffeescript prevelant in the node world?
20:54 < gkatsev> it's split between haters and non-haters
20:54 < BennyLava> aren't you forgetting lovers?
20:55 < gkatsev> isn't that what non-haters are?
20:55 < BennyLava> no?
20:55 < TheEmpath> does coffeesciprt allow patterns that native doesn't?
20:55 < BennyLava> eh
20:55 < BennyLava> your logic sucks
20:55 < BennyLava> not hating something doesn't mean loving it
20:55 < BennyLava> wtf
20:55 < aandy> no, coffee is just sugar
20:56 < TheEmpath> k
20:56 < aandy> as in, it's shorthand and macros
20:56 < TheEmpath> why people so afraid of native C syntax .______.
20:56 < aandy> like, (arg1) -> do_something = function(arg1) { do_something }
20:56 < aandy> (and others)
20:56 < gkatsev> TheEmpath: it's mostly just sugar for stuff that would take longer in pure js. It has some nifty stuff but I dont particularly like it, especially since it requires a compile step
20:56 < TheEmpath> maybe cause C looks like a monster eating you.
20:57 < TheEmpath> :C
20:57 < aandy> TheEmpath: i don't know. i prefer c over c++. so nice and clean, but i'm not using either for anything advanced
20:57 < gkatsev> does anymore actually prefer c++ over C?
20:57 < TheEmpath> god i miss programming in node :(
20:57 < TheEmpath> oh javascript, you allow for patterns that make my mind so happy
20:57 < TehShrike> ^
20:58 < aandy> mattvv: one advantage for coffee is that you learn (if you check the compiled .js) good habits. as in, how one should've written the js in the first place. jslint compliant and scope contious
20:58 < CoverSlide> i think the v8 team prefers c++ over c
20:58 < mattvv> yeah
20:58 < aandy> TheEmpath: what are you at now?
20:58 < CoverSlide> just a hunch
20:58 < BennyLava> yes because jslint is always right
20:58 < mattvv> I think ill just use js to start and then i can port it to coffee later if i want to
20:58 < Protected> Hey people. I'm trying to post a string to a remote server via http using the http package and code like what's in the docs for the http request method. The correct remote location receives the request, and I can return stuff from it, however the actual string being posted doesn't seem to arrive there. Is there anything I must set on the node side in order to enable sending the body, or 
20:58 < Protected> something?
20:58 < aandy> CoverSlide: it wasn't an objective comparison, just my own opinion. i like the near ASM style of C :)
20:58 < gkatsev> aandy: idk, it does some weird things sometimes
20:59 < aandy> mattvv: that's fine
20:59 < aandy> gkatsev: coffee?
20:59 < CoverSlide> use coco over coffee
20:59 < BennyLava> lol coco
20:59 < TehShrike> You're all wrong!
20:59 < TehShrike> You should be writing LispyScript!
20:59 < BennyLava> then you might as well use livescript
21:00 < TehShrike> http://lispyscript.com/
21:00 < gkatsev> yeah, lispyscript ftw
21:00 < CoverSlide> i prefer clojurescript over listpyscript
21:00 < gkatsev> aandy: yes, when it's compiled to js
21:00 < aandy> mainly i run into the function(param1).function2() problem. where i'd like to type it as function param1 .function2(), but need to put parenthesis around everything that's not the "last"
21:00 < TheEmpath> Protected: http://www.jmarshall.com/easy/http/#sample
21:01 < aandy> gkatsev: so yeah, sometimes coffee eats itself, i agree
21:01 < BennyLava> drinks?
21:02 < sent-hil> Error: Cannot find module '../build/default/libxmljs', i'm using node 0.8.11
21:02 < aandy> npm install drinks?
21:02 < BennyLava> coffee isn't eaten
21:02 < gkatsev> aandy: so, I wouldn't realy say you should learn js by reading the CS compiler output.
21:02 < BennyLava> not where I come from anyway'
21:02 < gkatsev> aandy: in fact, I should say you should first learn js, then learn CS.
21:02 < aandy> BennyLava: well, it defies its own purpose is what i meant
21:02 < CoverSlide> sent-hil: what modules are you using?
21:02 < BennyLava> I know aandy
21:02 < BennyLava> I'm joking
21:03  * BennyLava sighs
21:03 < sent-hil> CoverSlide: https://gist.github.com/7f1c785ff2a14ea99d6a
21:03 < aandy> gkatsev: right, what i meant was that you can learn (like mediocore -> advanced) as a js writer)
21:03 < CoverSlide> i love how coffeescript uses !0 and !1 instead of true and false
21:03 < Protected> That doesn't seem to be node specific, thealphanerd
21:03 < aandy> might just be me though
21:03 < Protected> I mean TheEmpath
21:03 < thealphanerd> ?
21:03 < Protected> Sorry about that
21:03 < mattvv> is there a node.js live console i can use, similar to irb or something?
21:03 < mattvv> for quickly prototyping
21:03 < thealphanerd> you hath summoned me?
21:03 < aandy> mattvv: just type # node
21:04 < thealphanerd> :P
21:04 < mattvv> sweet thanks andy
21:04  * Protected whistles innocently
21:04 < BennyLava> mattvv: you would've known that had you read any docs *shrug*
21:04 < BennyLava> but FUCK READING
21:04 < mattvv> nobody likes a smart ass
21:05 < aandy> BennyLava: you seem a bit tense tonight, everything alright? :)
21:05 < BennyLava> nobody likes a person who is too lazy to read basic docs
21:05 < aandy> oh boy
21:05 < BennyLava> aandy: tense?
21:05 < aandy> you should've been here earlier
21:05 < ccowan> anyone using CouchDB in production with more then 2 million documents?
21:05 < aandy> i mean, you really shouldn't have been here earlier
21:06 < BennyLava> we had some good times!
21:06 < aandy> :D
21:06 < gkatsev> CoverSlide: booleans in js are basically 0 and 1 anyway
21:07 < CoverSlide> just saying, that's supposed to be a fine example from which to learn from?
21:08 < gkatsev> yeah, as I said, it does some weird things sometimes
21:08 < CoverSlide> and also, how cs handles classes, not a fan IMO
21:08 < TehShrike> BennyLava: you need to chill a bit more
21:09 < BennyLava> TehShrike: I'm always totally chill, bro
21:09 < aandy> CoverSlide: interesting, how come? i personally like it, so i'm curious
21:09 < CoverSlide> basically a class is var ClassName = function
21:10 < aandy> CoverSlide: and you prefer a prototype driven one, or?
21:10 < BennyLava> classical design patterns don't work well in Js anyway
21:10 < TehShrike> JavaScript doesn't have classes!  People shouldn't pretend that it does! >_<
21:10 < CoverSlide> basically a class is var ClassName = function(){function Constructor(){} return Constructor}() << yeah it wraps everything up in its own iife, but seriously verbose and not needed since you're just extending the prototype
21:10 < BennyLava> it's stupid that CS included this
21:10 < CoverSlide> there's lots of libraries that do it cleaner, like klass
21:11 < BennyLava> and they still fail
21:11 < BennyLava> if you're emulating the classical approach in JS, you're doing it wrong.
21:11 < aandy> CoverSlide: would you agree it's better suited for situations where you have to make multiple instances (like populating a lot of Image instances or whichever)?
21:11 < BennyLava> aandy, what?
21:12  * terinjokes will agree with the notation that the classical approach is wrong
21:12 < TehShrike> At least in JS
21:12 < BennyLava> there is NO advantage to ever using the classical approach in JS
21:12 < aandy> i mean, in cases where you use the "class" multiple times of for multiple instances, where you'd need stuff like "how many are alive", or class variables
21:12 < BennyLava> it's always inferior
21:12 < BennyLava> period
21:12 < TehShrike> Well, it's not so much that
21:12 < TehShrike> It's just that JS doesn't actually support classical inheritance
21:12 < TehShrike> And there's no benefit to pretending that it does
21:12 < BennyLava> indeed
21:12 < TehShrike> Beyond making it look like something you may be more familiar with
21:13 < aandy> TehShrike: that's not really what class is for, that's "extends"
21:13 < BennyLava> what
21:13 < TehShrike> Presumably aandy is referring to a specific framework's feature?
21:14 < aandy> well, you said inheritance, and i don't think that's the use case for class in coffeescript
21:14 < aandy> rather it's the "extends" keywork in class
21:14 < BennyLava> what's the use case?
21:14 < TehShrike> Ah, fair enough
21:14 < aandy> you don't have to inherit
21:15 < BennyLava> aandy: give me one example of where emulating classes makes more sense than using Object.create
21:15 < aandy> i for instance have a class Something extends EventEmitter, which is great due to the few methods eventemitter exports, but that's all because *i* want to expose it to the new object
21:15 < TehShrike> So it's just for defining an object creation pattern
21:16 < aandy> BennyLava: oh, i wasn't saying that at all, i was merely defending the fact that cs classes can be is non-obscure unless forced to be so
21:16 < BennyLava> sure, but it's still pointless and inferior
21:17 < aandy> as in, you can use classes in a lightweight case, but i'd still say it's "best" for cases where you make many instances and rely on class variables
21:17 < BennyLava> ctors in gereral don't belong in prototypal langs.. no idea why they exist in JS
21:17 < BennyLava> but w/e
21:17 < aandy> well, inferior... i'm not sure. you still have the scope around your object function, so it's not harmful, and not *very* overhead
21:18 < aandy> i mean, i get what you're saying..
21:18 < BennyLava> you're just obscuring what you're really doing
21:18 < BennyLava> not so much with Object.create
21:18 < BennyLava> ctors don't belong in JS, classes don't belong in JS, getters and setters don't belong in JS
21:19 < aandy> well, okay, then that's a matter of how people use cs, because i don't do that. i only use class when i want to keep class variables
21:19 < CoverSlide> unfortunately, ctors are in JS
21:19 < CoverSlide> and getters and setters are in JS
21:19 < BennyLava> yes, unfortunately - as are getters & setters
21:19 < BennyLava> they only serve to obfuscate things
21:19 < CoverSlide> and in ES6, classes will be as well
21:19 < BennyLava> perhaps
21:19 < aandy> you would argue that sugar is obfuscation aswel, though, right?
21:19 < CoverSlide> that's pretty much confirmed
21:19 < BennyLava> not all sugar is
21:20 < BennyLava> good sugar makes code MORE readable/understandable
21:20 < aandy> what i mean is, a class in coffee is ... a class in coffee, it's not how a class is in every languge, and of course you should know what a class is before you use it
21:21 < aandy> it's just a keyword
21:21 < BennyLava> no, it's emulating a classical design pattern in a language that isn't suited for it at all
21:21 < BennyLava> that's misleading, confusing and limiting
21:21 < mscdex> good splenda
21:22 < TheEmpath> down with classes!  up with prototypes!
21:22 < BennyLava> I love CS, but I won't ever touch its class crap
21:22 < TheEmpath> composite pattern ftw
21:22 < CoverSlide> sweet & low, motherfucker!
21:22 < aandy> hmm, i don't agree it's misleading, as it's still a javascript pattern that's used, and has a purpose. i would agree that it's misleading if it makes people think there are classes in js as they already know from other languages
21:22 < Ralt_> I want to build "LS", LispScript, write in Lisp and compile down to JS.
21:22 < BennyLava> TheEmpath++
21:23 < sirvon> is nodejs the glue to connect 2 apis together
21:23 < CoverSlide> except that it's a pattern done infinitely million different ways, so it's not exactly the same pattern
21:23 < aandy> i agree, and i don't use classes for other than class variables, but still, that comes with the territory of what coffeescript is
21:24 < TheEmpath> i like how craftyjs does composite
21:24 < TheEmpath> craftyjs.com
21:24 < aandy> it's not made solely to make javascript shorthand. if you want cs just to be shorthands, then by all means just avoid class
21:24 < BennyLava> aandy: but using Object.create is always the better alternative, so WHY would you ever use an emulated classical pattern?
21:24 < BennyLava> it just doesn't make any sense to do so, ever
21:25 < TheEmpath> if you want OO in your JS, go dart
21:25 < aandy> BennyLava: i can only say personally, but for me it's that it makes properties easier to overview (for me)
21:25 < BennyLava> eh, that just doesn't make any sense to me
21:25 < aandy> right, and that's fine, but that's also what CS is
21:26 < aandy> it's not a replacement for js
21:26 < CoverSlide> I don't like how v8's Object.create relies on __proto__
21:26 < aandy> i've used it in two projects, where it made sense
21:26 < BennyLava> CoverSlide: why does it matter?
21:27 < aandy> i've used javascripts in the rest, in most, but the deviance for me is when i need to make sure i handle scope properly and undefined variables
21:27 < BennyLava> aandy: no, you just don't understand what you're doing then
21:27 < aandy> BennyLava: sure, you could argue that, yes
21:27 < BennyLava> you seem smart enough, I'm sure you'll see the light soon enough
21:27 < tnorris> is the reason so many people want to change JS to something it's not because that's what they're stuck using in the browser?
21:28 < BennyLava> also, I wonder what CS will do once we have native classes :P
21:28 < TheEmpath> __proto__ is problematic.  I believe back in node 5, __proto__ infinitely recursed itself at one point
21:28 < TheEmpath> its been a while
21:29 < hillct> tnorris: it's for the same reason that Scala exists - the idea is to leverage one's existing skillset in expanded spheres
21:29 < aandy> BennyLava: or what CS will do when CS2 comes, etc. (the kickstarter one). it's all a big search/replace language :)
21:29 < BennyLava> CS2?
21:30 < aandy> BennyLava: i appreciate the confidence, but at least i'm not making resumptions calls in javascripts where i'm uncertain about passing scopes. that's still an okay reason to use CS in some cases, right?
21:30 < tnorris> hillct: hm, guess I'm just bias since i started writing js back in '02. it's always worked well for me.
21:30 < BennyLava> aandy: now you lost me
21:30 < aandy> BennyLava: http://www.kickstarter.com/projects/michaelficarra/make-a-better-coffeescript-compiler
21:30 < BennyLava> aandy: I didn't think we were talking about CS, but classes
21:30 < BennyLava> I already said I love CS :p
21:30 < BennyLava> and thanks for the link
21:30 < aandy> main idea is the source map implementation
21:31 < aandy> BennyLava: ah okay, sorry, i might have misunderstood
21:31 < hillct> tnorris: I remember JS from back in the old Netscape beta days, which was back when people thought Java would be used for web applets
21:31 < txdv_> js is a disgusting language when it comes to formating text
21:31 < txdv_> something like rubys "Hello #{variable}" would be much more fun
21:31 < CoverSlide> oh I thought ocx controls were the future
21:32 < BennyLava> txdv_: ES6, quasi literals
21:32 < hillct> tnorris: I'm not impressed with the expansion into other arenas, of Java and Javascript, though I have to say, Node is pretty damn slick
21:32 < TheEmpath> it doesn't have the helpers other languages have… it takes a very C approach for string manip
21:32 < BennyLava> TheEmpath: it will soon
21:32 < aandy> BennyLava: what do you do for classes in CS? Object.create or?
21:32 < TheEmpath> imo, i liked it without it  :X
21:32 < CoverSlide> factory methods
21:32 < BennyLava> aandy: yes, the only approach that makes sense.
21:32 < tnorris> hillct: heh, good old days when JS was mainly used to do annoying animations.
21:32 < txdv_> BennyLava: when is V8 going to support ES6?
21:33 < TheEmpath> "yur face".replace(/* blah */);
21:33 < BennyLava> aandy: luckily, you can shim it with ctors in pre-Object.create browsers
21:33 < hillct> tnorris: and calculators/counters, yeah
21:33 < aandy> BennyLava: and how do you factor that? say you're creating a "class" with a whatever method. class Something; whatever: ->
21:33 < CoverSlide> ES6 isn't finished yet, it supports some of it now
21:33 < CoverSlide> with --harmony flags
21:33 < BennyLava> txdv_: v8 already supports many harmony proposals
21:33 < BennyLava> What CoverSlide said :p
21:33 < txdv_> and is it possible to turn them on in node?
21:34 < CoverSlide> node --harmony
21:34 < BennyLava> aandy: I don't know what CS's 'class' does (except for silly things that don't belong in JS), so I can't answer that.
21:34 < hillct> tnorris: there was this amazing article about how Apple was using JS to decode paneled jpg images as animations, which is apparently what they're doing on some of the iPhone5 demo pages
21:35 < TheEmpath> o__O
21:35 < tnorris> hillct: Node has been really good to me. it feels effortless to get a project up and running.
21:35 < aandy> BennyLava: i was just trying to ask in a general sense, but Something.__proto__ ?
21:35 < BennyLava> aandy: you lost me again :p
21:35 < TheEmpath> aandy: http://www.mollypages.org/misc/js.mp
21:35 < aandy> hehe, okay, what i'm trying to ask you is, how do you go about it, when you say the CS classes aren't a good idea (in CS)
21:36 < TheEmpath> i find that to be handy
21:36 < aandy> TheEmpath: nice :)
21:36 < hillct> tnorris: yeah, Node is the exception to my general annoyance with attempts to make language A fit in slot B just because a given developer can't be bothered to learn language B
21:37 < aandy> BennyLava: i used to just return an (new) object in regular js, i'm just asking to learn 
21:37 < tnorris> hillct: heh, exactly.
21:37 < TheEmpath> aandy: that chart has saved me a vew times debugging mixins
21:37 < BennyLava> aandy: well I don't really understsnd the question
21:38 < aandy> BennyLava: you mentioned that you steer away from class when using CS, so i'm asking what you do instead, in an arbitrary "class" example (inheritance)
21:43 < CoverSlide> aandy: using factory methods
21:43 < CoverSlide> https://gist.github.com/3814644
21:43 < CoverSlide> very simple example
21:43 < CoverSlide> it even works with new
21:47 < aandy> CoverSlide: hos is that different from the base class example? http://pastebin.com/q8KNvU8K 
21:47 < aandy> where MyObject.prototype goes in the class of course, like property: 'something'
21:47 < aandy> how*
21:48 < CoverSlide> because in you example, MyObjectFactory returns undefined
21:48 < aandy> i mean apart from the anonymous part, how is it bad?
21:49 < aandy> right, but new doesn't, or a function call to it
21:49 < CoverSlide> in mine, it returns the same with or without new
21:49 < aandy> ah okay
21:50 < aandy> but still, how would you call it without .. call? i mean, you'd always issue either MyObjectFactory() or MyObjectFactory(a_param) though
21:51 < aandy> CoverSlide: you mean in the sense of "all that is MyObjectFactory", including the construnction function, and if more ("private") properties had been assigned?
21:51 < CoverSlide> you dan't call it with call, because this isn't used at all
21:51 < terinjokes> why are we talking about the factory pattern? don't think i've ever used that in JS
21:52 < aandy> i'm asking on alternatives to the CS class keyword/wrapper
21:52 < aandy> because it seems class is not a good pattern
21:56 < draginx> Whats the best way to see if all files exists that are within an array and then after that.. have an object/array that contains the files that exists and do stuff with that?
21:56 < draginx> Would I need the async library for this>
21:56 < draginx> like ['/tmp/file.jpg','/tmp/hello.png','/tmp/yes.pdf'] etc.
21:58 < server_> anyone up for a chess game?
21:58 < mscdex> draginx: you wouldn't _need_ it, but it makes it easy. in fact, it's one of the quick examples in the async readme: https://github.com/caolan/async#quick-examples
21:59 < draginx> ahhh
21:59 < draginx> very cool thanks :)
22:00 < aandy> or a "sync" variation: var exists = [], files.forEach(function(item) { if (exists(item)) { exists.push(item); } if ((i + 1) >= files.length) { do_stuff_at_end() } });
22:00 < aandy> server_: haven't played in ages, can you recomment any places to play? :)
22:09 < sinclair> server_: game on
22:10 < Hupo> http://puu.sh/1avIb
22:11 < Hupo> building a docco replacement with no python / shell command dependencies
22:12 < Fishrock123> Looks nice, but the text is horribly pixelated on my screen.
22:13 < Fishrock123> Oh, it's a screenshot. *facepalms*
22:13 < mykul> anyone have any experience working with node-lame?
22:14 < Hupo> Fishrock123: well yeah
22:31 < Guest_1448> is it possible to get list of all currently installed module versions on heroku?
22:31 < Guest_1448> can't run heroku run
22:31 < Guest_1448> can't run heroku run npm
22:31 < Guest_1448> can't run heroku run npm list
22:31 < Guest_1448> ...
22:32 < nullbit> #heroku ?
22:32 < mykul> TooTallNate: Is the Decoder class in node-lame completely nonfunctional?
22:32 < mykul> pardon the stalking, btw
22:32 < chilts> Guest_1448: it will show you that when it is releasing a new version
22:32 < Guest_1448> um, they barely reply to heroku q's and this is one a bit too node specific :P
22:33 < nullbit> Guest_1448: maybe don't use heroku
22:33 < Guest_1448> chilts: oh, when I do heroku push?
22:33 < Guest_1448> never noticed that
22:33 < chilts> yeah, it outputs what it is installing
22:33 < Guest_1448> :| thanks
22:33 < chilts> or create a task which can return them for you
22:33 < chilts> I haven't tried this though
22:33 < TooTallNate> mykul: ya, completely non-functional at the moment, sorry about that
22:33 < chilts> (and yes, I'm also on #heroku, and usually chat when people talk Node.js)
22:34 < chilts> nullbit: that's not a reason not to use them :)
22:34 < TooTallNate> mykul: i'm waiting for the new transform stream stuff to land in core before implementing it
22:34 < nullbit> heroku...oh so hypie!
22:34 < minver> If mongoose is too much for me. (I dont need an ORM). Should I use mongojs or mongoskin?
22:34 < chilts> heh
22:34 < nullbit> chilts: why...does anyone need it?
22:34 < chilts> need what?
22:34 < nullbit> whatever heroku is
22:35 < chilts> heh, no, you don't _need_ it ... but you can use it
22:35 < nullbit> ive heard of it too many times, but dont know what it does
22:35 < TooTallNate> mykul: are you @mtoymil on github?
22:35 < chilts> same with AWS, Heroku, Nodejitsu
22:35 < mykul> TooTallNate: yes
22:35 < chilts> you don't _need_ them, but they can help you :)
22:35 < chilts> or not if that's your preference
22:35 < TooTallNate> mykul: nice, did the "gyp" branch compile ok for you?
22:35 < Guest_1448> nullbit: they're free plan is awesome for hosting your little apps (even comes with free db)
22:35 < Guest_1448> their
22:35 < mykul> TooTallNate: yes, that seemed to work fine
22:35 < Guest_1448> geez, I need sleep
22:36 < TooTallNate> (minus the Decoder of course)
22:36 < nullbit> Guest_1448: i'd rather use openshift
22:36 < TooTallNate> mykul: cool, thanks for the confirmation :) I need to convert libmpg123 next *sigh*
22:37 < Guest_1448> nullbit: heroku has a great CLI tool and neat web UI for managing the app/db too
22:37 < Guest_1448> it's much more "professional"
22:37 < nullbit> noobfriendly is the appeal i guess
22:37 < chilts> Guest_1448: so does nodejitsu, called jitsu :)
22:37 < chilts> and it also installs via npm rather than some Ruby thing
22:37 < mykul> TooTallNate: np, i'll have to look into what transform streams are to better understand your situation :D.  By the way, do you know of any way I can decode mp3s in node? Do I have to write the bindings myself?
22:37 < Guest_1448> yeah, that and appfog look really nice too
22:37 < chilts> so yeah, Heroku/Nodejitsu/OpenShift ... all have advantages and disadvantages
22:37 < Guest_1448> was a hard choice
22:37 < Guest_1448> but openshift is umm. weird
22:38 < TooTallNate> mykul: i mean you can fire up a "lame" child process and feed in data that way
22:38 < blakmatrix> chilts: ubuntu can install the heroku toolbelt with apt-get
22:38 < TooTallNate> mykul: there's really nothing wrong with doing that
22:38 < chilts> blakmatrix: yeah, that's what I did :)
22:38 < caioketo> So I was looking, i can get a buffer from an array of bytes and encode it tostring with base64 encoding, and now i need to do the oposite, I have a string base64 encoded and need to get the byte array from it into a buffer, is it possible?
22:38 < chilts> I'd just rather use npm for something Node.js specific
22:38 < chilts> I shouldn't worry about it though
22:39 < owen1> i try to test my api - http://pastebin.com/siJpb2k9 but i believe that the request to my server is being called before the server is ready to server requests (i use mongodb, btw). can someone look at those lines and give me some insights about testing it?
22:40 <@ryah> caioketo: Buffer(mystring, "base64") ?
22:40 < Guest_1448> owen1: does server.js have the code to start the server? if so, add a callback
22:40 <@mbalho> ryah: im in the berlins, what should i do (this is maxogden)
22:41 < caioketo> ryah: i wasn't sure that it would work, but thanks, i was jus tto try that :D
22:41 <@mbalho> ryah: do you know any places with lots of cats here
22:41 <@ryah> mbalho: msg lisa
22:41 <@mbalho> good idea!
22:41 <@ryah> do you have her number?
22:41 <@mbalho> ya i think so
22:42 < mykul> TooTallNate: okay I can try that. thanks for the advice. good luck on the project!
22:45 < owen1> Guest_1448: right now i don't even do module.exports (in server.js). do i neeed to do that?
22:45 < Guest_1448> so that you can pass a callback, yes
22:45 < owen1> Guest_1448: http://pastebin.com/bdAFrp8K
22:46 < cryptopsy> is socket.io superceeded by something new?
22:46 < cryptopsy> or is that what people use to handle events in their web servers?
22:47 < Guest_1448> owen1: you need to wrap this thing in a function and call the callback after doing httpserver.listen()
22:47 < owen1> Guest_1448: gotcha! thanks
22:47 < cryptopsy> i have a problem with socket.emit('adduser'..) in the client-side script. The server (i.e app.js) already knows the user have fetched the page that contains socket.on('connect'...) [also not that socket.emit is right after socket.on in the client-side, butthere's also a socket.on in the server-side .js . There's no point to have it emit 'adduser' to the socket since the server knows the user have requested the 
22:48 < owen1> Guest_1448: is that a common way to write and test servers?
22:48 < cryptopsy> so you see, i would like to not have to send 'assuer' since the server already knows this
22:48 < cryptopsy> is socket.io outdated ? they're webpage is shit, documentation is barely existant
22:48 < cryptopsy> socket.io came out very early, but now that node is more mature, do they have their own socket functions?
22:49 < cryptopsy> in the documentation i see dgram.* functions
22:49 < Guest_1448> owen1: you can always start the server manually first (instead of doing it in a script)
22:49 < Guest_1448> use a unittesting framework and add the server init code and your tests there
22:49 < Guest_1448> it'll be easier and cleaner
22:50 < owen1> Guest_1448: i want to feel pain before using a testing framework
22:50 < Guest_1448> then you're on the right track
22:50 < owen1> (;
22:51 < Fishrock123> cryptopsy: #socket.io?
22:51 < owen1> Guest_1448: the approach of starting it seperately is nice, but not sure if it's applicable in a CI/automated tests
22:51 < Fishrock123> cryptopsy: Because afaik, it son;t outdated at all..
22:52 < Fishrock123> cryptopsy: But, then why not have the server-side just do 'adduser' on 'connect'?
22:52 < BRampersad> Hey guys
22:52 < BRampersad> What are some websites using node.js?
22:52 < Fishrock123> Klout
22:52 < Guest_1448> nodejs.org
22:52 < Fishrock123> Is one..
22:52 < Fishrock123> BRampersad: http://corp.klout.com/blog/2011/10/the-tech-behind-klout-com/
22:52 < BRampersad> I thought node.js uses nginx
22:53 < msarchet> trying to fix a problem with npm not being able to find my node path under ubuntu, any thoughts?
22:54  * CoverSlide facepalm
22:54 < cryptopsy> Fishrock123: because socket.io says fuck all that and wants the client-side to emit 'adduser'
22:54 < BRampersad> Nice
22:54 < cryptopsy> at least that's how the shitty oudated chat example works
22:55 < cryptopsy> its oudated because the first thing i do in this channel, someone tells me how the include directives are wrong and i should do it a different way
22:55 < CoverSlide> learnboost.com uses node
22:55 < cryptopsy> also the date on git for it is like, moe than 2year old
22:55 < cryptopsy> CoverSlide: amazon uses node
22:55 < CoverSlide> but not as their main web server
22:55 < cryptopsy> what do they use it for?
22:56 < Fishrock123> cryptopsy: Huh? https://github.com/learnboost/socket.io 16 days ago..
22:56 < cryptopsy> Fishrock123: the chat example
22:56 < cryptopsy> chat.node.org
22:56 < CoverSlide> clock.co.uk is running on node
22:56 < aandy> eNvented: there?
22:56 < Fishrock123-away> cryptopsy: It's an example, screw it and do it your own way. XD
22:56 < Fishrock123-away> cryptopsy: (I'm away as of now, just fyi)
22:56 < cryptopsy> Fishrock123-away: i can't do my own way because socket.io dont document their shit
22:56 < cryptopsy> also the god damn tech geeks refuse to update their examples
22:57 < cryptopsy> everyone wanna talk shit about how node is so wonderful that you can write a chat client in 30 lines, but all examples of it are incorrect
22:58 < cryptopsy> the procedure should be user->server: user is not connected
22:58 < cryptopsy> insted its user->server->user->server: now connected
22:58 < cryptopsy> s/not/now/
22:58 < aandy> cryptopsy: i think you're confusing node with socket.io?
22:58 < cryptopsy> aandy: yes, it sure seems that way doesn't it?
22:59 < cryptopsy> all the great things people talk about node are direct result of the modules for node
22:59 < aandy> i haven't heard such claims to node anyway
22:59 < cryptopsy> yes you have
22:59 < cryptopsy> you watched ryan dahl talk about the chat app, right?
22:59 < aandy> no
22:59 < samholmes> anyone heard of weinre before?
22:59 < aandy> i can see how socket.io might advocate it, but i've never encoutered a node chat app
22:59 < cryptopsy> nearly all vids about node, the chat is la piece de resistance
23:00 < cryptopsy> and every blogger and their grandma talks shit about how they can put twitter out of business with a simple node app
23:00 < aandy> well, if that's the case, then you might need to compare it to when the video was made
23:00 < CoverSlide> well not everything about node is just client-facing
23:00 < aandy> from the early days 'til now, quite a few changes to the core api's have been made
23:00 < cryptopsy> aandy: the chat app is the demonstration app for node.js
23:00 < CoverSlide> there's lots of people doing great back-end stuff in node
23:00 < cryptopsy> thats why node hosts it
23:00 < cryptopsy> chat.nodejs.org
23:00 < BRampersad> Any news on when the new socket.io with engine io will be released?
23:00 < CoverSlide> it's down anyway
23:01 < cryptopsy> does express do io sockets?
23:01 < cryptopsy> anyone using a more modern socket module than socket.io?
23:01 < LouisT> cryptopsy: chat.nodejs.org doesn't seem to work btw, it always gives a connection to server error
23:01 < CoverSlide> more modern? socket.io is about as modern as you can get
23:01 < CoverSlide> you can get more lightweight, however
23:02 < CoverSlide> like sockjs or just using raw websockets
23:02 < cryptopsy> chat.nodejs.org/ is first hit on google for 'nodejs chat'
23:02 < cryptopsy> CoverSlide: no its not, you don't know what you're talking about
23:02 < cryptopsy> socket.io dont even have complete doc
23:02 < aandy> cryptopsy: so you're question is SEO related or...?
23:02 < cryptopsy> aandy: i dont have seo interests, if that what you're asking
23:02 < euoia> cryptopsy: I managed to get a version of chat working
23:02 < CoverSlide> ok, so lack of documentation means it's not modern
23:02 < cryptopsy> what u trying to say aaaaaaaandy?
23:02 < euoia> based on that website
23:02 < cryptopsy> that nodejs is SEO their chat app?
23:03 < cryptopsy> or are you trying to say that i should be banned because you think i'm a seo god
23:03 < CoverSlide> and i'm 90% positive your problem is you wrote your app wrong
23:03 < samholmes> I'm looking for a node-inspector type of weinre project that will allow me to debug my projects on virtually any device.
23:03 < aandy> no, i'm saying that since you search for nodejs chat, and get chat.nodejs.org you shouldn't be surprised
23:03 < aandy> how that related to what node is, i can't tell
23:03 < cryptopsy> aandy: im not suprised at all, i think thats great
23:03 < aandy> you can search for chat + python aswel, that doesn't mean python's flagship was a chat app
23:04 < cryptopsy> whoever said it isn't loading, or that its not working should be surprised (so am i in this regard)
23:04 < cryptopsy> aandy: python never made 50 real-life videos in person about it
23:04 < cryptopsy> in fact ryan dahl gained joyent support through that chat app after the conference
23:05 < cryptopsy> of course joyent see more potential than shitty chat apps, but its the showcase
23:05 < aandy> cryptopsy: so you came to #node.js to rant about node? i see way too many plotholes for this to pan out
23:05 < cryptopsy> thats the definition of the word 'showcase'
23:05 < mmalecki> I mean, how is it bad?
23:05 < cryptopsy> aandy: it seems that way to you, because you're a sociopath
23:05 < samholmes> nvm, I guess weinre is a node app
23:05 < mmalecki> blog is a flagship of ror
23:05 < aandy> are you trying to say that a chat app in 30 lines is impossible in node?
23:05 < mmalecki> you could find thousands of examples
23:05 < CoverSlide> cryptopsy: ok, reading your complaints, you are an idiot and don't understand how node, socket.io, websockets, the internet, computers, and life work
23:05 < cryptopsy> once try to pigeonhole me into SEO, then deny flagshipness of chat app, then try to pigeonhole me into pythonness (that's a reactionary behavior)
23:06 < cryptopsy> CoverSlide: that's very doubtful
23:06 < cryptopsy> how old do you think i am, like 12?
23:06 < aandy> cryptopsy: wow, where do you get that from?
23:06 < BRampersad> Which one is better. the original dust.js or the linked fork
23:06 < cryptopsy> aandy: obviously from you, since i'm talking and arguing to you
23:06 < CoverSlide> you could be 50 and your responsesi don't care if you're 50
23:06 < aandy> that was by no means what i was saying at all
23:06 < cryptopsy> CoverSlide: if i made it to 50, i think i know my way in life
23:07 < Hupo> http://jashkenas.github.com/docco/
23:07 < CoverSlide> ha ok
23:07 < Hupo> http://blisswater.info/node/docram/docco.html << and the same with my version
23:07 < cryptopsy> yea so, you gonna talk aobut socket.io, or you wanna get personal?
23:07 < aandy> i asked if your question was about SEO because you mentioned a search + a node result you were unpleasant with. i was asking because i couldn't (and still can't) determine your question
23:07 < cryptopsy> this is the node.js channel, not the #cryptopsy channel;
23:07 < Hupo> (note that the library I'm using for highlighting doesn't have specific support for coffeescript highlighting, though)
23:07 < cryptopsy> i don't have to hide my life details, but i don't have to get verbose either
23:08 < aandy> you seem rather hostile to be in a helpchannels. take it down a notch will you?
23:08 < CoverSlide> you are complaining about emitting an event  back to the server when you'd rather the server already know that the client connected
23:08 < cryptopsy> does anyone not see that it's wrong when the server already know the user has connected, for the user to mandatorily send a 'hey im connected!' socket message?
23:08 < cryptopsy> aandy: kill yourself in #aandy, where i will not join or care about it
23:08 < BRampersad> cls
23:08 < Hupo> and my version doesn't need python nor shell commands
23:08 < aandy> okay, classified as troll. welcome to ignore
23:08 < BRampersad> Who?
23:08 < aandy> cryptopsy
23:08 < cryptopsy> telling me i'm on ignore is futile btw, (if you actually ignored me, most tech geeks don't)
23:08 < CoverSlide> there are ways of doing it, but there's more a fundamental flaw in how browsers work
23:08 < newjonaslund> hi guys, it's more javascript in general, but has anyone got a handy cross browser blob builder using either blob api or the blobbuilder() depending on support..? 
23:09 < cryptopsy> [why would i care, the answer is obviously that i don't care]
23:09 < cryptopsy> you're doing it to be dramatic, and that's offtopic
23:09 < CoverSlide> it would be great if you just sent over the client code and used the same socket as a duplex stream
23:09 < CoverSlide> but that's just not how it works
23:09 < cryptopsy> CoverSlide: socket.io is not modern despite revision less than a month ago when the functions aren't documentation
23:09 < cryptopsy> for example ...
23:10 < CoverSlide> cryptopsy: define "modern"
23:10 < BRampersad> anyone got more webapps built in node? i used to remember a bunch of them but i forgot
23:10 < cryptopsy> socket.on('connect', ...) what defines the 'connect' object?
23:10 < MitchW> wow, I htink cryptopsy just put me off #node.js for good
23:10 < BRampersad> Most likely realtime
23:10 < cryptopsy> CoverSlide: modern as in, it is not superceeded by a more practical module
23:10 < MitchW> who has that attitude towards people asking for help?
23:10 < cryptopsy> MitchW: wow, /ignore me and then plow your mom in my name
23:10 < CoverSlide> cryptopsy: what more practical module are you talking about?
23:10 < MitchW> ...
23:11 < CoverSlide> stop bitching about the way one module does things, and use the other
23:11 < cryptopsy> CoverSlide: that's the question, which you obviously don't know (neither do i, but im asking)
23:11 < MitchW> can we have an op ban cryptopsy please?  I came here to talk about node, help, etc - not get abused.
23:11 < CoverSlide> there are good and bad reasons socket.io operates how it operates
23:11 < aandy> MitchW: what was your question again?
23:11 < CoverSlide> in other words, you believe it is not practical
23:11 < cryptopsy> MitchW: then why do you miss every opportunity to talk about node and constantly place yourself in the line of fire
23:11 < cryptopsy> mind your own business
23:11 < cryptopsy> talk about node
23:11 < MitchW> aandy: don't have a question today, was just shocked by cryptopsy's attitude
23:12 < cryptopsy> wow, i'm sorry socket.on('connect' ..) offended you so bad :(
23:12 < cryptopsy> D:
23:12 < CoverSlide> certainly, doing raw websockets would be much more practical, sockjs has a lot less overhead, but then you lose a lot of features that socket.io provides
23:12 < cryptopsy> you're so buttmad but you still haven't /ignored me, so know that you can't have both, and pick whether you want to talk about node modules for socket, or want to get personal about what i think about sockets
23:16 < cryptopsy> CoverSlide: nothing raw about node automatically knows when a user have requested a page
23:16 < cryptopsy> look at the dgram function, nothing allow you to automatically create and manage a socket
23:17 < cryptopsy> certainly a larger site would not settle for this, so what do they do?
23:17 < CoverSlide> cryptopsy: you can conceive more practical ways of doing things, i understand, we all can
23:18 < CoverSlide> doesn't mean your ideas are necessarily better
23:18 < cryptopsy> CoverSlide: this is 2x the messages just for connection, its not practical for large application
23:18 < cryptopsy> half as many message for the server to understand someone is there is always a better idea
23:18 < CoverSlide> cryptopsy: here's the answer to your problem: 1) figure out a better way to do it 2) implement it
23:19 < cryptopsy> can you imagine you want to get google.com, and then google must send you a second messsage say 'hey are you actually here', and you say 'yea im here, serve my search you dick!'
23:19 < cryptopsy> CoverSlide: here's a better answer to my question 1) ask on irc whether the seemingly decrepit socket.io is deprecated
23:19 < cryptopsy> the website certainly indicates that with its lack of documentation
23:19 < CoverSlide> and your answer is no
23:19 < cryptopsy> im not the only one who thinks that, this appears in stackoverflow too
23:20 < CoverSlide> ok show me. people have opinions, some people like sockjs better, but like i said, there is always a tradeoff
23:20 < cryptopsy> CoverSlide: taking an answer on the internet have a level of confidence, like building a bridge, since you can't trust a single crackpot tech geek
23:20 < cryptopsy> this isn't a matter of opinion, its always the case when a user have connected, i should be able to know that, instead of have the user second a SECOND message
23:20 < cryptopsy> its a fact
23:21 < cryptopsy> nodejs internal functions know this, look at the syntax for socket.on
23:22 < cryptopsy> i mean for io.sockets.on , it takes the form "io.sockets.on('connection' .." , the string 'connection' doesn't appear in the client-side script, its not something the client says
23:23 < cryptopsy> therefore socket.io takes it from node, therefore node knows when a user have connected to the server
23:23 < cryptopsy> the client doesn't emit 'connection' to the socket
23:23 < cryptopsy> in my crapified chat example which i am not responsible for, it actually emits 'adduser', but this isn't necessary since theres 'connection' in the server-side script
23:23 < CoverSlide> right
23:23 < BRampersad> what are some websites using node.js calypso?
23:24 < TheEmpath> c9.io runs it i believe?
23:24 < CoverSlide> what makes you think you need the adduser event?
23:24 < cryptopsy> BRampersad: mailonline
23:24 < cryptopsy> read the author's blog
23:25 < cryptopsy> CoverSlide: nothing, i don't think its needed,  but the example have it
23:25 < BRampersad> ?
23:25 < cryptopsy> CoverSlide: you just proved my point
23:25 < CoverSlide> where did you get these examples?
23:25 < CoverSlide> not on socket.io
23:25 < CoverSlide> not on guillermo rauch's blog
23:25 < cryptopsy> CoverSlide: socket.io do it the same way
23:25 < CoverSlide> not on the github page
23:25 < CoverSlide> where? it's not there
23:25 < CoverSlide> show me where you found it
23:26 < cryptopsy> its there, they all use socket.on in the server-side after io.sockets.on
23:26 < cryptopsy> on the socket.io front page
23:26 < CoverSlide> no i'm talking about your specific example of this adduser fiasco which you have been ranting about but doesn't exist anywhere
23:27 < cryptopsy> you said
23:27 < cryptopsy> 23:19:34 < CoverSlide> not on socket.io
23:27 < cryptopsy> of course not, its a chat app, socket.io don't even give you that luxury
23:27 < cryptopsy> they use 'my other event' where a chat app would have 'adduser'
23:27 < CoverSlide> what chat app are you talking about?
23:27 < cryptopsy> typical chat app, they don't differ in this regard
23:28 < cryptopsy> i understand im being difficult here, but its not my fault
23:28 < cryptopsy> all the chat apps say 'copy and paste this'
23:28 < cryptopsy> they dont come with header liscences to know where i got the code from
23:29 < CoverSlide> ok so you don't like how these chat apps implement stuff ok you don't have to do it their way
23:29 < CoverSlide> problem solved
23:29 < cryptopsy> socket.io front page do it that way too
23:29 < CoverSlide> the examples on socket.io only demonstrate how to use eventemitters
23:29 < cryptopsy> the complete line is 'socket.on('adduser', function(username)' , username comes from that event
23:30 < CoverSlide> you're not required to emit an event when the client connects
23:30 < CoverSlide> cryptopsy: so how do you propose the client sets its username? magic?
23:30 < CoverSlide> the server should discover it via E.S.P?
23:30 < cryptopsy> i don't know, how do you propose a web server knows whos connected to it?
23:30 < cryptopsy> magic?
23:31 < cryptopsy> i know RMS looks like a wizard, but even apache did it in a routine fashion
23:31 < cryptopsy> see how it says 'function(usersname)', username is not emitted
23:31 < cryptopsy> its not like my clientside js says 'hi this is bob, im here'
23:31 < cryptopsy> it just says 'adduser'
23:31 < CoverSlide> ok what the fuck are you talking about. send me a link to what you're fucking talking about
23:32 < CoverSlide> because what you're talking about is not on socket.io, not on github
23:32 < cryptopsy> server-side js
23:32 < cryptopsy> http://i.imgur.com/RsXeo.jpg
23:33 < cryptopsy> client-side js
23:33 < cryptopsy> http://i.imgur.com/nSkRn.jpg
23:33 < CoverSlide> cryptopsy: do you know what the prompt() function does?
23:34 < cryptopsy> sure, but 'connect' is not emitted from the web-server
23:34 < cryptopsy> line 6 in client
23:34 < xtianw> 'connect' and 'connection' are internal events
23:35 < cryptopsy> i think the connect on line6 also ansers your question
23:35 < CoverSlide> it's emitted by socket.io framework, so what
23:35 < cryptopsy> you can assume that, and probably corect, but its not mentioned in the socket.io, hence the original question if anything superceeds socket.oi
23:35 < CoverSlide> yes, because it needs to open a special connection to the socket.io server
23:35 < cryptopsy> you just proved my point
23:35 < CoverSlide> and that event needs to be listened on
23:36 < CoverSlide> what alternative do you propose?
23:36 < cryptopsy> socket.io is a module
23:36 < cryptopsy> CoverSlide: there many sites that list modules and try to get the word out that these modules exist
23:36 < cryptopsy> the alternative is node.js tell me the user is connected
23:36 < cryptopsy> without the user have to send 'adduser', like we agreed before
23:37 < cryptopsy> if node.js can serve a page, it knows when a page is served, hence it knows when a user requested a page
23:37 < CoverSlide> except i already established, adduser sets the username, which it needs to receive from the client. reading the source will tell you that
23:37 < cryptopsy> i've read the source, read my comments
23:37 < cryptopsy> [in the source]
23:37 < CoverSlide> node.js doesn't have ESP, that is a limitation, but until there is a driver for mind-reading, that's going to be a flaw in all platforms
23:37 < cryptopsy> the code is self-explanatory
23:38 < cryptopsy> so this is rather groundbreaking, you're claiming nodejs don't know when a user have requested a page
23:38 < cryptopsy> you're saying nodejs don't have internal method to know what IP requested a page
23:38 < xtianw> You should define what you mean by "user"
23:38 < cryptopsy> because that a big fucking statement
23:38 < cryptopsy> xtianw: can be a real user or a spider
23:38 < cryptopsy> in this case user = something that request a page
23:38 < CoverSlide> ok, instead of 'adduser' call the event 'setusername'
23:39 < CoverSlide> happy now?
23:39 < xtianw> Like all the data that is associated with a request is on the request object
23:39 < CoverSlide> problem fucking solved
23:39 < cryptopsy> no its not
23:39 < xtianw> A websocket server is a different thing
23:39 < cryptopsy> any server that serve a page knows where to send it, thats the user connecting to it
23:40 < cryptopsy> the name is not important, its the unique identifier
23:40 < cryptopsy> the name is just an alias, people can change it, it doesnt mean anything
23:40 < xtianw> But that's all adduser does
23:40 < cryptopsy> someone can refresh as 'bob' then 'james', whatever
23:40 < xtianw> Set the username
23:40 < cryptopsy> xtianw: the methods in that send data to the user
23:41 < cryptopsy> so it does more than just set the name
23:41 < xtianw> What?
23:41 < cryptopsy> do not see the functions are nested, and those are methods (class) ?
23:42 < xtianw> I really don't know what you're so upset about
23:42 < CoverSlide> honestly i can't figure it out either
23:42 < cryptopsy> xtianw: you joined the converstion late
23:42 < CoverSlide> you don't like how socket.io does things, write your own
23:42 < cryptopsy> the problem is, the server knows when the user connected after the user sends 'adduser', the username isn't important
23:43 < CoverSlide> cryptopsy: the server knew that before the adduser event too
23:43 < xtianw> The server knows the user connected after the connection event is fired
23:43 < cryptopsy> exactly
23:43 < xtianw> What's the problem
23:44 < cryptopsy> socket.io prototypes on their page don't operate this way
23:44 < xtianw> Yeah they do
23:44 < CoverSlide> except that they do
23:44 < xtianw> The connection event isn't emitted from your front end code
23:44 < xtianw> It's emitted by the socket.io module when it successfully establishes a connection
23:47 < cryptopsy> socket.io emits 'connect' , you sure?
23:47 < mattvv_> Anyone seen this http response before? https://gist.github.com/d1a231cf6f222c7ecd44
23:47 < cryptopsy> if we analised packets, would we seen that?
23:48 < cryptopsy> because that's still a 4-message sequence for establishing a user have connected
23:48 < cryptopsy> user connects, socket.io emits "connect" to the user, user emits "connection" to the server
23:48 < CoverSlide> when the transport connects, all you would see is the packets from the transport. the 'connect' event gets emitted internally within the client, not from the server
23:49 < CoverSlide> the server does not emit a 'connect' event
23:49 < CoverSlide> the client does
23:49 < cryptopsy> CoverSlide: xtian is saying it does
23:49 < xtianw> No
23:49 < cryptopsy> client has 'socket.on('connect'), so its the clien that receives it (not emits it)
23:49 < xtianw> I'm saying that you don't have to manually emit either of those events
23:49 < CoverSlide> the client never received 'connect'
23:49 < CoverSlide> it just gets emitted internally
23:50 < cryptopsy> xtian either mistype or says that directly
23:50 < cryptopsy> 23:38:50 < xtianw> The connection event isn't emitted from your front end code
23:50 < cryptopsy> 23:39:04 < xtianw> It's emitted by the socket.io module when it successfully  establishes a connection
23:50 < CoverSlide> cryptopsy: the 'connection' event is server-side. it gets emitted by the internals of the module when a transport connects
23:51 < rauchg> the server deals with multiple `connection`s, the socket `connect`s only once on the browser
23:51 < CoverSlide> the client doesn't emit a 'connection' event, it just uses the emitter semantics
23:52 < CoverSlide> just like the server doesn't emit a 'connect' event to the client, the transport internally connects, and uses the eventemitter semantics  to emit a 'connect' event on the client so it knows when it's connected
23:53 < cryptopsy> is .on strictly for incomming data, or can it be internal data?
23:53 < CoverSlide> .on comes from EventEmitter
23:53 < CoverSlide> EventEmitter has nothing to do with data.
23:53 < cryptopsy> is EventEmitter part of node?
23:53 < cryptopsy> or socket.io?
23:53 < CoverSlide> it can be for internal stuff, or external
23:53 < cryptopsy> ^ and what's the proof for that, other than this example?
23:53 < CoverSlide> EventEmitter is part of node
23:54 < CoverSlide> cryptopsy: the source code
23:54 < cryptopsy> what file is it defined in?
23:54 < cryptopsy> just wanna make sure
23:55 < Torsten85> Hi there, I've some trouble finding the nodeJS counterparts of some ruby openSSL functions. Already read the in documentation about crypto but couldn't figure it out yet… Could someone help me?
23:55 < CoverSlide> on the client side or the server side? because on the client side, it's defines in events.js in the node core lib
23:55 < cryptopsy> someone in the javacript channel tells me server emits 'connect'
23:55 < cryptopsy> and he knew right away my question was nodejs related
23:55 < cryptopsy> dude seems like a pro
23:56 < CoverSlide> the client side for EventEmitter is here: https://github.com/LearnBoost/socket.io-client/blob/master/dist/socket.io.js#L481
23:56 < CoverSlide> 'connect' get emitted here: https://github.com/LearnBoost/socket.io-client/blob/master/dist/socket.io.js#L1890
--- Log closed Tue Oct 02 00:00:34 2012
