--- Log opened Mon Jul 09 00:00:39 2012
00:27 < rrjamie> What is considered a typical ratio of total memory RSS to HeapTotal? I'm seeing the whole process clock in at 400MB vs a v8 Heap size of just 50MB? It seems stable around there after running for about 12 hours
00:28 < Benvie> typeof null isn't enabled with --harmony btw
00:29 < Benvie> it's under its own flag and not included under the main harmony one
00:29 < Benvie> and the functions that Map, Set, and WeakMap DO have are API stable
00:29 < Benvie> they're just lacking the complete featureset
00:30 < Benvie> in practice it means Set and Map are mostly useless, but WeakMap actually is feature complete as well as API stable and is extremely useful
00:33 < Benvie> the proxy implementation is in fact out of date, though the creator of the API has a library that creates the accepted API by using the original API
00:34 < Benvie> long story short, WeakMap is good to go =D
00:37 < Benvie> also reading this, I'm confused at what mraleph was saying since attempting to use a primitive as a key in a weakmap will throw a type error and is disallowed by the spec. Maybe he means doing it from the API, not js
00:46 < mmalecki> `func({ a: 42, b: 'foo', c: 'lol' }, ['a', 'b']) === { a: 42, b: 'foo' }` - how'd you guys call `func`?
00:49 < CIA-93> libuv: Ben Noordhuis master * rc5761f7 / src/unix/async.c : unix: speed up uv_async_send() some more still - http://git.io/G6iQBw
00:49 < Benvie> you need to make that function yourself because js doesn't allow using comparison operators in that manner
00:50 < Benvie> =D
00:50 < mmalecki> Benvie: lol
00:50 < Benvie> well maybe
00:51 < Benvie> func.toString = function(){ return 'lol' }; o = { a: 42, b: 'foo', toString: function(){ return 'lol' } }; but that only works for == =()
00:51 < packingtown> I am using cluster core module, and trying to listen on a unix socket instead of a port and I'm getting Error: listen EADDRINUSE
00:51 < mmalecki> hahaha
00:51 < dmilith> packingtown: same here ;]
00:52 < dmilith> packingtown: call process.exit on process.on "unhandledException"
00:52 < dmilith> and run your code with nodemon
00:53 < packingtown> dmilith: process.on('unhandledException', function() { process.exit } )); just anywhere in app.js?
00:53 < dmilith> gosh, don't You discovered coffee?
00:53 < dmilith> yea, something like that
00:54 < dmilith> but exit is a function
00:54 < dmilith> ()
00:58 < daveluke> anyone here done a socket.io app with nodejitsu?
01:00 < kilian_> is there any nodejitsu guy around?
01:01 < mmalecki> yeah, we're talking in #nodejitsu already
01:07 < jesusabdullah> daveluke: Yes. There are a number of socket.io apps running on our platform.
01:08 < daveluke> jesusabdullah, i wanted to see an example, so i can see if theres any differences in the connection part
01:09 < jesusabdullah> daveluke: https://github.com/nodeapps/boilerplates/tree/master/socket.io
01:11 < owen1> how do u guys avoid using port 80 in production? i heard about 3 ways - start with 80 and after you got a file descriptor, change to differnt port, using iptables, and the 3rd option - using reverse proxy.
01:12 < bnoordhuis> owen1: you heard wrong about the first option - what you do is bind to port 80, then drop root privileges
01:12 < bnoordhuis> owen1: a non-privileged port + iptables is often simplest to set up imo
01:13 < jesusabdullah> I'll second that, you really just have to learn how2iptables
01:18 < owen1> bnoordhuis: great. thanks
01:19 < owen1> jesusabdullah: got it
01:19 < owen1> sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8000
01:19 < owen1> (according to felix)
01:21 < owen1> does anyone using the v8 debugger? node debug server.js ?   how to print variables?
01:21 < Jacky> console.log doesn't work for yeah
01:22 < Jacky> you?
01:22 < Jacky> o_O
01:23 < owen1> Jacky: i get i is not defined
01:23 < owen1> var i = 1; debugger;
01:23 < Jacky> odd
01:23 < owen1> also, i see list and watch, but don't know how to use them.
01:24 < owen1> Jacky: i am in the context of a request of http.createServer
01:28 < tim_smart> owen1: I go into the repl
01:29 < tim_smart> Then just: varname<CR>
01:33 < owen1> tim_smart: Jacky http://pastebin.com/fiXvm2RB   i is not defined
01:34 < owen1> node debug server.js
01:46 < tim_smart> owen1: Probably something to do with v8 optimization
01:47 < tim_smart> Noticed you weren't using it anywhere, so it got dropped.
01:47 < tim_smart> Maybe, not sure.
01:47 < dmilith> um
01:47 < dmilith> how to stat a directory under node 0.8.1 ?
01:47 < dmilith> fs.stat returns ENOENT on existing dir? :o
01:49 < tim_smart> owen1: Oh no, it works fine. Just make sure you `continue` to the debugger statement
01:50 < tim_smart> By default it breaks at the first line of the file./
01:54 < dmilith> can I invoke npm from node code?
01:55 < deoxxa> dmilith: require("npm")
01:55 < dmilith> thx
01:55 < EhevuTov> dmilith, can you evoke the CLI? I would think it'd be possible. Like, an exec() ?
01:56 < EhevuTov> oh, module would be better :-)
01:56 < EhevuTov> anyone know how to increase the TIMEOUT on dns.resolve4() ?
02:13 < owen1> tim_smart: let me see
02:16 < owen1> tim_smart: i hit cont, now i am in line #9 where the debugger is. i try console.log(i) but get undefined
02:17 < tim_smart> owen1: Don't use console.log, just use i
02:17 < owen1> tim_smart: i get the same result
02:36 < owen1> in order to get the payload of post or put i agraggate the string i get in the data event. is there an abstruction to this code, maybe something like request package for http.request?
02:39 < cpsubrian> I've got a 'class' that inherits from EventEmitter.  I would like to specify a listener for all current instances of that class and all future instances of that class.  Is there any pattern for doing this?
02:48 < rrjamie> cpsubrian: do it in the constructor?
02:49 < cpsubrian> 3rd party code needs to be able to add/remove handlers …. 
02:50 < cpsubrian> rrjamie: was thinking of adding a class level handlers object that gets bound in the constructor or something
02:50 < cpsubrian> though.. i guess that would only effect future instances
02:51 < rrjamie> there's this http://nodejs.org/api/events.html#events_event_newlistener
02:52 < rrjamie> of course, your class itself would have to emit events
02:52 < cpsubrian> rrjamie: That got me thinking… so my 'Model' class creates event-emitter instances .. but could the constructor itself be an event emitter?
02:53 < rrjamie> cpsubrian: indeed it could be
02:53 < cpsubrian> I should be able to do: `EventEmitter.call(Model)` right?
02:55 < cpsubrian> Or wait.. that wouldnt quite work.. need to mix-in event emitter into the Model constructor 
02:56 < cpsubrian> something like underscore's extend: `_.extend(EventEmitter.prototype, Model)`
02:56 < cpsubrian> other way around I guess
03:04 < jaseemabid> [HELP] I just want to know if require('./somefile.js') is async or sync. 
03:09 < rrjamie> jaseemabid: sync
03:14 < jaseemabid> <<var f1 = require('file1'), f2 = require('file2');>> fails, Error: second cant find first one and <<var f1 = require('f1'); var f2 = require('f2');>> works w/o any problem. Is this expected ?
03:15 < timoxley> isaacs if I have a continuously running build tool for development, e.g. grunt, is there (or should there be) a default npm script I could use for that? all of the built-in scripts, e.g. update/publish/install etc seem to be about terminating scripts that run once.
03:16 < timoxley> e.g. "npm dev" would set up dev environment
03:18 < timoxley> obviously I could use run-script, but a convention for scripts that need to run in dev could be useful
03:27 < jwulf> dbslayer or db-mysql?
03:28 < lenage`> hi, there is a js test tools in terminal, use jasmine, does anyone know the name?
03:29 < bitbit> Hi, is there a way to debug the context of child_process.fork(modulePath) from node-inspector or any similar tool?
03:29 < lenage`> i rememberd which name started with "m"
03:29 < lenage`> mo*?
03:35 < jwulf_> sorry, i got bounced so I'll repeat my question:
03:36 < jwulf_> I'm doing node.js + mysql
03:36 < deltab> lenage`: would it appear in a list of packages?
03:36 < airportyh> lenage: testem?
03:36 < jwulf_> should I use the NYTime's dbslayer, or nodejsdb.org's db-mysql
03:37 < airportyh> lenage: mocha?
03:40 < felixge> jwulf_: neither
03:41 < felixge> jwulf_: use node-mysql
03:41 < brianloveswords> jwulf_ https://github.com/felixge/node-mysql
03:41 < felixge> :)
03:41 < felixge> brianloveswords: +1 : p
03:41 < teadict> I've used Sequelize, 'tis cool
03:42 < felixge> teadict: Sequelize still uses mysql v0.9.x - lame :)
03:42 < jwulf_> felixge, nice documentation
03:43 < jwulf_> should i try to manage database connection pooling, or just create a new connection with every query?
03:44 < jwulf_> (probably a really dumb question - sorry, I'm a n00b)
03:46 < felixge> jwulf_: don't try connection pooling if you're a noob
03:46 < felixge> create 1 connection per incoming http request
03:47 < felixge> I'll add connection pooling support once I find the time
03:47 < jwulf_> do the other ones support connection pooling yet?
03:47 < felixge> don't know, don't care
03:47 < felixge> :)
03:48 < tbranyen> well thats a strange attitude
03:48 < felixge> tbranyen: why?
03:49 < tbranyen> felixge: dunno just feeling antagonistic
03:49 < felixge> tbranyen: :)
03:50 < felixge> well, if people point out something the other modules do better, I'll certainly try to improve mine
03:51 < jwulf_> felixge, dbslayer uses connection pooling and touts it as a significant feature - for its scalability
03:51 < jwulf_> according to stack overflow you can use node-mysql with node-pool to get connection pooling
03:51 < jwulf_> http://stackoverflow.com/questions/6731214/node-mysql-connection-pooling
03:51 < tbranyen> felixge: you should just cherry-pick their commits!
03:51 < jwulf_> i'll use mysql-node and look at node-pool later, once i have it working
03:52 < felixge> jwulf_: connection pooling will not make things much faster (unless it's done it an unsafe and stupid way)
03:52 < ccowan> I'm using node-pool and node-mysql together
03:52 < jwulf_> ccowan, have you done any performance tests on pooled vs non-pooled?
03:52 < felixge> yeah node-pool should work, as it's generic IIRC
03:53 < felixge> tbranyen: can't cherry pick their commits, their modules are wayyyy different
03:53 < CIA-93> node: Nathan Rajlich v0.8 * rd3d83d7 / (src/node.cc test/simple/test-process-hrtime.js): process: throw a TypeError when anything but an Array is passed to hrtime() - http://git.io/9ahepg
03:53 < ccowan> jwulf_: I did some performance testing but I don't have any thing to share numbers wise
03:54 < timoxley> lenage` mocha
03:54 < ccowan> I did notice an improvement when I used connection pools
03:54 < tbranyen> felixge: urgh have you even tried???
03:54 < tbranyen> felixge: i was thinking about like how djs make mashups using different songs with similar chord progressions
03:54 < jwulf_> ccowan, thanks
03:54 < tbranyen> need to make a mashup repo full of cherry-pick progressions
03:54 < felixge> tbranyen: the only time connection pooling may make a difference is on high latency connections to your db
03:55 < ccowan> I have a utils library where I setup the connection pool… so anytime I need a mysql connection I call utils.pool.mysql.acquire(function (err, client) {})
03:55 < jwulf_> i guess since it's single-threaded memory is not an issue, unless it's leaking
03:55 < ccowan> then do my stuff
03:55 < jwulf_> the only thing would be the time taken to instantiate a connection
03:55 < jwulf_> felixge, do you have any metrics on how long it takes to create a connection? 
03:56 < ccowan> the only thing you need to remember is to call utils.pool.mysql.release(client)
03:56 < ccowan> otherwise you will drain the pool and hang the app
03:56 < ccowan> I also run my app in cluster mode
03:57 < brianloveswords> jwulf_ meh, I wouldn't worry about pooling unless you know your database is going to be a bottleneck, better to get the app working first.
03:57 < ccowan> and have a bunch of async calls to mysql per request (our data model is a legacy mess)
03:57 < ccowan> our biggest bottleneck is the database
03:57 < felixge> tbranyen: keep this in mind: If you're not sending a COM_CHANGE_USER after releasing a connection back into the pool, you're running big risks, as mysql connections are stateful
03:57 < felixge> (COM_CHANGE_USER is the way to reset the state of a connection without destroying the socket)
03:57 < tbranyen> felixge: dats cool, i probably won't be using mysql again for a long time tho
03:58 < tbranyen> and if i do, it'll be in heap mode
03:58 < ccowan> We are starting to cache a bunch of it in Redis to help simplify and speed things up per request.
03:58 < TimeTurner> anyone seen performance improvements or the like with redis vs memcached?
03:58 < felixge> more importantly: do not worry about performance unless you have a benchmark showing you have a problem
03:59 < brianloveswords> +1 felixge 
03:59 < felixge> (and I define problem as: You're app will fail it's mission unless you improve performance)
03:59 < felixge> generally speaking your relational database will be your bottleneck, not your app servers
03:59 < jwulf_> so i should call connection.end at the end of my query callback function?
04:00 < TimeTurner> so why use relational at all?
04:00 < jwulf_> or is the query method synchronous?
04:00 < felixge> jwulf_: I would recommend creating one connection per incoming http request
04:00 < jwulf_> TimeTurner, what do you recommend? Triples?
04:00 < jwulf_> or something even more esoteric
04:00 < EhevuTov> yeah, non-sequential disk I/O is usually the bottleneck when interfacing with a database
04:01 < felixge> TimeTurner: you use a relational database if you have relational data and want to develop your app quickly.
04:01 < EhevuTov> TimeTurner, if you're going to be using "join", you'll want to use a relational db
04:01 < brianloveswords> Some data just wants to relate to other data, man
04:01 < felixge> TimeTurner: feel free to use a "NoSQL" db for the job, but don't be surprised if you find yourself developing relational database features in your app code :)
04:02 < jwulf_> felixge, the first example on the github page looks like .query is synchronous
04:02 < jwulf_> because it calls connection.end outside the callback function
04:02 < felixge> jwulf_: continue reading :)
04:02 < TimeTurner> well that's definitely true. I have quite a bit of client-side "joins" going on with mongo...
04:03 < felixge> specifically the next paragraph: "Every method you invoke on a connection is queued and executed in sequence."
04:03 < TimeTurner> do you guys recommend postgres or mysql?
04:03 < TimeTurner> haven't done a lot of sql stuff
04:03 < felixge> TimeTurner: mysql has a better ecosystem / community, postgres is done by more intelligent people :)
04:03 < felixge> pick your poising
04:03 < felixge> * poison
04:04 < jwulf_> felixge, ok, so connection.end() waits for the query to execute
04:04 < felixge> jwulf_: correct
04:04 < jwulf_> and I take it that connection.end is asynchronous?
04:04 < Lorentz> I don't know, not after being taken over by oracly
04:04 < TimeTurner> lol. I guess I'll get comfortable with mysql then transition over to postgres when I feel comfortable enough then
04:04 < felixge> jwulf_: it works just like a socket in node
04:04 < TimeTurner> thanks felixge
04:04 < felixge> calling end() also waits for all write()'s to finish before closing
04:04  * jwulf_ files that information away
04:05 < Lorentz> and now has bunch of forks too now
04:05 < jwulf_> k, thanks
04:05 < jwulf_> learnt something about sockets just then :-)
04:05 < jwulf_> felixge, you might consider making a note of that on the page
04:06 < jwulf_> hang on, let me make sure that I have this right...
04:06 < felixge> jwulf_: happy to consider pull requests, but IMO the description is fairly clear (unless you're also new to node.js, in which case my Readme might not be the ideal starting point)
04:06 < jwulf_> felixge: is this correct
04:07 < jwulf_> connection.end() is asynchronous.  Calling this will wait for your queries to finish before closing the connection, but will not block your thread execution.
04:07 < felixge> jwulf_: yes
04:07 < jwulf_> boom
04:07 < jwulf_> awesome, thanks
04:07 < felixge> the mysql protocol is sequential, so you can't execute anything in parallel over a single connection
04:08 < felixge> so in order to make my library easier to use, I queue up anything you may want to do with it
04:09 < ccowan> Correct me if I'm wrong but wouldn't you want to create a pool of connections that never close so you don't have to pay the performance cost of opening then and run as much stuff async as possible.
04:09 < felixge> ccowan: you are almost certainly thinking about performance on the wrong level
04:09 < jwulf_> ccowan, depends on whether the performance overhead of opening connections warrants writing code to manage connections
04:10 < felixge> but yes … if you want to squeeze the last drop of performance out of an already highly optimized system, yes
04:10 < jwulf_> and possible bugs that arise from that code
04:11 < felixge> ccowan: unrelated, you're confusing async with parallel
04:11 < ccowan> right… I meant parallel
04:11 < ccowan> I'm using the async library
04:11 < ccowan> (long weekend)
04:11 < felixge> ccowan: executing in parallel may yield big returns, especially if latency is involved
04:11 < felixge> YMMV
04:11 < ccowan> which is what we are doing
04:11 < jwulf_> the simple thing would be to run 1000 requests in a loop, no?
04:12 < jwulf_> one with connection pooling, one without
04:12 < jwulf_> and time them
04:12 < jwulf_> to take the pooling library and code out,
04:12 < jwulf_> you just compare 1000 queries through a single connection
04:12 < jwulf_> vs 1000 queries with connection creation
04:12 < jwulf_> that gives you the connection creation overhead
04:13 < jwulf_> because a pooling library will also have some kind of overhead too
04:13 < standoo> hello
04:13 < ccowan> I started using the node-pool library because we have a bunch of database requests that we could do in parallel and it gave use a performance boost.
04:13 < felixge> jwulf_: what kind of overhead is a pooling library supposed to have?
04:13 < jwulf_> it must do something
04:13 < jwulf_> so that takes time
04:13 < felixge> jwulf_: yes, but at least 3 orders of magnitude faster than any I/O
04:14 < felixge> so you will not notice it
04:14 < felixge> but feel free to explore this yourself :)
04:14 < jwulf_> but the comparison is between connection.create() vs pooled.connection.reuse()
04:14 < jwulf_> yes, that's going to be my helloworld
04:14 < jwulf_> 1000 queries through one connection vs 1000 queries + connection.create()
04:14 < jwulf_> to time the overhead of a connection creation
04:15 < felixge> jwulf_: see my comment on com_change_user
04:16 < felixge> jwulf_: but yes, this will give you some results
04:16 < felixge> but be careful to interpret them without digging deeper
04:17 < ccowan> Doesn't the pg library have connection pooling built in?
04:17 < ccowan> jwulf_: Is this a new project or a legacy thing?
04:17 < jwulf_> ccowan, it's a new project
04:18 < ccowan> No slam against MySQL but have you considered using Postgres?
04:18 < jwulf_> i've never used Postgres
04:19 < jwulf_> only mysql
04:19 < jwulf_> is there a compelling reason to choose postgres over mysql?
04:19 < Lorentz> did you know mysql cluster doesn't do foreign keys?
04:20 < Lorentz> you know, if you ever thought of growing out of more than one machine for mysql
04:20 < ccowan> I used Postgres a lot before I started working at Yahoo! (for some reason they hated postres)
04:21 < jwulf_> lorentz, interesting - i'll keep that in mind
04:21 < jwulf_> i'll go with mysql for now - change one variable at a time
04:21 < jwulf_> but i'll look at postgres again when it comes time to scale up
04:21 < ccowan> The addon's are pretty awesome
04:22 < Lorentz> jwulf_: just be careful; it might have been worth it to just go postgres now if there's no existing db to deal with
04:22 < Lorentz> but it's up to you
04:23 < ccowan> http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL
04:26 < Lorentz> nice link, thanks
04:26 < Lorentz> I shall commit it to memory
04:28 < jwulf_> lorentz, should be easy to switch later, this is light-weight prototyping at this stage for proof-of-concept
04:28  * jwulf_ also files that link away FFR
04:31 < jwulf_> felixge, i thought your name was familiar
04:31 < jwulf_> i bought Manuel Kiesslinger's book and it came with your book
04:31 < felixge> my book?
04:31 < felixge> I haven't written any
04:31 < felixge> :)
04:32 < brianloveswords> felixge well you might as well now!
04:33 < felixge> brianloveswords: I want to write "Idiomatic Node.js"
04:33 < felixge> but no time, so super unlikely to happen
04:33 < felixge> it's more likely that I'll dump some more guides on github
04:33 < felixge> and link them up together somewhere
04:36 < brianloveswords> felixge you definitely should, that would be a great help to many people.
04:36 < jwulf_> ah, sorry i have it now
04:36 < jwulf_> it was this blog post:
04:36 < jwulf_> http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb
04:37 < jwulf_> sorry, i've been cramming a lot of information into my head, but I knew I'd read something that you'd written
04:37 < jwulf_> great analogy
04:37 < jwulf_> in there btw
04:41 < owen1> http://vimeo.com/40554843 mikeal presantation, watch 7:30-8:00.  he say that node, unlike ruby/php allow you to move your cache from an external process into the node (request) process. can someone explain why and how? 
04:41 < owen1> is it related to the clojure of js maybe?
04:41 < owen1> clojures + non-blocking
04:46 < owen1> oh. he mentions clojure!
04:47 < owen1> and dnode
04:48 <@maxogden> @fatmikeal
04:49 < deltab> owen1: do you mean closures? Clojure is the name of a particular language
04:51 < owen1> deltab: yeah, js closures
04:52 < owen1> deltab: it looks like thanks to closures, in node you can keep the state between request/response. and in ruby/php you have to use external process/tool like memcached. 
04:52 < owen1> but even in ruby you can have $ - global variables, so u'll maintain state between requests. 
04:53 < owen1> i am not sure if i understand what he means.
05:03 < owen1> he was also talking about not using reverse proxy. or at least that's what i understood.
05:17 < KingDosser> Can someone provide recommendations about the best scalable cloud platforms to deploy to?
05:19 < CIA-93> node: isaacs v0.8 * rd2cd456 / src/node_zlib.cc : zlib: Call inflateEnd for UNZIP. Fixes memory leak. - http://git.io/gCNaFw
05:20 < KingDosser> Also, is Express useful if you only want a server with HTTP requests and Socket.io Push Service?
05:22 < CIA-93> node: isaacs v0.8 * rbf539f9 / src/node_zlib.cc : zlib: Call inflateEnd for UNZIP. Fixes memory leak. - http://git.io/25NvbQ
05:23 < domo> would connect provide the best logging for an http server?
05:23 < domo> or are there other popular packages out there
05:24 < owen1> KingDosser: u can use http.createServer instead of express
05:25 < KingDosser> owen1: Thought so. But is express compulsory to deploy to node?
05:27 < owen1> KingDosser: no. in fact, issac (#1 node guy) is working on the next version of npm website and he is not using express
05:27 < owen1> KingDosser: look at this, i also have a link to issac's repo - https://github.com/oren/node-website-template
05:27 < KingDosser> owen1: Sorry, I meant: to deploy to heroku
05:28 < owen1> KingDosser: good question. let me know when u find out. i'll be surprised if that's the case.
05:30 < owen1> domo: can u use console.error, console.war etc?
05:30 < owen1> warn
05:47 < deoxxa> is there any way to run tests serially with vows.js?
05:48 < deoxxa> specifically, i need to ensure the order of the tests i'm running
05:49 < deoxxa> i've hacked up a horrible object-nesting thing that makes sure there's only one test on each level, but it makes for very ugly spec output
05:51 < othiym23> deoxxa: it's possible to write Vows suites as a set of serial dependencies, but it gets pretty gnarly and doesn't feel particularly BDD to me
05:51 < othiym23> deoxxa: I "solved" that problem by switching to mocha and not having to deal with topics et al
05:51 < deoxxa> i'm abusing vows something crazy right now
05:51 < deoxxa> i'm actually not even testing javascript code, haha
05:52 < deoxxa> i'm using it as a wrapper around a library i wrote to control hardware devices remotely and testing the installation and configuration of a completely separate piece of software
05:53 < deoxxa> i'll take a look-see at mocha
05:53 < othiym23> deoxxa: for what you're doing, you might want to look at nodetap, which is even simpler
05:53 < othiym23> sorry, node-tap
05:53 < deoxxa> yeah, that's what i was originally going to go with, but it looked "simpler" to use vows
05:53 < othiym23> nothing about vows is simple
05:54 < deoxxa> as i have learnt
05:54 < othiym23> it's got a really pretty web site, though :D
05:55 < deoxxa> i've used it for other things before, and it's pretty nice for testing regular old javascript code with no state
05:55 < deoxxa> but this use of it is farrrr outside the intended usage
05:56 < owen1> othiym23: deoxxa did u guys try using node's asserts before using an userland package?
05:56 < deoxxa> i'm already using assert
05:58 < othiym23> test runners != assertion libraries
06:00 < SubStack> tap <3
06:04 < owen1> I knew substack will chime in. i think he got some bot that monitor this chat for some keywords
06:05 < owen1> and the bot sends relevant messages
06:06 < SubStack> tap has some nice properties
06:06 < SubStack> 1) asynchronous by default
06:07 < SubStack> 2) call a function to create a test instead of exports
06:07 < SubStack> the upshot of 2) is that you can just run your tests using either the harness program or just using node
06:08 < othiym23> yeah, being able to run tests without the test-runner is pretty sweet
06:08 < SubStack> and you get a test handle that is like assert but has some nice extra things and the handle is bound to the particular test
06:08 < SubStack> I find that preferrable to patching the global assert module
06:08 < brianloveswords> I'm -1 on vows after writing hundreds of tests in it.
06:09 < brianloveswords> Been using mocha for new things, gotta check out tap.
06:09 < othiym23> it seems to be a pretty universal property that to know vows is to not love it
06:09 < SubStack> pretty much all of my modules that have tests use tap now
06:09 < SubStack> another thing that rocks about tap is that there's no global test assertiony things
06:09 < zipp|remote> Nexxy: a second congrats! :D Maybe you're online and will get this one in real-time, though I'm sure as a new mommy you're quite busy
06:10 < SubStack> like describe() or .should() or whatever
06:10 < SubStack> I like that
06:10 < zipp|remote> SubStack: I know this is stupid, but are you cool with a -v for fleet?
06:10 < covi> Hi all. I run 'npm install express', but after that the command 'express' does not work. It seems it is not installed properly. What can I do?
06:10 < SubStack> zipp|remote: -v?
06:10 < brianloveswords> covi: if you want it installed globally, add -g
06:10 < brianloveswords> `npm install -g express`
06:10 < zipp|remote> substack: "fleet version" or "fleet -v"
06:11 < SubStack> ah
06:11 < SubStack> that'd be fine I think
06:11 < zipp|remote> Because I'm looking at deploying with it, and I want to know what freaking version I've got installed on a host lol
06:11 < othiym23> SubStack: tap's pretty awesome for simple stuff, but I like mocha better when I'm wearing my BDD hat
06:11 < covi> brianloveswords: thanks. can I then remove the locally installed folders?
06:11 < othiym23> abortions for some, tiny American flags for others!
06:11 < brianloveswords> zipp|remote and what's wrong with less `which fleet`?!!?!
06:11 < brianloveswords> (kidding)
06:11 < SubStack> othiym23: I dislike DDs myself
06:11 < SubStack> get ideology out of tests
06:12 < zipp|remote> Haha
06:12 <@Nexxy> zipp|remote: thanks! i got the hilight on my phone! :)
06:12 < SubStack> just write tests
06:12 < othiym23> SubStack: I hear you, but I'm lazy, yet I like having well-tested code
06:12 < othiym23> it makes me friendly to a certain amount of bondage and discipline
06:12 <@Nexxy> we are super happy
06:12 < SubStack> I'm not sure how bdd helps with that
06:13 < zipp|remote> Nexxy: Yayayay :D
06:13 <@Nexxy> finally time to sleep
06:13 <@Nexxy> 24 hours of this lol
06:13 < brianloveswords> covi: you can, but make sure to have `express` in your package.json for your app.
06:13 < SubStack> Nexxy: pleasant REM cycles!
06:13 < othiym23> yes! congrats to Nexxy and teh Natasha!
06:13 < shavus> anyone know about good screencasts for node.js?
06:13 < zipp|remote> lmao yeah, I can imagine you're a wreck :P But hey! At least it didn't happen while at Node conf. Name, btw?
06:13 <@Nexxy> sorry, 27 hours!
06:14 < SubStack> and a productive seratonin synthesis session
06:14 < brianloveswords> Nexxy congrats!!
06:14 < SubStack> brain chemicals woo
06:14 <@Nexxy> thanks!!!
06:14 <@Nexxy> his name is Elliott Rose
06:14 < distracteddev> Nice, Grats Nex!
06:15 < othiym23> SubStack: I dunno, man, writing describes and shoulds just helps me get in the zone when I'm writing features
06:15 <@Nexxy> Natasha was stressed to not deliver while I was on stage lol
06:15 < othiym23> SubStack: something like TAP works a lot better for me when I'm hacking on shit and just want to see what I can get working
06:15 <@Nexxy> thanks distracted!
06:15 < othiym23> brains, what you gonna do
06:15 <@Nexxy> time to pass out
06:17 < distracteddev> One + for BDD is that the gists of your tests are probably easier to read by a 3rd party.
06:17 < distracteddev> but after a while it just feels like I'm renaming certain functions so it sounds like I'm describing behavior..
06:17 < brianloveswords> distracteddev https://github.com/isaacs/node-tap/ it looks like you can do BDD-y type things with tap
06:17 < brianloveswords> `test("make sure the thingie is a thing")`
06:18 < distracteddev> brianloveswords: Oh yeah, I'm A tap guy all the way, simply because I dont need a runner and I like to dev in my REPL
06:18 < othiym23> one thing I do like about Mocha (a lot, to the point that it's basically the first thing I mention whenever I tell anyone outside Node-land about it) is that it doesn't have any assertions, expectations, or matchers in it
06:19 < brianloveswords> I'm about to give a shot now, I only have a handful of tests for the things I'm writing so I'm gonna just throw 'em out and see how tap treats me.
06:19 < othiym23> just the framework
06:19 < distracteddev> Tap > Mocha > Vows     
06:20 < brianloveswords> You forgot plain ol assertions before vows.
06:20 < distracteddev> BUT, nodejitsu's API-easy module takes all the crap away from vows and gives you one crazy easy framework to test your REST apis
06:20 < brianloveswords> Oh god, I love nodejitsu and all, but I hate that module.
06:20 < distracteddev> lol
06:21 < brianloveswords> It's impossible to figure out where a test failed with that shit.
06:22 < distracteddev> ?? It tells you what it expected and what it got, then it shows you the line whhere the assertion failed I believe
06:22 < brianloveswords> Maybe for extremely simple workflows with no authentication it's okay, but anything more complicated it becomes a huge mess.
06:23 < jesusabdullah> api-easy seems like a good idea with a few important missing gaps to me, though I haven't had to use it
06:23 < jesusabdullah> I've used vows enough to have a reasonable feel for it. I appreciate the nested data structure thing
06:24 < jesusabdullah> like, that the shape of the data structure changes the order in which tests are executed, and allowing you to do the whole "macros" thing as much as a misnomer that is
06:24 < jesusabdullah> that said, there's a lot of other hullabaloo around that which makes using vows a little funky sometimes
06:25 < jesusabdullah> and I don't actually like the topics api very much, it's a little too magical for me
06:25 < jesusabdullah> I like interfaces with more orthogonality than that
06:25 < brianloveswords> jesusabdullah the topics api is one of the major reasons I hate vows.
06:25 < jesusabdullah> Yeah, I mean
06:25 < othiym23> brianloveswords: +1
06:25 < jesusabdullah> I think sometimes a defined topic can be a good thing
06:25 < jesusabdullah> but I don't like that there are at least 3 ways to pass a topic down to the testing scope
06:26 < jesusabdullah> but really what I don't like is the test runner
06:26 < jesusabdullah> I've decided I very much like it when tests can be ran standalone, but vows does the old-school exports-based testing thing
06:26 < distracteddev> In the end, as long as your writing tests, your doing it better than most :p
06:27 < distracteddev> time to get some some sleep. Night night nodelings
06:27 < jesusabdullah> truth be told, my favorite test framework right now probably is node-tap
06:27 < distracteddev> jesusabdullah: +1
06:27 < jesusabdullah> I've been thinking about a vow-running helper that works with node-tap
06:27 < jesusabdullah> if only for backwards compat
06:28 < distracteddev> Whats that test framework that featured an ascii train, or a plane taking off?
06:28 < othiym23> mocha
06:28 < jesusabdullah> so, like, test(function (t) { vow(t).batch({}).batch({}); }); may[D[D[D[D[D[D[D[D[D[C[Cbe
06:28 < othiym23> mocha's got a ridiculous number of runner styles and reporter UIs
06:29 < distracteddev> I haven't touched it yet, went straight to tap after vows. Will have to check it out next project
06:29 < distracteddev> Cyaa
06:29 < jesusabdullah> er, test('vows tests', vowsRunner.batch(a).batch(b));
06:30 < jesusabdullah> I also don't like vows' assert api
06:30 < jesusabdullah> it's not my favorite.
06:31 < jesusabdullah> https://github.com/jesusabdullah/node-flatten/blob/master/test.js Most favorite test suite of mine
06:31 < deoxxa> i don't like that it hijacks the real assert module
06:32 < othiym23> jesusabdullah: after spending some time working with mocha + whatever assertion framework, and deciding mid-project to switch from should.js to Chai and doing that in like two hours, I never want to use a testing framework with a bundled assertion library again
06:32 < jesusabdullah> Yeah
06:32 < jesusabdullah> exactly
06:32 < jesusabdullah> well
06:33 < jesusabdullah> you *do* want bundled, in a sense---most test harnesses internally keep track of which assertions are made, etc.--I believe t.assert does this in tap
06:33 < jesusabdullah> whereas vows punches the assert module to add more shit to it and/or possibly integrate into the global harness or whatever
06:34 < brianloveswords> jesusabdullah https://gist.github.com/f19db6a4dc4a06df09f0 possibly my biggest vows gripe
06:34 < deoxxa> i ended up just writing my own test runner
06:34 < othiym23> jesusabdullah: all mocha does is trap and report exceptions / errors and deal with the async cleanup (when cases are run asynchronously)
06:34 < deoxxa> will convert to a real system when it's not 4:30pm
06:34 < othiym23> which can make tracking down what failed a pain in poorly-written tests, but whattaya want, it's asynchronous JavaScript, exceptions are never going to be perfect
06:35 < othiym23> brianloveswords: I've run into that one a billion times when in the middle of refactoring stuff
06:35 < othiym23> tracking down what failed is not pleasant
06:36 < othiym23> on a completely different topic, creationix's NodeConf preso totally inspired me
06:36 < othiym23> has anyone done any work binding guile to libuv?
06:36 < deoxxa> https://gist.github.com/3074631 << the results of my frustration
06:36 < jesusabdullah> brianloveswords: EXACTLY.
06:36 < othiym23> luvit's cool and all, but I love me some Scheme
06:37 < zipp|remote> SubStack: I just sent you the lamest pull request ever for fleet https://github.com/substack/fleet/pull/23
06:37 < jesusabdullah> looks reasonable enough
06:38 < jesusabdullah> I'd probably want a test runner similar to the one in node-tap
06:38 < jesusabdullah> with more interesting reporting maybe, not sure
06:39 < deoxxa> i would have just used tap, but again, 4:30pm
06:39 < deoxxa> haha
06:39 < deoxxa> i do like it that it's feasible to just "write your own library" in 15 minutes
06:39 < deoxxa> javascript is awesome
06:40 < jesusabdullah> hell yeah
06:40 < Glenjamin> can anyone recommend a good application logging library?
06:40 < deoxxa> Glenjamin: winston is pretty coal
06:40 < jesusabdullah> winston?
06:40 < brianloveswords> (more like 5 minutes if you're substack)
06:40 < jesusabdullah> there are others
06:41 < othiym23> Glenjamin: I've been into Bunyan later
06:41 < jesusabdullah> just npm search logging
06:41 < jesusabdullah> or "logs" or whatever
06:41 < othiym23> winston irritates me almost as much as vows
06:41 < deoxxa> brianloveswords: i'm pretty sure SubStack is actually a whole team of people
06:41 < jesusabdullah> winston's transports stuff is pretty sweet
06:41 < Glenjamin> i've got winston so far, but it's missing a "categorise these as <x> without making a new writer" feature
06:41 < jesusabdullah> Yeah, the thing I don't like about winston---well, actually two things
06:42 < othiym23> I'm also partial to stoopid
06:42 < othiym23> its functionality, its name, and its name's rationale
06:42 < Glenjamin> and on the subject, my biggest vows gripe is that it doesn't rebuild the topic for each test
06:42 < jesusabdullah> one is, I wish it wrapped the args with a util.format.call
06:42 < jesusabdullah> which is something console.log does
06:42 < jesusabdullah> The other thing
06:43 < jesusabdullah> is that log formatting and log transports are conflated right now
06:43  * othiym23 zzzz l8r
06:43 < jesusabdullah> but the transports backend shit is sweet because you can hook your logs up with a winstond and then query the winstond server later
06:44 < shavus> is 'being good with javacript' a requirement for node.js development?
06:44 < jesusabdullah> I mean
06:44 < jesusabdullah> not really
06:44 < jesusabdullah> you have to start somewhere, and there's no shortage of javascript noobs
06:44 < deoxxa> shavus: i'd say it's a byproduct of node.js development
06:44 < jesusabdullah> no offense noobs
06:45 < shavus> okay
06:45 < shavus> thanks for the input
06:45 < Glenjamin> aha, bunyan's .child() feature is what i wanted - not sure on the JSON logs yet though
06:45 < SubStack> node.js idioms can be pretty different from browser js idioms unless you're using a tool that makes browser js more like node
06:45 < SubStack> my favorite is how people module all the things in node
06:46 < SubStack> if you're writing and releasing modules for all of the things then you're doing it correct
06:46 < jesusabdullah> A lot of times I actually write my own mini log functions
06:46 < jesusabdullah> and just fuckin' write to stdout or something
06:54 < Glenjamin> yeah, i'm working on a toy app but trying to treat it like its an uber production app to see which modules i'd use
06:57 < zipp|remote> SubStack: I took that advice to heart and even released one of my shitty modules. And it has a whole two API methods. #doinitrite? :P
06:58 < brianloveswords> zipp|remote https://github.com/substack/node-buffer-equal the whole of this module is 13 lines.
06:58 < brianloveswords> And it's exactly what I need.
06:59 < SubStack> 2 is perhaps too many
07:00 < SubStack> brianloveswords: oh whoops that example is wrong >_<
07:00 < SubStack> browserEqual <-- wrong
07:00 < SubStack> erm
07:00 < SubStack> bufferEqual I mean
07:00 < covi> When learning node.js for the first time, is it a good idea to use third-party libraries installed by npm?
07:01 < zipp|remote> YES
07:01 < SubStack> brianloveswords: pow fixed the example require() string
07:01 < SubStack> covi: that's pretty much all you should be using
07:01 < SubStack> modules you pull down from npm
07:01 < brianloveswords> SubStack BAM nice!
07:01 < SubStack> use dozens of modules
07:01 < zipp|remote> covi: And if you can't find a module for it, you write one and put it back on npm :p
07:01 < SubStack> module all the things
07:01 < brianloveswords> Glad I arbitrarily picked that one to use as an example for zipp|remote  :P
07:01 < covi> jade, express seem complicated at first sight
07:01 < SubStack> they are
07:02 < zipp|remote> Hah, good call, brianloveswords
07:02 < SubStack> don't write modules that way
07:02 < SubStack> using them is fine but write tinier components
07:05 < tonymilne> Does anyone know of a good hook.io example that load balances hooks which handle jobs, such that only 1 single hook process would act on the emitted event?
07:06 < zipp|remote> Nyaah, I need to write a module that purposely throttles the fuck out of my host / cluster with open files / memory leaks / open sockets .. I should call it breakALLthethings
07:08 < brianloveswords> SubStack somehow that README.md fix made Travis think the build is broken
07:10 < SubStack> brianloveswords: oh this is an npm bug
07:10 < SubStack> I ran into this previously
07:11 < SubStack> and isaacs fixed it
07:11 < SubStack> it's because tap itself depends on buffer-equal
07:15 < owen1> how to use node for testing my client side js?
07:16 < SubStack> owen1: just write your client side js the node way
07:16 < SubStack> then browserify it up
07:17 < jondot> SubStack, hello!
07:19 < SubStack> beep boop
07:19 < owen1> SubStack: i tried that. but it's not workin. might be an angular.js issue. i'll try to gist it.
07:21 < jondot> SubStack, can you recommend a testing framework for web (Express) apps? i'm starting a project from scratch and can now make a switch to something more suitable. initially used jasmin, but only because i'm familiar with it from client-side POV.
07:28 < owen1> SubStack: after browserifying my js controller, i get: Error: Argument 'FoodCtrl' is not a function, got undefined. here is my js file before browserifying it - http://pastebin.com/E69wPsnH
07:28 < SubStack> owen1: you have to write everything the node way
07:28 < [AD]Turbo> yo all
07:29 < owen1> SubStack: what do u mean 'the node way'?
07:29 < SubStack> owen1: explicitly export and require functions instead of relying on them to be in the global namespace
07:32 < mkowens> "module.exports" is your ambivalent friend with benefits.
07:32 < covi> I am following this tutorial (http://dailyjs.com/2010/11/08/node-tutorial-2/), my app.js is here (http://pastebin.com/b2We4M0d) and models.js here (http://pastebin.com/8ucdWVjz). I received this error (http://pastebin.com/aXG3LPh7) when I run 'node app.js'. What's wrong?
07:33 < owen1> SubStack: but angular.js is looking for a javascript function named FoodCtrl. maybe i don't understand how angular works..
07:37 < SubStack> owen1: angular is probably doing something dumb like assigning into `this` and expecting that to be the window object such that FoodCtrl resolves to window.FoodCtrl by way of implicit scope resolution on the window object
07:37 < SubStack> socket.io used to do something silly like that too
07:37 < owen1> i'll ask this on their forum
07:37 < SubStack> brianloveswords: fixed the travis issue by using an older tap version until they upgrade their npm version
08:08 < zipp|remote> Anyone else hosting node servers -- anything I should worry about besides file descriptor limits? I don't need much memory because v8 sucks, right? And unless I'm using 0.8's native cluster module, chances are using multiple cores is going to be shitty?
08:29 < whitman> Is it possible to access some middleware from Connect that's bundled with Express rather than having to require Connect separately?
08:30 < radiodario> whitman: i think so, just try accessing it as you'd access it with connect..
08:31 < whitman> radiodario, that worked, thanks. I overlooked the obvious. :)
08:36 < radiodario> no worries :)
08:39 < zipp|remote> Night, #node.js :P
08:39 < radiodario> morning zipp|remote 
09:56 < ansolas> yeah !
09:56 < ansolas> what a wonderfull rainy day here
09:57 < ansolas> yesterday i was trying to get a ogg streaming solution working whioch can start streming from an arbitary possition in the source file to mimic a radio
09:57 < ansolas> just setting the styart wasnt working 
09:57 < ansolas> now i found this :
09:57 < ansolas> http://stackoverflow.com/questions/2798931/seeking-through-a-streamed-mp3-file-with-html5-audio-tag
09:57 < ansolas> interesting
09:57 < ansolas> anyone else interested in building a radio like streaming solution ?
09:58 < radiodario> soudns cool
09:58 < ansolas> i shoudl create a project description somewhre
09:59 < ansolas> is there a proper way to project idea sharing ?
09:59 < ansolas> by now I have ecver coded alone :)
09:59 < ansolas> pastebin?
10:03 < RLa> you will need a tracker with wiki where to discuss ideas
10:03 < RLa> such as github
10:04 < ansolas> ok looks like no the time has come to create a github account :)
10:10 < ansolas> ahh cool now i have gist either
10:10 < ansolas> https://gist.github.com/3075567
10:10 < ansolas> :)
10:10 < ansolas> until i have found out how to set up that wiki 
10:22 < ansolas> https://github.com/daslicht/NodeJS_Experiments/wiki/NodeJS_Radio
10:22 < ansolas> tada
10:22 < ansolas> hmm formatting get lost 
10:23 < funktronic> ansolas: readthe markdown guide
10:23 < ansolas> aye
10:29 < ansolas> weird stuff
10:30 < ansolas> writing text ion gist is eaiser 
10:30 < ansolas> :)
10:51 < DeviaVir> Hi all
10:51 < DeviaVir> Wondering if anyone else has issues with installing nodejs on different VPS's
10:58 < RLa> DeviaVir, none
10:58 < RLa> DeviaVir, what is the problem
10:59 < DeviaVir> RLa, Different import errors. Running into trouble now because I tried updating Python 2.6 to 2.7 and trying again. I'll change it back if I can't make this work
10:59 < DeviaVir> RLa, I can then give you the trouble I ran into
11:19 < Trindaz> hi all - a question
11:19 < Trindaz> q-oper8
11:19 < Trindaz> any goo?
11:20 < Trindaz> *good?
11:20 < Trindaz> last activity was 9 months ago - has it been replaced with anything better?
11:20 < Trindaz> it's a Multi-process manager for Node.js
11:32 < DeviaVir> RLa, here is the error dump
11:32 < DeviaVir>   ACTION _opt_nodejs_deps_v8_tools_gyp_v8_gyp_v8_snapshot_target_run_mksnapshot /opt/nodejs/out/Release/obj.target/v8_snapshot/geni/snapshot.cc pure virtual method called terminate called without an active exception /bin/sh: regel 1:  5564 Afgebroken              (geheugendump gemaakt) "/opt/nodejs/out/Release/mksnapshot" --log-snapshot-positions --logfile "/opt/nodejs/out/Release/obj.target/v8_snapshot/geni/snapshot.log" "/opt/nod
11:32 < DeviaVir> I can overcome this by configuring --without-snapshot
11:33 < RLa> hm, weird
11:33 < RLa> what is your gcc version?
11:33 < DeviaVir> RLa, but after that.. make[1]: Map '/opt/nodejs/out' Leaving ln -fs out/Release/node node make -C out BUILDTYPE=Release make[1]: Map '/opt/nodejs/out' Entered make[1]: Nothing to do for 'all'. make[1]: Map '/opt/nodejs/out' left ln -fs out/Release/node node out/Release/node tools/installer.js install  pure virtual method called terminate called without an active exception make: *** [install] Stopped (coredump created)
11:34 < DeviaVir> RLa, 4.4.6
11:34 < RLa> and what version of node you are trying to install?
11:35 < DeviaVir> 0.8.1
11:35 < DeviaVir> 2012.06.29, Version 0.8.1 (stable)
11:37 < RLa> hm, seems like some c++ related error :/
11:38 < DeviaVir> Anything I can do?
11:38 < DeviaVir> 0.6.8 works fine still
11:38 < DeviaVir> I see Joyent is also running 0.6.8
11:38 < DeviaVir> My guess is they are running into the same issue
11:38 < RLa> hm, i have gcc 4.2.x here and running 0.8
11:39 < RLa> hm, wait, 0.7.9
11:39 < RLa> but i think in 0.8 v8 version was bumped
11:40 < DeviaVir> Trying to see if I can downgrade
11:40 < RLa> if you really need 0.8, use latest from 0.7.x series, it should be more-less compatible
11:40 < DeviaVir> but that seems quite difficult
11:40 < RLa> and see if that works ok
11:41 < DeviaVir> I'll try 0.7.12
12:02 < DeviaVir> RLa, 0.7.12 gives same error
12:03 < RLa> damn
12:03 < DeviaVir> the snapshot error
12:03 < DeviaVir> so I'm trying --without-snapshot again
12:03 < DeviaVir>   TOUCH /opt/joyent-node-616f5db/out/Release/obj.target/node_etw.stamp make[1]: Map '/opt/joyent-node-616f5db/out' wordt verlaten ln -fs out/Release/node node make -C out BUILDTYPE=Release make[1]: Map '/opt/joyent-node-616f5db/out' wordt binnengegaan make[1]: Er is niets te doen voor 'all'. make[1]: Map '/opt/joyent-node-616f5db/out' wordt verlaten ln -fs out/Release/node node out/Release/node tools/installer.js install  pure virt
12:04 < DeviaVir> pure virtual method called terminate called
12:04 < DeviaVir> that's what I'm seeing a lot
12:04 < RLa> regel 1:  5564 Afgebroken              (geheugendump gemaakt) <- btw, what is that saying
12:04 < radiodario> "please go to a coffee shop"
12:04 < DeviaVir> Stopped (coredump created)
12:04 < RLa> oh
12:04 < deoxxa> "afgebroken" sounds bad
12:05 < deoxxa> lol other languages
12:05 < DeviaVir> it's pretty bad
12:05 < RLa> what distro are you running
12:07 < DeviaVir> Red Hat 4.4.6 (let me double check that)
12:08 < DeviaVir> Linux version 2.6.32-220.23.1.el6.x86_64 (mockbuild@c6b5.bsys.dev.centos.org) (gcc version 4.4.6 20110731 (Red Hat 4.4.6-3) (GCC) ) #1 SMP Mon Jun 18 18:58:52 BST 2012
12:08 < RLa> hm, looks good
12:08 < radiodario> i didn't know you guys used BST in Dutchland!
12:08 < DeviaVir> Running CentOS release 6.2 (Final)
12:12 < DeviaVir> What NodeJS version were you running again RLa?
12:12 < DeviaVir> 0.7.9?
12:14 < RLa> yes
12:14 < RLa> but i will upgrade soon
12:14 < RLa> just haven't got time yet
12:15 < RLa> i run it also in production
12:16 < DeviaVir> Ah, okay
12:16 < DeviaVir> found this issue, which is almost equal to mine
12:16 < DeviaVir> https://github.com/joyent/node/issues/3538
12:17 < DeviaVir> I have the same issue as "superbob" here: https://github.com/joyent/node/issues/3538#issuecomment-6703158
12:17 < DeviaVir> passed snapshot, but died at install.js
12:19 < shavus> "afgebroken" is canceled
12:19 < DeviaVir> or stopped
12:19 < shavus> yea, i think stopped is better
12:20 < DeviaVir> I'm trying the 0.8.2-release now
12:20 < DeviaVir> might come up with something..
12:20 < RLa> so a localization error?
12:21 < RLa> what your cc --version gives
12:25 < DeviaVir> [root@141-138-141-225 nodejs]# cc --version cc (GCC) 4.4.6 20110731 (Red Hat 4.4.6-3)
12:26 < DeviaVir> What locale is default?
12:26 < DeviaVir> English (Great Britain)
12:31 < booo> hey, how do i enable  -fexceptions in my binding.gyp file?
12:32 < booo> i tried a lot but nothing works
12:36 < DeviaVir> Got the correct locale now
12:36 < DeviaVir>   LINK(target) /opt/nodejs/out/Release/node: Finished make[1]: Leaving directory `/opt/nodejs/out' ln -fs out/Release/node node make -C out BUILDTYPE=Release make[1]: Entering directory `/opt/nodejs/out' make[1]: Nothing to be done for `all'. make[1]: Leaving directory `/opt/nodejs/out' ln -fs out/Release/node node out/Release/node tools/installer.js install  pure virtual method called terminate called without an active exception m
12:36 < DeviaVir> but same shit
12:41 < DeviaVir> Wonder what it's trying to say with pure virtual method called
12:46 < eldios> guys a question barely related with nodeJS.. :> what if I have an idea that I think *might* be profitable but I dunno how? anyone already solved such an issue and how? a book? a link? a co-founder? =) 
12:46 < eldios> I'm like 90% that the idea can actually be profitable.. I'm just not sure how 
12:46 < RLa> DeviaVir, it's method without implementation, supposed to be implemented by subclass
12:46 < deoxxa> eldios: i find making extremely vague statements on irc helps
12:47 < eldios> deoxxa, good point
12:47 < RLa> tho c++ giving readable error instead of segfaulting is quite surprise
12:50 < shavus> eldios: sorry but I really had a big laugh about your comment. my best friend used to say that all the time. 
12:50 < eldios> shavus, :> glad to let someone smile .. that's definitely a good thing \o/
12:52 < DeviaVir> RLa: Am I missing modules?
12:52 < DeviaVir> Trying to see if I can update GCC
12:53 < DeviaVir> I see a lot of 4.4.6 versions around
12:54 < DeviaVir> oh right, already running that
12:59 < DeviaVir>   CXX(target) /opt/nodejs/out/Release/obj.target/node/src/node_io_watcher.o   LINK(target) /opt/nodejs/out/Release/node   LINK(target) /opt/nodejs/out/Release/node: Finished make[1]: Leaving directory `/opt/nodejs/out' ln -fs out/Release/node node
12:59 < DeviaVir> that's how the "make" finishes
13:00 < DeviaVir> and this is how "make install" fails
13:00 < DeviaVir>   LINK(target) /opt/nodejs/out/Release/node   LINK(target) /opt/nodejs/out/Release/node: Finished make[1]: warning:  Clock skew detected.  Your build may be incomplete. make[1]: Leaving directory `/opt/nodejs/out' ln -fs out/Release/node node out/Release/node tools/installer.js install  pure virtual method called terminate called without an active exception make: *** [install] Aborted (core dumped)
13:01 < DeviaVir> "terminate called without an active exception" -> makes debugging kind of hard
13:05 < DeviaVir> Created a github issue: https://github.com/joyent/node/issues/3673
13:08 < ^robertj> i've been looking at persistencejs..."Task.is(Annotatable)"...beautiful, about cried
13:49 < CIA-93> node: Ben Noordhuis v0.8 * r5b5362a / (3 files in 3 dirs): fs: make unwatchFile() remove a specific listener - http://git.io/QrDBuQ
13:49 < CIA-93> node: Ben Noordhuis v0.8 * r63c2391 / test/pummel/test-fs-watch-file.js : test: make test-fs-watch-file write to tmp dir - http://git.io/-HcVRQ
13:53 < mAritz> (not a node.js question) wasn't there some way in stylus to write something like border and then indented on the next line "left 1px solid red" next line "right 2px dotted green" or something?
13:58 < CIA-93> node: Justin Plock v0.8 * rfba1e48 / doc/api/cluster.markdown : doc: cluster: worker.pid is now worker.process.pid - http://git.io/d6n1qA
14:10 < dmilith> anyone using npm module from code?
14:10 < dmilith> I'm doing npm.commands.ls
14:10 < dmilith> but I'd like to not throw output of that command to console
14:12 < austinbv> do people checking node_modules?
14:37 < teadict> felixge: is there any MySQL ORM using node-mysql's last version?
14:40 < felixge> teadict: no, but I'll push an official 2.0.0 soon
14:40 < felixge> so those modules will hopefully upgrade soon
14:41 < teadict> felixge: Are you the author?
14:41 < felixge> teadict: yes
14:41 < teadict> I'm too lazy to check hub
14:41 < teadict> Heh, it's nice ORM
14:42 < teadict> What improvements for 2.0 :O?
14:42 < felixge> teadict: https://github.com/felixge/node-mysql/blob/master/Changes.md#v200-alpha-2012-05-15
14:42 < teadict> Thank
14:42 < teadict> s
14:42 < felixge> (also the releases above that have more goodies)
14:42 < felixge> most important: much better performance, much less bugs
14:42 < felixge> much more features
14:42 < felixge> :)
14:43 < superjoe> could I get some upvote love on this npm package I've been working on? http://news.ycombinator.com/item?id=4218400
14:44 < teadict> How is #import useful in the client side? ^.-
14:44 < teadict> There's already browserify...
14:44 < superjoe> teadict, it's all compiled as part of your build process
14:44 < teadict> Uh! Does it fix the dynamic routes thingy?
14:44 < superjoe> e.g. the import is done at compile time, not at runtime
14:45 < teadict> So, you CAN use dymanic routes for imports?
14:45  * teadict watches the repo
14:45 < superjoe> I'm not sure what that means
14:46 < superjoe> what does "dynamic route" mean to you in this context?
14:47 < teadict> Well, with Browserify, when you require something like "../blah/qwerty" you get an error because that route isn't absolute...
14:47 < superjoe> teadict, yeah this doesn't have that problem.
14:47 < superjoe> it looks like browserify has more features than this does in other regards though.
14:48 < teadict> Issue for me was some 3rd party libraries use dynamic routes (for styles for examples) so you have to go and replace them yourself and now you loose compatibility
14:48 < teadict> superjoe: Oh, yeah, Browserify is the awesome, but y'know, not perfect
14:48 < teadict> Maybe I should look at compiling time a bit more
14:51 < CIA-93> node: Bert Belder v0.8 * rdedbfae / (AUTHORS .mailmap): Add a .mailmap file, and clean up AUTHORS somewhat - http://git.io/wWdgrw
14:55 < CIA-93> node: Bert Belder v0.8 * rf4369d7 / (AUTHORS .mailmap): Add a .mailmap file, and clean up AUTHORS somewhat - http://git.io/Cvy-fQ
15:09 < lizhepro> klj
15:09 < edsko> if I npm install azure -g, and I get the library but no the command line tool, did I do something wrong? how do I go about finding out what's causing the problem?
15:11 < context> edsko: try running rehash
15:13 < edsko> context: (running bash) hash -r does not help. I don't think it's installed at all. /usr/local/bin/azure does not exist
15:14 < context> are you sure it installed successfully
15:14 < edsko> context: but /usr/local/lib/node_modules/azure does
15:15 < edsko> context: I'm not sure, but npm install doesn't give an error
15:15 < context> edsko: try installing again? i just did it and it worked perfectly fine
15:16 < context> does the user you are installing as have acess to write to /usr/local/bin
15:18 < edsko> context: http://hpaste.org/71142
15:18 < edsko> is the output I'm getting
15:18 < edsko> I don't know if there's anything there that shouldn't be 
15:19 < edsko> (I'm running npm using sudo, as you can see)
15:19 < chakrit> edsko: does `sudo azure` works?
15:19 < edsko> chakrit: nope
15:19 < context> edsko: node -v ; npm -v
15:20 < edsko> v0.6.12
15:20 < edsko> 1.1.4
15:20 < context> mmm
15:20 < context> sec
15:21 < tlorenz> edsko: did you jsonlint your package.json?
15:21 < context> 0.5.3 didnt have an azure command
15:21 < context> 0.6.1 the current version does
15:21 < edsko> context: aha. why is it pulling in an older version?
15:21 < context> 0.6.1 also depends on node >= 0.6.15
15:22 < edsko> I see!
15:22 < edsko> that explains it
15:22 < context> edsko: cause you are running an old version of node
15:22 < edsko> context: thanks!
15:22 < edsko> the node version is the latest version in ubuntu
15:23 < edsko> I guess I need to install from a different repository, or from source
15:23 < context> looks like 0.6.12 was released march 2nd
15:23 < edsko> context: thanks, at least I know what the problem is now
15:23 < context> https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
15:24 < edsko> context: ok.
15:24 < context> edsko: that page shows how to add the apt-repo for node
15:28 < CIA-93> node: Bert Belder v0.8 * r2a8380c / AUTHORS : Update AUTHORS - http://git.io/uX7FZw
15:32 < teadict> How do you update all packages at once?
15:32 < teadict> udpate all?
15:32 < teadict> That didn't work
15:33 < tlorenz> teadict: npm update
15:33 < teadict> Oh
15:33 < tlorenz> or npm install
15:33 < teadict> Well, there it goes.. 15 packages
15:33 < teadict> Nap time
15:34 < teadict> Crap, I forgot the --save
15:35 < tlorenz> teadict: you can just run it again with --save
15:35 < teadict> Yeah, thank you cache
15:35 < teadict> Well, nothing seems to be broken. Good for me.
15:37 < edsko> context: ok, installed the new version of nodejs and npm, and reinstalled azure. Now I have a /usr/bin/azure, but when I run it I get
15:37 < teadict> felixge: Seems like I chose the correct ORM when I started the project... Support for stored procedures? You go gurl!
15:37 < edsko> edsko@ch1:~$ /usr/bin/azure
15:37 < edsko> : No such file or directory
15:38 < whitman> Is the npm registry being *really* slow for anyone else or is it just me?
15:38 < edsko> that /usr/bin/azure file is nothing more than a single require. maybe I need to set my node path somehow?
15:42 < mAritz> tjholowaychuk: wasn't there some way in stylus to write something like border and then indented on the next line "left 1px solid red" next line "right 2px dotted green" or something?
15:42 < tjholowaychuk> mAritz there's "border-radius: top 5px" and "absoluite"
15:42 < tjholowaychuk> "absolute: top 5px left 10px"
15:42 < tjholowaychuk> but not for borders ATM
15:51 < chakrit> mocha --reporter nyan *.js
15:51  * chakrit lmfao
16:02 < radiodario> omg is there a nyan reporter ?
16:03 < radiodario> LOL
16:07 < chakrit> radiodario: the cat goes farther the more green tests you have as well
16:07 < radiodario> yay
16:07 < radiodario> this will *DEFINETELY* encourage me to write better unit tests
16:08 < chakrit> yeah nyan cat FTW :p
16:10 < adamramadhan> isaacs: is there a "why" behind usege of all-lower-hyphen-css-case for long-file.js rather then others like long.file.js ? beside the asthetic of the - sign?
16:11 < adamramadhan> like in php is long_file_this.php why is in node long-file-this.js is preferable ?
16:13 < adamramadhan> oh shit i didnt read the `npm's "funny" coding style` text
16:17 < edsko> still no luck with azure. started with a fresh Ubuntu virtual machine, installed node as described at https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager, then did sudo npm install azure -g. this gives me a /usr/bin/azure, which is a comment plus a require('./azure.js'). when I run that script all I get on the command line
16:17 < edsko> edsko@ch1:~$ ./azure 
16:17 < edsko> : No such file or directory
16:18 < radiodario> what is azure?
16:18 < edsko> sorry, that was supposed to say /usr/bin/azure
16:18 < edsko> oh, just an npm package (for command line access to Windows Azure, cloud services). 
16:18 < herzogharker> edsko: have you just tried running "azure"
16:18 < herzogharker> without the ./ prefix
16:19 < edsko> herzogharker: yes, sorry. that was a copy of /usr/bin/azure that I tried to modify
16:19 < edsko> running just 'azure' gives the same output
16:19 < edsko> something wrong with NODE_PATH?
16:19 < herzogharker> huh
16:19 < edsko> can I get more output from node somehow?
16:19 < radiodario> do you have the link to the github for the package?
16:19 < herzogharker> oh
16:19 < herzogharker> well it's looking for ./azure.js
16:19 < herzogharker> will that bubble up to a global path?
16:19 < edsko> I don't know?
16:20 < herzogharker> in the copy of the file that you made
16:20 < tlorenz> herzog: yes it will
16:20 < herzogharker> edsko: get into a repl
16:20 < tlorenz> look at your require.paths to see all queried folders
16:20 < herzogharker> and just say "var azure = require('azure')"
16:21 < edsko> there is a /usr/lib/node_modules/azure/lib/azure.js and a /usr/lib/node_modules/azure/bin/azure.js
16:21 < edsko> but clearly it can't find either
16:22 < edsko> herzogharker: that > var azure = require('azure') gives me 'undefined'
16:23 < herzogharker> so it found it
16:23 < herzogharker> inspect the azure variable
16:23 < herzogharker> see if it's sensible
16:24 < radiodario> you find nothing of use
16:24 < herzogharker> ha
16:24 < herzogharker> west
16:24 < herzogharker> north
16:24 < radiodario> lol
16:24 < edsko> herzogharker: eh. yes. that looks sensible. lots of stuff
16:25 < herzogharker> edsko: so try changing that copy of the script you made to do require('azure')
16:25 < herzogharker> and make sure it's executable
16:25 < edsko> herzogharker: yeah, I tried that, but it still gives the same error
16:26 < edsko> ugh
16:26 < radiodario> choose a different cloud provider?
16:26 < herzogharker> as tlorenz suggested, try console.logging require.paths to make sure it's looking in the right places
16:26 < radiodario> #justsayin
16:26 < herzogharker> radiodario: +1
16:26 < herzogharker> lunch time...
16:27 < edsko> radiodario: hehe :) I hear you. not an option I'm afraid
16:27 < radiodario> well you can always post the issue to the package's github
16:27 < radiodario> and see if the dev fixes it/ or if he answers
16:27 < radiodario> or maybe better, clone the repo
16:28 < radiodario> https://github.com/pofallon/node-azure
16:28 < radiodario> lol it's empty
16:28 < radiodario> https://github.com/WindowsAzure/azure-sdk-for-node/ here
16:31 < edsko> the actual executable is /usr/lib/node_modules/azure/bin/azure, and there is a /usr/lib/node_modules/azure/bin/azure.js which is the one it's trying to require
16:31 < edsko> can I tell nodejs somehow to search the directory of the executable first?
16:38 < CIA-93> node: Toshihiro Nakamura v0.8 * r6530310 / (lib/domain.js test/simple/test-domain.js): domain: Remove first arg from intercepted fn - http://git.io/sl0oUg
16:40 <@isaacs> edsko: you mean, how to make it NOT do the fs.realpath first?
16:40 <@isaacs> edsko: why would you want to do that?
16:40 <@isaacs> herzogharker: require.paths is gone.
16:40 <@isaacs> tlorenz: ^
16:41 <@maxogden> GOOOOOOD MOOORRRNNNINNNGGGG NODEJS
16:41 < TheEmpath> hail nodelings
16:41 < edsko> isaacs: just trying to figure out what is going on with this package :) 
16:42 <@maxogden> wondernode activate, form of EVENTED IO FRAMEWORK
16:42 < edsko> aaaaaaaaaaaaaargh
16:42 < edsko> found it
16:42 < edsko> edsko@ch1:/usr/lib/node_modules/azure/bin$ azure
16:42 < edsko> : No such file or directory
16:42 < edsko> edsko@ch1:/usr/lib/node_modules/azure/bin$ sudo dos2unix azure
16:42 < edsko> dos2unix: converting file azure to Unix format ...
16:42 < edsko> edsko@ch1:/usr/lib/node_modules/azure/bin$ azure
16:42 < edsko> path.existsSync is now called `fs.existsSync`.
16:42 < edsko> info:             _    _____   _ ___ ___
16:42 < edsko> info:            /_\  |_  / | | | _ \ __|
16:42 < edsko> info:      _ ___/ _ \__/ /| |_| |   / _|___ _ _
16:42 < edsko> info:    (___  /_/ \_\/___|\___/|_|_\___| _____)
16:42 < edsko> info:       (_______ _ _)         _ ______ _)_ _ 
16:42 < edsko> info:              (______________ _ )   (___ _ _)
16:42 < edsko> info:    
16:42 < edsko> info:    Windows Azure: Microsoft's Cloud Platform
16:42 < edsko> for f*ck sake
16:45 <@isaacs> edsko: heh.  looks like someone published stuff with \r chars.
16:45 < edsko> isaacs: yes, that's exactly right
16:46 <@isaacs> edsko: npm bugs azure <-- run and then post the issue in your web browser that opens
16:46 < edsko> isaacs: ok, great. will do.
16:47 < herzogharker> ouch
16:47 < brianloveswords> BELATED GOOD MORNING maxogden!!1 
16:47 < CIA-93> libuv: Ben Noordhuis master * rad382bc / test/benchmark-async-pummel.c : test: add missing return statement - http://git.io/9RJ1nw
16:48 <@maxogden> brianloveswords: what up love swords
16:48 < brianloveswords> maxogden, you know, kicking it, lovin' swords.
16:48 < brianloveswords> P.S. We were at PDX at the same time on Friday!
16:49 < brianloveswords> (According to foursquare)
16:49 <@maxogden> yea i saw that
16:49 <@maxogden> i was at c15 though
16:49 <@maxogden> probs diff gate
16:49 < brianloveswords> Ahh I was at E2
16:49 <@maxogden> YOU SUNK MY BATTLESHIP
16:49 < brianloveswords> LOOOOL
16:49 < herzogharker> http://www.youtube.com/watch?v=q8Yt2QPCloI
16:49 < herzogharker> ez swords
16:51 < brianloveswords> herzogharker that is incredible.
16:52 < herzogharker> brianloveswords: :)
16:58 <@maxogden> isaacs: you should hire this guy to do some sweet node gifs http://cargocollective.com/matthewdivito/Animated-Gifs-03
16:59 < brianloveswords> +1
16:59 <@isaacs> maxogden: http://payload71.cargocollective.com/1/3/111325/3721731/new_ideas2.gif !!!
17:08 < mikeal> www.flickr.com/photos/gasi/7534073942/in/set-72157630428934872/lightbox/
17:08 < mikeal> great shot of max, ryan and felix
17:13 <@maxogden> i wish my beard was in focus
17:13 <@maxogden> also tha tlooks like stock photography
17:15 < mikeal> ryan's glasses are too hipster for that to be stock photography
17:16 <@maxogden> LOL http://www.flickr.com/photos/gasi/7534104162/in/photostream/
17:16 < mikeal> yup :)
17:25 < CIA-93> node: isaacs v0.8 * rc4e9226 / test/simple/test-require-json.js : Fix test-require-json on Windows - http://git.io/So16yQ
17:25 < CIA-93> node: isaacs v0.8 * rcc6084b / (AUTHORS ChangeLog src/node_version.h): 2012.07.09, Version 0.8.2 (Stable) - http://git.io/Aa7hlA
17:25 < CIA-93> node: isaacs v0.8 * r9547ee9 / (3 files in 3 dirs): Merge branch 'v0.8.2-release' into v0.8 - http://git.io/ypxSBw
17:25 < CIA-93> node: isaacs v0.8 * ra4da630 / doc/blog/release/v0.8.2.md : v0.8.2 blog post - http://git.io/bvkBNw
17:25 < CIA-93> node: isaacs v0.8 * r71078f9 / src/node_version.h : Now working on 0.8.3 - http://git.io/wBmU0w
17:26 < tlorenz> I'm looking for something like ctags for node (e.g., like esprima but for multiple languages) - anyone got any ideas?
17:31 < lohkey> SubStack: You fucking rock for implementing the streaming API in diode! i've wanted to do this for a while: https://github.com/JosephMoniz/node-ipc-stream/blob/master/examples/dnode/server.js Thanks much man
17:31 < lohkey> *dnode
17:32 < thepumpkin> Hi. My project was working with an old revision of libuv, today I tried to use the node-v0.8.0 tag and uv_tcp_connect callback is not getting called. I checked and the change was made between 0.7.11 and 0.7.12, specifically the revision https://github.com/joyent/libuv/commit/cc7c8542a52d11cc9b94882dc9d9dffef6b3fa3e
17:32 < thepumpkin> how do I get the uv_tcp_connect callback to be called again?
17:51 < startup1> looking for a remote node developer for a lead developer position/CTO for a new and exciting startup. please contact if interested
17:53 < eO_Ae_> Anyone ever had to install node and npm on Mac OS X 10.5.8 G5? I'm getting the dreaded bad CPU in executable message
18:03 < eO_Ae_> Is there any way that I'm going to be able to install node on  a PowerPC G5 processor?
18:03 < tbranyen> eO_Ae_: not unless you port v8 to ppc
18:03 < eO_Ae_> I'll get right on that
18:03 < eO_Ae_> :)
18:03 < edsko> :)
18:04 < eO_Ae_> Thanks for the answer
18:04 < eO_Ae_> now I can move on
18:20 < EhevuTov> I'm curious. Does anyone know which commit Ben did this to? I'd like to read it: "unix: fix memory corruption in freebsd.c (Ben Noordhuis)"
18:35 < startup1> looking for a remote node developer for a lead developer position/CTO for a new and exciting startup. please contact if interested
18:36 < ccowan> Does anyone ever start a new company that is boring and stodgy (but makes  shit ton of cash)?
18:36 < herzogharker> see: health industry
18:46 < mikeal> btw, summercamp tickets are on sale :) http://www.nodeconf.com
18:50 < othiym23> FINE, I'll buy a ticket to nodecamp GOD
18:54 < mikeal> haha, awesome :)
19:01 < jetienne> tent + computer ?
19:02 < jetienne> crazy :)
19:08 < Phoenixz> I have a largerish project on node using a little bit of express, more of socket.io, and a lot of custom code.. The project seems to have a large memory leak somewhere, because memory usage goes from 30MB to 1,5GB in 24 hours, while usage stays constant.. What tool could I use to see where these memory leaks are located?
19:10 < vguerra> Phoenixz: have you checked this post already? http://dtrace.org/blogs/bmc/2012/05/05/debugging-node-js-memory-leaks/
19:14 < renier> hey, can anybody explain url.resolve? Why does this url.resolve('http://hatchery.rchland.ibm.com/npm/registry/_design/app/_rewrite', './-/all/since?stale=update_after&startkey=1341817985000') yields this 'http://hatchery.rchland.ibm.com/npm/registry/_design/app/-/all/since?stale=update_after&startkey=1341817985000'? (missing the _rewrite path)
19:19 < renier> ah, the source needs a trailing slash it seems
19:27 < dexter_e_> anyone got experience with NODE.IO  data scraping framework being used in a node application ?
19:27 < dexter_e_> I would like to use NODE.IO using         node myApp.js  instead of   :    node.io myApp.js 
19:27 < dexter_e_> I want to wrap NODE.IO in a long running process
19:35 < Draggor> I just grabbed node v0.8.2, I go to ./configure, and I get a syntax error.  Did node jump to a new python version?
19:39 < baudehlo> 2.6 required.
19:40 < Draggor> Well that's sad, I only have 2.4.3
19:41 < baudehlo> which was released 8 years ago.
19:41 < Draggor> I'm on CentOS at work, so that's about right
19:42 < baudehlo> heh fair enough
19:44 < owen1> assert.strictEqual({}, {});
19:44 < owen1> why is it throwing an exception?
19:45 < freewil> why does curl -X HEAD cause a request to express to hang
19:45 < freewil> curl -I seems to work fine
19:46 < freewil> tjholowaychuk?
19:46 < herzogharker> isn't HEAD a distinct http method?
19:46 < herzogharker> that could need its own route?
19:46 < tjholowaychuk> freewil: express handles HEAD anywhere it can, but if you're not using res.send() res.sendfile() etc you have to either define app.head()
19:46 < tjholowaychuk> or check req.method == 'HEAD' yourself
19:47 < freewil> ok
19:47 < freewil> heres what i just did...
19:47 < freewil> generate an express app using the cli tool
19:47 < freewil> started it up
19:47 < freewil> express 2.5.8
19:47 < freewil> and then did curl -X HEAD http://localhost:3000
19:48 < freewil> the request just hangs
19:48 < freewil> eventually times out
19:48 < freewil> but then curl -I works fine for some reason
19:48 < tjholowaychuk> shouldn't but let me try
19:48 < freewil> and i think curl should do the same for those
19:49 < tjholowaychuk> freewil interesting!
19:49 < tjholowaychuk> yeah you're right
19:49 < tjholowaychuk> that's messed
19:49 < tjholowaychuk> i'll look into it
19:49 < tjholowaychuk> seems like it might be a curl thing, not an express thing
19:50 < freewil> hmmm weird
19:50 < tjholowaychuk> hmm the header is identical
19:50 < tjholowaychuk> req.method is correct
19:51 < freewil> curl must be sending the request differently somehow
19:52 < tjholowaychuk> i think maybe curl just doesn't handle -X HEAD correctly internally
19:52 < tjholowaychuk> this.end('HEAD' == this.req.method ? null : body);
19:52 < tjholowaychuk> at this point in res.send() HEAD is still correct so it's definitely curl
19:53 < tjholowaychuk> hangs on google too
19:53 < tjholowaychuk> interesting
19:55 < freewil> curl eventually gives me an error
19:55 < freewil> transfer closed with 171 bytes remaining to read
19:55 < freewil> curl: (18)
19:58 < tjholowaychuk> freewil good find haha, updated burl to not use -X HEAD
19:59 < creationix> tjholowaychuk: is there a socket.io client for node?
19:59 < tjholowaychuk> i think so yup
19:59 < tjholowaychuk> one sec
19:59 < freewil> glad i could help
19:59 < freewil> what would node.js be without tj
20:00 < tjholowaychuk> creationix: https://github.com/LearnBoost/socket.io-client
20:00 < creationix> tjholowaychuk: cool, I thought that was browser only
20:00 < tjholowaychuk> maybe it is
20:00 < tjholowaychuk> if it is then it's confusing
20:00 < tjholowaychuk> haha
20:00 < tjholowaychuk> with a package.json etc
20:01 < tjholowaychuk>  and no mention in the readme
20:01 < tjholowaychuk> maybe you're right, i swear there was one
20:01 < wavded> did something change in permissions for child process spawning?  reading and writing stdin/stdout in node 0.8?
20:01 < freewil> does socket.io already contain the browser client?
20:02 < freewil> s/does/doesnt
20:02 < wavded> i have an example that fails in 0.8 that works in 0.6 and can't figure out why
20:02 < EhevuTov> socket.io has a client further down in it's directories. It's a tad confusing IIRC
20:03 < wavded> from what I can tell in the specific binary i'm running is that permissions are a problem
20:04 < gildean> if anyone is interested, i just posted a relatively working version of my first node project™
20:04 < gildean> here: https://github.com/gildean/NodeBlog
20:08 < freewil> tjholowaychuk, could you publish a new version of connect 1.x with that pull request you just merged in
20:09 < tjholowaychuk> freewil done
20:09 < freewil> thank you :)
20:10 < motiooon> when reading a file like this fs.readFile(all_photos[i], "utf8", function(err, result){
20:10 < motiooon> what encoding should I put if it's a jpg
20:10 < motiooon> ?
20:10 < motiooon> for text I put utf8 but for an jpeg image what would that be ? 
20:10 < baudehlo> leave the encoding off and it'll give you a Buffer
20:11 < motiooon> so how can I write the result to a database ?
20:11 < baudehlo> depends on the database.
20:11 < motiooon> could I post the buffer to the database ?
20:12 < dexter_e_> @motiooon:  binary
20:12 < motiooon> as a binary ?
20:12 < baudehlo> what db?
20:12 < motiooon> I have mongodb
20:12 < baudehlo> what library?
20:12 < motiooon> and I use mongoose
20:12 < baudehlo> Dunno. I don't do mongo.
20:12 < baudehlo> You could encode as base64, then it's just text.
20:13 < freewil> mongo has BSON for binary data
20:13 < freewil> thats another option
20:13 < baudehlo> fs.readFile(all_photos[i], function(err, buf) { var b64_buf = buf.toString('base64') 
20:13 < freewil> http://www.mongodb.org/display/DOCS/GridFS
20:13 < aheckmann> motiooon: buffers are supported by mongoose
20:14 < aheckmann> motiooon: just specify the Buffer type in your schema
20:14 < freewil> aheckmann, does it use BSON/gridfs
20:14 < aheckmann> freewil: everything on mongo uses bson
20:14 < freewil> oh
20:14 < aheckmann> freewil: grids is just an api to split large files
20:14 < freewil> oh ok
20:14 < motiooon> ok so I don't even need encoding because mongo would store buffer ?
20:15 < zackiv31> is there a way to read the file creation times? all i see in the doc is setting the times http://nodejs.org/api/fs.html#fs_fs_utimes_path_atime_mtime_callback
20:15 < aheckmann> motiooon: yes it'll work seamlessly as long as you're not storing massive files (read: larger than document limit)
20:16 < motiooon> aheckmann: ok, but then how do I transform the buffer in a binary type
20:16 < motiooon> in node
20:16 < aheckmann> motiooon: its magic, mongoose does it for you
20:16 < aheckmann> motiooon: if you are storing files its best to just use the driver or something like the driver or a helper lib
20:16 < wadey> zackiv31: http://nodejs.org/api/fs.html#fs_fs_stat_path_callback
20:16 < motiooon> so if I read from db I get binary ?
20:17 < aheckmann> motiooon: you get a buffer
20:17 < aheckmann> motiooon: you don't have to think about binary at all.
20:17 < aheckmann> motiooon: it'll be stored / retrieved properly
20:18 < dexter_e_> Anyone know how to use NODE.IO in a regular node application ?
20:19 < dexter_e_> I guess the whole point is to have node.io run in a separate process , but how do we instantiate it in a Node app ?
20:20 < zackiv31> ty wadey
20:20 < wadey> zackiv31: np, you're welcome
20:21 < gll3> Hi guys, can someone help me with a super newbie question? http://pastebin.com/jTnVJ79D
20:23 < tnorris> gll3: module.exports = Currencies;
20:23 < hamms> gll3: use the callback
20:23 < tnorris> or var g = require('./lib').Currencies;
20:24 < hamms> tnorris: I'm not sure you understand his question
20:24 < tnorris> gll3: whoa... sorry up all night playing skyrim.
20:24 < zackiv31> so when is it appropriate to do synchronous calls... say im reading a bunch of files to sort them by creation time and return that set in order
20:25 < gll3> ok, I was trying to use a callback before, but got confused about how it works, I'll try to figure it out again, thanks
20:31 < tnorris> gll3: possible API reference. Do: g.Currencies('USD', function(error, data) {});
20:31 < motiooon> baudehlo: I think is working to specify the encoding like this fs.readFile(all_photos[i], 'base64' ,function(err, result){
20:35 < gll3> tnorris: sorry, I really don't understand what that does
20:36 < tnorris> gll3: one sec. I'm re-writing your pastebin to show what i'm talking about.
20:46 < tnorris> gll3: i'll be surprised if this works correctly, but it should give you an idea of how to use callbacks in your app: http://pastebin.com/HeTmN491
20:47 < gll3> tnorris: awesome! thank you very much
20:47 < tnorris> gll3: forgot a very important line, here's it fixed: http://pastebin.com/KzLJ5xPA
20:48 < tnorris> gll3: np. if you can try it out, let me know if it works for you.
20:50 < gll3> tnorris: can not call method 'push' of undefined
20:51 < tnorris> gll3: i'm a dip. remove the period from fn.Queue.
20:51 < tnorris> to fnQueue
20:51 < tnorris> line 44 in the paste bin
20:52 < gll3> tnorris: works now, thanks again!
20:52 < tnorris> awesome. glad it does. good luck on your project
21:10 < xString> Question: I'm doing a simple http request to search.twitter.com/search.json and when I ask for 1 tweet, all is well. When I ask for 2 tweets, not so much and 3 tweets, just forget it.  The error I receive is "Unexpected end of input" we receiving the request.  Is there some type of limit that I'm unaware of in node?
21:12 < VeXii> can i use the child.send(message, sendHandel) to share http servers between processes ?
21:12 < TimeTurner> yes
21:13 < VeXii> cool thanks :)
21:23 < baudehlo> but don't do that :)
21:32 < TimeTurner> https://gist.github.com/318d98a000ab0d1b69ba
21:33 < TimeTurner> npm error that I can't seem to solve
21:33 < TimeTurner> :/
21:35 < gkatsev> TimeTurner: sudo npm install mocha -g?
21:36 < TimeTurner> same thing
21:36 < gkatsev> idk then, lol
21:41 < tlorenz> TimeTurner: jsonlint your package.json, looks like you have invalid json in there
21:41 < therealkoopa> tjholowaychuk: I remember reading a quote or blog post from you, saying the shouldjs method of adjusting Object.prototype is okay because of ....   Do you happen to know where I would have read that :)
21:42 < tlorenz> TimeTurner: zaach.github.com/jsonlint
21:42 < tjholowaychuk> therealkoopa it's only "ok" because it's non-enumerable and when's the last time you used "should" as a key
21:42 < tjholowaychuk> highly not recommend but in that case it's a meh
21:42 < therealkoopa> No, I totally agree.
21:57 < Phoenixz> vguerra: sorry, had to run out, didnt get your answer about the memory leaks article until now.. Thanks lots!
22:00 < bwen> I put "scripts": { "test": "tap ./test/*.js" } in my package.json but when I do "npm test" it says to that it failed and to see the errors above but there is nothing. if I do "./node_modules/tap/bin/tap.js ./test/*.js" on the command line everything works as expected. Something i'm not getting?
22:00 < context> tap ?
22:01 < context> bwen: your scripts, needs to be an actual script that it is putting into /usr/local/bin
22:01 < context> not a mysterious command it executes
22:01 < bwen> but I like mysteries :(
22:02 < context> bwen: other people dont
22:03 < bwen> context: sorry if its a mystery to you...
22:03 < bwen> anyone else?
22:03 < vguerra> Phoenixz: np 
22:04 < vicapow> does this count as an application that prints its own source code?
22:04 < vicapow> https://gist.github.com/3079325
22:05 < upb> lol :D
22:06 < upb> it must be bending the rules somehow :)
22:06 < vicapow> lol. i image
22:06 < vicapow> it's just reading itself from disk and printing that
22:06 < hamms> yes, but an unspoken rule of quines is that they do not inspect their own code
22:08 < upb> < vicapow> it's just reading itself from disk and printing that <- really ?
22:08 < vicapow> :P
22:08 < vicapow> lol
22:15 < bwen> context: http://npmjs.org/doc/scripts.html  ctrl+f ".bin", mystery solved... still doesnt work even if the tap is in the node_modules/.bin
22:15 < tuhoojabotti> Is it enough if I do `require.cache = [];` to load modules fresh?
22:15 < context> bwen: #!/usr/bin/env tap
22:15 < context> bwen: your scripts {} is NOT a command to be ran
22:15 < context> its a SCRIPT to install
22:16 < bwen> well its not what the doc says...
22:21 < owen1> why is assert.strictEqual({}, {}) throwing exception?
22:21 < Jeena> I am getting this error, is there a way to fix it without downgrading to 0.6?
22:21 < Jeena> Error: npm doesn't work with node v0.8.1
22:21 < Jeena> Required: node@0.4 || 0.5 || 0.6
22:22 < tjholowaychuk> Jeena you can update npm from npmjs.org directly if you need to
22:22 < Jeena> ah so my npm version is to old?
22:23 < tjholowaychuk> if it can't update itself then yeah something is messed
22:23 < bwen> isaacs: why is npm not finding my node_modules/.bin/tap when I have "scripts": { "test": "tap ./test/*.js" } in my package.json and run "npm test" on command line? its really in the .bin folder...
22:25 < Jeena> thanx tjholowaychuk, a reinstall resolved it
22:29 < sr71-blackbird> is it possible/easy to just use gyp to build node addons?
22:29 < Phoenixz> Is socket.io compatible with node v0.8? I have node v0.8 with socket 0.9.6, and I have VERY weird problems all of the sudden. I've been here asking the same question before, and no-one really knew yet.. I hope the problem might be more known by now..
22:29 < tanepiper> am i using domains right? https://gist.github.com/1ff8a73e118d2b0d521d  
22:30 < bwen> Phoenixz: might have more luck in #socket.io ?
22:30 < Phoenixz> My node 0.6 with socket.io worked fine (besides node hanging up on 100% every so many hours, some node 0.6 bug, which forced me to go to v0.8 in the first place)
22:30 < Phoenixz> bwen: Ive asked there for days, no reply :(
22:30 < Phoenixz> for some weird reason on node 0.8 socket.io starts sending out empty files to the clients.. 
22:31 < Phoenixz> empty files as in, host/socket.io/socket.io.js is empty..
22:32 < bwen> you doing cross port/domain scripting?
22:32 < Phoenixz> and after that, these empty socket.io.js files are in browser cache, when requested again, the host gives 304, not changed, so they stay there.. and socket.iio on the clients is  effectively broken..
22:32 < Phoenixz> nope
22:32 < Phoenixz> bwen: I do pretty forward server <-> client stuff.. just connect, send emit to clients, sometimes groups.. thats all
22:33 < Phoenixz> All this worked well on 0.6 
22:33 <@isaacs> bwen: i don't know.  maybe tap isn't actually installed?
22:33 < bwen> hmm been a lil while since i've played with socket.io :-/
22:33 <@isaacs> bwen: that works for me
22:33 < Phoenixz> And now this, on 0.8
22:33 < Phoenixz> isaacs: tap?
22:33 < ccowan> Phoenixz: Do you live in Phoenix, AZ
22:33 <@isaacs> Phoenixz: npm install tap
22:33 <@isaacs> yeah
22:33 <@isaacs> it's a test framework thingie
22:33 < bwen> isaacs: if I run ./node_modules/.bin/tap ./test/*.js everything works as intended....
22:33 < Phoenixz> ccowan: :) Try central Mexico (though I am from Holland)
22:33 <@isaacs> bwen: hmm...
22:33  * isaacs is suspicious
22:33 < ccowan> ah
22:34 <@isaacs> bwen: what version of npm?
22:34 <@isaacs> bwen: and can you gist your package.json?
22:34 < bwen> 1.1.36
22:34 <@isaacs> k, that's good
22:34 < Phoenixz> bwen: mmmmm, it looks like I don't have tap installed.. what does it do?
22:34 < bwen> isaacs: http://pastie.org/4228396
22:35 <@isaacs> Phoenixz: https://github.com/isaacs/node-tap
22:35 <@isaacs> bwen: invalid json
22:35 <@isaacs>    "devDependencies": {
22:35 <@isaacs>         //"vows": "~0.6.2"
22:35 <@isaacs>         "tap" : "~0.2.5",
22:35 <@isaacs>     },
22:35 < Phoenixz> isaacs: your work? :)
22:35 < bwen> Phoenixz: no, it was a question I asked him.. its not related to your issue.... unfortunately
22:35 <@isaacs> bwen: "~0.2.5", <-- invalid comma
22:35 < bwen> bah >_<
22:36 <@isaacs> yeah, in my attempt to make test failures easier to read, it swallows all errors.  that's a mistake.
22:36 <@isaacs> will fix.
22:36 < bwen> works now... how embarrassing >_<
22:36 < Phoenixz> my bad, thanks anyway
22:36 < chapel> you can't do comments in json either can you?
22:36 < chapel> well I know you can't
22:36 < bwen> isaacs: ty for your time
22:37 < bwen> chapel: had to take off comment and extra comma for it to work
22:37 < chapel> yeah
22:37 < chapel> json can be confusing because it feels like javascript
22:38 < bwen> yeah.. well... it sure duped me xD
22:38 <@isaacs> bwen: np
22:38 <@isaacs> bwen: just pushed a fix to only swallow test errors, not all errors from `npm test`
22:38 <@isaacs> so the invalid json would throw properly
22:39 <@isaacs> and not just "test failed sorry"
22:40 < bwen> well... is the package.json ever validated? When would of I noticed my json wouldnt of been parsable ?
22:41 < bwen> oh nm, understood :]
22:41 <@isaacs> bwen: when it reads package.json, it'll get a gnarly error
22:41 <@isaacs> like a big noisy awful thing
22:41 <@isaacs> hard to miss :)
22:41 < bwen> can you add a "BWEN you messed up your json again!" ? :D
22:42 < jesusabdullah> with an ascii clippy the paper clip
22:42 < jesusabdullah> IT LOOKS LIKE YOU'RE USING INVALID JSON
22:48 < jcrew> do you have examples
23:11 < owen1> can someone try assert.strictEqual({}, {})  why is it throwing exception?
23:12 < aliem> owen1 it's not the same object, just like {}==={}
23:13 < jiboumans_> owen1: you probably want deepEqual or some such
23:14 < owen1> aliem: oh. it's the WAT aspect of js?
23:14 < deoxxa> no
23:15 < deoxxa> var x = {}, y = {}; assert.strictEqual(x, y);
23:15 < deoxxa> what do you expect to happen?
23:15 < deoxxa> var x = {}, y = x; assert.strictEqual(x, y);
23:15 < deoxxa> and how about there?
23:17 < myndzi> anybody have a link to an article or something talking about best practices for avoiding / hunting down potential memory leaks?
23:19 < jesusabdullah> deoxxa: obviously they are not the same object
23:19 < owen1> deoxxa: interesting. 
23:20 < owen1> what does 'deep' equality means?
23:20 < deoxxa> jesusabdullah: correct, that's what i was demonstrating :)
23:21 < SubStack> owen1: different references that contain the same data are not equal with ===
23:21 < SubStack> but with a deepEqual algorithm they are
23:21 <@maxogden> SubStack: i think you forgot the package.json here https://github.com/substack/node-extents
23:21 < SubStack> !
23:22 < SubStack> maxogden: fixed
23:24 < owen1> SubStack: nice. it looks like deep is what i would usually use in my tests.
23:30 < tmpvar> SubStack, Math.min.apply(null, lons) -- slick
23:39 < myndzi> seriously?
23:39 < myndzi> gyp ERR! rebuild error Error: Python executable "/opt/python2.7/bin/python2.7" is Python 3, which is not supported.
23:40  * myndzi sighs
23:40 < myndzi> i've been trying everything i can think of to avoid hard-hacking the damn file :(
23:42 < othiym23> myndzi: why is /opt/python2.7 python 3?
23:43 < myndzi> it isn't.
23:43 < myndzi> gyp (or rather, semver) appears to think it is though
23:44 < othiym23> that's dumb
23:44 < myndzi> i rather thought so too
23:44 < othiym23> what OS / distro?
23:44 < myndzi> centos 5.5
23:45 < myndzi> (thus the alternate python install in /opt)
23:45 < othiym23> coulda been OpenSolaris ;)
23:45 < Phoenixz> Hurray, found the socket.io serving empty socket.io.js pages on node v0.8 problem.. Do NOT use GZIP compression! That was the fkker that is causing the empty pages...
23:45 < myndzi> i can't figure out how to make npm install pass debug switches to gyp either
23:46 < myndzi> i see right here there's a line that i want to see the output of but i can't make it show up :(
23:46  * myndzi hacks in console.log
23:46 < Phoenixz> more clearly: Do NOT use gzip on socket.io when with node 0.8 
23:46 < myndzi> that didn't even work blargh
23:50 < myndzi> ugh, of course
23:50 < myndzi> it's using a copy of node-gyp under npm
23:50 < myndzi> heh
23:50 < myndzi> brilliant :(
23:52 < myndzi> yay. manually upgrade it and it appears the bug is fixed
23:54 < othiym23> so has anyone here used Iced CoffeeScript?
23:54 < othiym23> or have any ill-informed gut-level opinions on it, really?
23:54 < othiym23> trying to take onboard maxogden's "streams *are* flow control" idea and run with it, but I am easily distracted by shiny things
23:55 < jesusabdullah> othiym23: I personally think it's a terrible idea
23:55 < jesusabdullah> othiym23: it's like all the bad stuff about coffeescript, plus all the bad stuff involved with hiding how callbacks work
23:55 < othiym23> jesusabdullah: xlnt. Why?
23:56 < jesusabdullah> plus, coffee is terrible when it's cold.
23:56 < othiym23> await and defer seem sorta orthogonal to functional composition, though
23:56 < othiym23> fair enough
23:56 < ljharb> iced coffeescript: in case you want another language to compile to your language that compiles to actual javascript.
23:56 < othiym23> I have no love for CS, but I like the idea of composable high-level async operators
23:57 < jesusabdullah> for questionable gains
23:57 < ljharb> you can do all that in pure JS. just use a promises library.
23:57 < ljharb> needing syntactical sugar and operators is a silly crutch.
23:57 < othiym23> ljharb: I could, but I like how DRY reducing everything down to await / defer is
23:57 < jesusabdullah> See, if you want "composable high-level async operators," whatever the fuck that means, there *has* to be a way to do it in pure, idiomatic javascript, instead of making up some bullshit new syntax to appease ruby die-hards.
23:57 < othiym23> is it a matter of need?
23:57 < myndzi> any idea why node-inspector wouldn't have a profiles tab? (included v8-profiler in the target script)
23:58 < othiym23> myndzi: did you remember to load v8-profiler in the program under test?
23:58 < othiym23> oh dur
23:58 < othiym23> you said it *right there*
23:58 < SubStack> othiym23: there are lots of asynchronous function composition libs on npm
23:58 < myndzi> hehe
23:58 < othiym23> SubStack: it's true!
23:58 < jesusabdullah> yes, *so* many function composition libraries
23:58 < myndzi> i copy/pasted the exact source code from the walkthrough on felixge's github
23:58 < myndzi> i just get scripts and console
23:58 < myndzi> it's weird
23:58 < othiym23> I think I'm sorta kinda playing devil's advocate cuz I was playing around with goroutines again this weekend and find them a little easier to think about than streams
23:59 < jesusabdullah> but streams are a particular problem
23:59 < SubStack> streams are more like go channels
23:59 < jesusabdullah> in fact, streams are quite general. You can work with streaming data in most any language, the apis will just be different is all
23:59 < SubStack> or like haskell stm channels
23:59 < ljharb> it's easier to think about lots of stuff that doesn't fit into the language you're working with. shoehorning it in isn't a good solution. *cough* classical inheritance *cough*
23:59 < othiym23> in general, I agree with all three of you
--- Log closed Tue Jul 10 00:00:18 2012
