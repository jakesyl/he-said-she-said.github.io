--- Log opened Sat Mar 23 00:00:05 2013
00:03 < mattmcclure> So just to be clear, you don't need to emit a message inside of the connect block…You can use io.sockets.emit from anywhere within app.js
00:04 < mattmcclure> SO, you can have a function to deal with the message from the crawler that then fires io.sockets.emit
00:05 < mattmcclure> logicalcat: ^ just to make sure you get the ping
00:07 < logicalcat> mattmcclure: yes, I can call io.sockets.emit from anywhere, but the result is the same: no data. I haven't tried putting the emit into a separate function yet--I suspect that might be the answer.
00:09 < mattmcclure> I've gotta run for a few minutes, but I'll be back
00:10 < mattmcclure> If you're in here then I'll check in and see how things are going
00:12 < logicalcat> I gott go too--at coffee shop and battery is dying. Thanks for your help! I suspect it's some async weirdness.
00:39 < c4doug> I'm using jade, but can't get it to render a block of text without specifying any html. Is this possible?
00:40 < c4doug> I'm trying to make a nginx conf template
00:40 < c4doug> or is there a better way without using jade?
00:45 < ericelliott> sure -- use a template engine that isn't specifically designed for HTML
00:45 < ericelliott> mustache
00:50 < s3shs> domain.active should at least be defined until the end of myDomain.run(function()...), completes right?  That is, the callback completes.
00:50 < s3shs> I'm seeing cases where it's undefined within that callback.  And I'm confused as to why.
00:50 < s3shs> It's very consistent though.
00:57 < aeberlin> Hey, guys, I'm having some trouble with closures and prototypal inheritance in a library I'm refactoring. If you wouldn't mind taking a look, I've posted a stack overflow question here: http://stackoverflow.com/q/15581993/927844
01:01 < lovemuffin> massive wall of text  >>>> me
01:20 < rosslazer> Anybody have any good docs/resources on building an async mobile game?
01:33 < asturel> is there a func for validate json string? w/o stringify?
01:34 < niggler> https://github.com/zaach/jsonlint @ asturel 
01:34 < asturel> bah :D
01:34  * niggler pets asturel 
01:36 < asturel> i dont think this is faster than json.stringify :D
01:36 < asturel> *that
01:48 < AAA_awright> Is there some way to get the original case of incoming headers?
01:48 < AAA_awright> And order, for that matter, necessary if you needed to sign them or similar
02:02 < happycrappy> Hi all, I'm starting to play with node & redis pubsub and had a quick question....if in response to a redis message notification (from a SUBSCRIBE) I need to do a fair a mount of work, should I fork off into the next iteration of the runloop (setImmediate)?
02:03 < happycrappy> I'm concerned about the fact that both redis & node.js are single threaded and doing stuff in the same iteration of the run loop will block redis
02:06 < lovemuffin> yea do that
02:08 < happycrappy> lovemuffin: is there a guarantee that my setImmediate callback will execute before the next subscribe notification?
02:09 < lovemuffin> no guarantee
02:10 < happycrappy> is there guarantee that consecutive setImmediates will keep their relative order?
02:12 < lovemuffin> it should yes
02:13 < rosslazer> What is the best starter project/tutorial for node?
02:13 < happycrappy> lovemuffin: thanks!
02:16 < rosslazer> and don't say a blog lol. Something that will help me get a good feel for async patterns and stuff
02:16 < eighty4> upgrading from 0.8 to 0.10 gives me "Cannot read property 'pipesCount' of undefined" from this line: self.conn = this.connect(6667, 'chat.freenode.net').pipe(prompt); where this is Net.Socket. Any general idea about what might be wrong?
02:18 < rosslazer> anyone?
02:22 < s3shs> eight4, dunno.  A few other libraries "broke" with 0.10
02:23 < mscdex> Capcom is releasing a remastered version of NES's Duck Tales!
02:29 < rosslazer> anyone?
02:31 < lovemuffin> rosslazer: have you seen this ? http://www.nodebeginner.org/ i've never read it though
02:31 < lovemuffin> there's also http://book.mixu.net/ , haven't read it
02:33 < rosslazer> hmmm
02:34 < rosslazer> which one would you recommend? 
02:36 < bulmung> Hello, I'm looking for help installing some node modules
02:40 < lovemuffin> rosslazer: never read any of it so i cant comment, but read them both? they look short
02:46 < s3shs> Whoa.  0.10.1 is out.
02:46 < s3shs> That was quick.
02:47 < s3shs> Nevermind.  It was 0.10.1.
03:10 < duko> does anyone here have experience with `marked`?
03:11 < duko> I'm trying to generate HTML that has syntax highlighting but I'm not succesful
03:11 < duko> I'm not sure what I'm doing wrong
03:12 < duko> I've got it...
03:38 < aroman> so i've been reading up on the streams2 api, and I'm trying to port my code to the new API -- not simply triggering "old mode"/streams1 backwards compatibility mode. My question is, what is the proper way to only be notified when a stream ends, while not caring about the data? In other words, I have no interest in actually reading the stream… I just want to know when it's finished. How should I indicate this in the streams2 api? readable.read(), with
03:38 < aroman> argument?
03:39 < ningu> aroman: I believe you just do stream.resume()
03:39 < AAA_awright> What's wrong with old streams?
03:39 < ningu> to make it start reading
03:39 < ningu> AAA_awright: read isaacs's blog post?
03:40 < AAA_awright> Not really
03:40 < AAA_awright> What do YOU think is wrong?
03:40 < aroman> ningu: that's the thing though, resume switches it back into 'old mode'
03:40 < aroman> see http://nodejs.org/docs/v0.10.1/api/stream.html#stream_readable_resume
03:40 < aroman> unless i'm misunderstanding something, i thought that was like a temporary backwards compatibility mode
03:40 < ningu> AAA_awright: I think the issues about automatically generating 'data' events, and pause() being only advisory, are fairly serious.
03:40 < everlastt> greetings there yall, are there any libs available yet for generating html & css? In keeping with the "all in one language paradigm". i am looking to generate the actuall html and css in jss to. this is a personal project. so if i could write divs and set styles in jss, that would be cool fun! i know that it wouldn't be ultra efficient, but just an interesting thought for me. is there anything like this floating around yet? 
03:40 < aroman> or is "old mode" actually a feature?
03:41 < ningu> aroman: oh, hmmm... good point, actually.
03:41 < AAA_awright> ningu: All it does is move an application-level buffer into Node.js, if you prefer that style
03:41 < AAA_awright> Which is perfectly fine
03:41 < AAA_awright> But it's not the only way to code, nor should it be
03:41 < aroman> like I have no problem calling .resume(), it would totally do what I want. I am actually in that small use case where I *want* data to start flowing immediately, so the streams1 api was fine for me
03:42 < aroman> but i figure i might as well adopt the new api now, since why not.
03:42 < lovemuffin> everlastt: i actually remember something like that for css, but i forget what it was called because its just for fun, not really efficient
03:42 < ningu> aroman: well, the docs tell you to achieve that functionality by calling resume()
03:42 < ningu> aroman: I don't think old mode is meant to never be used.
03:42 < ningu> in "new" code I mean
03:42 < ningu> but that's a good question
03:42 < aroman> maybe you're right
03:43 < aroman> i think i was assuming old == bad == deprecated
03:43 < ningu> yeah, I agree the docs are slightly unclear on what is considered best practice new code
03:43 < aroman> and not old mode as being a "feature".
03:43 < aroman> alright, so at least it's not just me haha
03:43 < AAA_awright> everlastt: Not duplicating your logic by using a single language makes sense, but getting rid of CSS, what is that helping?
03:43 < ningu> aroman: I'd only be concerned if the docs say something is actually deprecated
03:43 < ningu> but this is worth mentioning to the doc-writers
03:44 < aroman> well i'll happily ship .resume(), I guess I'll check the ML or ask around here when more people are awake
03:44 < aroman> ningu: yeah I agree
03:44 < ningu> yeah, it's a good idea to ask
03:44 < ningu> I suspect that, given node's pre-0.10 codebase, the 'data' event will not go away any time soon
03:44 < everlastt> its helping nothing really, maybe perhaps just some more logic avalable by having a programmable way of setting styles
03:45 < everlastt> but nothing i would asset would be useful, just an interesting idea for myself 
03:45 < ningu> everlastt: well, there are plenty of template languages for both html and css
03:45 < ningu> not really anything to do with js per se
03:46 < ningu> although some are written in js
03:46 < lovemuffin> mixin(component1, component2, component3); component1.fontColor('blue').width('100px').opacity('0.9'); hehe
03:46 < everlastt> cool 
03:46 < everlastt> thanks 
03:46 < everlastt> :D
03:46 < ningu> everlastt: you could check out less or stylus
03:46 < ningu> jade, etc.
03:46 < aroman> ningu: looks like I'm in good company, isaacs posted this yesterday: https://groups.google.com/d/msg/nodejs/8VGu32aczR0/JQwZUF2dBM4J
03:46 < ningu> jade doesn't look much like html, which some people like and some don't :)
03:47 < ningu> aroman: aha! ok. so old != bad :)
03:47 < lovemuffin> do you like it?
03:47 < ningu> lovemuffin: me?
03:47 < ningu> I think jade is nice and clean-looking
03:47 < ningu> I like not having to keep track of close tags
03:48 < aroman> ningu: I'm still not 100% convinced myself, but I'm thinking his omission of a "but you shouldn't be using old mode for new code" is probably tantamount to him saying old != bad outright
03:51 < ningu> aroman: he also says "it's flexible on purpose" i.e. all the ways you can do something are apparently officially sanctioned.
03:55 < aroman> ningu: ah yes, that's a good point. that makes more sense to me now. I'm thinking the docs should be reworded to change from "old vs new" to "spew vs suck" to rip off dominic tarr's explanation of it
03:56 < aroman> i just got the impression i was triggering some temporary compatibility mode, not simply exercising the new found flexibility of streams
03:57 < ningu> aroman: yes, that's a good idea and I'm sure would make the docs clearer
03:57 < aroman> i wonder where such an idea ought to be proposed...
04:01 < lovemuffin> pull request!
04:01 < monokrome> O_O
04:02 < ningu> the docs are a github repo, right?
04:02 < lovemuffin> yea
04:03 < lovemuffin> its part of the node repo
04:13 < kala__> Hello
04:16 < kala__> can I use node.js to clean my dishes on asa1x ?
04:16 < samholmes> kala__: Yes!
04:16 < kala__> samholmes: thanks
04:16 < samholmes> There is a node.js module for AR Drones, so all you would need is a module for the dishwasher!@
04:17 < samholmes> kala__: Haha. You're welcome. :P
04:46 < ningu> so I'm looking at tj's component stuff... what I don't understand is, if one component require()'s another, how do you get them all together in one file to serve to the client?
04:51 < substack> ningu: it seems that is what the "build" command is for but it's not clear from the readme
04:51  * substack <-- never used component
04:52 < ningu> hmmm
04:52 < ningu> that does seem to be the case
04:52 < ningu> but it also seems not to work
04:52 < ningu>        error : failed to lookup "MatthewMueller-io"'s dependency "component-emitter"
04:52 < s3shs> Domain issues... I run without the debugger, all is well.  I run with the debugger and the domain falls apart... domain.active turns (reliably) to undefined just after I hit an async.waterfall.
04:52 < s3shs> Makes no sense.
04:53 < ballsdeepdevelop> anyone seen mscdex 'round here recently?
04:54 < ballsdeepdevelop> or better yet, is anyone familiar with IMAP modules?
05:04 < shmoon> hey
05:04 < shmoon> anyone uses broserify ? 
05:04 < shmoon> i dont understand this part well enough https://github.com/substack/node-browserify#multiple-bundles
05:04 < shmoon> whats the point?
05:04 < shmoon> *browserify
05:06 < echoSMILE> I have a string with this structure: string = 'var:foo,var2:foo2,var3:foo3' and when I do a JSON.parse('{'+string+'}') I got the error "Unexpected token :" why?
05:06 < substack> shmoon: that feature is for if you need to split bundles up to optimize load times
05:07 < substack> if you don't have that problem just ignore it
05:07 < Stuk> echoSMILE: the keys need to be quoted with "
05:07 < echoSMILE> Stuk: I'm storing the string in redis, but redis just escape all " inserted by me.
05:08 < Stuk> by escape do you mean it looks like \" ?
05:08 < echoSMILE> yes
05:09 < Stuk> if they are literally stored like that then you could do string = string.replace('\\"', '"');
05:09 < echoSMILE> Stuk: let me try. tks
05:09 < shmoon> substack: hm ok. thanks
05:12 < shmoon> substack: do you know+reocmmend of any module that automatically delivers JS files via browserify in express apps?
05:13 < shmoon> so that i dont have to compile via command line
05:13 < echoSMILE> Stuk: I just invert and instead of using " I use '. so the string now are storared in this way: 'var':'foo','var2':'foo2' and I got the error:  unexpected token '
05:13 < echoSMILE> *stored
05:14 < Stuk> because ' is not valid for a string in JSON
05:14 < shmoon> hm also i am sure browserify had a watch option now i cant find in documentation, last i tried was an year ago
05:14 < Stuk> http://json.org/
05:15 <@mbalho> i recommend browservefy if you want a nice dev tool for browserify
05:15 < Stuk> echoSMILE: you could use JSON.stringify to put the object in redis in the first place
05:15 < Stuk> then JSON.parse will definitely work
05:15 < echoSMILE> Stuk: one idea, instead of doing the string replace what you think just 'convert' all to base64 and on read do it again?
05:16 < Stuk> I don't think that's the best solution
05:16 < echoSMILE> Stuk: JSON.stringfy() work in which way ?
05:16 < Stuk> echoSMILE: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
05:17 < shmoon> mbalho: https://github.com/chrisdickinson/browservefy ?
05:18 < shmoon> hm what happened to watch option in browserify ?
05:19 <@mbalho> shmoon: it was buggy (as are most watch things) so it was taken out
05:19 <@mbalho> shmoon: i like browservefy's approach better fwiw
05:20 < shmoon> :|
05:20 <@mbalho> schuranator: e.g. https://github.com/maxogden/voxel-hello-world/blob/master/package.json#L22
05:20 <@mbalho> dang wrong sch person
05:20 <@mbalho> shmoon: see above link for example usage
05:22 < shmoon> mbalho: so code from test.js gets into bu8ndle.js ?
05:22 < shmoon> also scripts.start are something special ?
05:22 < echoSMILE> Stuk: tks
05:23 <@mbalho> shmoon: yea its what runs when people type 'npm start'
05:23 <@mbalho> shmoon: its a good practice cause it makes it easier for people to run your module, you get more pull requests that way
05:23 < shmoon> :D
05:24 <@mbalho> shmoon: the : syntax means 'if a browser requests bundle.js give them browserified demo.js instead'
05:24 < shmoon> mbalho: you mean test.js - but what if i've multiple files using browserify's require() ?
05:24 < shmoon> so maybe along with budnle.js i want bundle2.js
05:25 <@mbalho> shmoon: just make a single file that requires all your junk
05:25 < shmoon> junp ok :D
05:25 < echoSMILE> Stuk: last question, how to add a entry into the object?
05:27 < echoSMILE> Stuk: nvm
05:29 < goddard> yo
05:32 < ballsdeepdevelop> has anyone used this imap module before: https://github.com/mscdex/node-imap ??
05:38 < goddard> anyone home
05:38 < ningu> no
05:38  * Ax_SeS is not home.
05:41 < goddard> pp/packages/mongo-livedata/mongo_driver.js:103
06:14 < goddard> whhy would i get an error trying to connect to mongodb
06:14 < goddard> Error: failed to connect to [localhost:27017]
06:17 < goddard> yo yo yo
06:17 < goddard> im just hangin out in the node.js chat
06:18 < goddard> people keep on joining and leaving
06:18 < goddard> yo yo yo
06:18 < goddard> if you got a sec come and check dis error 
06:18 < goddard> yo yo yo 
06:19 < ningu> goddard: um, maybe your server isn't running?
06:20 < goddard> ningu: im new how can i figure that out
06:20 < ningu> that isn't a nodejs question
06:21 < goddard> ningu: what kind of question is it
06:21 < ningu> a mongodb question
06:21 < goddard> ningu: i dont think that is the issue
06:27 < jaseemabid> Hey I need some help with the v8 types. How can I do a conversion from 'v8::Local<v8::Object>' to 'const v8::Arguments&' ?
06:29 < goddard> ningu: any idea buddy
06:29 < goddard> ningu: i could use a leg up on this
06:30 < ningu> goddard: I already told you
06:47 < TehShrike> yo
06:48 < Shadoobie> has anyone had any luck integrating the impactjs game framework/engine with node.js via either the impsock or the node-impact-emu projects?
06:48 < Shadoobie> or otherwise?
06:49 < Shadoobie> i'm about to re-watch videos 6 and 7 here: http://indie-resource.com/forums/viewforum.php?f=99
06:55 < Shadoobie> is there an npm command that will show me a tree of all my globally installed modules?
06:56 < Shadoobie> should i just look at the contents of my node_modules folder?
07:03 < ningu> Shadoobie: yes, that would be easiest
07:03 < Shadoobie> okay cool thanks again ningu 
07:12 < triptec> I'm looking to cache things, mainly rest api calls what would I use?
07:28 < AAA_awright> triptec: What do you mean?
07:28 < AAA_awright> Oh like a module?
07:29 < AAA_awright> triptec: An HTTP API I assume (HTTP is RESTful by default)
07:55 < goddard> ningu: ok i figured that out now i got a new error
07:55 < goddard>  Unhandled 'error' event
08:23 < goddard> check this out http://pastebin.com/ZEZVdegd
08:24 < ningu> goddard: can't really debug an error without seeing the code that produced it
08:28 < goddard> ningu: what path.js?
08:28 < ningu> it's a standard node module
08:28 < triptec> how would I filter out json attributes I dont want in the object? like remove p from all data items{data:[{u:'user1', n:'name1', p:'password'}]}
08:28 < goddard> so it should have no issues
08:28 < ningu> goddard: the issues are in the arguments being passed to the method
08:29 < ningu> triptec: .filter() works for arrays
08:29 < ningu> but for that you'd have to use delete
08:29 < ningu> or some sort of equivalent of filter() that works on objects
08:29 < ningu> underscore probably has something
08:30 < triptec> ningu: but that would remove whole item, I just want to remove password from it
08:30 < triptec> ok
08:30 < triptec> tanks
08:30 < triptec> thanks'*
08:30 < ningu> triptec: no, delete items.data[0[.p
08:30 < ningu> with ] :)
08:31 < goddard> ningu: http://pastebin.com/RKWZCy7B
08:31 < ningu> items.data = items.data.filter(function(item) { delete item.p; return item });
08:31 < triptec> ah
08:31 < triptec> thanks
08:34 < ningu> goddard: the code that initially triggers the error is in fs.js
08:35 < goddard> ningu: i basically just use meteor --create example leaderboard and then i use demeteorize and thats it
08:35 < goddard> not sure if your familar with it
08:35 < ningu> nope
08:37 < goddard> ningu: http://pastebin.com/sE5fEDB6
08:39 < ningu> oh, well that's just core fs.js, I thought maybe it was a different one
08:39 < goddard> ningu: nope
08:40 < goddard> curl https://install.meteor.com | /bin/sh
08:40 < ningu> goddard: there may be a meteor channel
08:41 < goddard> ningu: i am trying to convert meteor to a node.js style app
08:41 < goddard> im using node
08:41 < goddard> i used demeteorize
08:41 < ningu> oh
08:41 < goddard> it turns it into a node app
08:41 < ningu> well, I don't know meteor
08:42 < ningu> and you aren't giving very much information
08:42 < goddard> ningu: ive given everything you asked for
08:43 < goddard> i know how to follow traces but these arent much help for me
08:43 < goddard> im new to node
09:10 < sinclair|work> goddard: welcome to hell
09:13 < goddard> hah
09:13 < goddard> debugging errors is kind of hard with node or is it just me
09:16 < sinclair|work> goddard: its ... an artform
09:17 < sinclair|work> goddard: just write all application event logs out the the console
09:17 < sinclair|work> goddard: later on, and if you are so inclined, you can redirect the console stream out to something else
09:17 < sinclair|work> like a network stream, or file stream etc
09:18 < sinclair|work> that way, you can watch things happening in your application in a console/terminal window
09:18 < goddard> yeah i need to do that
09:42 < tomahaug> Hi guys .. Any of you know a great history.js api? 
10:05 < ashnur> are there multiple apis of history.js?
10:08 < tomahaug> Well, there's Sammy.js for example .. It's a framework, but they have a url-manipulation/routing section .. Like Backbone.history
10:08 < tomahaug> I was just wondering if there where any a bit more highleveled route-api's than history.js
10:08 < tomahaug> Standalones preferably
10:22 < geNAZt> does someone know a snippet of code for sharing sessions between socket.io and expressjs ?
10:28 < spion> I just realized something... when writing instructions to install global modules (e.g. npm install -g browserify), one should always add a version suffix (e.g. npm install -g browserify@1). Otherwise you risk that the user gets a version incompatible with your instructions :)
10:35 < tomahaug> +1 spoin
10:40 < shesek> spion, why not just add them as a dependency?
10:40 < shesek> makes much more sense than telling people to globally install the specific version you need
10:40 < shesek> what happens if two projects require a different version of something, and both tells the user to install globally?
10:41 < shesek> instructing people to install something globally is an antipattern
10:41 < shesek> unless that something is your own package, which provides binaries that should be global
10:41 < geNAZt> shesek: what if spion tells the user to use the binary of browserify ?
10:42 < shesek> geNAZt, install locally, and use the local browserify
10:42 < spion> I could tell them to invoke it from node_modules/.bin
10:42 < geNAZt> yes but it is bad
10:42 < geNAZt> if you have a npm module that runs only as a binary you should install it as global
10:42 < shesek> or just add "./node_modules/.bin" to your PATH, so the binaries of the dependencies of the package in the current directory are accessible
10:42 < spion> its not that bad, its just that its not brief and it looks confusing when trying to introduce something to people.
10:42 < shesek> e.g. running "browserify" would resolve to "./node_modules/.bin"
10:43 < spion> (which is when I'd write instructions)
10:43 < shesek> resolve to "./node_modules/.bin/browserify", that is
10:44 < shesek> tho a better way to do that, rather than telling users to manually copy and paste something to their shell (for invoking browserify or whatever) is to just provide an npm script
10:44 < shesek> "npm run build-bundle" or something, that'll execute browserify
10:44 < spion> if you provide a npm script, you're hiding the internals, which is exactly the opposite of providing instructions
10:44 < shesek> (npm scripts also gets ./node_modules/.bin automatically added to their path, so you can reference dependencies's binaries)
10:45 < spion> I'm not talking about what would be the best way to use a global module in a build system or another module
10:45 < spion> ... I'm talking about explaining the internals.
10:45 < shesek> like, tutorials or something?
10:46 < spion> yup
10:46 < shesek> yeah, in that case its fine. I was referring to cases where something like browserify is needed to build some specific thing that you published
10:46 < spion> but you have good points - I should mention the caveats.
10:46 < zoki> hello, i'm trying to depoly some fill to heroku via cloud9
10:46 < spion> the worst tutorial is the kind that leaves you hanging with bad practices
10:46 < spion> :)
10:47 < zoki>  git status failed 127
10:47 < shesek> yeah. when I started with node, it seemed to me like adding "-g" whenever installing something is the common practice
10:48 < shesek> took me a while to get rid of this habit and properly define dependencies for my projects
10:49 < shesek> zoki, you should probably ask cloud9 that
10:49 < shesek> or heroku
10:50 < zoki> ok, thx
10:55 < geNAZt> does someone know how to set socket.io up in a expressjs vhost ?
10:57 < shmoon> I'm trying to understand something. https://github.com/donpark/hbs - how is it useful? it says to be an expressjs view engine for handlebar, but handlebar doesnt require a separate engine for it on server side does it? i mean its just like writing {{ something }} and compiiling on client side.
10:58 < shesek> shmoon, its for using handlebars in nodejs, so you can render it server-side, before sending it to the client
10:58 < geNAZt> shmoon: well it can run on the browser, but this is the module for nodejs (which should be the same)
11:00 < shmoon> I see, so it takes arrays, or whatever data from my express route and sends the template generated with all lists or whatever from the data to the client
11:00 < geNAZt> shmoon, yes
11:00 < shmoon> what do you guys suggest? using this or doing the template compilation client side?
11:00 < geNAZt> well it depends on your application
11:01 < geNAZt> for some reasons compiling it on the server would be better
11:02 < shmoon> i thnk doing on server frees up some work for server, but i wonder if that'd have bad affect  on SEO or not
11:02 < shmoon> *doing on client
11:02 < geNAZt> but i wonder if that'd have bad affect  on SEO or not <== that :D
11:02 < shmoon> wht are the reaosns for which compiling on the server is better anyway?
11:02 < shmoon> oh
11:02 < geNAZt> crawler dont execute js, so they can crawl client side templates
11:02 < geNAZt> cant*
11:02 < shesek> shmoon, generally speaking, unless your app has a good reason to render it on the client-side, you should do that on the server
11:03 < shesek> for example, if you're getting real-time updates via a websocket or ajax or something, it wouldn't make sense to render it on the server
11:04 < shmoon> i see thanks :)
11:05 < Acrack> any french here ?
11:29 < triptec> I got a array of tracks I'd like to lookup with the spotify api, thing is I can only do 10 calls a second, is there any way to do this in a loop or would I loop with setTimeout?
11:30 < geNAZt> triptec: use a queue for this, so you can call the api every second for 10 times
11:30 < geNAZt> and than pause and wait
11:36 < triptec> geNAZt: you got any module for this or would I need to create my own?
11:37 < geNAZt> you can use a array for this
11:41 < triptec> geNAZt: would this be a good way to go? http://letsnode.com/example-of-what-node-is-really-good-at
11:42 < geNAZt> no, cause you cant control how much requests are made in one second
12:07 < NoFaTe> hello folks
12:07 < NoFaTe> Is anyone here familiar with npm publishing?
12:31 < eighty4> After upgrading to 0.10.1 from 0.8.20 this no longer works. Any input would be great! http://paste.is/1152/ (Trying to pipe a net.connect to a stream)
12:32 < SomeoneWeird> streams have changed
12:32 < SomeoneWeird> ... a lot
12:36 < eighty4> SomeoneWeird: yeah, I realize that but from the docs/blog post it's stated that they should still work without needing to change much. If you look at my example the stdin pipe works. So I was hoping a net.connect pipe would still work
12:36 < Havvy> eighty4: YOu might want to read about Streams2 (though I thought they kept the old Streams...)
12:38 < eighty4> Havvy: Not really sure what to read up on, all I've read indicates that it should work
12:38 < geNAZt> you can force a stream2 to fall into "old style"
12:39 < eighty4> geNAZt: by doing resume()
12:39 < geNAZt> for example
12:39 < geNAZt> or appending data listeners
12:40 < eighty4> geNAZt: well yeah, I am a dding a data listner
12:40 < geNAZt> no you dont
12:40 < geNAZt> your Prompt stream is "old style"
12:40 < geNAZt> but you never force the Net.Socket stream to be old style
12:41 < geNAZt> so you try to pipe a stream2 stream into a stream1 stream
12:41 < eighty4> oh :|
12:41 < geNAZt> add a conn.resume() at line 30
12:41 < geNAZt> so it should fall back into stream old style
12:41 < geNAZt> and should work
12:42 < eighty4> geNAZt: I've already tried that, that didn't work. But I haven't added a data listener to conn
12:42 < geNAZt> well you shouldnt do that
12:43 < eighty4> given that resume() didn't work I'm not sure what to do next
12:43 < geNAZt> you could try appending a data listener
12:44 < geNAZt> but it forces node to emit the data event twice (2 listeners)
12:44 < geNAZt> it shouldnt be that problem
12:44 < geNAZt> but why do you use old streams ?
12:45 < eighty4> basicly becase I was using old streams and haven't learnt how the new works.
12:45 < geNAZt> well it is better to learn how the new ones work
12:45 < eighty4> I wanted to understand why this broke when it should work before moving on
12:46 < eighty4> I could just start working stream2 but I wanted to understand why this would break when, from what I understand, it should still work.
12:46 < eighty4> Just leaving it at "it's just not working" felt wrong
12:47 < geNAZt> no its the simple stream2 into stream1 pipe that doesnt work
12:49 < eighty4> Yeah, you're right about having both stream2 and stream1 now. But adding conn.resume(); to L30 doesn't help 
12:49 < geNAZt> well then a conn.on('data', function() {}); should
12:50 < eighty4> but it doesn't either :(
12:50 < geNAZt> oO
12:50 < geNAZt> does it emit data ?
12:50 < eighty4> from what I understand Net.connect will emit data
12:50 < geNAZt> no it should
12:51 < geNAZt> but does conn.on('data', function(data) { console.log(data); });
12:51 < geNAZt> work ?
12:52 < eighty4> Given that it doesn't run at all… I get the same error "TypeError: Cannot read property 'pipesCount' of undefined"
12:52 < geNAZt> hmm
12:52 < geNAZt> well that shouldnt be so
12:53 < geNAZt> well try a conn.resume(); before appending the data listener ?
12:53 < geNAZt> does that work ?
12:53 < geNAZt> and if not add a conn.on('readable', function() { console.log("Readable"); });
12:58 < eighty4> ok, nothing of that works. And I'm starting to wonder if it's not the pipe/streams fault but rather Net.connect.
12:58 < geNAZt> well anything of this should work if it is a stream api
13:00 < SomeoneWeird> key word: should
13:01 < geNAZt> yes in nodejs it "should" :D
13:02 < eighty4> oh well…. I giving up. I'll just rewrite it into stream2.
13:15 < ebright> anyone have an elegant solution for dealing with CouchDB's sliding auth cookies in Node?
13:17 < ebright> I currently check for a new cookie after every call to Couch and "set" into the res object right away
13:19 < ebright> but this requires me to pass the response object around to all the functions
13:20 < ebright> passing it back through callbacks becomes messy when going through a function such as async.parallel..
14:04 < Acrack> does node has a different behavior according browsers ?
14:05 < geNAZt> Acrack: no
14:05 < aMoniker> node doesn't run in a browser..
14:05 < Acrack> then i have a problem xD
14:05 < aMoniker> unless I'm missing out
14:05 < Acrack> im trying to do a simple login logout thingy
14:05 < SomeoneWeird> yes, yes you do
14:05 < geNAZt> no its right, node doesnt run in the browser
14:06 < Acrack> im running test on firefox and chrome
14:06 < Acrack> when im logging with 2 different users
14:06 < Acrack> i see in the "connected user list" both names
14:06 < geNAZt> Acrack: do you have a code pastie ?
14:06 < Acrack> lemme show you sec
14:09 < Acrack> http://pastebin.com/P20jeWVz
14:09 < Acrack> here is my pastie
14:09 < Acrack> there is a class "left-bar" where you can see connected users
14:10 < Acrack> the login thingy works well, but when i logout weird stuff happen
14:10 < Acrack> am i doing something wrong ?
14:11 < geNAZt> L26-L28: why do you save the user 3 times ?
14:12 < Acrack> am i ?
14:12 < geNAZt> yes
14:12 < Acrack> i just say the me = user
14:13 < Acrack> and put my self in the object "users"
14:13 < geNAZt> the username as me.username = username
14:13 < geNAZt> me.id = username
14:13 < geNAZt> and user[username] = me
14:13 < geNAZt> count(username) === 3
14:13 < Acrack> k sec
14:14 < Acrack> me = user;
14:14 < Acrack>         me.username = user.username;
14:14 < Acrack>         users[me.username] = me;
14:14 < Acrack> better ?
14:14 < geNAZt> no :D but okay
14:14 < geNAZt> it shouldnt be the problem
14:14 < Acrack> i guess not :x
14:15 < geNAZt> users[user.username] = user;
14:15 < geNAZt> that would be better
14:15 < geNAZt> and i got your error
14:16 < Acrack> i don't make difference between me and other users ?
14:16 < geNAZt> the socket never knows which user he is
14:16 < geNAZt> so how should he know which user to log off ?
14:16 < Acrack> yea i guess that an issue :D
14:16 < Acrack> how to make difference
14:16 < Acrack> :x
14:16 < Acrack> or how to detect who is who
14:16 < geNAZt> can i rewrite it a bit ?
14:16 < Acrack> sure
14:17 < Acrack> just trying to learn node with that exemple :D
14:19 < geNAZt> http://hastebin.com/fekucogebi.js
14:19 < geNAZt> that should be better
14:20 < Acrack> ok lemme look :p
14:20 < geNAZt> now the socket itself holds the current username (one socket => one username)
14:20 < geNAZt> and you have only one place where the user is stored (its cleaner and less memory leaky)
14:22 < Acrack> you didn't touch the client right ?
14:22 < geNAZt> no i didnt
14:22 < Acrack> ok 
14:22 < Acrack> lemme restart node :p
14:24 < Acrack> hum
14:24 < Acrack> not working
14:24 < Acrack> in client side
14:24 < Acrack> i replaced 
14:24 < geNAZt> what does it not do ?
14:24 < Acrack> user.id by user
14:24 < Acrack> right ?
14:25 < Acrack> first of all its appending objects instead of strings
14:25 < Acrack>         io.sockets.emit('newuser', users[user.username]);
14:25 < Acrack> users[user.username] that should be a string
14:25 < geNAZt> no it is the full user object
14:25 < Acrack>     socket.on('newuser', function (user) {
14:25 < Acrack> ah ok
14:25 < geNAZt> socket.on('newuser', function (user) {
14:25 < geNAZt>         username = '<div class="' + user.id + '">' + user.id + '</div>';
14:25 < geNAZt> is right
14:25 < Acrack> my bad then lemme correct that
14:25 < Acrack> how it is correct there shouldn't be "id" no ?
14:26 < Acrack> cause in server we didn't declared it
14:26 < geNAZt> oh yes
14:26 < geNAZt> now its username
14:26 < Acrack> i need to replace id 
14:26 < Acrack> y
14:27 < Acrack> ok so now i got my 2 users loged (ff and chrome)
14:28 < Acrack> when i logout nothing disapear
14:28 < Acrack>         io.sockets.emit('disuser', users[socket.userName]);
14:28 < Acrack> i guess i should send this instead of user 
14:28 < geNAZt> what does the client get ?
14:28 < geNAZt> no
14:28 < Acrack> when i logout from firefox i see this Uncaught TypeError: Cannot read property 'username' of null
14:28 < geNAZt> because it gets deleted
14:29 < Acrack> in the chrome console
14:29 < geNAZt> can u open the Chrome Dev Tools (F12) switch to the Network Tab
14:29 < geNAZt> Open the Websocket Request 
14:30 < geNAZt> And logoff from ff ?
14:30 < geNAZt> then you should see and disuser event in the network panel
14:31 < Acrack> hum i don't
14:31 < Acrack> but i see an error
14:31 < Acrack> the one i sent u
14:32 < geNAZt> in the client ?
14:32 < Acrack> and in firefox i get this :
14:32 < Acrack> TypeError: user is null
14:32 < Acrack> $('.' + user.username).remove();
14:32 < Acrack> when i logout from chrome
14:32 < geNAZt> oh
14:32 < geNAZt> okay
14:33 < geNAZt> can you comment the delete out ?
14:33 < Acrack> ok
14:33 < Acrack> sec
14:34 < Acrack> same error
14:34 < Acrack> its not working mate :(
14:35 < Acrack> maybe code in client is wrong
14:35 < Acrack> btw im not getting that error in server but in client
14:35 < Acrack> i mean browser
14:35 < Acrack> server is fine
14:35 < geNAZt> http://hastebin.com/qajolehiqu.js
14:36 < geNAZt> no the server doesnt give you the user object if someone logs off
14:36 < geNAZt> it is a server problem
14:36 < geNAZt> but try this please
14:36 < geNAZt> it should log what it does
14:36 < geNAZt> so you should see: User logged in: user1
14:36 < geNAZt> User logged in: user2
14:36 < geNAZt> User logged off: user1
14:37 < Acrack> ok sec
14:38 < Acrack> User logged off: undefined
14:38 < Acrack> ^^
14:38 < geNAZt> ahhhh
14:38 < Acrack> this is when i logged out
14:38 < geNAZt> nice :D
14:38 < Acrack> from chrome
14:38 < Acrack> and got this : TypeError: user is null
14:38 < Acrack> $('.' + user.username).remove();
14:38 < Acrack> in firefox
14:41 < geNAZt> http://hastebin.com/motawajevi.js
14:41 < geNAZt> my last idea
14:42 < cloudbender> Hi just popping in to keep my account freshened lotta love bye.
14:42 < MI6> joyent/node: Ben Noordhuis v0.10 * 132c77e : doc: document that stdio is usually blocking - http://git.io/-mDZJQ
14:43 < Acrack> geNAZt: got an error at start
14:43 < Acrack> fn(null, this.data[key] === undefined ? null : this.data[key]);
14:43 < Acrack> at the login
14:44 < lovemuffin> typeof data[key] === 'undefined'
14:44 < geNAZt> lovemuffin, no
14:44 < geNAZt> :D
14:44 < Acrack> maybe the set/get ?
14:45 < geNAZt> the get i think
14:45 < geNAZt> but i dont know why
14:45 < Acrack> username userName
14:45 < Acrack> while the key is username
14:45 < Acrack> dunno if its related xD
14:46 < geNAZt> i hate socket.io -_-
14:46 < geNAZt> you must work with callback if you use set/get
14:46 < Acrack> xD
14:47 < Acrack> can't we work with normal stuff
14:47 < Acrack> like the previous paste
14:47 < geNAZt> well it doesnt seem to work
14:47 < geNAZt> i dont know why but the userName key in the socket object is undefined
14:47 < geNAZt> even if you set it
14:48 < geNAZt> so the only way is to use the socket.io storage
14:48 < geNAZt> w8 a minute and i will post a pastie :D
14:48 < Acrack> yes please cause im a little bit lost :p
14:54 < MI6> joyent/node: Ben Noordhuis v0.10 * 628bd81 : crypto: check randomBytes() size argument  Throw a TypeError if size > 0x - http://git.io/XnAWtw
14:56 < SNE> does node have session management prebuilt or I need to create one/use existing library for that?
15:02 < zaleb^home> geNAZt, 
15:02 < zaleb^home> on connection you could do something like:
15:03 < zaleb^home> socket.on('login', someFunctionHere.bind (this, socket);
15:05 < zaleb^home> then in the function:
15:05 < zaleb^home> someFunctionHere(socket, data) {socket.username = data.username }
15:08 < eighty4> Ok, I'm clearly to daft to be coding node.js atm… Shouldn't this be working? http://paste.is/1153/ just a simple rewrite of of the example from http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener
15:11 < geNAZt> zaleb^home: thanks but the solution was another
15:11 < mscdex> eighty4: node version?
15:16 < eighty4> mscdex: 0.10
15:16 < eighty4> or rather 0.10.1
15:17 < mscdex> eighty4: i wasn't even able to connect with that code for some reason, but this worked: https://gist.github.com/mscdex/348043fc160fbc8e71b6
15:17 < mscdex> i'm on 0.10.1 also
15:19 < eighty4> mscdex: that gives me the same error as above
15:20 < mscdex> what platform?
15:21 < eighty4> mscdex: os x 10.8, node 0.10.1 upgraded from 0.8.20 using brew
15:25 < Cainus> hey all... Is anyone doing code-coverage for their tests and NOT using mocha?
15:26 < mscdex> eighty4: i dunno, i don't see anywhere in any of the stream libs where _writableState is unset and _writableState is set in the constructor
15:26 < mscdex> :S
15:28 < eighty4> mscdex: happen to know where _stream_writable.js is located on os x?
15:28 < mscdex> it's compiled in
15:29 < eighty4> yeah, I was afraid of that :/
15:29 < eighty4> makes it a bit hard to debug futher :/
15:29 < eighty4> I wonder if my node install could be broke
15:34 < eighty4> yeah no… I don't get this :(
15:35 < mscdex> eighty4: well if nothing else, post an issue on the issue tracker
15:36 < mscdex> i don't have osx 10.8 to test with
15:36 < eighty4> I'll try it on some other installs first
15:36 < eighty4> ok, the exact same code works on ubuntu 12.10 with node 0.10.0. Now lets upgrade it to 0.10.1
15:39 < eighty4> I should probably make sure I'm on a clean node install as well. Purge all npm content and so on
15:44 < eighty4> mscdex: thanks for the input! I'll add an issue if I can't figure it out. I'll try some differernt versions of node to check if I can find when it happened
15:44 < eighty4> I'm 100% it worked in 0.8.20
15:55 < robinson_k> hey
15:55 < whiskers75> hi
15:55 < larpzeit_> hi
15:57 < robinson_k> currently thinking about how i could rescue a request in express if my session handler (connect-redis) throws an error (because the redis-service is down)
15:57 < robinson_k> anyone has experience with that?
15:59 < robinson_k> just calling next() after regenerating a new session in the error handler which is invoked just invokes the next error handler
16:01 < whiskers75> robinson_k: make an intermediary session handler?
16:06 < robinson_k> wondering if theres nothing more convenient
16:10 < IngoPan> Hi, i am Linux newbie and i´d like to know if someone knows this Amazon book
16:10 < IngoPan> and can tell me if its any good to enter the Linux world: http://t.co/gSv45HcmYN ?
16:15 < hans> tls.connect example fails on node v0.10
16:16 < codylindley> is it ok to ask a question about npm here?
16:16 < JohnMcLear> yes
16:17 < JohnMcLear> IngoPan: It depends on how you learn, you might prefer codeacademy style and that's free so maybe check that out first before investing your money.
16:17 < codylindley> would it be a true statement to say, that npm stores packages, unlike something like bower with only stores endpoints
16:18 < JohnMcLear> i'm not familiar with bower, but I'd say that npm "stores" packages
16:18 < codylindley> to clarify, "like bower which only stores endpoints
16:18 < JohnMcLear> if stores = writes the package to the file system
16:18 < JohnMcLear> if endpoint = a pointer to a file on a remote host
16:19 < codylindley> when npm, publishes, are you sending the package to the npm registry?
16:19 < codylindley> unlike, bower, that simply stores a json file with a git endpoint
16:20 < JohnMcLear> Yes
16:20 < JohnMcLear> You can specify a git endpoint too in your package.json but npm never "references" it, it's just there if people want to contribute/see the source before installing
16:20 < JohnMcLear> the actual files are provided by the registry itself
16:21 < hans> but you can install npm packages using a url
16:21 < hans> npm install --help
16:21 < codylindley> ok, that is what I thought, I just wanted to make sure this was a clear difference between the two
16:23 < codylindley> thank you, john and hans
16:25 < JohnMcLear> np
16:28 < hans> does anyone know if it is possible form the client perspecive to specify supported ciphersuites using the tls.connect method? I find this option for tls.createServer but not for tls.connect. Does anyone know why=
16:29 < MI6> joyent/node: verwaest@chromium.org v0.10 * 14417fd : v8: Unify kMaxArguments with number of bits used to encode it.  Increase  - http://git.io/YRF3JQ
16:30 < happycrappy> hi all, I'm playing node.js & redis and had a question about race conditions: can I share a single redis connection to handle incoming http requests or do I need to create a new connection for each new request? I'm worried about this scenario: 2 http requests come in at the same time, both need to query redis, request1 issues a query and yields to request2 while its waiting on a response from redis, request2 queries redis....will the 
16:30 < happycrappy> responses get mangled together?
16:31 < mscdex> hans: the `options` object you pass in to tls.connect() is used to create a Credentials object
16:31 < mscdex> hans: so just set the 'ciphers' property
16:32 < hans> mscdex: thanks a lot. Will try that!
16:33 < mscdex> happycrappy: i'm not familiar with redis in particular, but i doubt they would get "mangled"
16:34 < mscdex> happycrappy: most protocols either only allow one request at a time or allow multiplexing
16:34 < mscdex> happycrappy: in the latter case, there's usually some kind of identifier to match up requests and responses
16:36 < happycrappy> mscdex: thanks
16:38 < mscdex> happycrappy: it looks like redis allows pipelining and it returns responses in the same order of the requests
16:45 < happycrappy> mscdex: yes
16:46 < happycrappy> mscdex: just skimmed through redis-node's code....
16:46 < happycrappy> mscdex: does that imply that when I'm handling request1 and am writing out a command to the redis stream, it won't yield in mid write to request2?
16:50 < TGYoshi> Hi all, whenever I rapidly receive data on a server, two different packets, I receive 'as one packet' in the 'data' event. How can I fix this?
16:53 < mscdex> happycrappy: no
16:53 < mscdex> happycrappy: er i mean yes, it won't yield
16:54 < happycrappy> mscdex: so in general stream writes are atomic in node?
16:54 < mscdex> TGYoshi: assuming you're using TCP, it's a stream so you cannot treat it as individual messages like UDP
16:55 < mscdex> happycrappy: it's not so much to do with node than it has to do with the implementation of the redis module you're using
16:57 < mscdex> happycrappy: the redis server will always return responses in the same order as the requests, so it doesn't matter what order your requests are in, as long as the module is keeping things in order when matching up responses with requests
16:58 < happycrappy> mscdex: yes, but I wondering what happens in theoretical case of request1 writing a large string to redis & handling a query from request2
16:58 < mscdex> happycrappy: don't worry about the module's implementation. it will make sure the requests and responses are matched up correctly 
16:59 < happycrappy> mscdex: I'm just trying to wrap my head around how node works
16:59 < mscdex> happycrappy: there's only one thing ever happening in javascript land
16:59 < mscdex> happycrappy: javascript code execution itself is synchronous
17:00 < happycrappy> mscdex: but node yields to other fibers/greenlets/? (not sure what to call em in node) during io, right?
17:01 < mscdex> happycrappy: there are no fibers/greenlets in node
17:01 < happycrappy> mscdex: I think I'm totally missing something :(
17:03 < mscdex> happycrappy: node is an evented, single-threaded thing. when you perform I/O, it does so using asynchronous mechanisms (epoll on Linux, kqueue on FreeBSD/OSX, etc)
17:03 < mscdex> happycrappy: when node checks for I/O using these mechanisms, it will dispatch each event to javascript
17:04 < mscdex> happycrappy: there is no yielding
17:05 < MI6> joyent/node: Marcel Laverdet master * ef33c3c : Remove harmful + unnecessary bounds checking in tls  The EncIn, EncOut, C - http://git.io/R5YMoA
17:06 < TGYoshi> mscdex: yet I'd like to do so. Do I have to add some null byte and split on it or so?
17:06 < mscdex> TGYoshi: if you're in control of the data source, then yeah you'll have to devise a way of creating boundaries
17:07 < MI6> joyent/node: Marcel Laverdet v0.10 * 7d9602a : Remove harmful + unnecessary bounds checking in tls  The EncIn, EncOut, C - http://git.io/tavRzA
17:07 < TGYoshi> alright, thanks
17:07 < mscdex> TGYoshi: whether that boundary is a special character or you use a Type-Length-Value thing, etc
17:07 < TGYoshi> Is it also possible that data only passes a part of the packet?
17:08 < mscdex> TGYoshi: the 'data' event is raised when any data arrives. so it could be one byte, or it could be one megabyte
17:08 < TGYoshi> I see, but I can't use length I'm afraid, since the length data bit can be split in two
17:09 < MI6> joyent/node: Marcel Laverdet v0.10 * 1526909 : tls: remove harmful unnecessary bounds checking  The EncIn, EncOut, Clear - http://git.io/bJ4mtw
17:09 < TGYoshi> anyway, I'll be going for some random bytecode, thanks
17:09 < happycrappy> mscdex: I think I being thrown off by async io part.... when I get notified of a new request, I issue a stream.write and the receiving party of the write blocks....can I get another notification of a request before the write finishes?
17:09 < MI6> joyent/node: Marcel Laverdet master * 9430ca6 : tls: remove harmful unnecessary bounds checking  The EncIn, EncOut, Clear - http://git.io/hgXVAg
17:10 < mscdex> TGYoshi: you can buffer bytes if you keep your length field constant. fwiw i wrote a TLV module awhile back if it helps any: https://github.com/mscdex/xfer
17:11 < TGYoshi> I see
17:12 < Victorr> hi all, I'm new with node.js, and I'm looking for the counterpart of Socket.writeInt32BE(). Is there a readInt32BE() method somewhere?
17:12 < mscdex> Victorr: yep, but those methods operate on Buffers, not sockets
17:13 < mscdex> Victorr: http://nodejs.org/docs/latest/api/buffer.html#buffer_buf_readint32be_offset_noassert
17:13 < Victorr> mscdex, thanks!
17:14 < mscdex> happycrappy: it depends. if the kernel buffer is not full, no. if node is buffering writes in memory because the kernel buffer is currently full, then yes -- but the writes are queued up in memory in order
17:15 < happycrappy> mscdex: that makes perfect sense. thanks for spending all this time helping me!
17:15 < mscdex> happycrappy: no problem
17:59 < raadad> hey guys :D
18:00 < OTBS4Life> Heyo
18:00 < raadad> ive been noding for a while and just wanna see if I can find sum best practices
18:00 < OTBS4Life> I would say the best practice is to practice.
18:00 < OTBS4Life> That, and learn to ask more specific questions.  :-D
18:01 < raadad> ahahah :P 
18:01 < raadad> ok, first 1 is there any good docs on how to best layout a project, or manage multiple files that depend on methods in each other files?
18:05 < raadad> ?
18:05 < chty> hello
18:07 < chty> I was wondering if there was time schedule support for each version of nodejs? I started some stuff with nodejs0.8 but wonder for how long time this version will be still supported
18:07 <@Nexxy> chty, if by support you mean being able to come to #node.js and ask questions
18:08 <@Nexxy> lifetime support!
18:08 <@Nexxy> (lifetime of #node.js)
18:08 < chty> no I mean, updates on the 0.8 branch. 0.8.x
18:09 <@Nexxy> oh, good question
18:09 < OliverJAsh> substack: hey, any recommendations on using jade with browserify v2?
18:09 <@Nexxy> I doubt there will be much support there, but I don't work for joyent so I have no clue if there are any official plans
18:10 < chty> Nexxy: okay. do you know where I may find an answer?
18:10 <@Nexxy> chty, you could ping isaacs and wait for a response
18:10 <@Nexxy> or try the mailing list
18:10 < chty> okay
18:10 < chty> thanks for your answer
18:10 <@Nexxy> :)
18:11 < Techie-Micheal> Speaking of support, any good book recommendations? I've got a book now, but it seems to be written for 0.4.
18:14 < shesek> chty, any specific reason to prefer to avoid upgrading to 0.10?
18:17 < chty> shesek: time ;) the thing is, I dont't want to spend that much time updating the "major" version. I mean once developped I like to follow minor version and let the application make its own life. so I was wondering for along time I will be able to have minor updates on 0.8.x
18:18 < chty> shesek: moreover I'm wondering how nodejs providers manage version for users. I mean if they provide 0.8.x branch, I guess they can't upgrade to 0.10.x just like that
18:21 < mscdex> chty: there are API differences noted in the wiki
18:25 < OTBS4Life> So, I finally figured out what broke between v0.8 and v0.10 for me.  It was my fault.  Still not sure why the change with the upgrade to Node.js, but whatever.
18:25 < OTBS4Life> I had created an Object.prorotype.clone() method.
18:25 < OTBS4Life> I was using Winston for logging, and instead of Winston's console logger getting its own function from exports.clone, somehow it got mine.
18:26 < OTBS4Life> I wasn't even using it!  I had long switched to underscore for that type of thing.
18:26 < OTBS4Life> But yeah, instead of getting random functions on my log files, now I get the data I was expecting.
18:26 < chty> mscdex: true https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 just wonder how nodejs providers are doing to manage users and versions
18:26 < drudge> and this is why we don't do such things
18:26 < shesek> chty, some provides lets you choose which version to use
18:26 < OTBS4Life> drudge, Agreed.  :-D  I did that as a temporary hack for something and was too lazy to remove, apparently.
18:26 < chty> shesek: oh ok. nodejs manages versions directories ?
18:28 < shesek> chty, on heroku, it reads the nodejs version required by your app (from package.json's engines) and sets-up the VM with that version
18:28 < shesek> on my local machine, I use nvm (node version manager) to manage that
18:28 < shesek> not sure how its handled in other providers
18:29 < chty> shesek: ok thanks
18:30 < shesek> I'm trying to find for how long old versions are maintained (I wonder about that too), but I can't seem to find anything
18:30 < chty> shesek: true I didn't find any time schedule for versions
18:34 < JamesMGreene> Anyone recall what the actual values of EOF and WEOF are in C?
18:35 < Havvy> JamesMGreene: You can't write a quick program to print them?
18:35 < JamesMGreene> I'm not writing C code :)
18:35 < JamesMGreene> I'm converting it to Node
18:36 < JamesMGreene> transcribing, let's say
18:36 < tjfontaine> on osx EOF is -1
18:36 < MI6> joyent/libuv: Ben Noordhuis master * eca008a : Merge remote-tracking branch 'origin/v0.10' (+2 more commits) - http://git.io/40XDwA
18:37 < MI6> joyent/node: Timothy J Fontaine master * 51f128d : fs: uv_[fl]stat now reports subsecond resolution  While libuv supports re (+1 more commits) - http://git.io/s0Phow
18:38 < JamesMGreene> thanks, tjfontaine
18:39 < bnoordhuis> shesek: you mean node major versions? about 6 months after the first release of the next major version
18:39 < bnoordhuis> shesek: e.g. v0.8 will be maintained until ~september of this year
18:39 <@Nexxy> ^cc/ chty 
18:40 < shesek> oh, good to know. is this documented somewhere?
18:40 < shesek> wait, 0.x are considered major versions? aren't they minor?
18:40 < bnoordhuis> shesek: not that i know of
18:41 <@Nexxy> right here: http://logs.nodejs.org/node.js/latest#18:35:51.107
18:41 < bnoordhuis> shesek: no, 0.x.y is a minor version
18:41 < bnoordhuis> Nexxy: i was waiting for someone to do that :)
18:41 <@Nexxy> :P
18:41 < shesek> isn't it major.minor.patch?
18:41 < bnoordhuis> shesek: we use the huge.major.minor approach
18:41 <@Nexxy> hahaha
18:41 < geNAZt> nodejs has no major version
18:41 < ljharb> yet.
18:42 <@Nexxy> yes it does!
18:42 <@Nexxy> it just has no huge version
18:42 < chty> bnoordhuis: okay. so not really documented somewhere?
18:42 < shesek> so what is the first part of the version called?
18:42 < shesek> super-major? :P
18:43 < bnoordhuis> chty: no. i guess isaac would have to send out an email or a blog post or something
18:43 < ljharb> lol true, it's zero
18:43 < chty> bnoordhuis: ok :)
18:43 < shesek> cool. thanks
19:04 < Jamy> Holy derp almost a thousand people :P
19:04 < Jamy> Hello! :)
19:48 < quincy> anyone help with a socket.io question (likely general JS question)? inside a class i begin listening via socket.on('foo',bar);  the function bar() tries to use a callback method this.baz().  but baz() is undefined (despite my defining it).  when i debug to see what "this" is, it's SocketNamespace, not the class i thought.
19:48 < quincy> the class in which the code was.
19:49 < geNAZt> well its the wrong scope
19:49 < quincy> what am i not seeing?  i feel very stupid.
19:49 < geNAZt> this.baz comes out of the event scope
19:49 < geNAZt> not of the class scope
19:49 < quincy> but how do i then call something of the right scope? (this wouldnt' happen in other languages...  it's confusing)
19:50 < quincy> (at least i don't think i've ever seen this with other languages)
19:50 < geNAZt> it happens in other languages :D
19:50 < geNAZt> you can bind a scope to the function
19:50 < quincy> really?  if i set up a C# event listener and it got called back I'd be in the scope of the original class, not some event class
19:50 < geNAZt> socket.on('foo', bar.bind(classInstance));
19:50 < quincy> right?
19:50 < geNAZt> would do it
19:51 < geNAZt> dont know c#
19:51 < geNAZt> but in js its normal
19:51 < shesek> quincy, http://fitzgeraldnick.com/weblog/26/
19:51 < quincy> ok, so when i set it i just say socket.on ('foo', this.whatever)
19:51 < geNAZt> and i know some event patterns that do it
19:51 < geNAZt> then this.whatever gets called in the SocketNamespace scope
19:52 < shesek> oh, wait, it doesn't cover what I wanted you to see
19:52 < RLa> in c#, c++, java and possible others "this" has static scope
19:52 < geNAZt> yes because they dont have event loopers
19:52 < quincy> oh, geez... duh, now i suddenly get it.  of course, it's because it was just giving it the function outside of an instantiated class.
19:52 < quincy> thanks!
19:52 < geNAZt> and dont have scopes to jump in
19:52 < geNAZt> even if you have threads
19:53 < nkohari> that isn't really why "this" means something different in js than in a language like C#
19:53 < geNAZt> no
19:53 < RLa> i think it's important that "this" can by dynamic
19:54 < geNAZt> yes, if you want it to be static always bind the instance to run in
19:54 < RLa> i'm pretty sure there are idioms and patterns that depend on it
19:54 < Industrial> Anyone working with couchbase?
19:54 < Industrial> where do I get libcouchbase from?
19:55 < samholmes> What would be the opposite of functional purity?
19:55 < samholmes> Muddy programming?
19:55 < nkohari> functional impurity :)
19:55 < shesek> quincy, basically, a function is not bound to any specific "this" value
19:55 < RLa> samholmes, side effects :)
19:55 < shesek> quincy, the `this` value is determined in runtime, according to how you use the function
19:55 < nkohari> yeah doesn't functional purity have to do with immutability and idempotence
19:56 < lohkey> nkohari: yeah, you can just sum it up as referential transparency
19:56 < RLa> and "state" is the root of all evil
19:56 < lohkey> RLa: not state, mutable state :p
19:57 < RLa> yeah
19:57 < shesek> quincy, calling foo() uses "window" for the this context, while calling obj.bar() uses "bar". doing `foo2 = obj.bar; foo2()` acts the exact same as `foo()` - it still uses `window` as the this context
19:57 < samholmes> RLa: haha
19:57 < samholmes> RLa: What if the external state was controlled?
19:57 < shesek> quincy, if you pass one of your functions elsewhere, you need to either manually bind them, or keep a reference to the correct `this` in the lexical scope
20:32 < Industrial> Anyone use couchbase? I have installed it on Ubuntu. How do I get to the admin web interface now? the couchbase-server service has started.
20:32 < willwhite> what are people using these days for cli config/arguments? I'm looking for something that supports both config files and cli arguments.
20:33 < willwhite> https://github.com/dominictarr/rc looks good, but can't configure optimist to use shorthands
20:33 < willwhite> Industrial: is it still http://localhost:5984/_utils/ ?
20:36 < Industrial> willwhite: i got it, it was localhost:8091
20:36 < willwhite> Industrial: cool, I use a old version. must have changed
20:40 < Industrial> Is there a function a-la util.inherits that I can use on node and in the browser?
20:41 < mmalecki> Industrial: just copy it from node's source
20:41 < Industrial> ok
20:42 < Industrial> ow thats tiny man
20:47 < RLa> Industrial, if you knew some js you could have come up with similar function on your own :)
20:48 < RLa> not sure, but with browserify you might be able to use exactly the same function
21:12 < substack> OliverJAsh: you could use http://github.com/substack/brfs and then just do jade.compile(fs.readFileSync(__dirname + '/file.jade'))
21:22 < OliverJAsh> substack: ahh but i want browserify to look for required jade files in the entry and then compile those.
21:26 < substack> OliverJAsh: that's what it would do?
21:29 < OliverJAsh> substack: i'm not sure i understand how you would use brfs to do this. could you provide an example really quick?
21:34 < substack> OliverJAsh: just do fs.readFileSync() in your browser code
21:34 < substack> and run browserify with -t brfs
21:34 < substack> the fs.readFileSync() calls will turn into strings with the file contents
21:35 < substack> so if I have "beep boop" in foo.txt
21:35 < substack> var fooText = fs.readFileSync(__dirname + '/foo.txt')
21:35 < substack> turns into
21:35 < substack> var fooText = "beep boop"
21:36 < scalding> I installed Node.js, then thought I had screwed something up so I uninstalled it.  Now when I try to install it I get error 2908.  This is on a WinXP SP3 box.  Any ideas?
21:37 < s5fs> scalding: what is error 2908?
21:37 < s5fs> is that all you get or is there text too?
21:37 < scalding> Some error in the installer.  Let me try it again and I'll tell you
21:38 < scalding> hrm.
21:38 < s5fs> okay
21:38 < scalding> I just held down the enter key until it finished, so when I ran it again I got a different dialog.  I chose 'repair' and it looks like it worked...
21:39 < scalding> maybe nothing, sorry for the bother
21:39 < cas> Hi, I try to write a few seconds of binary data (PCM audio) from a stdout into a file. I keep getting corrupt files, any ideas what I could be doing wrong? http://pastebin.com/FBkpc5PX
21:39 < s5fs> scalding: no worries, glad it's working.
21:40 < scalding> thanks, I'm going to try a few things.  if anything's not working I'll let you know ;)
21:40 < s5fs> cas: is it not possible to redirect the sox output directly to a file?
21:41 < cas> s5fs: No i need a file every x seconds/minutes
21:42 < cas> s5fs: sox/ffmpeg/arecord can only output to a single file, any other ideas how to capture are also welcome
21:43 < s5fs> cas: i'm working on an embedded device and we lash up the node-based web ui to the hardware via shell scripts, mainlyl
21:44 < s5fs> cas: so from node i'm using child_process.exec() to call the shell script and toss in whatever arguments I need
21:45 < s5fs> for me, this was the easiest approach. the scripts were moderately complex and allowed me to run multiple commands sequentially, something that feels more cumbersome in node due to it's async nature.
22:10 < sshaginyan> Guys does it make sense to minify the server-side javascript code?
22:10 < sshaginyan> does the v8 interpreter work faster if I minify server side code?
22:15 < bnoordhuis> sshaginyan: no and no
22:15 < sshaginyan> why not?
22:15 < bnoordhuis> sshaginyan: because the source representation has no bearing on the machine code that v8 generates
22:15 < sshaginyan> k
22:17 < arduix> anyone interested in making a eventbrite & meetup.com like?
22:21 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 1487d5a : build: add OBJC makefile var  Overrides the Objective-C compiler that is  - http://git.io/A9HpqA
22:44 < TGYoshi> How can I easily attach some ascii symbol to a string? I tried  0x04  but this attaches the NUMBER 4
22:49 < ljharb> TGYoshi: String.fromCharCode
22:50 < TGYoshi> ljharb: thanks
23:06 < OliverJAsh> npm down for anybody?
23:07 < st_luke> OliverJAsh: no
23:08 < runvnc> github has a problem not npm I dont think
23:08 < lohkey> github be down :(
23:10 < gkatsev> github is being DDoSed
23:10 < gkatsev> https://status.github.com/
23:21 < kornnflake> what's the best way to store statistical data? like the amount of msg send by my users? it's a hell lot of data if i store the the "simple" way and just through everything in the db :D
23:21 < kornnflake> *like the amount of msg send by my users over time
23:23 < Havvy> kornnflake: Increase a cell in a database with every message sent?
23:24 < chilts> kornnflake: you could look at https://github.com/etsy/statsd
23:24 < kornnflake> Havvy  i need to know the date/time too 
23:24 < Havvy> Then you need to have a table of message, date, and time.
23:24 < chilts> then you probably need to put it in the DB
23:24 < chilts> yeah, what he said
23:24 < Havvy> Or at least message id.
23:25 < chilts> unless you just put it in a logfile nad analyse it off line
23:25 < Havvy> If that is too much to handle, you can chunk datetimes together, say in periods of 1 hour.
23:26 < kornnflake> Havvy yea guess that's wat i'm going to do. store them every 5min in the db > then chunk into days > weeks> months and delete all those 5min entrys
23:26 < kornnflake> thanks
23:27 < ljharb> i'd keep the 5min entries
23:27 < Havvy> ^^
23:27 < Havvy> >> 86400 / 5
23:27 < purr> Havvy: (number) 17280
23:27 < ljharb> storage space is infinite and free. computation is expensive.
23:27 < Havvy> >> 86400 / 300
23:27 < purr> Havvy: (number) 288
23:27 < Havvy> 288 entires per day is manageable.
23:27 < ljharb> so is 17k.
23:28 < ljharb> a single mysql instance can hold billions of rows :-p
23:28 < kornnflake> but it gets ridiculously slow :p
23:28 < ljharb> oh i'm not saying avoid making the chunks
23:28 < ljharb> i'm saying, don't throw away the granular data.
23:28 < Havvy> >> 365 * 288
23:28 < purr> Havvy: (number) 105120
23:29 < Havvy> 100k entries per year...even on my desktop from 2008 that would be quick.
23:29 < ljharb> you can offload it to an archive database if you have to. but throwing away granularity is something you'll regret.
23:30 < kornnflake> Havvy those stats are not the only ones i want to store ;) multiply that by 100
23:30 < kornnflake> but yea
23:30 < kornnflake> gonna store them all
23:30 < kornnflake> and will see how it goes
23:30 < kornnflake> can always delete them anytime
23:31 < Havvy> So 105,120,000/yr. That's still small.
23:32 < Havvy> Especially if each is in its own table.
23:32 < kornnflake> never worked with so many entrys :>
23:34 < lohkey> most companies i've worked at store such stats in simple log files
23:34 < lohkey> aggregate them later and when we want to analyze them we'd run them through map-reduce jobs via hadoop
23:34 < kornnflake> want to make some of them public
23:35 < lohkey> there are many good solutions for event processing
23:35 < JohnMcLear> graphite
23:35 < lohkey> nothing scales better then append only flat files though for writes
23:35 < lohkey> i've become a fan of Linkedin's Kafka
23:36 < OTBS4Life> lohkey, I would argue that having something structured that is doing about the same thing is better
23:36 < lohkey> OTBS4Life: sure, but thats will be harder to scale and less dynamic
23:36 < lohkey> which is what i love about kafka
23:36 < lohkey> w/ Kafka you can replay events from a certain time window
23:36 < OTBS4Life> lohkey, What do you mean by "less dynamic"?
23:36 < lohkey> and fire them at a worker
23:36 < JohnMcLear> is github acting up for anyone else tonight?
23:36 < lohkey> and the worker defines how to structure the data
23:36 < JohnMcLear> I can't clone repos n stuff
23:37 < kornnflake> JohnMcLear ddos :(
23:37 < kornnflake> https://status.github.com/
23:37 < JohnMcLear> sigh
23:37 < lohkey> yup, githup storage is compromised atm
23:37 < chilts> pages are back up, but not ssh stuff
23:37 < chilts> and probably other git stuff
23:37 < JohnMcLear> oh well, I guess it's time to trawl through git issues to close off ones i resolved
23:37 < lohkey> OTBS4Life: when you store large mass of event data in a structured form like a DB and one day you elide to change that structure you'll be in a world of pain
23:38 < lohkey> s/elide/decide/
23:38 < OTBS4Life> lohkey, No worse pain than I would be in if I were writing flat files.
23:38 < lohkey> well no, 
23:38 < JohnMcLear> lohkey: Check out ueberDB btw, it's default is a flat KVS then you migrate to other dbs as you go
23:38 < lohkey> because flat files are processed by workers
23:38 < runvnc> how many gigs of data is this
23:38 < runvnc> like a gig?
23:38 < lohkey> and the workers can define the structure
23:38 < JohnMcLear> it's teh database abstraction layer that allows for datababies
23:38 < JohnMcLear> it sucks
23:38 < JohnMcLear> but it's fun
23:39 < JohnMcLear> like your wife!
23:39 < OTBS4Life> lohkey, Either you are crazy, or we are talking past each other, likely because I just jumped into this conversation 10 seconds ago.  :-)
23:39 < lohkey> based on my experience, which doesn't say much, the biggest site i've ever worked on had ~5million DAU
23:40 < lohkey> doing a reorg on 32 database shards is far more painful then adding a new entry in a log file
23:40 < lohkey> new entry in log file, adjust hadoop map-reduce job to compensate and be done with it
23:40 < OTBS4Life> What I'm saying is that, flat file or not, you have structure.  You might as well use tools for managing structures that don't add overhead.
23:41 < OTBS4Life> If you want to add new entries in some new format in MongoDB or whatever, then just do it!  Nothing stopping you.
23:41 < lohkey> pfft
23:41 < OTBS4Life> Change your tools to compensate, and be done with it.
23:41 < lohkey> i was not talking about mongo
23:41 < lohkey> mongo is clearly not structured
23:41 < lohkey> i thought you were talking about a SQL solution
23:41 < OTBS4Life> No, no.  Screw that.  :-)
23:42 < OTBS4Life> I only dump into SQL stuff for aggregation.
23:42 < lohkey> yeah, thats why i thought you were crazy
23:42 < OTBS4Life> Ha
23:42 < OTBS4Life> Sorry, I thought I mentioned that earlier.
23:42 < OTBS4Life> But then realized I deleted it by accident.
23:42 < lohkey> mongodb is a fine solution then
23:42 < lohkey> but, theres no reason you can't just store log lines in JSON either :p
23:43 < lohkey> i guess the only advantage is hadoops map-reduce is kind of made to work with log files
23:43 < OTBS4Life> Of course not.  I actually do that in some projects, but am moving them over to MongoDB.
23:43 < lohkey> but if you use mongo as a map-reduce feed you need additional middleware
23:44 < OTBS4Life> Perhaps.  But it certainly does simplify my configuration with logs being shuffled to another server.
23:44 < lohkey> but if you're doing real time analytics i'm still a huge fan of Kafka + stateful workers
23:44 < OTBS4Life> Kafka looks neat.
23:44 < lohkey> OTBS4Life: Thats what Scribe is for
23:44 < OTBS4Life> I haven't used it before.
23:45 < lohkey> Scribe gets my logs to where they need to be so i can just map-reduce and profit
23:45 < OTBS4Life> I haven't heard of Scribe.
23:45 < OTBS4Life> The kind of logging I need ties directly into the application itself.  What I am doing works for me.
23:45 < OTBS4Life> If I had just general logs... I'd probably use something else.
23:45 < lohkey> Facebooks open sourced log aggregaion framework
23:46 < lohkey> OTBS4Life: yeah, same
23:46 < lohkey> we use user events to generate our machine learning models
23:46 < lohkey> we dump our logs to S3, we spin up an EMR job on EC2 and using Mahout we generate our recommendation models
23:47 < lohkey> We have ~10 million events to process per day
23:47 < lohkey> the average job cost to process that amount of data is ~$150 / run
23:47 < zkirill> Can anyone point to an example of properly hashing a session ID before storing it on the server and later verifying the session ID derived from a user's cookie w/o using any Node.js frameworks? Thanks!
--- Log closed Sun Mar 24 00:00:11 2013
