--- Log opened Tue Nov 20 00:00:01 2012
--- Day changed Tue Nov 20 2012
00:00 < jesusabdullah> IN FACT if you were to DO some benchmarks (for various scenarios would be best) it would make AN EXCELLENT BLOG POST
00:00 <@mbalho> styol: yea it gives you lower level access and lets you cram more stuff into memory
00:00 <@mbalho> styol: it is useful for writing thigns that mess with binary data
00:00 < styol> mbalho: such as an http server or something doing filesystem I/O? quite the intrigued
00:01 < tnorris> styol: usually only if you're using floating point. v8 has some amazing optimizations for int32.
00:01 < jesusabdullah> JacksonAND: scala is jvm right?
00:01 <@mbalho> styol: decoding MP3s, resizing images
00:01 < astropirate> you might want to look at JS perf for those benchmarks
00:01 < JacksonAND> yeah it's jvm
00:01 < astropirate> i think i saw some a while ago
00:01 < jesusabdullah> JacksonAND: you'll most likely find that node is faster for some things and scala faster for others, depending on what you're doing
00:01 <@mbalho> styol: node uses buffers for network and file system stuff cause thats all binary usually
00:01 < jesusabdullah> JacksonAND: in particular if you try to do cpu intensive things scala will probs come out ahead
00:02 < jesusabdullah> JacksonAND: but if you're just passing the bits around node will likely win
00:02 < JacksonAND> what does node beat scala in? i'm mostly doing realtime web apps
00:02 < jesusabdullah> try it and find out, JacksonAND 
00:02 < styol> mbalho: makes sense… definitely something I'd like to learn more about out of curiosity
00:02 < jesusabdullah> or, choose the environment that makes you happy and fuck the haters (and wait until you run into actual speed bottlenecks before stressin')
00:03 <@mbalho> JacksonAND: node is accessible/simple and has a wonderful third party module ecosystem
00:04 <@mbalho> styol: this is a fun read http://nikhilm.github.com/uvbook/
00:04 < JacksonAND> node does look easier
00:04 < JacksonAND> akka is probably overkill for what i want to do
00:04 < styol> mbalho: I think I saw you or someone else recommend this last week. Will give it a read indeed. Just based on the name, is it related to libuv?
00:04 <@Nexxy> node.js is the answer
00:04 <@mbalho> styol: yea its a book about all the stuff in node that isnt JS
00:05 < styol> mbalho: first line says yes, sorry :)
00:05 < styol> awesome.. definitely going to check it out
00:06 < tnorris> JacksonAND: to place some perspective, my node apps have always been able to process more data than my network pipe will allow. so node has never become my bottleneck.
00:06 < styol> Thanks a bunch for your time tnorris and mbalho. Much appreciated.
00:23 < tnorris> anyone mind reviewing my answer in the following issue? want to make sure I'm not off base: https://github.com/joyent/node/issues/1155
00:23 < carlos5m> How do you by pass the nagle algorithm in node js
00:25 <@mbalho> carlos5m: http://nodejs.org/api/net.html#net_socket_setnodelay_nodelay
00:25 <@mbalho> carlos5m: protip http://nodejs.org/api/all.html
00:26 < carlos5m> That doesn't work
00:27 <@mbalho> if there is a bug in node you can use github to open an issue, just provide a test case
00:28 < carlos5m> Well I found this "TCP does not know, or care, about your program's concept of message framing. It does not care that you send 3 "messages" with separate calls to send. A valid TCP implementation could return a single byte for each call to a function that reads from the stream or it could buffer up as much as it feels like before returning bytes to you. You should code accordingly."
00:29 < carlos5m> Does that mean its not possible?
00:32 < xp_prg> how can I detect if I am not running in a browser
00:35 < substack> xp_prg: if (typeof window === 'undefined') { /* you're probs not in the browser */ }
00:36 < timoxley> need help naming a function
00:36 < substack> timoxley: theodore
00:36 < chilts> timoxley: barnabus
00:36 < tnorris> anyone know if it's possible to view all "watched" issues in github?
00:36 < timoxley> thanks guys
00:37 < chilts> :)
00:37 < timoxley> anyway… 
00:37 < timoxley> it's like a reduce, but instead of a single iterator, it takes a chain of functions to execute
00:37 < chilts> timoxley: in series or parallel?
00:37 < timoxley> it's basically an async reduce that pops the iterator off a list
00:37 < timoxley> chilts either
00:38 < chilts> multireduce?
00:38 < chilts> I have no idea
00:38 < substack> timoxley: [ f, g, h ].reduce(function (acc, fn) { return fn(acc) }) ?
00:38 < timoxley> depends on whether the function supplies a callback or not
00:38 < timoxley> substack async though…
00:41 < timoxley> substack but yeah basically what you said. what would you call that?
00:41 < timoxley> reduce.
00:41 < timoxley> it's just reduce.
00:41 < timoxley> fine.
00:43 < substack> timoxley: well it's a special kind of reduce where you're reducing over functions
00:43 < substack> that's pretty much what step is
00:45 < timoxley> substack yeah I'm doing that thing where you reimplement everything from scratch to learn
00:46 < substack> timoxley: folding over asynchronous composition, you could call that idea
00:46 < timoxley> ooh
00:56 < tnorris> piscisaureus_: sorry if I'm flooding your notifications. reviewed ~30 issues over the last week.
00:56 <@piscisaureus_> tnorris: that's okay. I'm trying to keep up and usually I will follow your suggestions :-)
00:57 <@piscisaureus_> tnorris: someone needed to do this anyway
00:57 <@piscisaureus_> :-)
00:57 < tnorris> heh, thanks. and have to say, this is a great way to learn the source.
00:59 <@piscisaureus_> tnorris: haha, well, thank you :-)
00:59 <@piscisaureus_> tnorris: so you are looking at the terrible mess that we made :-p
01:01 < tnorris> piscisaureus_: lol, no worries. I've dealt with far worse. just focused on reviewing all issues pre v0.6.
01:06 <@piscisaureus_> tnorris: I am going away now. Tomorrow Ben or myself will pick up the slack.
01:07 < tnorris> ok. i'm between projects this week, so I'll try to get through the last 100 or so.
01:56 < py_> Is anyone know how to use the 'cd' command in spawn method in nodejs?
01:59 < Raynos> timoxley: that's exactly what function composition is
02:01 < Raynos> timoxley: https://github.com/Raynos/composite/blob/master/index.js#L12 I tried to implement the async version as a reduce but it was buggy so I used a state machine
02:05 < chewed-on> OK, so let me get this right, stream.write() is asynchronous, that means if I have a for(var i = 0; i < length; i++) {   ….   stream.write(buffer);  }   wouldn't that mean that i would have reached the end of the loop before stream.write(buffer) even finish ?
02:05 < chewed-on> or started..
02:07 < MitchW> chewed-on: it's a possibility, but not necessarily - it depends how fast write() completes vs. your loop completes and how write() got scheduled vs. your function with the loop
02:07 < MitchW> but yes, it's possible - if not probable (that'll really depend on the system, and more importantly the stream) though
02:08 < chewed-on> MitchW: well, I have a for loop (0 to 3) { print index }  right before my real for loop that uses stream.write, the simple for loop manage to print 0, 1, 2   but my real for loop only managed to execute once when it should have executed at least 3 times.
02:09 < chewed-on> my output results differs to my theory
02:09 < chewed-on> output result shows my for loop is actually only executing once
02:09 < MitchW> is your stream buffered? (do you need to flush your stream in your real loop?)
02:09 < MitchW> flush/close
02:10 < chewed-on> MitchW: it's a socket stream to Apple's push notification server, I believe Apple says a connection to their server must be maintained, we should not connect & disconnect (denial of service attack apple says)
02:10 < chewed-on> MitchW: what does stream.flush() do ?
02:10 < MitchW> and put a print in your real loop - just to make sure (it may very well be executing 3 times, you just can't tell because the stream data hasn't flushed)
02:10 < chewed-on> MitchW: sorry, I've only picked up Node.js a few days ago
02:12 < MitchW> hmmm, I assumed node stream had a flush function, it doesn't appear to :S (but it does indicate that write() is potentially buffered)
02:12 < chewed-on> MitchW: I have put a print in my real for loop:  https://gist.github.com/f2bfdef6bb06976c1821
02:12 < MitchW> anyone here have more info on this case?
02:12 < chewed-on> MitchW: it should have printed 3 different "strToken" 
02:12 < chewed-on> MitchW: line 31
02:13 < chewed-on> MitchW: woops, sorry no colour, try this one: https://gist.github.com/4fef92b4380bc56820a2
02:15 < chewed-on> if a function is asynchronous in Node.js and after the function is called, does the parameter gets destroyed ?
02:15 < chewed-on> or not until the entire function have fully executed?
02:18 < MitchW> shouldn't until entire function is executed
02:21 < _pash> hello, could you guys suggest me some books on learning nodejs please? something like learnpythonthehardway for exmaple? 
02:27 < emocakes> learnnodejstheeasyway?
02:28 < substack> emocakes: http://nodejs.org/docs/latest/api/all.html
02:39 < dominictarr> rvagg, yo whats up?
02:39 < rvagg> dominictarr: yo, just reading Raynos' latest issues
02:40 < Raynos> rvagg: come hang in #stackvm
02:43 < chewed-on> MitchW: do I need to clear or reset a buffer after I use it ?
02:43 < chewed-on> I commented out all my buffer operations and printed my tokens, it seems if I don't do all my buffer operations, it manage to loop through my array
02:47 < timoxley> Raynos thanks
02:49 < timoxley> Raynos yeah that's pretty similar to what I'm doing
02:49 < Raynos> i think the git history has a version that uses reduce
02:49 < Raynos> for the implementation
02:50 < timoxley> Raynos actually, I think I'm going to use this. I like the interface of returning a new function that does the composite operation
02:50 < Raynos> timoxley: https://github.com/Raynos/composite/blob/999ace348c197c240ece0cf5d172eda6e36895ef/index.js#L27 
02:51 < Raynos> old code still uses async reduce
02:51 < Raynos> timoxley: I actually don't use asynchronous function composition. I use synchronous function composition with streams / reducibles / promises
02:51 < timoxley> Raynos gah, that might be even better
02:58 < timoxley> gozala you suck at readmes. 
02:59 < timoxley> e.g. https://github.com/Gozala/functional https://github.com/Gozala/reflex https://github.com/Gozala/reducers
02:59 < timoxley> :D
03:00 < dominictarr> hey timoxley! whats up?
03:02 < chadmandoo> hey is there any node js being used on mobile development?
03:02 < timoxley> dominictarr hey! doing great, just got back from a railscamp+jsconf holiday
03:02 < timoxley> dominictarr where are you at these days?
03:03 < timoxley> chadmandoo node doesn't discriminate
03:04 < chadmandoo> so if i was building a framework for mobile app dev it should be able to use it
03:05 < timoxley> chadmandoo why not? it's like asking if anyone is keeping bread in their fridges
03:05 < xp_prg> is there a cool trick I can use to detect if I am in a browser or not?
03:07 < timeturner> xp_prg: user agent?
03:08 < timoxley> xp_prg substack answered that earlier… (typeof window === 'undefined') also you'll find many solutions via the google
03:18 < fent> i just deployed http://mustream.jit.su
03:20 < timoxley> fent what does it do
03:20 < dnz-> malware
03:21 < fent> it shows photos from meetup.com
03:21 < fent> and you can filter them
03:21 < dnz-> AHHHHHHHHHHHHHH
03:21 < dnz-> IT SHOWED ME NAKED PRGGERS WOMAN
03:21 < dnz-> PLZ NOPE
03:22 < fent> really? link please
03:22 < dnz-> fent came up in the stream
03:22 < fent> i dont think you can post that stuff on meetup though
03:22 < dnz-> 2-3 pics in succession
03:22 < dnz-> they were like 'photography'
03:22 < dnz-> 'art'
03:23 < fent> oh yeah there's a ton of photography groups
03:23 < fent> found out through this
03:24 < dnz-> heh
03:24 < RLa> it could stop adding new images when i click on one
03:26 < RLa> oh, it opens the photo in another tab
03:32 < motiooon> how peer to peer with node js works ?
03:32 < motiooon> something like realtime video conferencing?
03:32 < motiooon> is there any library that does that ?
03:33 < mscdex> if you're using node.js it isn't peer to peer exactly
03:33 < timoxley> Raynos why did you move away from async.reduce
03:33 < Raynos> You mean use reduceRight as an implementation detail for async composite?
03:33 < timoxley> yep
03:34 < Raynos> too complex
03:34 < Raynos> too hard to bug fix
03:34 < timoxley> Raynos cool.
03:34 < dnz-> ITS TOO HARD
03:34 < motiooon> mscdex: what do you mean?
03:34 < dnz-> BUT I WANT TO VIDEO CONFERENCE
03:34 < dnz-> oh ok
03:34 < timoxley> motiooon peer to peer means no server
03:34 < motiooon> aha
03:34 < motiooon> so isn't this achievable with a node server?
03:35 < dnz-> wat
03:35 < b-ot> Hey, there's the word java in javascript, so that should guarantee the performance, right?
03:35 < Raynos> motiooon: write bindings to webrtc
03:35 < dnz-> 'node server' 'peer 2 peer'
03:35 < motiooon> only for keeping the count of connections etc..
03:35 < Raynos> mscdex: node is plenty peer to peer
03:35 < timoxley> motiooon then sure
03:35 < Raynos> peer to peer means no _central_ server
03:35 < motiooon> interesting
03:35 < timoxley> motiooon but it sounds like you're confused about what peer to peer means
03:36 < timoxley> you can do video conferencing for sure though
03:36 < exit2> sup n0derz
03:36 < mscdex> Raynos: judging by his question, i was pretty sure what he meant :-)
03:36 < timoxley> motiooon tokbox is pretyt rad http://www.tokbox.com/
03:36 < timoxley> *pretty
03:36 < motiooon> interesting
03:37 < Raynos> or google hangouts
03:37 < exit2> are these both closures? http://jsfiddle.net/W5uZW/1/
03:37 < timoxley> or google hangouts
03:37 < motiooon> ok, but I want to build something like google hangouts using webrts and node streams
03:37 < motiooon> would that be possible?
03:37 < motiooon> webrtc and node streams
03:38 < timoxley> motiooon possible yes. but why not use something prebuilt?
03:38 < motiooon> because it costs money, and I want to make money, not spend money ?
03:38 < timoxley> motiooon building stuff = costing money
03:39 < motiooon> that is also true
03:39 < motiooon> at least in the short term
03:39 < timoxley> motiooon tokbox pricing also reasonable
03:40 < timoxley> exit2 any time you use the function keyword, you're creating a new closure
03:40 < Raynos> motiooon: You have 1 week to writing working bindings to webrtc in node
03:40 < Raynos> if you can't pull it off then you don't know enough to build the complete system and you should either use something of the shelf or hire someone
03:41 < motiooon> Raynos: I'm up to the challenge
03:41 < Raynos> i wrote some comments somewhere
03:41 < motiooon> where?
03:42 < Raynos> https://github.com/jpemartins/node-webrtc
03:42 < Raynos> https://github.com/mlasak/node-webrtc/issues/1
03:43 < styol> When you have a function that absolutely requires a callback, how do you guys deal with the scenario of one not being provided? IE: if (typeof callback !== 'function') return null; // I've been doing return console.log('Callback is required'); but that is not helping me much on unit tests
03:44 < chilts> styol: sometimes I just do : callback = function(){} if they didn't supply one
03:44 < chilts> yes, it requires one, but if they don't pass it then you're screwed
03:45 < chilts> or throw an error (not recommended, but might force people to do it properly if it's a program error rather than a runtime error)
03:45 < styol> chilts: ah interesting. In most scenarios I'm trying to make it fail gracefully and serve as an explanation as to why. This isn't something being published, just internal functions like user loading and such that should never be used without receiving data back
03:46 < chilts> I would probably throw an error in that case ... since they're using the library incorrectly
03:46 < chilts> but that might be a debatable point :)
03:46 < styol> yeah i've heard i should avoid that haha
03:46 < chilts> indeed
03:46 < styol> I'm thinking about just returning null or false instead
03:47 < chilts> that might be ignored of course :)
03:47 < styol> or log a message and do that also haha
03:47 < styol> just add braces!
03:47 < chilts> absolutely, log it as an error too :)
03:47 < chilts> (not just a warning)
03:47 < styol> console.error() is actually what i meant and didn't provide a proper example of
03:48 < styol> for some reason for these I'm very adverse to curlys
03:48 < chilts> I use various logging libraries which provide log.trace() log.debug() log.info() log.warn() log.error() and log.fatal() (there may be other names for these things too)
03:49 < styol> chilts: using winston or something else?
03:49 < chilts> winston, but there are others out there
03:50 < chilts> and I also wrote my own very small library
03:50 < chilts> not public though
03:51 < styol> thats coolies
03:56 < chewed-on> niggler, deoxxa woo hooo, finally got my push to work XD
03:56 < chewed-on> Using caolan/async module made it work XD
03:56 < niggler> when do we get to see an npm module?
03:57 < chewed-on> lol
03:57 < Raynos> motiooon: ping me when you have workable webrtc bindings. I'm very much interested in them
03:57 < chewed-on> niggler: I already told you, my pns module makes a request to my server, asking for a very specifically formatted JSON data and parsing it, it's not gonna work for everyone :P 
03:59 < motiooon> Raynos: have you seen https://github.com/webRTC/webRTC.io
03:59 < motiooon> ?
03:59 < Raynos> thats not a webrtc binding
03:59 < Raynos> and its broken for multiple reasons
03:59 < Raynos> do `npm search webrtc` and look at the author field
04:00 < Raynos> `npm search webrtc | grep raynos`
04:01 < LouisT> what does webrtc do exactly?
04:01 < timoxley> LouisT http://en.wikipedia.org/wiki/WebRTC
04:02 < niggler> i love duckduckgo's summary
04:02 < niggler> which actually just grabs the first line of wiki
04:02 < dominictarr> timoxley, hey whats up?
04:03 < timoxley> dominictarr not much, how are you
04:03 < dominictarr> good good
04:03 < niggler> why is the mailing list more important than mentioning what webrtc is?
04:03 < timoxley> dominictarr where are you located atm?
04:03 < dominictarr> In oakland, working on leveldb mad science.
04:04 < timoxley> nice one
04:04 < motiooon> Raynos: but I see that you got all figured out
04:04 < Raynos> motiooon: not at all. 
04:04 < chewed-on> niggler: actually, I found out the problem now too :P
04:04 < timoxley> dominictarr I'll be in SE asia through early next year, if you make it around there 
04:05 < chewed-on> when I went for(var i = 0; i < length; i++)   {   ….  buffer[i++]   }   I am actually mean to use two separate array index counter
04:05 < timoxley> dominictarr http://hackerbeach.org/
04:05 < chewed-on> it should be more like for( var tokenIndex = 0; tokenIndex < length; tokenIndex++)   {  … buffer[i++]  }
04:05 < chewed-on> -_-!
04:05 < niggler> WebRTC (Web Real-Time Communication) is an API definition being drafted by the World Wide Web Consortium (W3C), with a mailing list created in April 2011., and jointly in the IETF with a working group chartered in May 2011.
04:05 < chewed-on> Programming at 2:00AM doesn't help you spot that :P
04:06 < motiooon> Raynos: shouldn't this webrtc-stream do exactly google hangouts style app ?
04:06 < dominictarr> timoxley, are you going to hacker beach? 
04:06 < Raynos> in theory
04:06 < Raynos> but it's 3 months old
04:06 < Raynos> and the API has changed
04:06 < timoxley> dominictarr in theory
04:06 < Raynos> so it wont run
04:06 < dominictarr> I met some hacker beach people in berlin.
04:06 < timoxley> nice
04:07 < dominictarr> I havn't got anything locked in for after the new year though, yet.
04:08 < timoxley> dominictarr I've started on a kinda cool project with a german nomad, plan is to try get to public beta at hacker beach.
04:08 < PastorBones> How do you implement EventEmitter in a singleton module? http://stackoverflow.com/questions/13466227/nodejs-singleton-events
04:09 < dominictarr> timoxley, ah, very good.
04:09 < timoxley> yeah consultancy sucks
04:10 < timoxley> dominictarr what are you doing on leveldb?
04:11 < dominictarr> timoxley, currently, I'm writing map reduce.
04:11 < dominictarr> but the cool thing, is that since all the soft parts are JS, we can do this really modular.
04:12 < timoxley> dominictarr nice… who with? i.e. for fun or for profit?
04:12 < dominictarr> for example, I needed a job queue to implement map-reduce, so there is also gonna be a job queue module
04:12 < dominictarr> I'm working with nearForm
04:12 < dominictarr> (who organized nodedublin)
04:13 < Raynos> what should this code be called as a module ( https://github.com/Raynos/signal-channel/blob/master/connection.js ) ?
04:13 < dominictarr> turns out, they had business applications for my mad science project, 
04:13 < dominictarr> so now they are feeding me.
04:14 < dominictarr> Raynos, what is sockjs-stream ?
04:14 < Raynos> its like shoe
04:14 < Raynos> but when required on the server it returns a client
04:14 < dominictarr> ... but not shoe
04:14 < Raynos> instead of a sock server
04:14 < dominictarr> oh, right.
04:15 < Raynos> i want to modularize that code but cant think of a name >_<
04:16 < Raynos> maybe mux-memo because it's a memoized mux demux stream over sockjs
04:16 < Raynos> seriously the hardest part about coding is naming stuff
04:18 < styol> Is anyone familiar with mocha + chai and why it chooses to fail on a timeout of 2000ms instead of a should/expect failure? Is that so that potentially more individual failures can be output? I noticed this does not happen without providing "done" to the it method callback, but this is an async request so I figured done is potentially required
04:19 < chewed-on> Hello all, can Node.js let me use 2 socket streams at once ?
04:19 < chewed-on> Like I have one socket stream to Apple DEVELOPMENT push server and another one to Apple PRODUCTION push server
04:20 < chewed-on> or can we only open stream at a time ?
04:20 < styol> chewed-on: just to let you know, there is an existing APNS module
04:20 < styol> also it may shed some light on your question but not sure
04:21 < chewed-on> stylus: argon-apns ?
04:21 < styol> chewed-on: yah
04:21 < chewed-on> https://github.com/argon/node-apn
04:21 < chewed-on> yeah that one assumes production server
04:21 < chewed-on> Mine is more custom built for my own system
04:22 < styol> isn't it just a difference of the provided gateway server?
04:22 < chewed-on> I want to make it so that, if the notification database entity's "environment" property is "development" then my code uses development stream, otherwise it will use the "production" stream. 
04:22 < styol> gotcha, yeah that makes sense, I guess just me personally wouldn't rewrite a whole library for that and might instead try to post a patch for such functionality
04:22 < chewed-on> styol: yes it is but the way I am building my backend server using Symfony, I allow a notification to belong to separate environments, development and production
04:23 < chewed-on> more user friendly and organised, if I send a development token into a production socket stream, oooooh boy, Apple's gonna disconnect my stream right away, and all subsequent notifications will not get sent
04:38 < chewed-on> how do I add a parameter to a Http POST request from Node.js ?
05:18 < timoxley> chewed-on do you mean, the response? or are you posting from a node server
05:18 < timoxley> chewed-on if so… how?
05:22 < chewed-on> timoxley: I found this: http://stackoverflow.com/questions/9768192/sending-data-through-post-request-from-a-node-js-server-to-a-node-js-server
05:23 < timoxley> chewed-on this makes that much less painful visionmedia.github.com/superagent/
05:25 < reza911> I'm trying to compile node.js on two servers that are clone of each other, it compiles on both, but the test/simple/test-eio-race.js test passes on one and fails on the other
05:25 < reza911> anyone has any ideas?
05:25 < chewed-on> timoxley: is it a npm module I can install ?
05:25 < timoxley> chewed-on yep. npm install superagent
05:26 < chewed-on> timoxley: looks much easier :D
05:26 < timoxley> chewed-on also see supertest… very similar api you can use for testing remote calls https://github.com/visionmedia/supertest 
05:27 <@Nexxy> reza911, what is the error?
05:27 < chewed-on> timoxley: ok thanks
05:27 < timoxley> np
05:27 < chewed-on> timoxley: how do I call the request ?
05:27 < chewed-on> superagent.request( .. ) ?
05:28 < reza911> Nexxy: it times out, i looked inside the test, in tries to do a loop 100 times and it takes like 15 seconds on the passing server, but on the server that fails it takes forever
05:28 < timoxley> chewed-on var request = require('superagent'); request.get('http://google.com').end(function(res) { console.log(res) })
05:28 <@Nexxy> reza911, https://github.com/joyent/node/issues/4272 perhaps you are experiencing the same thing
05:29 < chewed-on> timoxley: what about post, I just change request.get to request.post()   ? (note this isn't a PUT, POST, DELETE, UPDATE)
05:29 < timoxley> chewed-on yep
05:29 < timoxley> chewed-on what do you mean it isn't a PUT, POST, etc
05:30 < reza911> Nexxy: yea I saw that, they are both EC2 virtual servers with no load.. very weird
05:30 < chewed-on> timoxley: REST API uses GET, PUT, POST, DELETE and apparently that POST has a different meaning to our normal HTTP POST request
05:30 < chewed-on> :P
05:30 < reza911> Nexxy: so I guess I can do a make install being assured that everything still works fine? 
05:31 < timoxley> chewed-on uuuhhh…  I don't know. if it doesn't mean the same that's just something weird in your app that you probably want to fix
05:31 <@Nexxy> reza911, probably
05:32 < styol> With the mocha test framework, is there any way to mute console.logs and such so that they don't output mid-test? Not a deal breaker, just more of an acquired OCD invoker
05:33 < chewed-on> timoxley: it's cool in my case, I know waht I am doing :D
05:33 < chewed-on> timoxley: so response.body would return me the full JSON data  I don't need to go data += chunk ?
05:33 < timoxley> chewed-on yep
05:33 < chewed-on> nice
05:34 < chewed-on> 34 lines became 5 lines :P
05:35 < reza911> Nexxy: thanks
05:37 < chewed-on> timoxley: :( doen't seem like it's returning my JSON properly
05:38 < timoxley> chewed-on what's it doing
05:38 < timoxley> chewed-on you might need to set Accepts header
05:38 < timoxley> chewed-on gist + output please
05:41 <@Nexxy> reza911, :)
05:41 < chewed-on> oh wait...
05:41 < timoxley> chewed-on you also want to check the response code… e.g. via res.ok
05:41 < chewed-on> I only typed my website, not the path to my api :P
05:41 < timoxley> chewed-on ahh
05:41 < timoxley> nice work
05:42 < chewed-on> nice, working now
05:42 < chewed-on> timoxley: thanks for showing me this cool library :D
05:42 < timoxley> chewed-on np
05:43 < deoxxa> morning
05:43 < timoxley> deoxxa morning
05:43 < deoxxa> going to .nl today, wheee
05:44 < timoxley> nice
05:44 <@Nexxy> lol I like how you to refer to countries exclusively by their tld
05:44 < deoxxa> nathan7: will be at schipol at 7:15 this evening
05:45 < deoxxa> Nexxy: easier than typing the whole thing
05:45 < deoxxa> \o/
05:45 < deoxxa> ez-r
05:45 <@Nexxy> <o>
05:48 < deoxxa> so in a pretty disappointing turn of events, my favourite suit pants have developed a hole
05:48 < deoxxa> considering i've only worn them probably 10 times, that's pretty annoying
05:49 <@Nexxy> clearly you are in need of pants insurance
05:49 < deoxxa> perhaps
05:49 < deoxxa> pantsurance
05:49 <@Nexxy> bwahaha
05:51 <@Nexxy> http://pantsuran.ce/
06:18 < chewed-on> Should I use the 32 bit or 64 bit when I want to isntall node on my live server ?
06:18 < chewed-on> It's running Debian
06:19 < chewed-on> 32 bit ?
06:20 < deoxxa> chewed-on: almost definitely 32 bit
06:20 < chewed-on> deoxxa: rightio, more safer
06:20 < deoxxa> well there's a few reasons
06:20 < deoxxa> v8 is just way better on 32 bit
06:20 < chewed-on> ok
06:21 < chewed-on> good thing I asked :P
06:28 < chewed-on> uh…so I untar the node-0.8.14
06:28 < chewed-on> I can see the README.md file, 
06:29 < chewed-on> in the same folder, I go ./configure but it say no file or directory
06:29 < chewed-on> is that node-0.8.14-linux-x86.tar.gz a binary build ?
06:29 < chewed-on> I mean contain a binary build
06:30 < hpj_> is there something like PerlTray for node.js?
06:31 < mscdex> chewed-on: yes
06:32 < mscdex> chewed-on: usually you'll unpack to some place like /usr/local
06:32 < chewed-on> mscdex: I was expecting just the source code not the binary
06:32 < chewed-on> mscdex: I was going to do ./configure, make and make install
06:32 < mscdex> chewed-on: if you see an OS and architecture in the filename, then you know it's not the source :-)
06:33 < chewed-on> mscdex: I honestly did not know that, all I see when I read these kind of file is "tar.gz", "RIGHT, tar ball, unzip, config, make make install mindset" :P
06:34 < chewed-on> mscdex: thanks :)
06:50 < chewed-on> mscdex: is it possible to install Node.js for just my current user ?
06:51 < chewed-on> mscdex: rather than installing system wide
06:51 < deoxxa> chewed-on: just put it somewhere in your path
06:51 < chewed-on> deoxxa: doesn't make install, install Node.js system wide ?
06:52 < dnz-> PATH="$PATH:/home/$USER/node/"
06:52 < dnz-> or something
06:52 < dnz-> no trailing slash'
06:52 < dnz-> deoxxa: get down from their you're not even a real developer
06:52 < gkatsev> --prefix or something when you ./configurew
06:53 < dnz-> *there
06:53 < deoxxa> chewed-on: yes..? but that doesn't matter, just put the binaries somewhere in your path
06:53 < dnz-> im not even real at english
06:53 < deoxxa> dnz-: i'm authentic at english - i'm actually *in* england
06:53 < chewed-on> deoxxa: my system admin says he doesn't want me to install it system wide so I am just being careful
06:53 < dnz-> haha they are not very good at speaking english, innit
06:53 < dnz-> init.d
06:53 < gkatsev> yeah, ./configure --prefix=PREFIX will install it locally.
06:54 < deoxxa> oi bruv
06:54 < dnz-> haha its probably safer system wide, but anyway
06:54 < chewed-on> gkatsev: ok..
06:54 < dnz-> then you need root to fuck with libs
06:54 < dnz-> sooo
06:54 < dnz-> yeah
06:54 < gkatsev> dnz-: huh? I've not had any problems the one or two times I installed with --prefix.
06:54 < dnz-> nigger read my text
06:55 < dnz-> did i say you would have problems ?
06:55 < gkatsev> I have no idea what you're saying.
06:55 < gkatsev> and I'm definitely not that. And you should probably not use that word here anyway.
06:55 < deoxxa> mkdir -p ${HOME}/local/node && cd ${HOME}/local/node && curl -O http://nodejs.org/dist/latest/node-v0.8.14-linux-x86.tar.gz && tar xzf node-v0.8.14-linux-x86.tar.gz && echo 'PATH="${PATH}:${HOME}/local/node/bin"' >> ~/.profile
06:55 < deoxxa> derp
06:56 < deoxxa> ok, going to go die now, bbl
06:56 < gkatsev> I'm going to sleep. Seems like a better deal than dying.
06:56 < dnz-> later deoxxa
06:59 < chewed-on> Does Node.js have a package I can install using Debian's apt-get install node.js ?
06:59 < dnz-> gkatsev: dont u wanna b my nig son ?
06:59 < dnz-> chewed-on: ifak deb package was outdated
06:59 < dnz-> in stable repos
06:59 < chewed-on> >.> that's not very promising :P
06:59 < gkatsev> chewed-on: what distro?
06:59 < dnz-> install it with npm 
07:00 < gkatsev> >.<
07:00 < dnz-> npm install npm
07:00 < chewed-on> gkatsev: Debian...
07:00 < chewed-on> It's a debian on Linode VPS
07:00 < gkatsev> chewed-on: ok, wasn't sure if debian or ubuntu or something. since ubuntu has a ppa that's up-to-date.
07:00 < chewed-on> Kernel 2.6.39.1
07:00 < gkatsev> chewed-on: is `./configure --prefix=PREFIX && make && make install` not working?
07:01 < chewed-on> gkatsev: haven't checked by my system admin wanted to explore the apt-get install route before continuing with this route
07:02 < gkatsev> yeah, apt-get is a no-go.
07:02 < gkatsev> there may be a deb you can use with dpkg -i that someone made
07:02 < gkatsev> but you might as well just do that
07:02 < chewed-on> well, he wants me to do this too in addition to the configure prefix
07:02 < chewed-on> http://pypi.python.org/pypi/nodeenv
07:03 < chewed-on> so that when two separate projects need different versions of Node.js, or when we need to remove a whole environment without affecting others
07:03 < gkatsev> oh, cool, someone ported that over to node
07:04 < gkatsev> but I'm pretty sure that nodeenv doesn't care where node is.
07:04 < gkatsev> chewed-on: btw, looks like you can get pre-compiled binaries on node's website. http://nodejs.org/download/
07:05 < gkatsev> chewed-on: also, take a look at `nave'
07:05 < gkatsev> https://github.com/isaacs/nave
07:05 < chewed-on> gkatsev: so I would just run node from that extracted package ?
07:05 < gkatsev> yeah, there's a node and npm bins in that folder under `bin'
07:06 < chewed-on> I saw it earlier when I extracted it
07:06 < chewed-on> ok….might be an option
07:06 < gkatsev> at least I think it should work.
07:06 < gkatsev> anyway, since you mentioned nodeenv, you probably should check out something like nave. or `n'
07:07 < gkatsev> anyway, I'm going to sleep now.
07:07 < gkatsev> gk
07:07 < gkatsev> gl*
07:08 < chewed-on> gkatsev: thanks
07:23 < phrearch> hi
07:23 < phrearch> anyone knows if its possible to determine whether a new mongoose model has been saved to mongodb yet or not?
07:25 < chapel> phrearch: you mean document?
07:25 < chapel> phrearch: http://mongoosejs.com/docs/api.html#document_Document-isNew
07:25 < phrearch> chapel: yea, i made a new model instance, but for this application i need to know whether its been saved as a document already
07:26 < phrearch> ah thanks! ill read up on that
07:27 < phrearch> just what i needed. thanks :D
07:29 < chapel> phrearch: https://github.com/LearnBoost/mongoose/blob/master/lib/model.js#L373
07:29 < chapel> thats where its mainly used
07:31 < phrearch> i need it for filtering new documents in some collaborative editing pool 
08:02 < sdepold> hey there. i'm wondering how i can use nib with stylus without connect/express
08:14 < dch_> any recommendations for a JSON generator package? I need to spit out several million objects with pseudo random content. something like jsongenerator.appspot.com but node-powered
08:24 < hemanth> dch, http://h3manth.com/content/node-packing-made-easy-grunt
08:25 < dch> hemanth: nope that's an NPM package generator. I want to generate JSON, I don't think grunt does that.
08:25 < dch> but thx
08:32 < chewed-on> mscdex: you still there ?
08:37 < [AD]Turbo> hola
08:38 < CestSebastian> hey, i've seen the require('../') here, https://github.com/3rd-Eden/node-memcached/blob/master/examples/simple_delete.js
08:38 < CestSebastian> it doesn't seem to work anymore, what did require('../') do?
08:40 < hemanth> dch, generator JSON as in? JSON.stringify ?
08:42 < dch> hemanth: the easy part is writing data to a file or stream. What I'm looking for is the random content generation piece from a template. Maybe I'll roll my own.
08:42 < hemanth> dch, nice, do share it later on 
08:43 < dch> for sure
09:15 < TheAceOfHearts> so.. I'm using Express and I made a site ( http://icom5016.ece.uprm.edu:3000/ ) when someone searches for a professor and there's no result, I throw em to a 404, I want to give em an alert (http://twitter.github.com/bootstrap/components.html#alerts).  Can anyone point me in the right way to do this @.@?
09:19 < Patrickz> Hello guys!
09:20 < Patrickz> Is it possible to convert node.js apps to binary (.exe) ?
09:21 < TheAceOfHearts> http://www.petri.co.il/create_executable_with_iexpress.htm ?
09:21 < Patrickz> Thx TheAceOfHearts
09:21 < TheAceOfHearts> but I think it just creates a wrapper
09:21 < TheAceOfHearts> so idk, it might be a pain to properly install everything
09:22 < RLa> TheAceOfHearts, i would not use HTTP code for application semantics
09:22 < RLa> it's strictly for transport errors
09:22 < Patrickz> yes.. TheAceOfHearts :/
09:22 < TheAceOfHearts> :|
09:23 < Patrickz> It will perfect if node.js can compile to native binary
09:23 < Patrickz> I just newbie
09:23 < Patrickz> just download and try it.  it's not bad
09:23 < TheAceOfHearts> I just set those up to keep working on my site's core functionality
09:24 < TheAceOfHearts> and isn't 404, Not found? with 403 being Forbidden?
09:24 < TheAceOfHearts> so... I sent a 404 when they try to find a professor and he doesn't exist in the database, but I agree, it's a terrible approach
09:25 < Patrickz> anyway. .thx guys.. bye
09:25 < TheAceOfHearts> but how should I handle that? what do I send the user?
09:27 < TheAceOfHearts> RLa: What would you suggest @.@? Or can you point me in the right direction?
09:27 < TheAceOfHearts> Patrickz: http://www.battoexeconverter.com/ try this too
09:34 < tasslehoff> I'm trying to use jquery and bootstrap. The console shows that my own script is ran, but nothing changes. Must I use ajax/xhr to be able to update content?
09:35 < TheAceOfHearts> what are you trying to achieve?
09:36 < TheAceOfHearts> you need to include both jquery and Bootstrap's JS file for everything in BS to work properly
09:39 < tasslehoff> TheAceOfHearts: that I have. I upload a file using formidable, and I want to add a progress bare and possibly error messages to my site.
09:39 < hpj_> is there something like PerlTray for node.js?
09:40 < tasslehoff> TheAceOfHearts: that means I must write a progress.js that does an XMLHttpRequest?
09:40 < totodvd> ciao
09:41 < totodvd> !list
09:41 < TheAceOfHearts> tasslehoff: That's how I'd do it, I can't think of any other way x)
09:42 < tasslehoff> TheAceOfHearts: cool. then I'll just fight on and hope I understand things along the way :p
09:44 < TheAceOfHearts> sorry I can't help much, I'm pretty new too xD
09:51 < tasslehoff> TheAceOfHearts: ah, so just because you can't think of any other way doesn't mean there isn't one. ;)
09:52 < RLa> TheAceOfHearts, does it return the list of results? then maybe an empty list
10:10 < janx> hi, I'm using child_process and I was wondering, is there a way to get child.stdout to flush on every line? currently I receive a "data" event every ~40 lines
10:19 < SomeoneWeird> janx, have a look at eh
10:19 < SomeoneWeird> um
10:19 < SomeoneWeird> damnit i forgot
10:19 < SomeoneWeird> carrier
10:20 < SomeoneWeird> https://github.com/pgte/carrier
10:20 < SomeoneWeird> might work for what you need
10:27 < janx> SomeoneWeird: oh thanks, I'll have a look :)
10:29 < Zac12> hi there
10:30 < Zac12> is it possible (or permissible) for me to be using connect-mongo to store my session data in a mongodb and then also access my session mongo db elsewhere without using it specifically as a session?
10:49 < richwol> Hi all. Does anyone know if this is the best place to discuss WAF / GYP, or is there a more appropriate IRC room?
10:50 < chrisbislr> it is the best place to go and fuck yourself richwol
10:50 < Doikor> that wasn't very nice.
10:50 < richwol> Wow, brilliant. What a insult. You sir are a smart cookie.
10:52 < richwol> Certain time of the month is it?
10:52 < chrisbislr> yeah I just bled all over my husband, he hated it #lol #homo
10:53 < Zac12> could anyone assist me with connecting to my mongo db session collection used along with express?
10:53 < Zac12> is it seen as 'conventional' to connect to your session collection mongo store in this way?
10:54 < chrisbislr> richwol thinks it is conventional to connect to a mongo store, unless you are a female and bleeding all over the connection #mysogynist
10:54 < Doikor> ok now i have no clue what is going on here. back to work.
10:54 < richwol> Neither me.. I think that guy has problems :|
10:55 < Zac12>  /ignore chrisbislr
10:56 < chrisbislr> LOL!
10:56 < Zac12> continuing.. could anyone help me out?
10:56 < chrisbislr> you stupid bastards
10:56 < chrisbislr> LOL @ problems where your database bleeds on you
10:56 < chrisbislr> hard to ignore!
11:01 < richwol> I'm migrating an unmaintained npm package from WAF to GYP but hit a bit of a stumbling block. In the WSCRIPT there is the line conf.env.append_value("FRAMEWORK_TC", '/Library/Frameworks/TelldusCore.framework/'). Is this the equivalent of doing 'defines': ['FRAMEWORKPATH_TC="/Library/Frameworks/TelldusCore.framework/"'] in binding.gyp, or instead of defines should I be using something else?
11:03 < Doomground> Students go to classes
11:03 < Doomground> but as it's a reserved name in code
11:04 < Doomground> what should i use, i can't think of anything
11:16 < davidbanham> I have this weird bug where node-tar silently exists when passed an archive containing files whose path contain a space.
11:16 < davidbanham> Oddly, it only does this when started via upstart. It works fine if I run it manually.
11:16 < davidbanham> Anyone got any ideas on where to look? I'm running out of ideas for debugging it.
11:16 < motin> when I am within a module-folder and run npm update, only it's dependencies are updated, but not the module itself. is this expected? any way around this?
11:17 < davidbanham> motin: Run npm update from the folder containing the package.json that requires that module?
11:19 < richwol> @Doomground: pupils?
11:19 < Doomground> i need a word to replace "class" not "student(s)" :p
11:19 < Doomground> but thanks for the offer
11:19 < Doomground> tho
11:20 < richwol> Oh :p
11:20 < Zac12> classrooms
11:20 < Zac12> :D
11:20 < motin> davidbanham: exactly, that's what I try, but it doesn't update
11:21 < davidbanham> motin: It sounded like you had a folder named foo, containing a folder named node_modules which then contained a folder named bar, and you were running npm update inside bar. Is that not right?
11:22 < tasslehoff> my client side script fails on document.getElementById. I use the same id I assigned in my input form. any common pitfalls here?
11:22 < motin> davidbanham: it's more like I installed just in my home folder, so it ended up in ~/node_modules/foo
11:22 < motin> and i am running it from there
11:23 < davidbanham> motin: Right, so you
11:23 < davidbanham> motin: Right, so you've installed it globally?
11:23 < motin> davidbanham: maybe :) i didnt use the "-g" switch. just installed it
11:23 < davidbanham> In that case you probably want to run npm update in ~
11:26 < motin> davidbanham: hmm. but I am zipping this module...
11:26 < motin> hmm
11:27 < davidbanham> motin: You've lost me. Do you just want to update the module or are you looking to acheive something else?
11:27 < Doomground> expressjs is setting cookie and = translates to %5D or something
11:28 < Doomground> is there a way i could avoid this and get =?
11:28 < motin> davidbanham: I want to be able to zip it, put it anywhere on another computer/server, and then be able to update it from there
11:29 < motin> but if I now move it to say /tmp
11:29 < motin> and run npm update from /tmp/foo, it wont update
11:29 < davidbanham> motin: No, but if you run npm update from /tmp it'll be fine.
11:30 < davidbanham> npm update looks in subdirs for things to update, which is why it's hitting the dependencies, but it doesn't look in the directory it's currently in.
11:30 < motin> davidbanham: doesn't work running from /tmp
11:31 < motin> actually I put it in ~/tmp
11:31 < motin> and tried from there
11:31 < motin> but that's an even more likely case
11:31 < motin> running npm update in ~/tmp just updates the modules in ~/node_modules
11:31 < davidbanham> motin: Sorry, the module needs to be in a node_modules folder.
11:32 < motin> leaving ~/tmp/foo behind
11:32 < motin> aha
11:32 < davidbanham> So if you have /tmp/node_modules/foo
11:32 < motin> i'll try
11:32 < davidbanham> Then run npm update in /tmp it should work.
11:32 < davidbanham> Doomground: Sounds like you want decodeURIComponent
11:32 < motin> davidbanham: yes, that works
11:32 < motin> can this be changed? :)
11:33 < motin> if I wan't this installed in say /Applications/Foo.app
11:33 < motin> i'll need /Applications/node_modules/Foo.app :P
11:34 < davidbanham> motin: Not sure I'm afraid.
11:34 < motin> davidbanham: hmm. bugger
11:35 < Doomground> davidbanham no, that what expressjs does itself
11:35 < Doomground> i want it not to do it
11:35 < Doomground> well i mean... it doesn't decode it.. it encodes it, turning = into a %5 something
11:35 < davidbanham> Doomground: It needs to urlencode the strings, but you can decode them when you want to read them.
11:35 < Doomground> i want to avoid it
11:35 < Doomground> yeah, but if it's not me reading it
11:35 < Doomground> :p
11:35 < davidbanham> Doomground: So you need to decode it before you present it to the user.
12:18 < tasslehoff> is there built-in support for multipart-data in node? 
12:18 < mmalecki> no
12:20 < tasslehoff> ok. node-formidable and the express bodyParser doesn't play along by default, so I'm wondering if I should use something else.
12:21 < onr> for what?
12:25 < tasslehoff> onr: for file upload. I'm trying to work a progress bar into my uploader, and have issues with document.getElementById returning NULL in my script. thought I'd try not (ab)using node-formidable to see if that helps
12:27 < onr> tasslehoff: fine uploader has a node.js example, https://github.com/valums/file-uploader
12:31 < tasslehoff> onr: thanks. I'll see if it helps.
12:32 < onr> nm
12:49 < chakrit_> anyone able to use sinon.useFakeTimers() successfully w/ mocha?
12:50 < jonpacker> does anyone remember a project where the license had a clause in it that said something along the lines of "if you find yourself in a situation in which you may sacrifice your life to save the author, you are obligated to do so"
12:51 < jonpacker> fairly sure it was a node project.
12:58 < radiodario> do you guys know how to skip an item (i.e. don't return anything) when doing an array.map?
12:59 < radiodario> i.e. [1,2,3].map(function(n) { if (n>1) return n })
12:59 < radiodario> that's returning [undefined, 2, 3]
12:59 < radiodario> or am i just using the wrong function?
13:01 < mmalecki> radiodario: use `filter` instead of `map`
13:07  * radiodario facepalm
13:07 < radiodario> ok! i didn't know there was array.filter
13:08 < radiodario> sweet cheers mmalecki 
13:08 < mmalecki> :)
13:14 < hariyellapu> ok
13:15 < hariyellapu> ok
13:22 < adrianF> hello, does someone have experience with mocha testing framework. i tried to use the javascript api (serverside) to run my tests from within scripts. but the tests run only the first time they get started with mocha.run(..).
13:27 < hareth> Hello i would like to have an "persistent" object, it would be a simple object that is written into a file and updated each time a property is set
13:28 < hareth> is it possible ?
13:51 < WarheadsSE> anyone can give a hand with expressjs 
13:51 < Doomground> whatcha need
13:51 < WarheadsSE> having a problem with a second static
13:51 < WarheadsSE> for whatever reason, one static line works, and the second, although matching in syntax, always 404's
13:52 < WarheadsSE> I'm havving trouble grepping the problem.
13:53 < WarheadsSE> chunked fro my app.configure: http://pastie.org/5406138
13:53 < WarheadsSE> static works, resources doesn't
14:03 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:06 < WarheadsSE> expressjs problem: http://pastie.org/5406176  first express.static works, second does not. do not understand why.
14:09 < WarheadsSE> Of course, half of you are west coast and not awake yet :p
14:25 < WarheadsSE> pfft. __dirname + apparently borks 2x routes ?
14:28 < WarheadsSE> bah, or other cruft, anyways :)
14:45 < boutell> hi. It looks like mongodb-native has no support for making a connection via a mongodb URI, and I would have to parse that URI myself first. Before I mess with that, am I missing something?
14:46 < boutell> I'm getting nice URIs from mongolab, so I'm likely to parse those myself if mongodb-native won't parse them for me.
14:47 < drudge> boutell: you could use mongoose's code https://github.com/LearnBoost/mongoose/blob/master/lib/connection.js#L143
14:48 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:48 < boutell> drudge: good point, and that answers my question (mongoose probably wouldn't be doing it if it was in the driver somewhere).
14:53 < jetaime> hi all
14:54 < jetaime> one question please!
14:54 < yawnt> how are you doing?
14:54  * yawnt bad jokes *
14:54 < jetaime> is there anyone here?
14:54 < jetaime> ok, good :)
14:55 < jetaime> i want to write some tests for my stream
14:55 < jetaime> how to do that and whats the best way to do, please!
14:55 < foobar321> Hi. How to create std::string from args from V8? I don't see any example for this
14:56 < jetaime> yawnt: can you help me?
14:58 < jetaime> could someone help me here?
14:59 < jetaime> please!!!
14:59 < timkuijsten> is it required to call update on a signer object with some data? I only want to verify someone is in possession of the private key given a public key i have so in theory nodejs could have hardcoded a string used in sign/verify and there should be no need to manually come up with some test string, used on both ends, right?
15:00 < jetaime> timkuijsten: can you help me????
15:01 < timkuijsten> jetaime: use a test framework, i'm using jasmine-node
15:02 < timkuijsten> the use the async capabilities of it..
15:02 < timkuijsten> then
15:02 < jetaime> how, please?
15:03 < timkuijsten> jetaime: https://github.com/mhevery/jasmine-node
15:06 < foobar321> How to get from args. Essentialy from args[0] which will be a string bytes and length. I have Local<String> s = args[0]->ToString(); . And what next? How to get from s buffer and length ?
15:07 < squeakytoy> is it stupid to learn and code native javascript, or should you really code the more enchanced languages like coffee, typescript or dart for node.js?
15:08 < timkuijsten> squeakytoy: i think there is a lot of native js around so it's definitely not stupid
15:09 < jetaime> timkuijsten: i dont understand your link, it is useless
15:10 < jetaime> how should i test it??? 
15:10 < jetaime> you have some examples?
15:13 < timkuijsten> jetaime: see https://github.com/mhevery/jasmine-node/blob/master/spec/TestSpec.js and https://github.com/mhevery/jasmine-node/blob/master/README.md on how to install and an async example
15:14 < jetaime> ok, thank you
15:15 < timkuijsten> yw
15:16 < clever> /usr/include/node.h:61:16: fatal error: uv.h: No such file or directory
15:16 < clever> any idea why that file would be missing?
15:39 < clever> ./ChangeLog:* #1335 Remove EventEmitter from C++
15:39 < clever> aha
15:45 < MI6> joyent/node: Ben Noordhuis master * 38c52a0 : tools: update gyp to r1535  This commit contains one additional patch tha - http://git.io/0oOC4A
15:48 < joaojeronimo> hey guys, anyone ever tried using streams inside a dnode method ?
15:48 < joaojeronimo> is this possible ? a method of the RPC api returning a stream ?
15:52 < MI6> joyent/libuv: Ben Noordhuis master * fc5984f : build: fix dragonflybsd gyp build  Depends on a not-yet-landed gyp patch: - http://git.io/8vbLZA
15:53 < mscdex> wow, we have node users on dragonflybsd?
15:53 < substack> joaojeronimo: it works better if you use a different mechanism for controlling streams like mux-demux
15:54 < substack> you can have dnode work alongside raw streams on different multiplexed channels
15:54 < joaojeronimo> substack, yeah I figured... too bad because the other way would look more elegant
15:55 < joaojeronimo> thanks substack! btw props for the awesome modules :)
15:55 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:58 < Kakera> I need some pointers regarding documentation
15:58 < Kakera> Currently I put everything in the readme.md file like this: https://github.com/seishun/node-steam/blob/master/README.md and I think it looks horrible and I hate manually formatting every method I add
15:59 < Kakera> ideally, I want to press the button that says "add method" or "add parameter" or something similar
15:59 < joaojeronimo> what's a good module to use for HTTP requests, that can either be used on nodejs and on the browser after browserify ing ?
16:21 <@mbalho> joaojeronimo: browser-request
16:21 <@mbalho> joaojeronimo: its the same api as request
16:21 <@mbalho> joaojeronimo: but you dont browserify it
16:22 < Kakera> does anyone know what the most painless way to write docs for node.js modules is?
16:22 < gkatsev> docco?
16:23 <@mbalho> Kakera: make sure your github readme is super awesome and that your module is as small as possible
16:23 < Kakera> docco auto-generates, doesn't it?
16:23 < gkatsev> docco just puts your comments side-by-side with your code, or something like that.
16:23 < Kakera> mbalho, having to manually format every method is painful
16:24 < niggler> what's the best test framework
16:24 < gkatsev> the one you write yourself :P
16:25 < niggler> i see stuff like vows and expresso
16:26 < gkatsev> there's also mocha
16:27 < Kakera> are there any examples of the usage of docco?
16:28 < gkatsev> http://underscorejs.org/docs/underscore.html
16:29 < gkatsev> also http://jashkenas.github.com/docco/
16:29 < Kakera> this isn't quite what I'm looking for
16:29 < Kakera> I just want to quickly make a list of my object's methods, what they do and what arguments they expect
16:29 < Kakera> and the same for events
16:30 < niggler> you can't even do that reliably Kakera 
16:30 < Kakera> huh
16:30 < niggler> how would you handle something that uses 'arguments'
16:30 < Kakera> no, I meant I would do that myself
16:31 < Kakera> but without having to do the formatting
16:31 < niggler> why not just use the doxygen format
16:31 < gkatsev> there's doxygen and asciidocs and jsdoc and several others
16:32 < Kakera> >Generate documentation from source code
16:32 < Kakera> nope, that won't work for me
16:32 < Kakera> I don't want to auto-generate anything
16:33 < gkatsev> ?
16:33 < gkatsev> Kakera: do you want something like javadocs?
16:33 < Kakera> no...
16:33 < warz> sounds he just wants markup or something
16:33 < Kakera> I don't want documentation inside the source code
16:33 < warz> or even html
16:34 < gkatsev> I don't think anything like that exists.
16:34 < niggler> Kakera: are you looking for something like cscope?
16:34 < gkatsev> you can use doctorjs to generate a list of all functions.
16:35 < gkatsev> but it currently has a bug and doesn't return the end of functions correctly, so, it'll say everything is a top-level function.
16:35 < Kakera> I don't want to generate anything.
16:35 < Kakera> only the formatting
16:35 < warz> dude then just use notepad or something. what are you asking for?
16:35 < Kakera> scroll up
16:36 < niggler> ">Generate documentation from source code" is too vague
16:36 < gkatsev> just use markdown. or something.
16:36 < gkatsev> most painless way of writing docs is to have it be written for you. If you want to write it, just use markdown or something. Heck, just a plain text file would be fine.
16:37 < Kakera> <Kakera> mbalho, having to manually format every method is painful
16:39 < Kakera> how about a template for markdown that facilitates documenting methods and events?
16:40 < warz> why not describe your apis in json and then use a template engine + markdown?
16:42 < cnd> is it reasonable to try to use the cluster api for general master/slave worker schemes that do not revolve around handling server connections?
16:42 < Kakera> can you link me to such an engine, warz?
16:43 < warz> theres a lot, so its just your preference. a very simple one is mustache templates, for which you could use hogan: http://twitter.github.com/hogan.js/
16:43 < warz> or underscore.js templates
16:43 < warz> or jade
16:43 < warz> there's a lot
16:43 < warz> for your needs, i think mustache templates would be good enough
16:46 < Kakera> mbalho, could you link me to an example of a super-awesome github readme?
16:48 <@mbalho> pretty much all of substacks repos
16:48 <@mbalho> e.g. https://github.com/substack/secure-peer
16:50 < Kakera> thanks
16:50 < Kakera> I'll just copy his format then
16:51 < superjoe> especially the pictures
16:51 <@mbalho> yea make sure to hand draw a logo
16:51 < superjoe> in ms paint
16:52 <@mbalho> its vector art, mspaint is raster
16:52 < superjoe> ah
16:52 < superjoe> well maybe you're going for that pixelated retro feel.
16:52 < superjoe> your software works on old systems.
16:52 < eduardo_> Good morning!
16:52 < claudio> (morning?)
16:52 <@mbalho> buenos dias
16:53 < eduardo_> it's morning where I am for another 10 minutes!
16:53 < Kakera> for reference, this is what it looks like right now https://github.com/seishun/node-steam/blob/master/README.md
16:53 <@mbalho> its 8:51 NST
16:53 < gkatsev> UGT guys, UGT
16:53 <@mbalho> (node standard time - the time zone in oakland)
16:53 < eduardo_> :)
16:54 < eduardo_> I have an embarasingly stupid beginner node question. is this the right place to ask?
16:54 < warz> go for it
16:54 < gkatsev> eduardo_: no such thing as stupid questions. Only stupid people.
16:54 < gkatsev> :P
16:55 < brianc> eduardo_: fire away
16:55 < eduardo_> I am going to get my terminology wrong, sorry in advance. I only started with node earlier this morning. I am trying to figure out the right paradigm for creating responses from DB finds here. Basically i am doing the standard model of "reqquest comes into my server, i look up the data in the db, form a response"
16:55 < eduardo_> except playing with mongodb, i see the find callbacks are asynchronous. is the idea that i need to defer my response on some outbound queue until the find comes back?
16:56 < eduardo_> mongojs rather
16:56 < brianc> eduardo_: you need to build your response within the callback of the DB query pretty much
16:56 < gkatsev> you put all your work in the callback
16:56 <@mbalho> eduardo_: http.createServer(function(request, response) { createAsyncDatabaseQuery(request, response)  })
16:56 < warz> youll see that for things that involve IO
16:56 <@mbalho> eduardo_: where createAsyncDatabaseQuery reads the request paramaters like POST body or URL params and then reads your DB async and when it has data sends it to the response
16:57 < eduardo_> ya ya ok that makes sense 
16:57 < eduardo_> thanks guys, let me play around here
16:58 < brianc> eduardo_: this isn't really connical but it's a really small totally self contained example: https://github.com/brianc/node-postgres/wiki/Example
16:58 < eduardo_> brianc: perfect!
16:58 < brianc> s/cannoical/canonical
16:59 < brianc> eduardo_: also wouldn't recommend building your http responses that way.  the point was to have no external dependencies except for node-postgres
16:59 < brianc> eduardo_: generally you'll want to use a templating library (of which there are many) and a bunch of other modules to do things for you
17:01 < eduardo_> brianc: ya i am not in a place yet where I wrapped my brains around the templating libs available. what i am currently doing is using doT... as an input to doT, I read my template manually froma  file and the data from the DB. 
17:01 < brianc> I dont 'know what doT is but reading it manually from a file is a good way to start. definitely shows you how the pieces all string together
17:02 < eduardo_> alright let me mess around for a bit, i'll show you guys my mess in a sec for a brutal critique
17:02 < eduardo_> thank you!
17:02 <@mbalho> haha
17:03 < d-snp> anyone know if there's a mocha irc channel? I have this weird thing where it will only run my tests if the describe has a very particular name
17:03 < d-snp> I'm totally lost :S
17:04 < superjoe> d-snp, can you provide a gist?
17:04 < superjoe> code snippet
17:04 < superjoe> smallest possible failing example code
17:05 < MI6> joyent/node: Tim Kuijsten master * 6f9ed28 : doc: fix typo in setPrivateKey function signature - http://git.io/kUjRkQ
17:05 < d-snp> http://wlan229214.mobiel.utwente.nl:3456/
17:06 < d-snp> hmm it serves coffee files as binaries.. not so nice
17:08 < d-snp> superjoe: never mind
17:08 < d-snp> I just noticed something terrible
17:08 < d-snp> I apparently had a grep running over the results.. without me noticing :S
17:08 < d-snp> so I suck :D
17:08 < brianc> haha
17:11 < eduardo_> hey brianc (or anyone else) does this look kosher: https://github.com/xyzelement/mediator/blob/master/hello_http.js
17:12 < gozala> timoxley: I just published better readme for https://github.com/Gozala/reducers
17:13 < brianc> eduardo_: you'll probably want to include an 'encoding' to fs.readFile (utf8 works)
17:13 < gozala> timoxley: As of reflex it's still under active research and there is no point in committing to any specifics yet
17:13 < timkuijsten> substack: i'm trying to create a small module based on rsa-json. my module allows me to include a keypair, but it creates one if no keypair exists yet. since the api of rsa-json is async, this forces me to make every dependency of it also async which makes the API a little less ideal. this is my module and an example: http://dpaste.com/833855/
17:13 < eduardo_> will do! anything else?
17:13 < brianc> eduardo_: besides that it looks good
17:14 < brianc> eduardo_: there's a "race condition" between reading the file and the request.  if your first request gets in before the file is read (highly unlikely, i know) then data_template will be null
17:14 < brianc> eduardo_: generally people use the 'sync' flavor of methods when boot-strapping their app and doing 1 time file reads
17:15 < brianc> eduardo_: e.g. 'readFileSync'
17:15 < eduardo_> brianc: that's absolutely true, thaks
17:15 < eduardo_> oo good to know!
17:16 < gozala> timoxley: We'll add proper introduction and docs once we settle on specific design, so far you can take a look into issues where active discussion of design takes place
17:17 < jw___> guys what's the best strategy to spawn workers that resize and crop uploaded images?
17:18 < brianc> jw___: 'child_process.spawn' coupled with node-pool?
17:19 < jw___> @brianc can spawn receive multiple arguments such as image width height
17:20 < jw___> @brianc I found kue very buggy
17:25 < strk> any idea why \* doesn't match * in this regexp ?
17:25 < strk> style = style.replace(RegExp('/\*', ''), '');
17:26 < strk> style="/* hello */";
17:26 < strk> style = style.replace(RegExp('/\*', ''), '');
17:26 < strk> -> '* hello */'
17:26 < strk> wtf?
17:27 < chrisjaure> try RegExp('/\\*', '')
17:28 < strk> worked, thanks !
17:30 < jesse_taylor> https://gist.github.com/4119409
17:31 < jesse_taylor> i deployed my app, i got this error https://gist.github.com/4119409 then i deploy again and it worked fine, what is the problem?
17:32 < jetaime> heyyyyy
17:32 < jetaime> i have a dumb question please
17:32 < chakrit> hi
17:32 < jetaime> can a readeable stream emit more events than those predefined??
17:32 < chakrit> yes
17:33 < jetaime> why?
17:33 < chakrit> you can emit anything. the protocol are actually just a sort of convention
17:33 < jetaime> chakrit: why?
17:33 < jetaime> okay
17:34 < jetaime> then whats the best way to wrap an existing ee
17:34 < jetaime> into a native stream?
17:34 < chakrit> depends on what you want to use it for
17:34 < jesse_taylor> anyone help with my question above?
17:34 < chakrit> but i think just emitting the right events is enough.
17:35 < chakrit> i.e. data/error/close etc.
17:35 < chakrit> s/enough/usually enough/
17:35 < jetaime> chakrit: the existing one only emit 'data'
17:35 < chakrit> why do you want to wraps it then?
17:36 < jetaime> just to pipe
17:36 < chakrit> just pipe the EE into the stream and see if they throw anything
17:36 < jetaime> lol
17:36 < chakrit> i think there's a util method for that, can't remember
17:37 < chakrit> util.pump iirc
17:37 < jesse_taylor> i deployed my app, i got this error https://gist.github.com/4119409 then i deploy again and it worked fine, what is the problem?
17:38 < chakrit> jesse_taylor: ask that on #nodejitsu
17:38 < taapa> Any one knows if Google is using Node? They must be doing some projects with Node since V8 is from them.
17:38 < jetaime> its deprecated
17:39 < jesse_taylor> im new, didnt know there was other channels :P thanks man
17:39 < guor> V8 is designed for Chrome
17:39 < chakrit> jetaime: roll your own then? _ee.on('data', function(chunk) { _stream.write(chunk); })
17:39 <@mbalho> https://github.com/GoogleChrome/net-chromeify
17:39 <@mbalho> https://github.com/google/module-server
17:40 < taapa> thanks for the links
18:01 < Kakera> https://github.com/seishun/node-steam what do you think about my documentation now
18:02 < ruff> bold and beautiful
18:02 < jetaime> kakera: its not good.
18:02 < Kakera> any suggestions?
18:03 < jetaime> kakera: no.
18:04 < Warpten> mscdex: So i downloaded the whole Node.JS tarball with included openssl dependencies. However, it still does fail at finding openssl/bn, altho that file is present
18:04 < Kakera> it's not good but you don't have any suggestions? okay
18:06 < jetaime> kakera: please leave now and goto the #markdown chan.
18:07 < Kakera> wow you're not a very nice guy are you jetaime 
18:07 <@mbalho> jetaime: quit trolling people
18:15 < bradleymeck> isaacs: have you thought about domains as a mocking utility? ie. something similar to the timershim that was posted on groups but on a domain rather than process level. just a thought. could get too confusing i guess
18:19 < Warpten> Can anyone please help me on building bignum on Visual Studio 2012, I'm getting a lot of linker errors from VC++ regarding openssl dependancy although i have downloaded the whole nodejs tarball
18:19 < Warpten> such as 1>bignum.obj : error LNK2001: symbole externe non résolu BN_mod_inverse
18:22 < MI6> joyent/libuv: Ben Noordhuis v0.8 * 5639b2f : linux: use /proc/cpuinfo for CPU frequency  Obtain the CPU frequency from - http://git.io/ZQ5VQg
18:24 < MI6> joyent/node: Ben Noordhuis v0.8 * 7716828 : deps: upgrade libuv to 5639b2f - http://git.io/xt0PGA
18:24 < path3> drudge: Hi
18:24 < drudge> hey
18:25 < path3> I got everything working, except that weird 404
18:25 < path3> kind of confusing … profile etc. is everything there
18:25 < path3> do you get a 200 response on your server?
18:25 < drudge> yeah, my guess it is your  passport.use(new TwitterTokenStrategy({ … })
18:26 < q_no> I'm using socket.io + redisStore and I'm forking my process using cluster. Do socket.io rooms work across all forks with redisStore? When I call console.log(io.sockets.manager.rooms); I only see the clients connected to a certain process
18:26 < drudge> passport automatically sends statuses based on the data it gets in the done() callback
18:26 < path3> hm, I used the default done(null, profile); there
18:27 < path3> and profile is the twitter profile … token and secret are also there
18:27 < path3> no errors
18:27 < path3> btw pulled a request on your git repo
18:29 < drudge> for me, if the user didn't exist in my local db passport would return a 400 error. so to force sign-up i created an error, tacked a .profile on it and done(err), then i have a middleware after to handle that
18:30 < drudge> path3: can you show me some code?
18:30 < path3> function(token, tokenSecret, profile, done) {
18:30 < path3>     process.nextTick(function () {
18:30 < path3>       return done(null, profile);
18:31 < path3> without database, just to see if the authentication works
18:31 < path3> as said, token, tokenSecret and profile are there. I get a serialisation afterwards, then a 404
18:32 < path3> but the serialisation is also just a done(null, user.id);
18:32 < path3> nothing fancy
18:33 < drudge> yeah that should be fine
18:34 < niggler> is there a nodejs version of pigments?
18:34 < niggler> *pygments
18:36 < Zelest> node + express + mongodb.. check! :-D
18:36 < drudge> path3: what are you doing after the token
18:37 < path3> nothing, just the POST
18:39 < drudge> i have middleware after the token route, where i send either a 200 status and the user json or an error
18:39 < path3> hmm
18:40 < cri> join #heroku
18:40 < drudge> path3: in your passport config do you have successRedirect set to something that maybe doesn't exist?
18:40 < path3> I actually didn't set one
18:40 < path3> let me try the middleware
18:42 < drudge> passport will just next() if you don't have one set, so i imagine the 404 is past that?
18:42 < path3> ok, that was the problem
18:42 < path3> well, there's no further request after that, so it just does the authentication and then stops
18:42 < path3> with 404
18:42 < path3> app.post('/auth/twitter/token', passport.authenticate('twitter-token'), function(req, res) {res.send(200);});
18:42 < path3> that solves it
18:42 < drudge> thought so
18:43 < path3> have to add some verification here I guess
18:43 < drudge> yeah i check for req.user
18:43 < path3> but well, seems to work :)
18:44 < path3> the iOS part is kind of messy though. I'm building 2 requests with NSHTTPURLResponse … is that ok or a better way to do that?
18:44 < path3> then I can clean up and commit everything to the repo
18:45 < drudge> i've got 2 requests as well, i think it is fine
18:46 < drudge> you need two since the iOS app needs to do part of it to set reverse auth
18:46 < path3> ok, I'll put the stuff on … maybe you can have a look later as I'm not very good in Obj-C
18:46 < drudge> sure, i'll check it out
18:46 < path3> cool, thanks a lot, also for the strategy! Helps a lot!
18:47 < drudge> np, i'll merge your request in. just need to update and deploy my app
18:51 < Warpten> OK, this is getting extremely frustrating, anyone knows of a way to store 32 bytes long crypto numbers ? Been trying bignum, bigint, BigNumber, and numerous ones, but they arent building for me, plus I need the ability to load them from a Buffer.
18:53 < mscdex> 32 bytes? that's a huge number :-)
18:53 < othiym23> Warpten: by "bignumber" do you mean https://github.com/MikeMcl/bignumber.js ?
18:53 < Warpten> yes
18:53 < Warpten> BigNum is the one i need - it just doesnt build
18:54 < mscdex> what are you doing that requires a 256-bit number?
18:54 < Warpten> reading crypto keys from a Buffer
18:54 < Warpten> SRP6, that is
18:55 < Warpten> I already have wrapped up my own Buffer.readBytes(byteCount) function but since Javascript only supports integers up to 7 bytes i'm sort of stuck there
18:56 < othiym23> why do you need it in numeric format?
18:56 < mscdex> ^
18:56 < othiym23> are you trying to do math on it in JS?
18:56 < Warpten> yes
18:56 < othiym23> ah
18:56 < othiym23> I think you're screwed ;)
18:57 < Warpten> https://github.com/justmoon/node-bignum is the most suitable for me, but it doesnt link with openssl for whatever reason
18:57 < othiym23> or, rather, you're going to have to do all the gruntwork yourself
18:58 < Warpten> like, what, store a X bytes number into numerous 6 bytes numbers ?
18:58 < othiym23> Warpten: what arch are you on / what version of Node are you using?
18:58 < mscdex> Warpten: what part of SRP6a requires this 256-bit number?
18:58 < Warpten> node 0.8.14, openssl 1.0.0f (from the msi), also downloaded the whole tarball, still doesnt link
18:58 < othiym23> Warpten: yeah, and then handle the ops / overflow yourself
18:59 < Warpten> mscdex: by byte, i mean 8 bits number (32 uint8s, im not born english so may confuse between bytes/bit)
18:59 < othiym23> so, Windows?
18:59 < Warpten> yeah
18:59 < othiym23> that's probably your problem
19:00 < Warpten> its only a matter of linker errors
19:00 < mscdex> Warpten: ok, but what part in the SRP6 algorithm are you stuck at?
19:00 < Warpten> mscdex: well, at the very beginning: catching numbers sent by the client, doing maths on them and sending other ones
19:01 < Warpten> (Client sends B, G, N, s, where B, N and s are 32 bytes numbers
19:02 < Warpten> N is a constant, 894B645E89E153588DAC5B0B290650530801B18EBFBF5E8FAB3C82872A3E9BA0 is expected in hex
19:02 < Warpten> So yeah, quite large integers
19:03 < mmalecki> I think you should switch to a language better suited for maths
19:03 < mmalecki> not trying to troll or anything
19:03 < Warpten> :(
19:03 < othiym23> do you have the openssl binary available?
19:03 < mmalecki> but honestly, JS sucks for maths
19:03 < mmalecki> well, big numbers math
19:03 < othiym23> if so, you might be able to shell out bits of it to openssl and do everything as strings
19:03 < othiym23> yeah
19:03 < mmalecki> and with c++ libs it'll be pretty damn slow
19:03 < Warpten> othiym23: i have nodejs's openssl dep from the tarball, and also system wide openssl
19:03 < othiym23> in any language where the default numerical stack is all IEEE754 is not good for crypto
19:04 < othiym23> Warpten: OpenSSL can do SRP6 natively
19:04 < mscdex> yeah i'd suggest writing a binding in this case
19:04 < othiym23> and I'd feel a lot better about using a native implementation than trying to write one myself (cf. ref. Tony Arcieri's rant last week about getting authed crypto wrong)
19:05 < mscdex> rant?
19:05 < Warpten> Back, internet dropped.
19:06 < Warpten> err ?
19:06 < othiym23> mscdex: http://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken
19:07 < othiym23> Warpten: I was suggesting you figure out how to use the OpenSSL implementation of SRP (either via the command line or via a binding) rather than rolling your own
19:11 < AAA_awright> Warpten: Don't do your own crypto. Don't do your own crypto. Don't do your own crypto.
19:13 < Warpten> I am not doing it myself
19:13 < Warpten> It's a middleware app, i just need to do some maths on it
19:14 < AAA_awright> Just by the sound of it, it sounds of Doing It Wrong
19:15 < AAA_awright> What math could you possibly need to do yourself?
19:15 < othiym23> you're still going to have an easier time writing a binding to OpenSSL than trying to do arbitrary precision arithmetic and bitops in JS
19:15 < othiym23> it just does not deal well with large integers
19:17 < eduardo_> hey guys, another super-rookie question. I want to protect certain functionality behind a login. what's the canonical way to do that? specifically, to keep track of whether the user has been authenicated?
19:17 < jesse_taylor> http://msg.im thoughts? i just started and want to make something that a lot of people will use
19:18 < drudge> eduardo_: i use passport (passportjs.org)
19:19 < eduardo_> drudge: thanks! is it a parallel framework to everauth?
19:19 < drudge> eduardo_: yeah, they are similar
19:23 < eduardo2_> sorry i got disconected
19:24 < eduardo2_> not sure if my last question came across, so let me ask again. i am trying to understand - if node is stateless, how do passport/everauth work? where do they store the fact that i am loged in?
19:25 < drudge> eduardo2_: read the sessions section here http://passportjs.org/guide/configure/
19:25 < Ralt_> eduardo2_ a cookie with a session id is sent with every request you make
19:26 < Ralt_> and a table with a mapping of session ids/data is stored on the server
19:26 < aettinger> eduardo2_: you can have middleware that checks for a valid user session
19:26 < eduardo2_> got it, and all that stuff is abstracted away from me so at the end of the day i rely on whether req.user is set or not?
19:26 < Ralt_> yep
19:27 < eduardo2_> thank you Ralt_ and drudge 
19:28 < aettinger> eduardo2_: http://stackoverflow.com/a/13336055/33522
19:29 < brianc> anyone have any thoughts on apache zookeeper?
19:29 < brianc> seems kinda "heavy duty"
19:29 < eduardo2_> aettinger: great - Ill try to get it going without that then enhance it to middleware thx
19:29 < brianc> like rabbit MQ or something
19:50 < mscdex> bnoordhuis: are there any plans to have async versions of crypto functions?
19:51 < othiym23> brianc: if everything you're doing is node, try starting with seaport / fleet before resorting to zookeeper
19:51 < othiym23> or if you want more of a queue-based job control system, give thoonk.js a shot
19:52 < niggler> is anyone working on GSL bindings?
19:57 < brianc> othiym23: roger, kinda thought that
20:09 < dreadjr> does anyone have good ways to troubleshoot socket hangup problems?
20:10 < brianc> dreadjr: wireshark?
20:10 < brianc> not sure...but that might halp.
20:11 < mscdex> i wonder why more people don't use/know about multipart/x-mixed-replace
20:12 < niggler> is it supported on the iphone?
20:12 < dreadjr> brianc: ok, thanks.  have you seen any problems where there are orphaned connections?
20:13 < brianc> dreadjr: no. orphaned connections to what?
20:13 < mscdex> niggler: dunno offhand, i don't have one to try
20:19 < ack006> woohoo, flamegraphs for systemtap :-)
20:21 < ack006> now we dtrace-deprived people don't have to suffer in despair anymore
20:23 < drodger> Anyone familiar with a package that handles log rotation, that works with express.logger() ? Or has my google-fu missed something obvious?
20:24 < larsvegas> @droger why rotate anyway? Do you need a lot of logs backwards?
20:24 < ack006> drodger: https://github.com/andrewvc/node-streamlogger ?
20:24 < eduardo2_> hey guys, i am almost good with passpot now, but getting "Error: passport.initialize() middleware not in use"  - i couldn't quite understand the answers from googling
20:25 < Hotroot> Whats the JS trick for using a default value if a value doesn't exist? It's like myVar = a || 5; ?
20:25 < niggler> yeah Hotroot 
20:25 < dzajdband> yep
20:26 < Hotroot> Weird, didn't work in chrome
20:26 < niggler> it uses the fact that
20:26 < niggler> >>> !undefined @hotroot
20:26 < purr> hotroot: (boolean) true
20:26 < larsvegas> logrotation, is a thing for system, not for an app writen in node… use logrotate...
20:26 < niggler> Hotroot: was a defined elsewhere?
20:26 < Hotroot> Nope
20:27 < drodger> oh, the logrotation itself works fine, but writes fail afterwards (I think it doesn't handle a SIGHUP to reopen the file), so no further writes occur.
20:28 < niggler> Hotroot: console.log(a) right before that line
20:28 < larsvegas> @drodger, whats about using rsyslog or similar, there is a syslog module out there, which some kind of sucked as i worked with it last time
20:28 < Hotroot> It's not liking that something is undefined, but I thought it could check that anyway
20:29 < larsvegas> anyhow, you could pump your intries via udp
20:29 < drodger> ack006 - that looks interesting, handles reopening the stream.
20:29 < Hotroot> I could have sworn you could do if (!undefinedVar)
20:29 < larsvegas> rsyslog is handling stuff like truncate logfiles on logrotate, even logrotate can do that afaik
20:29 < ack006> drodger: :-)
20:32 < whomp> how can i view the http body that i've written using res.write?
20:32 < drodger> @larsvegas I'll give the syslog module a whirl as well.
20:33 < ack006> larsvegas: node-streamlogger works together with logrotate. 1 tool for 1 job, unix & node philosophy, melikes :-)
20:33 < Tixz> I was about to implement a priority queue in javascript the only way I know, using a heap, but does that even make sense in a javascript context?
20:34 < Tixz> Should I just use an array and then sort the array on using a custom comparator on each insert/delete?
20:38 < AAA_awright> Tixz: Those are always hard to do, use a btree (a database) or implement some number of bins, each of which takes a different priority range for items
20:39 < whomp> how can i view the http body that i've written using res.write?
20:39 < AAA_awright> whomp: It's not saved anywhere to view
20:39 < brianc> whomp: you can't unless you monkeypatch res.write to store it somewhere for your later inspection
20:40 < Tixz> AAA_awright: alright, does it make sense to use a binary tree/heap in javascript? Or should I use bins as you suggest?
20:40 < AAA_awright> Once it gets ACKed it's gone from memory
20:40 < Tixz> (It will be for a worker queue)
20:41 < AAA_awright> Tixz: Well ES doesn't have a btree like what you'd need so either you have to insert records into a database, or go with bins. Or if you've got <100 items, maybe even <1000, just re-sort the Array.
20:42 < Tixz> Yeah alright, I will have less than 1000 and would like to keep them in memory
20:48 < zdwolfe> Hello, I'm using mongoosejs and I'm getting weird behavior when using model.find.  Please check out https://gist.github.com/4120940 
20:50 < ericelliott> Trying to install a private git module with npm -- getting 404 trying to pull it in. How can I make sure git can authorize me?
20:53 < ericelliott> figured it out.. just needed git+ssh://
21:00 < q_no> can someone help me with a clustered socket.io setup? got everything up&running, but it looks like the clients (even disconnected clients) never leave my channels, when I inspect the rooms in another process (that is connected to redis too)
21:05 < q_no> never mind ^^ found a related github issue
21:23 < generalissimo> plugin-free video conferencing with latest google chrome http://observers.jit.su/rooms/iz
21:23 < generalissimo> using node and webrtc
21:26 <@mbalho> generalissimo: is the source for that online?
21:28 < chapel> generalissimo: did you make that?
21:29 < chapel> if so you should url encode room names
21:29 < generalissimo> chapel: yes
21:30 < generalissimo> it's a tech demo
21:30 < generalissimo> not a real product
21:30 < chapel> sure :)
21:30 < chapel> cool none the less
21:30 < chapel> #blah for a room name doesn't work for instance
21:31 < generalissimo> chapel: the actual room multiplexing is just on the window.location.origin + window.location.path
21:34 < perezd> I want to create a dynamically colored, 1x1 image using node buffers…don't wanna use canvas...
21:34 < perezd> any ideas?
21:35 <@mbalho> perezd: you can probably use this to create a png https://github.com/brianloveswords/streampng
21:36 < perezd> basically, I have a hex color
21:36 < perezd> and I want to create a 1x1 png of that color
21:36 < perezd> without the overhead of canvas
21:36 < perezd> I should be able to do this with simple buffer manipulation
21:37 <@mbalho> perezd: png is a binary format, go look up how to create one
21:42 < AAA_awright> perezd: Why do you need a 1x1 png?
21:42 < perezd> just need it so I can stretch it
21:42 < perezd> as an image-based backgroudn
21:44 < gildean> perezd: why not just css instead?
21:44 < gildean> if it's only one color
21:44 < perezd> because this is an HTTP endpoint that returns an image
21:44 < perezd> but sometimes that image should be a solid color
21:44 < perezd> as an image
21:44 < Sma> Hey there :) Is there any good tutorial on callbacks?
21:46 < djazz> Sma: callbacks are functions you pass to other functions, that gets called when that other function decides to
21:46 < djazz> for example, socket.on('data', /* put callback function here */);
21:47 < Sma> Well I understood the basics... But I'm not sure how to 'return' a value with it. I have a file for a webserver and i want to return the server (as variable) to the main.js
21:47 < gildean> Sma: fn(something, function (result) { console.log(result) }); function fn(something, callback) { thisthing = something + else; callback(thisthing)};
21:48 < Sma> oh... that might work. i'll test it, gildean. thx
21:51 < MI6> joyent/node: Ben Noordhuis master * a25ebb1 : v8: fix dragonflybsd build  * fix gyp build * don't require libexecinfo,  (+3 more commits) - http://git.io/fgOxBg
21:57 < gildean> Sma: np
21:57 < gildean> the order should be reversed tho'
21:57 < Sma> yep...
21:58 < gildean> a function should be defined before using it
21:59 <@mbalho> order doesnt matter cause of hoisting
22:03 < aettinger> Sma: have you used ajax?
22:04 < Sma> aettinger: nope. i'm a "classical" c++ programmer
22:04 < aettinger> you can't return from callbacks
22:04 < aettinger> unless i'm mistaken
22:04 < Sma> well it works in my script. not sure if it's non-blocking though :x
22:05 < chapel> aettinger: you aren't mistaken
22:05 < aettinger> foo(data, function(bar){ });  so foo()'s signature will look like var foo = function(data, cb){};
22:05 < aettinger> and will call cb() at the end or somewhere inside it.
22:05 < generalissimo> http://observers.jit.su/rooms/iz
22:06 < generalissimo> pushed an update
22:06 < generalissimo> (requires latest chrome)
22:16 -!- mode/#node.js [+o ryah] by ChanServ
22:19 < niggler> Sma: lol
22:19 < Sma> :o
22:19 < niggler> what's a "classical" C++ programmer?
22:19 < niggler> is that a C programmer?
22:19 < ericelliott_> maybe classical implies classical OO
22:20 < ericelliott_> I would think that C++ implies that too, though. =)
22:20 < Sma> c++ = the classical way of programming. not event-based non-blocking :x
22:21 < niggler> C++ and C both have nonblocking and event-based programming flows
22:21 < ericelliott_> browserify question -- I have a an entry point javascript file for browserify, and a built version in my repo.. I assume the entry point should be in the "main" entry in package.json, correct?
22:22 < Sma> niggler: yeah i know. is that a problem? :) 
22:23 < niggler> some people refer to STL when talking about classical C++
22:23 < niggler> which makes me shudder
22:25 < aettinge1> .
22:26 < aettinge1> me nick is ghosted 
22:26 < TheAceOfHearts> pffft, real men program in assembly.
22:26 < aettinge1> heh
22:26 < aettinge1> and never ask for directions
22:28 < gildean> just like all the real frontend devs code all their js in ecmascript 1, and straight inline
22:29 < TheAceOfHearts> clearly. as if there were any other choice in the matter.
22:30 < aettinge1> javascript: is making a comeback
22:32 < niggler> TheAceOfHearts: sadly enough 80% of my coding is in x86 assembly
22:32 < niggler> but javascript is surprisingly fun to work with
22:33 < nlf> javascript bit math is the devil
22:33 < TheAceOfHearts> niggler: only 80%? Why so casual?
22:34 < niggler> you know, there are some tasks best suited for a high level language
22:34 < TheAceOfHearts> but seriously, you do x86 asm? I didn't think anyone actually did x86 asm lol
22:34 < niggler> like string processing in perl
22:34 < TheAceOfHearts> I know lol
22:34 < niggler> even to do basic stuff like reading timestamp counter, you have to go down to assembly
22:34 < niggler> RDTSC
22:35 < niggler> and once you go down that rabbit hole, you start replacing lots of bit twiddling with assembly
22:35 < niggler> then you realize your C program is really just a bunch of assembly routines strung together
22:35 < TheAceOfHearts> lol
22:36 < TheAceOfHearts> I trust gcc has better optimization techniques than me :P
22:36 < nlf> then you realize your C is actually being compiled down to the same code and doesn't make you want to shoot yourself at the end of the day
22:36 < niggler> nlf: so take the example i gave above
22:37 < niggler> reading the timestamp counter (which you can do via the RDTSC assembly instruction)
22:37 < niggler> what's the "C" way to do it?
22:37 < Hotroot> TheAceOfHearts: x86 asm is actually fairly well known among various crowds. Nearly ever software cracker or game hacker knows a decent amount
22:38 < niggler> as for trusting GCC, google "goto blas"
22:38 < niggler> for many years, a hand-tuned BLAS implementation smoked the automated version (called ATLAS)
22:38 < TheAceOfHearts> Hotroot: Well, yeah, but those people are badass motherfuckers. And they're a minority lol.
22:39 < eduardo> Hi guys. I am super-new to Node. I think I made a lot of progress today, and would love to get a super-critical review from someone.  its about 100 lines in total.
22:39 < eduardo> https://github.com/xyzelement/mediator/blob/master/hello_http.js
22:39 < eduardo> would appreciate really honest feedback
22:39 < eduardo> on style, paradigms etc
22:39 < freewil> use 2 spaces for indentation ;)
22:39 < Hotroot> TheAceOfHearts: A minority? CEF is a pretty large community. I've seen at least 3 other popular game hacking forums
22:40 < eduardo> freewil: noted :)
22:40 < niggler> its not just there -- HPC and HFT communities
22:40 < mscdex> +1 2 space indent
22:41 < Hotroot> eduardo: You aren't using express 3 syntax, you have to do this "var server = require('http').createServer(app);"
22:41 < TheAceOfHearts> Hotroot: I mean, like <_< ... in the programming community.  I'm certain ASM is a minority of what coders are working on. But I'm sure there's still lots of people using it lol
22:42 < eduardo> Hotroot: sorry, what do you mean?
22:42 < mscdex> eduardo: it also might worthwhile to keep callback variable names consistent. most people use 'callback' or just 'cb'
22:42 < TheAceOfHearts> eduardo: Express version 3 changed some parts of the syntax.
22:42 < niggler> TheAceOfHearts: its simple: in some industries, the value comes from performance boosts beyond what the compiler is capable of doing
22:42 < Hotroot> eduardo: In express 3 you are supposed to pass app, then do server.listen(port)
22:42 < Hotroot> not app.listen(port)
22:43 < TheAceOfHearts> niggler: I'm completely certain that's true @.@ .... but it's still probably a relative minority. I have a ton of respect for assembly programmers lol
22:43 < TheAceOfHearts> http://www.youtube.com/watch?v=J7QgHDa8LOQ this is pretty much the extent of my exposure to assembly lol
22:43 < mscdex> eduardo: another thing i saw is process.nextTick on line 71, why is that needed?: https://github.com/xyzelement/mediator/blob/master/hello_http.js#L71
22:44 < niggler> eduardo: be consistent with tabs/spaces :)
22:44 < TehShrike|Work> So... isaacs... *cough*
22:44 < TehShrike|Work> ...maybe you should make a separate Twitter account for Instagram >_<
22:44 < Hotroot> eduardo: Also, depending on what you use it for, static being at the end can be a waste. I have it before session, cookieparser, etc. because why do I need cookies and logging going off when someone wants a CSS file?
22:45 < TheAceOfHearts> brb
22:45 < niggler> TehShrike|Work: there's no nodejs twitter?
22:45 < mscdex> eduardo: the last suggestion i have is that you should keep your control block style consistent. for example, you have some one-line ifs and others that break to the next line
22:45 < TehShrike|Work> niggler: A few people have started switching to app.net
22:45 < TehShrike|Work> https://alpha.app.net/tehshrike
22:45 < gildean> eduardo: you should try and move the db-methods and such to modules and require them and then reference to methods on the modules, makes the code a lot easier to read an maintain
22:45 < eduardo> guys that's awesome feedback, let me process all of it! thank you
22:46 < niggler> what's the difference between app.net and tent.is?
22:46 < TehShrike|Work> tent.is is distributed, isn't it?
22:46 < TehShrike|Work> app.net is not.  It's a single service, funded by membership fees.
22:46 < TehShrike|Work> Which I am quite happy to pay
22:48 < niggler> so something confuses me here.  They say they are not selling personal data, but i can see it if i click.  Why wouldn't an unscrupulous person just scrape the site?
22:49 < TehShrike|Work> I'm pretty sure that's possible
22:49 < TehShrike|Work> But app.net won't sell it :-)
22:50 < niggler> not to troll app.net, because it looks like everyone involved is genuinely motivated, but it comes off as strange
22:50 < eduardo> mscdex: I actually lifted the nextTick part from ane xample... i am trying to understand what that code is meant to do there
22:50 < eduardo> is it to avoid a race condition ?
22:50 < Hotroot> eduardo: What's with the user data being in plain text and whatnot?
22:51 < eduardo> Hotroot: that's just BS for now, I am going to replace all that
22:51 < eduardo> with a Oauth probably
22:51 < Hotroot> K. I'd also spend some time researching what DB you want to use. After some checking about I switched from Mongo to Redis recently. Just consider what you need, and how well you can deal with the syntax
22:52 < eduardo> mscdex: the code DOES work fine w/o the nextTick
22:53 < Raynos> Why is writing database drivers so hard
22:53 < Raynos> Its the most ugly code ever
22:55 < niggler> Raynos: sql is ugly
22:56 < Raynos> im thinking of leveldb, indexeddb, mongodb
22:56 < TehShrike|Work> niggler: Oh come on, I like SQL all right :-P
22:56 < niggler> nosql is ugly
22:56 < Raynos> even leveldb is ugly :/
22:57 < niggler> select worst_practice from all_languages where number_of_users > 0
22:58 < msrishikesh> Pretty URLs with node.js?
22:59 < TehShrike|Work> ...yes! :-P
23:01 < Warpten> So i have a TCP proxy that listens for incoming connections on port 8085 and sends them back to the remote server on port 8085. However, when i connect on the socket, the code crashes because the socket is already connected, or w/e. Any obvious mistake in there ? http://pastebin.com/py30L5ei
23:01 < Warpten> Don,t mind the typo in the spawning part, localHost _is_ 8085.
23:01 < Warpten> err, port
23:02 < TehShrike|Work> Isn't port some kind of distilled wine or something?
23:02 < mscdex> eduardo: you generally won't need to use nextTick
23:03 < niggler> lol TehShrike|Work 
23:03 < niggler> its not a 'distilled' wine
23:03 < niggler> the word you are looking for is fortified
23:03 < TehShrike|Work> Huh.
23:03 < TehShrike|Work> Fortified with more alcohol, presumably
23:04 < niggler> fortified with another distilled beverage
23:04 < TehShrike|Work> aaah, *brandy* is distilled wine.
23:04 < niggler> port is like champagne
23:04 < niggler> *insofar as the term refers to a region
23:06 < jesusabdullah> dshaw_: what's todays nerdup about?
23:07 < Hotroot> Warpten: I'll take a look
23:07 < Warpten> hotroot: think i just found it
23:07 < Warpten> lemme check
23:08 < aettinge1> nerdup?
23:08 < Warpten> Yeah, found it
23:08 < Warpten> Thanks anyway Hotroot, it was a fail at variables naming when connecting
23:08 < Hotroot> Warpten: Grats =)
23:08 < Warpten> That's what i get for coding past midnight
23:09 < dshaw_> jesusabdullah: Production NPM and Iris NPM.
23:09 < dshaw_> —> /join #nodeup
23:10 < Warpten> Night!
23:10 < dshaw_> See everybody in about an hour.
23:10  * dshaw_ off to finalize show notes
23:18 < jesusabdullah> dshaw_: word, JUST MIGHT LISTEN IN
23:18 < jesusabdullah> dshaw_: I have a side project that, if it ever sees the light of day, will be using an npm server for NON NPM THINGS
23:19 < dshaw_> jesusabdullah: interesting
23:19 < jesusabdullah> indeed
23:19 < TehShrike|Work> QUITE
23:19 < jesusabdullah> https://github.com/jesusabdullah/scadpan
23:25 < niggler> what exactly is 'ghettotastic'?
23:25 < TehShrike|Work> Your momma!
23:25  * TehShrike|Work fist-pumps the air
23:26  * niggler bitchslaps TehShrike|Work 
23:26 < eduardo> so what's the actuall difference between  app.listen(8080);   AND var server = require('http').createServer(app); server.listen(8080); ?
23:26  * TehShrike|Work sticks his tongue out at niggler
23:26  * niggler grabs TehShrike|Work's nose
23:27  * TehShrike|Work pratfalls
23:29 < Hotroot> eduardo: You can't do app.listen in express3
23:29 < eduardo> I mean i can, since it works :) but what is it doing differently?
23:30 < Hotroot> I think they did it to allow for some more versatility
23:30 < Hotroot> It used to internally do something very similar I believe
23:30 < Hotroot> I like it, it's pretty simple now to use https
23:31 < gildean> Hotroot: iirc the listen method was added to the final version
23:31 < gildean> i might be wrong tho'
23:31 < Hotroot> eduardo: And you *can* but it should be giving you a warning or something. Some stuff like socket.io probably won't work with it
23:32 < eduardo> thanks, i am just trying to wrap my head around this. i am still vague on app.use frankly
23:33 < Hotroot> I know, it's a pain to wrap your head around at first
23:33 < Hotroot> eduardo: Basically app.use is doing something similar to app.get and app.post
23:34 < Hotroot> It's saying, "when we get a request, run the data through these functions in this order"
23:34 < eduardo> when i set up multiple of em, i feel like i am setting up a pipeline of "filters" for the request to go through
23:34 < eduardo> right
23:34 < eduardo> does it run through all of em or does it bail out on some conditions?
23:34 < Hotroot> Yes. So like I said before, I do static before session because I don't want that wasted cookie overhead when someone grabs every single image or CSS file
23:35 < Hotroot> Well, I'm pretty sure static "bails"
23:35 < Hotroot> I believe static can "finish" the request
23:36 < eduardo> that makes sense
23:36 < Hotroot> Most don't. Why would bodyParser or w/e need to? Your custom ones can too I believe
23:36 < eduardo> and i guess the "effect" of upstream functions could be required downstream?
23:36 < Hotroot> eduardo: Hmm? You don't use middleware on the reutn
23:37 < Hotroot> *return
23:37 < Hotroot> Or at least I've never seen it
23:38 < eduardo> Hotroot: what i encountered is this: i was using some sample code for passport and everything SEEMED to work except it wouldnt persist sessions.
23:38 < eduardo> turns out i needed to app.use sessions. which gave me the impression that it "flows" downstream
23:38 < djazz> anyone wanna drive my remotecontrolled node.js powered mindstorms robot?
23:38 < eduardo> like i said, VAGUE!
23:38 < djazz> http://oi47.tinypic.com/2133s4p.jpg
23:39 < Zelest> djazz, awesome! :D
23:39 < djazz> http://djazz.mine.nu/lab/rpi/remote/
23:39 < djazz> Zelest: source: https://github.com/daniel-j/node-nxt-bot/
23:44 < erickrdch> hey :) someone active around?
23:44 < erickrdch> i have a question about npm and the registry
23:44 < Hotroot> djazz: Ponies!
23:45 < erickrdch> I have a module, and I want to update the version... but I have no idea how to do it :S
23:45 < erickrdch> Already used npm version and it updated correctly the package.json
23:45 < djazz> Hotroot: woo
23:45 < erickrdch> but now how do I update the registry?
23:45 < TehShrike> npm publish!
23:45 < erickrdch> it is already published
23:46 < erickrdch> should I use it again?
23:46 < Hotroot> Muahahaah! I made it hit a box!
23:46 < erickrdch> :O !!!!
23:47 < gildean> erickrdch: republishin updates if the version number has changed
23:47 < gildean> or if you force it
23:47 < erickrdch> got it!
23:47 < erickrdch> now it is updated... :P
23:47 < erickrdch> thanks!
23:47 < Hotroot> eduardo: Sessions are entirely server based
23:47 < Hotroot> The only thing the cookie stores is auth
23:48 < erickrdch> gildean, thanks!
23:48 < erickrdch> TehShrike, thanks too!
23:48 < eduardo> Hotroot: sorry i dont know what that means with respect to what I said
23:48 < gildean> np
23:50 < Hotroot> djazz: Can't go forward 0.o
23:50 < djazz> Hotroot: cable entangled
23:50 < Hotroot> djazz: I would totally pay to fight them if you go in that direction
23:51 < djazz> hm?
23:51 < djazz> minecraft!
23:51 < Hotroot> djazz: Like we pay money, you build them up, and then we can fight each other with them
23:51 < djazz> aah
23:52 < djazz> i have 2 NXT kits
23:52 < djazz> 3 raspberrys
23:52 < djazz> well
23:52 < djazz> only 1 webcam
23:52 < Hotroot> Well, you would list the prices for the parts, people would buy them, then maybe you a few bucks to battle.
23:54 < Hotroot> eduardo: Not really sure what you mean. Sessions doesn't go "down stream" at all if you mean what I think you mean.
23:54 < Hotroot> djazz: Not really sure what the market is for that, but there are plenty of people I'm sure who want to do BattleBots but don't have money to fly across the country, etc.
23:55 < niggler> ooh can you program the NXT in nodejs?
23:55 < djazz> niggler: buetooth
23:55 < djazz> bluetooth*
23:55 < djazz> niggler: http://oi47.tinypic.com/2133s4p.jpg
23:55 < djazz> the blue light on top is the bluetooth dongle
23:55 < djazz> see all code on github!
23:55 < niggler> i see some non-lego parts there
23:55 < djazz> https://github.com/daniel-j/node-nxt-bot
23:56 < djazz> ya
23:56 < djazz> that runs a websocket server and webcam server
23:58 < paulbjensen> Terminator, The Matrix… this is how it starts!
23:59 < paulbjensen> looks cool, I for one welcome our kids-toy-wrapped overlords!
--- Log closed Wed Nov 21 00:00:00 2012
