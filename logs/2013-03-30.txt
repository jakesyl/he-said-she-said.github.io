--- Log opened Sat Mar 30 00:00:47 2013
00:03 < Industrial> Anyone want to give me some hints on how to test this API properly? https://gist.github.com/Industrial/3cf19c1a5e4e5a2ee58e
00:03 < samholmes> Is there something like this only in npm: http://progrium.com/localtunnel/
00:06 < ningu> there are several local tunnels in the bay area
00:11 < samholmes> ningu: I found localtunnel in npm
00:12 < samholmes> But, localtunnel.me seems slow.
00:12 <@TooTallNate> ningu: misuse of node-sqlite3 may cause a segfault
00:13 <@TooTallNate> ningu: or perhaps it's uncovering a bug in node-sqlite3
00:14 < ningu> TooTallNate: yeah, could be
00:14 < ningu> we are looking into it
00:16 < lacrymology> can someone tell me what on earth is this syntax? http://stackoverflow.com/questions/14194250/using-backbone-js-with-socket-io
00:16 < lacrymology> ah
00:16 < lacrymology> coffeescript
00:17 < dypsilon> Hi everyone, is there a reusable implementation of SRP protocol for node somewhere. All I could find are some experimental packages.
00:33 < AAA_awright> What's with all this nonsense on GitHub about error handling
00:34 < AAA_awright> I've never, ever had a problem with errors
00:34 < NodeNewb> playing with modules, and everything is around calling functions/methods, but what about objects? If I have a module.js with var myobj = {foo: 'bar'} and exports.myobj = myobjc, how do I reference "myobj" from the .js file after I require('./modules.js')?
00:34 < MI6> joyent/node: Timothy J Fontaine master * aa5da48 : dtrace: actually use the _handle.fd value  When using the DTrace/systemta (+2 more commits) - http://git.io/IguX7Q
00:35 < ningu> var foo = require('./modules'); foo.myobj ...
00:36 < NodeNewb> ahh forgot to make it a variable, thanks ningu
00:36 < ningu> you can also do module.exports = { myobj: myobj };
00:37 < ningu> exports has its limitations
00:37 < NodeNewb> any difference?
00:37 < ningu> well the difference is that it's called myobj in your module file as well
00:37 < ningu> and you can also set module.exports to a function
00:37 < ningu> it just gives you more control
00:38 < howdynihao> NodeNewb: to understand it, exports is just an object {}, you're just attaching properties on it whenever you do exports.foo , you can also replace it with whatever you want module.exports = somethingElse
00:39 < ningu> if you set module.exports it will override exports
00:39 < ningu> it's slightly confusing but they are not the same thing
00:40 < NodeNewb> but if I have a huge block of objects only, exports is ok?
00:40 < NodeNewb> no functions, except in the object itself
00:40 < ningu> I don't know what you mean by a huge block of objects
00:40 < NodeNewb> well it's only one object, but a lot of objects within it
00:40 < ningu> tjholowaychuk: discount broke in v10.0, I'm sure you care :)
00:40 < howdynihao> it's not really that confusing you just have to realize exports is a blank object
00:41 < NodeNewb> it's just one really big object
00:41 < howdynihao> you can replace it, or set properties on it, or do whatever, it's like doing var obj = (whatever you want)
00:42 < NodeNewb> although I'm not sure how to simplify this object via a constructor since it contains a function (example: http://pastebin.com/EvfbTU2m)
00:42 < ningu> NodeNewb: it's not a qusetion of whether it will "work" but whether a particular thing is a good design
00:43 < NodeNewb> right now, it's a read-only object
00:43 < ningu> you should read about js constructors
00:43 < ningu> what you're doing is very ad hoc
00:43 < NodeNewb> I did, nothing really clicks with what I'm doing
00:44 < NodeNewb> agreed, I'm sure there's an easier, more elegant way
00:44 < ningu> function ping() { ... } ping.prototype.help = '...'; etc.
00:45 < ningu> also look at util.inherits
00:46 < NodeNewb> well how do I call "ping()" within the "commands" object...if the user types "ping" I'm first checking if it exists, then calling the "exe" object (containing the function)
00:47 < ljharb> an "exe"? doesn't that mean your node app would only work on windows?
00:47 < NodeNewb> no, it's just the name of the object
00:47 < min|dvir|us> NodeNewb: there are two schools of thought.
00:48 < min|dvir|us> 1) LBYL 2) EAFP
00:48 < NodeNewb> exe: function(args) { //code to run here }
00:48 < min|dvir|us> Look Before You Leap, and Easier to Ask for Forgiveness than Permission.
00:49 < NodeNewb> right, I think I'm doing more LBYL since I don't try/catch everything...unless I misunderstand the idiom
00:50 < min|dvir|us> >> var commands = {exe: function(){console.log("here");}; commands.exe();
00:50 < purr> min|dvir|us: SyntaxError: Unexpected token ;
00:50 < min|dvir|us> >> var commands = {exe: function(){console.log("here");}}; commands.exe();
00:50 < purr> min|dvir|us: undefined; Console: 'here'
00:51 < min|dvir|us> You can also do something like this, if you want to be safe:
00:51 < min|dvir|us> >> var commands = {exe: function(){console.log("here");}}; (commands.exe || function(){})();
00:51 < purr> min|dvir|us: undefined; Console: 'here'
00:54 < NodeNewb> min|dvir|us hmmm ok let me try and play with that a bit, thank you
00:54 < min|dvir|us> NodeNewb: if you need help understanding anything let me know and I'll help if I'm around.
00:54 < NodeNewb> greatly appreciated
00:56 < MI6> joyent/node: bnoordhuis created branch tjfontaine-review-this - http://git.io/b2vJBQ
01:02 < MI6> joyent/node: Ben Noordhuis master * 9b8dd39 : dtrace: check if _handle property is set  Check that _handle is an object - http://git.io/mZ9S6w
01:03 < cdepauw> good night!
01:08 < samholmes> I've been using nodemon for development, but it's been very slow for me. Is there something faster?
01:08 < min|dvir|us> samholmes: supervisor
01:09 < min|dvir|us> samholmes: also forever
01:09 < SomeoneWeird> samholmes, use jesus
01:09 < samholmes> SomeoneWeird: Doesn't jesus just start the program if the program crashes?
01:09 < samholmes> same with forever?
01:09 < SomeoneWeird> yeah?
01:10 < samholmes> SomeoneWeird: That's not what nodemon does
01:10 < samholmes> That's not what I'm asking
01:10 < SomeoneWeird> ah
01:10 < SomeoneWeird> yeah, rigiht
01:10 < samholmes> I'm talking about when changes occur in the file
01:10 < samholmes> :P
01:10 < SomeoneWeird> yeah
01:10 < ningu> I just do it manually
01:10 < min|dvir|us> forever does watch.
01:10 < ningu> otherwise it gets confusing
01:10 < samholmes> ningu: Eh, but designing templates/styles it's a real pain
01:11 < min|dvir|us> forever -w
01:11 < ningu> samholmes: oh, well I don't need to restart the app for those
01:11 < min|dvir|us> Also --watchDirectory.
01:11 < samholmes> min|dvir|us: Maybe that wont even work though
01:11 < min|dvir|us> samholmes: then don't use it.
01:11 < samholmes> ningu: Why don't you need to restart the app for jade?
01:11 < ningu> samholmes: express handles that
01:11 < min|dvir|us> Are you just here to argue?
01:11 < samholmes> min|dvir|us: I think nodemon is slow cause my app is slow in restarting.
01:11 < samholmes> ningu: How so?
01:11 < samholmes> min|dvir|us: partly.
01:11 < ningu> samholmes: when a template is about to be rendered it checks if it's been modified and recompiles it if necessary
01:12 < ningu> same for stylus
01:13 < samholmes> ningu: oh, so then I should add .jade and .styl files to my nodemon ignore. :P
01:14 < ningu> samholmes: hehe
01:15 < ningu> it's just the .js files you need to restart it for
01:15 < samholmes> ningu: thanks for that tip. Helps me out a ton
01:15 < samholmes> I didn't know that .jade files were cached but re-cached when changed.
01:15 < samholmes> modified*
01:15 < ningu> yeah, I don't know if there's an option to change the behavior or what but that's how it works by default
01:17 < samholmes> ningu: even though I don't restart... It still don't go too fast.
01:17 < samholmes> It seems like jade is just a bit slow at compiling?
01:18 < ningu> I've never noticed an issue
01:23 < samholmes> ningu: It's better though now.
01:25 < ningu> eh?
01:36 < ganzuul> ;_;
01:36 < ganzuul> When I setTimeout on a websocket send I get random behaviour.
01:44 < ganzuul> Is this somehow wrong?  setTimeout(function(){  client.send(scan); }, 200);
01:44 < ganzuul> maybe maybe...
01:48 < min|dvir|us> ganzuul: what makes you think something is wrong with it?
01:48 < NodeNewb> how can I call a function in the main.js from a module?
01:48 < min|dvir|us> NodeNewb: require('main.js').function();
01:48 < min|dvir|us> Or are you asking how to export a function from a module for other modules to use?
01:49 < ganzuul> min|dvir|us: wrong tool, I just realized!
01:49 < ganzuul> Actually I do wih to block all the things.
01:49 < ganzuul> ~wish
01:49 < NodeNewb> sorry, I mean the main.js has require('module.js') and a function "func()" and in module.js I want to call func() from within main.js
01:50 < min|dvir|us> NodeNewb: from within module.js, do `module.exports = {func: func}`.
01:50 < ningu> min|dvir|us: you mean from main.js
01:50 < min|dvir|us> I think something in what you wrote is backwards, NodeNewb.
01:50 < ningu> I would agree
01:51 < ningu> NodeNewb: does func() have to be in main.js?
01:51 < ganzuul> AHHA!
01:51 < ningu> you could put it in its own module for example
01:51 < NodeNewb> hmmm maybe it does belong in its own module
01:51  * ganzuul finally found his bug
01:51 < NodeNewb> it doesn't have to be in main
01:51 < ningu> ganzuul: now if only I can find mine...
01:52 < howdynihao> its right there!
01:52 < ganzuul> ningu: Block all the things! \o/
01:52 < ningu> ganzuul: it's a weird sqlite3 segmentation fault issue :(
01:52 < ningu> not my code
01:52 < howdynihao> you don't see it? it's wearing glasses and a white, red hat
01:53 < ningu> I always knew redhat was a bug
01:53 < howdynihao> i was trying to describe waldo :P
01:55 < min|dvir|us> Your maternal progenitor!
01:58 < NodeNewb> ok, need to take baby steps on these modules...say I left that func() in the main js, how would I call it from within a module?
01:58 < nightfly__> pass it in as an argument to something
01:58 < min|dvir|us> NodeNewb: you're thinking about this backwards.
01:59 < min|dvir|us> Modules contain functionality that you can use when you require them.
01:59 < min|dvir|us> If you have main.js that means it's the top-level module, which means that you shouldn't be trying to call something from it from within a module.
01:59 < min|dvir|us> Instead, you call things from the module from within main.js.
02:01 < NodeNewb> ok so it's better to have it in it's own module since it may need to be accessed by other modules?
02:02 < min|dvir|us> If you are writing reusable code, it should be within a module (not main.js).
02:02 < NodeNewb> it's a pretty basic function, but I can see it be used a lot
02:02 < min|dvir|us> Nobody cares about your utility functions.
02:03 < min|dvir|us> If you need, make util.js.
02:03 < NodeNewb> ok, one more question...better to put all of the utility functions in an object and export the object, or do I need to export each function so I don't end up with a lot of crazy dot notation?
02:04 < min|dvir|us> If you want to make one module per function then you can do this but nobody does this.
02:05 < ningu> I dunno I try to keep my modules to no longer than tweet length ;)
02:05 < min|dvir|us> Hot damn. :)
02:05 < NodeNewb> I mean is it better to have a module.object.function or just module.function (like a method)
02:05 < gkatsev> ningu: trying to beat substack at his own game?
02:05 < min|dvir|us> NodeNewb: that depends.
02:05 < NodeNewb> I swear, I'm going to pay someone to review my code for pointers
02:06 < ningu> there are no pointers in javascript
02:06 < NodeNewb> I just have this feeling that, while it works, it's also a pile of garbage
02:06 < min|dvir|us> NodeNewb: http://www.python.org/dev/peps/pep-0020/
02:06 < ningu> nodenewb: that was a joke, just ignore me
02:06 < min|dvir|us> ^^ That applies to every programming language.
02:06 < gkatsev> ningu: lol
02:06 < min|dvir|us> Particularly "flat is better than nested".
02:06 < howdynihao> NodeNewb: HOWMUCH? 
02:07 < howdynihao> im jk, link to your code?
02:07 < NodeNewb> I seriously would hire someone, I just learn better by seeing it correctly than reading through stackoverflow questions from 2011 =/
02:08 < min|dvir|us> How much, then?
02:08 < howdynihao> then just look at some mature projects
02:08 < howdynihao> you'll see it 'correctly' there
02:08 < XxBlakeFailxX> github for the win
02:08 < min|dvir|us> My rate is $500/hour.
02:08 < NodeNewb> haha
02:09 < XxBlakeFailxX> at least min|divir|us is cheap.
02:09 < TehShrike> :-P
02:09 < howdynihao> i know right
02:09 < howdynihao> my rate is 550/hour, you know im better since im more expensive
02:09 < TehShrike> I'd work for a really great taco
02:09 < XxBlakeFailxX> :howdynihao true facts
02:09 < NodeNewb> yes, you must be premium :)
02:09 < min|dvir|us> TehShrike: best I can do is Taco Bell.
02:09 < TehShrike> ah, see
02:10 < gkatsev> My rate is $1000/hour, but I'll give you a discount to $499.99
02:10 < howdynihao> secretly i'll outsource to min|d
02:10 < TehShrike> I am unachievable
02:10 < TehShrike> howdynihao: lol
02:10 < ningu> gkatsev: discount is broken on v10.0, you can't fool me
02:10 < XxBlakeFailxX> easy solution, put ~
02:11 < gkatsev> lots of things are broken with v0.10 still
02:12 < min|dvir|us> What's the popular full-stack framework nowadays?
02:12 < gkatsev> derby?
02:12 < TehShrike> JavaScript?
02:13 < ningu> min|dvir|us: full stack of buttermilk pancakes with real maple syrup
02:13 < min|dvir|us> gkatsev: that's pretty cool. :)
02:14 < gkatsev> min|dvir|us: and there is also meteor, but meteor is kind of its own thing.
02:14 < TehShrike> fork stack trace?
02:16 < XxBlakeFailxX> anybody ever messed with locomotive?
02:22 < TehShrike> Nope. What's that?
02:23 < mscdex> node.js rules!
02:23 < TehShrike> WORD
02:23 < mscdex> who's talking about Office?
02:23 < TehShrike> NODE EXCELS
02:24 < TehShrike> I LOVE TO ACCESS NODE.JS' DOCUMENTATION
02:24 < TehShrike> NODE.JS' POINTS ARE INCREDIBLY POWERFUL
02:24 < TehShrike> NODE.JS IS BOTH FOXY AND PROFESSIONAL
02:24 < mscdex> you're trying too hard
02:24 < TehShrike> Well, yeah.
02:24 < mscdex> let it flow
02:25 < SomeoneWeird> lmfao
02:25 < TehShrike> node's outlook is quite excellent
02:26 < TehShrike> I wouldn't exchange node.js for any other interpreter
02:26 < mscdex> there you go
02:27 < TehShrike> node.js works
02:27 < TehShrike> That one's getting a bit old-school.
02:28 < ningu> *** glibc detected *** node: free(): corrupted unsorted chunks: 0x0000000001851de0 ***
02:28 < XxBlakeFailxX> locomotive is just like a MVC structured version of Express
02:28 < mscdex> ningu: how dare you!
02:29 < jlord> isaacs: is there a simple http benchmark module in npm that i could use for the benchmarking challenge on diy skill?
02:30 < jlord> isaacs: something with a good output to show the kids what its doing
02:34 < samholmes> Anyone here use localtunnel?
02:34 < Zolmeister> yup
02:37 -!- mode/#Node.js [+b *!*dan@unaffiliated/mindvirus] by Nexxy
02:37 -!- min|dvir|us was kicked from #Node.js by Nexxy [min|dvir|us]
02:52 < zeromodu_> CMake is uh, kind of awesome lookin'.
03:00 < samholmes> Zolmeister: Do you know why I keep getting "[trace] no client found for id: doms" when running ./bin/server ?
03:01 < Zolmeister> are you using the old or new version of localtunnel?
03:06 < samholmes> Zolmeister: I'm not sure?
03:06 < samholmes> Zolmeister: I just found out about it today
03:06 < samholmes> Zolmeister: It's very slow. :(
03:07 < Zolmeister> is it the python version, or the ruby version? (and I know, it's pretty slow and also crashes constantly)
03:07 < zeromodulus> Are there any front-end designers/developers here?
03:07 < samholmes> Zolmeister: It's the node.js version.
03:07 < samholmes> zeromodulus: me. :P
03:08 < zeromodulus> samholmes: interested in doing some freelance work as a team?
03:08 < samholmes> zeromodulus: Maybe. Hook me up on twitter later: @sam_holmes
03:09  * samholmes busy with busy-ness right now
03:09 < Zolmeister> samholmes: do you want the api? otherwise just use the ruby version: http://progrium.com/localtunnel/
03:10 < zeromodulus> samholmes: cool, found ya.
03:10 < samholmes> zeromodulus: xP
03:10 < zeromodulus> I'm @zeromodulus.
03:10 < ningu> zeromodulus: you seem to be rapidly progressing to having some idea what you're doing :P
03:10 < zeromodulus> ningu: thanks, that means a lot. :D
03:10 < XxBlakeFailxX> How advanced with node is everyone in here?
03:11 < zeromodulus> I'm going to start bidding on jobs on elance.com.
03:11 < ningu> XxBlakeFailxX: best just to ask your question if you have one
03:11 < ningu> people here range from newbies to the most advanced
03:12 < ningu> and they come and go
03:12 < XxBlakeFailxX> No question at the moment, really just chatting.
03:12 < XxBlakeFailxX> Well actually, I asked earlier this but no one knew much about it. Have any experience with locomotive.js?
03:12 < ningu> well, the maintainer of node is here from time to time and various other experts
03:13 < ningu> if locomotive is a client side thing then people here might not know it as well
03:13 < XxBlakeFailxX> no it's an extension off express
03:13 < ningu> oh right, you said it's an MVC framework
03:13 < ningu> hmm
03:13 < XxBlakeFailxX> that's not like can you help me, was just seeing if anyone had opinions
03:13 < ningu> I guess it's a thing now to make flashy node frameworks a la meteor
03:14 < XxBlakeFailxX> i'm going to jump into since i don't think anyone does and just test around find out
03:14 < zeromodulus> I've been working on setting up a development box for all of my development projects.
03:14 < zeromodulus> It's going pretty good so far.
03:14 < ningu> XxBlakeFailxX: well, express is a very good thing to work with, I'm sure you could build something bad on top of it if you wanted to but it's good to know in any case
03:14 < zeromodulus> I want to be able to take on freelance jobs on elance and just knock 'em out one after the other.
03:15 < zeromodulus> So I spent the day building and configuring Apache, PHP, and now MySQL.
03:17 < ningu> XxBlakeFailxX: honestly it doesn't look like it adds all that much to express
03:17 < ningu> I mean, it won't hurt you either necessarily to use it
03:17 < ningu> provides a little more structure
03:17 < XxBlakeFailxX> I think it really just gives it a structure
03:17 < XxBlakeFailxX> yeah
03:20 < ningu> it doesn't look like it solves any hard problem to me really
03:20 < ningu> I'd probably find it confining
03:21 < ningu> oh, it does have a fairly nice way of passing data around from controllers to views
03:21 < ningu> automatic which can be both good and bad :)
03:21 < XxBlakeFailxX> it's generally supposed to be more of like a rails equiv
03:23 < XxBlakeFailxX> I planned to hook it wth node-orm to have that sorta structure.
03:24 < XxBlakeFailxX> It will be a learning experience, sorta using it as the jump into node. I just wanted to get opinions from people who would have a lot more knowledge on the subject than me haha.
03:31 <@mbalho> node isnt the easiest thing to write big web frameworks in
03:40 < substack> mbalho: that's my favorite feature
03:41 < aMoniker> is there a reason to use node-cron over regular cron?
03:42 < RLa> isn't node-cron just setInterval with cron expressions?
03:43 <@Nexxy> aMoniker, webscale.
03:43 < aMoniker> RLa: that's what I thought... doesn't seem like a good idea.
03:43 < aMoniker> Nexxy: what?
03:43 <@Nexxy> node-cron makes your cron jobs web scale.
03:43 < aMoniker> Nexxy: how so?
03:44 < ningu> substack: so what would your solution be to a big complicated site?
03:53 <@mbalho> spoiler: github.com/substack?tab=repositories
03:57 < gkatsev> a big complicated site would be turned into a lot of small simple sites, no?
04:15 < ningu> gkatsev: perhaps, but some level of integration is often needed
04:16 < ningu> I was just thinking... the problem with atom feeds is they can be webinized.
04:42 < mikey_> sooo...
04:42 < mikey_> what's going on?
04:42 < gkatsev> life
04:42 < mikey_> true 
04:43 < XxBlakeFailxX> process and discovery
04:43 < mikey_> anyone work with GPIO pins on RPi with node?
04:43 < nightfly__> no, but that sounds awesome
04:45 < Cat4D> is there a full json schema editor and database populator script/demo page ?
04:45 < Cat4D> I want it to spit up schema structure, css3 template or populator, and consolidate the manually inputted data set
04:45 <@Nexxy> mikey_, jerrysievert does a fair bit of that
04:45 < mikey_> really? that's cool. I want to contribute to a library, Jerry do you know of any?
04:46 <@Nexxy> I don't think he's here right now
04:46 <@Nexxy> https://github.com/jerrysievert
04:46 <@Nexxy> https://twitter.com/jerrysievert
04:46 < mikey_> oh gotcha, i looked up his github
04:47 < mikey_> looking though it now
04:47 < mikey_> Nexxy thanks for the tip
04:47 <@Nexxy> :)
04:47 <@Nexxy> you may be interested in nodepdx this year
04:47 <@Nexxy> there will be super awesome hardware kits you can buy as part of your ticket
04:47 < Anup> Good morning. Here's the snippet I have written. ( http://pastebin.com/LdPbtZyq ). Please see the comments, I am not able to understand the reason?
04:48 <@Nexxy> part of that will be rpi + accessories & instruction on how to get started @ the conf
04:48 < nightfly__> Too many conferences in town...
04:48 <@Nexxy> http://nodepdx.org/
04:48 < mikey_> I see your doing something on realtime hardware
04:48 < mikey_> that's cool
04:48 <@Nexxy> I've been typecasted lol
04:48 < mikey_> haha
04:49 <@Nexxy> s5fs is also going to do some cool stuff with realtime hardware
04:49 <@Nexxy> nightfly__, are you in pdx?
04:50 < mikey_> haha i like adam's talk "put a sensor on it"
04:50 <@Nexxy> yeah :D
04:50 <@Nexxy> adam = s5fs 
04:50 < mikey_> oh ok
04:50 < nightfly__> yup
04:50 < mikey_> cool
04:50 < mikey_> no im in sf
04:50 <@Nexxy> oh I think I have you confused with mikey_p then
04:50 < mikey_> this looks awesome I might go
04:50 <@Nexxy> but you could still come up :D
04:51 <@Nexxy> it's not too far, liek 2 hour plane ride
04:51 < mikey_> yeah not bad
04:51 <@Nexxy> nightfly__, super cool. PSU?
04:52 < nightfly__> Yeah, there right now actually
04:52 <@Nexxy> also I don't want to spoil the surprise or anything
04:52 <@Nexxy> but there may or may not be at least one dance party involved
04:52 <@Nexxy> nightfly__, oh awesome. I lived in the middle of PSU for about 3 years
04:52 < mikey_> haha
04:52 < mikey_> dance parties rule
04:52 <@Nexxy> great part of town
04:53 <@Nexxy> middle/slightly to the side
04:56 < mikey_> hey Nexxy can you explain this door sensor on ninja blocks? I might have use for that on a project next week. To briefly explain, we just need to count every time a door is opened...
04:57 < mikey_> do I just tap and enpoint somewhere online for this door sensor or do I log the data myself?
04:59 < Anup> help anybody?
05:02 <@Nexxy> mikey_, sure!
05:02 <@Nexxy> mikey_, you can do either way
05:02 <@Nexxy> mikey_, the new client has a local REST interface that you can poll
05:02 <@Nexxy> mikey_, and/or you can put your own callbacks into a rule on the dashboard
05:05 < mikey_> ok cool
05:08 < mikey_> this ninja block thing is interesting
05:10 <@Nexxy> mikey_, I tend to agree!
05:10 < mikey_> its kinda what I was thinking would be perfect for RPi, namely, javascript full stack so anyone can start using it
05:10 <@Nexxy> yeah! we will have an RPi image coming out by next week I believe
05:11 < mikey_> yeah i saw it said something on the site about downloading it
05:11 < mikey_> so is that in place of raspbian?
05:11 <@Nexxy> but you can also just clone the repo on raspbian and get hacking
05:11 <@Nexxy> yeah, preburned image
05:11 <@Nexxy> just dd 
05:12 < mikey_> holy shit your led example is using heroku too?!
05:13 < mikey_> you guys are doing exactly what I was planning on doing!
05:13 < mikey_> that's awesome
05:13 < standoo1> heroku?
05:14 < mikey_> http://www.heroku.com/
05:14 < mikey_> so Nexxy is the ninja app hosting itself on heroku then?
05:15 <@Nexxy> yep!
05:16 < mikey_> I see, so you host the app on heroku, burn the image to the pi and plug in whatever sensors you get...\
05:16 < mikey_> smart
05:17 < mikey_> this is seriously all I'd need to make this thing work. 
05:17 < mikey_> wow
05:17 <@Nexxy> you can actually do it w/o hosting your own app
05:17 <@Nexxy> we provide a "dojo" app in teh clouds
05:17 <@Nexxy> you just sign up for a free account and get your own dashboard
05:18 < mikey_> so if your app is being hosted on a heroku dyno that we set up, it's possible for us to take that data and point it someplace else within whatever app we set up right?
05:18 <@Nexxy> yeah! either through web hooks if it's a simple requirement
05:18 <@Nexxy> or through the development of your own "ninja driver"
05:18 <@Nexxy> which is a pretty straightfoward node stream instance
05:18 <@Nexxy> with a few extra hacks on it
05:18 < mikey_> interesting
05:19 <@Nexxy> e.g. I'm about to release an RFID reader driver
05:19 < mikey_> so if it's on heroku no websockets though huh?
05:19 <@Nexxy> and you can pipe the read values anywhere
05:19 <@Nexxy> you can use pusher
05:19 <@Nexxy> which you can have direct access to as well
05:19 <@Nexxy> we use pusher on the dojo
05:19 < mikey_> is it pretty real time? Could I say, set up socket.io on it and send the data to clients with a web app?
05:19 <@Nexxy> yeah for sure
05:20 <@Nexxy> a few of the more spammy devices (like 433mhz stuff) are debounced and queued
05:20 <@Nexxy> but quite realtimeish
05:20 < mikey_> wow this is cool
05:20 < mikey_> im stoked
05:20 <@Nexxy> ! me too!
05:20 <@Nexxy> feel free to join #ninjablocks as well
05:20 < mikey_> any chance you guys are working on a motor driver?
05:20 <@Nexxy> yep, it's already in development
05:20 <@Nexxy> stepper & servo controllers
05:21 < mikey_> damn I should just move to portland
05:21 <@Nexxy> haha
05:21 <@Nexxy> I'm the only one on the ninja blocks team in Portland so far
05:21 <@Nexxy> everyone else is in Sydney
05:21 < mikey_> oh haha ok
05:21 < mikey_> hence the accents!
05:21 <@Nexxy> ;P
05:22 <@Nexxy> but yeah, it's all quite hackable and open source
05:23 < mikey_> nice it seems that way. very cool, im emailing my buddies right now
05:24 <@Nexxy> did you see Justy's RF shirt?
05:24 <@Nexxy> it's pretty legit
05:24 <@Nexxy> http://ninjablocks.com/blogs/how-to/7559040-make-a-wearable-ninas-eyes-t-shirt
05:30 < TehShrike> What is Brio and how do I get there http://vimeo.com/62906245
05:31 < mikey_> haha thats great
05:32 < chinese_0_1> i want to find a chinese
05:33 < chinese_0_1> hello
05:33 < mikey_> dunno about brio but i like the video\
05:33 <@Nexxy> TehShrike, hahaha
05:34 <@Nexxy> brioconf.com, I totally wish I was going
05:35 < mikey_> haha, i like how at the end of the video everyone realizes that a 300px wide button is huge
05:36 <@Nexxy> but huge buttons drive conversion!
05:36 < TehShrike> A former coworker of mine made the most clickable button for one of our apps
05:37 < TehShrike> It was a "bid" button
05:37 < TehShrike> It was huge and clickable, and had a mouse cursor in black on it, just below the word "bid"
05:37 < TehShrike> It was the most clickable thing I've ever seen
05:37 < zeromodulus> All I can think about when I lay down to sleep is developing stuff. :P
05:37 < mikey_> wow, im finding a bunch of cool vids about node
05:37 < mikey_> http://vimeo.com/59275730
05:38 < zeromodulus> And how much I love tumblr.
05:38 < mikey_> haha i love huge buttons
05:38 < mikey_> and lots of space
05:46 < mikey_> hey @Nexxy who is Mikeal with all these videos? is he like a node evangelist or something?
05:52 < substack> mikey_: mikeal has done a lot of work on core, runs nodeconf, and wrote request
05:52 < substack> mikeal invented .pipe() pretty much
05:52 < TehShrike> He's a miniboss, at least
05:52 < TehShrike> maybe even a boss, depending on how you're speced
05:53 < substack> well there was sys.pump() before
05:53 < TehShrike> ok maybe he's a boss
05:55 < addisonj> substack: being modest about writing half of the user-land modules? ;)
05:56 < substack> addisonj: completely false, there are so many modules on npm you have no idea
05:56 < addisonj> okay, so half might be a bit overstatement. 1/4 maybe. Seriously though, incredible the growth rate of NPM
05:57 < substack> addisonj: https://gist.github.com/substack/5275561
05:57 < mansgrf> http://xteensx.info/hot-blonde-fucked-by-big-black-cock-in-tight-ass-hot-anal-scene
05:58 < substack> -_-
05:58 < purr> substack: ಠ_ಠ is an IRC client/IRC client framework.
05:58 < addisonj> heh, yeah I know, just joking around. Anyone know have numbers on growth rate of NPM?
05:59 < addisonj> would be interesting to compare that to ruby gems and go (though it has no central repo, which makes that difficult)
05:59 < addisonj> substack: we going to hear from you at nodeconf?
06:03 < substack> MAYBE
06:03 < substack> who can say
06:03 <@Nexxy> EXCITEMENT
06:04 < addisonj> I predict robots, taco making robots
06:04 < substack> actually it shows me as a "camp counselor" on the website
06:04 < addisonj> with fresh salsa making logic
06:38 < mikey_> wow, just watched: http://blip.tv/jsconfeu/ryan-dahl-node-js-2918890
06:38 < mikey_> mind = blown
06:39 < mikey_> im going to get more involved in this, I had no idea it was based on such sound theory of IO
07:59 < ningu> json is awesome. that is all.
08:07 < mikrowelt> hey guys
09:43 < alalakin> Hey guys - random question - if I want to implement a delay (for sending an email a half hr after someone registered fro my site) - whats the smart way of doing this? 
09:43 < alalakin> There will potentially be about a thousand concurrent timers going on?
09:43 < alalakin> Is there a way to make a pub / sub method where an event can be fired at a specific delay?
09:44 < nathan7> alalakin: Attach a timestamp?
09:45 <@Nexxy> alalakin, you could just stuff things into a queue with the timestamp of desired delivery
09:45 < nathan7> 'moin, Nexxy 
09:45 <@Nexxy> and an interval that checks the queue every few minutes
09:45 <@Nexxy> o hey nathan7 :)
09:45 < alalakin> @nexxy let me read about that, thanks!
09:45 <@Nexxy> nathan7, have I mentioned that your nickname always looks like it's saluting?
09:46 <@Nexxy> ... to me?
09:46 <@Nexxy> everything you say looks more official because of it
09:46 <@Nexxy> o7
09:47 < alalakin> about the que and timestamp / won't i have to keep forcing the loop to check if the time is up?
09:47 < nathan7> Nexxy: Hehe
09:47 < nathan7> Everyone just tends to make jokes about my age
09:47 <@Nexxy> alalakin, just use setInterval on a function that compares current timestamp to timestamp on top of stack
09:48 < nathan7> (I picked this nick when I was like 10 - here we are, about 7 years later, entertainingly enough)
09:48 <@Nexxy> so what you're saying is that your nick is missing a 1?
09:48 < alalakin> ok thanks Nexxy
09:48 < nathan7> Maybe q=
09:48 <@Nexxy> alalakin, :)
09:49 < nathan7> It's disappointingly non-unique, I'm still @FrozenFire on Twitter because some asshat with one tweet took @nathan7
09:50 <@Nexxy> oh that's you!
09:51 < nathan7> Yeah
09:53 < wizonesolutions> is there a module or built-in (or does Underscore do it) that basically will check if a var is a string or an array, do nothing if it's an array, and do varName = [varName] if it's a string?
09:54 < wizonesolutions> dealing with an API that converts XML to JSON, with all the fun maybe-array-maybe-not JSON it returns
09:54 < wizonesolutions> could write my own in a few lines obviously but doesn't hurt to ask (I hope)
09:54 <@Nexxy> you just pressed more keys asking
09:55 <@Nexxy> than you would have just doing it yourself
09:55 < wizonesolutions> lol
09:55 < wizonesolutions> this is true
09:55 <@Nexxy> :P
09:55 < wizonesolutions> actually I should probably massage the response data and just do this transparently in the end. but that's like v4
09:55 < wizonesolutions> so, I'll write my own
09:55 < nathan7> Array does this half of the time q=
09:55 <@Nexxy> mahString = typeof mahString == "string" ? [ mahString ] : mahString;
09:55 < nathan7> x = Array.isArray(x) ? x : [x]
09:56 <@Nexxy> you win
09:56 < wizonesolutions> yeah I am using _.isArray in mine
09:56 <@Nexxy> but what if x is an object?!
09:56 < wizonesolutions> which calls native if it exists
09:56 < wizonesolutions> if it's an object it's not an array
09:56 <@Nexxy> or is it?! ;P
09:56 <@Nexxy> >> typeof []
09:56 < purr> Nexxy: (string) 'object'
09:56 < wizonesolutions> oh, that is OK though actually
09:56 <@Nexxy> O SNAP
09:56 < wizonesolutions> sorry, the string thing was dumb on my part
09:57 < wizonesolutions> actually it pretty much *is* objects this is for. cuz it'll return a straight obj OR an array of them if there's more than one
09:57 < wizonesolutions> I get a bad XML taste in my mouth
09:57 < wizonesolutions> still recovering from SOAP trauma
09:57 < wizonesolutions> this one is REST though luckily
09:57 < wizonesolutions> thanks folks
09:58 <@Nexxy> soap ;<
09:58 < wizonesolutions> Nexxy: :( :( :( I feel so dirty after using SOAP.
09:59 < wizonesolutions> maybe it's because one "consumes" it
09:59 < wizonesolutions> that would explain the bad taste it leaves in your mouth
09:59  * wizonesolutions writes that one down
09:59 <@Nexxy> lol
09:59  * nathan7 steals it
09:59 <@Nexxy> yeah it's pretty bad
10:00 <@Nexxy> I paste this every time SOAP comes up in the channel;
10:00 < wizonesolutions> nathan7: permission graned
10:00 < wizonesolutions> granted, even
10:00 <@Nexxy> https://gist.github.com/nexxy/1927990
10:00 <@Nexxy> my super fancy soap parser
10:00 <@Nexxy> well, xml
10:00 < nathan7> wizonesolutions: I already Grace Hopper'd it
10:00 < nathan7> "It is better to ask forgiveness than to ask permission" -- Grace Hopper
10:00 <@Nexxy> I used it for making soap requests against a payment gateway
10:01 < nathan7> ahaha
10:02 <@Nexxy> https://twitter.com/FrozenFire/status/317938226952302593 stolen
10:02  * nathan7 nods
10:03 < wizonesolutions> you know what I do in PHP to deal with XML imports (not SOAP)? encode as JSON, then decode. Works great, gives me an array. Haha. I think it's actually a pretty common approach
10:03 < wizonesolutions> I mean most of the time I just want to use XML for the tag structure, not the schema. So.
10:03 < nathan7> XML schemas should have all the information you need to know if something can have multiple elements
10:03 < wizonesolutions> well *I* tweeted it too https://twitter.com/wizonesolutions/status/317938262767464448
10:04 < wizonesolutions> nathan7: yeah...if the XML export format isn't yours, and you bothered to create a schema.
10:04 < nathan7> I wonder if anyone has done a real XML parser with schemas and shit
10:04 <@Nexxy> wow
10:05 <@Nexxy> you *like* drupal maintenance?!
10:09 < wizonesolutions> Nexxy: I do mostly-Drupal for a living :) There's a lot of interesting problems to solve there too. Just different ones. And I don't bore *too* easily (especially when I'm getting paid), so it works out.
10:09 <@Nexxy> I just... 
10:10 <@Nexxy> all that PHP 
10:10 < wizonesolutions> in other news, named the arrayify function moo in honor of Remember the Milk
11:07 < booyaa> soap's pita
11:07 < booyaa> <3 rest
11:07 < booyaa> but i do miss the whole services advertising
11:13 < nathan7> booyaa: there's stuff for it
11:13 < nathan7> booyaa: there's a REST/JSON API description format
11:13 < nathan7> really I want JSON schema to take off
11:13 < nathan7> but there isn't even fucking anything to properly validate it
11:13 < booyaa> :(
11:49 < wizonesolutions> <3 util.inspect
12:09 < Ardivaba> Hello.
12:10 < Ardivaba> Guys, do you think Poker Game lying on top of RESTful api (real money) would work?
12:10 < Jamy> Hi Ardivaba
12:11 < Ardivaba> Eg, everyone could build their own clients.
12:11 < Jamy> Could work
12:11 < Jamy> If you do it right ofc ;)
12:11 < Ardivaba> Then im going to make it.
12:11 < Ardivaba> Bitcoin should be perfect currency for this.
12:12 < Ardivaba> If i stay anonymous then..."bye bye casino taxes" aswell :).
12:12 < Ardivaba> Now what i am really curious about.
12:12 < Ardivaba> Would it be possible to create RESTful api, bitcoin currency poker without centralized server?
12:14 < Ardivaba> Something similar to how Torrents / Tor works.
12:14 < Jamy> Hmm
12:14 < Jamy> If you'd do bitcoins as currency ingame as well, sure
12:15 < Jamy> then you'd write someething that makes transactions over the bitcoin network after each round
12:15 < Ardivaba> Hmm, so if all the "poker players" agree to pay out that money to winner, it gets paid.
12:16 < Ardivaba> And network should broadcast the game to some random guys aswell, so it wouldn't be possible for 4 players to join a game and ask for fake payout.
12:16 < Jamy> Well, what I would do is this:
12:16 < Jamy> you create an app/client that has it's own wallet
12:17 < Jamy> bitcoin wallet
12:17 < Jamy> to get credits in the game you'd send them from your normal account to the wallet
12:17 < Ardivaba> So every client would have their private walltes, right.
12:17 < Ardivaba> Wallets*
12:17 < Jamy> but they would have no control over that wallet
12:17 < Jamy> the game would controll it
12:18 < Ardivaba> The whole network.
12:18 < Ardivaba> But...
12:18 < Ardivaba> The keys have to be stored somewhere.
12:18 < Ardivaba> For the transactions to take place.
12:18 < Jamy> that would be in the gamefiles I guess
12:18 < Ardivaba> So there should have to be atleast one server?
12:18 < Jamy> Nope
12:18 < Ardivaba> Which would defeat the purpose, no?
12:18 < Jamy> Well the gamefiles are stored locally
12:19 < Jamy> so the player could alter them ofc
12:19 < Jamy> but it is their wallet so yea
12:19 < Ardivaba> Oh.
12:19 < Ardivaba> But what if client alters the wallet in a way that network couldn't ask for a payout?
12:19 < Jamy> I mean like, when you're ingame and you lose, you should have no control over the money you lost
12:20 < Ardivaba> Hmm, what if. When game starts, all clients send their money to random client that isn't part of the game.
12:20 < Jamy> a central server could help ofc
12:20 < Ardivaba> And then all the clients in game ask for that random guy to make transaction to the winner.
12:20 < Ardivaba> But central server would defeat the purpose.
12:20 < Jamy> yea
12:20 < Jamy> but if that random client goes offline all the money is gone
12:21 < Ardivaba> Hmm.
12:21 < Ardivaba> True.
12:21 < Jamy> I'd say, if one of the ingame clients refuses to pay he gets kicked out automatically by all the other clients..
12:21 < Ardivaba> Ah it is quite brain tickler to make this work properly.
12:21 < Ardivaba> Yes, but what if 5 hacked clients join a game of 7 players.
12:21 < Ardivaba> And all 5 clients ask for fake payout.
12:22 < Ardivaba> This system would have to be 0% exploitable.
12:23 < Jamy> the game can only ask for payouts if that client won ofc
12:25 < Sven_vB> if you cannot enforce obeying the rules with force, you'll have to rely on reputation to minimize the impact of misbehaviour
12:26 < Sven_vB> or use an arbitrator (yes, a single server)
12:28 < Sven_vB> or use a money system that allows conditional wallets. at start, exchange your all-purpose money for one that is only valuable if you can prove the game ended without you losing it
12:28 < Sven_vB> which includes winning, timeout, other clients cheating, and maybe more scenarios
12:28 < Ardivaba> Hmm.
12:28 < Ardivaba> Anyone want to start OpenSource project?
12:28 < Sven_vB> nah, have too many already ;)
12:29 < Ardivaba> This would be untaxable poker game...that would definetly get some mad press attention.
12:30 < Ardivaba> HOLY SHIT
12:30 < Jamy> ?
12:30 < Ardivaba> 1 bitcoin is worth 90 dollars
12:30 < Ardivaba> Week ago it was 60
12:30 < Jamy> Yea it went crazy the last few months
12:30 < Ardivaba> I was planning to buy in bulk if it was 4 dollars...but then dropped that idea because of unstability.
12:31 < Jamy> Too bad
12:31 < Ardivaba> Now i regret it big time.
12:31 < Jamy> I lost my 1 bitcoin wallet :/
12:31 < Ardivaba> I remember when i sold 200 bitcoins for 10 dollars.
12:32 < Sven_vB> so how much electricity does it cost to procuce 1 btc atm?
12:32 < Jamy> It's not about that
12:33 < Sly> lulz.
12:33 < Jamy> Some devs found a way to mine them a lot faster
12:33 < Sly> Jamy: maybe if you don't pay the bills.
12:33 < Jamy> Well yea I know it's costly, but less that before I guess
12:34 < Sven_vB> is WebGL ready to use our website visitors' graphics cards for mining?
12:35 < Ardivaba> The electricy cost per bitcoin stays quite stable. Even when price changes.
12:35 < Ardivaba> I think so yes.
12:35 < Ardivaba> Google should mine bitcoins, instant profit.
12:35 < Ardivaba> Even if it would use 5% of the gpu to do it.
12:36 < Sven_vB> i have 12 visitor online even now where it's not a peak in this time zone
12:36 < Ardivaba> Hmm.
12:36 < Ardivaba> You would mine cents per day.
12:36 < Sven_vB> in the evening i get about 50 :)
12:36 < Ardivaba> Well if you take advantage of GPU and CPU you might actually make some minor profit.
12:36 < Sven_vB> also i could build a crappy browser game if it proves to work
12:36 < Jamy> Hehe
12:37 < Ardivaba> Notable profit* But i am in no way expert in Bitcoins so...
12:37 < mucker> any derbyjs users here ?
12:37 < Ardivaba> Hah, i just tought of million dollar idea. Going to code it now, thanks Sven.
12:38 < Sven_vB> oh, as i remember, i've already a browser game source and commercial license to it sitting around, idel for years because no idea for the profit part
12:38 < Sven_vB> maybe we could work together ;)
12:51 < Dread> hi
12:52 < sivoais> Is there an RSS feed for npm's latest updates?
12:56 < sivoais> Ah, I found it! <http://registry.npmjs.org/-/rss?descending=true&limit=50> via <https://github.com/isaacs/npmjs.org/issues/17>
13:41 < pyusr> wow, edge.js is MIND BLOWING :) http://tjanczuk.github.com/edge/
13:42 < pyusr> any1 tried it yet ?
13:42 < Jamiltz> "24k+ npm modules" can't believe it!
13:42 < Jamiltz> nope
13:43 < pyusr> the syntax looks pretty cool, check out http://tjanczuk.github.com/edge/#/18
13:43 < pyusr> you can define an express handler as a .NET DLL 
13:43 < protalis> trying to read multi-GB gzipped UTF8 files.. createReadStream(path).pipe(gunzip).. where do I set the UTF8 decoding so that multi-byte strings aren't munged?
13:47 < protalis> ..er, that should read, 'multi-byte characters aren't munged (in the onData(chunk..)'
14:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:12 < jemafeller> hello
14:14 < jemafeller> I have a process that downloads images and text files, runs a Java algorithm on the text (given to me by researchers in the lab as a Jar) and additional Imagemagick on the images. Eventually it combines all results.
14:14 < jemafeller> since most of this is async, I know Node.js should be a better alternative to running everything in Java (as happens right now)
14:14 < jemafeller> I can do all of the porting for the current code in node.js apart for the researchers algorithms.
14:15 < jemafeller> anyone have any idea how to integrate a node.js service with running Java code?
14:15 < jemafeller> so far I was thinking to wrap the java code in as a service and perform an RPC call from Node on it..
15:12 < dejanr> anyone could suggest, a decent stable queue package for node
15:13 < dejanr> i tried kue, and i am not satisfied
15:24 < Exx2xxO> hey guys ! Got a big problem: I want to create/edit/read XML-files. Any ideas? Modules, Links something? I didn't found anything helpful via google
15:41 < Amfy> NodeJS better pure MySQL or SequelizeJS for communication with MySQL on a Datamapper (ruby) created Model?
15:41 < AAA_awright> Exx2xxO: There's plenty of XML related stuff
15:43 < Exx2xxO> AAA_awright yeah...thats not the answer I expacted...I already said: I didn't found anything helpful. Yeah I found xmlbuilder and xml2js but thats not what I am looking for... thats why I asked here for help...
15:43 < AAA_awright> Exx2xxO: We'll you'll have to describe why what you found doesn't solve your problem
15:44 < AAA_awright> We still have no clue what problem you're trying to solve :-\
15:46 < Exx2xxO> I want to create/edit/read xmlfiles. xmlbuilder is fine to create files but nothing more. xml2js is fine to read xmlfiles, but nothing more. And to edit xmlfiles I didn't found something. And I'm looking for something with which I can do all 3 things :/
15:48 < TehShrike> Why?  Why not use three modules?
15:49 < TehShrike> Or two, rather
15:49 < mscdex> Exx2xxO: you can do all 3 with libxmljs
15:49 < xk_id> Would anybody happen to have a clue why I am getting this error when trying to 'npm install socket.io'? https://gist.github.com/arisolt/5277165 (I have already tried to 'npm install -g node-gyp')
15:49 < TehShrike> Read in XML into an object, change it in JavaScript, use another module to write it back out
15:50 < mscdex> xk_id: gist the entire otput
15:50 < mscdex> *output
15:50 < Exx2xxO> TehShrike because if there is a way to do it with one module why should I use 3 or 2 ? mscdex thanks I will look for it
15:50 < xk_id> ok, one sec. 
15:50 < xk_id> mscdex: https://gist.github.com/arisolt/5277172
15:51 < TehShrike> Exx2xxO: because parsing XML into an object is a different problem from turning an object into XML, and so they should be separate modules
15:51 < mscdex> xk_id: i meant the part that comes after not before :-)
15:51 < xk_id> mscdex: there is none. it hangs there until I hit ctrl + c :/
15:51 < mscdex> xk_id: what platform and node version?
15:52 < xk_id> mscdex: platform is ubuntu, node version is 0.10.2
15:52 < mscdex> xk_id: why are you installing it globally btw?
15:54 < mscdex> xk_id: you might also be able to do something like `sudo npm install -g --verbose socket.io` to get more output
15:56 < xk_id> mscdex: at first I didn't try to install it globally, but then I thought it might fix the issue. 
15:57 < mscdex> xk_id: generally you shouldn't install globally unless the module you're installing has a command-line utility included with it
15:57 < mscdex> like coffeescript for example
15:57 < xk_id> ah, or forever. I see. 
16:02 < xk_id> mscdex: strangely enough, now it passes by the message and finishes the installation. However, my app still doesn't work. 
16:18 < mscdex> xk_id: what do you mean doesn't work?
16:19 < xk_id> mscdex: the socket.io.js file is served to the client, but no "client authorized" message is thereafter produced
16:21 < TechieShane> hi, I'm fairly new to Node and I was wondering what/how you would have session management
16:22 < mucker> TechieShane: are you using express ?
16:22 < TechieShane> yes
16:36 < AAA_awright> TechieShane: What are you looking to do
16:36 < TechieShane> I'm using Express basic auth with a html frontend
16:36 < TechieShane> I just want to keep the auth working across all pages
16:36 < TechieShane> the user doesn't see the basic auth popup
16:37 < TechieShane> they just see a custom form
16:38 < AAA_awright> What kind of authentication exactly?
16:39 < xk_id> mscdex: I fixed it. it's a very strange bug, on my OS X 'var socket = io.connect("http://localhost:3001");' works fine, and the connection is established between client and server. But on Ubuntu, I had to replace the line with "var socket = io.connect();" before it worked. 
16:39 < ozette> did my previous messages get through?
16:40 < TechieShane> AAA_awright: Basic Authentication, my client then goes off to an SQL database to verify that user is valid and returns true or false. All the endpoints then check that auth variable.
16:40 < xk_id> mscdex: which should be the preferred way to do it, but I had to do some googling before I found someone saying that .connect() can figure everything out. 
16:40 < xk_id> ozette: I don't believe so. 
16:40 < ozette> xk_id, i see .. thanks
16:40 < AAA_awright> TechieShane: But you're using an HTML Form? So which is it?
16:40 < TechieShane> The HTML form submits it to the basic auth part using JavaScript
16:40 < ozette> i'm sending my *.css file with a response.sendfile("path/to/*.css") to the client using express, its MIME type says text/css and yet it's interpreted as a script, ho
16:40 < ozette> how?*
16:41 < AAA_awright> TechieShane: HTTP Basic authentication is something else completely
16:41 < ozette> also tried setting response type explicitly with response.type("css");
16:41 < TechieShane> AAA_awright: it's using http basic auth, except I built a HTML form to handle the login so the user doesn't see the ugly dialog asking for username and password
16:41 < AAA_awright> And if you're using client-side javascript for any of this you're doing something wrong...
16:41 < ozette> a simple body { background-color: blue; } results in a "unexpected token {" because it "shows" up as a script
16:42 < AAA_awright> TechieShane: Basic authentication sends the username and password with every request, unless you're using an API over SSL/TLS that's probably not what you want
16:42 < TechieShane> ok
16:42 < AAA_awright> You're looking to send the client a session token that authenticates them
16:43 < TechieShane> yeah
16:43 < TechieShane> ok
16:43 < AAA_awright> And remember that session tokens in cookies must be "read only"
16:43 < AAA_awright> You can't use a cookie to permit writing, ever
16:43 < AAA_awright> I'm not sure what exactly exists for Express but certainly something does
16:44 < TechieShane> how would I allow writing?
16:44 < AAA_awright> When a user requests a form, their read permissions also requests a read-write token which is embedded in the form
16:46 < AAA_awright> TechieShane: Basically, the Web security model allows anyone to instruct a user to make a request that's authenticated as themselves. You have to make sure that when these requests are made, they're not requests that say "Delete all content" or something like that
16:46 < AAA_awright> So, no read-write permissions in cookie
16:47 < AAA_awright> Hence why I say if you're designing this yourself, you're doing it wrong, there should be an existing library
17:25 < sorensen> i feel somewhat evil doing this: https://gist.github.com/sorensen/5271702
17:28 < penzur> test
17:31 < btipling> I have a question about built-in packages like fs. If I want to overwrite these for testing, is there some preferred mechanism by which should be done? I feel like I might have to pass in things like fs to functions so I can pass in stubs while testing, but that seems weird. I don't want to actually read any files or directories during testing. 
17:31 < btipling> Is there some easy way to stub fs?
17:34 < zivester> whats the correct way to load to files into nconf, merging the two? nconf.file({ file : 'file1.json' }).file({ file : 'file2.json' })  doesn't seem to work
17:35  * zivester s/to/two/
17:37 < rihnapstor> hello
17:48 < btipling> :/
17:53 < mscdex> sorensen: what's the point?
18:00 < btipling> asked this on stack overflow: http://stackoverflow.com/questions/15721619/how-do-i-stub-node-js-built-in-fs-during-testing
18:00 < btipling> the question I asked in here ealier
18:02 < n00bster> …9Üwü
18:03 < bnoordhuis> btipling: monkey-patch the functions?
18:03 < btipling> bnoordhuis: monkey-patch how?
18:03 < bnoordhuis> btipling: require('fs').readFile = myReadFileStub
18:03 < n00bster> …9Üwü
18:04 < bnoordhuis> n00bster: knock that off
18:04 < btipling> bnoordhuis: the tests are not in the same file as the package itself
18:05 < btipling> if I modify fs will that modification make it to the object that the code sees for fs?
18:05 < n00bster> …9Üwü
18:05 < btipling> I guess that's testable
18:07 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
18:07 < sorensen> mscdex: replacing db drivers so my unit tests dont try to connect
18:08 <@bnoordhuis> btipling: yes, there is only one fs object unless you clear require.cache
18:08 < btipling> bnoordhuis: cool I'll try that
18:08 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
18:08 < btipling> thank you
18:08 < bnoordhuis> np
18:11 < xk_id> I have a small express app that runs on local port '3001'. So I am using nginx to reverse proxy from external '1111' to internal '3001'. However, my express app also uses 'socket.io'. My problem is that while the server detects the client has connected (i.e, the client sends events successfully to the server), the client doesn't seem to receive events from the server (there is something inside the page which is supposed to c
18:11 < xk_id> hange in response to events emitted by the server, but doesn't). 
18:25 <@Nexxy> xk_id, did you turn websocket transport off on socket.io?
18:25 < xk_id> Nexxy: I don't think so, I don't know what it means. 
18:25 <@Nexxy> and/or use a version of nginx w/ websocket support?
18:26 <@Nexxy> you might start there
18:26 < xk_id> so is it advisable to turn off websocket transport?
18:26 <@Nexxy> you could try it to see if that's the issue
18:27 <@Nexxy> transports defaults to websocket, htmlfile, xhr-polling, jsonp-polling
18:28 < xk_id> Nexxy: thanks. 
18:33 < xk_id> Nexxy: it didn't work. 
18:34 < xk_id> I did "io.set('transports', ["...
18:46 < ericelliott> >> parseInt('3', 2);
18:46 < purr> ericelliott: (number) NaN
18:46 < ericelliott> wat?
18:47 < ericelliott> parseInt: "I can convert a number to a different base for you. But I don't do binary. Eat it, sucka."
18:48 < ericelliott> >> (3).toString(2);
18:48 < purr> ericelliott: (string) '11'
18:48 < Durim> hi there, I start developing a multiplayer card game like poker but that deals with real money user have to charge accounts with real money and i just wanted to ask how secure its to use node.js for this project ?
18:48 < ericelliott> toString to the rescue ?
18:48 < ningu> >> parseInt('11', 2)
18:48 < purr> ningu: (number) 3
18:49 < LennyLinux> oohhh
18:49 < ericelliott> ningu: wtf? =)
18:49 < ningu> I don't know who's trying to do what with binary but between parseInt and toString we should be good
18:49 < ericelliott> ningu: please explain that one to me.
18:50 < ningu> ericelliott: what's to explain? I just got here, didn't see what failed previously.
18:50 < ericelliott> >> parseInt('11', 2)
18:50 < purr> ericelliott: (number) 3
18:50 < ericelliott> that is a major wtf for me.
18:50 < LennyLinux> elemongw: what's 11 base 2 in base 10 ? xD
18:50 < ningu> >> parseInt(new String('11'), 2)
18:50 < purr> ningu: (number) 3
18:50 < ningu> ericelliott: why?
18:50 < LennyLinux> ericelliott: ^
18:51 < LennyLinux> elemongw: sorry, wrong nick
18:51 < ningu> >> parseInt('11', 2).toString(10)
18:51 < purr> ningu: (string) '3'
18:51 < ningu> >> parseInt('1111', 2).toString(16)
18:51 < purr> ningu: (string) 'f'
18:51 < LennyLinux> awesome
18:51 < ningu> and there was much rejoicing
18:52 < ericelliott> oh hell
18:52 < ericelliott> I don't know about rejoicing.
18:52 < ningu> so here's a somewhat tangentially related question
18:52 < ningu> say I have a web service that returns JSON objects and one of the things it needs to return is a unicode codepoint range.
18:53 < ningu> given the semantics of JSON and codepoints, how should I return the data? I'm currently doing it as a pair of JSON numbers.
18:53 < ningu> but they are encoded in decimal since that's what JSON does, but codepoints are usually written in hex.
18:53 < ningu> the alternative would be strings like '0x0A'
18:53 < ningu> or rather "0x0A" :)
18:54 < ningu> I figure it's better to explicitly make it a number so clients don't have to convert it to one and then they can format it or compare it however they want.
18:59 < ningu> well that quieted everyone down.
19:07 < ericelliott> ningu: what's the context?
19:08 < ningu> ericelliott: what do you mean exactly?
19:08 < Guest32221> what's better node.js or django?
19:09 < bnoordhuis> Guest32221: php
19:09 < s5fs> Guest32221: neither, they both suck at making omlets
19:09 < ningu> it's a database which among other things has information about language orthographies, and you can query for that and it will return ranges of valid unicode codepoints for the requested language
19:09 < ningu> query via the web api that is
19:09 < bnoordhuis> hah, and gone
19:10 < s5fs> bnoordhuis: dang, i was really hoping for some engaging conversation
19:10 < ningu> django looks pretty sweet actually
19:10 < trabus> off the chain
19:10 < ningu> maybe not for the stuff node is well suited for
19:10 < bnoordhuis> s5fs: me too. i always wonder if people like that are bad at asking good questions or simply trolls
19:10 < s5fs> ningu: 'npm install django' failed, therefore it's no good.
19:11 < ningu> s5fs: that's silly; you pick the right tool for the job, and no language or framework is best at everything.
19:11 < howdynihao> ningu: what is the right tool for everything then?
19:11 < howdynihao> i want that
19:11 < s5fs> bnoordhuis: i share your wonder. some people are just not meant for programming, even formulating decent questions is hard.
19:11 < ningu> I mean, if you don't have programmers who know a language or framework I guess you have to decide whether to hire new ones. but I still think it's best to pick the right tool.
19:12 < howdynihao> s5fs: no im in the camp that believes programming is for everyone
19:12 < ningu> howdynihao: well there's that web site someone linked to the other day that told you which templating language to use
19:12 < howdynihao> in the future everyone will or should know programming to some degree, even now you can see it slowly converging in other fields
19:13 < ningu> so we just need a web app with a big control flow that will tell you what tool to use... but that would be a meta-everything tool
19:13 < s5fs> howdynihao: i didn't mean that programming should be exclusive, only that some folks struggle more than others to grok basic questions. even supporting them is hard, and made harder via irc.
19:13 < ningu> I seriously doubt everyone will ever know programming so whether they should or not is somewhat irrelevant
19:14 < howdynihao> s5fs: oh ok, i thought you were going all ... jeff atwood on us :P
19:14 < s5fs> nah, i love everyone. have a flower.
19:15 < howdynihao> ningu: maybe not now, but in the future
19:15 < ningu> I know, that's why I said "ever"
19:15 < s5fs> howdynihao: i think the nature of programming will have to change, or people's perceptions anyways.
19:15 < ningu> use modern technology, yes -- but not know how to program
19:16 < ningu> unless, yes, you redefine what programming is :)
19:16 < ningu> like, is setting your vcr's clock programming?
19:16 < s5fs> humans love convenience
19:16 < howdynihao> no, you misunderstand, as technology grows to more areas, and makes certain fields more simple, you will HAVE to know programming
19:17 < howdynihao> you see in now in data research
19:17 < howdynihao> whether your background is medicine or literally a database engineer or whatever
19:17 < ningu> howdynihao: I think it's much more likely that a percentage of people will never make that leap
19:17 < s5fs> howdynihao: currently programming is a 'producer' task in a world where most people are 'consumers'
19:18 < ningu> if you're saying programming will become more and more necessary in specialized fields, sure -- but that's a far cry from "everyone"
19:18 < s5fs> if more people are going to program, that means we need a world where you can support a large number of producers
19:18 < ningu> well, he doesn't mean for a living necessarily, I think
19:18 < ningu> just as a required part of your job or life
19:19 < s5fs> ningu: what's the difference?
19:19 < howdynihao> ok real programming no, but some subset of some programming language or some basic language yes
19:19 < howdynihao> anyone who uses excel for instance, they know some programming
19:19 < ningu> s5fs: so you'd call the person who makes an accounting spreadsheet but spends most of their time doing other things a "producer"?
19:19 < ningu> I guess
19:19 < howdynihao> there are people who dont know programming but their game lets them write LUA or something, and there you go another example
19:19 < s5fs> ningu: you said "makes", so yes.
19:20 < howdynihao> also check this out: http://vimeo.com/61113159
19:20 < howdynihao> THE WORLD IS CHANGING
19:20 < ningu> s5fs: ok, but I guess my objection was to the term 'support' since it sounds like that person knew how to program or use excel or whatever and sought out a job for it, rather than seeking out some general admin job and being forced to learn excel
19:22 < howdynihao> another example is cars, so maybe not your local mechanic, but obviously people who work for a car manufacterer will need to know some programming to do some diagnostics
19:22 < ningu> I guess there are plenty of jobs that require excel experience but I have no idea how much they really want you to know
19:22 < ningu> well, yes, that's true
19:22 < s5fs> well, I don't really consider someone banging out excel formats to be a "real programmer", but i'm also not the one pushing this particular view of the future :)
19:22 < ningu> s5fs: anyway I'm not really disagreeing, I just don't know how to interpret 'producer' in this kind of a world
19:22 < s5fs> howdynihao: how do you figure? sysadmins right now often don't know programming.
19:23 < s5fs> yeah i dunno
19:23 < howdynihao> s5fs: i'd expect a system admin to actually know some, bash scripting, or whatever
19:23 < ningu> producer makes it sound like it's their main job rather than just a thing they did once on one day
19:23 < s5fs> my biggest near-term concerns are whether or not laptops will get crappier before they get more useful for programmers
19:24 < ningu> s5fs: you mean pared down hardware to support small laptops with ssds?
19:24 < howdynihao> check out that video, he's using programming as a tool to do graphics design
19:24 < s5fs> ningu: agreed, that's the definition i meant. if basic excel formulas are what we are considering programming, then a huge percentage of office workers are already programming regularly. the future is now!
19:25 < wizonesolutions> is using Array.every() to simulate a continue/break-able forEach a common pattern?
19:25 < wizonesolutions> or will for (var x in theArray) work natively with continue and break without having to think any further?
19:25 < ningu> wizonesolutions: I dunno but that sounds interesting
19:25 < ljharb> wizonesolutions: yes. also "some"
19:25 < wizonesolutions> yeah, read on SO, you return false when you want to break out of the every
19:25 < wizonesolutions> or true if using some
19:25 < ljharb> wizonesolutions: a for..in loop requires you guard with hasOwnProperty - i strongly encourage ES5 array functions
19:26 < wizonesolutions> ljharb: I read that, but even with arrays?
19:27 < ljharb> wizonesolutions: for..in should never be used on arrays.
19:28 < ljharb> it's for objects.
19:28 < wizonesolutions> ljharb: got it. I'll try every cuz somehow returning false to break makes sense in my head
19:28 < wizonesolutions> thank you
19:28 < ningu> I usually just use a plain old for loop
19:28 < ljharb> wizonesolutions: generally you'd use whichever of the two requires the least code to break.
19:28 < ljharb> for loops are gross.
19:29 < wizonesolutions> I wanna chain stuff dag nabbit
19:29 < wizonesolutions> :D
19:29 < wizonesolutions> fashionable code
19:30 < ningu> I was going to give an example but I just remembered I refactored that code so the for loop wasn't needed anyway
19:30 < ljharb> even better
19:30 < ljharb> does anyone have a favorite "parse command line arguments" npm module?
19:31 < wizonesolutions> ljharb: you mean switches. i.e. not prompt
19:31 < wizonesolutions> ?
19:31 < ningu> people seem to use optimist a lot
19:31 < ljharb> wizonesolutions: what? switch is awful, don't use it
19:31 < ljharb> optimist, thanks
19:31 < wizonesolutions> ljharb: no, command line switches
19:31 < wizonesolutions> just a synonym
19:31 < ljharb> lol oh, yes
19:31 < ningu> ljharb: I've never used it but it's your standard clean tj module I believe :)
19:31 < wizonesolutions> darn
19:31 < gildean> commander is pretty good too, it can use switches give prompts etc.
19:31 < wizonesolutions> haven't had to do that yet
19:31 < wizonesolutions> been avoiding it and using env vars
19:31 < wizonesolutions> haha
19:32  * wizonesolutions commits optimist and commander to memory though
19:32 < ningu> how about for testing, there is mocha, jasmine, testacular, vows, ...
19:32 < ljharb> tape
19:32 < ningu> I haven't really looked into any of them yet
19:32 < ljharb> ningu: optimist is a substack module apparently
19:32 < ningu> oh, ok
19:33 < ningu> anyone it's really common, I see lots of things using it as a dependency
19:33 < ningu> anyway*
19:33 < ljharb> cool
19:33 < gildean> ningu: commander is tj's
19:34 < ningu> there should be a tj vs. substack war
19:34 < ningu> not sure how it would be fought
19:36 < ljharb> wow, tj has more modules than substack
19:36 < ningu> really?? huh
19:37 < ljharb> i'd say some algorithm counting modules, and dependents
19:37 < ljharb> with minus points for each module that has a (not their own) dependency
19:41 < xk_id> I have a small express app that runs on local port '3001'. So I am using nginx to reverse proxy from external '1111' to internal '3001'. However, my express app also uses 'socket.io'. My problem is that while the server detects the client has connected (i.e, the client sends events successfully to the server), the client doesn't seem to receive events from the server (there is something inside the page which is supposed to c
19:41 < xk_id> hange in response to events emitted by the server, but doesn't). 
19:42 < ningu> xk_id: you may need to turn on html 1.1 and keepalive
19:43 < ningu> xk_id: this is from a while ago but I used the following nginx config in the same place where I do proxy_pass:
19:43 < ningu>         proxy_http_version 1.1;
19:43 < ningu>         proxy_set_header Connection "";
19:43 < xk_id> that's great, I'm just about to try it.
19:44 < ningu> xk_id: it's a big tricky to get all the settings right, I can't quite remember why you have to override the Connection header to an empty string
19:44 < ningu> someone here with more experience might have a better setup
19:52 < Tug> Hey guys, was wondering how you manage packages as multiple git project ?
19:52 < Tug> like I have a web app which has its own repo and has dependencies
19:52 < ningu> Tug: define "manage"
19:53 < ningu> oh
19:53 < Tug> which are other git projects
19:53 < ningu> just define them in package.json and npm install/update
19:53 < ningu> I see
19:53 < ningu> and you don't want to publish to npm?
19:53 < ningu> you could use component I guess
19:53 < Tug> yep but when I modify a module which is in the node_modules dir of my app project I cannot commit to the git repo
19:53 < ningu> so don't do that
19:54 < Tug> mmm I
19:54 < ningu> modify it in its repo :P
19:54 < Tug> yep
19:54 < Tug> but if I do multiple modification
19:54 < ningu> I don't really understand the issue here
19:54 < Tug> I don't want to push and update my modules all the time
19:54 < ningu> but you chose to manage these modules in git repos, isn't that just how it works?
19:55 <@Nexxy> Tug, `npm link`
19:55 < ningu> there may be things to make it easier
19:55 < ningu> ah ok
19:55 < Tug> ah yes npm link !
19:55 <@Nexxy> https://npmjs.org/doc/link.html
19:55 <@Nexxy> it's a lifesaver
19:55 < Tug> I think that s what I m looking for, gonna check
19:56 < ningu> Nexxy: so is that intended for things that aren't on npm?
19:56 <@Nexxy> either way
19:56 <@Nexxy> if you need to make changes to something
19:56 < ningu> anyway yeah it looks like what he wants
19:56 <@Nexxy> locally
19:56 <@Nexxy> without having to push into git every time
19:56 <@Nexxy> it's just a symlink
19:56 < ningu> yep
19:57 < Adoxographer> Hello there
19:57 < Adoxographer> I was wondering if one is willing to lend me hand
19:57 < Tug> yep, that's it :) thx
19:57 < Adoxographer> I'm mighty confused on how to use compose in GM
19:57 < Adoxographer> http://aheckmann.github.com/gm/docs.html#compose
19:58 < Adoxographer> I'm trying to compose an image with a second one, but can't seem to understand where the second parameter goes 
19:58 < Adoxographer> :)
20:01 < ningu> Adoxographer: looks like gm(foo).append(bar).compose(baz)
20:01 < Adoxographer> won't that just put them one after the other?
20:02 < ningu> yeah nevermind :)
20:02 < Adoxographer> instead of on top of :)
20:04 < ningu> Adoxographer: what would the actual gm command look like?
20:05 < Adoxographer> gm composite -geometry +100+150 cockatoo.miff perch.ras composite.miff
20:06 < ningu> well I think append just adds a file argument to the end
20:08 < Adoxographer> Mmm I'll give a spin with append
20:09 < Adoxographer> and if not I'll go with a child process to imagemagick and be done with it
20:09 < Adoxographer> Thanks Ningu
20:14 < xk_id> ningu: well, your advice got me to update the absurdly old version of nginx (0.7), because 'proxy_http_version' wasn't being supported. After updating, my app works even without adding the 2 extra lines. cheers! :)
20:14 < ningu> xk_id: cool!
20:15 < ningu> yeah I believe proxy_http_version was added in 1.2
20:36 < centosUsr> hello
20:37 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:37 < centosUsr> i have a problem installing node
20:37 < centosUsr> SyntaxError: invalid syntax node-v0.10.2 File "./configure", line 433
20:38 < centosUsr> where can i find a guide?
20:38 < zenetik> mscdex: ping
20:39 < zenetik> mscdex: https://github.com/mscdex/node-ncurses/issues/33
20:40 < MI6> joyent/node: Nathan Rajlich v0.10 * 55ea7cc : repl: use more readable RegExp syntax for spaces  This is just a cosmetic (+1 more commits) - http://git.io/3HUg7Q
20:57 < MI6> joyent/node: David Braun master * 840a29f : buffer: change output of Buffer.prototype.toJSON()  Expand the JSON repre - http://git.io/v6akfA
21:09 < Industrial> What kind of assertions would you guys add? https://gist.github.com/Industrial/81a80fe5eb05d178a352
21:19 < windsurf_> anyone know of a module that can write excel files with formulas? My formula needs are simple, I want to do something like =average(a1:a10)
21:22 < windsurf_> sweet, just found https://github.com/mgcrea/node-xlsx
21:23 < pyusr> https://github.com/stephen-hardy/xlsx.js/blob/master/xlsx.js ouch
21:27 < Skeeter-> Hello, Im trying to find a good way to deploy node.js with some modules w/o the need to install them
21:27 < Skeeter-> i am getting some trouble 'linking' them with npm
21:34 < mtsr> Skeeter-, for apps as opposed to libraries it's recommended to keep the modules in your repository, so deploying your app should remove the need for npm install
21:35 < nobitanobi> What is the "correct" way to test associations in Rails? I want to make sure that when I create a "Post" it belongs to a "User". I'm using Rspec
21:36 < Skeeter-> mtsr: ok, thanks
21:39 < s3shs> Any blogs on how to best organize an ember project?
21:40 < s3shs> e.g.: Where do I put my templates, .js, etc?
21:40 < s3shs> Whoops, wrong room.
21:44 < howdynihao> looks like its contagious
21:50 < kevinsimper> Does anybody know what the 9 steps to a modern web app is call? Like do not store userdata on the server and so on?
21:51 < ningu> sounds like the seven habits of highly effective people
21:52 < AAA_awright> kevinsimper: Uhh... *default question* what are you trying to do
21:52 < kevinsimper> ningu: Yeah, sort of
21:53 < howdynihao> step 1, there are no steps! except for these other 8 steps that follow
21:53 < kevinsimper> AAA_swright: My friend just ask my why all his data disappear when his Appfog instance crashed and restartet.
21:54 < kevinsimper> I saw a time ago a nice resource i could point him to but can find it.
21:55 < AAA_awright> Storing data is literally the only reason the Web exists
21:55 < kevinsimper> howdynihao: Yeah, but for Intermediates it is a little harder. 
21:55 < AAA_awright> So I'm not sure how that's a "step"
21:55 < TheJH> AAA_awright, so sending an email is "storing a mail in someone elses mailbox"? :D
21:56 < kevinsimper> AAA_awright: Yeah, but not on the local web server, you should use something like aws s3 to store profile pictures.
21:56 < kevinsimper> TheJH: hehe :D
21:58 < TheJH> whoah, I'm gone from the node world for half a year or so, and now request, basically just a module for doing http requests, has 11 dependencies?
21:59 < TheJH> I think when I saw it for the last time, it had maybe two or so...
22:00 < mmalecki> TheJH: it had 0 for most of the time
22:00 < wizonesolutions> does node.js's .every do something evil with my scope?
22:00 < mmalecki> TheJH: I gave up on using it a while ago
22:00 < wizonesolutions> or is it just async?
22:00 < ningu> mmalecki: how come?
22:00 < wizonesolutions> acc. to docs it should be sync as a higher-order function
22:00 < kevinsimper> But it is some good decencies it has , TheJH :D
22:00 < wizonesolutions> but I'm seeing symptoms suggesting it's operating async or not inheriting scope or something...
22:01 < mmalecki> ningu: I just use http.request
22:01 < TheJH> mmalecki, oh, hello – didn't see you for quite some time
22:01 < wizonesolutions> but I don't think it takes a callback parameter...
22:01 < mmalecki> TheJH: same, my fine sir. how are you doing?
22:01 < wizonesolutions> other than for the main action to do to every array item of course
22:02 < TheJH> mmalecki, if nothing goes horribly wrong, I'll have finished school in a few months :) (no lessons anymore, but still 5 exams to go)
22:02 < mmalecki> TheJH: sweet. how are you doing so far?
22:03 < howdynihao> wizonsolutions what?
22:04 < TheJH> mmalecki, well, the final grade can be calculated using a fixed formula, so I know that if I don't fail one of the five tests (fail=less than 5 points out of 15), I'll have a 2.4 or better :) (that kind of kills the learning incentive...)
22:04 < howdynihao> but basically no, node.js is node.js, it doesn't try to reimplement javascript, monkey patch it, or fix it
22:05 < ningu> wizonesolutions: .every() should be sync, not sure what's going on in your code
22:05 < TheJH> mmalecki, I'm a convinced C fanboy now :D (but I'm returning to node for a task tat involves FUSE, JSON and HTTP)
22:05 < TheJH> *that
22:05 < wizonesolutions> howdynihao: so I am doing var outerVar = []; someArray.every(function(item) { // Add stuff to outerVar }); return outerVar; // empty
22:05 < wizonesolutions> ningu: ok, will keep digging
22:05 < bnoordhuis> TheJH: how come? (the c fanboism that is)
22:05 < wizonesolutions> the simple act of changing it to forEach made it work again though
22:05 < wizonesolutions> which was weird
22:05  * wizonesolutions changes it back to confirm this...
22:05 < mmalecki> TheJH: interesting. I spent my last week writing C, actually :)
22:06 < mmalecki> TheJH: also, you should probably learn
22:06 < ningu> wizonesolutions: does every return true or false as necessary?
22:06 < TheJH> mmalecki, totally right :(
22:06 < wizonesolutions> ningu: ah. I *have* to return true every time for it to keep going?
22:06 < ningu> wizonesolutions: yes, that's how it works
22:07 < TheJH> bnoordhuis, I've always been kind of fanatic about performance and security, and C is nice for performance (well, at least for some purposes)
22:07 < wizonesolutions> ningu: ah, that explains a lot. let's see...
22:08 < bnoordhuis> TheJH: performance, maybe. but security? :)
22:08 < bnoordhuis> writing secure software in c is possible but it takes experience and discipline
22:08 < TheJH> bnoordhuis, uh... I think I'm able to handle the most common pitfalls, so my C code probably isn't too insecure :D
22:08 < ningu> bnoordhuis: would buffer overflows in C be solved if buffers began by declaring their length (like pascal strings)?
22:08 < TheJH> bnoordhuis, also, I love being able to do stuff like making a ringbuffer using `mmap` and `remap_file_pages` (so that there are two adjacent virtual memory regions pointing to the same physical memory region)
22:09 < bnoordhuis> ningu: that would only help if programmers (correctly!) check the buffer's length :)
22:09 < ningu> bnoordhuis: hehe yeah fair enough :)
22:10 < wizonesolutions> ningu: there we go. thanks again
22:10 < TheJH> ningu, buffer overflows aren't hard to protect against. with complex program logic, for example, use-after-free is a problem. also, you need to know details about how the filesystem works when you do stuff like chmod'ing directories or so, those are the more common issues, I think
22:11 < ningu> TheJH: they may be easy to protect against but half the time I see security notices they're about buffer overflows
22:11 < TheJH> or you write a file into /tmp and execute it... with umask 0...
22:13 < TheJH> actually, there's a C compiler, tcc by fabrice bellard, I think, that is able to generate x86 machine code with bounds-checking instructions
22:15 < bnoordhuis> TheJH: you might be interested in gcc 4.8
22:15 < bnoordhuis> if bounds checking is your pigeon
22:18 < TheJH> bnoordhuis, not really, just wanted to point it out since ningu talked about it. but I didn't know about that gcc feature yet, good to know
22:18 < jeffmjack> anybody know if there is any difference between response.body and body in the callback for request()?
22:20 < TheJH> oooh, node finally has poison null byte protection now! :)
22:21 < robinson_k> hi
22:21 < robinson_k> trying to figure out to handle a redis-service outage in my express app (express 3, connect-redis)
22:22 < robinson_k> anyone has an idea, i kinda stuck on this:
22:23 < robinson_k> http://pastebin.com/rCY4Gq1V
22:25 < robinson_k> i don't get to insert another service-connection to redis in the middleware at the last line
22:36 < lbod> sorry simple question, whats the easiest way to create a file when a directory doesnt exist?
22:41 < robinson_k> create the dir, then the file?
22:41 < robinson_k> http://nodejs.org/api/fs.html
22:42 < lbod> that seems like the only way so far, theres no direct way to create the dir if it doesnt exist?
22:48 < lbod> thanks anyway
22:48 < dukedave> robinson_k, if you're sure you'll be on a unix-like system then you can probably exec('mkdir -p', ...)
22:48 < dukedave> lbod, ^
22:48 < dukedave> Sorry, wrong person
22:48 <@mbalho> npm install mkdirp
22:48 < lbod> yeh needs to be platform independent
22:49 <@mbalho> or npm search mkdir
22:49 < dukedave> Well fancy that
22:49 < lbod> mbalho: that sounds good, ta
22:52 < lacrymology> is there a try/except model in node?
22:53 < lacrymology> I want to do something like x = Func(id) || id but Func() raises when it's udnefined
22:53 < lbod> yes its javascript, though async is a PITA
22:54 < lacrymology> > mongo.ObjectID('asd')
22:54 < lacrymology> Error: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters
22:54 < lacrymology> that's the errorI want to catch
22:56 < lacrymology> ok, got it
22:56 < lbod> mbalho: works nice thanks
23:05 < ashnur> what is that site of rated node modules? 
23:05 <@mbalho> wat is rated
23:06 < ashnur> it is an english word
23:06 < ashnur> it's like when someone says their opinion about something, and they give some stars or point or whatever
23:07 < ashnur> like 3 out of 10
23:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:07 < bnoordhuis> i thought it was a rate daemon
23:07 < ashnur> and there is a site on the interwebs with node modules which are listed as better than the usual ones
23:07 < ashnur> yeah, i thought that there will be a confusion, that's why I explained
23:07 < ashnur> so I take no one knows that site?
23:08 < ashnur> because when I try to google it, it gives me back requirejs, and it's a annoying
23:08 < ashnur> because it's not even good 
23:12 < ashnur> and besides that, i get a bunch of tutorials sites on how to install node packages
23:36 < Norm_> call me a dunce, but why does "npm show commander version" show 1.1.1, but "npm install commander" only gives me 1.0.1 ?
23:37 < niggler> Norm_ when i do it i get 1.1.1
23:37 < niggler> what node version are you using?
23:37 < Norm_> niggler: 1.0.106
23:38 < niggler> you can't be using node version 1.0.106
23:38 < Norm_> oh duh, sorry, that was npm version 1.0.106
23:38 < Norm_> 0.4.11
23:38 < niggler> what's the output of node --version
23:38 < niggler> yeah you may need to upgrade
23:38 < Norm_> oh i see
23:38 < niggler> https://github.com/visionmedia/commander.js/blob/master/package.json#L12
23:38 < Norm_> yikes i'm out of date
23:39 < niggler> 1.0.1 was the last version of commander to support 0.4.x
23:39 < niggler> https://github.com/visionmedia/commander.js/commits/master/package.json Norm_ that's the history
23:40 < rking> Hi guys. I'm an async n00b. Is there a broad distinction between promises/futures/deferrables?
23:40 < rking> And what do JS people use?
23:40 < Norm_> niggler: thanks for the help
23:40 < niggler> rking why not plain old callbacks?
23:41 < DarkArgon> where do i find docs for the events in express? for example res.on('header')
23:44 < rking> niggler: I'm not sure.
23:45 < rking> niggler: What about stuffing them into an Array?
23:45 < niggler> rking what are you trying to do?  the common first-step is `async`
23:46 < niggler> https://npmjs.org/package/async
23:47 < rking> niggler: I'm not really sure. I'm just exploring ways of coding that are foreign to me.
23:48 < rking> BTW a friend just pointed this out to me, and it's entirely about your question: http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/
23:48 < bnoordhuis> ^ just saw that on HN
23:49 < niggler> those are all cute but ultimately callbacks are conceptually simpler
23:49 < bnoordhuis> let's not forget node 0.1 had promises
23:49 < bnoordhuis> they were pretty much a disaster
23:50 < niggler> I'm convinced at this point bnoordhuis there are two types of programmers: those who care about shit like promises and those who get shit done
23:50 < bnoordhuis> i don't disagree :)
23:51 < bnoordhuis> it's good that people are looking beyond what's already there
23:51 < cracken> but do you promise?
23:51 < bnoordhuis> but for now we're stuck with callbacks
23:52 < cracken> can't you create your own promise fairly easily
23:52 < bnoordhuis> yes. people do it a lot
23:52 < bnoordhuis> no one implementation has taken the node ecosystem by storm
23:52 < bnoordhuis> read into that what you will
23:53 < cracken> that it's not really that important
23:53 < niggler> whereas "async" has :)
23:53 < bnoordhuis> well... async and step have been around since nearly the beginning
23:54 < bnoordhuis> they're not necessarily the Endlosung to one's callback woes
23:54 < bnoordhuis> but they work and they're pretty battle-tested by now
23:56 < Raynos> Are there any good benchmarking libraries?
23:56 < niggler> Raynos benchmarkjs?
23:56 < Raynos> nah
23:56 < Raynos> that one sucks many balls
23:56 < Raynos> i hate it
23:57 < niggler> or just bare microtime?
23:58 < Raynos> I guess I can use microtime and just time shit myself
23:58 < niggler> write your own tic/toc
23:58 < niggler> holy crap someone already did it
23:58 < niggler> https://npmjs.org/package/tictoc
23:59 < rking> niggler: That sentiment seems anti-vocabulary, that it's a waste of time to name and discuss alternate phrasings of things.
--- Log closed Sun Mar 31 00:00:21 2013
