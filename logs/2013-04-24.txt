--- Log opened Wed Apr 24 00:00:35 2013
00:02 < zamnuts> Prometheus, bash doesn't do anything else with the file, it is up to the internals of node.js at that point. node.js uses stdin/out/err which the calling shell understands, that's how they communicate
00:03 < zamnuts> Prometheus, e.g. process.stdin.on('data',function(data){...});
00:05 < hackedy> substack is talking about ploy at nodephilly http://www.ustream.tv/channel/node-philly-2013
00:06 < Technodrome> in JS if i have 5 nested functions and in the global scope i do "var y = 10" , if i change that to y = 15 say in the most nested function will it change it in the global as well ? 
00:07 < Technodrome> will it work its way back up? 
00:07 < Technodrome> or will it just work its way back 1 level? 
00:13 < ljharb> it will go all the way up
00:13 < ljharb> Technodrome: but don't do that. globals are bad :-p
00:13 < Technodrome> i keep thinking that it will just go up one level, aka the parent
00:13 < Technodrome> i didn't know it would keep going
00:15 < Technodrome> ljharb: http://pastebin.ca/2364972 how do run the d() function? 
00:15 < Technodrome> newOne.newfunc().d(); is not working
00:18 < sorensen> blah
00:18 < sorensen> silly redis bitops
00:31 < garthk> Repeat: any ideas on how to catch a function which is failing to emit any events or call anyone back so they can do it? My long running process is dying or hanging occasionally without any errors, and I'd like to avoid putting pretty much a printf in every line. :)
00:31 < garthk> Failing that: is there a trace-all-function-exits-to-console thing I can use?
00:32 < hackedy> how would you do a node.js `which` call
00:32 < hackedy> do you have to literally shell out to which to find out
00:32 < JamesMGreene> hackedy: Yeah, or use the "shelljs" module
00:33 < hackedy> ok
00:33 < hackedy> thanks.
00:38 < sorensen> garthk: you could try https://trace.gl/
00:38 < sorensen> but i have no idea how to use it :)
00:38 < ChrisPartridge> i saw that this morning, looks pretty good
00:40 < hello_kitty> what's a good way of simlating latency and/or packet loss for websockets?
00:40 < hello_kitty> *simulating.    Also code is fine, but OS (win7) tricks are good too, if available
00:41 < deoxxa> hello_kitty: perhaps https://github.com/naomik/hiccup
00:44 < hello_kitty> deoxxa, that's an amusing lib, thanks
00:47 < garthk> sorensen: only lead I have so far. Cheers! :)
00:51 < rvagg> garthk: might help to have a listener on this: http://nodejs.org/docs/latest/api/process.html#process_event_uncaughtexception
00:51 < rvagg> garthk: and possibly consider domains: http://nodejs.org/docs/latest/api/domain.html
00:51 < garthk> rvagg: everything happens in a domain and I'm listening to that error. I'll add the extra one, too.
00:53 < garthk> Hmm. If it's possible to measure code coverage using the debugger protocol, it should be possible to trace execution-to-exhaustion. 
00:54 < sorensen> or just console log the hell out of things
00:55 < sorensen> which is what i almost always do
01:12 < defaultro1> hey folks, I lost the url for the node libraries. Can someone please post it?
01:13 < deoxxa> node libraries?
01:13 < deoxxa> you mean npm?
01:13 < deoxxa> you maybe want https://npmjs.org/
01:13 < defaultro1> yeah :D
01:13 < gigawattz> hey guys
01:13 < defaultro1> thanks
01:14 < ljharb> Technodrome: you can't do that. also it's weird to store a function on a function.
01:14 < ljharb> Technodrome: you could have newfunc return an object, with a "d" property that's your function tho
01:14 < defaultro1> what type of usage can node be in the enterprise?
01:15 < gnarf> ljharb: not that weird, it's basically "statics" on a constructor function
01:15 < Guest87483> What can't it be?
01:15 < gnarf> ljharb: i.e. jQuery.ajax vs jQuery.prototype.load ...
01:15 < deoxxa> or net.createServer for something more nodey
01:16 < deoxxa> or stream.Readable.wrap
01:16 < deoxxa> etc
01:16 < ljharb> gnarf: it's done. but it's still weird.
01:16 < gnarf> sure, there are a bunch of examples of when this makes perfect sense
01:16 < gnarf> you're weird ;)
01:16 < gnarf> i think it's okay if the function is a factory
01:16 < defaultro1> the node program you wrote, where is it being used?
01:16 < gnarf> if its like a utility, it doesn't make a ton of sense
01:16 < defaultro1> what does it do?
01:17 < defaultro1> i'm trying to figure out what project I can write using node
01:17 < deoxxa> defaultro: there's not much you *can't* do with node
01:17 < deoxxa> defaultro: there's probably a bunch of things you wouldn't *want* to do though
01:18 < defaultro1> deoxxa, please let me know
01:18 < sorensen> deoxxa: blasphemy!
01:19 < defaultro1> what's one program where it can be very useful?
01:19 < deoxxa> defaultro: i use node at work for processing streams of data
01:19 < defaultro1> k
01:19 < deoxxa> works pretty well
01:19 < deoxxa> javascript is fun
01:19 < sorensen> this is a bit of a strange line of questioning
01:19 < defaultro1> then you parse it?
01:20 < deoxxa> i guess
01:20 < defaultro1> deoxxa, you let your node listen on a tcp port then your node connects to an external site?
01:25 < sorensen> anyone here making use of redis bitop commands?
01:33 < ljharb> isaacbw: any progress on tape? anything i can help with?
01:57 < gigawattz> Within: http://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor
01:57 < gigawattz> Do you guys not think that events.EventEmitter.call(this); have a method in util
01:57 < gigawattz> like closure, util.base(this) for example
01:58 < gigawattz> and within a prototype method, using like util.base(this, 'methodName')
02:00 < ljharb> can you rephrase that? i'm not sure i understand the question.
02:01 < gigawattz> when using util.inherits, in order to call the base / parent class we have to call the superclass.
02:01 < gigawattz> but we call ot like so:  events.EventEmitter.call(this);
02:02 < gigawattz> and ifwe want to call the parent method, such as when overriding a parent method we have to do  events.EventEmitter.prototype.methodNamecall(this);
02:02 < ljharb> right, that prevents you from needing to have a reference to the superclass.
02:02 < gigawattz> yes, but my point is, having something that automates this would be good, such as util.base(this) for constructors
02:03 < ljharb> eh. javascript doesn't have classical inheritance.
02:03 < ljharb> everything that automates that is usually something trying to emulate it.
02:03 < ljharb> if you find yourself needing it, you might want to reconsider how your system is architected.
02:03 < gigawattz> See: http://docs.closure-library.googlecode.com/git/closure_goog_base.js.source.html#line1502
02:03 < deoxxa> gigawattz: go look at stream.Transform and you'll see why that wouldn't work
02:03 < ljharb> i don't read google JS links anymore. they're mostly junk.
02:04 < gigawattz> what you mean it's "junk"
02:04 < gigawattz> are you speaking about Closure Library ?
02:05 < ljharb> that's one example of many.
02:06 < ljharb> most of google's JS tools imo are just a desperate grab to make JS feel more "comfortable" for java devs, so they don't actually have to learn the language.
02:06 <@mbalho> that was my impression as well
02:07 < deoxxa> this probably stems from google being mostly a java company
02:07 < gigawattz> That's a given, but do you not think that the Closure Library brings something really important to the JS Table
02:07 < ljharb> deoxxa: that's 100% what it stems from.
02:07 < ljharb> gigawattz: no, i do not think that.
02:07 < gigawattz> Sorry, not the Library, the Compiler
02:08 < ljharb> most of it's claimed "benefits" come from advanced mode. and advanced mode requires you to write your JS differently. which is a cardinal sin for coding tools.
02:08 < ljharb> style/syntax checkers aside
02:08 < gigawattz> I don't see 
02:08 < ljharb> gigawattz: ok, tell me what you think it "brings to the table"?
02:11 < gigawattz> To be honest, I am too baked to have this conversation. I know what your saying though!
02:11  * JamesMGreene sighs
02:12 < donCams> anybody using mongoose here?
02:12 < ljharb> sigh, the ballmer peak is for whiskey.
02:12 < ljharb> donCams: yes, i'm in #mongoosejs - just ask your question, don't ask if you can ask, or if someone's using something :-)
02:14 < gnarf> JamesMGreene: sigh?
02:14 < gnarf> ljharb: +1 on advanced mode coding style
02:15 < gnarf> that stuff is fugly
02:15 < JamesMGreene> gnarf: Just sighing at an argument being stirred up and then its proponent bailing due to "bakedness"
02:16 < JamesMGreene> And yes, also agreed with ljharb on advanced mode being bad
02:16 < gigawattz> It may be a little fuggly, but try build Gmail, Calender, Google+ and Youtube in jQuery lol
02:16 < gnarf> JamesMGreene: yeah, i'm too baked to not have this conversation... dunno what gigawattz is smokin' ;)
02:16 < ljharb> gigawattz: it's no easier by using google's tools. it'd have been much easier if they had more JS engineers instead of java engineers who happen to know some JS.
02:17 < ljharb> (obviously there's some exceptions - google has a few awesome JS engineers. but the majority are java, not JS)
02:17 < JamesMGreene> gigawattz: I've seen someone build a Gmail clone using Knockout in 1 hour
02:18 < JamesMGreene> Obviously it didn't have all the bells and whistles, but still
02:18 < gigawattz> ljharb, they have a lot of awsome Java engineers as well, bending Javascript to their needs was probably a good idea
02:18  * gnarf shrugs
02:18 < gigawattz> JamesMGreene, hehe
02:18 < gnarf> jQuery could be one tool in the bucket of a gmail clone
02:19 < gnarf> but really, the GWT is kinda meh
02:20 < gigawattz> yea, I am not to keen on GWT
02:20 < ljharb> not even google uses that much anymore.
02:20 < ljharb> gigawattz: i think teaching people JS would have been a much better investment than writing inappropriate tools
02:20 < ljharb> google still uses one massive perforce repository for everything - which is basically svn. their engineering culture hasn't been "on the cutting edge" for many years.
02:21 < M2Ys4U> they can also throw a lot of computing power at solutions as well
02:22 < ljharb> which is why they're spending a fortune on a substandard, antiquated version control system.
02:23 < gigawattz> ljharb, +1
02:24 < gigawattz> That's so right
02:25 < ljharb> i never tire of hearing that :-p
03:01 <@isaacbw> angularjs is google, and it's pretty awesome
03:02 <@isaacbw> ljharb: so I superficially fixed the child_ordering craziness, but I still got the maxeventlisteners stuff
03:03 <@isaacbw> and a few other errors. I'm almost inclined just to write my own tap producing framework
03:03 <@isaacbw> and/or salvage what I can from node-tap
03:10 <@isaacbw> I think it has to do with race conditions after the nextTick change 
03:10 <@isaacbw> and eventing funny business
03:12 < astropirate> isaacbw, angularjs is the worst thing to happen to JS in recent years
03:12 < astropirate> we are now back to putting application logic inline
03:13 <@isaacbw> astropirate: do you have anything else to say about it?
03:13 <@isaacbw> it sounds to me like you've been using it wrong
03:13 < astropirate> o_O
03:14 <@isaacbw> most if not all logic should be put into directives, which are then pieced together on elements like components
03:14 <@isaacbw> you *can* put logic in elements, but doing that is stupid and counterproductive
03:14 < mscdex> node.js rules!
03:15 <@isaacbw> woo
03:23 < garthk> Figured out how to attach a _debugger.Client. Now, how do I get it to break the first time? Set breakpoints everywhere?
03:34 < h22> EventEmitter.emit works like jQuery.trigger?
03:39 < garthk> Crude way of watching my app stall: run it with --prof and tail v8.log | uniq
03:41 < garthk> Aha! I've discovered where it hung. tick,0x9b7eec79a66,0x7fff5fbf64f8,0,0x9b7efaf944a,0,0x9b7efb13805,0x9b7efa859b1,0x9b7efa903e3,0x9b7efb0f5c7,0x9b7efb25152,0x9b7efb24f37,0x9b7efa5cdc2,0x9b7efa65d4d,0x9b7efa65915,0x9b7efb27f42,0x9b7efb138ce,0x9b7efb255ec,0x9b7efb253f1,0x9b7efaf85b6,0x9b7efa58e0d,0x9b7efb25e66,0x9b7efafb302
03:41 < garthk> One of these hex numbers will be useful.
04:10 < ljharb> isaacbw: if you can make a drop-in replacement for "tape", then that would be awesome
04:11 < Bergle_2> http://trace.gl <- nifty javascript tracing
04:20 < jimmybaker> I'm trying to setup a REPL to give access to my express app. Is there a way to set a context on a repl to be the current context of the application?
04:21 < jimmybaker> Here's what I have so far: https://gist.github.com/jimmybaker/e63d6f99eeec2bdfc8ff
04:22 < jimmybaker> I can access app in my repl loop but I'd like everything else that's in the file to be accessible as well. Is there a "this context" or "current context" that I can assign to give me everything?
04:37 < Technodrome> 10 years and just now actually learning javascript properly, so sad 
04:55 < Lorentz> better now than never
05:38 < r1chard> Guys. I'm almost ready to jump ship from PHP to Node.JS. I'd like to know are there any performance gotchas (in specific areas, because Node.JS is much faster overall) in using Node.JS for everything.
05:40 < Newb> Hey guys. How's it going? Anyone has the issue where the file uploader via ajax stops working after like 20 uploads or so?
06:27 < leichtgewicht> r1chard: PHP and Node.JS are very different under the aspect that the Node.JS has a "always up and running" vm, where PHP is essentially started up for every request. Thus: Node.JS can grow faster if 
06:28 < leichtgewicht> r1chard: PHP and Node.JS are very different under the aspect that the Node.JS has a "always up and running" vm, where PHP is essentially started up for every request. Thus: Node.JS can become faster if you prepare a lot of things and just keep them in memory.
06:29 < leichtgewicht> .oO( new IRC client )
06:35 < Lorentz> already a dozen of those
06:35 < Lorentz> at least IRC libs anyway
06:36 < Lorentz> PHP can be on-going, but it's not implemented as such usually
06:37 < Technodrome> how recommended or not is it to attach nested functions directly to objects?
07:04 < jkarsrud> what is the best way to debug a "Arguments to path.join must be strings" when it happens inside a module? 
07:06 < cyberalien> jkarsrud: try {} catch {} ?
07:11 < jkarsrud> I've tried that and logging to the console, but somehow it just doesn't work
07:11 < SomeoneWeird> jkarsrud, find where path.join happens and then console.log the arguments and figure out what's happening
07:14 < jkarsrud> It's swallowed by another module, so I'll keep trying to find out where it comes from
07:15 < daemonza> Hi, anyone know of any decent autocompletion plugins for node in sublime?
07:17 < ChrisPartridge> jkarsrud: you could try using domains 
07:18 < ChrisPartridge> daemonza: auto completion for the node api? or general JS auto completion?
07:18 < daemonza> more for the node api
07:19 < daemonza> javascript completion works fine, but it's hit and miss for me on node specific calls.
07:19 < ChrisPartridge> daemonza: theres a couple in package control, but i doubt they are up to date
07:20 < daemonza> using this - https://github.com/tanepiper/SublimeText-Nodejs  -- at the moment but yeah to really up to date.
07:20 < daemonza> was wondering what everyone else is using.
07:22 < ChrisPartridge> daemonza: memory, and the api as a pinned tab in the browser :p
07:22 < daemonza> :)
07:31 < [AD]Turbo> hi there
07:36 < r1chard> Guys. I'm almost ready to jump ship from PHP to Node.JS. I'd like to know are there any performance gotchas (in specific areas, because Node.JS is much faster overall) in using Node.JS for everything.
07:37 < r1chard> leichtge_, sorry didn't see your answer at first. Reading.
07:37 < Lorentz> r1chard: hard to say since your php application isn't going to be directly comparable to node.js version
07:37 < r1chard> Lorentz, it seems in terms of raw speed JS has no drawbacks compared to PHP. Or does it have weak points.
07:39 < Lorentz> you'll have to rewrite your php code to node.js, and it's a vastly different code, you won't be able to compare it.
07:39 < r1chard> Lorentz, I don't mean the async aspects.
07:39 < r1chard> Lorentz, that's clear enough.
07:39 < Lorentz> and it'll depend on your requirements too; most people suffer from slow database queries rather than actual code running slowly.
07:40 < Lorentz> so just saying, your question is somewhat unanswerable, as ultimately they distill down to how the code is written, it's all what the machine can do in the end.
07:41 < r1chard> Lorentz, it's answerable. Say someone who's been using PHP now uses Node.JS. What typical issues does he hit with Node.JS that he didn't hit with PHP.
07:41 < Lorentz> as a php dev of 5 years? I'm saying, it's such a drastically different developing environment, the language, way it's deployed, packages available, everything
07:42 < Lorentz> that it's nigh impossible to compare
07:42 < r1chard> But you often encounter issues of some sort. 
07:42 < Lorentz> about the only thing they have in common is they cater for a similar end business  goal of some web presence
07:42 < r1chard> Which are most common.
07:42 < SargoDarya> Lorentz: It's hard because you don't have linear flow anymore and you have to think the async way
07:43 < Lorentz> SargoDarya: well, that's part of it; it's something a php developer never (or at least, not normally) would've encountered in the first place
07:43 < Lorentz> so how can you ask question on hurdles php dev faces on doing nodejs when it's doing two completely different things
07:44 < Lorentz> you'll have nodejs issues, but it doesn't compare anything to do with php
07:44 < r1chard> Lorentz, if they were the same things I wouldn't ask the question, would I.
07:44 < r1chard> You don't need to explain it in PHP-ese, Lorentz.
07:44 < r1chard> I know the architecture of Node.JS
07:44 < r1chard> I'm asking about practical experiences.
07:45 < Lorentz> my practical experience is I put on a nodejs hat and completely drop the php hat, and there's no example I can give you on how deving on nodejs affected me as a php dev, since... different hat entirely.
07:45 < r1chard> Lorentz, let's say you're writing a CMS. How is the app organized for you. MVC style?
07:46 < MitchW> r1chard: the issues you'd hit are purely just learning how node.js works (it's completely unlike php), it's evented IO, persistent server (not request based instantiation), so learning to manage your state properly through discontiguous async function calls is probably one of the main things. and dealing with the burden of CPS (continuation passing style) that comes with it, and is (loosely) forced on you from the JS language.  none of whic
07:47 < r1chard> MitchW, do people use continuation libraries that remove the gap between two async events.
07:47 < r1chard> MitchW, so you can write as if it was blocking.
07:47 < Lorentz> r1chard: I am a zf dev in php; in node I'd be commonly use express, but neither compares to each other 
07:47 < Lorentz> they're two completely different things
07:47 < r1chard> Lorentz, what architecture do you use.
07:47 < Lorentz> so yes, overall, it'd be mvc, but it's implemented drastically differently
07:47 < MitchW> r1chard: yes, there's promise based libraries out there like q.js and async-helper libraries like the 'async' lib
07:48 < MitchW> (among dozens more)
07:48 < r1chard> MitchW, don't promises block when you ask for the result?
07:48 < MitchW> r1chard: no, the promise based libs use continuation passing style - so you'd do blah.promise(some_async_func).then(some_func_that_runs_once_its_done)
07:49 < r1chard> Oh I see.
07:49 < MitchW> there's no plain old joins or anything, as they're not possible with javascript (which is inherently single threaded by design)
07:50 < MitchW> well they're possible, but not with node's evented io (it'd block other requests = poor throughput and thus bad)
07:50 < deoxxa> i made a module: https://npmjs.org/package/xvideos (links on this page should be considered NSFW)
07:50 < MitchW> much like trying to block a client-side HTML page on a web-worker blocks the DOM/rendering thread
07:50 < ChrisPartridge> deoxxa: does the x mean what I think it means? :D
07:50 < r04r> deoxxa: why
07:51 < deoxxa> ChrisPartridge: indeed it does, my friend
07:51 < deoxxa> r04r: xvideos is a porn site, lel
07:51 < r04r> deoxxa: yes, why
07:51 < r04r> deoxxa: why did you make that
07:51 < Lorentz> why not
07:51 < deoxxa> because i could
07:51 < Lorentz> porn is a vast industry
07:51 < Lorentz> someone wants a porn website, why not in node
07:52 < ChrisPartridge> deoxxa: thats almost as good as the dicks npm package
07:53 < ChrisPartridge> ALMOST
07:53 < deoxxa> ha
07:53 < Lorentz> oh, it's a scaper
07:53 < Lorentz> even neater
07:53 < deoxxa> oh der, that's got the old readme
07:53 < deoxxa> see here for slight updates: https://github.com/deoxxa/xvideos
07:54 < SargoDarya> wat?
07:54 < SargoDarya> the dicks npm package is awesome xD
07:55 < ChrisPartridge> its fun to install the dicks package, then alias the ls/ll commands on someones machine to it
07:55 < r04r> deoxxa: can i ask what youre using the xvideos lib for
07:55 < r04r> assuming there was a reason that inspired you to create it
07:56 < Lorentz> scrape porn, I guess?
07:56 < r04r> i want facts not guesses
07:57 < deoxxa> r04r: i'm going to, along with https://github.com/deoxxa/flvee, attempt to build a database of content and apply some deduplication to it so i can correlate videos (like a is a subset of b, c is d with a watermark, etc)
07:57 < deoxxa> there are a bunch of interesting technical problems to solve, and i get to lol because i'm working with porn
07:57 < r04r> deoxxa: fun
07:58 < r04r> planning to one day turn it into a public thing, or just to enhance your private porn stash?
07:58 < deoxxa> oh it'll be public from the start
07:58 < deoxxa> what's the point in building a kick-ass porn index if you can't share it
07:58 < r04r> private porn stash
07:58 < deoxxa> haha
07:59 < deoxxa> also i want to see how many people get offended, so i can tell them to "beat it" in the most ironic way possible
07:59 < standoo> deoxxa: you working with porn?
07:59 < deoxxa> standoo: i suppose working on a project related to porn, since it's not like it's paying me (yet?)
08:00 < Lorentz> deoxxa: don't be offended when they start streaming themselves beating it
08:00 < Lorentz> you'll have to scrape that too and categorise it
08:00 < deoxxa> Lorentz: i'll just ask them to maybe upload it in segments so i can see if my correlation algorithms work
08:01 < Lorentz> would be lol if you can have this stream that is unending, always splicing in new videos as time goes on related to the previous video
08:01 < Lorentz> and let it evolve
08:02 < standoo> Lorentz: where you hosting it?
08:02 < standoo> deoxxa: where's the site?"_
08:02 < standoo> :)
08:04 < ChrisPartridge> Lorentz: that's a good idea, you could also track user movements via their cam, e.g. furious movement = keep playing, no movement = next video
08:05 < Lorentz> ChrisPartridge: did a uni thesis on that, partially anyway
08:05 < MitchW> r1chard: it's prob worth noting that with harmony slowly comming around, generators and the yield keyword will eventually blow CPS away - it's likely years off though (only mozilla really have any decent harmony support)
08:05 < Lorentz> tracking user emotion levels over the video frame, nothing complicated, just note what they express while they're watching
08:06 < deoxxa> Lorentz: omg, i'd totally do that
08:06 < deoxxa> Lorentz: that would be super lol
08:06 < standoo> MitchW: what's harmony?
08:07 < deoxxa> standoo: no site yet, but i'll probably get a trendy .io or .ly domain or something for it
08:07 < standoo> deoxxa: business model?
08:07 < deoxxa> who cares
08:08 < deoxxa> haha
08:08 < deoxxa> make internet lulz
08:08 < deoxxa> money comes later
08:08 < yawnt> internet lulz internet lulz
08:08  * yawnt raps
08:08 < standoo> internet lulz?
08:10 < MitchW> standoo: an new revision of ecmascript, it's codename (what will probably in some form or another become ECMAScript 6th Ed)
08:12 < jesusabdullah> wat
08:12 < MitchW> I say that as someone who's been waiting half a decade though, so ... well, it could never come :\
08:13 < MitchW> personally I use a lot of harmony extensions though (have for years), so it's not like it's non-existent *shrugs*
08:14 < jesusabdullah> ololololo horatio caine just gave a statement to the press and it was hilarity
08:14 < jesusabdullah> csi is fun!
08:14 < ChrisPartridge> who is horatio caine?
08:15 < ChrisPartridge> sounds like a mexican drug lord
08:17 < trevnorris> anyone know how to manually run the make test lint?
08:23 < zaleb> so, appearanly there are some big changes in the stream between 0.10.4 and 0.10.5?
08:45 < zaleb> net.Socket.read() returns no data on readable event in 0.10.5
08:47 < phrearch> hey
08:48 < phrearch> im trying to make my app running a bit stable, but i get these mondodb socket hangup errors, like http://paste.kde.org/731096/
08:48 < phrearch> whats the best way to prevent these? Check to see if the connection is still there before doing a db call?
09:01 < MiracleBlue> Ahoy
09:18 < daemonza> Hi so new to node and express and...weird problem. I might be missing something very obvious, but, when I do the following
09:19 < daemonza> http://pastebin.com/bJ0jWnB3
09:19 < daemonza> I get this error
09:20 < daemonza> http://pastebin.com/TZYixRqC
09:20 < daemonza> using
09:20 < daemonza> ~/Code/Personal/nodejs/testapp  ᐅ node -v
09:20 < daemonza> v0.10.5
09:20 < daemonza> anyone have any ideas?
09:25 < zaleb> you;ve got something else already listening to the port the expressapp is configured to
09:25 < daemonza> nope
09:26 < zaleb> you say no, but the error says so ;)
09:26 < zaleb> skype also has te tendency to listen on port 80
09:26 < daemonza> heheh ;)
09:27 < daemonza> ~/Code/Personal/nodejs/testapp  ᐅ nmap 127.0.0.1
09:27 < daemonza> Starting Nmap 6.25 ( http://nmap.org ) at 2013-04-24 11:26 SAST
09:27 < daemonza> Nmap scan report for localhost (127.0.0.1)
09:27 < daemonza> Host is up (0.00023s latency).
09:27 < daemonza> Not shown: 998 closed ports
09:27 < daemonza> PORT    STATE SERVICE
09:27 < daemonza> 22/tcp  open  ssh
09:27 < daemonza> 631/tcp open  ipp
09:27 < daemonza> Nmap done: 1 IP address (1 host up) scanned in 7.06 seconds
09:27 < daemonza> ~/Code/Personal/nodejs/testapp  ᐅ
09:27 < SomeoneWeird> ?
09:28 < bnoordhuis> daemonza: what does `netstat -tlnp` print?
09:28 < bnoordhuis> btw, what port are you trying to bind to?
09:29 < daemonza> 3000
09:29 < bnoordhuis> okay. what does netstat say?
09:30 < seismo> hello :)
09:31 < daemonza> http://pastebin.com/U4a8UU5G
09:31 < daemonza> on osx so format is a little different
09:31 < daemonza> for netstat
09:31 < daemonza> telnet to port 3000 show's the port is not used as well
09:31 < bnoordhuis> err
09:31 < daemonza> https://gist.github.com/daemonza/4b5faf4afd7b30154831
09:31 < bnoordhuis> maybe use lsof -iTCP -sTCP:LISTEN instead
09:32 < bnoordhuis> but like others already said, EADDRINUSE means the address/port is taken
09:32 < bnoordhuis> what does your code look like?
09:32 < daemonza> http://pastebin.com/fxFFyDML
09:33 < daemonza> have not written one line of code yet. Just ran "express testapp", then "npm install" in testapp dir, then node app
09:36 < MI6> joyent/libuv: Ben Noordhuis master * c777079 : include: fix typo in comment in uv.h - http://git.io/CWfGcQ
09:43 < nodweber> does anyone know, what obfuscator is used for http://bombermine.com/client/tip/app/app.nocache.js ?
09:45 < r04r> nodweber: obfuscating
09:46 < nodweber> r04r: ?, is that the name ?
09:48 < r04r> nodweber: yes, yes it is
09:48 < r04r> nodweber: oh you werent asking about my name, sorry
09:48 < r04r> nodweber: i interpreted your initial question as asking why they were using an obfuscator, not asking which one they used, sorry!
09:49 < r04r> then i also misintepreted your second question, i am on a roll
09:49 < nodweber> r04r: : )) 
09:49 < r04r> nodweber: anyway since it has mentions of gwt stuff, could it possibly be the obfuscator that comes with GWT?
09:56 < ExxKA> Hey Guys. The Readme shown on the npm page of my package won't update even though I republish. I have tried increasing the version number and use --force.. Am I missing something?
10:44 < ome> With Browserify-middleware, How do you make a module global? Say, I like to be able to use _ in all subsequent requires, at least through the `global` object.
10:47 < Epeli> window._ = require("underscore") ?
11:06 < donCams> hello. can somebody help me? i'm new to async programming. basically, here is my problem http://pastebin.com/mpPj9jsU
11:23 < MI6> joyent/libuv: Fedor Indutny v0.10 * 2400716 : stream: fix osx select hack - http://git.io/HIn6Ag
11:25 < ome> Epeli: Thanks, that doesn't really work,at least in my case, and I guess it's because I am using CoffeeScript and the middleware, Coffiely, that comes for Browserify-middleware is wrapping everything withen an anynomous function to create a private scope.
11:34 < surf2me> hello
11:37 < Epeli> ome:  That doesn't matter. You can "break out" of the coffeescript closure using the window global explicitly
11:38 < surf2me> I'm wondering how to implement my code for the client side. What practices do you use to write your client side code? and do you use the CommonJS way to write client modules? I want to unit test my client code but I'm wondering if this is a good practice using nodeunit..
12:02 < ome> surf2me: Look into Backbone.js or angularjs depending on what you want, a fullstack of just some `philosophy`.
12:04 < Hadaka> if a package requires creating files under /etc and a directory under /var/lib, is it proper to just do these actions in an npm install script, or should such stuff be left manual?
12:06 < ome> Hadaka, I assuming that it's a 'globa' package, the npm install script should take care of it. if it's not a global package, you shouldn't be really touching anything outside node_modules/YOUR-PACKAGE-NAME
12:08 < Hadaka> ome: looks good: "install": "if [ \"x$npm_config_global\" != \"x\" ]; cp xxx-{client,server}-config.yaml /etc; mkdir /var/log/xxx-{client,server}; fi"
12:09 < Hadaka> ?
12:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:13 < surf2me> ome: thank you. angularjs looks good to me!
12:16 < dypsilon> angular ist really only data binding isnt it?
12:17 < Bergle_2> no
12:18 < dypsilon> hm, ok i see
12:21 < werle> ashnur: Just saw mocha-run
12:21 < werle> ashnur: I assume you were able to figure it out :)
12:33 < surf2me> ome: If I use angularjs for displaying data, won't that be a problem for search engines, which don't execute the javascript?
12:36 < djcoin> Hi all, i'm looking for a project where you could see facial recognition of cats in picture, if anyone has a clue, thanks :)
12:36 < djcoin> can't find it
12:38 < niggler> djcoin did you try opencv?
12:38 < niggler> hello #node.js!  is there a tool like `n` that works for older versions of node?  Most node version managers seem to only support 0.8+
12:41 < djcoin> niggler: thanks for your reply, well i'm not really interested in the software itself, but rather in the other projects the author had made
12:41 < djcoin> made*
12:41 < niggler> lol djcoin 
12:42 < djcoin> but opencv seems great :)
12:42 < niggler> i used it for another project and it's pretty good
12:42 < djcoin> niggler: http://harthur.github.io/kittydar/
12:42 < djcoin> here it is !
12:47 < jsmonkey> Hi, have anyone used Saucelabs? I am writing test to it with webdriver (npm package wd). It works fine but I don't really like the way they are setup. There is no describe etc. I might be able to live with it since the test result etc are organised on the website but still
12:47 < jsmonkey> I can't get mocha to work with it. it won't run my webdriver stuff if I put them in a it block.
12:47 < jsmonkey> any ideas?
13:08 < zenetik> hi
13:09 < zenetik> does somebody got pointers on how npm is working ? i mean, when you npm adduser, where is stored the information ?
13:10 < zenetik> qooxdoo's guys are trying to update their modules management, npm is a good example of keep it simple and stupid for me, i'd like to learn more about npm backgrounds
13:14 < sekyms> Anyone able to tell me what I'm doing wrong here?
13:14 < sekyms> https://gist.github.com/smykes/a210cfbc04dc636b25c3
13:20 < alexwhitman> sekyms, I guess that depends on what you're wanting to happen vs what is actually happening.
13:21 < sekyms> alexwhitman: telling me it can't find handlebars
13:21 < sekyms> but i can run handlebars from the command line
13:21 < shmoon> is mbpro good for programming ? i wonder whether it should be good or a PC is better, any ideas, anyone coding on mbpro ?
13:21 < alexwhitman> sekyms, how is handlebars installed?
13:24 < sekyms> alexwhitman install npm -g handlebars
13:27 < standoo> niggler: what version you need support for?
13:27 < niggler> oh i was hoping to jump back to 0.6 (the version that ubuntu gives when you do apt-get install nodejs)
13:28 < niggler> but it may be easier to spin up a ubuntu vm
13:29 < ashnur> werle: yeah, not really. i went around it.
13:29 < ashnur> werle: but this should work
13:30 < SomeoneWeird> nvm
13:30 < werle> ashnur: nice
13:31 < ashnur> werle: tbh, i did almost nothing just asked people about thing that did not work ask I wanted
13:31 < werle> ashnur: ah 
13:31 < ashnur> and obviously if someone wants to use a lib which is not compatible with browserify v2, this also will not work 
13:32 < ashnur> like coffee-script
13:32 < ashnur> (fuck coffee-script btw.)
13:32 < werle> haha for real
13:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:43  * niggler high-fives ashnur
13:45 < ashnur> :D
13:49 < niggler> hey did ubuntu change the nodejs package to do the right thing?
13:51 < ashnur> i don't know, what was the issue with it?
14:00 < Exx2xxO> Hello! Is it a good idea to use SQLlite with node? And if so does anyone has a good tutorial on how to use SQLlite with node.js? And if not does anyone has any alternatives?
14:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:13 < Laddi> I solved it by created lots of: varName = { xxx = function() { ...}}; objects :)
14:13 < Laddi> xxx: function() even
14:13 < Laddi> Sorry, wrong room :p
14:17 < happyface> how can I switch dates between timezones, while keeping in mind DST as well?
14:40 < ashnur> happyface: use a lib
15:13 < schofld> Hello
15:13 < schofld> I am a little unsure how the javascript is working in this instance 
15:13 < gildean> schofld: you write javascript and then it happens?
15:14 < niggler> schofld you should have a code sample
15:14 < schofld> "config = require('./config/config')[env]" the [env] ?? where env = 'development'
15:15 < niggler> schofld can you show context?
15:15 < SomeoneWeird> config/config is exporting an array
15:15 < SomeoneWeird> and the [env] is accessing the relevant data
15:15 < tyebud> Hey node, whats the preferred method of deploying with API keys and other sensitive information?
15:15 < niggler> SomeoneWeird object
15:15 < SomeoneWeird> tyebud, env vars
15:16 < tyebud> SomeoneWeird: Do you have a separate file that you run with your node app that sets those?
15:16 < niggler> its most likely exporting an object schofld -- if you are in the REPL, just run require('./config/config') and it should print an object
15:16 < schofld> SomeoneWeird: i think it means it is accessing the exported object 'development' 
15:16 < SomeoneWeird> schofld, that's exactly what it means :)
15:17 < schofld> niggler: that's a good way of looking it up 
15:17 < gildean> schofld: that's the same as: var configfile = require('./config/config'); var config = configfile.development;
15:19 < gildean> or if you want to select by env vars, then: var configfile = require('./config/config'); var config = configfile[process.env.NODE_ENV];
15:20 < schofld> "config = require('./config/config')[env]" will return the object this is what is in the config file "module.exports = {development: {...}}"
15:20 < gildean> which can be shortened to: var config = require('./config/config')[process.env.NODE_ENV];
15:20 < schofld> aah 
15:21 < gildean> presuming you've set the NODE_ENV to something
15:21 < schofld> mm of course 
15:28 < dukedave> I don't seem to be able to set 'process.env.port = 8001' in my mocha tests :/
15:28 < dukedave> Is there a way to do this?
15:29 < bajtos> has anybody encountered ECONNRESET error when running test-debugger-client.js on windows? https://gist.github.com/bajtos/848c8fcb0d49146926ad
15:29 < schofld> THANKS for the help and for the TIP of using the REPL
15:35 < milani> has anyone ever implemented a http tunnel using nodejs? Iran filters data and uses deep packet inception to filter out VPN connections 
15:35 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:36 < milani> I want to develop a client/server script to encrypt and decrypt my data to avoid filtering.
15:36 < milani> but it shouldn't use any known protocol since it will be detected.
15:40 < gbit86> does anyone know of an example I can look at on how to create a node.js application that will connect to a web server that has digest authentication on it? I need to pass the username and password to a server, but every example I have found to do this has failed to work for me.
15:41 < milani> join #network
15:43 < pachet> join to channel #network synced in 120 seconds
15:45 < Technodrome> is there any way in JS to access a var from outside the function? 
15:46 < bitRipperX> can somone help me out. what is the correct way to get save a response from a post action? 
15:46 < bitRipperX> request.post('http://localhost:3000/handshake').form({amount:amount, resource:resource});request.post('http://localhost:3000/handshake').form({amount:amount, resource:resource});
15:46 < bitRipperX> oops double posted
15:47 < bitRipperX> Im send a post to localhost at port 3000 and its getting the data fine and handling it fine. 
15:47 < bitRipperX> I want to have the handler return a string to the original sender. how can I do that?
15:57 < bitRipperX> narut
16:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:34 < SocalNick> Hi all, is this an appropriate place for NPM questions? Wondering if there are any plans to allow npm to use git credential caching to install private repos?
16:36 < gildean> SocalNick: yes this is a good place for that, and isaacs is the person who would know something about that
16:37 < jamescarr> hey is it possible to run npm for a "homeless" user?
16:38 < SocalNick> gildean: thx - i'll try to chat with isaacs
16:39 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:39 < gildean> SocalNick: it's better if you do it on the channel, randomly querying people you don't know is considered rude
16:39 < SocalNick> gildean: good point - thx!
16:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:50 < other_guy> I'm having an issue sorting out how to get a service heartbeat working….
16:50 < other_guy> https://gist.github.com/nathanaschbacher/32c350c0cafb6113964e
16:51 < other_guy> I have a process that attempts to issue a whole bunch of requests against a pool of services.
16:52 < other_guy> When one of those attempts fails I send its connection (a wrapper around the client) to my heartbeat function
16:53 < other_guy> Every 10 sec I send a basic request to that same service and see if its alive yet
16:53 < other_guy> If it is then I flag it as alive and it's included again in the pool of services to hit.
16:53 < other_guy> Or that's what's supposed to happen.
16:55 < other_guy> The problem I'm seeing is that the firing interval occurs as I expect, but the heartbeat request callback doesn't execute until the very end of my whole process running, so the "alive" bit is never toggled, and I see console output of "_____ IS ALIVE!!!"   only at the very tail end of my program execution.
17:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:12 < manny> in mongoose if i have this in a schema:  users: [{type: ObjectId, ref: 'Users'}]
17:12 < manny> will mongoose automatically load the values fromt eh Users collection?
17:12 < GriffenJBS> how can i get logs from node-gyp like npm provides?
17:30 < toad-br> I want to create a realtime notification system, so that when a User makes an event, notify the other User. I was considering doing it in node.js / socket.io
17:30 < toad-br> and I found rabbitmq, zeromq gearmanmq and what would be the best way to scale a server notifications?
17:34 < ljharb> the best way is to not worry about scaling until you have too many users
17:34 < ljharb> cause, most people who worry about scaling never end up needing to
17:35 < kenperkins> ljharb+++++
17:36 < kenperkins> it's the classic definition of premature optimization
17:40 < toad-br> <ljharb>, thx... and i'll make this test with stress test in rabbit... http://dahernan.blogspot.com.br/2011/03/rabbitmq-and-nodejs-websockets.html  :+1:
17:41 < toad-br> <ljharb> for now, I will implement simple notifications socket.io
17:41 < ljharb> good idea
17:44 < mwo> Any jsdom folks around?  I'm flailing madly trying to get it to work.
17:50 < mwo> @tmpvar, are you around?
17:53 < kornnflake> any idea if asmjs finds it's way to nodejs/v8? :D
17:53 < kornnflake> imagine nodejs on asm steroids :D
17:56 < MI6> joyent/node: Timothy J Fontaine master * 85e4fc4 : build: Makefile should respect configure --prefix - http://git.io/XqF1OA
17:56 < mscdex> kornnflake: https://code.google.com/p/v8/issues/detail?id=2599
17:56 < kornnflake> mscdex thanks
17:57 < mwo> Hey TooTallNate, I was having issues with node-gyp on OS X 10.8.3, somewhere xcode-select was replaced with a symlink to xcrun, which doesn't do the same thing.  I couldn't find a replacement, so I uh, hardcoded my path into the python file just to get it running.
17:57 <@TooTallNate> mwo: i haven't really had any problems… are you trying to avoid installing XCode and just have the command line tools installed?
17:59 < mwo> Nope, I went through a bunch of different versions of Xcode, installing CLI tools or not, then eventually found that xcode-select is actually shipped with the OS in com.apple.pkg.Essentials.
18:00 < g0z> debug question so I'm trying to set a breakpoint in a script called from an include but this doesn't work: sb('path/file.js', linenumber)
18:00 < g0z> I tried just js filename, relative and abslute path
18:00 < g0z> damn got called to a meeting
18:01 < mkozjak> hello!
18:06 < patrickod> I'm trying to monkey-patch the http.ClientRequest constructor at the moment but having issues 
18:06 < patrickod> https://gist.github.com/9e5dffa26b2f0d4b0913
18:07 < mwo> TooTallNate, sorry, left off your name before.  Anyway, I went through a bunch of different versions of Xcode, installing CLI tools or not, then eventually found that xcode-select is actually shipped with the OS in com.apple.pkg.Essentials.
18:07 < patrickod> it seems that I can't overwrite the actual http.ClientRequest constructor inside http.js, but only in the file in which I'm calling it?
18:09 < OliverJAsh> can i have store node modules in a git repository without having to reference them in my package.json? they are private and i also don't want to create additional repositories for them for the time being
18:09 < ljharb> OliverJAsh: reference a private git repo directly in package.json
18:09 < ljharb> and gitignore node_modules if you're making an npm module
18:09 < OliverJAsh> ljharb: sorry i said i don't want additional git repos
18:09 < ljharb> oh
18:10 < ljharb> what, why?
18:10 < ljharb> git is MADE for tons of repos
18:10 < ljharb> everything should always be split into as many small repos as possible
18:10 < OliverJAsh> because i have a student github account with not enough private repos :P
18:10 < ljharb> it's $7 a month. go babysit a kid once and you're set for a year.
18:10 < OliverJAsh> ha
18:10 < ljharb> also, bitbucket.
18:10 < ljharb> free private repos.
18:11 < ljharb> never ever let yourself use git wrong cause of something stupid like money.
18:11 < OliverJAsh> okay, but just out of curiosity, can i put things in node modules and check them into my main repo, and node will recognise them (as they won't be listed in package.jsom)?
18:11 < OliverJAsh> json*
18:11 < kenperkins> can anyone recommend a contemporary to nock?
18:11 < ljharb> yes
18:11 < ljharb> package.json is for npm, not your app
18:11 < petecoop> bitbucket ftw
18:11 < OliverJAsh> cool, thanks
18:12 < ljharb> github's way better, but certainly use bitbucket if you somehow can't trip over yourself and find 20 bucks
18:12 < petecoop> yeah bitbucket is playing catchup but they are making a lot of improvements
18:13 < kenperkins> I do github for all of my public projects, and gitlab for a few that I want private but don't want to pay for
18:13 < petecoop> yeah I tried gitlab too but found it too much effort, also upgrading it broke it :(
18:20 < mkozjak> if i have # var log = fs.createWriteStream('/home/logfile', {'flags': 'a'});   #     and i want 'logfile' to be a variable, how do i use it in js? (in perl, it'd be $logfile)
18:21 < bnoordhuis> mkozjak: var logfile = '/home/logfile'
18:21 < mkozjak> bnoordhuis: cool :)
18:21 < mkozjak> bnoordhuis: and then just fs.createWriteStream(logfile, {'flags': 'a'});  , right?
18:22 < bnoordhuis> mkozjak: yep
18:23 < trevnorris> morning
18:25 < mkozjak> bnoordhuis: the problem is that i cannot hardcode this, so i'm confused.. i am calling this function i have this piece of code in with that variable i wanna use, and i want to open a file with that name..
18:28 < mkozjak> bnoordhuis: ooh, i want to append to string, nvm
18:30 < mwo> Anyone here using jsdom?  Anyone know if fetching images works?  I've fiddled with all of the features, and cannot get it to work. Looking in the code I can't find any of the piping for it either.  tmpvar maybe?
18:35 < LuckyBurger> hmm, any1 know of any documentation tools for node ?
18:36 < oliveiraev> LuckyBurger: docpad
18:36 < mazeLe> LuckyBurger: I#m currently using eclipse with the nodeclipse plugin and jsdt, wich uses jsdoc
18:37 < LuckyBurger> projects using sublime :(
18:37 < LuckyBurger> and i hate eclipse xD
18:37 < mazeLe> there are good reasons to :-)
18:37 < mwo> +1 eclipse hate
18:38 < kenperkins> webstorm also has jsdoc support natively
18:39 < LuckyBurger> https://github.com/jsdoc3/jsdoc
18:39 < LuckyBurger> interesting
18:39 < LuckyBurger> npm module
18:39 < ljharb> LuckyBurger: yes - write simple, clean code that doesn't need documentation :-)
18:39 < ljharb> best tool ever
18:39 < LuckyBurger> ljharb its not my code
18:39 < LuckyBurger> and its not clean
18:39 < LuckyBurger> or simple
18:39 < LuckyBurger> :(
18:40 < ljharb> refactor time!
18:40 < LuckyBurger> eventually
18:41 < LuckyBurger> need to document current codebase before that
18:41 < ljharb> "need to document" really means "need to rewrite properly"
18:43 < tanepiper> anyone know of a express3-compatible template engine that isn't jade and doesn't use {{ }} for template tags?
18:43 < tanepiper> (e.g swig and hogan)
18:43 < tanepiper> I tried ejs, but it seems broken :/
18:49 < perlitch> is there an advantage to doing this:
18:49 < perlitch> `var example = require('example'), tool1 = example.tool1, tool2 = example.tool2;` 
18:49 < perlitch> over this: `var tool1 = require('example').tool1, tool2 = require('example').tool2`?
18:50 < ljharb> yes, there's no possible way the second isn't slower than the first
18:50 < ljharb> also read up on the law of demeter
18:52 < gbit86> ok people I would appreciate an answer on this
18:53 < ljharb> typically that's why people ask questions
18:53 < perlitch> thanks for the input. I'm a bit confused about how the law of demeter directly relates. are you saying its bad that the module knows it should be looking for the 'tool1' and 'tool2' exports
18:53 < gbit86> it appears like hashlib has not been updated since node 0.6.x
18:53 < ljharb> perlitch: i'm saying, you should minimize the number of times you reach outside the current scope. requireing once is always better than doing it twice.
18:53 < gbit86> so can I presume everyone is now using something else for node 0.10.3?
18:53 < ljharb> 0.10.5
18:54 < hackedy> require() caches modules so the only overhead there would be cache lookup
18:54 < perlitch> ljharb: thanks man!
18:54 < ljharb> gbit86: and there's no guarantee that something that works in 0.6 won't work in 0.10
18:54 < hackedy> but you shouls still do it the first way
18:54 < hackedy> *should
18:54 < gbit86> There is when I have tested it and it breaks
18:54 < ljharb> hackedy: right, my reason isn't overhead :-)
18:54 < hackedy> n_n
18:54 < ljharb> gbit86: ok, then i'd submit a pull request to fix it
18:54 < gbit86> Error: hashlib.node: undefined symbol: ev_default_loop_ptr
18:54 < kenperkins> gbit86: package rot is pretty common (not being updated)
18:55 < greatergreg> I replaced hashlib with ezcrypto for newer versions of node, it's suited my needs so far
18:55 < ljharb> that might be a native option
18:55 < ljharb> *module
18:55 < gbit86> well but I am positive it is a non-issue.. if this was the only way to send GET request for digest auth people would be up in arms about this
18:56 < gbit86> so I would presume first and foremost that I have just over looked whatever the current and most common method/module that is used for digest authentication as hashing is a requirement for this
18:58 < mwo> Anyone have an experience with jsdom and willing to help out a newbie?
19:00 < ljharb> gbit86: search on npmjs.org. there's bound to be tons of modules.
19:00 < ljharb> mwo: ask your question, don't ask if you can ask.
19:01 < mwo> Alright.  I've written some pretty simple HTML and node code, and cannot for the life of me get external images loaded.  No errors on the node side, but my log file shows it never getting retrieved.
19:01 < ljharb> why would you need to load images to get a DOM?
19:01 < ljharb> or are you testing load/error events
19:02 < mwo> I'm testing code that adds some images dynamically, but I can't even get static stuff to load.
19:04 < ljharb> JSDOM's job is to make a DOM, not to be a browser
19:04 < ljharb> i think you need phantomjs for that.
19:04 < mwo> meh.  OK.
19:20 < g0z> reask because if anyone answered it's not in my scroll buffer: debug question so I'm trying to set a breakpoint in a script called from a require but this doesn't work: sb('path/file.js', linenumber)
19:21 < jocafa> isaacs:  best function name evar.  (node google group)
19:26 < perlitch> i want to make a small change to backbone. its already a pull request but doesnt look like it will be adopted. do i create an npm module that requires backbone, makes the change, then exports backbone? or do I fork backbone, make the change on my fork, and specify that as the backbone module in my package.json dependencies
19:28 < bnoordhuis> perlitch: i would pick the second option
19:29 < r04r> perlitch: the first one sounds like you wont need to update your code when backbone updates, so if that works... depends on how much your change interacts with non-api behavior of backbone i would say
19:30 < perlitch> here's the exact change: https://gist.github.com/andyperlitch/5454868
19:31 < oliveiraev> LuckyBurger: https://github.com/senchalabs/jsduck
19:33 < perlitch> r04r: when you say non-api behavior do you mean internals of backbone?
19:45 < matjas> is there an easy way to debug `child_process.execFile`? like, to see what command ends up getting executed (incl. all arguments)
19:54 < bnoordhuis> matjas: strace -fe execve node script.js
19:54 < bnoordhuis> maybe add -s 2048 to that
19:54 < jondot> hello
19:59 < matjas> bnoordhuis: thanks <3
20:00 < jondot> hey ppl, just pushed a new article about parsing binary data with node.js: http://blog.paracode.com/2013/04/24/parsing-binary-data-with-node-dot-js/
20:02 < deoxxa> jondot: interesting! might i ask you to take a look-see at https://github.com/deoxxa/dissolve and https://github.com/deoxxa/concentrate if you do a part 2?
20:02 < jondot> deoxxa, wow, nice! I totally missed it.
20:03 < deoxxa> i've done basically 0 work in promoting them, so it's understandable :P
20:04 < matjas> in case anyone else is looking for a strace equivalent for OS X, it’s https://developer.apple.com/library/mac/#DOCUMENTATION/Darwin/Reference/ManPages/man1/dtruss.1m.html
20:04 < jondot> I think stream parsing is very important, node-binary had a bit of quirks (when I used too many loops) with streams. my bet was byte alignment but I never bothered to verify
20:05 < deoxxa> jondot: node-binary is *impossible* to debug
20:05 < jondot> deoxxa, exactly :)
20:05 < deoxxa> i used it rather extensively for a while, but it's just so, so hard to figure out where stuff is happening
20:06 < jondot> yep. I'd be sure to reimplement with Dissolve, it sounds like what I was looking for after getting bitten by node-binary. Eventually I worked it out by reducing my parsing logic but only after a bit of fighting.
20:06 < deoxxa> i use dissolve a lot at work
20:07 < deoxxa> we do machine-to-machine stuff, so i have to work with a lot of rachety binary protocols
20:07 < deoxxa> makes my life a lot easier
20:08 < jondot> yes, it is very useful
20:10 < jondot> deoxxa, actually this is so exciting, that I'll update the blog to include your library. if I ever have enough content for a part 2 then I'll do more. I guess a part-2 can be performance considerations - or perhaps you can write about your experience in your blog, it sounds very interesting, and I'll link you :)
20:10 < deoxxa> yay!
20:14 < jondot> deoxxa, I've just updated. hit CMD-R a few times to bust the cache :)
20:16 < deoxxa> jondot: woo!
20:24 < Cultofmetatron> is anyne else exeriencing github being down?
20:24 < arian> Cultofmetatron, yes
20:25 < Cultofmetatron> seems to be back up for me now
20:25 < Cultofmetatron> I was getting an angry unicorn for awhile
20:27 < Sofrit0> .
20:28 < fejes> Hi, is there anyone here who might help with a node.js/mongo question?
20:28 < Sofrit0> #buglabs
20:29 < deoxxa> fejes: are you familiar with zeno's dichotomy paradox?
20:30 < fejes> I know zeno's paradox.
20:30 < fejes> are you proposing I ask the question without asking the questoin?
20:30 < fejes> question?
20:30 < deoxxa> i might be!
20:30 < fejes> http://pastebin.com/TgFDyWH2
20:30 < fejes> great!
20:31 < fejes> I'm completely stuck, and really could use some help to figure out what I'm doing wrong - I just can't get results back from a collection.find()
20:31  * deoxxa looks
20:31 < fejes> I feel like I've tried every variation I can think of, at this point.
20:33 < fejes> thanks deoxxa
20:34 < deoxxa> fejes: are you sure the database is open by the time you're doing that query?
20:35 < fejes> Is there a way to tell?
20:35 < gildean> fejes: i'd suggest using a wrapper module like mongojs to make it easier
20:36 < gildean> but also, data.toArray(callback); seem wrong
20:36 < gildean> shouldn't it be callback(data.toArray());
20:36 < deoxxa> gildean: the "data" thing is actually a cursor
20:36 < fejes> that, I can test.
20:36 < deoxxa> so that should work fine
20:36 < fejes> yar.
20:36 < fejes> thanks.
20:36 < fejes> in that case, I won't test it. (-:
20:38 < deoxxa> fejes: um, hm
20:38 < fejes> ok, I'll look into mongojs
20:38 < gildean> fejes: that's what i'd do
20:38 < deoxxa> fejes: you might want to check for errors in all those places you're using callbacks
20:38 < deoxxa> (as well)
20:39 < fejes> deoxxa: I think I have checked, and if I've missed it, I'm not going to find it now.
20:39 < zamnuts> fejes, i responded to you in #mongodb, but find returns a cursor, it doesn't issue a callback
20:39 < fejes> I've been over them again and again for the past day.
20:39 < fejes> zamnuts, thanks. 
20:40 < fejes> zamnuts... is there an example you can point me to that shows how to use it correctly?
20:40 < squeakytoy> according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments <-- arguments should be an array, but when i do it in node, its an object... :<
20:41 < ljharb> it's not an array
20:41 < ljharb> it's array-like.
20:41 < ljharb> it's a special object with numeric keys and a length property.
20:41 < ljharb> if you want an array, Array.prototype.slice.call(arguments)
20:41 < wwicks> squeakytoy: it says on that page "The arguments object is not an Array"
20:41 < ljharb> but if you do Object.prototype.toString.call(arguments) you should get '[object Arguments'] which means it's not an array.
20:43 < zamnuts> fejes, http://docs.mongodb.org/manual/reference/method/cursor.toArray/
20:44 < fejes> thanks...
20:44 < fejes> unfortunately, when I do that I get the message: "callback is mandatory     at Cursor.toArray "
20:45 < zamnuts> fejes, what node module are you using?
20:45 < fejes> this is a node.js/express example that I've adapted.
20:46 < zamnuts> fejes, npm install mongo
20:46 < fejes> heh. "npm WARN package.json mongo@0.1.0 No README.md file found!"
20:46 < zamnuts> fejes, that's fine
20:46 < fejes> otherwise, I think that was already installed
20:47 < fejes> no, I can't seem to get away from the callback is mandatory error.
20:50 < fejes> brb]
20:53 < zamnuts> fejes, http://pastebin.com/3t3yccTn
20:54 < zamnuts> fejes, watch it, i have a typo on line 2 "MongoClient" it should be
20:55 < fejes> thanks Zamnuts!
20:56 < fejes> that replaces all of the require('mongodb') lines?
20:58 < ekryski> Heyo! Anyone know if zlib supports straight up zip files? I'm trying to download and unzip a file but its not working. The zip file might be malformed, just not too sure
20:58 < fejes> ok, if I understand this correctly, it creates a new connection every time call this function?
20:58 < Baastrup> Hello. I'm using sockjs to communicate between a server (node) and a client (browser). But I also need to send data from another server (node) to the first server. What would make sense here? Using POST for the server to server communication?
20:58 < Baastrup> Sockjs is intended for server-client communication, though there is a node-client library on github, but it only supports xhr-streaming
21:01 < zamnuts> fejes, MongClient has an internal connection pool. keep a reference to the "db" variable in have in that example, use that for all your collections/queries
21:01 < fejes> ah, thanks!
21:01 < fejes> that's the part I was missing.
21:02 < fejes> so I can replace the this.DB = new DB(...) in my code.
21:03 < zamnuts> fejes, yes
21:15 < mscdex> isaacbw: i just came across a method you could use to intercept hash keys for your hash module: https://developers.google.com/v8/embed#interceptors
21:19 < aslant> I'm after some info on recursion limits. I want to be sure that if I send a request to database and it errors, I can keep trying indefinitely until success
21:19 < aslant> e.g.   is this ok?               function f() { request(uri, function(err) { if (e) { f() } { else... } }) }
21:20 < aslant> sorry....               function f() { request(uri, function(err) { if (err) { f() } { else... } }) }
21:20 < aslant> spose it's easy enough to test....
21:20 < mscdex> aslant: that should work
21:21 <@isaacbw> mscdex: oh, awesome! I'll see if I can get it working
21:21 < aslant> mscdex: so it's just the same function calling itself?
21:22 < mscdex> aslant: there won't be a "recursion limit" in that case because as long as request() is async, the call stack will unwind each time
21:22 < aslant> mscdex: excuse terrible phraseology, I'm tired... my question is whether a recursion limit will only be hit when a function is calling itself? i.e. if foo() calls bar() which calls foo().... then everything's cool?
21:22 < aslant> mscdex: ahhh
21:22 < aslant> mscdex: thanks
21:27 < ekryski> Anyone had any luck unzipping regular zip files? Tried ZLib and trying out node-unzip to no avail so far
21:29 < ljharb> ekryski: shell out to `unzip`?
21:30 < ekryski> ljharb: hmm that might work. Didn't think o fthat.
21:30 < ekryski> I'll give it a try
21:31 < aslant> var i=0;   f = function(fn) { fn() },   g = function() { if (++i < 1000000) f(g) };   g()
21:31 < aslant> mscdex: RangeError: Maximum call stack size exceeded
21:31 < ljharb> aslant: if you even are in the remotest possible danger of worrying about recursion limits, you seriously need to redesign your code.
21:32 < aslant>  ljharb: really?
21:32 < aslant> ljharb: how about if I want to reach a database when it's back up
21:32 < ljharb> imo yes
21:32 < ljharb> that's not recursion
21:32 < ljharb> setTimeout(checkAgain, 100)
21:32 < aslant> ljharb: excuse me?
21:32 < ljharb> that's placing another function in the event loop.
21:33 < ljharb> your own function finishes and goes away. no recursion.
21:33 < ljharb> only conceptual recursion, i suppose.
21:35 < aslant> ljharb: perfect, it's inside setTimeout anyway of course I just wanted to be sure
21:35 < aslant> ljharb: var i=0, f = function(fn) { if (++i < 1000000) { setTimeout(f,0) } else { console.log(i) }}; f()
21:35 < aslant> ljharb: ^ no error
21:35 < ljharb> right.
21:35 < ljharb> now, polling a million times seems a really crappy way to do it, of course, but that's better without recursion at least.
21:36 < ljharb> how about your database just pings your server when it's back up?
21:36 < mscdex> aslant: yes, that will get you recursion limit issues because what you're doing is synchronous there
21:36 < AAA_awright> aslant: All recursive functions can be rewritten into a for loop that uses a queue
21:36 < mscdex> aslant: so that call stack does not have a chance to unwind
21:36 < dukedave> ljharb, incidentally, what you're doing there is (conceptually) called tail-recursion
21:36 < ljharb> hooray, PLT :-p
21:40 < aslant> ljharb: there are a number of ways a database could become unreachable - but taking just 1, the database server dies, do you know if couchdb broadcasts its having restarted?
21:40 < ljharb> aslant: i have no idea. but even if not, i'd expect you should design an utterly separate service to poll it, and ping your server when it's back up.
21:41 < aslant> ljharb: I am designing the service to poll it
21:42 < aslant> ljharb: and it is utterly separate. Its only job is to broadcast what database servers are available
21:42 < ljharb> ah
21:43 < ljharb> well, then i wouldn't bother with the upper i limit
21:43 < ljharb> i'd just infinitely poll
21:43 < ljharb> it has one job, let it do it :-)
21:46 < doug_carmichael> I'm experimenting a bit with Node (trying to get it to return a random number from PostgreSQL via HTTP), and it complains about an 'unhandled error event' in Events.js. 
21:46 < doug_carmichael> (even when I'm not using the callback method)
21:46 < aslant> mscdex: just went back and read your your comment about that code being synchronous. 1) thanks 2) er yeah. Time for a break.
21:46 < aslant> cheers all
21:47 < doug_carmichael> http://pastebin.com/aW2LEqJE
21:48 < aslant> doug_carmichael: I've not used pg but if you do pg.on('error', function() {}) -- does the error go away?
21:49 <@isaacbw> will reassigning console.log (i.e. console.log = function(...) {...}) affect all modules or only the module where it was done?
21:49 < aslant> doug_carmichael: by which I mean, does it not crash?
21:49 < doug_carmichael> Yes, it crashes.
21:49 < aslant> doug_carmichael: you've added the line I suggested?
21:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:50 < MI6> joyent/libuv: piscisaureus created branch wip - http://git.io/Kc07MQ
21:51 < doug_carmichael> yes.
21:51 < doug_carmichael> events.js:72 (unhandled 'error' event)
21:52 < Apathetic> if anyone might be able to help, http://stackoverflow.com/questions/16202761/modify-value-using-a-lambda
21:53 < aslant> doug_carmichael: there's an event emitter in there emitting an error event. The process will crash if there isn't a listener for that error event. If you've added the line I suggested and it still crashes, that means that the thing emitting the error is not the thing you've attached a listener to
21:54 < aslant> doug_carmichael: you've got more lines in the call stack when it crashes than just the top one which you pasted? (events.js 72.....)
21:57 < doug_carmichael> Thanks.. it works now with that in it.. :)
21:57 < doug_carmichael> had two node processes, and it was an address-in-use error that it was complaining about.
22:11 < Raynos> how do I listen to only loopback in node?
22:17 < gigawattz> server.listen(port, [hostname], [backlog], [callback])
22:18 < gigawattz> server.listen(8080, '192.168.0.55') as an example
22:18 < fejes> zamnuts: Thanks for your help - I managed to get it working in the end.
22:19 < zamnuts> fejes, great news :) yw
22:19 < fejes> I didn't end up using the module you suggested.
22:19 < fejes> but, you led me in the right directions!
22:19 < fejes> much appreciated.
22:19 < zamnuts> fejes, can you send me your final solution? just curious..
22:19 < fejes> part of the solution was simply a typo in the db name, which is a shameful thing to have to admit.
22:20 < fejes> but, there were also syntax errors, as well, which you helped me identify.
22:21 < zamnuts> fejes, oh ok
22:21 < fejes> yep.. give me one minute to finish cleaning up.
22:22 < fejes> http://pastebin.com/7FedR9Ff
22:22 < fejes> I'll do more cleaning up on it, but for now, it works
22:41 < mkozjak> i am getting Error: connect ENOENT with this code: http://pastebin.com/raw.php?i=4ivt1nkt
22:41 < mkozjak> can someone point me into the right direction and what i did wrong?
22:43 < mkozjak> events.js:71  throw arguments[1]; // Unhandled 'error' event
22:46 <@isaacbw> is there an easier way to get the file and line number info from an error than to parse the stack trace string?
22:48 < OliverJAsh> is it possible to share an express session across multiple instances? i have two express apps.
22:48 < OliverJAsh> i'm using connect-mongo for session storage if it's any consolation…
23:00 < mkozjak> nvm, found out :)
23:04 < aoeui> mkozjak: file/directory didn't exist?
23:04 < mkozjak> aoeui: nah, i used net.createConnection(ipaddr, port); instead of net.createConnection(port, ipaddr); :)
23:05 < aoeui> hah that would do it
23:05 < mkozjak> :)
23:05 < mkozjak> what i'm interested in is trying to open a tcp connection to multiple clients, but i don't really know how nodejs behaves with that, still
23:05 < mkozjak> asynchronous, i guess, but i don't know the impact on the system
23:07 < diminoten> hey so I want to time how long it takes for an http request to return a response, if I just subtract the time on the line after the query from the time on the line before the query will that give me a decent estimate?
23:08 < diminoten> or is there a better way to gather response time data?
23:09 <@isaacbw>  /at .*? \((.+?):(\d+):(\d+)\)/
23:09 <@isaacbw> ^ regex to grab the file and line from a stack trace, if anyone cares
23:10 < mkozjak> what i have here is: http://pastebin.com/raw.php?i=eXqZnrwH   - how do i parallelize openListen? fork or threads?
23:18 < ljharb> diminoten: since you're just comparing relative times, that's good enough.
23:20 < diminoten> okay
23:25 < Technodrome> var dog = {}; 
23:25 < Technodrome> dog.bark = function () { alert("Woof!"); }; 
23:25 < Technodrome> is there any other way to define this and get the same result?
23:26 < deoxxa1> Technodrome: var Dog = function() {}; Dog.prototype.bark = function bark() { alert("Woof!"); }; var dog = new Dog(); dog.bark();
23:27 < nlf> aw, that's exactly what i just typed
23:27 < nlf> character for character identical
23:27 < deoxxa1> ha
23:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:27 < deoxxa1> too slow!
23:27 < deoxxa1> or if you don't like "new": var dog = Object.create(Dog.prototype); Dog.call(dog); dog.bark();
23:31 < mkozjak> what is the most efficient way to parallelize function execution (from the while loop) in node.js?
23:31 < deoxxa1> mkozjak: depends what the function is doing
23:31 < mscdex> TechnoCat: var dog = { bark: function() { alert("Woof!"); } };
23:31 < howdynihao> when i say multidimensional array sequence generator what do you guys expect ?
23:31 < mkozjak> deoxxa1: http://pastebin.com/raw.php?i=eXqZnrwH openListen function
23:31 < deoxxa1> howdynihao: time travel
23:32 < deoxxa1> well not time travel exclusively
23:32 < deoxxa1> i'd settle for hyperdimensional travel
23:32 < ljharb> Technodrome: don't use alert. use console.log
23:32 < howdynihao> dang
23:32 < mscdex> plutonium.js
23:33 < mscdex> capacitor.on('fluxing', function() { accelerate(88); });
23:33 < wwicks> howdynihao: corporate america
23:34 < ljharb> howdynihao: something overengineered?
23:35 < deoxxa1> mkozjak: looking now
23:35 < mkozjak> deoxxa1: thanks :)
23:35 < deoxxa1> mscdex: i hope that's an absolute speed
23:35 < deoxxa1> mscdex: maybe differentiate between accelerateTo and accelerateBy
23:37 < deoxxa1> mkozjak: that looks fine to me
23:38 < deoxxa1> mkozjak: there are some things i'd do differently inside the openListen function though
23:38 < mkozjak> deoxxa1: but blocks on the first ip from the file
23:38 < mkozjak> deoxxa1: which ones? :)
23:38 < deoxxa1> mkozjak: take a look at the "pipe" method on readable streams
23:38 < mkozjak> ok
23:39 < deoxxa1> mkozjak: the only place i see that "blocking" is when it's opening the sockets, and that's going to be way less than a second
23:39 < mkozjak> lemme try again
23:41 < mkozjak> deoxxa1: you are right, the socket is opened, it's just that 'append' is not creating the file if it's not already there, _i guess_
23:43 < mkozjak> hmm, it's not writing anything to the file, and it really should..
23:43 < mkozjak> it's writing ok to the first one and not to the second one
23:51 < ericelliott> doesn't the express app emit a 'listening' event when you call app.listen()?
23:54 < ericelliott> I'll take that as a 'no'.. oh well. I guess I'll just use http.createServer()
23:57 < mkozjak> deoxxa1: i have put 'console.log("putting to log " + ipaddr);' after the 'logstream.write(data.toString());' line, and it only outputs 'putting to log 192.168.1.101' all the time; other ip isn't echoed, ever
23:58 < mkozjak> deoxxa1: netstat says both are connected
23:59 < mkozjak> deoxxa1: ignore me, my bad!! works :)
--- Log closed Thu Apr 25 00:00:41 2013
