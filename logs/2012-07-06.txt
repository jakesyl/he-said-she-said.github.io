--- Log opened Fri Jul 06 00:00:01 2012
--- Day changed Fri Jul 06 2012
00:00 <@isaacs> i need like 2 days alone hibernating with code after a conf.  totally draining, all that socializing.  it's fun, but i'm not cut out for it.
00:00 <@isaacs> tomorrow i'm going to head into the office, probably
00:00 <@isaacs> i like to show my face once a week or so
00:01 < Raynos> im up north somewhere tomorrow
00:01 < tim_smart> If someone wants to review a refactor I did to my redis work queue for node https://github.com/tim-smart/node-rqueue/tree/feature/redundancy#readme
00:08 < jsepia> Hey, sorry to crosspost, but I'm wondering if anyone with Node+Socket.IO can give me any tips on this: http://stackoverflow.com/questions/11353277/what-is-the-proper-way-to-use-socket-io-callbacks-within-classes-in-node-js
00:08 < jsepia> * I meant: with Node+Socket.IO experience
00:11 < octane--> has anyone here successfully implemented an automatic uglify or closure compile from their server.js?
00:17 < TimeTurner> jsepia: var self = this; as the first line within MyServer.prototype.start function
00:17 < TimeTurner> self.clientCount++
00:18 < TimeTurner> I'm not sure that using constructor functions for configuration is the best option but that's your call
00:20 < jonmarkgo> anyone here used Apricot for screen scraping?
00:20 < jonmarkgo> Having some selector issues
00:20 < jsepia> TimeTurner: I remember trying something similar with no success, but I'll try again and see what happens
00:21 < jsepia> TimeTurner: If constructor functions are not the best approach, how would one go about developing a module that can create multiple server instances?
00:23 < jsepia> TimeTurner: Okay, when trying to access self.clientCount, I get: ReferenceError: self is not defined
00:25 < CIA-93> node: Tim Macfarlane v0.8 * r0dba28b / lib/readline.js : readline: fix for unicode prompts - http://git.io/io9YOA
00:26 < othiym23> owen1: so when your I/O callback is processing, your app isn't running
00:29 < othiym23> owen1: that's why it's important for you to make sure that you're using process.nextTick to break up the work when you've got a long-running operation
00:48 < DTrejo> .
00:49 < DTrejo> anyone have a script that takes a list of contributors out of a git repo and formats it into markdown with links to each person's github profile?
00:55 < trave> sounds like a task you have signed up to do :]
00:56 <@Nexxy> DTrejo, you have 24 hours. Go.
00:56 < DTrejo> hehe ;)
01:09 < tim_smart> Nexxy: That was rather generous
01:09 <@Nexxy> tim_smart, well I figure you know maybe he has things to do
01:10 < tim_smart> 20 minutes fool, or I pity you.
01:10 <@Nexxy> can we just skip to the pity?
01:14 < DTrejo> yes
01:39 < mateodelnorte> isaacs, is there any way to install a local tarball file from package.json? i've been using postIntstall to do a 'npm intall bla.tgz' but that doesn't appear to work with the latest npm. I get a warning that it's skipped.
01:39 < owen1> othiym23: ok. so when my callback is being processed my app isn't running. cool. but what about the processing of the io operation itself (getting data from the db, saving a file, etc)? how is that being executed without interfering with the main thread?
01:42 < octane--> has anyone successfully run an uglifier/minifier compiler in server.js? 
01:49 < wltsmrz> Server.js?
01:49 < wltsmrz> I think 'bastard' module automatically minifies using uglify
01:49 < wltsmrz> (If that's what you mean)
01:52 < octane--> wltsmrz:  thanks
01:54 < wltsmrz> (But I'm sure that accounted for this http://tinyurl.com/84d2cg7)
01:55  * octane-- pretends to understand
01:55 < wltsmrz> https://github.com/Weltschmerz/Lactate/blob/master/benchmark/results.md
01:58 < octane--> wltsmrz:  do you recommend a minify module?
02:00 < wltsmrz> Personally I minify using uglifyjs (installed globally) and serve the preminified scripts without having a server do it on the fly. It's less convenient to be sure. But if you're gzipping anyway it isn't a huge deal.
02:01 < octane--> wltsmrz:  thanks, that helps
02:05 < KingDosser> Hey Guys. I have some namespaces. Is it possible to have code outside the namespaces say a socket.on('setNickname' ...) so I don't have to do it in each namespace ?
02:09 < KingDosser> anyone?
02:09 < wltsmrz> You want to predefine your callbacks?
02:09 < KingDosser> Are you talking to me?
02:09 < wltsmrz> function callback(){}; socket.on('setNickname', callback); 
02:10 < wltsmrz> I'm trying to understand what you want, yes.
02:10 < KingDosser> Okay I am making a push server. I have multiple namespaces subject and question
02:10 < KingDosser> Am I able to have some code outside of these namespaces that socket.sets a username?
02:12 < wltsmrz> function callback(){}; socket.on('setNickname', function() { return callback.apply(socket, arguments) }); 
02:12 < KingDosser> can I show you my current code and see how I might integrate them?
02:13 < wltsmrz> Show for everyone else please. But I have to get busy now sorry.
02:13 < KingDosser> Oka
02:13 < KingDosser> http://pastie.org/private/nswsir0a4y9qwoxaqo4a for anyone who is interested
02:37 < iyp> What's the remote address i should add in git if I'm pushing to joyent?
02:38 < iyp> joyent as a hosting provider 
02:43 < vicapow> anyone know how I can access pixel data directly in gm for node?
02:47 < timoxley> vicapow don't think so, you might have better luck with https://github.com/learnboost/node-canvas
02:50 < vicapow> timoxley: just was hoping it was also possible with gm. guess not :(
02:52 < tim_smart> KingDosser: https://gist.github.com/c4b17960bcb9bdf25796
02:53 < KingDosser> What have you done here tim_smart?
02:53 < tim_smart> Or something similar, I'll quickly update
02:57 < tim_smart> KingDosser: https://gist.github.com/6ee906f8955d137dbe31
02:57 < tim_smart> Something like that
02:58 < tim_smart> I think that was what you were asking
02:59 < tim_smart> Nesting scopes can have a performance hit on your memory and cpu usage if that is going to be high traffic.
02:59 < KingDosser> Well I was asking that once the user connects to the whole node server, is there a way to do setUsername for the whole socket and not for each namespace or will it persist over both?
02:59 < KingDosser> They weren't meant to be nested?
03:00 < KingDosser> Basically there is a subject page and there are questions on the page, if you click on a question then you join a question room so you can get pushed new answers
03:00 < KingDosser> (when you are on the subject page, you are in the subject room
03:01 < tim_smart> KingDosser: I haven't used socket.io, but I would assume socket.set() persists across namespaces.
03:01 < tim_smart> If it doesn't that would be a bad design decision.
03:01 < KingDosser> Yeah sweet.
03:02 < KingDosser> Didn't think that would happen till just now haha
03:04 < thealphanerd> http://jsfiddle.net/Ede2v/
03:04 < thealphanerd> oops
03:04 < thealphanerd> wrong copy past
03:04 < thealphanerd> sory
03:04 < KingDosser> tim_smart: How does this RoomListener work?
03:05 < tim_smart> KingDosser: setupRoomListener?
03:05 < KingDosser> Yup
03:05 < KingDosser> Just to make sure im getting it right
03:05 < tim_smart> It does nothing different to what you had before.
03:06 < tim_smart> Just adds a listener to the socket.
03:06 < KingDosser> I see. Is setupRoomListener some kind of reserved function
03:06 < KingDosser> Im not familiar with Listeners
03:06 < tim_smart> KingDosser: Listener === socket.on('someevent, listenerCallback)
03:07 < KingDosser> I see
03:07 < KingDosser> So Node automatically knows what to do with it cause it has Listener in its name?
03:09 < tim_smart> Err
03:10 < tim_smart> A listener is a instance of require('events').EventEmitter
03:10 < tim_smart> Is has the methods on, removeListener, emit etc.
03:10 < tim_smart> *It has
03:11 < KingDosser> oh okay
03:11 < KingDosser> can you tell me why this does not console.log http://pastie.org/private/xzlslcc7r1moltlrl4vkcg ?
03:12 < KingDosser> actually dw
03:12 < KingDosser> it does
03:12 < KingDosser> sorry
03:14 < tim_smart> Hmm I find Javascript much easier on the eyes
03:15 < tim_smart> Coffeescript code blocks don't pop out enough to quickly discern what a program does.
03:16 < tim_smart> Coffeescript really needs an end statement or something.
03:16 < TehShrike> I was talking to a friend who disagreed with that - he came from Python, he was used to inferring from whitespace
03:16 < TehShrike> I don't mind JS myself
03:16 < tim_smart> TehShrike: For some reason python is a lot easier to read than coffee
03:16 < TehShrike> Oh really?  I haven't really used Python, I'm interested to hear your reasoning
03:19 < TehShrike> Looking at it as objectively as I can, it looks like CoffeeScript is better.  However, I don't mind the extra characters involved in JS that much, and I don't want to alienate any JavaScript coders from anything I might publish.
03:20 < KingDosser> tim_smart - It actually turns out that socket data is namespaces (i.e. username)
03:21 < tim_smart> KingDosser: So you can't share between namespaces?
03:21 < KingDosser> Nope. Doesn't appear to work. "null has entered the question"
03:22 < KingDosser> (For questions)
03:22 < KingDosser> But Subject is definitely setting it
03:22 < tim_smart> KingDosser: Show me you current code again
03:22 < KingDosser> https://gist.github.com/1ea5f561d1c5ebbe442a
03:22 < tim_smart> I think you might have a scope issue if the code is the same as before
03:23 < KingDosser> Do i need to set it outside of the namepspaces?
03:23 < KingDosser> Cause that was my original question
03:24 < tim_smart> OK, not sure what the problem is. You will need to do some more research on socket.io sessions.
03:24 < tim_smart> I think socket.io has some good docs somewhere.
03:24 < KingDosser> oh great. their documentation is terrible
03:24 < KingDosser> on their website its not good
03:26 < owen1> in a desperate attempt to understand how can node make async operations without using another thread, i am reading the man page of select_tut(2) - http://www.kernel.org/doc/man-pages/online/pages/man2/select_tut.2.html
03:27 < tim_smart> owen1: It does use threads in some instances.
03:27 < TehShrike> owen1: oh, there are other threads
03:27 < owen1> if anyone understand any of that and is brave enough to explain it to a 5 years old - please do it now!
03:27 < TehShrike> But they don't interfere with your JS
03:28 < owen1> so when i make an async i/o call, there is another thread, but i don't see or care about it?
03:28 < tim_smart> owen1: Only for filesystem stuff at this stage I think.
03:29 < tim_smart> On *nix it uses libeio
03:29 < tim_smart> (libuv uses it that is)
03:29 < tim_smart> Basically just a thread pool
03:29 < __peterbraden> are there any c++ extension writers on the channel that might be able to suggest how to debug this? https://github.com/peterbraden/node-opencv/issues/9
03:30 < owen1> tim_smart: so what about a db call? or http call? how is it possible to do it and not interfere with the main thread?
03:31 < tim_smart> owen1: Using a event loop
03:31 < tim_smart> And some form of select
03:32 < owen1> tim_smart: so event loop + select allows u to execute 2 things at the same time without threads?
03:32 < tim_smart> When the fd representing that tcp connection changes state, it will then take action.
03:33 < tim_smart> And when that action is done, the loop resets and it continues to monitor the other fd's.
03:33 < tim_smart> Lay man's terms that is.
03:33 < tim_smart> I'm not that experienced writing event loops to be honest.
03:33 < owen1> tim_smart: i am sorry i don't understand the terminology. file discriptor and state..
03:33 < owen1> let me google..
03:33 < tim_smart> Let me code a simplified event loop...
03:36 < TehShrike> owen1: asynchronous things happen in other threads.  Your JS runs in its own thread.  Whenever you do an async i/o thing, that gets handled by some other part of the computer, and your callback function gets called whenever it finishes.
03:36  * owen1 reading in wikipedia about file discriptors
03:37 < owen1> TehShrike: so when i call an async i/o this i/o is being executed in ANOTHER thread. not the main thread and the callback is executed in the MAIN thread.
03:39 < TehShrike> Pretty much.  Your JavaScript is unaffected until your callback function is run when the async stuff is finished up.
03:39 < tim_smart> owen1: Basically a event loop is: while (fd = select()) { dosomestuff(fd) }
03:39 < owen1> TehShrike: NODE USES THREADS! finaly.
03:40 < tim_smart> Where select is a blocking call that only returns when something changes.
03:41 < tim_smart> owen1: Only because there are no usuable async file system syscalls
03:41 < TehShrike> Sure, it'd be nice if the OS would handle that
03:41 < tim_smart> owen1: Node doesn't use threads for network io
03:41 < TehShrike> But most languages aren't set up to make asynchronous calls like JavaScript is, so it hasn't come up a lot before now
03:42 < TehShrike> Maybe that will change at some point.  That'd be cool.
03:42 < tim_smart> TehShrike: I think windows we don't use threads, iocp supports file system I think.
03:42 < owen1> so why did ryan compare nginx to apache and said that nginx DON'T use threads and therefor is faster? 
03:42 < TehShrike> owen1: because spawning a new thread for each incoming request can get expensive
03:43 < tim_smart> owen1: Node doesn't use threads in the application layer.
03:43 < owen1> TehShrike: but u just said that node is spawing a new thread for i/o stuff.
03:43 < owen1> not in the app level, but in the os somewhere
03:44 < owen1> thread takes memory and cpu so it should be the same as multi-threaded app, no?
03:44 < owen1> unless node's threads are more efficient?
03:45 < tim_smart> owen1: Node doesn't spawn a thread each time you want to read a file, it re-uses them as a thread pool.
03:45 < owen1> tim_smart: oh. so there are 5 threads that are being reused?
03:46 < tim_smart> Probably more than that, but that is the idea.
03:46 < tim_smart> But the are used ONLY for things that don't already have a async api.
03:46 < owen1> tim_smart: ok. and what if there are many many i/o stuff? isn't it going to block?
03:47 < tim_smart> owen1: It will never block your application, no. They might get queued or something though.
03:47 < tim_smart> That is why you use callbacks in node.
03:47 < owen1> tim_smart: oh
03:48 < owen1> tim_smart: so my app can handle a lot more. but the os might queue some stuff
03:48 < owen1> since the thread pool might be busy.
03:49 < tim_smart> owen1: Yes. It means you can continue to handle incoming requests over http, while the thread pool is in the background churning away.
03:49 < owen1> tim_smart: is there a way to tell if the thread pool is over active and add some threads?
03:50 < tim_smart> owen1: It is automatic, but I'm sure the fs module has a few methods and constants for that stuff.
03:51 < owen1> also, u said that for http calls, the thread pool is not used?
03:51 < tim_smart> Yes, because *nix has async network apis.
03:52 < tim_smart> Well node itself doesn't use threads to get the data, but the kernel might.
03:54 < tim_smart> I'm no kernel hacker, so I can't explain how the async write() and read() calls work.
03:54 < owen1> so the main difference between node and other languages like ruby/java is that in the APP LEVEL there is only 1 thread.
03:54 < owen1> (in node)
03:54 < tim_smart> Yes
03:54 < tim_smart> And the only way to block it is with cpu intensive things.
03:55 < tim_smart> Anything slower than ram is basically non-blocking in node.
03:55 < owen1> so nginx is using *nix async network api to avoid creating a thread per requestL
03:55 < owen1> ?
03:55 < tim_smart> Not sure about nginx, but I am pretty sure that is the case.
03:57 < owen1> thanks for the insights. i feel a bit better. i am going to talk about node next week and i know people will ask me this question.
03:57 < tim_smart> Well good luck with that
03:58 < owen1> i'll just say that there is a thread pool that node uses in an efficient way. and the main thread is never blocked.
03:58 < tim_smart> Make sure you say the thread pool is only there because things like file system don't have async api's yet.
03:59 < owen1> and the event loop is the entity that recieve and process the i/o calls and convert them into callbacks.
03:59 < owen1> tim_smart: oh.
03:59 < owen1> tim_smart: do u have any example to an http anysc api
03:59 < owen1> ?
04:00 < tim_smart> owen1: At what level? syscall or in node?
04:00 < owen1> i don't know (: i am trying to understand how can a computer run 2 things at the same time without thread..
04:01 < owen1> and it seems like in the future that will be the case for every i/o. not just http.
04:02 < owen1> so it's seems like a good thing to understand
04:03 < owen1> "Compared to the Apache model, there are a lot less threads and thread overhead, since threads aren’t needed for each connection; just when you absolutely positively must have something else running in parallel and even then the management is handled by Node.js."
04:04 < tim_smart> owen1: Basically it justs polls some file descriptions to see if something has changed, and if it sees a change it then notifies you.
04:04 < tim_smart> *descriptors
04:05 < tim_smart> Linux has `epoll` which is a efficient way of polling for changes on file descriptors.
04:05 < tim_smart> A file description represents a tcp connection etc.
04:05 < tim_smart> *descriptor
04:06 < owen1> so when i make an htttp call to a remote server, epoll listen to the tcp connection(fd) and when it changes, epoll calls the callback node gave him?
04:06 < tim_smart> Well epoll isn't that high level, libuv has a bit of magic for mapping it to the callback.
04:06 < owen1> oh
04:06 < tim_smart> libuv + node
04:07 < owen1> so libuv keeps a table of all the addresses in memory of the callbacks?
04:08 < tim_smart> owen1: The node.js c++ code that binds everything to the v8 engine keeps track of the callbacks etc.
04:09 < owen1> tim_smart: ok. so thanks to the polling we avoid threads. in the case of http calls. do u think that in the future similar thing will happend with db calls and fs calls?
04:09 < tim_smart> owen1: Most databases these days are over tcp, so node doesn't use a thread pool for those.
04:10 < owen1> sweed. epoll to the rescue
04:10 < owen1> sweet
04:10 < owen1> so only read/write to the filesystem is the black sheet
04:10 < tim_smart> Who knows when and where we will see async fs
04:10 < owen1> sheep
04:12 < owen1> btw, isn't the browser works with event loop as well?
04:12 < TehShrike> I'm hoping for better fs.watch() support on Windows, but I'm not holding my breath :-P
04:12 < tim_smart> Quite a lot of graphical interfaces use a event loop.
04:12 < owen1> when i register to event with js client side, the event loop listen to the user, right?
04:13 < tim_smart> owen1: Hmm, I know gtk uses a bunch of file descriptors for event registration and triggering.
04:14 < __peterbraden> I'm having issues building 0.8.1 on my ubuntu box: https://github.com/joyent/node/issues/3649
04:14 < tim_smart> In the browser, when you call button.addEventListener it probably maps to a similar system
04:15 < owen1> tim_smart: awesome. thanks a lot!
04:15 < owen1> now i can try read the man page for select..
04:17 < tim_smart> owen1: You mean epoll?
04:17 < owen1> http://linux.die.net/man/2/select
04:18 < tim_smart> __peterbraden: sys/types.h is part of gnu C
04:19 < tim_smart> Do you have build-essential installed?
04:20 < __peterbraden> ah
04:20 < __peterbraden> so
04:20 < __peterbraden> looks like my packages are screwed
04:20 < tim_smart> :)
04:20 < tim_smart> Ubuntu, its been a while. I dumped you for arch.
04:21 < __peterbraden> seriously, I may have to reinstall the OS
04:32 < othiym23> __peterbraden: that seems extreme
04:32 < __peterbraden> it's got to the point where I have so many package errors I'm gonna just declare bankruptcy and start again.
04:34 < othiym23> __peterbraden: lemme take a gander at your issue
04:35 < __peterbraden> othiym23 sure - https://gist.github.com/3058105 thanks
04:35 < othiym23> __peterbraden: apt-get install build-essential should be a good start
04:36 < __peterbraden> othiym23 - see that gist - that literally doesn't work!
04:36 < othiym23> ah! hold on
04:37 < othiym23> OK, can you gist me your /etc/apt/sources.list?
04:39 < __peterbraden> othiym23 - I just added it to that gist
04:57 < othiym23> __peterbraden: OK, so what happens when you run apt-get update?
05:00 < __peterbraden> othiym23 nothing, but I got impatiant and am running do-release-upgrade :s
05:11 < othiym23> __peterbraden: heh OK, good luck
05:11 < othiym23> it might have been as simple as just getting dpkg to back out whatever weird state APT got itself into
05:17 < mattrobenolt> chrisdickinson: +1 for the redispump
06:00 < cconstantine> heyo
06:00 < cconstantine> just started using chrome 20.0.1132.47 and socket.io is now throwing errors
06:00 < cconstantine> anyone else seeing it?
06:01 < ljharb> since when is chrome 20 out?
06:01 < cconstantine> the error is "Could not establish connect. Receiving end does not exist."
06:01 < cconstantine> *shrug*
06:01 < ljharb> i've got 19 here
06:01 < cconstantine> I'm on ubuntu if that helps.  I might be on the dev channel
06:01 < cconstantine> not sure how to check
06:02 < cconstantine> yup, I'm on google-chrome-stable
06:02 < ljharb> "about google chrome" should tell you
06:02 < ljharb> hm, i just got update server not available
06:02 < cconstantine> it doesn't say anything about channels
06:03 < cconstantine> well... socket.io appears to be working anyway, but that's... troubling
06:04 < ljharb> chrome's always unstable until a .0.1 release
06:04 < ljharb> ah yes, my chrome's up to 20 now too
06:05 < cconstantine> try going to nodevent.com and look in the console 
06:05 < cconstantine> please?
06:05 < roly> nothing shows up in the console
06:06 < ljharb> consoles empty on safari and chrome
06:06 < cconstantine> weird
06:06 < miyu> hello
06:06 < cconstantine> okie, googling the error gets a bunch of people complaining about extensions... maybe one of them didnt' like the update
06:06 < cconstantine> thanks :)
06:07 < miyu> hi
06:07 < ljharb> yeah, chrome breaks everything all the time
06:07 < miyu> .
06:07 < cconstantine> so "it's you not me" and i don't need to worry :)
06:22 < pecke01> cconstantine: socket.io works for me in our apps with the latest Chrome
06:23 < pecke01> cconstantine: I am on this version of chrome as well 20.0.1132.47
06:25 < cconstantine> interesting
06:26 < cconstantine> and I forgot a key point of debugging
06:26 < cconstantine> I get that error on every page I visit
06:26 < cconstantine> I kinda doubt google.com has an exception in it
06:35 < mexpolk> Does somebody knows what is going on with toolbox.no.de?
06:36 < mexpolk> Is there any alternatives to it?
06:40 < owen1> find . -name '*.js' | xargs wc -l => 266241    does this number make sense? number of js lines in node.
06:41 < zipp|remote> You're still trying to find the number of lines of code in Node? :P
06:41 < owen1> zipp|remote: you'r not sleeping?!
06:41 < zipp|remote> Uhh :x Nope.
06:41 < zipp|remote> owen: what about you?! :P
06:42 < owen1> zipp|remote: i did find the secret for node and i can tell you all about thread pool, epoll and event loops.
06:42 < zipp|remote> owen1: Well; that's pretty awesome at least :D
06:43 < owen1> zipp|remote: node uses thread pool for async thread i/o, but not for http i/o. for the last type it's using epoll to monitor the fd (sockets)
06:43 < owen1> and database calls is similar to http. it open sockets so it's also super efficient.
06:45 < roly> anyone remember that module that shows statistics for your code?
06:46 < zipp|remote> owen1: Ahh wicked :) I knew about the socket stuff because I've run into max fd errors before :X
06:48 < owen1> zipp|remote: wait. i think i had simlar issue. i opened files for writing and never closed them and got error that i have too many open files. is this the same issue?
06:49 < zipp|remote> owen1: Yep. You had what's called a "file descriptor leak"
06:49 < zipp|remote> You can get around it (on *nix at least) by increasing the number of files your node-running user can have open
06:49 < ljharb> or you can just fix your code and close the descriptors
06:50 < owen1> my problem was i made http call to a server that can take snapshots of urls (with phontomJS). this server streamed back the image. i never listened to 'end' event and never closed the files..
06:50 < ljharb> sounds like you have your solution
06:51 < owen1> ljharb: yeah. already solved it. but the memories will hunt me for long time(:
06:56 < wiherek> hi
06:56 < wiherek> is there any reason for using express instead of just connect when building a single-page app?
06:57 < wiherek> (we don't use any of express' routing / views capabilities)
06:59 < zipp|remote> idk, I just write html to the raw socket for a single static page. It's like hello world
06:59 < wiherek> yea, we kind of do it the same just client side\
07:00 < owen1> wiherek: why do u need connect? why not using http.createServer?
07:00 < wiherek> owen1: i was thinking 'middleware' :)
07:00 < owen1> wiherek: why do u need middleware?
07:01 < owen1> node's purpose is to make it eassy to create servers
07:02 < wiherek> as im looking into connects middleware, probably for naught. maybe basicauth, urlencoded, logger
07:02 < owen1> wiherek: the new npm website is using node. not express or connect
07:05 < zipp|remote> You guys know what the max memory Node can use in 0.8.1? Is it still the like 1.7 GB limit of V8?
07:15 < wiherek> what tools do you use to keep node up to date?
07:15 < ljharb> git?
07:16 < ljharb> check out the latest version, and re make/configure/install
07:17 < wiherek> yea.
07:22 < zipp|remote> Doesn't substack have a module for node versioning?
07:24 < wiherek> git worked perfectly
07:24 < wiherek> does npm update all the modules?
07:24 < zipp|remote> https://github.com/creationix/nvm
07:31 < Glenjamin> hello, is there a recommended way to run bin scripts from dependencies?
07:32 < Glenjamin> for example, I've installed db-migrate, which provides a db-migrate command, but I either have to globally install, or run ./node_modules/.bin/db-migrate
07:33 < tim_smart> Glenjamin: Nothing wrong with running ./node_modules/.bin/*
07:33 < tim_smart> Or you can add it to your PATH, or install globally.
07:35 < Glenjamin> tim_smart: yeah, just seems a bit verbose :)
07:35 < Glenjamin> something like bundler's "bin" command would be ace
07:35 < [AD]Turbo> hola
07:35 < Glenjamin> you can almost do it with the "scripts" property in package.json, but not quite
08:40 < bsr_> is this a good place to ask about child_process spawn issues?
08:41 < milani> bsr_, here is the right place but not many devs around now.
08:41 < bsr_> yeah, the hazards of working at night
08:46 < bsr_> I'm trying to spawn a mysqldump, and it works great when dumping localhost.  When I want to use node to open a ssh tunnel to dump a remote host the spawned mysqldump complains that the user I'm using to dump with can't connect via localhost; if I console.log the command and its arguments to see what it's theoretically attempting, I can copy and paste that into a shell and it works great.. any ideas?
08:51 < ljharb> try 127.0.0.1
08:51 < ljharb> for mysql, localhost means connect via a socket, and 127.0.0.1 means connect via tcp
08:53 < bsr_> I am using 127.0.0.1, but it somehow gets lost in the spawn
08:55 < bsr_> this is the command as console.logged to me "mysqldump -h127.0.0.1 -uXXXUSRXXX -pXXXPASSWORD --quick --default-character-set=utf8 --extended-insert=FALSE --complete-insert --skip-comments --no-create-db  -P 31000 XXXDBNAMEXXX"
08:55 < bsr_> all the XXX have been replaced obviously
08:55 < ljharb> try ##mysql i guess
08:55 < bsr_> that command works when I just pasted it into bash, mysql seems to be working right
08:57 < bsr_> it's only with the "var mysqlDump = spawn("mysqldump", [ <blah>, <blah>], process.env);" that has issues, and only when not connecting to localhost
09:08 < czzarr> is there a way to create a stream from a variable? I would like to watch the value of a variable and have it emit event (or call a callback) when the value changes
09:08 < czzarr> the variable would be an integer
09:29 < Industrial> How is JamJS different from Ender?
09:38 < Hounddog> just a question... does anyone know if there is a deployment system allready developed using nodejs? i mean something like capistrano or such
09:43 < Hounddog> i don't think it might be too complicated to create a language agnostic deployment tool via nodejs hmmm...
10:00 < RLa> http://ariya.ofilabs.com/2012/07/lazy-parsing-in-javascript-engines.html <- does it give any benefits at all?
10:04 < RLa> isn't js parsing relatively cheap?
10:08 < Hounddog> am thinking of creating a language agnostic deployment tool hmpf
10:13 < nlogax> How do I generate the Node.js Xcode project?
10:13 < tim_smart> nlogax: Hrm, what are you trying to do?
10:14 < nlogax> tim_smart: Generate an .xcodeproj, seems the tools are there but I don't know what the incantation is
10:15 < tim_smart> nlogax: ./configure is hooked up to gyp
10:16 < tim_smart> I think gyp has some sort of special sauce.
10:27 < nlogax> tim_smart: Yeah can't find anything there. Maybe there is a "set yourself up for development" for noobs kind of post somewhere? :)
10:34 < tim_smart> nlogax: https://github.com/joyent/node/blob/master/configure#L417
10:35 < tim_smart> nlogax: I think you can set the -f flag to 'xcode'\
10:37 < nlogax> tim_smart: Hmm, that doesn't seem to be exposed..? I'll try adding it, thanks :)
10:39 < xippi> heya, i need some help because i have strange problem and i don't have any clue whats happening. somehow sessions are not saved to redis anymore when i start socket.io, when i comment socket.io part they work. code is here http://pastebin.com/pMGkHZDm btw this code worked at some point and stopped after db crash
10:40 < nlogax> tim_smart: There we go, thanks!
10:44 < nlogax> I wonder if it would make sense to do the platform check for 'darwin' as well, and use xcode in that case. Or if there are people who want to work on those things but do not have it installed (if it even requires Xcode/dev tools to be installed to be able to create the project files?)
10:46 < TrahDivad> Hi ppl. I'm trying to learn Node.js from a Rails background and I have a question: how do production projects handle database migrations? I've seen node-migrate that looks like Rails migrate for relational-databases but only supports MySQL, and then I've read about the "magic" of NoSQL/MangoDB automatic migrations.
10:47 < TrahDivad> The problem is that I don't see a way of migrating a Mongo database data with a field "name" into two separate fields "first_name" and "last_name".
10:47 < TrahDivad> Can someone give me a hint?
10:48 < TrahDivad> From what I understand, Node.js does not have any frameworks for doing custom data migrations on MongoDB and other NoSQL databases. Is that true?
10:49 < tim_smart> TrahDivad: I would just make a node script to do it.
10:50 < TrahDivad> tim_smart: ok, that's what I thought. Thanks for the confirmation!
10:50 < tim_smart> Use some regex or something, wouldn't take long to code.
10:51 < nlogax> If only I knew what the -f flag is called so I could add it to the OptionParser as something nice :D
10:51  * nlogax never finds anything at google code
10:52 < nlogax> Ah, "formats", makes sense
11:23 < lulzilla> how do you know when all data has been written to a socket?
11:32 < dob_> Where can I get help with everyauth?
11:32 < Industrial> dob_: probrably through the github ticketing system and / or a mailing list if there is any on the github site
11:41 < tim_smart> lulzilla: For a individual write?
11:41 < lulzilla> yea
11:41 < tim_smart> write accepts a callback last time I checked.
11:42 < tim_smart> Other just check if it returned true
11:42 < tim_smart> *Otherwise
11:42 < lulzilla> I mean, for the client
11:42 < lulzilla> how does the client know the server has written all the data?
11:43 < tim_smart> lulzilla: client.on('end') ?
11:43 < lulzilla> somehow not triggering
11:43 < lulzilla> strange
11:43 < tim_smart> Is the server sending eof?
11:44 < lulzilla> I expect it to, it's a standard http server
11:45 < tim_smart> lulzilla: HTTP has lots wierd quirks in terms of keep alive and pipelining 
11:45 < lulzilla> hmmm let me look around
11:46 < lulzilla> thanks tim
11:46 < tim_smart> lulzilla: Do you know what headers it is sending you?
11:46 < lulzilla> I can see the result, yes
11:46 < lulzilla> have to .toString() the buffer
11:46 < tim_smart> If you gist the header somewhere, I can give a better pointer.
11:48 < lulzilla> it's ok, let me look around. thanks man.
11:48 < lulzilla> oh btw, what does VM stand for in the node VM module?
11:48 < tim_smart> virtual machine
11:49 < lulzilla> i see
11:51 < RushPL> when I have separate builds of node, how to assure that a node binary loads its libs from a proper directory?
11:56 < epron> hello guys. I am fairly new to node.js. I am trying to do some scraping on some data that are paginated. The URL takes a page_num argument. However I am not sure how I can aggregate the results that come async since I don't know how many pages I'll have to scrape in the first place. Any ideas?
11:58 < RLa> use a queue or process next page after previous one is finished
11:58 < dominictarr> epron, add them to an array
11:59 < dominictarr> and you'll need some way to know when you are on the last page, of course.
12:00 < epron> dominictarr: I now when I am on the last page when I try to parse a specific parse in the JSON but it's undefined
12:00 < epron> my code is here: https://github.com/attheodo/katina_node/blob/master/katina.js
12:01 < epron> i need to call scrapeReviews incrementing the page_num and stop when that page has no reviews
12:02 < epron> i tried calling scrapeReviews after parseReviews is finished, but since they don't complete in order the loop stops before I actually have all the data
12:02 < dominictarr> why do you readFile before you start parsing the reviews?
12:03 < epron> because while developing, I don't want to keep connecting to Apple
12:03 < epron> jsut dumped it locally
12:03 < epron> you can ignore it
12:03 < dominictarr> okay,
12:03 < dominictarr> first of all, I'd like to point you to request
12:04 < dominictarr> https://github.com/mikeal/request
12:04 < tuhoojabotti> \o
12:04 < dominictarr> you don't need to do on('data',...
12:04 < dominictarr> every one uses request.
12:04 < epron> ok
12:04 < epron> I will modify it to use request, but that's not my problem 
12:05 < epron> I am trying to get accustomed to the async flow
12:05 < dominictarr> no, I'm just mentioning it because you've just started.
12:05 < epron> sure, thanks for that
12:05 < epron> Just finished O'Reilly's book on Node
12:05 < dominictarr> yeah, what you want to do is pass scrape reviews a callback
12:05 < epron> it covered the native request client so I started with it
12:06 < dominictarr> make scrapeReviews call the callback(err, reviews) 
12:06 < dominictarr> /err will be null if there is no error
12:06 < dominictarr> that is the nodejs way.
12:06 < epron> okay
12:07 < dominictarr> parseReviews is sync once you take out readFile
12:07 < dominictarr> then you need a loop to iterate over the pages, right?
12:07 < epron> yes
12:07 < epron> but it's parseReviews that decides if this is the last page
12:09 < dominictarr> hang on, gonna gist something
12:09 < epron> sure, thanks
12:12 < nooga> hi
12:12 < nooga> is it a good idea to put a socket server and a http server in one node.js script?
12:13 < TimeTurner> doesn't matter
12:13 < nooga> socket server would handle clients in "realtime" two-way communication and the http server would serve some assets 
12:13 < dominictarr> https://gist.github.com/3059801
12:13 < dominictarr> epron, ^
12:14 < dominictarr> nooga, it's a fine idea while the app is small.
12:15 < dominictarr> also you can try https://github.com/caolan/async
12:16 < nooga> dominictarr: it's a small server for an online puzzle game. It's purpose is to match waiting players with each other and pum events between matched clients 
12:16 < nooga> and the http is for serving images 
12:16 < nooga> the client is written in adobe AIR btw ;F
12:17 < wltsmrz> That's the slow version, dominictarr :)
12:18 < nooga> uh
12:19 < nooga> I also thought about some kind of binary protocol but then I replaced it with plain json since both as3 and js speak json quite well 
12:20 < dominictarr> nooga, sounds like it wouldn't be any problem for them to share a script then.
12:21 < dominictarr> if you want an easy binary protocol, just gzip a text protocol.
12:21 < nooga> thanks
12:24 < nooga> i'll try it now
12:34 < niftylettuce> anyone here have experience with Node.js on ARM?
12:35 < niftylettuce> any particular versions to use?
12:48 < epron> dominictarr: thanks a lot mate, I figured it out!
12:50 < bwen> so i'm trying to please JSLint with this peice of code: http://pastie.org/4209961
12:51 < bwen> first it wants the var to be at the beginning of the function.  then it says do not make function within loops
12:52 < bwen> and I am having a hard time seeing how to refactor this lil peice of code without exposing the "i" thru all the callbacks
12:52 < bwen> and having them returning it without fail too...
12:56 < RLa> if ((callbacks.length - 1) == i) { <- won't this hurt badly in async context
12:57 < RLa> i is defined in sync context but later used in async call
12:58 < bwen> I'm not 100% sure how to do it otherwise >_<
13:00 < RLa> you could use forEach
13:01 < bwen> but then how do I know i'm at the end of the forEach. its sync? its gonna wait for the call back?
13:02 < RLa> of course it's sync
13:02 < RLa> and look at docs, it gives you element index too
13:02 < bwen> aight
13:02 < bwen> thank you
13:05 < dob_> Someone with everyauth experience here?
13:05 < dob_> Can I tell everyauth not to create a session after registering?
13:05 < RLa> bwen, i still do not like that code, what guarantees that callback at length-1 is called last?
13:06 < bwen> RLa: well the other is not that important... would be nice but I guess not crucial
13:06 < bwen> oh do you mean that the last element might be called first?
13:06 < bwen> O.o
13:07 < bwen> i'll go with the forEach and read the doc...
13:35 < RushPL> bnoordhuis: If you have a minue could you comment on my changes in here? They also (kind of) depend on the setEncoding pull. https://github.com/joyent/node/pull/3653
14:15 < Ekyo> Hi, I'm trying to figure if there is already a way to handle connections by groups when using socket.io with redis as the connection pool
14:15 < angrauel> I just wanna say thank you... node.js saved me about two days work :) just love it!
14:20 < Ekyo> I don't want to send every notification to either 1 or all users, should I keep a list of the connections to notify in a group inside nodejs, or should I do it in redis?
14:21 < sgarrity> Is there a dedicated irc channel for less.js?
14:25 < Tobsn> isaacs, tell than john guy to fuck off ;)
14:27 < Ekyo> that channel seems so dead...
14:31 < thewanderer1> does calling setTimeout() reset/clear any previous timeouts? cause I'm seeing strange behaviour
14:31 < Tobsn> shouldnt
14:32 < Tobsn> var x = settimeout() cleartimeout(x)
14:33 < thewanderer1> hmmm ok, it might be my faulty event queue implementation then :P
14:33 < thewanderer1> thanks for clarification
14:50 < Cymor> I'm getting an EPERM error on .node-gyp/0.8.1 while trying to install the pg module. It's chmodded 777 and I'm running it as root. Any ideas?
14:58 < Cymor> Is there a way to get more debugging info out of gyp?
14:59 < owen1> what is the purpose of v8? what is v8?
15:00 < Cymor> owen1: It's a JavaScript engine.
15:00 < Cymor> https://code.google.com/p/v8/
15:01 < pringlescan> Hey guys, I have a question, I have a regex that works in Chrome and RegexBuddy but fails to work in Node. Any ideas?
15:01 < dear> test
15:01 < owen1> Cymor: a javascript engine is an app that takes javascript code and compile it to binary?
15:02 < owen1> or is it compiling it to c code?
15:02 < owen1> what happens when i type 'node server.js' ?
15:02 < pringlescan> Regex in question: http://jsfiddle.net/9YS2x/12/ 
15:02 < Cymor> owen1: Not sure. I'm still new to node.js
15:03 < owen1> Cymor: np
15:03 < Cymor> owen1: Wikipedia says it compiles to machine code
15:04 < Cymor> https://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29
15:08 < owen1> Cymor: so 'node server.js' compiles my js to assembly!
15:09 < Cymor> machine code
15:10 < leeand00> http://stackoverflow.com/questions/11354966/is-there-an-apache-module-for-connecting-node-js-similar-to-mod-jk
15:11 < owen1> Cymor: isn't machine code == assembly?
15:12 < Cymor> Assembly is a step above machine code. It's more human readable.
15:12 < owen1> Cymor: oh. so my js code is compiled to the lowest level possible
15:12  * Cymor nods.
15:13 < owen1> and it's the same for the js we write in chrome.
15:13 < Cymor> and Firefox and probably the others, too
15:14 < Jakey> owen1 why do you want to know
15:14 < bradleymeck> owen1 assembly code can generally reach 1-1 machine code translation but may represent multiple machine code operations
15:14 < Jakey> where are you from owen1
15:15 < Cymor> I'm getting an EPERM error on .node-gyp/0.8.1 while trying to install the pg module. It's chmodded 777 and I'm running it as root. Any ideas?
15:15 < bradleymeck> Cymor: full gist of the error pls
15:15 < owen1> bradleymeck: nice
15:15 < owen1> Jakey: i am just curious
15:16 < owen1> i hear about v8 all the time and decided to understand what's going on to the js code after i run it with node.
15:16 < jaha> anyone used jquery to access the loggly API? I cant seem to get it to work
15:17 < Cymor> http://pastebin.com/JDB1L7FR
15:17 < Cymor> owen1: Good questions
15:18 < Jakey> where are you from owen1
15:18 < owen1> Jakey: LA
15:18 < Jakey> you must be young
15:18 < Jakey> :)
15:20 < owen1> i would also like to know how is node interactincg with libuv and how does libuv interacting with epoll
15:20 < Jakey> you just gotta know c++ owen1
15:20 < owen1> or whatever is the secret sauce that makes node awesome
15:20 < Jakey> and look in the source
15:21 < owen1> Jakey: i guess. i can barely remember c
15:21 < owen1> so c++ might be a challange
15:21 < Jakey> yes what programming language you know
15:21 < Jakey> and how old are you i assume in your mid teenage years
15:22 < owen1> ruby, js, c#, vb6
15:22 < Jakey> welll you don't need to worry about that you just gotto learn
15:22 < Jakey> to use it
15:23 < bradleymeck> owen1: node uses libuv as bindings that are wrapped in a JS api. http://www.2bs.nl/nodeconf2012/#1 for more info
15:27 < Cymor> any ideas on my error?
15:28 < Jakey> you doing it wrong
15:29 < owen1> bradleymeck: interesting. so libuv is wrapping select() and epoll()
15:30 < owen1> "The select model is the best model for scalable network applications"
15:30 < Cymor> not sure how "npm install pg" is doing it wrong
15:31 < bradleymeck> Cymor: you could try --unsafe-perm true but thats… not recommended
15:32 < owen1> bradleymeck: what is the 'node binding' layer, between the standard library and the v8/libuv
15:32 < bradleymeck> node's c++ files
15:35 < Cymor> that seems to get me a little further. Might be missing pg dev files...
15:37 < owen1> bradleymeck: ok. do u know what does async dns means?
15:37 < owen1> "Asynchronous DNS via c-ares or uv_getaddrinfo"
15:39 < bradleymeck> async means you do not wait (block) 
15:39 < owen1> so when i make http call, the dns lookup is also non-block?
15:40 < kamo> hello all
15:42 < mmalecki> owen1: yeah, dns lookup isn't blocking
15:46 < owen1> mmalecki: niec
15:46 < owen1> nice
16:03 < dekroning> hi, I was wondering when running node.js on a ec2 micro instance, how fast it would run
16:05 < bnoordhuis> dekroning: that's a rather broad and vague question
16:05 < jocafa> java developers should not write javascript as if it were java: https://github.com/onedayitwillmake/CirclePackingJS
16:05 < jocafa> ಠ_ಠ 
16:05 < digitalcakestudi> haha!
16:06 < dekroning> bnoordhuis: true :-) however, running Rails on microinstance, is really slow, no matter what kind of app really :-)
16:06 < thewanderer1> oh shi... circle manager.
16:07 < bnoordhuis> dekroning: have you tried running it? there's a http_simple benchmark in the tarball that should give you a rough indication of performance
16:07 < bnoordhuis> dekroning: just don't go running node and ab on the same machine :)
16:07 < renier> hey, I have a replicated npm registry, with no authentication (don't want any since I need ldap authentication and couchdb doesn't have that). I'm doing authentication by putting a proxy in front of it that can do ldap auth, then it lets the requests through. However, when I try to publish something to my registry I get this message from the _design/app/validate_doc_update key/function: "Please log in before writing to the db". I think I can just edit that and
16:07 < renier> remove the check for a user, but I'm wondering if there is another way to not require log in on publish to the registry. Any hints?
16:08 < dekroning> bnoordhuis: ah cool, but your righth in order to make some clear example I should try benchmarking against same app on ruby and node.js  Thing is I wanted to run on a cheap instance, and try to write the code such a way that even with such limited resources, id still have some performance
16:14 < superjoe> hey, is there a builtin to escape a string so that I can put it into a javascript string?
16:15 < AviMarcus> if it's a var you don't need to escape it?
16:15 < superjoe> var js_code = "var generated_code_var = \"" + escape_for_js_string(some_string) + "\";";
16:15 < superjoe> I'm looking for escape_for_js_string as either a builtin or maybe even an npm
16:17 < Stephen> superjoe: You needing htrmlencode, or something more like JSON.stringify() ?
16:18 < superjoe> ah I have an idea.
16:18 < Stephen> superjoe: Generating code in that fashion is typically considered unsafe.
16:18 < superjoe> var js_code = "var generated_code_var = unescape(\"" + escape(some_string) + "\");";
16:18 < Stephen> What are you trying to escape out?
16:18 < superjoe> Stephen, don't worry, this is an exception.
16:18 < superjoe> I'll show you in a sec.
16:21 < superjoe> Stephen, https://github.com/superjoe30/import/commit/9d33b9edcd006a7f85912ce2870bf421722a430f
16:23 < Stephen> superjoe: You are right, that is an exception.
16:28 < ForSpareParts> Hi, everyone. I'm new to Node and I was thinking about making a simple blog app to hack on -- something that exposes a JSON API and then does all its interesting rendering client-side, perhaps with Ember. Any recommendations for databases, modeling tools, frameworks, that sort of thing?
16:28 < ForSpareParts> Also, any really awesome tutorials I should know about?
16:37 < mateodelnorte> Has anyone else noticed npm having issues when doing installs lately? (general slowness, erroring on installs that immediately pass when re-run)
16:52 < AndreasMadsen> I need a big big HTML file there is formatted properly and I can steal without any legal issues, any idea on where to find that?
16:53 < renier> mateodelnorte: I'm seeing problems when doing npm search. haven't tried to install anything lately
16:54 < superjoe> mateodelnorte, yes
17:20 < CrazyGoogle> hi
17:21 < CrazyGoogle> i saw in the API doku to addons we now return scope.Close(Undefined()) from the method. What exactly does it do ? What for ? Will it be compile with 0.6.x and 0.4.x ?
17:21 < CrazyGoogle> normaly we just did return Undefined()
17:22 < tbranyen> afaik you need to scope.Close whenever you HandleScope
17:22 < CrazyGoogle> or return Integer::New(1); something like that without scope.Close(...)
17:22 < tbranyen> and you can pass in the return value
17:22 < CrazyGoogle> yes, i know
17:22 < CrazyGoogle> but how do i know if i handle scope or not ?
17:23 < CrazyGoogle> scope is always there
17:23 < tbranyen> you write it in your code...
17:23 < CrazyGoogle> Handle<Value> something(...) { HandleScope scope; return scope.Close(Undefined()); }
17:23 < CrazyGoogle> should i close Scope in method that just do nothing ?
17:24 < CrazyGoogle> thats not realy obivious from doku
17:24 < CrazyGoogle> can it also harm if i close scope even if i did nothing with it ?
17:26 < CrazyGoogle> or its only has matter if i do have libuv lib with the loop and callback ?
17:29 < CrazyGoogle> tbranyen: can you just drop few more lines about : "you need to scope.Close whenever you HandleScope" ?
17:30 < CrazyGoogle> small example where we should scope.close and where not ?
17:30 -!- maxogden changed the topic of #Node.js to: node point javascript: now with more flap http://i.imgur.com/Yyg1f.gif p.s. https://new.npmjs.org
17:31 < tbranyen> CrazyGoogle: https://developers.google.com/v8/embed
17:31 < tbranyen> there is a whole section talking about HandleScope and close
17:32 < CrazyGoogle> tbranyen: thanks a lot, i will check it now
17:33 < context> anyone know any good services for getting all your logs in one place. i was attempting logentries.com but not working. this is for an app running on engineyard
17:34 < kurtgriffiths> Loggly is pretty good but can be expensive
17:34 < kurtgriffiths> We just host our own Graylog2 server
17:35 < deedubs> context: yeah I was just going to suggest you put up a Graylog2 server
17:37 <@maxogden> SubStack: http://i.imgur.com/lxvcm.gif
17:37 < deedubs> 'I cast fireball... Fireball fireball fireball'
17:38 < austinbv> any one have experience with mocha
17:39 < deedubs> austinbv: yes
17:39 < austinbv> deedubs: I am working on a stub library that freezes Time, I have one spec that I cannot move from jasmine to Mocha
17:40 < austinbv> when I freeze time with the library mocha will not time out the tests
17:40 < deedubs> seems reasonable
17:40 < tjholowaychuk> austinbv we should be referencing the timeout functions internally
17:40 < tjholowaychuk> if not then it's a bug
17:41 < austinbv> I stub the timeout functions pretty hard :)
17:41 < austinbv> honestly I am not sure why waitsFor in jasmine worked
17:42 < SubStack> maxogden: needs some fireballs shooting off
17:42 < austinbv> tjholowaychuk: are you a mocha author
17:43 < TimeTurner> the author ;)
17:43 < tjholowaychuk> austinbv yeah - we should be holding references though so you might be seeing a bug
17:43 < zipp|rawr> context: I've used Splunk before. It's pretty good, but free only up to 500 MB of log per day, and gets expensive quickly
17:44 < chrisdickinson> is there any way to set the buffer size of process.stdout (when it's a pipe?)
17:44 < austinbv> I will poke around your source is there an object I can access a timeout through or force a test to end
17:50 < Noor_> is there a sizzle-like dom parser in the npm registry ?
17:51 < DTrejo> wouldn't it be cool if...
17:51 < DTrejo> npm search mypackage
17:51 < DTrejo> gave results in this chatroom?
17:53 <@maxogden> DTrejo: spam dawg
17:53 < DTrejo> it could disable the verbose ones
17:54 < DTrejo> and things like search could send just to you in a pm
17:54 <@maxogden> if search just showed the first result
17:54 <@maxogden> itd be cool
17:54 <@maxogden> DTrejo: i commission you to build it!
17:54 < DTrejo> oh and it could link to the search on new.npmjs.org
17:54 <@maxogden> DTrejo: its name shall be `npmbro`
17:54 < DTrejo> hehe okay
17:55 <@maxogden> DTrejo: https://gist.github.com/1454545
17:55 < drudge\work> should just use queries instead, no public spamming plz
17:56 < DTrejo> maxogden: ty :)
17:58 < DTrejo> so many irc bots..
17:58 < DTrejo> and libraries
17:58 < drudge\work> irc bots are the new hello world
17:59 < CrazyGoogle> tbranyen: thanks again, great paper
17:59 < phillyDesignr> I'm trying to remove a ref from  -> categories : [ { type : Schema.ObjectId, ref : 'Category' } ] using _.reject but can't get an truth on - categoryId is req.params.id - any ideas?
18:04 < regality> has anyone had success handling errors with domains in express/connect?
18:08 < RLa> regality, creating a domain for each request?
18:08 < regality> ya
18:08 < ForSpareParts> Anyone here ever get an "unknown protocol:openssl..." error when using npm? I'm on Windows 7, if it matters.
18:08 < RLa> regality, that should work well
18:09 < regality> RLa: that's the theory, but not working in practice
18:09 < RLa> it does not catch your errors/exceptions?
18:10 < regality> no, it'll attach the domain to the request, but it doesn't make it active for subsequent middleware
18:10 < regality> so I have to do req.domain.run(function() { some async stuff....
18:10 < regality> otherwise it won't catch
18:11 < RLa> can you paste your current code somewhere
18:12 < tjholowaychuk> regality i havent looked into them much, looks like massive codesmell but how do you wrap for example say
18:12 < tjholowaychuk> in a middleware User.get(id, function(err, user){
18:12 < regality> https://gist.github.com/3061748
18:12 < regality> that's what I have so far
18:12 < tjholowaychuk> does User then have to be domains-aware and just (user){ or throw ?
18:13 < regality> that will handle the very next middleware, but nothing after that
18:13 < RLa> code looks fine
18:14 < regality> it seems like connect may have to be aware of domains, and run do something like domain.run(layer.handle) or whatever
18:14 < EyePulp> sort of a dumb question, but I'm trying to figure out a regex for stripping console.log() messages from js files I'm serving to the outside world - my pattern is… poorly done.
18:15 < tjholowaychuk> regality it would be nice if we could drop (err, res) but that would be a big shift in the community if you have to make things domain-aware
18:15 < tjholowaychuk> if adding it connect only means
18:15 < tjholowaychuk> if (err) throw err
18:15 < tjholowaychuk> vs
18:15 < tjholowaychuk> if (err) return next(err)
18:15 < tjholowaychuk> to delegat
18:15 < tjholowaychuk> delegate* then who cares
18:16 < regality> tjholowaychuk: rite, that would be a huge change, but that isn't necessary
18:16 < regality> it just needs to run each layer in the middleware in the domain for the request
18:17 < regality> any middleware errors can be handled how they are now
18:17 < tjholowaychuk> so how is that any better
18:17 < regality> what should happen is that any async methods that throw should be handled by the domain
18:17 < drudge\work> how?
18:18 < tjholowaychuk> they dont throw though
18:18 < tjholowaychuk>  they fn(err)
18:18 < regality> that would be cool if that always happened
18:19 < regality> I'm not as cool as you, I sometimes put bugs in my code that throw errorz
18:19 < tjholowaychuk> if the norm were to throw then sure but i dont see how it'll integrate well now
18:19 < RLa> can't find any existing domain handling code in connect
18:20 < RLa> but the code as is should work, everyone agree or not?
18:20 < regality> so if I try to read a property of a null value or something, then I don't want my entire server to crash with all of it's connections
18:20 < regality> I want that request's domain to handle it
18:21 < regality> or if some dumbass put a throw in a process.nextTick or something
18:21 < regality> there's a lot of ways things can go wrong
18:21 < jhsto> any idea how to authenticate ftp login?
18:21 < regality> and I don't need the entire server to puke because of it
18:21 < tjholowaychuk> regality yeah but that's kinda what node is in general haha, that's what you get for having one stack
18:21 < tjholowaychuk> pile on the codesmell
18:22 < ForSpareParts> Would somebody else mind installing bogart from npm and telling me if it works? I'm getting some kind of SSL protocol error when it gets to promised-io, and I don't know if it's me or the server. Not much about it on google.
18:22 < regality> rite, but the whole point of domains is dealing with those problems
18:22 < regality> because it's not acceptable for me to drop all file uploads and websockets on every error
18:23 < regality> ForSpareParts: I just installed bogart without any problems
18:24 < RLa> btw, what happends with a db driver that lazily creates its connection, will it be then bound to the random domain that happened to run the connection code?
18:24 < regality> RLa: it should be
18:25 < regality> when an EventEmitter is constructed, it binds itself to the current active domain
18:25 < ForSpareParts> regality: Damn. Do you have any idea why I might be having trouble? I've pasted my error here: http://pastebin.com/WpPg58V6
18:26 < RLa> but then won't the connection be destroyed when domain is dispose()d
18:26 < regality> ya, you have to watch out for that if you dispose your domains
18:27 < regality> ForSpareParts: what version of npm?
18:27 < tjholowaychuk> I definitely wouldn't want to integrate it into connect until it festers in the community more
18:27 < tjholowaychuk> maybe an experimental fork or something but meh
18:27 < ForSpareParts> regality: 1.1.33
18:28 < regality> tjholowaychuk: any ideas on maybe wrapping a method to make it work until more feedback comes?
18:28 < ForSpareParts> regality: This is what came packed in with Node. I am a supernoob -- do I need to upgrade NPM somehow?
18:28 < tjholowaychuk> regality yeah you could probably get away with wrapping connect's .use() and go from there
18:29 < regality> cool, I'll try that, and maybe get around to trying to patch connect later
18:29 < wink_> is there a way to use the new cluster api with socket.io?  i keep finding old documentation, is it officially supported by socket.io yet?
18:30 < regality> ForSpareParts: not an npm version problem
18:31 < regality> wink_: if you use a redis store to back socket.io you should be fine
18:31 < ForSpareParts> regality: argh. Any idea what sort of problem it could be? A Windows thing, perhaps?
18:32 < barnabywalters> evening all
18:32 < barnabywalters> I'm new to node.js, just been playing around with a local installation
18:32 < bradleymeck> SubStack: any chance we could white list dirs to search in browser-launcher rather than it just searching default path?
18:32 < wink_> regality: ok, i keep seeing that as the canonical example, is there any good documentation on how that works and how to make it work?
18:33 < regality> ForSpareParts: that error is weird as hell
18:33 < regality> try an running: npm cache clean
18:34 < regality> and then try to install again
18:35 < regality> wink_: check out https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
18:35 < wink_> regality: http://www.ranu.com.ar/2011/11/redisstore-and-rooms-with-socketio.html  is that the best im gonna find? :>
18:35 < wink_> ok, thanks man
18:36 < ForSpareParts> regality: It did the same thing after an npm cache clean, unfortunately. 
18:37 < regality> ForSpareParts: what version of openssl are you running?
18:38 < regality> ForSpareParts: you can check by running: openssl version
18:39 < ForSpareParts> regality: ...interesting. openssl isn't in my PATH.
18:40 < regality> hmmm, I don't know windows well enough to find out where it is
18:40 < ForSpareParts> regality: would it come with node?
18:41 < regality> ForSpareParts: what happends when you open this in your browser: https://registry.npmjs.org/promised-io/0.2.3
18:41 < stephenjudkins> i want to run the same set of functional tests using both phantomjs and selenium. is there an abstraction layer that makes this easy?
18:42 < Phoenixz> Hi there, on socket.io 0.9.6 with node 0.8, I keep (on random moments) getting Uncaught ReferenceError: io is not defined in my clients.. Checking, http://host/socket.io/socket.io.js gives 200 with an empty document, then 304, not modified... Emptying client cache and restarting server (sometimes) fixes this. Any idea on what might be the cause, and better, how to fix this?
18:42 < ForSpareParts> regality: Bad certificate warning, and after I bypass I end up on a page with a big list of packages. Dependencies?
18:42 < regality> that bad certificate might be the issue
18:42 <@maxogden> http://isaacs.couch.xxx/registry/promised-io
18:42 < zipp|rawr> Redirects to http://packages.dojofoundation.org/promised-io/0.2.3
18:43 < Stephen> Phoenixz: Sounds like your io Reference is getting garbage collected
18:43 < Phoenixz> Stephen: On server side you mean? or client side?
18:43 < Stephen> Phoenixz: Either way
18:43 < ForSpareParts> regality: if it is, is there anything I can do about it?
18:43 < Stephen> The client likely though
18:43 < Phoenixz> I imagine server side, because I am getting an empty document.. Didn't start until I upgraded node v0.6 to v0.8
18:43 < Stephen> If the client is throwing the error
18:44 < regality> ForSpareParts: is the clock on your computer correct?
18:44 < Stephen> Hmm, I see
18:44 < regality> that can screw things up
18:44 < ForSpareParts> regality: Looks fine to me.
18:44 < Stephen> How are you loading socket.io?
18:44 < regality> ForSpareParts: this may be beyond my skill level
18:45 < regality> isaacs may be your man
18:45 < Phoenixz> Stephen: Well, thats what I mean.. If I try to load the file directly, entering URL host://blah/socket.io/socket.io.js, I would get 200, with nothing, or 304, not modified (AFTER I got nothing)...  And it only happens every now and then.. Mostly RIGHT after I restart the host, then reload the page, then boom..
18:45 < ForSpareParts> regality: Alright. Thanks for your help! I'm going to try ssh into my ubuntu box, maybe i'll have better luck there.
18:45 < Phoenixz> Stephen: <script type='text/javascript' src="/socket.io/socket.io.js"></script>
18:45 < regality> ForSpareParts: good luck
18:45 < RLa> aww, why mix quotes
18:45 < Stephen> Phoenixz: No, server side
18:46 < Stephen> Wait, error is client side, right?
18:47 < Stephen> If I'm understanding right, you're loading socket.io.js from the server on the client, but you're getting served a blank document.
18:47 < Phoenixz> Stephen: I get the error on client side, but I guess its obvious, since right after the error happens, if I try to load the socket.io.js file directly, I get an empty document from the server..
18:47 < Phoenixz> Stephen: Server is not reporting any error at all
18:47 < Stephen> Phoenixz: Try adding a cache-busting parameter to the .js load
18:48 < Stephen> like &t=timestamp or something
18:48 < Phoenixz> Stephen: At server side, I load io with  io = require('socket.io').listen(app); (where app is an express server)
18:48 < Phoenixz> Stephen: trying..
18:49 < Phoenixz> Stephen: I get a HTTP 200, with empty document.. 250 bytes response, I'll pastebin the response headers
18:49 < Phoenixz> Stephen: Clearing browser cache doesnt help either, I probably have to restart the host, then it will work again.. Until I get the error again..
18:50 < Phoenixz> Stephen: http://pastebin.com/rKfdeh1C
18:50 < Stephen> Ok, so at that point it would appear that socket.io isn't quite ready for you to connect
18:50 < Stephen> Heh
18:50 <@isaacs> ForSpareParts: What's upo?
18:50 < Stephen> Can you send me the request headers too?
18:51 < Phoenixz> Stephen: well, that is the thing.. Maybe it is not ready yet, then why after... say,  30 seconds, it just stays not-ready.. ? (and without giving me an error message I can work with :)
18:51 < Phoenixz> Stephen: sure, one sec
18:51 < ForSpareParts> @isaacs: I've been trying to install bogart from npm for a tutorial. I've been getting this weird error:
18:51 < ForSpareParts> http://pastebin.com/WpPg58V6
18:51 < Phoenixz> Stephen: http://pastebin.com/gzbSEhzm
18:54 < ForSpareParts> isaacs: Do you have any idea what's wrong?
18:54 < ForSpareParts> I just got the same error under Ubuntu 12.04, so I guess it isn't a Windows thing...?
18:57 < deepkumar> who likes cars
18:57 < deepkumar> java script
18:57 < deepkumar> ferrari
18:57 < deepkumar> lambo
18:57 < deepkumar> porsche
18:57 < deepkumar> mercedes
18:57 < deepkumar> bmw
18:57 < deepkumar> who like
18:57 < deepkumar> who llike
18:57 < deepkumar> i like
18:57 < deepkumar> wawawiwa
18:58 < deepkumar> im from kazakhstan
18:58 < deepkumar> kazakhstan is the greatestttt
18:58 < deepkumar> country in the world
18:58 < deepkumar> all other countries
18:58 < deepkumar> are run by little girls
18:58 < deepkumar> kazakhstan is the greatest
18:58 < deepkumar> exporter of potassium
18:58 < deepkumar> so
18:58 < deepkumar> are there any hot girls in da house
18:58 < deepkumar> woot woot
18:59 < deepkumar> teach me how to dugee
18:59 < deepkumar> dugee
18:59 < deepkumar> duge
19:00 < Stephen> Phoenixz: Can you show me your server.listen line?
19:00 < Stephen> On the server/
19:01 < Phoenixz> Stephen:  At server side, I load io with  io = require('socket.io').listen(app); (where app is an express server)
19:02 < Phoenixz> Stephen: or is that not what you were looking for?
19:02 < tjholowaychuk> Stephen if you're using 3x "app" is just a function
19:02 < tjholowaychuk> require('socket.io').listen(http.createServer(app))
19:02 < ben_alman> is there something shorter than console.log i can use in an example like: node -e "console.log(1 + 1)"
19:03 < Stephen> Are you using Express?
19:04 < Phoenixz> Stephen: yes
19:04 < Stephen> :-)
19:04 < Stephen> Read this
19:04 < Stephen> http://stackoverflow.com/questions/11233339/express-socket-io-socket-io-client-script-is-404
19:05 < Phoenixz> Stephen: mmmmm, not sure if this applies? I have no 404 :) And the problem shows only every now and then.. Mostly, it just works okay
19:06 <@maxogden> jesusabdullah: lol @ http://search.npmjs.org/#/hoarders
19:06 < Phoenixz> Stephen: plus, I have a package.json which forces versions to be the same... I have the same problem showing up on 3 different machines
19:06 < sanitypassing> how can I get the connecting IP address from a http request object?
19:06 < RLa> ben_alman, node -p -e "1+1"
19:07 < ben_alman> nice!
19:07 < sanitypassing> I can't find it anywhere
19:07 < RLa> tho there could be an option that combines -p and -e
19:07 < Stephen> Pheonix: Basically, it would seem that a reference to either your server object or your main libraries are occassionally getting garbage collected and re-loaded.
19:07 < RLa> hm, you can use -pe to make it shorter :)
19:08 < Stephen> I'd suggest starting by adding some harder references to those top level objects
19:08 < Phoenixz> Will do so.. Thanks for the help so far
19:08 < Phoenixz> !
19:10 < Stephen> np
19:10 < jesusabdullah> maxogden: So, npm shows modules that depend on your module
19:10 < jesusabdullah> maxogden: so, hoarders is listed on the vast majority of projects on npm
19:11 < jesusabdullah> maxogden: dshaw complained to me about this at length, lol XD
19:11 < chapel> lol
19:11 < chapel> jesusabdullah: yeah I saw it on a few
19:13 < Spion_> hoarders - you've got to be kidding me.
19:13 < Spion_> 11k modules?
19:14 < Spion_> how long does that take to load, 1 year? and it needs 30 gigabytes of ram? :)
19:15 < Stephen> Actually, it's loads asynchronously, so it only takes a moment.
19:15 < Stephen> Unfortunately it takes up every available thread and locks the memory pool
19:16 < dscape> where is the source code for the nodejs website?
19:17 < tbranyen> view source
19:17 < SubStack> bradleymeck: there are a lot of things browser-launcher could be doing differently I think
19:18 < jesusabdullah> Spion_: I'll be honest, I haven't tried installing it yet
19:18 < jesusabdullah> but if I did I'm sure it would use --gangsta
19:18 < Spion_> x:)
19:19 < Spion_> while we're at it (npm site), it would be cool if http://search.npmjs.org/ browsing by tags offered various sorting options
19:19 < dscape> SubStack: jesusabdullah do you guys know where it is?
19:19 < Spion_> does it keep install count?
19:19 < jesusabdullah> where what is?
19:19 < dscape> the repo for the nodejs.org site?
19:19 < Spion_> (download count)
19:19 < jesusabdullah> oh, no idea
19:19 < dscape> i want to send in a PR
19:20 < jesusabdullah> oh
19:20 < TooTallNate> dscape: its in the node repo
19:20 < jesusabdullah> it might be in the node repo itself
19:20 <@maxogden> SubStack: this just makes a file called stdout for me https://github.com/substack/shp2json/blob/master/index.js#L57
19:20 < jesusabdullah> yeah
19:20 < dscape> TooTallNate: hello friend :)
19:20 < TooTallNate> see the doc/ dir
19:20 <@maxogden> SubStack: as opposed to actually writing to stdout
19:20 < dscape> maxogden: 
19:20 < TooTallNate> dscape: hey :)
19:20 < dscape> this is so like nodeconf, except the part where you talk F2F :P
19:20 < dscape> eheh
19:20 < Spion_> its in https://github.com/joyent/node/tree/master/doc
19:20 < TooTallNate> :p
19:21 < Spion_> i believe https://github.com/joyent/node/tree/master/doc/index.html is actually nodejs.org/index.html
19:21 < SubStack> maxogden: maybe that part changed in ogr2ogr
19:23 <@maxogden> SubStack: ahha
19:23 <@maxogden> SubStack: yes its /vsistdout/ now
19:23 <@maxogden> SubStack: so dumb
19:23 <@maxogden> SubStack: will fork
19:24 <@maxogden> https://github.com/substack/shp2json/pull/4
19:35 < ForSpareParts> Is there a way I could download and install a package listed on npm manually? Something's wrong with the way promised-io is getting served up -- it's redirecting instead of giving out JSON, and npm can't download it -- and as a result, I can't install bogart or couchdb...
19:38 < herzogharker> put it in node_modules
19:38 < ForSpareParts> herzogharker: would it be enough to just clone the git repo of promised-io into node_modules?
19:38 < herzogharker> yup
19:38 < ForSpareParts> herzogharker: kickass. thanks.
19:41 < ForSpareParts> herzogharker: It doesn't seem to realize I have it installed. It is looking for a particular version -- do I have to put it in a subdirectory or something?
19:42 < herzogharker> "it" you mean some code calling require()?
19:42 < herzogharker> or npm trying to determine deps?
19:42 < ForSpareParts> Er, sorry. npm.
19:43 < herzogharker> so you can require() it just fine?
19:43 < herzogharker> it's in the path, just wrong versiON?
19:45 < ForSpareParts> herzogharker: require() seems to work. No errors if I run a .js file with that require in it.
19:47 < herzogharker> a short term bandaid is hacking its package.json to report a different version 
19:48 < ForSpareParts> herzogharker: Huh. It looks like it's actually too *new*. So just changing the version string would fix it (for now)?
19:48 < herzogharker> possibly :)
19:48 < herzogharker> it is not something you should rely on
19:48 < herzogharker> if it really isn't installing properly from npm you need to file a bug
19:49 < ForSpareParts> herzogharker: With whom should I file a bug? promised-io on github?
19:49 < herzogharker> yup
19:49 < ForSpareParts> Alrighty. Thanks.
19:50 < ForSpareParts> Woohoo! The ugly-ass hack has succeeded! I can start learning Node now!
19:51 < H4ns> hi.   i have an application that needs to store json documents and needs atomic updates on them.  i want lightweight deployment.  is there a dbms that fits my bill?
19:51 < H4ns> (one that you'd recommend, of course)
19:56 < RLa> H4ns, assuming you want nosql, maybe is mongo atomicity enough: http://www.mongodb.org/display/DOCS/Atomic+Operations
19:58 < H4ns> RLa: that'd be enough, but i kind of shy away from a real dbms.
19:58 < RLa> one could also store json blobs in mysql innodb tables and use transactions :)
19:59 < H4ns> i'd rather not have a db server - it is a single process system.
19:59 < RLa> how much data you have
19:59 < H4ns> less than a thousand documents.
19:59 < EhevuTov> H4ns, sounds like you want a levelDB or a sqlite? What kind of queries are you going to do on it? Just a simple query to retrieve the entire doc?
20:00 < H4ns> EhevuTov: yeah, i have simple keys and never need to search
20:00 < RLa> there are also things like https://github.com/felixge/node-dirty/
20:00 < H4ns> node-dirty looks like what i want, maybe i'll look at that.
20:00 < EhevuTov> H4ns, just do a simple key:value store
20:01 < H4ns> EhevuTov: correct.  but i want it persistent and i don't want to lose data if at all possible :)
20:03 < EhevuTov> H4ns, I do know that levelDB is atomic, persistent and fast
20:03 < EhevuTov> ?and it also compresses your data if you want
20:04 < H4ns> EhevuTov: thanks - i'll study node-dirty and if the code does not convince me, i'll look at leveldb.  i take it that there are node bindings for leveldb?
20:05 < EhevuTov> H4ns, I did a levelDB benchmark in node once, but I can't find the code I did :-/ I think there's a wrapper module and a native module in NPM
20:05 < EhevuTov> it's pretty simple though
20:06 < H4ns> i don't want to write any infrastructure.  :)
20:06 < EhevuTov> H4ns, oh yeah, you're in good company
20:08 < H4ns> EhevuTov: i'm not really against writing infrastructure, but i hate to do it when i'm writing application code.  the two modes don't mix well in my head.
20:08 < H4ns> anyway, thanks for the suggestions, i should go and study.
20:08 < dmilith> RLa: redis.
20:08 < dmilith> simple, yet powerfull
20:08 < dmilith> reliable, clusterable
20:08 < dmilith> dirty and Tiny are for one process only
20:08 < EhevuTov> dmilith, true, but he didn't want a full fledged dbms
20:09 < H4ns> dmilith: i'm not asking for more.  i don't want enterprise scale.  i want reliable and easy to deploy.
20:09 < H4ns> i don't even need fast.
20:09 < dmilith> it's fast like hell, it's memory based with simple json backend AFAIR
20:09 <@Nexxy> H4ns, Node.js is embassy-grade
20:09 <@Nexxy> enterprise scale is so below us
20:10 < dmilith> ;]
20:10 < EhevuTov> lol
20:10 < dmilith> enterprise is a joke
20:10 < RLa> today we need web scale!
20:10 <@Nexxy> dmilith, one where *you* are the punchline
20:10 < dmilith> enterprise, read - biurocracy and stupidity of managments
20:10 < H4ns> i'm sorry that my problem is too small!
20:10 < razfar> hey
20:10 < RLa> enterprise = shitloads of java
20:10 < dmilith> RLa: that's why redis
20:11 < razfar> does any one know about the env variable npm_config_binroot?
20:11 < RLa> redis is nice but you still need to set up a server
20:11 < dmilith> RLa: java as a platform is ok for server side systems
20:11 < dmilith> RLa: or have a simple script to launch your code
20:12 < dmilith> I have such simple sh script bin/app which just checks for requirements, launches redis and then node svr
20:13 < dmilith> it's simple thing.. for great reliability and performance and scalability
20:13 < dmilith> node-dirty / tiny are quite nice for blogs..
20:13 < dmilith> but there's one more thing
20:13 < dmilith> if You'll accidentally launch second app with same database
20:13 < dmilith> on which is already working one version of app
20:14 < dmilith> you'll loose all your data ;]
20:14 < EhevuTov> ^
20:14 < dmilith> (node-dirty)
20:14 < RLa> i think you have problem with cluster too
20:14 < dmilith> cluster does exactly that
20:15 < dmilith> it launches multiple processes
20:15 < dmilith> which connect to databse (usually one ;])
20:15 < dmilith> so with dirty / tiny - forget about such things 
20:15 < dmilith> and care of doing backups from your db
20:15 < dmilith> suit yourself! ;] be warned
20:16 < EhevuTov> leveled has a lock IIRC so a single thread can only access at one time
20:17 < EhevuTov> levelDB*
20:17 < dmilith> EhevuTov: you can simply do such lock by yourself, and it will be base independent.. but truly.. what for? ;]
20:18 < mexpolk> fs.symlink says EEXIST even when the file does not exist! What am I missing?
20:18 < dmilith> mexpolk: doing it callback way? are you waiting for synchronous operation?
20:18 < mexpolk> I'm doing a callback
20:19 < mexpolk> fs.symlink(dest, source, function (err) { ...}));
20:20 < mexpolk> One thing that I did is to delete this file also using fs.unlink
20:21 < dmilith> interesting
20:22 < dmilith> i did simple: https://gist.github.com/c7498ffb161fbb1e5132
20:22 < dmilith> but indeed I have
20:22 < dmilith> deldagorin:[dmilith:~/Projects/Web ]: (22:21) → coffee symlink.coffee
20:22 < dmilith> { [Error: EEXIST, symlink './dupa'] errno: 47, code: 'EEXIST', path: './dupa' }
20:22 < dmilith> deldagorin:[dmilith:~/Projects/Web ]: (22:21) → ls dupa              
20:22 < dmilith> ls: dupa: No such file or directory
20:23 < mexpolk> is the exact same problem, I'm also using coffee
20:24 < dmilith> both 0.8.1 right?
20:24  * dmilith has latest stable here
20:27 < mexpolk> Yep 0.8.1
20:28 <@isaacs> ForSpareParts: Hm, yeah, I see bogart failing, too
20:28 < mexpolk> it looks like a legit bug
20:29 < ninna> what's the best way to execute several thousand REST calls?
20:29 < SubStack> I hate static typing so much
20:29 < ForSpareParts> isaacs: I logged a bug on github. Is there anything else I should do?
20:29 < EhevuTov> ninna, restify?
20:29 <@isaacs> ForSpareParts: well, it's weird, it's only on promised-io@0.2.3
20:29 <@Nexxy> SubStack, so no Node.AS3?
20:29 <@isaacs> ForSpareParts: which redirects to dojofoundation
20:29  * isaacs really regrets setting that up.
20:30 < ninna> restify will allow me to avoid the page timing out? or will I need to execute as a worker role?
20:30 < SubStack> because when people have static types they invariably write really restrictive poorly documented interfaces that have type constraints that are so fucking particular
20:30 <@isaacs> ForSpareParts: It works if you don't use https.
20:30 < SubStack> everything in v8 seems to have this property
20:30 <@isaacs> ForSpareParts: add -r http://registry.npmjs.org/ to the command
20:30 < myndzi> i don't suppose there's a plugin-less way to support udp data receipt in the browser?
20:31 < ForSpareParts> isaacs: Hm. OK. Will that be for the long term? I already got a copy of promised-io from git and changed the version number in the package.json file...
20:31 <@isaacs> ForSpareParts: no, not long term, hopefully
20:31 < ForSpareParts> ...which would be a horrible solution if I were doing anything other than hacking around with Node.
20:31 <@isaacs> i'm trying to figure out why this is busted.
20:31 < ForSpareParts> isaacs: OK.
20:31 <@isaacs> ForSpareParts: thanks for reporting it :)
20:32 < ninna> EhevuTov, restify is for creating REST APIs, correct?
20:32 < ForSpareParts> isaacs: Of course! I'm glad I have stuff working now. Node seems cool! I'm not sure what I'm going to do with it yet, but it seems cool!
20:32 < dmilith> ForSpareParts: node seems cool? node is great
20:32 < EhevuTov> ninna, sorry, I meant "request"
20:32 < ForSpareParts> dmilith: I'm new here ; )
20:33 < dmilith> ForSpareParts: so take a sit, feel like @home ;] You'll stay for sure
20:33 < ninna> EhevuTov, you mean http.request()?
20:33 < ForSpareParts> heh
20:33 < dmilith> if you're from ruby world.. I bet you'll
20:33 < dmilith> ;]
20:34 < ForSpareParts> dmilith: I recently visited ruby world. Or Rails world, I guess. I was... not thrilled. Liking this more.
20:34 <@Nexxy> you don't say.
20:34 < dmilith> ForSpareParts: I dug rails far too long
20:35 < EhevuTov> ninna, no, I was thinking https://github.com/mikeal/request
20:35 < EhevuTov> and just put calls into a loop
20:35 < ForSpareParts> dmilith: Rails seems like it'd be great if I understood every single thing it was doing. As a newbie, that's been driving me batshit. Everything is magic, constantly.
20:36 < ninna> EhevuTov, ok I've been using http.request and it times out before I am half way through. Will this do a better job of managing memory leaks also?
20:36 < dmilith> ForSpareParts: try nodejs + expressjs + redis
20:36 < dmilith> almost NO magic
20:37 < dmilith> ForSpareParts: curiously I hate rails for that magic everything
20:37 < dmilith> don't start without book for shitty language and second book for conventions
20:38 < EhevuTov> ninna, if it times out, are you doing DNS resolution? Maybe your overloading your DNS?
20:38 < ForSpareParts> dmilith: Yeah, I'll check out that stack. I notice redis is a KVS -- this is reminding me of my NoSQL deficiencies. Any really good explanations of how to do cool shit with NoSQL you could recommend?
20:38 < EhevuTov> ninna, I run requests through a DNS cache to speed up performance on my local network, but you might not have to
20:39 < ninna> EhevuTov, maybe..would it help if I turned off socket pooling? I'm going to be running the application via Heroku Cedar
20:42 < EhevuTov> ninna, good question. I've never had to do that yet, but it seems that could work. It depends on your error. What is the error msg it's timing out with?
20:43 < ninna> Heroku throws a H12 (Request Timeout) error
20:43 < EhevuTov> ninna, I think the socket pooling is per host, so unless you're creating more than 5 connections to the same host, I don't think this would be an issue, unless I'm mistaken
20:44 < ninna> EhevuTov, I'm executing thousands of requests to the same REST function, so yes they're all hitting the same host.
20:44 < dmilith> ForSpareParts: I have no problems with any base I used
20:45 < dmilith> one of my first node projects is on postgresql
20:45 < dmilith> no problems at all
20:46 < EhevuTov> ninna, ah, then yeah, you probably want to increase or get rid of http://nodejs.org/docs/v0.8.1/api/http.html#http_agent_maxsockets
20:46 < dmilith> but honestly.. I have no problems with redis 
20:46 < ForSpareParts> dmilith: Seems like there's a lot of NoSQL going on around these parts, though, and I'm just completely new to it.
20:46 < ForSpareParts> dmilith: I'm reading through their Twitter clone right now.
20:47 < ninna> EhevuTov, I'll implement that and replace my http.requests with request. thanks for your help!
20:47 < ForSpareParts> er, Redis' Twitter clone.
20:47 < EhevuTov> ninna, oh, and at a given time in your loop, check how many sockets you have open just to verify you've got a high number: http://nodejs.org/docs/v0.8.1/api/http.html#http_agent_sockets
20:47 < dmilith> ForSpareParts: it's good to use functional paradigm of writing code + callback thing.. and your code will be clean and roboust
20:47 < ninna> EhevuTov, good idea
20:48 < EhevuTov> ninna, and you can do a http.get({host:'localhost', port:80, path:'/', agent:false} to opt out of pooling
20:50 < EhevuTov> ninna, oh and check out the number of connections waiting in your queue. I'm getting this all from the same page of that doc: http://nodejs.org/docs/v0.8.1/api/http.html#http_agent_requests
21:05 < SubStack> c++ programming is so hard
21:06 < SubStack> it's pretty remarkable that anybody can get anything done in it
21:09 < jerrysv> i don't think of it as "hard", i think of it more as "unyieldy"
21:09 < SubStack> time-wastey
21:09 < jerrysv> unwieldy too
21:09 < shakefon> Afternoon all, does anyone have any strong opinions on which promises implementation (i.e. a module) is best to make use of? Or is the promises approach no longer considered a good approach?
21:09 < SubStack> pretty much
21:09 < SubStack> all I want is to be able to .pipe() audio streams around like nobody's business
21:09 < jerrysv> templates make me rage at my editor
21:09 < SubStack> c++ y u so difficult
21:10 < jerrysv> and the v8 interface is more painful than it needs to be
21:10 < SubStack> yes
21:10 < jerrysv> which is one of the reasons i like lua so much :)
21:10 < SubStack> this would probably be a breeze to implement in lua's c bindings
21:10 < jerrysv> um, there was something i saw a while back -- lemme see if i can find it
21:11 < SubStack> I've done python c bindings before and it wasn't bad
21:11 < SubStack> just need to mind the ref counters
21:11 < jerrysv> someone forked my node-judy test project a while back and implemented it with something like ffi
21:11 < jerrysv> trying to find that
21:12 < SubStack> node-ffi is pretty sweet
21:12 < jerrysv> yeah, that's the one
21:12 < SubStack> that's what I used for the original bigint
21:12 < jesusabdullah> judy?
21:12 < jerrysv> jesusabdullah: i haven't kept it up, so it won't work on modern node
21:12 < jesusabdullah> but what is judy
21:12 < SubStack> I just kept a static array of objects around and exposed the integer index to javascript
21:12 < jerrysv> judy arrays - was trying to implement something that was faster than native objects
21:13 < SubStack> hacky but easy
21:13 < jerrysv> yeah
21:13 < jesusabdullah> ah
21:13 < jerrysv> this was a little quicker
21:13 < jerrysv> jesusabdullah: http://judy.sourceforge.net/doc/10minutes.htm
21:13 < jesusabdullah> I should figure out where I put that circle queue
21:13 < jerrysv> that's the "quick" introduction
21:13 < jesusabdullah> that was a pretty neat little module
21:13 < jesusabdullah> but I know I never published it
21:14 < jerrysv> i just popped back in to join the anti-c++ choir, back to what i was doing!
21:21 < RushPL> in 0.8.0 changelog "process * process.stdin.on('keypress') will not be emitted by default, as it’s an internal API." - so how to enable it?
21:21 < RushPL> I am having problems with password prompt in the "commander" module and I would like to find out why.
21:24 < RushPL> okay I know ... process.stdin.emitKeypressEvents(handle)
21:24 < RushPL> okay, mistake, readline.emit*
21:25 < TooTallNate> RushPL: careful, that's an undocumented API ;)
21:27 < mexpolk> I need you help: fs.symlink keeps giving me [Error: EEXIST, symlink ''some/path], but the file does not exist… What ma I missing?
21:28 < mexpolk> I've tried so far v0.6.19 and v0.8.1 and no luck
21:29 < mexpolk> any ideas? please?
21:31 < RushPL> TooTallNate: well, I need my damn program to prompt for the damn password :P
21:32 < RushPL> so I spent the last hour looking for the reason why it doesn't want to
21:32 < TooTallNate> RushPL: sure, that's easy enough to do without "keypress" events, just use "data" events
21:33 < RushPL> even in rawMode terminal?
21:34 < RushPL> anyway I want to use commander module, it has lots of nice things so I'll post a bug report to vision media ;)
21:34 < TooTallNate> RushPL: right, you just need to enter raw mode, then "data" events come in immediately
21:36 < RushPL> ah, but then you would have to parse all the control sequences
21:36 < RushPL> like ctrl+c, I say use undocumented API ;-) it's not the first time it changes.
21:42 < regality> node(91742,0x7fff751b1960) malloc: *** error for object 0x100b15058: incorrect checksum for freed object - object was probably modified after being freed.
21:42 < regality> *** set a breakpoint in malloc_error_break to debug
21:42 < regality> Abort trap: 6
21:42 < regality> v0.8.1 just vomitted that up
21:42 < regality> if it means anything to anyone
21:43 < regality> back to v0.6
21:44 < yields> just a question, am i the only one who thinks that node.js standard modules need massive refactoring ?
21:44 < alex4nder> yes/no?
21:47 < mexpolk> Yes: I think they don't honor the non-blocking pattern, It would be awesome to use AMD modules as the default mechanism
21:48 < yields> mexpolk, require is fine with me because i do networking programs, what i think is a massive problem is `net`
21:48 <@Nexxy> yields, they're fine :D
21:49 < regality> mexpolk: you mean AMD loading inside of node?
21:49 < yields> Nexxy, just IMO, they can be a lot better, take the new `domain` module, it's basically a module that fixes api design problem the `err` as the first argument.
21:50 < mexpolk> Yep, it is weird to me to use var something = require('something');  Where it should be require(['something'], function (something) {});
21:51 < yields> mexpolk, why would you want to do that ? node does this for you, your module is actually a callback.
21:51 <@Nexxy> disagree!
21:53 < yields> Nexxy, with what ? 
21:53 <@Nexxy> with what mexpolk suggested re: requires
21:54 < mexpolk> yields: If you take a look to all the functions in node (specially FileSystem API), by default all the functions are asynchronous. And the pattern is async(callback). It does not make sense to me having a require that looks like sync prefixed functions
21:54 <@Nexxy> mexpolk, but they are synchronous
21:54 <@Nexxy> so what is the problem?
21:54 <@Nexxy> you shouldn't be requiring anything once your app is started
21:55 < jerrysv> gah. i could just imaging the tangle of nested callbacks for async require()'s for any decent sized project
21:55 < yields> Nexxy agree, this isn't a problem at least IMO
21:55 < jerrysv> (or anything that uses a bunch of substack's modules)
21:55 <@Nexxy> (hint: most things)
21:55 < yields> IMO one of the problems with node.js api is the `err` as the first argument.
21:56 <@Nexxy> yields, where would you prefer it? randomly interspersed with other args?
21:56 < jerrysv> yields: or perhaps you're thinking more along the line of promises?
21:57 < tanepiper> I <3 requires sync nature, it allows me to do stuff like this: https://gist.github.com/e534d13e95f70f6665dc
21:57 < yields> jerrysv, no i don't hate callbacks i just hate the `err` thing
21:57 < tanepiper> also umadbro? the err being the first argument is great - because it's consistant
21:57 < yields> which `domain` object attempts to fix
21:57 < yields> module*
21:58 <@Nexxy> lol tanepiper interesting
21:58 < mexpolk> Nexxy: yes, modules are synchronous that means that they block. Also, in many applications modules are requested after the application has started, specially those that have multiple modules in different files.
21:58 < jerrysv> tanepiper: thought of you briefly at whisky.js :)
21:58  * tanepiper hates iWantToDoSomething(argument, argument, onSuccess, onError)
21:58 <@Nexxy> mexpolk, well, don't do that and you will have a much better time :)
21:58  * tanepiper looking at Chrome's FileSystem implementation
21:58 < tanepiper> jerrysv: :D
21:58 < tanepiper> you coming to nodedublin?
21:59 < jerrysv> ha. no, i'm funemployed so a trip overseas is a little beyond my budget right now
21:59 < tanepiper> Nexxy: the nice thing about that pattern is you can guarentee loading order
21:59 < mexpolk> Nexxy: haha, of course… but to my point. They just look kind of odd, almost as if they do't fit.
21:59 < fomatin> hey im trying to do multipart upload to s3, but i'm having some problems https://gist.github.com/4bfa53589e681628f39d#file_upload.coffee
21:59 < tanepiper> so i know my http server will always be there before my app, without having to do callback soup
21:59 < fomatin> that's a snippet from the file, and then the output i get at the top
21:59 <@Nexxy> mexpolk, stick around and they will look nicer to you over time :P
21:59 < tanepiper> jerrysv: ditto, but Dublin isn't that far - 50 mins on a plane
22:00 < tanepiper> nodeconf was just too far and expensive for me
22:00 < jerrysv> tanepiper: maybe for you, it's pretty far away from portland for me
22:00 < fomatin> assume everything has already been required. Does anyone have an idea why that's happening?
22:01 < tanepiper> jerrysv: yea, that's what i[m saying :) nodeconf was on your back door
22:01 < tanepiper> most of the confs are
22:01 < jerrysv> tanepiper: you have lxjs coming up, that looks fantastic
22:02 < tanepiper> jerrysv: yea, i would go but same week as my honeymoon :p
22:02 < jerrysv> tanepiper: hm. decisions decisions
22:02 < tanepiper> and there is another js conf the week of my wedding
22:02 < tanepiper> and jsconf.eu sold out before i had a chance to grab a ticket, so looks like nodedublin :)
22:02 < tanepiper> but GUINESS! so yay
22:03 < jerrysv> i do want to make it to jsconf.eu at some point
22:03 < jerrysv> my SO was bugging me about it at jsconf :)
22:05 <@isaacs> ForSpareParts: Ok, everything should be fixed now
22:05 < ForSpareParts> isaacs: thanks!
22:06 < jesusabdullah> jerrysv: obtw sorry I couldn't make it to your friend's thing, my afternoon was surprisingly hectic for how late my flight got out
22:06 < jerrysv> jesusabdullah: it's all good. we ended up getting shut down somewhat early - cops had seen one of our bigger fireworks and drove up while we were letting off something legal
22:06 < jesusabdullah> jerrysv: oh man
22:07 < jerrysv> jesusabdullah: threatened everyone at the party (~80 people) with $250 fines if they caught us lighting off anything illegal
22:07 < jerrysv> we only set a few more off and then dispersed for other parties
22:07 < jesusabdullah> each?
22:07 < jesusabdullah> damn
22:07 < jerrysv> each
22:07 < jesusabdullah> who crawled up ppd's ass this year?
22:08 < jerrysv> jesusabdullah: they were all deputized as fire marshals, which was new this year (only the marshals could give out tickets)
22:08 < jergason> Is there a nodejs security list?
22:09 < jesusabdullah> jerrysv: I see.
22:12 <@isaacs> jergason: i@izs.me
22:13 <@isaacs> jergason: thanks in advance for discretion (i'm assuming you've found something).  we'll get it handled asap, whatever it is.
22:13 < jergason> isaacs: not to report a vulnerability
22:13 < jergason> :)
22:13 <@isaacs> jergason: oh, ok :)
22:13 < jergason> looking to secure an app
22:13  * isaacs got excited :D
22:13 <@isaacs> ohh, ok
22:13 <@isaacs> yeah, just nodejs@googlegroups.com is good, then
22:13 <@isaacs> lotta know-how on that list
22:13 < mateodelnorte> isaacs, any pointers on where to look in npm if I wanted to fork and modify so that you can specify relative folder paths to tarballs for package installation? 
22:13 < jergason> but no canonical list of things to watch out for?
22:14 < jergason> like https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-security for rails?
22:14 <@isaacs> jergason: don't trust user input of any kind, ever.  assume all user input is *at least* broken, and probably maliciously so.
22:14 <@isaacs> jergason: well... rails needs a whole group just for that ;P
22:15 < jergason> trololol
22:15 <@isaacs> (i kid, security is hard)
22:15 < jergason> :)
22:15 <@isaacs> but really, the most important thing is to validate data on the way in, before passing to back-end APIs.  and that's not new.  same with rails, php, java, whatever.
22:16 <@Nexxy> IMO you should validate/sanitize for each service individually
22:16 <@Nexxy> it's impossible to sanitize for every possible API all at once
22:16 <@isaacs> Nexxy: sure.
22:16 < jergason> Nexxy: what do you mean?
22:16 < jesusabdullah> You can have a few canned sanitizers though yeah?
22:16 <@Nexxy> e.g.
22:16 < jesusabdullah> "oh this one's gonna be an email"
22:16 <@isaacs> there's different schools of thought on all that
22:16 <@Nexxy> sanitize JSON and SQL
22:16 < jesusabdullah> "I have an app for that"
22:16 <@Nexxy> jah
22:16 <@isaacs> but like, if you expect to be getting JSON, then make sure it's json, by parsing it, and expecting that it will NOT be json a lot of the time
22:17 <@isaacs> it's more a state of mind.
22:17 <@Nexxy> like new york.
22:17 <@isaacs> when you're building things, assume that the user is trying hard to pwn you
22:17 < jesusabdullah> Yeah, like, not just because someone might be fucking with you, but because something might just be acting dumb
22:17 < jesusabdullah> like, a non-json error message
22:17 <@Nexxy> actually
22:17 <@Nexxy> everyone is always trying to pwn you
22:17 <@Nexxy> always
22:17 < jesusabdullah> herptaderp
22:17 <@isaacs> jesusabdullah: also, people are fucking with you.
22:17 < jesusabdullah> right, but not *just* that
22:18 <@isaacs> jesusabdullah: including good people!  look at what happens in here *every single time* a new js-eval bot comes in
22:18 < jergason> lol
22:18 <@Nexxy> lol
22:18 < jesusabdullah> { "BRO": "not cool" }
22:18 <@isaacs> we all try to get it to fs.unlink('/etc/passwd') and shit
22:18 < jesusabdullah> Mine's the infinite loop
22:18 < jergason> that would fill up the tubes that power the internet
22:18 <@isaacs> jesusabdullah: yeah, but that's pretty easy to detect
22:19 <@isaacs> just use a child proc, kill it after 10 seconds or somethign
22:19 < jesusabdullah> I try to infinite loop "THE BEST"
22:19 < jesusabdullah> Yeah, but usually it doesn't even get THAT far
22:19 < jesusabdullah> Usually I get a, "lolnope"
22:19 < jergason> how do you detect loops without a timeout or something?
22:20 < jergason> seems like a hard problem
22:20 < jesusabdullah> It's a short timeout
22:20 < jesusabdullah> or, like, the sandbox is just such that a setTimeout isn't something you can do
22:20 < jesusabdullah> I mean, I get creative with it
22:20 <@Nexxy> jergason, inject conditional breaks!
22:27 < Hotroot> Oh boy, switching from sqlite to mongo
22:28 <@isaacs> jergason: you just run it in a child proc, and kill it after a certain amount of time
22:28 < CIA-93> node: TJ Holowaychuk v0.8 * red7fb14 / (3 files in 3 dirs): module: add filename to require() json errors - http://git.io/GOuBQw
22:28 < Hotroot> Thank goodness the project is in it's infancy
22:28 < Hotroot> *itsw
22:28 < Hotroot> *its
22:29 < EhevuTov> Hotroot, what are you doing that you want to switch
22:29 < Hotroot> I'm writing a hacking MUD
22:29 < jesusabdullah> Hotroot: good deal
22:30 < Hotroot> Picked SQLite before because it's easy, but it isn't the right choice
22:30 < Hotroot> Was more focused on other things at the time, it's my first server
22:30 < jesusabdullah> SubStack: I'm gonna start a github project/wiki for data center tycoon tonight I think
22:30 < EhevuTov> jesusabdullah, lol that would be awesome
22:30 < jesusabdullah> SubStack: I think if we break it up into a lot of little libraries we need it might actually come together someday
22:31 < jesusabdullah> EhevuTov: both of us have discussed the game mechanics at length
22:31 < EhevuTov> jesusabdullah, instead of natural disasters like in simcity, etc. You could have the haylon system go off.
22:32 < jesusabdullah> yeah
22:32 < jesusabdullah> and instead of the ticker you have twitter
22:32 < jesusabdullah> and you start at 1993, the birth of the internet
22:33 < EhevuTov> reminds me my friend who's working on the Hipster Paperboy HTML5 game. It's a spinoff of the early Nintendo game: Paperboy, I guess
22:33 < jesusabdullah> sure
22:33 < jesusabdullah> I think yarnify will go together with this project pretty well
22:34 < Hotroot> So, I'd like to use socket.setEncoding and make it ascii, but if it exports a string, how do I prevent someone from sending a huge amount of data?
22:34 < jesusabdullah> string.length ?
22:34 < Hotroot> I can't find any form of socket.setMaxSize or anything
22:35 < Hotroot> string.length would only be useful after I have the string
22:35 < EhevuTov> Hotroot, can you not check before you send it?
22:35 < Hotroot> What prevents someone from sending me an absolutely colossal string?
22:35 < Hotroot> EhevuTov: I mean the user, to my server
22:36 < RushPL> is there a way to build GNU readline-alike interfaces in Node.JS?
22:36 < RushPL> I need a CLI shell for my program so TAB-completion etc.
22:39 < EhevuTov> Hotroot, I wonder if you could stream it in and use something like util.pump() There use to be a way of like?turning on and off your stream depending on how much you want http://nodejs.org/api/util.html#util_util_pump_readablestream_writablestream_callback
22:40 < Hotroot> Hmm
22:40 < Hotroot> Seems odd that there isn't an obvious solution. What's to prevent anyone from just sending a 20GB file or something? 
22:41 < Hotroot> I imagine getting a server to regex a 20GB could slow it down quite well
22:45 < Hotroot> Also, does socket.data go off when the incoming data starts, or when it has been fully read into the buffer?
22:46 < tnorris> Hotroot: it will fire every 16,000 chars of data, or on complete, which ever is first.
22:47 < tnorris> Hotroot: was having a similar problem: http://stackoverflow.com/questions/10489168/node-send-large-json-over-net-socket
22:47 < EhevuTov> Hotroot, set your socket.bufferSize and then do a pause(), resume(), destroy() or end() maybe?
22:48 < Hotroot> I thought socket.bufferSize was a readable attribute only 0.o
22:48 < Hotroot> That's what I was looking for
22:48 < EhevuTov> Hotroot, or, count the number of chunks you receive. If you reach N number of chunks, do an end()
22:49 < Hotroot> tnorris: "chars"? How big is said char?
22:49 < EhevuTov> Hotroot, like, on event 'data' increment i and when i reaches a certain number which is the multiplier, do an end()
22:49 < tnorris> Hotroot: characters. string characters. When you're sending serialized data over socket.
22:50 < Hotroot> What about sending raw data?
22:50 <@isaacs> Hotroot: you don't get the file all at once
22:50 < Hotroot> So bufferSize determines how large each chunk is?
22:51 < TooTallNate> RushPL: https://groups.google.com/d/msg/nodejs/bkBFEfCkVdI/7ynsqFk3U00J
22:51 <@isaacs> Hotroot: do something like this: https://github.com/isaacs/npm-www/blob/master/site.js#L35-40
22:52 < Hotroot> isaacs: This isn't for the web
22:52 <@isaacs> Hotroot: ie, pick some maximum length you'll accept.  if the user doens't send you a content-length, then return a 411.  if they send you a CL bigger than your desired size, send them a 413
22:52 <@isaacs> Hotroot: it's not?  you said "server", sorry, i got confused
22:52 < Hotroot> telnet server, it's a MUD
22:52 <@isaacs> Hotroot: oh, ok
22:52 <@isaacs> Hotroot: well, you're on your own then.  So, you get sock.on('data', function (buffer) { ... }) right?
22:53 <@isaacs> buffer.length will tell you how big that buffer is.
22:53 <@isaacs> Hotroot: use a counter.  cut them off if it's too much
22:53 < EhevuTov> isaacs, like an on event 'data' counter right?
22:53 < RushPL> TooTallNate: thanks, I will remember this. Current one liner works though ;) require('readline').emitKeypressEvents(process.stdin);
22:53 < Hotroot> The API makes socket.bufferSize seems to be a size indicator
22:54 <@isaacs> var c = 0; sock.on('data', function (chunk) { c += chunk.length; if (c > 100000) { sock.write('too big, sorry') ; sock.destroySoon() }
22:54 < RushPL> oh I also see that readline support tab completion, just not documented - looks very nice!
22:54 < Hotroot> isaacs: But at that point, the data is already received
22:54 < EhevuTov> Hotroot, have you seen this: http://nodejs.org/api/net.html#net_socket_buffersize
22:54 < TooTallNate> RushPL: sure, but don't use that code or it'll break someday :)
22:54 < EhevuTov> Hotroot, only a chunk
22:54 < Hotroot> EhevuTov: Yeah, I'm looking at that
22:55 < TooTallNate> isaacs: we need double-res versions of all the images on nodejs.org ;)
22:55 < RushPL> TooTallNate: and your module has all the stuff in it, not using readline's?
22:55 <@isaacs> Hotroot:  http://nodejs.org/api/net.html#net_socket_buffersize is for limiting the amount of buffering done for sock.write()
22:55 < Hotroot> I understand how to throttle sort of, just the core of how this works is confusing me
22:55 <@isaacs> TooTallNate: patch welcome :)
22:55 < mc> isaacs: question about that snippet you posted.. why ''+req.maxLen and not req.maxLen.toString() ?
22:55 < RushPL> TooTallNate: I am not using the stuff directly so I actually hope that "commander" guys fix it.
22:55 < Ober> ircretary: room?
22:55 < ircretary> Ober: I'm not sure what to do with that command.  Ask for help in PM.
22:55 < Hotroot> So the data arrives in chunks, and gets added to that socket's buffer
22:55 < tbranyen> mc: whats the difference?
22:55 <@isaacs> mc: because it might be null or something.  i dunno.  i just always use ''
22:56 < EhevuTov> Hotroot, the bits come in as chunked data passed a certain size. So you'd want to count the chunks and if you get past, say 1000 chunks, destroy or end() the socket connection
22:56 < Hotroot> socket.data goes off after every chunk?
22:56 < mc> oh ok, so it's just a preference thing?
22:56 < mc> i was wondering if i'd been doing something extra slow all this time
22:56 <@isaacs> mc: in this case, yes
22:56 < Hotroot> Otherwise how would I check chunk number?
22:56 < EhevuTov> Hotroot, and if you want to save memory, then use streams instead of filling up buffers
22:56 <@isaacs> mc: but i use ''+ instead of .toString() because null.toString() => throw, but ''+null => 'null'
22:56 <@isaacs> mc: and it's fewer chars than String(null)
22:56 < mc> fair enough
22:57 <@isaacs> Hotroot: so, the nature of your router etc will prevent the data chunks from being beyond a certain size
22:57 < Hotroot> EhevuTov: It's a mud, the incoming data should only be about 1 sentence in length
22:57 <@isaacs> Hotroot: ie, it won't be more than can comfortably fit in RAM or your router, for obvious reasons.
22:57 < Hotroot> I'm just worried about some jackass sending a massive file
22:57 <@isaacs> Hotroot: so, if you get >1024 bytes, cut them off
22:57 < Hotroot> isaacs: So will socket.data go off for each of those chunks?
22:57 <@isaacs> Hotroot: or whatever limit makes sense
22:57 <@isaacs> Hotroot: yes.
22:58 <@isaacs> Hotroot: however! you *might* get 1 byte at a time!
22:58 <@isaacs> Hotroot: so you can't assume that 1 data event = one send
22:58 <@isaacs> Hotroot: intermediaries are often "helpful"
22:58 < Hotroot> Blegh =/
22:58 < EhevuTov> Hotroot, you could prefix your stream with a size. Like, make the first byte of your payload the size, and if it goes over that size, then disconnect
22:58 <@isaacs> Hotroot: and they say, "well, you're sending a lot, we'll just save up 4 or 5 of these for you and send them at once.
22:58 <@isaacs> Hotroot: welcome to network programming :)
22:58 < Hotroot> EhevuTov: I have no control over the client, it's telnet
22:59 < Hotroot> So basically I have to treat data as a stream
22:59 < Hotroot> I can't just assume one send is the data they sent me, even if it's under the limit?
22:59 <@isaacs> Hotroot: write a module that takes buffers coming in, breaks them up by looking for \r\n or something, and emits 'data' events that are just the lines
22:59 <@isaacs> Hotroot: in fact, someone probably already wrote something like this for you
22:59 < EhevuTov> Hotroot, I'd do what Isaacs suggests and I'm pretty sure you want to treat it as a steam, where you increment a counter on 'data' event. Once counter gets to LIMIT, then disconnect
22:59 <@isaacs> Hotroot: maybe require('readline') can do this for you.  maybe osmething on npm
23:00 < EhevuTov> Hotroot, and if you can't find it in NPM?write your own and commit to npmjs.org :->
23:01 < Hotroot> So basically, each socket will have a buffer. On each "data" event, I add the data to the buffer. If it goes above buffer size, I kill the connection. If the data has an endline in it, I tell the buffer I want those last X bytes, and then clear those from the buffer?
23:01 < EhevuTov> Hotroot, there should be an actual 'end' event
23:01 < EhevuTov> ?.so I wouldn't think you'd need to clear anything
23:02 < TonkaTruck> Does node have any built in class pattern?  In JavascriptMVC they have a "controller" that defines static and prototype parameters.  Is this possible with require() module pattern?
23:02 < Hotroot> So socket.bufferSize is only for sending data, no?
23:02 < Hotroot> EhevuTov: Err, what?
23:03 < EhevuTov> Hotroot, Marco gave a good talk about streams recently at Nodeconf. Here's some of his examples if you want to look at code: https://github.com/polotek/nodeconf-2012-streams-talk
23:03 < Hotroot> ty
23:03 < Hotroot> If I set encoding type to string, do I still have to worry about this buffer junk, or will it wait for the string to end?
23:03 < Hotroot> Err, ascii
23:04 < TonkaTruck> Oh nevermind...felix to the rescue _again_
23:05 < EhevuTov> Hotroot, I'm not sure if I understand you correctly, but I would use streams and pipes instead of a buffer, but I'm not sure what you're doing
23:06 < Hotroot> Oh my goodness, I didn't get what "end" did until now
23:06 < Hotroot> Shit makes more sense now, haha
23:06 < EhevuTov> Hotroot, :-P
23:06 < Hotroot> I was like "no shit when they disconnect I don't have to worry about the buffer" haha
23:06 < EhevuTov> Yeah, were were talking a bit C-like earlier or something
23:07 < EhevuTov> don't have to worry about stuff like that
23:07 < Hotroot> ?
23:08 < EhevuTov> Hotroot, nvm, you were asking how you'd know when to stop
23:08 < Hotroot> So the first "data" indicates that they are starting to send something
23:08 < EhevuTov> I was trying to let you know that you don't have to look at the chars, but that an event would be emitted to let you know
23:08 < Hotroot> "end" means that that specific "file" or piece of data is done sending
23:08 < EhevuTov> Hotroot, yes
23:09 < Hotroot> "close" is what I was thinking of instead of end before
23:09 < EhevuTov> yes, two are different
23:09 < Hotroot> So if i use setEncoding "ascii", this seems to get a bit more complicated
23:10 < Hotroot> Then I would do something like finalString += currentString every "data" right?
23:10 < Hotroot> Could they ever send like half of a character or something, and then that fucks up?
23:13 < Hotroot> Also, could "end" go off before I'm done processing "data"'s final buffer? =/
23:13 < EhevuTov> Hotroot, it's incapsulated in the TCP/IP stack, so I don't know if that's possible. Your TCP/IP layer below would catch that I'd think. Probably the EthernetII frame would error
23:13 < Hotroot> Alright, good
23:14 < Hotroot> Still, do I ever have to worry about "end" going off before I'm done with the data?
23:14 < RushPL> TooTallNate: but you have to admit that your code is a terrible code duplication
23:14 < RushPL> maybe more worthwhile would be to get something stable to node core
23:14 < TooTallNate> RushPL: that *is* the code from node-core
23:14 < RushPL> well yes, hence duplication comment
23:14 < TooTallNate> RushPL: it was just never documented, and hence never supported
23:15 < RushPL> and that code probably is not going anywhere cause it is used by repl for example.
23:15 < TooTallNate> and then it broke in 0.8 when people were depending on it when they shouldn't have been
23:15 < EhevuTov> Hotroot, I highly recommend you look into streaming and piping. If you do the buffer += buffer, you're putting a lot of stuff in memory when instead you maybe could be processing it further down your pipe
23:15 < EhevuTov> Hotroot, https://github.com/polotek/nodeconf-2012-streams-talk/blob/master/upload-example2.js Maybe something like this might help
23:15 < TooTallNate> RushPL: how would it not work?
23:15 < Hotroot> I will check it
23:15 < Hotroot> EhevuTov: The thing is though, this data will be tiny
23:15 < Hotroot> Nobody is uploading anything
23:16 < Hotroot> It's telnet
23:16 < RushPL> TooTallNate: I mean, the effert *in my opinion* best spent would be to use node-core and make something stable ;) now you also get all the problems from node-core and if node-core gets fixes then you miss it ;)
23:16 < TooTallNate> RushPL: well the opposite is true actually. now this npm module can innovate at will, and not be tied down to the core logic
23:16 < Hotroot> Also, am I supposed to socket.end() after socket.write()'ing?
23:16 < RushPL> true
23:16 < TooTallNate> the general philosophy is small core, innovate in userland
23:17 < EhevuTov> Hotroot, sounds like you'll be fine just putting everything in a buffer, then. And just make something called size check() and if it's larger than the counter you've been incrementing on the 'data' event, then socket.disconnect()
23:17 < RushPL> my argument is that node will not get rid of this functionality cause it needs it ;) (unless I am mistaken, I am pretty new)
23:20 < EhevuTov> Hotroot, I could easily be wrong, but you might have to make a closure to do that counter?
23:21 < Hotroot> EhevuTov: Okay, so basically just write them to the buffer each time, doing a size check, and removing unwanted characters from the string. When end hits, I grab what's in the buffer, put it in a final string, and then clear the buffer
23:22 < Hotroot> Do only one or the other (buffer or socket) need to have their encoding set?
23:22 < Hotroot> I assume if I make a data buffer, and put strings in it, it will contain a string, and if I put data in an ascii buffer, it will convert to string?
23:23 < EhevuTov> Hotroot, I think it will be a bit something like this: https://github.com/polotek/nodeconf-2012-streams-talk/blob/master/upload-example1.js
23:24 < EhevuTov> Hotroot, instead of form.on(?) it will be like socket.on(?)
23:24 < EhevuTov> Hotroot, and notice how there's a data+=chunk, or else if you have something larger than the first chunk, you won't get it appended
23:26 < Hotroot> I'll read the multiple example now instead of shooting off questions, haha
23:26 < Hotroot> Ty all
23:27 < EhevuTov> Hotroot, yeah, beyond that, you'd basically have to show us some code and get a testbed going for us.
23:27 < EhevuTov> Hotroot, once you get it, you'll be like "That was easy" :-)
23:32 < dukiedrew> hi, anyone have experience w/ cross-compiling?
23:33 < dukiedrew> I am trying to compile for armv7 and getting errors like this: undefined reference to `v8::internal::kBlxRegMask'
23:33 < EhevuTov> dukiedrew, there's an active discussion going on in the node mailing list concerning Arm compiling
23:34 < EhevuTov> I don't know about Arm, (I cross-compiled for a PalmOS using gcc back in '98) but if you can't find an answer here, you might want to look there
23:44 < dukiedrew> EhevuTov, hmm, thanks.  It compiled mksnapshot at least this time
23:47 < dukiedrew> when i add --disable-snapshot, then node is made
23:47 < dukiedrew> sweet :)
23:47 < dukiedrew> thanks!
23:59 < dob__> How can i check if a string is in an array?
--- Log closed Sat Jul 07 00:00:27 2012
