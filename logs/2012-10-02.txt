--- Log opened Tue Oct 02 00:00:34 2012
--- Day changed Tue Oct 02 2012
00:00 < ericelliott> cryptopsy: CoverSlide That 'connect' event emitted to the client side is just relaying the socket connection event so that you can subscribe to it on the client. It doesn't matter where it comes from. Only that you can know when you're connected and do something about it.
00:01 < Soarez> hello everyone, i'm having trouble with npm login -- 'Error: conflict Document update conflict' -- can anyone help me?
00:01 < CoverSlide> exactly, because the client may not establish a valid connection
00:01 < ericelliott> cryptopsy: Check out EventEmitter docs for clarification about how .on works =)
00:04 < cryptopsy> tnx
00:05 < cryptopsy> CoverSlide: that's the dude from the js channel
00:05 < ericelliott> cryptopsy: The event API of EventEmitter is becoming fairly common. There's a similar API now in jQuery, and there's a re-implementation called EventEmitter2 (https://github.com/hij1nx/EventEmitter2)
00:05 < Soarez> I cant login on npm, to publish a module, but I can on www
00:06 < cryptopsy> nodejs can't localhost:myport but 127.0.0.1:mypot works and /etc/hosts have 'localhost 127.0.0.1', whats the problem?
00:06 < RLa> cryptopsy, how you .listen() in app?
00:07 < Soarez> I think there is a case sensitive duplicate of my user
00:07 < Soarez> Is it isaacs that maintains the db?
00:17 < cryptopsy> RLa: don't have .listen
00:17 < cryptopsy> have socket.on
00:17 < RLa> can you paste whole code somewhere
00:19 < cryptopsy> i did
00:19 < cryptopsy> 23:26:39 < cryptopsy> server-side js
00:19 < cryptopsy> 23:26:40 < cryptopsy> http://i.imgur.com/RsXeo.jpg
00:19 < cryptopsy> 23:27:21 < cryptopsy> client-side js
00:19 < cryptopsy> 23:27:22 < cryptopsy> http://i.imgur.com/nSkRn.jpg
00:20 < cryptopsy> socket.io website don't show me .listen as a method
00:21 < RLa> hm, looks fine
00:22 < cryptopsy> does socket.listen even exist?
00:22 < cryptopsy> not sure what you're talking about
00:22 < RLa> is it 'localhost 127.0.0.1' or '127.0.0.1 localhost' in hosts file?
00:22 < RLa> oh, i meant server.listen
00:26 < RLa> cryptopsy, what does ping localhost do?
00:29 < cryptopsy> i dont know where server.listen comes from
00:29 < cryptopsy> RLa: pings just fine
00:30 < cryptopsy> its :
00:30 < cryptopsy> 127.0.0.1	localhost
00:30 < cryptopsy> 127.0.0.0 0.0.0.0:1935
00:30 < RLa> that looks fine too
00:30 < cryptopsy> whats port 1935?
00:30 < RLa> no idea
00:31 < RLa> it's your hosts file
00:31 < RLa> 127.0.0.0 is network address
00:31 < RLa> what distro it is
00:31 < RLa> can you paste ifconfig output somewhere
00:32 < cryptopsy> was wondering if npm decide to add it
00:32 < cryptopsy> inet addr:127.0.0.1 
00:33 < ang3lfir3> ls
00:33 < RLa> npm won't certanly touch it
00:33 < TehShrike> isaacs: could I ask you a question about your blog post today?
00:34 <@isaacs> TehShrike: sure
00:35 < cryptopsy> what's your blog?
00:35 <@isaacs> cryptopsy: http://blog.izs.me
00:35 < TehShrike> Point number one, where you recommend using class instances instead of {} (when you have more than one) - was that in the context of C++/V8, or was that in the context of JavaScript, where you would be probably mean constructor functions by "class"?
00:36 < TehShrike> I'm guessing the former, since I wouldn't expect you to use the term "class" loosely/incorrectly, but I figured I'd check
00:36 < TehShrike> Also because I wouldn't expect switching from object-literal notation to new Constructor() to result in that big of a performance increase :-x
00:43 < CoverSlide> Classes vs POO ?
00:46 < TehShrike> isaacs: did that question make sense? X-|
00:47 <@isaacs> TehShrike: When I say "class" I mean new FooBar()
00:47 <@isaacs> TehShrike: that's what "class" means in JavaScript
00:47  * BennyLava facepalms
00:47 < CoverSlide> until ES6
00:47 <@isaacs> don't buy the fud that JS doens't have classes.  A keyword is not what "class" means
00:48 < BennyLava> oh wow, is isaacs trolling us?
00:48 <@isaacs> CoverSlide: ES6 classes are just sugary syntax
00:48 <@isaacs> nono, i really mean this.
00:48 < BennyLava> LOL
00:48 <@isaacs> consider what a "class" actually is.
00:48 < BennyLava> this is a sad day
00:48 <@isaacs> it's a language construct that you use to create multiple similar objects.  it's a special kind of object that is used only as the base for other objects.
00:48 <@isaacs> so that the system (vm, compiler, etc) can do a good job optimizing your code.
00:48 < CoverSlide> unfortunately, there are some optimizations that the class syntax does provide
00:49 < TehShrike> isaacs: so you use class/constructor function interchangeably then?  Fair enough
00:49 <@isaacs> yes.
00:49 < BennyLava> hilarious
00:49 < TehShrike> CoverSlide: ah, that's sad. I do like my curly braces...
00:49 <@isaacs> ES6 classes will be functionally equivalent to new Ctor()
00:49 <@isaacs> CoverSlide: but i am looking forward to that feature.
00:49 <@isaacs> for similar reasons to why i'm looking forward to fat-arrows
00:50 <@isaacs> it's good to declare what you're going to do.  makes it easier for the VM, easier for human readers.
00:51 < TehShrike> I'm generally down with the idea of using object-creating functions - having all objects of a certain type be created by a single function.  But inside that function I often start with an object literal and then build it out... I suppose if there are performance implications, I might want to start using new.
00:52 <@isaacs> TehShrike: i mean, it's a rule of thubm.  so benchmark it in your actual code.
00:52 < Torsten85> Could someone tell me how to achieve this 4 ruby lines in node? https://gist.github.com/de4b602a213b4b264706
00:53 <@isaacs> TehShrike: but, if you write very boring JavaScript, which pretends that it's typed, and always uses new Ctor(), and always has the same exact fields of the same types, then you get a faster program out the other end.
00:54 < TehShrike> isaacs: all right, thanks for filling me in - I hadn't heard anyone (who knew JS) call new Ctor() a "class" before, so I figured I'd ask
00:54 < CoverSlide> makes sense, although I guess it depends on the implementation. at least on v8 Object.create is fully interpreted whereas new is a language construct and would work with the internals
00:56 <@isaacs> TehShrike: i think that when programmers think "class" must use the literal language keyword "class" to be a class, then they don't really understand whata class is.
00:56 <@isaacs> TehShrike: these are the same sorts who believe that C++ added classes to C.  in fact, C always had classes.  many ways to implement them, in fact.
00:56 < BennyLava> I'm getting trolled SO HARD right now
00:57 <@isaacs> BennyLava: i'm not trolling you.
00:57 < BennyLava> well a troll wouldn't admit that
00:57 < TehShrike> I think when I hear "class" I imagine "interface"
00:57 <@isaacs> BennyLava: JavaScript has classes.  it's just that they're very flexible.
00:57 < BennyLava> I honestly cant believe someone influential like isaacs is arguing in favour of ctor functions instead of Object.create
00:57  * TehShrike eyerolls
00:57 <@isaacs> TehShrike: so, right, if you stick to the consistent interface, then you get the benefits.
00:57 <@isaacs> BennyLava: srsly?
00:57 <@isaacs> BennyLava: now i'm the one getting trolled.
00:57  * isaacs is a JavaScript old timer.
00:57 < BennyLava> yeah it shows
00:57 <@isaacs> BennyLava: I'm in favor of 'new' because I'm in favor of fast efficient programs.
00:58 < BennyLava> ..
00:58 < BennyLava> so you're complaining it's not optimised
00:58 < CoverSlide> Crockford is an advocate of Object.create, in fact he invented it because he didn't like new
00:58 < CoverSlide> a lot of the anti-new rhetoric comes from him
00:58 < TehShrike> Yeah, that's where I first/last heard it
00:59 <@isaacs> BennyLava: i don't think 'new' is all that hard.
00:59 < BennyLava> so if all you care about is speed, hey, go ahead and use ctors for the time being.. but for the love of god, don't advocate it as a general approach
00:59 <@isaacs> BennyLava: why not?
00:59 <@isaacs> BennyLava: why is Object.create() any beter than new?
00:59 < BennyLava> ctors obfuscate what yo're doing - in a prototypal language
00:59 < BennyLava> ctors don't belong in js in the first place
00:59 <@isaacs> BennyLava: how do they obfuscate what you're doing?
00:59 <@isaacs> BennyLava: a lot of things don't belong in javascript.  that's a non-statement.
00:59 < BennyLava> many smart JS gurus can tell you this
00:59 < BennyLava> it's not exactly news
01:00 < CoverSlide> this is the typical "cult of crockford" stance
01:00 <@isaacs> BennyLava: but srsly, `new Foo()` says exactly what's happening.
01:00 < BennyLava> I'm not even a crock fan
01:00 < CoverSlide> well you're repeating his rhetoric verbatim
01:01 <@isaacs> BennyLava: it says that you're implementing a prototypical child of the Foo.prototype, and then applying the Foo function to it.
01:01 < BennyLava> isaacs: in classical languages, yes. Not in prototypal languages. `Foo` isn't a blueprint in JS.
01:01 <@isaacs> BennyLava: but JavaScript is at the same time Functional, Prototypal, and Classical.
01:01 < BennyLava> LOL
01:01 <@isaacs> BennyLava: a Class is just a prototype and a constructor.
01:01 <@isaacs> BennyLava: and JavaScript has both those things
01:01 < BennyLava> No, it's is clearly NOT classical, that is your problem
01:01 <@isaacs> BennyLava: well, it's not statically typed.
01:01 <@isaacs> is that what you mean?
01:01 < BennyLava> No
01:02 <@isaacs> because when you define "class" as any kind of conceptual way that makes sense, JavaScript has it.
01:02 < CoverSlide> the new keyword was basically put there to be like Java, but then there's the whole calling-a-constructor-without-new problem which comes up
01:02 < BennyLava> you can sort 0f emulate classical patterns in JS, but the language doesn't support all of the features you'd expect from a classical language.
01:02 < BennyLava> that's why there's so many approaches to it
01:02 < CoverSlide> and the boilerplate to prevent it sucks
01:02 < TehShrike> Torsten85: does this help? http://nodejs.org/api/tls.html
01:02 < BennyLava> and none get it right
01:02 < BennyLava> because you can't
01:03 <@isaacs> BennyLava: no, you can exactly emulate it.
01:03 < BennyLava> nor shold you want to, Object.create is more straightforward
01:03 < BennyLava> and actually saud what it does
01:03 <@isaacs> BennyLava: but it's slow, and weird.
01:03 < BennyLava> says*
01:03 <@isaacs> BennyLava: new Ctor says what it does, if you know the language.
01:03 < BennyLava> Eh, the syntax is verbose
01:03 <@isaacs> says exactly what it does.
01:03 < BennyLava> and it's not optimised
01:03 < BennyLava> isaacs: again, in classical languages, yes. Not in prototypal languages. `Foo` isn't a blueprint in JS.
01:03 <@isaacs> BennyLava: so, what you're saying is, Object.create is better, except for the sytnax, and the implementation?
01:04 < BennyLava> new Foo only says what it does if Foo is a blueprint
01:04 < CoverSlide> and performance
01:04 < BennyLava> Which it's not
01:04 <@isaacs> BennyLava: but it is exactly a blueprint, though :)
01:04 < BennyLava> ..
01:04 < BennyLava> sigh. never mind
01:04 < BennyLava> I'm out
01:04 <@isaacs> BennyLava: like i said, you're saying things about static typing, not about classic vs prototypal
01:04 <@isaacs> BennyLava: the features required to be a classic language are a subset of prototypal features.
01:05 <@isaacs> BennyLava: it doens't have strict interfaces, but that's because it's loosely typed.  it doesn't have strict much-of-anything
01:06 < CoverSlide> I personally would be happier if new wasn't a part of the language, but it is. If Object.create worked faster, I would recommend it to everybody. I prefer the pattern, but I do give the disclaimer that new is still more performant
01:07 < cryptopsy> RLa: so where did you get socket.listen from?
01:07 < BennyLava> And that's ALL it has going for it. And that's just temporary.
01:07 < BennyLava> And what isaacs has been saying here is honestly very disturbing to hear.
01:07 < CoverSlide> except it's not temporary, it's here to stay
01:07 < BennyLava> Whatever.
01:07 < BennyLava> CoverSlide: the speed issue
01:07 < BennyLava> is that I meant
01:07 < BennyLava> what*
01:07 < CoverSlide> maybe maybe not
01:07 < cryptopsy> RLa: for socket i use io.connect, i don't use .listen
01:09 < BennyLava> Faith in the currently main person behind node.js destroyed in less than 5 minutes. Impressive.
01:10 < oats> Hey, so I'd like to start write my first node.js application form scratch, preferably a very simple todo list sort of thing. Any suggestions on where to start? I've found a few tutorials using frameworks, but I'd rather build the server from scratch so I truly understand whats going on before choosing a framework to work with. I've already The Node Beginner Book by Manuel Kiessling, so that is the extent of my Node.js knowledge. 
01:10 <@isaacs> BennyLava: you should be less emptionally invested in programming languages.
01:10 <@isaacs> BennyLava: seriously, what's so bad about 'new'?
01:11 < CoverSlide> my problem with modeling classical oop in js is the can of worms when people start looking for inheritance, public/private, etc. and when you try to use constructors as regular functions (which they technically are)
01:11 <@isaacs> CoverSlide: well, people shoudln't be using classic approaches where they don't fit :)
01:11 <@isaacs> CoverSlide: if you have a bunch of similar things, then classic approaches make a lot of sense
01:12 <@isaacs> oats: start with the api docs :)
01:12 < CoverSlide> one thing about crockford i don't like is he advocates agains new because he feels classical inheritance shouldn't be emulated, and yet he advocates the module pattern which does exactly that
01:12 < CoverSlide> except 10x slower
01:12 < oats> Thought I would add that I am a front-end developer who has until recently focused mostely on design. I'm hoping to delve into the server-side through node.
01:12 <@isaacs> oats: probably this is a good place to start: http://nodejs.org/api/http.html
01:12 < BennyLava> CoverSlide: slower?
01:13 < CoverSlide> module pattern is very slow
01:13 <@isaacs> CoverSlide: exactly
01:13 <@isaacs> crockford's module pattern is insane.
01:13 <@isaacs> there's absolutely no reason to use that, ever.
01:13 <@isaacs> we have better tools now.
01:13 <@isaacs> that was developed befor JavaScript was fast enough to do anything relevant with anyway :)
01:13 < CoverSlide> the only reason it exists is to have "private" variables and methods
01:13 <@isaacs> right
01:14 <@isaacs> but you can do that with node's module pattern more effectively anyway
01:14 <@isaacs> he advocates using generators rather than constructures, but CONSTRUCTORS ARE EXACTLY GENERATORS ALREADY!!
01:15 <@isaacs> BennyLava: just to be clear:
01:15 <@isaacs> BennyLava: I'm not saying "new is fast, so i begrudgingly use it"
01:15 < BennyLava> I'd be ok with that.
01:15 <@isaacs> BennyLava: i'm saying "new is both good, and common, so it is not surprising that it is fast."
01:15 < BennyLava> But the sad part is, indeed, that you aren't.
01:15 <@isaacs> BennyLava: because if I were deciding what to optimize, that would be it.
01:16 < RLa> cryptopsy, socketio.listen(server); server.listen(8080) <- from there
01:16 < BennyLava> I understand caring about efficient code. But ignoring that, `new` makes zero sense in JS.
01:16 <@isaacs> BennyLava: i just would rather not care about the language, and instead, focus on getting things done.
01:16 <@isaacs> BennyLava: who cares about "making sense"?
01:16 < TehShrike> CoverSlide: I'm with you - I prefer showing people JavaScript's OO behavior using things that don't look like what they're used to from languages with classical inheritance, just so that they don't assume that everything they know from those languages carries over
01:16 < BennyLava> Lol isaacs.
01:16 <@isaacs> BennyLava: JavaScript devs read it, know what it is.
01:16 <@isaacs> BennyLava: the interpreter runs it fast.
01:16 <@isaacs> BennyLava: it does what i want.
01:16 < cryptopsy> RLa: i dont have socketio.listen
01:16 <@isaacs> BennyLava: what does "doesn't make sense" even mean, if not those things?
01:17 < BennyLava> I already explained.
01:17 < BennyLava> Anyway, we're done.
01:17 < cryptopsy> RLa: i have var io=require('socket.io').listen(server);
01:17 <@isaacs> BennyLava: when you say "new doesn't make sense in JS", you're making a statement about BennyLava, not about JS
01:17 < cryptopsy> .listen is a method on require, not on socket.io
01:17 < oats> isaacs: thanks. I guess that would be the obvious place to start reading
01:19 < BennyLava> isaacs: honestly, I'm fairly sure we're gonna see a massive switch away from Ctors in the (near) future, so you'll see you're wrong in time. I will rest my case with that and sleep soundly! :)
01:19 <@isaacs> BennyLava: lolz.
01:19 <@isaacs> k
01:19 < RLa> cryptopsy, you paste was image, you think i would type it all char-by-char?
01:19 <@isaacs> BennyLava: that's only because well have a class keyword that desugars to new
01:19 < TehShrike> Well that's the best laugh I've had today
01:19 < RLa> you expect too much from irc people
01:19 < BennyLava> isaacs: I'm not talking about 'class'
01:19 < cryptopsy> RLa: you can type .listen(server)
01:20 < BennyLava> I'm talking about, as said before, Object.create
01:20 <@Nexxy> IRC people are great people!
01:20 <@isaacs> BennyLava: or rather, we'll keep using new, but it'll be class Foobar rather than function Foobar
01:20 < cryptopsy> RLa: you can use line number
01:20 < mscdex> Nexxy, \o/
01:20 < cryptopsy> 'listen on line x'
01:20 < TehShrike> Group hug!
01:20 <@isaacs> BennyLava: would you like to put some money on this?
01:20 < cryptopsy> isaacs: longbets.com
01:20 < BennyLava> isaacs: I would, but it's impossible to measure objectively.
01:20 <@isaacs> BennyLava: we just need a way to quantify it.
01:20 < cryptopsy> BennyLava: make a bet
01:20 < cryptopsy> the longbets website even has warren buffet
01:21 <@isaacs> BennyLava: what about: in 5 years, the top JavaScript project on github will use `new` to instantiate objects.
01:21 <@isaacs> BennyLava: i'd even give you odds.
01:21 <@Nexxy> mscdex, \o/
01:21 < TehShrike> Hah!
01:21 <@isaacs> BennyLava: $1000 of your dollars against $5000 of mine.
01:21 < ang3lfir3> new Odds("2:1")   ?
01:22 < BennyLava> isaacs: that's a terrible gamble. The top JS project might use new, and the following 99 might not.
01:22 <@isaacs> BennyLava: ok, come up with another way to measure it.
01:22 < cryptopsy> 5x multiplier, bet on 1000$
01:22 < TehShrike> You should say "the top 10 used projects on npm" or something
01:22 < BennyLava> isaacs: as I just said
01:22 < BennyLava> isaacs: I would, but it's impossible to measure objectively.
01:22 < mscdex> node.js rules!
01:22 <@isaacs> BennyLava: it's not impossible.
01:22 < cryptopsy> you can bound it
01:22 < TehShrike> mscdex: no, YOU rule!
01:22 < cryptopsy> bound it = measure objectively
01:22 < mscdex> :O
01:22 < cryptopsy> do it you sissy bitch
01:22 <@isaacs> BennyLava: i'll bet that the top 10 JavaScript proejcts in Github will use new to instantiate objects.
01:22 < BennyLava> i think it is, so don't put the burden of coming up with a way to do so on me.
01:22 <@isaacs> BennyLava: but i'm not going to give you 5:1 odds on that one :)
01:23 < BennyLava> All 10? Hah.
01:23 <@isaacs> BennyLava: since you can spend the next 5 years promoting a javascript project that doesn't :)
01:23 < BennyLava> I won't.
01:23 < BennyLava> But you know you can pretty much only lose a bet like that.
01:23 < TehShrike> Yeah, probably best to say 5/10 of the top projects or something
01:23 <@isaacs> which is why i wouldn't give you very big odds on that one.
01:23 < TehShrike> Since that would be pretty significant proof that new had not died off
01:23 <@isaacs> BennyLava: how "only"?
01:23 <@isaacs> BennyLava: would you give ME 5:1 odds against?
01:23 < BennyLava> TehShrike: that's true
01:24 < CoverSlide> jQuery uses new
01:24 < mscdex> C++ uses new
01:24 <@isaacs> so, today:
01:24 < CoverSlide> Bootstrap uses new
01:24 < CoverSlide> node uses new
01:24 < CoverSlide> top 3 already
01:24 < TehShrike> underscore or coffeescript?
01:25 < mscdex> lodash!
01:25 <@isaacs> prototype, scriptaculous, mootools-core, raphael, cappucino, yui3, cufon, jquery, node, phonegap
01:26 <@isaacs> top 10 js libs.
01:26 <@isaacs> 100% use new.
01:26 < TehShrike> Top 10 on github?
01:26 <@isaacs> yeah, but "interestingness"
01:26 < BennyLava> isaacs: I did say that I understand caring about efficient code - meaning, as long as Ctors are faster, I wouldn't blame anyone for using them over alternatives.
01:27 <@isaacs> BennyLava: but you also asserted that people will move away from it in the near future.
01:27 <@isaacs> BennyLava: i'm saying, that won't happen.
01:27 <@isaacs> BennyLava: our children will use 'new' in their javascript programs.
01:27 < BennyLava> Yes, because I'm assuming Object.create will be heavily optimised.
01:27 < BennyLava> It's the way of the future, after all.
01:27 <@isaacs> BennyLava: why?
01:27 < BennyLava> theres a reason it was added.
01:27 <@isaacs> BennyLava: is it just that it's different?
01:27 < CoverSlide> only if people use it
01:27 <@isaacs> i mean, it's more flexible.
01:27 <@isaacs> i sue Object.new
01:28 <@isaacs> er, Object.create
01:28 < nicholasf> isaacs: I'm standardizing on using new Foo(). Is there something wrong with that? (just curious)
01:28 <@isaacs> there's no way to do classic inheritance without it
01:28 <@isaacs> nicholasf: no, that's great :)
01:28 < BennyLava> heh
01:28 < TehShrike> nicholasf: short answer, no
01:28  * astropirate slaps BennyLava 
01:28 <@isaacs> BennyLava: i'm not saying you *should* use Object.create
01:29 <@isaacs> BennyLava: just that you shouldn't re-implement new with it
01:29 <@isaacs> if you really want a no-op ctor, just have an empty constructor function
01:29 < nicholasf> isaacs: coolio. I read Crockford's book. Just fell into the new pattern
01:29 < BennyLava> I don't even understand why you would WANT to use ctors over Object.create (ignoring performance).
01:29 <@isaacs> BennyLava: tradition.
01:29 <@isaacs> BennyLava: but, i don't ignore performance.
01:29 < BennyLava> That's a horrible argument.
01:30 <@isaacs> BennyLava: so, als, performance.
01:30 < nicholasf> BennyLava: it's constructor functions are a nice convention?
01:30 < BennyLava> nicholasf: in classical langyages
01:30  * CoverSlide does his best Tevye from Fiddler on the Roof
01:30 < BennyLava> languages*
01:30 < CoverSlide> TRADITION!!
01:30 <@isaacs> BennyLava: it's also surprisingly common to need to init an object when you creaet i.t
01:30 < BennyLava> Serously, how is 'tradition' ever a valid argument?
01:30 < TehShrike> CoverSlide: I believe I heard that in the same tune that you meant it
01:30 <@isaacs> BennyLava: why do foo = Object.create(fooProto); fooInit(foo);
01:30 <@isaacs> BennyLava: when you can just do  foo= new Foo
01:30 < BennyLava> isaacs: how about foo.init()?
01:30 < ang3lfir3> people aren't considering ctors with side effects are they??? that's insane.... and wrong on so many levels 
01:30 < BennyLava> isaacs: anyway, that's why you provide a wrapper.
01:30 <@isaacs> BennyLava: right, so, how do i know what function to use to initialize the class you create?
01:31 < BennyLava> isaacs: you don't.
01:31 <@isaacs> BennyLava: how do i get one?
01:31 < BennyLava> isaacs: the user just calls foo()
01:31  * ang3lfir3 is barely paying attention 
01:31 <@isaacs> BennyLava: how do i extend that class with additional functionality?
01:31 < BennyLava> and gets it initialised
01:31 < BennyLava> isaacs: IT'S NOT A CLASS
01:31 <@isaacs> BennyLava: it is.
01:31 < BennyLava> holy shit
01:31 < BennyLava> wow
01:31 <@isaacs> BennyLava: it's a set of objects that are all similar.
01:31 < BennyLava> wow wow wow
01:31 < BennyLava> I can;t believe this
01:31 <@isaacs> do yo uknow why the word "class" was chosen to mean what it does?
01:31 < BennyLava> you are completely oblivious
01:32 <@isaacs> it's because those objects form a "class" of simialar things
01:32 <@isaacs> like a set
01:32 < TehShrike> "Who, day and night, must create all the objects, instantiate the classes, put them in a var?"
01:32 < BennyLava> you are so stuck in thinking of classes you can't even see beyond it
01:32 <@isaacs> you see, i'm treating the word as having some semantic meaning, and you're treating it as a pointer at the "class" keyword.
01:33 < draginx> What does new do in JS?
01:33 < CoverSlide> without the Object.* methods, you are not truly utilizing the prototype chain, but it also hurts performance to traverse
01:33 < TehShrike> "And who preps the values, adding them to properties, initializing values for them all?"
01:33 <@isaacs> BennyLava: In object-oriented programming, a class is a construct that is used to create instances of itself – referred to as class instances, class objects, instance objects or simply objects.
01:33 <@isaacs> http://en.wikipedia.org/wiki/Class_(programming)
01:33 < TehShrike> "It's neeeeeeew! it's new!  TRADITION!"
01:33 < nicholasf> draginx: it calls a constructor object that returns a new {} with all of the functions on the constructor functions prototype copied onto it?
01:33 < BennyLava> isaacs: and that is not what JS is about, at all.
01:34 <@isaacs> BennyLava: but your hypotheitcal 'foo()' function does exaclty that.
01:34 < BennyLava> Don;t need it, and you shouldn't want it.
01:34 < BennyLava> Not in JS.
01:34 <@isaacs> BennyLava: you mean that i shouldn't want objects that all inherit from a similar template?
01:34 < BennyLava> Try using proper pototypal inheritance.
01:34 < BennyLava> You might like it.
01:34 <@isaacs> BennyLava: HAHAHAHAHHAHAHA
01:34 < draginx> nicholasf: ah thanks :)
01:34 < TehShrike> oh man
01:34 <@isaacs> BennyLava: i've been there.
01:34 < BennyLava> But you clearly don't know what you're talking about.
01:34 <@isaacs> BennyLava: lolz.
01:34 < TehShrike> Another good laugh
01:34 <@isaacs> BennyLava: i do use prototypal inheritance directly when it makes sense.
01:34 < nicholasf> draginx: I couldnt tell if you were taking the piss then or not :)
01:34 < CoverSlide> if you're using ES3 and new, basically the closest you can get to inheritance is using a for loop to copy methods from one prototype to another, but with the prototype chain you can achieve a truer inheritance model at the cose of some performance
01:35 <@isaacs> BennyLava: read through npm.
01:35 < CoverSlide> *cost
01:35 < BennyLava> you are the first "guru" (if I can call you that), who I've seen advocating such ridiculous things.
01:35 <@isaacs> BennyLava: i just use new when it makes sense, also.
01:35 <@isaacs> BennyLava: maybe they're not so ridiculous :)
01:35 < BennyLava> Mind = blown. In a bad way.
01:35 < BennyLava> bye bye.
01:35 < draginx> nicholasf: i was confused b someones comment sayig it was diff from traditionsal langs
01:35 <@isaacs> BennyLava: saying bye isn't that impressive if you don't leave after.
01:35 < nicholasf> draginx: it is, it isn't classical inheritance
01:35 <@isaacs> BennyLava: ;P
01:35 < nicholasf> you can change the prototype of the object at any time
01:35 <@isaacs> BennyLava: most gurus don't bother, because they know that what you're in is a temporary phase.
01:36 < draginx> CoverSlide: how much performance though?
01:36 < BennyLava> isaacs: I never leave, but I'm out of this discussion. (Yes, for real this time.)
01:36 < CoverSlide> depends on how it's laid out
01:36 < CoverSlide> can't really benchmark it
01:36 < nicholasf> draginx: it's a lot of fun, it's more Scheme based than Smalltalk
01:36 < draginx> and is there a way to see if something / an express route is blocked by any other functions / a way to see if anything is not asyncrhnous?
01:36 < CoverSlide> for every possible case
01:36 < ferlores> haters gonna hate.....
01:36 < draginx> nicholasf: yeah agreed :) i was just initially confused and I've used the new quite a bit :D
01:36 < draginx> Ive looked at JS Class though
01:36 < draginx> it looks nice but meh its kind of steering away from JS
01:36 < nicholasf> draginx: it took me a while to think through it
01:37 < draginx> do u have a good resource for JS objects?
01:37 < nicholasf> draginx: it only starts to sink in when you begin to write your own stuff
01:37 < draginx> nicholasf: aye! that's exactly whaat happened with me during my first big project with node :D
01:37 < nicholasf> draginx: :)
01:37 < draginx> although idk why Benny is shouting at isaacs now :P
01:40 <@isaacs> BennyLava: http://blog.izs.me/post/4731036392/evolution-of-a-prototypal-language-user
01:41 < BennyLava> I told you I'm out of this discussion, so stop bethering :P
01:41 < BennyLava> err, bothering*
01:42 <@isaacs> BennyLava: i'm just trying to promote my blog to you.
01:42 <@isaacs> BennyLava: :)
01:42 <@isaacs> BennyLava: i'm doing social networking.
01:42  * isaacs is a social media guru
01:42 < TehShrike> Google Ads pays isaacs five cents every time somebody closes his blog in disgust.
01:43 < BennyLava> isaacs: I see. But I just told you that I lost all faith in you, so what makes you think I might want to read your blog? :)
01:43  * isaacs is also running out of electricity.  bbiab.
01:43 < BennyLava> TehShrike: lol
01:43 < Robdgreat> this seems relevant: http://xkcd.com/386/
01:47  * jmoyers just scrolled back and got some lols
01:49 < TehShrike> Talking about programming on the internet! Yay!
01:49 < owen1> I use the Mongo DB Native NodeJS Driver - chains.update({x: data.id}, data, {safe: true, upsert: true}, function(err, chain) {}); but it's not upsertng and i have collections with the same x.  when i try this from the console it's working as expected - db.chains.update({'x': 2},{'x': 2, 'y': 5},false) any idea why?
01:50 < owen1> i mean true at the end
01:57 < Zak> is there a way to create a npm proxy repository? i.e. I don't want several people hitting the internet for the same packages, so I point to a shared repository.
02:02 < deoxxa> Zak: you can set up your own mirror pretty easily
02:02 < deoxxa> Zak: https://github.com/isaacs/npmjs.org
02:02 < Zak> thanks deoxxa 
02:03 < deoxxa> i have one set up at work, we use it to manage private modules
02:05 < Zak> deoxxa: can your instance also cache public modules, so it's not downloaded several times?
02:05 < deoxxa> yeah, you do that by mirroring the public repository
02:06 < Zak> great. I'll definitely check it out. thanks
02:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:33 < TehShrike> We just set up our own npm repository where I work, too.  I'm really looking forward to doing rollouts with it...
02:34 < niggler> do the private instances let you upload private modules?
02:34 < niggler> *packages
02:35 < Raynos> Im building a better NPM search
02:35 < Raynos> Give me your list of feature requests!
02:35 < mscdex> disrupt npm search!
02:41 < TehShrike> Raynos: web-based, or cli?
02:41 < Raynos> cli
02:42 < Raynos> although it can be made web-based
02:42 < TehShrike> Better line wrapping :-x
02:42 < Raynos> the web-based search is a UI problem rather then an algorithm problem
02:42 < TehShrike> Ordering by different criteria, probably defaulting to most-used
02:43 < TehShrike> Or maybe defaulting to ordering by [whether or not the search term is in the project name/tags],[how many times it's been downloaded]
02:45 < Raynos> well I was going to work on "most-used" search
02:45 < Raynos> but use a "most-used" in this "community" algorithm
02:45 < TehShrike> most-used is useful, but weighted towards projects that are meant to be used as a dependency, which isn't very useful if you're looking for a stand-alone tool
02:46 < Raynos> true
02:46 < TehShrike> If I'm looking for a library to include in a project, ordering by most-used is pretty much perfect
02:47 < TehShrike> Though I would like to weight higher the projects that have my search terms in the name/tags over the projects that just have the search term in the description
02:51 < niggler> Raynos: why not just a massive wiki?
02:51 < Raynos> TehShrike: look at npm-used. it might help
02:51 < niggler> even full-text searching isn't necessarily helpful for discovery
02:52 < niggler> I wonder if the best solution is a community-curated cookbook
02:52 < TehShrike> npm search usually returns the projects I'm looking for, it just sprinkles them in alphabetically among 80 other projects
02:53 < niggler> "web framework"
02:53 < TehShrike> lol
02:53 < TehShrike> npm search javascript
02:54 < niggler> dealing with this recently
02:54 < niggler> there's something called "derby" and something called "meteor"
02:54 < deoxxa> niggler: both of them are stupid
02:55 < niggler> whats the best approach deoxxa 
02:55 < deoxxa> use programming
02:55 < niggler> brilliant
02:55 < deoxxa> frameworks bad, components good
02:55 < deoxxa> no seriously, that's the answer
02:55 < niggler> i could write it all in x64 assembly but that doesnt make things easy
02:55 < Aria> That++
02:56 < deoxxa> niggler: frameworks are what you reach for when you don't have scope enough to define your requirements
02:56 < deoxxa> so find out what you actually want to make or do
02:56 < deoxxa> go from there
02:57 < niggler> so what do you consider "socket.io"
02:57 < deoxxa> you'll usually find that it's far easier to pick a few high quality libraries and tie them together than it is to start with a huge (but inflexible) framework
02:57 < deoxxa> socket.io is cool
02:57 < niggler> i mean would you consider that a framework or component
02:57 < deoxxa> it's a component, definitely
02:57 < BennyLava> lol, bloatware
02:57 < deoxxa> since you're not forced to use it in any particular way
02:57 < deoxxa> and you can switch it out for something else easily enough
02:57 < Aria> Quite. Doesn't provide a complete anything. Just a tool.
02:58 < niggler> so enforcing a particular workflow or style is the hallmark of a framework?
02:58 < Aria> That's certainly a sign.
02:58 < Aria> (Express: framework. Connect: component.)
02:58 < niggler> ah
02:58 < deoxxa> yep
02:59 < Aria> Playmobil vs lego.
02:59 < deoxxa> express is an interesting case though, it's very flexible because it doesn't provide a lot of functionality and the api is simple enough that you can replace it with something else if you want to
02:59 < deoxxa> something like meteor or derby is the exact opposite though, it would be incredibly hard to migrate from one to something else
03:00 < niggler> can someone explain why AH invested money in meteor?
03:00 < niggler> apparently there was some sort of investment in it
03:00 < Aria> Yeah. Express is a framework I actually like.
03:00 < Aria> It's juuuust low enough level to still be really flexible.
03:00 < deoxxa> niggler: because meteor is a product
03:01 < niggler> is node a product?
03:01 < deoxxa> definitely
03:01 < deoxxa> it can be monetised in various ways
03:01 < niggler> why wouldnt AH invest in joyent/node?
03:01 < deoxxa> because there are already people monetising it
03:02 < niggler> the argument i was given btw for using meteor is that there's significant capital backing
03:02 < mscdex> is meteor the one that uses fibers?
03:02 < deoxxa> it is
03:02 < mscdex> :\
03:02 < mscdex> i always get them all mixed up
03:03 < deoxxa> niggler: by that argument, you should be doing everything in .NET or Spring
03:03 < mscdex> so derby is the one that doesn't have sql support
03:03 < deoxxa> not sure about now
03:03 < Aria> niggler: That's a good argument when choosing between big, full-stack frameworks -- if they collapse, you're screwed.
03:03 < deoxxa> it didn't before, i don't think
03:03 < newjonaslund> hi everyone
03:03 < Aria> niggler: But if you're using small, interchangeable, flexible components, that's not a particularly important distinction.
03:04 < newjonaslund> what's the best aws s3 module? 
03:04 < niggler> there are way too many frameworks and components here
03:04 < deoxxa> newjonaslund: probably awsum
03:04 < Aria> niggler: Too many frameworks perhaps. Not enough components.
03:04 < deoxxa> newjonaslund: but i don't use s3, so i'm not sure
03:04 < niggler> i feel like a luddite
03:04 < deoxxa> niggler: i'm not sure you can get too many components
03:06 < niggler> are there any good math libraries?
03:08 < newjonaslund> any other opinions about the aws s3 out there?
03:12 < Raynos> niggler: ignore both of them ;)
03:12 < Raynos> deoxxa: frameworks are bad, components are fragmentation, use modules
03:12 < deoxxa> true
03:13 < Aria> What's the difference between a module and a component?
03:13 < Aria> 'cept that both are heavily overloaded terms?
03:15 < niggler> is there a node lapack?
03:15 < niggler> or blas for that matter
03:16 < niggler> or an f2js?
03:17 < Raynos> Aria: component means github.com/component
03:17 < Raynos> module means a thing that is published to npm
03:18 < TehShrike> module means a thing that is loaded via require()
03:18 < Aria> Bah. UI hooey. Too focused a meaning.
03:18 < LouisT> anyone have a range function?
03:18 < TehShrike> http://nodejs.org/api/modules.html
03:18 < TehShrike> LouisT: there's one in underscore
03:18 < LouisT> TehShrike: that only works with numbers
03:18 < TehShrike> LouisT: oh, what else would you want it to work with?
03:19 < LouisT> i've written a range that works with numbers and letters, but i kinda need it to be able to do "aaa" -> baa" and so on
03:19 < Raynos> LouisT: between ?
03:19 < Raynos> well actually between gives you one
03:19 < Raynos> not a range
03:19 < TehShrike> Wait, wouldn't it be "aaa" -> "aab" ?
03:19 < niggler> you can just generate your own mapping
03:20 < LouisT> TehShrike: no
03:20 < niggler> play with charcodes
03:20 < LouisT> aaa -> baa, so it would be an array.. ['aab','aac',...'baa']
03:20 < LouisT> er
03:20 < LouisT> aaa -> baa, so it would be an array.. ['aaa','aab','aac',...'baa']
03:20 < TehShrike> I'd probably just convert a number range using Array.map...
03:21 < niggler> louisT: write a function that generates those strings from numbers and just iterate
03:21 < TehShrike> Use good 'ol % 26
03:21 < LouisT> niggler: what do you mean?
03:21 < TehShrike> niggler: pfft, iteration is for languages that don't have .map() ;-P
03:21 < niggler> actually i have something
03:21 < niggler> i was working on how to translate between column names and numbers
03:22 < niggler> (spreadsheet)
03:22 < niggler> so this is clearly not the most efficient way, but i also wrote this at 5 AM
03:22 < niggler> function encode_col(x) {
03:22 < niggler>     if(x <= 25) return String.fromCharCode("A".charCodeAt(0) + x);
03:22 < niggler>     return encode_col((x - (x%26))/26 - 1) + encode_col(x%26);
03:22 < niggler> }
03:23 < LouisT> niggler: can you give me an example of it's usage?
03:23 < TehShrike> RECURSION!
03:23 < niggler> encode_col(100) -> CW
03:23 < niggler> encode_col(69) -> "BR"
03:24 < niggler> there's a reverse function as well
03:24 < LouisT> um.. not exactly sure how i would use that
03:24 < niggler> function decode_col(str) {
03:24 < niggler>     if(str.length == 1) return (str.charCodeAt(0) - "A".charCodeAt(0) + 1);
03:24 < niggler>     return 26*decode_col(str.substr(0,str.length - 1)) + decode_col(str.substr(-1));
03:24 < niggler> }
03:24 < TehShrike> >> function encode_col(x) {if(x <= 25) return String.fromCharCode("A".charCodeAt(0) + x);return encode_col((x - (x%26))/26 - 1) + encode_col(x%26);}; encode_col(100)
03:24 < purr> TehShrike: (string) 'CW'
03:24 < niggler> decode_col("AAA") -> 703
03:25 < niggler> decode_col("BAA") -> 1379
03:25 < niggler> and that difference should be 26*26
03:25 < niggler> >>> 1379-703
03:25 < purr> niggler: (number) 676
03:25 < niggler> >>> 26*26
03:25 < purr> niggler: (number) 676
03:25 < niggler> ooh there we go
03:26 < LouisT> hm, ok i think i got it
03:26 < niggler> so you should be able to decode both the start and end
03:26 < niggler> and then do your range with the numbers and translate back
03:29 < LouisT> hm.. niggler RangeError: Maximum call stack size exceeded
03:30 < TehShrike> RECURSION!
03:30 < LouisT> yep.. so idk how to do it =/
03:30 < niggler> LouisT: if you arent dealing with very long strings you shouldnt have a problem
03:30 < niggler> TehShrike: the iterative solution is not that hard either
03:30 < LouisT> niggler: well i just tried to encode aaa
03:30 < TehShrike> niggler: it's true, I was actually a bit surprised to see your function was recursive :-)
03:30 < LouisT> er, aa*
03:30 < niggler> OH
03:31 < niggler> you have to decode it
03:31 < TehShrike> But hey, 5am
03:31 < LouisT> oh?
03:31 < LouisT> OH
03:31 < LouisT> wow i'm dumb lol
03:31 < LouisT> good call
03:31 < niggler> TehShrike: normally id bit twiddle
03:33 < niggler> i guess the iterative version would be something like function decode_col(str){var d = 0; for(var i = 0; i != str.length; ++i) d = d * 26 + str.charCodeAt(i); return d;} or something
03:34 < niggler> >>> function decode_col(str){var d = 0; for(var i = 0; i != str.length; ++i) d = d * 26 + str.charCodeAt(i); return d;}; decode_col("AAA")
03:34 < purr> niggler: (number) 45695
03:34 < niggler> decode_col(str){var d = 0; for(var i = 0; i != str.length; ++i) d = d * 26 + str.charCodeAt(i) - str.charCodeAt("A") + 1; return d;}
03:34 < niggler> >>> function decode_col(str){var d = 0; for(var i = 0; i != str.length; ++i) d = d * 26 + str.charCodeAt(i) - str.charCodeAt("A") + 1; return d;}; decode_col("AAA");
03:34 < purr> niggler: (number) 703
03:34 < LouisT> niggler: would this work with lowercase?
03:34 < niggler> ok there we go that's the iterative version, happy TehShrike ?
03:35 < niggler> you could just lower/upper the string
03:35 < niggler> .toLowerCase / .toUpperCase
03:35 < Fishrock123-away> Q: In what format does net's 'data' event return the data?
03:36 < LouisT> niggler: so if i'm correct, 704 should be AAB?
03:36 < Fishrock123> Nvm, found it in the docs.
03:36 < niggler> yeah
03:37 < TehShrike> niggler: :-)
03:37 < niggler> making baby jesus cry 
03:37 < TehShrike> for loops do seem so antiquated nowadays!
03:37 < niggler> TehShrike: im all about the gotos
03:38 < TehShrike> HAH
03:38 < niggler> this is day 16 of javascript for me
03:38 < niggler> most of my life is in assembly and fortran
03:38 < TehShrike> Man, I remember back when I wrote stupid things in QBasic when I was a kid...
03:38 < TehShrike> I didn't even know about functions...
03:39 < niggler> remember the game with the bananas?
03:39 < TehShrike> Hellz yeah!
03:39 < TehShrike> I played Gorilla all the time!
03:39 < niggler> there was also a snake game
03:39 < TehShrike> Yup!
03:39 < niggler> lol oh man that was so long ago
03:39 < timeturner_> assembly? is that fun? :P
03:39 < TehShrike> Played that on an 8086 laptop with a monochrome display and 3.5" floppy drive!
03:40 < TehShrike> And I wrote really bad code that didn't do much!
03:40 < niggler> timeturner_: its WORN (write once, read never) but fortunately i havent had to go through the code in more than a year
03:40 < niggler> i also haven't shut down the server in more than a year, so there's a nonzero chance all will go to hell when i reboot
03:41 < TehShrike> Oh wow, that's scary
03:41 < niggler> finance doesnt move as quickly as technology
03:43 < Fishrock123> What exactly does the offset parameter refer to when reading from node Buffers?
03:44 < kanzure> hmm
03:45 < niggler> which one?
03:46 < niggler> Fishrock123: http://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset_noassert
03:46 < niggler> "at the specified offset."
03:46 < niggler> and based on usage it looks like byte
03:47 < Fishrock123> Oh, thanks.
03:47 < Raynos> Does anyone have a good project generator?
03:53 < mscdex> niggler: if you get a chance, please give the node-ncurses master branch a whirl and see if all is fine for you
03:54 < owen1> I use the Mongo DB Native NodeJS Driver - chains.update({x: data.id}, data, {safe: true, upsert: true}, function(err, chain) {}); but it's not upsertng and i have collections with the same x.  when i try this from the console it's working as expected - db.chains.update({'x': 2},{'x': 2, 'y': 5}, true) any idea why?
03:54 < niggler> sorry for a really dumb question, but how do i test it?
03:54 < niggler> can i just get from github?
03:56 < mscdex> niggler: i was just asking because i know you are using it... but yeah the easiest way is probably just to do a `npm install https://github.com/mscdex/node-ncurses/tarball/master`
03:56 < niggler> oh that's sweet
03:56 < niggler> i didnt realize you could do that lol
03:56 < mscdex> i use that feature quite often :-)
03:57 < niggler> mscdex: when i asked "how do i test it?" i meant how do i test that latest version
03:57 < niggler> are you on a mac mscdex?
03:57 < mscdex> no
03:57 < niggler> ../src/binding.cc:2273:23: error: use of undeclared identifier 'get_wch'
03:57 < kanzure> if i have an async callback that i call in a for loop (i'm doing an async tree loader), is there a way to figure out when i'm done loading the tree?
03:58 < mscdex> huh...
03:58 < niggler> it could be a gimped ncurses implementation on mac
03:58 < mscdex> it should be using the bundled copy...
03:58 < mscdex> hrmm
03:59 < niggler> its possible they include-guarded it
04:00 < Raynos> What do people think of typescript?
04:01 < LouisT> niggler: for some reason 'aa' returns 890?
04:01 < LouisT> 890 seems to be AHG =/
04:02 < niggler> LouisT: it uses the charcode, which is raw
04:02 < astropirate> Raynos, I like it. It is what JS has been missing.. however.... it introduces complexity.. one more moving part. I'm not a big fan of compile-to-js languages
04:02 < niggler> you should uppercase it first
04:02 < Raynos> astropirate: I want a way to put the annotations in valid JS
04:02 < niggler> or, if you want to do something conditional, you can check if its bigger or less than "a".charCodeAt(0)
04:03 < Raynos> for example you can annotate return values using function () { "string"; return foo }
04:03 < Raynos> and then build tooling around that
04:03 < LouisT> niggler: what? =/
04:03 < astropirate> Raynos, I feel that pain too. What we are missing is intelligent tooling.. like the C++ and Java community have
04:03 < astropirate> I think i figured it out
04:03 < Raynos> its not tooling
04:03 < astropirate> how to do that kind of analysis on the code
04:03 < Raynos> I dont care that much about that
04:03 < Raynos> I want a way
04:03 < Raynos> to annotate types in my source code
04:03 < Raynos> so I can read it
04:03 < Raynos> not in comments
04:04 < niggler> LouisT: if you want to parse "aa" or something lowercase, you can convert it to uppercase first
04:04 < astropirate> Raynos, well you dont have that. so suck it up :p
04:04 < astropirate> the next best thing is intelligent tooling
04:04 < niggler> OR you can check if its lower/uppercase and subtract the correct value
04:04 < Raynos> astropirate: ES6 might have gaurds
04:04 < Raynos> if we push hard
04:04 < astropirate> :O
04:05 < astropirate> haskell style guards?
04:05 < Raynos> astropirate: http://wiki.ecmascript.org/doku.php?id=strawman:guards
04:05 < astropirate> Ahh ok
04:06 < LouisT> niggler: i think an issue is that your decode_col with the for loop returns a different number than the first decode_col?
04:06 < megajosh2> "niggler"
04:06 < astropirate> Raynos, that would be quite good
04:06 < megajosh2> Qutie
04:06 < megajosh2> quite
04:07 < astropirate> cutie
04:07 < Raynos> yes it would
04:07 < astropirate> But until that happens, your editor being able to tell you what type the variable is... is the next best thing
04:08 < astropirate> I'm not sure to do an HTML/CSS/JS based editor in App.js or to go full native 
04:08 < astropirate> native app with c++ will take a lot longer.. and won't look as good probably
04:08 < astropirate> but it will be a LOT more snappier
04:09 < niggler> >>> function decode_col(str) { var d = 0; for(var i = 0; i != str.length; ++i) d = d * 26 + (str.charCodeAt(i) | 0x20) - "a".charCodeAt(0) + 1; return d; }; var t=["aa","AA","Aa","aA"]; for(var y in t) console.log(t[y] + " : " + decode_col(t[y]));
04:09 < purr> niggler: undefined; Console: 'aa : 27', 'AA : 27', 'Aa : 27', 'aA : 27'
04:09 < niggler> ok that works LouisT 
04:09 < Zak> please don't post code in here. Use pastebin
04:09 < niggler> lol zak im typing in the window :)
04:09 < jmoyers> isaacs mikeal not too clear who i might contact, but nodeup website looks down (maybe you guys already know)
04:10 < Zak> post/send/paste/type
04:10 < LouisT> niggler: what about the encode version of that?
04:12 < EhevuTov> hey gang, anyone know where Node's hires timer is?
04:12 < Zak> astropirate: Native apps have their own look n feel issues
04:12 < jmoyers> EhevuTov process.hrtime()
04:12 < EhevuTov> jmoyers, thank you sir!
04:13 < Zak> UX isn't exactly complicated, but you'll have to know what to compromise on. Write out your goals/figure out your audience, etc.
04:22 < astropirate> Zak, aye, thats what i'm trying to decide on
04:23 <@isaacs> jmoyers: back up, thanks
04:23 <@isaacs> jmoyers: fyi, that's a nodejitsu app.  all i do when people tell me that is /join #nodejitsu and relay the message :)
04:24 -!- isaacs changed the topic of #Node.js to: node.js -- When trolls attack, and ops don't respond, ping @izs or @nexxylove on twitter.
04:25 < Zak> we had trolls attack? awe
04:25 < jmoyers> fair enough
04:25 < jmoyers> PROTOTYPES BRO
04:25 <@Nexxy> \o/
04:26 <@isaacs> Zak: http://static.izs.me/irclogs/node.js/2012-10-01.txt
04:26 <@isaacs> Nexxy: reading that was triumphant
04:26 <@isaacs> Nexxy: :)
04:26 < Zak> thanks. reading
04:26 <@Nexxy> ^-^
04:26  * Nexxy flex
04:27 <@Nexxy> isaacs, I also added the troll's main account to akick
04:27 <@isaacs> Zak: it's not very interesting reading, really.
04:27 <@isaacs> Nexxy: kewl.
04:27 <@Nexxy> "MrWubbles:
04:27 <@Nexxy> "
04:27 < Zak> isaacs: its okay, it will consume the 5 mins before I have a meeting :D
04:29  * jmoyers returns to various episodes of deep space nine
04:33 < TehShrike> Oh yeah?  Well... I'm gonna go play table tennis!
04:33 < niggler> fuck table tennis
04:33 < TehShrike> But it's SO AWESOME
04:33 < astropirate> weak badminton is where its at
04:34 < niggler> gyp appears to be nearly as bad as ant
04:35 < jesusabdullah> I must be blind
04:35 < jesusabdullah> I don't see shit for trollin' :C
04:35 < TehShrike> Ctrl+F InternetFriends
04:36 < jesusabdullah> a'ight
04:36 < niggler> 02:12 < InternetFriends> only faggots use javascript no homopobia
04:36 < jesusabdullah> THERE we go
04:36 < jesusabdullah> niiice
04:36 < TehShrike> Not in that log: a million join/part messages
04:36 < jesusabdullah> yeah, I saw the join/part last night
04:36 < niggler> the last part of the sentence is technically true
04:37 < niggler> "only faggots use javascript" is homophobic, not homopobic
04:37 < TehShrike> >_<
04:37 < jwulf> anyone using typescript yet?
04:37 < jesusabdullah> hail naw
04:37 < jesusabdullah> I haven't even looked at it
04:37 < Daegalus> it looks decent, but i am actually staying away from JS.
04:37 < jesusabdullah> weirdo
04:37 < niggler> fuck typescript
04:38 < niggler> http://xkcd.com/927/
04:38 < Daegalus> after months of using Javascript, i just come to the conclusion that its not for me. I just do not like working in it
04:38 < Daegalus> or with it
04:39 <@Nexxy> https://gist.github.com/3816199
04:39 < niggler> you don't grok javascript
04:39 <@Nexxy> niggler, fuck everything.
04:39 < niggler> thanks Nexxy 
04:39 <@Nexxy> that shoudl be your motto
04:39 < niggler> i didnt say fuck javascript
04:39 <@Nexxy> yet
04:39 < Daegalus> Java shows up twice. You must really hate it
04:39 < niggler> and i have legitimate reasons to say 'fuck ___' where ___ is an item in that list
04:40 < jesusabdullah> Daegalus: so what's your poison?
04:40 < jmoyers> fuck … synergy?
04:40 < Daegalus> jesusabdullah: on what
04:40 < jesusabdullah> Daegalus: it's okay, I'll only make fun of you a little bit ;)
04:40 < jmoyers> i dont. . .   even
04:40 < jesusabdullah> Daegalus: you're staying away from js, so what are you using instead?
04:40 < niggler> ive tried synergy in a few scenarios and found the performance unacceptable
04:40 < jesusabdullah> jmoyers: maybe the keyboard/mouse sharing dude?
04:41 < jwulf> (and what are you doing in #node.js - isn't this about server-side js?)
04:41 < jmoyers> ah. such is the problem with grep
04:41 < jmoyers> it takes some shit out of context
04:41 < jesusabdullah> fo' shizzle
04:41 < niggler> i ended up going with a double-imac setup
04:41 < niggler> which turns out to be much better than having four monitors
04:41 <@Nexxy> niggler, the only complaint I have is not being able to map my extra mouse buttons
04:42 < jesusabdullah> x2x bro ;)
04:42 < EhevuTov> anyone here have public code using node for high-volume binary data processing?
04:42 < niggler> Nexxy: its not bad for development work
04:42 < jesusabdullah> EhevuTov: what do you have in mind?
04:42 < niggler> but i never got to the stage where i was confident in the mouse movement between screens
04:42 < jesusabdullah> Nexxy: time to write one in the nodjs
04:42 <@Nexxy> yeah!
04:42 <@Nexxy> hidstream!
04:42 < niggler> so its a dealbreaker with regards to mission critical stuff
04:43 <@Nexxy> I think I'm going to demo hidstream @ jsconfeu actually
04:43 < Daegalus> jesusabdullah: Dart, Groovy, Python, i dunno, I am not happy with things. Either language is great, and platform sucks, or language sucks, and platform is great. Dart is close to having both for me, but its still in infancy. Groovy is nice, but comes with teh Java baggage, Python is decent, and well rounded, but gets blah. Ruby meh.
04:43 < EhevuTov> jesusabdullah, I work in telco and we have a 10-20mbit stream of data just from one machine
04:43 < EhevuTov> 10mbit/sec
04:43 < jesusabdullah> dart raises my hackles bruh
04:43 < niggler> fuck dart
04:43 < jesusabdullah> no offense
04:43 < jesusabdullah> Daegalus: you play with go at all?
04:43 < Daegalus> jesusabdullah: meh, I dont use it in the browser, i prefer the dartvm backend. I use it like node
04:44 < jesusabdullah> EVEN SO
04:44 < Daegalus> jesusabdullah: yes a bit, i like it, just cant think of something to make with it
04:44 <@Nexxy> lol
04:44 < jesusabdullah> I see
04:44 <@Nexxy> no need to get your jimmies all rustled
04:44 < jesusabdullah> I guess I would think that you would make what you always make yeah?
04:44 < Daegalus> well thats the thing, I got like 100s of ideas, and very little time
04:44 <@Nexxy> stop spending it thinking of so many ideas you'll never implement
04:44 < niggler> Daegalus: everyone has hundreds of ideas
04:45 < Daegalus> atm i have a UUID library for Dart, and 5% of OpenGL bindings for dart
04:45 < Daegalus> Nexxy: thats sooo hard though :P
04:45 < jesusabdullah> pick the one that seems most immediately useful
04:45 < jesusabdullah> write useful things
04:45 < Daegalus> i actually only have 3-4 solid ideas that i want to explore and follwo through on
04:45 < niggler> Daegalus: what's your day job
04:45 < EhevuTov> jesusabdullah, I have 10mbit/sec of phone call records coming through in a binary format that need to be parsed. Event-stream would be good for this if it was text. Not sure about binary data.
04:45 < jesusabdullah> EhevuTov: but what are you doing to the data?
04:45 < jmoyers> fuck day jobs
04:45 < jesusabdullah> oh, binary data? use buffers EhevuTov and it should be g2g
04:46 < jesusabdullah> still reasonably fast
04:46 < jesusabdullah> also relatively easy to proto and benchmark yeah?
04:46 < niggler> indeed jmoyers 
04:46 < Daegalus> niggler: Developer on EA's Nucleus Platform that handles all data/apis/users/commerce/transactions for all games, origin, and EA services/sites
04:46 < jesusabdullah> like, write it, run it, g2g
04:46 < EhevuTov> jesusabdullah, yeah, I've been looking at some of substacks code with binary data
04:46 < jesusabdullah> unless of course it explodes, but that's unlikely
04:46 < niggler> so im sure you can find specific problems that you encounter on a nearly daily basis
04:46 < Sly> Wow. Blowing up in here. :O
04:46 <@Nexxy> O man
04:46 < jesusabdullah> EhevuTov: just look up node's api docs for buffers and you'll be pretty much g2g
04:46 <@Nexxy> I'm totally making $3/week on gittip
04:47 < Daegalus> niggler: ya, like wanting to take the entire monstrosity of Java EE crap and toss it out the window
04:47  * Nexxy big money
04:47 < jmoyers> EhevuTov https://github.com/substack/node-binary
04:47 < EhevuTov> Nexxy, hehe
04:47 <@Nexxy> who wants $1?!
04:47 < Daegalus> Nexxy: I want a -(1/2)$
04:47 < jesusabdullah> ugh, I feel so scattered today
04:47 < jesusabdullah> I want to work on cool shit, I just can't focus
04:47 < EhevuTov> jmoyers, yeah, thanks. that's what I was currently reading. I'll be using the hires mark to do some benchmarks (that's why I asked earlier)
04:48 <@Nexxy> Daegalus, it will only let me do $1
04:48 < ChrisPartridge> jesusabdullah: big weekend? :)
04:48 < Daegalus> jesusabdullah: my ideal language would by kinda like ruby/python/groovy/boo in syntax but with the lightness of Node/Dart and their module systems. Dart is close, but still blah, and no oen is going to adopt it in the browser
04:48 < Daegalus> Nexxy: finnnnne, ill take the $1
04:48 < jmoyers> yerp, as i recall he's got sue perf tests in there
04:48 < EhevuTov> I'm trying to compete with some of our C# coders who think they're the bees knees. I'd like to show them how well an evented I/O framework could do (I hope)
04:48 < jmoyers> but they certainly aren't nanosecond
04:48 < niggler> Daegalus: you are asking for too mch
04:49 <@Nexxy> oki
04:49 <@Nexxy> $1 to you good sir
04:49 < Daegalus> niggler: i know, its why im just settling for Dart, Go, Python, and Groovy
04:49 < EhevuTov> jmoyers, oh awesome. I'll check out those tests. Thanks!
04:49 < Sly> jesusabdullah, I'm the same way.
04:49 < Sly> Which is why I've been hanging out on SE. xD
04:49 < niggler> dart tries to be everything and ends up doing nothing
04:49 < Daegalus> JS is great, and horrible at the same time, i just never enjoy messing with it, Node is amazing, the language isnt
04:49 < Daegalus> though, Prototypes are awesome
04:49 < Sly> I have to admit, though.. SE does have some pretty sweet layouts for their boards.
04:50 < Sly> http://diy.stackexchange.com/  < Like that one.
04:50 < Daegalus> niggler: meh, its fast and light like node, has the syntax of Java/C#, which will bring its own audience. I see so many Libraries that try to make JS more Java/C# like
04:50 < EhevuTov> I enjoy SE. I like the gamification aspect as well.
04:50 < niggler> dart doesn't have the traction
04:51 < jmoyers> js more javalike
04:51 < jmoyers> excellent notion
04:51 < niggler> and, very possibly, never will
04:51  * jmoyers shudders
04:51 < Daegalus> niggler: i agree, thats why i dont think it will ever make any headway in teh browser, and server-side it will probably have the adoption of maybe OCaml
04:51 < Daegalus> doesnt stop me from liking it.
04:53 < niggler> itll have the adoption of awk
04:53 < niggler> which is a very underutilized language
04:53 < Daegalus> niggler: this is my very scattered opinion on language bloat: http://yulian.kuncheff.com/blog/2012/09/29/language-bloat/ beware, chances are you will find 1000s of holes in my arguments. They are so-so arguments from teh get go
04:55 < niggler> the point is simple
04:55 < niggler> no language is perfect for every problem
04:55 < Daegalus> niggler: i understand that very well
04:56 < niggler> though languages arent the worst places
04:56 < syskk> how can i tell npm to install some local packages?
04:56 < Daegalus> which is pointed out in my post that i made before that one :p
04:56 < niggler> its the damn glut of frameworks
04:56 < jmoyers> also, i read that
04:56 < syskk> i tried bundledependencies but it doesn't work
04:56 < jmoyers> you have no specifics man
04:56 < fcrick> what do you guys think of this typescript thing?
04:56 < niggler> everyone has a fucking web framework
04:56 < niggler> im pretty sure one day people will be asked to write a web framework in an interview
04:57 < Daegalus> jmoyers: meh, i do it as a rant, its more of a mental dump than anything serious, hence my disclaimers. Its why i dont go posting it on HN or anything
04:57 < niggler> fuck HN
04:57 <@Nexxy> it's too bad more people don't think that way Daegalus 
04:57 <@Nexxy> lol
04:57 < Daegalus> Nexxy: the HN posting?
04:57 <@Nexxy> ya
04:58 < jesusabdullah> ChrisPartridge: naw, not at all
04:58 < Daegalus> Nexxy: agreed. If i ever write anything serious, I MIGHT post it, but if its any good, someone else will post it, so I never will bother
04:58 < jesusabdullah> I just don't really like the community
04:59 < Daegalus> i dont either, its why i just RSS feed it, and click the links to the actual articles and completely bypass the HN site and ocmments
04:59 < niggler> HN appears to be a massive startup circlejerk
04:59 < Daegalus> ^^^^^^
04:59 < jmoyers> whats wrong with your occasional circlejerk?
05:00 < Daegalus> jmoyers: the problem is its not occasional on HN
05:00 < Daegalus> its every other post
05:00 < niggler> to quote rick ross: "I'm riding dirty, my dick clean"
05:00 < niggler> "she talk dirty, but her mouth clean" but that seemed less relevant
05:00 < jmoyers> right, you read it occasionally with the idea that you're going in for a bit of silicon valley bubble circlejerk
05:00 <@Nexxy> ಠ_ಠ
05:01 < niggler> its either a race to repost what is on a site like tech crunch
05:01 < Daegalus> niggler: wellll, HN is run by YCombinator
05:01 < niggler> that's part of the problem
05:01 < Daegalus> Nexxy approves of the quotes
05:01 < fcrick> hmm this nvm install thing isn't working for me :(
05:02 < fcrick> apparently tar failed
05:02 < jesusabdullah> idk, that particular circlejerk just bores me
05:02 < Daegalus> anyways, ill probably give in and come back to java in about 1-2 weeks, cause its the hot shit atm.
05:02 < niggler> fuck java
05:02 < Daegalus> javascript*
05:03 < Daegalus> typo
05:03 < Daegalus> I do too much java. I wish i could jettison what we have at work.
05:03 < Daegalus> OSGI, Spring, BLAH
05:03 < niggler> get a new job
05:03 < Daegalus> niggler: working on it
05:03 < Daegalus> might go to Netflix, but they use java too
05:03 < etcetera> I wonder if PG even cares about typescript.
05:03 < niggler> id say i'm hiring, but its unlikely you'd be interested
05:04 < fcrick> hmm this nvm thing handles failure very badly
05:04 < niggler> PG cant make money off of it -> not interested
05:04 < Daegalus> niggler: what are you doing
05:04 < etcetera> https://github.com/mono/monomac
05:04 < etcetera> whoops.
05:04 < fcrick> if it fails, the next time it runs it will fail because it didn't clean up after itslef
05:04 < niggler> this dark art called "ultra low latency trading"
05:04 < jesusabdullah> TOO LATE ETCETERA WE KNOW UR SEKRIT
05:04 < etcetera> jesusabdullah: oh?
05:04 < niggler> some hardware hacking, some software hacking
05:05 < Daegalus> niggler: low latency trading? you mean like stock trading?
05:05 < jesusabdullah> you PASTE LINKS ABOUT C# THINGS (dun dun dun)
05:05 < etcetera> java powers a lot of trading infrastructure.
05:05 < niggler> yeah futures and equities
05:05 < etcetera> just not HFT
05:05 <@Nexxy> niggler, you mispronounced "causing the stockmarkets to crash"
05:05 < fcrick> is there any way to just install binaries?
05:05 < jesusabdullah> to where?
05:05 < fcrick> (like, on linux)
05:05 < jesusabdullah> what bins?
05:05 < niggler> hehe Nexxy actually the rules are really screwy
05:05 < fcrick> like, using this nvm thing, get whatever nvm installs to run
05:05 < jesusabdullah> what do you have in mind fcrick exactly
05:06 < fcrick> well, i have a default amazon micro instance
05:06 < fcrick> and i want to be able to run javascript using node
05:06 < niggler> basically laws were put in place decades ago that made sense when times were measured in seconds but not when times are measured in micro and nano seconds
05:06 < Daegalus> niggler: mmm, sounds interesting actually, but i dont interest myself in the stock market in general, so the concept seems fun, but the actual product not so much
05:06 < jesusabdullah> you wouldn't even want nvm on the server, you'd just want to install node direct
05:06 < fcrick> ok
05:06 < jmoyers> nvm is a version manager fcrick -- just grab the source or a precompiled binary
05:06 <@Nexxy> niggler, and now we have people exploiting the resolution problem 
05:07 < jesusabdullah> jmoyers are you on twitter your nick looks familiar bit OI
05:07 < jesusabdullah> OI
05:07 < jesusabdullah> gdkjgsa
05:07 < jesusabdullah> I'm spacing
05:07 < jesusabdullah> I mean to say
05:07 < niggler> no its not a resolution problem Nexxy 
05:07 < jesusabdullah> also typing like an idiot
05:07 < niggler> the problem is physical market fragmentation
05:07 < fcrick> jmoyers: do you think there is a yum package?
05:07 < jmoyers> fcrick http://nodejs.org/download/ -- has some precompiled business
05:07 < jesusabdullah> fcrick: download the source for 0.8.latest
05:07 < jmoyers> and probably
05:07 < niggler> there are many market centers where the same stock / futures contract / options contract / etc. can be traded
05:07 < niggler> and that came thanks to deregulation a century ago
05:07 < jesusabdullah> fcrick: then run ./configure && make && su -c "make install"
05:07 < jesusabdullah> fcrick: in that directory
05:08 < jmoyers> and yes i am, yet under joshuamoyers, since some jackass stole my handle before i jumped on the twitter train
05:08 < jesusabdullah> fcrick: this is the easiest way to install a recent node version on linux, and you'll want to do this with other packages as well
05:08 < niggler> nexxy: so brokers were exploiting that by telling clients they traded at a worse price, actually trade at a better price, and keep the spread
05:08 < jesusabdullah> ah, I may have been mistaken jmoyers 
05:08 < niggler> the legislative patch was to force the exchanges to self-regulate, because a certain party was worried about too much regulation
05:08 < jmoyers> likely
05:08 < jesusabdullah> Nexxy: https://github.com/jesusabdullah/scadpan thing I'm working on when I have motivation
05:09 < jesusabdullah> Nexxy: I think there's only one more hard part
05:09 < fcrick> jmoyers: thanks those binaries seemed to work
05:09 < niggler> and that led to the proliferation of ultra low latency trading, which is not the problem but merely a side effect
05:09 < jmoyers> i think I've seen you around. i was at summercamp last year and some nodejitsu dodgeball shit way back when.
05:09 < jmoyers> fcrick excellent, javascript away ;-)
05:09 < jesusabdullah> summercamp? We probabaly met then
05:09 < niggler> so the jokers who talk about killing hft are attacking a symptom and not the root cause
05:09 < jesusabdullah> not this year, the one before
05:09 < jmoyers> yes
05:09 < fcrick> ugh...javascript
05:10 < Daegalus> ugh, i hate ruby. Maybe more so Rails, but meh
05:10 < fcrick> was gonna try out this typescript thing
05:10 < niggler> fuck rails
05:10 <@Nexxy> jesusabdullah, I like the fancy terminal
05:10 < Daegalus> Nexxy: fancy terminal? where?
05:11 <@Nexxy> in jesusabdullah's scadpan
05:11 < jesusabdullah> Daegalus: https://github.com/jesusabdullah/scadpan
05:11 < Daegalus> scadpan?
05:11 < niggler> jesusabdullah: did you mean to type scrotum and omit a few characters?
05:11 < jesusabdullah> no, that's a screenshot thing
05:11 < Daegalus> niggler: no, misspelled scatman
05:11 < niggler> Daegalus: last line
05:11 < niggler> "scrot"
05:12 < Daegalus> ohhhh
05:12 < Daegalus> ya, just a termianl screenshotter
05:12 <@Nexxy> "we're all adults here"
05:12 < niggler> what's wrong with screen's screenshotter
05:12 < jesusabdullah> Nexxy: I have a few more icons in there too that's not being shown there
05:13 < jesusabdullah> Nexxy: an hourglass for sure
05:13 < Daegalus> niggler: because tmux doesnt have screen's screenshotter
05:13 < niggler> oh that's retarded
05:14 < Daegalus> unless you run screen in tmux
05:14 < fcrick> yay working: http://ec2-23-23-68-116.compute-1.amazonaws.com/
05:14 < jesusabdullah> also was not running screen on that terminal
05:14 < jmoyers> are you asking me to apache bench your micro instance?
05:15 < fcrick> apache bench?
05:15 < Daegalus> ab wee
05:15 <@Nexxy> let's not start DDoSing each other please
05:15 < jmoyers> :-)
05:15 < Daegalus> fcrick: https://en.wikipedia.org/wiki/ApacheBench
05:15 < fcrick> it's just a throw away costs me 2 cents per hour
05:15 < Daegalus> Nexxy: was that an open invitation to DDoS you?
05:15 < ccowan> Nexxy: What's your thoughts on Riak? 
05:15 < niggler> fuck riak
05:15 < jesusabdullah> ccowan: she DID write a client for it I HABEEB
05:16 <@Nexxy> ccowan, I love Riak
05:16 <@Nexxy> Daegalus, sure
05:16 <@Nexxy> let me just null route everything now
05:16 < Daegalus> Nexxy would have Riak's babies if she could
05:16 <@Nexxy> oh, okay
05:16 <@Nexxy> I didn't realize
05:16 < jesusabdullah> but
05:16 < jesusabdullah> nexxy already has a babby
05:16 <@Nexxy> I already have a baby
05:16 <@Nexxy> yes
05:17 < ccowan> Nexxy: Are you doing any kind of aggergate queries? Like sum()
05:17 <@Nexxy> and he is way cooler than Riak
05:17 <@Nexxy> ccowan, I pretty much just use Riak as a distributed KV store
05:17 <@Nexxy> with a little map reduce on the side
05:17 < fcrick> uh oh xcom demo done downloading
05:17 <@Nexxy> but I like the tuneability 
05:17 < niggler> Nexxy: there's no rule which prohibits you from having multiple babies
05:17 < fcrick> looks like javascript playtime is over
05:17 < ccowan> are the map/reduce's like couch where they are turned into indexes?
05:17 < Daegalus> I know, i follow OPBABYROSE
05:17 <@Nexxy> ccowan, I'm not familiar enough with couch to comment
05:18 <@Nexxy> ccowan, they are actually distributed and executed on each node
05:18 < ccowan> auh
05:18 <@Nexxy> to the best of my knowledge it doesn't index anything from them though
05:18 <@Nexxy> there is 2i on later versions of Riak
05:18 <@Nexxy> and Riak Control is pretty sweet
05:18 < Daegalus> Nexxy: how is baby? Any projectile vommitting yet?
05:18 <@Nexxy> oh plenty lol
05:19 < ccowan> so if you have a 1M keys it does the map reduce over those in real time?
05:19 < Daegalus> hehe, at least you are getting the full experience
05:19 <@Nexxy> ccowan, so yeah from what I understand it would 
05:19 < Nuck> Is there a list of changes between Mongoose 2 & 3?
05:20 < ccowan> hum
05:20 <@Nexxy> ccowan, but you can use key filters
05:20 < Daegalus> Nuck: ya, just 1: Bumped version
05:20 <@Nexxy> although I'm told it's still not a good idea in production
05:20 < Nuck> Daegalus: :I
05:20 <@Nexxy> afk tho
05:20 < Nuck> Daegalus: ha.  It's so funny I forgot to laugh.
05:20 < ccowan> ah.. so filter down the docs with key filters then map/reduce
05:20 < Daegalus> Nuck: on a more serious note, not sure, but im guessing you can do a diff from 2 to the latest?
05:21 < Nuck> Daegalus: I could, but I was hoping for a changelog or something similar :P
05:21 < Nuck> I'm lazy
05:21 < Nuck> And I like something I can glance over
05:22 < Daegalus> Nuck: me too, otherwise i would have alt-tabbed and would have checked
05:22 < Daegalus> Nuck: https://github.com/LearnBoost/mongoose/blob/master/History.md
05:23 < Daegalus> i decicded to not be lazy
05:23 < rauchg> wow
05:23 < rauchg> gigantic changelog is gigantic
05:23 < vicapow> I made a module!
05:23 < vicapow> https://github.com/vicapow/fav
05:23 < rauchg> vicapow
05:23 < rauchg> typo in README
05:23 < rauchg> fav.(
05:23 < jesusabdullah> vicapow: can you write those as well?
05:23 < Nuck> Daegalus: Thank ye
05:24 < rauchg> also use ```js to highlight javascript in the code snippets
05:24 < vicapow> jesusabdullah: not atm
05:24 < jesusabdullah> rauchg: no! >:O
05:24 < vicapow> rauchg: i did the ```js thing but it looked nasty on npm
05:24 < vicapow> rauchg: wheres the typo?
05:24 < niggler> readme.md
05:25 < niggler> fav.('favicon.ico',function(err,ico){
05:25 < niggler> should be fav('favicon.ico',function(err,ico){
05:25 < Daegalus> rauchg: i think i said it on Twitter, ut i enjoyed your book.
05:25 < vicapow> niggler: ah! good catch
05:25 < rauchg> Daegalus thanks man
05:25 < rauchg> hopefully i'll expand it soon
05:26 < Nuck> The fuck
05:26 < Nuck> My previous version isn't in the changelog
05:26 < Nuck> o_O
05:26 < Daegalus> rauchg: aawesome, looking forward to it. I mostly enjoyed it as a example of how to use things, since i already knew about node and JS and all. and some libraries to use in situations.
05:27 < Nuck> rauchg: You wrote a book?
05:28  * Nuck did not hear of this
05:28 < Daegalus> http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595?tag=duckduckgo-d-20
05:28 < vicapow> smashing, really
05:28 < Nuck> Do I see some Smashing Magazine up in there?
05:28 < Nuck> Badass, love SM
05:29 < Nuck> Cool to see them enter the Node.js scene :P
05:29 < vicapow> rauchg: did substack draw the robot?
05:30 < rauchg> nope 
05:30 < rauchg> http://smashingnode.com
05:30 < rauchg> link at the bottom
05:30 < rauchg> Dave Mott
05:30 < Nuck> This is weird.  I have Mongoose 2.8.x
05:30 < Daegalus> Nuck: might have been a transitionary version
05:31 < Nuck> Daegalus: 3.0.0alpha1 is in the log
05:31 < Nuck> But not 2.8.x
05:31 < Nuck> Or 2.7.x
05:31 < Nuck> Oh no 2.7 is there
05:31 < Nuck> Ends at 2.7.3
05:31 < nicholas_> quick, which async.js function do I use to return the results of *every* function in the array/object?
05:31 < Nuck> Never reaches 2.8.x
05:31 < Daegalus> dunno, check the commit history on the version file?
05:32 < nicholas_> erm, even if each of them return an error
05:32 < nicholas_> sorry, without adding the second bit it seems simple
05:32 < Nuck> I... Don't think it's possible? Error handling states that we should give up if there's an Error object there?
05:33 < nicholas_> Nuck: ok, I'm going to have to get a bit meta then
05:33 < Nuck> I guess you could wrap the callbacks in something which takes the Error and makes it less Errory
05:33 < nicholas_> I'm writing a validation layer
05:33 < rauchg> night guise 
05:33 < nicholas_> so, I want each validation function to execute and present all errors at once (so the end user can eventually see all validation problems together, not encounter them one at a time)
05:33 < Nuck> Night rauchg 
05:46 < mscdex> woohoo, ncurses is back in business now..... i think
05:48 < niggler> lol mscdex 
05:57 < mscdex> :-D
05:58 < niggler> going to test it out now
05:58 < niggler> mscdex: i swear, SC is pissing the hell out of me
05:58 < niggler> their help says "C" redraws and recenters the screen
05:59 < niggler> but the code actually requires you to do ^T z c
06:06 < mscdex> SC?
06:07 < niggler> spreadsheet calculator
06:07 < mscdex> ugh i wish there was a way to disable email notifications for every time _I_ fork a project
06:08 < niggler> did you update the npm version?
06:09 < mscdex> not yet, i want to make sure everything is good first
06:09 < mscdex> a fair amount changed
06:09 < mscdex> under the hood at least
06:31 < pyrotechnick> i'm microsoft and i just reinvented the wheel…AMA
06:33 < ChrisPartridge> pyrotechnick: what have they done this time?
06:33 < Nuck> TypeScript reminds me of Dart to a degree, attempting to make JS something it isn't
06:33 < Nuck> But TypeScript seems to do it better, IMO
06:34 < pyrotechnick> there's already a typed ecmascript
06:34 < pyrotechnick> it's called actionscript
06:35 < pyrotechnick> sad thing is this will gain way more traction than it should
06:36 < Nuck> I think this is less typed than ActionScript is, though I haven't seen code samples yet (have they released them yet?)
06:36 < pyrotechnick> yes
06:36 < pyrotechnick> it's been around for a while they've just officially announced it now
06:37 < pyrotechnick> there's some stuff on the hacker news
06:37 < pyrotechnick> and the reddits
06:37 < Oddman> oh gawd
06:39 < pyrotechnick> can we somehow make node incompatible with typedscript
06:39 < pyrotechnick> i'm starting the rumour now
06:39 < pyrotechnick> tell all your friends
06:40 < Oddman> I'm on it.
06:40 < Zoney> so you have to first compile typescript then run it?
06:40 < pyrotechnick> Zoney: it doesn't work with node
06:40  * ChrisPartridge laughs
06:41 < Zoney> i don't like edit/compile/run
06:41 < Zoney> i like edit/run
06:41 < Oddman> Unless it's google go :D
06:41 < pyrotechnick> yeah it doesn't work with node anyway
06:41 < pyrotechnick> so don't worry
06:41 < Oddman> good job, pyrotechnick 
06:41 < Oddman> disaster averted.
06:41 < pyrotechnick> i'm a man of the people
06:42 < Zoney> to be fair, microsoft is giving node a nod
06:44 < Oddman> see, now that's just shit
06:44 < Oddman> node deserves a blowie.
06:44 < ChrisPartridge> pyrotechnick: what are your thoughts on coffeescript? >:|
06:44 < Nuck> Oddman: Yeah, I sex my node binary daily
06:44 < Nuck> ChrisPartridge: CoffeeScript can go die.
06:44 < Nuck> That's my Official Statement.
06:44 < Oddman> ^ agreed
06:44 < Oddman> same with sass and less
06:45 < Nuck> I'm actually rather fond of LESS
06:45 < Oddman> I can't stand them
06:45 < Oddman> it encourages bad style dev
06:45 < Nuck> It's nice because it's kept the syntax, it's just iterating
06:45 < Oddman> true
06:45 < Nuck> I believe JS and CSS and HTML need evolution, not revolution
06:45 < Oddman> it's an extension, like angular :D
06:45 < Nuck> I hate SASS, I hate Stylus, I hate Jade, I hate HAML
06:46 < Nuck> I hate CoffeeScript, I hate Dart
06:46 < Oddman> bam.
06:46 < Nuck> They're all trying to be their own languages, when we have a perfectly good language sitting right there
06:46 < Nuck> Just *improve*
06:46 < Nuck> Don't modify for the sake of modifying
06:46 < Nuck> That's just pointless masturbation.
06:48 < Oddman> you got something against pointless masturbation?
06:48 < Nuck> Not when it involves me and my friendly phallus
06:51 < Oddman> haha
06:51 < Zoney> wow, typescript's online playground has auto-suggest
06:51 < niggler> amen nuck
06:52 < niggler> s/I hate/fuck/g
06:52 < Nuck> Zoney: *Microsoft IntelliSense Light™
06:53 < milani> Nuck, do u hate less too?
06:54 < Nuck> milani: No, I approve of LESS because it's evolutionary not revolutionary
06:55 < milani> great!
06:55 < Nuck> They didn't reinvent the wheel, they took the CSS syntax and built something on top of it
06:55 < milani> ;) 
06:55 < milani> SASS is not too much revolutionary. 
06:57 < Nuck> milani: It completely replaces the syntax
06:57 < Nuck> I want something that feels like a new version of an old language
06:58 < Nuck> Wow, I actually have to admit
06:58 < Nuck> TypeScript is a gajillion times better than Dart
06:58 < Nuck> And CoffeeScript
06:58 < Nuck> This is pretty evolutionary.  could live without the class system, but it's coming whether I like it or not (fuck you ES6)
06:58  * Oddman strokes his chin
06:59 < Nuck> If they added the typing to JS, I would not complain.  I won't use TypeScript, but I could survive the addition of these features
07:01 < TehShrike> Well
07:01 < TehShrike> Not that anyone cares
07:01 < TehShrike> But I won all the table tennis games
07:03 < niggler> fuck table tennis
07:03 < TehShrike> ;-P
07:04 < TehShrike> Hey, badminton is fun, no doubt
07:04 < TehShrike> But I don't think it can hit the intensity of table tennis
07:04 < TehShrike> I played a ton of badminton growing up
07:04 < TehShrike> That was the game that all the kids played in the middle of the street
07:06 < Nuck> Am I the only person here who thinks TehShrike is extremely unmanly now?
07:06 < TehShrike> srsly?
07:06 < Nuck> Badminton and Table tennis
07:06 < Nuck>  /table tenis/ as "intense"?
07:06 < TehShrike> Oh now hey
07:07 < TehShrike> Table tennis is very intense
07:07 < TehShrike> If you don't think so, you've never seen it played well
07:07 < Nuck> And yoga is an extreme sport.
07:07 < TehShrike> It's two competitors pitting their mastery of physics against each other
07:07 < Nuck> TehShrike: My best friend is an amazing table tennis player.  Can give asians a run for their money. </racist>
07:08 < TehShrike> What's his name?
07:08 < Nuck> Still think it's completely unextreme.
07:08 < TehShrike> You've watched him play, and you don't think table tennis is intense?
07:08 < Nuck> TehShrike: He's not professional, he gave it up after he got bored from beating everyone :P
07:08 < niggler> you have led a sad existence TehShrike 
07:08 < niggler> play a real sport
07:08 < Nuck> ^
07:08 < TehShrike> Oh I disagree
07:08 < Nuck> Try Judo, TehShrike 
07:09 < TehShrike> I've dabbled in basketball, baseball, and footabll in the past
07:09 < niggler> lacrosse?
07:09 < TehShrike> But table tennis is so much more beautiful
07:09 < Lorentz> you know what is the manliest sport in existence?
07:09 < Oddman> <Nuck> Am I the only person here who thinks TehShrike is extremely unmanly now?
07:09 < Lorentz> lawn bawls
07:09 < Oddman> no, and am I the only person thinking you've got manly insecurities? :P
07:09 < niggler> rochambeau
07:09 < Lorentz> bowls? whichever
07:09 < Nuck> Oddman: My penis is 2 inches, you caught me
07:09 < Oddman> haha
07:09 < TehShrike> >_<
07:09 < Oddman> I knew it.
07:10 < TehShrike> Less talking about manliness, more practicing to beat me at table tennis!
07:10 < Oddman> haha
07:10 < TehShrike> Every JS con should have at least one table tennis table for matches on the side
07:10 < Oddman> I'm quite a fan of table tennis tbh
07:10 < Oddman> hahaha
07:10 < niggler> fuck table tennis
07:10 < TehShrike> Sweet! Do you play much?
07:10 < Oddman> yes!
07:10 < Oddman> not at all :P
07:10 < TehShrike> ah, that's too bad
07:10 < Oddman> only when a table presents itself
07:10 < TehShrike> Have any favorite players?
07:10 < Oddman> much like the allure of a hot asian woman
07:10 < Oddman> no god no
07:10 < Oddman> I don't follow ANY sport
07:10 < Oddman> there are just some that I like playing
07:10 < TehShrike> We got a table in the bay near where I work a few years ago, so we all started playing
07:11 < TehShrike> I've buckled down a bit more this last year or so
07:11 < Oddman> lose a few extra pounds to get extra reach?
07:11 < TehShrike> I wish
07:11 < Oddman> ha
07:12 < TehShrike> When I'm looking for passive entertainment I've started watching games between the top players on YouTube
07:12 < TehShrike> It's pretty inspiring
07:12 < pyrotechnick> poker?
07:12 < Oddman> mmm
07:12 < TehShrike> Nah, table tennis
07:12 < pyrotechnick> table tennis and programmers go together well i will agree
07:13 < pyrotechnick> one of the only physical activities they excel at
07:13 < pyrotechnick> besides fapping and typing
07:13 < TehShrike> I haven't seen another sport yet where practical application of mastry over physics was so prominent
07:13 < TehShrike> pyrotechnick: how fast can you type? :-P
07:13 < pyrotechnick> depends how much crack i've had
07:14 < TehShrike> Give me your range
07:14 < TehShrike> pre-crack and post-crack
07:14 < pyrotechnick> let me check i don't really know to be honest
07:14 < TehShrike> Actually, I'd also be very interested in hearing your accuracy percentages, pre-crack and post-crack
07:14 < pyrotechnick> should i do charlie and the chocolate factory
07:14 < TehShrike> Do you play on typeracer?
07:14 < pyrotechnick> or a wrinkle in time
07:14 < TehShrike> Go to typeracer.com
07:15 < TehShrike> I haven't read charlie and the chocolate factory, though I watched both versions
07:15 < Oddman> fucking lol, pyrotechnick 
07:15 < Oddman> :P
07:15 < TehShrike> I read all the Wrinkle in Time books
07:15 < Oddman> wish I could +1 on irc chat lines. haha
07:15 < LouisT> yea, i got ranges to work for the most part, but i've not really tested it
07:15 < pyrotechnick> i was in some MKULTRA shit and they made us read all that crap
07:15 < LouisT> eeerrrr wrong window
07:15 < Oddman> haha
07:16 < pyrotechnick> while the masses read the day the earth stood still
07:16 < TehShrike> lol
07:16 < pyrotechnick> bah bah
07:16 < TehShrike> Well, and now I've seen the Wikipedia page on mkultra, I guess
07:16 < pyrotechnick> MKULTRA doesn't actually exist
07:17 < TehShrike> Good to know
07:17 < TehShrike> How do you know, though?
07:17 < pyrotechnick> but thousands of other projects just like it actually do
07:17 < pyrotechnick> internationally
07:17 < TehShrike> Well I already assumed that
07:17 < pyrotechnick> that's how you can tell the difference between a victim and someone who enjoys MUSE
07:18 < TehShrike> You're not interested in getting me good data on pre-crack and post-crack typist stats at all, are you?
07:19 < pyrotechnick> i won the race
07:19 < pyrotechnick> if that helps
07:19 < pyrotechnick> my car was violet
07:19 < TehShrike> Race me!
07:19 < pyrotechnick> which is the highest visible frequency
07:19 < TehShrike> http://play.typeracer.com/?rt=trtehshrike_colemak
07:19 < pyrotechnick> they say red is the fastest but they're wrong
07:19 < TehShrike> I've had about 7 beers, so I'm at a disadvantage
07:19 < TehShrike> Unless you tell me how much crack you've had
07:25 < pyrotechnick> fuck that
07:25 < TehShrike> lol
07:25 < TehShrike> You should see me type when I'm sober
07:25 < pyrotechnick> that is not a wrinkle in time
07:25 < TehShrike> Sadly, you are correct
07:25 < pyrotechnick> that's 1984
07:25 < pyrotechnick> or brave new world
07:25 < TehShrike> I haven't seen a passage from Wrinkle in Time up there yet
07:26 < TehShrike> It was actually Structure and Bonding (Basic Concepts in Chemistry) by Jack Barrett
07:26 < pyrotechnick> true
07:26 < milani> haha
07:26 < pyrotechnick> it really threw me off
07:27 < TehShrike> If I was sober and warmed up, I should have got 120+ wpm on that one
07:27 < pyrotechnick> thats intense
07:27 < pyrotechnick> well at least i'm up at my desk now
07:27 < pyrotechnick> you've done the unthinkable
07:27 < milani> if I was english I could get you:))
07:28 < pyrotechnick> i have read like 10000 of these
07:28 < pyrotechnick> http://www.reddit.com/r/AskReddit/comments/10rdtd/what_is_something_your_current_or_past_employer/
07:28 < pyrotechnick> losing faith in humanity at a staggering rate
07:28 < TehShrike> :-)
07:28 < pyrotechnick> i couldn't care less what people do to eachother but animals man cmon
07:30 < Oddman> ah 
07:30 < Oddman> that reminds me of a photo series on facebook I saw not too long ago of a dog that could dumped ina  trash can
07:30 < Oddman> when the vets got him he was skin and bone, but alive.
07:30 < Oddman> 9 month recovery.
07:30 < Oddman> shit makes me angry
07:30 < pyrotechnick> i hope an astroid comes soon
07:31 < pyrotechnick> before we get a bigger space program and spread out filth across the solar system even further
07:32 < Oddman> it's not all bad dude :)
07:33 < Oddman> ever had french toast? That shit is unreal.
07:33 < pyrotechnick> yeah i have chooks
07:33 < pyrotechnick> they are rad
07:33 < Oddman> hehe
07:33 < pyrotechnick> i hypnotise them
07:33 < pyrotechnick> then they spill the avian secrets of the cosmos
07:33 < TehShrike> Tonight I drank liquor that tasted exactly like cinnamon toast crunch
07:34 < Oddman> that's disgusting.
07:34 < TehShrike> You might think so
07:34 < pyrotechnick> this escalated quickly
07:34 < TehShrike> If you didn't like cinnamon toast crunch, I guess
07:34 < LouisT> mmmmm cinnamon toast crunch... if i had that i'd be screwed
07:35 < TehShrike> It was sweet - it wasn't a thing to drink by itself in a night
07:35 < pyrotechnick> what is geeksquad
07:35 < TehShrike> Worked well as a sip between other drinks, though
07:35 < pyrotechnick> they're getting burnt hard in this thread
07:35 < TehShrike> pyrotechnick: a scan
07:35 < TehShrike> *scam
07:35 < TehShrike> From... Best Buy, I think
07:35 < pyrotechnick> it must be really really bad
07:35 < TehShrike> It is
07:35 < TehShrike> And I haven't even seen those posts yet
07:35 < pyrotechnick> there's like 100
07:36 < TehShrike> The internet has known about them for years
07:36 < TehShrike> They charge suckers a ton of money to fuck up their computers
07:36 < TehShrike> It's depressing
07:36 < pyrotechnick> i'm trying to keep rule 51 in my mind as i read this
07:37 < Oddman> rule 51?
07:37 < pyrotechnick> there's always something more messed up than what you just saw
07:37 < Oddman> oh right
07:38 < Oddman> wish I had known about that when I used to browse rotten.com
07:38 < Oddman> (nsfw for those who never heard of it)
07:38 < pyrotechnick> try tor or i2p one day
07:38 < pyrotechnick> then rip your eyes out and dissolve them
07:39 < ChrisPartridge> ugh, tor should be dismantled and those responsible executed
07:39 < pyrotechnick> http://www.youtube.com/watch?v=eRqsfNqXBKM
07:40 < Nuck> In a system set up via "services", what should I use to communicate between them?
07:40 < pyrotechnick> depends
07:40 < pyrotechnick> rest is always good
07:40 < Nuck> Is there some good internal communications protocol that I don't know about?
07:40 < pyrotechnick> but you might want like json streams
07:40 < pyrotechnick> or a binary proto
07:40 < Nuck> As much as I love RESTful ideas, it's a LOT of overhead for linking backend services
07:40 < pyrotechnick> depends
07:41 < Oddman> Nuck, there doens't need to be
07:41 < Nuck> pyrotechnick: I think I'll just use JSON streams.  I have a tool, I was just hoping there was a better tool
07:41 < Oddman> thanks to frameworks like express and sinatra
07:41 < Nuck> Oddman: Huh?
07:41 < Nuck> Oddman: Uhm... wat
07:41 < Oddman> RESTful interfaces
07:41 < pyrotechnick> sounds good, there's some ebooks floating around atm for json and stream stuff
07:41 < Nuck> I have a \0-delimited JSON protocol
07:41 < pyrotechnick> whatever works
07:42 < pyrotechnick> ChrisPartridge: it's not tor's fault humans suck arse
07:42 < Nuck> (it also handles RPC functionality and networked events)
07:42 < Nuck> Or should I be using a Message queue?
07:43 < pyrotechnick> if people think nobody's watching them they're severely deluded anyway
07:43 < pyrotechnick> their judgment will come
07:43 < TehShrike> Oh hey, this sounds relevant to something I was wondering a bit ago
07:44 < TehShrike> If you're running a dnode service, what's your preferred method for keeping some part of it external (browser-facing), and some part of the service internal (available only to other services running on the server)?
07:45 < pyrotechnick> i guess it would be coupling it with upnode and some kind of auth
07:45 < pyrotechnick> or just having two distinct endpoints in the server itself
07:46 < TehShrike> I was thinking of having the service open a dnode server on two ports, and making only one of them externally routeable
07:46 < pyrotechnick> seems a bit more foolproof
07:46 < pyrotechnick> easier to audit too
07:47 < TehShrike> I hadn't looked at upnode
07:47 < pyrotechnick> yet another product of substack's christ conciousness
07:49 < ChrisPartridge> gettin biblical up in here
07:49 < pyrotechnick> don't get me started
07:49 < pyrotechnick> i'll bust out some gematria
07:50 < pyrotechnick> we should manifest some kind of node bible from the fabric of space-time via gematria
07:51 < pyrotechnick> in the beginning ry created the callbacks and the bindings
07:51 < TehShrike> Vaguely related, y'all been following the construction of the stream handbook?
07:51 < TehShrike> "And Ryan Dahl saw the streams, and behold, it was pretty good"
07:51 < TehShrike> https://github.com/substack/stream-handbook
07:51 < pyrotechnick> and the face of ry moved across the waters of the internet
07:52 < pyrotechnick> and he saw that it was good
07:52 < ChrisPartridge> hah
07:52 < TehShrike> :-)
07:52 < pyrotechnick> the node was void and without form
07:53 < pyrotechnick> at the start it had no debuggins but ry saw the debuggins and split the runtime from the debuggins with a firmament
07:55 < pyrotechnick> shall we skip straight to revelations
07:55 < TehShrike> ++pyrotechnick
07:55 < pyrotechnick> the great tribulation of noders
07:55 < ChrisPartridge> haha
07:55 < pyrotechnick> behold a beast rose from the sea and on its forehead the blasphemy of all lands: typedscript
07:56  * ChrisPartridge laughs
07:56 < deoxxa> this must be the version with the bad translation
07:56 < deoxxa> in the original that was "coffeescript"
07:56 < ChrisPartridge> this is the king james version 
07:57 < pyrotechnick> yeah this is authorised for the slaves to read
07:57 < pyrotechnick> you can't tell them the truth
07:57 < pyrotechnick> they can't handle it
07:57 < deoxxa> testament driven development?
07:57 < pyrotechnick> they'll start doing heretic deeds like thinkings and questioning
07:57 < TehShrike> #node.js isn't supposed to be this funny this late
07:57 < ChrisPartridge> soon we'll have the node Quran, and the javascript holy war will begin
07:58 < pyrotechnick> isaacsanyahu
07:58 < deoxxa> watch out tower.js
07:58 < TehShrike> Look, I'm telling you, you can derive LispyScript from the principles inherent in the original ECMAScript documents!
07:58 < pyrotechnick> :D
07:58 < Oddman> hahaha
07:58 < TehShrike> It's not a matter of translation, it's a matter of of application!
07:59 < Oddman> "and so it sayeth on the book of Object, fear not the instantiation of thine class!"
07:59 < pyrotechnick> there's an event-loop, going round, making callbacks
07:59 < pyrotechnick> it decides who to execute and who to queue
07:59 < TehShrike> "for behold, I have made new to be a blessing, and not a curse"
07:59 < Oddman> LOL
07:59 < ChrisPartridge> the event loop of judgement
08:00 < pyrotechnick> they'll be a golden system call, reaching down
08:00 < pyrotechnick> when the callbacks comes around
08:00 < TehShrike> And they looked upon the golden call stack, and they were healed.
08:00 < Oddman> for method shall return!
08:00 < pyrotechnick> the second coming of the garbage collector
08:00 < ChrisPartridge> thou shall practice faith driven development, tests are blasphemy
08:01 < TehShrike> Oh shit, that's too close to home ;-P
08:01 < deoxxa> > but he said to me, "my package management is sufficient for you, for my power is made perfect in tight scoping"
08:01 < TehShrike> rotfl
08:01 < TehShrike> "my package management is sufficient for you" I've got to remember that one
08:02 < deoxxa> as the VM has loved me, so have i loved you. abide in my JIT compilation and optimisation. if you keep my type signatures, you will abide in my love, just as i have kept the VM's type signatures and abide in its love.
08:02 < TehShrike> But if there's one verse that applies equally in biblical context and programming context, it's Proverbs 30:2
08:02 < Oddman> I wonder if is hescript is a coffephobe
08:03 < terinjokes> deoxxa: put down the scotch, i believe you've had too much
08:03 < TehShrike> deoxxa++
08:03 < pyrotechnick> by their asynchronicity ye shall know them
08:04 < deoxxa> in node the love of ryah was made manifest among us, that ryah sent his only project into the world, so that we might process data asynchronously through him.
08:04 < pyrotechnick> and all that codeth in node shall not perish
08:05 < deoxxa> but wait(3) forever, and ever, amen
08:05 < TehShrike> "Blessed are the poor in classes, for theirs is the prototypal object"
08:05 < deoxxa> haha
08:05 < deoxxa> TehShrike++
08:06 < TehShrike> "You are the webdev of the earth, but if the webdev loses it's JavaScript, how shall it be animated?"
08:06 < deoxxa> and we know that for those who love npm all things work together for good, for those who are called according to his purpose
08:06 < pyrotechnick> minerva!
08:07 < pyrotechnick> ry i come to your awesome presence, from the blocking into your scalability, node.js light of the world shine upon us, set us free with the events you now bring us
08:08 < deoxxa> for i know the plans i have for you, declare the core team, plans for welfare and not for backwards incompatbility without major version bumps, to give you a future and a hope
08:08 < pyrotechnick> you heard it here first folks
08:09 < TehShrike> lol
08:10 < deoxxa> draw near to the community, and it will draw near to you. cleanse your deployment, you sinners, and purify your builds, you double-minded.
08:10  * deoxxa tips hat
08:11 < deoxxa> dinner time
08:11 < TehShrike> "Now I saw a new repository and a new deployment server, for the first repository and the first deployment server had passed away. Also, there was no more internet. Then I, Developer, saw the holy server, New Production, coming down out of the VM from Admin, prepared as a headless node configured for release."
08:12 < deoxxa> oh this is too perfect: each stream must give has he has decided in his heart, not reluctantly or under compulsion, for node loves a cheerful giver.
08:12 < deoxxa> s/has/as/
08:12  * deoxxa really gone
08:12 < TehShrike> lol
08:12 < TehShrike> Oh that is too perfect
08:12 < TehShrike> Bravo
08:14 < pyrotechnick> even though i walk through the valley of the shadow of javascript
08:14 < pyrotechnick> i will fear no code-smells
08:15 < pyrotechnick> for node is with me, its libuv and v8, they comfort me
08:16 < pyrotechnick> node core has prepared a platform before me in the presence of stack-overflowers
08:17 < pyrotechnick> it anoints my head with garbage collection, my buffers not overfloweth
08:17 < TehShrike> So now that we've done all this
08:17 < TehShrike> Have y'all seen the lolcat bible?
08:17 < pyrotechnick> yeah
08:17 < pyrotechnick> i just was reading it before
08:17 < pyrotechnick> so good >.<
08:17 < TehShrike> lol
08:18 < TehShrike> I found it a year or so ago
08:18 < pyrotechnick> any other translations?
08:18 < TehShrike> I was impressed
08:18 < pyrotechnick> they've done the entire thing now right?
08:18 < TehShrike> They've done... a lot more than the last time I checked, that's for sure
08:18 < TehShrike> That's really impressive
08:19 < TehShrike> http://www.lolcatbible.com/index.php?title=Ecclesiastes_1
08:19 < pyrotechnick> best book
08:19 < TehShrike> "Generashun comez n generashun goez, still same lolcats."
08:19 < TehShrike> It's a good book.  I do love to read it
08:19 < pyrotechnick> i like
08:19 < pyrotechnick> 1:9
08:19 < opus_> hey guys I got node.js mostly working on my ipod touch, as a server
08:20 < pyrotechnick> What has been will be again, what has been done will be done again; there is nothing new under the sun.
08:20 < TehShrike> Word.
08:20 < opus_> i event got 'geddy' a bootstrap/mobile framework to run its demo
08:20 < pyrotechnick> Kitteh can not sez "OMFGZ sumthing new!" is jus REPOST!.
08:21 < TehShrike> Related: https://twitter.com/substack/status/213252261999149057
08:21 < pyrotechnick> related: http://en.wikipedia.org/wiki/Illegal_number
08:21 < TehShrike> HAH
08:21 < TehShrike> Yes.
08:22 < TehShrike> I'm beginning to suspect that I might like you, pyrotechnick...
08:22 < pyrotechnick> you might like my list
08:22 < opus_> however, mongo doesn't work. should i use mongolite?
08:23 < pyrotechnick> TehShrike: https://gist.github.com/6d46ad44912a7fecd0c6
08:23 < pyrotechnick> it's some research for ma games
08:26 < TehShrike> Huh.  That is quite a list of things.
08:26 < TehShrike> It does have a Mark Twain heading, which makes it better than most lists
08:26 < pyrotechnick> it's a bit messy i was doing it on my phone
08:26 < pyrotechnick> but yeah there's some rad stuff here
08:27 < pyrotechnick> basically i don't want anything on it the average person has a deep understanding of
08:29 < TehShrike> on what?
08:29 < TehShrike> Your games?
08:29 < pyrotechnick> well the list of concepts for the game so the game by extension
08:29 < TehShrike> I like games.  I think about games a lot.
08:29 < pyrotechnick> i'm thinking it will limit the griefing
08:29 < TehShrike> Have you played Spec Ops: The Line?
08:30 < pyrotechnick> nope
08:30 < pyrotechnick> it appears decent
08:31 < TehShrike> That's a lie
08:31 < TehShrike> It appears shitty
08:31 < TehShrike> It looks like a traditional military bro-shooter
08:31 < pyrotechnick> i haven't looked at the graphics just the wiki
08:31 < TehShrike> It is, however, one of the most meaningful and well-crafted games I have ever played
08:31 < pyrotechnick> what happened to rockstar doing it
08:31 < TehShrike> I never heard about that
08:32 < TehShrike> Do you care about games?
08:32 < pyrotechnick> looks like they started it for ps2 a while ago
08:32 < TehShrike> If you care about games, do not read up on that game
08:32 < pyrotechnick> yeah i've written some for thq and ubi
08:32 < TehShrike> Because playing through that game is one of the more meaningful experiences you will have
08:32 < TehShrike> As a gamer
08:33 < pyrotechnick> i've half a mind to check it out but
08:33 < pyrotechnick> windows
08:33 < TehShrike> As soon as you finish the game, go out and read the conversations that other people have started about the game, because they are fascinating and enriching
08:33 < TehShrike> But not until then
08:34 < TehShrike> The only games from the last year or so that are in the same league are Bastion and Portal 2
08:34 < TehShrike> But neither of them made me think as much as Spec Ops: TL did.
08:35 < pyrotechnick> point on this doll where spec ops touched you
08:35 < TehShrike> In the FTP
08:35 < TehShrike> err
08:35 < TehShrike> FPS
08:35  * TehShrike kicks his subconscious
08:36 < pyrotechnick> if thy fingers cause thee to typo, cut them off
08:36 < TehShrike> lol
08:36 < pyrotechnick> for it is better to enter this life maimed than to be cast into the LAKE OF FIRE
08:37 < pyrotechnick> i'm still hanging out for world of goo 2
08:37 < TehShrike> ooh
08:37 < TehShrike> World of Goo... I should go play that some more
08:37 < TehShrike> But I still feel like I need to put hours into Binding of Isaac and FTL
08:37 < TehShrike> And Torchlight 2...
08:38 < SoulRaven> hello
08:38 < pyrotechnick> welcome back mr raven
08:38 < SoulRaven> anyone use crc module to calculate crc16?
08:38 < SoulRaven> https://github.com/alexgorbatchev/node-crc/blob/master/README.md
08:39 < SoulRaven> i don't know how to setup the polynomial to 0XA001
08:40 < TehShrike> ARE YOU SAYING YOU'RE SMARTER THAN ME?
08:40 < pyrotechnick> it looks like it takes it as a second param?
08:40 < pyrotechnick> no maybe not
08:41 < TehShrike> Well, in any case, you're probably smarter than me anyway.
08:41 < pyrotechnick> who
08:41 < pyrotechnick> what are you on about
08:41 < TehShrike> Both of you
08:41 < TehShrike> EVERYTHING
08:41 < SoulRaven> anyone knows any module or solution for calculating CRC16 using node?
08:41 < pyrotechnick> don't get stuck in the sky TehShrike
08:42 < TehShrike> So, totally unrelated to my drunken ramblings from the last hour
08:42 < TehShrike> But I'm really intrigued by TypeScript, more than I have been my most programming diversions of the last year
08:42 < sinclair> pay attention, http://www.zdnet.com/microsoft-typescript-can-the-father-of-c-save-us-from-the-tyranny-of-javascript-7000005054/
08:42 < TehShrike> I'm interested by the idea, and I'm fascinated by the response it's been getting
08:42 < RLa> SoulRaven, built-in crypto module does not offer it?
08:43 < SoulRaven> no
08:43 < pyrotechnick> sinclair: it doesn't work with node anyway
08:43 < SoulRaven> no CRC
08:43 < Torsten85> Could someone tell me how to achieve this 4 ruby lines in node? https://gist.github.com/de4b602a213b4b264706
08:43 < SoulRaven> only crypto, but no CRC
08:43 < sinclair> nodets please
08:43 < TehShrike> pyrotechnick: it doesn't?  It claims that it does
08:43 < pyrotechnick> shh
08:43 < sinclair> the worst thing about nodejs is the js part
08:43 < pyrotechnick> this is the KJV
08:43 < TehShrike> Also, thanks for that link pyrotechnick, I haven't read that post yet
08:43 < RLa> Torsten85, did you check out the crypto module
08:44 < pyrotechnick> >.<
08:44 < TehShrike> Look, I'll just say it - I love type checking
08:44 < pyrotechnick> RLa: he wants someone to write the code for him
08:44 < RLa> oh
08:44 < pyrotechnick> TehShrike: you can love it all you want but it doesn't work with node
08:44 < pyrotechnick> so let it go
08:44 < TehShrike> pyrotechnick: elaborate
08:44 < pyrotechnick> we'll all just wish them good luck and leave it at that
08:45 < TehShrike> How does it not work with node?
08:45 < sinclair> is it a js preprocessor?
08:45 < sinclair> like coffeescript?
08:45 < TehShrike> Any more than CoffeeScript or some other similar shenanigans doesn't work with node?
08:45 < TehShrike> sinclair: as I understand it, yes
08:45 < Torsten85> RLa yes i did, but I don't get it.
08:45 < RLa> with node you have lot of callbacks and i doubt it's smart enough to guess callback argument types
08:45 < sinclair> i bet it will work like node
08:45 < sinclair> *with
08:45 < pyrotechnick> it's not that it doesn't work with node it's that it doesn't work with node you know?
08:46 < TehShrike> Of course it works with node
08:46 < sinclair> its in Microsofts best interest afterall
08:46 < TehShrike> When they announced it, they announced it working awesomely in two places: Visual Studio, and node
08:46 < TehShrike> Because MS isn't dumb
08:46 < pyrotechnick> look you can lead a horse to water but you can't make it drink
08:46 < sinclair> would be nice to see Microsoft buy out Joyent, and really get the ball rolling with node
08:46 < TehShrike> MS rolled it out straight to node
08:46 < TehShrike> Because they love you
08:46 < TehShrike> And they want you to like them back
08:46 < TehShrike> Should you like them?  Fuck if I know
08:46 < pyrotechnick> MS needs to shutdown EVERY department besides xbox
08:47 < TehShrike> But I'm interested in what they're doing
08:47 < sinclair> i do like Microsoft, they pwn all other development technologies
08:47 < pyrotechnick> those dark arts will be the death of you
08:47 < sinclair> what i wouldn't want to see, if MS move back into closed sourcing software
08:48 < sinclair> MS's recent activities have been open and good
08:48 < RLa> since when are their main products open source?
08:48 < TehShrike> And seriously guys, I love type checking
08:48 < pyrotechnick> https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS
08:48 < sinclair> RLa: http://aspnetwebstack.codeplex.com/
08:48 < substack> MS doesn't yet get unix so they are doomed to repeat its trappings
08:48 < pyrotechnick> can we stop pretending microsoft has innovated in any way shape or form here please
08:48 < sinclair> ^ you've seen this right?
08:49 < TehShrike> hah, thanks for that pyrotechnick, I'd been wondering if such a list had been compiled
08:49 < RLa> and i think ms is open and good to avoid becoming irrelevant
08:49 < pyrotechnick> https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS https://github
08:49 < sinclair> pyrotechnick: are you saying Microsoft don't innovate in the development space?
08:49 < substack> but maybe node can inject some much-needed unix design principles
08:49 < pyrotechnick> yeah they innovate virtual torture devices
08:49 < sinclair> pyrotechnick: that's dumb
08:49 < TehShrike> Howdy substa
08:49 < TehShrike> *substack
08:49  * TehShrike kicks his autocomplete
08:49 < sinclair> pyrotechnick: you use a Mac right?
08:49 < SoulRaven> anyone use crc16 for some project?
08:50 < pyrotechnick> i call up modems and whistle into the phone
08:50 < substack> blarg so far behind on my jsconf eu materials
08:50 < RLa> i think ms research innovates a lot but not much of it gets into products
08:50 < TehShrike> substack: talk about LispyScript :-D
08:50 < sinclair> RLa: you know, a lot of Microsoft language research goes into things like F# before it makes it into C#
08:51 < TehShrike> I don't know why I'm so fascinated by LispyScript
08:51 < substack> we need more languages that compile to javascript
08:51 < pyrotechnick> http://www.youtube.com/watch?v=D1ii__QoNuM
08:51 < substack> because the idea is bad and a proliferation of project shows that
08:51 < substack> like async flow control libraries
08:51 < sinclair> RLa: C# is actually behind F# in terms of "state of the art" features
08:51 < TehShrike> I can't motivate myself to write non-Javascript
08:51 < TehShrike> But all these compile-to-JS libraries fascinate me
08:51 < substack> actual solutions are attractors that converge without anybody's intervention
08:51 < pyrotechnick> don't forget JScript people
08:52 < pyrotechnick> i don't want to feel that feel i felt that day
08:52 < sinclair> pyrotechnick: JScript was crap
08:53 < sinclair> pyrotechnick: not all MS tech makes the grade
08:53 < BennyLava> cpt obvious ^
08:53 < pyrotechnick> my cup overfloweth
08:53 < TehShrike> substack: so, I've seen opinions all day on Twitter, and several blog posts. What's your opinion on TypeScript?
08:53 < pyrotechnick> i'm drowned by the deluge of wisdom
08:53 < sinclair> pyrotechnick: and their applications (SharePoint, Commerce and CRM) are god awful, and i don't like Office all that much
08:54 < pyrotechnick> not many people know this but MS is actually a front for satan
08:54 < TehShrike> +b pyrotechnick
08:54 < sinclair> pyrotechnick: there are plenty of fair criticisms about MS products, but their technology/development stack are world class
08:54 < TehShrike> Look, I've been a card-carrying software geek for decades now
08:55 < substack> TehShrike: typescript is so unimportant
08:55 < TehShrike> But I like MS
08:55 < TehShrike> substack: I can buy that, but why do you say so?
08:55 < sinclair> i don't understand how you could not like MS tech
08:55 < pyrotechnick> yeah there's a world they rule alright
08:55 < pyrotechnick> the underworld
08:55 < substack> TehShrike: because there are so many languages that compile to javascript and none of them offer anything important
08:55 < TehShrike> pyrotechnick: I prefer the MS operating system since XP SP2
08:55 < substack> because javascript is already everywhere and worse is better
08:56 < TehShrike> substack: what, if anything, could a compile-to-JS language bring to the table that would make you consider it?
08:56 < sinclair> in fact, Microsoft will innovate over node, because, that's what they do
08:56 < Nuck> substack: I'd rather have TypeScript than ES6
08:56 < TehShrike> substack: I love JS
08:56 < sinclair> and everyone here will benefit from it, i don't see how thats a bad thing
08:56 < substack> TehShrike: it could take javascript but remove syntax not add more
08:56 < TehShrike> I love JS, but some of these things fascinate me
08:56 < TehShrike> substack: now that is very interesting
08:57 < TehShrike> substack: a very severe linter?
08:57 < sinclair> http://en.wikipedia.org/wiki/Anders_Hejlsberg <-- legend
08:57 < pyrotechnick> TehShrike you can have anything you want, anything
08:57 < pyrotechnick> just don't eat that fruit
08:57 < substack> not a linter, just a program that fails to run certain programs
08:58 < TehShrike> substack: I won't deny, I've wished I could remove things from various languages, certainly JS
08:58 < TehShrike> But most people write that off, and focus on adding the features that they wish people would focus on
08:58 < substack> nobody is removing things from javascript
08:58 < substack> everybody is adding more things
08:58 < pyrotechnick> oh you guys
08:58 < TehShrike> Of course not
08:58 < substack> have they not learned the lessons of perl?
08:58 < TehShrike> Nobody can remove anything from any established language
08:58 < Nuck> substack: We're becoming Java
08:58 < substack> always adding and never removing is a bad direction
08:58 < pyrotechnick> speak for yourself
08:58 < Nuck> We've already got a second inheritance model1
08:58 < substack> you need balance
08:58 < Nuck> This is so Java.
08:59 < TehShrike> substack: I agree wholeheartedly
08:59 < Nuck> I'd like to propose an idea
08:59 < substack> every new thing should need to justify itself by getting rid of some older bad ideas
08:59 < Nuck> Can we just scrap ES6
08:59 < TehShrike> But projects, especially projects as widely-used as JS, do not get removed from.
08:59 < Nuck> And start over on a new iteration of JS?
08:59 < pyrotechnick> NO WE NEED HARMONY
08:59 < Nuck> TehShrike: Cough cough <b>
08:59 < pyrotechnick> haven't you heard
08:59 < Nuck> Cough cough <i>
08:59 < Nuck> Cough cough <u>
08:59 < TehShrike> Nuck: those are not JS, those are HTML
09:00 < TehShrike> And I am so glad they are deprecated
09:00 < pyrotechnick> i think Nuck has athsma
09:00 < TehShrike> Even though browsers continue to support them
09:00 < Nuck> TehShrike: they're not!
09:00 < Nuck> That's the problem
09:00 < Nuck> <b> and <i> are PERFECTLY VALID in HTML5
09:00 < pyrotechnick> <i> is for icons now
09:00 < Nuck> Not even deprecated
09:00 < pyrotechnick> get with the program
09:00 < Nuck> pyrotechnick: hahaha
09:00 < sinclair> TypeScript looks awesome
09:00 < Nuck> Very true
09:01 < TehShrike> They were all deprecated years ago
09:01 < Nuck> <i> is *slightly* different from <em>
09:01 < Nuck> TehShrike: Well, they're undeprecated now
09:01 < pyrotechnick> I IS FOR ICON
09:01 < BennyLava> No they weren't
09:01 < Nuck> BennyLava: They were for a period deprecated
09:01 < BennyLava> They were never deprecated..
09:01 < BennyLava> No.
09:01 < Nuck> I think it was in early specs of HTML5
09:01 < BennyLava> No.
09:01 < Nuck> They talked about deprecating them
09:01 < Nuck> But never actually did so
09:01 < BennyLava> Yes, lots of talk.
09:01  * BennyLava shrugs
09:02 < Nuck> But I do recall it being put on paper, only to be removed a few months later
09:02 < TehShrike> :-(
09:02 < Nuck> Sadly
09:02 < sinclair> BennyLava: you like TypeScript?
09:02 < Nuck> <b> and <i> need to die
09:02 < TehShrike> I remember seeing it on w3.org
09:02 < TehShrike> But I guess... http://dev.w3.org/html5/markup/i.html
09:02 < BennyLava> Sadly, yes. :)
09:02 < BennyLava> sinclair: it looks interesting, yes.
09:02 < sinclair> BennyLava: looks tidy alright, i wonder what debugging options it has
09:03 < pyrotechnick> so guys, after reading this reddit, i need some music that will like, come upon me slowly kind of smitten like and just sort of love and hold me until the end of time
09:03 < phrearch> hello
09:03 < sinclair> BennyLava: actually, in a perfect world, the browser would have a managed runtime, and typescript could compile to it. (or any language should be able to compile to it)
09:03 < BennyLava> I like to stay away from any new MS tech for a while though, see how it develops :p
09:03 < phrearch> i wonder if its possible to use connect with ws together
09:03 < SoulRaven> anyone? crc16?
09:03 < Nuck> pyrotechnick: --> turntable.fm
09:03 < phrearch> im now using node's http server like http://paste.kde.org/561050/
09:03 < TehShrike> SoulRaven: sorry, I don't think anybody sitting in this room at the moment uses that library
09:04 < TehShrike> turntable.fm sucks
09:04 < sinclair> BennyLava: i can't see how it handles events 
09:04 < phrearch> if i replace it with connect, then ws isnt listening anymore
09:04 < drey> pyrotechnick: college
09:04 < pyrotechnick> im australian mates
09:04 < BennyLava> pyrotechnick: noted
09:04 < pyrotechnick> we dont get that kind of internets down here
09:04 < pyrotechnick> i'm not sure if we're keeping you out or us in
09:04 < sinclair> pyrotechnick: you know, Anders_Hejlsberg is a BIG fan of typing
09:05 < pyrotechnick> he looks like he's a big fan of something else
09:05 < sinclair> pyrotechnick: he was the architect of C#
09:05 < sinclair> "is" the architect
09:06 < pyrotechnick> of the matrix?
09:06 < pyrotechnick> that sell-out
09:07 < substack> ROBOTS IN DISGUISE
09:08 < substack> Discuss.
09:08 < sinclair> he holds as much weight as linus torvald, dijkstra or carmack in development circles 
09:08 < Nuck> OH GOD THEY COULD BE ANY ONE OF US
09:08 < pyrotechnick> unfortunately you cannot be told what the matrix is
09:08 < pyrotechnick> you have to see for yourself
09:08 < Nuck> I would like to propose that substack is a robot in disguise attempting to convince us to discuss his people.
09:08 < Nuck> It's all a clever distraction.
09:09 < sinclair> If you want to do complex work, you don't want to use JavaScript.
09:09 < pyrotechnick> that's just like something them dirty machine-men would do
09:09 < pyrotechnick> http://www.youtube.com/watch?v=O0fQkYXHAK0
09:09 < sinclair> JavaScript - The reality is that JavaScript seems to bend and flex this logic almost as if rather than being developed by humans thinking human thoughts, it was accidentally left behind by visiting aliens.
09:10 < Nuck> JavaScript fits human thoughts better than most languages, IMO.
09:10 < pyrotechnick> substack there is goodness within you still i know there is somewhere deep down inside your dark shrivelled heart
09:10 < Nuck> pyrotechnick: He has no heart.
09:10 < Nuck> pyrotechnick: He is a robot.
09:10 < sinclair> Nuck: that's problematic
09:10 < Nuck> sinclair: /shrug
09:11 < pyrotechnick> MACHINE MEN WITH MACHINE MNDS AND MACHINE HEARTS
09:12 < sinclair> Nuck: you have to find a good middle ground between the code, and the human brain. its pretty much a given that the typical human brain is quite stupid. programmers needs the language to "help" them get things done, otherwise, things get crazy
09:12 < pyrotechnick> the middle ground: binary
09:12 < substack> you need to placate your monkey brain or else it will start throwing poo everywhere
09:12 < sinclair> its why we don't code in assembly anymore
09:13 < substack> so your alien brain can get some work done
09:14 < sinclair> what's nice about TypeScript, is its not too far removed from JavaScript
09:17 < sinclair> also that Anders Hejlsberg is behind this project, he also did Turbo Pascal, Delphi and C#
09:19 < minver> Can you recommend a good book about node.js? (former python/ruby developer)
09:19 < sinclair> http://typescript.codeplex.com/SourceControl/changeset/view/d397c54a55db <--
09:20  * sinclair hugs microsoft
09:20 < Shinaku> I saw that last night
09:20 < substack> minver: http://nodejs.org/docs/latest/api/all.html
09:20 < Shinaku> I'm unsure about adopting MS tech inside node, part of me is getting away from MS with this ;)
09:21 < sinclair> Shinaku: the TypeScript compiler is implemented in .... TypeScript
09:21 < Shinaku> That's the proof a language is Turing complete, isn't it?
09:21 < Shinaku> when you can write a compiler for itself in it
09:21 < sinclair> Shinaku: yes, yes it is
09:21 < Shinaku> or something, I barely passed my compilers course
09:21 < rendar> hmm, but require() is a node.js thing or a js as a language thing?
09:22 < substack> node thing
09:22 < rendar> i see
09:22 < Shinaku> TomY_: do you work in dev at the BBC?
09:23 < TomY_> pretty much
09:23 < Shinaku> Don't suppose you know Stuart Hicks or Phil Cluff, do you? 
09:23 < substack> sinclair: oh gross, typescript uses the harmony-style exports
09:23 < substack> ugliest possible thing
09:23 < TomY_> by name
09:23 < rendar> harmony-style exports? whats that?
09:24 < Shinaku> two good friends of mine work there
09:25 < sinclair> substack: i would much rather code TS than JS for a node project
09:25 < sinclair> substack: im generally too scared to attempt a large project with JS
09:26 < sinclair> substack: i expect that TS will cough up optimizations for you
09:26 < rendar> sinclair: why? do you think js won't scale well?
09:26 < substack> don't attempt large projects
09:26 < sinclair> rendar: yes
09:26 < substack> large projects don't scale
09:26 < substack> it's not about js
09:26 < substack> it's about bigness
09:27 < chovy> is there any advantage to using nginx over apache for handling node.js app?
09:27 < sinclair> substack: bigness?
09:27 < rendar> substack: hmm, yeah but with a different language a project may scale better than another lang.
09:27 < substack> sinclair: http://substack.net/doc/how_to_write_big_apps/
09:27 < sinclair> substack: Loading..
09:28 < sinclair> substack: thats fine in theory, but unrealistic in practice
09:28 < sinclair> substack: programs get LARGE
09:28 < substack> what about it is unrealistic?
09:28 < sinclair> substack: take for example the cluster tech
09:28 < substack> why do programs get large?
09:29 < sinclair> substack: have you used cluster?
09:29 < rendar> i get only a picture of a robot weaving, whats that? :)
09:29 < substack> we should be vigilant about pre-emptively attacking bigness
09:29 < substack> sinclair: the module in core?
09:29 < substack> rendar: use the arrow keys
09:29 < sinclair> substack: programs get large because they need to do things asked of them
09:29 < substack> yes but
09:29 < substack> the solution is to not have that problem
09:30 < substack> build afresh rather than complicate old programs by adding new features
09:30 < mon> substack: nice slides :)
09:30 < substack> [McIlroy78] The Bell System Technical Journal. Bell Laboratories. M. D. McIlroy, E. N. Pinson, and B. A. Tague. “Unix Time-Sharing System Forward”. 1978. 57 (6, part 2). p. 1902.
09:30 < sinclair> substack: do you code commercially ?
09:31 < substack> sinclair: I have a startup that has revenue if that's what you mean
09:31 < sinclair> substack: i do agree with out, but the reality is, things don't work that way
09:31 < substack> why?
09:31 < substack> sinclair: that sounds a bit fatalistic
09:31 < substack> programming is about cheating
09:32 < substack> it's a giant cheating contest
09:32 < rendar> substack: very nice slides
09:32 < sinclair> substack: what you are saying is your program "cannot" grow, or, you build lots of little applications
09:32 < sinclair> substack: of course it is
09:32 < substack> build little pieces that you glue together
09:32 < sinclair> glue how?
09:32 < substack> over the network, over streams
09:32 < sinclair> over a network sounds horrendously inefficient 
09:33 < substack> measure first
09:33 < sinclair> measure what?
09:33 < substack> tiny network services that talk to each other scales horizontally so well
09:33 < substack> you just spin up more of them
09:33 < substack> and you have some plumbing to deal with the routing
09:33 < sinclair> substack: to a degree yes
09:34 < sinclair> substack: but you don't want to rely on that if you can help it
09:34 < substack> that's the opposite
09:34 < substack> you want to build things as distributed as possible except where for performance you can't
09:34 < substack> distributed programming is easy
09:34 < substack> you just need to start with the right assumptions
09:34 < SoulRaven> i use this for calculating crc16, but is not working right, anyone has any ideea: http://bin.cakephp.org/view/261478572
09:34 < sinclair> substack: iv'e built enterprise service bus software that would shuffle messages around and scaled in a way you describe, 
09:34 < substack> distributed computing is far, far easier than building a big app
09:35 < substack> a big app that does all the things
09:35 < substack> sinclair: you don't need a bus, ordinary tcp or http will do just fine
09:35 < sinclair> substack: I agree that network message passing is a good thing, but it is a optional thing
09:35 < substack> it is absolutely critical to keeping complexity under control
09:35 < rendar> i always see scale horizontally and vertically, but what is the difference of these 2? vertically = more machine / horizontally = more big software systems?
09:36 < sinclair> substack: actually, i plugged it into Queuing Services, and gave administrators control over the bus
09:36 < sinclair> substack: i implemented message passing over the network as a means to be able to implement and abstract over a variety of queuing tech
09:36 < substack> that sounds weird
09:37 < substack> sounds heavy
09:37 < pyrotechnick> rendar: http://en.wikipedia.org/wiki/Scalability#Scale_horizontally_vs._vertically
09:37 < sinclair> substack: it was doing the job that node could do
09:37 < pyrotechnick> google's your friend ;)
09:37 < rendar> pyrotechnick: thanks
09:37 < pyrotechnick> you're most welcome
09:37 < substack> node is for writing tiny network services
09:37 < sinclair> substack: if only JavaScript would let me write something like this
09:38 < sinclair> substack: i implemented the bus in C#, used IoC principles, and can do whatever i please with it. 
09:39 < sinclair> substack: well, do what i please with it and not freak out its going to break.
09:39 < substack> why would you need to implement a bus
09:39 < substack> we already have the network that already does the routing
09:39 < substack> it's just the discovery and deployment that is a bit tricky
09:39 < pyrotechnick> when is a bus not a bus
09:39 < sinclair> substack: it was scriptable
09:40 < sinclair> substack: messages passes around here JSON
09:40 < sinclair> *passed around
09:40 < sinclair> *were
09:40 < sinclair> geez
09:40 < substack> UNE OURS POLAIRE DANS L'AUTOBUS
09:41  * substack presently surrounded by french people
09:41 < pyrotechnick> what is this i don't even
09:41 < substack> in portugal
09:41 < sinclair> substack: anyway, JavaScript sucks for writing large applications
09:41 < substack> sinclair: feature not a bug
09:42 < substack> anything sucks for writing large application
09:42 < sinclair> substack: it limits the potential of node
09:42 < substack> don't write large applications
09:42 < timeturner> substack++
09:42 < txdv_> fucking large apps
09:42 < substack> write lots of tiny reusable components and services
09:43 < sinclair> substack: if i can't write large applications, then node is basically useless to me (and any other respecting developer)
09:43 < substack> the solution is not to have the problem in the first place
09:43 < timeturner> node should impose a limit on the amount of code require()d in
09:43 < sinclair> substack: that is not practical
09:43 < pyrotechnick> yeah free your mind man
09:43 < timeturner> that would force people to write a bunch of smaller apps
09:43 < timeturner> or services
09:43 < substack> timeturner: or a hard limit on the number of lines in a single file
09:43 < pyrotechnick> do not try and scale the app down, no that is impossible
09:43 < substack> 500 lines
09:43 < pyrotechnick> instead try to see the truth
09:43 < pyrotechnick> there is no application
09:43 < timeturner> substack: exactly
09:43 < sinclair> there are two parts to an application, the core bits, and the gawd aweful "implementation" bits
09:44 < substack> tune in, drop out, npm publish
09:44 < sinclair> implementation bits of your code will always be scrappy as hell
09:45 < sinclair> core bits are always minimal and easier to understand
09:45 < rendar> substack: so, if i got your point, js as a language is good for big projects, if you use it as unix-like philosophy, where each little module does something..
09:45 < sinclair> you are asking JavaScript to do both
09:46 < timeturner> the language used is completely irrelevant
09:46 < substack> rendar: it's not about javascript, every language is like that
09:46 < sinclair> rendar: the thing is tho, all languages tackle the problem in the same way, its called object orientation
09:46 < sinclair> well, all OO languages :)
09:46 < substack> unix design principles let you design timeless software
09:46 < rendar> substack: well yes, but there are language that scale better, other that scale worst, i guess
09:47 < substack> sinclair: these principles were first discovered in C which isn't terribly OO
09:47 < sinclair> C isn't object orientated
09:47 < substack> it's about input and output and having the right primitives to glue all the input and output together
09:47 < sinclair> but at least is has typing
09:47 < pyrotechnick> fact or fiction: nasa found aliens
09:47 < substack> C has structs, close enough
09:47 < pyrotechnick> discuss.
09:47 < substack> pyrotechnick: fact
09:48 < sinclair> substack: yes, i like the idea you have about input and output, 100% agree
09:48 < pyrotechnick> they found them or they found out they found them
09:48 < substack> just 100 km from their launch site in florida
09:48 < substack> in cuba
09:48 < substack> whole country full of aliens
09:48 < substack> mexico is the same way
09:48 < pyrotechnick> they smoke cigars?
09:48 < substack> fact
09:48 < pyrotechnick> badass.
09:48 < sinclair> substack: no argument what so ever, but why would you have each component communicate over a network?
09:49 < sinclair> substack: especially when you didn't have to
09:49 < pyrotechnick> substack: https://a248.e.akamai.net/camo.github.com/e17ca6c9ab21057ff7a7d3b1e816a81ca2f252e2/687474703a2f2f6170692e6e696e672e636f6d2f66696c65732f664b55525550675534544a744b69714f394170665335384f54492a4d322d522a536c6b523172646c494a30474138435a77572a70556f324942704931394f436b344453636e77456e6e5077474e447633785a557434723069626b2a62735441672f4d6179616e55464f41727469666163742e6a7067
09:49 < substack> sinclair: because you have the freedom to put each service wherever you want when they talk over the network
09:49 < pyrotechnick> substack: past or future?
09:49 < substack> so you can move things around
09:49 < pyrotechnick> history or prophecy?
09:49 < substack> pyrotechnick: correct
09:49 < pyrotechnick> which
09:50 < sinclair> substack: you would probaly really like the thing i have written then
09:50 < sinclair> substack: i agree totally
09:51 < pyrotechnick> substack: i think it's just prophecy although they say that under the sphinx is a spaceship for defending the earth
09:51 < pyrotechnick> which is kinda what this looks like
09:51 < sinclair> substack: it does everything you describe, but gives you options to invoke natively, or over a netowrk
09:51 < pyrotechnick> hard to trust mexicans though
09:51 < sinclair> substack: meaning you can logically group related modules together, and deploy them where ever, and however you want
09:53 < sinclair> anyway, i still think that forcing communication over a network is a bad idea
09:53 < sinclair> substack: what about queuing 
09:53 < sinclair> ?
09:54 < pyrotechnick> the aliens got him
09:54 < sinclair> substack: [module a] -> [module b]
09:54 < sinclair> substack: [module a] -> [queue] -> [module b]
09:54 < sinclair> actually....
09:54 < sinclair> substack: [module a] -> [queue] <- [module b]
09:54 < sinclair> where a publishes, and b subscribes 
09:54 < substack> sinclair: use a module for that
09:54 < substack> if you want a queue require('queue-thing')
09:55 < substack> likewise for any other data structure
09:55 < sinclair> substack: what queue options does it support?
09:55 < substack> who cares
09:55 < substack> fifo or lifo?
09:55 < substack> separate modules for each
09:55 < substack> unimportant
09:55 < sinclair> i do, what if i want to define behaviors around the queue, like retrys and auditing things
09:55 < substack> just write a separate module for each different thing
09:56 < sinclair> substack: the kind of queue tech is more than just "a queue"
09:56 < sinclair> substack: think MSMQ
09:56 < substack> fundamentally unimportant
09:56 < sinclair> no, not at all
09:56 < substack> the important thing is that the nodes talk to each other over the network
09:57 < sinclair> substack: as a wrapper for some network service?
09:57 < substack> unimportant
09:57 < sinclair> substack: like...a queue
09:58 < substack> queues are not the only kind of data structure
09:58 < sinclair> substack: you have heard of Message Queuing right?
09:58 < substack> yes
09:58 < substack> it's pretty unimportant
09:58 < sinclair> http://en.wikipedia.org/wiki/Message_Queue
09:59 < substack> really only good if you have stateless communication
09:59 < substack> which is not always what you want
09:59 < aandy> stateless communication? quit talking about my marriage
10:00 < sinclair> substack: also good at handling faults and making your application durable 
10:00 < substack> message queues are but one approach
10:00 < sinclair> substack: what is the alternative? 
10:00 < substack> not using them
10:01 < substack> when what they provide is not important
10:01 < substack> for your purposes
10:01 < sinclair> substack: ok, you accept 1000 incoming requests from 1000 different clients
10:01 < sinclair> substack: except, you have a bottleneck, because the backend service cannot process things in realtime, it can only handle say, 10 per/s
10:02 < sinclair> 1000 per/s in -> 10 per/s back end process
10:02 < sinclair> what is your application to do?
10:02 < substack> I don't presently have that problem so I don't care.
10:02 < substack> solve problems that you actually have when you actually have them
10:02 < sinclair> substack: its a common problem
10:04 < sinclair> substack: although im quite sure node can handle all this very well, queuing policies etc can get complicated, and it wouldn't be something i would want to implement with node
10:04 < sinclair> sorry, JavaScript
10:04 < sinclair> anyway, rant over
10:44 < ootje> is there any method or whatever in console.* or some npm module that allows for updating the title of the console window? [i couldn't find anything]
10:45 < stagas> ootje: process.title = 'foo'
10:46 < ootje> hm. doh! i was thinking "well, sure, but that's probably only for the process list". but yes. thanks. silly assumption of me :\
10:46 < stagas> ootje: well it is, but consoles usually show the process title on the window title also
10:50 < ootje> yeah well anyhow tx
11:03 < SomeoneWeird> how do I add a string to a buffer?
11:04 < sinclair> http://www.typescriptlang.org/ - video at the bottom of the page
11:05 < SoulRaven> is possible to left padding with 0 a bytes using buffers?
11:08 < SoulRaven> is possible to left padding with 0 a bytes using buffers?
11:11 < quazimodo> wow 800 people
11:11 < quazimodo> so
11:11 < quazimodo> i was sitting in my room and thinking, why does node.js exist?
11:11 < quazimodo> i mean, why pick javascript to do this job?
11:11 < txdv_> because we can
11:12 < txdv_> most common runtime anyway
11:12 < Shinaku> What's wrong with javascript?
11:12 < Shinaku> v8 flies
11:12 < Tobsn> because of V8
11:12 < AAA_awright> quazimodo: To me that's asking, why pick the wheel to move a car?
11:12 < MitchW> easily approachable (simple, web standard, commonly used), while still maintaining flexibility - and can be JIT'd just as well as any other language into reasonable machine code
11:12 < AAA_awright> It's not as if there's another option
11:12 < Tobsn> and if it can be build in JS someone will do it ;)
11:12 < Jhsto> I agree with Mitch, Javascript is easy to understand and many people work with it already
11:12 < SoulRaven> how i create a buffer of 4 bytes, where the last bytes are nead to change?
11:13 < Tobsn> btw. there was already JS on the server a long time ago
11:13 < txdv_> people do stuff like ruby2js on the browser and then don't understand why there is js on the server
11:13 < Shinaku> And, being fair, there's a million and one other nonjs things you can use. 
11:13 < txdv_> Tobsn: but it sucked
11:13 < MitchW> AAA_awright: well, there are other options - Tornado has been around long before node :P
11:13 < AAA_awright> Tobsn: Indeed I was using Spidermonkey for servers years before Node.js
11:13 < SomeoneWeird> have you seriously not figured it out yet SoulRaven 
11:13 < SomeoneWeird> :S
11:13 < Shinaku> JS was slow as hell... 5 years ago
11:13 < Tobsn> nah not spidermonkey
11:13 < Tobsn> that other thing
11:13 < Tobsn> sounded like ant or something
11:13 < SomeoneWeird> rhino?
11:13 < Tobsn> that was like 2001-2002
11:13 < Tobsn> big thing
11:14 < Tobsn> smoe big blogging platform was built on it
11:14 < MitchW> best thing about node, is much like the platform (javascript) it's built on - it's simple, easy to pick up - but still flexible, and thus powerful
11:14 < SomeoneWeird> RoR!
11:14  * SomeoneWeird hides
11:14 < AAA_awright> Tobsn: No like, I was programming directly to the Spidermonkey API, what Node.js does for V8
11:14 < SoulRaven> SomeoneWeird: no, still, know i have find to write to buffer, but i don't know how to write when last bytes chages, sometime i have 2 bytes or data some times 1 bytes of data
11:14 < SoulRaven> or more
11:15 < Tobsn> but what was it called?
11:15 < Tobsn> my brain keeps telling me "ant" but thats not it obviously
11:15 < MitchW> that and the community around node has accelerated it so far so fast, it made up a lot of ground - it's just as capable as practically every other solution out there now - while still not even being a 1.0 release :)
11:16 < quazimodo> hrm
11:16 < quazimodo> i dno
11:16 < quazimodo> it seems like we use javascript because its the only option
11:16 < quazimodo> not because of other merits :/
11:16 < quazimodo> v8 is pretty cool
11:17 < Shinaku> If you don't want to write JS, use coffeescript or something
11:17 < MitchW> close. I wouldn't say because its the 'only' option - I'd say because it's the most approachable for the wider audience.  Having the 'perfect' langauge is good and all, but if it's not easy for the wider audience to pick up, who's gonna use it?
11:17 < quazimodo> sure
11:17 < MitchW> javascript is FAR from perfect, but it's not horrible - and almost anyone can pick it up
11:18 < quazimodo> like java in the enterprise environment
11:18 < quazimodo> its everywhere, a billion devs know it, thus its used.
11:18 < MitchW> exactly
11:18 < quazimodo> yeah makes sense
11:18 < Jhsto> Someone make a phone OS in Node, since I just screwed up my Android.
11:18  * quazimodo wishes the world would go back to lisp :(
11:19 < quazimodo> thanks guys, you cleared up lots of things :)
11:19 < AAA_awright> Jhsto: I'm pretty sure that's what WebOS is
11:20 < Jhsto> I'm serious here, could it be possible to flash my Android to it?
11:20 < Jhsto> Since I own this pirate model bought from China and I'm ready to hack it all around.
11:20 < MitchW> what's the successor to meego?  that's built entirely on HTML%/JS...
11:20 < MitchW> Tizen or something
11:21 < AAA_awright> Jhsto: Me too
11:21 < jcoglan> quick Q: what's a good library or stdlib thing for doing authenticated encryption?
11:21 < txdv_> js has lambda, java doesn't, therefore java sucks
11:21 < jcoglan> e.g. http://en.wikipedia.org/wiki/Galois/Counter_Mode
11:21 < jcoglan> or just doing AES with CBC or CTR modes
11:22 < AAA_awright> Jhsto: TLS
11:22 < AAA_awright> For interactive communication don't consider anything else
11:22 < jcoglan> (not sure if I'm using crypto.createCipher() correctly -- it takes arbitrary sized input but not clear which mode of operation it uses, if there's an IV, etc)
11:23 < AAA_awright> Almost ceratinly you don't want to implement cryptographic protocols yourself. There's no end of trivial things you can do that completely devistates the security. 
11:26 < Jhsto> AAA_awright: Like I meant that I'm ready to flash my Anroid to completely different operating system. Nokia seems to have some open-source projects, but I have to see if I can deal with my error with Android SDK first.
11:26 < AAA_awright> Jhsto: Yeah, WebOS
11:26 < Jhsto> For real?
11:26 < AAA_awright> It's meant for tablets so idk if your phone would work (that's kinda important)
11:27 < sinclair> TypeScript is awesome
11:27 < AAA_awright> Other than that I know very little, some friends worked on it though
11:27 < Jhsto> Well, I see what I can do with it, thanks for the tip though.
11:27 < Jhsto> I don't mind if it would not even work.
11:27 < Jhsto> I just may buy a Nexus phone and flash it to B2G
11:30 < Jhsto> AAA_awright: Any idea what kind of specs does WebOS require?
11:30 < AAA_awright> Anything powerful enough to run Android should be just fine I'd guess
11:30 < AAA_awright> Jhsto: Also it was kinda discontinued recently, I thought work continued but maybe not
11:31 < Jhsto> What a bummer then.
11:31 < aandy> Jhsto: wouldn't you rather try firefox mobile OS?
11:32 < Jhsto> Actually, there are some videos from three days ago where at least the Nexus is sporting it.
11:32 < Jhsto> aandy: If I could install it, yes.
11:34 < Jhsto> aandy: Actually, I have to try it out, but since they recommend it on some better hardware phones I'm bit skeptical whether will it work.
11:43 < deoxxa> why does backbone have such crappy examples
11:44 < deoxxa> it talks about eliminating the whole "jquery soup" problem, but then all the examples do the exact same thing with backbone objects
11:44 < deoxxa> global objects, implied state, etc
11:56 < Jhsto> omg
11:56 < Jhsto> i reinstalled my android and then it crashed on initial setup
12:00 < RLa> anyone fiddled with velleman's k8055 board and maybe written bindings to linux vmk80xx driver?
12:04 < aroman> does anyone here get away with using signedCookies for session storage in express? I'm seriously considering dropping my hacky mongodb-backed session system...
12:12 < dax_roc> Can anyone recomend packages for building touch interfaces with node atop xserver on ARM. 
12:14 < dax_roc> I was looking for something along the lines of appjs or node-webkit. No binaries for ARM yet
12:21 < sinclair> so, whose getting into TypeScript?
12:25 < sinclair> you know, TypeScript gives JavaScript properties
12:25 < sinclair> it also supports project wide refactoring, plugs into node, jquery, and supports interfacing with existing libs
12:29 < mmalecki> wide refactoring is a matter of tool, not of a language
12:30 < sinclair> yeah, that's true
12:30 < sinclair> still, its viable now
12:31 < sinclair> TypeScript makes it possible
12:33 < nitin84india> are there any good nodejs libs for image manipulation..
12:36 < gkatsev> imagemagick and the other imagemagick libs
12:38 < gkatsev> nitin84india: ^
12:38 < nitin84india> gkatsev thanks
12:56 < Brandon_R> hey guys
12:56 < Brandon_R> what do you think about meteor.js?
12:57 < Lipathor> Hi, everyone
12:58 < Lipathor> i've problem
12:58 < Lipathor> i'm sending file (image) through socket.io (binary stream readed with html5 file reader)
12:59 < Lipathor> and when i'm gettinth the data on the server to the buffer
13:00 < Lipathor> the data length is different than original size of data received by socket.io on the server side
13:00 < Lipathor> it brokes the files :/
13:03 < Lipathor> eg: the filesize is 356163, im creating buffer: var buf = new buffer.Buffer(data.Data,'binary');
13:03 < Lipathor> and buf.length is 356183 :/
13:03 < rcaskey> are there any high-level file-routines that I can use to read a file via uri?
13:16 < Brandon_R> what do you think about meteor.js?
13:17 < yawnt> that it's not node
13:18 < yawnt> so it's difficult to integrate stuff with it
13:18 < yawnt> and i dislike that part
13:20 < sinclair> yawnt: seen TypeScript?
13:21 < yawnt> sinclair: yep
13:23 < sinclair> yawnt: thoughts?
13:24 < yawnt> sinclair: it doesn't convince me
13:24  * mon yawns
13:24 < pachet> it's just an oo wrapper for people who can't wrap their heads around doing prototypal oo ;[
13:24 < sinclair> pachet: it does more than that
13:24 < yawnt> i mean
13:24 < pachet> and jquery does more than dom abstraction
13:24 < yawnt> everything you do with typescript
13:25 < yawnt> can be done with javascript
13:25 < yawnt> fairly easily
13:25 < eldios> guys I need to make a nodejs CLI software with lots of I/O .. which was the library from visionmedia, TJ or similar for such a task? 
13:25 < yawnt> it's not like clojurescript & co
13:25 < eldios> I reminded there was a vary hany one
13:25 < eldios> handy*
13:25 <@mbalho> isaacs: hahah berts talk is funny
13:25 < yawnt> so i don't really see the point in having a compile step inbetween
13:25 < yawnt> hey mbalho :)
13:25 <@mbalho> yoyo
13:26 < sinclair> yawnt: but there is a good chance that TypeScript is a full implementation of the ES6 spec
13:26 < pachet> yawnt: other than trying to rope more folks into dependence on vs
13:26 < sinclair> pachet: you retard, read about it
13:26 < sinclair> pachet: at the very least
13:27 < yawnt> sinclair: it's more difficult to use without VS
13:27 < yawnt> not impossible..
13:27 < pachet> sinclair: do you have to resort to namecalling?
13:27 < eldios> https://github.com/visionmedia/commander.js/ there it is
13:28 < pachet> sinclair: i've read the full spec, does that count?
13:28 < sinclair> pachet: then you didn't comprehend it
13:29 < sinclair> there is no dependence on VS, but you can't fault MS for providing tooling for it
13:29 < sinclair> pachet: can you?
13:29 < pachet> i didn't mean strict dependence
13:29 < pachet> i guess a better word would have been strong reliance
13:29 < yawnt> sinclair: 
13:29 < sinclair> pachet: its a near off implementation of the ES6 spec, meaning the code will likely work in browsers in future
13:29 < yawnt> i think what pachet wanted to say is that for example
13:29 < sinclair> pachet: its not even strong
13:30 < yawnt> not being able to use intellisense, does kinda suck if you code Typescript
13:30 < sinclair> pachet: the compiler can run in the browser ffs
13:30 < sinclair> yawnt: do you get intellisense else where with JavaScript?
13:31 < wp_> HI, need some help, trying to query mongo bd from node app, typing a number in a var like '123' works but using a variable from a csv import that console.log says is the same does not? any ideas?
13:31 < sinclair> yawnt: anyway, its not the point, that isn't microsofts fault these things don't exist yet
13:31 < sinclair> yawnt: the spec is open
13:32 < yawnt> sinclair: sure
13:32 < yawnt> sinclair: but my problem isn't VS
13:32 < yawnt> it's that what typescript does can easily be replicated with JS
13:32 < yawnt> so why should i use it?
13:32 < sinclair> your code is less manageable 
13:32 < pachet> that's subjective
13:32 < yawnt> it's not like clojurescript that has pattern matching and stuff
13:33 < sinclair> the var that = this is gone with arrow statements
13:33 < yawnt> sinclair: that's what people who write coffeescript say.. and i've seen unmanageable CS stuff
13:33 < Shinaku> honestly, I want to get away from being so reliant on MS
13:33 < yawnt> sinclair: you can .bind(this) if that's the problem
13:33 < sinclair> theres a good change that MS will introduce the async await stuff in future versions
13:33 < pachet> if you're still using that=this to resolve scope, you're doing something wrong
13:34 < yawnt> pachet: why would you say that?
13:34 < sinclair> pachet: explain your comment
13:35 < pachet> well, maybe 'wrong' is a little harsh
13:35 < pachet> inelegantly?
13:35 < sinclair> pachet: why do it at all
13:35 < nullbit> KANDY BARZZZZ
13:36 < yawnt> pachet: example
13:36 < yawnt> you module.exports an object which has methods
13:36 < yawnt> a method has an async call
13:36 < yawnt> how do you retain scope?
13:36 < yawnt> you either use var that = this; or you .bind(this)
13:36 < yawnt> or is it something i'm missing?
13:37 < pachet> oh definitely bind, i'm not naysaying that
13:37  * sinclair waits patiently for pachet to respond
13:37 < yawnt> and that = this is faster then bind
13:38 < sinclair> ... yawnt i think that TypeScript looks amazing
13:39 < NodeX> I dont understand why people use these *script things, surely it just puts one more level of somehting that can go wrong between the developer and the end user no?
13:39 < Shinaku> But ditto with any kind of framework
13:39 < sinclair> yawnt: also, get/set properties, static methods, method overloads, visibility keywords, its just ace
13:40 < NodeX> All frameworks blow imo, they're all bloated 
13:40 < Shinaku> that does sound appealing...
13:40 < sinclair> yawnt: i doubt async await will make it in there, unless something magic happens and it gets in ES6
13:41 < yawnt> the only thing i "kinda" like
13:41 < yawnt> is that statically typed languages catch a LOT of errors
13:41 < sinclair> yawnt: actually, i wonder what the debugging scenarios are like with it
13:42 < sinclair> yawnt: i see no reason not to use TypeScript
13:43 < sinclair> pachet: were you ever going to respond to yawnt?
13:43 < pachet> sinclair: to which point?
13:48 < yawnt> mbalho: where are the specs for breakfast script?
13:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:00 < metal55> aandy - Hey, Thanks again for promoting me to use FS for my symlinks it really helped me out.
14:06 < therealkoopa> AvianFlu: I'm working w/ ntwitter. verifyCredentials works fine, but updateStatus gives me a {"message":"Could not authenticate you","code":32}]}. Think this is from twitter api changes?
14:06 < AvianFlu> probably
14:07 <@mbalho> yawnt: https://gist.github.com/1007605
14:07 < AvianFlu> ther'es a PR to use api 1.1 endpoints
14:07 < AvianFlu> maybe try that
14:07 < therealkoopa> AvianFlu: I'll try it.
14:08 < therealkoopa> AvianFlu: Looks like it's the same issue this guy is having: https://github.com/AvianFlu/ntwitter/issues/74
14:09 < metal55> Hey all, has anyone here had any experience with node-sass?
14:10 < metal55> I have an outstanding github issue and I was wondering if anyone here had any thoughts - https://github.com/andrew/node-sass/issues/27
14:11 < yawnt> mbalho: thanks :)
14:11 < pachet> yawnt: since sinclair apparently needs more satisfying
14:12 < pachet> you're right about bind, and i know that v8's implementation in particular introduces more than its fair shair of bloat
14:12 < pachet> i guess i've just never felt the drag enough to want to rely on closure passing instead
14:12 < pachet> bind fits better with the eventing models i tend to use, so id rather leverage it consistently if i'm able
14:12 < pachet> i retract my 'doing it wrong', recognize that was an opinionated statement
14:13 < pachet> not sure it brings anything meaningful to the discussion, but typescript itself uses a healthy bundle of bind calls internally, as you'd likely guess
14:13 < pachet> maybe i've just been away from c# for too long, allowed my mind to become corrupted by all these softer dirtier languages
14:24 < therealkoopa> AvianFlu: In case anyone else bugs you about it, it's because of certain characters in the update status. This fixes it: https://github.com/jamescauwelier/node-oauth/commit/1284148b43ceea1949384f048d65576a3ecf7d0a
14:24 < AvianFlu> oh, cool
14:24 < AvianFlu> so it's a fail in a dep, then
14:24 < therealkoopa> AvianFlu: Yep
14:25 < AvianFlu> I'll see about shipping it with the patched version
14:46 < simong> Is there a recommended way to generate XML in node.js ?
14:47 < simong> The tags I'll be generating are mostly the same so I could just go with string manipulation, but I'd at least like to hear if there are any good modules out there :)
14:48 < SomeoneWeird> simong, https://github.com/buglabs/node-xml2json
14:48 < simong> Thanks I'll have a look
14:51 < aandy> simong: weren't you asking about generating xml, not converting it to json?
14:52 < simong> yes generating
14:52 < aandy> then you should check out https://github.com/dylang/node-xml
14:52 < dcporter> FWIW, the link from SomeoneWeird suggests that it can go from JSON to XML as well
14:52 < aandy> node-xml2json doesn't seem to have the generating part (or json->xml for that matter)
14:53 < aandy> hmm, i couldn't find an example of that on its github page
14:53 < simong> it seems to have toXml()
14:53 < SomeoneWeird> ^^
14:53 < simong> but yours seems better documented
14:53 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
14:53 < dcporter> parser.toXml(json, options);
14:53 < SomeoneWeird> :)
14:53 < aandy> well, the docs of xml2json explicitly said:
14:53 < aandy> xml2json tranforms CDATA content to JSON, but it doesn't generate a reversible structure
14:53 < aandy> so i just assumed, hehe
14:53 < aandy> guess it's just for CDATA then
14:54 < SomeoneWeird> thats xml > json
14:54 < dcporter> =) cheers - I have no idea which is better of course
14:54 < aandy> neither do i. i just ran into the node-xml the other day and thought i'd mention it :)
14:55 < simong> It might be overkill for my app to use some kind of generator
14:55 < simong> but at least now I have the option :)
14:56 < metal55_> Noone using node sass
14:56 < metal55_> oops no one even. using node-sass?
14:57 < dcporter> metal55_ what's your question? a colleague took a look at it and rejected it due to native dependencies, for reasons specific to our case… so I know 1.5 things about it, and can help if they cover your question. =)
15:07 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
15:15 < otaciliofl> hi
15:16 < otaciliofl> i'm trying to install mongodb using npm tool, but i'm getting this error: https://dl.dropbox.com/u/26924792/error.png
15:18 < otaciliofl> Does anyone know how to solve this issue?
15:19 < SomeoneWeird> otaciliofl, probably doesn't support windows
15:20 < dcporter> looks like it supports windows but with install quirks - http://stackoverflow.com/questions/9362151/trouble-getting-mongo-db-to-set-up-using-npm-on-windows-7-any-ideas et al.
15:21 < metal55> dcporter: I got logged out of the room.. and answered out of the rooom
15:21 < metal55> sorry
15:21 < metal55> dcporter: I posted a git hub issue but wasn't sure if it was a known problem or not
15:21 < dcporter> gotchya, that's out of my ken then.
15:21 < metal55> https://github.com/andrew/node-sass/issues/27
15:44 < mscdex> developers, developers, developers!
15:45 < euoia> developers, developers, developers, developers!
15:45 < otaciliofl> I tryed to install mongodb 1.1.8 but I got this same error repeatedly: https://dl.dropbox.com/u/26924792/error.png
15:45 < BennyLava> developers is not here right now, please try again later.
15:46 < context> problem is you are using windows
15:46 < context> :X
15:46 < otaciliofl> I tryed to install 1.1.7 and worked fine.
15:46 < otaciliofl> Yes =/
15:49 < Torsten85> I know I asked earlier, but I didn't not get any helpful answer: Is there a nodeJS counterpart to those ruby functions? https://gist.github.com/de4b602a213b4b264706 I know about crypto but I can't figure it out on my own...
15:49 < BennyLava> didn't not eh
15:54 < codeboost> Hello ! I'm developing a node module in C++ and I have a question regarding multithreading.. is this the place to ask for advice ?
15:55 < mscdex> codeboost: sure
15:56 <@mbalho> codeboost: there is also #libuv which is the platform layer that contains nodes threadpool (that you shouldnt ever have to mess with)
16:01 < JasonWoof> how do I get process.stdin.on('data'   to fire each time I type a character?  (instead of just when I hit enter)
16:02 < codeboost> thanks, I'll ask in libuv then
16:02 < JasonWoof> or is there some other way of getting keypresses as they happen?
16:03 < mscdex> JasonWoof: i think there is a raw mode you can set
16:04 < JasonWoof> mscdex: doesn't that give you keycodes instead of characters or something? Suppose I could just give it a try
16:04 < mscdex> JasonWoof: process.stdin.setRawMode(true);
16:05 < mscdex> JasonWoof: dunno, but even if it did you could easily convert it to a string/character
16:06 < JasonWoof> true enough
16:06 < JasonWoof> this only needs to work on my computer
16:09 < JasonWoof> drrr... 0.6 doesn't seem to have setrawmode
16:09 < JasonWoof> maybe it's time I upgrade
16:13 < JasonWoof> ok, 0.6 has require('tty').setRawMode(true)
16:13 < mscdex> yeah
16:14 < JasonWoof> I'm getting characters, not keycodes
16:14 < JasonWoof> (I did setEncoding('utf8'))
16:14 < JasonWoof> only weird thing is that the enter key is sending \r instead of \n
16:14 < mscdex> that's probably right
16:14 < JasonWoof> I'm running linux
16:15 < JasonWoof> anyway, thanks for the help, now I can proceed
16:16 < JasonWoof> wow, I cant ^C or ^Z or ^\
16:19 < CoverSlide> JasonWoof: yeah, when you're in raw mode you need to listen for those codes explicitly
16:20 < CoverSlide> ^C is just 0x03
16:20 < niggler> is the freenode webchat client quirky for everyone?
16:20 < niggler> it auto-disconnected me
16:21 < CoverSlide>  i wouldn't be surprised if it was
16:21 < CoverSlide> real men use a real irc client
16:22 < NodeX> real men use telnet!!
16:22 < niggler> yeah i have to switch computers now :/
16:22 < JasonWoof> CoverSlide: done. anything nice I can do with ^Z?  (e.g. can I get it to suspend like it does in other programs?)
16:22 < CoverSlide> hmm that i don't know .. maybe not something directly supported by node
16:23 < niggler> yeah you can catch the character JasonWoof 
16:23 < JasonWoof> heh, I've done irc with telnet (or netcat). so annoying that it doesn't filter out all the server messages
16:24 < CoverSlide> anyone know this for sure, what ctrl-z does, is it a function of the shell?
16:24 < niggler> you may need to trap the signal though, depending on platform
16:24 < JasonWoof> niggler: I noticed. can I make my program react to ^Z the way it would if I wasn't in raw mode?
16:24 < JasonWoof> CoverSlide: I think it's a shell function
16:24 < niggler> depending on platform, you get a signal
16:24 < JasonWoof> I probably can't do it then, no big deal
16:24 < niggler> sigtstp on some platforms
16:24 < niggler> SIGTSTP 
16:24 < CoverSlide> SIGTSTP
16:25 < niggler> which you can handle
16:27 < niggler> is there a way to use c code in node without creating a module?
16:27 < niggler> i have a js file
16:27 < niggler> and i have the C equivalent code
16:27 < niggler> do i need to create a module just for this or is there a way to load .so files
16:28 < niggler> i also dont see an FFI in node
16:34 < CoverSlide> JasonWoof: one gotcha, if you want to return from suspended mode, you have to setRawMode(false) and setRawMode(true) to continue in raw mode
16:34 < JasonWoof> CoverSlide: but how do I get suspended. do I have to send myself a SIGSTP?
16:35 < CoverSlide> yeah
16:35 < CoverSlide> SIGTSTP
16:35 < jocafa> SIGOMGWTF
16:41 < niggler> SIGSTFU
16:42 < pachet> sigssbm
16:43 < owen1> anyone knows more details about https://tito.io/nodeconf/TenConf-NYC-2012 ?    is there a break between talks or is it 10 minutes for a few hours?
16:50 < hell_lord> question about global installs.  i'm on a ubuntu system and i tried doing a global package install but when i try requiring it from a node script it is not found.  i could SWEAR this worked in the past.  i tried changing my NODE_PATH to /usr/local/lib/node_modules.  it works, but now node can't find any of the standard modules!  what's going on here?
16:50 < hell_lord> qualifier, this was an npm install -g i'm talking about
16:52 <@isaacs> hell_lord: "standard modules"?
16:52 < hell_lord> isaacs: require('file') fails
16:52 <@isaacs> hell_lord: http://nodejs.org/api/modules.html
16:53 <@isaacs> hell_lord: gist your program.
16:53 <@isaacs> hell_lord: 'file' isn't a standard module, i don't know what that is.
16:53 < hell_lord> damn, you are right.  wth is going on here
16:53 < hell_lord> looking again
17:00 < Blkt> good evening everyone
17:01 < hell_lord> ah, got it.  thanks isaacs
17:11 < Fishrock123> For datagram messages, what properties/fields/whatever does rinfo have? http://nodejs.org/api/dgram.html#dgram_event_message
17:16 < AAA_awright> Meheheheeh too much recursion O___O. Recursion of recursion, my poor brain...
17:27 < niggler> how do you make a copy of an object?
17:28 < TheEmpath> deepcopy()
17:28 < TheEmpath> doh nm not python :(
17:28 < niggler> heh
17:28 < sente> I want to use multiple log directives but i'm having an issue specifying so, it seems only one is taking
17:29 < niggler> fuck it ill do it explicitly
17:29 < sente> http://c.sente.cc/LArt/app_rn.js
17:30 < TehShrike> niggler: the answer to that question is not as straightforward as you would hope
17:30 < sente> towards teh bottom you can see I do app.use(express.logger({....})); but then right after that I want to use my 'conditionalLogger' which is defined above
17:30 < sente> how can I have multiple logs 'directives' ?
17:30 < niggler> the equivalent of doing a memcpy in C
17:31 < niggler> that's lame TehShrike 
17:33 <@Nexxy> niggler, chances are you're doing it wrong if you need 'deep copies' of objects ;P
17:33 < TheEmpath> that's also true
17:33 < niggler> im storing some cell information and need to duplicate it
17:34 <@mbalho> js protip: JSON.parse(JSON.stringify())
17:34 < TheEmpath> i mean, if you really needed it?  json encode/decode, but say goodbye to your CPU
17:34 < SomeoneWeird> <niggler> how do you make a copy of an object? < new Object(whatever)
17:35 < wookiehangover> rauchg: ping, question about up if you're around
17:36 < niggler> is there a way in node to link to a shared object?
17:36 < SomeoneWeird> define shared object
17:36 < niggler> .so
17:36 < niggler> so i've got some C code
17:36 < niggler> do i need to make a node module to use it
17:36 < SomeoneWeird> if you write a native module for node
17:37 < niggler> or is there a way to load it (like dlload or ffi)
17:37 < wookiehangover> node-gyp maybe?
17:37 < SomeoneWeird> nah
17:37 < SomeoneWeird> https://www.cloudkick.com/blog/2010/aug/23/writing-nodejs-native-extensions/
17:37 < TooTallNate> niggler: https://github.com/rbranson/node-ffi
17:38 < EhevuTov> niggler, check this out: http://nodejs.org/api/addons.html
17:38 < niggler> TooTallNate: "There is non-trivial overhead associated with FFI calls. Comparing a hard-coded binding version of strtoul() to an FFI version of strtoul() shows that the native hard-coded binding is orders of magnitude faster. "
17:39 < EhevuTov> niggler, I put the addon example in my github here: https://github.com/EhevuTov/nodeAddonTest
17:39 < TooTallNate> niggler: if speed is a concern then you'll have to write a native addon
17:39 < EhevuTov> and yes, you'd use node-gyp to configure and build on multiple platforms as well (thank you to TooTallNate )
17:39 < TooTallNate> niggler: but i use node-ffi to interface with libgit2 on my blog and it works great, speed is not a concern
17:39 < astropirate> How does one deal with an NPM package name being take by an inactive project?
17:40 < EhevuTov> astropirate, there are no namespaces, so just create a different name
17:40 <@mbalho> astropirate: email the maintainer
17:40 < TooTallNate> astropirate: you could contact the original author and ask for the name
17:40 < TooTallNate> that's how I got "telnet"
17:40 < EhevuTov> name squatting O.O
17:41 < astropirate> alright, thanks all
17:41 < mscdex> how long before they start asking for money? :p
17:41 < niggler> TooTallNate: do you have an example passing a uint64_t
17:41 < niggler> actually nope that's for EhevuTov 
17:42 < niggler> can you pass a 64 bit integer or do you have to store it as a string first
17:42 < owen1> i am trying to use https://github.com/felixge/instant-markdown-d  i first run the server with instant-markdown-d and than do curl -F "myupload=@/Users/owen1/misc/blog-posts/browserify.html.md" 0.0.0.0:8090  but nothing happens. am i doing it wrong?
17:42 < ljharb> niggler: i'm quite sure you don't need to copy your object, and even more sure that performance is irrelevant for your use case. see ##javascript please.
17:42 < mscdex> owen1: try 127.0.0.1 instead of 0.0.0.0 on the curl line
17:42 < EhevuTov> niggler, nah, that's just the example from the addon Node doc. But, I imagine there's a V8 type for that and you'd just load that instead of the ::String type
17:43 < owen1> mscdex: thanks, but still. nothing happens
17:43 < EhevuTov> A need in the community is to find example code
17:46 < niggler> EhevuTov: the node-ffi readme claims that V8 doesnt allow for it
17:48 < EhevuTov> niggler, that stinks. Yeah, the V8 probably only handles Javascript objects then I assume. Definitely look how others work with the node-ffi TooTallNate mentions
17:48 < niggler> yeah node-ffi passes a string :/
17:48 < marktraceur> This is a....funny issue. I'm trying to spawn a child process that will clone a git repo, run npm install in it, and then run some tests. But npm exits with an error. http://dpaste.com/809035/
17:48 < EhevuTov> well, by objects, I mean native JS types
17:48 < balgarath> can anyone help me understand this? http://pastie.org/4898062
17:49 < TooTallNate> niggler: node-ffi (actually ref) passes Numbers when it'll fit inside a number without loosing precision, otherwise it returns a Stirng
17:49 < EhevuTov> niggler, wow that's strange. I'd think it'd at least be able to pass all JS native types, but I'm just starting on addons myself so
17:49 < marktraceur> balgarath: 'for in' gives string indices
17:49 < marktraceur> balgarath: And y['01'] is indeed undefined
17:50 < balgarath> marktraceur: thanks much!
17:50 < marktraceur> balgarath: No problem :)
17:50 < BennyLava> 'string indices', as opposed to…?
17:50 < balgarath> BennyLava: integer indices
17:50 < ljharb> for..in over an array? abomination!
17:50 < marktraceur> '0' + 1 = '01'; 0 + 1 = 1
17:50 < BennyLava> eh, indices are always strings in JS brah
17:51 < marktraceur> balgarath: Nasty workaround: '0' - 0 + 1
17:51 < marktraceur> balgarath: Better way: Use a normal for loop
17:51 < BennyLava> >> typeof Object.keys([true])[0]
17:51 < purr> BennyLava: (string) 'string'
17:51 < ljharb> marktraceur, balgarath: best way, use Array#forEach
17:51 < TooTallNate> niggler: you should probably just use node-ffi and bind to your .so and see how it goes
17:52 < TooTallNate> niggler: it seems like you're prematurely optimizing to me
17:52 < EhevuTov> that's what she said
17:52 < ljharb> yes. he is. niggler, don't do that.
17:53 < EhevuTov> thanks for the headsup on ffi. Didn't know that existed. :-)
17:53 < balgarath> thanks for the tips all!
17:53 < EhevuTov> niggler, https://github.com/rbranson/node-ffi#v8-and-64-bit-types
17:54 < niggler> so simple example: lets say you wanted to get the value on the TSC
17:54 < niggler> the assembly instruction is RDTSC
17:54 < marktraceur> Any ideas re: http://dpaste.com/809035/
17:54 < marktraceur> ?
17:54 < niggler> i guess in that case you could just pass back the two registers
17:54 < thealphanerd> anyone here hack around in super collider (I know this is off topic sowwwwy)
17:55 < CoverSlide> marktraceur: are you calling this from the child process? are you sure the child processes was .fork()ed instead of.spawn()ed
17:55 < CoverSlide> ?
17:55 < marktraceur> CoverSlide: It was spawned--why wouldn't I spawn it?
17:55 < CoverSlide> message passing doesn't work with spawn
17:55 < marktraceur> Hm.
17:55 < CoverSlide> only fork
17:56 < marktraceur> K, got it.
17:56 < marktraceur> Same syntax?
17:56 < CoverSlide> basically
17:56 < CoverSlide> except fork only allows you to create node processes
17:56 < marktraceur> CoverSlide: But I'm running a bash script, not only npm
17:56 < marktraceur> It just so happens that the script runs npm
17:57 < marktraceur> And then, error
17:57 < CoverSlide> well how do you expect the bash script to receive / send your messages
17:57 < CoverSlide> process.send only works between two node processes
17:57 < marktraceur> CoverSlide: Only over stdout, and through one command-line argument.
17:57 < CoverSlide> then use stdin / stdout, don't use send/ on('message'
17:58 < CoverSlide> those are node-only
17:58 < marktraceur> CoverSlide: My code doesn't use send. This happens in npm.
17:58 < CoverSlide> hmmm
17:58 < CoverSlide> what's the bash script you're telling it to run?
17:59 < marktraceur> CoverSlide: It sets up a git repository, runs npm install, and runs a bunch of tests.
17:59 < marktraceur> Let me push the code up, hold
18:00 < marktraceur> CoverSlide: https://gerrit.wikimedia.org/r/#/c/26340/1/js/api/testGerritChange.sh
18:03 < marktraceur> CoverSlide: We're running an older node, too....0.6.18 for me. Could that be contributing to the problem?
18:04 < CoverSlide> it's possible
18:05 < marktraceur> CoverSlide: I did find one report that 0.8 fixed this error for someone. But I think we have some problem with 0.8
18:07 < ootje> with request(), is there any way of not getting the .body set to the entire response if it's a fairly large file being returned? (eg with pipe to a file stream)
18:07 < marktraceur> CoverSlide: Could I do this all synchronously? Maybe .exec?
18:08 < ootje> (or is there another approach to downloading files i should take?)
18:08 < CoverSlide> .exec may be possible, although it's not really synchronous
18:08 < marktraceur> Ah, no
18:08 < marktraceur> It's clearly not
18:12 < marktraceur> CoverSlide: No luck. execFile gives the same error.
18:13 < hevets> I'm trying to take a base64 encoded image from a post and write that to the filesystem, i have it writing right now but it takes a long time. I think I need to use a stream anyone familiar with this process and can point me in the right direction
18:16 < marktraceur> Anyone else have ideas as to why npm is erroring out when called from a spawn'd child process?
18:23 < EhevuTov> when trolls attack. I love it.
18:24 < CoverSlide> hevets: is it a direct raw stream? or is it an upload from a from with a input type="file" ?
18:25 < totallymike> So TypeScript, huh?
18:26 < hevets> CoverSlide: its a raw string coming through a post request, i basically take the string strip it of the meta data ;base64, stuff then try and create a new Buffer and write that buffer to disk
18:29 < tommydudebreaux> weird.  someone just sent me the typescript intro.. then I open this and someone says something about it
18:30 < CoverSlide> well instead of cunstructing your buffer at once after all the data has been received, you could open a write stream to the file, the on the data event, decode the base64, and write to that stream
18:30 < CoverSlide> also be sure you only decode % 4 bytes at a time
18:31 < hevets> ah ok thanks CoverSlide, i'll give that a try, it seems a lot more Nodeish, i knew the way i was doing it was a little backwards, got it working just not efficient at all, i'll give that a shot
18:32 < tommydudebreaux> is it just me or does typescript just look like a way to add intellisense to a dynamic language?
18:33 < jmoyers> type hinting can help with optimization, too
18:33 < jmoyers> not a proponent, just saying
18:33 < tommydudebreaux> it can.  so can internal class re-use
18:34 < jmoyers> not sure what that means
18:34 < tommydudebreaux> so the way that v8 creates a c++ class
18:34 < jmoyers> v8 optimizes with a cache bootstrapped by observation, right?
18:34 < tommydudebreaux> then re-uses the code for the class even when it it synamic
18:34 < CoverSlide> what's typescript actually do? does it do some crazy shit like if(typeof arguments[0] != "string") throw TypeError
18:35 < CoverSlide> if that's what it does then count me out
18:35 < tommydudebreaux> I think google has referred to them as "hidden classes"
18:35 < tommydudebreaux> if you instantiate an object in the same order each time, then you do not actually create a new type
18:35 < tommydudebreaux> *new c++ type*
18:35 < jmoyers> CoverSlide why don't you actually take a look?
18:36 < jmoyers> the compiled javascript looks like /shrug
18:36 < tommydudebreaux> I have not read the typescript code, but in general I am not fond of pre-compilation of dynamic languages
18:37 < tommydudebreaux> actually. I am against it when they change your code or add new keywords
18:37 < tommydudebreaux> jmoyers - I do think that type hints would be nice if they are unobtrusive… 
18:38 < jmoyers> i don't mind it, personally
18:38 < jmoyers> i think there are perhaps more pressing problems to solve
18:38 < jmoyers> in… life
18:38 < tommydudebreaux> ha.. yes :)
18:38 < CoverSlide> hmm in reality, it doesn't seem to do anything special at all
18:39 < jmoyers> thats kind of their point
18:39 < tommydudebreaux> CoverSlide - you talking typescript?
18:39 < CoverSlide> yeah
18:39 < tommydudebreaux> so it seems like they did all of this work to build a compiler that would plug into VS and give you intellisense
18:39 < tommydudebreaux> (hence my original comment)
18:39 < CoverSlide> basically
18:39 < jmoyers> this is a little funny though guys
18:39 < tommydudebreaux> and I could totally be over-simplifying
18:39 < jmoyers> with dart, or coffeescript
18:40 < jmoyers> the argument is that it adds too much, and is full of bloat compile
18:40 < jmoyers> the argument for typescript is that they were too focused ;p?
18:40 < jmoyers> NOT ENOUGH FEATURES!
18:40 < tommydudebreaux> I am proposing something different
18:40 < CoverSlide> i feel it's more like they added so little, why even bother?
18:40 < tommydudebreaux> I think that things like typescript are a healthy POC of somet hings
18:41 < tommydudebreaux> and from there, the standard should roll the good parts into the ecma standard
18:41 < tommydudebreaux> I think my biggest problem is that things like typescript are really for VS devs and will bloat my workflow
18:42 < jmoyers> that isn't anywhere near their site though
18:42 < jmoyers> from a goals perspective
18:42 < tommydudebreaux> def not their goals
18:42 < tommydudebreaux> I think this also helps make js more usable for their less-expensive (e.g. outsourced) teams to get started
18:42 < jmoyers> but, who cares. if they want to spend a bunch of money trying to fragment more, thats fantastic.
18:42 < CoverSlide> screw typescript, everyone should just use jangaroo
18:42 < jmoyers> perhaps some good ideas will fall out of it and get rolled in,
18:43 < tommydudebreaux> ex: http://blogs.msdn.com/b/somasegar/archive/2012/10/01/typescript-javascript-development-at-application-scale.aspx
18:43 < tommydudebreaux> noticve the titel (no need to click)
18:43 < CoverSlide> typescript is appscale!
18:43 < tommydudebreaux> the selling point is "application scale" whcih to me translates to large monolithic apps
18:44 < tommydudebreaux> I worked for Microsoft for 4 years
18:44 < tommydudebreaux> built www.asp.net and forums.asp.net in c#.. 
18:44 < mon> ... just FUD
18:44 < tommydudebreaux> luckily I was a contractor so I did not have the bureaucracy
18:45 < tommydudebreaux> given the way a lot of things are managed, this actually might solve microsoft's problem.. 
18:53 < mattvv> whats an easy way to have a gloabl config variable each of my .js pages can use
18:53 < mattvv> i'm using express
18:54 <@Nexxy> mattvv, require?
18:54 < jrajav> config.js: module.exports = { option1: true }
18:54 < astropirate> that, if it is static config
18:54 < milani> mattvv use a module
18:54 < mattvv> it's non static
18:54 < jrajav> var config = require('config')
18:54 < milani> oh jrajav told.
18:54 < astropirate> if its dynamic, then  app.set('myConfig')
18:54 < jrajav> if (config.option1)
18:54 < jrajav> ~next
18:55 < jrajav> Or use your local storage god-object of choice
18:56 < mattvv> astropirate: using that option with a standard routes method, how do i get access to the app object from include a default function
18:57 < jmoyers> mattvv actually, you can just use a straight json file and require it
18:57 < mattvv> using this method for example: app.get('/accounts/:id', accounts.show)
18:58 < mattvv> in this case my settings are actually spinning up a connection to an api
18:58 < mattvv> so i don't want to do multiple includes once i've put it in memory once
18:58 < spion> http://typescript.codeplex.com/discussions/397759
18:58 < mattvv> unless there's a way to do a singleton
18:58 < milani> mattvv, if by multiple includes u mean requiring modules
18:58 < milani> they are loaded only once.
18:59 < mattvv> so i should wrap my settings in a module?
18:59 < milani> requiring a module two times does not mean it starts over.
18:59 < milani> it is just reused.
18:59 < milani> yup. probably best way.
18:59 < mattvv> ok sweet, so wrap in module then just include that on each page that requires it, perfect - thanks
19:00 < milani> it they are static configs just create a json file.
19:00 < milani> and require it.
19:01 < topi`_> anyone with deep knowledge of the node-mysql module? specifically, I want to know why my VARBINARY type sql column ends up as a string on the nodejs side. (I checked it with typeof())
19:01 < topi`_> I'd expect it to become a Buffer...
19:02 < topi`_> maybe this is fixed in the alpha version? I'm still using node-mysql 0.9.5
19:02 < mattvv> pperfect thanks milani - looks like the module wrapping works
19:04 < milani> thx to jrajav ;)
19:04 < jrajav> Yup, I literally invented that method just now
19:04 < jrajav> Surprised no one realized you could do it before
19:04 < jrajav> ;P
19:05 < nullbit> can anyone look at my code and see wha tim doing wrong
19:05 < nullbit> http://www.amazon.com/gp/product/B005OSVZN4/ref=as_li_ss_tl?ie=UTF8&redirect=true&tag=reddit2-20
19:05 < nullbit> oops wrong link
19:05 < nullbit> sec...
19:11 < euoia> nullbit: lol
19:12 < nullbit> euoia: im still looking for my nodes ;)
19:18 < marktraceur> Can I fork a node process without sacrificing my ability to capture stdout?
19:18 < marktraceur> Context: http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options
19:18 < marktraceur> There doesn't appear to be a way to differentiate stdout in this method
19:19 < marktraceur> Suppress, maybe, with "silent", but not capture.
19:21 < aroman> any reason I shouldn't use signed cookies for my sessions instead of mongodb?
19:21 < CoverSlide> marktraceur: have you tried using the child process's stdout when silent?
19:25 < marktraceur> CoverSlide: No, but it's very seriously not obvious that that's an option
19:26 < Killswitch> https://www.refheap.com/paste/5445 Not sure how to fix this, anyone help?
19:26 < topi`_> I guess quite a few here use mysql as the backing db. anyone stored binary data, what are your experiences?
19:26 < topi`_> binary blob support is notoriously weak in javascript/nodejs
19:27 < topi`_> I am getting a wrong sha1 sum on my binary data after SELECTing it from the db...
19:27 < CoverSlide> Killswitch: what is the result of `which make` ?
19:27 < Killswitch> Sec codelahoma 
19:27 < Killswitch> CoverSlide: *
19:28 < Killswitch> Fixed it, sorry I needed to apt-get install build-essentials
19:30 < marktraceur> CoverSlide: stderr still doesn't work in silent mode.
19:32 < marktraceur> CoverSlide: I didn't test stdout, hold
19:32 < marktraceur> CoverSlide: No, no stdout either
19:35 < marktraceur> CoverSlide: And something is clearly wrong, because the process doesn't respond to the HTTP request for way too long, and eventually (if I understand correctly) just gives up
19:38 < robdodson> hm I'm having a weird issue with npm modules. Trying to run grunt and it's saying it can't find local module grunt-contrib and asking if it's installed. But it is installed. I'm looking at it in ./node_modules/grunt-contrib
19:38 < robdodson> the weird thing is it works just fine on my other machine. not sure what's up
19:39 < robdodson> anyone dealt with this before?
19:41 < robdodson> hm weird i'm an idiot and needed to globally install grunt again
19:42 < larryapplegate> I am looking at https://github.com/danysantiago/NodeJS-Android-Photo-Upload
19:43 < larryapplegate> I want to connect it to the Apple Sample project https://developer.apple.com/library/ios/#samplecode/SimpleURLConnections/Introduction/Intro.html#//apple_ref/doc/uid/DTS40009245
19:43 < larryapplegate> I am good at IOS, new to Node. Anyone want to collaborate?
19:48 < kendooo> anybody willing to, help me convert current php directory listing script into nodejs ? 
19:49 < saschagehlich> rauchg: ping
19:53 < jelscript> kendooo: what framework are you using?
19:53 < milani> kendooo, http://stackoverflow.com/a/5800843/153015
19:53 < CoverSlide> marktraceur: try this: child_process.spawn('child_module', [], {silent: true};
19:54 < marktraceur> CoverSlide: I'm using fork now, that's the problem
19:54 < CoverSlide> oh yeah by spawn i mean fork
19:54 < marktraceur> CoverSlide: That's what I'm doing, then
19:55 < CoverSlide> you have a silent: true option and empty array as arguments?
19:55 < marktraceur> CoverSlide: Yes.
19:56 < CoverSlide> ok nevermind, silent is v0.8.x
19:56 < marktraceur> CoverSlide: https://gerrit.wikimedia.org/r/#/c/26340/3/js/api/ParserService.js line 501 on the right
19:56 < astropirate> When I use cluster, AFTER i have made mongodb and redis connections, do the child process use the same connection or do they get their own connection?
19:57 < CoverSlide> astropirate: they would make separate ones
19:57 < CoverSlide> cluster makes a new process each time, the only thing that's shared is listening on a port
19:58 < CoverSlide> if you want them to share a connection, you'd have to connect it in master and make some weird message-passy stuff to the master
20:00 < marktraceur> CoverSlide: All right, so it makes sense that silent wouldn't do anything. But I still can't figure out what's wrong because stdout is being suppressed somehow.
20:02 < CoverSlide> ok looks like v0.6.x the stdout for fork is always piped to parent
20:02 < marktraceur> Yes.
20:02 < CoverSlide> i guess the assumption is anything the parent needs to receive from the child can be done via IPC, process.send, etc
20:02 < CoverSlide> but v0.8.x you can use silent
20:12 < owen1> i have multiple test files in test folder. how to run all of them? node test/* only runs one of them.
20:15 < chilts> owen1: I use 'tap' for my tests, so I type 'tap test/' which runs them all
20:16 < chilts> are you using at est framework of some description?
20:16 < marktraceur> owen1: for f in ls test; do node test/$f; done
20:16 < marktraceur> (I may have missed some syntax there)
20:17 < tnorris> owen1: if your just trying to run node on multiple files, do the following: `ls *.js | xargs node`
20:17 < aandy> (and os compatability) 
20:17 < aandy> :D
20:17 < chilts> yeah, some good suggestions there :)
20:17 < chilts> pick one
20:17 < chilts> shame there are so many ways though - of course, it'll depend on his use-case :D
20:19 < tnorris> owen1: correction: `ls -1 *.js | xargs -I '{}' node '{}'`
20:21 < Sonderblade> what libraries can you use with node.js to build a multi-room chat server?
20:22 < Pilate> you dont need any libraries
20:22 < Pilate> and you could probably find a reason to use most libraries
20:22 < Fishrock123> Is there any reason I should be aware of that express would see my ip as different than https://www.google.ca/search?q=what+is+my+ip ?
20:23 < marktraceur> Fishrock123: Maybe it's seeing your local IP?
20:25 < Nuck> I can't decide if a file location would be a good thing to make a global
20:25 < Nuck> It's tough because I've grown to hate globals thanks to you evil bastards, and now I'm really hesitant to use them
20:26 < astropirate> Does Object.seal() work with objects that have a constructor? I cant seem to be able to get it to work  http://pastie.org/4898780
20:28 < hell_lord> Nuck: the only thing wrong with globals is that as the number of them increases the code becomes more confusing to read because scope of a variable is unclear.  and you could argue it has memory overhead but i wouldn't unless you're defining a massive amount of memory worth of globals.  so who cares
20:28 < hell_lord> Nuck: as long as you have convention about what you're doing, e.g., it's a constant or something, it's fine imo
20:30 < Fishrock123> marktraceur: Whoops ment to post that in #express ... ANd no, it's hosted on nodejitsu.
20:30 < marktraceur> Fishrock123: No problem.
20:31 < marktraceur> Fishrock123: Maybe you're proxying in to access the service?
20:32 < Fishrock123> marktraceur: Would there be a way to find out? request.ips doen't show an proxies...
20:32 <@Nexxy> globals make your code much less portable/extensible
20:32 < marktraceur> Fishrock123: Check your browser settings :)
20:37 < owen1> chilts: marktraceur: tnorris: thanks guys. i don't use testing frameworks. i want to feel PAIN before using them.
20:38 < owen1> chilts: i don't understand tap's readme ): what's the advantage of tap?
20:39 < marktraceur> OK, so if I'm understanding from feedback and research
20:39 < marktraceur> 1. It's impossible to run node processes through child_process.spawn, because message passing won't work.
20:39 < marktraceur> 2. It's better to use fork, because that's what we use for node modules.
20:39 < marktraceur> 3. fork doesn't have any way to return the stdout.
20:40 < marktraceur> So basically, I can't get the stdout of any node process.
20:40 < marktraceur> Sound right?
20:40 < milani> marktraceur, if you only need stdout try exec
20:40 < marktraceur> milani: I'm almost certain it will have the same flaw as spawn.
20:40 < milani> and spawining nodejs child processes should work.
20:41 < milani> marktraceur, then it is your fault not nodejs:)
20:41 < marktraceur> milani: I'll try it again, but it didn't work last time
20:41 < milani> try exec first to make sure.
20:41 < marktraceur> milani: And if there's no way to get stdout from a node process, that's definitely not my fault.
20:42 < milani> it runs the process until it exits and returns the stdout and stderr
20:42 < milani> hmmm no I'm wrong. it is not sync.
20:43 < milani> marktraceur, did u try the sample code here? http://nodejs.org/api/child_process.html
20:44 < marktraceur> milani: Almost verbatim.
20:45 < hell_lord> marktraceur: what are you trying to do?
20:45 < marktraceur> hell_lord: Run tests (run by node) through a web service
20:46 < hell_lord> marktraceur: but i mean do you basically just wanna do an exec and get the stdout, or?
20:46 < marktraceur> hell_lord: Exactly
20:46 < hell_lord> marktraceur: i was able to do that with a shell command.
20:47 < milani> marktraceur, I tried right now. it works.
20:47 < milani> spawn
20:47 < hell_lord> exec('something', function(error, stdout, stderr) { if (!error) { var output = stdout.replace(/^\s+|\s+$/, ''); });
20:48 < hell_lord> that trims surrounding whitespace
20:48 < marktraceur> milani: OK, so I guess something else is happening....probably this system is using cluster somewhere it's not supposed to
20:49 < milani> marktraceur, https://gist.github.com/3823202
20:49 < milani> it is simple enough to try.
20:49 < owen1> what's the problem with this line?   var git = spawn('git', ['commit -am "backup"']);
20:49 < marktraceur> milani: No, I spawn a shell script with node in it
20:49 < owen1> it tells me it's not a git command. 
20:50 < owen1> probably something with the " and '
20:50 < milani> owen1, no space.
20:50 < marktraceur> owen1: I'd guess it's because you need to put each argument in its own string
20:50 < milani> split your arguments by space into array;)
20:50 < milani> marktraceur, oh that.
20:51 < milani> hmmm.
20:51 < aalex-sat> hello
20:51 < milani> don't know exactly what is happening but it shouldn't be a problem.
20:52 < marktraceur> milani: The error: http://dpaste.com/809114/
20:53 < aalex-sat> If I want to store all the javascript callbacks - let say in a global map in my C++ addon - should I store them as a std::map<v8::Local<v8::Function> > ? (see http://nodejs.org/docs/latest/api/addons.html#addons_callbacks)
20:54 < milani> marktraceur, there is no process.send really. don't know what is going on there.
20:55 < marktraceur> milani: I gotta say, I'm in total agreement
20:55 < sschultz> I'm a real node.js noob. Trying to create a basic game, with node.js as the server, that connects to clients (a web client, a smartphone client, etc.). Trying to understand what the pieces of my stack would be and where certain functions would live. If, for example, I wanted user auth, would I look for a package in npm or is best practice at this point to use express w/passport on top? I'm somewhat confused about if express
20:55 < sschultz> mainly for the web or it's restful and can be used to connect to any endpoints. Thanks!
20:55 < milani> marktraceur, is it nodejs cluster module or the older third-party one?
20:56 < marktraceur> milani: Errr....I think the nodejs one, since there doesn't appear to be a module for it anywhere
20:56 < milani> sschultz, you probably can search for tutorials but express is good to learn.
20:58 < milani> marktraceur, http://nodejs.org/api/cluster.html#cluster_worker_send_message_sendhandle
20:58 < marktraceur> milani: I don't need to send messages
20:58 < milani> I know! I say it is there. 
20:58 < milani> process.send.
20:59 < marktraceur> milani: Not in my code, I'm pretty sure....
21:01 < sschultz> milani: thanks
21:01 < milani> sschultz, if you are familiar with js take a look at nowjs.com
21:02 < sschultz> milani: great. will do. thank you
21:02 < milani> if you are not familiar with js, continue with express. because nowjs makes you confused.
21:03 < patrickmc> anybody in the LA area?
21:03 < marktraceur> milani: I think it's something like this https://github.com/joyent/node/blob/master/src/node.js#L85
21:03 < marktraceur> So I should just unset that
21:03 < sschultz> haha
21:04 < sschultz> thanks for the advice - I'm relatively proficient in js
21:05 < milani> marktraceur, it would make situation worse
21:05 < milani> if something is cluster, it is doing it wrong I guess.
21:05 < marktraceur> milani: Looks promising--it's running the tests, methinks.
21:06 < marktraceur> milani: I'm going to go with "yes, successful hackish workaround"
21:06 < CoverSlide> patrickmc: Pasadena here
21:07 < milani> marktraceur, lol but later find the reason. it will help;)
21:07 < marktraceur> milani: Honestly, this entire patch is a dirty hack. One more on the pile won't hurt.
21:07 < marktraceur> Once we get proper-ish testing, it will be less trouble.
21:07 < milani> lol
21:07 < patrickmc> there is supposed to be a meetup tonight discussing node.js http://www.meetup.com/HuntingtonBeach-hack/events/83904052/
21:07 < patrickmc> i have never been, seing if anyone else was going
21:08 < marktraceur> patrickmc: I imagine they wouldn't bother announcing it if nobody was going :)
21:08 < CoverSlide> ah nah first I've heard of it.
21:08 < CoverSlide> who's sponsoring it? I only know of one node company down here
21:12 < hell_lord> i'm creating some unit tests using assert and i'm wondering what the best strategy is for running these tests as a suite.  i have multiple files, each testing a different module.  should i just have start up node and eval them each?  i'd rather do it in node than like a shell script since it's more portable that way.  any thoughts on this?
21:13 < substack> hell_lord: for t in test/*.js; do node $t; done
21:14 < hell_lord> kweheheh
21:14 < terinjokes> hell_lord: have you considered something like Mocha?
21:15 < hell_lord> terinjokes: looks good!
21:15 < hell_lord> terinjokes: i'll check it out thanks
21:17 < hell_lord> sidenote, *ouch* @ mocha deps list
21:23 < chovy> has anyone used nginx or apache infront of node?
21:24 < patrickmc> CoverSlide: not sure about it, i just got emailed the event... I am looking to work with any companies utilizing node.js, I am in Sherman Oaks
21:25 < aandy> chovy: i think most people have used nginx in front of node. it's a common way. what's your question? :)
21:25 < patrickmc> marktraceur: good point, but you never know with meetups, they can be pretty lame
21:26 < marktraceur> patrickmc: Agreed. I prefer IRC, much nicer.
21:44 < chovy> aandy: i was just curious is it better to use nginx or apache infront of node, i'm more fmiliar with apache config...jsut wondering what the advantage if any was with nginxx
21:45 < hell_lord> chovy: nginx is simpler to configure but if you're already familiar with apache you probably don't care about that.  it's supposedly faster but i haven't seen any data
21:45 < hell_lord> chovy: oh, and lighter weight
21:47 < chovy> ok
21:47 < aandy> chovy: i'd use nginx
21:47 < txdv_> nginx sounds better
21:48 < txdv_> though apaches are awesome too
21:48 < chovy> nginx doesn't have very good community behind it
21:48 < niggler> is there a good tutorial
21:48 < chovy> compared to apache
21:48 < Franz__> why i disconnected in 10 seconds of node/socket.io 
21:48 < Franz__> ?
21:48 < aandy> chovy: it doesn't?
21:48 < aandy> funny, i think it's the other way around :)
21:48 < Franz__> somebody can help with this problem?
21:51 < EyePulp> nginx seems to have a lot clearer answers when I run into config issues.
21:51 < EyePulp> and more readable configs, for that matter.
21:56 < hell_lord> i've occasionally had trouble finding good documentation on how certain nginx configs should work.  but on the other hand, a lot of people are using it so i know at least it's tested well :)
21:56 < hell_lord> the windows version sucks
21:56 < niggler> anyone use actual java here?
21:57 < niggler> not javascript, but "java"
21:57 < hell_lord> niggler: sure, but it's OT :)
21:57 < pyrotechnick> guys this is #node.js
21:57 < pyrotechnick> please, go be with your own kind
21:57 < niggler> i was curious about how java's random compared with javascript's
21:57 < pyrotechnick> js's is much simpler
21:57 < pyrotechnick> it's psuedo-random, cannot be seeded
21:57 < pyrotechnick> and is a double between 0 and 1
21:58 < pyrotechnick> java's much more flexible
21:58 < niggler> i assumed they used an LCG
21:58 < pyrotechnick> it depends
21:58 < pyrotechnick> you should google it if you need anymore details
21:58 < LouisT> niggler: i ran my range on a..ccccc and it did it in less than a second with 1,425,765 results in the returned array, i put it in a .txt file with join(' '), made a 7.69MB file heh
22:04 < LouisT> what..
22:04 < LouisT> 2/03:02:11 * LouisT has quit (Ping timeout: 250 seconds)
22:04 < LouisT> 2/03:02:11 * Disconnected (Remote host closed socket).
22:04 < LouisT> how does that work? -.-
22:07 < niggler> cool LouisT 
22:07 < niggler> are you using webchat.freenode.net?
22:08 < LouisT> no, xchat
22:08 < LouisT> but i assume it's an issue with IPv6
22:08 < LouisT> i've just never seen myself ping before, kinda weird
22:18 < owen1> is it a good practice to process.exit() when error happend? (and logging it before exiting) 
22:18 <@Nexxy> sure
22:18 < owen1> i use forever so my server will restart
22:18 <@Nexxy> yeah
22:19 < owen1> sweet. i saw it in dshaw's talk (or was it the nodjitsu guy)
22:19 <@Nexxy> there are a lot of nodejitsu guys lol
22:19 < niggler> is there a way to force node to overflow integer arithmetic 
22:19 <@Nexxy> each with their own super power
22:20 < Franz__> lol
22:20 < owen1> Nexxy: the bosss
22:20 < owen1> not a recent talk though
22:20 <@Nexxy> yeah
22:20 <@Nexxy> he has laser vision
22:22 < draginx> Any idea why when I place kue into my app.js everything just freezes? :/
22:23 < context> whow. kue looks awesome
22:24 < draginx> var job = req.app.jobs.create('upload image', {req: req, res: res}); thats all im trying to do
22:25 < draginx> req.app.jobs === kue though
22:25 < draginx> o wait im not calling save hmm
22:25 < draginx> nope same thing
22:25 < draginx> kue is broken :/
22:26 < hell_lord> niggler: i'm not sure how node's random works.  in java i believe it depends on what the system has.  if your system has an entropy provider makes a difference, and also if you have special hardware for randomization
22:26 < niggler> v8 does the nasty
22:26 < niggler> digging into firefox right now
22:27 <@mbalho> there is a newer prng api in webkit
22:27 <@mbalho> getRandomBytes or something
22:28 < niggler> its not rocket science to properly implement prng's in javascript, but it appears that replicating math.random is not possible given what it does on v8
22:30 < bubbles1_> has anyone important in the node.js community written or commented on TypeScript?
22:32 <@Nexxy> bubbles1_, http://blog.izs.me/
22:32 <@Nexxy> if you consider isaacs important enough
22:32 < creationix> Nexxy, :P
22:32 <@Nexxy> I mean... he's no creationix or anything
22:32 < creationix> lol
22:33 < bubbles1_> thanks!
22:35 < bubbles1_> i wonder why ryan hasn't commented. but i see the C9 guys have added support, so i guess it looks promising
22:36 < creationix> bubbles1_, to me it's just another lint tool
22:36 < creationix> we (c9) don't have auto-complete yet, but we at least have syntax highlighting for it now
22:38 < creationix> and for the record I agree with isaacs's post on TypeScript
22:38 < bubbles10101> cool
22:39 < creationix> so does anyone in here know how tty sessions really work
22:39 < creationix> at the protocol level?
22:39 < creationix> like if I send manual NAWS commands to a child process, will it intrepret them as resize events? http://www.ietf.org/rfc/rfc1073.txt
22:46 < Mark____> Hi, I'm learning how to use node streams, but I don't funny understand the difference between the "end" and the "close" events
22:46 < Mark____> Here's my code: http://pastebin.com/yqJxy9Ju
22:46 < Mark____> How can I be guaranteed that the file is 100% guaranteed written to disk?
22:47 < timeturner> I really hope node doesn't phase out of javascript and into typescript
22:47 < pyrotechnick> coffeescript has more of a chance
22:47 < pyrotechnick> so don't worry too much
22:47 <@mbalho> no it doesnt
22:47 < pyrotechnick> does
22:47 < timeturner> haha
22:48 <@mbalho> isaac hasnt said 'node will never be in typescript' yet :)
22:48 < pyrotechnick> he doesn't need to
22:48 < pyrotechnick> anyway: https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS
22:49 <@mbalho> besides, my point is that they are both tied at 0 chance
22:49 < pyrotechnick> stop pretending any of this is novel in anyway whatsoever
22:49 <@mbalho> why did you post a link to a list of compile to js languages
22:50 < pyrotechnick> because some of them are "typed"
22:51 < CoverSlide> actually the plan is to migrate node to dart
22:51 < pyrotechnick> HAH
22:51 < niggler> nodart
22:51 <@mbalho> node is already stealing dart features
22:51 <@mbalho> new streams api for instance
22:52 < pyrotechnick> name a feature dart was the first at
22:52 <@mbalho> i just did
22:52 < pyrotechnick> streams?
22:52 <@mbalho> go read the above sentence
22:52 < pyrotechnick> so streams? dart invented streams?
22:53 <@mbalho> "new streams api"
22:53 <@Nexxy> mentlegen.
22:53 <@mbalho> pyrotechnick: https://github.com/isaacs/readable-stream
22:53 <@mbalho> pyrotechnick: youre probably thinking of the old streams api
22:53 < pyrotechnick> NEXXY STAY OUT OF THIS
22:53 < pyrotechnick> this conversation is for men 
22:53 < hell_lord> since iostream i've been trying to figure out what a stream is
22:53 <@mbalho> im trying to tell typed language person about the new streams api
22:53 <@Nexxy> SO HALF OF ME WILL PARTICIPATE
22:54 < pyrotechnick> K
22:54 < niggler> fuck dart
22:54 < pyrotechnick> niggler++
22:54 < pyrotechnick> it was so promising too
22:54 < hell_lord> as far as i can tell it's colorful imagery for something that's the same it always was
22:55 < niggler> then they actually tried to do something
22:55 < draginx> anyone got kue to work with redis auth and selecting a db?
22:55 < PhoenixSTF> is there a off-topic channel?
22:55 < pyrotechnick> why did they delete the epic github dart thread
22:56 < pyrotechnick> https://gist.github.com/1277224
22:56 < pyrotechnick> :( :( :(
22:56 <@Nexxy> PhoenixSTF, node off-topic?
22:56 <@mbalho> because trolling is a waste of time
22:57 <@mbalho> and vm experimentation and competition is a good thing
22:57 < pyrotechnick> no there's some exceptions, like that one
22:57 < PhoenixSTF> Nexxy, never mind  :)
22:58 < PhoenixSTF> This will probably make some people less friendly but has anyone benchmarked Perl POE/Reflex and Node?
22:58 < PhoenixSTF> ;)
22:59 < s5fs> whats perl, some node module?
22:59 < pyrotechnick> you did, but then you went back in time and unwasted your time so you still haven't yer
23:00 < PhoenixSTF> s5fs, a language!
23:00 < pyrotechnick> http://www.reddit.com/r/fifthworldproblems
23:00 <@Nexxy> PhoenixSTF, so like coffeescript then?
23:00 < s5fs> or esperanto?
23:00 < s5fs> Nexxy: no need to get nasty
23:01 < PhoenixSTF> more like the grandfather of node  xD
23:01 <@Nexxy> s5fs, far too late for that
23:01 < CoverSlide> perl is more like the retarded inbred cousin of node
23:02 < s5fs> CoverSlide: maybe so, but it's the retarded cousin who's always been able to hold down a job!
23:03 < s5fs> hell, i worked in perl less than 48hrs ago
23:03 <@Nexxy> I think that means you're still contagious
23:04 < jesusabdullah> perl's more like, your working class grandpa
23:04 < jamesd_> isnt the perl more like the old grandparent with alzheimers
23:04 < s5fs> Nexxy: nah, i was behind 7 proxies
23:04 <@Nexxy> oh, good
23:04 < jesusabdullah> drinks beers around the burn pit
23:04 < s5fs> jamesd_: lets not confuse perl with cobol
23:04 < CoverSlide> working class grandpa with alzheimer's and shits himself every day
23:04 < jesusabdullah> incorrect
23:04 < jesusabdullah> more like
23:04 < jesusabdullah> a tea party-er
23:04 < jamesd_> s5fs, true but an alzhiemer patient doesn't have enough vocabulary to be  cobol 
23:05 < jesusabdullah> loveable but says ignorant shit
23:05 < jesusabdullah> cobol is more like great grandma tourettes
23:05 < s5fs> i'm doing my best to get paid to work in every hated language still inuse
23:06 < s5fs> so far i've got cobol, perl, coldfusion and jsp. working on landing ada at the moment.
23:06 < pyrotechnick> My membrane girlfriend and I didn't use protection when we collided and now we're going to have a universe. I'm not ready to be a deity but my family is pro-existence. What do I do?
23:06 < PhoenixSTF> if any of you use linux, you should remove it and install windows, it has got VB, a junky you kind full of Steve Balmer Drugs 
23:06 < s5fs> oh, vbscript and classic asp too i guess
23:06 < jesusabdullah> java is your corporate cousin, thinks he's special cause he could afford a lexus but is kind of an insufferable dipshit
23:06 < PhoenixSTF> *young kid
23:06 < s5fs> jesusabdullah: i'm doing protocol work in java, did you know it has no unsigned types? super fun!
23:06 < nlf> jesusabdullah: kind of?
23:07 < dazoe> so if i have a lot of 'strings' say 1000's and i don't want any duplicates should i use an object like {str1:true, str2:true, ...}, so i can check with if(collection[str1]), or should i use an array and check with a for loop?
23:07 < PhoenixSTF> s5fs, you worked with perl and node?
23:07 < jesusabdullah> nlf: he's "in sales" and quietly flunked out of his online mba program
23:08 < nlf> i think he's firmly categorized as an insufferable dipshit, there's no "kind of" about it
23:08 < s5fs> PhoenixSTF: no perl with node, i have some monitoring scripts for cacti written in perl that i was updating.
23:08 < jesusabdullah> but it's your cousin brah
23:08 < jesusabdullah> s5fs: what is cacti
23:09 < s5fs> jesusabdullah: trend monitoring and whatnot
23:09 < s5fs> mainly good for snmp
23:09 < s5fs> you can extend it using scripts, for instance i'm doing a bunch of stupid shit to monitor hyper-v performance via a perl script that calls wmic and eventually makes a fugly graph
23:10 < s5fs> cuz nothin' says lovin' like performance monitoring a windows box from a linux server
23:11 < patrickmc> i am signing off... if anyone is in the LA area head over to http://www.meetup.com/HuntingtonBeach-hack/events/83904052/  I have never been but I guess we will be doing some fun node.js stuff.
23:11 < PhoenixSTF> s5fs, doesn't everyone knows that Hyper-v sucks?????
23:11 < s5fs> PhoenixSTF: apparently not everyone
23:13 < jesusabdullah> s5fs: what's snmp? :v
23:13 < s5fs> PhoenixSTF: i built a 2-node hyper-v cluster for a customer about two years ago, aside from them doing silly stuff it's been rock-solid. fyi, don't unplug both heartbeat cables, really confuses things.
23:13 < jesusabdullah> also what are you doing with a winbox?
23:13 < s5fs> jesusabdullah: i dunno, but whatever it is ain't simple!
23:14 < jesusabdullah> s5fs: http://cacti.net/ this guy?
23:14 < s5fs> jesusabdullah: integration work, mainly
23:14 < jesusabdullah> hmm
23:14 < s5fs> jesusabdullah: yeah, exactly that
23:14 < PhoenixSTF> s5fs, I try to avoid everything that has microsoft writen....
23:16 < s5fs> PhoenixSTF: yeah, i can see that. i'm much happier on nix systems but integration work often forces you into weird systems.
23:16 < s5fs> i like to throw a broad net
23:17 < clever> jesusabdullah: i have writen custom (non-snmp) cacti<->node interfaces recently
23:17 < clever> so i can graph the result of any node.js function, from a long-running daemon
23:18 < clever> jesusabdullah, s5fs: http://privatepaste.com/52fd84883e
23:19 < clever> nc 127.0.0.1 1246 then automaticaly outputs the data, like guilds:132 users:332 ....
23:19 < clever> then its relatively simple to add that to cacti and graph the crap out of it
23:20 < jesusabdullah> clever: neat
23:20 < jesusabdullah> I want to graph things with R and ggplot2
23:20 < jesusabdullah> or pgf/tikz
23:20 < jesusabdullah> and hook them into a node server or some shit
23:20 < clever> jesusabdullah: cacti has a script data source, i just told it to run 'nc 127.0.0.1 1246' and it gets the data from node.js (code above)
23:21 < clever> then i just define all the output parameters, and the graph layout
23:21 < s5fs> clever: haha, that's cool man
23:21 < s5fs> cacti is great when it works but a total pain to debug when it breaks
23:21 < clever> its now graphing the number of open sockets, the number of various management objects, and the ram usage
23:21 < clever> and node.js is beating the crap out of the old app it replaced
23:22 < clever> 700 open connections, 22mb resident usage
23:22 < clever> the previous one was c++/qt (using qscript), and ate 1+gig of ram
23:22 < s5fs> wow, just for monitoring??
23:22 < clever> s5fs: no, the old one didnt even have monitoring
23:23 < s5fs> gotcha
23:23 < clever> thats just for the primary purpose of the app (instant messaging, custom protocol)
23:24 < s5fs> that makes sense
23:24 < clever> the previous version had a seperate qscript engine for every connection
23:24 < clever> and all inter-connection IPC was done via c++ callbacks, that hit up every active connection
23:25 < clever> the new one is a single node.js env/global, with all connections managed via js objects
23:25 < s5fs> wow, that's a big change in approach for sure
23:25 < clever> all inter-connection stuff is done via special objects (one per target) in an array, index'd by the target
23:25 < clever> each holding an array of sockets
23:26 < jesusabdullah> I'm just jonesin' for some math/stats nerdage is all :)
23:27 < polyrhythmic> quick/clear
23:27 < polyrhythmic> I am stumped on this one.  How do I get access to the Debug object from inside Node?
23:27 < polyrhythmic> I'm familiar with how to use the debugger
23:27 < clever> s5fs: each of those special per-target objects is hooking itself to .on('close', so it can remove sockets from their own private arrays
23:28 < s5fs> clever: you say this is for a chat/messaging server?
23:28 < clever> s5fs: mostly, its actualy adding 'instant' messaging to a website that isnt so instant
23:29 < s5fs> clever: thats fun!
23:29 < clever> s5fs: basicaly, if you send a message to somebody, it gets reported to my node.js app
23:29 < clever> and if he is online, it gets reported to him (no actual content)
23:29 < clever> and he gets a beep
23:29 < littlebear> clever: beep as in system internal beep?
23:29 < clever> then he logs into the real site the old fasion way and opens his inbox
23:30 < clever> littlebear: depends on configuration
23:31 < clever> s5fs: all node.js does is keep track of who is connected, and pass the event on to the right socket
23:32 < polyrhythmic> Is there any way to get at the v8 debug object without using --expose-debug-as flag when launching node?
23:36 < draginx> Has anyone been succesful ywith kue?
23:36 < draginx> successful with*
23:41 < topspin> i have a child_process.spawn(...) going and i'm trying to write a line to the child's stdin *without* calling end()... i wish to write to the child many times so end() isn't appropriate.  problem is the child never gets the data written by .write().  This has made me seek a .flush() but there is none.
23:41 < clever> topspin: id start with strace to see if the write is getting to the kernel
23:43 < topspin> write(10, "<my data here", 12) appears in strace
23:43 < clever> topspin: does it work when you .end() the connection?
23:43 < topspin> yep
23:44 < clever> not sure then
23:44 < clever> doesnt child_process have a special ipc system built in?
23:44 < clever> topspin: http://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle
23:45 < topspin> it does.. for ipc between nodes
23:45 < clever> ah, not a node child
23:45 < topspin> yep
23:45 < clever> depending on how complex the ipc is, you could just implement it
23:45 < topspin> it must be the child then
23:45 < clever> id strace the child next
23:45 < topspin> it *has* to be... in my case it's a TCL interpreter
23:47 < topspin> ahh
23:47 < topspin> yes it is
23:47 < topspin> i've done the client wrong
23:47 < topspin> er.. the child
23:47 < topspin> btw, node rocks
23:47 < clever> :D
23:48 < clever> the last c++ app i converted to node, went from 1gig mem usage, to 22mb
23:49 < mscdex> node.js rules!
23:50 < mmalecki> clever: you clearly had a memory leak in C++ then :)
23:51 < clever> mmalecki: i checked several times, valgrind said nearly all memory was released on shutdown
23:52 < mmalecki> interesting... I mean, this sounds too magical for me
23:52 < mmalecki> but congrats :)
23:52 < clever> i think it had to do with multiple qt script engines
23:52 < niggler> fuck qt
23:52 < clever> each with its own private heap
23:53 < clever> each with a large chunk of 'free' space
23:53 < clever> node does the same thing, but i'm only using 1 engine
23:53 < mmalecki> oh maaan
23:53 < clever> so its not multiplied by 700
23:53 < mmalecki> I mean, don't use qt XD
23:54 < ChrisPartridge> try compiling QT on a 128MB vm ><
23:54 < topspin> no
23:54 < clever> that reminds me
23:54 < clever> i compiled it on windows once (for cross-compile libs)
23:54 < clever> turns out, debug is on by default
23:54 < clever> it made 2 dll's for every lib
23:54 < clever> some of them, 3gig in size
23:55 < niggler> qt reflects the mismanagement of the current parent company
23:55 < s5fs> clever: why two? 32 and 64bit?
23:55 < mscdex> DLLOL
23:55 < clever> s5fs: one with and one without debug info
23:56 < clever> it was giving pre-stripped libs for release builds, and also letting me pick the debug versions if needed
23:56 < clever> the debug versions, being several gig in size
23:56 < s5fs> i guess that makes sense
23:56 < clever> in the end, i did manage to hack together cross-compiling
23:56 < clever> making a windows .dll from linux, with qt staticly linked in
23:56 < clever> using a copy of qt built on real windows
23:57 < clever> but i never got gui working right, i think it was conflicting with the other gui actions in the main thread
23:57 < clever> 2 gui libs in the same process, fighting over events
23:57 < s5fs> i hate gui programming in all forms. i worked in swing last week.. just terrible.
23:58 < jesusabdullah> what about
23:58 < clever> i was editing the realvnc.com java client last week
23:58 < jesusabdullah> html?
23:58 < jesusabdullah> I can kinda handle html for basic ux stuff
23:58 < clever> turns out, they are using an accient event api, which doesnt support the mouse wheel
23:58 < s5fs> jesusabdullah: yeah, i hate html too
23:58 < jesusabdullah> yeah, I mean
23:58 < jesusabdullah> I guess I never really *liked* html
23:58 < clever> s5fs: the instant i add a callback for the new event api, the old one stops getting called!
23:58 < s5fs> maybe hate is the wrong term, it's not the markup i hate, it's the process
23:58 < clever> so if i want the mouse wheel to work, i loose EVERYTHING else (keyboard/mouse move/click)
23:59 < jesusabdullah> but it's probably as good as it can be considering
23:59 < s5fs> clever: haha!! awesome
23:59 < clever> s5fs: the solution, is to rewrite the entire thing to use the new events
--- Log closed Wed Oct 03 00:00:00 2012
