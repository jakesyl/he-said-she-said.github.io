--- Log opened Sat Apr 06 00:00:28 2013
00:01 < Dennis> @passcod what is ofc?
00:01 < passcod> "of course"
00:03 < [Fudge]> is there any way of me checking if an event emitter has a listener for a particular event?
00:06 < [Fudge]> nvm
00:06 < [Fudge]> found emitter.listeners
00:14 < Dennis> @passcod so my permissions for the usr/local dir is everyone has read and write now
00:16 < passcod> huh
00:18 < asterick> Everytime I see "@nick" I keep thinking you're copy-pasting a twitter quote
00:20 < passcod> asterick: oh, wow, hadn't even noticed that
00:20 < Dennis> and when you say usr/local I am referring to my Macintosh HD>usr>local
00:25 < XymonSinclair> Hm.
00:26 < passcod> Dennis: I assume you did that recursively? So /usr/local/lib/dtrace/node.d can be written to as well?
00:26 < passcod> If so, try again brew link --overwrite node
00:26 < Dennis> I just ran sudo chown -R $USER /usr/local
00:26 < Dennis> that might have fixed it
00:26 < passcod> oh, yep
00:27 < Dennis> no now I should be able to run which node
00:27 < Dennis> and which git returns /usr/local/bin/node
00:27 < Dennis> @passcod I think that fixes it right?
00:27 < passcod> yes. run a node -V
00:27 < passcod> just to be sure :)
00:28 < passcod> err, node -v
00:28 < Dennis> v0.10.3
00:28 < Dennis> boom
00:28 < Dennis> @passcod what is the best route for npm?
00:29 < passcod> Dennis: npm is bundled with Node, so it should just work
00:31 < Dennis> @passcod is there a way to check?
00:31 < inspiron> do you guys put your config in config.js or config.json
00:34 < Dennis> I get -bash: npm: command not found running npm help -ls
00:35 < passcod> huh
00:35 < deoxxa> Dennis: your setup is so, so broken
00:37 < passcod> Dennis: try linking npm
00:38 < Dennis> @passcod so ur saying to run 'npm link'
00:38 < passcod> yeah
00:38 < Dennis> @passcod -bash: npm: command not found
00:38 < passcod> oh, sorry, no.
00:38 < passcod> brew link npm
00:38 < passcod> in fact, if you can be bothered, you could try to remove and reinstall node entirely, so it would do all that by itself
00:39 < inspiron> if i do require('./myfolder'); and there are a bunch of files in it and one index.js then will only the index.js get loaded
00:39 < Dennis> @passcod Warning: Already linked: /usr/local/Cellar/node/0.10.3 To relink: brew unlink node && brew link node
00:39 < Dennis> @passcod so should I relink npm?
00:39 < passcod> yeah, try to
00:39 < passcod> otherwise, just do a full reinstall of node. Now that the permissions are ok, it should fix everything
00:39 < Dennis> @passcod what are the proper steps to do a full reinstall?
00:40 < Dennis> just so I dont eff it what I've done so far
00:40 < passcod> brew remove node
00:40 < passcod> brew uninstall node
00:40 < passcod> brew install node
00:40 < Dennis> so I ran the prev command and got : Unlinking /usr/local/Cellar/node/0.10.3... 3 links removed Linking /usr/local/Cellar/node/0.10.3... 3 symlinks created
00:40 < Dennis> running npm help -ls returns -bas: npm: command not found
00:40 < passcod> can you ls /usr/local/bin/ | grep npm just to check
00:40 < Dennis> ok ran ls /usr/local/bin/ | grep npm
00:40 < Dennis> and then ran `npm help -ls` which retunrs bash command not found again
00:41 < Incips> I'm so confused :v
00:41 < Incips> My node IRC client I wrote the other day is connected to this channel and it's receiving entirely different chat than I am here
00:41 < passcod> did the grep return anything?
00:41 < Dennis> nope
00:42 < Incips> I even see it in the user list
00:43 < passcod> Dennis: I think you should just try to reinstall. That way, problems will hopefully be all fixed without having to trace down each one.
00:43 < Dennis> @passcod sounds like a plan. I'll give it a shit now
00:43 < Incips> https://dl.dropbox.com/u/1783826/waaaaaat.png the two clients side by side, haha
00:43 < Dennis> ha shot
00:43 < Dennis> and shit too
00:43 < Dennis> @passcod just ran brew remove node then brew uninstall node and it said Error: No such keg: /usr/local/Cellar/node
00:43 < passcod> Dennis: yep, that's ok.
00:43 < Dennis> ok cool got sceered for a minute
00:43 < Dennis> brew install node says : It appears you already have npm installed at /usr/local/lib/node_modules/npm.
00:43 < passcod> oh what.
00:43 < Dennis> To use the npm that comes with this recipe, first uninstall npm with `npm uninstall npm -g`, then run this command again.
00:44 < passcod> and you can't do that because npm isn't in your path. right.
00:44 < passcod> just rm -r /usr/local/lib/node_modules
00:44 < passcod> and be careful with that command :)
00:44 < passcod> and then try to reinstall again
00:44 < Dennis> k
00:45 < Dennis> @passcod it's is installing right now! WOOT! hopefully this does the trick
00:45 < passcod> :)
00:45 < Dennis> @passcod also thanks for being a huge help and a spitting image of what helping eachother means on the internetz!
00:45 < passcod> sure, np
00:46 < Dennis> Homebrew installed npm. We recommend prepending the following path to your PATH environment variable to have npm-installed binaries picked up:   /usr/local/share/npm/bin
00:46 < Dennis> I think I'm close right?
00:51 < passcod> yeah, you just need to add that to your path. echo 'export PATH="$PATH:/usr/local/share/npm/bin"' >> ~/.bashrc ought to do it
00:55 < passcod> btw, on irc, people don't reply using the @nick thing. Just use 'nick:' most IRC clients will tab-complete that, too.
00:56 < Dennis> passcod: will do sorry about that. thanks for the heads up
00:56 < Dennis> -bash: export PATH="$PATH:/usr/local/share/npm/bin": No such file or directory
00:56 < passcod> O.o
00:56 < Dennis> O_o
00:56 < Incip> I made it back D:
00:56 < Incip> my client is still stuck in some crazy split
00:57 < Incip> I was just in a split with 200 other people
00:57 < Incip> .... and my client is in some 3rd split, but somehow still visible on this user list.  Bizarre.
00:58 < Dennis> I ran 'export PATH="$PATH:/usr/local/share/npm/bin"' >> ~/.bashrc just as you had
01:00 < passcod> ah, no
01:00 < passcod> the echo is part of it
01:01 < Dennis> LOL hahah ok that did it
01:02 < Dennis> node -v returns v0.10.3
01:02 < Dennis> npm -v returns 1.2.17
01:02 < passcod> awesome
01:02 < Dennis> boomtown
01:02 < Dennis> is there anything else I should double check on?
01:05 < gluxon> Hm.. pointing this question out there.
01:05 < gluxon> Did Node.js 0.10.3 break their packages in Ubuntu for anyone else?
01:06 < passcod> nope, that's it.
01:07 < Dennis> passcod: thank you thank you thank you. Is there a good source you rec for some of those commands you agve me to learn more about there powers?
01:07 < Dennis> that last one is clear above my head
01:07 < Dennis> sorry terrible spelling. Macbook air keyboard is too small for me
01:09 < passcod> Dennis: http://tldp.org/LDP/abs/html/part4.html for unix commands (the guide this chapter is from actually covers the entirety of bash and is written more for linux than os x, but there shouldn't be much difference at this stage)
01:09 < passcod> for IRC in general and freenode in particular: http://freenode.net/faq.shtml
01:09 < Dennis> passcod: cool! thanks again. really appreciate the help
01:09 < passcod> go forth and learn :)
01:09 < Dennis> passcod: will do sensai! \m/
01:09 < Dennis> or i mean sensei
01:09 < passcod> you do
01:09 < Dennis> or however you spell it
01:09 < passcod> and http://www.catb.org/jargon/html/index.html for good measure
01:12 < samholme_> what's karma on HN?
01:42 < asterick> zivester: yea, I use environment variables + command line override, and several objects in a module.
01:42 < passcod> zivester: I use env variables too, with file based overrides
01:42 < asterick> asadpakistani2: so long as you don't have two symetric NATs trying to connect to one another
01:42 < asterick> if you do, then you need a TURN server between them.
01:42 <@mbalho> IIRC udp tunneling works on ~80% of commercial routers
01:45 < samholme_> any1 drink arizonas?
01:45 < passcod> deoxxa: _was_ so so broken. I hope. :)
01:46 < owen1> i am playing with tape for testing (both browser and server tests). what is the difference between tape and other frameworks such as mocha?
01:46 < passcod> Incips: O.o really? Could it have something to do with the recent netsplit?
01:47 < passcod> Incip: the window on the right is something like an hour in the past O.o
01:59 < idletom> https://gist.github.com/anonymous/caaaceea846840f47409  can anyone help me with figuring out why this crashes with no res
02:32 < timw255> Is there a way to get Express to NEVER send a 304 and always re-send whatever it's asked for? I'm using it for a mobile API and it's possible the app will need to call multiple times (it doesn't cache...)
02:36 < mscdex> timw255: bad client!
02:36 < mspisars> anyone in here know anything about node-orm?
02:36 < timw255> mscdex: I know :/
02:40 < owen1> before installing node (from source), do i need to uninstall the previous version?
02:44 < samholmes> Here's what I never got. A load balancer takes incoming HTTP requests and sends them off to non-busy nodes to handle the requests, and gets the response back from the nodes. But isn't the load balancer a bottleneck? How can you scale any more than what the load balancer can handle?
02:51 < passcod> samholmes: the point is that forwarding the request takes very little resources, while processing it takes considerably more. There are other techniques to scale above that, such as using DNS, i think, but I'm not a sysadmin :)
02:51 < Havvy> DNS is a load balancer...
02:53 < samholmes> But can't a domain only point to one domain?
02:53 < passcod> Havvy: well, if you ever hit the upper limit of scaling using both DNS and HTTP load balancing, call me to the party, ok?
02:54 < Havvy> passcod: Okay.
02:54 < passcod> samholmes: err. no. you can have multiple A records on the same name
02:57 < samholmes> passcod: how do you know which A record to follow?
02:59 < passcod> samholmes: I have no idea. I kinda skipped the "Mechanics of DNS" chapter of my developer life. I just know you can.
02:59 < tjfontaine> samholmes: the thing resolving picks, your authoritative ns makes the policy on what order to return (sometimes with information from your application about how to select them)
02:59 < samholmes> So you could give an A record based on geography?
02:59 < tjfontaine> yes
03:00 < tjfontaine> for instance on oftc, we return the 3 least loaded servers nearest our best geo guess of your ip
03:00 < tjfontaine> your client then probably picks the first one of those
03:00 < passcod> and you could give the order in terms of which server is busiest?
03:00 < tjfontaine> (maybe if it fails to connect to that tries the next one in sequence)
03:01 < tjfontaine> passcod: we do that as well
03:01 < passcod> cool
03:01 < tjfontaine> those types of features require a bit more plumbing than a straight up bind service though
03:02 < samholmes> sounds complicated
03:02 < samholmes> must high someone for that then
03:02 < tjfontaine> generally simple round-robin policy is enough
03:03 < samholmes> However, each server would need to access the same database, so you'll need a way to scale that. Idek how mysql scales out.
03:04 < tjfontaine> your app requires mysql you mean?
03:07 < codepython777> on windows, whats the equivalent of these two commands: export NODE_PATH=`npm root`;jake -C ./build projectx
03:19 < codepython777> anyone here using node on windows?
03:23 < Incip> I am but I'm a newbie, so I could only answer newbie questions
03:23 < codepython777> I'm trying to use jake on windows
03:23 < codepython777> did you ever get to it?
03:24 < Incip> nope :D sry
03:27 < gluxon> codepython777: Jake specifically, or npm modules in general?
03:30 < codepython777> gluxon: I've a jake build thats not working for me on windows
03:38 < airportyh> hello all, is there any way to have an optional dependency in node?
03:43 < aMoniker> airportyh: if it's optional, it's not really a dependency, is ti?
03:47 < airportyh> aMoniker: in ruby it's pretty common
03:47 < airportyh> aMoniker: usually used in situations where a module can be configured to use a number of different implementations
03:48 < aMoniker> airportyh: it was a joke..
03:48 < airportyh> like different xml parser implementation or whatever
03:48 < auser> hey all
03:48 < passcod> airportyh: "optionalDependencies"
03:48 < auser> question… using node_redis, I'm seeing the error: EINPROGRESS with strace every once in a while
03:49 < auser> I'm using kue and redis
03:50 < owen1> i am playing with tape for testing (both browser and server tests). what is the difference between tape and other frameworks such as mocha?
03:50 < airportyh> passcod: thanks. but if I install a module it will still try to install all its optionalDependencies right? Don't think I want that for my use case
03:50 < auser> hm
03:50 < passcod> airportyh: yes. but it will tolerate failures.
03:51 < passcod> I've seen this done with "pluginDependencies"… I'll look through my bookmarks
03:52 < passcod> there: https://coderwall.com/p/rmosmg
03:53 < airportyh> passcod: ahh, thanks. will take a look
03:53 < airportyh> passcod: but I guess nothing in core
03:53 < passcod> nope
03:54 < timoxley> airportyh passcod  http://blog.nodejs.org/2013/02/07/undefined/
03:54 < passcod> wow cool
04:35 < rcombs> https://github.com/11rcombs/node-PLM <-- so, I made a lib for communicating with INSTEON (home automation) modems
05:00 < zivester> is there an easier way to say require('../../../../lib/something')... where lib is the root of my project?
05:02 < wraithgar> I've seen people do this: (require.main ? path.dirname(require.main.filename) : ".")
05:02 < substack> zivester: if you put code in node_modules then you can just require() it
05:03 < substack> so you could put code in node_modules/foo/index.js then require('foo')
05:03 < substack> and node will search recursively in every node_modules directory looking for foo up to /
05:03 < substack> stopping at the first one it finds
05:04 < substack> owen1: tape isn't a framework
05:04 < substack> you just run a file that does require('tape') with node
05:04 < substack> and tape writes its output to stdout
05:05 < substack> whereas something like mocha or jasmine pukes a bunch of globals into your test file's namespace
05:05 < substack> so that your tests will only run with the test framework's custom harness bin script
05:07 < passcod> substack: I have to admit, the tape readme is a bit confusing as it doesn't really explain what it does
05:07 < zivester> substack, is that OK to do? just moving my 'lib' into the root node_modules directory?
05:08 < zivester> "OK" meaning recommended..
05:11 < zivester> wraithgar, thats a nice little trick... didn't know require.main.filename
05:12 < wraithgar> yeah but as always substack is right node_modules is probably cleaner for you.
05:15 < rcombs> zivester: it's fine as long as you don't fsck up npm in the process
05:15 < zivester> yah.. i think I found a nice solution.. i can still have 'lib' in my root directory... and I'll symlink node_modules/lib to it... so I can do require('lib/db') and still have lib in the root of my project
05:16 < zivester> rcombs, any issue with what i just described? not sure how i could mess it up.. unless i used an npm module that was called 'lib'
05:19 < rcombs> zivester: I just meant to make sure your .npmignore and .gitignore don't have "node_modules", but do have "node_modules/<modules that aren't your libs>"
05:24 < zivester> ahh gotcha, yah ill just ignore everything but lib, tx
05:29 < owen1> substack: got it. so tape is a thin layer on top of node asserts?
05:43 < vrlogrs> hey guys
05:43 < vrlogrs> im trying to pgrep running node.js servers ..
05:43 < vrlogrs> doesnt seem to work ..
05:44 < vrlogrs> is there another way i can see if a node.js process is running?
05:44 < vrlogrs> if i have the process name
05:49 < s5fs> vrlogrs: how are you running pgrep?
05:49 < vrlogrs> s5fs: what do you mean? :S
05:49 < vrlogrs> just pgrep "server-checkers"
05:50 < s5fs> vrlogrs: oh, you're not runinng child_process.exec() or something to execute pgrep? you're just running pgrep from the shell?
05:50 < vrlogrs> yeah :S
05:51 < vrlogrs> is that wrong?
05:51 < s5fs> nah
05:51 < s5fs> i mean, i guess it depends what you want to do!
05:51 < vrlogrs> i just want to see if the process is running or not
05:52 < s5fs> pgrep node should return the pid
05:52 < vrlogrs> right ..
05:52 < vrlogrs> but, its not
05:52 < s5fs> but you see it in ps?
05:52 < s5fs> ps -ef|grep node
05:52 < vrlogrs> yep, if i do ps ux | grep 'server-checkers'
05:52 < s5fs> wait
05:53 < s5fs> do you see both the 'server-checkers' process and your grep proces?
05:53 < vrlogrs> yeah
05:53 < s5fs> okay just being double sure haha
05:53 < s5fs> ps ux|grep 'server-checkers'
05:53 < s5fs> whoops haha
05:56 < vrlogrs> so ..
05:56 < vrlogrs> any suggestions?
05:56 < s5fs> does pgrep work for any other processes?
05:56 < vrlogrs> yeah
05:56 < vrlogrs> i can do pgrep 'bash'
05:56 < s5fs> i don't know. "works for me" and all that
05:57 < vrlogrs> great :(
05:59 < s5fs> vrlogrs: well, i guess you could just do something like
05:59 < s5fs> ps ux|grep 'server-checkers'|awk '{print $x}'  where x is whatever column the pid is
06:00 < s5fs> use whatever works i guess
06:00 < vrlogrs> but grep will return 2 results, including the grep process
06:00 < s5fs> yeah, gotta ignore that haha
06:01 < vrlogrs> wow, it worked with pgrep -f "server-checkers'
06:01 < _youjelly> I am having a problem with web sockets, basically I want the socket connection to be established only if the user authenticates, I'm using socket.io
06:01 < _youjelly> is there any way I coud send some data while the connection is being established
06:01 < _youjelly> I've looked at this and I don't really understand how sessions would help
06:01 < _youjelly> http://www.danielbaulig.de/socket-ioexpress/
06:01 < s5fs> vrlogrs: weird, what os are you on?
06:01 < vrlogrs> debian
06:02 < s5fs> vrlogrs: i'm on ubuntu
06:02 < s5fs> beats me
06:02 < vrlogrs> me too
06:02 < vrlogrs> whatever, it works now
06:02 < vrlogrs> thanks anyways
06:02 < s5fs> vrlogrs: np
06:03 < _youjelly> I am having a problem with web sockets, basically I want the socket connection to be established only if the user authenticates with a username/password, I'm using socket.io
06:35 < ningu> boatcoins -- currency of the open sea
06:45 < AnthonyCat> How can I delete all my globally installed nom modules?
06:46 < gkatsev> eat them.
06:46 < gkatsev> :P
06:47 < AnthonyCat> :)
06:48 < AnthonyCat> Can I just delete the files in /usr/local/lib/node_modules/?
06:48 < gkatsev> AnthonyCat: npm remove -g module
06:48 < gildean> AnthonyCat: npm remove modulename -g
06:48 < gkatsev> gildean: :P
06:49 < ningu> let's have an argument about where to put the -g
06:49 < gkatsev> ningu: haha, my :P was for beating him to the punch
06:49 < AnthonyCat> thanks gkatsev. I'll just do them all
06:50 < ningu> AnthonyCat: anyway, if you want to delete *all* of them then just delete the directories in node_modules, yes
06:50 < ningu> that's all that npm uninstall will do
06:50 < AnthonyCat> ok.
06:50 < gkatsev> more or less
06:54 < ningu> http://www.intrade.com/v4/home/
07:14 < BadDesign> hmm, I have a strage problem with npm
07:14 < BadDesign> *strange
07:15 < BadDesign> Whenever I try to install a module globally with `sudo npm install -g modulename` it all goes well... but if I try to run `node mycode.js ` it says it can't find that module I *just installed*, any way I can find out why is this the case ?
07:17 < gildean> BadDesign: maybe you shouldn't be installing the module globally?
07:17 < BadDesign> I *want* it globally... I hate installing that module for every project I create
07:18 < BadDesign> If I install it locally of course it works but why the heck node not finding the global module
07:18 < BadDesign> *is not
07:18 < gildean> then i think you need to install it globally to your home-directory, not to the system-wide node_modules
07:18 < lovek323> BadDesign: what OS?
07:19 < BadDesign> Ubuntu 12.10 x86-64 with latest stable Node
07:19 < BadDesign> *KUbuntu
07:19 < lovek323> you can add ./node_modules/.bin to your PATH so that if you're in the root directory of a node project, you'll get access to the binaries
07:26 < ningu> BadDesign: I can load modules installed globally just fine
07:27 < ningu> BadDesign: you may need to set your NODE_PATH environment variable
07:28 < BadDesign> ningu: ok, will look into it... that is monday when I go back to work :)
08:22 < deoxxa> hi there everybody, this is a public service announcement! i just pushed new versions of my binary parsing/serialising modules, https://github.com/deoxxa/dissolve and https://github.com/deoxxa/concentrate, updating dissolve to use node 0.10's stream API and adding a streaming interface to concentrate. i'd be interested to know what people think of the second example at https://github.com/deoxxa/concentrate#usage - thanks!
08:24 < yawnt> deoxxa: booo spammer
08:24 < deoxxa> yawnt: more like "yay spammer"
08:24 < yawnt> lookin :D
08:24 < deoxxa> :D
08:24 < deoxxa> yawnt: i think you were actually there for the conversation that inspired the streaming stuff there in concentrate!
08:25 < yawnt> yep i was
08:25 < deoxxa> when we went to that underground place after the conference
08:25 < deoxxa> hehe
08:25 < deoxxa> that was a nice place with its secret room
08:25 < yawnt> this is sound of the undergrouuuuud
08:26 < yawnt> http://www.youtube.com/watch?v=WeC0v9YPYIo
08:26 < yawnt> deoxxa: so like, how are utf8 and co implemented?
08:27 < deoxxa> using Buffer(string, encoding)
08:27 < yawnt> are they functions that internally us stream.write?
08:27 < yawnt> or is it just a readable stream?
08:27  * yawnt too lazy to check code
08:27 < deoxxa> they use Readable.push()
08:27 < deoxxa> which is internal
08:27 < deoxxa> but like
08:27 < deoxxa> they don't do it themselves
08:27 < yawnt> mkay+
08:27 < deoxxa> in concentrate, all the stuff gets put into a job list
08:27 < deoxxa> then when you call .result() or .flush(), that list gets compiled to a buffer
08:27 < deoxxa> and is either returned or used in .push()
08:28 < deoxxa> creating a ton of buffers is kind of slow
08:28 < deoxxa> so it tries to defer as much of that work as possible
08:28 < yawnt> looks good imo
08:28 < deoxxa> woooooo
08:28 < yawnt> except you have no tests
08:29 < yawnt> damn you
08:29 < deoxxa> i do in dissolve
08:29 < deoxxa> 108 tests to be exact
08:29 < deoxxa> though 104 of them are just integer sanity tests
08:29 < deoxxa> haha
08:29 < yawnt> rly
08:29 < unr3al011> is it possible to achieve a use of nearly all of my bandwith when running http.request in a loop? 
08:29 < yawnt> lol
08:30 < yawnt> deoxxa: so like, when are you going to start working on jsmc again?
08:30 < deoxxa> unr3al011: probably! are you waiting for them to finish before you start more?
08:30 < unr3al011> i do not know which is best
08:30 < deoxxa> yawnt: i'm not sure - the codebase bugs me... i might have to reboot it partially
08:30 < unr3al011> actually i am getting about 20% of my bandwith as a maximum
08:30 < unr3al011> i cannot increase it anymore
08:31 < deoxxa> unr3al011: 1) paste code 2) ??? 3) profit
08:31 < unr3al011> pastie.org/private/jwtdv1j7tphklg8fel3w#21
08:31 < yawnt> deoxxa: let's do a MMORPG on minecraf
08:31 < yawnt> based on jsmc
08:31 < yawnt> :>
08:31 < deoxxa> yawnt: i kind of want to do an MMO of ecco the dolphin
08:31 < deoxxa> like an infinite side-scroller
08:31 < yawnt> deoxxa: it'd be lame
08:31 < yawnt> you just have one class
08:31 < deoxxa> no way
08:31 < yawnt> "dolphin"
08:31 < deoxxa> ha
08:32 < yawnt> lol
08:32 < deoxxa> i already have a dolphin class - https://github.com/naomik/sonarjs/blob/master/lib/dolphin.js
08:33 < yawnt> i wish so badly js had trailing if/unless
08:34 < deoxxa> http://resource.mmgn.com/Gallery/full/Ecco-The-Dolphin-CL7J.jpg i'd play this
08:34 < yawnt> deoxxa: observe the dolphin
08:34 < yawnt> study the dolphin
08:34 < yawnt> BE the dolphin
08:35 < deoxxa> i am what i eat
08:35 < yawnt> deoxxa: kangaroos?
08:36 < unr3al011> mh....
08:39 < deoxxa> unr3al011: sorry, got distracted, looking at your paste now since i asked for it and all :P
08:39 < unr3al011> :P thanks^
08:40 < deoxxa> unr3al011: you might be saturating your outgoing bandwidth - have you tried using something like async or queue to just do a small number (maybe 50?) at a time?
08:40 < unr3al011> no. i thought it was async?
08:40 < deoxxa> oh, i mean caolan/async on github (or async on npm)
08:41 < yawnt> deoxxa: distracted by kangaroos
08:41 < deoxxa> yawnt: a constant menace
08:41 < unr3al011> no. do you have a link to that?
08:41 < deoxxa> unr3al011: https://github.com/caolan/async
08:41 < DarkArgon> https://github.com/caolan/async
08:41 < DarkArgon> damn
08:41 < deoxxa> too slow!
08:41 < deoxxa> unr3al011: also https://github.com/mbostock/queue, for variety
08:42 < yawnt> i feel bad
08:42 < yawnt> i wanna read this
08:42 < yawnt> http://www-cs-faculty.stanford.edu/~uno/taocp.html
08:42 < yawnt> 4 volumes
08:42 < yawnt> 800 pages each
08:42 < yawnt> tell my children i loved them (cit. ASDFmovie)
08:45 < unr3al011> mhhh...
08:45 < unr3al011> i don't get the examples :D
08:48 < unr3al011> deoxxa:  which of all these async functions would fit best for my need?
08:48 < deoxxa> unr3al011: probably async.queue
08:50 < DarkArgon> unr3al011, what os do you run?
08:50 < unr3al011> can choose between windows 7 or debian 6
08:50 < DarkArgon> windows has socket limits
08:50 < unr3al011> debian too
08:51 < unr3al011> but i think i expanded them
08:51 < DarkArgon> debian running in a vm?
08:51 < unr3al011> yes
08:51 < unr3al011> so my windows limits apply?
08:51 < DarkArgon> the host pc counts
08:51 < unr3al011> mhhh
08:53 < unr3al011> and this will limit my bandwith?
08:54 < chakrit> Wondering why there is no `end` event for http.ServerResponse?
08:55 < deoxxa> chakrit: there should be - it's inherited from stream.Readable or http.IncomingMessage, i think
08:55 < deoxxa> chakrit: if you're talking about node 0.10, that is
08:56 < DarkArgon> i'm not a network admin. this is just a guess. but it seems that you try to do 10000+ requests at once. so the max sockets might limit you
08:57 < unr3al011> brb have to reboot, changed my socket limits
09:01 < unr3al011> increased my tcp limits on windows now
09:01 < unr3al011> but couldn get any improvement
09:04 < DarkArgon> wth do you even need 10.000+ connections at once?
09:06 < unr3al011> i do not need that much, but how shall i maximize my bandwith usage?
09:08 < chakrit> deoxxa: oh, i've totally forgotten about the inherit from Stream thing.
09:09 < DarkArgon> are you actually downloading stuff? i mean not just html pages?
09:09 < chakrit> deoxxa: it's actually a stream.Writable tho, but thanks for the pointer anyway : )
09:09 < chakrit> deoxxa: so i should've been using the `finish` event from stream.Writable instead of `end`
09:10 < deoxxa> chakrit: oh, ServerResponse. my bad!
09:10 < deoxxa> chakrit: i always get them mixed up, haha
09:15 < unr3al011> DarkArgon: just html
09:56 < ipetrovilya> Hi. I'm trying to understand how `bem-tools` work, so I'm digging in sources. I'm new to node and can't grasp what `_this.process(<object>)` stands for. Can you help me? Does it pertain to [ http://nodejs.org/api/process.html#process_process ]?
09:57 < chakrit> ipetrovilya: which line in bem-tools source?
09:57 < ipetrovilya> the code: [ https://github.com/bem/bem-tools/blob/dev/lib/make.js#L45 ]
10:01 < ipetrovilya> chakrit: there is `_this.findNode` invocation on line 36, so I'm inclined to think _this stands for object of class inhereted from APW and I should seek process definition in APW.
10:04 < ipetrovilya> chakrit:  fund it here [ https://github.com/bem/apw/blob/master/lib/apw.js#L33 ]. Thank you for your collaboration!
10:24 < taub> where is the package.json
10:24 < taub> trying to install socket.io-client, doing me head in
10:25 < DarkArgon> which package.json?
10:26 < taub> damned if i know
10:26 < taub> >Add socket.io-client to your package.json and then:
10:28 < DarkArgon> ah your own package.json. you probably don't have to do this step
10:28 < DarkArgon> but u can get one with npm init
10:30 < taub> ty, okay i dont think that was the error then
10:30 < asadpakistani> i am trying to deploy a nodeapp on aws with upstart...when i do "start appname" i get an unknown job error
10:30 < asadpakistani> I have appname.conf in /etc/init.d
10:33 < chxane> appname.conf should be in /etc/init/
10:33 < chxane> not init.d
10:34 < chxane> if you do ls /etc/init/ you should see other .conf files
10:44 < asadpakistani> chaxne: got it...thanks
10:44 < chxane> np
10:44 < asadpakistani> chaxne: so ssh scripts go in init.d and upstart confs go in init
10:45 < chxane> ssh scripts? you mean bash scripts?
10:45 < asadpakistani> chaxne: inspecting system files...it seems like upstart scripts can be written in bash or upstart format?
10:45 < asadpakistani> chaxne: yes bash scripts
10:45 < chxane> I think that is correct but I would check on it I don't write many bash scripts
10:45 < chxane> but I had to do an upstart one for a server I was running
10:45 < taub> > current socket.io-client is using an old version of engine.io-client, 0.4.0, try pointing package.json to the latest engine.io-client which is 0.4.3 as up today.
10:46 < taub> how do I go about doing that?
10:46 < chxane> so I know about that
10:46 < asadpakistani> chaxne: yeah they are alot more complex than the conf files
10:46 < asadpakistani> chaxne: u know how to bind a nodejs app to a port lower than 1024, without running it as root?
10:46 < chxane> no sorry
10:46 < asadpakistani> chaxne: k np...thanks a bunch...later
10:46 < chxane> np later
10:47 < asadpakistani> chaxne: do u have a webcam...i need to test my app...and everyones sleeping lol
10:47 < chxane> I am about to sleep myself lol
10:47 < asadpakistani> chaxne: haha k cool...gnite
10:47 < chxane> night
10:47 < asadpakistani> chaxne: i better hit the bed too..its almost morning
10:48 < asadpakistani> chaxne: night
10:48 < taub> I think i did it!
10:49 < DarkArgon> asadpakistani, iptables
10:51 < DarkArgon> http://serverfault.com/questions/268099/bind-to-ports-less-than-1024-without-root-access
11:13 < Industrial> Is there a guide besides the API docs on how to implement basic streams with 0.10 ?
11:15 < Industrial> https://github.com/substack/stream-handbook is yet to be updated :)
11:27 < Industrial> Anyone? :(
11:30 < Miezel> hello
11:30 < ashnur> Industrial: http://dailyjs.com/2013/04/01/streams-streams-streams/?utm_source=javascriptweekly&utm_medium=email
11:30 < ashnur> might help
11:32 < Industrial> thanks
11:52 < Industrial> Hmm this is weird. I have nodejs 0.10.2 and console.log(streams); only shows Stream (a la 0.8).
11:52 < Industrial> s/streams/require('stream')/
12:01 < ashnur> what do you expect to see?
12:02 < Industrial> nvm the repl says otherwise
12:02 < ashnur> =)
12:03 < Industrial> ashnur: it must have to do with that I use browserify then :S
12:04 < Industrial> https://gist.github.com/Industrial/f6331028f2078d4a7d6b trying to create a Readable stream out of hashChange and or popstate events
12:10 < Industrial> nvm reimplenting that
12:51 < whatdoesitmean> I know this is not the best channel to ask but can someone tell me what is his interpretation of this illustration? http://oi47.tinypic.com/29pb382.jpg Would be interesting to see if different people have similar interpretations
13:27 < shmoon> http://pastie.org/7337421 - if anyone does redis, what am i doing wrong?
14:06 < Industrial> if I navigate to / I get one window popstate event. If I then do a window.history.pushState(null, null, '/abc'); why does that not generate another window popstate event?
14:33 < nodenob> anyone can give me a hint? I have a redis client which is in another server, and i also some nverchanging data that needs to be shared  between two modules
14:33 < nodenob> so to get faster results i came up with this solution
14:33 < nodenob> https://gist.github.com/anonymous/5326273
14:34 < nodenob> is this a bad idea?
14:42 < RLa> nodenob, how you make sure you have no stale data?
14:43 < RLa> if that's not problem then why not
14:43 < nodenob> RLa: that data never change
14:44 < nodenob> and is instanciated only once during startuo
14:44 < nodenob> startup*
14:44 < Industrial> http://stackoverflow.com/questions/15852215/pushstate-does-not-generate-a-popstateevent
14:47 < nodenob> RLa stale data is data that is no longer needed?
15:04 < RLa> nodenob, no, wrong data because it changes but you have old copy in cache
15:06 < nodenob> ah, no that can't happen, that object never change
15:16 < MArko5> hello
15:16 < meiwes> hi
15:37 < masch> Hi guys. Does anyone know if theres a plan do implement Buffer#indexOf() in the near future? Since the API is stable...
15:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:40 < Chrendhor> hi does someone speak french here and can PM me plz
15:49 < unr3al011> can offer english & german @ Chrendhor
16:01 < boutell> Hi. 'forever' is forking additional copies of itself, which try to start redundant copies of my app, and fail, thus churning the CPU. This doesn't happen right away; it may be an hour or two until it starts happening. Meanwhile the original instance of 'forever' is still there and its child process, the app, is running just fine. Has anyone else seen this?
16:01 < boutell> unfortunately it looks to my host like node is CPU-wasting software, which is ironic since it's the opposite.
16:02 < boutell> I have verified that none of my scripts are starting new instances of 'forever'. (I log something in my script that runs forever.)
16:08 < boutell> AHA, I was overwriting the log, not appending to it, and it does actually say something happened 15 minutes ago. So my 'start' script *is* getting run. By something. Somehow. So not forever's fault. How odd.
16:19 < meiwes> hello 
16:20 < nanashiRei2> Hey guys. When i require a module and in the module there is a function call like myModule.setup() and then under that is module.exports = myModule
16:20 < nanashiRei2> Will that function be called over and over when i re-require that module?
16:20 <@isaacs> ircretary: tell pooya from time to time, yes.
16:20 < ircretary> isaacs: I'll be sure to tell pooya
16:20 < meiwes> does kue support single core processors
16:20 <@isaacs> nanashiRei2: by re-requiring?  no.  but if you export it, you can call it however many times you like.
16:20 <@isaacs> nanashiRei2: modules are singletons.
16:20 < drudge> meiwes: sure why not
16:21 < meiwes> drudge:i will check that detail out
16:22 < meiwes> drudge:I am straight from sidekiq
16:26 < nanashiRei2> isaacs: so i can safely have my app.js do a server.listen() and then still require it in submodules without it starting another listener?
16:27 < nanashiRei2> That would certainly explain some nuts an bolts logic to me here :D
16:27 < rcombs> nanashiRei2: requiring your module should never _do_ anything
16:27 < nanashiRei2> rcombs: it's the app.js... (Hint: node app.js)
16:27 < rcombs> nanashiRei2: you should either have your module.exports be a constructor function, or have a .init function
16:27 < rcombs> nanashiRei2: oh, then why are you requiring it?
16:28 < nanashiRei2> Well i seem not to grasp how i can have "globally available" things in my node app
16:28 < nanashiRei2> without global.variable = "bla"
16:29 < rcombs> nanashiRei2: generally, passing things to your submodules works
16:29 < gildean> nanashiRei2: you can require one module first, then pass it in to the next module when requiring
16:29 < nanashiRei2> Isn't there some sort of parent concept here?
16:29 < nanashiRei2> like what's in module.parent
16:30 < chapel> nanashiRei2: you can check if its required and have logic there
16:31 < chapel> nanashiRei2: or you can have a server.js file that requires app.js that does the listen
16:31 < chapel> so you separate the actions
16:31 < rcombs> nanashiRei2: module.parent be the module that required your module, and the main script that was run via `node script.js` is in require.main
16:31 < rcombs> but…
16:33 < nanashiRei2> rcombs: :o
16:33 < nanashiRei2> That could solve my problems
16:33 < nanashiRei2> Let me give that a try.
16:34 < rcombs> using those tends to happen in cases of weirdness
16:34 < nanashiRei2> i'll still have to do module.exports = server; or whatever i need to get from require.main right?
16:34 < nanashiRei2> Care to take a look if my app.js (.coffee... actually) makes sense?
16:35 < rcombs> module is like window in a browser
16:35 < nanashiRei2> https://gist.github.com/nanashiRei/29269da502c97b194d36
16:36 < rcombs> erm
16:36 < rcombs> I might be wrong there
16:36 < rcombs> ack, I don't grok coffeescript
16:36 < nanashiRei2> D:
16:36 < nanashiRei2> wait i'll compile it :D
16:37 < nanashiRei2> refresh the gist
16:37 < nanashiRei2> :)
16:37 < nanashiRei2> second file is compiled
16:38 < nanashiRei2> damn, gotta regenerate my bugsnag api key -_-
16:38 < nanashiRei2> whatever :P
16:39 < hemangpatel> Hello guys
16:39 < hemangpatel> I'm totally new to node.js
16:40 < hemangpatel> any tutorial or something ?
16:40 < hemangpatel> from basic.
16:40 < nanashiRei2> nodejs.org/api
16:41 < hemangpatel> nanashiRei2 : is it JS or framework ?
16:41 < nanashiRei2> it's a "framework". Kinda.
16:41 < gildean> hemangpatel: it is javascript, but not a framework
16:41 < nanashiRei2> Using JS
16:41 < hemangpatel> ok
16:41 < gildean> it's more of a platform
16:41 < gildean> than a framework
16:41 < rcombs> nanashiRei2: not sure what there needs to access the main module
16:41 < nanashiRei2> Lol, i always see it as a framework sort of thing ^^
16:42 < nanashiRei2> but you are right
16:42 < gildean> platform with standard libraries (or modules)
16:42 < nanashiRei2> rcombs, modules that'll define other routes from a plugin type of system
16:42 < nanashiRei2> or from a database
16:42 < nanashiRei2> that's why i export app.server
16:43 < rcombs> nanashiRei2: just make them constructors and pass in app in new PluginThing(app, otherOptions);
16:43 < boutell> there are frameworks built *in* node.js, but node.js itself is a platform, yes. A way of running javascript on servers, with plumbing specifically for network related activities and events.
16:44 < boutell> Express is an example of a (very light) framework built on top of node.js.
16:44 < nanashiRei2> The problem with that is: I always end up with "this" not being app when it should (lack of js experience)
16:44 < hemangpatel> is socket.io related to it ?
16:45 < nanashiRei2> boutell: thanks for the insight :)
16:45 < rcombs> nanashiRei2: when in all of that would you expect `this` to be app?
16:45 < nanashiRei2> in callbacks e.g.
16:46 < nanashiRei2> i work around that a lot with .bind()
16:46 < nanashiRei2> but that's kinda ugly
16:46 < boutell> hemangpatel: have you read about socket.io? These questions are a bit like walking into a hardware store and asking if trucks and light bulbs are related. Um, sure, in various ways, but it suggests you haven't done much reading on your own and should do that first.
16:46 < hemangpatel> boutell :) No, But i'm seeing http://java.dzone.com/articles/getting-started-socketio-and
16:47 < antitoxic> hello, is there a way to bump the version of a published package in npm? i've published a package, made some changes and I want to bump the version from 1.0.0 to 1.0.1
16:47 < boutell> antitoxic: edit package.json and do npm publish
16:47 < rcombs> antitoxic: just change the version in your package… ninja'd
16:48 < boutell> hemangpatel: I think that article is a pretty good answer to your question. Sure they are related, socket.io needs something to talk to. But it could be something other than node. web sockets is an open protocol, any server could implement it. And socket.io can run over fallback transports other than web sockets.
16:48 < hemangpatel> Will look into it. Thanks.
16:48 < antitoxic> ahh cool, ok i will try this right now
16:52 <@isaacs> nanashiRei2: Yes.
16:52 <@isaacs> nanashiRei2: they'll just get another cpy of the exports
16:53 < Metal3d> yop
16:53 < antitoxic> boutell: rcombs: Cannot publish over existing version. Update the 'version' field in package.json and try again. However I changed the version?
16:53 < Trieste> Hi, this is a very beginner question - if I define the routes as functions in different files and then require() them, how can they access some global variables of the server?
16:53 < rcombs> antitoxic: must've already published since you last changed
16:53 < boutell> antitoxic: go look in npm. I bet the currently released version is the version you're trying to publish after all.
16:54 < nanashiRei2> isaacs: :) thanks
16:54 < nanashiRei2> This actually makes me feel like an idiot :D
16:54 < nanashiRei2> Damn it.
16:54 < nanashiRei2> :D
16:58 < boutell> Trieste: that's a beginner question with advanced consequences (: I wrote a blog post about it. http://justjs.com/posts/singletons-in-node-js-modules-cannot-be-trusted-or-why-you-can-t-just-do-var-foo-require-baz-init
16:59 < boutell> basically: you should always pass the data that files need to share explicitly. Your main file should invoke a function in each other file that sets it up and passes in any shared data.
16:59 < antitoxic> rcombs: boutell: it seems that I haven't merged a tag into master. i don't know could that be but anyway. thank you :)
17:00 < boutell> although it is possible to see the same data just by requiring a file in common and relying on the fact that 'require' caches its first result for a filename and returns the same module.exports value for any subsequent 'requires' of the same file, this is a nasty thing to rely on, because pretty soon you'll be wondering why you get two totally different objects in two modules that both depend on a third module via npm
17:01 < boutell> basically: don't ever treat require's "caching" as a safe way of implementing singletons. Get used to passing context objects explicitly.
17:01 < boutell> it promotes better code anyway.
17:08 < antitoxic> rcombs: boutell: this is getting really annoying, master is now in sync, however https://npmjs.org/package/reversable-router is not. Showing version 1.0.0 and doesn't let me to publish the new one 
17:09 < boutell> antitoxic: I'm not sure npm is even looking at git, I think it's looking at your local directory and sending a tar ball or something, but I'm not sure.
17:09 < boutell> actually it must be git.
17:10 < boutell> because it respects ignores.
17:10 < boutell> and probably doesn't reimplement that, heh.
17:10 < rcombs> boutell: no, it uses a tarball
17:10 < rcombs> boutell: there's a separate .npmignore file
17:10 < antitoxic> why is it thinking i haven't changed the version
17:10 < boutell> rcombs: really. I didn't know that. So if you are packaging a sample app, let's say, you'd better .npmignore your password file or whatever.
17:10 < antitoxic> while i obviously had changed it
17:10 < rcombs> boutell: yep
17:11 < boutell> rcombs: good thing I don't use npm to package apps, only modules (:
17:11 < rcombs> antitoxic: can you gist the entire output of npm publish?
17:11 < antitoxic> yep
17:11 < antitoxic> givem e sec
17:13 < antitoxic> rcombs: boutell: https://gist.github.com/antitoxic/6fbe64f844569e206c71
17:13 < rcombs> antitoxic: can you bump it to 1.0.2 and try again?
17:17 < Trieste> boutell: see msg please :)
17:17 < antitoxic> rcombs: changed the package.json version and executed `npm publish` im getting another error: https://gist.github.com/antitoxic/6fbe64f844569e206c71
17:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:23 < antitoxic> rcombs: it is now saying im unauthorized where i am certainly logged in as `npm whoami` is returning antitoxic
17:30 < rcombs> rooouter?
17:31 < rcombs> antitoxic: also, that doesn't look like the entire output to me
17:31 < rcombs> antitoxic: also also also, that looks like a DNS resolver error. Are you behind a proxy or something?
17:33 < antitoxic> rcombs: sorry to bother i need to go, i had a few minutes and i thought having another go of bumping the version will be a bit more lucky but it seems i have some vm problems perhaps unrelated with npm, i need to investigate
17:33 < antitoxic> thanks for the help!
17:33 < rcombs> well he had plenty of problems
18:26 < Industrial> Is there a Node.JS equivalent of http://gitlab.org/ ?
18:34 < OliverJAsh> what's the consensus on using the new ES5 methods in Node.js for teams? avoid it until we can use it in the browser (less context switching)?
18:34 < ljharb> OliverJAsh: you can use them in the browser with es5 shim.
18:34 < ljharb> OliverJAsh: https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
18:35 < ljharb> you can use anything in there ^ totally safely.
18:35 < ljharb> other than "tape", what's everyone's favorite tap-compliant testing framework?
18:36 < ljharb> tjholowaychuk: is "should" tap-compliant?
18:36 < tjholowaychuk> ljharb it just throws
18:36 < tjholowaychuk> so anything that catches
18:36 < ljharb> hm, i'm not sure if that will work in testling or not
18:36 < tjholowaychuk> you wouldn't want to use should on the client anyway
18:37 < tjholowaychuk> unless you're only testing newer browsers
18:37 < ljharb> oh right, it requires es5
18:45 < rpcesar> If there is a better room to ask this question please let me know. I come from a jQuery background, and am trying to solve a problem using Promises. I have chosen node-promise to replace $.Deferred on the server side, and read the (poor, from what I could find) instructions on usage, but its simply not working as expected. I have tried both "when" and "all" , but in all circumstances my callback is called before the promises are res
18:46 < rpcesar> here is the code in question: http://pastebin.com/4eYHYJwA , its goal is to "find plugins" for the site.
18:46 < ljharb> rpcesar: "console.log(arguments)" isn't a function
18:47 < ljharb> rpcesar: you have to pass a function into "then". if you've used parens, you've already invoked the function
18:48 < rpcesar> crap, i didnt realize i hadnt wrapped that call in a function, ive been trying lots of things. however I am pretty sure the behavior is the same, ill correct it and retry to confirm
18:48 < ljharb> rpcesar: it won't be, cause console.log returns undefined.
18:49 < rpcesar> no, i mean i think that code has actually changed since the last time i tested it, i have been throwing all sorts of diagnostics around to try to figure out the issue, one sec
18:49 < wookiehangover> rpcesar: use something else
18:49 < wookiehangover> like Q
18:49 < wookiehangover> or underscore.deferred
18:50 < wookiehangover> (the latter had parity with $.deferred)
18:50 <@mbalho> rpcesar: i rewrote it using vanilla.js http://pastebin.com/xZH18Pzf
18:50 < ljharb> Q is good
18:50 <@mbalho> vanilla.js has a control flow abstraction called a counter that uses the -- and === operators :)
18:50 < rpcesar> ive heard all those mentioned, i also noticed node-promised recommended promise-io, but node-promise had newer commits
18:51 < rpcesar> my primary usage for deferreds come to dependency resolution
18:53 < rpcesar> so in jquery $.when.apply() was my friend for passing load lists, is the underscore varient a better option. fyi, it did seem to work after making that change, i was a bit closer then i thought, thanks for the quick bug spot
18:53 < chapel> rpcesar: one thing, node.js has native map
18:53 < chapel> Array.prototype.map
18:53 < chapel> so you can do files.map
18:53 < chapel> no need for underscore.map
18:53 < ljharb> yes, do that.
18:53 < rpcesar> underscore defers to native though if available doesent it?
18:54 < ljharb> don't use underscore when a native function exists.
18:54 < ljharb> it's still an unnecessary layer of abstraction
18:54 < chapel> rpcesar: but in the context of node, its always available
18:54 < HankHendrix> good evening all
18:55 < HankHendrix> (and afternoon to the West!)
18:55 < rpcesar> true, the reason I have a habbit of doing that is because I generally create view composition objects that run on both the server and client side. its not the case in this exact point in time, but its become habbit
18:55 < _marvin_> hi
18:55 < HankHendrix> does anyone have any good prize suggestions for a Node.JS user group competition?
18:55 < ljharb> rpcesar: use the ES5 shim on the client side.
18:56 < wookiehangover> ljharb: unless you're using lodash, then it's methods are faster ;)
18:56 < ljharb> only if you're running them thousands of times.
18:57 < ljharb> cleaner code > > > > performance, almost always.
18:57 < wookiehangover> like in an event loop in a high-trafficked web server?
18:58 < rpcesar> so the recommendation is to use an ES5 shim instead of underscore? recommendation?
18:59 < rpcesar> is this a library of some sort? some sort of prototypical monkey patch?
18:59 < rpcesar> (the only shims I am aware of, involved placing an iframe underneath an object on a DOM to get around some sticky z-index issues with older browsers client side, or support things like svg across the board)
18:59 < ljharb> rpcesar: that's my recommendation.
19:00 < ljharb> rpcesar: use this one only https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
19:00 <@mbalho> i recommend not using any external libraries for simple problems like callback aggregation
19:00 <@mbalho> promises shine in certain situations but they arent a cureall
19:00 < ljharb> i'd replace "certain" with "most"
19:00 < rpcesar> yea, i only use them for those "certain situations"
19:01 < ljharb> but sure.
19:01  * wookiehangover admires ljharb's ivory tower
19:01 < wookiehangover> use what's practical and what makes sense to you
19:01 < rpcesar> so does this mean i can pretty much get rid of underscore from the stack then? im not sure what problems it solves which are not simply "es5 standardization"
19:01 < wookiehangover> if you like promises and used to $.deferred, use em
19:02 < wookiehangover> rpcesar: it give you some extra sugar for stuff
19:02 < chapel> the only time I've used promises are in cases where I wasn't trying to do anything tricky, but handle a lot of similar code in a cleaner way, like using mongoose's built in promises and express.js (with a middleware that will handle the promises before rendering)
19:02 < wookiehangover> but really you should be using lodash instead
19:02 < ljharb> rpcesar: yup, i don't see why you need underscore or lodash, personally.
19:03 < chapel> and those times, I didn't actually come to that solution, someone else did at the company, and we just continued to it
19:03 < rpcesar> the three things (server side) i use underscore for currently is their _.map, _.reduce, and most importantly _.extend
19:03 < wookiehangover> I use underscore/lodash in node for things that are a pain to do without it it
19:03 < rpcesar> if there is a better-faster-stronger way to do that, id love to know
19:03 < wookiehangover> _.pick, _.omit, _.throttle
19:03 < ljharb> rpcesar: extend is useful. map/reduce, you should use the native ones.
19:03 < rpcesar> what is this deal with lodash
19:03 < chapel> rpcesar: well, map and reduce are native
19:03 < chapel> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce
19:04 < rpcesar> browser side I use _.delay as well as the one which keeps resetting the event
19:04 < rpcesar> browser side i wont be able to eliminate underscore, since i use backbone
19:04 < wookiehangover> lodash is a fork of underscore that's optimized for better perf in all environments
19:04 < rpcesar> does it require a custom node buid?
19:04 < wookiehangover> no
19:05 < rpcesar> its just the first time i have heard of that
19:05 < wookiehangover> well know you know
19:05 < wookiehangover> http://lodash.com/
19:05 < rpcesar> yea, I googled it. is this pretty much the "community fav" right now?
19:05 < rpcesar> are there any cons to the switch i should be aware of?
19:05 < ljharb> rpcesar: that's true. but you can still minimize it's use. also yes, you can sub in lodash into backbone
19:06 < wookiehangover> this is helpful too http://kitcambridge.be/blog/say-hello-to-lo-dash/
19:06 < chapel> eh, I think the whole underscore vs lodash thing is played out
19:07 <@mbalho> rpcesar: serious question, what is your opinion on the readability of http://pastebin.com/4eYHYJwA vs http://pastebin.com/xZH18Pzf
19:07 < chapel> the speed advantage is probably not noticeable and only comes up in contrived benchmarks
19:07 < wookiehangover> mbalho: well the first one isn't returning early
19:07 < ljharb> chapel: "speed advantage" is almost never noticeable.
19:08 < wookiehangover> so I think that the comparison is showing your bias, but its whatevs
19:09 < rpcesar> @mbalho, that replicates the feature, but it doesent quite solve the actual problem I think. after that section of logic, it then needs to reduce the list based on whether its a folder or not (to only load folders), and perform a few other iterative features
19:09 < ljharb> using an integer flag feels really brittle to me
19:09 < rpcesar> so its not really just a matter of logging items, that was indicitive of what i was trying to do
19:09 <@mbalho> ljharb: 'integer flag' meaning a counter?
19:10 < chapel> mbalho: that code isn't right, v isn't defined in fs.lstat(v, ...
19:10 < rpcesar> clever though
19:10 < ljharb> mbalho: yes, a counter
19:10 < ljharb> also, a counter doesn't handle failures. a promise would.
19:10 < chapel> there are a lot of ways to handle that logic, promise isn't bullet proof
19:10 < chapel> but a counter is pretty brittle as well
19:11 <@mbalho> chapel: ahh yea i think there is a missing .map
19:11 <@mbalho> how is a counter brittle?
19:11 < rpcesar> time something to run "after" all of those items are done
19:12 < rpcesar> you do it within the closure i suppose
19:12 <@mbalho> rpcesar: to do that i would wrap the entire thing in a function that takes a callback as an argument and runs the callback in place of the console.log
19:12 < rpcesar> however i really don't find that as readable as promises which can have added items after the fact
19:12 < ljharb> mbalho: if you make a mistake, ie off by one in either direction, it can be very hard to debug. in addition, it assumes there's only one "result type" of something - ie, no success vs failure
19:13 < rpcesar> my big usage for promises is that i can toggle logic conditionally to run after a promise based on something that has not yet completed
19:13 <@mbalho> ljharb: callback(err, data) is two result types, though callbacks arent used in this example since it was just console.logging in the original
19:13 < wookiehangover> fuck it, just write it in Perl
19:13 < wookiehangover> its like 1 line
19:13 < Industrial> Is there a package that lets you easily create watching scripts that execute arbitrary functions when a file gets added, removed or changed recursively in a directory?
19:13 < rpcesar> lol
19:14 <@mbalho> or a ruby dsl with optimally readable syntax
19:14 <@mbalho> Industrial: fs.watch is in node core, but it sucks on OS X cause OS X sucks
19:14 < ljharb> mbalho: oh totally, node-style callbacks do have both success and failure. i'm not impugning that design. but having to always write "if (err) { do something }", rather than split it into two functions, gets very tiring
19:14 <@mbalho> ljharb: haha i find writing two functions tiring, to each their own :)
19:15 < ljharb> :-p
19:15 < Industrial> mbalho: it emits for all those cases and recursively?
19:15 < fayimora> guys i have a simple node js program using mongodb via mongoose. How do I access the db outside the program? like via the mongo REPL
19:15 < wookiehangover> fayimora: `mongo`
19:15 < ljharb> mbalho: it'd be awesome if the convention became "accept a node-style callback, and return a promise" so that both models would be fully supported.
19:15 < wookiehangover> fayimora: more infoz here http://www.mongodb.org/ or at your local library
19:15 < chapel> rpcesar mbalho http://pastebin.com/FwnWpDh3
19:16 <@mbalho> hehe
19:16 <@mbalho> nice 
19:16 < fayimora> wookiehangover: tried that, `db` only shows "test"
19:16 <@mbalho> Industrial: ah so the recursive part isnt part of node core, you have to pass a list of filenames to watch
19:17 <@mbalho> Industrial: in my experience modules that try to do that are buggy in large directories
19:17 < Industrial> I want to automatically browserify, that's all.
19:17 <@mbalho> Industrial: use npm install beefy instead
19:17 < Industrial> and I have custom browserify (with a plugin to shim commonjs modules) code, so I can't use the cmdline browserify program.
19:18 <@mbalho> Industrial: you cant write a browserify v2 transform that does that?
19:18 < Industrial> s/commonjs/global exporting (like jquery)/
19:18 < rpcesar> chapel, what is that async your mapping over
19:18 < chapel> rpcesar: async.js
19:18 < Industrial> mbalho: I'm using https://github.com/thlorenz/browserify-shim
19:18 < chapel> https://github.com/caolan/async
19:18 < wookiehangover> fayimora: they have an irc room
19:18 < rpcesar> god damn there are too many options
19:18 < Industrial> for jquery and bootstrap
19:18 < chapel> rpcesar: lol, not really
19:19 < chapel> rpcesar: I guess Im used to stuff now, I've been using node since before npm was the defacto module system
19:20 < rcombs> Can I use emitter.removeListener(name, listener); when it was added with emitter.once(name, listener);?
19:20 < rpcesar> i actually like that asynchronous map (if im reading that right)s 
19:20 < wookiehangover> whoa, we've got a big shot in here
19:20 < rcombs> I'm trying to do timeouts
19:20 < rpcesar> thats alright, i need to wrap my hand around where things are going with this.
19:20 <@mbalho> Industrial: hmm i havent used that, you should ask the author if it can be used as a transform which looks like `browserify -t dosomething foo.js`
19:20 < rcombs> if not, I suppose I could roll my own .once()
19:20 < rpcesar> i just wish there was a "best", at least 
19:20 < chapel> rpcesar: async is very simple once you grep its style
19:20 < rpcesar> "best for this problem"
19:21 < chapel> its callback focused
19:21 < chapel> and works similar to native map/filter and so on
19:21 < chapel> has parallel/serial as well for flow control
19:21 < rpcesar> chapel, it seems simple enough
19:21 < rpcesar> not sure if it solves all the same problem sets i use deferreds for though
19:21 < Industrial> mbalho: how would you browserify jquery and bootstrap?
19:22 <@mbalho> Industrial: also with beefy you can specify a browserify command to use
19:22 <@mbalho> Industrial: hmm good question
19:22 < rpcesar> im also using some really tricky multi-server requests at times. broadcasting out queries to a number of servers at the same time, and responding to them when certain load orders have been complete.
19:22 < chapel> rpcesar: well, my experience with defer is to put the function in the next stack
19:22 < rpcesar> and those happen in the router so speed IS important
19:23 < chapel> rpcesar: well in most cases, deferring in node.js is not useful
19:23 < chapel> so it doesn't really translate directly
19:24 < rpcesar> I havent found that to be the case with javascript , so what makes it different?
19:24 < rpcesar> *browser based javascript
19:24 < chapel> promises aren't really analogous to deferring either, it is more of precomposing functions to be called in more versatile ways
19:24 < rpcesar> the ability to use $.when.apply().then() and solve sticky dependency situations
19:25 < chapel> that is really a promise
19:25 < chapel> var promise = $.when.apply(fn); promise.then(fn)
19:25 < rpcesar> a promise is a promise of resolution, a deferreds , to my knowledge, is a construct which returns a promise (though its not needed) which deals mostly with property visibility and access control
19:26 < wookiehangover> property visibility?
19:26 < chapel> http://underscorejs.org/#defer << much different than a promise
19:26 < wookiehangover> lol "defer" vs "deferred"
19:27 < chapel> but jquery defer is more of a promise
19:27 < wookiehangover> deferreds are promises u guize
19:27 < chapel> lol
19:27 < wookiehangover> its jquery's implementation of promises a
19:27 < rpcesar> my usage with jquery was something along the lines of $when.apply($, [$s1,$s2,$s3]).then() when.apply($, [$s1, $s4]).then
19:27 < wookiehangover> ffs
19:27 < wookiehangover> rpcesar: again, do what feels right
19:27 < wookiehangover> believe in yourself, and you can achieve anything
19:27 < ljharb> https://gist.github.com/3889970 is a great rant about promises
19:28 < wookiehangover> "use the force, harry" - Gandalf
19:28 < chapel> rpcesar: its my mistake, I was mixing underscore.defer with jquery deferred or whatever
19:30 < rk88> Can anyone explain me what they mean by code sharing between server and client side? I understand that with node.js it's easier to write code for both parts since it's all javascript but, I have always been told that it's not good to expose server stuff to the client.
19:30 < rpcesar> ok, so lets see if I learned anything here. The general concensious is to say goodbye to underscore, replace with lo-dash, use native varients whenever possible and stop industrializing the usage of these normalization libraries in server side code.
19:30 < rpcesar> and everyone has their own favorite regarding a promise() solution, so its impossible to get a good recommendation in that arena :)
19:31 < chapel> rpcesar: consensus is don't use _ or lo-dash serverside
19:31 < rpcesar> does that about sum it up?
19:31 < rpcesar> last sentance covered that chapel
19:31 < chapel> yeah, just not very clear
19:32 < chapel> also, lo-dash vs underscore seems like a waste of time, pick what you like, if underscore works, use it
19:33 < wookiehangover> chapel: I would argue that its not consensus to avoid _ on the server
19:33 < notmypudding> I'm getting an error that states "command not found: nodemon"  Any thoughts on this?  I've been plugging away at it for the last few hours and I feel like I'm making it worse.
19:34 < chapel> wookiehangover: you were the only one to say otherwise :P
19:34 < rk88> notmyputting: try node nodemon?
19:34 < wookiehangover> it gives you a lot more than just map, reduce and forEach
19:34 < wookiehangover> https://npmjs.org/package/lodash
19:34 < chapel> wookiehangover: rpcesar had it right, use native, and if its something like pick or similar with nothing native then go for it
19:34 < wookiehangover> 318 dependenies
19:34 < wookiehangover> totally
19:34 < wookiehangover> https://npmjs.org/package/underscore
19:34 < wookiehangover> and over 1000 for underscore
19:35 < chapel> of over how many modules?
19:35 < chapel> tens of thousands?
19:35 < wookiehangover> that's still 3% of modules
19:36 < wookiehangover> oh actually the underscore number is wrong
19:36 < wookiehangover> its 2618
19:36 < wookiehangover> but yes, rpcesar had it write
19:36 < notmypudding> rk88: This is what I get 
19:36 < notmypudding> https://gist.github.com/anonymous/6f2ed225adee0af792bc
19:37 < notmypudding> I just started playing with this...I feel like I'm missing a fundamental concept
19:39 < gluxon> notmypudding: What is it you're trying to do?
19:41 < rpcesar> what is the "native" version of extend in node, or is there one? Is Object.create() what people use for that?
19:44 < mscdex> rpcesar: require('util').inherits for things with explicit prototypes, otherwise a for-loop?
19:44 < ljharb> use Object.keys().forEach instead of a for loop
19:44 < ljharb> cause you don't want to be iterating over the prototype
19:44 < rpcesar> seems way more complex then _.extend
19:45 < rpcesar> whats wrong with Object.create(proto, { /* extend with */ }) ?
19:46 < ddod> hey guys, I was wondering if any of you had any thoughts on using ajax over socket.io for a chatroom. i'm debating about what to use
19:46 < wookiehangover> extending a prototype is different than extending an object
19:46 < wookiehangover> and the extending items wouldn't pass hasOwnProperty checks
19:46 < rpcesar> "Creates a new object with the specified prototype object and properties.
19:46 < wookiehangover> or show up in Object.keys, like ljharb said
19:46 < rpcesar> first item is prototype, second item is properties
19:47 < rpcesar> those properties wont show up in hasOwnProperty?
19:47 < wookiehangover> no, only the prototype stuff
19:47 < wookiehangover> do whatever works for you
19:47 < rpcesar> im simply trying to "correct any misconceptions" i have , and improve my abilities in the language
19:48 < ljharb> wookiehangover: you keep saying that, but that presumes that nobody else has run into problems that their advice solves
19:48 < ljharb> wookiehangover: "best practices" are a real thing.
19:49 < rpcesar> i can always find a solution that works, but i want to fully understand "the state of things" before I consider pushing node at a commercial level.
19:49 < ddod> so any thoughts on using ajax for chat? would there be a noticeable difference in performance or bandwidth using it instead of sockets?
19:50 < rpcesar> and yes, this is about best practices for me. i want to know the rules before I start breaking them, and I don't want to assume that just because I did it that way in DOM, its the best in node, etc
19:50 < rpcesar> ddod , the answer is yes, you will notice a latency difference
19:50 < cracken> polling
19:50 < ddod> rpcesar, as in it's worse to use ajax?
19:50 < cracken> vs callback
19:50 < rpcesar> websockets do not have the same per-request overhead that normal requests or long polling have
19:50 < cracken> polling always use more resources
19:50 < ddod> yeah that's what I thought
19:51 < rpcesar> yes, long polling (or any ajax like solution) is going to have more overhead then websockets
19:51 < Industrial> Anyone got bootstrap and jquery running on browserify?
19:51 < ddod> all right, thanks, i'll go with sockets then
19:51 < rpcesar> however things like socket.io also wrap that behavior and normalize it, so you can get the best of both worlds in most cases
19:51 < chapel> ddod: socket.io also falls back to polling if websockets aren't supported
19:51 < chapel> what rpcesar said
19:52 < chapel> rpcesar: tbh for commercial purposes, code doesn't matter, writing with callbacks or promises won't make a company more money, though if a team doesn't reach a consensus then they could waste money stepping on each others toes
19:53 < wookiehangover> ljharb: a certain amount of learning is hearing good advice, ignoring it, and learning the hard way
19:54 < ljharb> wookiehangover: sure, but there's no need to reinvent the wheel. progress means not having to repeat your predecessor's mistakes.
19:55 < chapel> wookiehangover: I think learning is hearing advice, and then learning by doing + reading code
19:55 < chapel> not specifically ignoring it
19:56 < chapel> I may hear about something that solves my exact problem, but I don't automatically use it, I research a little (read code/examples/issues if any) and then I know if its a real solution for me
19:56 < chapel> but I also, dont just ignore it because I know I can do it myself
19:57 < wookiehangover> I only learning by consuming people and absorbing their knowledge
19:57 < wookiehangover> but, ya know, to each their own
20:03 < rads> I want to parse some XML documents and make them easily searchable
20:04 < ningu> so use an xml parser
20:04 < ningu> :)
20:04 < rads> sorry, still typing :)
20:04 < rads> I'm wondering if anyone has suggestions for a simple way to index that data and search it
20:04 < Industrial> Anyone building an All-In-One-Page app with browserify? what are you using?
20:04 < rads> I could just do MySQL like I know already but I'm up to try something new if there's something cool
20:05 < rads> small amount of rows, so features/ease of use are most importnat
20:05 < ningu> rads: solr?
20:05 < substack> Industrial: http://npmjs.org/package/single-page
20:05 < ningu> if it's all about indexing and searching I would use solr
20:05 < lacrymology> I want to wrap the 'publish' and the 'subscribe' methods in https://github.com/mranney/node_redis/ so I can send JSON objects directly, so to call JSON.stringify and JSON.parse in the middle of the pipeline
20:05 < lacrymology> how does one do that?
20:06 < lacrymology> like, call "super" or something similar?
20:06 < ningu> substack: btw the issue with gutter turned out to be my own stupidity in not implementing _read on my stream -- but I'm going to suggest that the error message for that be more intelligible :P
20:06 < rads> ningu: I'm parsing my itunes library and searching it
20:06 < chapel> elasticsearch is very easy to use for searching
20:06 < ningu> ah yes, elasticsearch as well
20:06 < rads> I'd say ease of use is #1 priority atm
20:06 < chapel> rads: I recommend elasticsearch
20:07 < rads> cool, thank you
20:07 < chapel> it is easy to get started but has a lot of flexibility and advanced features
20:07 < rads> I looked at it before but I forgot about it
20:07 < ningu> lacrymology: I would probably just define my own methods like publishJson or whatever
20:07 < ningu> lacrymology: otherwise you have to monkeypatch it which would work too
20:09 < lacrymology> ningu: well, if there's a way to explicitly calling the parent's method, I can do client.publish = function(chan, obj) { msg = JSON.stringify(obj); parent_subscribe(chan, msg)})
20:09 < lacrymology> I mean
20:09 < lacrymology> parent.publsh
20:09 < lacrymology> ningu: of course,naming my method differently is a "simpler" solution
20:10 < ningu> lacrymology: just save the parent function in a variable before you redefine it
20:10 < lacrymology> ah
20:10 < lacrymology> of course
20:10 < ningu> there might be a more elegant way but not that I know of
20:11 < ningu> if it's a prototype method you can probably just do this.prototype.publish(...)
20:12 < chapel> I wouldn't mess with node redis directly
20:12 < chapel> just write a publish wrapper
20:13 < chapel> e.g. mylib.publish = function(chan, obj) { var msg = JSON.stringify(obj); redis.publish(chan, msg) }
20:14 < ningu> chapel: yeah I probably would do it that way too but I've done it his way occasionally in the past for similar things
20:14 < ningu> but I usually define my own methods rather than redefining
20:14 < ningu> cause I don't know who else might be calling those methods
20:15 < chapel> ningu: sure I have as well, but I also researched the library, and had more reason to do it other than convenience, e.g. I wanted to add functionality to the library and it used that function regularly
20:15 < chapel> ningu: exactly
20:15 < chapel> unintended repercussions
20:15 < lacrymology> chapel: I'm new at any serious JS development and I don't know the patterns yet, but I need the user to be able to handle the client object to send any number of commands
20:16 < chapel> what is the client object?
20:16 < lacrymology> and I just want to override this
20:16 < lacrymology> chapel: you use redis like: client = redis.createClient() ; client.publish(channel, message)
20:17 < chapel> lacrymology: well the point is to not alter node_redis directly, but to call it within your custom functions you define in your code
20:17 < lacrymology> chapel: or client.on('message', function(chan, msg){}); client.subscribe(channel)
20:17 < ningu> you can wrap the callbacks too
20:17 < chapel> and who is the user? is this a module/library for someone to use?
20:17 < lacrymology> the user will be me and my product
20:18 < lacrymology> but it's a number of developers, and I want this to be as transparent as possible
20:20 < chapel> lacrymology: there are other reasons to not monkeypatch a library, you can use its updates usually with no issues
20:20 < chapel> where as what you want to do, could have issues down the line
20:21 < chapel> with node_redis in particular, from what I can tell, wrapping the code you want would work, and probably wouldn't have issues, but its generally not best practice
20:21 < lacrymology> chapel: I was thinking more like "inheriting" from the RedisClient and override the affected methods, than actually monkeypatching
20:21 < lacrymology> chapel: how do I wrap without losing the client object?
20:23 < chapel> lacrymology: might need a bit more context of what you're doing, a gist code example would help
20:23 < ningu> in general though closures are wonderful things
20:24 < lacrymology> chapel: I'll post something real quick
20:28 < lacrymology> chapel: https://gist.github.com/Lacrymology/5327498
20:31 < lacrymology> I guess I can always do .publishJSON and .subscribeJSON
20:31 < chapel> lacrymology: looking now
20:33 < ningu> lacrymology: are publish and subscribe all that the users of the library need to be able to do?
20:36 < lacrymology> ningu: not at all. There's like 40 commands
20:36 < chapel> lacrymology: you want all of node_redis to be available?
20:37 < lacrymology> yes, I just want a small wrapper around publish and subscribe for now
20:37 < lacrymology> later on maybe on psubscribe, which is subscribe + patterns
20:37 < chapel> idk, seems simple enough, but can be convoluted depending on how you go about it
20:37 < chapel> well subscribe doesn't deal with javascript
20:37 < chapel> err
20:37 < chapel> json data
20:38 < chapel> you're meaning listener.on correct?
20:38 < lacrymology> chapel: yes, you're right, and damnit
20:39 < lacrymology> ok, nevermind
20:39 < lacrymology> I'll just do this
20:39 < ningu> I suppose publishJson and onJson would be the simplest thing to do
20:40 < lacrymology> I'll just provide the wrappers, and have people call them on their own
20:40 < lacrymology> like
20:40 < lacrymology> ah, not even
20:40 < lacrymology> yeah, something of the sort
20:40 < chapel> lacrymology: if you are doing something that could expand in functionality
20:40 < chapel> it might be worth doing a generic wrapper library
20:41 < ningu> yeah, I don't quite understand the goal here
20:42 < ningu> providing direct access to the redis client is in conflict with providing additional functionality
20:42 < chapel> its so they don't have to do JSON.stringify and JSON.parse for publish and on('message'
20:42 < lacrymology> ningu: I come from OOP, and that needn't be like that
20:43 < ningu> lacrymology: yes but the problem is that redis has well defined commands with well defined functionality
20:43 < ningu> so if it looks like a redis client it should act like a redis client
20:43 < lacrymology> ningu: and no one ever should try to improve on that?
20:44 < lacrymology> I'll figure something out, don't worry
20:44 < ningu> not by making it look like a normal redis client, it would be confusing which methods are really redis methods
20:44 < ningu> I would wrap it and expose the redis client as an attribute, that's normally what people do for things like this
20:44 < ningu> so module.exports = { custom: custom, custom2: custom2, client: client };
20:45 < ningu> that makes it obvious what's generic redis functionality and what is not
20:45 < chapel> one thing he could do
20:46 < chapel> to fit with OOP
20:46 < ningu> in my opinion the issue here isn't OOP and JavaScript, it's the question of how you wrap/extend a protocol driver in general
20:46 < ningu> and I think composition makes more sense than inheritance for that 
20:47 < HankHendrix> did TJHoloway single-handedly write Express?
20:47 < chapel> writing it out now
20:47 < ningu> no one single-handedly did anything :) but yes he is the main author
20:48 < HankHendrix> cool thanks!
20:48 < tjholowaychuk> HankHendrix the contributors are listed in the readme
20:48 < lacrymology> ningu: I'm not sure. I understand providing differently-named methods, but having people do myobj.publishJSON for some things and myobj.client.incr for other things sounds iffy
20:53 < HankHendrix> tjholowaychuk: cheers, I'm just writing a presentation and needed to double check that you were infact the main author
20:54 < chapel> lacrymology: https://gist.github.com/chapel/5327502 its a bit convoluted, but thats a form of OOP in node
20:54 < chapel> and matches node_redis, since it inherits from EventEmitter
20:55 < chapel> bleh, slow day for me, lunch time I guess
20:56 < lacrymology> chapel: so from publishJSON I'd do RedisClient.prototype.publish.call(this, chan, JSON.stringify(obj))?
20:57 < chapel> or this.publish
20:57 < chapel> since you are inheriting all of RedisClient
20:58 < chapel> essentially, you could just use that createConnection bit, and directly attach to RedisClient as well with your custom functions
20:59 < chapel> blah, too many options, Im telling you my brain is slow today, probably cause Im sick and hopped up on medicine
20:59 < ningu> the fact that you have to rewrite createConnection that way tells me that it isn't meant to be done like that
20:59 < chapel> ningu: well, its because RedisClient expects a net connection
20:59 < chapel> you could just do client.publishJSON = blah as well
20:59 < chapel> would work the same essentially
21:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:27 < mcwhittemore> I'm in the middle of a startup weekend and we can't get node-postgresql to connect to heroku in our local test environments. I know it has something to do with ssl but the node-postgres docs don't seem to mention how to set this.
21:27 < mcwhittemore> here is a code/result example. https://gist.github.com/mcwhittemore/5327669
21:28 < ningu> mcwhittemore: https://github.com/brianc/node-postgres/issues/25
21:30 < mcwhittemore> @ningu thanks looking at it now
21:35 < mcwhittemore> @ningu I LOVE YOU. THANKS!
21:35 < owen1> I get connection timeout when trying to access my node server. It's running on port 3000 on my home server. I added A-record for my domain, I opened port 80 on my Motorola NVG510 Modem/Router and I run http-proxy on port 80 with a simple config file - http://hastebin.com/jixaheqibu.vhdl 
21:35 < owen1> Here is the output of 'curl www.weighmyplate.com -v' => 'Trying 108.227.80.160... Connection timed out'
21:41 < draginx> https://gist.github.com/durango/d8c966c482b3851a59f0 how would I convert this to the newer readStream.pipe(writeStream) method?
21:47 < deoxxa> draginx: is.pipe(os).on("end", function() { fs.unlink(req.files.file.path, function() { ... }); })
21:47 < deoxxa> draginx: probably
21:47 < draginx> ah thought so :) cheers
21:47 < draginx> i guess if os emits end to is then is will end as well
21:47 < draginx> which makes sense, i wasnt 100% sure though
21:58 < draginx> deoxxa: i dont think that worked heh
21:58 < draginx> oh well util.ppump it is then
21:58 < deoxxa> well i've got no idea what the rest of your code looks like, so i'm not sure
22:07 < draginx> deoxxa: actually i think its on('close') which makes more sense :)
22:16 < draginx> deoxxa: in case if u were curious, yup its on close :D
22:24 < ningu> substack: is there any way to get gutter not to output \n various places, e.g. before the comma separating each array element?
22:25 < ningu> I can't quite tell how it's getting in there
22:29 < rcombs> I'm getting a weird issue when 2 files require() each other
22:29 < rcombs> one of them's giving me {}
22:29 < deoxxa> rcombs: read the documentation on require()
22:30 < deoxxa> actually, here you go, just give me my spoon back when you're done feeding: http://nodejs.org/docs/latest/api/modules.html#modules_cycles
22:30  * rcombs sees it
22:31 < rcombs> but I'm not calling this until well after it's had plenty of time to load
22:31 < ningu> rcombs: gist your code?
22:31 < rcombs> and all the module that's giving me {} does is export some utility functions
22:31 < rcombs> https://github.com/11rcombs/node-PLM
22:31 < ningu> which files?
22:31 < rcombs> https://github.com/11rcombs/node-PLM/blob/master/lib/INSTEONMessageFlags.js requires ./util.js, and vice versa
22:31 < ningu> ok
22:31 < deoxxa> ha, interesting that you're doing serial stuff
22:32 < deoxxa> i'm hacking on a gps module with a serial port right now with node :>
22:32 < rcombs> deoxxa: fun!
22:32 < deoxxa> brute forcing its AT interface to find undocumented commands
22:32 < deoxxa> so far i've got exactly one
22:32 < rcombs> what's it do?
22:32 < deoxxa> not sure yet, the serial port is still tied up
22:33 < deoxxa> it's AT$AKXM
22:33 < rcombs> heh
22:33 < rcombs> I'd expect sending random nonexistent commands would just give me loads and loads of NAK replies
22:33 < deoxxa> i'm lucky, i get a very specific error message for when the command's not implemented
22:33 < rcombs> neat
22:34 < rcombs> this isn't an ASCII interface, it's all binary
22:34 < deoxxa> ooh! got a few more
22:34  * deoxxa excited
22:34 < deoxxa> ah yeah
22:34 < rcombs> commands are like 0x02 0x60
22:34 < deoxxa> that's actually nicer to work with
22:34 < deoxxa> haha
22:34 < deoxxa> ascii is ew
22:35 < ningu> hmm
22:35 < ningu> maybe you can't do recursive require like that
22:35 < rcombs> and there aren't any reserved terminator bytes, so I've got a list of known lengths of messages
22:35 < rcombs> I just did some class restructuring, moving a load of stuff out of the generic util file and into their own classes
22:36 < rcombs> deoxxa: if I'm reading the docs right, this cycle _should_ be fine
22:36 < deoxxa> hm
22:37 < rcombs> I can see a potential race condition, but right now I'm using test.js (a deadline module), and I'm definitely not typing commands faster than v8 can parse function declarations
22:37 < ningu> it's not a race issue
22:38 < deoxxa> no, the people moving into my building are a race issue
22:38 < deoxxa> HA HA
22:38 < deoxxa> anyway
22:38 < rcombs> hmm, actually, looking at the docs again…
22:38 < rcombs> I don't see any mention of 2 modules directly requiring each other
22:38 < ningu> deoxxa: I just had a convo last night about how prevalent racism was in australia
22:38 < deoxxa> ningu: pretty prevalent, it's kind of disappointing considering our history
22:39 < rcombs> ohwait, yes it does
22:39 < rcombs> it should be fine
22:39 < rcombs> I suppose I could duplicate a couple functions, but I'd feel bad about that
22:39 < ningu> deoxxa: yeah, I don't totally get it, but it's not like it's absent in the US
22:39 < ningu> rcombs: I'm not sure but I don't have time to look at it more right now, sorry
22:40 < rcombs> oh, here's a solution
22:40 < rcombs> got it
22:41 < rcombs> though that unfinished copy thing is a bit derp
23:02 < rcombs> yep, working now
23:05 <@isaacbw> I just spent two hours trying to figure out what fried on my mobo until I realized that I just had my monitor looking at the wrong input
23:06 < ningu> hehe
23:07 <@isaacbw> To throw or not to throw, that is the question - http://blog.nodejs.org/ - http://logs.nodejs.org -  http://stackoverflow.com/questions/tagged/node.js
23:07 <@isaacbw> er
23:07 < BOY77X> http://www.reddit.com/r/XXXEROSXXX/comments/1bthxk/taylor_rain_anal_slut_of_the_world/
23:07 -!- isaacbw changed the topic of #Node.js to: To throw or not to throw, that is the question - http://blog.nodejs.org/ - http://logs.nodejs.org -  http://stackoverflow.com/questions/tagged/node.js
23:07 <@isaacbw> Why have we been getting to many of those lately
23:09 <@isaacbw> at one point I googled about fried hard drives and now I'm getting targetted ads for backup services
23:10 < ningu> at least they aren't for kfc
23:37 <@isaacs> chjj: Hey, does marked have any way to get the language name from the ```javascript\nblarg()\n``` block?
23:44 < zemonk> has anyone seen a node process just hang?
23:44 < zemonk> when i run the same code in mocha, it seems to end
23:44 < zemonk> but if i run it just using node, it doesn't
23:45 < zemonk> the code looks something like this: check(obj, function () { console.log('done'); })
23:46 < zemonk> and check does some async work
23:46 < zemonk> the check callback gets called
23:58 < zemonk> i'll repeat my question, just in case someone new sees it: has anyone seen a node process just hang?
23:58 < zemonk> when i run the same code in mocha, it seems to end
23:58 < zemonk> but if i run it just using node, it doesn't
23:58 < zemonk>  the code looks something like this: check(obj, function () { console.log('done'); })
23:58 < zemonk> and check does some async work
23:59 < zemonk> the check callback does gets called
23:59 < zemonk> *get
--- Log closed Sun Apr 07 00:00:34 2013
