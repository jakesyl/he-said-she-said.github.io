--- Log opened Sun Mar 03 00:00:04 2013
--- Day changed Sun Mar 03 2013
00:00 < ehd> is there some way to get the CXXFLAGS that node-gyp would pass to g++?
00:00 < Eigen_> nodemon isnt working
00:00 < Eigen_> is there anything
00:00 < Eigen_> that detects changes in your coffeescript and compiles them on eth fly
00:00 < Eigen_> I tried supervisor and nodemon
00:00 < Eigen_> and they don't do that
00:01 < darrenlooby> Eigen_, I'd be inclined to use something like watchr in my own mini app - and then create some deploy method.
00:02 < Eigen_> or just modify supervisor...
00:02 < MPoelman> I think i found a stackoverflow question about that Eigen. I think there was a solution that shows how you can configure nodemon to do that.
00:02 < Eigen_> yea
00:02 < Eigen_> I read that too
00:02 < Eigen_> but
00:02 < Eigen_> you mean this? http://stackoverflow.com/questions/10939924/nodejs-coffeescript-workflow
00:03 < Eigen_> it doesn't work the way I explained it
00:03 < Eigen_> *want it
00:03 < MPoelman> darrenlooby, sorry darren. I thought you meant socket.io itself. Have no experience with engine.io
00:04 < darrenlooby> MPoelman, yea. Easy mistake to make, but I'm sure it must be an issue that both would suffer - if I can find the cause.
00:05 < MPoelman> No Eigen, it was an article more like this one on github: https://github.com/remy/nodemon/issues/32
00:05 < MPoelman> Maybe that can help you?
00:07 -!- mode/#Node.js [+o Nexxy] by ChanServ
00:11 < MI6> joyent/node: isaacs master * 63edde0 : events: Handle emit('error') before ctor  The previous commit did not han - http://git.io/1jRmWw
00:11 < Eigen_> wtf
00:12 < MI6> joyent/node: isaacs master * 5222d19 : stream: Writable.end(chunk) after end is an error  Calling end(data) call - http://git.io/ijeiiQ
00:13 < Eigen_> coffee just compiled my app.coffee into a blank js file
00:13 < MI6> joyent/node: isaacs master * f5d8496 : doc: Typo in ChangeLog  downgrade TO 3.14 - http://git.io/DtEY1w
00:16 < MPoelman_> Does this link help with the engine.js problem? https://github.com/learnboost/engine.io-client
00:23 < darrenlooby> I'll have another look over it MPoelman
00:25 < havvy> Yay. My test suite is passing again.
00:25 < someprimetime_> I'm using the request module to pipe an image to being saved on my server but it's saving it in the root directory.. How can I specify it to be in a particular directory instead?
00:28 < fatblueduck> hello everyone
00:29 < fatblueduck> document.createElement('div') == true // false
00:29 < fatblueduck> if (document.createElement('div')) console.log(true); // true
00:29 < fatblueduck> does anyone know why both of these statements return different result?
00:30 < fatblueduck> arent both conditions the same?
00:30 < gkatsev> an object is a truthy value. It isn't equal to true.
00:30 < fatblueduck> but i am not using strict equality
00:30 < gkatsev> doesn't matter
00:30 < fatblueduck> shouldn't the object be coerced?
00:31 < gkatsev> they are both coerced
00:31 < s3shs> In async.waterfall/series/parallel, should I return err; or callback(err)?  Are they the same?
00:32 < fatblueduck> what do i need to understand?
00:32 < gkatsev> fatblueduck: also, probably a better question to ask in ##javascript rather than in here :)
00:32 < fatblueduck> #javascript doesn't let me communicate
00:32 < fatblueduck> I don't have a registered nick
00:32 < gkatsev> fatblueduck: your nick isn't registered
00:32 < gkatsev> register one :)
00:33 < fatblueduck> I register a nick and it expires
00:33 < fatblueduck> I don't like managing passwords either
00:33 < gkatsev> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Comparison_Operators
00:33 < fatblueduck> thanks
00:34 < gkatsev> there have been too many spammers in the channel lately to let people with unregistered nicks talk
00:35 < gkatsev> also, it's best practice to avoid ==
00:36 < fatblueduck> i agree but in this one case I wanted to use it...
00:36 < mscdex> the extra = was eaten by a grue
00:36 < gkatsev> unfortunately, you can't do that.
00:37 < gkatsev> objects never equal over objects except if they are the same object.
00:37 < gkatsev> fatblueduck: you could do `!!doc.cE('div') === true` instead
00:37 < fatblueduck> I see
00:38 < fatblueduck> gkatsev that last one is a nice suggestion but I avoid !!
00:38 < gkatsev> then you are SOL.
00:38 < fatblueduck> its not a big deal
00:39 < gkatsev> but best practice for that is still the if(div) { useEl(div) }
00:49 < sshaginyan> Is it ever a good idea to do a conditional requiring libraries?
00:49 <@mbalho> require() is blocking so its best to require everything before you get into an event loop
00:49 < sshaginyan> if(true) { var fs = require('fs'); } else { var http = require('http'); }
00:50 < sshaginyan> mbalho: That makes 0 sense
00:50 < sshaginyan> a for loop is blocking too
00:50 < sshaginyan> everything is blocking
00:51 <@mbalho> sshaginyan: you are clearly very smart, i will leave you to it
00:54 < havvy> sshaginyan: It has its uses.
00:55 < sshaginyan> havvy: I was disconnected and have no idea what you said
00:55 < havvy> sshaginyan: It has its uses.
00:55 < sshaginyan> What has it's uses?
00:55 < havvy> Conditional requiring of libraries.
00:58 < gluxon> havvy: Only in C++, when you don't know your platform...
00:59 < someprimetime_> anyone using the npm module `request`?
00:59 < havvy> if (Object.prototype.DEBUG) { var module = require('mock-module'); }
01:00 <@mbalho> someprimetime_: it is quite popular
01:00 < someprimetime_> mbalho: Do you know how I can specify a particular directory for it to upload to before it pipes for writing?
01:01 <@mbalho> someprimetime_: can you provide more detail? what are you doing with request now?
01:01 < someprimetime_> mbalho : fetching an image with embedly and passing it to request and I want to save it to /thumbnails/thumb.png request(thumbnail).pipe(fs.createWriteStream('thumb.png'))
01:01 < someprimetime_> but I can't find in the docs where to specify `/directory`
01:01 < someprimetime_> in my case `/thumbnails`
01:02 <@mbalho> someprimetime_: does the directory exist already?
01:02 < someprimetime_> I am using express, but since I'm fetching the thumbnail with request, I can't take advantage of the bodyParser
01:02 < someprimetime_> and specifying the upload directory through that
01:02 < someprimetime_> mbalho: it does
01:02 < someprimetime_> But it still just saves it to my root folder
01:03 < someprimetime_> Let me try as the first param
01:03 < someprimetime_> maybe that'll work
01:03 <@mbalho> someprimetime_: fs.createWriteStream('/path/to/folder/thumb.png') doesnt work?
01:05 < someprimetime_> mbalho: throw er; // Unhandled stream error in pipe. ^ Error: ENOENT, open '/thumbnails/thumb.png'
01:05 < someprimetime_> Although /thumbnails exists
01:05 < someprimetime_> Let me check the permissions on it.
01:08 < hackygolucky> chrisdickinson: ping! see PM.
01:11 < Eigen_> how do you map multiple object attributes to a json string
01:12 < someprimetime_> mbalho: Turns out I don't need the `/`
01:12 < someprimetime_> As it's already in root at that point
01:12 < someprimetime_> so dropping that, it works.
01:12 < someprimetime_> Thanks for the backup
01:12 < someprimetime_> :)
01:14 < s3shs> In async.waterfall/series/parallel, should I (1) return err; or (2) callback(err)?  Are they the same?	
01:14 < Eigen_> nvm
01:26 < MI6> joyent/node: Ben Noordhuis master * 80ea63b : Revert "stream: Writable.end(chunk) after end is an error"  It's breaking - http://git.io/0EQjwA
01:32 < MitchW_> are there any standard patterns for error handling in event driven frameworks like node?  (mildly over passing error objects all the way down a chain / aggregating errors / etc, in most cases I'd be happy with just passing it back to the client (eg: server error: access denied) or terminating the request out-right w/ an error logged depending on the error type, instead of handling each one individually)
02:03 < harrisonm> Anyone know of a library I could use for manipulating images on a pixel-by-pixel basis?
02:03 < carpii> you could try node-canvas maybe?
02:06 < standoo> hello
02:06 < harrisonm> That should work.  Initially glossed over it, assumed it was a browserify-based <canvas> library
02:07 < standoo> anyone here?
02:12 < harrisonm> of course, the Cairo website's down right now
02:13 < standoo> Cairo's website?
02:13 < harrisonm> library that powers node-canvas
02:16 < standoo> interesting
02:16 < harrisonm> ah back up, good over here
02:16 < harrisonm> I'll look into this
02:19 < _DomY-Dom> what does this mean exactly: JSON.parse(str, null) ?
02:20 < carpii> it allows you to pass a postprocessing function, but passing null is pointless because its optional
02:21 < carpii> JSON.parse(str, function(k, v) { if k == "key") return 3; return v });
02:23 < fatblueduck> exit
02:25 < standoo> anyone would be interested in a nodejs real time testing environment?
02:25 < asdf12> what does that mean
02:25 < standoo> hmmm
02:26 < standoo> maybe i'm using the wrong description
02:26 < standoo> want to hear a long winded description?
02:26 < carpii> if it fits on one line, i do
02:28 < standoo> upload app to website, website is the updated, make any changes again, it is updated again
02:28 < carpii> updated?
02:29 < standoo> refresh
02:29 < carpii> you mean it restarts your node server when it detects changes?
02:29 < standoo> yes
02:29 < carpii> how does it differ from nodemon ?
02:30 < standoo> this refreshes your browser
02:30 < Eigen_> can I not say this var obj = JSON.parse(msg)
02:31 < ckknight> Eigen_: sure you can
02:32 < Eigen_> I'm getting a unexpected input
02:32 < Eigen_> and when I remove that line it goes away
02:32 < Eigen_> *error
02:32 < carpii> so input would be msg, right
02:32 < Eigen_> if I go to the url
02:32 < Eigen_> it prints out nice
02:32 < fullmooninu_> bah i give up
02:33 < asdf12> never
02:33 < asdf12> fight the good fight
02:33 < fullmooninu_> i will, but im kinda slow
02:33 < standoo> good fight?
02:33 < fullmooninu_> gona play some league of legends
02:33 < Eigen_> not as slow as me lol
02:33 < asdf12> that explains the slowness
02:34 < Eigen_> oh
02:34 < Eigen_> it is to do with the console.log
02:34 < carpii> in internet exploroer ?
02:34 < standoo> internet explorer?
02:34 < carpii> IE often gets console errors if the console hasnt been instantiated
02:38 < luckysmack> with couchdb-python and couchdbkit, is there any reason to use one or the other?
02:39 < asdf12> wrong channel?
02:40 < luckysmack> yes... yes it is...
02:52 < Eigen_> how do you populate an array of objects?
02:52 < Sly> [{},{}]
02:52 < Eigen_> in a for loop
02:53 < Eigen_> like i have obj[i]
02:53 < gluxon> Eigen_: objectname.element = 'you mean this?';
02:53 < Eigen_> nono
02:54 < Eigen_> I'm trying to parse a json string into seperate objects
02:54 < Eigen_> but I don't know how many objects there are in the string
02:54 < Sly> Object.keys(obj)
02:55 < Sly> Object.keys(obj).forEach(function(key) { console.log(obj[key]); });
02:55 < Sly> Or.. for (var i = 0; i < Object.keys(obj).length; i++) { console.log(obj[i]); }
02:56 < asdf12> i wonder why the going from js -> c++ is expensive? is this a v8 thing? 
02:59 < Eigen_> no its how it works
02:59 < Eigen_> its not a true compiler.
03:00 < Eigen_> not like c++ -> assembly
03:01 < asdf12> ?
03:01 < asdf12> it is a compiler
03:02 < asdf12> and anyway, in other languages, you can make calls to c++ methods without a performance overhead
03:18 < Sly> Wait.. Eigen_..
03:18 < Sly> Were you saying you're trying to go from string -> object?
03:18 < Eigen_> yea
03:18 < Sly> JSON.parse(string)
03:19 < Eigen_> i'm using that!
03:19 < Eigen_> but
03:19 < Eigen_> when I console.log it
03:19 < Eigen_> an object attribute ex
03:19 < Eigen_> I don't get anything
03:19 < Sly> What do you mean?
03:22 < Eigen_> I can do this right? Done URL:http://pastebin.com/JezrDUw9
03:22 < Sly> I wouldn't do it that way.
03:23 < Eigen_> Sly: how would you do it?
03:23 < Eigen_> Use .split?
03:23 < Eigen_> *.split()
03:23 < Sly> https://gist.github.com/Southern/cd55710e289597505764
03:25 < Sly> Then again.. jQuery may already return data as an object.
03:25 < Sly> Don't remember, atm.
03:25 < Eigen_> yea
03:25 < Eigen_> exactly
03:26 < Sly> Okay, yeah. It returns an object already.
03:26 < Eigen_> they print out {title: "Children's Hospital Hearing Form", institution: "Children's Hospital", location: "Vancouver", type: "Audiology", body: "sample 1"}
03:26 < Eigen_> like that
03:26 < Sly> So you don't even need the data = JSON.parse() stuff.
03:26 < Sly> Just use the for loop.
03:26 < Eigen_> oh ok
03:27 < Sly> lol. I just realized you were using .getJSON instead of .ajax
03:29 < Eigen_> Sly: thanks
03:29 < Sly> np
03:35 < Sly> Holy netsplit.
03:36 < garrettwilkin> silly question probably, but does the express framework work with socket.io?
03:36 < garrettwilkin> I've never ever used express
03:37 < carpii> what are you wanting to do?
03:37 < carpii> i run express alongside socket.io
03:37 < Eigen_> I'm continously getting this: Error in event handler for 'undefined': SyntaxError: DOM Exception 12 Error: An invalid or illegal string was specified.
03:37 < garrettwilkin> I have this page I wrote a long time ago: http://awesomesauce.me:1339/force.html
03:37 < Eigen_> is this due to my server side routing?
03:38 < garrettwilkin> it used flatiron originally, but I gave up on that
03:38 < Eigen_> omg
03:38 < Eigen_> sorry but
03:38 < Eigen_> the colourscheme
03:38 < Eigen_> not working for me
03:38 < Eigen_> black on red
03:38 < Eigen_> not the most readable
03:38 < garrettwilkin> reload to get a new color & radius
03:39 < garrettwilkin> lol thats fun right?
03:40 < garrettwilkin> maybe I should add chat to the page for fun
03:40 < garrettwilkin> so does anyone have an example of setting up socket.io on the server with express?
03:40 < garrettwilkin> do you have to do anything funky?
03:40 < Eigen_> there was one
03:40 < Eigen_> for this blog
03:40 < Eigen_> they made this chat
03:41 < Eigen_> but its old
03:42 < garrettwilkin> carif: do you have your code on github?
03:42 < garrettwilkin> carpii: I mean, do you have the express & socket.io app up on github?
03:46 < carpii> no its closed source, sorry
03:46 < carpii> but express just does my web pages, socket.io handles the websockets
03:46 < carpii> im not sure what youre asking in terms of can they work together
04:11 < TheAceOfHearts> used node.js + express + socket.io and won best Web App in a Hackathon today :D
04:15 < asdf12> nice
04:15 < standoo> Congratrulations
04:15 < standoo> hip hip hooray?
04:16 < TheAceOfHearts> we made a Pong game which had all the game logic in node, and it was rendered in a gameview, and then it could be accessed through other devices.
04:17 < TheAceOfHearts> so, our idea was basically a sort of framework for games, where for example: you're at a bar, and the bar projects the game, and people can go on with their phones and play the onscreen game
04:22 < samholmes> I'm switching from EJS to Jade, but no EJS2Jade converter. *first world problems*
04:23 < someprimetime_> Serious question: How do you keep a node website up in production? Like keep it running in a screen session somewhere?
04:26 < carpii> someprimetime_:  http://stackoverflow.com/questions/4903570/how-does-one-start-a-node-js-server-as-a-daemon-process
04:38 < asdf12> thats cool, like a game console
04:38 < asdf12> or no i guess more like tv mirroring
04:38 < asdf12> you wrote the phone apps too for the hackathon?
04:56 < asdf12> LGTM?
04:56 < asdf12> what does that stand for :ooo IDK!
04:56 < asdf12> AFAIK!
04:56 < someprimetime_> Knock knock
04:56 < carpii> RTUD
04:56 < someprimetime_> LGTM == looks good to me
04:56 < carpii> read the f'kin Urban Dictionary :)
04:56 < someprimetime_> Knock Knock
05:16 < asdf12> anyone know websocket protocol well?
05:16 < asdf12> what's the overhead in a websocket handshake/negotiation/
05:40 < zomg> Bah, writing a batch processing script to query an api and put some data into mongo... of course it leaks a fuckton of memory for no obvious reason...
05:46 -!- mode/#Node.js [+o xyxne] by ChanServ
06:05 < TheAceOfHearts> asdf12: Sorry, I Was out eating. We didn't make the phone apps because we're noobs and making the actual game took us loner than expected 
06:05 < TheAceOfHearts> but it was still a very fun experience :D
06:07 < samholmes> TheAceOfHearts: how'd you like ladytron? xP
06:07 < TheAceOfHearts> ah, not really my cup of tea, I have odd music tastes :P, sorry
06:07 < samholmes> No worries
06:07 < samholmes> I'm not crazy about them
06:08 < TheAceOfHearts> I'm going to sleep :P, I'm exhausted :D
06:08 < samholmes> TheAceOfHearts: night
06:08 < TheAceOfHearts> night~ happy coding :D
06:08 < samholmes> :D
06:22 < notmatt> anyone have any good pointers or examples for good unix-style CLI tools?
06:23 <@mbalho> use streaming stdin/stdout
06:23 < notmatt> heh - yeah. Sorry, I meant pointers in the sense of "X does this right"
06:24 <@mbalho> i think the biggest issue with CLI stuff is overengineering
06:28 < greg5green> notmatt, what are you trying to do?
06:28 < greg5green> nm, sounds like you're just looking for good tools as an example for making another tool
06:30 < notmatt> greg5green - yeah, exactly. Doing the research before I reinvent the wheel entirely.
06:30 < notmatt> The actual tool is pretty trivial (geoIP)
06:30 < greg5green> its a simple tool and maybe not what you are thinking of
06:30 < greg5green> but i do like how nvm works
06:31 < greg5green> and compass
06:31 < notmatt> thanks, I'll look.
06:34 < notmatt> greg5green: all I can find for compass is node-compass, which is express middleware; did you mean something else?
06:34 < greg5green> http://compass-style.org/
06:35 < notmatt> ah ha. thanks!
06:35 < greg5green> maybe sass is actually maybe more what I like, but its simple and does the job it set out to do
06:55 < darkf> Hi - is gyp really needed to `npm install socket.io`? I'm on Windows and don't have MSVS installed and the build is failing due to not having VCBuild.exe when trying to compile the ws module
07:01 < darkf> furthermore does anyone know how I could compile it manually so that node-gyp sees it? where are the V8 includes for node on Windows?
07:04 < greg5green> sorry darkf, no idea
07:09 < darkf> good god gyp is a clusterfuck, I give up
07:10 < darkf> anyone used sockjs, then? I am just copy-pasting code from the respective READMEs (sockjs-client and sockjs-node), but I get a client-side error: "http://127.0.0.1:9999/localhost/echo/info" -- localhost is being appended to the base URL, for some reason. It does not appear in the source. What can I do?
07:37 < dook> Struggling to find the right way to use socket.io given a data source that doesn't care about it:  https://gist.github.com/flyswatter/5073527
07:39 < darkf> dook: socket.broadcast.emit
07:40 < dook> Oh nice, so it broadcasts to all clients if they exist?  That's perfect.
07:44 -!- mode/#Node.js [+o _ry] by ChanServ
08:02 < tiglionabbit> is it possible to get the MAC of a user who connected via HTTP?
08:03 < greg5green> dont think so
08:03 < greg5green> for good reason
08:05 < tiglionabbit> I can filter on their mac address in iptables.  How come I can't get at that info in node?
08:08 < MiracleBlue> I'm now a married man :D
08:08 < tiglionabbit> greg5green: oh, figured out how to get at it using arp
08:09 < greg5green> congrats MiracleBlue
08:09 < MiracleBlue> Thank you!
08:17 < Sven_vB> tiglionabbit, if they are on the same physical network, you should be able to look up the MAC for their IP addr
08:17 < tiglionabbit> yep, that's what I'm doing
08:17 < tiglionabbit> hm, how do I get the ip address out of node?
08:17 < Sven_vB> "out of"? you mean like save it to a file? ;)
08:17 < tiglionabbit> anyway yeah `arp -n` gives me all the info I need.  Even found a node module by that name that parses it for me
08:18 < tiglionabbit> Sven_vB: no I mean when I get an http request, how do I get the ip?
08:19 < tiglionabbit> this documentation page doesn't list very many properties on the request object http://nodejs.org/api/http.html#http_class_http_serverrequest
08:19 < Sven_vB> dunno from head, maybe just dump it with util.inspect and look there
08:19 < membrain> You can use the request.connection method to retrieve the net.Socket object, where you can then use your socket.remoteAddress method.
08:19 < greg5green> in express
08:19 < greg5green> its ;req.ip'
08:19 < greg5green> err
08:19 < greg5green> 'req.ip'
08:20 < MiracleBlue> I know this is not related to Node.js, but quick question, anyone in here really into trance music?
08:21 < greg5green> no
08:21 < MiracleBlue> :'(
08:21 < greg5green> sorry
08:21 < greg5green> as an american, i cant tell between different styles of european electronic music
08:21 < greg5green> but i do like breakbot and surkin
08:22 < MiracleBlue> Heheh
08:22 < MiracleBlue> Nice.
08:22 < greg5green> which im 99% sure are not trance
08:22 < greg5green> but as i say, im american, we cant tell the difference
08:22 < Sven_vB> new genre: EEM, European Electronic Music
08:22 < greg5green> i can tell you what city all these "trap" people that are popular in EDM are from tho
08:22 < MiracleBlue> Trap is… interesting.
08:22 < MiracleBlue> Certainly not my cup of tea most of the time.
08:23 < zomg> Trap?
08:23 < zomg> Like.. a boy dressing up as a girl?
08:23 < zomg> lol
08:23 < greg5green> no
08:23 < greg5green> thats tranny
08:23 < greg5green> not trap
08:23 < greg5green> trap as in
08:23 < zomg> It's also called a trap
08:23 < zomg> :D
08:23 < greg5green> we are selling crack cocaine here
08:23 < greg5green> not cocaine, crack cocaine
08:24 < MiracleBlue> ;)
08:24 < Sven_vB> cocaine??? in MY node??! ;)
08:24 < MiracleBlue> Cocayyyyne
08:25 < greg5green> the internet is a rough neighborhood
08:25 < greg5green> hand to hand sales everywhere
08:25 < MiracleBlue> Srs bisnus
08:26 < Sven_vB> i see we'll have to GET some packets from express
08:26 < greg5green> http://pigeonsandplanes.com/2012/09/definitive-trap-top-10-trap-tunes-so-far, if you were looking for examples
08:27 < greg5green> yes, packets from express
08:27 < greg5green> packets of rock...
08:27 < greg5green> are we still in a cocaine euphemism?
08:27 < Sven_vB> for the bigger ones, we might use our locomotive
08:27 < zomg> haha, Major Lazer
08:27 < greg5green> also, just realized that EEM was meant to be a joke
08:27 < greg5green> :(
08:28 < greg5green> someday you'll want to know the difference between j dilla and black milk, and you'll wish you hadn't made a joke about EEM
08:28 < greg5green> :P
08:28 < samholmes> Anyone here use tumblr?
08:28 < greg5green> no
08:29 < samholmes> greg5green: How do I get disqus to work on my tumblr?
08:29 < zomg> greg5green: that is some odd music 
08:29 < zomg> not really the sort I'd listen to even though I do listen to some odd stuff 
08:29 < zomg> =)
08:30 < greg5green> samholmes, did you really come to nodejs to ask about that?
08:30 < greg5green> i dont have an answer for how to get disqus to work on your tumblr, check disqus's documentation
08:31 < greg5green> zomg, dont blame you. I prefer my trap less "edm"ified and my "edm" less trapified
08:31 < samholmes> greg5green: ARe you really green?
08:31 < greg5green> my surname is green
08:31 < greg5green> and my eyes are green
08:31 < samholmes> I don't care if you're green
08:32 < samholmes> It's cool
08:32 < samholmes> What about 5?
08:32 < zomg> Is it troll time now?
08:32 < greg5green> 5?
08:32 < samholmes> zomg: You're name is a troll name, so you tell me.
08:32 < zomg> Learn2spell
08:32 < samholmes> greg5green: There's a 5 in your nick
08:32 < samholmes> Your*
08:32 < greg5green> that number is none of your business, sir
08:33 < samholmes> zomg: ZOMG, I made a mistake..grammar nazi.
08:33 < zomg> samholmes: go away
08:33 < greg5green> what is .san.?
08:33 < samholmes> greg5green: I'm sure almost all business depend on this number.
08:33 < greg5green> san antonio?
08:33 < Sven_vB> ./nick Sven23vB
08:34 < zomg> boom
08:34 < greg5green> i thought san antonio was stx.rr.com
08:34 < greg5green> ohai
08:35 < samholmes> zomg: /away wasn't working.
08:35 < samholmes> greg5green: Hey friend! :)
08:35 < Sven_vB> hay anyone seen a common lisp module for nodejs yet?
08:35 < Sven_vB> *haz
08:35 < greg5green> Sven_vB, no, but I haven't been looking
08:35 < zomg> Sven_vB: a common lisp module for nodejs...?
08:36 < zomg> why would you want something like that
08:36 < zomg> :D
08:36 < greg5green> if you guys were curious san wasnt for san antonio
08:36 < greg5green> prolly san fernando valley?
08:36 < greg5green> somewhere in socal
08:37 < greg5green> am i on the right path samholmes?
08:37 < samholmes> path to what?
08:37 < samholmes> enlightenment?
08:37 < greg5green> to what san in your hostname stands for?
08:38 < zomg> I'd say San Diego
08:39 < greg5green> i thought their hostnames were just sd.rr.com
08:39 < greg5green> or socal.rr.com
08:39 < greg5green> but who knows, they could have reconfigured
08:39 < zomg> ISPs don't make sense.
08:39 < zomg> =)
08:40 < greg5green> looking at bing though, it seems you are right, its SD
08:40 < zomg> yeah it was pretty easy, there's a guy on twitter @sam_holmes who talked about node in a tweet and it said san diego
08:40 < greg5green> twc is so weird
08:40 < Sven_vB> geoip says it'd be in Carlsbad, so probably the san is not for location
08:40 < greg5green> and so awful
08:40 < zomg> lol
08:40 < samholmes> It's sam
08:40 < greg5green> carlsbad what?
08:40 < samholmes> with an m
08:41 < greg5green> and also, rr.com does all their hostnames by location
08:41 < greg5green> because they are all different branches of a giant corporation
08:41 < Sven_vB> oh, i thought it was about your irc host
08:41 < greg5green> for example, im columbus.rr.com
08:41 < greg5green> because im in columbus, ohio
08:41 < zomg> Sven_vB: it was :P
08:41 < samholmes> zomg: @sam_holmes does sound familiar
08:42 < Sven_vB> well my whois query says "san" in the subdomain
08:42 < greg5green> yes, that is right
08:42 < greg5green> san.rr.com
08:42 < greg5green> i just wanted to know what the san stood for 
08:42 < greg5green> san antonio, tx?
08:42 < greg5green> san diego, ca?
08:42 < greg5green> san something else, Maine?
08:42 < samholmes> sans serif?
08:42 < kramutils1> :D
08:42 < zomg> santana
08:42 < samholmes> sandy hook?
08:43 < greg5green> it could have been, but we already figured out san diego.
08:43 < MiracleBlue> I've gotta come up with something new to make in Node.
08:43 < MiracleBlue> Hmm.
08:43 < samholmes> sandy, hurricane
08:43 < samholmes> sandycrack
08:43 < greg5green> also, conneticut doesnt have time warner, so...
08:43 < samholmes> sansansans?
08:43 < MiracleBlue> Comic Sans.
08:43 < zomg> samholmes: are you high or something?
08:43 < zomg> lol
08:43 < samholmes> sandwhich
08:43 < Sven_vB> well actually, san diego is not that far away from carlsbad
08:43 < samholmes> zomg: Sorta; I get this way when I'm really tired. xP
08:44 < samholmes> When I'm high, I'm trippy
08:44 < samholmes> Like as in, not all round there
08:44 < zomg> let's just say it isn't doing you any favors
08:44 < zomg> =)
08:44 < samholmes> And then I feel things, like thoughts
08:44 < samholmes> zomg: What, being tired and border and dumb?
08:46 < greg5green> Sven_vB, so you mean Carlsbad, CA. Was curious what Carlsbad you were referring to as there are several throughout the world
08:48 < samholmes> I'll brb
08:58 < samholmes> Back in the USSSSSSRRRR
08:58 < samholmes> :D
08:59 < skope> i have array of regexps and i'd like to iterate over them. how is that possible?
09:01 < SomeoneWeird> like a normal array...?
09:01 < skope> well i want to match a string against the array of regexps
09:01 < skope> and i quite can't figure out how
09:02 < SomeoneWeird> arrayofregexs.forEach(function(reg) { if(reg.test(str) {  } });
09:11 < skope> SomeoneWeird: thanks!
09:18 < Arkkis> So, have you guys seen a package that would let me remove empty directories recursively, so that I'd be able to clean my directory structure with node.js?
09:18 < Arkkis> as async as it could be of course, as you can not rmdir in wrong order
09:44 < Sven_vB> i'd like to test some filenames to find the first one that exists in a given directory. should i use mltiple fs.exists() queries, should i fs.readdir() and then use indexOf(), or is there an even better way?
09:45 < darrenlooby> Sven_vB, my instinct says readdir...
09:47 < Sven_vB> Arkkis, i've not seen it packaged, but it sounds easy to build.
09:49 < darrenlooby> While an exists() loop might return in the first run, sometimes it wont. Looping exists() will often give you more IO requests. Whereas, readdir will reduce IO ... or, so I would imagine.
09:53 < Sven_vB> that was my consideration as well, thanks for confirming the thought.
09:53 < Sven_vB> also, on ftpfs it might even be that exists uses readdir
09:53 < Sven_vB> so maybe that's the case for other network fs, too
10:10 < bimboprince> is there some function that can return what type of request is comming in to the server on a port?
10:12 < skope> http:/pasdfasd.com/
10:12 < skope> http:/pasdfasd.com/
10:12 < skope> http:/pasdfasd.com/
10:12 < skope> http:/pasdfasd.com/
10:12 < skope> http://paska.com/
10:13 < membrain> what do you mean by "type of request"?  Like a specific protocol?  Or the http verb of an http request?  Or something else?
10:14 < bimboprince> i mean like the verb yeah 
10:14 < bimboprince> like if (response.type == get {do this } /// etc 
10:15 < skope> ehhhhh
10:15 < skope> sorry for the flood
10:15 < skope> i was in the wrong channel
10:15 < membrain> it is request.method
10:15 < membrain> http://nodejs.org/api/http.html#http_request_method
10:15 < bimboprince> ty
10:53 < LuckyBurger> Q: is there any IDEs that support Node.JS currently?
10:53 < wwicks> webstorm
10:54 < wwicks> http://c9.io if you want to try a browser based one
10:54 < LuckyBurger> thanks. im using eclipse atm and its a bit lacking
10:55 < wwicks> they all have their quirks you need to work with
10:55 < LuckyBurger> yeah?
10:55 < LuckyBurger> hmm
10:55 < LuckyBurger> auto-complete would be nice..
10:55 < LuckyBurger> lol
10:56 < wwicks> webstorm does fairly good job of auto complete- but the quirk I struggle with is that the auto complete box that comes up is sometimes annoying.
10:56 < LuckyBurger> ah
10:57 < LuckyBurger> seems like webstorm is like a dreamweaver tho... kinda evolved into a full web package :\
10:57 < wwicks> eeekk.. no. No drag-n-drop that I know of :)
10:58 < LuckyBurger> well other than that :p
10:58  * LuckyBurger shivers
10:58 < LuckyBurger> i know what you mean tho :p
10:58 < LuckyBurger> just wants a no-bs ide with auto-complete :(
10:58 < LuckyBurger> maybe theres a plugin for notepad++ lol
10:59 < wwicks> you're on windows eh? Oh I miss NPP… (I'm on mac now & can't use it)
11:00 < membrain> checkout Sublime Text (just a text editor not ide) w/ the SublimeCodeIntel plugin
11:00 < membrain> https://github.com/Kronuz/SublimeCodeIntel
11:00 < LuckyBurger> sry...
11:00 < LuckyBurger> stupid internet
11:01 < membrain> LuckyBurger: did u see my suggestion?
11:01 < LuckyBurger> yep
11:01 < membrain> sweet
11:01 < LuckyBurger> Sublime
11:01 < LuckyBurger> i remember having it at one point...
11:02 < membrain> yep... wasn't sure if u saw it before u disconnected
11:02 < LuckyBurger> o i think i have it now
11:02 < LuckyBurger> lmao
11:02 < membrain> haha nice... yea just install the package manager... and install the SublimeCodeIntel plugin... adds autocomplete and stuff
11:03 < LuckyBurger> ah
11:03 < LuckyBurger> now to figure that out lol
11:03 < membrain> lol... its pretty easy... http://wbond.net/sublime_packages/package_control
11:04 < membrain> then once u get that installed it's super easy to install/update plugins
11:05 < LuckyBurger> yep
11:06 < LuckyBurger> thats pretty painless
11:06 < LuckyBurger> better than eclipse :D
11:07 < LuckyBurger> thank you guys :)
11:07 < membrain> haha yea def... np
11:08 < LuckyBurger> heres another thing. I have a TCP server that I am using for a game. I want to collect stats on connections per minute, not sure whats the best way to go about that
11:09 < LuckyBurger> after a certain threashold I will want to spin up another server...etc
11:12 < membrain> If you think scaling might be an issue you can playing w/ the cluster api  http://nodejs.org/api/cluster.html... basically allows you to run multiple processes to take advantage of multicore processes, although the api is still experimental
11:12 < LuckyBurger> well i have access to a few different VPS's, but I just need to tell tehm to run a certain script
11:13 < LuckyBurger> ill have a look at the cluster stuff tho.
11:14 < membrain> ah i see... couldn't you just keep a counter (either in memory or in redis or something) and increment whenever a new connection comes in?
11:14 < membrain> then you can set a timeout to fire every minute or whatever and log/process the number
11:14 < LuckyBurger> actually i think server.connections is what im looking for
11:15 < membrain> ah cool... yea that works too lol
11:15 < LuckyBurger> theres a seperate system that will check periodically the load of the instance
11:15 < LuckyBurger> i really wish the crypto interface was done as well :p
11:20 < MiracleBlue> Anyone else here use Webstorm?
11:21 < wwicks> I do
11:21 < genazt> i do
11:21 < MiracleBlue> :D do you guys know if there's an irc channel for it?
11:21 < wwicks> I don't
11:21 < genazt> no
11:21 < genazt> but whats the problem ?
11:21 < MiracleBlue> Ah ok.
11:22 < Lucky|Sleep> thanks for the help guys, but 6am. time for bed lol. :D
11:22 < MiracleBlue> Well I was just wondering a couple of things
11:22 < wwicks> Lucky|Sleep: l8r
11:23 < MiracleBlue> Is there a built in, normal command line panel in webstorm?  Maybe one that is automatically inside the current project directory?
11:24 < MiracleBlue> Its so laborious to always have to do the cd waltz every time I open a terminal just to get to my working dir :P
11:24 < Lucky|Sleep> quirk :D
11:25 < Lucky|Sleep> keep a bat file that changes the directory?
11:25 < Lucky|Sleep> if on windows*
11:25 < MiracleBlue> On OS X, sir
11:25 < MiracleBlue> Though that does sound like a good idea actually :)
11:25 < Lucky|Sleep> do sh files work?
11:26 < MiracleBlue> Yes it's regular ol bash :)
11:26 < genazt> sh files work
11:26 < Lucky|Sleep> there u go :)
11:26 < Lucky|Sleep> ./wd.sh
11:26 < Lucky|Sleep> xD
11:26 < MiracleBlue> Thank you kindly for the tip, now I just gotta refresh myself on my bash skills :)
11:26 < genazt> webstorm has no interactive cmd
11:26 < genazt> only if you run a application
11:26 < Lucky|Sleep> MiracleBlue honestly... cd /path/to/file
11:26 < Lucky|Sleep> just 1 one-liner
11:26 < Lucky|Sleep> should do the trick
11:27 < Lucky|Sleep> chmod +x wd.sh
11:27 < Lucky|Sleep> ./wd.sh
11:27 < Lucky|Sleep> iirc
11:27 < wwicks> MiracleBlue: you looking for CMD+SHIFT+X
11:27 < whitedawg> Or, you could have an alias.
11:27 < genazt> for starting webstorm ?
11:27 < MiracleBlue> wwicks: oh?
11:27 < MiracleBlue> whitedawg: Yes, actually that's probably a better idea :D
11:28 < Lucky|Sleep> xD
11:28 < Lucky|Sleep> anyway l8r ppls :D
11:28 < genazt> does someone know a mongodb join lib for nodejs ?
11:28 < wwicks> MiracleBlue: well, I guess it isn't a full term. I tried to run 'node' and it didn't like it
11:30 < genazt> no one :( ?
11:30 < MiracleBlue> I could just have an alias that points directly to my root dev dir, and then just append the folder name of the current project.
11:30 < MiracleBlue> That'll work!
11:30 < MiracleBlue> Also one last question about mongo
11:30 < MiracleBlue> Is there anything sorta similar to something like phpmyadmin for mongo?  Just anything one could use to do basic tasks with mongo, but with a nice gui :)
11:31 < genazt> MiracleBlue, umongo (is a java client)
11:31 < genazt> or rockmongo if you want a server admin panel
11:31 < MiracleBlue> genazt: Thank you!  :D
11:31 < MiracleBlue> I'll give those a try
11:32 < genazt> does noone tried to join two sets of documents in mongo ?
11:32 < genazt> oO
12:14 < genazt> does someone use the github oauth ?
12:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:14 < genazt> it can receive the users email
12:14 < genazt> even if i got the scope right
12:46 < Sven_vB> graaa. just looked into one of the modules i use and by accident found out it uses synchronous file system access. isn't there a way to make node deny that? then such modules would fail on the first try and i knew i should use a better one.
12:47 < substack> Sven_vB: when does it use sync file calls?
12:47 < substack> sync file calls aren't categorically bad
12:47 < Sven_vB> substack, it uses them to generate a directory index for my webserver. would be bad if that directory was on a network mount.
12:47 < substack> they are just not something your program should be doing while it's interacting with remote clients
12:48 < substack> Sven_vB: oh yeah that sounds bad
12:48 < substack> which module is that?
12:48 < dhpe> on program initialization, they are handy
12:49 < Sven_vB> i've tried fixing it, but even making it jslint compatible would take weeks before could start actually touching its features
12:49 < Sven_vB> dhpe, why? just to close one's eyes on the fact that require() is sync?
12:49 < substack> Sven_vB: why would you ever give a fuck what jslint thinks
12:50 < Sven_vB> substack, because i share much of Douglas' opinions of how you should code.
12:50 < substack> Sven_vB: I use this module for serving static files http://npmjs.org/package/ecstatic
12:50 < Sven_vB> thanks, i'll try that
12:51 < substack> Sven_vB: I mean why would you do a bunch of jslint yak shaving just to fix a single sync io call
12:51 < wwicks> ugh jslint
12:51 < substack> that seems completely pointless
12:51 < substack> wwicks: I know right?
12:51 < dhpe> Sven_vB: if i need to do synchronous operations, the code is cleaner if i can use synchronous apis
12:51 < asdf12> you do, but to jslint someone elses code... who doesn't... care about jslint
12:52 < Sven_vB> substack, to help me get a clue about what that labyrinth of code actually does besides the sync readdir(), so i won't break much.
12:52 < wwicks> substack: heh- in my readme.md for https://github.com/williamwicks/sqlbits I wrote: //GASP! OMG! ..<rant>The Crock can bite me</rant>
12:52 < substack> Sven_vB: that's what tests are for
12:53 < substack> linters will not help you write more correct code
12:53 < substack> tests are for verifying correctness
12:53 < Sven_vB> substack, well, the tests included missed at leas 3 other problems i had with that module, so i couldn't trust them detecting bugs that i might add by fiddling with it.
12:54 < asdf12> that defeats the purpose
12:54 < substack> then you write more tests
12:55 < Sven_vB> ofc jslint isn't for functionality testing. it's to detect early when i do things that might work for the moment but turn out bad some weeks later.
12:55 < asdf12> tests were written for x, and you change x, you can't blame the tests for that since it wasn't meant for your changes
12:55 < Sven_vB> asdf12, as i said the tests missed _other_ problems that module had.
12:56 < asdf12> oh
12:56 < asdf12> pull requests!
12:57 < substack> crockford also has a lot of demonstrably bad ideas about how code should be structured that hugely hurt maintainability
12:57 < substack> case in point: https://github.com/douglascrockford/JSON-js/blob/master/json2.js#L233-L239
12:58 < substack> the locality of reference is absolutely horrible
12:58 < substack> spaghetti closures
12:58 < substack> or rather, proximity I mean
12:58 < wwicks> :)
12:58 < substack> such bad code
13:00 < wwicks> I asked him why he won't allow JSON to support empty array members like [5,7, , 8]
13:00 < substack> this is a great reason why plausible-sounding arguments without thorough real-world verification should be hugely suspect
13:00 < wwicks> he said it was because some languages do not allow sparse arrays.
13:00 < wwicks> so I say "Why did you call it JAVASCRIPT notation then?"
13:00 < wwicks> he got mad at me
13:01 < substack> but his company paid lots of money so he gets to decide the future of javascript through TC39
13:01 < substack> I don't mind that json doesn't support sparse arrays
13:01 < substack> it's a subset of js anyways
13:02 < dhpe> cough...
13:02 < wwicks> yeah- not many people miss it. But I have.
13:02 < dhpe> http://timelessrepo.com/json-isnt-a-javascript-subset
13:03 < substack> dhpe: it's very nearly
13:03 < Sven_vB> can i read how he got mad? i'd rather expect him to argue with compatibility and explain that the name JSON refers to objects, not arrays ;)
13:04 < Sven_vB> and about the locality issue substack pointed out, i think it'd be misleading to pretend there was more locality than JS actually has.
13:05 < wwicks> dhpe: thanks for the link- nice read
13:06 < dhpe> hope it will save you headache some day
13:06 < substack> Sven_vB: what happens when you move the loops around later?
13:07 < substack> Sven_vB: you'll need to update the code in multiple places that are very far away
13:08 < substack> that code is far too big in the first place, which is the most important thing
13:08 < substack> crockford doesn't talk about smallness
13:08 < substack> even though that is the most important thing to be talking about
13:09 < Sven_vB> substack, yes. still a JS problem. but i agree that i'd try and minimize those cases, maybe with immediately invoked functions or such.
13:10 < wwicks> I appreciate the good parts he has brought to the JS community. :P
13:10 < Sven_vB> let's abide by only the good parts of Crockford's teachings. ;)
13:13 < Sven_vB> also i'm wondering why a line or page separator isn't a control character, when line feed and form feed surely are. i'd assign that bug rather to the unicode specs.
13:20 < Sven_vB> is there a reason with ecstatic why i shall set autoIndex to _true_ to _deactivate_ dir indexes?
13:20 < Sven_vB> sounds like a docs bug
13:21 < substack> ask jesusabdullah about it
13:22 < wwicks> lol- wow, I just looked at the node modules wiki page (I haven't in a very long time)…. its…. much bigger now.
13:22 < substack> wwicks: http://npmjs.org
13:22 < substack> nobody updates the module wiki
13:22 < wwicks> substack: oh yes- all my stuff is on npm. I was just curious.
13:25 < tongcx> is there an api doc for associative array?
13:29 < substack> tongcx: the builtin object type you mean?
13:30 < tongcx> substack: yea, {1:2}
13:31 < tongcx> substack: want to know all the methods of it
13:31 < asdf12> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object
13:33 < tongcx> asdf12: thanks
13:38 < wwicks> if I were to call HP tech support and ask why my printer ignores the media-source IPP arrtibute (eventhough it says it supports it)… what kind of answer do you think I would get?
13:40 < wwicks> (question welcomes comic answers)
13:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:48 -!- mode/#Node.js [+o Nexxy] by ChanServ
14:59 < Sly> NEXXY <3
15:22 < Wizek> SemVer related question: Under what versoin should I issue the first release of my prototype software? 0.0.1, or 0.1.0?
15:22 < Wizek> s/versoin/version/
15:22 < Sly> Depends on how you want to version it.
15:23 < Sly> I use 0.0.1. Some people use 1.0.0 or 0.1.0.
15:23 < Wizek> Sly: What should I take into consideration when deciding?
15:24 < mscdex> or forget semver and always release stable builds
15:24 < Sly> 1.x.x = major version; x.1.x = minor version; x.x.1 = patch version
15:24 < mscdex> :p
15:25 < Wizek> 0 major, 0 minor, 1st patch. That sounds reasonable.
15:25 < mscdex> and do major version bumping when significant changes occur, such as backwards incompatibility in API
15:25 < mscdex> major/minor
15:26 < Sly> http://consumerist.com/2013/03/01/and-now-a-moment-of-silence-for-750k-in-whisky-accidentally-flushed-down-the-drain/
15:26 < Sly> All that poor whiskey. :(
15:27 < Wizek> wait a minute, shouldn't patch version be only incremented when issuing a hotfix to a previous release? In this sense, isn't 0.0.1 conceptually impossible? (since there wasn't a previous release to apply the hotfix to)
15:30 < Sly> Wizek: like I said.. that's where your personal preference comes into play.
15:30 < Sly> Would you rather it start at 0.0.0, or 0.0.1?
15:31 < Wizek> Sly: I don't know what the implications are yet, that's what I'm trying to figure out.
15:31 < Eigen_> if I say git push origin master
15:31 < Eigen_> on a remote repo
15:31 < Wizek> Sly: What version did node start with?
15:31 < Eigen_> it will push the commits on my repo to the master?
15:32 < Sly> Wizek: have you read http://semver.org?
15:32 < Eigen_> not the other way round right?
15:32 < Sly> Eigen_: it'll push the current branch you're in to the master branch.
15:32 < Eigen_> kk
15:32 < Eigen_> just checking
15:33 < Wizek> Sly: reading currently
15:34 < genazt> Sly if you make i correctly you must start with 0.1.0
15:34 < Sly> Actually, genazt.. "Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is dependent on this public API and how it changes."
15:34 < Sly> #6 on semver.org
15:35 < genazt> does it define the complete api ?
15:35 < Sly> But I, personally, use 0.0.1. Most of my semver'ing is on Nodejitsu deploys.
15:35 < genazt> well i think 1.0.0 is weird
15:35 < Sly> And.. "Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable."
15:36 < Sly> 0.x.x is for dev, 1.x.x is for stable
15:36 < genazt> because you cant break something that hasnt been there
15:36 < Wizek> genazt: yes, my point exactly
15:36 < genazt> yes right
15:36 < genazt> so a dev software never starts with 1.x.y
15:36 < genazt> it starts with 0.1.0
15:37 < Sly> Or 0.0.1
15:37 < genazt> no
15:37 < genazt> you dont start to patch something that isnt there
15:37 < genazt> in the first dev you have a simple api idea that you have modeld
15:38 < genazt> 0.1.1 would be a patch without changing the api (for stability or performance)
15:38 < genazt> 0.2.0 would be a api addition
15:38 < genazt> and the stable should be used if you want to freeze a api state
15:40 < Wizek> genazt: I take you are experienced with SemVer. In the 0.x.x stages, can I introduce braking api changes while incrementing the minor versions? Or minor versions should only be used for additive (non-desctructive) api changes?
15:41 < Sly> lolololol
15:41 < Sly> #dead
15:41 < genazt> if you follow the semver pattern you cant break the api without a new "stable"
15:41 < genazt> but the api isnt locked in the 0.x.x stages
15:42 < genazt> so you can break 0.1 code in 0.2
15:42 < genazt> what nodejs does is good
15:43 < Wizek> genazt: yes, that makes sense. So the rules are a bit different pre 1.0 and post 1.0
15:43 < genazt> it is in 0 dev version but the api show you what has been frozen and what not
15:43 < genazt> yes
15:43 < Wizek> I think I have the confidence now to release with 0.1.0 then
15:43 < Wizek> thanks :)
15:43 < genazt> it should help u and the devs using it to see if it breaks the known api
15:44 < genazt> so you can see a 2.x.y will break 1.x.y code
15:45 < genazt> but 1.1.0 will bring additions to the api so 1.0.0 will run
15:45 < genazt> but 1.1.0 code will not run in 1.0.0
15:46 < Sly> genazt: I look forward to seeing 0.0.0 on a NPM version. Haven't found one yet.
15:46 < genazt> yes ofc
15:46 < genazt> you can make whatever you want
15:46 < genazt> semver is no must
15:46 < genazt> it is a guideline you can use
15:46 < Sly> K. So why the argument over something that I said like three times already?
15:46 < Sly> It's *personal preference*.
15:46 < Sly> You acted like 0.0.1 was the end of the world. lulz
15:46 < genazt> in semver world it is wrong
15:48 < Sly> https://gist.github.com/Southern/5076583
15:48 < genazt> but my software also start at 0.0.1 cause i am too lazy to follow semver
15:48 < Sly> First 6 = dev
15:48 < Sly> At least, in the semver world.
15:48 < Sly> 7th is when it finally went stable.
15:48 < Eigen_> what does ! [remote rejected] master -> master (failed to write)
15:48 < Eigen_> this mean
15:48 < Eigen_> I tried to git push
15:48 < Sly> Eigen_: you may have some history differences.
15:48 < Sly> Have you done a rebase or something of that sort?
15:48 < Eigen_> I cloned it 
15:49 < Eigen_> and I want to push teh changes
15:49 < Sly> Is it your repo?
15:49 < Wizek> genazt: isn't it a bad design, that the responsibility for using semver lies with the devs, but it will hurt the users if the devs don't follow the convention? E.g. I use {"lib":"1.2.x"} expecting to recieve patches, but instead I can get breaking api changes?
15:49 < Eigen_> Sly: No but I have the creds
15:49 < Sly> Eigen_: did you do a `git pull` before you committed all of your changes and stuff?
15:49 < genazt> well thats a problem in using versions
15:49 < Eigen_> no
15:49 < Eigen_> but
15:49 < Sly> You may have an outdated history that differs from the repo.
15:49 < genazt> some follow this, other follow that
15:49 < Eigen_> if I git pull
15:49 < Sly> That'll cause a conflict.
15:49 < Eigen_> ohh
15:50 < genazt> some count numbers :D
15:50 < Eigen_> so the guy 
15:50 < Eigen_> w/ the repo
15:50 < Eigen_> worked on it
15:50 < Eigen_> oh
15:50 < Eigen_> kk
15:50 < Eigen_> i see
15:50 < Sly> Yeah. If he changed code and you didn't pull, it'll clash.
15:50 < Eigen_> can't I merge them or something?
15:51 < genazt> Wizek: but for your example, yes that can happen
15:51 < Eigen_> or do I have to make another repo
15:51 < Eigen_> and merge manually?
15:51 < genazt> no you can rebase
15:51 < Wizek> genazt: so, if I don't know/trust a lib dev fully, I should use exact version numbers, right?
15:51 < Sly> You can reset, recommit, split into a different branch, and then rebase on master once you pull the new code in.
15:51 < genazt> yes
15:51 < Eigen_> whats rebasing?
15:52 < Sly> Find the last commit before your commit in `git log`.
15:52 < Eigen_> kk
15:52 < Sly> Then do `git reset <commit>`
15:52 < Sly> And `git checkout -b <new branch name>`
15:52 < Sly> Then commit your changes to that branch.
15:52 < genazt> if you have the changes
15:52 < genazt> rebase tries to "merge" two branches
15:52 < Sly> Then switch back to master, do a `git pull`, switch back to the new branch and `git rebase -i master`
15:53 < genazt> so it pulls the current head and tries to apply the changes along to yours
15:53 < Eigen_> but
15:53 < Eigen_> the other guy
15:53 < Eigen_> nvm
15:53 < Eigen_> kk
15:53 < Wizek> genazt: I like your style of answering/teaching. Thanks dude/dudette!
15:54 < genazt> dude :D thanks
15:54 < Eigen_> there is only one other commit
15:54 < genazt> <- dude :D
15:54 < Eigen_> and its the initial one
15:54 < genazt> i like to help its fucking awesome to help people in their problems
15:55 < genazt> so you can learn something from their problems
15:55 < Sly> Eigen_: is it a public repo?
15:55 < Eigen_> no
15:55 < Sly> Ah. Was going to take a look at it.
15:55 < genazt> Eigen_, what have you done to make changes ?
15:56 < genazt> have you pulled the repository and made changes and want to push it back ?
15:56 < Eigen_> yea
15:56 < Eigen_> should i have pulled it first
15:56 < Eigen_> after cloning it
15:57 < Eigen_> and then i push?
15:57 < Sly> No..
15:57 < genazt> into your 
15:57 < Eigen_> yea
15:57 < genazt> and it says that you cant push into your fork ?
15:57 < Sly> Cloning it would have fetched everything that was in the repo at that current time.
15:57 < Eigen_> yes
15:57 < Eigen_> and no more commits have been made
15:57 < Eigen_> except mine\
15:57 < Sven_vB> Sly, except for submodules in some cases-
15:57 < genazt> do you have write permission on that repo ?
15:57 < Sly> Eigen_: Wait, you're pushing into a fork? I thought you were pushing into the original repo?
15:58 < Sly> Sven_vB: true story.
15:58 < Eigen_> no
15:58 < Eigen_> into original repuo
15:58 < Eigen_> *repo
15:58 < Sly> Okay. I was about to say, that changes everything. xD
15:58 < Eigen_> lol yes
15:58 < Eigen_> so how do you switch between branches?
15:58 < Eigen_> do I just add the branch name?
15:58 < Eigen_> in the command?
15:59 < Sly> Eigen_: I know it's a private branch, so you can't give out details about it..
15:59 < genazt> git branch <branch>
15:59 < genazt> maybe with the --new_branch switch for a new branch
16:00 < Sly> Eigen_: run `git remote -v` and make sure you're not using read-only http.
16:01 < Eigen_> origin	name@example.com:/git/kmc_forms (fetch)
16:01 < Eigen_> origin	name@example.com:/git/kmc_forms (push)
16:01 < Sly> Looks right.
16:01 < Eigen_> i think it worked
16:01 < Eigen_> the push worked
16:02 < Eigen_> man
16:02 < Eigen_> next time
16:02 < Eigen_> I want to use github
16:02 < Eigen_> *we will be using
16:02 < Sly> What did you do to fix it? O_o
16:03 < Eigen_> oh
16:03 < Eigen_> i didn't
16:04 < niggler> whats ircretary?
16:04 < genazt> a little bot that tells other users what they have stored
16:04 < genazt> like a voicemail for irc
16:04 < Eigen_> how do you commit to a specific branch?
16:04 < Sly> ohai niggler.
16:04 < niggler> hey Sly
16:04 < Sly> Eigen_: just be in the branch you want to commit to.
16:04 < niggler> sly: "[8:55 PM] <ircretary> I have notes for you. Reply with 'notes' if you would like them."
16:05 < niggler> but ircretary isnt logged in
16:05 < Sly> Hax.
16:05 < Sven_vB> try it anyways
16:05 < Eigen_> git branch iss53
16:05 < Eigen_> nvm
16:05 < Sly> git checkout
16:06 < Eigen_> no
16:06 < Eigen_> but
16:06 < Eigen_> ok
16:06 < Eigen_> I have my two branches 
16:06 < Eigen_> right
16:06 < Eigen_> I need to commit my changes
16:06 < Eigen_> to one branch
16:07 < niggler> actually "<isaacs> ircretary: tell niggler i'm messing around with your public_users doc in the npm registry now. something is weird with it, not sure what."
16:07 < niggler> thanks isaacbw
16:07 < Sven_vB> oh, looks like ircretary is unable to receive messages atm... i thought it was just invisible
16:15 < Eigen_> yea
16:16 < Eigen_> I did the merge w/ the branches
16:16 < Eigen_> and it works
16:16 < Eigen_> thanks guys
16:27 < torgeir> anyone having used knox's putStream around?
16:32 < HankHendrix> is node_libraries the same as node_modules??
16:37 < Industrial> How do i best serialize http requests into zeromq? Is that even a valid use case?
16:38 < MiracleBlue> Hey Nexxy :D
16:39 < Industrial> Can I easily filter out the parts of a http request that are not JSON.stringify'able?
16:39 < niggler> define "part of a http request"
16:40 < Industrial> information unique to that request that a backend service might be interested in. all the request data.
16:40 < Industrial> and headers etc
16:43 < Industrial> nvm i guess :P
16:43 < jhsto> how do you create a buffer from stream?
16:44 < jhsto> I just cant find a way to do it
16:45 < pachet> Industrial: all headers should be serializable, they're just key-value pairs
16:45 < pachet> as for the request body, it depends, but at the worst you could just convey it as a string
16:45 < pachet> if it consists of formdata, it's necessarily representable in JSON
16:48 < Industrial> pachet: I'm just wondering if I were to process a http request through zeromq, since all the socket connections to the clients live in callback scopes in node, if I were to emit data events for each client to one zmq connection and from that zmq node back again with HTTP response data to send a response, how I'm going to differentiate one client from another ...
16:49 < Industrial> or should I create a new connection to the zmq node from node nodejs node for every http connection
17:10 < nanashiRei> Does anyone know a good book on API Design? Specifically one utilizing Node.js
17:15 < steffkes> nanashiRei: good api design is not related to the product you're using
17:16 < AAA_awright> nanashiRei: What sort of API
17:17 < nanashiRei> I know, but i've been assigned to 1) Exlpain API Design to a Team and 2) Convince the boss, that node.js is just better.
17:17 < nanashiRei> RESTful
17:17 < AAA_awright> ECMAScript has really weird things to know
17:17 < AAA_awright> nanashiRei: AN HTTP API then
17:17 < nanashiRei> jup
17:17 < steffkes> nanashiRei: try one of these: http://shop.oreilly.com/product/9780596805838.do http://shop.oreilly.com/product/0636920021575.do http://shop.oreilly.com/product/0636920021223.do
17:17 < AAA_awright> nanashiRei: Go right to the source, RFC 2616 and http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm
17:18 < AAA_awright> Read it twice
17:18 < nanashiRei> Will do! Thanks to both of you
17:19 < AAA_awright> nanashiRei: And whatever you do, don't let anyone tell you to put an API version number in the URI, that implies a version number on the resource you're writing to, not the API. (API version numbers go in the Content-Type of the request.
17:20 < nanashiRei> I had a really long argument about just that with my boss :P
17:20 < nanashiRei> My point was yours
17:21 < AAA_awright> If someone needs a response with a particular format, e.g. an API version, you use the Accept header to indicate what versions you're capable of processing
17:21 < AAA_awright> If you submit a resource with PUT, the Content-Type indicates the version of the format being submitted. So yeah.
17:22 < AAA_awright> That's far *more* flexible because then you don't juggle around version numbers, if you need to break something, just use a new content-type
17:24 < FlowState> AAA_awright: so, out of curiousity, if you are sending a representation to an endpoint that can consume multiple types, where would you specify what you are sending?
17:24 < AAA_awright> Yes
17:24 < AAA_awright> You might say:
17:24 < AAA_awright> PUT http://example.com/posts/1 HTTP/1.1
17:24 < AAA_awright> Content-Type: application/json; profile=http://example.com/v1/post
17:25 < nanashiRei> :O
17:25 < nanashiRei> Jesus.
17:25  * nanashiRei has been enlightened
17:25 < AAA_awright> And maybe the server understand multiple ways of formatting this resource, including across multiple versions
17:26 < AAA_awright> So you can do:
17:26 < AAA_awright> GET http://example.com/posts/22 HTTP/1.1
17:26 < AAA_awright> Accept: application/json; profile=http://example.com/v1/post, application/json; profile=http://example.com/v2/post
17:26 < AAA_awright> Then you can request *any version you're capable of reading*
17:26 < AAA_awright> Pretty cool
17:27 < Nuck> I haven't used Node in a long time (or JS for that matter), have there been any new documentation systems build that don't suck yet?
17:27 < FlowState> ahh ok interesting.
17:27 < FlowState> i feel that this same pattern can also apply to requests "depths" of certain representations, which is a problem I'm currently trying to solve
17:27 < Nuck> Like, Docco uses single-line comments and is barely better than external markdown files, Dox generates JSON, and JSDoc 3 still thinks JS uses classes
17:28 < AAA_awright> Nuck: Personally I just... don't
17:29 < AAA_awright> The raw source code, properly commented, is the ultimate documentation, and then I have accompanying documentation
17:29 < AAA_awright> Nuck: If you come up with a better solution ping me
17:29 < AAA_awright> FlowState: What do you mean depths? Example?
17:29 < Nuck> AAA_awright: That's always what I've done, but I want to try some other techniques right now.
17:29 < AAA_awright> mhm
17:30 < AAA_awright> Last time I played around was a while ago, but they usually end up just pretty-printing the source code and it's like... what's the point
17:30 < Nuck> Personally I really like the documentation style of JSDoc, it provides a bit more info, but the fact that it uses Classes and (last I checked) doesn't support markdown just kills it
17:31 < Nuck> I mean, who the fuck still thinks JS uses classes?
17:31 < FlowState> AAA_awright: for example when you have a representation that is somewhat large, you may want to have a "depth" indicator for how much of a the representation you should send back
17:31 < AAA_awright> Perhaps something that could extract comments and metadata from the source code and make a formal specification out of it, using WebIDL or whatever to notate the API
17:31 < AAA_awright> Something that reads like the ECMAScript API specifications
17:32 < AAA_awright> FlowState: That would probably be a query parameter like http://example.com/resource?start=0;count=100
17:33 < eff> what is node opinion on promise, is it something to use or it's a deprecated style ?
17:33 < AAA_awright> FlowState: FlowState: But cool thing is you can use it together with media types with Content-Type Negotiation
17:33 < AAA_awright> FlowState: So you request http://example.com/post and depending on your Accept header, it sends back http://example.com/post.json or http://example.com/post.html
17:35 < FlowState> thanks, that makes sense
17:35 < AAA_awright> Nuck: I've always been planning on making my own, do you think you could draft out features that you're looking for?
17:41 < pspeter3> I have an object like this { test: { fixtures: { '123': [Function], testing: [Function] } } } and I want to write it to a file and have the function source code be the values. Is this possible?
17:43 < eff> ''+ function(foo){console.log(foo);} // will return 'function (x){console.log(x)}'
17:43 < eff> so it doesn't seem that complicated to implement
17:44 < pspeter3> eff: But does fs.write do that?
17:45 < eff> i dont know, but if it's your need i think it would be pretty straightforward to implement a version of it
17:48 < pspeter3> eff I guess the question is how to I get the value of a function as a string?
17:48 < eff> ''+myfunction
17:48 < AAA_awright> pspeter3: Strictly speaking it's not possible... though V8 is kind enough to print the source with the toString() function
17:49 < eff> myfunction.toString()
17:49 < AAA_awright> >> function f(){ 1; return 2; } f.toString();
17:49 < purr> AAA_awright: (string) 'function f(){ 1; return 2; }'
17:49 < AAA_awright> >> function   f () { 1; return 2; } f.toString();
17:49 < purr> AAA_awright: (string) 'function f() { 1; return 2; }'
17:49 < AAA_awright> hmm
17:49 < asdf12> >> (function f () { 1; return 2; })().toString()
17:49 < purr> asdf12: (string) '2'
17:50 < asdf12> just attach .toString() to the function when you call it
17:50 < eff> >> var x=function(foo){console.log(foo)}; x.toString();
17:50 < purr> eff: (string) 'function (foo){console.log(foo)}'
17:50 < AAA_awright> That's not guarenteed behavior
17:50 < AAA_awright> Please note, and you probably almost certainly should be doing something else
17:51 < asdf12> >> util.inspect(function f () { 1; return {}; })().toString()
17:51 < purr> asdf12: ReferenceError: util is not defined
17:52 < pspeter3> AAA_awright: I want to precompile doT templates and print them out to a file
17:52 < eff> this bot is pretty sweet, but it makes me curious on how is it sandboxed ?
17:52 < asdf12> though i guess util.inspect will always return a string, so you can drop the toString
17:52 < asdf12> eff: probably by vm
17:52 < genazt> eff first it is not node
17:52 < genazt> then it runs inside a vm
17:53 < AAA_awright> pspeter3: Look at the source code of how it generates that function, there should be a way to get a string instead of a function
17:53 < AAA_awright> pspeter3: It's probably generating an ECMAScript string and calling
17:53 < AAA_awright> >> var f = new Function('a', 'return a;'); f(1);
17:53 < purr> AAA_awright: (number) 1
17:53 < genazt> >> (function() { console.log(this.callee.callee) })();
17:53 < purr> genazt: TypeError: Cannot read property 'callee' of undefined
17:53 < pspeter3> AAA_awright: Ok, good thought. I'll look into that. Thanks!
17:53 < genazt> >> (function() { console.log(this.caller.caller) })();
17:53 < purr> genazt: TypeError: Cannot read property 'caller' of undefined
17:54 < genazt> >> (function() { console.log(arguments) })();
17:54 < purr> genazt: undefined; Console: {callee: function () { console.log(arguments) }, length: 0}
17:58 < nanashiRei> steffkes: http://puu.sh/2btnM >:3
17:58 < steffkes> nanashiRei: i talked not about downloading them .. :D
17:59 < chillerweb> hello all
17:59 < nanashiRei> I've paid for them, as PDF and Printed version!
17:59 < nanashiRei> There was a2+1 offer :x
17:59 < mt> Hi
17:59 < steffkes> ah okay .. nuff said *g
18:00 < chillerweb> I have just successfully run the first scenario here http://socket.io/#how-to-use but I am having trouble serving the client myself
18:00 < mt> What would be the right way to get a list of todos from a user using redis in node?
18:01 < mscdex> mt: asynchronously
18:02 < pachet> there's no right way
18:02 < mt> So I have a list of IDs which map to their corresponding hashes.
18:02 < mt> I am trying to do ids.forEach(fn)
18:02 < malkomalko> anybody have any suggestions that is not socket.io for creating scalable websockets?
18:02 < mt> and using the db.hgetall in size the fn
18:02 < mt> side*
18:02 < pachet> by id you mean user id?
18:03 < mt> So the user:todos is a redis list 
18:03 < mt> which contains ids of all that user's todos
18:04 < mt> now, once I get that list, I am trying to iterate over them using a foreach and inside the foreach I am trying to query redis to retrieve the content of that specific id
18:04 < mt> got what I am trying to say?
18:05 < mt> pachet: ??
18:06 < gluxon> What have you tried? I'm sure there's examples for iterating over Redis database structures in JavaScript.
18:07 < mt> gluxon: So I was trying to understand what TJ was trying to do here and couldn't wrap my head around it: https://github.com/visionmedia/screenshot-app/blob/master/lib/batch.js
18:08 < mt> and here is the usage of batch.js https://github.com/visionmedia/screenshot-app/blob/master/routes/main.js#L45
18:08 < mt> I am trying to do something similar and I am unable to understand the concept here. 
18:08 < jhsto> holy hell
18:08 < jhsto> it works
18:09 < jhsto> i just got data piped trough spotify web api and sent it trough websocket connection to browser which plays it
18:09 < pachet> mt: he's just collecting functions to execute
18:09 < jhsto> idk why i did it but it works
18:09 < pachet> each time one completes, he checks how many are remaining
18:10 < pachet> if there are none remaining, '--pending' evaluates as 0 (falsy), thereby invoking cb()
18:12 < pachet> mt: to your original question, the problem usually boils down to managing the possibility of your processes crashing while holding a message (todo, in your case)
18:12 < pachet> the usual solution is to use two parallel worker queues, one for unallocated tasks and one for allocated
18:13 < mt> pachet: so is `batch` acting like a queue?
18:13 < pachet> that way, you can periodically restore items in allocated to unallocated if it seems like they've taken too long to be resolved
18:13 < pachet> mt: no, it's just saying 'do this and this and this at the same time. when they're all done, let me know'
18:13 < pachet> so none of those items are queued relative to each other
18:13 < pachet> they all go out at the same time(ish)
18:14 < mt> pachet: so basically this will prevent the wrong values being spit out by foreach right?
18:15 < mt> pachet: I mean, when I run forEach on the ids, without this batch implementation, I only get back the contents of the last todo and not all the todos
18:15 < pachet> what form are the todos stored in
18:15 < mt> each todo itself is a hash
18:15 < mt> and the user has a key which has a list
18:16 < mt> of all the todo ids
18:16 < mt> since we can't store hashes inside lists in redis, I am following this approach.
18:16 < pachet> use mget(todo1, todo2, todo3)
18:16 < asdf12> json
18:16 < asdf12> and you can
18:16 < pachet> ^
18:17 < mt> oh, I didn't know that.
18:18 < mt> I want to know in general..storing a json vs using redis with a relation between user and todos
18:18 < mt> which is a better approach?
18:20 < asdf12> i guess the thing that requires the least amount of queries and manipulation?
18:20 < mt> but even if I am storing the json, how would I associate the todos with the user?
18:21 < mt> oh sorry, never mind. 
18:21 < mt> Instead of storing the IDs I can use the JSON itself
18:23 < mt> I think I just understood what TJ is doing in the batch function.
18:24 < mt> pachet: Thanks for you help :)
18:24 < mt> asdf12: Thank you :)
18:25 < pachet> mt: id use a list or a sorted set per user
18:25 < pachet> the items could be whatever json you need to signify the job
18:51 < euoia> I am reading about requirejs for managing my client-side dependencies. It seems pretty complicated! Anyone have a view on whether it is worth the effort?
18:53 < stiang> does anybody know how I can set the response charset to UTF-8 with hapi?
19:03 < AAA_awright> Nuck: Maybe I could persuade you into working on an IndexedDB implementation with me, that works with very large indexes (>4GB on disk)
19:04 < tjfontaine> surely it would be better to use something else
19:04 < AAA_awright> If you need a simple file-backed database and have no need for a server, why not?
19:04 < AAA_awright> IndexedDB is a rather complete specification, it lays out keys, ordering, indexes, transactions, ...
19:05 < spion> and its very, very verbose.
19:06 < AAA_awright> Not really?
19:06 < havvy> Write a facade if its too verbose for you. ;)
19:06 < spion> okay, remove one or two verys
19:07 < AAA_awright> It could use a more Node.js-like API
19:07 < AAA_awright> I'm not sure which API style is better though
19:08 < AAA_awright> res.onsuccess = function(){ ... } is a tried-and-true system
19:08 < AAA_awright> Maybe accept an additional argument that automatically sets those, idk
19:09 < AAA_awright> res.callback = nodejsCallback (with err and result arguments)
19:09 < spion> its not the event driven API, its that it uses DOM style events.
19:09 < spion> which isn't really necessary
19:13 < spion> var cursor = event.target.result; // does the event.target.result part make sense here?
19:14 < spion> the DOM isn't even involved.
19:14 < spion> it seems clunky to me.
19:16 < spion> but yeah, we're probably going to wrap it with a saner facade, like we do with everything browser-related
19:16 < spion> and its not really that bad.
19:18 < AAA_awright> Hmm I might do it the other way
19:18 < spion> write an implementation then also provide an IndexedDB style API?
19:18 < AAA_awright> Have a base API that defines how to do basic operations, like "Wait for lock" and such, and write IndexedDB and Node.js APIs
19:18 < AAA_awright> on top of that
19:18 < AAA_awright> Yeah
19:19 < spion> sounds good
19:19 < spion> I'm going to go and mourn the death of websql
19:19 < spion> :D
19:19 < AAA_awright> O_O
19:19 < skope> i don't get why this doesn't work: https://gist.github.com/skopetsi/5077757
19:19 < skope> it just returns undefined
19:20 < AAA_awright> One of these days I may write an implementation on top of MySQL or something
19:20 < AAA_awright> spion: Are you doing something in particular with the IndexedDB or WebSQL APIs?
19:21 < spion> we had written a mobile app that uses WebSQL
19:22 < AAA_awright> On a web browser?
19:22 < AAA_awright> Hmm
19:22 < havvy> spion: How hard would it be to write an adapter from WebSQL to IndexedDB?
19:23 < AAA_awright> To make the WebSQL API use IndexedDB?
19:23 < AAA_awright> Either way around sounds really scary
19:23 < spion> Implementing IndexedDB on top of web sql shouldn't be too hard.
19:23 < spion> I think there already is a shim for that
19:24 < spion> but the other way around, I wouldn't dare trying
19:25 < spion> infact I think thats the reason websql failed - its too hard to implement it with anything other than sqlite
19:25 < spion> :)
19:27 < avi_> Does anyone have a node.js relevant project on github that has 20+ open or closed issues associated with it?
19:28 < AAA_awright> spion: There's nothing unusual about SQLite that it requires, is there?
19:28 < AAA_awright> I haven't throughly read it
19:29 < AAA_awright> SQLite is worse because it blindly accepts any data you throw into it *shudder*
19:29 < spion> you mean any kind of data?
19:29 < AAA_awright> Yeah... writing strings to INTEGER columns
19:29 < AAA_awright> No error, even if you want it
19:29 < spion> i think thats a perfect fit for JS, where the same thing is allowed :)
19:29 < AAA_awright> And you read back out... a string
19:29 < avi_> AAA_awright: I had a similar problem with CORBA bindings back in the day.
19:29 < AAA_awright> WHY
19:29 < AAA_awright> spion: If you want a field that accepts anything, use BLOB or something
19:30 < AAA_awright> ... I forget if that's a standard field type
19:30 < avi_> AAA_awright: I was writing large ints to something IDL binding that had didn't take that size
19:30 < AAA_awright> But there could be an ANY field type, use that if you want anything
19:30 < avi_> AAA_awright: there was an implicit coercision and it dropped it the data. During unit testing it never came up because the issue was marshaling.
19:30 < spion> in sqlite types are just hints and ignored, unless its an integer primary key
19:30 < AAA_awright> Which is stupid, I want errors >_<
19:31 < spion> you would have to have the errors on the JS side too for it to work.
19:31 < AAA_awright> You could have ANY(INT) like you have VARCHAR(16)
19:31 < spion> its really too easy to make a stringy integer in JS too.
19:31 < AAA_awright> for type hinting
19:32 < spion> I'm not saying its all good - its just consistent 
19:32 < spion> :D
19:34 < spion> but the main reason I liked websql more was that SQL is powerful.
19:34 < AAA_awright> spion: W3C requires what, two implementations of a specification to continue work?
19:34 < spion> yeah.
19:34 < AAA_awright> We could totally write a WebSQL implementation
19:34 < AAA_awright> Has the charter expired yet?
19:34 < spion> don't really know
19:35 < AAA_awright> Aha, it's the Web Applications Working Group, which of course is still chartered
19:35 < AAA_awright> So at most two people could get it back on track
19:36 < AAA_awright> HIXIE DAMNIT
19:36 < AAA_awright> Nevermind
19:36 < AAA_awright> Not touching that with a 10 foot pole
19:36 < spion> what?
19:36 < AAA_awright> Hixie is the editor
19:36 < avi_> So I was googling around for a multithreaded, multicore node.js. I couldn't find much. Is the common pattern to simply run multiple instances?
19:37 < AAA_awright> avi_: Yes
19:37 < avi_> then what's the pattern for serving from that service
19:37 < avi_> sound kind of load balancer on your main port?
19:37 < AAA_awright> I think there's also cluster and similar solutions
19:37 < genazt> no
19:38 < genazt> nodejs uses ipc to communicate to the chiilds
19:38 < AAA_awright> avi_: I open up 4 processes and Nginx serves static content and load-balances between them
19:38 < genazt> the master binds the port and shares the fd of the server to the childs
19:38 < AAA_awright> Then you're not listening on port 80, either, for HTTP servers
19:38 < avi_> ok so 1 node in front as master, then children sign up to master
19:39 < genazt> thats how cluster nodejs work
19:41 < asdf12> or you can just run multiple node processes and just use whatever load balancer/reverse proxy you want
19:41 < asdf12> like nginx
19:42 < genazt> but then you must bind to different ports
19:42 < avi_> whois zetaweb
19:42 < genazt> in a nodejs cluster all childs can "bind" to the same port
19:42 < avi_> genazt: is zetaweb on freenode?
19:42 < genazt> aspen is
19:42 < asdf12> why does that matter? 
19:43 < genazt> why not ?
19:43 < avi_> asdf12: lots of corp firewalls limit http portsw
19:43 < asdf12> its all internal (within the network)
19:43 < avi_> asdf12: it is best to stick to 80,443,8080 
19:43 < asdf12> so that doesn't matter either
19:43 < avi_> ok well I mean the case of not balancing 
19:44 < avi_> or running multiple masters
19:44 < asdf12> its the same thing
19:49 < avi_> asdf12: do you have a github?
19:50 < asdf12> yea, why do you ask?
19:50 < asdf12> (just seemed random)
19:50 < avi_> if you have a project that has more than 20 issues, I can make a visualization of it.
19:50 < avi_> like this is facebook/phabricator http://softwareprocess.es/b/phabricator/
19:51 < asdf12> i see, but why me
19:51 < avi_> because we were talking to each other
19:52 < asdf12> oh i see, i don't think i have a need for that
20:03 < KPS> Does anyone know of a node module which would allow me to encode an email address and a display name into a string of the form "Display Name <email@address.com>" with all the proper escaping?
20:04 < havvy> KPS: Wouldn't that just be a function?
20:04 < KPS> What would the function be?
20:06 < sshaginyan> GUys if I have an array [one, two, three] and an object one: { two: {three: 3}} how would I access this object using the array?
20:06 < havvy> function disp (name, email) { if (!isEmail(email)) { throw new Error("Invalid email"); } return name + '<' + email + '>'; }
20:07 < KPS> But then doesn't it break if name is     My, Name <
20:07 < nanashiRei> JSON lint must be kidding me
20:07 < avi_> Do you have the components?
20:07 < avi_> name and email
20:07 < nanashiRei> is "ok" really valid json?!
20:08 < KPS> name is provided by the user so it could be anything
20:08 < avi_> nanashiRei: yes
20:08 < avi_> nanashiRei: http://www.json.org/ walk through the grammar here
20:08 < nanashiRei> ... wow :D
20:08 < avi_> there's no requirement of an enclosing object
20:08 < nanashiRei> Good... to.. know :D
20:09  * nanashiRei mubles: damnit
20:09 < havvy> KPS: Then write a regex that determines what a valid name is?
20:10 < asdf12> sshaginyan: var tmpobj; for (var i = 0, l = array.length; i<l;i++) { //get one; tmpobj = tmpobj[array[i]]; }
20:10 < nanashiRei> alphaNumeric strings :P
20:10 < KPS> I was wondering if anyone knew of a library built for it
20:10 < nanashiRei> of course that's kinda racist :(
20:10 < nanashiRei> validations
20:11 < asdf12> sshanginyan 'get one' is up to you, it depends on some stuff
20:11 < avi_> KPS: what input do you have and what output
20:11 < nanashiRei> (that's a name)
20:11 < sshaginyan> asdf12: Some people suggested to do it recursively and some suggested with Array.reduce
20:11 < avi_> nanashiRei: yes I wish DBAs everywhere would adapt to humanity instead of expecting humanity to adapt to their schemas
20:11 < KPS> Here's an example: name = "David, Batface" and email ="dbatface@gmail.com"
20:12 < avi_> KPS: are you confident that name and email are clean
20:12 < avi_> KPS: or you assume that as a precondition?
20:12 < KPS> I can't assume anything about the string name
20:12 < asdf12> sshaginyan: it'll be the same thing whichever way you do it, the part you gotta work out is how to get 'one' (the root object) which isn't hard either, just depends on what you are doing
20:12 < KPS> it could contain any characters entered by the user]
20:13 < nanashiRei> If it's user content, VALIDATE it :D users are evil.
20:13 < sshaginyan> asdf12: I'm not to sure how I would use reduce to do this thoug
20:13 < sshaginyan> though
20:13 < avi_> KPS: I can't help you with node specific knowledge, but I would recommend googling the appropriate rfc and then googling that rfc and node.js you might find an overlap.
20:14 < avi_> probably rfc 822 and 2822 and related
20:15 < asdf12> sshaginyan: its not needed to use reduce, idk why you really want to
20:15 < sshaginyan> k
20:15 < KPS> This looks like it has relevant information http://www.faqs.org/rfcs/rfc2822.html
20:15 < KPS> I would imagine writing a proper encoder would be a lot of effort
20:16 < KPS> name-addr       =       [display-name] angle-addr
20:16 < KPS> display-name    =       phrase
20:16 < KPS> phrase          =       1*word / obs-phrase
20:16 < KPS> word            =       atom / quoted-string
20:16 < KPS> atom            =       [CFWS] 1*atext [CFWS]
20:17 < avi_> KPS: https://github.com/baudehlo/Haraka/blob/master/rfc1869.js does this have anything
20:18 < avi_> KPS: that entire project might have some code relevant to your problem 
20:20 < KPS> Thanks I'll take a look
20:28 < Suala> Question: (im using socket.io) I want to set a variable on another socket from within the connect function of another socket. like io.sockets.socket(OTHER_SOCKET_ID).MyVar = X; - How would I do this?  (Using the get/set methods of socket.io will not work for me in this case since they are async and I need to set the variable of the other socket instantly)  I know the socketID of the socket I want to set the variable on.  
20:34 < Suala> Another way I could do it is simply calling an event on the other socket SERVER SIDE, but I have no idea how to call an event on another socket on the server side (all emit/send functions go right to client not server of another socketID)
20:34 < Suala> Im using socket.io
20:35 < Suala> Basically I have a turn based game and I need to tell the other socket (player) its their turn and well.. I can not do that via emiting directly to that client then bouncing back to server becuz that would make a huge security flaw in my game
20:36 < nanashiRei> encrypt it.
20:36 < Suala> Still though it would be much easier to simply set/call the other sockets var via server, makes much more sense and its quicker, i just dont know how to do it
20:37 < nanashiRei> client.broadcast?
20:37 < Suala> That sends event to clients not server though right
20:37 < nanashiRei> yes, and no
20:37 < nanashiRei> it's available for both sides
20:38 < nanashiRei> If you want security in this cycle, just wrap your game into an anonymous function
20:38 < Suala> If it sends to both thats fine, basically I just need to call another sockets SERVER event from my server, lol
20:38 < nanashiRei> go take a look at child_process
20:38 < nanashiRei> base api
20:38 < andrewaclt> Suala, something about what you're saying doesn't seem right to me
20:39 < nanashiRei> if you just need internal messaging, don't use socket.io
20:39 < Suala> andrewaclt I want to trigger another players turn via the server and not on the client side becuz then people could cheat too easily (and make it their turn)
20:40 < Lucky|Sleep> Suala, you have 1 TCP Server correct?
20:40 < Suala> nanashiRei Alright, guess I was looking in wrong lib
20:40 < Suala> Lucky Yes
20:40 < Lucky|Sleep> and you have a array of sockets?
20:40 < Lucky|Sleep> 1 sec
20:41 < skope> what is the best way to parse elements from html string?
20:41 < skope> jquery somehow crashes if tag isn't available
20:41 < andrewaclt> Suala, so, I guess I don't understand the problem of the server sending a notice to the second socket once it detects player1s turn is over
20:42 < Lucky|Sleep> Suala : http://pastebin.com/Wb9PAXKX
20:42 < Lucky|Sleep> where you have clients.push. you need to organize the sockets via some sort of game-instance
20:42 < Lucky|Sleep> then you can do Broadcast(gameinstanceid, msg)
20:42 < Lucky|Sleep> does that make sense?
20:44 < nanashiRei> lucky, socket.io has channels for this:)
20:44 < nanashiRei> client.join
20:44 < nanashiRei> i.e.
20:44 < Lucky|Sleep> that is not in the API
20:44 < Lucky|Sleep> http://nodejs.org/api/net.html
20:45 < Suala> Thanks guys I found what I wanted, just had to set the var on the actual socket (duh)  like socket.myVar = X;  so I can set/get it using io.sockets.socket(otherSocketID).myVar!!
20:46 < nanashiRei> lucky, he is using socket.io :)
20:46 < Lucky|Sleep> o is that a package?
20:46 < Lucky|Sleep> i might have to look at it :p
20:46 < nanashiRei> http://socket.io
20:46 < nanashiRei> lulz
20:47 < Suala> socket.io is a module for handling all kinds of transport protocols 
20:47 < Suala> Its super easy
20:47 < Lucky|Sleep> interesting
20:47 < nanashiRei> it's not much, but still kick ass whenever you need asynchonity + realtime
20:47 < Lucky|Sleep> ive just been using the net.TCPServer
20:47 < Suala> ^ yep, using it in my html5 game and I love it
20:48 < Suala> Well most browsers do not support websockets yet so socket.io fills the gap with like long polling and even flash sockets
20:48 < Lucky|Sleep> my next thing is to figure out crypto lol
20:48 < Lucky|Sleep> yeah im not building a webpage its c# game :P
20:48 < Suala> oh word
20:49 < Suala> Well thanks for help guys, take care
20:49 < nanashiRei> btw. about your request forgery anxiety, really just identify the client + game and with a cookie, encrypt it's content so that it's garbage to the client
20:49 < nanashiRei> if they don't provide this identity, fail the request and kick them from the session
20:55 < avi_> encryption isn't enough, you need to sign it so that tampering is obvious.
20:55 < PayPaul> If you wanted to implement co-browsing, similar to what goinstant.com does. What would be the best way to go about it? I am thinking you would need to send the DOM between users using socket.io. I am new to node.js so I am just guessing how it would be possible. 
20:56 < sshaginyan> Does express give you the url without query parameters for example I have url 'http://google.com/hello/world/how/are?query_parameters' does it give back /hello/world/how/are 
20:56 < sshaginyan> '/hello/world/how/are'
20:56 < PayPaul> sshaginyan, yeah express allows you to do that
20:57 < sshaginyan> Where is it inside of request?
20:57 < sshaginyan> it's not request.url
20:58 < PayPaul> sshaginyan, I have to run but try asking about it in #express
21:01 < sshaginyan> PayPaul: That channel is dead
21:01 < Industrial> Are there any projects e.g. on github so I can view the code that make use of streams heavily? I've taken a look at https://github.com/substack/stream-handbook but I'm not sure where I can use a stream instead of another construct in my app.
21:03 < asdf12> there's a few
21:03 < asdf12> well i mean a lot, streams are everywhere
21:03 < asdf12> any time there is IO
21:04 < Industrial> yeah, but I understand the technology but not it's application to my/arbitrary problems.
21:04 < asdf12> well fs, net, http, etc. anything that uses those modules would be using streams, so you can check those out or check projects that use them
21:05 < asdf12> sshaginyan: i think it's req.path
21:05 < Industrial> at some point I want to have something like this http://images.gammatester.com/pics/c837ff41f59a396b3e96f1af759d3484.png
21:05 < sshaginyan> asdf12: How do you find these things?
21:05 < asdf12> i have no idea, i'm just recalling from memory
21:06 < sshaginyan> lol
21:07 < sshaginyan> asdf12: From now on you shall be known as my little hash table
21:07 < asdf12> i think i was playing around and just doing console.log(req)
21:07 < asdf12> to see whats available
21:07 < sshaginyan> kk
21:09 < Industrial> asdf12: so should I create a HTTPRequestStream from a httpServer (in the reverse proxy) and pipe that to the hostname router which has some routes (with streams) registered and sends the http requests to one of its output streams based on the route function of each over the input request
21:12 < asdf12> sure
21:24 < H4ns> i have an express (?) question:  i have a route that needs to set a certain content type and then serve a static file.  i would prefer not to read the file into memory, and i guess there is a simple way to just call some other handler to serve the file's content.  any pointers?
21:25 < H4ns> ah. res.sendfile().  thanks for reading.
21:28 < steffkes> he guys, i do need a quick hint, on how to extract words from the following text: http://dpaste.org/zEwPz/ - the needed words are already marked with an _NN .. but somethings there are only single words (like the Partei_NN at the beginning) other times i have two (or even more words) combined (like Aspen_NN -_$( Institut_NN -_$( Direktor_NN) on the right .. any ideas how to start? my first thought would be split( /\s/ 9 but i'm not sure i
21:37 < avi_> substack: I plotted the topics arising from github issues showing up in the commits for your project node-browserify: http://softwareprocess.es/a/Vnuo0I50/#node-browserify
21:38 < asdf12> \]
21:41 < asdf12> how about doing /(\s+)_NN/g ?
21:42 < avi_> steffkes: I would tokenize and then grep for NN's
21:43 < steffkes> avi_: okay, and the how to combine those which stand side-by-side?
21:44 < steffkes> avi_: or maybe tokenize not was an dumb split( /\s/ ) ?
21:44 < Industrial> asdf12: I'm not sure where I went wrong; https://gist.github.com/Industrial/1c035f39a816a306dd1e#file-server-js-L51 since I pass the same kind of argument on L14
21:44 < avi_> steffkes: yeah, avoid a dumb split perhaps
21:45 < asdf12> oh, i didnt mean to do split
21:45 < asdf12> just do a match
21:45 < asdf12> all wrapped in () will be captured
21:46 < steffkes> avi_: okay but what to do instead? *g i mean that's what this question is all about (:
21:49 < sshaginyan> Guys how would I incrementally check if an object exists
21:49 < sshaginyan> ?
21:49 < sshaginyan> so I have var one = { a: { b: {c : 4} } }
21:49 < havvy> if (a && a.b && a.b.c)
21:50 < asdf12> industrial: i think you missed the point? the req, and res are streams
21:50 < sshaginyan> havvy: What if the objects are dynamic 
21:51 < havvy> `a.b` is just syntactic sugar for a['b]
21:51 < havvy> `a.b` is just syntactic sugar for a['b'] **
21:52 < Industrial> asdf12: got it working tho https://gist.github.com/Industrial/80d5e58b4afc77c9c7f4 i guess you are right.
21:53 < asdf12> yea but, that code isn't ok
21:53 < avi_> steffkes: oh recursive parser
21:53 < avi_> steffkes: I assume your parens are closed?
21:54 < avi_> steffkes: get the tokens and parse it with a recursive descent parser ( a handful of tiny functions manually made by yourself )
21:54 < avi_> steffkes: or use a lexer/parser generator if you're comfortable with that
21:55 < avi_> steffkes: I am making lots of assumptions about your data
21:56 < asdf12> Industrial: a stream is basically this, s = new Stream, s.write('hi'); // nothing happens, it goes nowhere really
21:56 < asdf12> industrial: but i can take 's' and pass it around and do s.on('data', function() { // this gets called anytime there's data }
21:57 < asdf12> and now when i do s.write('some data') , that previous function gets called
21:59 < asdf12> for example your code (you are overriding write and end of stream) and attaching extra properties on a stream object, which isn't really using streams
22:00 < steffkes> avi_: i know (regarding the assumptions), i can provide a lot more boring (german) text, if you like :p
22:00 < steffkes> avi_: but i guess i have an idea where to start from .. will see how that goes
22:08 < Industrial> asdf12: I was under the impression I could emit any data type, not just strings/buffers.
22:08 < Industrial> So I was trying to emit httprequest objects around :P
23:06 < chilts> dominictarr: xmonad (sorry for the delayed reply) :)
23:07 < dominictarr> chilts: no, you mentioned another one… something like xmonad, but with tabs as well
23:08 < chilts> maybe ion3 (seems to be no longer developed) or probably i3
23:10 < dominictarr> thats it!
23:29 < ningu> is there a way in node to generate json objects with duplicate keys?
23:30 < avi_> ningu: not safely
23:31 < avi_> ningu: most implementations will cast to a dictionary/hash
23:31 < ningu> avi_: safely meaning what?
23:31 < ningu> I'm not worried about how it will be interpreted where I'm sending it
23:31 < avi_> ningu: you will most likely lose the extra key value pairs 
23:31 < ningu> that api is well defined
23:31 < ningu> I just need to be able to generate the json
23:32 < ningu> I can do it myself suppose, was just wondering if there's already a facility for it
23:32 < avi_> Why do you need duplicate keys
23:32 < avi_> use a library to do it, don't do it by hand. 
23:32 < ningu> because that's how you use the api
23:32 < avi_> ningu: https://github.com/douglascrockford/JSON-js this popular
23:33 < ningu> ok, but I already have JSON.stringify in node
23:33 < ningu> the question is how to make it generate output like '{"a":1,"a":2}'
23:34 < avi_> most implementions will not allow that
23:34 < ningu> remember, I didn't define this api, I'm just trying to use it
23:34 < ningu> I'm not talking about "most implementations", I'm talking about node.js, which is one implementation.
23:35 < ningu> anyway, this is why I'm saying I just want to generate the string manually, because I don't see how else to do it.
23:35 < MI6> joyent/node: Aaron Cannon master * 0c57b31 : doc: Add crypto.pseudoRandomBytes, fix typo (+1 more commits) - http://git.io/o-1jLg
23:36 < avi_> why can't you send {"a":[1,2]}
23:36 < ningu> because the api won't accept that.
23:37 < ningu> I wouldn't design an api this way. but they did.
23:37 < avi_> in XML is perfectly acceptable to <obj><a>1</a><a>2</a></obj>. For json objects all it says it is unordered key value pairs.
23:38 < ningu> they can be interpreted as ordered, if you want to interpreted them that way for a particular implementation. it's undefined.
23:38 < avi_> So what I am saying is it is implicitly allowed according to JSON.org but not done in implementations
23:38 < ningu> http://wiki.apache.org/solr/UpdateJSON
23:38 < ningu> it is done in that implementation.
23:38 < ningu> and that's the one I'm using.
23:39 < ningu> fortunately order is not relevant in my particular case
23:39 < havvy> avi_: Because JSON is based on JavaScript objects where {"a":1, "a":2} is either a type error (strict mode) or will either end up with "a" being 1 or 2.
23:39 < ningu> I just need to generate multiple keys in any order
23:39 < avi_> ningu: will you only need duplicate keys at the top level?
23:40 < ningu> yeah
23:40 < avi_> then choose your hack
23:40 < avi_> make a list
23:40 < avi_> to json it
23:40 < ningu> basically I want to do {"delete": {}, "delete": {}, ... }
23:40 < avi_> convert from and end [ ] to { }
23:40 < avi_> or convert each subobject to json, join the json objstrings by , and tack a { and } on each end
23:41 < avi_> handwaving here: '{' + commands.map( JSON.stringify )  + '}'
23:41 < avi_> oops
23:41 < avi_> handwaving here: '{' + commands.map( JSON.stringify ).join(',\n')  + '}'
23:42 < ningu> yeah, something like that will work
23:42 < avi_> ningu: most json implementations are going to drop keys/values non-deterministicly
23:42 < ningu> it's funny because perl has a cpan module for doing this automatically, but node doesn't :P
23:42 < avi_> oh I don't have any node knowledge
23:42 < ningu> I realize that. I never thought this was a sensible thing to do, but the solr api requires it.
23:42 < avi_> I'm just giving you a possible solution
23:42 < avi_> why not look for a solr module
23:43 < havvy> The api requires JSON with duplicate keys?
23:43 < avi_> like https://github.com/gsf/node-solr
23:43 < avi_> havvy: yeah
23:43 < ningu> havvy: if you want to delete more than one doc in a single request, yes.
23:43 < havvy> Then the API doesn't require JSON. ;)
23:43 < avi_> havvy: { "delete":{}, "delete":{} }
23:43 < avi_> no
23:43 < avi_> go read JSON.org
23:43 < avi_> An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma).
23:43 < avi_> it doesn't ban dupes
23:44 < avi_> unordered set is questionable..
23:44 < avi_> SET bothers me
23:44 < havvy> Okay, yes it does.  :/  "The names within an object SHOULD be unique."
23:45 < avi_> show me please
23:45 < havvy> That's annoying.
23:45 < havvy> (It does allow duplicates) 
23:45 < havvy> http://www.ietf.org/rfc/rfc4627.txt?number=4627
23:46 < ningu> avi_: btw, that node-solr module is pretty basic, it's not really worth it in my case. something like your hack is about all I can do
23:46 < avi_> 3. SHOULD   This word, or the adjective "RECOMMENDED", mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.
23:46 < avi_> lame
23:46 < avi_> havvy: yeah "allowed" 
23:46 < avi_> ningu: I think my hack is least-evil
23:47 < ningu> I suppose if there was a node module that generated solr xml it would work... but that's not worth it for just this one use case in my script
23:47 < ningu> and I don't feel like doing the xml myself :)
23:47 < avi_> Oh god do not do that ;_;
23:47 < avi_> that's why RSS is unparseable
23:47 < avi_> people used templates instead of XML generators
23:47 < ningu> that's one of the reasons I'm porting this script to node
23:48 < havvy> The guy who wrote the SOLR API....I don't like him.
23:48 < ningu> havvy: it's a fairly thoughtless port of the xml api
23:48 < avi_> if the order matters
23:48 < avi_> then it should be a list
23:48 < avi_> hehe should
23:48 < avi_> we already ran into that one today
23:48 < ningu> yeah, the solr api designers heard that should and ignored it :)
23:48 < avi_> https://www.ietf.org/rfc/rfc2119 <-- should
23:49 < avi_> from an xml standpoint it makes sense that an object could be specified that way
23:49 < avi_> some people are really against xml collection tags
23:49 < ningu> I guess they just wanted to be able to transform it into xml easily
23:49 < avi_> like <entities><entity/></entities>
23:50 < avi_> ningu: do you have a github
23:50 < ningu> although json -> xml seems a bit backwards, but since solr is written in java I suppose that's how they did it
23:50 < ningu> yeah, how come?
23:50 < ningu> I don't have any code up there to speak of
23:51 < avi_> if you had a project you contributed to with 20+ issues on it I could visualize it like this: http://softwareprocess.es/b/phabricator/
23:51 < avi_> that was facebook phabricator (not the best example)
23:51 < ningu> hmm, ok
23:52 < ningu> well, I was kinda involved with express and jade but mostly just to bug tj
23:52 < havvy> I'm surprised there's no standard XML <--> JSON transformation.
23:52 < ningu> I don't think he incorporated any particular suggestions
23:52 < avi_> XML is really complicated
23:53 < avi_> <content>this is <b>XML</b></content>
23:53 < avi_> how do you convert that to json
23:54 < avi_> {"type":"content", "_inner":["this is",{"type":"b", "_inner":["XML"]}]} ?
23:55 < havvy> { xml: { tags: [{"tag": "content", "_inner": ["this is", { "tag": "b", "_inner": ["XML"]}]}]}}
23:56 < avi_> there are XML patterns and I think a good json to xml converter should provide some kind of wizard, that lets you follow a path of choices that allows you to deal with your subset of XML.
23:56 < avi_> what I've seen is XMLDOM structure just dumped as json
23:56 < avi_> that's common
--- Log closed Mon Mar 04 00:00:13 2013
