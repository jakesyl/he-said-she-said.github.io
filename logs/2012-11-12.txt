--- Log opened Mon Nov 12 00:00:54 2012
00:05 < garbagecollectio> can someone take a look at my code
00:05 < garbagecollectio> and tell me if it is legit mvc event observer model
00:36 < dshaw_1> Node Knockout demos livestream starting in 5 minutes.
00:41 < ChrisPartridge> dshaw_1: linkage?
00:42 < mscdex> can't hear them
00:44 < mscdex> that's better
00:52 < warz> In a C++ addon, i have a module function in which i instanciate a Local<Object>. I want to pass that as a parameter to another function. Should that function accept a Local<Object>, or Persistent<Object>?
00:52 < warz> or neither, and something else that i dont know of?
01:01 < warz> http://create.tpsitulsa.com/wiki/V8/Handles#Persistent_Handles
01:01 < warz> boo this man! write about persistent handles
01:09 < ack006> owen1: i assume you want to do line-oriented regex match, node-tail-native looks to me like chunk oriented
01:09 < ack006> owen1: have a look at 'carrier' module: https://github.com/pgte/carrier
01:10 < ack006> owen1: grab a hold of 'line' event and do your matching there.
01:11 < mscdex> node.js rules!
01:11 < dshaw_1> sup
01:11 < benzenwen> hello
01:11 < mscdex> node.js rules!
01:11 < benzenwen> yo
01:11 < visnup> omgomgomg we're on a video
01:11 < ack006> amen!
01:11 < mappum> NKO ftw
01:11 < cconstantine> live from our demo!
01:11 < rvagg> w00t! I'm famous!
01:11 < dshaw_1> live nko3 demo
01:12 < mmansour> DEMO day!
01:12 < benzenwen> this
01:12 < AdrienBrault> yay!
01:12 < benzenwen> could
01:12 < benzenwen> be
01:12 < mmansour> Spam time!
01:12 < benzenwen> usful
01:12 < mscdex> woohoooooooooooooooooooooooooooooooooooooooo!
01:12 < cooperq> w0000
01:12 < Hotroot> wtf is happening
01:12 < Hotroot> woot
01:12 < ack006> *sssssppppaaaammmm*
01:12 < taterbase> get off my lawn!
01:12 < mmansour> GitLoved!
01:12 < benzenwen> ok,
01:12 < benzenwen> or maybe not
01:12 < mscdex> THE CAKE IS A LIE
01:12 < cooperq> <script>alert('xss');</script>
01:12 < mmansour> It is a lie!
01:12 < mappum> everyone not part of KNO is really confused right now
01:12 < taterbase> sprouthelp.com
01:12 < AdrienBrault> nice :)
01:12 < mmansour> :)
01:12 < mappum> lololol
01:12 < mappum> <script>while(true{}</script>
01:12 < Hotroot> Really though, sometimes I'm working in node and I just think "Damn, I really love node". Happens every couple weeks.
01:12 < mappum> <script>while(true){}</script>
01:12 < mmansour> XSS Attack FTW!!! lol
01:13 < russfrank> wat
01:13 < Sly> That was pretty good.
01:13 < russfrank> was someone demoing a nodejs irc client
01:13 < mappum> i froze their demo, sorry
01:13 < ack006> :-)
01:13 < mappum> they gotta open a new tab
01:13 < russfrank> lol
01:13 < cooperq> damn you mappum !
01:13 < Hotroot> mappum: You're the DCPU guy, right?
01:13 < mappum> yeah :P
01:13 < visnup> sorry to everyone who was in this channel before it got invaded by a demo
01:13 < ack006> prolly using google speech api as well
01:13  * Hotroot is bad with names
01:14 < mappum> Hotroot: i recognize your name, what DCPUU thing did you do?
01:14 < Hotroot> mappum: Jack shit.
01:14 < ack006> go 2 a party with your smahtphhoune and fire up irc client with speech input
01:14 < cooperq> hehee, everyone in this channel is so confused now
01:14 < Hotroot> Just kidding. I wrote upack, and am working on the roguelike/adventure engine
01:14 < mappum> should i make their site redirect to lemonparty w/ xss?
01:15 < nrub> mappum, why not?
01:15 < ack006> mappum: if goatse === too much to ask :-/
01:15 < mappum> aww, too late
01:15 < Hotroot> mappum: Better the wikipedia page on XSS
01:15 < mappum> i was going to do rickroll
01:15 < mappum> Hotroot: lol
01:15 < Hotroot> mappum: Your site is down
01:16 < Hotroot> Time for some of the meatiest code I've ever written. The rules and lobby for Pai Gow Poker
01:17 < Hotroot> First time using socket.io too
01:18 < xavier_> Hotroot: was my discovery of the weekend as well.
01:18 < xavier_> Sometimes, code can be simple and elegant
01:20 < Hotroot> xavier_: Yeah =) Just wrote register/login code for this site, and I was amazed at how neatly it can be completely async
01:20 < Hotroot> After all, why wait for DB calls?
01:25 < owen1> ack006: looking at carrier. can i listen to log files with it? why do i see createServer there?
01:25 < ack006> owen1: don't worry, any stream will do, files too :-)
01:26 < owen1> ack006: what do u think of this - https://github.com/hakobera/tail.io/blob/master/lib/linereader.js   
01:27 < ack006> for carrier, have a look at this so answer: http://stackoverflow.com/a/11987281/588561
01:27 < owen1> tail -f logs/* | node server.js where server.js will use the linereader
01:29 < ack006> owen1: looks interesting, too bad it's locked away in a lib, hakobera could make a separate module out of that
01:29 < ack006> code reuse etc.
01:30 < owen1> ack006: lib? i don't care, i am going to take only the linereader file
01:30 < ack006> sure :-) copy & paste are your friends :-)
01:30 < owen1> ack006: it sees shorter and readable compare to carrier
01:31 < ack006> owen1: sure, but maybe later you want to stream the files over the net, etc. anyway, it's your call :)
01:32 < jrajav> Is there a difference between a string returned from buffer.toString('utf8') and buffer.toString('utf16le')?
01:32 < jrajav> i.e. is there any such thing as a utf8 JS string?
01:32 < jrajav> Or is a string always utf16le?
01:36 < owen1> ack006: interesting, i think i get the approach that carrier took. you can pass any readable stream as the first argument. it can be process.stdin (as in my case) 
01:36 < hcabnettek> is there a best practices for forms authenticcation available for node.js applications?
01:39 < ack006> owen1: if you want to take it *really* e-zy, check out 'lazy': http://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js
01:42 < ack006> owen1: it sure doesn't look acync but trust me: it is :-)
01:42 < ack006> but no events to worry about
01:42 < ack006> async
01:50 < owen1> ack006: so i can pass process.stdin into Lazy? interesting
01:50 < ack006> yup :-)
01:52 < ack006> and also any other stream: net, army ants, flock of pigeons (rfc 1149) :-)
01:52 < owen1> WAT
01:52 < ack006> lol
01:53 < owen1> can u share your github account? i am curious
01:53 < ack006> sure :-) https://github.com/ackalker
01:54 < ack006> not too much general stuff there yet, i'm going 2 the core 8-)
01:54 < ack006> just made pull request for debug symbol fix
01:55 < ack006> soon we can do symbolic profile of node with systemtap, not just dtrace :-p
01:56 < owen1> ack006: systemtap? what is that
01:56 < ack006> a system probing / profiling tool for linux.
01:56 < ack006> http://sourceware.org/systemtap/
01:57 < owen1> ack006: so we don't need smartOS to have fancy profiling with flames and fire?
01:57 < ack006> ....jup (shshsh i don't want to upset joyent)
01:59 < owen1> that's awesome. cool. so it will be easier to understand bottlenecks on linux.
01:59 < ack006> yup, that's the plan :)
01:59 < Hotroot> Hope nobody minds an expressjs question.
02:00 < owen1> Hotroot: express is overused, in my opinion
02:00 < ack006> np, but it's not .my. specialty :-)
02:00 < Hotroot> The common thing to do is some sort of static file grabbing for pages.  Does this get cached? Otherwise isn't it /way/ faster to just preload the page into a var (or however into memory) and then serve from there?
02:01 < Hotroot> Then only at startup does the HDD need to be accessed for that
02:02 < Hotroot> I get that if you have hundreds of pages it's different, but for simple sites would that not be faster?
02:02 < owen1> Hotroot: good question. not sure..
02:02 < Hotroot> For example, I do "var welcomePage = fs.readFileSync("index.html", "utf8"); "
02:03 < Hotroot> That loads it into memory for the duration of node
02:03 < Hotroot> Then I can just res.type("html"); res.send(welcomePage);
02:03 < Hotroot> And it seems to work fine. I do it for the main CSS file too. Static is a given for images, but eh
02:05 < Hotroot> I know that DB's do something similar, where they try to load into RAM
02:05 < ChrisPartridge> Hotroot: nothing wrong with that, should be able to wrap it up in a nice middleware
02:06 < Hotroot> But if express does it by default (e.g. caches after first read) then it's a waste of time
02:08 < mdedetrich> what is the variable for the current running project root
02:08 < mdedetrich> in node.js
02:08 < Hotroot> Well, dang, guess they thought of everything
02:08 < Hotroot> http://www.senchalabs.org/connect/staticCache.html
02:09 < abhatnag> hey guys, I'm having trouble in a simple NJS app located here: https://github.com/abhishekbh/tw_migrator. The problem occus in line 19 in index.js. I believe it is a problm of synchrocitiy.
02:13 < TehShrike> abhatnag: you probably don't want tags and status to be global, I'd hope?
02:13 < TehShrike> Also, you should pastebin the exact error
02:13 < JHoglund> Let's say I created my web server using require('http').createServer(), and that I have two async code snippets (for example, fetching two pieces of data from Redis). How do I know when to call request.end()? I guess I need to somehow keep track of whenever all my async calls have finished?
02:14 < JHoglund> I guess I should add that I'm coming from a linear, blocking background, having programmed PHP for 10 years, but made some asynchronous stuff in the browser, although it sometimes confuses me
02:16 < TehShrike> JHoglund: sounds like you're looking for something like this https://github.com/caolan/async#parallel
02:16 < abhatnag> TehShrike: You're right, I don't need them to be global. Also, there is no exec error. The problem is that 'tags' in jade does not contain any of the values pushed into it through the csv method.
02:16 < Hotroot> JHoglund: If you know how many there are, you can always just set a simple count too
02:16 < Hotroot> so var count = 0;
02:16 < owen1> what's the easiest way to send email with node (debian server)
02:16 < TehShrike> abhatnag: I would start by applying console.log and debugging, then
02:16 < abhatnag> My purpose of doing the callback was that the status would be 'should work' once tags is updated through the csv process. Now, even though the status is updated, tags is not. I'm sure I'm doing something wrong.
02:17 < TehShrike> owen1: I've had happy success with nodemailer
02:17 < Hotroot> Then you can check and increment at the callbacks to see if it's all done
02:17 < JHoglund> Hotroot: I guess that this async thing will keep growing, the idea is to do almost everything with callbacks, right? Relaying on a global counter seems a bit hard to maintain?
02:17 < abhatnag> TehShrike: oh heh, I had a fair amount of that, I cleaned it up in the process of throwing it up on github. As an FYI, a console.log below the tags.push() would yield the correct result in terminal
02:17 < JHoglund> TehShrike: Thanks, looks like what I'm searching for :)
02:17 < abhatnag> TehShrike: I suppose the problem is order of execution?
02:18 < abhatnag> If you go back three or so commits in that repo, you'll see some of the loggin btw
02:18 < Hotroot> JHoglund: His lib is probably better. Yeah, callbacks are key. I've done it in an app that just had 2 DB checks going. Why use a lib when I can write that time in 5 seconds? Easy because of closures too.
02:18 < owen1> TehShrike: thanks
02:20 < TehShrike> JHoglund: and logging data, as well as the stringified version of it, as well as the contents of tags, would all show the correct data?
02:20 < owen1> TehShrike: this one, right? https://github.com/andris9/Nodemailer 
02:20 < TehShrike> JHoglund: no problem.  Essentially, all that one function does is a fancy wrapped-up version of what Hotroot was suggesting.
02:20 < TehShrike> owen1: yup, that's the one - does what it says on the tin, and without any fiddling!
02:22 < JHoglund> TehShrike: Oh, crap, if I keep building my site together, piece by piece, with data from callbacks... How about ordering, store all pieces in separate variables and have a block at the end which puts everything in order and dispatches to the browser?
02:22 < TehShrike> JHoglund: what do you mean by ordering?
02:22 < substack> JHoglund: if you can, try not to build up state through lots of callbacks
02:22 < TehShrike> ^
02:22 < substack> use events and streams
02:22 < substack> http://callbackhell.com/
02:22 < owen1> JHoglund: before using any control-flow library look at this slides: http://creationix.com/utahjs/slides.html#27
02:23 < owen1> JHoglund: many times you can simply use counters.
02:23 < JHoglund> TehShrike: Say I fetch "latest news" from an rss, I look up two items in a database, retrieves some info about the current user and so. I'd have like five different async calls, eventually finishing, each one with it's own block of html code
02:23 < TehShrike> I haven't used a flow control library yet.  I was looking around at them when I was getting started in node, but haven't felt it necessary since then.
02:24 < Hotroot> "connect.staticCache() is depreciated" =/
02:24 < Hotroot> Wow, real helpful. I'm not setting up a reverse proxy because they don't like this simple function
02:25 < TehShrike> JHoglund: well, I'd wait to format the data into HTML until after all the data had come back
02:25 < Hotroot> Anyway, I am very happy because it looks like static() ends the middleware chain =)
02:26 < TehShrike> JHoglund: substack might be able to point you to a good model using streams or events there - barring something reasonable there, I'd be tempted to make a quick implementation of that "parallel" function to do the async map/reduce operation that it looks like you're working towards
02:26 < JHoglund> TehShrike: Storing all the data from different calls in different variables, somehow get a notification that all processes(threads, actions, what do you call them?) are done and then dispatch to some sort of template layer?
02:32 < TehShrike> JHoglund: http://hastebin.com/duweqanefi.js ?
02:33 < JHoglund> TehShrike: What if I would have getDataAboutOtherElement() aswell?
02:34 < TehShrike> You mean you have two different kinds of elements, some of which require you to get data from somewhere else?
02:34 < TehShrike> JHoglund: in that example, getDataAboutThatElement gets called for each item in array_of_request_data
02:35 < TehShrike> If you accept some handwaving above that pseudo-JavaScript, anyways
02:36 < JHoglund> TehShrike: I do not really get this, although I can read the code and work out most of what it's doing. I'll continue experimenting on my own a bit, thanks so much for your help :) I guess I'll grasp this pretty soon :)
02:37 < TehShrike> Yeah, keep plugging away at it, it starts making more and more sense pretty soon :-)
02:38 < TehShrike> JHoglund: Chapter 6 of Eloquent JavaScript did a good job of blowing my mind so that it could get put back together properly: http://eloquentjavascript.net/chapter6.html
02:38 < JHoglund> TehShrike: Thanks, I'll read up on it :)
02:41 < JHoglund> TehShrike: Let's say I'm building a recipe site and want to store recipes, all recipes have at least a name and a unique identifier, a part from that, they can contain almost anything, some might have an "experience level", some a dish type (dessert, main course...), and some a set of ingredients. The set of properties will probably vary over time, I'd like to store everything as objects somewhere and easily do searches on whatever prope
02:41 < TehShrike> That sounds like a database issue more than an async/JavaScript issue
02:42 < JHoglund> Im used to build tables in MySQL and use PHP to fetch data, not that flexible. I imagine I could just toss json data to some service directly from Node.js and get it back somehow?
02:42 < TehShrike> Well... why not use MySQL?  I like relational databases myself
02:43 < TehShrike> You can access MySQL handily enough with node.js, too
02:44 < TehShrike> Throw your model layer into a module that will talk to the database and accept/return arrays of objects or whatever
02:44 < JHoglund> TehShrike: Then I would need to sit down and decide whichever properties a recipe can have, and I need to set up extra tables for relations. In previous projects, it has sometimes became an issue that I feel relational mapping doesn't really support
02:45 < TehShrike> Well, fair enough, if you'd rather use a key/value store over a relational database, go ahead and roll with that
02:45 < TehShrike> There are many options for databases
02:49 < shesek> is there a way to asynchronously write to stdout?
02:53 < chilts> shesek: http://stackoverflow.com/questions/5127532/is-node-js-console-log-asynchronous
02:53 < chilts> not sure if that is still up to date, but looks like it is async
02:53 < shesek> chilts, I just read that
02:53 < shesek> read the beginning of the answer: "Update: Starting with Node 0.6 this post is obsolete, since stdout is synchronous now."
02:53 < shesek> Based on https://groups.google.com/forum/?fromgroups#!topic/nodejs/jIXC2uGh9YU
02:54 < chilts> ah, ok, sorry
02:54 < TehShrike> You could throw the console.log behind a nextTick call, I guess
02:55 < shesek> TehShrike, it'll still be synchronous, and still block execution while writing
02:56 < TehShrike> Well, it would be asynchronous
02:56 < TehShrike> But you're saying you want it to be handled by a different process?
02:57 < shesek> I want it to be handled in the same way writing to files works, asynchronously
02:57 < chilts> putting something in a nextTick() does not make it async
02:57 < shesek> in the same process, but in a non-blocking manner
02:57 < chilts> it just means it'll be called in the next tick
02:58 < shesek> I'm writing some logging information, that's picked up and sent to syslog, than drained to remote servers
02:58 < shesek> as I'm logging quite a lot of information (request objects, error objects, database result objects, etc) I'd really prefer for it to be asynchronous
02:59 < chilts> can you use something other than stdout - ie. write those bits of info using some kind of web service API
02:59 < chilts> or write to a file and send that to the remote servers every so often
02:59 < TehShrike> This sounds like the sort of thing people might use streams for
03:00 < shesek> yeah, its possible to (it goes to Loggly eventually, who does have an HTTP API, and even an winston transport)
03:00 < shesek> but simply writing to stdout and letting something else handle it is much nicer
03:00 < shesek> I can still access it directly via syslog, drain it to multiple servers, archive it using general syslog tools, etc
03:01 < shesek> syslog has been around for years and has been field tested very well, I'd rather use that if possible
03:07 < TehShrike> I vaguely remember seeing a module that would split streams apart on newlines and send them down a new stream.  I suppose you could stream your output down that with console.log on the other side and maybe get some of the benefit you were looking for?
03:09 < hij1nx> TehShrike: https://github.com/voodootikigod/node-serialport/blob/master/serialport.js#L25-38
03:10 < TehShrike> word.
03:17 < Hotroot> Anyone here used a VPS for a node app before? I would really appreciate being able to PM a few questions, mainly regarding DNS/email
03:17 < shesek> I think I can do fs.write(process.stdout.fd, "foobar")
03:18 < aetcore> Hotroot: does your VPS have your mail and DNS Server on the same server?
03:18 < Hotroot> I'm still looking at hosts
03:18 < Hotroot> Just found a wiki for the most promising one though, I'll check
03:19 < aetcore> Hotroot: the way i have things set up, is DNS Is handled by the domain manager, Emails are set up with Google Apps (Free account) then i just use Apache to proxy the ports of my NodeJS App
03:19 < Hotroot> aetcore: Also, I can pay extra for things like cPanel and DirectAdmin, etc. How necessary are they? It comes with SolusVM by default
03:19 < aetcore> Hotroot: erm
03:19 < aetcore> what are you using the server for?
03:20 < aetcore> just a single app?
03:20 < Hotroot> Yeah, webserver
03:20 < aetcore> or an App plus some other websites?
03:20 < shesek> or, actually, fs.createWriteStream('/dev/stdout'), than write to it
03:20 < Hotroot> Single site at first at least
03:20 < aetcore> if you using just a single app, i would go for something like Heroku, or Nodejitsu
03:21 < Hotroot> Considering it, but they sometimes have weird requirements
03:21 < aetcore> The problem is that CPanel uses Virtual Hosts and stuff in a different way
03:21 < aetcore> its not the wrong way, but its different and will conflict with your nodejs app
03:21 < aetcore> if it was me i would set up just a plain jane server
03:21 < Hotroot> I mean I'm not a total linux noob, I *could* do this with a VPS right now, I'm just not too knowledgeable about management apps, dns, etc.
03:21 < aetcore> but if your not comfortable using only the command line that could be a problem
03:21 < aetcore> oh right
03:22 < aetcore> pro tip, keep it seperate
03:22 < Hotroot> I'm fine with a plain CLI server
03:22 < shesek> hmm... seems like process.stdout is already a writestream... but configured to be synchronous?
03:22 < aetcore> your app just needs to point to your server, so you use A records in the DNS
03:23 < hij1nx> mscdex: dont you have a twitter account?
03:23 < aetcore> and on the server you either set up port 80 to receive all traffic for your nodejs app, or you set up certin ports to be proxied by apache or nginx
03:23 < Hotroot> SolusVM has what I /need/, like reinstalling OS, bandwidth usage, etc. but I think cPanel and such can help with DNS and email
03:23 < aetcore> Other Webservers i have no experience in
03:23 < Hotroot> I don't want to use apache / nginx at all
03:23 < hij1nx> this is AWESOME SAUCE https://github.com/mscdex/ssh2
03:24 < aetcore> Cpanel cant (afaik) manage your nodejs apps
03:24 < Hotroot> You're right, but I thought DNS / email was more system wide
03:24 < Hotroot> Also, if my host goes down, doesn't email get messed up, as messages could be lost?
03:25 < aetcore> yes that is, but DNS and Mail is heavily built into Cpanel and the hosting acocunts, which is where your app would conflict
03:25 < aetcore> yes
03:25 < aetcore> that is correct
03:25 < Hotroot> So screw cPanel
03:25 < mscdex> hij1nx: nope, no twitter :-)
03:25 < aetcore> hence keep it seperate
03:25 < aetcore> pretty much sorry :)
03:25 < Hotroot> Is DNS/email easy enough to manage CLI?
03:26 < hij1nx> mscdex: well, twitter is useful. but anyway NICE WORK ON SSH2!!
03:26 < aetcore> emailis, bind (9) is pretty intense
03:26 < mscdex> hij1nx: thanks
03:26 < Hotroot> I mean I don't want anything fancy. I want Gmail to forward me my emails to a personal account, and as for DNS, no subdomains or anything, just my www address
03:26 < Hotroot> And SSH
03:27 < aetcore> domains im no good with sorry, you would have to ask around for that
03:27 < hij1nx> mscdex: tmpvar and I have been writing a streaming git implementation in node, https://github.com/hij1nx/git-stream -- SSH2 should help a lot
03:28 < Hotroot> Kk, I mean I can find some basic guides, I'm just trying to see how painful this is, if I need plugins, etc.
03:28 < aetcore> you should be ok
03:28 < Hotroot> Anyway, gtg. Will receive any sent messages, and may have to ask you something later on, haha
03:28 < aetcore> cya
03:28 < Hotroot> Thanks, really appreciate it btw
03:28 < aetcore> np
03:29 < mscdex> hij1nx: awesome!
03:29 < mscdex> one less thing for me to write :-)
03:31 < hij1nx> mscdex: still, your input and/or contributions would be awesome awesome awesome ;)
03:36 < mmalecki> mscdex: hey
03:36 < mscdex> mmalecki: yo
03:36 < mmalecki> mscdex: your module is absolutely awesome
03:36 < mmalecki> mscdex: I'm finishing writing up a simple test for it, want it :) ?
03:37 < mscdex> mmalecki: go ahead and send a PR, i probably won't get a chance to look at it until tomorrow though.
03:37 < mmalecki> mscdex: definitely cool :)
03:40 < mmalecki> mscdex: are you working on a server too by an accident?
03:40 < mscdex> mmalecki: nah
03:40 < mmalecki> mscdex: cool, I have to write one then ;)
03:42 < mscdex> mmalecki: the RFCs are pretty good, so with sufficient time and effort one could write one without a huge headache
03:42 < mscdex> figuring out the crypto stuff was what took me the longest
03:43 < mscdex> i'm just thankful that node's crypto module provides enough functionality to do everything that's necessary
03:43 < mmalecki> mscdex: yup
03:44 < mmalecki> mscdex: I'm in process of removing your globals too ;)
03:49 < joeandaverde> Our demo for nko3: http://www.youtube.com/watch?v=xe_egMUoZxY&feature=youtu.be @node_knockout @joeandaverde @russellmadsen @JoeLongstreet 
04:00 < TehShrike> Man, I just can't figure out how to get Chrome to quit saying "Invalid date" for my cookies' "expires" values
04:01 < TehShrike> How is 'Expires=' + expiration.toUTCString() not good enough?
04:33 < airtanah_> anyone have a better command line parser than 'commander'?
04:49 < ChrisPartridge> airtanah_: optimist?
04:49 < Valdez> Hi, question, if I want a primer on node.js uses would node-express-boilerplate be the way to go ? https://github.com/mape/node-express-boilerplate
04:50 < Valdez> That is, by using node-express-boilerplate, do I get a variety of what Node.js can do?
04:50 < Valdez> Or is that a year old and their are better packages?
04:50 < Valdez> I don't know my use case :)
04:52 < ChrisPartridge> Valdez: have you played with node at all?
04:52 < Valdez> In previous lives, yes
04:53 < Valdez> Recently, not really, I think I have attended a few hour lectures on using nodejs for message passing like a chat room... I understood that
04:53 < Valdez> Over the past 2 years ^
04:55 < ChrisPartridge> Personally I think it's a bad idea to jump into something that's a big mash of available packages, come up with something simple you want to build, and piece together the parts yourself
04:55 < Valdez> ... so then it sounds like those packages do showcase node.js power?
04:55 < Valdez> I am an abstractionist :)
04:55 < Valdez> I like through myself in the void
04:56 < Valdez> sp/void/deep *
05:43 < chovy> .
06:07 < chovy> someone with mocha want to look at this?
06:07 < chovy> http://stackoverflow.com/questions/13330289/why-does-beforeeach-not-run-on-the-2nd-describe-statement-in-mocha
06:07 < chovy> my first beforeEach is only firing for the first set of tests
06:15 < chovy> is anyone in here?
06:28 < vicapow> so i'm trying to write a module for reading an ice file with c++ plugin
06:28 < vicapow> anyone know anything about converting 8bit colors to 32bit?
06:30 < syskk> what's an ice file?
06:31 < vicapow> syskk: typo. ICO
06:31 < vicapow> windows ICO icon file
06:31 < syskk> eheh ok, thought you meant iced coffeescript file
06:32 < syskk> there's probably a few open source libraries that can do that, i suggest you look how they do this
06:32 < vicapow> syskk: any suggestions?
06:33 < syskk> you're writing a C++ module or you a JS module?
06:33 < vicapow> syskk: Im writing a C++ module
06:33 < vicapow> syskk: I've already got most of it done but it's not working for 8bit ICO files
06:35 < vicapow> syskk: originally, i tried using this
06:35 < vicapow> syskk: with no luck
06:35 < vicapow> syskk: https://gist.github.com/4057823
06:38 < syskk> vicapow: no idea sorry. I know next to nothing about graphic stuff :(
06:39 < vicapow> syskk: it's all good. this is probably the wrong channel for this type of question anyway but I just thought i'd try my luck
06:42 < syskk> vicapow: this might help you : http://graphicsmagick.hg.sourceforge.net/hgweb/graphicsmagick/graphicsmagick/file/99a925f1e0ee/coders/icon.c
06:42 < vicapow> syskk: oh, awesome. i'll take a look
06:50 < owen1> is there a common folder to put my start / stop scripts ?
06:50 < owen1> i use scripts/start-production and scripts/start-dev
07:19 < khurram> hi guys
07:32 < aetcore> owen1: you could use a ./bin/ folder
07:34 < owen1> aetcore: inside my project's repo?
07:34 < aetcore> yup
07:35 < aetcore> *most* executables normally go inside a bin folder
07:35 < aetcore> to keep them seperate from the actual app it self
07:36 < aetcore> so /project/bin
07:36 < aetcore> if that makes it easier
07:37 < owen1> aetcore: yeah. got it
07:48 < samholmes> Welcome
07:49 < samholmes> How do I deal with application crashes due to an error? My whole site goes offline until I SSH in and restart it.
07:49 < Zoney> you cry, or use something like forever
07:49 < deoxxa[cookies]> samholmes: depends how ghetto you want to be about it
07:50 < deoxxa[cookies]> samholmes: there's always the old `while true; do ./app.js; sleep 1; done;'
07:50 < Zoney> i prefer cry
07:50 < deoxxa[cookies]> samholmes: or you might want to take advantage of whatever mechanism your operating system provides
07:50 < deoxxa[cookies]> samholmes: or you might want to go with a node-based thing, such as forever, as Zoney mentioned
07:51 < samholmes> Zoney: Wha? Why don't you use forever or something?
07:52 < Zoney> i need a good cry every 15 minutes
07:52 < samholmes> deoxxa[cookies]: I see. But, a crashing app shouldn't be detrimental to the application (session data should be backed up by something like redis so the user doesn't have to login, as an example).
07:52 < Zoney> hmm, does something like forever log the errors?
07:52 < deoxxa[cookies]> Zoney: forever does
07:52 < Zoney> ok
07:53 < deoxxa[cookies]> samholmes: correct... point?
07:53 < samholmes> deoxxa[cookies]: This is how I design my application, of course. But, how do I let the user know that something went wrong and show them a fail whale or something?
07:53 < Zoney> i personally like to write programs that don't crash.
07:53 < Zoney> process.on("exit", function() { ... });
07:53 < samholmes> Zoney: But, how do you guarantee that your app won't crash?
07:54 < Zoney> i'm the world's best programmer
07:54 < deoxxa[cookies]> samholmes: dunno, it's a bit hard to answer that. consider the case where you've already started sending data to the client - what are you supposed to do then?
07:55 < owen1> i am trying to run forever start <my script> and i get 'unexpected token .' it doesn't like that i have .weechat : tail -f .weechat/logs/*
07:55 < owen1> btw, my script is working fine without forever
07:55 < Zoney> actually, i used something else but i can't remember what
07:55 < deoxxa[cookies]> owen1: gist or it didn't happen
07:56 < owen1> deoxxa[cookies]: https://github.com/oren/stream-mailer/blob/master/bin/start-production
07:57 < deoxxa[cookies]> that's... not javascript
07:57 < owen1> deoxxa[cookies]: true. it's a bash script
07:57 < deoxxa[cookies]> then why are you trying to run it as javascript?
07:57 < deoxxa[cookies]> read the forever docs
07:57 < owen1> oh
07:57 < deoxxa[cookies]> even reading `forever --help' will tell you what you want to know
07:58 < samholmes> It is best to write apps that don't crash I guess.
07:58 < samholmes> dur
07:59 < deoxxa[cookies]> samholmes: that's not that hard, surprisingly enough. using libraries that don't crash? that's another problem all together though
07:59 < owen1> deoxxa[cookies]: do i need to wrap my code in a javascript file?
07:59 < samholmes> Something like forever would be good though. Does forever restart apps that change, files change, modified, edited, updated...
07:59 < deoxxa[cookies]> owen1: ...
07:59 < samholmes> ?
07:59 < deoxxa[cookies]> owen1: did you read the help output?
07:59 < owen1> deoxxa[cookies]: reading it now
07:59 < deoxxa[cookies]> samholmes: it can
08:00 < deoxxa[cookies]> samholmes: it doesn't by default, but you can ask it to
08:00 < samholmes> Is this a good idea?
08:00 < deoxxa[cookies]> samholmes: that doesn't make sense in production though
08:00 < deoxxa[cookies]> it can be useful for development
08:01 < samholmes> The setup I have is using git to deploy
08:01 < samholmes> I have a bare repo that has a hook to automatically checkouts changes to my app directory.
08:02 < deoxxa[cookies]> samholmes: use that same hook to start/restart your app then
08:02 < deoxxa[cookies]> samholmes: i have the same kind of setup
08:02 < samholmes> I could, but then it could be bad for users to have the app restart before requests are finished.
08:02 < deoxxa[cookies]> and... that's going to be solved by having forever restart your stuff when files change?
08:03 < samholmes> deoxxa[cookies]: Apparently not, not with your comment. I recall there being a library that does a graceful restart.
08:03 < samholmes> I think it was nodemon or something
08:10 < samholmes> Could someone mention my name?
08:11 < ettinger> howdy
08:12 < Zoney> samholmes
08:13 < ettinger> samholmes: 
08:13 < forzabiz> ciao
08:14 < samholmes> thanks
08:29 < owen1> deoxxa[cookies]: i appologize. but i read the --help and also the docs online.. i used to run it by passing a bash script ( in other projects)
08:29 < deoxxa[cookies]> owen1: `forever --help | grep node'
08:30 < owen1> deoxxa[cookies]: yeah. i guess i was wrong
08:31 < owen1> deoxxa[cookies]: my program is reading stdin of a stream. so i need to tail a log and pipe it into my node app. log -f .weechat/logs* | node server.js     how do i use forever in this scenario?
08:32 < owen1> i can wrap this in a node script that uses child_process, but it seems too complex.
08:32 < deoxxa[cookies]> owen1: your underlying assumption is broken
08:32 < deoxxa[cookies]> owen1: i.e. "i need to run this with `tail'"
08:33 < deoxxa[cookies]> https://github.com/forward/node-tail
08:33 < owen1> tail is a well know unix command. i thought it's an elegant solution....):
08:34 < deoxxa[cookies]> i'm not sure anything that involves "i have to run this by piping the output of another program into it or it won't work" can be called elegant...
08:35 < deoxxa[cookies]> but anyway, you can just set the command to "sh" for forever
08:35 < owen1> deoxxa[cookies]: node-tail is doing fs.watchFile and on every change it creates  fs.createReadStream    isn't that expensive or not needed when tail already available?
08:35 < deoxxa[cookies]> and run your silly script
08:35 < deoxxa[cookies]> lol, how do you think tail works
08:35 < deoxxa[cookies]> it's the same thing
08:36 < deoxxa[cookies]> when you have such a high volume of irc data that opening filehandles is a bottleneck, reinvestigate your options
08:36 < deoxxa[cookies]> until then, don't try to micro-optimise these things
08:37 < owen1> deoxxa[cookies]: interesting. i'll think about this option. thanks! btw (don't get mad) - what do u mean 'set the command to sh for forever' ?
08:37 < deoxxa[cookies]> see the help output for forever
08:38 < deoxxa[cookies]> it's explained there
08:38 < ettinger> all of a sudden my app is doing circular redirects
08:38 < ettinger> all i'm doing is running selenium on it
08:40 < [AD]Turbo> hi there
08:41 < mscdex> ola
08:43 < ettinger> does anyone use node on mac? it seems really buggy
08:43 < ettinger> compared to linux
08:43 < ettinger> i can only login halfl the time.
08:45 < owen1> deoxxa[cookies]: i am afraid that reading the help again was not productive. i guess i am missing some basic knowledge about unix process. i tried grep for some keywords, but it didn't help as well. would u mind elaborating about the sh option? feel free to ignore me if you think it's not approporiate question on this chat!
08:46 < deoxxa[cookies]> forever -c sh your_script_file.sh
08:56 < ettinger> man, this shit is buggy as hell on a mac
08:57 < Nasga> ettinger: ?
08:59 < ettinger> i'm getting constant recursive redirects and the session disappears underneath me
09:00 < ettinger> works fine on debian
09:00 < owen1> deoxxa[cookies]: now it's running it but it's not in the background. as soon as i hit ctrl+c, it kill the process
09:01 < owen1> and all the output is in the console instead of the -o out.log
09:01 < deoxxa[cookies]> owen1: come on man, this isn't hard.
09:01 < deoxxa[cookies]> owen1: read the docs, it's all very well explained. compare it to whatever else you were doing before.
09:02 < owen1> deoxxa[cookies]: it all depends on your experience or knowledge
09:02  * SomeoneWeird slaps deoxxa[cookies] 
09:02 < SomeoneWeird> dont b meen
09:02 < ettinger> is this normal to see two node processes with supervisor?
09:02 < ettinger> https://gist.github.com/e354238804cc0b558785
09:02 < owen1> nothing is hard, u just need to know what u'r doing (:
09:02 < deoxxa[cookies]> owen1: it's not useful for me to just spoon feed you everything. you need to learn how to find this information yourself.
09:04 < owen1> deoxxa[cookies]: ok. i'll give it another try tomorrow. it's already 1 am and my brain is dead. thanks a lot. just don't forget, not everyone is equal, and each got his own experince/background.
09:06 < owen1> deoxxa[cookies]: found it. i was missing 'start'
09:06 < deoxxa[cookies]> yay!
09:07 < deoxxa[cookies]> and now you feel accomplished
09:07 < owen1> and drained
09:07 < deoxxa[cookies]> haha
09:10 < ettinger> everytime i run my test, i then get a recursive 302 to /
09:12 < ettinger> Irssi: Unknown command: -clear
09:13 < ettinger> woops, wrong chan
09:13 < astropirate> :|
09:13 < astropirate> irssi is for people that have too much time on their hands :\
09:13 < astropirate> lol
09:13 < ettinger> or a server
09:13 < ettinger> that's up 24/7
09:14 < SomeoneWeird> ... THEN you use znc
09:14 < ettinger> znc?
09:14 < SomeoneWeird> bounce
09:15 < ettinger> what is that?
09:16 < SomeoneWeird> you're using irssi and you don't know what a bounce is?
09:16 < SomeoneWeird> :o
09:16 < ettinger> no
09:17 < deoxxa[cookies]> http://www.youtube.com/watch?v=3M2cFGtKG0k
09:17 < deoxxa[cookies]> sage francis makes you wanna BOUNCE
09:17 < ettinger> bounce is whatw you do when you leave a party
09:35 < xcat> What the hell is up with NPM installations
09:36 < xcat> Why has it created a folder called node_modules in my project directory?
09:36 < xcat> I thought it was supposed to install them in some kind of central repoistory
09:37 < substack> xcat: it installs them in the most local place
09:37 < substack> because that solves dependency hell
09:37 < xcat> Besides that it also copied the whole thing to my home directory
09:37 < xcat> So I should get used to the idea that node modules can and will be spammed all over the place?
09:38 < deoxxa[cookies]> xcat: well, that's an option - another would be to read up on how modules work
09:38 < substack> xcat: when you require() you get the nearest node_modules up the directory hierarchy
09:38 < substack> so your dependencies can depend on different versions of things than your main app
09:39 < substack> versions don't need to be in sync, dependencies just get the version they need
09:39 < substack> and you can update dependencies without worrying about breaking compatibility in some far away place deep into your dependency graph
09:40 < substack> here's the algorithm that describes how the node_modules resolution works: http://nodejs.org/docs/latest/api/modules.html#modules_loading_from_node_modules_folders
09:40 < substack> I have spent so much time on other platforms fighting version numbers due to incompatibility issues
09:40 < substack> but not in node
09:41 < substack> at least for libraries
09:59 < rvagg> substack: shouldn't you be catching up on sleep after nko?
09:59 < rvagg> nice work btw
09:59 < substack> nah
09:59 < substack> adrenaline from almost getting mugged probs
10:00 < rvagg> ahh yea, that sucks, did you have to run?
10:00 < substack> yes
10:00 < substack> the assailants were following my friend and I briskly then they started running
10:00 < substack> and before that we passed them on the street
10:00 < substack> so they were clearly picking us off as targets
10:01 < rvagg> but gave you enough chance to sus them out
10:01 < substack> good thing they weren't very good sprinters
10:01 < rvagg> well, at least you're ok!
10:01 < substack> sus?
10:05 < deoxxa[cookies]> substack: australian (maybe also british) slang - meaning to inspect, investigate, gain information on, etc
10:06 < deoxxa[cookies]> substack: originally an abbreviated form of "suspect" or "suspicious", being used as an adjective to describe a person or situation
10:06 < deoxxa[cookies]> THE MORE YOU KNOOOOOOWWWWW
10:10 < rvagg> sorry, what he said
11:05 < strk> can the built-in ZLib support inspect .zip packages (filenames in it)
11:24 < deoxxa[cookies]> strk: short answer "no", long answer "yes, with some work"
11:24 < sshaginyan> Hey guys I have some html in a string. Is there an easy way to  get all the hrefs?
11:26 < deoxxa[cookies]> sshaginyan: use a rege^H^H^H^Hproper xml parser
11:26 < mdedetrich> man ffs
11:26 < mdedetrich> stupid fuken comodo
11:26 < mdedetrich> site is still not working in IE8
11:27 < sshaginyan> deoxxa[cookies]: I have no idea wha that is I did google it
11:27 < deoxxa[cookies]> sshaginyan: what did you google
11:28 < sshaginyan> rege proper xml parser
11:28 < deoxxa[cookies]> lol
11:28 < _geo> o.0
11:29 < deoxxa[cookies]> sshaginyan: apparently you never used slow terminals back in the days of dos. ^H is a control character for deleting the previous character... anyway, you want/need an xml parser. do `npm search xml parser' or `npm search html parser' or something similar.
11:30 < Kvisle> sshaginyan: he started typing regex, then corrected himself ... this is amusing; http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags 
12:50 < CestSebastian> hey guys, i'm trying to implement my own solution for static content serving, here is the code: http://pastebin.com/hNiLBfUT , although it works fine it seems (relatively) slow. Is this because it serves the files sequentially, where other (non-nodejs) solutions can serve files in parallel?
12:51 < SomeoneWeird> CestSebastian, why implement your own..?
12:51 < SomeoneWeird> http://www.senchalabs.org/connect/middleware-static.html
12:55 < CestSebastian> thanks, SomeoneWeird, but i'm just trying to understand as much as possible how node works
12:55 < SomeoneWeird> :)
12:56 < CestSebastian> SomeoneWeird, do you happen to know if static serves files in parallel?
12:58 < sebmck> why not take a look at the source for the connect static middleware then?
12:58 < sebmck> https://github.com/senchalabs/connect/blob/master/lib/middleware/static.js
12:58 < CestSebastian> thanks
13:10 < garbagecollectio> ssl on my nodejs app wont work
13:10 < garbagecollectio> does anyone know why
13:10 < garbagecollectio> the cers are self signed and shit and they used tow rok
13:10 < garbagecollectio> but now when i connect the browsers dont connec
13:10 < garbagecollectio> t
13:10 < deoxxa[cookies]> oh yeah i know why it's not working
13:10 < sebmck> you aren't giving enough information
13:10 < deoxxa[cookies]> it's because of line 14 in app.js
13:10 < deoxxa[cookies]> go fix that
13:11 < SomeoneWeird> garbagecollectio, its because of your garbagecollection, go fix that
13:11 < garbagecollectio> var app = module.exports = express.createServer();
13:11 < garbagecollectio> var https = module.exports = express.createServer({key:privateKey, cert:certification, rejectUnauthorized: false});
13:11 < garbagecollectio> var privateKey = fs.readFileSync(__dirname + '/ssl/aib-ssl.key').toString();
13:11 < garbagecollectio> var certification = fs.readFileSync(__dirname + '/ssl/aib-ssl.crt').toString();
13:11 < SomeoneWeird> dont fking paste code here
13:11 < garbagecollectio> thats it
13:11 < SomeoneWeird> use pastie or something
13:12 < SomeoneWeird> maybe because you're reading the files after you create the server......?
13:12 < garbagecollectio> no its before
13:12 < deoxxa[cookies]> no. it's not.
13:12 < sebmck> you're aware that the first module.exports is redundant too?
13:13 < SomeoneWeird> wat
13:13 < garbagecollectio> yup its before
13:13 < deoxxa[cookies]> no, it's not
13:13 < garbagecollectio> in the code, it is...
13:13 < deoxxa[cookies]> ...
13:13 < garbagecollectio> sorry bro
13:13 < SomeoneWeird> wat
13:13 < garbagecollectio> i mean so its not connecting, the browsers wont connect
13:13  * SomeoneWeird confused as fuck
13:14 < deoxxa[cookies]> garbagecollectio: so wait a second
13:14 < SomeoneWeird> you're using express 2, by the way
13:14 < SomeoneWeird> and you're not calling .listen
13:14 < sebmck> garbagecollectio: upload your code somewhere
13:14 < garbagecollectio> im using the new version of express
13:14 < garbagecollectio> but has that deprecated line
13:14 < garbagecollectio> could that be it?
13:14 < deoxxa[cookies]> garbagecollectio: you've given us some code there, in a shitty way (pasted it into the channel), then you say "oh but that's not how it is in the file"
13:15 < deoxxa[cookies]> garbagecollectio: how about you paste the actual file, somewhere else (gist.github.com is popular)
13:15 < garbagecollectio> sebmck: i cant unfortuntatrly
13:15 < garbagecollectio> i cant
13:15 < deoxxa[cookies]> well that sucks
13:15 < sebmck> why not
13:15 < garbagecollectio> well
13:15 < garbagecollectio> its production code
13:15 < sebmck> how do you expect us to help otherwise
13:15 < deoxxa[cookies]> haha
13:15 < sebmck> censor out sensitive parts then
13:15 < garbagecollectio> ok one sec
13:16 < deoxxa[cookies]> garbagecollectio: if that's your production code, well, lol
13:16 < yawnt> ò/ deoxxa[cookies] 
13:16 < SomeoneWeird> lmao
13:16 < deoxxa[cookies]> garbagecollectio: why do you have something in production when you clearly have -no idea- how it works?
13:16 < deoxxa[cookies]> sup yawnt
13:16 < garbagecollectio> sebmck: http://pastebin.com/gtCqU5uu
13:17 < garbagecollectio> i do know how it works
13:17 < yawnt> deoxxa[cookies]: just arrived @ college.. i had pizza
13:17 < garbagecollectio> its not working
13:17 < yawnt> now we're doing java applets in html
13:17 < SomeoneWeird> obviously not..
13:17 < yawnt> deoxxa[cookies]: ya?
13:17 < sebmck> lmao
13:17 < deoxxa[cookies]> garbagecollectio: lolll you're genuinely retarded
13:17 < sebmck> haha
13:17 < garbagecollectio> does it matter if i dont have routes required in?
13:17 < SomeoneWeird> lmao
13:17 < deoxxa[cookies]> garbagecollectio: you're not actually reading the private key anywhere there
13:18 < garbagecollectio> sorry that part didnt paste
13:18 < garbagecollectio> var privateKey = fs.readFileSync(__dirname + '/ssl/aib-ssl.key').toString();
13:18 < deoxxa[cookies]> lol @ creating two completely separate express instances
13:18 < garbagecollectio> assume i am
13:18 < deoxxa[cookies]> i'll assume nothing
13:18 < garbagecollectio> actually we need two express instances u dumb ass
13:18 < deoxxa[cookies]> no, you don't actually
13:18 < deoxxa[cookies]> haha
13:18 < garbagecollectio> we do
13:18 < charliesome> garbagecollectio: can you show us was 
13:18 < SomeoneWeird> lmao
13:19 < garbagecollectio> 80 and 443
13:19 < charliesome> garbagecollectio: can you show us what 'fs.readFileSync(__dirname + '/ssl/aib-ssl.key').toString()' returns?
13:19 < deoxxa[cookies]> var app = new express(), https_server = https.createServer(app), http_server = http.createServer(app);
13:19 < deoxxa[cookies]> garbagecollectio: you're clearly a pro
13:19 < SomeoneWeird> don't call people dumbasses, if you've posted mutated code, and asking for help
13:20 < SomeoneWeird> oh, AND using deprecated code
13:21 < deoxxa[cookies]> garbagecollectio: you're doing some weird stuff there - why are both of those apps configured completely differently? and why is the non-https version only configured for production?
13:21 < garbagecollectio> anyone have any idea why
13:21 < garbagecollectio> https isnt working
13:21 < SomeoneWeird> omfg.
13:21 < sebmck> ok you've made that clear to us
13:21 < garbagecollectio> yeah but havent heard anything towards that end
13:21 < sebmck> why do you even have a self-signed cert in production anyway
13:21 < SomeoneWeird> and we havn't heard anything helpful
13:22 < garbagecollectio> this isnt self signed
13:22 < garbagecollectio> err
13:22 < garbagecollectio> it is self signed in dev
13:22 < deoxxa[cookies]> <garbagecollectio> the cers are self signed and shit and they used tow rok
13:22 < charliesome> garbagecollectio: can you paste what that line of code returns? we need to make sure it's behaving as expected
13:22 < garbagecollectio> yeah they are self signed
13:22 < sebmck> wtf
13:22 < deoxxa[cookies]> ...
13:22 < sebmck> you're giving us mixed messages
13:22 < garbagecollectio> charliesome, fuck u 
13:22 < garbagecollectio> no one knows the answer
13:22 < SomeoneWeird> DUDE
13:22 < deoxxa[cookies]> <garbagecollectio> this isnt self signed
13:22 < garbagecollectio> wow u guys are terrible
13:22 < deoxxa[cookies]> <garbagecollectio> the cers are self signed and shit and they used tow rok
13:22 < deoxxa[cookies]> garbagecollectio: slow down a bit, man
13:22 < SomeoneWeird> you just suck at communicating garbagecollectio 
13:22 < SomeoneWeird> and being nice
13:22 < deoxxa[cookies]> garbagecollectio: i'd like to help you here
13:22 < garbagecollectio> the prod certs arent self signed the dev certs are
13:23 < sebmck> garbagecollectio: we're trying to help you
13:23 < sebmck> but you're being an asshole
13:23 < garbagecollectio> im not
13:23 < deoxxa[cookies]> garbagecollectio: just... let's go back to the beginning
13:23 < SomeoneWeird> you are
13:23 < garbagecollectio> ok go
13:23 < sebmck> <garbagecollectio> charliesome, fuck u 
13:23 < garbagecollectio> sebmck, he asked to see the output of the readfile of a private key 
13:23 < deoxxa[cookies]> garbagecollectio: i'd like to get some of the more obvious things out of the way first - they can mask other problems
13:23 < garbagecollectio> tell me what to do
13:23 < garbagecollectio> i have half an hour then i get fired
13:24 < deoxxa[cookies]> garbagecollectio: why are you assigning app to module.exports, then https to module.exports straight after? are you actually using the module.exports value?
13:24 < sebmck> so
13:24 < garbagecollectio> yes
13:24 < SomeoneWeird> lols
13:24 < deoxxa[cookies]> garbagecollectio: how?
13:24 < garbagecollectio> my question: if i don't include routes is that a big deal
13:24 < SomeoneWeird> no
13:25 < deoxxa[cookies]> garbagecollectio: that's a problem in itself
13:26 < deoxxa[cookies]> garbagecollectio: if you're somehow using module.exports, it's probably not set to what you expect it to be set to
13:26 < garbagecollectio> im noy using module.exports
13:26 < garbagecollectio> i just changed the code
13:26 < sebmck> yes you're
13:26 < deoxxa[cookies]> you... just said you were
13:26 < SomeoneWeird> omfg.
13:26 < sebmck> you even posted code
13:26 < garbagecollectio> i was wrong
13:26 < garbagecollectio> s
13:26 < garbagecollectio> so i deletd the code
13:26 < garbagecollectio> it doesnt nee to be there
13:26 < sebmck> so you've been employed to maintain a codebase
13:26 < garbagecollectio> but this is again not the issue
13:26 < sebmck> and you have no idea how it works?
13:26 < sebmck> and you expect to keep that job?
13:26 < garbagecollectio> i didnt write that part
13:26 < deoxxa[cookies]> garbagecollectio: oh ok. what is the issue then?
13:27 < garbagecollectio> the issue is the ssl certs are working
13:27 < garbagecollectio> the connection cant  be established
13:27 < garbagecollectio> arent*
13:27 < garbagecollectio> it has worked before
13:27 < garbagecollectio> on an older version of express
13:27 < garbagecollectio> .createServer is deprecated
13:27 < deoxxa[cookies]> yes
13:27 < garbagecollectio> i am wondering if that has anything to do with it or not
13:27 < SomeoneWeird> yes
13:27 < SomeoneWeird> so don't use it.
13:27 < SomeoneWeird> >.<
13:27 < deoxxa[cookies]> so why are you using express 3.x if you don't know why?
13:27 < garbagecollectio> i mean do u think it has something to do with?
13:27 < deoxxa[cookies]> use 2.x
13:27 < SomeoneWeird> https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x
13:27 < deoxxa[cookies]> i'm not saying it'll fix it
13:28 < deoxxa[cookies]> but it's another problem on its own
13:28 < deoxxa[cookies]> which will make finding the actual problem much harder
13:28 < garbagecollectio> so u guys basically dont know
13:28 < garbagecollectio> what to do here
13:28 < garbagecollectio> connection is interrupted error
13:28 < deoxxa[cookies]> ...
13:29 < garbagecollectio> routes are not defined, its not being required
13:29 < deoxxa[cookies]> garbagecollectio: you're probably not going to be able to fix this in the next 30 minutes
13:29 < deoxxa[cookies]> garbagecollectio: so if you're going to get fired anyway, i suggest you spend that time reading reddit or something instead
13:30 < sebmck> or looking at job classifieds
13:30 < garbagecollectio> hm
13:30 < deoxxa[cookies]> sebmck: mmm, maybe something in the hole-digging or tree-cutting industries
13:31 < garbagecollectio> its funny how pathetic u all are
13:31 < garbagecollectio> u think u know how to do everything on computers
13:31 < sebmck> deoxxa[cookies]: i hear maintaining legacy php codebases is always fun
13:31 < garbagecollectio> and also how to strategize in life
13:31 < garbagecollectio>  but ur just losers
13:31 < garbagecollectio> i dont even know why ur on this chatroom right now
13:31 < garbagecollectio> what fucking time is it
13:31 < deoxxa[cookies]> garbagecollectio: i'm 100% a loser, you're correct
13:31 < deoxxa[cookies]> it's 2:30pm here
13:31 < garbagecollectio> and then u say u can help
13:31 < garbagecollectio> but u cant
13:31 < garbagecollectio> oh ur not americans?
13:31 < sebmck> we can help
13:31 < garbagecollectio> no fucking shit
13:31 < garbagecollectio> u cant help
13:31 < deoxxa[cookies]> garbagecollectio: we're trying to help, man
13:31 < garbagecollectio> u have no idea
13:32 < deoxxa[cookies]> garbagecollectio: you're not making it easy is all :)
13:32 < sebmck> but right now, it's the equivalent of you going to the mechanic and saying the light on your dashboard is flashing
13:32 < garbagecollectio> ur suggestions are completely off
13:32 < sebmck> and giving no additional information at all
13:32 < garbagecollectio> no i pasted relevant code
13:32 < deoxxa[cookies]> sebmck: "no you can't look under the hood, that's a production deployment"
13:32 < garbagecollectio> i gave u that express
13:32 < sebmck> you barely gave us the code
13:32 < garbagecollectio> express tidbit where i said it was 2.x to 3.x
13:32 < garbagecollectio> thats all the code u need for this issue
13:32 < sebmck> and then when questioned about it you kept on changing your story
13:32 < deoxxa[cookies]> sebmck: "i know it says low oil, but it's not the oil. i know this because of reasons."
13:33 < sebmck> deoxxa[cookies]: "wow, you don't know whats the issue? psssshh... and you call yourself a mechanic. you don't know anything about cars"
13:33 < SomeoneWeird> i think garbagecollectio needs a +q to chill out for a bit
13:34 < garbagecollectio> no i think i need u to tell me what the fuck is wrong with the code
13:34 < garbagecollectio> thats al i need from u
13:34 < deoxxa[cookies]> i've given you a bunch of things that are wrong with it
13:34 < sebmck> we don't owe you shit buddy
13:34 < garbagecollectio> why is this not working
13:34 < deoxxa[cookies]> you ignored all of them :)
13:34 < SomeoneWeird> we don't have to help you
13:34 < garbagecollectio> ive asked u two questions
13:34 < garbagecollectio> u havent answered
13:34 < SomeoneWeird> we don't have to help you
13:34 < garbagecollectio> yes i am smarter than u
13:34 < SomeoneWeird> hahaha
13:34 < garbagecollectio> i need u to answer my questions is all
13:34 < sebmck> lmao
13:34 < deoxxa[cookies]> lol
13:34 < SomeoneWeird> okay you keep thinking that
13:34 < sebmck> if you were smarter than us you would've fixed it already?
13:34 < garbagecollectio> 1)do i need to include routes
13:34 < deoxxa[cookies]> you're adorable, garbagecollectio
13:34 < sebmck> i just want to pinch his cheeks
13:34 < garbagecollectio> 2)what are the implications of 2.x vs 3.x on createserer
13:34 < garbagecollectio> u dont have any answer
13:35 < garbagecollectio> u dont know
13:35 < SomeoneWeird> i fucking gave you the answers
13:35 < sebmck> you were linked to relevant upgrade information
13:35 < garbagecollectio> u instead complain about module.exports, LOL
13:35 < SomeoneWeird> https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x
13:35 < garbagecollectio> no
13:35 < garbagecollectio> thats how to upgrade
13:35 < SomeoneWeird> YES.
13:35 < SomeoneWeird> NO.
13:35 < garbagecollectio> thats not what i asked
13:35 < SomeoneWeird> READ IT
13:35 < SomeoneWeird> ffs.
13:35 < SomeoneWeird> yes, it is
13:35 < SomeoneWeird> <garbagecollectio> 2)what are the implications of 2.x vs 3.x on createserer
13:35 < SomeoneWeird> read that fucking link
13:35 < garbagecollectio> lol
13:35 < sebmck> ctrl+f createServer
13:35 < garbagecollectio> this isnt shit
13:35 < SomeoneWeird> inb4ragequit
13:36 < sebmck> here i'll even do it for you
13:36 < sebmck> express.createServer() is now simply express() (but remains for BC).
13:36 < sebmck> Keep in mind that the return value of express() is no longer an http.Server instance. (See the Application function section below for more details)
13:36 < SomeoneWeird> oooooh see!
13:36 < SomeoneWeird> where did you get that from SebastianFlyte ?
13:36 < SomeoneWeird> woops, sebmck ?
13:36 < garbagecollectio> so this has nothing to do
13:36 < deoxxa[cookies]> lol garbagecollectio, tell the truth. you're a professional ruseman aren't you? you're here to deliver tasty, delicious trollbait, right?
13:36 < garbagecollectio> with my problem
13:36 < garbagecollectio> why isnt it working
13:36 < garbagecollectio> comeon
13:36 < garbagecollectio> put ur heads together
13:36 < garbagecollectio> a
13:36 < garbagecollectio> nd 
13:36 < sebmck> SomeoneWeird: i called upon the joyent gods in a satanic ritual
13:36 < garbagecollectio> tell me why it cant connect on ssl
13:36 < SomeoneWeird> maybe you should fuck off 
13:37 < garbagecollectio> put ur fucking head stogether and come up with an idea
13:37 < SomeoneWeird> we don't need to tell you anything
13:37 < garbagecollectio> have u guys run SSL on node.js before?
13:37 < SomeoneWeird> maybe you should learn to code
13:37 < sebmck> holy shit
13:37 < garbagecollectio> i doubt it
13:37 < garbagecollectio> otherwise u would have a fucking clue
13:37 < sebmck> you self-entitled little shit
13:37 < garbagecollectio> u havent mentioned shit
13:37 < deoxxa[cookies]> garbagecollectio: no, never, i don't know how to do it. i'm new at node.js can you teach me some things?
13:37 < garbagecollectio> "waaaa the module.exports"
13:37 < SomeoneWeird> before being hired by some company that obviously doesn't know how to pick programmers
13:37 < garbagecollectio> dickhead
13:37 < SomeoneWeird> haha k
13:37 < garbagecollectio> someone deleted the code out of svn
13:37 < SomeoneWeird> o poor u
13:37 < garbagecollectio> this was restored from a fucking disk
13:37 < deoxxa[cookies]> wat
13:38 < deoxxa[cookies]> you...
13:38 < sebmck> am i the only one who gets great satisfaction out of people like garbagecollectio
13:38 < deoxxa[cookies]> you know that svn is designed for exactly this, right?
13:38 < sebmck> gives me a feeling of job security
13:38 < garbagecollectio> this was fucking forensics 
13:38 < SomeoneWeird> hahahahahahahahahahah
13:38 < garbagecollectio> to get it out of the hard drive
13:38 < SomeoneWeird> deoxxa[cookies]++
13:38  * radiodario munches popcorn
13:38 < SomeoneWeird> deoxxa[cookies]++
13:38 < SomeoneWeird> deoxxa[cookies]++
13:38 < SomeoneWeird> deoxxa[cookies]++
13:38 < SomeoneWeird> deoxxa[cookies]++
13:38 < garbagecollectio> LOL
13:38 < deoxxa[cookies]> sebmck: oh no, i love it too
13:38 < garbagecollectio> not when u delete the repository by accident u fucking idiots
13:38 < garbagecollectio> WHO HAS DONE SSL ON NODE
13:38 < garbagecollectio> RAISE UR HAND
13:38 < deoxxa[cookies]> ...lol
13:38 < SomeoneWeird> I HAVE
13:38 < SomeoneWeird> AND YOU'RE FUCKING DOING IT WRONG
13:38 < SomeoneWeird> LISTEN TO US
13:38 < SomeoneWeird> AND IT WILL BE FIX0RED BY MAJIK
13:38 < sebmck> wow
13:39 < sebmck> talk about a competent programmer!
13:39 < radiodario> http://media.tumblr.com/tumblr_m7uzd12qBN1r3aspr.gif
13:39 < sebmck> garbagecollectio: what you want to do is go to your cupboard and get some chalk and some candles
13:39 < sebmck> draw a pentagram on the ground
13:39 < sebmck> and light some candles
13:39 < sebmck> then start chanting "joyent"
13:39 < garbagecollectio> who has done ssl 
13:39 < sebmck> the answers will come flooding to you
13:39 < garbagecollectio> on node
13:39 < SomeoneWeird> so, you deleted the svn repo did you?
13:40 < deoxxa[cookies]> garbagecollectio: you've got about 5 minutes left until you get fired
13:40 < SomeoneWeird> and NOBODY ELSE AT THE COMPANY HAD IT CLONED!?
13:40 < SomeoneWeird> WHAT IS WRONG WITH YOUR DEVELOPERS
13:40 < SomeoneWeird> and how the fuck did you manage to delete it in the first place.
13:40 < sebmck> ragequit
13:40 < sebmck> he left
13:40 < SomeoneWeird> HAHAHAHAHAH
13:40 < radiodario> wow that was intense you guys
13:40 < SomeoneWeird> http://i.minus.com/iCE49KJGLCA8t.gif
13:40 < SomeoneWeird> radiodario, we tried to help, it was hopeless
13:41 < radiodario> yeah i saw...
13:41 < deoxxa[cookies]> i wonder if his internet access was disabled
13:41 < yawnt> i know ssl
13:41 < sebmck> some poor guy working for $2 an hour in india just lost his job :(
13:41 < deoxxa[cookies]> when he got fired
13:41 < yawnt> http://i.imm.io/LmES.png
13:41 < yawnt> LOOK
13:41 < SomeoneWeird> i was just thinking that deoxxa[cookies] 
13:41 < SomeoneWeird> lolol
13:41 < radiodario> hahahaha
13:41 < SomeoneWeird> hahahahahahaahahahaaha
13:41 < radiodario> yawnt: here, have an internets
13:41 < SomeoneWeird> yawnt++
13:41 < deoxxa[cookies]> lol yawnt
13:41 < deoxxa[cookies]> win
13:42 < yawnt> please note my epic handwriting skills
13:42 < SomeoneWeird> noted
13:42 < deoxxa[cookies]> very nicely done
13:42 < yawnt> thank you
13:42 < yawnt> i learned from deoxxa[cookies] 
13:42 < deoxxa[cookies]> calligraphic master
13:42 < yawnt> and his epic nano skills
13:42 < yawnt> WITH NO SYNTAX HIGHLIGHTING
13:42 < deoxxa[cookies]> ey gurl don't hate on nano, yo
13:42 < yawnt> deoxxa[cookies]: venice's main square is underwater
13:42 < sebmck> maybe he didn't ragequit and he decided to take up my pentagram advice?
13:42 < yawnt> tourists are swimming in it
13:42 < deoxxa[cookies]> lol sucks to be them
13:43 < SomeoneWeird> * garbagecollectio (~dfdffd@68.87.42.115)  < who has an ident of dfdffd
13:43 < deoxxa[cookies]> sebmck: hey that's another possibility
13:43 < SomeoneWeird> inb4troll
13:43 < hackband> wow that was some great entertainment rigth there
13:43 < yawnt> so like, give it a try
13:43 < yawnt> maybe you get to surf lol
13:43 < SomeoneWeird> so thats enough trolling for tonight, im out
13:43 < SomeoneWeird> night all.
13:43 < yawnt> afternoon
13:43 < sebmck> likewise
13:43 < sebmck> bye
13:46 < deoxxa[cookies]> oh my god
13:46 < deoxxa[cookies]> http://signup.goatse.cx/?lrRef=smigi (safe for work)
13:46 < deoxxa[cookies]> goatse.cx is becoming a webmail host
13:47 < deoxxa[cookies]> that's entirely SFW, just to repeat
13:47 < yawnt> sweet
13:49 < radiodario> yeah i've sent my request ages ago
13:49 < radiodario> for prolapse@goatse.cx
13:49 < deoxxa[cookies]> haha
13:50 < richardshaw> awesome.
13:50 < exit2> sup noders
13:51 < radiodario> we don't know ssl
13:51 < radiodario> apparently
13:51 < exit2> why's that
13:51 < radiodario> can't really put my finger on it
13:52 < radiodario> someone tried to help a 13 year old call of duty player
13:52 < radiodario> and he told all of us we didn't know ssl.
13:52 < radiodario> very, very hurtful.
13:52 < exit2> ouch
13:52 < radiodario> ah also yawnt won an internet
13:52 < nathan7> Hey earthlings
13:53  * yawnt bows
13:53 < yawnt> thank you thank you
13:54 < nathan7> ..okay, what the fuck
14:08 < christophsturm> I have a http benchmarking app that uses node, and when i run it with 0.9.3 i get this error: (libuv) Failed to create kqueue (24)
14:09 < christophsturm> oh i guess that means too many open files
14:10 < mscdex> christophsturm: why not use 0.8.x ?
14:10 < christophsturm> I do use 0.8. just also running my app on 0.9 from time to time
14:10 < mscdex> so the error happens on both?
14:11 < christophsturm> 0.8 calls the error handler with EMFILE
14:11 < mscdex> yeah, too many open files
14:11 < christophsturm> 0.9 outputs (libuv) Failed to create kqueue (24) and then aborts (Abort trap: 6)
14:12 < christophsturm> so i guess thats still a regression in 0.9
14:12 < exit2> is there another way to do a basic hyperlink with EJS rather than just hardcoding them? (i.e. "/about")
14:12 < mscdex> 0.9 is unstable for reason :-)
14:12 < christophsturm> well I'm not complaining
14:13 < guor> curious question: what's node's policy on upating V8 versions?
14:13 < guor> *updating
14:13 < christophsturm> btw, how can I increase the open file limit on osx? ulimit -n 2048 did not change anything
14:14 < christophsturm> guor: I think a stable node version updates only minor v8 versions. 
14:14 < Slade-> other than dnode, are there any decent communication frameworks that will sit ontop of websockets/longpoll?
14:15 < guor> I see. So the next time we see a newer major version of V8 will be in 0.10.0?
14:15 < mscdex> christophsturm: give this a try: `launchctl limit maxfiles 2048 2048`
14:16 < christophsturm> this btw is the reason why i have a vmware fusion vm with ubuntu on my mac
14:17 < mscdex> hehe
14:17 < christophsturm> did not work :(
14:17 < mscdex> does `ulimit -a` show your changes at all?
14:18 < christophsturm> well not really
14:20 < christophsturm> ok now i totally ruined my system and have to reboot :)
14:20 < mscdex> :O
14:20 < christophsturm> "Ihrer Kopie von Safari fehlen wichtige Softwareressourcen. Bitte installieren Sie Safari neu.!"
14:20 < christophsturm> i guess it can't open any files
14:20 < mscdex> something something Safari
14:20 < mscdex> _-)
14:20 < mscdex> *:-)
14:22 < christophsturm> brb
14:22 < christophsturm> -bash: /Users/christoph/.bash_logout: Too many open files in system 
14:24 < Pickels> Anybody using vagrant in their dev environment?
14:24 < guor> well. mac os is nice and sleek as long as you don't mess with the internals
14:25 < guor> though that kinda applies to ubuntu as well, increasingly
14:25 < christop_> wow. don't mess with file limits on osx
14:26 < Guest____> mscdex, isn't that like the drivers for awesome quad speed cd-roms ?
14:26 < Guest____> brings bake memories
14:26 < guor> old dos times. yeah. i remember that as well
14:26 < Guest____> *back
14:26 < Guest____> single speed, double, quad, 40x
14:26 < christop_> microsoft cd extension
14:27 < Guest____> whuu kings quest with voices
14:27 < guor> funny anecdote... My old 486 had a CD drive. The driver was only available through windows installer.
14:27 < guor> so guess what happened when I wiped my disc and tried to set up windows using the install CD
14:27 < thomas`-> Hi all.  Would anyone here be able to tell me if Tokbox requires the webserver or socket server using Node.js technology?
14:27 < Guest____> haha
14:27 < guor> long live unformat
14:43 < pittpens> Hi all.  I'm looking for a node module that would help me administrator a linux server: adduser, passwd, shutdown, etc.  Does anyone know of any good modules out there. I thought I'd check before I wrote it.  Thanks
14:56 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:03 < ypahnu> hi all . 
15:04 < ypahnu> any of you are free to chat?
15:04 < jcrew> what about?
15:04 < jcrew> is it nodejs ?
15:05 < exit2> oh I thought this was a cybering chat
15:06 < jcrew> asl?
15:06 < drudge> can someone play me http://pacman.nko3.jitsu.com
15:06 < Guest____> 15/f/ams
15:06 < jcrew> OMG!!!!
15:07 < Guest____> inowrite
15:07 < Guest____> its also a lie
15:07 < Sly> IT'S A TRAP
15:07 < Guest____> TARPP!!
15:07 < jcrew> ypahnu: just ask the question : - )
15:09 < ypahnu> I think I would have to ask too many that it's more like a "walk-with"
15:09 < Guest____> err does anyone know a real free graph database? i.e. not neo4j
15:09 < ypahnu> i'm just testing things. try to get things to work
15:10 < jcrew> ypahnu: what are you stuck on?
15:10 < ypahnu> I'0m really noob, I woudl need to ask so many noobs questions I would be embareced ;)
15:11 < RLa> Guest____, what's wrong with neo4j
15:11 < ypahnu> npm, socket.io, port numbers, ... "I wish I knew all"
15:12 < jcrew> Guest____: looking for something that outputs an image or just something that will draw in a browser?
15:12 < Guest____> RLa they claim to be gpl, the community addition at least, but i head some rumors that they are still wanting money from people that run in in produtction even under the gpl'ed comm edition
15:12 < Guest____> jcrew graph database != drawing
15:13 < jcrew> Guest____: ahh i see
15:13 < Slade-> guest: I want money from you, just for logging in here, that doesnt mean i'm entitled to it
15:14 < jcrew> i'm assuming you've ruled out the ones on the wikipedia page for graph_database ?
15:14 < Guest____> jcrew: don't be rediculous ;P
15:15 < RLa> Guest____, i think gpl cannot restrict it unless there's an extra clause
15:15 < Guest____> i want to know from you guys
15:15 < Guest____> RLa: I know, its called the emo , clause yet they manage to nag about it
15:15 < RLa> Guest____, if you use for a web site, i.e user only gets generated html or data
15:15 < Guest____> maybe i should just post in on HN
15:16 < RLa> yes
15:16 < Guest____> cause this is a bit of abuse on their side
15:16 < Guest____> i'll talk with my team to see if they find this 'smart'
15:16 < ypahnu> my socket.io example it's working.. I'm soo prod of my self ( I am wondering why will I change this to something usefull to use lol )
15:20 < hij1nx>               
15:20 < hij1nx>  
15:20 < hij1nx>  
15:22 < strk> any module to read DB2 fies ?
15:23 < strk> .dbf files, that is
15:23 < ypahnu> maybe connect?
15:34 < whitman> Anyone using https+signed cert+ca-bundle successfully?  My self signed cert works fine but using the signed cert (with or without the ca-bundle) results in "139768612140704:error:140790E5:SSL routines:SSL23_WRITE:ssl handshake failure:s23_lib.c:177" from `openssl s_client -connect host:port -showcerts`
15:55 < jrdmcgr> I'm on OS X 10.7 and there are two paths for global node modules: /usr/local/share/npm and /usr/local/lib. What is the difference between these two locations?
15:55 < jrdmcgr> It seems that my system is currently using /usr/local/share/npm for global modules now.
15:56 < jrdmcgr> Maybe the other is from an old homebrew installation?
15:59 < boutell> hey folks. Anyone aware of an commerce store project in node? I'd prefer to use node for our next one, but starting completely from scratch is a tough sell.
16:02 < RLa> i think there was one pretty large online shop done in nodejs
16:02 < RLa> hm, can't remember where i read about it :/
16:15 < EyePulp> #node.js  - come for the event based platform, stay for the cute channel titles.
16:15 < sethetter> I'm building a fairly basic CRUD single page web app that I want to be very fast and responsive on the front-end. Would it be a bad idea to go with node over something like Rails for this?
16:16 < sethetter> I would just personally prefer to use node (more interesting to me) but it will be used by at least a small number of people, so if I can avoid a lot of potential issues by choosing something other than node then I probably should.
16:19 < EyePulp> sethetter: node is perfectly capable of doing what you want - it's no silver bullet though.  You still have to use your noggin' to keep things fast.
16:21 < sethetter> EyePulp: Right. I guess my main concern is that in the past people have told me to avoid node unless what I'm building requires a lot of real time data and that otherwise, something like Rails is a better option. I didn't know if this meant I would run into a bunch of issues if I went with node anyways.
16:21 < Drajwer> how do I convert Local<Value> to Local<String> ?
16:21 < sethetter> I have yet to build anything of any complexity with node, just played around with it a bit.
16:21 < healpay> what is the recommended way to get npm ?
16:22 < deoxxa[cookies]> healpay: it comes with node
16:22 < EyePulp> sethetter: Node doesn't have the same level of polish or maturity when it comes to building a web app.  But it's fully capable of building the same things you would in django or ruby.
16:22 < healpay> deoxxa[cookies]: gracias
16:22 < deoxxa[cookies]> healpay: as long as you're installing node from the official sources, that is
16:23 < healpay> deoxxa[cookies]: should Install from source or apt-get if I'm using mint?
16:23 < sethetter> EyePulp: well then node it is :) I'm not a big fan of ruby so working with node is much more preferable. Thanks for the input
16:23 < EyePulp> sethetter: You mentioned earlier "I would just personally prefer to use node (more interesting to me)"  <-- if that's the case, there's no reason not to give node a shot.  It will be more work, but it will be more interesting.
16:24 < healpay> EyePulp: I'd say node has come a long way :)
16:24 < deoxxa[cookies]> healpay: if you get it from your operating system's package manager, you're kind of on your own. they often break node in confusing ways... if i was on mint, i'd download the binaries from http://nodejs.org/dist/latest/ and put them in the right place myself.
16:24 < EyePulp> sethetter: consider the express framework to help you with the web app bits and pieces.  
16:24 < EyePulp> sethetter: I hear it's pretty popular
16:25 < sethetter> EyePulp: Definitely, my issue is that this app I was building as a personal project (to play and learn) has turned into quite a few colleagues wanting to use this project when it's finished. So I want to make sure it's nice and stable.
16:25 < sethetter> EyePulp: I have heard of express, I planned to look into if I decided on node. 
16:26 < EyePulp> healpay: Sure it has - but it's focus hasn't ever been on the traditional html based web-app platform market.  Django & Rails definitely are by comparison.
16:26 < healpay> sethetter: express is a lot like sinatra for Ruby which is IMO much better than rails. Hard to make an unstable application when the API is so simple :)
16:26 < sethetter> healpay: Very true. And yes I really like Sinatra much more than Rails.
16:27 < sethetter> healpay: I like small and modular, not gigantic all-in-one solutions.
16:27 < healpay> sethetter: you'll love express and the node community in general then :)
16:27 < EyePulp> (not saying it couldn't become a better web-app dev environment, the lacking bits are mostly on the docs, polish and community size rather than anything technically lacking node.)
16:27 < sethetter> healpay: Awesome, I should be spending more time in here then as well, haha.
16:28 < healpay> EyePulp: #rubyonrails (660) #node.js (935)
16:28 < healpay> :)
16:30 < healpay> EyePulp: perhaps community size is no longer an issue?
16:30 < EyePulp> healpay: if that's a yardstick of anything more than "count of people in channels" then I think you're missing something.
16:30 < healpay> EyePulp: that's exactly what it was :)
16:30 < healpay> EyePulp: my benchmarks are flawless
16:32 < EyePulp> healpay: Pointless as this argument is, my mention of "community size" is specific to community members interested in and advancing the art of the generic web app - much of node's community couldn't care less about that area, whereas that's the heart and should of rails apps (for good or ill)
16:32 < EyePulp> *heart and soul
16:33 < healpay> EyePulp: I got a sour taste in my mouth ages ago when Sprockets became 'teh awesome'
16:34 < sethetter> EyePulp: where is the primary focus in the node community? real-time data?
16:35 < ashnur> morning
16:35 < EyePulp> sethetter: I don't know what real-time data entails, but if I had to paint with a broad brush, I'd say "event driven network services" 
16:35 < ashnur> do you know any working cms for nodejs? 
16:35 < EyePulp> But that bucket could hold almost anything
16:35 < healpay> EyePulp: ya- web apps :)
16:36 < EyePulp> healpay: I'm not familiar with sprockets - I take it it wasn't the solution to the world's problems?
16:37 < sethetter> EyePulp: It seems to me that web apps are slowly starting to be more and more event driven, so node seems to be the wise choice of platform to start getting familiar with.
16:37 < healpay> EyePulp: unfortunately it wasn't. It was cool that you could build rails templates in anything (like eco, coffeescript, etc.) and much inspiration of node's templating derived from that but
16:37 < sethetter> EyePulp: thanks for the input, I'm excited to dig into node now
16:37 < healpay> for client side asset management
16:37 < healpay> it slowed stuff down for development
16:37 < healpay> made the framework bloated.. sure you can do without it but ya
16:38 < healpay> in general I just find rails too bloated
16:38 < healpay> and coupled to itself
16:39 < sethetter> healpay: Agreed, that's why I tend to avoid it.
16:40 < healpay> sethetter: mind you this is also coming from someone who still has several rails apps running in the wild.. now all my Ruby web apps are running Sinatra or Padrino
16:40 < EyePulp> healpay: Maybe a definition of "web app" would help clarify.  I (maybe dumbly) think of them in terms of the browser-based interfaces that humans interact with using various presentation layers/effects on the client end, with a server on the backend tied to services and data.  "Network services" in my mind are more typically consumed by other network services, and are more like *nix command line utilities in nature, with little to no 
16:40 < EyePulp> presentational capabilities.  HTML plays little to no role in them, for example.  Again - just how the terms work in my head.
16:41 < healpay> EyePulp: see in my mind, web apps are like onions
16:41 < healpay> (well designed ones anyway)
16:41 < EyePulp> They make you cry? 
16:41 < EyePulp> =)
16:41 < deoxxa[cookies]> they smell bad?
16:41 < healpay> EyePulp: presentation layer should be handled (as much as possible) on the client side
16:41 < deoxxa[cookies]> they're delicious with pasta?
16:41 < EyePulp> deoxxa[cookies]: heh
16:42 < deoxxa[cookies]> you throw away the outer part before you use them?
16:42 < healpay> and your server logic should be a simple service layer 
16:42 < healpay> deoxxa[cookies]: EyePulp they both have layers ;)
16:42 < deoxxa[cookies]> like a parfet
16:42 < healpay> exactly
16:42 < deoxxa[cookies]> erm
16:42 < deoxxa[cookies]> parfait
16:42 < deoxxa[cookies]> ?
16:42  * deoxxa[cookies] not french
16:43 < healpay> EyePulp: in a sense, rails might encourage bad web app design
16:44 < healpay> EyePulp: although perhaps the same can be said about any web framework :)
16:45 < EyePulp> healpay: I'll say this - I get paid the same to build my node and django apps, and right now I'm just jawing on IRC and not building either one.   =P   
16:45 < EyePulp> sethetter: you good?  got your decision made?
16:46 < sethetter> EyePulp: absolutely
16:46 < EyePulp> excellent.  
16:46 < sethetter> EyePulp: I'm going to play with node, it seems the most fun to me :)
16:46 < EyePulp> healpay: we'll continue solving these crucial issues another time.  Right now I have a Node app behaving like an onion (lots of tears).
16:47 < sethetter> EyePulp: I agree with your definition of web apps though. Generally I try to build the frontend entirely decoupled from the backend and then write the backend api to work with the client-side demands.
16:47 < sethetter> EyePulp: well thanks again, and have fun with the onion :)
16:48 < EyePulp> I'd rather read The Onion than write code that looks like it...
16:52 < ashnur> so no one heard of a nodejs cms?
16:53 < dk01> lmgtfy
16:53 < boutell> Just reading back… re: sethetter's questions, you might want to look at justjs.com, because the tutorials I presented there are focused on a pretty traditional web app that might otherwise get built in Rails, at least at first. (Eventually I went off into more frontend-heavy, REST-backed stuff as well.)
16:53 < dk01> http://stackoverflow.com/questions/3684743/cms-based-on-nodejs
16:53 < sethetter> ashnur: If you like CoffeeScript -> http://nodize.com/
16:54 < ashnur> thanks, I will check it out
16:54 < sethetter> boutell: Awesome that sounds like just what I'm looking for. Thanks
16:54 < ashnur> dk01: I fucking googled it before asking, but for example the site of calipso doesn't even work
16:54 < ashnur> hate when people think that I can't find google :(
16:54 < boutell> sethetter: cool. If I had it to write over again I'd use nunjucks at the template engine. But the advice in there about setting up modules and using async.series to avoid the nested callbacks of death is definitely suitable.
16:55 < deoxxa[cookies]> ashnur: calm down, sailor
16:55 < boutell> also, consider using mongoose to give you the same kind of head start with mongodb that active record gives you with mysql in rails land.
16:56 < boutell> ashnur: we're working on one, the next generation of apostrophe (apostrophenow.org) will be node based, we're a few months out from having something worth using in your project
16:56 < ashnur> good to know that there are people working on it
16:57 < ashnur> for example there are already a few very good static site generators
16:57 < ashnur> i hope that we will get there with cms's too
16:57 < boutell> we're stoked to do it with node and get some serious performance wins
16:58 < boutell> PHP and Symfony have been good to us but… when I code with node I have to display more decimal points in my benchmarks to measure any time (:
16:58 < healpay> EyePulp: haha what is wrong with your onion node app? :(
16:58 < healpay> EyePulp: callback hell?
16:58 < ashnur> boutell: well, I hope that you are not trying to do something similar as symfony, especially not something as symfony2
16:59 < EyePulp> I heard someone call them "sad Stallmans"   });
16:59 < healpay> end is three characters too ;)
17:02 < path[l]> hello, I've been doing delete require.cache[pathToFile] in my tests, but it does not seem to result in my files being re-required
17:05 < brianc> path[l]: you might want to try `delete require.cache[require.resolve(pathToFile)]` though that's just a hunch
17:09 < boutell> ashnur: we built the original apostrophe as a plugin for symfony 1, which was pretty much a port of traditional Rails. It was nice for its time but we're moving on. symfony 2 is way too java-tastic for us and doesn't leverage functional programming.
17:10 < ashnur> exactly
17:10 < ashnur> have you saw this maybe? http://lithify.me/ ?
17:11 < ashnur> anyway, I think a module based approach is the best for nodejs
17:11 < path[l]> brianc: thanks a bunch, yes, I understood my error
17:12 < sethetter> boutell: How is the node.js conversion going? Out of curiousity
17:17 < boutell> sethetter: it's a total rewrite, I'm pleased to say, and we're enjoying it, but to really get it done we've lined up a client project that must be built in it as a clear motivation, and that is getting underway shortly (:
17:19 < sethetter> boutell: Very awesome, glad to hear node is being used for these types of projects.
17:19 < MI6> joyent/libuv: Ben Noordhuis master * 3243e9a : test: fix (harmless) typo in function name - http://git.io/a2TsCg
17:20 < boutell> sethetter: yeah, I think it's been underused for projects that have deeper functionality and smaller scale. Simply because it is so insanely great at achieving crazy scale for simple backends it has gained a reputation for being specifically for that.
17:21 < boutell> btw, this is a freaking awesome template language choice for node dev: http://nunjucks.jlongster.com/
17:21 < boutell> it helps that it's very similar to Twig, which is the really good thing about Symfony 2 without which we'd be a little bummed not to use it
17:22 < brianc> boutell: that template language has ugly syntax. it's like ejs but with made-up keywords. :/
17:22 < boutell> brianc: ugly as opposed to…?
17:23 < boutell> it's a syntax common to a whole bunch of template languages. It's not jade, but I'm sick of jade thinking it knows how I want to assemble my markup.
17:23 < brianc> boutell: "endfor" "endblock" good lord. why not ejs?
17:24 < deoxxa[cookies]> boutell: https://github.com/deoxxa/node-ginger << i made this to work a lot like twig
17:24 < boutell> brevity isn't everything
17:24 < boutell> clarity matters too
17:24 < boutell> especially in a soup of markup
17:24 < deoxxa[cookies]> https://github.com/deoxxa/tuxedo << i started a rewrite too, but ended up putting it aside for a while as i don't need it just yet
17:25 < boutell> deoxxa[cookies]: interesting. I haven't hit any regrets with nunjucks thus far, wondering what the pros and cons might be of the two. It doesn't look like you have blocks and inheritance
17:26 < deoxxa[cookies]> boutell: i do
17:26 < boutell> ah
17:26 < deoxxa[cookies]> boutell: i don't, however, have {% parent %} stuff, and the implementation of blocks is pretty horrible
17:26 < deoxxa[cookies]> hence the rewrite
17:27 < boutell> brianc: my objection to ejs would mostly be the lack of 'extend' and block overrides. I like that pattern a lot.
17:27 < brianc> boutell: yeah 
17:27 < deoxxa[cookies]> tuxedo is meant to be more aligned with asynchronous stuff - proper async rendering and such
17:27 < boutell> I also wind up injecting real partials support back into express. You need it on projects where nontrivial pages are built server side.
17:27 < brianc> boutell: didn't mean to come off harsh, I appologize
17:27 < deoxxa[cookies]> but i wish i had more time :<
17:27 < brianc> boutell: much easier to critique than create
17:27 < boutell> brianc: no biggie. I didn't invent the syntax or even do this implementation
17:28 < healpay> what is with frameworks like jade and haml? Never understood the hype
17:28 < deoxxa[cookies]> they're meant to be "clean" and "minimal"
17:29 < deoxxa[cookies]> but they lock you into "all html, all the time"
17:29 < brianc> i actually do very much enjoy significant whitespace when writing markup. never have to find that missing "</div>" after a little html refactor
17:29 < boutell> one thing I've learned though is that you shouldn't try to reinvent "components" in the symfony sense. The view layer should never run controller code in node, middleware should be used to muster data in a reusable way so that it's all ready to be passed to the view layer in one go without a lot of duplicate code between actions
17:29 < healpay> what rendering engines are your favorite?
17:30 < boutell> right. I have a project in jade. I like it, except when I want an override able block in an attribute. Then I hate it with a passion because it's in my way.
17:30 < brianc> yeah understandable
17:30 < brianc> seems like every template language has a tradeoff
17:31 < bakadesu> seems to me everything has a tradeoff
17:32 < brianc> there is no such thang as a free runch
17:32 < healpay> anyone here use underscore on the server side?
17:33 < boutell> healpay: yes.
17:33 < boutell> I know that with v8 I could probably trust certain things to work and skip underscore, but I like the consistency of having it in both browser and server contexts.
17:35 < healpay> boutell: how do you do the equivalent of block content (jade) inside of a layout using underscore?
17:35 < boutell> healpay: you mean 'extend' and 'block'?
17:36 < healpay> boutell: I should want to embed the content of views inside of the layout
17:36 < healpay> I just*
17:36 < boutell> healpay: don't use underscore for nontrivial templates. The maintainer is on record as saying their inclusion in underscore was a mistake. els is a more robust implementation of pretty much the same template syntax, it's more debuggable
17:36 < boutell> healpay: els rather
17:36 < boutell> healpay: but that doesn't give you blocks eitehr
17:36 < boutell> healpay: if you want blocks and don't like jade, I suggest nunjucks.
17:37 < healpay> boutell: thanks! :)
17:37 < healpay> boutell: ha too bad it's not javascripty though
17:38 < boutell> healpay: I suppose, but if you're writing complex logic in your templates you probably didn't muster the data sufficiently in the controller
17:38 < boutell> that's where your javascriptyness should really be
17:38 < boutell> we learned the hard way 
17:38 < boutell> we have some terrifying templates
17:39 < healpay> boutell: ya I wasn't planning on hardcore javascript inside of my templates.. was more of an aesthetic thing..
17:39 < healpay> javascript everywhere :)
17:42 < cellvia> boutell what do you use for templating
17:43 < cellvia> does anyone have experience w/ plates (the flatiron templating)
17:43 < boutell> healpay: I agree mostly, justjs.com's domain name and entire thesis is "javascript everywhere dammit!", but I'm finding I can live without it in templates (:
17:43 < cellvia> havent messed with it yet but it seemed cool to me
17:43 < boutell> cellvia: I have projects in els, nunjucks and jade. I prefer nunjucks and if I had to pick one it'd be that. 
17:43 < boutell> ejs, sigh
17:43 < boutell> can't type today
17:45 < tracker1> boutell, thanks for mentioning nunjucks... looks to be pretty close to what I've been looking for.
17:46 < tracker1> been wanting a better razor-style templating system myself
17:46 < boutell> yeah, I was pretty stoked to find it. Tests! Completeness! Familiar to my frontend guys who have used other stuff!
17:49 < healpay> boutell: is there a way to use the app.set('view engine', '') configuration to work with nunjucks or should I just follow it the way the docs say? ;)
17:49 < boutell> healpay: I had best success following the docs.
17:50 < healpay> boutell: hehe was just hoping there was a more elegant way
17:50 < boutell> pull request time
17:50 < flexd> Any ideas why I can't install this with npm? https://github.com/visionmedia/node-progress
17:51 < flexd> Just saying there is no module 'progress'
17:51 < boutell> maybe it's called node-progress
17:51 < boutell> in npm
17:51 < boutell> maybe it's not in npm
17:51 < boutell> search npm
17:52 < flexd> https://npmjs.org/package/progress ..
17:52 < flexd> npm ERR! 404 'progess' is not in the npm registry.
17:52 < flexd>  :P
17:52 < flexd> err
17:53 < flexd> damnit
17:53 < flexd> :(
17:53 < flexd> I'm going to hide in the corner again now.
17:53 < healpay> boutell: were you saying I should submit a pull request? :)
17:54 < boutell> healpay: yep!
17:54 < boutell> easy and fun!
17:54 < healpay> boutell: yes I've done it before.. if I have time I will :)
17:54 < boutell> *so* easy. github has obliterated the overhead involved in participating
17:55 < TehShrike|Work> This is interesting http://jsperf.com/cost-of-a-function-call/3
17:56 < j3j5> Hello there, is there anybody on the room w/ experience on Node.js and Raphäel?
17:56 < j3j5> I'm trying to run some graphic library that works on the browser
17:57 < jcrew> j3j5: trying to get the SVG output ?
17:57 < j3j5> I'm using JSDom but I get "ReferenceError: Raphael is not defined"
17:57 < j3j5> jcrew: yes, exactly
17:57 < jcrew> j3j5: need to use something to emulate the DOM and include raphaeljs there
17:57 < j3j5> I'm using JSDom
17:58 < healpay> boutell: I like their little command line utility
17:58 < j3j5> but I'm not sure if I'm missing something on the initialization
17:59 < j3j5> I'm using this approach http://paste.ubuntu.com/1353699
18:00 < j3j5> so the Raphael library should be loaded within the document
18:01 < j3j5> I saw somewhere that there's a node-raphael
18:01 < j3j5> but I don't know if I have to use that one instead of the current Raphael library
18:02 < j3j5> any idea anybody?
18:06 < flexd> err.. this explains a lot. Running node 0.6.14 :/
18:06 < flexd> j3j5: You are doing something clientside?
18:06 < flexd> Then you should be using normal raphael I assume
18:06 < j3j5> flexd: on the client side normal raphael works fine
18:06 < flexd> node-raphael would be a node module to be able to do some stuff serverside.
18:07 < j3j5> and I'm trying to run the same code (or as similar as possible) server-side
18:07 < flexd> For example generate output stuff on the server and just stream it over?
18:07 < flexd> Then you need the node module.
18:07 < j3j5> ok, and once loaded....how do I start using it?
18:08 < flexd> var raphael = require('raphael'); ?
18:08 < flexd> I have not used it before, sorry :/
18:09 < j3j5> hehe, ok, thank you, I'll try something like that!
18:18 < healpay> is it a good idea to stick node_modules inside gitignore or
18:18 < healpay> should I include those? (deploying to heroku)
18:18 < nathan7> Unless you want to make the node_modules part of your project
18:18 < boutell> I believe you shouldn't put node_modules into your own git repo if you're deploying via git
18:19 < FunnyLookinHat> healpay, I almost aways .gitignore node_modules
18:19 < boutell> because some modules may need to compile C++ code
18:19 < boutell> which is not portable from server to server necessarily
18:19 < boutell> if I recall properly heroku does an nom install
18:19 < FunnyLookinHat> Yeah - npm install is the _best_ way to get those in there.
18:19 < boutell> npm install
18:19 < healpay> boutell: FunnyLookinHat perfect thanks guys
18:20 < boutell> fyi, if anyone needs a deployment recipe for a dedicated server or vps: https://github.com/punkave/stagecoach
18:20 < boutell> also covers installing node and mongodb on said server
18:23 < flexd> healpay: I always put node_modules in .gitignore, the default .gitignore from github (for node) does that too :)
18:30 < chuck> hi all
18:31 < cellvia> boutell: ejs or plates seem attractive to me, iwill look into nunchucks
18:32 < chuck> can anyone recommend a simple proxy library that will allow me to set up a proxy server (to route my web browser through)?
18:32 < boutell> chuck: something tells me you haven't checked npm (: node-http-proxy
18:33 < boutell> node-http-proxy was built by the nodejitsu folks and it is very robust
18:33 < boutell> I use it as a reverse proxy so that I can run piles of apache crap and node apps on one server with no trouble
18:34 < chuck> boutell: I have, that routes traffic based on the request. I want a passthrough proxy (anonymous)
18:34 < chuck> boutell: any ideas - I can't find anything on npm that fits my needs
18:36 < boutell> chuck: I think you can set up node-http-proxy that way.
18:37 < chuck> boutell: ah right. I couldn't see that from the docs. Any tips?
18:38 < boutell> chuck: if you're just looking for a command line tool, there are zillions of proxy servers. If you're planning to build it into your node app start reading source (:
18:39 < chuck> boutell: ok, will do. thanks for the help
18:41 < Leeol> Anyone know if there is a node version list somewhere? Ie, what versions have been published (0.8.0, 0.8.9, 0.8.14, etc)
18:43 < nathan7> Leeol: see the git tags?
18:43 < nathan7> https://github.com/joyent/node/tags
18:44 < Leeol> nathan7: Good idea, thank you
18:48 < flexd> I think I broke my brain hm
18:48 < flexd> Or node.. odd
18:48 < flexd> Does anyone have any experience with node-async?
18:48 < dk01> grrr no sockets on c9. Guess I should have expected that.
18:49 < flexd> I'm trying to write a very simple script that imports a bunch of data from a csv file into a mysql database.
18:49 < flexd> I had it working and then for some reason decided to go all fancy with a progressbar.
18:49 < flexd> Cue problems.
18:50 < TooTallNate> holy shit mscdex, > 200 stars on ssh2 already!
18:50 < TooTallNate> nice job dude
18:50 < TooTallNate> though i haven't tried it out yet :p
18:50 < zeekay> i wish i would have discovered ssh2 before i started writing an ssh client
18:51 < zeekay> it looks pretty great
18:51 < carli2> hi
18:52 < carli2> did some one get openid working with node?
18:52 < carli2> I always get this exception: http://paste.ubuntu.com/1353813/
18:55 < flexd> I'm having a odd issue with node-async. It just does nothing :/
18:56 < aettinger> carli2: doesn't look like callback is defined.
18:56 < flexd> Trying to make it call three functions in series, it just sits there.
18:56 < carli2> aettinger: is there some api documentation for openid?
18:56 < carli2> aettinger: the callback is the 5th parameter in my case
18:57 < jrajav> substack: I rewrote your mkdirp module to be a little simpler: https://gist.github.com/4061004
18:57 < carli2> aettinger: it dosent work for as 3rd, too
18:57 < jrajav> Wanted to know what you thought of it
18:57 < flexd> Nevermind, I forgot the callbacks -_-
18:58 < jrajav> I do the stat first instead of the mkdir; is there a case I'm missing that makes that a bad idea?
19:03 < aettinger> clear
19:07 < gerad> yoyoyo
19:07 < jocafa> word
19:07 < gerad> anybody around to up vote node knockout on hackernews?
19:07 < bitfed> I'm game
19:07 < jocafa> i dont even have an account there heh
19:08 < gerad> we'll give it a try
19:08 < gerad> http://news.ycombinator.com/item?id=4774230
19:09 < jrajav> jocafa: It's practically your nerd license, man :P
19:10 < jrajav> Though the recent vogue on HN is, ironically, to dislike HN
19:10 < jrajav> So I guess you're good
19:10 < jocafa> like hack-a-day commenters hating on arduino?
19:10 < substack> jrajav: mkdirp is massively used, I am really paranoid about changing it
19:11 < jrajav> Oh, it wasn't intended as a replacement
19:11 < jrajav> Well.
19:11 < jrajav> It wasn't intended as a pull request
19:11 < jrajav> :P
19:15 < jrajav> I guess I didn't think to run it against your tests
19:15  * jocafa writes mkderp
19:22 < CoverSlide|TPFR> mkderp() instanceof jocafa == true
19:22 < jrajav> substack: test/race.js passing for you?
19:22 < jocafa> truth
19:22 < jrajav> substack: I get path.exists is now called `fs.exists`.
19:23 < jrajav> Never mind. They all pass for yours :P
19:23 < jrajav> Back to work!
19:28 < _sorensen> i.imgur.com/FFHWU.gif
19:28 < _sorensen> stackoverflow gold
19:29 < aettinger> _sorensen: nice
19:29 < nathan7> ahaha
19:30 < aettinger> i like #2, use a plugin
19:30 < xat-> lol
19:33 < jrajav> inb4 node-add
19:40 < Matthijn> Hi, just started with node. I was wondering is there a 'require' (like in php) for node.js? So I can include other files. I tried require, however that seems to only work for packages or something? Not for my own Js files?
19:40 < nathan7> require('./blah')
19:40 < aettinger> Matthijn: yes
19:40 < nathan7> for ./blah.js
19:41 < cellvia> you have to define module.exports
19:41 < aettinger> var foo = require('./foo');
19:41 < aettinger> foo.bar()
19:41 < cellvia> in what you are including
19:41 < cellvia> that what gets imported when you require
19:41 < aettinger> module.exports.bar = function(){};
19:41 < substack> Matthijn: http://nodejs.org/docs/latest/api/modules.html#modules_modules
19:42 < Matthijn> require('./blah'); would make it relative to the path the require is called in i suppose? -- Since I am using 'ember-runner' (for emberJS) and was trying the 'require' but it just seems to include empty files.
19:42 < cellvia> but even if yo udont do module exports it will still run the script, just wont be able to access vars or functions inside it without moduleexports
19:42 < nathan7> Matthijn: you get what the module sticks into module.exports returned
19:42 < substack> Matthijn: require() doesn't export things into your scope, it returns the exports object
19:43 < nathan7> jrajav: https://gist.github.com/4061398
19:43 < substack> var blah = require('./blah')
19:43 < jrajav> Whoo
19:43 < dzajdband> Hi
19:43 < dzajdband> I have a question
19:43 < dzajdband> I'm trying to debug a memory leak
19:43 < Matthijn> Aaa, i see. Is it possible to 'include' (like phps incude or something) 
19:43 < nathan7> Not really. That leads to bad separation of concerns.
19:44 < dzajdband> using node-inspector
19:44 < Matthijn> I see. 
19:44 < dzajdband> but it's not working
19:44 < jrajav> In other words, you should design your modules such that there's a single point of entry, and you don't need to run them in the current context
19:44 < dzajdband> https://github.com/dannycoates/v8-profiler/issues/16
19:45 < dzajdband> any alternative?
19:45 < ThatOtherPerson> Does res.end have a timeout?
19:45 < mscdex> node.js rules!
19:46 < jrajav> Eh, it's alright
19:46 < cellvia> lol
19:46 < Matthijn> What i wanted to use it for is ember-runner, don't know if anyone is familiar with that. ( https://github.com/envone/ember-runner ) -- to generate a single file (for the client) with different js files included in that. -- I thought that that was what the ember-runner-sample ( https://github.com/envone/ember-runner-sample ) did.
19:47 < mscdex> :-D
19:47 < cellvia> mscdex: im partial to it myself
19:47 < ThatOtherPerson> I wrote a JSON proxy using express: https://gist.github.com/4061465
19:47 < ThatOtherPerson> But it doesn't send the complete response
19:47 < ThatOtherPerson> If the response is too long
19:48 < nathan7> ThatOtherPerson: tip of the day: request. https://github.com/mikeal/request#super-simple-to-use
19:48 < nathan7> ThatOtherPerson: you're ending the request on data, not on end
19:48 < ThatOtherPerson> nathan7: Oh!
19:49 < lohkey> ThatOtherPerson: use mikeals request and pipe directly to res
19:49 < mscdex> ThatOtherPerson: you should use Buffer.byteLength(post_data) instead
19:49 < nathan7> ThatOtherPerson: var outReq = request('http://someplace');
19:49 < mscdex> for content-length
19:49 < nathan7> err
19:49 < ThatOtherPerson> Okay, thanks!
19:50 < nathan7> ThatOtherPerson: request({url:'http://someplace', form: { 'file': req.body.file }}).pipe(res);
19:51 < mscdex> ThatOtherPerson: also, where are you calling post_req.end()?
19:51 < nathan7> ThatOtherPerson: request({method: 'POST', url:'http://services.dcputoolcha.in/assemble', form: { 'file': req.body.file }}).pipe(res);
19:51 < nathan7> ThatOtherPerson: that's your whole thing
19:51 < ThatOtherPerson> nathan7: Thanks!
19:57 < ThatOtherPerson> Thanks everybody! It worked perfectly!
20:02 < AAA_awright> ashnur: Maybe you'd like to help me out
20:02 < ashnur> ?
20:03 < AAA_awright> ashnur: http://magnode.org/
20:04 < ashnur> hmm. interesting project, I have not seen it yet
20:06 < mscdex> anyone know the name of that nko entry where they were doing an endless gif thing so you could embed IRC chat in your readme on github?
20:07 < FunnyLookinHat> mscdex, this ? https://github.com/videlalvaro/gifsockets
20:07 < mscdex> no, i've seen that before actually. this was a nko entry this year
20:08 < mscdex> they did a demo the other day
20:08 < tuhoojabotti> wow :D
20:09 < FunnyLookinHat> tuhoojabotti, yeah... the best part is the GIF in the readme  :D
20:09 < FunnyLookinHat> mscdex, nko ?
20:09 < mscdex> node knockout
20:09 < tuhoojabotti> I knew about gif sockets
20:09 < tuhoojabotti> but thats a nice idea
20:09 < FunnyLookinHat> ah
20:10 < FunnyLookinHat> I'm new to the world of Node...  :D
20:11 < cellvia> dude gifsockets is awesome 
20:11 < cellvia> never heard of it thanks
20:12 < healpay> what is the best way to initiate a get request ? http.ClientRequest?
20:12 < jkarsrud> healpay: use request
20:12 < jkarsrud> that's the easiest atleast
20:13 < jkarsrud> https://github.com/mikeal/request
20:13 < healpay> jkarsrud: ty 
20:13 < ashnur> AAA_awright: is this production ready? :)
20:14 < AAA_awright> ashnur: Well it powers it's own website so maybe
20:14 < ashnur> kewl
20:14 < AAA_awright> It's not really released yet, being feature incomplete
20:14 < AAA_awright> I'm not sure what features would make it feature-complete
20:14 < AAA_awright> For initial release
20:15 < AAA_awright> ashnur: So that's why I'd like some feedback
20:18 < ashnur> I have to read through it
20:19 < jergason> Anyone have a good recommendation for a node ftp server?
20:19 < jergason> most of the ones i have googled seem kindof abandoned
20:20 < mscdex> jergason: i don't think there are any for servers
20:20 < Blkt> good evening everyone
20:21 < jergason> Blkt: evening
20:21 < Blkt> :D
20:22 < mscdex> Blkt: good afternoon ;-)
20:23 < Blkt> hello there
20:24 < vicapow> Blkt: good day, madam/sir
20:25 < AAA_awright> jergason: FTP is mostly obsolete
20:25 < AAA_awright> For any use HTTP or SFTP are better
20:25 < jergason> AAA_awright: tell that to my data provider i have to interface with :/
20:26 < AAA_awright> I'd do that. Say it's for security.
20:26 < bakadesu> is there a way to set what file extensions for mocha to watch?
20:27 < RLa> ftp has no pipelining, that kills all performance
20:28 < bakadesu> weird, seems to be watching all files now >_>
20:29 < jergason> AAA_awright: it is a third party
20:29 < mscdex> bakadesu: mocha must have been listening
20:29 < jergason> AAA_awright: i have no control over what protocol they use to deliver data to me
20:31 < bakadesu> anyone use node-supervisor (instead of forever) for production?
20:32 < clever> RLa: why do you say ftp has no pipelining?
20:34 < mscdex> clever: you can only perform one transfer at a time per connection
20:35 < clever> mscdex: i thought the whole point of doing data over a seperate socket was to pipeline
20:35 < cellvia> node-waf on windows, possible?
20:36 < mscdex> clever: it's better to be able to multiplex multiple streams on a connection
20:36 < mscdex> cellvia: nope
20:36 < Aikar> people still use windows for development? :P
20:36 < mscdex> cellvia: gyp is what should be used these days so that addons can be compiled on Windows
20:36 < cellvia> ah, btu the module i am trying to install uses waf :'(
20:37 < RLa> clever, it can do multiple connections but commands are sent only over the main connection
20:37 < Aikar> then its probally not updated for latest node
20:37 < cellvia> thanks Aikar
20:37 < Aikar> cellvia: just cause npm says itll install doesnt mean its updated for latest node. They could have a loose package.json 
20:37 < RLa> clever, if you have 1000 1kb files, it can take half hour to transmit 1MB
20:37 < austinfrombosto2> cool
20:37 < clever> RLa: yeah, that part i would expect, having to open new connections
20:38 < clever> yeah, now that i thnik about it, i'm mixing pipelining up with something else
20:38 < cellvia> so any way around the waf issue?
20:39 < jrajav> substack: Your race cond test is baffling me
20:39 < RLa> probably, the biggest issue is network latency and only pipelining gets around it, otherwise client must always wait response for each command
20:39 < clever> RLa: yeah, in the case of ftp, ~5 round-trips per file i think
20:39 < RLa> with 200ms latency each command would take 0.4s despite only very low amout of bytes is transferred
20:39 < clever> atleast one round trip to say which file and get a port to connect over, then 3 more to connect
20:39 < Absolute0> Everytime I install something with npm, sudo or not, I get a new dir created in a node_modules dir, which I have to locate and add the bin dir to the PATH. Is there any faster way to get node packages on the PATH?
20:40 < jrajav> Absolute0: Without installing them globally?
20:40 < clever> RLa: ive noticed the same problems with scp, even when it does reuse a single connection
20:40 < Aikar> Absolute0: not that you can require(), but to auto put stuff in path, use -g flag
20:40 < clever> internaly, it cant make full use and must flush after each file
20:40 < jrajav> Absolute0: You can also link them, npm help link
20:40 < jrajav> Aikar: That doesn't auto put them in the path, it installs them to where node is installed instead of the current dir
20:41 < RLa> clever, i usually update code through vcs or zip/tar
20:41 < Absolute0> -g seems like the better solution
20:41 < Aikar> jrajav: npm install -g puts stuff in my path if ran under sudo
20:41 < purr> Absolute0: christopher lortie - personal research development <http://www.christopherlortie.info/>
20:41 < clever> RLa: i ust git for that
20:41 < Absolute0> -f
20:41 < jrajav> Aikar: Yes; but that's because the path where node is installed is in your path
20:41 < mscdex> well, thankfully ssh allows multiplexing :-)
20:41 < jrajav> That's not the same as "auto adding to your path"
20:41 < clever> RLa: for non-code things, tar is often faster then bare scp
20:41 < Aikar> true
20:42 < jrajav> Just making sure no one gets confused :)
20:42 < Absolute0> is there an equivalent to python's pip install -r requirement.txt with npm?
20:42 < jrajav> What does that do?
20:43 < Absolute0> jrajav: installs every package listed in requirements.txt
20:43 < jrajav> So, install all dependencies?
20:43 < jrajav> Because npm already does that
20:43 < Absolute0> no
20:43 < Absolute0> install every package listed in a file
20:43 < jrajav> Yay for xargs? :P
20:43 < Absolute0> or cat+backticks
20:43 < jrajav> That seems like a fairly arbitrary and very scriptable requirement
20:44 < jrajav> I don't know whether or not npm has it, but I would be surprised
20:44 < Absolute0> npm install `cat requirements.txt`
20:44 < jrajav> cat requirements.txt | xargs -n 1 npm install
20:45 < Absolute0> I prefer my version
20:45 < jrajav> ....
20:45 < Absolute0> assuming requirements.txt is properly formatted
20:45 < jrajav> Except that it doesn't work.
20:45 < jrajav> And it's like 4 characters shorter.
20:45 < Absolute0> it works with apt-get install
20:46 < jrajav> Are you actually making an argument that this should be npm functionality?
20:47 < Absolute0> nope, just need it for deployment
20:47 < cellvia> Aikar:  thanks for the tip, the actual issue ended up being that the updated modules werent pushed to npm, im getting them from git and they have been reworked for latest node :)
20:47 < jrajav> soooooooooo, why doesn't xargs work?
20:47 < jrajav> Or a shell script
20:47 < Absolute0> did I say that it doesn't?
20:47 < Absolute0> :)
20:47 < jrajav> ... I'm so lost
20:47 < jrajav> whatevs :P
20:52 < cellvia> Aikar: poitn being i wouldnt have thought to check that otherwise so thank
20:54 < Absolute0> What's the general practice for running node.js on a server, in terms of daemonizing? screen? nohup?
20:56 < jrajav> Absolute0: It's probably best to use something more sophisticated like forever
20:56 < jrajav> There are any number of utilities for maintaining long-running programs, both for node and generalized
20:56 < jrajav> Google is your pal 4 life
20:57 < Absolute0> jrajav: will he comfort me during low moods?
20:57 < jrajav> -g emotional support
20:57 < purr> jrajav: The Supportive Spouse: How to Get the Right Kind of Emotional ... <http://www.psychologytoday.com/blog/the-human-equation/201002/the-supportive-spouse-how-get-the-right-kind-emotional-support>
20:57 < jrajav> I.. guess.
20:57 < Absolute0> I saw forever and daemonize2 on stackoverflow; they seem a bit hacky
20:58 < Absolute0> for example gunicorn has a -D option which deamonized your webapp
20:58 < niggler> daemonize
20:58 < Absolute0> that.
20:58 < niggler> daemon -> daemonize
20:59 < Absolute0> jeez, pardon the typo.
20:59 < niggler> strict mode is making me cry
20:59 < jrajav> Don't know what "hacky"'s supposed to mean in this context, but forever works fine, I've used it myself for several things
20:59 < jrajav> If it doesn't fit your needs extend it or use something else
20:59 < jrajav> But your needs seem pretty vague
20:59 < Absolute0> running node on a server?
20:59 < niggler> or use another framework/stack like apache+php
20:59 < Absolute0> how is that vague?
21:00 < jrajav> How is that vague? There are like 75 hundred ways to run something on a server
21:00 < jrajav> :P
21:00 < jrajav> Why not just type it in on a tty?
21:00 < niggler> inetd for example
21:00 < Absolute0> ..as opposed to running it locally in a shell
21:01 < Absolute0> the second you control+d everything dies
21:01 < niggler> use screen or tmux
21:01 < niggler> both give you ttys 
21:01 < Absolute0> yeah, but is screen good enough for a server?
21:01 < niggler> i run lots of mission critical stuff from screen
21:01 < Absolute0> fun
21:01 < niggler> granted none of those are node
21:01 < ttilley> use forever. or use supervisord. or use foreman and build yourself an init script from it.
21:01 < niggler> but that shouldn't matter
21:02 < Absolute0> there's not overhead produced by screen?
21:02 < Absolute0> *no
21:02 < niggler> a nontrivial but relatively insignificant overhead
21:02 < Absolute0> vim, for example, becomes buggy in screen
21:02 < niggler> overhead of screen : overhead of htop :: lego mini figure height : human height
21:02 < Absolute0> it doesn't *feel* server ready
21:03 < jrajav> I wouldn't worry about overhead so much as the fact that screen just means a detachable tty. You still have a very basic, inflexible interface for "managing" it with no good feedback
21:03 < niggler> Absolute0: you aren't doing anything mission critical in vim
21:03 < ttilley> Absolute0: use tmux. it's like screen, only i hear it's roflscale.
21:03 < jrajav> The whole point of forever and co. is that they allow you to manage the state of the daemon, automatically restart it, sophisticated logging, etc.
21:03 < ttilley> you need the roflscale for your server.
21:03 < niggler> tmux actually feels slower than screen
21:04 < Absolute0> https://github.com/seejohnrun/roflscale hah
21:04 < jrajav> https://twitter.com/RoflscaleTips
21:04 < Absolute0> :)
21:05 < Absolute0> I am not trying to scale, I just want a stable system.
21:05 < niggler> screen is perfectly fine
21:05 < niggler> its tested
21:05 < Absolute0> I had hesitations for using screen, but I guess it's fine.
21:05 < niggler> I've run processes from it
21:05 < ttilley> Absolute0: you want to start a server. and have it live. thus start it from init rather than from a tty that encloses a process group that goes away when you remove the controlling terminal. if you're worried about crashes and restarts, as well as logging and monitoring, augment with a system that provides this functionality... like supervisord/monit/god/etc.
21:06 < ttilley> Absolute0: (or daemonize thus becoming a child of init rather than your controlling terminal)
21:06 < niggler> ttilley: i think he's just starting
21:06 < Absolute0> init: illegal runlevel: rtorrent :)
21:07 < Absolute0> init: illegal runlevel: node
21:07 < ttilley> <_<
21:07  * Absolute0 reads some more friendly manuals
21:08 < gkatsev> I've never had any problems with vim and screen
21:08 < gkatsev> or vim and tmux.
21:08 < Absolute0> gkatsev: once you start using the mouse it becomes a bit buggy
21:09 < ttilley> Absolute0: writing init scripts is a pain i wouldn't wish on you and there are like 3 commonly used init styles these days on unix based systems anyways. use foreman. it'll handle startup/shutdown of multiple processes and when you're done with development you can have it export init scripts for you.
21:09 < Absolute0> i believe window resizing doesn't work
21:09 < niggler> gkatsev: there's a collision between tmux mouse and vim mouse
21:09 < niggler> if you try in tmux
21:09 < niggler> set -g mouse-select-pane on                                                     
21:09 < niggler> set -g mouse-resize-pane on                                                     
21:09 < niggler> and in vim
21:09 < austinfromboston> hello?
21:09 < gkatsev> i've not had problems
21:09 < niggler> :set mouse=a
21:09 < niggler> they clash on the mac with iterm2
21:10 < gkatsev> ok
21:10 < gkatsev> I dont use the mouse much in vim anyway, so...
21:10 < niggler> thats the only real problem I've had with vim + tmux
21:10 < gkatsev> and on mac, I just use macvim
21:10 < Absolute0> iterm2 makes vim functional on the mac
21:10 < niggler> you can't run macvim over X
21:10 < niggler> unfortunately
21:10 < gkatsev> no
21:10 < Absolute0> niggler: ^^
21:11 < gkatsev> but you can run macvim in terminal.
21:11 < gkatsev> mvim -v
21:11 < Absolute0> gkatsev: that's useless over ssh
21:11 < niggler> that's the same as just running vim
21:11 < gkatsev> you could always just use netrw
21:11 < gkatsev> niggler: actually, no, it's different from built-in vim on mac.
21:11 < niggler> they are different versions, sure
21:12 < niggler> the latest macvim seems to use 7.3.260
21:12 < gkatsev> not only different versions, also, different features enabled
21:12 < Absolute0> speaking of roflscale? Isn't the purpose of node.js to "scale infinitely"?
21:12 < gkatsev> it is?
21:13 < gkatsev> I thought the purpose of node was to be an evented io framework on top of v8.
21:13 < niggler> the purpose of node is to make it easier to hire devs by simplifying the process of creating server-side services
21:14 < Absolute0> what does fiber refer to in this cartoon? http://www.youtube.com/watch?v=majbJoD6fzo
21:14 < Absolute0> is that some sort of hardware scaling?
21:15 < niggler> https://en.wikipedia.org/wiki/Fiber_(computer_science)
21:15 < ttilley> fibers are like threads that don't thread.
21:15 < ttilley> I DARE YOU TO PARSE THAT
21:15 < Absolute0> ah!
21:15 < gkatsev> ttilley: lol
21:17 < aettinger> where can i store 250gb of personal data in the cloud? Just photos and videos of kids, etc.
21:17 < ttilley> fibers are how ruby people try to make eventmachine callbacks look like the usual blocking style of writing code
21:17 < ttilley> they make me sad
21:17 < ttilley> :'(
21:17 < gkatsev> eventmachine sucks
21:17 < ttilley> gkatsev: you're preaching to the choir here. github.com/ttilley/eventmachine
21:19 < Absolute0> ttilley: is jruby actually used in production?
21:19 < thl0> what is the current status of codecoverage support in node-tap?
21:20 < ttilley> Absolute0: im not sure where the jruby question came from, but of course it is.
21:20 < Absolute0> https://github.com/ttilley/eventmachine
21:20 < Absolute0> the caveat you mention
21:20 < ttilley> Absolute0: i have more faith in jruby and charles nutter + team than MRI ruby
21:21 < thl0> on the github page it says that there is some experimental support with runforcover and bunker
21:21 < ttilley> Absolute0: oh, that's a fork where i desperately attempt to make EM more debuggable
21:21 < thl0> is that already published inside the current npm module?
21:21 < niggler> merge that shit ttilley 
21:21 < Absolute0> lots of opinionated people in here. :)
21:22 < j3j5> maybe somebody can help me out
21:22 < j3j5> I'm trying to run some script to generate a graph
21:23 < j3j5> that I generate now client-side with grafico (chart library based on Raphäel)
21:23 < j3j5> Right now it isn't able to load the Raphäel library
21:23 < ttilley> Absolute0: personal experience. i can poke headius (charles nutter) on IRC and he'll respond. once i had an issue with openssl in jruby that would only occur when connecting to this one specific IIS server over https, but i couldn't give him access to it, code to reproduce with, or anything other than a backtrace. he had that shit fixed in jruby master within like 10-15 minutes. BAM. rock star.
21:24 < j3j5> and I've been already pointed out that I should use something like node-raphael in order to use it with node.js
21:24 < Absolute0> sweet
21:24 < j3j5> and I'm afraid that'll require some changes on the grafico library
21:25 < j3j5> could anybody point me out a good manual/tutorial on adapting client-side code to node.js??
21:25 < Absolute0> ttilley: maybe just a happy coincidence?
21:26 < j3j5> I really have no clue where to start reading on the api docs :P
21:26 < j3j5> nothing sounds related on the index :s
21:29 < warz> damn, i broke my C++ addon somehow. i tried changing some Persistent<Function> types to Handle<Function>s, it broke and so I changed it back and it remained broke! lol.
21:29 < warz> now im just banging my head on my desk.
21:30 < warz> im getting a seg fault when i call a function, but if i throw an exception at the top of that function in my addon it never reaches that line. so something's happening inbetween uv_queue_work, and the work begin function being called, thats causing it to seg fault.
21:30 < warz> im geussing something to do with handle scopes, or something.
21:32 < warz> actually i said that wrong. the function that's failing to be called is just an exported module function, so it has nothing to do with uv_queue_work in that function, anyway.
21:33 < styol> When one separates their app into separate modules with module.exports, is there a common approach for sharing variables in a more global fashion? I know that I can just include the module that is responsible for say, database connections, into each other module, but wouldn't that than create a scenario where 1 app is creating multiple connections to a database?
21:33 < styol> *by include I meant require()
21:34 < niggler> styol: if you put a get/set and keep a single variable, all things that require it will see the same variable
21:35 < styol> niggler: sorry, a get/set?
21:35 < niggler> in a module, keep a variable foo and write a function that gets the value and write another function that sets the value
21:35 < niggler> var x; exports.get = function() { return x; }; exports.set = function(xx) { x = xx; };
21:36 < warz> styol, modules are cached once loaded. in my apps, i just export the database connection in one file and import it anywhere i need it. i think that's the same connection the entire time.
21:36 < styol> niggler: interesting
21:37 < styol> warz: that is what I thought I had done previously, but perhaps I'm doing something different this time
21:39 < healpay> How can I print out all of the methods for an object in console
21:40 < styol> literal example: var core = { user: require('./user.js'), memcache: require('memcache') } core.cb = new core.memcache.Client(11211, '127.0.0.1'); core.cb.connect(); // a method within core.user is trying to access core.cb and is not able to
21:42 < zeekay> i run nginx in front of a node instance which is using the cluster module to balance load across a couple processes. would i be better off using nginx's upstream directive?
21:42 < zeekay> has anyone ever benchmarked the two
21:42 < styol> warz: I think I misunderstood what you said. I will try to simplify it in that way
21:43 < zeekay> i'm periodically getting a stream of connection refused while connection to upstream errors in nginx
21:43 < warz> db.js: var redis = require('redis').createClient(); exports.redis = redis;
21:43 < warz> foo.js: var redis = require('db').redis;
21:44 < warz> thats how i tend to do things. whether or not that's suggested maybe somebody else can chime in on. it has seemed to work for me, though.
21:45 < styol> warz: makes sense
22:10 < DaMorpheuS> someone here knows riak???
22:11 < nlf> DaMorpheuS: somewhat, what's up?
22:12 < DaMorpheuS> well i try to get the idea of how to search on a riak db
22:12 < DaMorpheuS> I read a lot but still I don't get it entirly
22:12 < eMarek> hi
22:13 < Bilge> I used node.js to implement realtime Apache server usage graphs
22:13 < nlf> DaMorpheuS: i'd ask more specific questions in #riak
22:13 < Bilge> How does that make you feel?
22:13 < eMarek> geddy anyone here?
22:14 < samholmes> How do I easily add a authorization layer to my entire site for the development build/site?
22:14 < Bilge> >using node to build websites
22:14 < Bilge> What is WRONG with you?
22:14 < dk01> lol
22:16 < eMarek> Does anyone here use Geddy framework?
22:18 < mscdex> eMarek: neil peart? ;-)
22:19 < eMarek> mscdex: :D
22:20 < marshall> hey node
22:20 < EyePulp> heh
22:20 < eMarek> Is any alternative for geddy?
22:20 < marshall> anybody have experience with everyauth?
22:35 < othiym23> eMarek: try #geddy, I think techwraith hangs out there most days
22:36 < eMarek> i will check, tnx
22:39 < hoomi-abnabat> I'm using socket.io. I can connect to the server just fine. However, after I refresh my event handler gets called twice. I'm sure the socket first socket is being stored somewhere. How do I reuse the first socket?
22:43 < FunnyLookinHat> hoomi-abnabat, I don't believe you can unless you use some fancy session / cookie stuff to restore it...
22:44 < FunnyLookinHat> But I'm totally new to it - and I'm not quite sure I understand the question.
22:44 < FunnyLookinHat> hoomi-abnabat, That's probably the disconnect event being fired, followed by a new connect
22:46 < hoomi-abnabat> FunnyLookinHat, Yes it is. But I want to remain connected after a refresh
22:46 < hoomi-abnabat> Am I using socket.io correctly?
22:47 < FunnyLookinHat> hoomi-abnabat, https://groups.google.com/forum/?fromgroups=#!topic/socket_io/nrZODk1Gvck
22:47 < FunnyLookinHat> You'll have to re-associate the client to the new socket
22:47 < FunnyLookinHat> err - socket.id that is.
22:47 < hoomi-abnabat> FunnyLookinHat, The first socket dont get remove so after refresh I have 2 socket!
22:47 < FunnyLookinHat> Every connection is a new and unique socket - and you can't persist them except with using a cookie/session
22:48 < FunnyLookinHat> http://stackoverflow.com/questions/8684346/node-js-socket-io-refresh-page-and-disconnect
22:48 < FunnyLookinHat> I'm not making this up - you have to persist it in some form or fashion...  
22:51 < hoomi-abnabat> FunnyLookinHat, I don't want to save my first socket it is okay to get disconnect but it does not get removed so after the page refresh I still have the old one. Is there any way you can remove a socket ? 
22:52 < FunnyLookinHat> hoomi-abnabat, You must be doing something wrong if you're getting two socket connections - pastebin your client js
22:55 < hoomi-abnabat> FunnyLookinHat, http://pastebin.com/fEU9G6kY
22:56 < FunnyLookinHat> hoomi-abnabat, ok - that looks fine... pastebin exactly what you're logging to see the two connections
22:56 < FunnyLookinHat> ah wait
22:57 < FunnyLookinHat> yeah that's fine.
22:59 < bridger> I don't know Stylus or Less. Which one should I learn / use?
23:01 -!- mode/#node.js [+o piscisaureus_] by ChanServ
23:01 < sugendran> I quite like stylus
23:01 < sugendran> for no reason other than it makes sense in my head when I read the code
23:01 < hoomi-abnabat> FunnyLookinHat, http://pastebin.com/bjhDpPah
23:04 < hoomi-abnabat> FunnyLookinHat, http://pastebin.com/QzRdVSBd
23:04 < sugendran> also… simple retweet bot written in nodejs - http://www.abandonedexpression.com/post/35594435825/super-simple-retweet-bot-in-node-js
23:06 < FunnyLookinHat> hoomi-abnabat, That's VERY strange - can you paste your JS after it renders ?
23:08 < FunnyLookinHat> hoomi-abnabat, Also - you should verify that the socket's are different in console.log('before pieChart');
23:08 < FunnyLookinHat> so
23:08 < FunnyLookinHat> console.log(socket.id) 
23:09 < FunnyLookinHat> If the're different then I really have no idea
23:09 < FunnyLookinHat> if they're the same - your code is somehow calling itself twice.
23:12 < hoomi-abnabat> FunnyLookinHat, http://pastebin.com/Nr0QPcJe
23:13 < FunnyLookinHat> hoomi-abnabat, Ok
23:13 < FunnyLookinHat> So it's not creating multiple sockets
23:13 < FunnyLookinHat> but your socket.on('connection' is being called multiple times for some reason
23:13 < FunnyLookinHat> that may either be a bug with socket.io or your code... not sure.
23:13 < FunnyLookinHat> I'd just set a boolean flag and use that to avoid it
23:13 < hoomi-abnabat> FunnyLookinHat, and after each refresh increases :)
23:14 < FunnyLookinHat> hoomi-abnabat, Yeah I think that it's a bug in socket.io TBH
23:14 < FunnyLookinHat> But I've never seen that so I don't know.
23:14 < FunnyLookinHat> hoomi-abnabat, check this out: http://stackoverflow.com/questions/10001282/socket-io-connection-piles-up-on-each-refresh
23:18 < healpay> what's a good library for having a model that doesn't necessarily connect to a db?
23:18 < FunnyLookinHat> healpay, I just write my own with classes that return Objects
23:19 < azbyin> hi all..
23:19 < healpay> FunnyLookinHat: ya was thinking I might do that
23:19 < FunnyLookinHat> healpay, like this: https://github.com/funnylookinhat/nodejs-chat/blob/master/libs/packets.js
23:19 < azbyin> is there a way to install modules including their dependencies globally?
23:19 < FunnyLookinHat> healpay, If you want to add more fancy validation and whatnot it'd have to get a bit more fancy
23:19 < azbyin> i know about npm install -g, but i want the dependencies installed globally too
23:20 < austinfromboston> cool
23:20 < austinfrombosto2> cool yourself
23:21 < healpay> FunnyLookinHat: ty! :)
23:21 < FunnyLookinHat> azbyin, What are you attempting to do?  My understanding is that -g is - more or less - "bad'
23:22 < azbyin> FunnyLookinHat, why is it "bad"? also what if i want to keep *all* my dependencies in a particular directory for a project and add this dir to the NODE_PATH when working on that project?
23:22 < FunnyLookinHat> azbyin, Because the only reason you would use -g is for utilities to Node
23:22 < FunnyLookinHat> read here: https://npmjs.org/doc/faq.html ... control + f "-g"
23:22 < azbyin> err.. and what of modules?
23:22 < othiym23> someday... someday the war over callbacks vs promises is gonna end
23:22 < FunnyLookinHat> azbyin, "If you require() a module in your code, then that means it's a dependency, and a part of your program. You need to install it locally in your program."
23:23  * othiym23 is getting caught up on the Google group, in all its glory
23:23 < azbyin> why the adversity to installing modules at a certain location? doesn;t have to be /usr/lib/node_modules (or something similar ) globally
23:23 < azbyin> does it not make version control easier?
23:23 < FunnyLookinHat> No.
23:24 < FunnyLookinHat> Different apps require different modules and even different ersions
23:24 < azbyin> yes, and those apps will have them installed locally or a node_modules dir within themselves
23:24 < FunnyLookinHat> azbyin, Dude - just read the FAQ
23:25 < FunnyLookinHat> Does this sound familiar to what you're saying?  "Why can't npm just put everything in one place, like other package managers?"
23:25 < FunnyLookinHat> You're "Doing it Wrong" (TM)
23:25 < gansbrest> hi. I have a question about streams
23:25 < gansbrest> how can I make sure I read the whole message from the stream
23:26 < gansbrest> like when I'm listening on data event, I want to make sure I get the whole message before continuing with the further steps
23:33 < aettinger> json-protocal?
23:33 < aettinger> json-line-protocol
23:33 < aettinger> gansbrest
23:34 < AAA_awright> FunnyLookinHat: Having multiple installed versions of a module is blatantly wrong behavior, which npm shouldn't be employing
23:34 < AAA_awright> Unfortunately it does
23:34 < FunnyLookinHat> AAA_awright, I'm aware.
23:35 < EyePulp> gansbrest: node streams let you listen for certain events, one of which is the end of the stream.
23:35 < azbyin> FunnyLookinHat, so what is the consensus then?
23:35 < FunnyLookinHat> azbyin, You're doing it wrong.
23:35 < FunnyLookinHat> Don't do it that way.
23:35 < EyePulp> gansbrest: http://nodejs.org/api/stream.html#stream_readable_stream
23:35 < FunnyLookinHat> Just install them locally like npm tells you to.  :)
23:35 < azbyin> keep everything local and in your repo even if you don;t ever touch that code?
23:35 < FunnyLookinHat> Yes.
23:36 < azbyin> are people writing C code keep stdio.h within their repo?
23:36 < FunnyLookinHat> Are you retarded?
23:36 < FunnyLookinHat> This is completely different.
23:37 < azbyin> surely the case with C is even stronger than here: "require" vs. "include"
23:37 < azbyin> ok, you think the .h header files don;t provide macros ?
23:37 < FunnyLookinHat> You clearly have no idea how Node works - nor how npm works - which ultimately disqualifies you from even questioning the established practices.
23:38 < azbyin> sure, i don;t know how they work. but the established practice here is different from the established practice everywhere else
23:38 < azbyin> hence why i'm asking
23:38 < AAA_awright> azbyin: Read up on ECMAScript, then http://nodejs.org/docs/latest/api/all.html
23:39 < AAA_awright> If you're asking to be an expert, there's no place to go but primary sources
23:40 < azbyin> AAA_awright, one of the reasons i ask is because a module installed as a dependency within a sub dir or even a sub node_modules dir is not 'visible'
23:40 < azbyin> by visible i mean from ls
23:41 < AAA_awright> ls node_modules
23:41 < azbyin> npm ls ofcourse will show it
23:41 < AAA_awright> Avoid thinking in terms of npm, that will only serve to confuse
23:41 < AAA_awright> Node.js just has modules
23:41 < azbyin> AAA_awright, no.. modules can be within subdirs and then again within node_modules subdirs within those subdirs
23:41 < azbyin> yes, thats why i want everything laid out flat
23:42 < AAA_awright> azbyin: It's not different than your OS $PATH
23:42 < AAA_awright> There's certain locations that Node.js searches when dereferencing a module
23:42 < azbyin> AAA_awright, err.. see this: https://npmjs.org/doc/folders.html
23:42 < gansbrest> EyePulp: Thanks for the link. What if the stream is continuous, meaning that child process constantly sending messages to the parent process. We cant use end event for message separators as I understand.
23:43 < azbyin> foo-> node_modules->bar->node_modules->baz->node_modules->quux
23:43 < AAA_awright> azbyin: Yeah, stop thinking in terms of npm
23:43 < azbyin> i'm not saying it is wrong, but would prefer a flat layout
23:43 < AAA_awright> Or don't use it
23:43 < EyePulp> gansbrest: no - I suspect you'd have to use the data event and inspect the data for whatever delimiter you use to separate messages
23:44 < AAA_awright> azbyin: Perhaps use https://github.com/Acubed/git-node that puts everything into a flat layout
23:47 < gansbrest> EyePulp: I see, thank you
23:59 < owzim> anyone in here using Commander.js by visionmedia?
--- Log closed Tue Nov 13 00:00:00 2012
