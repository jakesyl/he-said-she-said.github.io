--- Log opened Tue Jan 29 00:00:32 2013
--- Day changed Tue Jan 29 2013
00:00 < superjoe> I think you can use the repl module for this
00:00 < superjoe> also you can write to a log and use tail -f to watch it
00:00 < AAA_awright> Or if not, that's why there's two output streams, etderr and stdout, you can redirect one to a file
00:00 < AAA_awright> Or just write to the file
00:01 < AAA_awright> open a WritableStream
00:01 < hasbra> I know I can just use tail, but...
00:01 < AAA_awright> Then just use tail. If your program is interactive, have a hotkey to switch to the log. If it's REPL, just dump between commands.
00:02 < hasbra> You're right AAA_awright
00:02 < hasbra> Thanks.
00:02 < superjoe> hasbra, if you actually did open a new console window like you said, I promise you every programmer who saw your code would do this: http://alltheragefaces.com/img/faces/png/surprised-long-neck-surprise.png
00:03 < AAA_awright> lol
00:03 < hasbra> :/ You're probably right superjoe
00:04 < superjoe> hasbra, sorry I didn't mean to offend, just thought it was funny
00:19 < MI6> joyent/node: isaacs master * 02f7d1b : net: Avoid tickDepth warnings on small writes  Always defer the _write ca - http://git.io/hwD4fA
00:21 < superjoe> why does assert.ok internally use three exclamation points?
00:21 < superjoe> if (!!!value)
00:21 < superjoe> one should be sufficient
00:21 < othiym23> superjoe: I think there was a thread explaining why on one of tnorris's Buffer-related PRs
00:22 < livinded> superjoe: but it needs to be extra negative
00:22 < livinded> for re-inforcement
00:22 < livinded> enforcement*
00:22 < othiym23> I can't even remember if the explanation was non-lame or not, but there was an explanation
00:22 < Havvy> othiym23: Link?
00:22 < superjoe> othiym23, could I trouble you for a link?
00:22 < Havvy> Cause I've never seen that before.
00:22 < Havvy> And it sounds stupid.
00:22 < jerrysv> i remember it being not-lame
00:22 < othiym23> nope, sorry guys, lost in the mists of time
00:22 < jerrysv> might be in effective javascript, don't remember
00:22 < othiym23> tnorris might be able to cough it up whenever he next shows up
00:23 < jerrysv> i'm in the same boat as othiym23, but remember it was significant
00:23 < othiym23> jerrysv: !! is in Practical JavaScript, but I don't think !!! is
00:23 < jerrysv> bnoordhuis: i'll get you more data tomorrow morning PDT
00:23 < Havvy> ! casts to boolean, no?
00:23 < misterinterrupt> I'm workin on replicating the npm couch but my replication task is being told `Please log in before writing to the db` I do have an admin created, and the ctx has an array with _admin in it     …  I don't know what to troubleshoot
00:23 < ruff> !!! means you're really serious about it
00:23 < bnoordhuis> jerrysv: okay, nice
00:23 < othiym23> Havvy: yeah, and !! casts to boolean without inverting the value
00:24 < jerrysv> bnoordhuis: and i'll run the projection that the Math.atan() is part of through an authoritative source to determine which is more correct
00:24 < othiym23> much like + will cast to number if possible without changing the value
00:27 < misterinterrupt> perhaps I need to bother you isaacs?
00:28 < CoverSlide> misterinterrupt: umm sounds like a couch problem, maybe you should ask the couch devs
00:28 < isaacbw> or the guys who host npm if they're araound
00:28 < isaacbw> *around
00:30 < CoverSlide> #iriscouch maybe
00:30 < CoverSlide> JasonSmith 
00:30 < misterinterrupt> CoverSlide: thanks for the tip, but it seems more appropriate to deal with it as my faulty npm setup, the vouch guys can't know the needs of npm
00:30 < misterinterrupt> * vouch -> couch
00:31 < misterinterrupt> I will still go ask though .. can't hurt…  or can it?
00:32 < CoverSlide> the pain will be immense
00:32 < misterinterrupt> lulz
00:33 < superjoe> ruff, maybe we should have a function that applies !'s to an arbitrary degree of seriousness
00:34 < superjoe> function itsABoolImFuckingSerious(value, n) { for(var i = 0; i < n; ++i) { value = !!value; } return value }
00:35 < superjoe> /*** @param n - how fucking serious you are ***/
00:36 < Havvy> superjoe: Heh.
00:36 < Havvy> itsABoolImFuckingSerious(false, (1/0))
00:36 < ruff> 3 quick fixes: move the 'var' up so jslint wont complain, change !! to ! so i can apply it in odd numbers, add missing semicolon
00:37 < ruff> Havvy: good point
00:37 < ruff> then i'll push it to all my repos
00:38 < Havvy> I'm *that* serious. ;)
00:39 < holzp> i notice in moment ii looks for "hasModule" as a trigger to use module.exports anyone understand what it is doing there?
00:39 < holzp> https://github.com/timrwood/moment/blob/develop/moment.js line 1386
00:40 < superjoe> ruff, haha
00:40 < superjoe> actually this would pass my jshint settings.
00:40 < Havvy> function itsABoolImFuckingSerious(value, n) { if (n < 1) { return value; } else { setTimeout(function () { return itsABoolImFuckingSerious(!!value, n - 1); }, 0); }
00:41 < superjoe> WTF TIMEOUT
00:41 < superjoe> GTFO
00:41 <@mbalho> superjoe: in general you need to calm down man
00:41 < min|dvir|us> Havvy: is that something you're having issues with?
00:41 < Havvy> s/setTimeout/setImmediately/ for Node 0.10.x
00:41 < Havvy> min|dvir|us: No. It's just a rewrite of the function written earlier.
00:41 < superjoe> mbalho, but how can anyone remain calm when there is so much code to write?
00:42 < superjoe> I'm so excited to write all of it
00:42 <@mbalho> superjoe: you know how people scream into pillows as therapy? you can make an irc channel that is not node.js like that 
00:42 < misterinterrupt> should prolly use eval if you are really serious
00:43 < redshadowhero> ...
00:43 < redshadowhero> well, that was almost a successfull perf test :/
00:43 < superjoe> mbalho, serious time - do you think I talk too much in #node.js?
00:43 <@mbalho> superjoe: no you just rage really hard sometimes
00:43 < superjoe> ok
00:43 < superjoe> duly noted
00:43 <@mbalho> superjoe: slow your roll is all im saying
00:44 < min|dvir|us> What role does Ryan Dahl play in the day-to-day of Node.js?
00:44 <@mbalho> superjoe: http://www.youtube.com/watch?v=qqgz-G5OqXM
00:44 < superjoe> mbalho, aw hell no these BPMs are way not enough
00:44 < Havvy> superjoe: setTimeout() so as to not blow the stack while also making sure that the operation doesn't block everything else.
00:44 < othiym23> min|dvir|us: none, any more
00:45 < othiym23> min|dvir|us: he's the Benevolent Dictator Emeritus of Node.js, and he's got his own projects, but he's off doing his own thing
00:45 < min|dvir|us> But he's not like Guido.
00:45 < superjoe> mbalho, this is more like it: http://www.youtube.com/watch?v=nJgrExzg6W0
00:46 <@mbalho> superjoe: hahaha
00:46 < othiym23> isaacs does all the serious coordination and Ben, Bert, TooTallNate, Fedor and Scott Blomquist do most of the day to day work
00:46 < othiym23> min|dvir|us: no, but Guido is a language designer, not a platform maintainer
00:46 < othiym23> JS predates Node
00:46 < min|dvir|us> I see.
00:46 < othiym23> and we have our moles on TC39, but we're mostly passive downstream consumers of V8, not language runtime developers
00:47 < Havvy> We've got Eich for JS.
00:47 < othiym23> yeah, but Eich doesn't have a lot to do with Node
00:47 < othiym23> PRAISE BE
00:47 < Havvy> Why praise be for that?
00:47 < min|dvir|us> Node.js is pretty much just a set of libs for V8, then?
00:48 < Havvy> min|dvir|us: Yes.
00:48 < othiym23> Havvy: opinions on BE differ
00:49 < othiym23> I wouldn't say that, min|dvir|us  -- there's a core library, but there's also libuv, which is a big part of the platform, and the Buffer stuff, and the various built-in libraries (OpenSSL, zlib, etc)
00:50 < min|dvir|us> libuv is what does the event loop, right?
00:50 < CoverSlide> right
00:50 < min|dvir|us> Doesn't V8 have an event loop?
00:50 < CoverSlide> not sure
00:51 < CoverSlide> maybe it's in chrome
00:51 < isaacbw> I think v8 is pretty barebones
00:51 < isaacbw> as far as executing code
00:51 < min|dvir|us> Any definitive word on this?
00:51 < othiym23> V8 has an event loop, but you need something to act as the interface layer between the runtime's event loop and the outside world (network and file I/O, scheduled tasks, etc)
00:51 < isaacbw> that sounds about right
00:52 < othiym23> libuv is the replacement for libevent / libev (older version that didn't take full advantage of epoll / kqueues / IOCP) and libeio (evented I/O)
00:52 < isaacbw> man, google pays a shitload of money to engineers with PhDs
00:52 < othiym23> that's because the stuff those engineers are working on is super hard ;)
00:53 < min|dvir|us> othiym23: how does libuv deal with the outside world?
00:53 < othiym23> min|dvir|us: http://nikhilm.github.com/uvbook/introduction.html :D
00:54 <@isaacs> othiym23: hey, i do a fair bit of day to day work, as well
00:54 <@isaacs> othiym23: :)
00:55 < othiym23> isaacs: sorry for my shitty phrasing dude
00:55 < othiym23> also organizing stuff is defintely work!
00:55 <@isaacs> othiym23: it's cool.  you're right, they do most of the work.
00:55 <@isaacs> othiym23: but i mean, i do write a lot of js for node
00:55 < timeturner> just wanted to know if this was a node problem, express problem or chrome dev problem: Resource interpreted as Document but transferred with MIME type application/json: http://dev:3000
00:55 < timeturner> thanks
00:55 < othiym23> yeah, I didn't mean to claim that's *all* you do
00:55 <@isaacs> i'm not JUST a manager and no-sayer
00:55 <@isaacs> :)
00:55 < Havvy> Sorry for pinging you accidentally when trying to ping the other isaac.
01:01 < jcrugzz> when isaacs speaks, everyone quiets down
01:01 < superjoe> maybe isaacs can answer the `!!!` mystery
01:02 < superjoe> https://github.com/joyent/node/blob/master/lib/assert.js#L122
01:02 < isaacbw> oh man, v8 generates machine code for the javascript?
01:02 < min|dvir|us> superjoe: that's hilarious.
01:03 < isaacbw> shit, it does
01:03 < jcrugzz> wow haha, awesome
01:03 < othiym23> isaacbw: it sure does. mrale.ph has the details of how the code generator works in one of his posts
01:03 < isaacbw> that's so cool
01:04 < isaacbw> I figured it just built some clever internal structures, but man, machine code
01:04 < superjoe> yeah man. v8 is intense
01:04 < othiym23> also, wingolog (http://wingolog.org/) has a bunch of good posts on how JITted JavaScript works in general
01:04 < jrajav> I thought it was fairly well known that V8 did JIT compilation
01:05 < isaacbw> how can mozilla justify not using b8
01:05 < livinded> isaacbw: providing an excuse for google to dump resources into making v8 faster
01:05 < othiym23> isaacbw: because spidermonkey is another top-quality JS engine?
01:05 < jrajav> Competition is a good thing
01:06 < min|dvir|us> Not when it leads to feature fragmentation.
01:06 < livinded> I'd probably never use spider monkey for anything but it makes v8 better
01:06 < jrajav> I think Mozilla and Chromium are both pretty well focused on standardization
01:06 < jcrugzz> yea when its all about market share, it can be. It all has to do with having the correct goals
01:06 < jrajav> They just also want to innovate, which can sometimes get in the way
01:07 < othiym23> spidermonkey, JavaScriptCore and V8 are all really good dynamic language runtimes
01:07 < othiym23> and they take surprisingly different approaches to solving the same basic problem
01:07 < isaacbw> I'm a pretty ardent firefox user. but I open up chrome if I run into a particularly taxing js application
01:07 < jrajav> Whatever IE10 uses is purportedly pretty fast and stable now too
01:07 < jrajav> Heck if I care though :P
01:07 < CoverSlide> noone does
01:08 < jrajav> They can just keep up at this point
01:08 < othiym23> keeping your JS engine closed source is an excellent way to ensure nobody gives a shit about it
01:08 < isaacbw> how's opera doing :P
01:08 < othiym23> which is also partially JavaScriptCore's problem
01:08 < jcrugzz> yea microsoft does not do positive things for the world
01:08 < jrajav> Yeah, as long as you don't lock other people out from making a browser
01:08 < jrajav> :/
01:08 < isaacbw> directx is Microsoft's most significant contribution to the software world right now
01:08 < CoverSlide> opera apparently is doing pretty well
01:08 < jrajav> One that integrates fully at least
01:09 < isaacbw> directx is actually pretty nice
01:09 < isaacbw> too bad it's the driving force behind a windows gaming monopoly
01:09 < min|dvir|us> OpenGL?
01:09 < othiym23> Opera is extremely popular in mobile
01:09 < othiym23> especially on dumber smart phones
01:09 < jrajav> I'm still holding out hope for Android becoming the new force in gaming in the next decade
01:09 < isaacbw> OpenGL is great, but DirectX has a nicer API imo
01:10 < CoverSlide> http://my.opera.com/chooseopera/blog/2011/01/03/how-does-opera-make-money-aka-our-most-asked-question-ever
01:10 < livinded> meh, valve has pretty much said fuck microsoft
01:10 < isaacbw> yea, go valve
01:10 < othiym23> WOO SPORTS
01:10 < othiym23> aka it's not really about taking sides, guys
01:10 < CoverSlide> well comparing  OpenGL  to DirectX is comparing apples to applesauce
01:10 < livinded> but once you stop playing games you realize how useless windows really is
01:10 < othiym23> without MS Node wouldn't be as cool as it is
01:11 < CoverSlide> it was cool before libuv
01:11 < isaacbw> othiym23, valve recently started working towards Linux support because Windows has become such an unpleasant development environment
01:11 < CoverSlide> it'll still be cool
01:11 < isaacbw> which is kind of neat
01:11 < othiym23> sure
01:11 < jrajav> Windows is still one of the better platforms for general development
01:11 < othiym23> but libuv makes it better
01:11 < livinded> isaacbw: windows has always been an unpleasant development environment
01:11 < isaacbw> for games
01:11 < livinded> other environments have just gotten better
01:11 < jrajav> I do prefer OS X myself, but I have to admit that there is some tooling that is simply superior on Windows
01:11 < isaacbw> maybe publishing environment is a better way to say it
01:11 < othiym23> also F# + Visual Studio is probably the nicest FP dev environment out there right now
01:12 < othiym23> unless you're a die-hard emacs user
01:12 < jrajav> Yup, VS is one of the big reaosns
01:12 < isaacbw> OpenGL and DirectX is a fair comparison. They approach interfacing with graphics hardware in different ways, but they fill mutually exclusive roles
01:12 < livinded> I'm faster with vim, gdb, and clang than with visual studio
01:12 < isaacbw> if you're into IDEs, nothing beats visual studio with visual assist x
01:12 < isaacbw> I'm happy with my emacs though
01:12 < harrisonm> I'm a resharper fan, personally
01:12 < isaacbw> yea, resharper too 
01:12 < iwalkbarefoot> isaacbw: resharper is a nice addition too
01:12 < othiym23> harrisonm: does resharper work well with F#?
01:12 < isaacbw> does resharper do c++ though?
01:12 < jrajav> Sublime Text 2 and IntelliJ are both valid alternatives aside form Emacs
01:13 < livinded> does anyone actually use F#?
01:13 < jrajav> livinded: Yes
01:13 < othiym23> I'm using F# with vim + mono right now and it's not a good fit
01:13 < isaacbw> if I have to use my mouse to change cursor position, it isn't a real text editor
01:13 < livinded> I thought it was one of those things neckbears talk about but nobody ever takes seriosuly
01:13 < iwalkbarefoot> I think it's just .net
01:13 < min|dvir|us> Mono sucks.
01:13 < livinded> othiym23: oh god you use mono?
01:13 < isaacbw> mono is pretty good now, isn't it?
01:13 < jrajav> livinded: Well perhaps you should re-evaluate your opinion
01:13 < othiym23> sure, I do most of my hacking on my Mac
01:13 < CoverSlide> might as well just use ocaml 
01:13 < livinded> there is no excuse to ever use mono
01:13 < isaacbw> I haven't found a good autocomplete plugin for emacs though
01:13 < CoverSlide> without having to work with mono
01:13 < isaacbw> I'm pretty happy alt-tabbing to docs
01:13 < livinded> either use windows or use a real platform
01:14 < othiym23> and F# is very appealing if you have a lot of experience with OCaml or Haskell and want a bigger, nicer standard library to play with
01:14 < harrisonm> othiym23: Never tried it, sadly
01:14 < othiym23> it's worth putting up with a fair amount of bullshit
01:14 < isaacbw> unity3d uses mono
01:14 < min|dvir|us> isaacbw: the engine?
01:14 < min|dvir|us> Or the window manager?
01:14 < CoverSlide> even on windows?
01:14 < CoverSlide> the game engine
01:14 < harrisonm> othiym23: Never tried it, sadly
01:14 < isaacbw> min|dvir|us, the game engine :P
01:14 < isaacbw> yea, on windows too
01:15 < CoverSlide> because run most libraries written for .NET and most of them don't work with mono
01:15 < othiym23> and the F# book from Apress is fucking fantastic, I wish every book about a dev tool was so good at putting the language in context
01:15 < isaacbw> my only draw to .net was XNA until Microsoft decided to stop caring about it
01:15 < CoverSlide> usually some edge case like a missing Exception class or something
01:15 < livinded> isaacbw: sdl
01:15 < CoverSlide> there's still MonoGame
01:16 < isaacbw> sdl2 is pretty slick
01:16 < CoverSlide> there's an sdl2 now?
01:16 < isaacbw> and I've worked with raw opengl a fair bit
01:16 < isaacbw> it's not officially released, but it's pretty stable
01:16 < min|dvir|us> Are there any efforts to get an OS in straight Node?
01:16 < isaacbw> a much more modern API
01:16 < CoverSlide> does anyone still use allegro?
01:16 < isaacbw> students maybe
01:16 < CoverSlide> I used to love allegro
01:16 < livinded> min|dvir|us: that would be a terrible idea
01:16 < min|dvir|us> Why?
01:16 < othiym23> min|dvir|us: that doesn't even really make sense
01:16 < livinded> because you need threads at that level
01:17 < min|dvir|us> ... why?
01:17 < isaacbw> like a kernel that does nothing but run v8?
01:17 < livinded> otherwise your nice 8 core cpus are useless
01:17 < isaacbw> that would be interesting :P
01:17 < CoverSlide> v8 has isolates
01:17 < min|dvir|us> livinded: that's boloney.
01:17 < othiym23> Node is a fairly thin layer that depends on either POSIX semantics or the Windows API to do its thing
01:17 < CoverSlide> but then node does not
01:17 < min|dvir|us> Threads aren't the only way to make code concurrent.
01:17 < min|dvir|us> In fact, they're the worst way.
01:17 < jrajav> Node is a language that abstracts away a lot of what you need for a language low-level enough to write an OS in
01:17 < isaacbw> oh, write the OS *in* node
01:17 < isaacbw> that doesn't make sense
01:18 < CoverSlide> min|dvir|us: and where do you get this information from?
01:18 < min|dvir|us> Why doesn't that make sense?
01:18 < livinded> min|dvir|us: how do you plan to do that?
01:18 < min|dvir|us> livinded: processes, like any sane programmer.
01:18 < livinded> how do you run processes in/below your kernel?
01:18 < min|dvir|us> ...
01:18 < min|dvir|us> The OS sits on top of the kernel.
01:19 < min|dvir|us> Why is writing an OS in Node so ridiculous?
01:19 < livinded> since when?
01:19 < min|dvir|us> livinded: since get out your textbook.
01:19 < echo> Since always. :-/
01:20 < othiym23> Node is purposefully written to be minimal, and there are very large swathes of functionality it expressly does not care about
01:20 < jrajav> Actually, the very idea of processes, and their implementation, is provided by the OS.
01:20 < min|dvir|us> othiym23: you're saying it's not powerful enough to write an OS?
01:20 < jrajav> That is one of its functions
01:20 < othiym23> pulling that all into Node as modules or whatever has appeal, I guess (I mean, Niklaus Wirth did make Oberon), but that would be playing against Node's strengths
01:20 < jrajav> Presumably you would know this if you actually WERE in an OS class
01:20 < min|dvir|us> jrajav: if I am not mistaken the kernel does that.
01:20 < MI6> joyent/node: isaacs master * bda45a8 : Revert "net: Avoid tickDepth warnings on small writes"  This commit break - http://git.io/Hiw7uQ
01:20 < othiym23> I'm saying that writing an OS on top of node would force you to do a whole bunch of shit that Node isn't designed to be good at
01:21 < min|dvir|us> othiym23: like what?
01:21 < othiym23> and what you ended up with at the end would not look like, behave like, or resemble in any particular way, Node as we know it today
01:21 < jrajav> Writing an OS in Node would essentially be writing an OS in C++ with some scripting glue code
01:21 < min|dvir|us> That's dumb.
01:21 < min|dvir|us> An OS is just the user interface layer for the kernel.
01:22 < othiym23> you have a somewhat antiquated idea of the level of distinction between userland and kernel
01:22 < othiym23> most folks would say that as of now an OS is userland + kernel
01:22 < min|dvir|us> othiym23: I don't know what I'm talking about at all, actually. :)
01:22 < othiym23> leaving aside the debate of what constitutes an OS and what constitutes a distro
01:22 < isaacbw> I do like the idea of a v8 process running very close to the kernel though
01:22 < jrajav> If you understood what an OS does and how it does it, and also what Node is and how it is implemented, you would be better equipped to understand that what you're suggesting is impractical at best and completely impossible at worst
01:22 < jrajav> It's not easy to explain in a few sentences, though
01:23 < othiym23> jrajav: I wouldn't say "completely impossible", because WebOS basically did it ;)
01:23 < mscdex> webos ftw!
01:23 < min|dvir|us> Nobody is giving me a straight answer here other than othiym23.
01:23 < othiym23> but that was a very specific set of use cases
01:23 < jrajav> If you took the suggestion literally it would certainly be extremely inefficient
01:23 < iwalkbarefoot> webos was awesome. it's a shame it was on such limited hardware
01:23 < jrajav> That is, without adding any more modules to Node
01:23 < iwalkbarefoot> I keep my palm pre around on the odd chance I want to tether without paying VZ money
01:23 < mscdex> i still have and use my pre3 :-D
01:23 < othiym23> that's because you're basically asking "how come I can't use ham as a hammer? They both have 'ham' in the name!"
01:23 < min|dvir|us> I just don't understand why we can't implement userland in Node.
01:24 < jrajav> min|dvir|us: Because the straight answer takes more time than we deem worth it
01:24 < min|dvir|us> *you
01:24 < othiym23> that's a different question
01:24 < jrajav> I don't see anyone else stepping up who knows :P
01:24 < othiym23> and to that my answer is "you could, but why the fuck would you want to?"
01:24 < min|dvir|us> othiym23: you said an OS is the userland + kernel, right?
01:25 < othiym23> cf. ref. Steve Klabnik's horribly ill-advised rant last week, which is true in the large but was unnecessary in the specific
01:25 < othiym23> min|dvir|us: sure, so let's posit we're Google and building a new slim runtime environment for servers built on top of a hacked-up Linux kernel
01:25 < othiym23> now you gotta write all the stuff you want to get stuff done in either C++ or JavaScript
01:25 < mthscndd> what is node.js for? I never understood it well
01:25 < echo> While I may be inclined to question the reasoning behind making it. I see absolutely no reason to shoot it down and I'd even be willing to try it. I also imagine the people creating it would learn a whole lot of interesting things about node I may never find out.
01:25 < livinded> min|dvir|us: my copy of Operating SYstem Concepts is at home and google books doesn't have a copy. But yes, us educated people are suggesting that
01:25 < othiym23> why are you doing this? what's the motivation for reinventing the wheel?
01:26 < othiym23> about 1/4 of that stuff is going to be fast as shit in Node
01:26 < min|dvir|us> The main reason is that I'd much rather hack on an OS built in Node than one in C/C++.
01:26 < othiym23> the other 3/4 have complicated logic or are computationally expensive or require an imperative / synchronous style that doesn't play to Node's strengths
01:26 < min|dvir|us> othiym23: can you give me an example?
01:26 < othiym23> so you build something that does basically what you want and start writing C++ extensions to give you the performance you want with the rest
01:27 < livinded> min|dvir|us: swapping for one
01:27 < livinded> try building a non-blocking memory manager and page loader
01:27 < Havvy> Anything with binary data
01:27 < othiym23> sure: filesystems, storage managers, database storage engines, whatever you want to call what X11 does (not a windowing system -- Node's good for those)
01:28 < CoverSlide> https://github.com/mixu/nwm << :p
01:28 < livinded> othiym23: compositing
01:28 < isaacbw> 'whatever x11 does' heh
01:28 < othiym23> at best, at that point, you've managed to reinvent the grim horror that is GNU Hurd
01:28 < isaacbw> wait, you're suggesting rewriting *all* of linux userland in node?
01:29 < othiym23> X11 does a lot of stuff, it's hard to boil it down to one thing
01:29 < CoverSlide> ttps://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQuAIwAA&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DxlA9bNk3b5Q&ei=NCUHUZ6UN-6xigLD6ICwBg&usg=AFQjCNEnos-kvoKFMZGyTC9k9CEs1h4qzw&sig2=r8wQJ-JonJJr7PZBDR04xw&bvm=bv.41642243,d.cGE
01:29 < othiym23> remember that originally was intended to be a networking system
01:29 < CoverSlide> grr fucking google
01:29 < CoverSlide> www.youtube.com/watch?v=xlA9bNk3b5Q
01:29 < livinded> othiym23: thankfull it's going away
01:29 < othiym23> yeah, but that doesn't help me describe its responsibilities ;)
01:29 < othiym23> it's more than a simple compositing library
01:29 < isaacbw> haha CoverSlide I love that clip
01:30 < min|dvir|us> isaacbw: yes, I am.
01:30 < livinded> redering, frame buffering, and other things that make you want to cry at night
01:30 < min|dvir|us> Doesn't have to be Linux userland.
01:30 < isaacbw> x11 is a "make linux work as a desktop OS" library
01:30 < othiym23> it also handles viewports, acts as a chokepoint for OpenGL / MESA / what-have-you, does a ton of weird shared memory orchestration, etc
01:30 < othiym23> gives people who design arcane configuration file formats something to aim for
01:31 < othiym23> min|dvir|us: my utterly pragmatic answer to you is the reason nobody's going to do that is because it's pointless and a huge waste of time and creativity to do so
01:31 < mthscndd> What is Node.js?
01:31 < isaacbw> setting the bar high
01:31 < livinded> and neckbeards something to tell when I was your age stories about
01:32 < min|dvir|us> othiym23: I agree that it's pointless but I'd bet that someone will do it eventually.
01:32 < isaacbw> you could probably write something intended to be embedded, like a robotics OS
01:32 < min|dvir|us> mthscndd: it's an interpreter for JS.
01:32 < gluxon> mthscndd: It was built for non-blocking networking applications, but I'm seeing it become more and more used for general applications.
01:32 < min|dvir|us> (Among other things.)
01:32 < othiym23> they'll get 10% done and then decide that they made a horrible mistake and reach for their bongs, just like every "web desktop" ever
01:32 < ckknight> is there any way to make util.inspect(-0) show "-0" instead of "0"?
01:32 < min|dvir|us> othiym23: hahahaha.
01:32 < mthscndd> So someday i`ll can use javascript to write desktop applications?
01:32 < isaacbw> ckknight, no
01:33 < isaacbw> you can today mthscndd 
01:33 < livinded> mthscndd: you can, it's called Qt
01:33 < isaacbw> if you really want to
01:33 < isaacbw> gtk+ 4 lyfe
01:33 < ckknight> isaacbw: aw :(
01:33 < isaacbw> > -0 == 0
01:33 < livinded> does gtk3 have native js bindings?
01:33 < isaacbw> >> -0 == 0
01:33 < purr> isaacbw: (boolean) true
01:33 < livinded> I haven't followed development
01:33 < mthscndd> Isn`t it slow?
01:33 < othiym23> ckknight: -0 and 0 are the same number in every sane situation
01:33 < isaacbw> mthscndd, not really
01:33 < gluxon> mthscndd: That's my personal prediction.
01:33 < SomeoneWeird> they both eval to false
01:34 < ckknight> othiym23: I know this, but I still want to differentiate.
01:34 < gluxon> mthscndd: No, JavaScript is becoming blazing fast.
01:34 < isaacbw> >> -0
01:34 < purr> isaacbw: (number) 0
01:34 < SomeoneWeird> ckknight, 
01:34 < gluxon> mthscndd: Especially with Node.js, which is asynchronous.
01:34 < SomeoneWeird> >> -0 === 0
01:34 < purr> SomeoneWeird: (boolean) true
01:34 < Havvy> QT > GTK
01:34 < cloudbender> can someone comment on firebug
01:34 < SomeoneWeird> heh
01:34 < isaacbw> it will be slower than c or c++ in many cases, but it's still really fucking fast
01:34 < isaacbw> the Qt library is insane
01:34 < cloudbender> ... profiling
01:34 < livinded> async != fast
01:34 < isaacbw> and was written by insane people
01:34 < mthscndd> do you guys have some good examples of cool node.js projects that i can see?
01:34 < gluxon> isaacbw: Depends on what you're doing.
01:34 < isaacbw> glib 4 lyfe
01:34 < ckknight> SomeoneWeird: it's equal, just as NaN !== NaN.
01:34 < SomeoneWeird> >> (0).toString().substr(0,1)=='-'
01:34 < purr> SomeoneWeird: (boolean) false
01:34 < SomeoneWeird> >> (-0).toString().substr(0,1)=='-'
01:34 < purr> SomeoneWeird: (boolean) false
01:34 < othiym23> ckknight: if it's for anything other than pure curiosity, you're doing something very wrong
01:34 < isaacbw> v8 == fast
01:34 < gluxon> livinded: Not automatically, but in a lot of scenarios, async will be more "efficient" than blocking.
01:35 < ckknight> othiym23: I'm writing a compile-to-javascript language and it's up to the user if they want to differentiate.
01:35 < othiym23> >>> 1 / -0
01:35 < purr> othiym23: (number) -Infinity
01:35 < othiym23> >>> 1 / 0
01:35 < purr> othiym23: (number) Infinity
01:35 < livinded> gluxon: so is threading. It's just easier to get async right
01:35 < othiym23> there's how you can tell the difference
01:35 < isaacbw> ckknight, why are you doing that
01:35 < ckknight> the proposed Object.is differentiates between 0 and -0, therefore I want to in this case
01:35 < gluxon> livinded: Yes, but I was generally thinking in terms of networking.
01:35 < min|dvir|us> livinded: threading is concurrency via shared memory.
01:35 < isaacbw> what would it be practically
01:35 < othiym23> ckknight: see above
01:35 < ckknight> isaacbw: because I can make a better language, with blackjack and hookers!
01:35 < min|dvir|us> livinded: this is inherently bad.
01:35 < isaacbw> like, what is -1 + 1
01:35 < cloudbender> I am iterating 100,000 times, .002ms average, .001ms min.  can the profiler generate numbers less than .001ms ?
01:35 < isaacbw> 1 - 1
01:36 < isaacbw> ckknight, but it makes no sense :(
01:36 < isaacbw> how would you use it?
01:36 < ckknight> othiym23: oh, I know, I've already done that, I was just wondering about util.inspect
01:36 < isaacbw> you're as insane as the qt designers
01:36 < gluxon> In NSIS.
01:36 < livinded> min|dvir|us: if memory was a scarce resource you probably wouldn't be arguing that
01:36 < gluxon> There is a function (I think it's called doop). It does nothing.
01:36 < ckknight> isaacbw: I find sanity overrated
01:36 < mthscndd> If i can write javascript apps for desktop, is there anyway to use the DOM with the default OS interface, just like it works with html?
01:36 < isaacbw> no
01:36 < min|dvir|us> livinded: has nothing to do with whether memory is a scarce resource.
01:37 < motaro> Windows 8
01:37 < isaacbw> but some crazy people use DOM for desktop apps with appjs
01:37 < min|dvir|us> livinded: people use threads because they're lazy.
01:37 < othiym23> AFAIK, the only reason that stuff is in JS is because of IEEE 754, and the only way to access the difference between the two from JS is via the test I included above
01:37 < isaacbw> it's not the OS UI though
01:37 < motaro> It's suppose to support web development on its OS.
01:37 < isaacbw> threads aren't lazy
01:37 < othiym23> min|dvir|us: that is totally not true
01:37 < isaacbw> smart threads are better
01:37 < livinded> min|dvir|us: no, people use threads because sometimes it's the best tool for the job or they don't know better
01:37 < gluxon> mthscndd: Let me show you something cool. -> https://github.com/rogerwang/node-webkit
01:37 < Havvy> Doesn't XUL allow for DOM manipulations?
01:37 < isaacbw> XUL is crazy
01:37 < jrajav> motaro: *xaml development
01:37 < isaacbw> you're all vrazy
01:37 < Havvy> It is.
01:37 < min|dvir|us> I don't see why people would use threads over processes, unless they're memory-limited.
01:37 < isaacbw> *crazy
01:38 < min|dvir|us> othiym23: why else?
01:38 < Havvy> But it *is* an option nonetheless.
01:38 < othiym23> min|dvir|us: and if you're going to diss threads, ensure that you're differentiating between POSIX / OS threads and lightweight threads, or you'll get a million pissed-off Erlang devs yelling at you
01:38 < livinded> I feel sorry for people who wrote firefox extensions with XUL
01:38 < gluxon> Havvy: Yes.
01:38 < isaacbw> because stdio is slower than shared memory
01:38 < motaro> jrajav: No they actually support html on it'
01:38 < motaro> it's interface
01:38 < min|dvir|us> othiym23: I mean OS threads.
01:38 < isaacbw> livinded, why
01:38 < mthscndd> gluon, this is really nice
01:38 < isaacbw> is it going away?
01:38 < mthscndd> gluxon*
01:38 < min|dvir|us> othiym23: the alternative are called fibers, no?
01:38 < livinded> isaacbw: no, it just sucks to work with
01:38 < isaacbw> yea
01:38 < othiym23> even for OS threads, look at something like Jetty, which has to be one of the fastest, if not the fastest, pure HTTP servers out there
01:38 < isaacbw> I tried to make an extension once and just stopped
01:38 < isaacbw> "fuck this shit"
01:39 < mthscndd> But what about node.js and the new Firefox OS?
01:39 < othiym23> it's built on Java threads, which are almost always OS threads now
01:39 < harrisonm> A friend and I were making a modification of AdBlockPlus for a school project, it's in XUL.  Codebase was pretty convoluted
01:39 < othiym23> min|dvir|us: no, coroutines and fibers are not the same as lightweight processes / green threads
01:39 < motaro> Processes is way more complicated to share information.
01:39 < isaacbw> http://www.cafeaulait.org/course/week11/02.html
01:39 < min|dvir|us> motaro: just pass JSON.
01:39 < othiym23> coroutines and fibers are a simple extension to allow single-threaded code to support concurrency
01:39 < gluxon> mthscndd: Firefox OS is running on XUL to create its interface out of web technologies.
01:39 < livinded> min|dvir|us: go read Operating Systems Concepts or take an OS class
01:39 < min|dvir|us> othiym23: and lightweight threads?
01:39 < othiym23> they aren't a parallel computation strategy
01:40 < isaacbw> it's more overhead to share info through stdio though
01:40 < Havvy> isaacs: You can avoid XUL these days with the Jetpack API.
01:40 < gluxon> mthscndd: Similar concept, different technologies. Firefox OS uses Gecko, SpiderMonkey.
01:40 < gluxon> Node.js uses V8
01:40 < gluxon> And the link I gave you is of course, WebKit.
01:40 < cloudbender> It seems that on the server side, I will have to be good at messaging between node processes.
01:40 <@isaacs> Havvy: wrong isaac
01:40 < othiym23> lightweight threads can be assigned to multiple cores and can execute in parallel, because that's what threads are
01:40 < Havvy> :/
01:40 < harrisonm> Will Firefox OS be supporting Jetpack/Add-on SDK?
01:40 < gluxon> harrisonm: I imagine so.
01:40 < isaacbw> I just soaked some raw denim and I'm wearing it now and I have to go outside
01:40 < isaacbw> fuck me
01:40 < mthscndd> gluxon, which of them is better?
01:40 < isaacbw> it's 15 degrees
01:41 < cloudbender> +15 ?
01:41 < Havvy> C or F?
01:41 < isaacbw> F
01:41 < motaro> min|dvir|us: besides you have all those multithread capabilities on the cores why not use them.
01:41 < isaacbw> this is merica
01:41 < harrisonm> isaacbw: I'm comfortably wearing short sleeves right now, woo Texas
01:41 < isaacbw> you won't be laughing come 100 degree summers
01:41 < min|dvir|us> motaro: because they force you to write threadsafe code.
01:41 < harrisonm> isaacbw: but it's okay, you can start laughing at me around May
01:41 < isaacbw> heh
01:41  * othiym23 lols
01:41 < min|dvir|us> motaro: also, threads can't be executed on multiple machines.
01:41 < othiym23> you *always* have to write threadsafe code
01:41 < isaacbw> I lived in texas for a year or two
01:41 < lewellyn> i've not been wearing a jacket most days lately, or even nights. woo california. ;)
01:41 < min|dvir|us> othiym23: ?
01:41 < isaacbw> I though 80 degrees was a nice day
01:41 < othiym23> but sometimes you can choose a set of constraints to make it easier on you
01:41 < lewellyn> i wore shorts last week!
01:42 < isaacbw> you know something's wrong when 80 degrees feels cool
01:42 < iwalkbarefoot> isaacbw: we're in a heat-wave at 48, we had a high of 12 for 3 days in a row or so
01:42 < harrisonm> isaacbw: I've been here my whole life.  Dunno what I'm going to do if/when I move
01:42 < othiym23> as soon as you're using thread processes or child_process in node, min|dvir|us, you have to worry about deadlocks and starvation and race conditions again
01:42 < motaro> min|dvir|us: I suppose then it has to do with what you want to develop.
01:42 < isaacbw> you're going to get really excited when you're in a snow storm for the first time and everyone will think you're weird
01:42 < gluxon> mthscndd: V8 and SpiderMonkey are both JavaScript execution engines. Both perform well, but V8 is generally scores better on benchmarks and has a much smaller code base. V8 is also used in Chrome as well as this project. Chrome gets its reputation for speed from V8.
01:43 < min|dvir|us> othiym23: I don't know what tread processes or child_process is.
01:43 < min|dvir|us> I'll read up.
01:43 < harrisonm> And then the next snowstorm comes and it's less of a novelty
01:43 < isaacbw> I still freak out about snow though and I've lived in it my entire life
01:43 < othiym23> you can get around that some with declarative / pure functional environments like Erlang where the runtime hides a lot of that from you (which is why the Actor model is so appealing), but at some point you do have to care about all that stuff
01:44 < isaacbw> go c or go home
01:44 < livinded> isaacbw: +1
01:44  * jocafa high fives isaacbw
01:44 < harrisonm> c is for wusses, x86 assembly is where it's at
01:44 < othiym23> isaacbw: go go or go home ;)
01:44 < isaacbw> I got excited when google go was released but quickly lost interest when they refused to take my patches
01:44 < isaacbw> they lead me on too which was the worst part
01:44 < isaacbw> *led
01:44 < isaacbw> led?
01:44 < harrisonm> :|
01:44 < othiym23> yeah led
01:44 < livinded> I got excited when mozilla released rust and then I saw the syntax
01:44 < harrisonm> led
01:45 < gluxon> livinded: Rust isn't bad.
01:45 < livinded> it's like they learned nothing from dynamic languages
01:45 < othiym23> isaacbw: that is the Google Way, unfortunately
01:45 < harrisonm> I totally forgot about rust, think I glanced at it and bookmarked it but never looked at it again
01:45 < holzp> what ever happened to Google Dart anyway
01:45 < isaacbw> it's still going I think
01:45 < gluxon> livinded: I'd imagine something like CoffeeScript will evolve for Rust the same way it did for JavaScript.
01:45 < livinded> gluxon: why do you need to specify for AND each
01:45 < othiym23> holzp: still going strong, that's what mraleph works on these days
01:46 < livinded> you don't need a loop construct and an iterator in the same statement
01:46 < othiym23> that's JUST what we need -- more transpiled bullshit
01:46 < holzp> cool havn't heard much since it launched
01:46 < livinded> othiym23: that too
01:46 < livinded> let's just make good languages with good compilers
01:46 < gluxon> :)
01:47 < min|dvir|us> othiym23: what's wrong with transpiling?
01:47 < livinded> min|dvir|us: you're a slave to the intermediary
01:47  * ckknight revels in his transpiled bullshit
01:47 < othiym23> after writing it fulltime for several years now, I no longer really think there's anything wrong with JS's syntax
01:47 < min|dvir|us> othiym23: it's pretty ugly though.
01:47 < livinded> othiym23: you jsut have brain damage
01:47 < isaacbw> I love js syntax
01:47 < isaacbw> It's beautiful :(
01:47 < gluxon> JS is cool.
01:47 < ckknight> there are some things that could be a lot nicer
01:47 < ckknight> e.g. callback hell
01:47 < min|dvir|us> I'd rather CoffeeScript over JS any day.
01:47 < othiym23> the semantics could use some serious help and ES6 makes me scared and lonely, but the syntax is fine
01:48 < gluxon> isaacbw, othiym23: What do you think of CoffeeScript? Just wondering.
01:48 < isaacbw> I love how map-y javascript programs are
01:48 < harrisonm> Yeah, I can't get my head around CoffeeScript, but that's probably because I'm used to plain Javascript
01:48 < isaacbw> I've looked at coffeescript but never really cared to learn it
01:48 < livinded> if coffeescript didn't have white space significance, the people writing the compilers weren't retarded, and sourcemaps worked I'd be willing to use it
01:48 < isaacbw> it seems more like a toy than a serious tool
01:48 < isaacbw> but hey
01:48 < othiym23> gluxon: I don't care for it, but whatever floats your boat, man
01:48 < isaacbw> people use it
01:48 < isaacbw> and like it
01:48 < gluxon> othiym23: I don't use CoffeeScript. I'm looking at if it's worthwhile.
01:48 < min|dvir|us> People use it because it makes JS more readable.
01:48 < min|dvir|us> And it is higher-level than JS.
01:48 < ckknight> livinded: what's wrong with significant whitespace?
01:48 < isaacbw> I think it makes it a lot harder to follow
01:49 < isaacbw> my brain is pretty broken though
01:49 < livinded> ckknight: it's annoying
01:49 < ckknight> so you don't indent your code sanely normally?
01:49 < harrisonm> My feeling is that Python and Ruby's syntax models don't work as well for Javascript because they were designed with, well, Python and Ruby in mind, not JS
01:49 < livinded> ckknight: I do. But when I'm debugging or hacking on something it's nice to have flexability
01:49 < othiym23> ckknight: the *one* change I'd make to JS wrt callback hell is getting rid of the need for explicit return and make JS more like other FP languages that return the value of the last statement in the block
01:49 < isaacbw> ctrl-x h <tab>
01:49 < gluxon> ckknight, livinded: 4 spaces for tabs. Tabs are \t. End of discussion -.-
01:49 < ckknight> gluxon: I was never discussing that with you.
01:49 < livinded> gluxon: ya, I use 2 0x32
01:50 < othiym23> I also don't hate CoffeeScript's fat arrow, as long as it's understood to be a semantic stand-in for Function.bind and not some halfassed closure generator
01:50 < gluxon> ckknight: My personal opinion  :)
01:50 < harrisonm> So you apply that to JS, and it's pretty, but it's not really meant for it, so there's a learning curve/adjustment there
01:50 < min|dvir|us> othiym23: I think that's in the docs. :)
01:50 < isaacbw> it would be cool to have some syntax for a callback flow to look like it's returns
01:50 < isaacbw> but it isn't
01:50 < isaacbw> if that makes sense
01:50 < isaacbw> like, async returns
01:50 < gluxon> isaacbw: That would be nice.
01:50 < min|dvir|us> Those are called backcalls.
01:50  * ckknight has async returns in his language
01:50 < othiym23> isaacbw: yeah, that's what promises and fibers both try to do
01:50 < min|dvir|us> See LiveScript.
01:51 < ckknight> err, well, a whole slew of async bs
01:51 < othiym23> and Iced CoffeeScript, which is a derivative of TameJS
01:51 < harrisonm> Isn't that kind of what yield does in Ruby?
01:51 < ckknight> I need to publish this thing soon
01:51 < isaacbw> I haven't used promises much more than as callbacks
01:51 < isaacbw> maybe i should read about them more
01:51 < othiym23> promises are both simple and very powerful, but they're kind of useless without widespread traction, is my experience with them
01:52 < isaacbw> gah, I need to go get cash for laundry
01:52 < othiym23> Q is a nice library, but I spend a lot of my time adapting library code to work with it rather than just solving problems
01:52 < ckknight> harrisonm: no, since evented systems such as what node.js has with its async-by-default stuff is different than iterator continuations.
01:52 < harrisonm> ...right!  It's been a little while since I touched Ruby, forgot the distinction
01:52 < min|dvir|us> >>> function f () { return f(); }
01:53 < purr> min|dvir|us: undefined
01:53 < min|dvir|us> Why?
01:53 < othiym23> if only JS had call/cc (or at least delimited continuations) without doing insane MacGyver nonsense
01:53 < min|dvir|us> Can someone explain purr's output to me please?
01:54 < CoverSlide> you have a function declaration, not an expression
01:54 < min|dvir|us> Aha.
01:54 < CoverSlide> a function declaration technically doesn't have a value
01:54 < min|dvir|us> >>> (function f () { return f(); })()
01:54 < purr> min|dvir|us: RangeError: Maximum call stack size exceeded
01:54 < CoverSlide> >> (function z(){})
01:54 < purr> CoverSlide: (function) z
01:55 < ckknight> harrisonm: it's basically the difference between enumerability vs. observability. ...sorta
01:56 < harrisonm> I'll have to get back into it, everything I've been doing lately has been JS and Python
01:56 < harrisonm> ...and some PHP :(
01:57 < gluxon> harrisonm: I just got back into doing PHP today after a couple months of Node.js and JavaScript.
01:57 < gluxon> I brought over a lot of JS habits.
01:57 < min|dvir|us> Why would you get back into PHP?
01:57 < Havvy> min|dvir|us: Cause sometimes you don't choose the platform?
01:57 < othiym23> my gf has been writing a WebSockets implementation in PHP for work and it's kind of gutwrenching listening to all the hoops she has to jump through
01:57 < CoverSlide> ew
01:58 < othiym23> also, I am a certified crazy person when it comes to doing ridiculously hard shit for no real good reason and there's no way I'd try to do that
01:58 < ckknight> well, the distinction is best made clear in calling a forEach function and passing a callback (which causes inversion of control) vs. using an iterating loop. The control of who is managing the communication between the enumeration is on the supplier for the former, therefore it must happen synchronously, and consumer for the latter, therefore synchronicity is irrelevant.
01:58 < gluxon> PHP isn't as bad as people say....
01:58 < ckknight> harrisonm: ^--
01:58 < othiym23> PHP is fine
01:58 < CoverSlide> PHP does have support for async sockets though
01:58 < min|dvir|us> Programming languages are like sinks.
01:58 < min|dvir|us> PHP is like a knee-level sink with both knobs labeled C.
01:58 < othiym23> writing low-level TCP shit with poll and select and binary header parsing in PHP is fucking gross
01:58  * ckknight goes #2 in PHP's sink
01:58 < harrisonm> PHP is *okay*, but I've been spoiled lately by better languages
01:59 < gluxon> harrisonm: Yeah, same.
01:59 < gluxon> harrisonm: You don't know how many times today I wanted to pass a function in PHP.
01:59 < harrisonm> ckknight: gotcha, thanks
01:59 < gluxon> ...
01:59 < Havvy> gluxon: Can't you pass functions in PHP 5.4?
01:59 < echo> gluxon: It has it's purposes, in my opinion, however, I find other alternatives to be more interesting and require much less ass-coverage checking.
01:59 < superjoe> php is such a hack. I don't understand how it is so popular
01:59 < othiym23> gluxon: just store all your functions in strings and use eval!
01:59 < othiym23> it worked for JS developers for years!
02:00  * min|dvir|us dies inside
02:00 < othiym23> even better than function pointers, because to debug you can just log the parameters
02:00 < othiym23> problem solved!
02:00 < harrisonm> Dunno about PHP 5.4, all I've really done as far as passing functions in PHP is the Wordpress API
02:00 < harrisonm> which uses strings to pass functions
02:00 < gluxon> othiym23: NO.
02:00 < gluxon> Funny, but no :P
02:00 < othiym23> superjoe: it's a super fast tool to develop a wide variety of front end stuff in 
02:00 < someprimetime> I actually JUST hopped off the PHP train this weekend
02:00 < superjoe> proof that php is, and will forever be, a hack:
02:00 < superjoe> <%
02:00 < superjoe> Q.E.D.
02:00 < gluxon> But hacks are good :'(
02:01 < othiym23> there's a reason Facebook has stuck with it, and I know that there are a surprisingly large number of otherwise web 2.0 companies using it for reasons that make sense to them
02:01 < someprimetime> from developing in CakePHP for awhile
02:01 < someprimetime> Now I'm using express which actually is a breath of fresh air
02:02 < harrisonm> There's actually a pretty nice module for PHP now called Slim that's modeled after Sinatra and Express
02:03 < harrisonm> It's still PHP, but if you have to use LAMP, it looks pretty great
02:03 < othiym23> yeah, no -- I will use and support PHP for the stuff it's good at, but using frameworks with it is almost always a nightmare
02:03 < mindcruzer> is there a way to tell if an XmlHttpRequest to a node.js server has been aborted?
02:03 < gluxon> PHP isn't bad for a language written a decade ago.
02:03 < gluxon> :)
02:03 < min|dvir|us> Psh.
02:03 < min|dvir|us> Python was written over 15 years ago.
02:03 < Havvy> Aren't 99% of the languages we use written over a decade ago?
02:04 < CoverSlide> go
02:04 < harrisonm> min|dvir|us: and then partially rewritten at least twice since then :P
02:04 < CoverSlide> JavaScript was written 19 years ago
02:04 < gluxon> Havvy: Yes, but most evolve. Node.js being a framework of JavaScript is an example of that. PHP hasn't really evolved at all.
02:04 < min|dvir|us> harrisonm: that's true. :)
02:04 < min|dvir|us> Lua.
02:04 < min|dvir|us> Lua is awesome.
02:05 < gluxon> Assembly is the best. Beats JS by a long shot.
02:05 < gluxon> ^ not meant to be taken seriously.
02:05 < othiym23> Lua's been around for well over 10 years
02:05 < Havvy> There's not a huge semantic difference between Lua and JS.
02:05 < gabrieluk> javascript evolved because of the browser speed, no other reason
02:05 < mindcruzer> Rust
02:05 < othiym23> also there is a big difference between PHP 5 and PHP < 5
02:05 < CoverSlide> Everyone should use FORTRAN
02:05 < Havvy> Rust is a work in progress.
02:05 < echo> Also, laravel has been a godsend on one of my client's PHP applications, especially injuction with composer.
02:05 < superjoe> Havvy, 1 based array index :-(
02:05 < othiym23> screw all this antiquated crap, if you want to get on top of the curve you'll write everything in nemerle
02:05 < gluxon> gabrieluk: And because this weird little project took advantage of callback functions for asynchronous IO.
02:06 < Havvy> superjoe: Yeah. But that's easy to work around.
02:06 < othiym23> if you thought that the problem with Scala is that it didn't have good enough integration with XML, nemerle is so for you
02:06 < superjoe> Havvy, I suppose you can get your brain to associate the syntax of the language with the indexing of arrays
02:07 < gabrieluk> yup, and it happens that js have call backs, because of the browser again. node is just an  irony of the destiny
02:07 < Havvy> Lua's 1-based arrays haven't tripped me up yet.
02:07 < Havvy> But then, the only program I've written in Lua was a Minecraft ComputerCraft turtle to harvest Forestry Peat.
02:08 < superjoe> <3 callbacks
02:08 < ckknight> I did lua work for like 3 years, you get used to 1-based indexing
02:08 < superjoe> and closures
02:08 < ckknight> I do think 0-based indexing is superior, though.
02:08 < gabrieluk> no one have ever said:" hey let's make this js lang that in the future will be so fucking amazing and useful in the server side."
02:09 < gabrieluk> it is a miracle basicaly
02:09 < Havvy> Gabriel403: The creators of Ruby maybe?
02:09 < superjoe> gabrieluk, I hate to be contrarian, but I'm pretty sure at least *one* person said that
02:09 < superjoe> programmers say some pretty pie in the sky things sometimes
02:09 < othiym23> also, don't forget LiveScript
02:09 < gabrieluk> na, mate, you are wrong, js is a front end tool, nothing more. the rest is mere coincidence
02:09 < othiym23> JS was a server-side language before it was a browser language
02:09 < gluxon> gabrieluk: And an awesome oop model that kicks Java in the rear end.
02:10 < othiym23> whether it was a GOOD server-side language is very open to interpretation
02:10 < harrisonm> gluxon: A lot of things kick Java in the rear end
02:10 < Havvy> PHP beats Java for web servers.
02:10 < gluxon> harrisonm: *joke* PHP included.
02:10 < superjoe> Java kicks itself in the rear end
02:10 < othiym23> y'all need to learn more about DropWizard before dismissing Java
02:10 < othiym23> it is a kick ass web stack
02:11 < othiym23> learn: http://dropwizard.codahale.com/getting-started/
02:11 < othiym23> and now I go home to grind familiars in Ni no Kuni
02:11 < othiym23> have fun with your bikeshedding everybody
02:11 < harrisonm> Wasn't totally dismissing Java, I do a lot of Android dev
02:12 < Havvy> harrisonm: Can you use Scala on Android?
02:12 < harrisonm> Never tried
02:12 < mindcruzer> i believe you can
02:12 < othiym23> the idea of running sbt on an Android device gives me cold chills
02:13 < derekchiang> f
02:13 < othiym23> probably could use the compiled bytecode just fine, as long as it's not depending on stuff that's in JDK 1.7 that's not in Dalvik (note: I do not know what the delta is between the JVM and Dalvik right now)
02:13 < harrisonm> Going to be doing some experiments to explore mesh networking in the next few weeks, might look into getting Node running on Android
02:13 < harrisonm> Every example I've found thus far is running node .6
02:13 < harrisonm> *0.6
02:14 < CoverSlide> there is a node package for android
02:14 < gabrieluk> othiym23, i'm sure js was always meant to run in the browser. first version was livescript, you can check a bit the history http://javascript.about.com/od/reference/a/history.htm
02:15 < gabrieluk> former netscape
02:15 < CoverSlide> about.com ...
02:15 < CoverSlide> wonderful resource there
02:16 < echo> ಠ_ಠ
02:16 < gabrieluk> yes, i like about.com, can't remember any bad info comming from there
02:17 < gabrieluk> another good source http://dailyjs.com/2010/05/24/history-of-javascript-1/
02:17 < echo> gabrieluk: You're lucky then. I regularly compare it to w3schools.
02:17 < min|dvir|us> echo: what do you compare to w3schools?
02:17 < gabrieluk> "JavaScript was born out of a need to make web pages dynamic." ---Brendan Eich
02:18 < echo> min|dvir|us: about.com
02:18 < CoverSlide> So you never heard of Netscape Enterprise Server
02:18 < harrisonm> CoverSlide: offical?
02:18 < CoverSlide> google it
02:19 < harrisonm> I did, so far still just seeing a 0.6 port
02:19 < isaacbw> w3schools is good if you're first encountering web technology
02:19 < isaacbw> but it quickly becomes insufficient
02:21 < isaacbw> it creeps me out that I can search for something in google and the very next page I visit has google ads for the thing I was searching
02:21 < isaacbw> I do find myself clicking on a lot more ads though
02:22 < isaacbw> I can't help it sometimes
02:22 < isaacbw> I
02:22 < CoverSlide> I have adblocker
02:22 < isaacbw> I'll bet the google goggles have mind control shit inside them
02:22 < CoverSlide> I've forgotten what ads look like
02:22 < isaacbw> I avoid adblockers because I don't mind giving sites revenue
02:22 < gabrieluk> have you seen the google toilet vid?lol...soooo funny
02:23 < min|dvir|us> gabrieluk: link?
02:23 < echo> isaacbw: rofl. It's just pure coincidence. Keep making google money so they can keep making more free stuff to collect information and generate more of these coincidences :3
02:23 < isaacbw> google is a coincidence engine
02:23 < isaacbw> oh my god
02:23 < isaacbw> that's what all the datacenters are for
02:23 < isaacbw> holy shit
02:23 < CoverSlide> well i have it cause if i'm looking up illegal stuff i don't want russian brides and fuckbook ads all over if i'm at work or home
02:23 < gabrieluk> http://lmgtfy.com/?q=google+toilet
02:24 < isaacbw> holy shit
02:24 < isaacbw> holy shit
02:24 < isaacbw> holy shit
02:24 < isaacbw> I'm really freaked out now guys
02:24 < gabrieluk> min|dvir|us
02:24 < CoverSlide> ok put the coke down
02:25 < gabrieluk> haha, this one is a direct link http://current.com/shows/supernews/91659341_the-google-toilet.htm
02:26 < amagee> any ideas what would cause `npm update` to return instantly with no output, with a valid package.json file in the current directory and no node modules installed?
02:26 < gabrieluk> borrow some monet for medicine ^^
02:26 < isaacbw> node install?
02:26 < gabrieluk> money*
02:26 < min|dvir|us> amagee: because there's nothing to update.
02:26 < amagee> there are a whole bunch of packages that need to be installed but aren't
02:27 < isaacbw> are they in package.json?
02:27 < isaacbw> oh
02:27 < amagee> yes
02:27 < isaacbw> google has pretty good privacy policies though
02:27 < isaacbw> they keep all the info for their own nefarious purposes
02:28 < gabrieluk> maybe you should order a toilet, it is free ^^
02:33 < min|dvir|us> That was a stupid video.
02:33 < min|dvir|us> The concept of a Google Toilet is hilarious though.
02:34 < min|dvir|us> >>> x = {}; x.prototype = new Array(); x.push('yo');
02:34 < purr> min|dvir|us: TypeError: Object #<Object> has no method 'push'
02:34 < min|dvir|us> What's up with that?
02:34 < CoverSlide> learn javascript
02:34 < min|dvir|us> >>> x = {}; x.prototype = []; x.push('yo');
02:34 < purr> min|dvir|us: TypeError: Object #<Object> has no method 'push'
02:35 < min|dvir|us> CoverSlide: if you know it so well you should know what's wrong.
02:35 < isaacbw> haha
02:35 < CoverSlide> x.prototype doesn't exist
02:35 < min|dvir|us> >>> x = {}; x.prototype
02:35 < purr> min|dvir|us: undefined
02:35 < CoverSlide> the prototype chain doesn't come from .prototype on the current object
02:35 < isaacbw> >> function x() {}; x.prototype = new Array(); var y = new x(); y.push('yo');
02:35 < purr> isaacbw: (number) 1
02:35 < Havvy> >>> x={}; x.__proto__
02:35 < purr> Havvy: (object) {__defineGetter__: (function) __defineGetter__, __defineSetter__: (function) __defineSetter__, __lookupGetter__: (function) __lookupGetter__, __lookupSetter__: (function) __lookupSetter__, constructor: (function) Object, hasOwnProperty: (function) hasOwnProperty, isPrototypeOf: (function) isPrototypeOf, propertyIsEnumerable: (function) propertyIsEnumerable, toLoc…
02:36 < CoverSlide> instead it would come from .prototype on the object's constructor
02:36 < gabrieluk> min|dvir|us: go to codecademy.com, i learned js there, and although it is basic, it teaches well the main concept, go for it, it is fun and interactive
02:37 < gabrieluk> and is nice that it doesn't presume you are learning js for DOM manipulation
02:37 < CoverSlide> >>> x = {};Object.getPrototypeOf(x).push = Array.prototype.push; x.push('yo');x
02:37 < purr> CoverSlide: (object) {0: 'yo', length: 1}
02:38 < Havvy> There's also videos by Crockford.
02:38 < CoverSlide> >>> x = {};x.__proto__ = new Array(); x.push('yo');x
02:38 < purr> CoverSlide: (object) {0: 'yo', length: 1}
02:38 < CoverSlide> either way. the first one is the standards-approved way
02:40 < CoverSlide> >>> x = {};Object.getPrototypeOf(x).push = Array.prototype.push; x.push('yo');Object.prototype.push
02:40 < purr> CoverSlide: (function) push
02:40 < CoverSlide> aw dammit
02:44 < isaacbw> can you set the prototype of Object?
02:44 < ckknight> >>> x = {push: Array.prototype.push};y = Object.create(x);y.push('yo');y
02:44 < purr> ckknight: (object) {0: 'yo', length: 1}
02:45 < CoverSlide> you can
02:45 < CoverSlide> oh set it no
02:45 < isaacbw> naeto
02:45 < isaacbw> oh
02:45 < isaacbw> aw :(
02:45 < CoverSlide> but you can modify it
02:45 < isaacbw> still cool
02:45 < CoverSlide> but it's just a circular reference to Object.prototype
02:46 < ckknight> circular?
02:46 < CoverSlide> i think
02:46 < ckknight> nope
02:46 < isaacbw> yea, if you said yes to setting the prototype
02:46 < isaacbw> I would believe in magic
02:46 < ckknight> >>> Object.prototype.__proto__
02:46 < purr> ckknight: (object) null
02:46 < ckknight> yeah, no circles
02:46 < CoverSlide> >> Object.getPrototypeOf(Object.prototype)
02:46 < purr> CoverSlide: (object) null
02:46 < ckknight> isaacbw: yeah, you can modify an object's prototype by setting __proto__. I think it's evil, though.
02:46 < CoverSlide> hmm ok nevermind
02:46 < ckknight> isaacbw: I prefer to make fresh objects using Object.create
02:47 < isaacbw> In the mirrors of the many judgments, my hands are the color of blood. I sometimes fancy myself an evil which exists to oppose other evils; and on that great Day of which the prophets speak but in which they do not truly believe, on the day the world is utterly cleansed of evil, then I too will go down into darkness, swallowing curses. Until then, I will not wash my hands nor let them hang useless.
02:47 < CoverSlide> I thought if I go up the getPrototypeOf chain I'd end up in a circular reference. i guess I was wrong
02:47 < ckknight> nah, no circles
02:47 < ckknight> I think that breaks things...
02:48 < ckknight> >>> var x = {}, y = Object.create(x); x.__proto__ = y;
02:48 < purr> ckknight: Error: Cyclic __proto__ value
02:48 < CoverSlide> ah. learned something new
02:48 < redshadowhero> Anyone here work with node with the --prof flag set?
02:49 < min|dvir|us> CoverSlide: weren't you the one telling me to learn JS?
02:49 < CoverSlide> yeah this isn't basic js prototypal stuff
02:49 < isaacbw> has anyone used jsdom in the browser?
02:49 < min|dvir|us> CoverSlide: no, you learn JS.
02:49 < isaacbw> I want to use jsdom in the browser
02:49 < isaacbw> he was just being snide min|dvir|us 
02:49 < min|dvir|us> I know. Don't be snide.
02:49 < isaacbw> don't fret over it
02:50 < ckknight> I don't see how he was being snide.
02:50 < ckknight> I agree that this isn't basic JS prototypal stuff
02:50 < ckknight> cycles would be a complex topic
02:51 < phonebook_> okay so i have 3 (base 2). in binary thats 111. still with me? ..... anyway, i need the 111 to be 0000000000000111. 
02:51 < phonebook_> oh wait
02:51 < isaacbw> how is it encoded
02:51 < ckknight> 3 in base 2 is 11
02:51 < isaacbw> you mean like a string that contains '111'?
02:51 < phonebook_> god damn - 11
02:51 < ckknight> you want to zero-pad?
02:51 < isaacbw> it's a string?
02:51 < phonebook_> yes *thats the one. zero pad. not it is a number
02:51 < isaacbw> how is it in binary then
02:52 < ckknight> >>> (3).toString(2)
02:52 < purr> ckknight: (string) '11'
02:52 < isaacbw> wtf
02:52 < min|dvir|us> ckknight: cool.
02:52 < isaacbw> what just happened
02:52 < isaacbw> oh
02:52 < isaacbw> i'm retarded
02:52 < isaacbw> phonebook_, you want to produce a string?
02:52 < ckknight> >>> ("00000000000000000" + (3).toString(2)).slice(-16)
02:52 < isaacbw> (3.2).toString(2)
02:52 < purr> ckknight: (string) '0000000000000011'
02:52 < isaacbw> (3.).toString(2)
02:52 < isaacbw> >> (3.).toString(2)
02:52 < purr> isaacbw: (string) '11'
02:53 < phonebook_> but the three could be any length
02:53 < isaacbw> >> (3.2).toString(2)
02:53 < purr> isaacbw: (string) '11.00110011001100110011001100110011001100110011001101'
02:53 < ckknight> >> 3..toString(2)
02:53 < purr> ckknight: (string) '11'
02:53 < phonebook_> it could be 10101 or 10 or 11111 or even just 1. 
02:53 < janmower> did the perl convention just overflow into this room?
02:54 < min|dvir|us> phonebook_: ckknight answered your question.
02:54 < min|dvir|us> 21:49 < ckknight> >>> ("00000000000000000" + (3).toString(2)).slice(-16)
02:54 < isaacbw> >> var bin = (3).toString(2); "00000000000000000".slice(0, bin.length) + bin
02:54 < purr> isaacbw: (string) '0011'
02:54 < isaacbw> >> var bin = (3).toString(2); "00000000000000000".slice(0, bin.length) + bin
02:54 < purr> isaacbw: (string) '0011'
02:54 < isaacbw> >> var bin = (3).toString(2); "00000000000000000".slice(-bin.length) + bin
02:54 < purr> isaacbw: (string) '0011'
02:54 < isaacbw> >> var bin = (3).toString(2); "00000000000000000".slice(bin.length) + bin
02:54 < purr> isaacbw: (string) '00000000000000011'
02:54 < isaacbw> god I'm retarded
02:55 < ckknight> no rebuttals, isaacbw
02:55 < phonebook_> it seems like bitwise operators should be involved. im going to get laughed at if i show up parsing strings like a sucker
02:55 < isaacbw> I got it for you phonebook_ 
02:55 < isaacbw> I don't know if ckknight's works
02:55 < isaacbw> I'm not smart enough
02:55 < isaacbw> >> var bin = (1543).toString(2); "00000000000000000".slice(bin.length) + bin
02:55 < purr> isaacbw: (string) '00000011000000111'
02:55 < Sly> https://lh5.googleusercontent.com/-GGH7FMiUYBQ/UQasrL-evJI/AAAAAAAAgI8/_wowbSHcWsc/s1900/photo.jpg
02:55 < ckknight> it does, isaacbw's is better since mine will chop off the number if it's too large.
02:56 < ckknight> phonebook_: no need for bitwise operators, .toString(radix) works just fine.
02:56 < phonebook_> i guess thats really the only way
02:56 < min|dvir|us> There are other ways but why reinvent the wheel?
02:57 < phonebook_> unless you could do it in hex
02:57 < isaacbw> what are you trying to accomplish
02:57 < min|dvir|us> >>> (200).toString(16)
02:57 < purr> min|dvir|us: (string) 'c8'
02:57 < isaacbw> >> (200).toString(100)
02:57 < purr> isaacbw: RangeError: toString() radix argument must be between 2 and 36
02:58 < phonebook_> 16 bits. actually i need for this is to make sure there are 0's padded on the right so it is 0000000000000111 instead of 111
02:58 < isaacbw> start making up symbols you piece of shit
02:58 < min|dvir|us> isaacbw: between 2 and 36 because 1-10, A-Z.
02:58 < isaacbw> phonebook_, you just got two solutions
02:58 < phonebook_> yes i know
02:58 < phonebook_> thanks
02:58 < isaacbw> min|dvir|us, that's what I mean by start making up symbols
02:58 < jocafa> use all the ascii!
02:59 < min|dvir|us> Starting from where?
02:59 < ckknight> base-64 or base-85 are fun.
02:59 < isaacbw> didn't the mayans use base 32 or 64?
02:59 < isaacbw> something crazy like that
02:59 < min|dvir|us> Also, what about case?
02:59 < ckknight> en.wikipedia.org/wiki/Ascii85
02:59 < isaacbw> that's not my job to decide min|dvir|us 
02:59 < isaacbw> I thought computers were supposed to be smart
03:00 < jocafa> see also: atob() and btoa()
03:01 < harrisonm> isaacbw: pretty sure it was base 60
03:01 < isaacbw> that sounds right
03:02 < ckknight> babylonians were base 60
03:02 < ckknight> mayans are base 20
03:02 < harrisonm> that's it
03:02 < isaacbw> okay
03:03 < jocafa> i dropped the base
03:03 < jocafa> ¬¬
03:04 < harrisonm> jocafa++
03:04 < ckknight> yeah, that was good
03:05 < jocafa> i… neutralized the base with an acid…?
03:06 < isaacbw> http://johndoesdesign.com/blog/2012/php/getting-your-php-html-email-to-render-in-gmail/ lol
03:06 < jocafa> "booo left the room"    well, then.
03:06 < harrisonm> titration++
03:07 < eduardo> Good evening all
03:11 < redshadowhero> Any reason why node --prof would say that it's spending 99.99% of the time in syscall?
03:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:21 < azbyin> hi all.. is there a module for reading bare git repos?
03:21 < azbyin> or perhaps there is already a git repo frontend written for node.js ?
03:22 < redshadowhero>   174373  100.0%  100.0%  syscall
03:22 < redshadowhero> ...Or maybe it'll just spend all it's time in syscall.
03:22 < isaacbw> what are you doing redshadowhero 
03:23 < redshadowhero> I have a socket open waiting for messages.
03:23 < redshadowhero> It's a small irc channel, so there shouldn't be a lot of chatter.
03:24 <@konobi> it's doing the right thing... it's waiting for recv
03:24 < isaacbw> it sounds like you aren't doing any serious js processing
03:24 < eduardo> hey guys I have a probably very silly question. What's the right way to persist objects during a user's session. for exampe say someone logs in and i pull up their user record from the DB. what's the right way to hang on to that user object until they log out?
03:24 < isaacbw> so it's all in the native event loop
03:24 < redshadowhero> Not really, no. It's just weird because when people sit there and spam messages that forces it to act, it starts to slow down.
03:24 < isaacbw> eduardo, lots of people use memcached or redis
03:24 < redshadowhero> so, I'm wondering to myself: is this the js, the irc server, or something else?
03:25 < eduardo> isaacs: those get written to a db right?
03:25 < isaacbw> or you can just use the v8 heap if you aren't expecting a lot of traffic
03:25 < isaacbw> eduardo, what do you mean
03:25 < redshadowhero> Er. Again, fairly new to javascript here: what do you mean by the v8 heap in this context?
03:26 < isaacbw> like, var sessions = []
03:26 < isaacbw> so a javascript variable
03:26 < eduardo> isaacbw: I am probably wrong here. i thought that redis is like a way to share context between multipe instances of node. since a user's request can go to a random server instance? and i thought it did that by using a database
03:26 < isaacbw> redis *is* a database of sorts
03:27 < isaacbw> it's a key value store, basically a super simple database that sits in memory
03:27 < redshadowhero> I think I get it.
03:27 < eduardo> oh it's in memory
03:27 < eduardo> gotcha
03:27 < eduardo> and what's traditionally the key that people user. the internal user ID?
03:27 < eduardo> or some auto generated session identifier?
03:27 < isaacbw> it's up to you really
03:28 < isaacbw> the client will have a cookie stored which could include whatever info you want
03:28 < eduardo> isaacs: you mean to say that redis provides some abstraction that means I dont have to map which user matches to what key?
03:28 < isaacbw> when they send a request, you will make sure the session ID is actually in the database, and then go on with the request
03:28 < isaacbw> wrong isaac
03:28 < isaacbw> eduardo, no, you do
03:28 < redshadowhero> If it's spending all it's time in the main loop waiting for data, I wonder why it gets bogged down in its responses..
03:29 < eduardo> ya sorry 
03:29 < isaacbw> you could have the user ID be the key or the session ID be the key
03:29 < isaacbw> both will need to be sent in the cookie anyway
03:29 < isaacbw> just make sure they match
03:29 < eduardo> isaacbw: right. and i store that key in the session object (which is persisted via a cookie)... I understand
03:30 < isaacbw> so once the user authenticates, you send their browser a cookie with the session ID and store that same session ID in the database 
03:30 < eduardo> yeah i getcha
03:30 < isaacbw> the cookie should have both a user ID and a session ID
03:30 <@konobi> error
03:30 < isaacbw> you can store other session info in the database as well
03:30 < eduardo> isaacbw: why not just a session id?
03:30 < eduardo> in the cookie
03:30 < isaacbw> eduardo, because you're matching it against something
03:31 <@konobi> you don't want the user id in the cookie
03:31 < isaacbw> why
03:31 <@konobi> exposure of internals
03:31 < isaacbw> no I guess you don't need it, do you
03:31 < eduardo> ok makes sense
03:31 < isaacbw> a concern is that someone could just be guessing session IDs and if they guess one that matches a currently authenticated user, they suddenly have access to that user's info
03:32 < isaacbw> it doesn't have to be an internal user ID. It can be their username or something like that
03:32 < eduardo> doesn't express or something provide session management? i assume it encrypts the cookie or whatever
03:32 < isaacbw> yea it does
03:32 < eduardo> like it doesn't seem like a problem that i should have to solve myself
03:33 < isaacbw> the express session manager by default uses a shitty session store, but there are modules that will hook it into redis or memcached for yuo
03:33 < isaacbw> yea, you can just plugnplay with express
03:33 < eduardo> what makes it a shitty session store
03:33 < eduardo> i think you cant share the data across instances of node, right?
03:33 < isaacbw> yea, that's a big thin
03:33 < isaacbw> g
03:33 < eduardo> gotcha
03:33 < eduardo> ok isaacbw, this has been very helpfu
03:33 < eduardo> l
03:33 <@Nexxy> if you're using redis to store sessions... why can't you share them?
03:33 < eduardo> to clarify the concepts for me
03:34 < eduardo> @Nexxy: with redis, yes. we were talking about express' default store
03:34 < eduardo> another q: is anyone experiences with mongoose?
03:34 <@Nexxy> it's still quite possible!
03:35 < isaacbw> redis and memcached will be better at fetching large amounts of key-value pairs though
03:37 < phonebook_> friends, i found the solution. --- var bits = (0x10000 | 0x3);
03:37 < zivester> expressjs question... app.get('/search/:keywords') ... does '/search/' exist anywhere in req.* ?  or should i manually match it from knowing ':keywords' in req.path() ?
03:38 < isaacbw> phonebook_, you're silly
03:38 < isaacbw> >> (0x10000 | 0x3)
03:38 < purr> isaacbw: (number) 65539
03:39 < phonebook_> still a little fuzzy on what that does. but it looks like you just pushed my hard work off the edge
03:39 < isaacbw> we gave you two solutions :(
03:39 < phonebook_> they were good solutions. you should not feel bad.
03:40 < isaacbw> all you're doing in your bitwise stuff is adding 65536 to 3
03:40 < isaacbw> they were the *right* solutions
03:40 < isaacbw> why are you doing anything with bitwise operations
03:40 < isaacbw> they change your number
03:40 < phonebook_> cause its for a bitmask. it swims better with what else is going on
03:40 < ciree> Do I need to create an http server to route requests to sockets?
03:41 < ciree> *IE* users send data to server, other users webpage needs to be updated
03:41 < isaacbw> phonebook_, what?
03:41 < isaacbw> http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
03:42 < isaacbw> that's for both ciree and phonebook_ 
03:42 < ciree> I know what the xy problem is!
03:42 < isaacbw> D
03:42 < isaacbw> :D
03:42 < isaacbw> why do you want to route socket requests?
03:42 < ciree> Not really socket requests, I need to update User 2's webpage with User 1's data
03:43 < ciree> Do I need to establish a socket for user 1? I'm thinking I should avoid that
03:43 < isaacbw> is this socket.io?
03:43 < ciree> Yes
03:43 < isaacbw> do you want it to live update, or just when a form is submitted?
03:43 < ciree> Live update, but its two different people
03:43 < ciree> User 1 posts a form, then I want it to update User 2's webpage
03:43 < isaacbw> socket.io is probably best
03:44 < isaacbw> oh
03:44 < ciree> Should user 1 have a socket open?
03:44 < isaacbw> not if your posting a form
03:44 < isaacbw> *you're
03:44 < ciree> Do I need an http server then?
03:44 < isaacbw> if you want to accept a post request, yes
03:44 < ciree> Sounds good, thanks brother!
03:44 < isaacbw> np
03:47 < AAA_awright> How does one debug a "// Unhandled 'error' event" fatal error?
03:47 < isaacbw> ciree, oh, I just realized what you meant by routing
03:48 < AAA_awright> Particularly events.js:71
03:48 < isaacbw> does it not print a stack trace where it fails?
03:48 <@konobi> AAA_awright: domain
03:48 < AAA_awright> I'm trying to handle all that myself
03:48 < isaacbw> you're what?
03:48 < AAA_awright> I mean, would that tell me which object needs an 'error' event?
03:49 < isaacbw> what???
03:49 <@konobi> AAA_awright: it gives you a better trace, yes
03:49 < isaacbw> you guys is insanity
03:54 < therealkoopa> What's the easiest way to take a stdout stream and read it into a buffer so I can pass that buffer into graphics magick
03:56 < isaacbw> how are you starting the process you want to read from
04:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:05 < niggler> hey superjoe sorry had a late dinner meeting
04:05 < niggler> whats up
04:07 < phonebook_> good god i finally got it working
04:08 < superjoe> niggler, I just needed you to say "fuck _____" a while ago
04:08 < superjoe> but you were AWOL :(
04:08 < phonebook_> can only take credit for about 5% of the work but basically understand what they did. 
04:08 < niggler> haha i need a niggler bot
04:09 < phonebook_> ...maybe 6%
04:10 < superjoe> bye internet
04:13 < tk> when using net.createConnection is there a way to pass on a clients Ip similar to X-Forwarded-For in HTTP headers?
04:41 < cyx> Hi
04:42 < cyx> Sb can help with SAML issue?
04:55 < warz> figured id drop this off here, incase it might assist anybody: http://rycole.com/2013/01/28/organizing-nodejs-express.html
04:56 < warz> just some of my experiences organizing express web apps
04:57 < Aria> I suppose one can forgive the PHP comparison ;-)
05:05 < tjor> Hi, I'm a noob, so please take it easy on me :) I'm having great difficulty processing a submitted form (with just an email address in it) with the Mailchimp API. I have loaded the Mailchimp node module, but just can't figure out how to process it.  Can do it in PHP, but strugling to wrap my head around it in Node.js.  Does anyone know of any (easy to follow) examples?
05:06 < tjor> I using Node.js and Express.
05:07 < warz> Aria, it's true though. :P
05:07 < warz> Not even hating. Been using node for a while and I think it's valid.
05:07 < Aria> Heh. In some ways. In some ways not: PHP tends to leave you with everything inside a document root.
05:07 < Aria> node isn't even neccessarily about HTTP ;-)
05:07 < Havvy> tjor: The form data will be in req.
05:07 < Aria> What it makes you do because of this are very different.
05:07 < min|dvir|us> PHP should not be in the same sentence as Node.js.
05:07 < warz> well no but my comparison wasn't really about http, but just about the looseness of it all
05:08 < Havvy> Aria: Yeah. I've got an IRC framework (that is heavily broken IMO, but I'm fixing it)
05:08 < warz> compared to how in php youd throw code in with html, etc
05:08 < warz> no structure
05:08 < harrisonm> Strictly speaking, you don't have to write PHP like that
05:08 < warz> s/would/could/
05:09 < harrisonm> but it's what most people do
05:09 < min|dvir|us> warz: actually that's not such a bad idea.
05:09 < min|dvir|us> PHP is just bad at it.
05:09 < warz> that was the whole point of my blog post though :)
05:09 < min|dvir|us> Usually you'd use a templating language.
05:09 < min|dvir|us> Like Moustache, Handlebars, or my favorite, Hogan.
05:10 < warz> yea, i get t
05:10 < warz> it*
05:10 < Aria> Heh. That's the only part of PHP I don't hate.
05:11 < Aria> But yeah, node has a very C-like approach to project layout. That is, it doesn't particularly have one.
05:11 < redshadowhero> Havvy: Ooh, you're doing an irc library too?
05:11 < tjor> Thanks Havvy. I'm a total noob. Any examples/suggestions for submitting a form and processing it grately appreciated.
05:11 < Havvy> https://github.com/havvy/nrc << My IRC Library.
05:12 < min|dvir|us> Havvy: why aren't you using node-irc?
05:12 < AAA_awright> Which node-irc?
05:12 < min|dvir|us> The one that's maintained. :)
05:12 < Havvy> tjor: I don't actually know any specific examples. Perhaps there's one in the express git project's examples?
05:12 < min|dvir|us> https://github.com/martynsmith/node-irc
05:12 < AAA_awright> https://github.com/martynsmith/node-irc is a good one
05:12 < Havvy> When was node-irc made?
05:12 < min|dvir|us> Yeah, I'm using it for my IRC bot. It's really good.
05:12 < redshadowhero> Ooh, that's cool Havvy.
05:13 < SomeoneWeird> node-irc is awesome
05:13 < AAA_awright> A LONG time ago
05:13 < AAA_awright> That was my first library I used
05:13 < AAA_awright> For pre-0.2
05:13 < AAA_awright> I think?
05:13 < echo> I'm actually talking through an Openfire XMPP conference room to a node process using node-xmpp and also running node-irc and it's echoing me your messages and parses mine. ;)
05:14 < echo> Since IRC isn't allowed here at work.
05:14 < Aria> Heh, wow. Nice.
05:14 < min|dvir|us> Not allowed at work!?
05:14 < tjor> Havvy Thanks! That is exactly what I should be doing! :)
05:14 < redshadowhero> min|dvir|us: it isn't allowed at my work either.
05:14 < min|dvir|us> IRC is so useful.
05:14 < redshadowhero> though, for some reason, mibbit isn't blocked.
05:14 < redshadowhero> Not at my work it isn't.
05:15 < min|dvir|us> What do you do?
05:15 < Havvy> I started with Node 0.6. And I think I wasn't using it because NIH Syndrome.
05:15 < echo> I work for a large web hosting company. Nothing is "blocked", it's just disallowed with the impending threat of termination.
05:15 < Havvy> Decides, the IRC Socket is the easy part.
05:15 < harrisonm> echo: That's pretty intense
05:15 < redshadowhero> I can't tell you what I do, min|dvir|us.
05:15 < min|dvir|us> Up to you. :)
05:15 < Aria> Sucky, echo!
05:15 < Havvy> redshadowhero: Well, where do you work?
05:16 < redshadowhero> There's even an nda for my nda at my work :/
05:16 < redshadowhero> I work at Raytheon.
05:16 < Havvy> NDAs shouldn't be NDAed.
05:16 < min|dvir|us> redshadowhero: in one word, what do you do?
05:16 < echo> He's obviously a hero with a shadow ofwhich is red. And that's a pretty damn cool place to work.
05:16 < redshadowhero> I can't answer that, min|dvir|us.
05:16 < Havvy> Are those even enforceable?
05:17 < Havvy> https://en.wikipedia.org/wiki/Raytheon
05:17 < redshadowhero> I don't know, but the legal team is large enough, so I'd say yes :P
05:17 < Aria> Hehe. 
05:17 < Aria> A coworker of mine just left for Raytheon.
05:17 < redshadowhero> I'm sorry.
05:17 < Havvy> I just signed my first NDA today.
05:17 < SomeoneWeird> heh
05:18 < redshadowhero> ANYWAY.
05:18 < redshadowhero> Let's talk about something that's not my work!
05:19 < min|dvir|us> So, what do you do again?
05:19 < echo> ROFL
05:19 < redshadowhero> I'm serious. I can't and won't answer that question.
05:19 < AAA_awright> min|dvir|us: Defense systems, airplanes, missiles, engineering, something like that
05:19 < AAA_awright> By the way, come into my office redshadowhero, you're fired
05:19 < redshadowhero> Pfft.
05:20 < AAA_awright> So yeah, IRC is cool, I'm working on a chat client for it now actually
05:20 < min|dvir|us> AAA_awright: what UI?
05:20 < Havvy> AAA_awright: Called?
05:21 < zivester> is there a way to call next() from within a route?  i.e. app.get('/product/:id', function(req, res){  })  if i do a lookup on the product 'id' and its not found, i want to continute through to my apps 404 page, without doing an explicit res.redirect()
05:21 < AAA_awright> A web UI initially, but I want an SSH UI and Quassel eventually
05:21 < min|dvir|us> Hah, awesome.
05:21 < Aria> zivester: Is this Express?
05:21 < zivester> Aria: yes
05:21 < Havvy> zivester: Yes. You can call next. (Assuming Express). Just have more middleware after you use the routes middleware.
05:21 < AAA_awright> min|dvir|us Havvy: http://chat.bzfx.net/
05:22 < min|dvir|us> AAA_awright: brilliant.
05:22 < Havvy> AAA_awright: Web:IRC enabled, or?
05:22 < min|dvir|us> Absolutely brilliant.
05:22 < AAA_awright> No, no
05:22 < AAA_awright> Havvy: What do you mean, actually?
05:22 < AAA_awright> It's a custom UI
05:22 < min|dvir|us> AAA_awright: hook me up with a beta. :)
05:22 < AAA_awright> Websockets, etc
05:23 < Havvy> web:irc is an web server to irc server protocol where you pass in an IP that isn't your own. Presumably you pass in the IP of your web client.
05:23 < AAA_awright> It's like a gateway, the IRC server has to trust that you're forwarding the right info
05:23 < zivester> ha... wow I'm dumb
05:23 < AAA_awright> I'll support that
05:23 < AAA_awright> min|dvir|us: It's in major alpha mode, lots of stuff broken, but try: http://chat.bzfx.net/beta/?network=irc.freenode.net;channel=%23Node.js
05:24 < Havvy> Using semicolons?
05:24 < AAA_awright> Yeah
05:24 < AAA_awright> Well, & works too
05:24 < cloudbender> auto-indent in sublime doesn't sux
05:24 < AAA_awright> But semicolons play nicer with XML/HTML
05:24 < test123> AAA_awright: brilliant.
05:24 < Havvy> Also, the other two web:irc clients I know use server= instead of client=
05:24 < min|dvir|us> Clearly alpha but brilliant.
05:24 < Havvy> **network not client
05:25 < Havvy> Mibbit (closed source, Java based, I'm an IRC OP on their server) and KiwiIRC (new, open source, also Node based)
05:25 < echo> I saw something on geekli.st the other day that you may love that emulates almost every feature of a normal text box (i.e. tabstops, etc.)
05:25 < AAA_awright> min|dvir|us: It'll also do Ident if you have a registered user account, and it'll keep you logged in, in the background
05:26 < Havvy> AAA_awright: I think you're gonna be redoing a lot of the work of both of those projects...though KiwiIRC isn't really feature complete at this time.
05:26 < cloudbender> AAA_awright, very slick.
05:26 < min|dvir|us> AAA_awright: I hope that UI isn't final. :X
05:26 < AAA_awright> It needs major work
05:26 < AAA_awright> It'll be that sort of format-ish
05:26 < cloudbender> I like it.  Clean is good.
05:26 < AAA_awright> Even more clean than as shown
05:28 < testshadowhero> Well, this is nifty.
05:28 < testshadowhero> Like your font choice for the input box.
05:28 < testshadowhero> and it works just fine on an iPad.
05:29 < AAA_awright> Nice to know
05:29 < Havvy[bzfx]> Gray on gray?
05:29 < testshadowhero> No complaints here, though I notice that I'm popping up on the right twice, and it only looks like maybe people that have talked once get added to the list.
05:29 < AAA_awright> There shouldn't be any gray backgrounds
05:29 < Havvy[bzfx]> Well, whatever you call the background of the center.
05:29 < testshadowhero> I wonder if you could do some sort of responsive design to make this scale.
05:30 < Havvy[bzfx]> Joins are invisible.
05:30 < cloudbender> as long as it's not white
05:30 < testshadowhero> I see joins.
05:30 < Havvy[bzfx]> I see them...but I can't read them.
05:30 < AAA_awright> I don't want them to stand out exactly, but just be there
05:30 < AAA_awright> It'll be fine-tuned later, and customizable of course
05:31 < AAA_awright> Color-blind tuning for the nickname color selection
05:32 < Havvy> AAA_awright: If you could allow advanced theming as giving control of the CSS, that'd be awesome.
05:32 < AAA_awright> Definitely
05:32 < min|dvir|us> That would be so fucking sweet.
05:33 < min|dvir|us> Dude, you're making a killer app right now.
05:33 < Havvy> min|dvir|us: Except for the fact that there are already two working implementations...
05:33 < min|dvir|us> http://en.wikipedia.org/wiki/Killer_application
05:33 < xk_id> If there is nothing that can "take time" in a set of instructions that I need iterated, does it still make sense to do it as an "async.reduce"?
05:33 < min|dvir|us> Havvy: like?
05:33 < AAA_awright> The CSS classes will be better documented so you can style pings, even different keywords differently, or nicknames, fonts, whatever
05:33 < AAA_awright> Or just do it in your web browser, but no one knows how to do that :p
05:33 < Havvy> I said earlier. Mibbit (which is a few years old) and KiwiIRC.
05:34 < min|dvir|us> But they're not 24/7, right?
05:34 < redshadowhero> I wonder if you could rig up some sort of js api so that you could add commands on the fly for yourself.
05:34 < Havvy> Uh, there is one that is 24/7. IRCCloud.
05:34 < AAA_awright> min|dvir|us: Then later, I'll integrate RSS feeds and Twitter, etc
05:34 < redshadowhero> something like >> api.blah( ['opt','ion'] );
05:34 < AAA_awright> Because I don't use Thunderbird for anything anymore, I've used that as my RSS reader since 2006
05:34 < Havvy> KiwiIRC plans on having JS Modules.
05:35 < Havvy> They might already have them.
05:35 < Havvy> Mibbit has no plans for that, unfortunately.
05:35 < redshadowhero> isn't there an ncurses implementation of node/
05:35 < redshadowhero> *?
05:35 < redshadowhero> er
05:35 < AAA_awright> min|dvir|us: I'm kind of planning on making this a service mostly, and make http://magnode.org/ the framework it's based on, that'll be the killer-app of Node.js hopefully
05:35 < redshadowhero> a package for ncurses, I mean.
05:35 < redshadowhero> because I'd LOVE to see more cli apps.
05:35 < AAA_awright> Mibbit has nothing on this
05:35 < redshadowhero> LOVE.
05:35 < AAA_awright> ncurses, I played around with that to make an IRC client
05:35 < AAA_awright> It's prone to crashing
05:36 < AAA_awright> Or at least was
05:36 < AAA_awright> I'll have to try it again
05:36 < AAA_awright> But I'm hoping to let people log in with an SSH client too
05:36 < min|dvir|us> I'd rather see a web app than a CLI any day.
05:36 < Havvy> AAA_awright: Given the stagnant state of the Mibbit client (the developer hasn't done much in months...), you can certainly overtake him.
05:36 < AAA_awright> Me too, but sometimes I'm stuck with out a desktop, so that's a lifesaver
05:36 < redshadowhero> AAA_awright: I can test the ssh client :P
05:37 < min|dvir|us> w3m FTW. :)
05:37 < redshadowhero> since my MO is ssh.
05:37 < mscdex> ssh2 to the rescue!
05:37 < Havvy> It's going to be KiwiIRC that's gonna be your main competitor I think.
05:38 < AAA_awright> redshadowhero: Yeah sure! If you want to help develop it that'd be even better...
05:38 < AAA_awright> mscdex: Yeah
05:38 < redshadowhero> AAA_awright: I'll try, but I'm coming from a strict C background here.
05:38 < AAA_awright> Because I kinda don't want to use openssh or even any other client
05:39 < redshadowhero> My javascript is only in its infancy.
05:39 < redshadowhero> Do you have a repo somewhere?
05:40 < Havvy> redshadowhero: Are you going open source or closed source?
05:40 < redshadowhero> with what?
05:41 < Havvy> Err, sorry. AAA_awright**
05:41 < redshadowhero> cause I have a few stupid projects open-source right now.
05:41 < AAA_awright> redshadowhero: I have several private ones, it's split up into the IRC connection, the HTTP API, and the Web/HTML UI
05:41 < redshadowhero> http://github.com/redshadowhero/pastebin and http://github.com/redshadowhero/googauth
05:42 < redshadowhero> I feel really stupid about the second one, because I had recoded all of google's java files into C, only to find out the pam modules had everything I was writing anyway.
05:42 < xk_id> It would be impolite to scrape several pages of the same website as part of an "async.reduce()" function, right? Because the httprequests will be performed very quickly?
05:43 < min|dvir|us> xk_id: use async.queue.
05:43 < azbyin> guys, anyone here used gitteh
05:44 < AAA_awright> I believe the default Node Agent will use only a single TCP connection per server
05:44 < AAA_awright> So it shouldn't matter
05:44 < redshadowhero> AAA_awright: alright. We'll have to talk more, especially during the weekend when I have actual free time.
05:44 < AAA_awright> redshadowhero: Sure!
05:44 < AAA_awright> I'm always here, ping me
05:44 < azbyin> ? I can build it fine along with its deps (libgit2) and install it. I'm just unable to require("gitteh") !
05:44 < redshadowhero> I will!
05:45 < AAA_awright> Havvy: Something will be open-source, I'm not sure what
05:45 < azbyin> npm ls  in /tmp/gitteh   shows:  gitteh@0.1.0 /tmp/node-gitteh ---|--(all deps here)
05:46 < AAA_awright> Havvy: Even if only a generic framework library, e.g. my http://magnode.org/ for managing user accounts and databases and stuff
05:46 < azbyin> so I'm not sure why running nodejs in /tmp/node-gitteh  and then require("gitteh") says module not found
05:46 < AAA_awright> And other work I've put forward, I did a series of ~30 commits to the jsonschema package
05:46 < azbyin> is there something special that needs to be done for non-pure js modules?
05:47 < xk_id> AAA_awright: ok, so you mean Node will wait until the first httprequest completes, before performing the next one as part of the next iteration of async.reduce?
05:47 < mscdex> azbyin: if you downloaded and built the addon manually, that won't work
05:47 < xk_id> *as part of another iteration of async.reduce
05:47 < AAA_awright> xk_id: Node and a single HTTP connection in general has its own queueing mechanism... but just check that Node.js isn't opening more than one TCP connection per server
05:47 < mscdex> azbyin: why not install from npm?
05:47 < azbyin> mscdex, uh.. ok how do I use the module then? it has installed all of its deps properly in node_modules
05:48 < AAA_awright> xk_id: You may want to create your own "Agent" and explicitly pass that to http.request()
05:48  * cloudbender holds breath, trys 1 million objects ...
05:48 < azbyin> mscdex, why? are we not allowed to get modules from github and install them and then use them? do they need to be blessed by npm?
05:48 < azbyin> err.. i meant npmjs.org
05:48 < Aria> azbyin: What error does it give you?
05:48 < AAA_awright> azbyin: It's not usually a problem because anyone can upload to npm, but here https://github.com/Acubed/git-node
05:48 < redshadowhero> Nooooo cloudbender! You don't know what you've done! You'll destroy EVERYTHI-oh wait. Wrong end of the world scenario; sorry!
05:49 < mscdex> azbyin: you can, but it's just easier to use the `npm install foo` and have everything set up to use require('foo')
05:49 < AAA_awright> azbyin: That's my git subcommand to check out packages as git repositories
05:49 < mscdex> azbyin: just stick the node-gitteh in ./node_modules/
05:49 < azbyin> but there is no node-gitteh.js
05:49 < cloudbender> lol made it.  Even ran it twice.
05:50 < redshadowhero> there's no weird things with switch and temporary throwaway variables in js, right? I can do something like switch( arr.shift() ), right?
05:50 < azbyin> the module itself is require("gitteh")  according to the docs.. but it is named node-gitteh for some reason
05:50 < min|dvir|us> redshadowhero: arr will be modified after .shift().
05:50 < redshadowhero> min|dvir|us: that's exactly what I want :)
05:50 < AAA_awright> azbyin: Convention is that we prefix git repositories containing Node.js specific behavoir with "node-"
05:51 < cloudbender> 2.2 seconds for a million objects on a crappy old celeron with no speed or ram
05:51 < azbyin> AAA_awright, ok. but i want to use gitteh instead of git-node which you just linked to
05:51 < AAA_awright> What is gitteh?
05:51 < AAA_awright> Link?
05:51 < mscdex> azbyin: `npm install https://github.com/libgit2/node-gitteh/tarball/master`
05:52 < azbyin> the bindings provided by the libgit2 people themselves
05:52 < Havvy[bzfx]> AAA_awright_: You know that getting the userlist is pretty simple, right?
05:52 < redshadowhero> Isn't it just NAMES, or some such?
05:52 < AAA_awright> Havvy: I get the actual data, I just have to send the event to the browser
05:53 < AAA_awright> Yeah, it's NAMES
05:53 < AAA_awright> That's next on my list
05:53 < Havvy[bzfx]> And the NAMES are given to you automatically when you join.
05:53 < AAA_awright> As of an hour ago, it wouldn't even do local echo
05:53 < xk_id> How can I check what a node app does in terms of TCP connections, in real time?
05:53 < Havvy[bzfx]> Oh.
05:53 < AAA_awright> I'm picking up work on this after a short few month hiatus, and there was about a month of work before that
05:54 < AAA_awright> I did a small redesign to make it more managable
05:54 < azbyin> mscdex, ok i will try that, but why not after cloning the repo?
05:55 < AAA_awright_> You'll notice that it is populating JOINs and PARTs correctly, just not NAMES yet, hm
05:55 < azbyin> mscdex, you might want to run that commandline, it fails to grab the libgit2 deps
05:56 < azbyin> so even build fails for this cmdline
05:57 < mscdex> they should fix their build process then
05:57 < telnetshadowhero>  oh lord, I forgot how painful this is.
05:57 < Havvy> telnet isn't painful.
05:57 < azbyin> ok, could you please tell me how I can get nodejs to admit that the module is all ok?
05:58 < redshadowhero> It's definitely show to do.
05:58 < Aria> azbyin: 1) MAke it okay. 2) ???? 3) Profit?
05:58 < azbyin> npm ls shows gitteh@0.1.0 /tmp/node-gitteh ---|--(all deps here)  when i run it in /tmp/node-gitteh
05:58 < azbyin> so i don;t understand why nodejs would be failing. I have /tmp/node-gitteh in NODE_PATH
05:59 < redshadowhero> Anyway, AAA_awright I just did names from telenet, and it just spit out a BUNCH of names. Might be something to consider too :/
05:59 < Havvy[telnet]> Oh
05:59 < Aria> First, why /tmp? Second, what error? 
05:59 < AAA_awright> I just have to get the UI to populate the list when it gets NAMES
05:59 < Havvy[telnet]> Oh gawd, the NAMES list when I joined.
06:00 < redshadowhero> Havvy[telnet]: Yup. Paintful, right?
06:00 < AAA_awright> Right now it only does that for JOIN and PART
06:00 < azbyin> Aria, /tmp because i did the git clone there. Error: Cannot find module 'gitteh'
06:00 < redshadowhero> Well, how would you store the names, AAA_awright?
06:00 < Havvy[telnet]> Just the names list. The actual speaking is pretty eash.
06:00 < Havvy[telnet]> Except for the part where your chat runs into my buffer...
06:00 < telnetshadowhero> Anyway,
06:01 < Aria> azbyin: But it's not called 'gitteh', is it? You called it node-gitteh.
06:01 < Aria> try moving it into your project's node_modules
06:01 < Aria> And requiring it with the same name it's checked out as.
06:01 < Aria> (or use npm to install it)
06:02 < AAA_awright> redshadowhero: Mostly in DOM, really, unless there's some need to do calculations on them
06:02 < azbyin> Aria, check the examples: https://github.com/libgit2/node-gitteh/blob/master/examples/walk-revisions.js
06:02 < azbyin> require("gitteh")
06:02 < Aria> azbyin: Yes. They checked it out as 'gitteh'
06:02 < redshadowhero> I can't really think of a good reason to do operations on them.
06:02 < Aria> azbyin: It's VERY common for a git-repo named 'node-foo' to be required as 'foo'
06:03 < redshadowhero> Though, on the other hand, that might be a lot of work to send the same data again and again.
06:03 < Aria> azbyin: That ONLY works if the directory in your node_modules folder is called 'foo'
06:03 < azbyin> grr.. the loading modules named according to the dirname is kinda crazy for me
06:03 < Aria> azbyin: Require name = directory name.
06:03 < redshadowhero> maybe could cache it somewhere and then throw it out.
06:03 < Aria> azbyin: Why crazy? Are you expecting it to open every file in the filesystem hunting for potential modules, just in case you do something crazy?
06:04 < azbyin> ok, same problem
06:04 < AAA_awright> redshadowhero: The HTML client just creates a div for each channel and hides it/shows it accordingly. When you get a NAMES response, rebuild the list, when you get JOIN, append to it, when you get PART/QUIT, remove from it
06:04 < AAA_awright> I just have to do NAMES
06:04 < Aria> azbyin: In your project's node_modules/gitteh is what?
06:05 < azbyin> i have restructured: export NODE_PATH=/tmp; mkdir node_modules; mv node-gitteh node_modules/gitteh
06:05 < AAA_awright> Actually I did have full channel list support, but I broke it a while back when re-doing how it processes the channel list
06:05 < Aria> azbyin: Why /tmp, then?
06:05 < redshadowhero> Oh. That's clever.
06:05 < AAA_awright> er, full support for listing all the users in a channel
06:05 < redshadowhero> Not the breaking it part, I mean.
06:05 < AAA_awright> Of course, ha
06:05 < Aria> azbyin: (and where's the script requiring gitteh, relative to all this?)
06:05 < a_meteorite> AAA_awright: Hey
06:05 < redshadowhero> the way you're leveraging the client as a transient storage platform.
06:05 < azbyin> its in /tmp
06:06 < AAA_awright> yo
06:06 < Aria> azbyin: And what's the cwd? And ... why /tmp?!
06:06 < azbyin> also i'm running the interactive nodejs client
06:06 < Havvy> AAA_awright: You can look at https://github.com/havvy/nrc/blob/master/modules/users.js for what I'm doing.
06:06 < azbyin> please forget /tmp for now.. it does not interfere with the discussion
06:06 < Aria> And in the project's node_modules/gitteh is what?
06:06 < AAA_awright> Havvy: I see a 404
06:06 < Aria> azbyin: I'd believe that if this was working. But you haven't said what the cwd is. And if you're in /wherever/else, that's kinda important.
06:07 < AAA_awright> user.js?
06:07 < Havvy> Sure.
06:07 < redshadowhero> singu-yeah.
06:07 < Havvy> I'm no good at writing github URLs from memory.
06:07 < azbyin> it is a path, and within this path there exists node_modeles dir. within this dir there is only 1 dir called gitteh and inside the gitteh dir it has a node_modules dir which has all the gitteh deps (including libgit2), my cwd is /tmp. i run the nodejs interactive client
06:08 < Aria> ... Oh. So you've node_modules/gitteh/node_modules .. .but nothing else?
06:08 < azbyin> then type    require("gitteh")   and watch the error of module not found. I press ctrl-D to return to the terminal. cwd is still /tmp. now i type npm ls
06:08 < Aria> Okay, so that's crazy.
06:08 < AAA_awright> Havvy: There is some IRC state being kept on the server side, of course, so when you load a channel you're already joined to that you know the user list without re-doing NAMES
06:08 < AAA_awright> It's similar to that
06:08 < Aria> You've got too many layers of node_modules.
06:09 < azbyin> it shows  gitteh@0.1.0 /tmp/node-gitteh ---|--(all deps here)
06:09 < AAA_awright> Aria: I think that's now npm works, with no other choice
06:09 < Aria> AAA_awright: No. this is wrong.
06:09 < Aria> don't believe npm ls. You didn't install it with npm, and it's completely hosed.
06:09 < azbyin> exactly how npm works and node picks up on the node_modules dirs within to search for deps
06:09 < s3shs> Anybody have any recommendations for queing up SQL from Node.js?
06:09 < AAA_awright> I think that's wrong and I don't do it that wayh
06:09 < azbyin> no. i did npm install after i did the git clone
06:09 < AAA_awright> But still, it's do-able
06:09 < zivester> AAA_awright, https://github.com/Havvy/nrc/blob/master/modules/user.js
06:10 < cloudbender> ... needs more cowbell
06:10 < AAA_awright> zivester: Yeah found it
06:10 < Havvy> AAA_awright: As long as you don't share join lists between clients. That's gonna mess you up when you get more than one user.
06:10 < Havvy> Err, when there's a netsplit.
06:10 < Aria> azbyin: if you do require('gitteh') it will look for node_modules/gitteh/index.{js,node} or look at node_modules/gitteh/package.json and look for main. If neither of those things are there, it will return not found.
06:10 < AAA_awright> Havvy: Yeah, it's per-connection
06:10 < AAA_awright> It's actually maintained by the irc lib, not me
06:10 < Havvy> Ah.
06:10 < Aria> azbyin: So by having node_modules/gitteh/node_modules/realstuffhere, you're too many layers deep.
06:12 < Aria> (ewww. The bundling of libgit2 but not building it by default makes gitteh kinda painful)
06:14 < Aria> Did you try  npm install git+https://github.com/libgit2/node-gitteh ?
06:14 < Aria> Or what mscdex said?
06:14 < azbyin> Aria, node_modules/gitteh/node_modules/{here are the deps of gitteh! not real stuff}
06:14 < Aria> (the install.js fails for me, but that just seems to be a bug in node-gitteh)
06:15 < Aria> azbyin: So what's in node_modules/gitteh?!
06:15 < Aria> (If I ask again does the answer change?)
06:16 < azbyin> its the checkout!
06:17 < azbyin> and then i built it there, npm install and it successfully installed
06:17 < azbyin> npm ls says so! lol
06:17 < azbyin> npm and nodejs don;t like each other
06:18 < Aria> Ah, so you have more in node_modules/gitteh than node_modules. 
06:19 < Aria> I just got as far as I'd expect to with my bleeding edge node by doing git clone https://github.com/libgit2/node-gitteh node_modules/gitteh; cd node_modules/gitteh; npm install
06:19 < Aria> it ran install.js for me and downloaded and built libgit2
06:19 < azbyin> yes, after this in node_modules/gitteh, run npm ls
06:19 < Aria> Okay... what useful information are you expecting this to give?
06:20 < azbyin> and watch it show gitteh@0.10... and the deps
06:20 < SomeoneWeird> npm install, node install.js, npm link
06:20 < SomeoneWeird> done
06:20 < Aria> Uh-huh...
06:20 < azbyin> so npm knows there is a module
06:20 < Aria> npm ls is really dumb. 
06:20 < azbyin> now run nodejs and do require("gitteh") that fails with error module not found
06:20 < SomeoneWeird> npm link
06:20 < SomeoneWeird> npm link
06:20 < SomeoneWeird> npm link
06:20 < Aria> (and it cares about the whole module package, not the file node loads)
06:21 < Aria> SomeoneWeird: npm link shouldn't help here.
06:21 < SomeoneWeird> also check "main" in package.json 
06:21 < Aria> (You can have an npm module with no node module in it)
06:21 < azbyin> npm link will not help
06:21 < Aria> Yes. Do look at package.json: see that it says teh main entrypoint is lib/gitteh
06:21 < azbyin> ok, in package.json, main is "./lib/gitteh"
06:21 < Aria> Do you have a node_modules/gitteh/lib/gitteh* ?
06:21 < azbyin> and that stupid dir doesn;t exist
06:21 < Aria> ... Well then!
06:22 < Aria> You haven't built the binding!
06:22 < azbyin> did npm install generate the dir for you?
06:22 < azbyin> how to build the binding?
06:22 < Aria> No, because I'm running node 0.9.x, which gitteh doesn't support yet.
06:22 < Aria> Do you get errors when you run npm install?
06:22 < azbyin> i thought npm install will do it since it even downloaded the deps and built them
06:22 < azbyin> no errors, i'm on 0.8.18
06:23 < Aria> try "node-gyp build" in the gitteh checkout.
06:24 < Aria> That seems to be the final step to building according to their install.js
06:26 < Aria> But now I must sleep. Good luck: This is a non-trivial module, and npm has no way to know whether it's fully built or not, so there's not much in the way of diagnostics here.
06:26 < Aria> (Because it has taken over the entire build process, out of need since node-gyp is still a little raw, and there's few best practices yet)
06:31 < tpayne> do you guys put your node_modules folder in git?
06:32 < jackyalcine> http://www.youtube.com/watch?v=NMkoPkPi0TQ
06:33 < echo> tpayne: I .gitignore mine, which I've seen to happen pretty commonly, and the package.json can stay.
06:33 < tpayne> if i already git added them, is it too late?
06:33 < radusecrieru> Hello. I'm quite new to node, and I'm having a rough time trying to understand express and the routing system. I see that it uses jade files for views, and I find that quite innovative, but my colleague has already completed his work on client-side in html5. Is there a way of rendering html pages, and sending variables from express to html, like in jade? I need the everyauth variable to be sent, with information about authenticat
06:34 < radusecrieru> Can I do that with my current setup, or do I need socket.io (I will be using sockets for chat and such after login).
06:35 < echo> tpayne: No, it's not: http://stackoverflow.com/questions/5717976/adding-ignore-files-to-git-repo-retroactively Though, when messing with anything close to git rm, I recommend making a precautionary backup first.
06:35 < tpayne> ok thanks
06:36 < echo> radusecrieru: It sounds like you aren't taking advantage of express as a restful API backend for the html client-side front-end. You can literally send almost anything as a response to any of the http verbs. I also may not be understanding your question.
06:39 < tpayne> is it bad to link directly to a git repo? or should one do something like a export?
06:39 < min|dvir|us> tpayne: link directly?
06:40 < min|dvir|us> <a href="git:">?
06:40 < tpayne> like node app.js
06:40 < tpayne> inside of a folder with git
06:40 < min|dvir|us> tpayne: it's actually quite common.
06:40 < tpayne> i know in svn we always exported
06:40 < tpayne> ok thanks
06:40 < min|dvir|us> Typically you'd use a submodule or something.
06:41 < tpayne> then i'm going to leave node_modules in so id on't screw around one day and deploy without doing nom install or something
06:41 < radusecrieru> Umm, I'm trying to make a login with everyauth with password, with FB and Google. The code that is provided on everyauth page is made in jade, which uses everyauth as a variable for finding different information, as if the user is logged in or not, what is the address for Google auth and such.
06:42 < radusecrieru> I want to do the same thing, only instead of jade, using html
06:42 < tpayne> i hate that i have to restart node when the config file changes
06:42 < echo> tpayne: If you don't want to have to do it manually, you can check out something like:
06:42 < echo> https://github.com/remy/nodemon
06:43 < tpayne> yeah, but that screws background processes
06:43 < tpayne> it always Stops
06:43 < radusecrieru> I didn't really find a tutorial or usage of everyauth, so I am trying to work with the example they provided. If you can direct me to a tutorial of some sort, it would be perfect.
06:45 < echo> I've seen passport be recommended much more than everyauth, you may find it's easier to implement in your setup: http://passportjs.org/
06:45 < rmb_> hye, how do I apply http://pastebin.com/M1LpgR4Y to http://jvectormap.com/examples/markers-world/ on marker appear?
06:46 < SomeoneWeird> passport >>>> everyauth
06:46 < AAA_awright> jackyalcine: Just convert the jade to html? It's just a different syntax for the same thing
06:48 < radusecrieru> I know that, but I tried app.render("login.html"), in the same manner that app.render("login") was for jade and it failed.
06:48 <@konobi> submodules--
06:49 < cloudbender> XMLHttpRequest.... should .onreadystatechange be mapped AFTER .open ?
06:57 < AAA_awright> MongoDB would be so much nicer if there was no length restriction
06:57 < Havvy> SQL or bust!
06:57 < cloudbender> have you looked at couchbase ?
06:57 < AAA_awright> Perhaps
06:57 < echo> That was a driving force for me to move almost everything to Riak.
06:57 < AAA_awright> Couch is... My entire backend is tiny and V8 based
06:58 < cloudbender> I'll try it in a month or three
06:59 < cloudbender> They have the best documentation I've seen in a long time.
06:59 < cloudbender> They've been working on it for several years now.
07:00 < cloudbender> I can't help but think it's gonna be a great fit with node
07:00 < Glitchin_> Hey all
07:01 < Glitchin_> I was wondering if anyone had recommended reading for operating a node application across multiple instances/at massive scale -- preferably on some sort of cloud based infrastructure (EC2, Rackspace, etc)
07:04 < echo> cloudbender: Wait, doesn't couchbase also have document size limits? 20mb, right?
07:05 < tpayne> I setup a proxy to forward to my node.js port, and it broke my email. Anyone ever have this problem?
07:05 < cloudbender> not sure about the limits, wait
07:05 < nanashiRei> I wouldn't have guessed, 10bgit is so much fast then 100mbit. Even when it's not about big data packages.
07:06 < echo> cloudbender: I just saw it in this: http://docs.basho.com/riak/1.2.1/references/appendices/comparisons/Riak-Compared-to-Couchbase/ Not sure how old it is though.
07:06 < nanashiRei> What i'm looking blows my mind D:
07:06 < echo> tpayne: What port are you using to proxy your node app to and what are you using to proxy?
07:07 < tpayne> 8001 and i'm using some dreamhost CMS
07:07 < cloudbender> echo I will note the topic and dig it up tomorrow
07:08 < echo> tpayne: Sounds like a coincidence if it's not any of the normal email ports: 25, 26, 110, 143, 465, 587, 993
07:08 < cloudbender> I think I'm going to code against it soon.  I am intrigued.
07:08 < tpayne> echo it's gmail, does that matter?
07:08 < echo> cloudbender: Cool, no worries, I'm always open to new technologies and I hadn't heard of it yet, I had heard of mongo and it just wasn't fast enough for my needs.
07:09 < cloudbender> I hear alot of good things about mongo also
07:09 < echo> tpayne: Err. No? >_>
07:09 < tpayne> hmm shit
07:09 < cloudbender> But the couch team seems to have really done thier homework
07:09 < tpayne> it seems like every single thing broke when i setup that proxy
07:10 < tpayne> perhaps because in my routes
07:10 < tpayne> i'm doing a catch all and redirecting
07:11 < rivalslayer> Hi 
07:11 < rivalslayer> How do you serve static files in node? Can help?
07:12 < echo> tpayne: That sounds like a not-so-good idea. I'm not sure what kind of proxy you're using. But, I've yet to have an issue configuring different hostnames as separate node apps with separate upstream servers to proxy to. 
07:12 -!- mode/#Node.js [+o mbalho] by ChanServ
07:12 < azbyin> rivalslayer, you use the fs module and check if the file exists, you read and serve it up. but it is a bad idea to do it yourself
07:12 < tpayne> maybe i'll get rid of that thing and see what happens
07:12 < tpayne> thanks
07:12 < azbyin> it has been done to death by lots of other people with nice modules for node
07:12 < azbyin> express, ejs, etc.
07:12 < rivalslayer> uhu! Actually I was trying make a compact node chat server, self contained and easy to setup, so I didn't want any frills with the config
07:13 < rivalslayer> :-)
07:13 < echo> rivalslayer: You can build your own with the http module: http://nodejs.org/api/http.html ; There's prebuilt ones that are easy to use like expressjs, but I recommend using an actual web server designed for serving static files instead of having node bear that burden.
07:13 < rivalslayer> tpayne, what are we talking about here? 
07:14 < rivalslayer> echo, thanks for the help :-)
07:14 < rivalslayer> BTW, I gotta say this channel is quite active! Than the others! :-)
07:14 < tpayne> rivalslayer: ever since i setup proxy's to my node app port, my gmail emails bounce back
07:14 < rivalslayer> tpayne, got it! :-)
07:15 < echo> rivalslayer: You're welcome and I agree. Working late is extra bearable with an outlet such as this. 
07:16 < rivalslayer> echo, thanks man! You probably are at the other end of the world! It's not late here! :-)
07:17 < nanashiRei> rather 8:13am :D
07:18 < xk_id> why is everything put inside "process.nextTick()" in this example? https://github.com/caolan/async#reducearr-memo-iterator-callback
07:19 < xk_id> is it always necessary to put all instructions of an "async.reduce" iterator inside "process.nextTick"?
07:19 < xk_id> necssary/recommended
07:20 < nanashiRei> not really
07:20 < nanashiRei> that kinda happens anyway
07:20 < xk_id> I just don't understand why it's in the example
07:20 < azbyin> the comment just above it says // pointless async
07:21 < azbyin> maybe that should have indicated something to you?
07:21 < nanashiRei> xD
07:21 < xk_id> still
07:21 < nanashiRei> azbyin: psst
07:22 < nanashiRei> xk_id: it's pointless, it happens anyway. Just throw you stuff into async and it'll make you happy.
07:22 < xk_id> oki
07:22 < nanashiRei> There is one thing where it might not be pointless
07:23 < nanashiRei> if you have something that will prodouce massive load
07:23 < nanashiRei> then drop it to the next tick, so that everything else at least gets queued/started
07:23 < xk_id> and I wish to wait for it to finish before calling the callback?
07:24 < xk_id> right
07:24 < nanashiRei> But really, for load intensive tasks, fork a child process, just to be sure :)
07:26 < xk_id> if all I do as part of an "async.reduce" are http-requests (to the same web server) & scraping, are the http-requests going to take place one after another, due to the maximum number of TCP connections to a web server being 1? 
07:28 < gator1021> is there a node.js gui available?
07:28 < xk_id> gator1021: do you mean an IDK?
07:29 < gator1021> like a way to make node apps no the desktop. hold on brb
07:29 < xk_id> ah
07:30 < Havvy> gator102: For many reasons, GUI and Node.js are not a good idea to combine together. Most of them have to do with installation pains for the end user.
07:30 < Havvy> Well, installation pains for Windows users.
07:31 < xk_id> gator102: this? http://stackoverflow.com/questions/10743504/ui-for-node-js-and-jquery-web
07:33 <@Nexxy> Havvy, gator1021, appjs looks neat though
07:33 < gator1021> yep seen that. was thinking a little more low level. 
07:33 <@Nexxy> I made an embedded app using node
07:33 < xk_id> does it make sense to have an "async.reduce" if all I do in the iterator is an http-request to the same webserver? I'm asking because it seems the maximum TCP connections to the same server at one time seems to be one.
07:33 <@Nexxy> a kiosk of sorts
07:34 < cloudbender> I never knew this existed ...
07:34 < cloudbender> http://www.aolserver.com
07:34 < gator1021> brb
07:35 < cloudbender> hmmm tcl
07:36 < cloudbender> gnite
07:37 < mscdex> there ought to be a bounty for a gitlab-like project with the backend written in node
07:41 < gator1021> c# is dead to me because of node.js. but a native gui would still be nice (not too much though)
07:41 <@Nexxy> but what about the type safety?!
07:42 < gator1021> fuckt it
07:42 <@Nexxy> that's the spirit!
07:42 < inolen> renegades up in here
07:44 < SomeoneWeird> haha
07:44 < azbyin> mscdex, precisely what i am looking ofr as well..
07:44 < SomeoneWeird> <gator1021> c# is dead to me because of node.js. but a native gui would still be nice (not too much though) < agreed
07:45 <@Nexxy> html5 isn't native?
07:45 <@Nexxy> wat?
07:45 < azbyin> which is why i've been investigating libgit2 with js bindings
07:45 < SomeoneWeird> lol Nexxy 
07:46 < Havvy> Nexxy: It's native for Firefox OS. And for browsers.
07:46 <@Nexxy> good enough for me!
07:49 < xk_id> http://stackoverflow.com/questions/14577940/maximum-concurrent-http-connections-to-the-same-host-in-node-js
07:52 < GreenDog> someone really needs to write a good article on the differences between asychronous programming and threaded programming
07:53 < Havvy> Threads can enter and exit execution at any time. Async can't.
07:54 < GreenDog> and in that article, they need to make it clear node.js is an asynchronous paradigm, if your program is coded as such, not threaded
07:54 < GreenDog> i see so many people get confused by that
07:55 < gator1022> closures and GC
07:55 < AAA_awright> xk_id: Go to http://nodejs.org/docs/latest/api/all.html and search for "concurrent"
07:59 < xk_id> It says 5, so it doesn't make sense? http://nodejs.org/docs/latest/api/all.html#all_agent_maxsockets
07:59 < xk_id> why does the next http-request take place only after the callback completed on the first one?
08:00 < xk_id> in fact, if there is no reply received from the webserver, there is no other http-request made; it just waits. 
08:00 < xk_id> and my understanding of "async.reduce" is that the iterations would take place in parallel (i.e if one iteration takes time, the second would be initiated)
08:01 < xk_id> I'm missing something..
08:06 < gator102> from a html/js/css perspective on a normal web page it is all synchronous. if it takes 5s for jquery to load too bad.
08:07 < echo|1> gator102: Well, depending upon the browser, the requests are asynchronous to an extent, however, the rendering in most is not.
08:09 < gator102> so they may load asynchronously but the browser serves them up in the order they are listed in the html file?
08:10 < gator102> that makes sense. i thought i was under my more stupid screename
08:11 < echo|1> gator102: Correct. I believe there's an RFC on it. A browser will make 8 asynchronous network requests per FQDN. Which is how it's beneficial when you're loading many many requests to spread them across subdomains to allow for more asynchronous network requests. 
08:11 < echo|1> gator102: And yet another reason to force www.
08:14 < gator102> echo|1, what do you think about putting images as string in css files (less GETs) vs just loading the image?
08:16 < echo|1> gator102: If the images are small, a sprite is still recommended. Where you can combine ~15-30 small images into one medium sized optimized image and use css to select each one for each purpose. Can you elaborate on what you mean by storing their string representation in CSS, though?
08:18 < gator102> they let you write an image as a base64 string and put it in css now. even an animated gif.
08:18 < gator102> i realized you coudl put an entire website in a singel .htm file
08:18 < echo|1> gator102: That's what I thought you were referencing. However, the base64 string representation is usually 127% of the binary value. 
08:25 <@Nexxy> \o/
08:26 < echo|1> Evening! o/
08:26 < aandy> gator102: ugh, reminds me of my very first web project ever - *everything* was in index.php, and yes i do mean everything
08:28 < gator102> 3rd base?
08:30 < gator102> sry that was stupid. wasnt even awale/ what was the file size... back then?
08:31 <@Nexxy> lol
08:32 <@Nexxy> increase your image data by 30% to save some (probably already keep-alive) requests
08:32 <@Nexxy> is that still faster?
08:32 < aandy> 82.87 Kb
08:32 < AAA_awright> Nexxy: Yeah, it saves a roundtrip, and HTTP headers
08:33 <@Nexxy> it seems like it wouldn't make much of a difference unless you had a lot of very small images
08:33 < AAA_awright> That's generally what you'd embed
08:33 < AAA_awright> Like, 20x20px images
08:33 < echo|1> But adds network time for the increased size, and CPU cycles for turning the base64 back into an image.
08:34 <@Nexxy> won't anyone think of the electrons?!
08:34 < AAA_awright> echo|1: processing base64 is really cheap
08:35 < AAA_awright> Far cheaper than requiring the network card do any extra effort
08:35 < AAA_awright> (eh)
08:35 < AAA_awright> echo|1: The network time for the extra roundtrip far exceeds the transfer time
08:36 < AAA_awright> Base64 adds, what, <1ms? And a roundtrip is, what, 100ms?
08:36 < MarkusM_> I have an odd issue maybe you guys might know about. I send a packet to a Node.js listener, and it outputs it back to me, even when I don't write anything to the socket.
08:36 < echo|1> That's true.
08:37 < AAA_awright> MarkusM_: Turn local echo at your telnet console off?
08:37 < MarkusM_> It's not telnet.
08:37 < MarkusM_> It's actually a flash.net.Socket.
08:37 < AAA_awright> And it echos back?
08:37 < MarkusM_> that connects to the node,js server
08:37 < MarkusM_> Yeah.
08:37 < MarkusM_> I checked in wireshark.
08:38 < AAA_awright> And there's no mistaken pipe in->out?
08:38 < AAA_awright> in.pipe(out)
08:38 < AAA_awright> Or similar
08:38 < MarkusM_> Oh.
08:38 < MarkusM_> That might do it.
08:38 <@Nexxy> lol
08:38 < MarkusM_> .pipe isn't really documented to me.
08:38 < [AD]Turbo> hola
08:39 < MarkusM_> Got it now.
08:39 < MarkusM_> Thank you guys kindly for your invaluable help.
08:39 < MarkusM_> And my amazing stupidity.
08:39 < MarkusM_> I'm a 1 day nodejs virgin. :D
08:39  * AAA_awright is, appearently, a code psychic
08:39 <@Nexxy> MarkusM_, it's not stupidity to learn new things
08:40 <@Nexxy> I think that's kind of the opposite of stupidity
08:40 < MarkusM_> True, but to not think of it as a Stream was.
08:40 < MarkusM_> I am disapoint in myself. lol
08:40 <@Nexxy> you shouldn't be so hard on yourself :)
08:40 < MarkusM_> <3 node.js
08:40 < MarkusM_> It's helping me big-time.
08:40 <@Nexxy> yay!
08:41 < echo|1> omg nexxy, that's the 3rd time in a row, I almost typed the exact statement as you and then I saw it show up
08:41 < echo|1> explosion in my brain
08:41 <@Nexxy> echo|1, I piped your stream of consciousness into mine
08:41 <@Nexxy> sorry
08:41 < echo|1> Lol
08:42 < echo|1> That's why I can't keep a solid train of thought
08:42 < echo|1> Getting piped all over the place
08:42 <@Nexxy> muahahaha
08:42 < HexSquid> Hi, I hope somone can help a node noob. For some reason my XHRs get a 301 in production, but not on localhost. Is this likely to be a node thing, or maybe something to do with my DNS?
08:44 < MarkusM_> It might be because I'm removing the 'data' listener and adding a new one.
08:45 < MarkusM_> My var socket scope might be wrong in the anonymous function.
08:48 < MarkusM_> There, I've simplified my events as close as possible to the examples.
08:48 < MarkusM_> Let's hope.
08:49 < MarkusM_> Nope, still doing it.
08:53 < MarkusM_> Damn, no luck.
08:53 < MarkusM_> I'm at an utter loss.
08:54 < HexSquid> :/
08:57 < MarkusM_> http://www.hacksparrow.com/tcp-socket-programming-in-node-js.html <-- in this example he's not even using a socket.pipe(socket);
08:57 < m4n_> waoo! a lot of people here. Hello everyone! I want to stream audio the way soundcloud does, eventually using soundmanager2. Any node.js module to recommend? 
08:59 < MarkusM_> I got it!
08:59 < MarkusM_> I didn't need the socket pipe at all.
09:01 < MarkusM_> It works flawlessly now!
09:01 < MarkusM_> So happy!
09:01  * MarkusM_ happy dances.
09:01 < fruitFly> what do you think of this node book as an intro and to get familiar with socket.io/websockets http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-ebook/dp/B008Z5OEUY/ref=cm_cr_pr_product_top
09:01 < fruitFly> HELP PLEASE
09:04 <@konobi> fruitFly: chill out
09:05 < fruitFly> konobi: I chill like absolute zero... just dissapea
09:05 < mpajor_op5> fruitFly: is there anything in particular you want to build by learning socket.io?
09:06 <@konobi> i hear it's fairly decent
09:07 <@konobi> node.js in action is also supposed to be good... though i know the author, so that may be biased
09:07 < fruitFly> mpajor_op5: I just wanna learn node to have a technical skill, I'm interested in the web, host my own blog, build some apps :)
09:07 < `3rdEden> There aren't Node.js published books that aren't decent
09:08 < `3rdEden> Also Smashing Node.js isn't a book that fully focuses on Socket.IO it touches the subject in some chapters just like most books are doing
09:08 < fruitFly> konobi: I actually have Node.js in action and in 2nd chapter he starts building a chat app--introducing socket.io without going over it.. I don't know where to start lerning socket.io
09:09 < `3rdEden> If you are interested in socket.io: http://www.packtpub.com/socketio-realtime-web-application-development/book
09:09 <@konobi> fruitFly: getting thrown in the deep end is always the best way to learn
09:11 < fruitFly> konobi: You're right! Just when I was looking over the socket.io code I don't fully get it, and the socket.io documentation sucks, what free resources would help me... I think I'm gonna jump back into the deep end :)... just need to learn more about socket.io
09:12 < mpajor_op5> fruitFly: look at stackoverflow for code examples; google socket.io examples etc
09:12 < HexSquid> Ah! Figured out my problem. Sorta. Exactly what is app.configure( ... ) for?
09:12 < jvanveen> hm, anyone knows if ws and node-spdy can co-op?
09:12 < HexSquid> Seems like I don't need it.
09:12 < echo|1> HexSquid: It's used to setup configuration options and add additional middleware for express.
09:13 < HexSquid> I'm going to read more
09:13 < HexSquid> ty
09:13 < mpajor_op5> fruitFly: I built a socket.io chat in two days; I've googled and read a lot about it but never actually tried to code anything. Eventually I decided to jump into it and voila, two days later I had a multi-room socket.io chat done with user authentication. I asked a couple of questions in here while building it and the response from the community was totally fantastic :)
09:14 < echo|1> HexSquid: Here's the `official` docs: http://expressjs.com/api.html#app.configure You may find better explanations out there though.
09:15 < fruitFly> mpajor_op5: I'ma do dat!... feel free to link me to examples that helped you :D
09:15 <@konobi> jvanveen: WS and SPDY don't interoperate currently, though there are draft specs on enabling WS over SPDY sessions
09:15 < `3rdEden> fruitFly: it also helps to just read the socket.io wiki
09:15 < `3rdEden> not many people actually click on the 'wiki' link in the socket.io repo..
09:16 < fruitFly> `3rdEden: TRUE... I'll check it out!
09:16 < jvanveen> konobi: ok thanks, ill stick to http for now then :)
09:17 < jvanveen> websockets over spdy are supposed to work in the browser i think
09:18 < `3rdEden> WebSockets should just work with a SPDY server, but they will no go over the same SPDY connection
09:18 < `3rdEden> it would be a regular HTTPS connection instead, which isn't that bad
09:19 < jvanveen> `3rdEden: so, it could get some performance gain for regular http requests?
09:19 <@konobi> i never said that it was impossible to do, just that they don't interoperate
09:19 < jvanveen> ah ok. i misunderstood
09:19 <@konobi> "Chrome currently has an experimental flag for this: --enable-websocket-over-spdy"
09:20 < jvanveen> worth a try :)
09:20 <@konobi> but should be doable
09:20 < `3rdEden> if your spdy server supports it
09:25 < mpajor_op5> fruitFly: google for eg. "socket.io chat example" (I cant really remember which ones I looked at, I looked at many of them)
09:25 < mpajor_op5> but some will include the client-side + server-side code for you to test and play around with
09:36 < samholmes> Anyone have a EJS to Jade converter?
10:03 <@Nexxy> does anyone have a recommendation on easy screen recording w/ OSX?
10:03 < Gottox> Nexxy: I'm currently using screeny
10:04 <@Nexxy> Gottox, what do you use for editing + audio?
10:05 < Gottox> Atm I'm using it only inhouse for small demos. so I don't do video editing.
10:05 <@Nexxy> ah oki
10:07 <@Nexxy> I can probably just use iMovie lol
10:29 <@konobi> Nexxy: iusethis.com can be a decent guide for osx apps
10:30 <@Nexxy> o y ty
10:30 < joe_r> hey there
10:31 < joe_r> has anyone ported node.js to run off android tablet?
10:31 <@konobi> it runs on ARM
10:31 < strk> can I tell an http object to limit the number of accepted connection on .listen ?
10:34 < crabtree> yeah
10:34 <@konobi> strk: check the docs?
10:34 < crabtree> it's in the docs
10:35 < strk> if you refer to backlog it doesn't seem to be doing it
10:37 <@konobi> no, http objects are supersets of what object type?
10:38 < strk> Net ? (but is a guess, HTTP docs don't tell :)
10:38 <@konobi> the http docs do say
10:46 < hunter_1729> hello guys
10:46 < saturation> o hai
10:49 <@Nexxy> nodes js is for making you better feeling
10:51 < xk_id> does "async.reduce" process the iterations in parallel or in series? 
10:51 <@Nexxy> xk_id, according to the docs: This function only operates in series.
10:52 <@Nexxy> https://github.com/caolan/async#reducearr-memo-iterator-callback
10:52 <@Nexxy> #lmgtfy
10:52 < SomeoneWeird> lol
10:52 < xk_id> hey!! I've read that probably one thousand times. 
10:52 < xk_id> But I just couldn't be sure if "operating in series" is the same as "processing the iterations in series".
10:52 <@Nexxy> I can see how that would be confusing.
10:52  * Nexxy coughs
10:52 < xk_id> The "reduce" thing got me confused, I associated "reduce" with distributed/parallel processing. 
10:53 <@Nexxy> :P it's ok!
10:53 < xk_id> thanks :)
10:53 <@Nexxy> any time!
10:56 < pontius> probably a stupid question but I need some help with "node-mysql"
10:56 < pontius> using the example "connection.query('SELECT * FROM users WHERE id = ?', [userId], function(err, results) { // whatever });"
10:56 < pontius> How do I access the variable 'userId' from within the function? 
10:57 < SomeoneWeird> well it would be results[0].id, would it not?
10:57 < pontius> I try to access the userId when an err occurs but I only get an 'undefined'
10:57 < mermeladas> you access user id from the query result
10:58 < mermeladas> the anonymous function(err, results) has it's own scope and doesn't contain userId
10:59 < hunter_1729> Hey guys, do you have any suggestions for blogs / articles to start with node.js?
10:59 < pontius> mermeladas, I see. Anyway to pass that var over? 
10:59 < SomeoneWeird> if its defined outside of the scope, it does mermeladas 
10:59 < SomeoneWeird> <SomeoneWeird> well it would be results[0].id, would it not? < pontius 
10:59 < pontius> SomeoneWeird, hmm i'll try that
10:59 < mermeladas> SomeoneWeird: right
10:59 < SomeoneWeird> you're selecting the row that matches id = userId
11:00 < Industrial> Why do I never see anyone use javascript getters and setters? e.g. http://stackoverflow.com/a/813332 It's not supported in al browsers? What bout node.js?
11:00 < SomeoneWeird> because they're expensive, afaik
11:01 <@konobi> prone to problems because they don't mix well with async
11:01 < Industrial> evented model classes like backbone use .get(k, v) and .set(k, v) that eventually emit change events
11:01 < _ior> getters and setters? i thought this was a functional language
11:02 < Industrial> I'm building one, and I thought it would be nicer to have get k: function() {return this.attributes['k'];}
11:02 <@konobi> and then you want to add lazy-loading... *boom*
11:04 < Industrial> Is there a way to 'fake' function calls on an object? e.g. I do a.b(); and I get in a function('b') {}; so in the function I could return a function (or another value)?
11:05 < _ior> industrial, are you coming from java?
11:05 < Industrial> _ior, I can write a functional algorithm (albeit taking a while, i think it's a fun practise nonetheless) but I'm not sure how to structure my application
11:05 <@konobi> there's no method missing or the like
11:05 < Industrial> using functional programming rather then OOP
11:06 < lbdremy> hi, anyone know a module to inline nested object into a flat object ? something like { a : { b : 'c'} } => { 'a.b'  : 'c' } ?  plz :)
11:06 < _ior> industrial, this might be an amusing and enlightening anecdote: http://steve-yegge.blogspot.de/2006/03/execution-in-kingdom-of-nouns.html
11:06 < Industrial> How would I divide what I have with MVC in FP?
11:07 < Industrial> _ior, I read it the other day, but I'm not sure that's where I'm headed ;)
11:07 < _ior> industrial unfortunately i am probably very much the wrong person to answer your questions, as i'm also working on my first node project and learning as i go
11:08 < _ior> i totally screwed up my first implementation when i made a factory object
11:08 < _ior> and the guy i'm coding with pointed out i'm not working in java
11:08 < gildean> lbdremy: you do know that you can access the nested object with just the dot-notation
11:10 < Industrial> _ior, https://gist.github.com/e9ca77102567b5f87542/1d43cd820d1c07195208aa3aa1d2b38489c07cec
11:10 < Industrial> that's where I'm at now. Almost got the model -> view bindings working
11:11 < xk_id> can anybody confirm that putting a negative value into "setTimeout()" will cause a delay of 1ms?
11:11 < _ior> industrial, i suppose the most pertinent question first is: "does your project really need such a heavy tech stack?"
11:12 < _ior> i know mvc isn't that heavy a stack, but it does add a certain framework overhead that your project may simply not need
11:13 < Industrial> What I'm building right now is a personal wiki, but I'd like to use the parts with any website I'll be making with node.js. I want to play with using websockets instead of REST (because I just keep thinking in actions, not resources..)
11:14 < Industrial> so I could implement that as an adapter to the model class
11:14 < _ior> fair enough. i guess then the next question is "have you looked at any of the rails-inspired frameworks that already exist for node?"\
11:15 < Industrial> I've been using node for 1.5+ years now ;) I know whats going around in npm
11:15 < _ior> then you know better than i do and i will shut up now :)
11:16 <@konobi> but still using coffeescript
11:16 < Industrial> livescript
11:16 < Industrial> I dont see the big whoop, all it does is add some functions to its esprima (i think) generated code
11:16 <@konobi> halfcafflowfatnowhipextraspiceshortmochascript
11:17 < Industrial> functions that live in underscore.js aswell
11:18 < Industrial> konobi, here is the observable in js https://gist.github.com/bcef9206e21a11183534
11:20 < Industrial> thats more reabable then some peoples js code I've seen :]
11:37 < andrepadez> Hi, can somebody help me please? https://gist.github.com/4663588   - the DB is well populated, but when i run Accounts->List, sometimes it shows alright, sometimes I get "Cannot read property 'length' of undefined" for account.locations  .... please i am going out of my mind
11:41 < rvagg> andrepadez: are you sure you're not getting an `err` back? perhaps there legitimately is an error that needs to be handled before you jump into processing `accounts`?
11:42 < rvagg> andrepadez: also, perhaps consider doing an accounts.forEach(function (account) {}) instead of the loop with inner closure
11:43 < rvagg> andrepadez: actually, I think your problem is that you're executing asynchronously and expecting the *last* one to finish last
11:44 < hipsterslapfight> https://gist.github.com/4663649 anybody have any recommendations over best practice of dependency injection?
11:44 < rvagg> the `if (idx+1===accounts.length)` line is your problem, there's absolutely no guarantee that the last one will come back last
11:44 < rvagg> andrepadez: what you need to do is keep track of how many have returned, increment a counter and then compare that counter to accounts.length, when it's  equal you're done
11:45 < rvagg> andrepadez: or use a lib like caolan/async to do a async.forEach(accounts, fn, render) thing
11:45 < geNAZt> hipsterslapfight: i would use the second way
11:45 < hipsterslapfight> geNAZt: any reason in particular? (that's the way i've been doing it up til now)
11:45 < gildean> also what rvagg said about the error is valid, if the callback offers an error as the first argument then you should always make sure there's no error with: if (!err) {...
11:46 < rvagg> ✔
11:46 < geNAZt> hipsterslapfight: the first way needs some ugly variable naming, the second one doesnt do that
11:47 < hipsterslapfight> hah, fair enough
11:47 < gdfgdf> sadasd
11:47 < gdfgdf> asd
11:47 < gdfgdf> dfdf
11:47 < gdfgdf> dfdfdfdgfdg
11:47 < gdfgdf> dfg
11:47 < gdfgdf> dfg
11:47 < gdfgdf> dfgdf
11:47 < gdfgdf> gdf
11:47 < gdfgdf> gdf
11:47 < rvagg> Nexxy?
11:47 < geNAZt> but the second way can be buggy if u need to use functions in the same space
11:48 < rvagg> nmind
11:48 <@Nexxy> rvagg, ;o
11:48 < rvagg> hah, she's alive...
11:48 < rvagg> do you ever sleep Nexxy?
11:48 <@Nexxy> no
11:48 <@Nexxy> I have things to do!
11:48 < hipsterslapfight> geNAZt: yeah, that's why i was looking into the first
11:48 < rvagg> too busy admiring your forks
11:49 <@Nexxy> it's just that they are of such high quality
11:49 < TheUser> Hey, guys sorry to interrupt you, quick question: Is there a way to keep mongodb connection open ? What I mean is every time when you want to do something you have to open the connection pass the function and do the operation
11:49 < geNAZt> >> { test: function() { console.log(this.test1); }, test1: "xyz" }
11:49 < purr> geNAZt: SyntaxError: Unexpected token (
11:50 < TheUser> is there a better way?
11:50 < geNAZt> >> ({ test: function() { console.log(this.test1); }, test1: "xyz" }).test();
11:50 < purr> geNAZt: undefined; Console: 'xyz'
11:50 < geNAZt> well okay
11:50 < geNAZt> it shouldnt bug around :D
11:50 < hipsterslapfight> yeah okay then
11:51 < rvagg> >>  { test: function() { return this.test1 }, test1: "xyz" }.test()
11:51 < purr> rvagg: SyntaxError: Unexpected token (
11:51 < geNAZt> but interessting that u can use this in an static object
11:51 < rvagg> >> ({ test: function() { return this.test1 }, test1: "xyz" }_.test()
11:51 < purr> rvagg: SyntaxError: Unexpected identifier
11:51 < rvagg> heh!
11:51 < rvagg> >> ({ test: function() { return this.test1 }, test1: "xyz" }).test()
11:51 < purr> rvagg: (string) 'xyz'
11:52 < metal55> Hi all
11:52 < hipsterslapfight> so second way it is then i think
11:52 < metal55> I was wondering if there was a way to use path.basename and not have it fall over if there is a query string 
11:52 < geNAZt> hipsterslapfight: yes i would use the second way
11:53 < hipsterslapfight> cool, thanks geNAZt 
11:53 < rvagg> metal55: you could sanitise before you pass it in
11:53 < hipsterslapfight> i couldn't find any examples of best practices, just wanted to be sure i wasn't missing anything
11:53 < metal55> rvagg: thanks I shall take a look at that
11:53 < rvagg> metal55: path.basename(p.replace(/\?.*$/,''))
11:53 < geNAZt> hipsterslapfight: much in v8 / node is try around
11:54 < geNAZt> what performs best and what not
11:54 < metal55> rvagg: ahh good old regex :)
11:54 < rvagg> to the rescue
11:54 < hipsterslapfight> yeah, hence testing the first way now :v
11:54 <@konobi> rvagg: pppffftt... substr and indeOf
11:54 < geNAZt> hipsterslapfight: v8 changes much in performance, node changes much
11:54 < hipsterslapfight> yeah that's true
11:54 < geNAZt> so sometimes in v0.6 this is faster in v0.8 it can be the other way around
11:55 < rvagg> konobi: path.basename(p.indexOf('?') > -1 ? p.substring(0, p.indexOf('?')) : p)
11:55 < rvagg> konobi: choose the more elegant solution!
11:56 < rvagg> personally I find that using regexes makes me feel much more superior
11:56 < geNAZt> but which one is faster ?
11:57 < rvagg> first optimise for fun, then optimise for a feeling of superiority, then, perhaps, optimise for speed
11:58 < geNAZt> well okay :D
12:00 < gmg85> hi guys
12:00 < gmg85> i am sending back a json response from my nodejs server
12:00 < gmg85> was wondering how to access it from the save method of my backbonejs model
12:00 < gmg85> any ideas?
12:01 < rvagg> TheUser: re your mongo connection, can't you just keep a global connection or connection pool that you can access when needed?
12:02 < andrepadez> rvagg: thanks very much, that was it
12:02 < rvagg> andrepadez: awesome.. now handle those potential errors
12:02 < andrepadez> i solved it using a recursive function, thanks very much
12:03 < rvagg> andrepadez: be sure to make full use of async tho, don't wait for one to finish before starting the next; it's good to make all the operations start at once, you have multiple libuv threads ready to handle i/o work in the background
12:03 < rvagg> andrepadez: if you do it serially, waiting for one to finish before doing the next, then you may as well be using a non-async, non-threadded platform
12:05 < andrepadez> rvagg: you're right, i'll look into it
12:06 < Ivru> Hi
12:06 < Ivru> It's not just you! http://www.nodemanual.org looks down from here. Do you have any other documentation to point ?
12:07 < rvagg> andrepadez: something like this: https://gist.github.com/4663748
12:09 < rvagg> Ivru: http://nodejs.org/api/ is all I use
12:09 < rvagg> ... and use the source luke, the node source is pretty approachable
12:09 < Ivru> rvagg, I'm looking for some guidelines, best practices, ..
12:09 < rvagg> Ivru: ahhh, well welcome to a world of argument
12:10 < rvagg> Ivru: reading other people's code is probably a good place to pick some of that up; popular libraries in particular
12:12 < Ivru> rvagg, thanks
12:18 < andrepadez> rvagg: yep, that works like a charm. thanks ocnce again
12:23 < xk_id> if a callback is described in the documentation as receiving two arguments, "(err, result)", can I call it with additional arguments? e.g "callback(err, result, stuff)"
12:24 < geNAZt> does someone use toposort-class for topological sorting ?
12:24 < geNAZt> i have a question about the sorting algorithmn
12:29 < xk_id> found the answer.
12:29 < xk_id> http://stackoverflow.com/questions/12443821/pass-extra-parameters-to-websql-callback-function?rq=1
12:31 <@konobi> xk_id: currying
12:31 < _ior> mmmmm curry
12:32 < xk_id> ah, you mean schönfinkeling
12:32 < jvanveen> hm
12:32 < jvanveen> RTCDataChannel landed in canary?
12:33 < xk_id> that's an amusingly stumbly word
12:33 < jvanveen> thats awesome :D
12:50 < geNAZt> someone uses a asset manager with cdn feature for expresjs ? or does someone know one ?
12:51 < SomeoneWeird> cloudflare
12:52 < jtomasrl> is it necesary to use redis with socket.io on multiple node instances?
12:52 < geNAZt> jtomasrl: no youu can use whatever you want
12:52 < geNAZt> jtomasrl: anything except memory storage :D
12:54 < geNAZt> SomeoneWeird: no thats not what i am seaching for. i search a asset library that connects to expressjs and i can tell the asset manager to use a directory or to create urls to a static domain
12:54 < SomeoneWeird> express.static ?
12:55 < geNAZt> it only uses folders or ?
12:56 < SomeoneWeird> mhm
12:56 < geNAZt> you know what i mean ?
12:56 < geNAZt> i have a domain: static.files.com and want to load all assets from there
12:56 < geNAZt> via a call in the template like: asset('js/jquery.js')
12:57 < geNAZt> or something
12:57 <@konobi> express-cdn?
12:58 <@konobi> and express-cdn-cloudflare
12:58 < aandy> or https://github.com/jamiesteven/express-simple-cdn
12:59 < geNAZt> aandy: yes 
12:59 < geNAZt> thanks
13:00 <@konobi> man, cloudflare looks awesome
13:01 < SomeoneWeird> it is
13:01 < SomeoneWeird> surprised you havn't heard of it
13:02 < aandy> konobi: check their blog
13:03 < aandy> if you're into that sort of thing - like networking. they do lots of posts on their findings
13:03 < aandy> http://blog.cloudflare.com/65gbps-ddos-no-problem for instance
13:04 < Andyland> jtomasrl: I would recommend you too. There's no way for different node processes to know about each others socket connections. Saving the socket state in redis, mongo or memcached is the best approach imo
13:04 <@konobi> aandy: noted
13:05 < jtomasrl> right
13:35 < Industrial> If I was the owner of foo.com I would create files under the root url for every filetype so you can http://foo.com/bar.tar.gz or bar.jpg/png/etc
13:39 < Industrial> https://gist.github.com/e9ca77102567b5f87542/0cafedadfd5dfd064c31d097dec386eb69d0b597
13:40 < Sembiance> anyone have a recommendation on something to use to recursively walk directory paths? Currently using 'findit' from substack, just not sure if there is something better/morepowerful that people like
13:44 < brettlangdon> Sembiance, findit seems pretty cool, didn't know about it, thanks
13:44 < Sembiance> brettlangdon: :)
13:46 < brettlangdon> Sembiance, I have only ever done it manually using the built in 'fs' library
13:46 < Sembiance> fyi, my favorite modules:  step (async handling/control flow),  moment (date parsing, formatting and manipulation),  request (fetching HTTP pages easily),  cheerio (parsing HTML pages and searching via jQuery like CSS selectors),  accounting (format numbers)
13:47 < kschzt> Sembiance, take a look at https://github.com/isaacs/node-glob
13:48 < Sembiance> kschzt: thanks! That looks promising!
13:55 < kschzt> isaacs, https://github.com/rocketpack/lockfile/commit/1402639c1a345edfca63ceb620bacb591ca10f95 there was a race condition in lock() when stat() and unlock() were async, callers would unlock based on stale stat info
13:57 < kschzt> also https://github.com/isaacs/npm/pull/3094 updated
13:57 < kschzt> isaacs, the fixes you made to lockfile weren't enough. now with those two commits it's all working stably.
13:59 < jtomasrl> is it possible that an event listener miss an event?
13:59 < geNAZt> yes it is
14:00 < geNAZt> if the maxListener count is too high
14:00 < geNAZt> but normally you get an error about that
14:00 < jtomasrl> too high?
14:01 < geNAZt> a normal eventemitter takes per event maximum of 11? listeners
14:01 < geNAZt> before it errors
14:01 < geNAZt> a no its 10 the 11th will get the error
14:01 < kschzt> isaacs, so: 1) add lock() on tarball in unpack(), 2) don't call unlock directly from npm, 3) keep track of whether we actually get locks and 4) stat() and unlock() need to be synchronous in lock() :)
14:03 < jtomasrl> so is not a good idea to use event emitters for emitting db results
14:04 < geNAZt> it depends on how much listeners you have
14:07 < jtomasrl> geNAZt: listener events or clients?
14:08 < geNAZt> if you have an object x and it emitts an event y
14:09 < geNAZt> x.on('y', function() { } );
14:09 < exit2> Anyone have any experience in interview for a front-end dev position?
14:09 < geNAZt> and this 11 times => error
14:09 < SomeoneWeird> x.setMaxListeners(0);
14:09 < SomeoneWeird> or something like that
14:09 < SomeoneWeird> removes that error, geNAZt 
14:09 < geNAZt> or that
14:09 < geNAZt> to unlimited ?
14:09 < SomeoneWeird> its to prevent memory leaking
14:09 < SomeoneWeird> 0 to unlimited, yes
14:09 < jtomasrl> nice
14:09 < geNAZt> well not that good :D
14:13 < Industrial> If there's lots of data say I'm going to be streaming chart data, can I make sure that control messages  are handled before data messages? Say I switch page, I'm no longer interested in messages that are in transit of the chart i was viewing, can the client and server immediately stop the chart data transfer and perhaps start another?
14:14 < Industrial> or is everything in transit guaranteed to happen on the client
14:14 < Sembiance> kschzt:: that glob module you told me about is working perfectly! exactly what I was after. Thanks a lot :)
14:15 < bullicon> i am uing url module to parse url string
14:15 < bullicon> should url.parse be in a calljback ?
14:18 <@konobi> bullicon: do the docs mention a callback?
14:22 < xk_id> what's the difference between "async.series(function1, function2, cb () {})" and "async.series(function1(), function2(), cb () {})"?
14:23 < xk_id> well, there's an array somewhere in that syntax too
14:36 < foobar321> Hi. Is there any compression library that supports multiple files inside and supports streams2 in node ? I need to create archive depending on user check-boxes. Was thinking about some generic solution - creating output stream 1st and then adding files into archive depending on the checkboxes.
14:53 < plato> hey guys long time no see
14:53 < plato> quick question: i am asyncronously loading a db in my module
14:53 < plato> how do i make sure my desired object gets returned to require() AFTER the async completes
14:54 < plato> let me paste snippet
14:56 < plato> http://pastebin.com/raw.php?i=jcyfFM6f.
14:56 < plato> http://pastebin.com/raw.php?i=jcyfFM6f
14:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:58 < plato> when I later try to use a method of the ret object, it doesn't exist
14:59 < L10n> plato: i think you need to have () after your closing bracket
14:59 < plato> i am requiring it like that: var evedb = require('./evedb')()
14:59 < L10n> ah sorry
14:59 < plato> now, evedb should be identical to the ret object inside the module
15:00 < plato> it looks like the evedb object itself is undefined
15:01 < plato> I think I need to tell node to block the returned module.exports function until my db initialization is done
15:03 < foobar321> Does setupSQL is blocking?
15:03 < plato> since, I don't have anything I want to immediately return
15:03 < plato> no
15:03 < foobar321> So make it blocking
15:03 < plato> i was tryin to hack it with a while(false) looop but it felt really evil
15:03 < foobar321> And it will worok fine
15:04 < L10n> or your top level function could take a callback
15:04 < foobar321> probably?
15:04 < plato> i will try making it blocking again
15:04 < plato> thx
15:04 < foobar321> plato: however I'm not sure about scenarios when many files has x = require('./yourmodule');
15:05 < foobar321> sorry brackets were missing
15:05 < foobar321> plato: however I'm not sure about scenarios when many files has x = require('./yourmodule')();
15:05 < plato> Ah
15:05 < plato> Not a problem for now :D
15:06 < plato> code is read only
15:06 < foobar321> That's much better then write-only :)
15:06 < foobar321> than
15:07 < der_On> hello. I'm trying to make a simple POST request using node.js but it seems to fail at some point
15:09 < der_On> my code is as follows: http://pastebin.com/K9BEQuVJ
15:10 < plato> https://github.com/mikeal/request#requestpost any use?
15:11 < der_On> plato: thanks I will try
15:12 < cloudbender> good morning fellow misfits
15:12 < plato> o/
15:12 < bingomanatee> morning node
15:12 < bingomanatee> ping substack
15:13 < bingomanatee> if you are using browserfy, is there any built in way for a module to know whether it iw running in a browser or not?
15:13 < kschzt> bingomanatee, process.browser
15:13 < bingomanatee> thankx.
15:14 < bingomanatee> is it doc in node api I take it?
15:14 < kschzt> bingomanatee, https://github.com/substack/node-browserify under process
15:15 < bingomanatee> thx
15:15 < andrew12> is there a better way to do rm -rf node_modules && npm install
15:15 < andrew12> to like… basically remove any old stuff i have installed in that folder and update everything else
15:15 < plato> how do you know what 'old stuff' to uninstall
15:16 < plato> stuff not in a package.json?
15:17 < rcaskey> are harmony proxies being obsoleted?
15:18 < andrew12> plato: yes
15:18 < plato> i dunno andrew12 sorry... couldnt be too hard to do though... find |grep package.json > packages.txt ...
15:19 < plato> jeez this should NOT be so hard
15:19 < kschzt> andrew12, npm-prune -- Remove extraneous packages
15:19 < andrew12> thanks
15:19 < plato> what is best practice to syncronously require my module
15:20 < andrew12> what do you mean
15:20 < plato> i need to block the return of the export until i load my database properly
15:20 < andrew12> require() should be synchronous
15:20 < andrew12> plato: that's not possible
15:20 < xk_id> If anybody has experience with dnode (and async), could you please take a look at this simple code and tell me what I could do to make sure I get the correct result on line 12? thanks. https://gist.github.com/4665004
15:21 < andrew12> xk_id: do you know how async works?
15:21  * xk_id nods
15:21 < xk_id> I do. 
15:22 < xk_id> okay
15:22 < xk_id> I think I know what I need to do :)
15:22 < andrew12> cool
15:22 < andrew12> i've never used dnode before
15:22 < xk_id> put it in async.series and callback after line 8
15:23 < andrew12> can I see
15:23 < andrew12> ?
15:23 < cloudbender> XMLHttpRequest ... It seems the reponseType would be important. Why did they depecate it ?
15:23 < geNAZt> xk_id: be careful with dnode and kind of callbacks
15:23 < geNAZt> if a client doesnt answer your callbacks its easy to overflow the server
15:23 < cloudbender> deprecate I mean
15:24 < andrew12> cloudbender: what do you mean?
15:24 < andrew12> responseType is deprecated?
15:24 < cloudbender> wait ...
15:25 < cloudbender> Note: Starting with Gecko 11.0 (Firefox 11.0 / Thunderbird 11.0 / SeaMonkey 2.8), as well as WebKit build 528, these browsers no longer let you use the responseType attribute when performing synchronous requests. Attempting to do so throws an NS_ERROR_DOM_INVALID_ACCESS_ERR exception. This change has been proposed to the W3C for standardization.
15:25 < ring3> hi
15:25 < andrew12> yeah that just means you can't change it
15:25 < ring3> i'm looking for multipart-uploading samples, but i only found server side samples
15:25 < xk_id> geNAZt: oh, but I'm not depending on any callbacks from the client!
15:26 < plato> bp
15:28 < xk_id> andrew12: this works: https://gist.github.com/4665004 . 
15:29 < andrew12> yeah that should
15:29 < geNAZt> and know you got that what i said :D
15:29 < xk_id> andrew12: sorry, this: https://gist.github.com/4665004
15:29 < xk_id> btw, sorry for the huge idents, they're a lot smaller in my text editor, they only show up when I paste them into gist. 
15:31 < xk_id> geNAZt: sorry, didn't understand? :)
15:31 < geNAZt> if a client connects to dnode
15:31 < geNAZt> you want from it that i calls a function
15:31 < geNAZt> and the return of that comes back to your server and you call the series callback
15:31 < geNAZt> or am i wrong ?
15:33 < andrew12> xk_id: what do you think of http://pastie.org/private/exjo5qi136s5fnn0rtegrq
15:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:34 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:34 < xk_id> geNAZt: this is what my server looks like https://gist.github.com/4665117
15:34 < geNAZt> ah okay
15:34 < xk_id> andrew12: haha but you didn't solve my problem :) 
15:35 < andrew12> i still don't understand what your problem was =p
15:35 < xk_id> andrew12: I needed to have the value of "stuff" retrieved from the server, available outside of the remote.getStuff function. 
15:35 < niix> Anyone have any experience interviewing for a front-end dev position?
15:36 < xk_id> if that makes sense
15:36 < xk_id> which it doesn't
15:36 < andrew12> xk_id: you should avoid doing that since you're doing async
15:36 < andrew12> because what if you haven't retrieved it yet
15:36 < spion_> xk_id, does this particular example work?
15:37 < xk_id> andrew12: well, okay, I guess nesting would have been a solution as well. but it would have got more confusing, since I have about 4 values I need to retrieve. 
15:37 < andrew12> you can do async.parallel for that
15:37 < xk_id> andrew12: so I would have had to nest the 4 retrievals
15:37 < spion_> async.parallel
15:37 < xk_id> spion_: yes, you can run it on your machine if you want
15:39 < xk_id> andrew12: I think I'll actually do the nesting, it saves some typing :) 
15:39 < andrew12> i disagree
15:39 < andrew12> you're calling multiple dnode methods right
15:39 < spion_> xk_id,  async.parallel({first: remote.getStuff.bind(remote), second: remote.getOtherStuff.bind(remote), function(err, stuff) { use stuff.first, stuff.second })
15:40 < andrew12> let me get a working example
15:41 < spion_> as opposed to remote.getStuff(function(err, first) { remote.getOtherStuff(function(err2, second) { }); }); - which isn't parallel actually.
15:41 < bingomanatee> opinion - if you are storing 2d data do you think its more efficient to store in a flat array and access x,y data by calculating offset, or to store in a 2d array of subarrays?
15:41 < der_On> plato: that worked very well. thanks for pointing me to that
15:42 < xk_id> spion_: hm okay. wouldn't it be better to not do it parallel, as to avoid stress on the server?
15:42 < spion_> depends on the nature of stuff
15:42 < spion_> and the size
15:43 < xk_id> spion_: well, okay, so you mean parallel would be okay if the size is trivial. But for the general case, nested/series is better, no?
15:43 < xk_id> although, the code looks less pretty. 
15:43 < spion_> there is no general case...
15:44 < xk_id> the general case is if I don't know the size of stuff and don't want to risk it
15:44 < spion_> how about the number of calls?
15:44 < radshadowhero> ...what?
15:45 < radshadowhero> No hostmask at all?
15:45 < radshadowhero> bleh.
15:45 < xk_id> spion_: yes, number of calls too!
15:45 < spion_> xk_id, it really depends on what you're doing. If you are running separate processes for example
15:45 < spion_> it would not be wise to run 100 of those in parallel
15:46 < xk_id> yep
15:46 < plato> der_On: awesome glad to help
15:46 < spion_> but you should deal with that on the server side :)
15:46 < xk_id> oh
15:46 < xk_id> I see your point...
15:46 < xk_id> well what about unknown size of stuff? :P
15:46 < xk_id> still an argument to nest
15:46 < plato> http://bitcoincharts.com/charts/mtgoxUSD#igDailyztgOzm1g2zm2g25zvzcv now that is a sexy lookin chart
15:47 < spion_> that should be less of a problem. the real question is how many of those "tasks": do you think you can run in parallel
15:48 < spion_> and the nesting gets pretty bad after 3-4 calls, right?
15:48 < xk_id> spion_: in my case I could do all of them, because there's only 3, and stuff is always small. Is there any reason against nesting?
15:48 < xk_id> heh, visually, yes.
15:49 < spion_> 3 seems fine.
15:49 < spion_> imho, of course.
15:49 < xk_id> It's more elegant to make them parallel, I agree
15:49 < spion_> of course, you have async.series too :)
15:51 < xk_id> heh yes, but they tasks don't depend on each other. Only what I do next depends on the tasks being completed. So I can just put that in the callback of the .parallel
15:52 < xk_id> :)
15:59 < TechnoCat> if i have some html pages i need to generate, would grunt do that for me before spinning up a node app?
16:00 < Kakera> given two strings, 'Jan 29' and '5:12pm', what's the simplest way to get a corresponding Date object?
16:00 < Kakera> I don't mind pulling a library for this
16:01 < holzp> moment.js is good for date manipulation
16:01 < crabtree> oo
16:01 < crabtree> moment.js looks really cool holzp
16:01 < TechnoCat> i love moment
16:02 < holzp> it is cool! 
16:02 < crabtree> does it do like
16:02 < crabtree> "Posted 2 days, 3 hours ago"
16:02 < crabtree> or something
16:02 < dAnjou> hey, i'm coming from python which as you may know has batteries included. is there something for JS too? maybe packaged for npm?
16:02 < holzp> yep
16:02 < crabtree> that's great holzp
16:02 < crabtree> i will use it
16:02 < crabtree> thanks
16:02 < holzp> thats one of its big claims to fame
16:02 < TechnoCat> relative dates
16:02 < crabtree> that's something i cbf writing myself
16:02 < holzp> ugh I have
16:02 < holzp> before I knew about moment
16:02 < crabtree> dAnjou: hoarders.js
16:02 < crabtree> https://github.com/jesusabdullah/hoarders
16:03 < dAnjou> i miss things like my_dict.update(other_dict)
16:03 < crabtree> :)
16:03 < crabtree> oh
16:03 < dAnjou> thanks, i'll have a look
16:03 < crabtree> no i was kidding about that one :P
16:03 < crabtree> underscore.js may have some things
16:03 < Kakera> depends on which batteries you need
16:03 < crabtree> dAnjou: what did .update do?
16:03 < crabtree> extend?
16:04 < crabtree> i haven't used python much
16:04 < dAnjou> crabtree: it populates a dict (aka map, ~= json object) with the contents of another dict
16:05 < niix> hey there dAnjou, I remember you from #flask
16:05 < dAnjou> #pocoo, yes :)
16:05 < niix> dAnjou: exploring the node world?
16:05 < crabtree> flask as in the python library?
16:05 < dAnjou> niix: yeah
16:05 < dAnjou> crabtree: framework, yes
16:05 < crabtree> it looked pretty similar to express
16:05 < niix> crabtree: it's a framework
16:05 < crabtree> whateverrr
16:05 < crabtree> same thing
16:05 < dAnjou> crabtree: i use express
16:06 < niix> crabtree: except it has it's own API calls for db stuff
16:06 < dAnjou> crabtree: not really, werkzeug is the library
16:06 < crabtree> ah
16:06 < crabtree> i use sequelize with express
16:06 < niix> crabtree: haven't tried that yet
16:06 < niix> that it one thing I do miss from Django is the the db api
16:06 < niix> but mongoose is sweet
16:07 < crabtree> if you want to work with SQL then sequelize is great
16:07 < niix> crabtree: does it support mssql?
16:07 < crabtree> don't think so
16:07 < crabtree> right now it does postgres, mysql and sql lite
16:07 < niix> crabtree: I was using tedious previously for some mssql stuff
16:07 < niix> I had to deal with a legacy db :|
16:08 < crabtree> i'd like to use mongodb but i couldn't live without JOINs for some parts of the application
16:08 < niix> dAnjou: what kind of modules are you looking for?
16:09 < niix> I've found most anything I've been able to do in Django that there is an npm module for it
16:09 < crabtree> sequelize is a little young still
16:09 < crabtree> so are all of the ORMs for node though
16:10 < niix> I've been meaning to try https://github.com/Obvious/matador
16:10 < crabtree> meh
16:11 < niix> crabtree: didn't like it?
16:11 < crabtree> i don't really see the point of these frameworks/libraries that just combine other libraries for you
16:11 < MI6> joyent/libuv: Ben Noordhuis master * 40a9e11 : build: fix up dependency rules  * Auto-create build subdirectories.  * Ad (+3 more commits) - http://git.io/09-8Cw
16:11 < crabtree> i can accomplish MVC easily with express and sequelize 
16:11 < niix> crabtree: haha that's kind of true, it's essentially express with some other stuff added
16:11 < crabtree> yeah
16:11 < niix> using mustache for templating vs ejs or jade
16:11 < crabtree> i mean if i just use express, i have full ability to use whatever other libraries/templating engines i want
16:12 < niix> yep
16:12 < naquad> hi
16:12 < naquad> how do i get fd from new.Socket?
16:13 < crabtree> dunno
16:13 < niix> naquad: using socket.io?
16:13 < crabtree> django looks like too much
16:13 < crabtree> to me
16:13 < crabtree> flask looked a lot more appealing
16:13 < niix> crabtree: there is a lot
16:13 < crabtree> in python-land
16:13 < niix> Django prides itself it being batteries included
16:13 < niix> while flask is a lot more minimal
16:14 < andrew12> what's the simplest database that i can use? ideally something that stores in a file
16:14 < andrew12> but has a nice interface in node
16:14 < Andyland> sqlite
16:14 < Andyland> andrew12: or localStorage if it's only for the client
16:14 < holzp> damn, I bet on Prototype.js a few years ago and now its biting me in the ass
16:15 < andrew12> it's a server
16:15 < geNAZt> sqlite
16:15 < andrew12> is there anything like the sequel ruby gem for node
16:18 < dAnjou> niix: nothing web specific yet, just the batteries that are included in python but apparently not in JS
16:18 < dAnjou> niix: all the sweet built-in stuff
16:18 < MI6> joyent/node: Ben Noordhuis master * 9bd9c54 : readline: make \r\n emit one 'line' event  Make lines ending \r\n emit on - http://git.io/m7xPxw
16:21 < niix> dAnjou: yeah unfortunately JS doesn't have as many sweet built-in things but there are libs for them I'm sure :P
16:21 < dAnjou> crabtree: underscore.js looks really good
16:22 < niix> dAnjou: yeah underscore or backbone may have those things you're looking for
16:24 < holzp> underscore is great, fits in so many places
16:27 < TechnoCat> is the underscorejs.org site down?
16:29 < zomg> TechnoCat: so it would seem
16:29 < plato> win 30
16:30 < dAnjou> TechnoCat: http://isup.me/underscorejs.org
16:31 < Industrial> Can anyone else get browserify installed atm?
16:32 < MI6> joyent/node: bnoordhuis created branch rename-os-tmpdir - http://git.io/qdCq5A
16:33 < Industrial> nvm it was me
16:36 < Industrial> can't seem to get browserify -g installed, but locally it works... https://gist.github.com/66eb44c0a3699318988f/6806b39a402d9c1e50b4aa156c9c9fa3a4a62ee9
16:44 < xk_id> what's the best way to halt the activity of a node app after a given time has passed and a certain deliverable hasn't been achieved?
16:44 < geNAZt> u mean like ping timeouts ?
16:45 < xk_id> just a setTimeout with a callback(error)?
16:45 < xk_id> perhaps, yes. If I try to connect to a server, and the server doesn't respond after 10 seconds, how can I make the app do something else instead of waiting?
16:46 < geNAZt> timeouts
16:46 < xk_id> so put a callback(error) inside a setTimeout, right?
16:46 < geNAZt> yes
16:46 < geNAZt> but if the connect is a success you need to clear that timeout
16:47 < xk_id> ..good point
16:49 < xk_id> geNAZt: oh, easy. I just put the callback inside an "if" :)
16:54 < naquad> can i somehow make dynamically allocable Buffer?
17:12 < Industrial> so I did a npm install browserify; ./node_modules/.bin/browserify -w -o build/javascript/bundle.js src/app.js;#has just 1 console.log in it
17:13 < Industrial> but I'm not seeing any console output or files being written
17:14 < Industrial> got it
17:21 < isaacbw> naquad, what are you trying to accomplish?
17:22 < naquad> isaacbw, i need to dynamically build a binary structure
17:23 < isaacbw> naquad, do you know the final size of the buffer before you start building it?
17:23 < naquad> isaacbw, no
17:23 < naquad> thats the problem
17:24 < isaacbw> then you will end up having to combine buffers, which v8 is pretty good at doing
17:24 < isaacbw> or you can use something like substack's bufferlist module: https://github.com/substack/node-bufferlist
17:24 < isaacbw> if your plan is to write it to a file
17:25 < isaacbw> or https://github.com/substack/node-buffers
17:25 < nodenoob> Hello, if I want to create a node js app with Authentication and Session support which framework/module would you recommend?
17:25 < isaacbw> I meant to link the second one
17:25 < isaacbw> nodenoob, there are lots of choices. Express has built-in session management
17:25 < isaacbw> is it a server-side rendered application?
17:25 < nodenoob> not server side rendered
17:25 < nodenoob> all rendered on the client
17:26 < isaacbw> oh
17:26 < nodenoob> it communicates through REST and Socket IO
17:26 < isaacbw> then you probably don't want to use express
17:26 < isaacbw> session management is pretty easy to set up
17:26 < naquad> isaacbw, hm, thanks. going take my chances with bufferlist
17:26 < isaacbw> are you using a routing module?
17:26 < nodenoob> restify
17:26 < isaacbw> naquad, use the second one I linked
17:26 < gildean> express works fine in conjunction with socket.io
17:27 < nodenoob> gildean im currently using restify since my server didnt need to do server side rendering
17:27 < isaacbw> http://dl.dropbox.com/u/10832827/web-session-management.pdf
17:27 < isaacbw> express is really only useful if you're going to render pages with it
17:28 < gildean> you can use express without rendering anything as well, just send json or anything really
17:28 < isaacbw> http://en.wikipedia.org/wiki/Session_%28computer_science%29#Web_server_session_management
17:28 < nodenoob> isaacbw is that doc on authenticated session management?
17:28 < isaacbw> you can gildean, but it's overkill
17:28 < isaacbw> and will likely complicate things
17:28 < gildean> isaacbw: it's usefuly because the middleware design, and a good router
17:28 < isaacbw> nodenoob, you just need to check against a database of userIDs to passwords
17:29 < gildean> imo it's quite light still and pretty easy to use
17:29 < nodenoob> gildean restify is pretty good for routing
17:29 < isaacbw> that's what's great about node and npm is you have lots of options available
17:29 < nodenoob> restify is really easy to use and slim, almost TOO slim!
17:29 < isaacbw> nodenoob, just make sure to store password hashes and never raw passwords
17:29 < nodenoob> isaacbw gildean yea there are so many options i want to make sure im picking the one that makes sense haha
17:29 < isaacbw> whichever one you like best
17:29 < isaacbw> I use restify
17:29 < isaacbw> I render pages with angular and have a REST api with restify for data
17:30 < gildean> i'm not denying that restify is pretty good, but i'm just saying express is useful as a base for a web-app even without server-side rendeting
17:30 < nodenoob> isaacbw what module would you recommend in conjunction with restify to do authentication and session management? passport?
17:30 < gildean> *rendering even
17:30 < isaacbw> I don't know. I would recommend doing it yourself so you know how it works
17:30 < isaacbw> it isn't very involved
17:30 < isaacbw> and you don't want to run into a security bug and have no idea what's wrong
17:31 < isaacbw> that's the kind of stuff you want air tight
17:31 < isaacbw> passport looks like it's only for express as well
17:32 < isaacbw> it's a swiss army knife of authentication
17:32 < isaacbw> can of worms
17:33 < isaacbw> nodenoob, do you understand the theory behind authentication and session management?
17:33 < nodenoob> yes isaacbw but implmenting it myself will probably be a good refreshing and provide more indepth experience
17:34 < isaacbw> so you're agreeing with me?
17:34 < nodenoob> yes isaacbw, i just wanted to make sure there wasnt a recommended solution with node js specifically
17:34 < nodenoob> i prefer to not assume
17:34 < isaacbw> oh, okay
17:34 < isaacbw> cool
17:34 < isaacbw> yea you'll have a lot more fun if you do it yourself
17:35 < nodenoob> isaacbw do you have any recommendation of examples of how I should implement authentication and session management? Like an example of someone that has done it without using a module
17:35 < nodenoob> Just so I acn use it as a reference point
17:35 < nodenoob> in node js
17:35 < erichocean> anyone know if Node.js/v8 can be compiled with clang/AddressSanitizer on Linux?
17:36 < isaacbw> probably, but why would you want to
17:37 < erichocean> security
17:37 < nodenoob> isaacbw because I am a java guy, also nice to have a reference point with an unfamiliar language :D
17:37 < isaacbw> what are you worried about erichocean 
17:37 < nodenoob> isaacbw because I am a java guy, also nice to have a reference point with an unfamiliar language :D
17:37 < erichocean> the usual, buffer overflows in the C++ code
17:38 < erichocean> Both Node.js and some C++ extensions
17:38 < isaacbw> nodenoob, you could try looking through the code for the express session middleware
17:39 < nodenoob> isaacbw does it make sense to authenticate the user, create their session obj, and then when the new socket io connection comes in to store that socket within that users session obj for reference?
17:40 < isaacbw> nodenoob, when you say create their session object, what do you mean
17:40 < nodenoob> then if i have incoming data i want to push over the socket io, i grab that users session and then grab out their socket and push it
17:40 < nodenoob> isaacbw i'd assume i'd have a list of session objects stored internally on the server side
17:40 < isaacbw> erichocean, what kind of thing are you working on?
17:40 < erichocean> it's a project similar to Cassandra and Google Spanner
17:41 < isaacbw> native modules might be a concern, but v8 is very heavily supported by a large company with a lot at stake
17:41 < isaacbw> are you on the v8 mailing list?
17:41 < erichocean> I'm on the AUTHORS list
17:41 < isaacbw> oh, okay
17:41 < erichocean> I know v8 can be compiled, just not sure about Node
17:41 < erichocean> anyone, I can figure it out on my own – just thought I'd ask :)
17:41 < isaacbw> I'm sure you could get it to work
17:42 < isaacbw> but no, I haven't tried
17:42 < isaacbw> sorry :(
17:42 < mermeladas> is there a way to make multiple http request in a loop without having the responses mix up?
17:43 < isaacbw> that's a strange question mermeladas 
17:43 < mermeladas> why so?
17:43 < isaacbw> node is async, so that isn't a concern
17:43 < manacit> what isaacbw 
17:43 < manacit> said
17:44 < mermeladas> somehow that's still a problem though
17:44 < nodenoob> isaacbw on the server side I need a centralized way to get reference to all the users connected to the system currently, I was thinking of having a centralized list of session objects. In that session obj I could store their current data that is relevant including their socket io socket.  That way if I get new data I want to publish over that users socket I grab their session and then grab their socket and push it
17:44 < isaacbw> you mean you're running into a problem mermeladas?
17:45 < isaacbw> nodenoob, you could do that for development, but a production setup will usually put session info in an external store like redis or memcached
17:45 < isaacbw> something outside of v8, at least
17:45 < manacit> yeah, that's exactly what redis is for
17:45 < nodenoob> ah, good idea isaacbw, but in that case where would I store the socket obj? Would I just maintain a map of session Id to socket basically?
17:46 < nodenoob> Stupid questions but I want to make sure there isnt smoethign im missing with node
17:46 < isaacbw> how many sockets will you have open?
17:46 < isaacbw> one for every connected client?
17:46 < mermeladas> yes, isaacbw. I make a request and parse the json that comes back. With the loop requests the json ends up scrambled.
17:46 < nodenoob> isaacbw yes
17:46 < isaacbw> mermeladas, try sharing a paste of the offending code
17:47 < mermeladas> sure
17:48 < isaacbw> nodenoob, you will likely need to do something with child processes
17:48 < nodenoob> whats that isaacbw
17:50 < isaacbw> nodenoob, starting new instances of node to spread out the workload
17:50 < nodenoob> yea isaacbw but you agree that i should prolly load balance the users across multiple processes but still maintain an internal mapping of session id to socket obj
17:51 < isaacbw> yes, you will need that 
17:51 < isaacbw> hmm, this is interesting
17:51 < xk_id> is there a way to stop a function?
17:52 < isaacbw> xk_id, return?
17:52 < manacit> return; 
17:52 < xk_id> isaacbw: doesn't seem to do it.. instructions continue to execute. u sure?
17:52 < xk_id> okay
17:52 < isaacbw> callbacks can still get fired
17:52 < manacit> with async the callback might have already been registered
17:52 < manacit> that won't stop them
17:52 < isaacbw> maybe get a book on javascript
17:53 < isaacbw> nodenoob, for now you can forget about an external session store and multiple processes
17:53 < mermeladas> http://pastebin.com/jYT8Xpz1 here's some code with the multiple http request in a loop
17:53 < isaacbw> just do what you were originally thinking and have an object that maps session IDs to user id and socket
17:53 < mermeladas> (yes, it's horrible I'm aware)
17:53 < nodenoob> yea isaacbw, just maintani an internal list of session objs and an internal map of session id to socket
17:53 < isaacbw> yea
17:54 < isaacbw> well, that should all be one map
17:54 < xk_id> how can I stop the callbacks from executing?..
17:54 < manacit> by.. not calling them
17:54 < isaacbw> you don't
17:54 < xk_id> ah, okay. I'll put them inside an "if"
17:55 < isaacbw> you can have a value in the closure like ignoreCallback = true and then in each of the callbacks check that value
17:55 < manacit> ^^
17:56 < xk_id> yep
17:56 < nodenoob> isaacbw all one map? like session_id -> session obj where the session obj contains session info including the socket io obj?
17:57 < isaacbw> yea
17:58 < isaacbw> mermeladas, so what is the behavior
17:58 < isaacbw> the outputs are in the wrong order?
17:59 < mermeladas> I think that data += chunk gets a chunk from a different response
17:59 < mermeladas> is that possible?
18:00 < isaacbw> where do you declare data?
18:00 < mermeladas> because if I output the response on.end to say a file it looks like - response1datadatada[cut prematurely]
18:00 < Ramone> hey all? anyone know if there's a mongo db connection timeout setting?  currently in my mongo db calls from a web request, if mongo is down the requests just sit open and do nothing
18:00 < mermeladas> it's a global var
18:00 < isaacbw> yea, that's why everything is getting fucked up then
18:00 < mermeladas> yes
18:00 < mermeladas> I see it now
18:00 < isaacbw> :P
18:00 < mermeladas> i don't clear it after every response ends
18:01 < mermeladas> thanks isaacbw :D
18:01 < isaacbw> why is it global in the first place?
18:01 < isaacbw> dont' do that
18:01 < mermeladas> because I don't know how to code
18:01 < isaacbw> because it's async your responses might get mixed up
18:01 < CoverSlide> just say no to global variables
18:01 < isaacbw> just put var data = ""; at the beginning of googlePrices()
18:01 < CoverSlide> friends don't let friends use global variables
18:01 < isaacbw> heh
18:02 < CoverSlide> also, 'use strict' at the top of your files
18:02 < CoverSlide> so you don't globalify something by accident
18:02 < CoverSlide> (which does happen sometimes, even to the best of us)
18:03 < mermeladas> CoverSlide: i wouldn't write a single working script with strict :D
18:06 < mermeladas> oh my gawd it works
18:06 < isaacbw> lol
18:06 < geNAZt> mermeladas: even if the ide says warning and error in strict mode it does not say: this will never work
18:07 < isaacbw> any emacs guys here? do you use anything besides js2-mode?
18:07 < mermeladas> sublime text all the way baby
18:07 < CoverSlide> i heard there's a js3-mode in the works
18:08 < CoverSlide> but i'm not an emacs guy
18:08 < isaacbw> lol
18:08 < CoverSlide> https://github.com/thomblake/js3-mode
18:08 < isaacbw> the regular js2-mode is kind of fucked up but this fork is really good: https://github.com/mooz/js2-mode
18:08 < CoverSlide> If i did use emacs I would use it, since I do tend to use npm style
18:08 < therealkoopa> What kind of stream (or perhaps) module would provide me with the ability to take a stdout (readable) stream from GM and pipe it to another stream that is a readable stream.
18:09 < holzp> I use the built in javascript mode in 24+
18:09 < isaacbw> GM?
18:09 < CoverSlide> therealkoopa: umm, child_process ?
18:09 < therealkoopa> isaacbw: graphics magick module
18:09 < therealkoopa> Because of the way GM.stream function works, it doesn't return the stream, but you get it in a callback, and I want my calling code to have access to the result from the gm call. I'll gist this.
18:10 < isaacbw> if you open it with fork, you have access to its stdout
18:10 < isaacbw> and you can just pipe() that anywhere
18:10 < holzp> isaacbw, have you tried jade-mode?
18:10 < isaacbw> I don't use jade
18:10 < isaacbw> oh wait
18:10 < isaacbw> I have used jade-mode
18:10 < isaacbw> it works pretty well
18:10 < holzp> its an offshoot of sws-mode which is also not bad
18:10 < isaacbw> the tabbing is funky, must whitespace significant modes are always funky
18:11 < therealkoopa> https://gist.github.com/4666257
18:11 < holzp> right, which is why I was suprised at jade-mode being reasonably good
18:12 < therealkoopa> I want to be able call my thumb function and have it return a readable stream, which I can then pipe to some other location. 
18:13 < xk_id> why do I get "a" displayed? https://gist.github.com/4666263
18:13 < therealkoopa> I could pass in a callback to thumb, which is called from the graphics magic stream, just passing it the stdout stream, but I'm curious if I can do a simple stdout.pipe(foo) and foo is returned originally from this thumb function
18:15 < isaacbw> I just accidentally ordered someone to open a door for me
18:16 < isaacbw> I thought he was going through and I was like "go ahead" and he opened the door and let me through
18:16 < isaacbw> and then went in the other direction
18:16 < xk_id> haha
18:17 < cloudbender> before is a dangling participle
18:17 < cloudbender> oh nevermind
18:18 < cloudbender> isaacbw that's an old jedi mind trick
18:18 < CoverSlide> xk_id: because f gets called, and the setTimeout only returns from the callback, not from main
18:20 < Industrial> Is it possible to send a req/res pair to another server and end the response via res.end() there?
18:23 < cloudbender> ok they are saying this is experimental ...
18:23 < isaacbw> Industrial, what are you trying to accomplish
18:23 < cloudbender> https://github.com/couchbase/couchnode
18:24 < Industrial> reverse proxy
18:24 < cloudbender> I would like it if the node team could push the issue a bit
18:25 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:26 < CoverSlide> Industrial: have you looked at node-http-proxy
18:26 < Industrial> well, I have several node sites on the same cloud vps, and I want to manage (without an nginx or the like) an event based or rpc proxy that routes incoming requests to the correct site. so as a website server comes online, it can tell the router and the router can start redirecting to that port
18:26 < Industrial> CoverSlide, not the inside
18:28 < xk_id> CoverSlide: how do I make that the return of the main function? ;P
18:28 < isaacbw> can't node http proxy be used as a library too?
18:28 < isaacbw> yea it totally can
18:29 < CoverSlide> xk_id: you don't
18:29 < CoverSlide> xk_id: you stop the http request if you don't want it to go through
18:30 < isaacbw> xk_id, read about closures
18:30 < CoverSlide> which you can do with the settimeout if you expose the http request to the same scope
18:31 < Octagonking> when I tell nodejs to run something, why does it keep saying '...'
18:31 < isaacbw> in the repl?
18:31 < Octagonking> yes
18:32 < isaacbw> you aren't completing the expression
18:32 < isaacbw> what are you typing in
18:32 < isaacbw> or your syntax is invalid
18:32 < Octagonking> In: 'node boxnode.js'
18:32 < Octagonking> Out: '...'
18:32 < isaacbw> the repl isn't very smart. If it can't evaluate what you put in, it just tells you to try typing more stuff in
18:33 < isaacbw> that's not javascript
18:33 < isaacbw> you run node in a shell
18:33 < isaacbw> you can only run javascript in the repl
18:33 < s3shs> Can anybody recommend a good source for queuing up node requests?
18:33 < CoverSlide> async.queue?
18:33 < isaacbw> s3shs, what are you trying to accomplish
18:33 < Octagonking> I'm trying to get it to run a javascript file
18:33 < isaacbw> yea, the internals queue things up already
18:34 < s3shs> I need to make sure my SQL queries from multiple clients don't overlap.
18:34 < s3shs> Oh, async queue is built in?
18:34 < CoverSlide> no
18:34 < azylman> Overlap how?
18:34 < CoverSlide> async#queue from the async module
18:34 < s3shs> In the middle of a transaction with multiple queries.
18:34 < CoverSlide> you let the database handle transactions
18:34 < azylman> Yeah
18:35 < azylman> Sounds like something you should be letting the database handle
18:35 < isaacbw> Octagonking, do you mean to be running it in the interactive console, or do you just want to normally run a node program?
18:35 < azylman> By grouping multiple queries together as a transaction
18:35 < azylman> http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-transactions.html
18:35 < Octagonking> I'd like to see the stdout it produces, isaacbw
18:35 < CoverSlide> or else you'd have to figure out some type of locking mechanism, which would be a world of pain
18:35 < isaacbw> oh, so you want the responses to only start after a previous one is done
18:36 < isaacbw> that could cause some serious performance issues
18:36 < isaacbw> gyi
18:36 < isaacbw> *fyi
18:36 < isaacbw> Octagonking, you can just do that by running the program from the shell
18:36 < s3shs> Yes, isaacbw.
18:36 < isaacbw> node boxnode.js
18:36 < brettlangdon> Octagonking, there is a way to play a javascript file into the repl, using the .load command: http://nodejs.org/api/repl.html#repl_repl_features
18:36 < isaacbw> no need to just type in 'node'
18:36 < Octagonking> that's what I did, issaacbw
18:36 < isaacbw> no, you started the shell first
18:36 < isaacbw> er, repl
18:36 < Octagonking> oh
18:36 < Octagonking> we need shell
18:37 < Octagonking> not crasy repl
18:37 < isaacbw>  what
18:37 < isaacbw> yea, press ctrl-c to get out of it
18:37 < isaacbw> or ctrl d
18:37 < s3shs> I'm using the Node-SQL 0.9.x branch.  I'll check if the 2.0.0a branch supports transactions.  Is the 2.0.0 branch what is best these days?
18:39 < CoverSlide> umm is this for MSSQL?
18:39 < CoverSlide> I think the vetted sql driver for node is msnodesql
18:40 < isaacbw> mssql?
18:40 < isaacbw> insanity
18:40 < isaacbw> be cool and use a no-sql database
18:40 < CoverSlide> not if you're on azure
18:40 < isaacbw> azure 
18:40 < isaacbw> insanity
18:40 < s3shs> I was told this is the best one so far: https://github.com/felixge/node-mysql
18:41 < CoverSlide> oh you're using mysql
18:41 < s3shs> But I'm on the 0.9.x branch, not the 2.0 branch.
18:41 < torvalamo> just checked out node-sql, and the readme says "Let's be honest - hand generating SQL is no fun", and i completely disagree :P
18:41 < torvalamo> just thought i'd let you know
18:41 < CoverSlide> well that's different
18:41 < isaacbw> the ones with the simplest names are either the best, or haven't been touched for two years
18:41 < CoverSlide> npm install mysql@2.0.0-alpha5 << "Despite the alpha tag, this is the recommended version for new applications."
18:41 < s3shs> This one?  https://github.com/brianc/node-sql
18:41 < xk_id_> CoverSlide: I can't figure it out...
18:42 < CoverSlide> no, that's for generating sql statements
18:42 < xk_id_> CoverSlide: do you mean to end the httprequest from inside the setTimeout?
18:42 < CoverSlide> s3shs: so you're using mysql, yes? then use the mysql module, that's fine
18:42 < torvalamo> node-sql looks like a LINQ-ish approach
18:42 < s3shs> Yeah, I don't need that.  I'm quite content generating my own SQL statements.  That library looks like another language.  :-)
18:42 < CoverSlide> s3shs: but he does recommend to use the 2.0.0-alpha5 branch
18:42 < isaacbw> but yea, that's the reason transactions exist
18:42 < isaacbw> don't queue http requests
18:42 < isaacbw> yuck
18:43 < CoverSlide> although i'm not sure his module supports transactions. looks like it's on his tODO
18:43 < torvalamo> apparently linq is lauded among the .netishists (even supposed to be quite fast, stackoverflow uses it), but i could never see the charm...
18:43 < isaacbw> you need to find a module with transactions, or be cool and use mongodb
18:44 < s3shs> CoverSlide, yes.  I was just wondering if everybody else does too.  :-)
18:44 < brianc> s3shs: you talkin' jive?!
18:44 < CoverSlide> I've used them, and yeah, LINQ is like the holy grail of MS enthusiasts
18:44 < s3shs> brianc, heh.
18:44 < CoverSlide> but honestly they aren't that special
18:44 < CoverSlide> the one thing is that they are magically asynchronous too
18:45 < brianc> torvalamo: it's not really linq-ish.  Just a tiny set of methods to build up queries.  Sometimes doing 'em by hand is all you need.
18:45 < torvalamo> every orm ever has started trying to do what linq does, but linq was the first to really pull it off, for some reason.
18:46 < brianc> you mean LINQ to SQL?
18:46 < torvalamo> yeah
18:46 < brianc> you mean the integrated query syntax or the extension method form?
18:46 < brianc>  I like LINQ to objects. LINQ to SQL blows & isn't supported anymore by ol' microsoft
18:46 < torvalamo> user.select(user.star()).from(user)
18:46 < torvalamo> that
18:46 < isaacbw> you could do pseudo-transactions at the application level
18:46 < isaacbw> queue up queries
18:47 < brianc> yeah I suppose it's a bit linq-esqe. 
18:47 < torvalamo> bit?
18:47 < torvalamo> :P
18:47 < s3shs> engine=innodb, so yes, I guess I can rely on the DB to support atomic transactions.  No need to queue.
18:47 < CoverSlide> except LINQ isn't like an ORM, it's more like a SQL-like DSL for dealing with objects, sometimes XML, sometimes generics
18:47 < torvalamo> yes, but i said every orm wanted to do what linq suddenly figured out
18:47 < torvalamo> but failed obviously
18:47 < brianc> torvalamo: node-sql only helps build sql statements though. it doesn't dispatch them or deal with objects at all
18:47 < crabtree> sequelizeee
18:48 < torvalamo> aha
18:48 < brianc> torvalamo: it doesn't even mess with your database at all. doesn't even have a concept of your database. it's just a string builder w/ more sql-related methods on it to give somewhat readable query building instead of dealing w/ multi-line strings in javascript
18:48 < torvalamo> so it's not a layer between your app and the db? it's just something else?
18:48 < Octagonking> How do I allow the person who is running the js file to enter a command that is usually prefixed with Client. (I am using a library called irc)
18:48 < torvalamo> i see
18:48 < torvalamo> well that could be good too
18:49 < brianc> its basiaclly like this ["SELECT * FROM users WHERE name = $1"].join('')
18:49 < brianc> just builds strings & gives you back parameters
18:49 < s3shs> So do I get atomic transctions for free with engine=innodb, or do I have to add some keyword somewhere to my table/db/queries?
18:49 < torvalamo> i want a python db api for node
18:50 < brianc> though you do have to declare your tables so it has some objects to go off of, they don't really mapt o your database
18:50 < Ramone> hey all? anyone know if there's a mongo db connection timeout setting?  currently in my mongo db calls from a web request, if mongo is down the requests just sit open and do nothing for a whole minute
18:50 < brianc> torvalamo: https://github.com/1602/jugglingdb
18:50 < torvalamo> s3shs: yes to the first and no to the second
18:51 < torvalamo> you don't have to specify engine anymore either
18:51 < s3shs> torvalamo, thank you!
18:51 < torvalamo> innodb is the default since 5.5 i think
18:51 < Octagonking> -
18:51 < Octagonking> How do I allow the person who is running the js file to enter a command that is usually prefixed with Client. (I am using a library called irc)
18:51 < torvalamo> myisam was basically sqlite with more data types, so not very useful for integrity
18:52 < Octagonking> How do I allow the person who is running the js file to enter a command that is usually prefixed with Client. (I am using a library called irc)
18:53 < CoverSlide> what?
18:53 < torvalamo> Octagonking: we can read
18:53 < torvalamo> i see a sentence, but i don't understand what you mean
18:53 < manacit> lol
18:54 < Octagonking> I'd like to be able to let the person whoo is running the js file to enter a JS command
18:54 < isaacbw> what's a js command
18:54 < torvalamo> is this something that as to do with the irc library?
18:54 < torvalamo> has*
18:54 < manacit> so like, command line options?
18:54 < Octagonking> yes
18:54 < manacit> https://github.com/substack/node-optimist
18:54 < Octagonking> basically, interactivity
18:55 < isaacbw> that's non-trivial
18:55 < isaacbw> you would have to hack the irc module
18:55 < brettlangdon> Octagonking: http://nodejs.org/api/repl.html
18:55 < xk_id_> is there a way to interrupt the execution of a function when a timeout occurs? 
18:55 < CoverSlide> xk_id_: no
18:55 < CoverSlide> xk_id_: you have to interrupt the stream
18:55 < torvalamo> what timeout
18:56 < xk_id_> But there's more inside the function than the stream.
18:56 < torvalamo> a setTimeout timeout? or the socket timeout?
18:56 < xk_id_> torvalamo: setTimeout
18:56 < torvalamo> no, that is queued to be executed after the current tick
18:56 < torvalamo> even if that tick takes a minute
18:57 < torvalamo> which it rarely does, unless you're syncing something like a hard drive from 1992
18:57 < CoverSlide> a function will always run to its entirety, or until it hits a return in its own scope. setTimeout uses a callback which has a different scope than its caller. returning from there does nothing, because it only returns from the callback, not the main function
18:57 < manacit> ohh I see, you want to give command line access to a running bot
18:57 < xk_id_> CoverSlide: I understood that perfectly!
18:58 < xk_id_> and am actually a bit embarassed for making that mistake :P
18:58 < torvalamo> callback scope is a bitch
18:58 < torvalamo> but there are ways to keep the bitch on a leash
18:59 < xk_id_> CoverSlide: I'm trying with httprequest.abort() inside the setTimeout
19:00 < Octagonking> REPL doesn't work with my script, it can't find the IRC model
19:00 < torvalamo> either use var self = this in the scope where the callback is set, and refer to this as self inside the callback. or make a wrapper function which does .call, and set the appropriate scope there
19:00 < draginx> there was an open source project build in node that could make keybindings to any action that ud want.. any ideas on what the name was?
19:01 < torvalamo> setTimeout(function() { httprequest.abort() }) should work
19:01 < torvalamo> if set in the correct scope
19:01 < torvalamo> that would be the wrapper function approach
19:01 < Octagonking> uh
19:02 < Octagonking> -
19:02 < Octagonking> REPL doesn't work with my script, it can't find the IRC model
19:02 < xk_id_> yep, seems to work..
19:03 < Octagonking> isn't there a command that lets you input into the shell
19:05 < CoverSlide> what shell? the REPL?
19:05 < Octagonking> no
19:05 < Octagonking> the other shell
19:05 < CoverSlide> you mean stdin?
19:05 < Octagonking> the commandline shell
19:05 < CoverSlide> you want to read stuff from stdin?
19:06 < CoverSlide> or command line arguments
19:06 < Octagonking> no
19:06 < CoverSlide> perhaps you need to understand the proper terms for things
19:06 < crabtree>  lol
19:06 < crabtree> no idea what he could be talking about
19:06 < tprice> how do i limit sub documents when they are an array in mongoose?
19:06 < CoverSlide> i just listed the 3 possible places he could be recieving input from
19:07 < crabtree> yeah lol
19:07 < crabtree> if it isn't any of those i have no idea
19:07 < Octagonking> I want to let the javascript code runner to input something into the command-line shell, and the script can read and act upon the input
19:07 < Octagonking> basically like stdin
19:07 < CoverSlide> so stdin?
19:07 < CoverSlide> ok
19:07 < Octagonking> yep
19:07 < CoverSlide> process.stdin.resume()
19:07 < crabtree> (01:03:02 PM) CoverSlide: you want to read stuff from stdin? (01:03:18 PM) Octagonking: no
19:07 < CoverSlide> process.stdin.on('data' ..
19:08 < crabtree> :P
19:08 < isaacbw> the shell shell
19:08 < isaacbw> CoverSlide, shell is a fine term
19:08 < isaacbw> bash, whatever
19:08 < isaacbw> shell shell
19:08 < Octagonking> what do you mean, CoverSlide
19:08 < isaacbw> system shell
19:08 < isaacbw> yea, be specific, say system shell
19:08 < crabtree> command argument line input shell
19:08 < isaacbw> terminal
19:08 < isaacbw> too
19:09 < isaacbw> butts butts butts butts
19:09 < ring3> is it possible to send a multipart via https on node?
19:09 < CoverSlide> Octagonking: http://nodejs.org/api/all.html#all_process_stdin
19:09 < isaacbw> sure ring3 
19:09 < CoverSlide> Octagonking: also if you want raw mode: http://nodejs.org/api/all.html#all_tty_setrawmode_mode
19:09 < ring3> isaacbw: https api has few methods than http
19:09 < ring3> i have not a https.request or  http.post
19:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:10 < ring3> isaacbw: any clue?
19:10 < isaacbw> I'm not sure what you're saying
19:10 < CoverSlide> typeof require('https').request == 'function'
19:10 < CoverSlide> i just typed that in my repl
19:11 < ring3> i want to upload a file via post multipart
19:11 < ring3> this is possible with http lib and multipart lib
19:11 < CoverSlide> in fact, there isn't a .post, or at least shouldn't be
19:11 < ring3> but https can't do this
19:11 < CoverSlide> you use .request {method:'POST'}
19:11 < CoverSlide> no reason it can't
19:11 < ring3> CoverSlide:  .request doesn't exists on https
19:12 < CoverSlide> except it does
19:12 < CoverSlide> what version are you using?
19:12 < isaacbw> https has events
19:12 < isaacbw> listen for events
19:12 < ring3> isaacbw: i'm doing a client not a server
19:12 < isaacbw> oh
19:13 < isaacbw> http://nodejs.org/api/https.html#https_https_request_options_callback
19:13 < CoverSlide> > typeof require('https').request
19:13 < CoverSlide> 'function'
19:13 < isaacbw> are you sane
19:13 < CoverSlide> is what i get in repl
19:13 < isaacbw> it's fine if you aren't, but we need to know
19:13 < CoverSlide> ring3: what's the output of node --version?
19:14 < isaacbw> and do you know what api docs are
19:14 < Octagonking> using stdin, how can you respond to the input
19:14 < ring3> i'm looking the online documentation
19:14 < isaacbw> Octagonking, are you asking how to get the input, or how to print to the console
19:14 < ring3> CoverSlide: v0.8.16
19:14 < Octagonking> how to get stdin
19:14 < CoverSlide> Octagonking: listen to data events from stdin, write to process.stdout
19:15 < CoverSlide> process.stdin.on('data'
19:15 < isaacbw> ring3 then you're looking at the wrong thing or you're terrible at reading docs
19:15 < Octagonking> CoverSlide: huh
19:15 < CoverSlide> read: http://nodejs.org/api/all.html#all_process_stdin
19:15 < isaacbw> don't forget to unpause stdin too
19:15 < CoverSlide> it gives you an example
19:15 < isaacbw> man, I need more caffeine. I'm getting grumpy
19:15 < ring3> thnx!!
19:16 < isaacbw> what?
19:16 < isaacbw> did me insulting you help you?
19:16 < CoverSlide> insults make the world a better place
19:18 < stefan41> anyone have experience using the passport-facebook strategy? specifically getting permissions to particular scopes?
19:18 < tprice> how do i limit sub docs in mongoose?
19:19 < jrajav> Sometimes all you need is a link and a shove
19:19 < jrajav> And you can do great things
19:19 < jrajav> - jrajav, 2013
19:19 < Octagonking> I'd like to write to STDOUT by putting a newline before the output, not after
19:20 < geNAZt> Octagonking: process.stdout.write("\n" + content);
19:20 < holzp> gah i gave up on facebook passport
19:20 < ring3> lol, insult?
19:20 < holzp> everyone else was easy facebook, a PITA
19:22 < Guest29355> Hello, I am writing an expressjs application that uses monoose to connect to mongodb. I am confused about connection management. Do I open a connection per http request or one on app start? do i need to close the connection ever and if yes where and when. I couldnt find any good articles about this
19:22 < geNAZt> Guest29355: you have a connectionpool in the app
19:22 < geNAZt> so no opening and closing per http request
19:23 < Guest29355> sure. so just open it in app.js on app start?
19:23 < isaacbw> yes
19:23 < xk_id_> is it problematic in any way if I never callback in the first function of an async.series (due to the httprequest timing out)?
19:24 < stefan41> holzp: sorry, what do you mean? did you end up getting it to work with another lib, or give up on fb altogether?
19:25 < holzp> gave up on facebook
19:25 < cloudbender> faceboogle ?
19:25 < holzp> they kept wanting so much of my personal infor to get a testing app key
19:25 < holzp> al kinds of crazy stuff
19:25 < cloudbender> I'm dropping it in the fall
19:25 < holzp> and then their stuff was buggy
19:25 < holzp> *and then* I figure if my project gets sucesfull they will block me anyway
19:26 < cloudbender> I'm tired of lurid ads arriving on the same page as pictures of my nieces.
19:26 < holzp> Facebook is starting to downtrend anyway, in their mad scramble to try and make money they are getting sketchier and sketchier
19:27 < cloudbender> And I'm tired of being told that pictures of my nieces are thier property.
19:27 < geNAZt> xk_id_: it should break the series
19:28 < isaacbw> cloudbender, hah, lurid ads
19:28 < xk_id_> geNAZt: that's okay. do I have to worry besides that?
19:28 < cloudbender> yup.
19:28 < isaacbw> "you're looking at girls, you must be looking for horny women in your area"
19:28 < geNAZt> xk_id_: i think its an easy memory leak trap
19:28 < cloudbender> right
19:28 < isaacbw> the face recognition stuff is terrifying
19:29 < cloudbender> well, some people never had a mother, or sisters.
19:29 < ring3> ring3: the second thing :)
19:29 < isaacbw> talking to yourself
19:30 < geNAZt> xk_id_: you should try to callback an timeout as error
19:32 < ring3> 20:13 < isaacbw> ring3 then you're looking at the wrong thing or you're terrible at reading docs
19:32 < ring3> i'm terrible explainer :)
19:32 < isaacbw> oh
19:33 < xk_id_> geNAZt: sorry, I can't understand
19:34 < geNAZt> you have a series
19:34 < holzp> Created my first GitHub project yesterday <-> made it a private repository
19:34 < geNAZt> if one fails
19:34 < geNAZt> callback an error
19:36 < xk_id_> geNAZt: I don't know in advance if it's going to fail. I'm just .abort() -ing an httprequest that occurs in the first function. 
19:37 < isaacbw> you sound like you're structuring your program in a really weird way
19:37 < geNAZt> xk_id_: you know if an timeout occurs or not ?
19:37 < xk_id_> what's weird about measuring a timeout outside of a async.series?
19:37 < xk_id_> geNAZt: I know that it might occur before the series completes. 
19:38 < xk_id_> and I need to stop the entire series if it does. 
19:38 < xk_id_> Ideally, yes, I would be able to callback an error from within the series...
19:38 < geNAZt> it would be the better way
19:38 < geNAZt> and then complete the series with an error
19:38 < xk_id_> But I don't know how to interrupt a series from outside it. 
19:39 < geNAZt> well from outside you cant
19:39 < xk_id_> because I'm not sure at which point the timeout will occur. it may occur in the first, or the second function, etc.
19:39 < xk_id_> Maybe I should just try some cumulative measurement of time... 
19:40 < geNAZt> i dont know what you do
19:40 < geNAZt> but i think you are doing it wrong oO
19:40 < holzp> perhaps a global semaphore, or in a function wrapper, telling each function to execure only if set?
19:40 < xk_id_> I just know a series might time out (at any point), in which case I need to stop the series.
19:41 < xk_id_> I don't know in advance in which of the functions the timeout will occur, etc. 
19:41 < holzp> stopping each element of the series is the same thing as stopping the seties?
19:41 < geNAZt> you have a requst running "along" the series ?
19:41 < xk_id_> no, I have separate requests
19:41 < geNAZt> in each function ?
19:42 < xk_id_> yes
19:42 < geNAZt> then you could fetch the error ?
19:42 < geNAZt> in each function ?
19:42 < solitude88> Is there a preferred database while working with node.js
19:42 < xk_id_>  2 nested requests in the first function, plus a series of requests in the second function. 
19:42 < CoverSlide> solitude88: use ALL the databases!
19:42 < CoverSlide> people seem to like mongo though
19:42 < solitude88> CoverSlide, so really its just prefernce?
19:42 < xk_id_> solitude88: there's async mysql clients, and redis is popular if you want NoSQL
19:43 < CoverSlide> yes
19:43 < erione> is there a method to check if a stream is paused or not?
19:43 < xk_id_> ok, mongo too
19:43 < solitude88> ok sweet news, thanks guys :)
19:43 < geNAZt> redis should better not be used as database
19:43 < geNAZt> as object storage okay but not as database
19:43 < CoverSlide> by now there's drivers for every database out there right now
19:43 < solitude88> why is that geNAZt
19:44 < geNAZt> redis is not safe
19:44 < xk_id_> geNAZt: but the timeout is a unitary process...
19:44 < geNAZt> it does not save your data on disk
19:44 < geNAZt> and so it can "loose" data on crash
19:44 < geNAZt> xk_id_: what ?
19:44 < blazes816> geNAZt: it's called volatile data and that doesn't mean it shouldn't be used as a db, but that it shouldn't be used as a db for non volatile data
19:45 < geNAZt> blazes816: object storage okay, for session and stuff
19:45 < geNAZt> but not for consistent data
19:45 < solitude88> Anyone have a source for node.js developers for hire?
19:45 < geNAZt> i would never use it
19:45 < blazes816> good, because that's not what's for
19:45 < isaacbw> redis is actually pretty safe now
19:46 < isaacbw> http://redis.io/topics/persistence
19:46 < geNAZt> The RDB persistence performs point-in-time snapshots of your dataset at specified intervals.
19:46 < geNAZt> and if the server crashes between them ? 
19:46 < isaacbw> that's one option
19:46 < isaacbw> the other, which is described, is to keep a log of operations
19:46 < azylman> "the AOF persistence logs every write operation received by the server, that will be played again at server startup, reconstructing the original dataset. Commands are logged using the same format as the Redis protocol itself, in an append-only fashion. Redis is able to rewrite the log on background when it gets too big."
19:47 < geNAZt> yes writ protocol
19:47 < isaacbw> if persistence is very important, a hard disk database will of course be preferable
19:47 < geNAZt> so it builds your dataset upon a log
19:47 < isaacbw> but redis can be made persistent if needed
19:48 < geNAZt> yes can but it is not designed for the persitent level of i.e. mongodb or mysql
19:48 < azylman> AOF persistence is persistent...
19:48 < azylman> If the server crashes or something you don't lose any data
19:48 < holzp> I usually hybridize my databases
19:49 < geNAZt> if it has logged the write to the log
19:49 < isaacbw> no of course not
19:49 < holzp> redis for often churning note super important data, and maria/mysql for more important stuff
19:49 < isaacbw> I'm just jumping into the conversation, so I don't know what the use case is
19:49 < holzp> both types of data seem to also lend themselves well structurally to sql/nosql along those lines
19:49 < isaacbw> but if you want data to survive a server restart, redis can do it
19:49 < geNAZt> redis has its cases but not as "database"
19:50 < isaacbw> data store is a better term
19:50 < azylman> Obviously you shouldn't be ussing redis as a database, but that's because it's a key-value store
19:50 < geNAZt> yes
19:50 < holzp> ok "things that hold data in some sort of structure"
19:50 < azylman> Not because it's not persistent
19:50 < geNAZt> data store
19:50 < holzp> or database for short
19:50 < isaacbw> haha
19:50 < geNAZt> like memcached
19:50 < isaacbw> redis is a bit better at persistence than memcached
19:50 < geNAZt> yes
19:51 < isaacbw> memcached is really meant for data to expire
19:51 < geNAZt> but the concept of storing data is near the same
19:51 < isaacbw> yea, if you want data to persist across server restarts and it's in redis, you should take a step back and ask yourself if that's really the right place to be putting that data
19:52 < isaacbw> solitude88, are you looking to hire someone?
19:52 < solitude88> I am isaacbw
19:52 < isaacbw> where are you located?
19:52 < solitude88> I'm in Las Vegas
19:53 < isaacbw> well, there are lots of places you could use to find someone to hire
19:53 < isaacbw> http://jobs.nodejs.org/a/jobs/find-jobs
19:53 < isaacbw> http://news.ycombinator.com/jobs
19:53 < isaacbw> https://angel.co/talent
19:53 < xk_id_> geNAZt: this is what it looks like https://gist.github.com/4666263
19:53 < solitude88> sweet, thanks isaacbw
19:53 < azylman> You can only post to yc jobs if you're a yc company
19:53 < isaacbw> oh
19:54 < isaacbw> someone else link another site
19:54 < xk_id_> solitude88: http://careers.stackoverflow.com too...
19:54 < solitude88> nice thanks xk_id_
19:55 < azylman> https://jobs.github.com/
19:55 < geNAZt> xk_id_: so on a http timeout you would get an err object in the httprequest callback ?
19:56 < xk_id_> geNAZt: I don't think the httprequest throws any errors
19:56 < solitude88> thanks geNAZt
19:57 < geNAZt> well the request module has a error parameter in his callback
19:57 < snowinferno> Hi all, I'm looking for something to convert either JSON to XML or an object to XML using node. Are there any options that don't depend on libxmljs?
19:57 < xk_id_> geNAZt: but even so, if I'm already in the second function in the series, how will I know when to callback? the time elapsed would be cumulative
19:58 < xk_id_> geNAZt: wait.. scratch that
19:58 < xk_id_> oohhh
19:58 < geNAZt> xk_id_: you are in a series
19:58 < geNAZt> not in paralell
19:58 < xk_id_> I could just do it for each httprequest separately... if ANY single httprequest takes too long, then I stop
19:58 < xk_id_> not when overall the script took too long. 
19:58 < geNAZt> to tell async to move forward in the series you need to call the async callback
19:58 < xk_id_> I'm obviously too tired to think anymore..
19:59 < geNAZt> :D
19:59 < xk_id_> sorry, geNAZt. I think I figured it out. and thanks
19:59 < geNAZt> ja kein ding :D
19:59 < isaacbw> can connect be used with https?
20:00 < isaacbw> it would make sense, right?
20:01 < isaacbw> I'm doing it. You bastards can't stop me
20:01 < kschzti> give it a server ready with the cert, sure?
20:02 < geNAZt> https://github.com/senchalabs/connect/blob/master/lib/proto.js#L201
20:03 < isaacbw> cool
20:03 < isaacbw> thanks
20:03 < geNAZt> np
20:19 < squeakytoy> slow, I am converting my Java Google App Engine website to node.js
20:19 < squeakytoy> phuw
20:19 < geNAZt> why ?
20:19 < xk_id_> geNAZt: callingback with an error doesn't prevent from the rest of the function to keep running subsequent instructions.
20:20 < xk_id_> *callingback with an error early doesn't prevent the function to keep running subsequent instructions.
20:20 < geNAZt> then return after callback ?
20:20 < xk_id_> if that makes sense..
20:20 < xk_id_> I can't, I'm inside a setTimeout
20:20 < xk_id_> return would be Heaven
20:20 < geNAZt> callback => clearTimeout => return
20:20 < azylman> Passing an error to the callback of an async.series will prevent any subsequent functions you passed in from being called
20:21 < squeakytoy> geNAZt, why? why use NODE?
20:21 < squeakytoy> geNAZt, dude, its ODE
20:21 < squeakytoy> N*
20:21 < geNAZt> no why u have to move from java app engine ( which should be nice ) to nodejs
20:22 < isaacbw> open dynamics engine
20:22 < geNAZt> bacause app engine is too slow or what ?
20:22 < squeakytoy> nope, I just think node.js is the future
20:22 < isaacbw> because node is cool brah
20:22 < geNAZt> ah okay.....
20:22 < geNAZt> :D
20:22 < squeakytoy> i dont want to have my website on GAE or Java
20:22 < squeakytoy> when i can have both front- and back-end in JS
20:23 < squeakytoy> like a baus
20:23 < squeakytoy> Now, one night in bangkok
20:23 < squeakytoy> and the world is your oyster
20:23 < azylman> lol
20:24 < RLa> anyone got good overview of PL/I async features?
20:24 < RLa> i have been reading a book from 1973 and it mentions some async features, WAIT and EVENT keywords
20:24 < RLa> but no examples
20:25 < isaacbw> you can have both the frontend and backend in java
20:25 < isaacbw> if you use gwt
20:25 < RLa> why would you want java
20:25 < isaacbw> I'm addicted to caffeine
20:25 < geNAZt> RLa: java is more strict
20:25 < geNAZt> and most of secure software is built in it
20:25 < RLa> btw, i think PL/I's wait works similar to c# wait extension
20:26 < RLa> but the whole language is damn complex, way worse than c++
20:26 < isaacbw> wat no
20:26 < geNAZt> lol
20:26 < RLa> a book with 400 pages and no examples
20:26 < isaacbw> the standard library is awful
20:26 < isaacbw> at least hte api is
20:27 < isaacbw> but the language isn't too bad
20:27 < RLa> have you worked with pl/I?
20:27 < isaacbw> no
20:28 < isaacbw> it looks crazy though
20:29 < isaacbw> java suffered from forced backwards compatibility
20:29 < isaacbw> and stinted its own evolution
20:30 < crabtree> yes
20:30 < crabtree> i'm glad python is taking a more aggressive stance
20:30 < crabtree> in some areas
20:31 < isaacbw> though a lot of libraries are lagging behind python3
20:31 < isaacbw> but yea, you sometimes just have to say 'fuck it' and making breaking API changes
20:31 < crabtree> yes
20:31 < isaacbw> or at least don't force new features to be compatible with old ones
20:31 < crabtree> i am all for that
20:31 < RLa> java suffers from oracle
20:32 < azylman> PL/I doesn't look any worse than assembly
20:33 < isaacbw> the acquisition of sun was a sad day
20:33 < isaacbw> we lost one of a rare breed of companies who actually cared about research
20:34 < isaacbw> oracle canceled everything that wasn't clearly bringing in money
20:34 < isaacbw> and laid off a lot of people who were doing good work
20:39 < niix> anyone ever play this? http://en.wikipedia.org/wiki/Syndicate_(series)
20:39 < CoverSlide> yup. google could have bought them too. they paid twice as much for half as motorola than oracle did for sun
20:40 < CoverSlide> s/as/of
20:40 < CoverSlide> and it would have been a good choice tpp considering the amount of java they do at google
20:41 < CoverSlide> plus they wouldn't have had to go through that frivilous android lawsuit
20:41 < niix> java would be interesting if Google owned it
20:41 < CoverSlide> yup
20:41 < niix> but they don't, so it's not
20:41 < vicapow> niix: well, didn't they pretty much build their own jam with android?
20:41 < CoverSlide> niix: I've played it, it's good, but hard
20:41 < niix> I guess so
20:41 < vicapow> s/jam/jvm
20:41 < niix> CoverSlide: I used to play that game when I was younger
20:42 < CoverSlide> vicapow: yes, which is why they got sued
20:42 < niix> I'm going to re-write that version in node haha
20:42 < CoverSlide> vicapow: it was actually based on a jvm that apache built called harmony
20:42 < CoverSlide> harmony was also part of the reason apache left the JCP
20:43 < xk_id_> If I do "callback(err1 + err2)", how can I later separate the resulting error object?
20:43 < vicapow> CoverSlide: whatever happened in the oracle v google thing?
20:44 < CoverSlide> not sure, last i heard oracle lost
20:44 < CoverSlide> and has to pay google court fees
20:44 < CoverSlide> but who knows right now
20:45 < isaacbw> CoverSlide, yea, that would have been smart
20:45 < niix> should I learn coffeescript?
20:45 < isaacbw> maybe google is just waiting to to buy out oracle :P
20:45 < isaacbw> google does a lot of mysql too
20:45 < CoverSlide> do they?
20:46 < isaacbw> yea, apparently google contributes a lot to the codebase
20:46 < isaacbw> because they stress test it so much, they find crazy bugs
20:46 < isaacbw> I kind of like this google buying oracle theory
20:46 < isaacbw> wait until oracle sits on its own balls
20:48 < CoverSlide> unfortunately, oracle's size is pretty significant, i don't see them getting acquired by anyone anytime soon
20:48 < isaacbw> probably not
20:49 < isaacbw> the've been buying a lot of companies
20:49 < CoverSlide> yeah
20:59 < xk_id_> what's the name for doing "[object1] + [object2]"?
20:59 < isaacbw> adding?
20:59 < xk_id_> "adding objects together"?
20:59 < echo|1> xk_id_: Merging, I believe is the term for it.
20:59 < jamesd> concatenation?
21:00 < isaacbw> but
21:00 < isaacbw> that's not what it does
21:00 < xk_id_> they're not strings\
21:00 < xk_id_> they're error
21:00 < xk_id_> *errors
21:00 < othiym23> depends on the type
21:00 < isaacbw> >> {a: 1} + {b:2}
21:00 < purr> isaacbw: (number) NaN
21:00 < xk_id_> they're errors. 
21:00 < isaacbw> you acn't do it
21:00 < othiym23> in that case, you're just concatenating to strings
21:00 < isaacbw> yea, it's nonsense
21:00 < othiym23> s/to/two/
21:00 < echo|1> I guess it depends on which method you're bringing them together with. If you're just taking object 2 and appending it to the end of object 1, that'd be concatenation.
21:00 < xk_id_> oic
21:01 < lohkey> the union of two objects?
21:01 < lohkey> merge sounds more kosher though
21:01 < xk_id_> so since they're errors, it's concatenation and returning string, yes?
21:03 < xk_id_> >> (new Error("a") + new Error("b")
21:03 < purr> xk_id_: SyntaxError: Unexpected end of input
21:03 < xk_id_> >> (new Error("a") + new Error("b"));
21:03 < purr> xk_id_: (string) 'Error: aError: b'
21:03 < xk_id_> >> (new Error("a") + new Error("b")).contains("Error");
21:03 < purr> xk_id_: TypeError: Object Error: aError: b has no method 'contains'
21:03 < xk_id_> why?? isn't it a string?
21:03 < Havvy> "abc".contains
21:03  * xk_id_ tries not to hurt purr
21:03 < Havvy> .>> abc.contains
21:03 < xk_id_> >> (new Error("a") + new Error("b")).toString().contains("Error");
21:03 < purr> xk_id_: TypeError: Object Error: aError: b has no method 'contains'
21:03 < Havvy> >>> "abc".contains
21:03 < purr> Havvy: undefined
21:04 < Havvy> >>> "abc".substring("a")
21:04 < purr> Havvy: (string) 'abc'
21:04 < xk_id_> >> "abc".contains("a")
21:04 < Havvy> >>> "abc".indexOf("a")
21:04 < purr> xk_id_: TypeError: Object abc has no method 'contains'
21:04 < purr> Havvy: (number) 0
21:04 < echo|1> xk_id_: Wouldn't it make more sense to have an array, and just push the error objects into the array as they're created? I'm not really sure what your bigger picture usage is here.
21:05 < xk_id_> echo|1: no, I need to throw it as an error. 
21:05 < xk_id_> why isn't (string).contains("") working?
21:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:05 < xk_id_> >> "abc".contains("a")
21:05 < purr> xk_id_: TypeError: Object abc has no method 'contains'
21:05 < azylman> Contains isn't a method strings have in javascript...
21:05 < xk_id_> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/contains
21:06 < azylman> Look under browser compatibility
21:06 < azylman> Not supported anywhere
21:06 < xk_id_> well, we're not in a browser..
21:06 < slaskis> you can add it?
21:06 < azylman> Node uses v8, which is what Chrome uses
21:06 < xk_id_> ic
21:07 < CoverSlide> it's in JavaScript 1.8.6
21:07 < slaskis> maybe it works if you enable harmony (being a harmony proposal)
21:07 < CoverSlide> JavaScript as in SpiderMonkey
21:07 < CoverSlide> not JavaScript as in ECMAScript
21:07 < xinmin> can someone tell me why http://pastebin.com/BqxuT4PT never prints 'got it' ?
21:07 < xk_id_> http://stackoverflow.com/questions/1789945/method-like-string-contains-in-javascript
21:07 < xinmin> it uses mocha (run with mocha --ui tdd <file>)
21:08 < xinmin> where asdf is a non-existent file. mocha prints ENOENT. but i wonder how mocha got that error when i am catching the exception
21:09 < isaacbw> xk_id_, why did you link that. The answer was that he had a typo
21:09 < xk_id_> isaacbw: no, the answer was "s.indexOf("oo") !== -1"
21:09 < xk_id_> >> "abc".indexOf("bc") != -1
21:09 < purr> xk_id_: (boolean) true
21:10 < xk_id_> do you even read :D
21:10 < CoverSlide> >> !!~"abc".indexOf('bc)
21:10 < purr> CoverSlide: SyntaxError: Unexpected token ILLEGAL
21:10 < CoverSlide> >> !!~("abc".indexOf('bc))
21:10 < purr> CoverSlide: SyntaxError: Unexpected token ILLEGAL
21:10 < xk_id_> ILLEGAL
21:10 < CoverSlide> hrm
21:11 < CoverSlide> >> [~[1,2,3].indexOf(4), ~[1,2,3].indexOf(3)]
21:11 < purr> CoverSlide: (object) [0, -3]
21:11 < CoverSlide> >> !!~"abc".indexOf('bc')
21:11 < purr> CoverSlide: (boolean) true
21:11 < CoverSlide> oh there we go
21:12 < CoverSlide> stupid mac keyboard
21:12 < CoverSlide> >> !!~"abc".indexOf('ac')
21:12 < purr> CoverSlide: (boolean) false
21:13 < xinmin> actually, never mind that complicated example
21:13 < xinmin> http://pastebin.com/zC8fmsS6
21:13 < xinmin> that code never prints 'got it'
21:14 < xinmin> can someone explain why?
21:15 <@mbalho> do fs.on('error', function() {console.log('got it')})
21:15 <@mbalho> err inputStream.on('error
21:15 < xinmin> if i put a throw before createInputStream, it catches the error. so something about createReadStream
21:15 < CoverSlide> yes, it's asynchronous
21:15 < xinmin> oh, it emits events? that's a big strage for sync api
21:16 <@mbalho> xinmin: its not sync
21:16 < CoverSlide> it's not a sync api
21:16 <@mbalho> xinmin: http://nodejs.org/api/stream.html
21:16 < xinmin> ok, the stream creation is sync but file opening is async. mm
21:17 < xinmin> mbalho: thanks
21:19 < styol> Is there a recommended workflow for modifying a globally installed module in the hopes of troubleshooting/debugging/contributing?
21:19 <@mbalho> styol: https://github.com/maxogden/voxel-hello-world/blob/master/index.js#L15
21:20 <@mbalho> styol: what are you trying to do?
21:21 < styol> mbalho: in particular trying to utilize fleet by substack and trying to understand why two scenarios are failing/erroring without anything particularly helpful being out, so I figure I need to add some additional output somewhere to assist myself
21:21 < isaacbw> styol, don't have it globally installed
21:22 < styol> I suppose I could just modify the underlying code that has been installed via npm but thought maybe a clone and modify might be better
21:22 < isaacbw> clone the repo
21:22 <@mbalho> styol: ohh i misunderstood
21:22 < CoverSlide> the workflow is edit, save, run, exit, repeat
21:22 < styol> isaacbw: still need to execute shell commands though, guess i can just do the symlinks manually?
21:22 < isaacbw> that's probably best
21:23 < styol> thanks doods
21:25 < othiym23> it would be awesome and terrible if V8 supported __noSuchMethod__
21:26 < othiym23> there is no end of Ruby-esque shenanigans I could get up to with that
21:26 < isaacbw> I can't decide if I love the idea or loathe it
21:27 < othiym23> it's a cornerstone of the Ruby Way, isaacbw
21:27 < othiym23> but I share your ambivalence
21:27 < CoverSlide> Proxies
21:27 < isaacbw> it's the same kind of thing as c++ libraries where the language gives you so much power that learning a new library is almost like learning a new language
21:28 < othiym23> CoverSlide: which proxies? The ones in V8 right now, or whatever the current ES6 draft specifies?
21:28 < othiym23> I'm not gonna use something that's going to change in my code, cuz I'm not the end user of it
21:28 < fourcolors> Hi. I'm a bit new to how the package.json thing work with node and was wondering, would it be possible to do "npm start" and have that both run `coffee -c foo` and start my server at the same time? 
21:28 < CoverSlide> well you should be able to do them with either, right?
21:28 < CoverSlide> just different syntax
21:28 < othiym23> what I'm getting at is that they're not ready for use today
21:28 < CoverSlide> true
21:29 < CoverSlide> but there's a proposal on the books that solves that particular problem
21:29 < CoverSlide> albeit in a different way
21:29 < fourcolors> I want to run one command that will take care of starting the server and compiling my coffeescript 
21:29 < othiym23> yeah, believe me, I've been wading through the unique symbols / private symbols / WeakMaps / proxy discussion for what seems like forever now
21:29 < othiym23> (on es-discuss)
21:29 < brianc> mikeal: is there a place I can find more info on the SO track for nodeconf?
21:30 < CoverSlide> fourcolors: make a bash script
21:30 < CoverSlide> fourcolors: or a Makefile
21:30 < CoverSlide> fourcolors: or fuck it, use grunt
21:30 < othiym23> fourcolors: you can just do coffee whatever ; node app.js in your script stanza
21:30 < CoverSlide> grunt would be overkill for that though
21:30 < CoverSlide> hell I find grunt to be overkill for most things
21:30 < isaacbw> hmm, I should make some more coffee
21:31 < fourcolors> othiym23: ah.. didn't know that syntax cool 
21:31 < isaacbw> is mdn refusing to load for you guys
21:31 < superjoe> fourcolors, I like to do that too
21:31 < isaacbw> nvm
21:32 < superjoe> I typically have `npm run dev` do everything that you need to get a dev server running, including installing dependencies and compiling any assets
21:32 < isaacbw> python2 -m SimpleHTTPServer used to be my goto dev server
21:32 < isaacbw> I didn't know about the npm one
21:32 < fourcolors> I just found one called "anywhere" that im trying 
21:32 < superjoe> isaacbw, there isn't an npm one - it's a script that I put in package.json
21:33 < isaacbw> oohh
21:33 < fourcolors> but I don't know the node.js ecosystem so haven't been sure of any of the packages yet 
21:33 < superjoe> "scripts": { "dev": "npm install && node-dev server.js"}
21:33 < isaacbw> oh cool. I didn't know about that feature of npm either
21:34 < CoverSlide> node-static is a good replacement for python's SimpleHTTPServer
21:35 < nanashiRei> superjoe: are you sure that works?
21:35 < nanashiRei> whenever i tried to add commands other then stop start and test it just didn't find them
21:35 < fourcolors> cool that works like a charm
21:35 < superjoe> nanashiRei, it works but you have to use the npm "run" command
21:35 < superjoe> npm run <script-name>
21:35 < fourcolors> I'm doing this     "start": "anywhere && coffee -w -o app/assets/compiled -c app/assets/coffeescripts" 
21:36 < nanashiRei> :o
21:36 < superjoe> the cool thing is that you can use locally installed modules in that command
21:36 < CoverSlide> or http-server
21:36 < fourcolors> its there a way to force a dependency to install with -g instead of just locally? 
21:36 < superjoe> so people can run that npm script without having to install -g
21:36 < superjoe> fourcolors, it's generally encouraged to *not* install -g. what is the dependency?
21:36 < nanashiRei> like npm run can use coffee without it being global?
21:36 < superjoe> nanashiRei, exactly
21:36 < fourcolors> superjoe: it's "anywhere" its a server 
21:36 < nanashiRei> Awesome shit.
21:37 < nanashiRei> Best time to get into here xD
21:37 < nanashiRei> I'll write scripts now xD cya
21:37 < superjoe> fourcolors, why not install it locally and then do "start": "npm install && anywhere && ..."
21:38 < superjoe> I mean you don't even have to put "npm install" in the command, you can still just rely on the local install
21:38 < nanashiRei> btw. any of you guys good with mongodb"
21:38 < nanashiRei> ?
21:38 < fourcolors> superjoe: I had added it to my dependencies and did a "npm install" which installed it however it warnmed me it should be installed with -g and also the commandline wasn't working until I installed with -g 
21:38 < superjoe> nanashiRei, just ask the question ;)
21:38 < nanashiRei> The channel seems kinda dead over there, so https://gist.github.com/af999fc63775d167798e if you could help me with the cond: { } part
21:38 < fourcolors> superjoe: Ill give that a go actually, I might have just missed something along the way 
21:38 < superjoe> fourcolors, you can use it locally like this: ./node_modules/.bin/anywhere
21:39 < superjoe> I'm kind of upset that modules request to be installed -g. it's rude
21:39 < nanashiRei> i'm trying to select the start and end of the previous day for batch calculations :x
21:39 < fourcolors> ya, maybe there is a better lightweight server out there I could use? 
21:39 < noobtube> If I have 5000 socket io sockets connected to a server process and that server process goes down is there any distributed technology that will maintain the state of those sockets and shed them to another server? I understand this is a weird question considering its tcp socket level.
21:39 < fourcolors> it was just the first one I could find that was easy to install 
21:39 < wasabist> can i load socket.io code from a different host/port than the host/port of the server for socket connection to work?
21:39 < fourcolors> I just need to take care of cacheing for an example app im making 
21:40 < isaacbw> wasabist, your question is hard to understand, but the answer is probably yes
21:40 < noobtube> wasabist you can run the socket io sockets on the same port as the http server or any other specified port
21:40 < nanashiRei> Wasabist, lookup access allow headers
21:40 < nanashiRei> :P
21:40 < wasabist> so my socket.io is loaded from localhost:80/lib/socket.io.js but my node is listening on localhost:6666
21:41 < isaacbw> it doesn't matter where the socket.io client script is pulled from
21:41 < kschzt> sup. so I know locking is hard. what are you doing about it?
21:41 < wasabist> not according to a stackoverflow post i just found
21:41 < wasabist> may i post a link to it here?
21:41 < isaacbw> if you want to
21:41 < nanashiRei> i think he means that his socket.io frontend ist on a normal http server and he want to connect to node on :6666
21:42 < wasabist> http://stackoverflow.com/questions/9945693/connecting-client-to-server-using-socket-io
21:42 < isaacbw> you're probably misunderstanding it though
21:42 < wasabist> nanashiRei: exactly
21:42 < nanashiRei> which is considered cross site scripting, so access controll headers
21:42 < kschzt> fs.open(pathFn, wx, cb) is actually working, but async callbacks make big trouble easily
21:42 < nanashiRei> sec, i'll give you a link in a sec
21:42 < kschzt> has anyone worked on this problem in node before, apart from isz?
21:43 < CoverSlide> yeah using the fs async commands with fds is a pain
21:43 < CoverSlide> fs.open, fs.read, fs.write, 
21:43 < nanashiRei> https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS
21:43 < nanashiRei> there we go
21:43 < kschzt> https://github.com/isaacs/lockfile/blob/master/lockfile.js#L144 check it
21:43 < kschzt> there is a problem, do you see it?
21:43 < frem> When I try to npm install some packages in Ubuntu, I get this ENOENT, lstat error. https://gist.github.com/11a575a110b45fda8507
21:43 < nanashiRei> wasabist: that will help you fix this
21:44 < nanashiRei> just let you node instance set these headers and it'll work just fine
21:44 < kschzt> the problem is, you can end up with a stale stat output, and remove the wrong lock. 
21:44 < wasabist> thank you nanashiRei 
21:44 < kschzt> hard to make a test for :) but I've seen it happen.
21:44 < isaacbw> getting the js file has nothing to do with cors
21:45 < CoverSlide> well once you make a test, then work can be done to fix it
21:45 < isaacbw> if you want the socket.io server and http server on different ports, then you need to worry about cors
21:45 < kschzt> so while the stat() is returning, someone is already unlocking the lock and touching a new file, and then we go and remove it
21:45 < kschzt> anyone like to review this as possibly true?
21:46 < nanashiRei> isaacs: that's what he is up to.
21:46 < nanashiRei> lol
21:46 < isaacbw> wrong isaac
21:46 < kschzt> of course, lockfile itself has an issue where anyone can remove any lock, regardless of whether or not you have the lock
21:47 < kschzt> which is cause for great confusion and failed installs
21:47 < nanashiRei> it's shit confusing with 2 nick so much alike D:
21:47 < jcrugzz> isaacbw: you don't really exist.
21:47 < isaacbw> I guess not :(
21:47 < fourcolors> This is breaking when I run "npm start" I'm getting this https://gist.github.com/7fbd4ae8982438465674 
21:48 < fourcolors> am I doing this wrong? 
21:48 < nanashiRei> i have to press tab, sorry you can't demand this of me. it's way to daring xD
21:48 < kschzt> i now need to work on a test to prove the above :)
21:48 < nanashiRei> press tab twice*
21:49 < kschzt> but actually I'm starting from: why does npm insist on re-tarballing the same package folder for every dependency?
21:49 < kschzt> which is the actual source of the lock contention bug
21:49 < fourcolors> oh dang, im dumb 
21:49 < kschzt> anyone with me?
21:49 < fourcolors> nm disregard my question 
21:51 < wasabist> so its a matter of adding Access-Control-Allow-Origin:* to server headers, yes? the code for my client comes from apache, i added that header there. socket connection is directed at node.js, do i need to add that header there as well?
21:51 < kschzt> https://github.com/isaacs/npm/blob/master/lib/utils/tar.js#L54 that thing gets called over and over again for one install tree. 
21:52 < kschzt> and the tarball is being unpacked, while not locked, by some dependency somewhere down the tree.
21:52 < kschzt> while it's being overwritten by pack_()
21:53 < kschzt> so I'm supposed to capture that situation in a test. way
21:54 < wasabist> request from my client (chrome) to node.js is simply not responded to:
21:54 < wasabist> Request URL:http://localhost:6666/socket.io/1/?t=1359496204614
21:54 < wasabist> no response, no error, just blank
21:55 < wasabist> what am i missing?
21:55 < kschzt> isaacs, dude, we really need to get to owner-unlock pattern :) if you don't know about the current lock, you should not have access to it, unless it's outside this process. 
21:56 < kschzt> isaacs, but yes I'll work on that test project now
21:56 <@isaacs> ok
21:57 < iwalkbarefoot> wasabist: so it's returning no data, but it is returning?
21:57 < wasabist> iwalkbarefoot: there's nothing that i can see, no response headers no body
21:58 < iwalkbarefoot> interesting.  do you have a pastebin of your project available?
21:58 < wasabist> my next step was going to be to look at http traffic by wireshark but as far as chrome, nothing is coming back
21:58 < fourcolors> what does it mean when you put a star after your dependency? I mean something like "anywhere" : "*" instead of the version number? 
21:58 < kschzt> isaacs, in fact, no reason to do anything but fs.watch() anywhere, because you can just lock ~/.npm as apt does
21:59 < azylman> fourcolors: any version number
21:59 < mscdex> node.js is webscale!
21:59 < azylman> fourcolors: don't do that, you're in for a world of hurt
21:59 <@isaacs> kschzt: then you cant have multiple different packages installing in parallel
21:59 < wasabist> http://pastebin.com/bbWbV3ez
21:59 < fourcolors> azylman: oh.. is there a way to just get the latest version? 
21:59 <@isaacs> kschzt: if you lock ~/.npm, then only one thing can be downloading at once, ever.
21:59 < kschzt> isaacs, sure you can, they're not using the same locks
21:59 <@isaacs> ok... what do you mean by "lock ~/.npm" then?
22:00 < kschzt> isaacs, you're 99% installing in the same process
22:00 < azylman> fourcolors: that's what that does. but if the package you depend on has a major upgrade and changes their api, it can break your code
22:00 <@isaacs> kschzt: yes, i mean in the same process.
22:00 < kschzt> isaacs, extremely rarely are you running two npm's at once
22:00 <@isaacs> kschzt: it's not rare at joyent :)
22:00 <@isaacs> kschzt: in fact, it's a daily occurrence
22:00 < fourcolors> oh
22:00 < kschzt> isaacs, yeah, we used to do npm install <pkg>& but it was very flaky :D
22:01 <@isaacs> kschzt: that's why this lockfile code exists
22:01 < kschzt> jeje
22:01 < kschzt> mmm
22:01 <@isaacs> kschzt: well, you might have multiple different things getting installed on a box at startup, as part of seaprate init steps.
22:01 < kschzt> I'm getting at the re-packing now. 
22:02 < kschzt> be a sec
22:02 < azylman> fourcolors: You probably want to use tilde version ranges: https://npmjs.org/doc/json.html#dependencies
22:03 < azylman> fourcolors: That way you'll never have any of your packages upgraded by a major version without your knowledge
22:03 < iwalkbarefoot> wasabist: what version of express are you using?
22:03 < wasabist> iwalkbarefoot: vvv paste bin and a screenshot vvv
22:03 < wasabist> http://cl.ly/image/0F362t2E0O45
22:03 < wasabist> http://pastebin.com/bbWbV3ez
22:03 < nanashiRei> oh shit isaacs is an ircop 
22:04 < wasabist> express 2.4.6
22:04 < fourcolors> cool
22:04  * nanashiRei hides
22:05 < nanashiRei> wasabist: can you provide the response headers
22:05 < geNAZt> res.header("Access-Control-Allow-Origin", "*"); => res.header("Access-Control-Allow-Origin", "*:*"); ?
22:05 < wasabist> needless to say i'm a bright green noob in node.js so… any and all help would be greatly appreciated
22:05 < CoverSlide> isaacs: by the way, i've found a bunch of special characters that I was able to use in my module names: https://npmjs.org/~coverslide are there any you prefer not to have?
22:05 < CoverSlide> [!'*~] specifically
22:05 < nanashiRei> geNAZt: nope, * works, although... he should just add local.nhl.com:80 as origina
22:05 < nanashiRei> -a
22:06 < nanashiRei> * is kinda .. dangerous :D
22:06 < geNAZt> yes :D
22:06 <@isaacs> CoverSlide: it should probably start with a letter.  and yes, *!' are all dangerous
22:06 < iwalkbarefoot> yeah I spent yesterday making code compatible with the latest versions of modules.  I didn't realize I wasn't using express 3.0
22:06 < geNAZt> well it cant work
22:07 < kschzt> god, why tap
22:07 < CoverSlide> tap is the shiznit
22:07 < geNAZt> since you are requesting local.nhl.com, and the socket.io listens on port 6666
22:07 < kschzt> just use mocha, man
22:07 < iwalkbarefoot> wasabist: what version of socket.io ?
22:07 < geNAZt> your request to socket.io should be local.nhl.com:6666
22:08 < wasabist> socket.io 0.9.13
22:09 < holzp> hm should I be using grunt?
22:09 < geNAZt> can u post your client socket io connect call ?
22:09 < kschzt> holzp, probably
22:09 < iwalkbarefoot> wasabist: do you work for the NHL?  I'm an avid hockey fan :D
22:09 <@isaacs> CoverSlide: pushing update to not allow those.
22:09 <@isaacs> CoverSlide: thanks :)
22:09 < CoverSlide> np
22:09 < holzp> what else is fairly standardfor use in projects?
22:09 < holzp> grunt...and...
22:09 < kschzt> nothing
22:10 <@isaacs> CoverSlide: can you un-publish and try to re-publish those?
22:10 <@isaacs> CoverSlide: should yell at you
22:10 < kschzt> holzp, go grunt.
22:11 < othiym23> don't forget jake, holzp and kschzt 
22:11 < othiym23> although we all probably should
22:11 < wasabist> thanks for your help thus far, i'll be back shortly
22:11 < kschzt> glad i know how to use ignores
22:12 < holzp> whats the diff between grunt and  jake?
22:12 < wasabist> one is more fun than the other?
22:12 < wasabist> j/k
22:12 < othiym23> one was modeled on rake, the other was built to solve cowboy's specific needs
22:12 < wasabist> have a good night all
22:13 < othiym23> I try to avoid workflow tools, but I do think grunt is probably a better fit for most JS hackers
22:13 < othiym23> although the Yammer guys could probably speak to the benefits of jake better than I'm going to be able to
22:14 < CoverSlide> isaacs: cool, works
22:14 < holzp> If you told me 10 years ago I would not only be using a build tool with my javascript, but trying to decide *which one* I would have laughed you out of the room
22:15 < tpayne> is there a way to go from javascript back to node in some consistent way?
22:15 < nanashiRei> uh?
22:15 < kschzt> holzp :)
22:16 < CoverSlide> tpayne: you mean browser to node?
22:16 < tpayne> yeah
22:16 < CoverSlide> tpayne: look at browserify
22:16 < tpayne> thanks
22:16 < nanashiRei> Did you know, my code started to look more clean over since i stopped using underscore.
22:16 < nanashiRei> EMACScript 5 has almost all of these function anyway :D
22:16 < othiym23> nanashiRei: most of the stuff you'd use Underscore / lodash for in the browser is a part of ES5, so that makes sense
22:17 < CoverSlide> tpayne: it lets you structure your modules in the same way, and also adds browser-equivalents of some node core modules if you want to use them
22:17 < othiym23> i.e. you don't need to polyfill ES5 stuff in Node because it's guaranteed to be there
22:17 <@isaacs> CoverSlide: what error message do you see?  is it incomprehensible and weird?
22:17 < kschzt> nanashiRei, http://github.com/rocketpack/when changed everything for me - the Promises API
22:17 < CoverSlide> npm ERR! publish Failed PUT response 403
22:17 < CoverSlide> npm ERR! Error: forbidden name invalid: ~stupidtest: ~stupidtest
22:17 < nanashiRei> D:
22:17 <@isaacs> CoverSlide: awesome.
22:17 <@isaacs> thanks
22:17 < nanashiRei> promisses i still don't quite get it.
22:17 < nanashiRei> xD
22:18 < nanashiRei> but that's because i'm to busy with other stuff
22:18 < fourcolors> Does anyone know if its possible to run coffeescript compiles command silently? I'm having a problem running a server and watching for coffeescript changes at the same time 
22:18 < kschzt> use it.
22:18 < nanashiRei> I DO know what they do :P
22:18 < kschzt> the cujojs guys <3
22:19 < nanashiRei> fourcolors: coffee yourapp.coffee > /dev/null 2>&1 &
22:19 < nanashiRei> something like that
22:19 < Industrial> Can I use mux-demux with shoe and dominictarr/reconnect ? I'm not sure how to set up mdm with dnode and shoe (what I have running now), looking at https://github.com/dominictarr/mux-demux/blob/master/examples/http.js
22:19 < nanashiRei> stdout > blackhole
22:19 < nanashiRei> stderr to stdout and send to background
22:19 < CoverSlide> why the hole gotta be black?
22:19 < nanashiRei> BECAUSE...
22:19 < nanashiRei> ponies.
22:20 < kschzt> isaacs, drunk now, will work on it tomorrow, I'm going to deepen your system a little to find the issue. so I want to make a few levels deep in deps, then refer to 2-3 of them at the same time. You're right, I need to prove the bug.
22:20 < dominictarr> Industrial: yes you can
22:20 < nanashiRei> kschzt: ... just looking at when.......
22:20 < nanashiRei> FUUUUUUUU
22:21 < kschzt> isaacs, but also you must know owner-locking is the only way, now in lockfile anyone can unlock shit :(
22:21 < kschzt> isaacs, and that will always be error-prone.
22:21 < nanashiRei> why didn't you mail that to me 1 week ago?!
22:21 < nanashiRei> heh
22:21 < nanashiRei> D:
22:21 < nanashiRei> explain yourself xD
22:22 < styol> mbalho: voxel is pretty neat btw :)
22:22 < kschzt> i've been using it for more than 6 months now instead of the node.js callback style. when.f() by @sakari is great
22:23 < dominictarr> Industrial: reconnect uses shoe by default on the client
22:23 < nanashiRei> I see that already
22:23 < kschzt> https://github.com/rocketpack/when/commit/610e540ebbc7e362c6039bf835a379bb7aa7667c#L0R43 
22:23 < nanashiRei> it declutters everything...
22:23 < Industrial> right
22:23 < nanashiRei> tried it with coffeescript?
22:23 < nanashiRei> does that melt together well?
22:23 < kschzt> it lets you do: when.f(fs.readFile, path).then(fn).otherwise(fuck)
22:24 < kschzt> really great
22:24 < nanashiRei> .on() support?
22:24 < nanashiRei> to tired for much reading xD
22:24 < kschzt> sure, if the cb gives you an EventEmitter?
22:24 < nanashiRei> then sounds fun
22:25 < kschzt> so the then() will give you that, the otherwise() will give you the err
22:25 < kschzt> ^_^
22:25 < kschzt> check out more of @sakari's work while at it
22:25 < Kakera> how crazy is having an event that emits with a function that accepts a callback?
22:25 < kschzt> no
22:25 < othiym23> Kakera: moderately crazy
22:26 < kschzt> the event emitter is given to you in then(), the failure in otherwise()
22:26 < Kakera> .on('complete', function(f) { f(function(data) { console.log(data); }); });
22:26 < othiym23> you can probably get away with it as long as you remain conscious of the fact that event emitters are called synchronously and don't go hog wild with recursion
22:27 < kschzt> check out http://cujojs.github.com/m 
22:27 < othiym23> it's still going to be weird and nonidiomatic, though, so I wouldn't do it in modules you plan on publishing
22:27 < kschzt> err, sorry, http://cujojs.github.com/, these guys are really good.
22:28 < AviMarcus> tjfontaine, got another sec? :) I asked yesterday about native-dns and NAPTR. You gave me ndns.resolve('domain', ndns.NAPTR, cb); -- but actually, I need the server. doing response.answer.push(dns.NAPTR({  as opposed to dns.A gives a "AssertionError: missing value -->    at writeUInt16 (buffer.js:883:12)" I'm not quite sure where it's expecting this type to be defined..
22:32 < fourcolors> ug.. I'm struggling 
22:33 < fourcolors> I can't seem to both run my "anywhere" server and run my coffeescript compiler at the same time 
22:34 < othiym23> fourcolors: take a look at mon and forever
22:34 < othiym23> they do some fs watching for you and can also be told to use a transpiler
22:45 < jtomasrl> what problems can i get when adding mongo,redis client and socket.io to the global variable?
22:45 < isaacbw> like, requiring the modules?
22:46 < zomg> well if you call all of the variables the same it obviously won't work
22:46 < jtomasrl> global.mongo, global.socket, global.redis
22:46 < fourcolors> othiym23: the problem with forever is it seems to want to run file while the coffee script command is just a comand line 
22:46 < jtomasrl> global.redis = redis.createClient()
22:46 < isaacbw> what is in those variables
22:46 < fourcolors> action 
22:46 < isaacbw> oh
22:47 < isaacbw> global is redundant probably
22:47 < othiym23> fourcolors: I forget how you do it exactly, but you can tell it to use a compiler before invoking Node
22:47 < jtomasrl> what would be better?
22:47 < kschzt> nanashiRei, coffeescript eh? :) did u try it yet?
22:48 < nanashiRei> i'm using only coffeescript since i found it.
22:48 < nanashiRei> it reduces the code i have to write by ~30 percent
22:48 < kschzt> no I mean the `when` lib
22:48 < nanashiRei> nope
22:48 < nanashiRei> i'm writing a small test right now tho
22:48 < isaacbw> jtomasrl, top level variables are global 
22:48 < isaacbw> if this is your main server script, that's fine
22:49 < nanashiRei> http://api.sparpilot.com/ this actually is fun 
22:49 < nanashiRei> going to add a lot more to this xD
22:49 < kschzt> all our code is using `when` now as far as possible 
22:49 < jtomasrl> i run them in app.js and use them in other files, inside the same app
22:49 < kschzt> promises ftw.
22:50 < nanashiRei> and yes, currently recoding it to use socket.io to be real time
22:50 < fourcolors> humm..
22:50 < fourcolors> this seems like a problem a lot of people would run into I wonder why there isn't a common solution for it 
22:50 < isaacbw> jtomasrl, have you actually tried doing that? because globals are limited to their module
22:50 < isaacbw> there is no such thing as a cross-module global
22:51 < nanashiRei> funny is, google does use and suggest using promisses
22:51 < jtomasrl> they work
22:51 < nanashiRei> just look at $q in AngularJS
22:51 < isaacbw> then you're doing something magic
22:51 < nanashiRei> it's stupid that it's not in node.js by now
22:51 < kschzt> yeah
22:51 < kschzt> agree
22:51 < isaacbw> q?
22:51 < kschzt> it's really a much easier pattern in the end
22:52 < nanashiRei> isaacbw: www.angularjs.org
22:52 < nanashiRei> goto the docs and look under services
22:52 < isaacbw> I know what q is. I mean you're annoying that q isn't in node yet?
22:52 < isaacbw> *annoyed
22:52 < nanashiRei> it's just a pretty good implementation of a promise
22:52 < kschzt> talking about promise api in general
22:52 < nanashiRei> yup
22:52 < CoverSlide> node used to use promises back in the day
22:52 < CoverSlide> then they stopped
22:53 < jtomasrl> isaacbw: here's an example https://gist.github.com/4668724
22:53 < nanashiRei> btw... is there a good tutorial on domains... i do not find a reason why they would be useful, for anything but domain.on('error'....
22:53 < nanashiRei> xD
22:53 < polyrhythmic> promises are OK.  but iced coffeescript has a better program flow
22:54 < nanashiRei> iced?
22:54 < CoverSlide> you mean tamejs
22:54 < nanashiRei> explain in short please :)
22:54 < CoverSlide> iced is just coffeescript + tamejs
22:54 < polyrhythmic> the real world is asynchronous, abstractions are there for a reason
22:54 < nanashiRei> everthing that helps me clean up code is cool >P
22:54 < othiym23> nanashiRei: domains are pretty fire and forget, but the documentation sucks, improving it has been on my to-do list forever
22:54 < othiym23> but I still haven't gotten around to it
22:54 < CoverSlide> http://tamejs.org/
22:54 < nanashiRei> thanks CoverSlide will take a look :D
22:55 < polyrhythmic> iced is not 'just' tamejs, the syntax makes a difference
22:55 < polyrhythmic> much less awkward
22:55 < CoverSlide> the only difference is the coffeescript syntax
22:55 < isaacbw> woo, I finished my router
22:55 < isaacbw> you build a route tree with objects
22:55 < CoverSlide> otherwise it's just tamejs with coffeescript
22:55 < nanashiRei> btw. is there a know solution for making use of multiple node instances which do share the same "server" object
22:55 < polyrhythmic> lol
22:55 < nanashiRei> like they show in the docs
22:56 < nanashiRei> but... a little more fancy ^^
22:56 < CoverSlide> they can't share the same server object. they can share sockets though, that's what the cluster module does
22:57 < kschzt> greatest thing about promises is, if you always return Promise, you can bubble them up to the lowest level
22:58 < kschzt> so you don't worry about try-catch everywhere, just fail in one place
22:58 < nanashiRei> kschzt: mind gist'ing me some example of how it would kick some serious ass? ^^
22:58 < isaacbw> everyone should start offering promise variants in their modules
22:58 < kschzt> nanashiRei, not now soz
22:58 < kschzt> just return the promise
23:00 < kschzt> .otherwise(programFailed)
23:00 < nanashiRei> :<
23:00 < nanashiRei> oh i have an idea
23:03 < nanashiRei> https://gist.github.com/5360ea98acb5eac978a8 can it save me from doing shit like that?
23:03 < nanashiRei> :D
23:03 < nanashiRei> spagethi code ... </3
23:04 < CoverSlide> writing coffeescript? no, you have to stop doing shit like that on your own
23:04 < kschzt> haha
23:04 < kschzt> um, yes, it can
23:04 < bingomanatee> Dos anyone have any good suggestions for a mock system in Node?
23:05 < nanashiRei> mockjs?
23:05 < CoverSlide> sinon?
23:05 < nanashiRei> oh right
23:05 < nanashiRei> sinon :x
23:05 < nanashiRei> i need to start getting into unit tests -_-
23:06 < bingomanatee> thx
23:06 < nanashiRei> my current project is... like... 42k lines of code... and has a bug somewhere in the request chain :D
23:06 < nanashiRei> which is asynced multiple times
23:06 < kschzt> nanashiRei, https://github.com/rocketpack/when/blob/master/docs/api.md#arrays-of-promises
23:07 < nanashiRei> and doesn't give any useful info xD
23:07 < nanashiRei> oh wait
23:07 < nanashiRei> then i'm already using this... kinda
23:07 < kschzt> (this is cujo.js work)
23:08 < kschzt> you want https://github.com/rocketpack/when/blob/master/docs/api.md#whenparallel
23:08 < nanashiRei> https://gist.github.com/97d98a9111bd07d2083e
23:08 < nanashiRei> xD
23:09 < nanashiRei> i know, but i use async
23:09 < kschzt> caolan's?
23:09 < nanashiRei> but started using it just about 1 week ago....
23:09 < nanashiRei> not sure, tbh
23:09 < kschzt> https://github.com/caolan/async awesome too
23:10 < kschzt> no Promises
23:10 < nanashiRei> yeah thats the one
23:11 < kschzt> yep, loved it until we found when
23:11 < nanashiRei> while we are at improving code with libs... what's the best and yet simple SQL (SQLite, MySQL, PGSQL....) lib you know?
23:11 < jrajav> Uh. Those are different SQLs.
23:11 < nanashiRei> i defo will try out when, it looks a little more "complete"
23:12 < CoverSlide> there's mysql, pg, and sqlite3
23:12 < nanashiRei> that's why there is lib for wrapping them
23:12 < nanashiRei> i
23:12 < kschzt> gtg bye 
23:12 < CoverSlide> is there?
23:12 < nanashiRei> m looking for a managed solution. like www.sequelizejs.org
23:13 < CoverSlide> well that's an ORM
23:13 < othiym23> sequelize is not super complete
23:13 < CoverSlide> if that's what you wanted
23:13 < nanashiRei> http://sequelizejs.com/
23:13 < nanashiRei> sry
23:13 < othiym23> it's not really an ORM like Hibernate is
23:13 < CoverSlide> but also I'm not 100% sure about the support for non-MySQL
23:13 < CoverSlide> right
23:13 < othiym23> traditional "ORMs" don't make a whole lotta sense in JS
23:13 < nanashiRei> no need for noSQL
23:13 < nanashiRei> i have Mongolian for that which has all i need
23:13 < CoverSlide> I didn't say noSQL
23:13  * CoverSlide facepalm
23:14 < nanashiRei> oh
23:14 < nanashiRei> :D
23:14 < othiym23> nanashiRei: sequelize mostly only works right with MySQL, it's got issues with the other SQL DBs
23:14 < nanashiRei> pretty tired forgive me D>
23:14 < nanashiRei> othiym23: that's why i'm asking
23:14 < nanashiRei> it's pretty damn broken...
23:14 < nanashiRei> and to ... 'simple' 
23:15 < nanashiRei> It shouldn't take me 200 lines of code to connect to 2DB and have a automated foreignkey resolver...
23:15 < othiym23> node works best close to the metal
23:15 < nanashiRei> 2 tables*
23:15 < nanashiRei> blah tireeeedd
23:15 < othiym23> you're better off just using the regular driver
23:16 < CoverSlide> agreed
23:16 < othiym23> and writing your own DAL classes to abstract over whatever data operations you have
23:16 < othiym23> and use a plugin tool like broadway or architect to put it all together
23:18 < nanashiRei> Problem, i'm not to good with Database stuff
23:18 < othiym23> get better ;)
23:18 < nanashiRei> Just recently got into "real business" with this kinds of things
23:18 < othiym23> the problem with hiding that stuff behind a tool is that sooner or later you're going to have to understand how it all works anyway
23:18 < nanashiRei> So just a general lack of experience
23:19 < othiym23> and it'll suck a lot harder if you're trying to do it in staging or production rather than figuring it out as you develop
23:20 < nanashiRei> hm, maybe you can help me with this, farily simple really, at least in cakephp (don't bitch about it, i have to use it.)
23:20 < nanashiRei> there is stuff like hasMany or belongsTo
23:20 < nanashiRei> that's what i would want to have.
23:20 < othiym23> so those are join relationships
23:20 < nanashiRei> mostly
23:21 < othiym23> and you're probably going to have to do that in SQL with pretty much every tool I'm aware of for Node
23:21 < othiym23> it's possible that Tower or Geddy have something in them to help with that, but I think they're more focused on the HTTP side of things instead of offering a replacement for ActiveRecord
23:21 < nanashiRei> Would you mind helping me build a query? I'd really appriciate it
23:23 < CoverSlide> http://www.amazon.com/SQL-Dummies-Allen-G-Taylor/dp/0470557419
23:24 < nanashiRei> :<
23:24 < othiym23> sorry, don't have the cycles right now
23:24 < nanashiRei> oh snap, was worth asking :P
23:25 < holzp> http://www.amazon.com/Joe-Celkos-SQL-Smarties-Fourth/dp/0123820227
23:26 < othiym23> oh god no not Celko
23:26 < isaacbw> what
23:26 < othiym23> there are like 40 things wrong in that book
23:26 < holzp> I just like the title
23:26 < othiym23> I mean yeah, there's a lot of good stuff in there, too, but I'd read http://shop.oreilly.com/product/9780596100124.do first
23:27 < holzp> I learned SQL the old fashioned way: error messages and crashing databases
23:27 < othiym23> holzp: the title is the best thing about it ;)
23:27 < nanashiRei> SQL isn't really the problem. But my contract asks that i don't write actual sql querries. Reason being that they want to be able to use whatever sql server comes to hand.
23:27 < othiym23> nanashiRei: that's gonna be tough with Node
23:27 < nanashiRei> i know that xD
23:27 < nanashiRei> Struggling with it since last week
23:27 < holzp> you have accepted a very difficult task
23:27 < holzp> godspeed
23:27 < nanashiRei> for a damn simple thing...
23:28 < holzp> well its not simple if it requires you write a sql abstraction layer
23:28 < nanashiRei> the asynchronous part and the need to respond fast is the problem here ^^
23:28 < othiym23> speaking as someone who built a bunch of Hibernate code and lived to regret it, it is definitely not a simple thing
23:28 < holzp> as a general rule never sign a contract that stipulated in any requirement the word "anything"
23:29 < isaacbw> it's crazy how subjective laws are
23:29 < nanashiRei> But the money is to frikn' much to reject it xD
23:29 < nanashiRei> and it IS possible. i know it.
23:29 < holzp> I would try and backtrack and show how much crapper the app will be by stipulating an unknown database
23:29 < holzp> yeah you need to write a whole abstraction model for the database
23:30 < holzp> *and* god help you always write new implementations of the abstraction if a new db comes along
23:30 < nanashiRei> I was already thinking about just simply writing the SQL querries as needed for all the databases that are mentioned in the contract and template them xD
23:30 < nanashiRei> pretty dirty, but it'll work
23:30 < nanashiRei> xD
23:31 < holzp> its totally possible, many have tried, some have even succeeded!
23:31 < nanashiRei> Well, the project as it is isn't much.
23:31 < nanashiRei> It
23:31 < nanashiRei> fsd
23:31 < nanashiRei> it's a simple RESTful backend
23:32 < nanashiRei> which has a total of 10 calls
23:32 < holzp> well do they stipulate a finite set of databases, or "whatever sql server comes to hand"
23:32 < othiym23> the only other thing to be aware of is that the MySQL, PostgreSQL and SQLite drivers all work pretty differently
23:32 < holzp> because the latter is an open clause
23:32 < othiym23> and I have yet to meet anyone who's actually used Node with Oracle
23:32 < nanashiRei> for simeple usage logging, but... there is about 1.1m querries incoming a day
23:32 < nanashiRei> :D
23:32 < holzp> which is by definition impossible to fufull
23:32 < nanashiRei> No, it's not?
23:33 < holzp> it is
23:33 < nanashiRei> why would it be?
23:33 < holzp> a new sql server comes out 40 years from now, dows you code work against it?
23:33 < nanashiRei> what?
23:33 < holzp> future clauses in contracts are developer traps
23:33 < nanashiRei> I don't think the contract will cover that.
23:33 < nanashiRei> lol
23:34 < holzp> lawyers are sneaky bastards
23:34 < CoverSlide> it would be nice to have a contract last that long
23:34 < nanashiRei> oh, i'm not the one that signed it. hehe working for angency... lol
23:34 < isaacbw> "A car comes out in twenty years. Is it a stick shift?"
23:34 < nanashiRei> still gotta stick to what it says :P
23:34 < isaacbw> "How many gears does it have?"
23:35 < holzp> if its an open ended contract it is, thats why you have to be careful of unqualified clauses
23:35 < holzp> if it sais existing sql servers thats a finite clause, technically possible
23:35 < nanashiRei> The agency has a department for this
23:35 < isaacbw> there is a point where the judge will use common sense
23:35 < holzp> they why do you care
23:35 < isaacbw> a developer could not be reasonably expeced to support every server ever
23:35 < nanashiRei> what's it in english?! lawyer i think
23:35 < nanashiRei> dunno.
23:36 < isaacbw> a lawyer could and probably would argue your point, but that doesn't mean it would get anywhere
23:36 < nanashiRei> ohh, no. Legal affairs
23:36 < nanashiRei> that
23:36 < nanashiRei> right?
23:36 < holzp> right, but 90% of IT projects fail and this call comes into play in clawbacks
23:37 < holzp> when they go through all the contract clauses and line out which ones are unfufilled and then the agency needs to compensate for the failure
23:37 < nanashiRei> well, that's their problem then ^^
23:37 < holzp> its a whole pain-in-the-ass legal specialty
23:38 < holzp> what the firm says to the judge is"they were the technical experts who signed this contract, they said it could be done"
23:38 < holzp> not that it reasonable can't be done, but that the people who should have known better "lied" by saying they could
23:38 < holzp> see how that works?
23:38 < nanashiRei> Not sure about this, since i just got a kind of todo list and requirements. But i'm pretty sure my boss has time frame kinda thing on all of the contracts.
23:38 < holzp> lawyers, man, lawyers
23:38 < nanashiRei> heard him talk about it, buuuuuut i'm not a lawyer xD
23:38 < nanashiRei> so fuck that crap
23:39 < nanashiRei> hm, i've heard people say redis is good for caching stuff, is that true?
23:40 < CoverSlide> that or memcached
23:40 < nanashiRei> it would be third type of db to be used in this xD
23:40 < holzp> my overall point was that "Reason being that they want to be able to use whatever sql server comes to hand" is probably not totally true
23:40 < holzp> for multiple reasons
23:40 < CoverSlide> redis is like memcached, but with more coomands, and more awesome
23:40 < holzp> so if you are coding to that you are making life harder for no reason
23:40 < isaacbw> and more persistent
23:40 < nanashiRei> First of all the contract does list specific SQL servers
23:40 < holzp> then you mis-stated it here
23:41 < isaacbw> memcached is cool because it can be distributed
23:41 < holzp> so can redis no?
23:41 < nanashiRei> but it's the whole range that you all know
23:41 < CoverSlide> not yet
23:41 < CoverSlide> soon though
23:41 < isaacbw> memcached is really good at it at least
23:41 < isaacbw> and more weathered than rediu
23:41 < holzp> is it mongo that can be disributed now?
23:41 < isaacbw> redis
23:41 < nanashiRei> pg, mysql, mssql, sqlite, percona, bla bla bla
23:41 < nanashiRei> still overseeable
23:41 < isaacbw> mongo has had shards for a while
23:41 < nanashiRei> i use mongo to log the data for later processing
23:42 < nanashiRei> because it's so damn easy to pass in any kind of json object that might be thrown at it
23:42 < isaacbw> it's also slower
23:43 < nanashiRei> doesn't matter, the backend is a Amazon EC2 instance with a shit load of power ^^
23:43 < nanashiRei> it can handle what comes in
23:44 < nanashiRei> And processing the data of an entire day runs in roughtly 700 seconds
23:44 < nanashiRei> so that's fine >P
23:44 < isaacbw> if you don't need to scale, sure
23:44 < nanashiRei> i will be able to scale easily
23:45 < nanashiRei> the data isn't dependant on each other
23:45 < nanashiRei> so i can just go and split whereever i want, kinda
23:45 < nanashiRei> just need to add things together in the end
23:45 < nanashiRei> the endresult of it all is really just 5 tables of aggregated datapoints
23:46 < nanashiRei> with a bit of foreignkey dependencies
23:46 < nanashiRei> but that's not really hard part about it
23:47 < nanashiRei> the*
23:47 < nanashiRei> i'm srsly getting to tired to write, guess i'll take my leave now, was nice talking with you ^^
23:49 < holzp> good luck with it
23:49 < nanashiRei> thanks, i'll manage somehow... 
23:50 < nanashiRei> still got 3 weeks to complete and am 90% done. it's just bug fixing, really
23:54 < MiracleBlue> Hey y'all :)
23:55 < echo> Hello! :)
--- Log closed Wed Jan 30 00:00:51 2013
