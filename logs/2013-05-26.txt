--- Log opened Sun May 26 00:00:08 2013
00:02 < progrock`> well isaacbw, I think I'm going to give learnBoost's monk a shot.... I definitely see your point against mongoose... monk appears to be an unobtrusive layer on top of the naive driver
00:02 < progrock`> native*
00:04 < nathan7> progrock`: forever start app.js
00:04 < nathan7> progrock`: for production
00:04 < progrock`> hmm, is there an easy way for me to know, within app.js, whether the app is being accessed via localhost or by the domain name (non-local user).... would definitely be more convenient than remembering to manually edit a variable before pushing to the server
00:04 < progrock`> tho I suppose I could load a file thats not in version control
00:04 < progrock`> nathan7: ahh, i take itthat dosnt keep the terminal locked... something like nohub & forever app.js would do?
00:05 < progrock`> well a little beter than nohub of course
00:06 < nathan7> progrock`: NODE_ENV=production on the production server
00:06 < nathan7> progrock`: many node modules check for process.env.NODE_ENV === 'production'
00:07 < HSL> s5fs: found the bug, it's something with the SSL part of the code in my gist :/ without SSL it works fine.
00:08 < progrock`> nathan7: ahh, so in the terminal I "export NODE_ENV=production"  .. and locally I guess set it to development
00:08 < nathan7> progrock`: yep
00:08 < nathan7> progrock`: if it's not set, then process.env.NODE_ENV === 'production' is false
00:09 < progrock`> ok, cool.. thank you.  As I'm sure you can tell, this is my first 'serious' node app
00:09 < progrock`> nathan7: yeah I figure, if its anything but production, itll be fine
00:11 < nathan7> progrock`: Maybe Nodejitsu is of interest to you (shameless plug)
00:12 < progrock`> nathan7: haha, yours or you work there?
00:12 < nathan7> progrock`: I work there [=
00:13 < progrock`> nathan7: this app is a 'learning experience' for me.. so sticking to cheap VPSes for now
00:13 < nathan7> progrock`: We also wrote forever (;
00:13 < progrock`> nathan7: tho if for some reason people actual use it, I'll consider
00:13 < nathan7> progrock`: 30 days free, no payment details needed
00:13 < progrock`> so, how are you guys doing against heroku?
00:13 < nathan7> progrock`: https://www.nodejitsu.com/
00:14 < nathan7> progrock`: Excellent support, not killing your apps, good websockets, first-class node support
00:15 < progrock`> "first platform to support Websockets...." so, basedon the rest of that sentence, does socket.io use node-http-proxy?
00:15 <@isaacbw> and heroku offers node as one of many
00:15 < nathan7> no, our load balancers use node-http-proxy though
00:15 <@isaacbw> so you get an implicit diluation of support there
00:15 < nathan7> Yeah, and their support is utter shit
00:15 <@isaacbw> *dilution
00:16 < nathan7> I never spoke to an actual Heroku human, I gave up on hosting with Heroku
00:16 < progrock`> haha, yeah, no worries, if I was going to use a managed solution for a node app, you guys ill definitely be the one
00:16 < nathan7> checked out Nodejitsu and.. liked it enough that I hung around on IRC a lot.. and got hired
00:16 < nathan7> My life is a fortunate but odd series of events.
00:17 <@isaacbw> lol, that's pretty awesome
00:17  * nathan7 nods
00:17 < mmalecki> that's how I got hired too
00:17 < mmalecki> some pull requests were involved in my case too
00:17 < progrock`> nathan7: haha, I know how you feel.. I took my job in finance ona wim... and now that I have my own charting library, every company I;ve every thought about, among others, is tryign to hire me :) .. and I almost took a much easier job
00:17 < nathan7> mmalecki PM'd me with "how would you like to hang out on IRC and get paid?"
00:18 < mmalecki> it was awesome, because back then I've been doing node for like a week or two
00:18 < nathan7> somehow everything awesome in my life starts with joining an IRC channel
00:18 < progrock`> nathan7: my coworker met his wife on IRC
00:18 < progrock`> ... needless to say.. not a looker, hahaha
00:18 <@isaacbw> damn, irc does nothing but suck me away from more important things
00:18 < progrock`> I apologize to the 1 or 2 ladies htast may be here
00:19 < nathan7> mmalecki: when you sent me that PM, I was like back into node for two months
00:19 < progrock`> I sitll rarely use freenode... still stuck back in the old school efnet days
00:19 <@isaacbw> progrock`: be careful saying things like that. You will (rightfully) offend a lot of people
00:19 < progrock`> isaacbw: hence the apology
00:20 <@isaacbw> it wasn't a very sincere apology ;)
00:20 < ckknight>    assuming that there's only 1 or 2 ladies is inherently chauvanstic, progrock`
00:20 < nathan7> can we not start this please
00:20 < progrock`> isaacbw: or if you are referring to me assumign there are a lot mroe men in here.. thats a fair assumption.. and I by no means think men are better programmers than women (hell, my mom's been programming for 30 years).. let alone a couple of female deveopers at my job that are truelly amazing
00:21 < ckknight> nathan7: alright
00:21 < progrock`> and I wouldnt just be putting down women.. I'm sure your average guy on IRC is slightly less good looking than the average off (taking myself into account there)
00:21  * nathan7 checks mirror
00:22 < nathan7> nope, still moving forwards steadily on that front
00:22 < progrock`> but none of us should be offended... we cna get a job in 1 day thats 6 figured easily... 
00:22 < progrock`> figures*
00:22 < progrock`> I have to avoid getting in conversations with people complainigng about finidng jobs... so different for us
00:23 < jcrugzz> progrock`: but whats the probability of that job being very interesting? ;)
00:23 < progrock`> jcrugzz: very.. if you do what you enjoy
00:23 < nathan7> progrock`: well, women get a 6 / log10(1.5) figure job
00:23 < nathan7> progrock`: on average
00:23 < nathan7> ..I'm pretty sure the 1.5 is way off
00:23 < nathan7> either way it's a ridiculous number
00:24 < progrock`> ehh, things are chanigng on that front.. I know my company definitely doesnt pay the women less
00:24 < jcrugzz> progrock`: unfortunately most people dont do what they enjoy cause they havent spent the time to figure that out
00:24 < nathan7> progrock`: it's more about raises, asking for raises, etc
00:24 < progrock`> Well... I suppose you can count things not specifically gender related that may change your pay at my job... ie.  I argue every single review to get more.. and have also threatened to quit before
00:24 < nathan7> progrock`: if you are disrespected, you're less likely to ask for pay
00:24 < progrock`> nathan7: exactly
00:24 < ckknight> jcrugzz: for me, I've just been programming for so long that I don't know any better. I'm too good at it to just give it up and pick up a new trade.
00:25 < progrock`> nathan7: I dont care how bad my review/performance is.. I'm fighting for more pay every time
00:25 < progrock`> nathan7: tho it hepls that I have job offers that blow my current pay away
00:25 < nathan7> Mhm
00:25 < jcrugzz> ckknight: but programming is so dynamic that it can be applied to almost anything. its just about refinding what really drives you and applying those skills :)
00:26 < progrock`> nathan7: but front end devleopers that can code.. especiall ones into data visualization, are in high demand right now
00:26 < nathan7> Frontend is full of voodoo.
00:26 < progrock`> and while I dont wanna get back into back end develpoment.. I do want to mes around with sockets.. among other things.. hence my current project 
00:27 < nathan7> I mean, I really appreciate the browser and all its conveniences
00:27 < progrock`> nathan7: front end developers are genrally looked down on by back end ones.. BUT.. front end makes more.. so its just amusing to me
00:27 < nathan7> I have mad respect for our frontend dudes
00:27 < progrock`> and front end, whiel sometimes being a pain in the ass, kis genrally more interresting (IMO)
00:27 < nathan7> disagree
00:28 < progrock`> nathan7: its funny actually, with my recent talks to google.. their recruiters knwo they have ALLOT of back end talent.. but are in serious need of more front end
00:28 < progrock`> nathan7: well thats absolutely my personal preference.. i cant argue iwth you disagreeing
00:28 < chiel> hi all. has anybody here used union +routing tables + passport.js?
00:28 < nathan7> progrock`: the opsmezzo stuff we're working on.. seriously amazing
00:29 < progrock`> nathan7: for the time being, I love d3 and aking my own visualizations... but.. who knows.. 5 years from now, I may get bored and switch sides
00:29 < nathan7> I'm getting into frontend, slowly
00:29 < progrock`> nathan7: tho, lucky for me, node, among other JS environements, are getting quite poopular
00:29 < nathan7> progrock`: Yeah
00:30 < progrock`> my work keeps trying to ge tme to learn scala.. i mean, I liek the language and have a lot of respect for it.. but not really what I'm interestedin now
00:30 < nathan7> I found node three years back and thought it was interesting but lacking in ecosystem
00:30 < nathan7> I found it again last summer and.. well, here we are
00:30 < progrock`> nathan7: TBH, when I first heard of node, I laughed at it... 
00:31 < progrock`> nathan7: but at that time I was used to how JS looked 10 years ago.. no so pretty, lol
00:31 < progrock`> I took a good break in web develpoment... had to get laid in HS, and had to get a degree in college, lol
00:31 < nathan7> I'm missing out on those things
00:32 < nathan7> well, mostly the former
00:32 < progrock`> nathan7: ...well college isnot so important.. but man.. i hope you at least get laid once in a while, lol
00:32 < _6a68> did I stumble into #brogrammers
00:32 < jcrugzz> lol
00:32 < nathan7> _6a68: clearly.
00:32 < progrock`> nathan7: if not.. seriously.. hookers jsut haveaq negative stigma... no one needs to know
00:32  * _6a68 goes to bro down and crush code
00:32 < nathan7> _6a68: or maybe #creatures-influenced-by-evolution.
00:33 < progrock`> hahha, ok, enough from me
00:33 < progrock`> back to work
00:33 < nathan7> progrock`: ..I'll just ignore that line, thanks
00:33 < progrock`> lol, nathan7, its the truth
00:34  * nathan7 coughs
00:34 < mmalecki> _6a68: remember about drinking redbulls
00:35 < mmalecki> _6a68: you can't bro down and crush code without drinking sugarfree redbull
00:35 < merpnderp> people who don't use an IDE, what does your terminal setup look like? I like to have a single instance of my terminal app open with 4-5 tabs, each open to VIM with a different file, and then one to start/stop the app and one connected to the db.
00:36 < nathan7> merpnderp: tip: set hidden
00:36 < nathan7> merpnderp: (vim command)
00:36 < Chiffon35> hi all
00:36 < nathan7> merpnderp: lets you have multiple buffers without having them all visible
00:36 < nathan7> merpnderp: much better than multiple vim instances
00:36 < nathan7> also, whoo
00:36 < nathan7> My patch to core HTTP broke shit.
00:36 < _6a68> mmalecki ;-)
00:36 < nathan7> I *paid attention* to compatibility.
00:37 < nathan7> It's just that people are making stupid, unreasonable assumptions in their websocket parsers
00:37 < _6a68> merpnderp: I use different windows, not different tabs, but same basic approach.
00:37 < _6a68> merpnderp: I like to have as much code on screen as possible, so I tend to have really tall windows around 110 cols wide with tiny font.
00:38 < nathan7> vim has splits, _6a68 
00:39 < merpnderp> _6a68: wow, yeah, I keep my font at least size 14. But I love the tabs because I can hotkey between them. Regardless of vim mode I can hit ctrl-j/k and move to the left or right tab.
00:39 < _6a68> yep, that's true. splits and tabs.
00:39 < nathan7> If you set up nicer keybindings, they're brilliant
00:39 < nathan7> _6a68: tabs are nice if you have multiple layouts
00:39 < nathan7> _6a68: but if you just want to have multiple files open, set hidden
00:39 < nathan7> _6a68: and just have multiple buffers
00:39 < _6a68> I like to see the code. that's why I don't like tabs all that much.
00:39 < nathan7> _6a68: vim tabs are not intended for just having multiple files open
00:39 < _6a68> but, I'm glad that works for you
00:40 < nathan7> _6a68: I have splits for that
00:41 < progrock`> merpnderp: how come you have sepearate VIMs open... and dont use buffers and split windows?,,, so much easer to yank and paste
00:41 < _6a68> the thing about splits is it messes up copy-paste if you have mouse integration, and if you need to drop to the command line, you lose all your code.
00:41 < progrock`> haha, oops, didnt see the rest of the onvo
00:41 < progrock`> convo*
00:41 < nathan7> whee
00:41 < merpnderp> progrock`: ctrl-j/k jsut seem easier to move back and forth between files
00:42 < lxf> I've been using vim dwm (https://github.com/spolu/dwm.vim) . ctrl+n for a new view, ctrl+space to "focus"
00:43 < merpnderp> progrock`: I'll have to experiment with setting up ctrl-j/k as hotkeys between next and prev buffers
00:44 < progrock`> merpnderp: and, while it may not be as elite, gvim doesn't hurt
00:45 < progrock`> as for the VIM guys in here... I usually use TabBar to keep track of multiple buffers... but the thing has been makign lot sof duplicates when i do splits... been too lazy to figure out a good fix.. but if anyone has any recommendations, thatd be great
00:46 < progrock`> s/guys/user (again sorry to the females in here)
00:46 < merpnderp> I now have 4 vertical splits on my 13" monitor with 14 size font….I think I have 15 column windows :P
00:47 < progrock`> merpnderp: thats where I live gvim.. I can drag the windows at anytime to show the ones I care about
00:47 < progrock`> love*
00:47 < progrock`> i'm assuming you can do that in VIM as well, just not as easily
00:47 < merpnderp> progrock`: I always ssh into a vm to do my work. Don't know how much trouble it would be to get something which uses X up and running.
00:48 < progrock`> man, I really want a chome pixel... talk about the perfect laptop for my style of development
00:48 < progrock`> merpnderp: you can mount the working directory with sshfs
00:49 < merpnderp> Can you run Firefox on it? :P
00:49 < merpnderp> progrock`: oh nice
00:49 < progrock`> merpnderp: tho I usualyl have a local vim repo setup to do my edits local.. push to the origin (on m server) and then pull into the running site
00:49 < merpnderp> ']
00:49 < merpnderp> \
00:49 <@isaacbw> progrock`: what's a vim repo?
00:49 < progrock`> merpnderp: you can easily run ubuntu side by side with chromos (on the same kernel)
00:49 < progrock`> isaacbw: ahh, git repo
00:49 < progrock`> lol
00:50 <@isaacbw> oh okay
00:50 <@isaacbw> lol
00:50 < progrock`> and a vim repo is my git repo of my vimrc i guess, ;)
00:51 < progrock`> man, one of these days I gotta get thi TabBar thing fixed.. or find a valid replaceement.. I just find it too useful to do away with
00:54 < beg> test
00:54 < beg> test
00:54 <@isaacbw> merpnderp: you know that vim has tabs, right?
00:55 <@isaacbw> oh hey
00:55 < nathan7> vim tabs are for multiple layouts
00:55 <@isaacbw> look at that
00:55 < nathan7> not multiple files
00:55 <@isaacbw> replying to twenty minute old discussions 
00:55 < nathan7> lol
00:55 < nathan7> so socket.io does not depend on ws in its package.json
00:55 < nathan7> but it does depend on it
00:55 < nathan7> what the hell ass
00:55 < merpnderp> isaacbw: i didnt know that. cool
00:56 <@isaacbw> using vim tabs for multiple files is still better than using terminal tabs for multiple files :P
00:56 < merpnderp> what's wrong with using multiple terminals?
00:57 <@isaacbw> there's probably nothing actually wrong with it, it just seems really weird
00:58 < nathan7> it's annoying because you can't yank
00:58 <@isaacbw> oh, you can't yank and put between terminals
00:58 <@isaacbw> dammit
00:59 < merpnderp> hah true
00:59 < progrock`> isaacbw: exactly
00:59 < progrock`> not to mention, auto completeisnt gonna work between terminals
00:59 < merpnderp> wha? autocomplete depends on whats in the file buffers? I wish I'd known that a long time ago.
00:59 <@isaacbw> https://news.ycombinator.com/item?id=5766663
00:59 < progrock`> merpnderp: partially, yes
01:00 <@isaacbw> "The real problem with node.js is the libraries. Just don't use them."
01:00 < nathan7> and you don't realise that tab-per-buffer is wrong until you use splits
01:00 < nathan7> isaacbw: o.o
01:00 <@isaacbw> "A huge portion of existing libraries is full of hidden bugs, shortcomings, race conditions, edge cases, security issues, unscalable, or unmaintainable (and unmaintained)."
01:01 <@isaacbw> (or just don't work)
01:02 < nathan7> and this is clearly not true for any other ecosystem
01:02 < nathan7> 90% of anything is crap
01:02 <@isaacbw> lol
01:02 < nathan7> socket.io is still confusing me
01:02 < nathan7> IT DEPENDS ON WS
01:02 < nathan7> BUT IT DOESN'T
01:03 < nathan7> unless you have ws installed higher up it won't run
01:04 < nathan7> It has literally never depended on ws. It does require('ws').
01:04 < nathan7> How did this ever work?
01:04 < merpnderp> "This is exacerbated by the fact that npm makes it really easy to publish a library." So obviously the solution is to make npm should be much harder to use. As obtuse as possible.
01:05 < nathan7> c797d2a9fb1b51b8d776f1cd2bced980c1708dcd added it as a dep
01:05 < nathan7> but none of the published versions have it as a dep
01:05 < nathan7> Am I losing my sanity?
01:05 < progrock`> nathan7: so its a dep.. move on, lol
01:06 < nathan7> progrock`: it is not in the package.json
01:06 < nathan7> progrock`: npm doesn't install it
01:06 < progrock`> nathan7: so, put it in yours.. yeah, its not perfect.. but no need to be stuck on it... add an issue to github while youre at it
01:06 < nathan7> progrock`: 8daa71302da40d43e8b817d54b2c8f05848cdb98 removed it again
01:07 < progrock`> lol
01:07 < nathan7> that's a merge commit
01:07 < nathan7> no package.json related commits in it
01:08 <@isaacbw> yay git
01:09 < progrock`> so, do you guys at nodejitsu run youre own hardware.. or ar eyou using AWS or similar?
01:09 < nathan7> progrock`: Joyent cloud and Telefonica
01:10 < progrock`> oh,cool
01:11 < nathan7> Okay dudes, I am getting some sweet sweet sleep
01:11  * nathan7 ->
01:18 < Bioshox> i have an express app with an array.length but it seems infinate, anybody any ideas why?
01:18 < Bioshox> i'm iterating over a mognodb collection
01:23 < progrock`> I am kinda surprised at all the node/mongo user management examples that store passwords as plain text
01:26 < txdv> progrock`: i don't think that has to do anything with the language/runtime or database you are using
01:26 < txdv> just good old plain security stupidity
01:27 < progrock`> txdv: i know.. was just looking thru examples, and everyone did
01:28 < progrock`> I'm used to at least seeing an md5sum of pass + salt
01:28 < progrock`> but, whatever, I'm sure people in production are not using plain text
01:28 < progrock`> or at least hope so, haha
01:34 < txdv> progrock`: imagine how useless these passwords are if the salt is revealed
01:34 < progrock`> txdv: obviously.. just saying, I would expect tutorials to show that an easy way to not go plain text is with a salted md5sum of the pass
01:36 < Chiffon35> gn all
01:38 < txdv> progrock`: but if hackers get access to your md5+salt hashes of the passwords, they most likely have access to your salt as well
01:41 < progrock`> txdv: unless I'm mistaken, i think its stil a pretty standard form of basic security for password
01:45 < bnoordhuis> progrock`: broken security, that is. md5, salted or not, is pretty easy to crack on today's hardware
01:47 < SrPx> How can I create an async function? One that will run on the background, and that I can send a callback to it?
01:47 < txdv> bnoordhuis: a unique 16 md5 hash of a password takes 1000 years to crack on the fastest gpu
01:47 < txdv> the 5 char long passwords however ....
01:49 < progrock`> SrPx: ummm... function someName (arguments.. , callback) { do something; callback(...); }
01:49 < SrPx> progrock`: that will block
01:50 <@Nexxy> that's not going to make it async
01:50 <@Nexxy> SrPx, use a child process
01:50 < SrPx> Nexxy: yea but how do I call a function in a background process? I don't quite undestand Node.js's workers, but seems like it spawns a process containing a copy of your entire program (?)
01:51 < bnoordhuis> txdv: you don't need to find the original password, you only need a collision
01:51 < bnoordhuis> which for md5 is close to trivial by now
01:52 <@Nexxy> SrPx, not quite
01:52 < txdv> bnoordhuis: You mean, there are specific algorithms which will try to find collisions?
01:52 < progrock`> ahh, I didnt know md5 was broken
01:52 < bnoordhuis> txdv: yes
01:53 < SrPx> anyway this is what I want: child_process.fork(function(){ ... }) ... something like that... if it doesn't exist should I just use setTimeout then?
01:54 < mikolalysenko> progrock`: Not only is it broken, but it is actively being exploited in the wild
01:54 < mikolalysenko> for example there was this big noise about that flame virus for windows which relied on an md5 collision to fake a windows signature
01:55 < progrock`> so, sha2 a good enoughreplacement for md5?
01:55 < bnoordhuis> progrock`: are you storing passwords?
01:55 < AlbireoX> I use bcrypt
01:55 < deoxxa> pbkdf2
01:55 < deoxxa> EOF
01:56 < progrock`> bnoordhuis: currently.. nope.. maybe in the future
01:56 < bnoordhuis> progrock`: what do you need encryption for then?
01:56 < mikolalysenko> sha is good enough for bitcoin...
01:56 < progrock`> currently just gonna force users to use google.facebook.twitter... or maybe any OpenID account, thats not on my server
01:56 < progrock`> bnoordhuis: sorry, i mean, for future reference, yes for passwords
01:57 < AlbireoX> progrock`: look up node.bcrypt.js, it works really well
01:57 < bnoordhuis> right. what AlbireoX and deoxxa said: bcrypt or pbkdf2
01:57 < txdv> why people don't use vaults for their passwords
01:58 <@Nexxy> if you're not using ripemd160 + whirlpool, you don't care about security
02:00 < bnoordhuis> progrock`: to expand on that, a) rolling your own scheme means you'll probably get something wrong (because everyone does)
02:00 < bnoordhuis> and b) bcrypt and pbkdf2 are pretty much industry standards with good forward security properties
02:01 < EvilPacket> +1 bnoordhuis 
02:02 < deoxxa> pbkdf2 is cool because you can just turn up the rounds as CPUs get faster
02:02 < deoxxa> bcrypt is cool because it has a high memory requirement
02:13 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:18 < progrock`> hmmm, I'm doing:  export NODE_ENV=production
02:18 < progrock`> then startting my app
02:19 < progrock`> but inside the app process.env.NODE_ENV is not showing up as 'production'
02:25 < progrock`> weird, for some reason 'export NODE_ENV=production && forever start app.js" worked even tho 'export NODE_ENV=production' then 'forever start app.js' did not
02:25 < progrock`> anyone have any insight for me on this one?
02:27 < Zolmeister> progrock`: try it again, just to be sure
02:29 < deoxxa> hey, testing people, is there anything i can improve about the structure of these tests? https://github.com/deoxxa/irc-protocol/tree/master/test
02:34 < paulfryzel> progrock`: you could always do 'NODE_ENV=production forever start app.js' to set that process locally without actually exporting the variable
02:36 < progrock`> ok, cool
02:36 < progrock`> hmm, should I be usin passport-google-oauth instead of google-passport?
02:39 < progrock`> ahh, so if I wanted to use some google account features (nt jsut get basic info) i would need to use oauth
02:39 < progrock`> but if I just want some basic account info (ie. email) openID will be fine?
02:41 < RobW_> With require(somemodule).init(), what is that init part? node require init aren't the most search friendly terms.
02:51 < progrock`> umm, shit... does mongo seriously not work at all in OpenVZ?
02:51 < progrock`> ** WARNING: You are running in OpenVZ. This is known to be broken!!!
02:52 < progrock`> so much for my $4 vps, lol
02:54 < gluxon> progrock`: It works fine.
02:54 < gluxon> That warning is for older versions of Mongo.
02:54 < progrock`> ok, yeah just read that on mongo's jira
02:55 < progrock`> I wonder how much of a cost difference there is between xen and openVZ that real cheap providers pretty much always go OpenVZ
02:56 < progrock`> or is it that they can cram more VPSes into the same machine (in other words, kinda lie about the memory you actually have acess to)
02:56 < nightfly> openvz lets you overcommit your storage by a ton is the main difference
02:56 < progrock`> storage? not memory?
02:57 < nightfly> Both a bit. Better OpenVZ providers don't overcommit memory as much though
02:57 < deoxxa> openvz is technically a bit faster than xen
02:57 < progrock`> ok.. that would explain how I'm getting "20gb on an SSD" for < $5 a month, lol
02:58 < progrock`> whatver tho, I dont see this server as a legit prod server nayway... still amazing for the price... 2 vCPUs, 512mb RAM, and 20gb on SSD
03:00 < deoxxa> there's probably like 50 other people on that box
03:00 < deoxxa> lol
03:06 < progrock`> man, was about to say, how is it so cold out in april.. but its fucking may, ddamn
03:06 < progrock`> deoxxa: 50.. prob more, lol
03:06 < progrock`> deoxxa: but no complaints at all... so far exceeding my expectation.. given, they are pretty low
03:06 < deoxxa> lol
03:13 < levilewis> opinions on sequelizejs.com and data associations - anyone here use them? thoughts?? about to use them on a proeject
03:27 < levilewis> what should I do with wheatbread.com?
03:27 < levilewis> it's got a wp install on it now :(
03:29 < mscdex> levilewis: slice and serve
03:29 < levilewis> digital bakery i say
03:29 < progrock`> I would seriously crash my car within 1 week if it had automatic braking
03:29 < mscdex> baked knowledge since 2013
03:29 < levilewis> subaru
03:48 < angelazou> hi, I need to install node.js on ubuntu, currently when I use apt-get install nodejs it says node has already been installed
03:48 < angelazou> I've followed this too for the ubuntu install
03:48 < angelazou> but it says nothing new to install
03:49 < angelazou> however, when I start node I don't see the command line and node --version doesn't output anything
03:51 < s5fs> angelazou: if you run 'which node' do you get the full path to the app?
03:52 < angelazou> s5fs: well to an executable
03:52 < angelazou>  / usr/sbin/node
03:52 < s5fs> angelazou: and when you run 'node -v' it does.. nothing?
03:52 < angelazou> nothing...
03:52 < angelazou> dpkg shows node installed though
03:53 < s5fs> angelazou: weird. i'd remove the package and install from souce. i'm happy to walk you through the process, its easy enough.
03:53 < s5fs> i too am on the ubunto
03:53 < angelazou> s5fs: I guess I just apt-get --purge remove all node packages, clone from the git and make?
03:53 < s5fs> angelazou: also if this is for a dev system i'd recommend using nave
03:54 < s5fs> angelazou: yeah, although i usually just fetch the source tarball from the website
03:54 < angelazou> alright
03:54 < angelazou> is there a specific location I need to install it?
03:55 < s5fs> angelazou: nah, just sudo make install and it'll drop it in /usr/local/bin
03:55 < angelazou> ic, thanks
03:55 < s5fs> also, nave is awesome if you haven't used it before. just a shell script to fetch node versions, super handy for testing.
03:56 < s5fs> i've decided to elect nave as 'script of the week' and the through module as 'module of the week', because i've had fun with both of 'em this week.
03:57 < angelazou> looking up them now...
03:57 < angelazou> the git repo has some serious content
03:57 < angelazou> 50MB and counting
03:57 < s5fs> dang which repo is that, node?
03:58 < angelazou> joyent/node.git
03:59 < s5fs> yeah kinda big :)
03:59 < s5fs> through is super fun, but i'm new to streams in node. it feels super unixy and i likes it.
04:01 < angelazou> the installation dump looks kinda scary...
04:04 < s5fs> yeah that happens
04:26 < xecycle> mscdex: ping
04:27 < Stumbler> Is there are current standard for generating a unique user identifier?  Or should I just let my database auto increment and leave it at that?
04:27 < xecycle> Stumbler: I googled nodejs uuid and there seems to be some.
05:02 < ckknight> For some reason, fs.watch is only calling its callback once when the first change occurs, but never after that. Is this intended behavior?
05:03 < ckknight> this is in v0.10.5, I don't remember this occurring before
05:11 < ckknight> ah, I see, it's to do with TextMate 2
05:25 < lewbowski87458> Has anyone integrated ShareJS with Meteor JS?
05:50 < progrock`> what does process.nextTick mean/do>
06:00 < progrock`> is it standard that an openId identifier is a URL with a query string with an id... or is it usually just the id?
06:00 < progrock`> since I'm getting a full url from gogle
06:00 < progrock`> google*
06:02 < progrock`> I'm happy, got my database up and running :) ... now I just need to plan out somewhat of a schema (i know not exactly required in Mongo... but needless to say need something with regards to how my app is storing shit)
06:05 < progrock`> guess I'll try yahoo to see what they send with regards to identifier
06:17 < progrock`> I need to dig into passport's code... if google and yahoo both use OpenId, why is there passport-google, passport-yahoo, and passport-openid
06:19 < progrock`> maybe just how it handles creating the profile
06:22 < progrock`> Is there any convention to making a collection in Mongo if one doesn;t already exist?.. or do you handle that outside of node, in a deploy script or something?
06:25 < progrock`> also, obviously people dont run node as root... do people usually make a node user secifically for running node?
06:35 <@Nexxy> progrock`, I run a bouncy node process as root, all of my apps as their own user
06:36 < GreenDog> bouncy?
06:36 <@Nexxy> https://github.com/substack/bouncy
06:37 < GreenDog> oh, that's kinda cool
06:37 < GreenDog> i super simple proxy thingie
06:37 <@Nexxy> s/kinda/super/
06:38 < GreenDog> a
06:38 < sinclair|net> Nexxy: hello
06:38 <@Nexxy> sinclair|net, salutations
06:38 < Ritzton> Hello, Hola, Bonjour
06:42 < tesla_im> Group chat built on node.js ... https://www.tesla.im
06:43 < GreenDog> cool
06:43 < GreenDog> how do you do near real time search?
06:43 < GreenDog> and what exactly is it searching?
06:43 < tesla_im> we use elastic search
06:45 < substack> Nexxy: ploy is really fun too :D
06:45 < KevinT> anyone see this HN post?
06:45 < KevinT> http://tomasz.janczuk.org/2013/05/how-to-save-5-million-running-nodejs.html
06:45 < KevinT> ha
06:45 < substack> also hmm maybe I will fix bouncy to finally work in 0.10
06:45 < progrock`> Nexxy: whats the benefit of bouncy over just using nginx?
06:46 < substack> it was a patch in core http that broke it actually
06:46 < substack> progrock`: you can `npm install bouncy`
06:46 < progrock`> substack: haha, that it?
06:47 < substack> you can't `npm install nginx`
06:47 < progrock`> yeah, but I can apt-get install nginx
06:47 < GreenDog> pfft
06:47 < substack> and bouncy is just a library so you can do custom routing logic in js
06:47 < substack> instead of whatever nginx uses
06:47 < substack> nginx is faster
06:48 < progrock`> haha, just realized the writer of bouncy
06:48 < progrock`> well, I'll giv eyou this, the config is easier than nginx
06:48 < progrock`> tho nginx is easy enough
06:49 < GreenDog> how have i not heard of elasic search before?
06:49 < GreenDog> does it suck or something?
06:51 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:51 < jesusabdullah> naw I've heard good things about elasticsearch
06:51 < tesla_im> www.tesla.im uses elastic search. its been good so far
06:52 < chapel> jesusabdullah: elasticsearch is great
06:52 < tesla_im> elastic search is built on lucene
07:01 < jesusabdullah> I read about ES, liked what I saw
07:02 < jesusabdullah> but I thought lucene was a more different thing
07:25 < substack> ok bouncy should now possibly work on 0.10
07:25 < substack> Nexxy: ^^^
07:26 < GreenDog> yay
07:27 < rynkan> is 0.10.4 still the stable version
07:27 < rynkan> ?
07:29 < owen1> i have a bash script - bin/deploy. is there a way (maybe with npm link) to make deploy available in the root folder of my project without the need to type bin/deploy? (just by typing deploy)?
07:31 < minibn> >> [1,2,3,4,5].indexOf(5);
07:31 < purr> minibn: (number) 4
07:31 < minibn> how come in my code this always reaturns -1
07:31 < minibn> ...
07:31 < minibn> >> [1,2,3,4,5].indexOf("5");
07:31 < purr> minibn: (number) -1
07:32 < minibn> this is dangerous
07:32 < Jasonni> i
07:33 < minibn> i need to convert all the types in array
07:35 < minibn> after i convert them into same array and it's still returning -1
07:35 < minibn> what is wrong with this
07:36 < rynkan> man switching from tomcat to TomEE made ram usage go from 1.7GB to 0.2GB... crazy
07:49 < playjax> minibn, that looks right to me
07:50 < playjax> indexOf is using === not ==
07:50 < minibn> ya what is the alternative to this
07:51 < minibn> i just do indexOf(Number(numberVar))
07:51 < playjax> write your own == prototype
07:51 < minibn> no ><
07:51 < playjax> override the indexOf method with your own == method
07:52 < minibn> i dont like to mess whats already built^in
07:53 < ningu> so I've recently ported my api to use restify, and I noticed that it responds to the HEAD method by sending back an Allow header specifying the allowed methods.
07:53 < playjax> Array.prototype.myIndexOf = function(){ blah blah
07:53 < ningu> I was just wondering if there are any other standard(ish) ways in APIs to indicate what methods are available, or if people just put up documentation.
07:54 < ningu> you shouldn't change the prototypes of built-in objects at all.
07:54 < ningu> except for shim libraries, I guess.
07:55 < rynkan> I like having all deliverebles in my /home, do i need to set special permissions for node/nginx to do so?
07:55 < minibn> ill just do Number() thingy
07:55 < playjax> thats crazy ... prototype languages exist to have their prototypes expanded .. thinking the original prototype is sacred and should remain untouched is a form of insanity
07:56 < ningu> playjax: for user-defined objects, sure. for standard JS objects, you will create all sorts of unexpected problems. it's best to just leave them alone.
07:56 < ningu> rynkan: if I understand your question correctly, no
07:56 < rynkan> ningu: thanks :)
07:57 < playjax> ningu - every programmer will make that call for themselves, depending on the job and their experience
07:57 < ningu> playjax: there have been plenty of years of experience with JS to indicate that it's a bad idea.
07:58 < zomg> playjax: you should see the mess libraries made when they kept declaring their shit in Whatever.prototype.. good luck making more than one lib function together
07:58 < zomg> There is a reason why most libraries aren't doing it anymore =)
07:59 < playjax> if you are not writing a library, and the libraries youre using havent done it, then its quite safe to do if you think it will improve a line or two of your code
08:00 < ningu> I don't think it's worth it. too many ifs, not enough benefit. plus, it will confuse people who read the code.
08:00 < playjax> you can always use your own namespaces ... playjax_indexOf = function (){ ...
08:01 < zomg> And that is different from using playjax.indexOf how? =)
08:01 < minibn> what if someone just got into your team and uses the modiefied prototype function without knowing that it was not a virgin anymore
08:01 < ningu> although, I do add prototype methods in thigns like express, to the request and response objects.
08:01 < zomg> The decision that meddling with builtin prototypes is bad wasn't based on just a single programmer's job and experience, but the collective experience of the JS community
08:02 < ningu> but those are node library prototypes and much more restricted -- they only show up for http requests, rather than for any array or object.
08:02 < playjax> ok, youre right, you can create your own array object PlayJaxArray, which uses your own prototype, which then uses the Array prototype, and the performance overhead wont be too high
08:02 < zomg> Why does it need to be that complicated?
08:03 < playjax> thats as uncomplicated as it gets
08:03 < zomg> Except if you just do function makeArrayAwesomer(arrayGoesHere) { dostuff; }
08:04 < playjax> depends on what you are doing with your array, and with your global object
08:05 < zomg> Not really sure what that would be 
08:05 < playjax> theres a reason the global namespace isnt polluted with functions like indexOf (array, item) ... thats why people hate PHP
08:06 < zomg> No, that certainly isn't why people hate PHP :P
08:06 < playjax> you're suggesting a solution like PHP has
08:06 < zomg> Do I really have to spell it out for you
08:06 < zomg> That was just an example
08:06 < zomg> Pretend it said myAss.makeArrayAwsomer = function(whatever)
08:06 < playjax> where every function is part of the global namespace rather than associated with specific objects
08:06 < ningu> anyway you can always put it in a module
08:07 < ningu> and then have people require() it as whatever they want
08:07 < ningu> playjax: in small module files it isn't that big of a deal to have a small number of globals
08:08 < playjax> and putting it in a module is "less complicated" ?
08:08 < ningu> well, not really globals, variables in the scope of the module
08:08 < ningu> you don't have to put it in a module
08:08 < ningu> but if you want to share the functionality that's the right way to do it
08:08 < playjax> you just argued that putting it in a module was less complicated than using a prototype if you dont want to polute the global namespace
08:09 < ningu> yes I did, and I was correct :P
08:09 < playjax> lol
08:09 < ningu> putting it in a module does not pollute the global namespace
08:09 < ningu> Array is the same across all modules in a node app
08:09 < ningu> but var foo = require('foo'); is only in the current module
08:10 < playjax> to each his own, nungu, and personally, having written javascript interpreters in c++ and knowing them as well as i do, i prefer to use prototypes for many things
08:10 < substack> playjax: if you use something like node-style modules then you only need to reason about the lexicals that you've explicitly assigned to variables with require()
08:10 < substack> you don't need to worry about ordering and you can think about much fewer things at once
08:11 < substack> playjax: I think you mean namespace objects? prototypes usually refer to something different
08:11 < zomg> Haha
08:11 < zomg> Ha
08:11 < zomg> Haa..
08:11 < beg> Anyone thats familiar with node-mysql, how do i list all the results? :s
08:11 < substack> playjax: also to see how bad monkey patching classes across multiple files can get, try ruby
08:12 < substack> it's so bad
08:12 < substack> it's not obvious where any code in your runtime was actually defined at all
08:12 < ningu> beg: 'rows' is the second argument to the callback you pass to query()
08:12 < substack> classes don't span single files so if you want to read the docs you've got to go on a gigantic adventure
08:12 < ningu> substack: so would you say that express/connect's strategy of patching http.IncomingMessage etc. is wrong?
08:13 < substack> and the scripts you import effect what functionality is avaliable in your own scope
08:13 < ningu> I don't like it much... but I'm not sure what would be better
08:13 < substack> which is hugely confusing
08:13 < beg> ningu, thanks, downside to programming at 10 am.
08:13 < substack> ningu: the solution is to pass req and res around as parmeters explicitly instead
08:13 < playjax> well i'm fairly new to node, so ive probably yet to get into the state of mind where you just "stick everything in a module" the same way you would write a class object in other languages without worrying about the overhead of loading an external file
08:13 < substack> ningu: instead of patching them like that
08:13 < substack> I agree and don't use any code that modifies req and res in that fashion
08:14 < zomg> playjax: your C background shows from you worrying about things like that ;)
08:14 < ningu> substack: ok. so how to you handle all the stuff you might want to add onto a request -- query params object, parsed body, etc.?
08:14 < substack> playjax: in node the overhead only matters when your server starts up and in the browser you can compile all the required files into a single bundled file
08:14 < substack> playjax: http://browserify.org
08:15 < substack> browserify some_file_with_requires_in_it.js > bundle.js
08:15 < ningu> yeah, the overhead you're talking about is basically non-existent
08:15 < substack> traverses the entire require() graph and inlines all the files in order to make require() work
08:15 < ningu> it's better to design it right and then let node take care of it, or browserify in the browser
08:16 < substack> ningu: I don't add query params or parsed bodies onto requests is how
08:16 < ningu> ok, but where do you put them?
08:17 < substack> in a variable. where else?
08:17 < ningu> I like connect's chaining architecture, and in most of my apps it works well to have a series of functions that are called preceding the route
08:17 < ningu> I guess you could create an api where you had req, res, foo, next
08:17 < substack> var params = querystring.parse(url.parse(req.url).search.slice(1))
08:17 < substack> var querystring = require('querystring'), url = require('url')
08:17 < ningu> ok, but you'd want to do that once per request presumably
08:17 < substack> would you?
08:17 < substack> I don't
08:17 < ningu> well, doing it lazily makes sense
08:18 < substack> anyhow if you end up doing that more than once just write a function
08:18 < ningu> I dunno
08:18 < substack> function parseQuery (u) { return querystring.parse(url.parse(u).search.slice(1) }
08:18 < ningu> I always have certain things I want to do every time per request
08:18 < substack> then you can just var params = parseQuery(req.url)
08:18 < substack> every time?
08:19 < substack> are you using express or raw http?
08:19 < ningu> actually I'm currently using restify
08:19 < substack> I don't find myself having this problem when I just use http.createServer()
08:19 < ningu> for example I always want to parse the JSON body of the requests to my api
08:20 < ningu> and there are a few headers on the response I always want to set
08:20 < ningu> I also always hit my redis cache to see if there's a cached response available before going to the router
08:21 < ningu> I also progressively build up the response JSON through several methods, and it's nice to be able to do res.obj = {}; at the beginning and have that always there
08:21 < ningu> it doesn't seem ideal, but
08:21 < substack> maybe you could just use functions instead
08:22 < ningu> yeah, it might work ok
08:22 < ningu> but the overhead of restify isn't too bad
08:22 < ningu> and it takes care of stuff I don't really want to worry about
08:23 < ningu> I just think it would be nice to be able to achieve a similar architecture without modifying prototypes
08:26 < ningu> substack: what about common API tasks like throttling... do you have a way of factoring that out and plugging it in?
08:26 < substack> why?
08:26 < ningu> I guess if req/res have all the info the throttler needs it can just be a function and you decide what to do with the result
08:27 < substack> just use a function
08:27 < substack> yep!
08:27 < substack> just pass parameters to functions
08:27 < substack> best thing
08:27 < devnull_> Playing with an idea for code browsing / editing tool. Looking for feedback. https://vimeo.com/66992090
08:27 < ningu> substack: so how many parameters is too many? :)
08:28 < substack> it depends on what they are
08:28 < substack> past 3 is when I break out the `opts` objects
08:28 < substack> except for coordinates
08:28 < substack> x0, y0, x1, y1 is sometimes ok
08:28 < substack> depends
08:28 < devnull_> ningu: You can structure your arguments into an object literal and place sets of related items into lists in that structured object
08:29 < ningu> devnull_: of course, I was just wondering what rules of thumb people use
08:29 < ningu> 3 seems about right
08:30 < devnull_> Lambda's are one input one output traditionally. Multiple arguments is like wrapping and currying lambdas around lambdas.
08:31 < devnull_> I'm not sure how the runtime actually handles the execution of multiple variables but since a function in js is an implementation of a lambda it may be implemented in the traditional way but may also be optimized so as not to wrap lambada in lambada for each argument.
08:58 < ashnur> if i may add, the opts object is best when you don't want to always specify all the parameters
08:59 < ashnur> that is why coordinates is ok, because I think you always specify all of them
09:02 < px>  I wish there were a way in npm to sort by last updated
09:05 < Davy> Hi all
09:07 < Davy> What's a quick/good way to get up to speed with nodejs
09:07 < Davy> books or utube vids?
09:07 < substack> Davy: do you already know javascript pretty well?
09:08 < Davy> Not super well going through tuts right now
09:08 < substack> well anyhow I learned node by just reading through the docs http://nodejs.org/api/
09:08 < Davy> but I learn better when using the js in a praticall setting
09:09 < substack> and for everything else there's https://npmjs.org/
09:09 < substack> do you have a project in mind that you want to build?
09:09 < Davy> Nothing in particular just experimentation on server side programming
09:09 < Davy> learning mainly
09:09 < Davy> I watched some utube tuts on express/node
09:10 < substack> poking around at a custom http server is loads of fun
09:10 < Davy> they were not bad however I want a more insight into the workings of how the server works and all that
09:10 < substack> I would just stick to the core http server then
09:11 < substack> and only after you have a good feel for how it works mess with other fancier libs
09:11 < Davy> yeah? 
09:11 < substack> I pretty much always just use the core http.createServer()
09:11 < Davy> With python its pretty simple
09:11 < substack> then I fetch npm modules for all the things I might want to do like serve static assets (I use ecstatic)
09:12 < Davy> I see
09:12 < substack> and then leveldb is really easy as a persistence layer
09:12 < substack> no database to compile and configure
09:12 < Davy> I'll check that out
09:13 < Davy> Do you use express by any chance
09:14 < ashnur> i think he uses it as a curseword :D
09:16 < PaddoSwam> How should one interpret: ship it? 
09:16 < PaddoSwam> The channel topic
09:17 < Davy> G2G thanks substack
09:36 < xecycle> mscdex: ping
09:40 < Alz> master5o1 nice jsBot i will probably fork u :)
09:41 < Alz> fork done. ;)
09:58 < alfonsodev> is npm install -dev recursive ?
09:58 < alfonsodev> is there a way to install only deDevendencies of the first level then ?
10:00 < nathan7> alfonsodev: just npm install
10:00 < nathan7> alfonsodev: assuming your NODE_ENV is not set to production
10:01 < alfonsodev> that make sense, ye now it works nice, thanks
10:07 < xecycle> Is it safe to remove ~/.node-gyp after a package has been installed?
10:11 < nathan7> xecycle: Yep
10:11 < xecycle> nathan7: Thx
10:21 < Robbilie> hello guys, anybody heard of peer.js?
10:21 < Robbilie> i have a question related to this...
10:23 < gildean> Robbilie: yeah, i've made a small demo with it to try it out
10:23 < Robbilie> is there a nod.js client library?
10:26 < fiws> any1 ever used https://github.com/hij1nx/EventEmitter2 ? do i need to browserify it?
10:30 < minibn> what is your favorite background music while coding
10:32 < gildean> Robbilie: i don't think peerjs has a node client library as it uses the browserside api for the clients, there might be some other project that has one tho'
10:32 < ningu> fiws: browserify supports stock node EventEmitter
10:34 < fiws> ningu, i'm using requirejs. do you know a quick way how i can get eventEmitters in the browser?
10:35 < ningu> browserify -r events > bundle.js
10:35 < fiws> gonna try it, thanks!
10:35 < ningu> I don't know requirejs. but if you make that bundle you can just do, var events = require('events') as you would in node
10:35 < ningu> once you've loaded it in a script tag
10:36 < ningu> or whatever modules you put in the bundle
10:37 < fiws> browserify defines "require" ?
10:37 < ningu> yes
10:37 < fiws> well, so does requirejs. thats a problem
10:38 < ningu> well, I suppose you can't use them together
10:38 < ningu> I have no idea
11:15 < HSL> morning!
11:30 < HSL> s5fs: did you see what eventually caused the error yesterday? :)
11:31 < mscdex> xecycle: pong
11:32 < xecycle> mscdex: Huh.  Again in your mariasql, how do I prepare "LIMIT :count"?  The server would respond with error in syntax when executed with {count: parseInt('5')}, like "check syntax near ''5''".
11:34 < testdev_> hi in expressjs anyone have idea why expressjs app does not capture the HTTP GET request for "101 Switching Protocols" with url starting with ws:// ???
11:35 < tuhoojabotti> erm ws:// doesnt seem like a http get.
11:35 < mscdex> xecycle: mariasql's prepare() does not support unquoted values.
11:36 < xecycle> mscdex: Well.  Any workarounds available?  Or are you going to implement it?
11:36 < mscdex> xecycle: it's main job is to make sure quoted values are escaped properly to avoid injection attacks
11:37 < mscdex> xecycle: if you need something more capable, you might look at some of the many sql generator modules on npm
11:38 < xecycle> mscdex: Hmm.  I thought by "prepare" there was no escaping going on.
11:39 < mscdex> xecycle: "prepare" here means parsing the query for placeholders and creating a reusable function based on that information for easy substitution
11:40 < xecycle> mscdex: Okay then.  I had expected it to be a real prepare, parsed by the server.
11:40 < mscdex> and faster substitution
11:40 < mscdex> no
11:41 < myndzi> that seems poorly named
11:41 < xecycle> mscdex: Does any of the mysql libraries does a real prepare?
11:42 < mscdex> xecycle: i do not know offhand
11:42 < myndzi> anyone care to try something for me? it's hard to find volunteers on irc this hour heh
11:43 < myndzi> http://jsbin.com/ewanub/3 <- enter 'the quick brown fox jumps over lazy dogs' and hit enter
11:43 < xecycle> mscdex: Thanks anyway.  Think I'll just accept it :(  am not yet capable to fix anything of this sort.
11:43 < myndzi> if you typo, erase it all and start over
11:43 < myndzi> i'm curious what number you get
11:43 < myndzi> do it a second time and that number too :)
11:45 < Typo> dog or dogs?
11:45 < myndzi> dogs
11:45 < Typo> k
11:46 < myndzi> i suppose i should put some text in there or something
11:46 < myndzi> i didn't plan on having anyone else do it, was just satisfying my own curiosity
11:46 < myndzi> i get about 2-3 comparing different entries of my own
11:46 < myndzi> if i switch between dvorak/qwerty i get 9-10
11:46 < myndzi> i'm curious what other [qwerty] users get
11:47 < Typo> it seems to change everyt ime
11:47 < Typo> time
11:47 < myndzi> it would
11:47 < myndzi> the first pageload it's comparing against a recorded entry of mine
11:47 < myndzi> every time after that is comparing to the previous entry
11:48 < myndzi> you can change the text too if you want
11:48 < myndzi> it's trying to compare the consistency of the timing between letter digraphs
11:48 < Typo> so tell me exactly how to help ya
11:48 < Typo> lol
11:48 < myndzi> well, characters
11:48 < myndzi> just type the text, give me the number the first and second time
11:48 < myndzi> ;)
11:49 < myndzi> ignore the garbage text
11:49 < Typo> just # right?
11:49 < Typo> k
11:49 < myndzi> also your nick seems a bit amusing in this context ;D
11:49 < Typo> 9
11:49 < Typo> and should ir refresh?
11:50 < Typo> ;p
11:50 < Typo> 7
11:50 < Typo> w/o refreshing, 9 and 7
11:51 < myndzi> interesting
11:51 < myndzi> do refresh
11:52 < myndzi> the first number after refresh will be how similar you type to me, the second number is more about how self-consistent you are
11:54 < Typo> o ok
11:54 < gratula__> hello anyone know how to capture in express this type of request? it doesnt come through in any app.all handlers. why? ==> GET ws://whatever.com/whatever HTTP/ 1.1 Upgrade: websocket
11:55 < Typo> 9 and 10
11:55 < myndzi> huh
11:55 < myndzi> interesting
11:55 < myndzi> how fast do you type btw?
11:56 < myndzi> gratula__: i don't think connect supports websockets (?)
11:56 < Typo> now 10 and 11
11:56 < Typo> well i dunno
11:56 < Typo> i pick and peck but I do it pretty fast
11:56 < myndzi> oh, this is old data
11:56 < myndzi> it seems most people use socket.io for websockets
11:56 < myndzi> it should be picking those requests up instead of express
11:57 < myndzi> Typo: makes sense
11:57 < gratula__> using socket io. so it always falls back to the xhr-polling
11:57 < gratula__> it work if i connect to port directly but iwanna proxy it
11:57 < gratula__> so could be like u said, connect wont see that request
11:57 < myndzi> proxy it for what reason?
11:57 < gratula__> so it doesnt see it when i try to proxy it
11:57 < gratula__> it only proxy the xhr-ones correctly
11:57 < myndzi> right, most likely because it doesn't support websockets
11:58 < gratula__> i see
11:58 < myndzi> it's not a proxy server after all
11:58 < gratula__> thanks!
11:58 < myndzi> but why do you need to?
11:58 < myndzi> there may be another solution
11:59 < gratula__> probably is. i dont wanna use http-proxy for routing, just for proxying (i like the app.all stuff for routing). do u know if there is something kind of like the app.router stuff that can see the websocket requests?
11:59 < gratula__> then i can just use node-http-proxy to proxy it after that
12:00 < gratula__> i just really wanna proxy it from port 80 i dont want to have to connect directly to the port for socketio
12:00 < myndzi> doesn't node-http-proxy support websockets?
12:00 < gratula__> well it does but i also want to route it from certain url rather than have to use default
12:00 < myndzi> back up a sec
12:00 < myndzi> there's two components
12:00 < gratula__> i can maybe figure it out but lmk if u know off top of ur head 
12:00 < myndzi> one is fetching the client socket.io script
12:00 < myndzi> and the other is establishing the websocket
12:01 < myndzi> if you're just trying to make the socket.io client be consistent with everything, you can serve a static copy
12:01 < myndzi> if you're trying to make the websocket connection use port 80 alongside express, i don't really see the point of going to the trouble
12:01 < myndzi> i don't know what you might do for that
12:01 < myndzi> other than put a reverse proxy in place
12:02 < myndzi> or dig into the Connect code (?)
12:03 < Jasonni_> j
12:03 < gratula__> i want it not to use port 80 actually to proxy it, so i dont like io.listen(app) (which actually gives an error anyway btw for me) i wanna just listen io on some other port, but proxy to that from 80. i suppose express doesnt support it, right? any other thing like express's router thingy that can listen for ws connection and then i can just proxy it within callback? it work for xhr, but i cant make it to work for ws mode
12:03 < gratula__> i want it to i mean*
12:06 < basss> hello, is there any voice recognition library for nodejs ?
12:07 < mscdex> lol
12:08 < gratula__> https://npmjs.org/package/speech
12:08 < gratula__> I think Trop (Cloud Api, which ha ssome voice recognition) is a proprietary cloud framework, i think it uses some nodejs in stack
12:08 < gratula__> Tropo*
12:09 < basss> gratula__: have you used it ?
12:09 < gratula__> not that package
12:10 < gratula__> Tropo yes
12:10 < gratula__> Tropo costs some money but not a lot, but its for telephony or VOIP stuff
12:10 < basss> gratula__: oh okay
12:10 < gratula__> it looks like something made for devs, it can integrate with ur own scripts, u can even host the "Tropo scripts" on your server
12:11 < basss> i'll check it out 
12:11 < mscdex> basss: if you want to do speech recognition locally, you'll probably want to use something like julius: http://julius.sourceforge.jp/en_index.php
12:13 < basss> mscdex: can i plug it in to node ?
12:14 < mscdex> basss: your choices would be either to write a binding or execute a child process from node
12:14 < basss> mscdex: oh i see
12:15 < mscdex> basss: if you're going to write a binding, i would make sure to do the processing in a separate thread
12:16 < basss> mscdex: to prevent slowing down the main thread 
12:16 < mscdex> basss: right. even though julius is described as "high-performance", it may still take some time, especially for higher accuracy
12:17 < basss> mscdex: okay
12:21 < r04r> Is the v8-profiler package still supposed to work? Getting a bunch of compiler errors on windows and permission errors on linux (...while running as root, that being a bad practise aside)
12:29 < Industrial> With dnode and shoe, how do I make the server send a RCP call (dnode) to all clients, instead of a client sending a call to the server?
12:45 < sw99> hi
12:46 < sw99> is it recommended one use mongodb instead of sqlite with node.js?
12:46 < sw99> is mongodb better supported?
12:52 < nihilista> can someone maybe help me with this simple problem please? =) http://stackoverflow.com/questions/16754485/starting-node-js-app-as-a-background-process
12:56 < Sven_vB> i think you'd make life for admins easier if you'd use just ascii output without fancy geometric stuff like "cursorTo"
12:56 < Sven_vB> what are you trying to achieve with those?
12:57 < Sven_vB> maybe you can transform that intent into code that uses "\r"
12:57 < Industrial> got it, require('shoe')('/reload-server').on('end',function(){location.reload()}); :P
12:57 < Industrial> Howmany connections can I open? (e.g. besides /reload-server)
13:09 < juliangruber> Industrial: https://github.com/dominictarr/client-reloader
13:11 < zenetik_> hi. Do you know some keywords/hits to make me learn how do i have to write a code to be able to "chain" things : auth('test','test').doSomething(args1).doSomethingElse(args2)
13:12 < Industrial> juliangruber: that is perfect ty. I was aiming at development but I guess this is usable in production aswell?
13:12 < juliangruber> Industrial: in production servers can die any time and that shouldn't case a reload, e.g. the user might be editing a form element
13:12 < Industrial> right
13:13 < Industrial> juliangruber: would you recommend another component for watching file changes and killing/restarting a server when that happens?
13:13 < juliangruber> Industrial: I'd do that normally. I used to use isaac's supervisor but that caused memory issues
13:14 < juliangruber> Industrial: use substack's ploy
13:14 < juliangruber> just git push and it restarts your server
13:14 < sw99> noone?
13:15 < Industrial> I'd like it on save. Guess I need to code this one myself to include things like compiling livescript to js, sass/less/stylus to css etc first and then restarting the server
13:18 < Industrial> fs.watch() and child_process.exec. I guess it could even be a container so I could have 2 child processes 1 for the new 1 for the old and only refresh (kill the old) once the new is done starting
13:19 < Kakera> is there a module for string-based machine learning?
13:19 < Kakera> basically, I want to give it a string and it says whether it's good or bad
13:19 < Kakera> and if it's wrong, it learns
13:20 < Industrial> what does it learn from the string if it's wrong?
13:20 < Industrial> (just curious)
13:20 < nathan7> Kakera: Like a Bayes classifier?
13:21 < Kakera> let me look that up
13:23 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:24 < zenetik_> hi. Do you know some keywords/hits to make me learn how do i have to write a code to be able to "chain" things : auth('test','test').doSomething(args1).doSomethingElse(args2)
13:26 < Industrial> zenetik_: return this;
13:26 < Kakera> nathan7: yeah something like that
13:27 < zenetik_> Industrial: do you have a snippet or a keyword so i can google ?
13:27 < zenetik_> i've tried "dynamic function call" but too many inappropriated things
13:28 < Bubo> zenetik_: callbacks?
13:29 < zenetik_> Bubo: no lol. Let me try jsfiddle
13:29 < Bubo> so in auth -> return doSomethings(agrs1) and in doSomethings return doSomethingElse
13:29 < Bubo> is that what you want?
13:30 < zenetik_> my answer is strange : i don't know
13:30 < zenetik_> wait
13:31 < Kakera> https://github.com/harthur/classifier this one looks nice
13:32 < zenetik_> Industrial: thanks !
13:32 < Industrial> zenetik_: function MyProto() {}; MyProto.prototype.myMethod=function(){return this;}
13:32 < zenetik_> Industrial: http://jsfiddle.net/Z7S2X/
13:32 < Industrial> a=new MyProto();a.myMethod().myMethod();
13:32 < zenetik_> Industrial: yeah you give me the good hint
13:33 < zenetik_> Industrial: thanks a lot
13:33 < Industrial> np
13:33 < zenetik_> Bubo: thanks for your help
13:34  * zenetik_ now making the first msgpack api node's module for metasploit, existing one is using command line
13:50 < zenetik_> is there a standard way to merge object in js ?
13:51 < zenetik_> i mean, default = {foo1:'bar1'}, setDefault({foo1:'bla',foo2:'bar2'}), so i can have new default = {foo1:'bla',foo2:'bar2'}
13:51 < zenetik_> (it's only string or int or boolean, nothing else)
13:56 < nihilista> Sven_vB sorry, was away for a bit… you thought that i replace all stdout lines with just regular console.log() stuff?
13:59 < mscdex> zenetik_: not built-in if that's what you're asking
13:59 < zenetik_> yep
13:59 < zenetik_> thx
13:59 < zenetik_> got a routine i've made few months ago, just wondering if there is a best practice in fact
13:59 < mscdex> zenetik_: actually i take that back
13:59 < mscdex> zenetik_: there's this, but it's private and undocumented: https://github.com/joyent/node/blob/v0.10/lib/util.js#L565
14:00 < zenetik_> mscdex: thanks, got something similar here
14:01 < zenetik_> mscdex: interesting file btw
14:05 < zenetik_> how can i can wait to foo() result before go in bar() ? http://jsfiddle.net/Z7S2X/1/
14:09 < mscdex> zenetik_: you could have an internal queue
14:10 < mscdex> i dunno
14:11 < mscdex> and then you would either have some kind of termination method to start processing the queue or start processing on the next tick
14:12 < mscdex> *shrug*
14:12 < zenetik_> mmhh
14:12 < zenetik_> i see
14:14 < zenetik_> i understand now the ".exec()" at the of some mongo/mongoose code
14:19 < zenetik_> i think i'm reinventing the wheel. my exec() have just to loop the queue using async or similar
14:21 < gildean> zenetik_: you can't really wait, but you can pass a callback like so: http://jsfiddle.net/Z7S2X/2/
14:22 < zenetik_> gildean: yep, this is what i don't want ;) now looking for queue/async
14:22 < zenetik_> gildean: thanks
14:23 < gildean> zenetik_: np, async does have the methods you're looking for
14:30 < soheilpro> does writeable stream have a data event?
14:33 < squeakytoy> hm, why isnt there a node.js open source twitter clone?
14:33 < Sven_vB> nihilista, yes. or stdout.write if you like, just not fancy stuff that makes assumptions about the output device (like being a device, being rectangular, being erasable, ...)
14:35 < nihilista> thanks for tip Sven_vB, will definitely try that! i didn't read the original code myself so i don't know exactly why is it coded that way, but will try to "fix" it so it works the same as before but without 'fancy' stuff =)
14:38 < Sven_vB> "clear" in combination with "cursorTo(0)" looks very much like an attempt to re-invent "\r                                  \r" by someone who came from GUI design and didn't know about control characters ;)
14:44 < Sven_vB> on the other hand it might be a clever abstraction to render that string
14:49 < cjb> Hi, is it possible to build node on python2.5?
14:59 <@Nexxy> l
14:59 <@Nexxy> lol woops
15:02 < fayimora> is there something like pow(http://pow.cx/) for node/js apps?
15:02 < Sven_vB> what are the core features and benefits of pow?
15:04 <@Nexxy> fayimora, I think local-tld might be similar
15:04 < RLa> makes you superhero?
15:05 <@Nexxy> https://github.com/hoodiehq/local-tld
15:05 <@Nexxy> https://github.com/hoodiehq/local-tld#no-original-work
15:06 < RLa> is it like /etc/hosts file?
15:07 < fayimora> Hmm taking a look Nexxy thanks
15:07 < Sven_vB> seems like a proxy and hosts file manager combined
15:08 <@Nexxy> fayimora, :)
15:10 < fayimora> Nexxy: haven't finished reading but I use grunt to start a server.. presumably I can link this up with it somehow right?
15:11 <@Nexxy> I'd imagine
15:11 <@Nexxy> but I don't use grunt (or local-tld) so I'm not sure
15:11 < fayimora> lol ok.. I'll read on
15:11 <@Nexxy> but you can get help w/ local-tld in #hoodie
15:16 < wao> Nexxy: oh hia, will you be at berlin jsconf? :)
15:17 <@Nexxy> wao, I can only hope! :)
15:17 < wao> naah ! )
15:17 < wao> I also found in paris is some conference about JS
15:31 < macbn> >>    parseInt('fuck', 16);
15:31 < purr> macbn: (number) 15
15:31 < macbn> >>    parseInt('test', 16);
15:31 < purr> macbn: (number) NaN
15:31 < macbn> why was that gives 15?
15:33 < nathan7> macbn: 0xF == 15
15:34 < nathan7> macbn: in hexadecimal, F is 15
15:34 < macbn> oh
15:34 < nathan7> >> parseInt('15uck')
15:34 < purr> nathan7: (number) 15
15:54 < macbn> brackets.io this looks cool
15:55 < macbn> but it doesnt recognize require
15:55 < macbn> shows lint error
15:58 < Guest___> Hey Im running a socket server with the net libraries, and after about a day or two, the server actually goes down but the process is still running. Any advice?
16:04 -!- Topic for #Node.js: ship it - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
16:04 -!- Topic set by Nexxy [~emily@unaffiliated/nexxy] [Fri May 17 22:18:50 2013]
16:04 [Users #Node.js]
16:04 [@isaacbw         ] [ crescendo     ] [ guor            ] [ levilewis      ] [ oz             ] [ ssafejava       ] 
16:04 [@isaacs          ] [ cronopio      ] [ guybrush_       ] [ liammcl        ] [ Pagan          ] [ st_luke         ] 
16:04 [@konobi          ] [ cTIDE_        ] [ Gwl             ] [ lifelike       ] [ pandark_       ] [ stalled         ] 
16:04 [@mbalho          ] [ curvedmark    ] [ gwoo            ] [ Lifkug         ] [ parasight      ] [ stbuehler       ] 
16:04 [@MI6             ] [ cxreg         ] [ gyaresu         ] [ Linus_         ] [ passcod        ] [ stef_           ] 
16:04 [@Nexxy           ] [ Cyberpew      ] [ hackygolucky    ] [ liwen          ] [ patrickod      ] [ stephank        ] 
16:04 [@piscisaureus_   ] [ D4RK-PH0ENiX  ] [ Hadaka          ] [ lmjabreu       ] [ paulfryzel     ] [ StephenS        ] 
16:04 [@trevnorris      ] [ d4rklit3      ] [ hakunin         ] [ LocalPCGuy     ] [ paulwe         ] [ Stew-a          ] 
16:04 [ [[zzz]]         ] [ dadicool      ] [ halfhalo        ] [ lordblackfox   ] [ pcarrier       ] [ stonebranch     ] 
16:04 [ [Fudge]         ] [ Daizz         ] [ happyfac1       ] [ Lorentz        ] [ percival       ] [ stride          ] 
16:04 [ [null]          ] [ daleharvey    ] [ Havvy           ] [ lostc          ] [ PeterBooker    ] [ strmpnk         ] 
16:04 [ \mSg            ] [ Damn3d        ] [ heath           ] [ lrvick1        ] [ peterbra1en1   ] [ stuartmcfarlane ] 
16:04 [ ^esc            ] [ DaMorpheuS    ] [ hellopat        ] [ LuckyBurger|nap] [ peterbraden1   ] [ Stuk            ] 
16:04 [ __main__        ] [ dan_johnsin   ] [ HeN             ] [ luigy          ] [ peterfile      ] [ stutter_        ] 
16:04 [ __sri           ] [ danheberden   ] [ henrikhodne     ] [ luminous       ] [ petschm        ] [ stylus          ] 
16:04 [ _cheney4        ] [ danishabdullah] [ heroux          ] [ Lunar_Lamp     ] [ ph8            ] [ styol           ] 
16:04 [ _dizzy          ] [ danmactough   ] [ hhuuggoo        ] [ luruke         ] [ PhanLord       ] [ subsilico       ] 
16:04 [ _janne          ] [ David__       ] [ hij1nx          ] [ lyanchih       ] [ PhilK          ] [ substack        ] 
16:04 [ _Renegade       ] [ dawolf        ] [ hipertracker    ] [ m0             ] [ philo23        ] [ sunoano1        ] 
16:04 [ _Steve_         ] [ dazoe         ] [ hipsterslapfight] [ M28            ] [ phI||Ip        ] [ supersym        ] 
16:04 [ a_meteorite     ] [ dcamp         ] [ Hosh            ] [ M2Ys4U         ] [ PhysX          ] [ sveisvei        ] 
16:04 [ AAA_awright     ] [ dch           ] [ howdynihao      ] [ M2Ys4U_        ] [ piklu          ] [ Sven_vB         ] 
16:04 [ aandy           ] [ de_henne      ] [ HSL             ] [ maaarghk1      ] [ pinja          ] [ SvenDowideit    ] 
16:04 [ Aartsie         ] [ dec           ] [ hueniverse      ] [ macbn          ] [ PL_um          ] [ svnlto          ] 
16:04 [ aboudreault     ] [ deetb         ] [ hvq             ] [ macgregor      ] [ plato          ] [ swaagie         ] 
16:04 [ abstractj       ] [ defunctzombie ] [ hydrawat        ] [ Mack           ] [ polyrhythmic   ] [ Swadq           ] 
16:04 [ abumirqaan      ] [ denysonique   ] [ iain__          ] [ madscientist_  ] [ pplcf          ] [ swaj            ] 
16:04 [ Acrack          ] [ Derander      ] [ iaincarsberg_   ] [ Maerten        ] [ pquerna        ] [ syntax          ] 
16:04 [ AdamMagaluk     ] [ derchiller    ] [ ianjm           ] [ majek          ] [ prawnsalad     ] [ syskk           ] 
16:04 [ adrianF         ] [ DesiJat       ] [ iapain          ] [ manacit        ] [ premach        ] [ t_p             ] 
16:04 [ adrianlang      ] [ dested        ] [ ibrahim         ] [ ManneW         ] [ prismatictrail ] [ tahu            ] 
16:04 [ AdrienBrault    ] [ devdazed      ] [ ickyb0d         ] [ manuelbieh     ] [ Probeus        ] [ tanepiper       ] 
16:04 [ aeberlin        ] [ devil__       ] [ icodefor_       ] [ mape           ] [ Proditor_      ] [ tankbusta       ] 
16:04 [ aidanie         ] [ devsharp      ] [ igl             ] [ maqr           ] [ prophile_      ] [ tarruda         ] 
16:04 [ Aikar           ] [ dhpe          ] [ iksik           ] [ marcooliveira  ] [ przemoc        ] [ tassmjau        ] 
16:04 [ airtonix        ] [ didiergm      ] [ ImBcmDth        ] [ marienz        ] [ psino          ] [ tauren          ] 
16:04 [ ajpiano         ] [ DiegoMax      ] [ inarru          ] [ marlun         ] [ purr           ] [ teadict         ] 
16:04 [ akshayms        ] [ diffalot-away ] [ Incip           ] [ Marsup         ] [ pvankouteren   ] [ tec27           ] 
16:04 [ alanmeira       ] [ digiwano      ] [ Industrial      ] [ maru_cc______  ] [ px             ] [ techkid6        ] 
16:04 [ AlbireoX        ] [ diminoten     ] [ InezK_away      ] [ mashlol        ] [ pyykkis        ] [ TechnoCat       ] 
16:04 [ aledbf          ] [ djoot         ] [ infynyxx        ] [ master5o1      ] [ qbit           ] [ tellnes         ] 
16:04 [ alexwhitman     ] [ dleonardi     ] [ inimino         ] [ master5o1|work ] [ qos            ] [ terietor        ] 
16:04 [ Alezaru         ] [ dmilith       ] [ innociv         ] [ matjas         ] [ qwerty|        ] [ tg              ] 
16:04 [ alfonsodev      ] [ dmz           ] [ Inoperabled     ] [ matkl          ] [ r04r           ] [ tgies           ] 
16:04 [ AllStruck       ] [ dnyy          ] [ ins0mnia        ] [ matt_c         ] [ radiodar1o     ] [ thanpolas       ] 
16:04 [ andrew12        ] [ Domenic_      ] [ instence        ] [ mattd_         ] [ radiodario     ] [ TheAceOfHearts  ] 
16:04 [ anildigital_work] [ don_jones     ] [ Internet13      ] [ mattdawson     ] [ raj            ] [ thealphanerd    ] 
16:04 [ AntelopeSalad   ] [ DoniRS        ] [ intripoon_      ] [ mattly         ] [ ralphholzmann  ] [ thedaywillcome  ] 
16:04 [ apb             ] [ DonRichie     ] [ ioNull          ] [ maveonair_     ] [ Ralt           ] [ TheDeveloper___ ] 
16:04 [ arduix          ] [ doowb         ] [ irclogger_com   ] [ mawuli         ] [ ramitos        ] [ thejefflarson__ ] 
16:04 [ arielserafini   ] [ doug          ] [ ircretary       ] [ max_well1r     ] [ rampr          ] [ TheJH           ] 
16:04 [ arnorhs         ] [ Draggor       ] [ ironfroggy      ] [ maxani         ] [ randallagordon ] [ TheLink         ] 
16:04 [ arsdmthe        ] [ drey_         ] [ isaacs_         ] [ maz-dev        ] [ Rantanen       ] [ thelleo         ] 
16:04 [ asellus         ] [ drodger       ] [ itsrachelfish   ] [ mbecroft       ] [ rawtaz         ] [ TheMoonMaster   ] 
16:04 [ asherkin        ] [ DrPizza       ] [ ivan\           ] [ mbor           ] [ rax0           ] [ therealkoopa    ] 
16:04 [ ashnur          ] [ DrShoggoth    ] [ ivan`           ] [ mbroadst       ] [ rcombs         ] [ thread          ] 
16:04 [ asrail          ] [ drspin        ] [ j0ni            ] [ Mchl           ] [ rcs            ] [ Tim-_-_-        ] 
16:04 [ aszeszo         ] [ drudge        ] [ jackyalcine     ] [ McMAGIC--Copy  ] [ ree            ] [ tim_smart       ] 
16:04 [ atatsu          ] [ dscape        ] [ jackyyll        ] [ mdevolving     ] [ reid           ] [ timkuijsten2    ] 
16:04 [ Atlantic777     ] [ duke__        ] [ jammsen         ] [ meckanis1      ] [ remysharp      ] [ tjfontai1e      ] 
16:04 [ augustl         ] [ durnik_       ] [ Jamy            ] [ med_           ] [ rendar         ] [ tklun           ] 
16:04 [ av9             ] [ dwcook        ] [ jan____         ] [ medice         ] [ retornam       ] [ tmpvar          ] 
16:04 [ avital          ] [ dypsilon      ] [ jaredrhine      ] [ mekwall        ] [ rgmarcha_      ] [ tokuhirom_      ] 
16:04 [ avo_            ] [ E_mE          ] [ jareiko         ] [ mephux         ] [ RichardBronosky] [ tomaw           ] 
16:04 [ awc737          ] [ ed209         ] [ jasonrm         ] [ MerlinDMC      ] [ rickibalboa    ] [ tomb_           ] 
16:04 [ azbarcea        ] [ edude03       ] [ JasonSmith      ] [ merpnderp      ] [ riku           ] [ TomRone         ] 
16:04 [ azend           ] [ eighty4       ] [ Jaylee__        ] [ mertimor       ] [ ripples        ] [ tomshreds       ] 
16:04 [ azhwkd|away     ] [ eins78        ] [ jayne           ] [ meso           ] [ Ritzton        ] [ toothrot        ] 
16:04 [ b2l             ] [ ejnahc        ] [ jayrobot        ] [ metadaddy__    ] [ RLa            ] [ topaxi          ] 
16:04 [ bacon           ] [ El_Angelo     ] [ jb__            ] [ metellus       ] [ rmill          ] [ topi`           ] 
16:04 [ balgarath_      ] [ elij          ] [ jcastelli       ] [ mferranti      ] [ Robbilie       ] [ torgeir         ] 
16:04 [ banzounet       ] [ elijah-mbp    ] [ jdelgado        ] [ mfn            ] [ robertkowalski ] [ Torsten         ] 
16:04 [ baranaby        ] [ elliottcable  ] [ jden_           ] [ mfrauenholtz   ] [ roger_rabbit   ] [ Trangar         ] 
16:04 [ bastinat0r      ] [ emilsedgh     ] [ jefferai        ] [ mickhansen     ] [ roger_raymond  ] [ trepatudo       ] 
16:04 [ bbloom          ] [ EnosFeedler   ] [ jeffmjack_      ] [ mihamina       ] [ Rolken         ] [ trodrigues      ] 
16:04 [ bear            ] [ enriclluelles ] [ jesseproulx_    ] [ mikeal         ] [ rolleiflex     ] [ tuhoojabotti    ] 
16:04 [ beatpanic       ] [ epa_          ] [ jesusabdullah   ] [ mikey_p        ] [ rom1504        ] [ txdv            ] 
16:04 [ beawesomeinstead] [ Epeli         ] [ jeswin          ] [ mikolalysenko  ] [ RORgasm        ] [ Typo            ] 
16:04 [ beg             ] [ epiloque      ] [ jez0990         ] [ minibn         ] [ rphillips      ] [ ub|k            ] 
16:04 [ ben_alman       ] [ ePirat        ] [ jibay           ] [ MiracleBlue    ] [ rtgibbons      ] [ Urbanizator     ] 
16:04 [ bencevans_afk   ] [ er1c_         ] [ jimbot          ] [ mirkok         ] [ Rubennn        ] [ Validatorian    ] 
16:04 [ bengl           ] [ ereslibre_work] [ jimmyff         ] [ MitchW         ] [ rudolfrck      ] [ vampirefrog     ] 
16:04 [ bentruyman      ] [ Erriond       ] [ jimt            ] [ MitchyNuts     ] [ ruff           ] [ VaporOne        ] 
16:04 [ Benvie          ] [ estebistec    ] [ jjore_          ] [ mjr84          ] [ rurufufuss     ] [ varmais         ] 
16:04 [ Benvie_         ] [ EToS          ] [ jkarsrud        ] [ mlocher        ] [ RushPL         ] [ Vbitz           ] 
16:04 [ beuk            ] [ euoia         ] [ jlord           ] [ mmalecki       ] [ rvagg          ] [ VesQ            ] 
16:04 [ bhangm          ] [ eventualbuddha] [ jmaugue         ] [ mnaser         ] [ rwaldron       ] [ visnup          ] 
16:04 [ bigx            ] [ EvilJStoker   ] [ jmoney          ] [ monokrome      ] [ rworth         ] [ vitoss          ] 
16:04 [ Bilge           ] [ EvilPacket    ] [ JmZ_            ] [ MoRn           ] [ ryanseddon     ] [ vlajos_         ] 
16:04 [ billy           ] [ EvilTownCat   ] [ jn              ] [ motaka2        ] [ rynkan         ] [ volitek         ] 
16:04 [ billybob_han    ] [ exos_         ] [ joe_k           ] [ mp_            ] [ s2g            ] [ Wa              ] 
16:04 [ bitfed          ] [ Ezku          ] [ Joefish]off     ] [ mpajor_o15     ] [ s3shs          ] [ wagtag          ] 
16:04 [ Blorb           ] [ Fabryz        ] [ joeytwiddle_    ] [ MrDHat         ] [ s4muel         ] [ wang            ] 
16:04 [ blup            ] [ fantasywind   ] [ JohnONolan      ] [ mreeder        ] [ s5fs           ] [ wankdanker      ] 
16:04 [ bnoordhuis      ] [ fastman       ] [ jolo2           ] [ mrkurt         ] [ s_e            ] [ wao             ] 
16:04 [ boaz            ] [ faulkner      ] [ Jonathan1cClare ] [ MrMaksimize    ] [ saikat         ] [ weal            ] 
16:04 [ bobbylaporte    ] [ fayimora      ] [ JonathanMcClare ] [ mrmoneyc       ] [ Sam-T          ] [ wedgeV          ] 
16:04 [ boffbowsh       ] [ fd_           ] [ Jonghwan_       ] [ MrNibbles      ] [ sambarino      ] [ wereHamster     ] 
16:04 [ BombStrike      ] [ felixge       ] [ joshie          ] [ mrpibb         ] [ sander_        ] [ wesbos          ] 
16:04 [ Bonuspunkt      ] [ fermion       ] [ joshontheweb    ] [ mrvisser       ] [ sandfox        ] [ whirlibulf      ] 
16:04 [ booo            ] [ filleokus     ] [ joshthecoder    ] [ mscdex         ] [ saschagehlich  ] [ whyhankee       ] 
16:04 [ booyaa          ] [ FIQ           ] [ jp232           ] [ munro          ] [ sashman        ] [ william-wallace ] 
16:04 [ braincrash      ] [ fiws          ] [ jpiche_         ] [ myf_           ] [ savardc        ] [ willwh_         ] 
16:04 [ brainproxy      ] [ fl0w          ] [ JPT             ] [ myndzi         ] [ sawjig         ] [ Will|           ] 
16:04 [ brettlangdon    ] [ flagg0205     ] [ jrdn            ] [ n0c            ] [ sayd           ] [ winni_          ] 
16:04 [ brianloveswords ] [ Fli-c         ] [ jslatts         ] [ nail_          ] [ sc1313         ] [ wizonesolutions ] 
16:04 [ brycebaril      ] [ flocca        ] [ jso             ] [ nanashiRei     ] [ schredder      ] [ wolfeidau       ] 
16:04 [ Bubo            ] [ flocca-c      ] [ jtwalters       ] [ naquad         ] [ scott_gonzalez ] [ wolfspraul      ] 
16:04 [ Bunge_          ] [ flyth         ] [ juliangruber    ] [ nathan7        ] [ scrollback1    ] [ wookiehangover  ] 
16:04 [ buritica        ] [ FMJaggy       ] [ justinmburrous  ] [ nathanbz       ] [ sdboyer        ] [ WorkingClassDev ] 
16:04 [ bwall           ] [ Fofr_         ] [ jvolkman        ] [ ndngvr         ] [ SDr            ] [ wpreul          ] 
16:04 [ Bwild           ] [ FooBarWidget  ] [ k1ng            ] [ neshmi         ] [ SebastianFlyte ] [ wting           ] 
16:04 [ bytemask        ] [ foofoobar     ] [ ka2n_           ] [ netj           ] [ sebv           ] [ wyan            ] 
16:04 [ Cainus          ] [ Franz_        ] [ kai             ] [ Nexen          ] [ Secutor        ] [ wycats__        ] 
16:04 [ calvinfo        ] [ frdmn         ] [ Kai`            ] [ nhhagen        ] [ Secutor_       ] [ x13378071       ] 
16:04 [ caolanm         ] [ FredC         ] [ kaichanvong     ] [ nicholas_      ] [ segomos        ] [ xat             ] 
16:04 [ carif           ] [ fredsted      ] [ kaimei_         ] [ nicholasf      ] [ Segrel         ] [ xl0             ] 
16:04 [ carolyns        ] [ freeside      ] [ Kaltiz          ] [ niclone        ] [ seich-         ] [ xonev           ] 
16:04 [ cburyta         ] [ freethen`     ] [ kanzure         ] [ niftylettuce   ] [ Sembiance      ] [ xorox90         ] 
16:04 [ cce             ] [ freewil       ] [ karupanerura    ] [ niggler        ] [ sente          ] [ xorspark        ] 
16:04 [ ccverg          ] [ Frippe        ] [ kayo            ] [ nightfly       ] [ Seventoes      ] [ xSmurf          ] 
16:04 [ celogeek        ] [ Furai         ] [ kazupon         ] [ nihilista      ] [ sg             ] [ xtianw          ] 
16:04 [ cha0s           ] [ Fuu           ] [ kborchers       ] [ nihi|ist       ] [ sh19910711     ] [ xxblakefailxx_  ] 
16:04 [ chapel          ] [ fwg           ] [ kc8qvp          ] [ Nijiko_        ] [ Shadda         ] [ yano            ] 
16:04 [ chayin_         ] [ FX80          ] [ keeto           ] [ nikkimccavee   ] [ Shadowized     ] [ yawnt           ] 
16:04 [ Cheery          ] [ g0z           ] [ Kester          ] [ niloy          ] [ shanlar        ] [ yhpark          ] 
16:04 [ Cheery_         ] [ Gabriel403    ] [ kevinfagan      ] [ NimeshNeema    ] [ shesek         ] [ yhpark_talk__   ] 
16:04 [ cheese1756      ] [ gabriel_      ] [ KevinT          ] [ ninegrid       ] [ shlevy         ] [ yorick          ] 
16:04 [ chiel           ] [ garren        ] [ kevinykchan     ] [ nlf            ] [ Shrink         ] [ yorn            ] 
16:04 [ chilts          ] [ gasbakid      ] [ kevireilly      ] [ Nnubes256      ] [ sideshowcoder  ] [ yourway_chu     ] 
16:04 [ chiper          ] [ gbit86        ] [ khmer           ] [ NoFaTe         ] [ silvers        ] [ YoY             ] 
16:04 [ chjj            ] [ gdbz          ] [ kinabalu        ] [ nsm            ] [ simius_        ] [ yuwang          ] 
16:04 [ chmac           ] [ gde33         ] [ Kingdutch       ] [ nuba           ] [ simon^^        ] [ zadark          ] 
16:04 [ chomwitt        ] [ geb           ] [ KiNgMaR         ] [ Nuck           ] [ sindresorhus   ] [ zakora          ] 
16:04 [ ChrisAnn        ] [ generic       ] [ Kjerski         ] [ NunoNeto       ] [ sirecote       ] [ zaleb           ] 
16:04 [ chrisdickinson  ] [ gf3           ] [ klobucar        ] [ nutcase        ] [ SirFunk        ] [ zanea           ] 
16:04 [ chrixian        ] [ ghost64       ] [ konobi_         ] [ nyuszika7h     ] [ sivoais        ] [ zapu            ] 
16:04 [ cjack_freenode  ] [ ghoti         ] [ kppullin        ] [ nzjames_       ] [ skattyadz      ] [ Zauberfisch^idle] 
16:04 [ ckknight        ] [ gildean       ] [ kraft           ] [ oblio          ] [ skebcio        ] [ zedas           ] 
16:04 [ clarkk          ] [ gkatsev       ] [ krill           ] [ odyniec        ] [ slajax         ] [ zeekay          ] 
16:04 [ ClaudioAlbertin ] [ GlitchMr      ] [ krishna_        ] [ ofan           ] [ Slashbunny     ] [ Zeev            ] 
16:04 [ clone1018       ] [ gluxon        ] [ krnflake        ] [ ogny1          ] [ slicky         ] [ zemm            ] 
16:04 [ codelahoma      ] [ gnarf         ] [ Kudos           ] [ ohcibi         ] [ SLN            ] [ zenazn          ] 
16:04 [ codepal_        ] [ gorillat1on   ] [ kuja            ] [ olegp_         ] [ slurp1         ] [ zenodub_        ] 
16:04 [ codingkevin     ] [ gorillatron   ] [ kuryaki         ] [ OnlyMax        ] [ Sm3lly         ] [ zeroz           ] 
16:04 [ Codynyx         ] [ Gottox        ] [ kuuranne        ] [ oon_           ] [ snearch        ] [ zhware          ] 
16:04 [ Connorhd        ] [ gozala        ] [ kzrl            ] [ ootje          ] [ Snow-          ] [ zivester        ] 
16:04 [ conradev        ] [ Gregor        ] [ L_star_         ] [ optixx_        ] [ Soarez         ] [ zodiak          ] 
16:04 [ constantined    ] [ grep_awesome  ] [ LanyonM_        ] [ Orbitrix       ] [ SomeoneWeird   ] [ zokeber         ] 
16:04 [ context         ] [ Grephix       ] [ Leeol2          ] [ oreth          ] [ sordina3       ] [ zomg            ] 
16:04 [ CookieNinja     ] [ Gruni         ] [ LeftWing        ] [ orospakr       ] [ Sorella        ] [ zz_hacfi        ] 
16:04 [ CookieNomster   ] [ gsf_          ] [ leichtgewicht   ] [ othiym23       ] [ sorensen       ] [ zz_runningskull ] 
16:04 [ coolnalu        ] [ gshipley      ] [ lejonet         ] [ Outsider_      ] [ spion          ] [ |Gobo|          ] 
16:04 [ corytheboyd     ] [ Guest14712    ] [ LennyLinux      ] [ ovaillancourt  ] [ SpNg           ] 
16:04 [ Couto           ] [ Guest33678    ] [ LeoAtWork_      ] [ over_          ] [ Spudly         ] 
16:04 [ CoverSlide      ] [ Guest42249    ] [ leonardo        ] [ over__         ] [ SpX            ] 
16:04 [ crashev         ] [ Guest5012     ] [ leptonix_       ] [ owen1          ] [ squeakytoy     ] 
16:04 [ creationix      ] [ Guest___      ] [ levi501d        ] [ owenb_         ] [ sriley         ] 
16:04 -!- Irssi: #Node.js: Total of 943 nicks [8 ops, 0 halfops, 0 voices, 935 normal]
16:04 -!- Home page for #node.js: http://nodejs.org/
16:04 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
16:04 -!- mode/#Node.js [+o isaacs_] by ChanServ
16:05 -!- Irssi: Join to #Node.js was synced in 45 secs
16:05 <@MI6> joyent/libuv: bnoordhuis created branch cpp-ify - http://git.io/KsY7Zg
16:07 < xanadu> i need some help figuring out how to store a base64 image POSTed from a <canvas> to .png on disk (http://jsfiddle.net/mUGTr/)
16:08 < xanadu> i'm using #express, but no one is helping in that room - possibly because of how obviously i don't understand  Buffers
16:08 < xanadu> :)
16:11 < Industrial> Can I sort npm output by number of downloads?
16:14 < Industrial> there is npmsearch it seems
16:19 < syskk> anyone use connect/express? I was wondering if after res.end or res.render the middleware chain ended
16:20 < elliottcable> For anybody interested, I just threw some new functionality into the bot.
16:20 < elliottcable> -song Luma by the M Machine
16:20 < purr> elliottcable: “Luma”, The M Machine: <http://tinysong.com/1cqKG>
16:20 < elliottcable> alternatively called by Unicode “♪”
16:21 < zomg> that dark blue color looks nice on a black background
16:21 < elliottcable> ♪ Between Two Points, Glitch Mob
16:21 < purr> elliottcable: “Between Two Points (feat. Swan)”, The Glitch Mob: <http://tinysong.com/Kdpq>
16:21 < elliottcable> enjoy (=
16:21 < syskk> cool
16:21 < syskk> is it open source?
16:22 < elliottcable> IDK, the original bot probably is, somewhere. ask eboyjr.
16:22 < elliottcable> purr himself is a huge bag of insane hacks that he's accumulated from the three ops in the channel he belongs to over the past three years
16:22 < elliottcable> so there's no way he *himself* is getting open-sourced
16:23 < elliottcable> he won't do 3/4s of the stuff he normally does, in this channel, because he'd get himself (and probably me) banned from here. He's pretty laid-back around these parts; but he can get kinda frisky in private.
16:24 < elliottcable> syskk ⑊ here's the implementation of that particular function that I just hacked together in the last few minutes: https://gist.github.com/elliottcable/5653246
16:24 < elliottcable> if you want his functionality in another channel, he responds to /invite's.
16:24 < elliottcable> (=
16:24 < syskk> uh
16:25 < syskk> how did you "throw some functionality
16:25 < elliottcable> lol, honestly?
16:25 < syskk> in the bot if it's not open source?
16:26 < elliottcable> we keep a shared tmux instance open to his source, and I can ssh in and open that instance to drop a new function in any time I'm feeling the urge
16:26 < elliottcable> huh? why would he need to be open-source for me to modify him?
16:26 < syskk> ok got it
16:26 < syskk> > he's accumulated from the three ops
16:26 < syskk> and you're not an OP… so was wondering how u did that 
16:27 < elliottcable> er, he's not originally from this channel.
16:27 < syskk> thought there was a rest api or something people could use 
16:27 < syskk> ah ok
16:27 < elliottcable> and hey, I was totally an op in here!
16:27 < elliottcable> briefly.
16:27 < elliottcable> for, like, eight hours.
16:27  * elliottcable grins
16:27 < syskk> haha ok
16:27 < elliottcable> If you want to contribute functionality before I get around to open-sourcing it, let me know.
16:27 < elliottcable> (=
16:28 < elliottcable> flocca-c ⑊ you want -commands
16:29 < elliottcable> ;)
16:29 < syskk> I'll let you know if I have a cool idea
16:29 < elliottcable> syskk ⑊ <3
16:29 < flocca-c> ahah thanks elliottcable ;)
16:29 < pedropoc> does anyone use vagrant for node development?
16:30 < syskk> I use Jenkins lol
16:30 < syskk> oops, unrelated
16:30 < syskk> should have googled it up first
16:30 < Learningg> HQ SQLi's found by hack_addicted.pt
16:31 < syskk> vagrant looks cool but I wonder if it's worth the trouble if you already have a working dev environment
16:32 < pedropoc> syskk: well different projects sometimes need different environments
16:33 < syskk> right. does it build a VM or it sets up your local machine?
16:33 < pedropoc> I was just wondering if there is something better out there, I currently use nvm
16:34 < syskk> never heard of alternatives really… apart from chef/puppet which are mostly designed to build production servers
16:34 < pedropoc> syskk: it runs a vm in the background and you can access it through ssh
16:35 < pedropoc> I'll just give it a try :)
16:35 < syskk> nice
16:35 < syskk> might use it when I run into problems with my current setup
16:35 < syskk> but for now, I don't think the VM overhead is worth it for me
16:42 < beeant> do you use node-inspector?
16:44 < Trangar> What editor do you guys recommend for developing Node / html / js?
16:46 < guest4601> @Trangar Sublime Text 2 is good.
16:49 < beeant> i just found brackets
16:49 < beeant> brackets.io
16:49 < beeant> it seems cool, but im still not used to it
16:49 < Industrial> Can I tell a http server to restart itself? or would that just be a .close(function(){.listen(function(){/*done*/})) ?
16:49 < beeant> Trangar: im using vim
16:52 < oliland> npm installs git submodules automatically right?
16:56 < zenetik> mscdex: ping
16:56 < zenetik> is there a more nodejs way to do that : http://jsfiddle.net/DfpaZ/
16:56 < zenetik> the code is working, but i doubt this is a legal way
16:57 < mscdex> zenetik: eh? i thought your problem was you were doing async things + chaining?
16:58 < zenetik> mscdex: well, i was studying the possibility to make a metasploit api node modules, because the existing one is a command line wrapper. But in fact i don't need chain
16:59 < zenetik> mscdex: i'd like to do var metasploitClient = new metasploit(args);
16:59 < zenetik> and then SIMPLY, metasploitClient.exec('apiStuff',[arg1,arg2,arg3']);
16:59 < zenetik> so i don't need to wrap all the api
17:00 < zenetik> and then metasploitClient.exec('apiStuff',[arg1,arg2,arg3'],callback); // i forgot the cb
17:00 < zenetik> so i'm just looking for a design pattern to be able to have more than one client
17:01 < zenetik> exactly what i'm looking for http://jsfiddle.net/DfpaZ/
17:01 < zenetik> as i said this pattern is working, but i have a doubt that it respect the best nodejs way
17:05 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:19 < syskk> https://news.ycombinator.com/item?id=4406467 pedropoc 
17:19 < syskk> interesting thread from vagrant's developer
17:21 < sw99> hi
17:28 < RLa> syskk, i still do not get vagrant, it's for dev usage, isn't it?
17:28 < syskk> never used it but just finished reading their docs
17:28 < syskk> yes its for dev usage
17:29 < syskk> it automatically sets up a VM you can use to launch your app
17:29 < syskk> so even your average project manager can run the app :)
17:29 < syskk> or your grandmother
17:30 < syskk> but wont use it for now as my dev environment doesnt change a lot
17:44 < schofld> hello
17:45 < rhalff> :w
17:45 < schofld> anyone seen this little warning before?? i have reinstalled my mac and i am using Mountain Lion... I never saw this warning before
17:47 < schofld> http://imgur.com/8dxEgDl
17:48 < schofld> i just dont know what this means... and i haven't seen a warning like this before 
17:48 < schofld> seam to get this kind of warning with every npm install
17:49 < mscdex> anyone know of a streaming querystring parser for node?
17:49 < schofld> http://imgur.com/8dxEgDl
17:50 < elliottcable> schofld ⑊ what do you mean?
17:51 < elliottcable> schofld ⑊ I think the NPM guys are recommending that a repository field, like a README file, be added to every repo. I think annoying the end-user with WARNs is sub-par operation, but whatever.
17:51 < schofld> elliottcable: have a look at the picture. npm outputs WARN
17:52 < schofld> oh ok... so npm is warning that there (in this case) is no 'package.json
17:52 < schofld> for soem of the repos
17:54 < elliottcable> No, it's warning that the repos don't have a 'repository' field in their package.json.
17:56 < schofld> elliottcable: aah... so this will just mean that i would have to find the repo if i want to contribute 
17:56 < elliottcable> Something like that, yes. You can ignore it, it has no bearing on you.
17:56 < schofld> elliottcable: Thanks :)
18:01 < sw99> is it recommend that one use mongoDB instead of sqlite with node.js?
18:02 < ningu> sw99: you can use what fits best
18:03 < sw99> ningu: so node.js has good support for sqlite?
18:03 < ningu> sure
18:03 < sw99> ningu: but how does sqlite fit into the "asynchronous many connections" capabilities of node.js?
18:04 < elliottcable> locals['infrastructure']['affix'](<empty expression?>)( locals['locals'] )('Hello,world!')
18:04 < elliottcable> ick. wrong window.
18:06 < AAA_awright> sw99: SQLite is typically for embedded applications, if you're doing any sort of Web server almost certainly you want a databse server like MySQL
18:12 < ningu> sw99: yes, what AAA_awright said. I don't actually know if you can have multiple connections at once to an sqlite database -- maybe.
18:12 < ningu> using SQL in general works fine in node.
18:12 < sw99> ningu: ok, supposedly there are such capabilities, http://www.sqlite.org/wal.html
18:12 < sw99> but yeah
18:12 < ningu> some people like mongodb because its data model maps more directly to JS objects, but you should consider the pros and cons 
18:13 < sw99> yeah
18:13 < ningu> mongo is better at some things, worse at others, when compared to RDBMS -- different design choices
18:13 < ningu> in my case I care more about ACID than 'big data' and zillions of users, but I am not typical :)
18:14 < ningu> or so it seems
18:14 < sw99> yeah, same here
18:14 < sw99> recently, i moved from php to sinatra/ruby, thinking I had found the best thing out there for me
18:15 < sw99> but now it seems that node.js + expressjs may be even sexier
18:15 < sw99> so it's a dilemma
18:15 < sw99> :S
18:15 < ningu> yes, I think node + express is a very good combination
18:16 < AAA_awright> SQLite has concurrent connections but it uses byte-level filesystem locking. If you need to scale to multiple systems, it can't be done.
18:17 < AAA_awright> It's plainly not a server, after all.
18:17 < ningu> AAA_awright: what about multiple concurrent reads, though?
18:17 < ningu> if you don't care about concurrent writes as much it might be ok
18:17 < AAA_awright> concurrent locking
18:17 < sw99> i think for even hundred thousand visitors per day, one should be fine with it…
18:17 < ningu> and I suppose every connection needs to lock the file since it doesn't know if it will have to read or write
18:18 < ningu> sw99: personally I would use postgres, it runs fine on a low end vps
18:18 < ningu> but you could try sqlite too
18:18 < sw99> ok
18:18 < sw99> does node.js sit on top of apache/nginx?
18:18 < ningu> it can, doesn't have to
18:18 < ningu> the standard combination is nginx + node
18:18 < sw99> ok
18:18 < deoxxa> i made a thing: https://github.com/deoxxa/scgi-stream
18:18 < sw99> why not node.js only?
18:18 < sw99> too insecure maybe?
18:18 < ningu> no, not about security
18:19 < ningu> people do that too
18:19 < ningu> if you want vhosting then you can use something like bouncy (also written in node)
18:19 < ningu> it just depends if you need any of the features nginx adds
18:19 < sw99> cool
18:20 < bnoordhuis> sw99: static file serving is something nginx is better at, that's why most people put nginx in front of node, i think
18:20 < ningu> I use nginx to do gzipped responses for example
18:20 < ningu> but I could do that in node
18:20 < ningu> yes, static as well
18:20 < sw99> bnoordhuis: ah, otherwise you'd have to tell node.js to read the file and output it manually?
18:20 < jesusabdullah> deoxxa: neato
18:20 < sw99> or what
18:21 < AAA_awright> ningu: It uses byte-level locking
18:21 < AAA_awright> If it has to write to a segment of the file it acquires an exclusive lock on that region of the file
18:21 < jesusabdullah> nginx is reasonably easy to configure as a proxy to node instances, is all
18:21 < AAA_awright> Your OS has to support byte locks, though
18:21 < deoxxa> jesusabdullah: scgi is silly cgi imo, but rtorrent uses it and i didn't want to set up nginx in front of it to do scgi->http lel
18:21 < ningu> sw99: static file serving is not hard to do in node, express supports it natively
18:21 < jesusabdullah> hah
18:21 < sw99> heh ok
18:21 < jesusabdullah> I wrote a static file serving middleware once
18:22 < jesusabdullah> there are a lot of annoying edge cases
18:22 < ningu> sw99: but nginx does it more efficiently, that's all
18:22 < jesusabdullah> and header jangling
18:22 < AAA_awright> It kind of is hard, implementing RFC 2616 is HARD
18:22 < deoxxa> headers suck
18:22 < nathan7> jesusabdullah: and we all <3 you for it
18:22 < AAA_awright> Not Hard! but just hard
18:22 < jesusabdullah> yeah, I mean
18:22 < ningu> deoxxa: especially when the ball hits the top of your head instead of your forehead
18:22 < jesusabdullah> ecstatic probably isn't compliant to any rfc but it more or less works
18:22 < jesusabdullah> my own static sites are being served off it
18:22 < jesusabdullah> XD
18:23 < AAA_awright> There's 3 different caching mechanisms, 100-continue, multipart/ranges encoding, etc
18:23 < jesusabdullah> though hopefully I'll get the gumption to set up nginx today
18:23 < ningu> HTTP seems so simple but it really isn't
18:23 < deoxxa> standards suck
18:23 < ningu> at least if you want everything to work as how it actually is implemented
18:23 < jesusabdullah> https://github.com/bigcompany/know-your-http ;)
18:23 < AAA_awright> Well there's no way you could do it simpler
18:23 < jesusabdullah> I need to zazzle-ize the newer poster design too
18:23 < AAA_awright> So I don't think I'd say it's not simple
18:23 < AAA_awright> But it's not straightforward
18:24 < jesusabdullah> middlin'
18:24 < jesusabdullah> I would say
18:24 < ningu> caching in general is just a huge headache
18:25 < jesusabdullah> yeah
18:25 < ningu> I have an API where I want to cache responses, but the question of which ones to invalidate when a change has been made is... ugh
18:26 < ningu> I may just flush the whole cache
18:27 < ningu> since changes are much less frequent than reads
18:30 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:33 < sw99> So Node.js seems like the future
18:33 < sw99> I'm gonna dive in
18:33 < sw99> exciting
18:33 < s5fs> HSL: no, did you ever find a resolution? what was the story?
18:34 < s5fs> jesusabdullah: holla
18:34 < ningu> sw99: it is a future ;)
18:36 < jesusabdullah> http://jesusabdullah.net/virtualwindow beautiful day in the interior
18:38 < jesusabdullah> s5fs: o/
18:39 < sw99> is the latest node.js backwards compatible with 0.6.10 ?
18:39 < s5fs> jesusabdullah: coming to nodeconf?
18:39 < sw99> i ask because this tutorial i'm interested in: https://peepcode.com/products/nodejs-i
18:39 < sw99> and it uses an older version
18:39 < deoxxa> jesusabdullah: lol what
18:39 < jesusabdullah> s5fs: I'm not planning to at this time. When is it?
18:39 < ningu> sw99: there have been a few changes since then, not sure if the tutorial will be ok or not
18:40 < jesusabdullah> deoxxa: hmm?
18:40 < deoxxa> your virtual window is lol
18:40 < jesusabdullah> oh yeah
18:40 < jesusabdullah> I made that back in college when my ex complained about all her classrooms having no windows in them
18:40 < deoxxa> love that background image
18:40 < jesusabdullah> tons of computers in the EE labs though
18:40 < deoxxa> haha
18:40 < jesusabdullah> Oh yeah, the background and the window are both from my old place in fbx
18:40 < jesusabdullah> and that webcam is from campus up there
18:40 < jesusabdullah> (fbx == 'fairbanks')
18:41 < deoxxa> that's win
18:41 < jesusabdullah> XD
18:41 < ningu> sw99: backwards compatibility is pretty good in general, it will be minor but possibly confusing
18:41 < ningu> if you run into anything
18:41 < sw99> ok
18:41 < s5fs> jesusabdullah: end of next month up at walker ranch, should be a hoot. we're coming into sf on the 26th but the bus leaves on the 27th for the ranch, gives us a bit of time to hang out.
18:41 < ningu> main things are with streams and also fs.exists vs. path.exists
18:42 < jesusabdullah> aha
18:43 < jesusabdullah> yeah, I have a feeling I won't be attending
18:43 < jesusabdullah> I'm in alaska right now so
18:43 < s5fs> jesusabdullah: like, living there? i thought you were oakland
18:43 < jesusabdullah> s5fs: I was until last November, I spent a few months in India and now I'm back in AK for the summer
18:44 < s5fs> require('mooose')
18:44 < jesusabdullah> fuck that reminds me I still need to find someone willing to help me out with my storage unit
18:44 < jesusabdullah> >_<
18:44 < jesusabdullah> but that's neither here nor there
18:44 < jesusabdullah> well, it's in SF
18:44 < jesusabdullah> XD
18:44 < s5fs> haha!
18:44 < ningu> Moose is in perl
18:44 < jesusabdullah> anyways, yeah
18:45 < jesusabdullah> no, moose are in the palmer hay flats
18:45 < jesusabdullah> DUHHH
18:45 < ningu> jesusabdullah: what do you need done with the storage unit?
18:45 < ningu> fun fact: in the UK, moose are known as elk
18:45 < jesusabdullah> ningu: I'm basically looking for someone to pick up my shit and craigslist it off
18:45 < jesusabdullah> ship me a few things, pocket the change
18:45 < s5fs> jesusabdullah: I narrowly avoided alaska, I took vocational welding in high school with the intent of welding on the pipeline.
18:46 < jesusabdullah> there's enough shit in there one could make a few hundred easy, not including the bike
18:46 < jesusabdullah> but, y'know, car
18:46 < jesusabdullah> or truck really
18:46 < ningu> jesusabdullah: yeah, I have a car, not a truck
18:46 < jesusabdullah> I was stupid and didn't schecule any time for sorting it out after India, just came straight back here
18:46 < s5fs> jesusabdullah: you just looking to dump what's in there?
18:47 < s5fs> ah, a few items you DO want. hmm.
18:47 < jesusabdullah> s5fs: well there are a whole mess of books, a bicycle, some clothes, tools and trinkets
18:47 < jesusabdullah> Yeah, so there are some engineering books and a few trinkets I'd love to get shipped
18:47 < jesusabdullah> but the clothes, bicycle, other books, tools...I just want them to go to a good home
18:47 < ningu> I would just look for 'free' e-copies of the books ;)
18:48 < s5fs> jesusabdullah: i hear ya. i've lived out of storage units before, real hassle at times.
18:48 < ningu> especially if I own the book already
18:48 < jesusabdullah> ningu these are engineering textbooks, harder to find, somewhat useful, nostalgic value
18:48 < ningu> ah, ok
18:48 < jesusabdullah> oh there's also a bass guitar
18:49 < jesusabdullah> ideally I'd get that shipped but it could also be sold with a little bit of work
18:49 < jesusabdullah> oh but the bike, it was hot when I bought it (I was new to town, had never bought a stolen bike, didn't even occur to me until I'd had it a few months)
18:49 < ningu> well I don't have the space to keep any of the stuff while it's being sold
18:49 < jesusabdullah> so, like, statute of limitations, but it's a *nice* bike and I bought it for like $500 which was a pretty low price imo
18:49 < ningu> yeah, I dunno about that, depends if there's a police report with the serial# I guess
18:50 < jesusabdullah> Hah, I hope not XD
18:50 < ningu> but I think bike theft is basically solved right away or not at all
18:50 < jesusabdullah> yeah I mean
18:50 < jesusabdullah> in a place like Oakland
18:50 < jesusabdullah> that was how I felt about it
18:50 < jesusabdullah> "oops"
18:50 < ningu> btw http://blog.priceonomics.com/post/30393216796/what-happens-to-stolen-bicycles
18:51 < ningu> "Is There at Keyser Söze of the Bike Underworld?
18:51 < jesusabdullah> lol
18:51 < jesusabdullah> nice find ningu
18:52 < s5fs> haha!
18:52 < jesusabdullah> anyway so were you guys just curious or do you know (or are you) someone with wheels that lives in sf?
18:53 < jesusabdullah> not that I intended to craigslit the channel here...
18:53 < s5fs> jesusabdullah: i spent 8 years down there and still have a few friends in oakland proper, but i'll have to check on the truck situation. that's the limiting factor, most of my peeps are public trans and two-wheelers.
18:53 < jesusabdullah> s5fs: yeah same here
18:53 < jesusabdullah> oh I know
18:54 < s5fs> I've only got half a day free else i'd handle it when I get down there next month. sorry bro.
18:55 < s5fs> and I've got Nexxy with me and I doubt she wants a tour of oakland storage units haha
18:56 < ningu> I've seen some strange people on my visits to bay area storage units
18:56 < ningu> at one place they had a notice that you weren't allowed to sleep in the unit
18:59 < s5fs> ningu: that's pretty normal
18:59 < s5fs> and it's actually in your contract too, haha!
18:59 < ningu> yes, I figured it was, but it wouldn't have occurred to me until I saw it
18:59 < jesusabdullah> s5fs: alright, if you drum anything up I'd love to hear about it :D
18:59 < s5fs> it's like a little studio!
19:00 < s5fs> jesusabdullah: i'll ping a buddy, what part of oakland is the unit in?
19:00 < ningu> I thought he said it was in SF
19:00 < s5fs> sorry i'm zipping around the house right meow :)
19:01 < s5fs> (reading comprehension is looow)
19:01 < jesusabdullah> s5fs: It's actually in SF, mission-ish
19:01 < jesusabdullah> s5fs: I lived in O-town but the unit wasn't near me
19:01 < jesusabdullah> hmmm, I should see what David's up to
19:01 < s5fs> jesusabdullah: okay so i'm staying in the mission the night of the 26th. if you have small shit that just needs packing and shipping i can prob make that happen.
19:01 < ningu> I live mission-ish
19:01 < ningu> but if I were going to craigslist it I would probably just sell it right out of the unit
19:02 < s5fs> ningu: agreed
19:02 < s5fs> do you own "storage wars" thing
19:02 < jesusabdullah> Yeah, that'd be idea, but could you do it before June 1?
19:02 < ningu> storage wars?
19:02 < jesusabdullah> yeah, you seen that?
19:02 < s5fs> jesusabdullah: nope, not making it up until end of june.
19:03 < jesusabdullah> hmmm
19:03 < s5fs> jesusabdullah: whats the story with that bike? I could prob get someone to ship your gear in exchange for the bike haha!
19:03 < ningu> I don't watch much tv. and when I waste time I try to do it productively :)
19:03 < s5fs> ningu: my mom is huge into the discovery channel stuff so i hear about all of it when i visit.
19:03 < jesusabdullah> s5fs: I bought it for $500, it's probably worth more than that, it's in good condish and I don't want it
19:04 < jesusabdullah> s5fs: yeah, I'd trade pretty much everything including bike to get like one box of books, a few trinkets and the bass shipped up here
19:04 < ningu> hmm... not sure how you ship a bass
19:04 < jesusabdullah> s5fs: so that's the bike, a few boxes of books, a box of clothes and some tools
19:05 < s5fs> jesusabdullah: okay i'll send a feeler to my friend in the mission
19:05 < jesusabdullah> ningu: parcel post at the USPO
19:05 < jesusabdullah> s5fs: awesome
19:05 < jesusabdullah> s5fs: josh.holbrook@gmail.com
19:05 < s5fs> jesusabdullah: mtn or road bike? haha
19:05 < phillip> hey noders... I'm trying to test beefy.js... had a question or two
19:05 < jesusabdullah> s5fs: road bike
19:05 < s5fs> jesusabdullah: perfect, my friends all do life cycle and shit so an extra bike is as good as hard currency
19:05 < jesusabdullah> niiice
19:06 < jesusabdullah> alright s5fs shoot me an email if anything ^__^
19:06 < s5fs> jesusabdullah: will do, i'm texting folks now
19:06 < jesusabdullah> s5fs: you're on twitters?
19:06 < s5fs> jesusabdullah: yup, same as my irc nick
19:07 < jesusabdullah> aha
19:07 < jesusabdullah> oh man your avatar just clicked in my head
19:07 < jesusabdullah> we met in portland right? nexxy's friend?
19:07 < jesusabdullah> XD
19:07 < s5fs> jesusabdullah: yeah, you rode in my busted ass car with the duct tape and fucked up passenger door
19:07 < jesusabdullah> ahahaha
19:07 < jesusabdullah> awesome!
19:07 < s5fs> then we hung at nexxys place downtown before she moved to the burbs to reproduce
19:07 < jesusabdullah> good to run into you again
19:07 < jesusabdullah> lolol
19:08 < jesusabdullah> word
19:08 < s5fs> jesusabdullah: yeah for sure :D
19:08 < jesusabdullah> alright bbl o/ thanks s5fs 
19:09 < s5fs> jesusabdullah: \o
19:13 < ningu> does anyone here have experience with restify?
19:19 < s5fs> ningu: sorry i do not
19:25 < ckknight> Hmm, I have a weird use case: Can I register something to be picked up by require()? e.g. normally, require("gorillascript") would link to my module, but when I'm in the gorillascript project, I'd like to have it use require("./lib/gorilla") without having to change actual references to require("gorillascript"), such as in a grunt build task.
19:29 < ckknight> I know I can do this as-is by creating a fake node_modules/gorillascript folder, but that seems terribly hackish.
19:42 < ckknight> Okay, I can do it in a terrible, terrible way by hooking Module._resolveFilename - if anyone can tell me a better way, I would absolutely love to hear it.
19:47 <@isaacbw> ningu: restify is alright
19:48 < ningu> isaacbw: I didn't mean an evaluation of it, I have a couple questions about it
19:48 <@isaacbw> I haven't touched in in a few months, but I might be able to help
19:48 < ningu> I am wondering for example why it has both .pre() and .use()
19:48 < ningu> it seems like .pre() stuff just runs before .use()
19:49 < ningu> so why not just declare those as the first .use()?
19:50 <@isaacbw> probably to give you a little more flexibility about ordering
19:51 <@isaacbw> you won't always have all your routes in one monster file
19:51 < ningu> for routes, no
19:51 < ningu> but it would be odd to have server.use/pre not all in one place, imo
19:52 <@isaacbw> it's an example of temporal decoupling if you squint your eyes enough
19:52 < ningu> yeah, but the ordering of each server.pre and server.use is still significant
19:53 <@isaacbw> try and avoid it being significant
19:53 <@isaacbw> as in, design everything so that it isn't
19:53 < ningu> hmm
19:54 < ningu> not really possible in my case
19:54 < ningu> for example I have cached responses, and one of the server.use methods checks if the request is in the cache and if so, returns the data and stops the chain
19:55 < ningu> I have to put that after the body parser or it won't know what the request is
19:56 < ningu> also, I've noticed that server.on('uncaughtException') doesn't work for async routes -- although I assume that's just how it works in node
19:57 <@isaacbw> I ended up rolling my own router because I didn't like restify very much
19:57 <@isaacbw> for many of the same reasons
19:57 < ningu> so I essentially created server.postCustom() which wraps each thing in the change in a try/catch
19:57 < ningu> chain*
19:58 <@isaacbw> I think mostly what restify gets you is express's extended req/res objects
19:58 < phillip> noob here--I have browserify working by itself and beefy seeming to work--but it fails to browserify the .js file it serves
19:58 < ningu> the issue being that a couple of my server.use() things are async but the routes are not
19:58 < ningu> at least, not async where it was throw'ing the errors that server.on('uncaughtException') were not catching
19:58 < ningu> but they were being thrown after the async server.use methods so not being caught
19:59 <@isaacbw> I never use on('uncaughtException'), so I don't know
19:59 < ningu> isaacbw: the versioned routing is very nice as well, and the custom formatters
19:59 < ningu> I have a few assert statements which are very difficult to handle without throw
19:59 < ningu> mostly I just use next(err)
20:10 <@isaacbw> ningu: I think that's a pretty common way of doing it with middleware
20:31 < Industrial> How long do I have to close() a HTTP server for in order for clients to register a disconnect on the (web)socket?
20:32 < Industrial> Also, can I call close and .listen at will? I don't think so.. What do I test for in order to call both sucessfully?
20:32 < bnoordhuis> Industrial: server.close() doesn't close connections, it only stops the server from accepting new ones
20:32 < Industrial> bnoordhuis: ah
20:33 < Industrial> then I guess I should spawn a child process and kill it and then restart it?
20:34 < Industrial> (I want a server that restarts at certain points in development mode e.g. file changes, recompiles)
20:34 < bnoordhuis> Industrial: or keep track of open connections
20:34 < Industrial> right
20:35 -!- mode/#Node.js [+o tjfontaine] by ChanServ
20:42 < RobW_> Does node usually set the root '/' directory relative to a project, or does it just use the user's root directory, as it would be on the cl?
20:43 < elliottcable> RobW_ ⑊ uh, what?
20:43 < elliottcable> RobW_ ⑊ are you talking about for filesystem paths? The root's the root. Not the user's home directory or anything.
20:43 < RobW_> Sorry, I'm trying to debug why a generated file isn't being used by an application. Yeah, you're right.
20:44 < elliottcable> RobW_ ⑊ as for request-paths, that's entirely up to you; Node has no bearing over that. Are you talking about express-routes or something?
20:44 <@isaacbw> if you mean cwd, that's up to the shell
20:45 < RobW_> elliottcable: just simple tooling, not cwd but root. Trying to figure out why a fs.writeSync created yml file isn't being picked up by an application, thought it might be a path issue.
20:45 < RobW_> But looks not.
20:47 < RobW_> Ha, completely unrelated.
20:51 <@isaacbw> I think it probably is a cwd issue RobW_ 
20:51 <@isaacbw> you can work your way back to find the dir of the executing script
20:52 < RobW_> isaacbw: Everything was working exactly as I expected it to, i was just feeding the generated file incorrectly to the consuming app.
20:52 <@isaacbw> ah okay
20:53 < RobW_> cascading yml config files for a jekyll app. I had loaded them in the wrong order, so the cascade wasn't working.
20:53 < Chiffon35> hi all
20:53 < RobW_> isaacbw: Thanks though.
20:54 < Chiffon35> my question : is there a way to load a module just like a "part" of a function, using variable of my function without "unknow variable" errors ?
20:55 < Chiffon35> just like a simple "include" in php ?
20:55 < Chiffon35> and without using eval(), because eval is evil
20:55 < jesusabdullah> "./" is the process's cwd and __dirname is the directory the particular file is in
20:55 < jesusabdullah> Chiffon35: huh?
20:56 < jesusabdullah> Chiffon35: no includes, export a function
20:56 < Chiffon35> ok, but i want just literal include
20:56 < Chiffon35> of a part of code
20:57 < Chiffon35> do u know if there is good way to do that ?
20:57 < Industrial> How do I start and stop httpServer? https://gist.github.com/Industrial/89f61bd403272b8fc297#file-server-js-L11-L28
20:58 < Chiffon35> because if i just export my function, and there is variable depending of the importing file in my function, i have an error : the variable is unknow
20:58 < Industrial> the http script spawns a http server on port 8080
20:59 < Industrial> nvm
21:00 < Chiffon35> exemple : var test = 0; require(./myfunction.js); and the other file is : module.exports = function myFunction () { console.log(test) }; i get an error : test will not exist here !
21:01 < ningu> Chiffon35: you can't do that. and for good reason -- it would lead to all sorts of unmaintainable scenarios.
21:01 < jesusabdullah> Chiffon35: no that's what I'm trying to tell you. You can't do includes. And functions are the closest thing.
21:01 < ningu> require() is an improvement over script tag in the browser semantics
21:01 < jesusabdullah> Chiffon35: module.exports = function (test) { console.log(test); }
21:02 < jesusabdullah> Chiffon35: and require('./myfunction.js')(test);
21:02 < ningu> Chiffon35: I'm not sure what you are trying to accomplish but you don't need the sort of includes you are talking about
21:02 < Chiffon35> yes think about this solution, but there a loooot of variables in my first file
21:02 < jesusabdullah> Chiffon35: this is way better anyway because you're being explicit with which things are going where (how would you know what 'test' is in the myfunction.js??
21:03 < robertkowalski> hi
21:03 < jesusabdullah> Chiffon35: pass blocks of related things inside an object
21:03 < elliottcable> -song Node.js
21:03 < purr> elliottcable: 
21:03 < elliottcable> -song Node
21:03 < purr> elliottcable: “Rasen (Jasmine You with Jakura)”, Versailles: <http://tinysong.com/KGrt>, “Baby doll (Juka)”, Versailles: <http://tinysong.com/KGrs>, “Remind of You (Extend Ash ~ Hourai Victim)”, t=NODE: <http://tinysong.com/Nc07>
21:03 < Chiffon35> but my file is 5000 line long.... i just want to "organize" it
21:03 < jesusabdullah> Yeah and this is how you organize it
21:03 < ningu> hehe
21:03 < Chiffon35> ok
21:04 < ningu> yeah, I'd split it up into various modules
21:04 < jesusabdullah> functions, constructors, methods, random objects can all be exported
21:04 < ningu> I try not to have more than a few hundred lines per module (but you can't really generalize that)
21:05 < jesusabdullah> also remember you can pass objects by reference and modify them in-place with other functions, and obviously 'this' in your methods acts this way
21:05 < jesusabdullah> so you can do things like, Ctor.prototype.method = require('./some-method')
21:05 < elliottcable> Chiffon35 ⑊ You need to refactor.
21:05 < elliottcable> Chiffon35 ⑊ There's no real way around that.
21:05 < Chiffon35> ok i will try your solution jesusabdullah
21:05 < jesusabdullah> and have ./some-method export something like, function () { this.whatever(); }
21:06 < jesusabdullah> Chiffon35: it's not "my" solution really, I'm just describing how to break node projects up into multiple files
21:06 < Chiffon35> lol ok, thx for the information
21:06 < ckknight> separating things into smaller parts ends up being a lot cleaner anyway, as (ideally) each part shouldn't rely on much of anything else
21:07 < ningu> I still end up with some interdependence between modules
21:07 < ningu> certain small pieces are used many times
21:07 < ningu> but the pieces that build on the smaller pieces usually don't use each other
21:07 <@isaacbw> refactoring is fun
21:08 <@isaacbw> for every new feature you add, refactor an old feature
21:08 < ningu> my config file, db module, and validation module are used all over
21:08 < ningu> but we could all use some validation, after all
21:10 < aah> still running 0.8.23, noticing memory leaks in an http server, found articles re: possible leaks when.. client disconnects (?) .. if anyone knows what I'm talking about, I'm looking for a quick overview of the issue / solutions (can't change to 0.10 yet)
21:14 < aah> man, I killed that conversation.
21:14 < ningu> dont
21:14 < ningu> oops
21:14 < ningu> don't give yourself too much credit
21:14 < aah> was it dying anyway?  I was just an innocent bystander?
21:15 < ningu> we should fight to protect endangered conversations
21:16 <@isaacbw> elliottcable: you should have purr link to the wikipedia article on garbage collection whenever someone says memory leak
21:21 < jaguilera_> join /css
21:22 < Chiffon35> About function like a module : do you know if the module is loaded when the require is parsed, or just when the function is called ? in other words, is there potentially lower performances with module ?
21:25 < nathan7> Chiffon35: It's loaded immediately.
21:25 < nathan7> Chiffon35: There's no magic going on.
21:25 < Chiffon35> ok thx
21:27 <@isaacbw> there's a tiny bit of magic going on to resolve circular dependencies
21:31 < ningu> Chiffon35: also, the result of each require() is cached so it only happens once per process
21:31 < ningu> generally they all get loaded at the beginning
21:32 < ningu> it's really, really not what's going to affect your performance
21:34 < devnull__> https://vimeo.com/67018462
21:37 < konobi> isaacbw: http://www.youtube.com/watch?v=KpGVlqeFesQ
21:38 < Chiffon35> ok thx all
21:50 < martinrue> --save is now default in newer versions of npm right?
21:50 < ningu> not sure
21:50 < ningu> I don't think so
21:50 < martinrue> I'm having an odd issue, and if it's not default then it'd actually make sense why...
21:51 < martinrue> I have a package with `dependencies` and `dev_dependencies` specified
21:51 < martinrue> and so when I do "npm install" a modification occurs in package.json
21:51 < martinrue> where the `dev_dependencies` are installed and stored inside `dependencies`
21:55 < nathan7> martinrue: hey
21:55 < martinrue> hey nathan7 
21:57 < nathan7> martinrue: That's not correct behaviour afaics
21:57 < nathan7> martinrue: the field is called devDependencies normally
21:58 < nathan7> martinrue: but this seems like a bug
21:58 < martinrue> nathan7: my bad, you're right
21:58 < nathan7> martinrue: if you could reproduce it and report it, that'd be lovely
21:58 < nathan7> martinrue: I'll try to take a look at it
21:59 < martinrue> nathan7: but still, a clean git clone + npm install with --save (either specified or set in config) causes devDependencies to be copied to dependencies
21:59 < martinrue> nathan7: I assumed "npm install" with no package specified would never modify the structure of package.json
22:00 < nathan7> martinrue: that's indeed rather strange
22:00 < nathan7> martinrue: could you please make an issue for it?
22:00 < nathan7> martinrue: http://github.com/isaacs/npm/issues
22:01 < martinrue> nathan7: sure, I'll reproduce in another example first and report if I can
22:02 < martinrue> nathan7: also using an older version here too (1.1.32), so I better upgrade that too
22:03 < nathan7> martinrue: oh, yeah, upgrade first
22:08 < ningu> do any of you know what the norm is if someone writes open source code as an employee of a company or non-profit -- who holds the copyright? I assume the company/non-profit.
22:08 < devnull__> Probably. You can negotiate it.
22:08 < ningu> that is, the code is specifically a contribution to the company's project rather than a side project
22:09 < devnull__> If you are contributing to an existing project then they outline how you may contribute and who owns copyrights.
22:09 < ningu> devnull__: is there any such thing as a joint copyright or does everything have one copyright holder?
22:09 < devnull__> It's all paper. If you create a legally binding agreement to the ownership of a copyright then you can maintain more than one copyright holder
22:10 < ningu> contracts are paper, sure, but there is significant precedent for copyright (maybe not with code but in general)
22:10 < devnull__> I have a contract with a really good friend that we apply to a shared repository of code where we share our side projects. Every thing is shared copyright 100%
22:10 < ningu> so the license just says copyright (c) 2013 devnull__ and friend
22:10 < ningu> or whatever
22:10 < devnull__> Yeah
22:10 < devnull__> Exactly.
22:11 <@isaacbw> ningu: if it isn't explicit in a contract, it generally comes down to whether you were being paid to do it
22:11 < ckknight> ningu: generally when I work for a company I have it very clearly outlined that any code with an OSI-approved license is under my copyright, which given the nature of open source, the company can use as they please even after I'm gone.
22:11 < devnull__> https://github.com/UreaBurns/Tribes/blob/master/ServerAPI/src/main/java/net/coreapi/api/server/APIResponseMessageBodyWriter.java
22:12 < devnull__> Look at how the copyright is done on that class file
22:13 < ningu> ckknight: and if it's a very permissive license like MIT, what benefits does that get you? just claiming credit for your work?
22:14 < ckknight> MIT is my favorite actually. Essentially, since anyone else could use it in a closed-source manner, but so could I.
22:14 < ckknight> if it were GPL or something, only I would be able to close it off after-the-fact
22:15 < ningu> I've heard that if something is public domain then sometimes someone other than the author can claim copyright and restrict the author from using the code
22:15 < ckknight> completely false
22:15 < ckknight> but you can use it however you want
22:15 <@isaacbw> lol
22:15 < ckknight> public domain is the most permissive license there is
22:15 < ningu> so why is the MIT license better than public domain, for example?
22:15 < ckknight> ningu: accreditation
22:15 <@isaacbw> someone could pretend to be the original author, but they wouldn't be able to legally claim copyright
22:15 < ckknight> you don't have to give credit when you use a PD resource
22:16 < ckknight> PD is great for some things, such as public specs
22:16 < ningu> I know people often leave off the advertising clause of the original MIT license though
22:16 < ningu> so where would the credit go?
22:16 < ckknight> e.g. http://promises-aplus.github.io/promises-spec/ is public domain
22:16 < ckknight> ningu: well, the original author made it. They can always claim credit. Anyone who uses it doesn't have to, though.
22:16 < ningu> ok.
22:17 < ningu> and if someone else claims credit I suppose the original author could challenge them, if they had the desire and the money
22:17 < ningu> but not for PD
22:18 < ckknight> ningu: yeah, basically, anyone could call them out on it for claiming credit and be correct, but there's no real legal way to coerce them about it
22:18 < ckknight> outside of standard false advertising laws
22:18 <@isaacbw> publishing something to the public domain is essentially relinquishing your legal rights as the original author
22:27 < ray> hello
22:27 < raadad_w1rk> hey guys
22:27 < raadad_w1rk> what is a good test runner \ framework for node.js
22:27 < raadad_w1rk> I want something that can do both serverside and client side testing
22:27 < vandenoever> i've registered a 'reponse' handler on a http request
22:27 < raadad_w1rk> and has code coverage :D
22:28 < raadad_w1rk> does it exist?
22:28 < ray> can anyone help me about downgrading nodejs?
22:28 < vandenoever> when it returns, is see i'm not interested in the stream. how do i end it?
22:34 < bnoordhuis> ray: it's easy, just `make install` the version you're downgrading to, it'll install over the newer version
22:34 < ray> hi bnoordhuis
22:34 < ray> i have a ubuntu 12.4 tls server
22:35 < bnoordhuis> how / where from did you install node?
22:35 < bnoordhuis> and hi :)
22:35 < ray> look at this> https://breakwall.net/2013/03/build-shadowsocks-server-an-easier-alternative-to-vpn/
22:36 < ray> i installed it, it said me upgrade to latest?  i accept it
22:36 < RienNeVaPlus> hello guys
22:37 < bnoordhuis> ray: oh, then i've no idea - i don't know what that is
22:37 < RienNeVaPlus> i have a question regarding nodes crypto module, am i right to ask here?
22:37 < ray> but i should install latest  version and use version 8 or 6
22:37 < bnoordhuis> RienNeVaPlus: yep
22:37 < ray> because it not work  with https://github.com/clowwindy/shadowsocks-nodejs
22:38 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * b329d51 : unix: stop stream POLLOUT watcher on write error (+1 more commits) - http://git.io/0bOPcA
22:38 < ray> it said: Notice: Please use Node v0.8 or v0.6, DO NOT USE v0.10
22:39 < RienNeVaPlus> great! i am creating a sha1 hash with  crypto.createHash('sha1'), then feed it with a buffer. this works fine, but i now want to copy the state of the hash object to continue feeding it with another buffer at another http request. any idea how to store `hash` and load it at another process?
22:40 < ray> @ bnoordhuis   , how i can remove  node -v v0.10.8 on ubantu? forget links
22:40 < bnoordhuis> RienNeVaPlus: you can't. the underlying openssl object is not reusable/copyable
22:41 < bnoordhuis> ray: if you installed it with `make install`, `make uninstall` will remove it again
22:41 < bnoordhuis> if you use some kind of package manager or install tool, then i don't know
22:41 < ray> apt-get remove node?
22:41 < RienNeVaPlus> well, thats sad :/ but at least i got an answer, i have been digging into this for a while now. thank you bnoordhuis!
22:41 < bnoordhuis> no problem :)
22:42 < adam___> I have an extremely noobish question. How exactly does one go about writing an asynchronous function? What exactly is the mechanism that stops the execution and defers execution until a certain event happens?
22:42 < garthk> World Of Pain Dept.: OAUTH2, three legged, having to implement all three legs… and node-oauth2-provider turns out to require Express, while I was hoping to use restify.
22:42 < garthk> adam___: uh…
22:43 < garthk> adam___: well, the key "defer" bit is that you're waiting for someone else to call back. Ultimately, that's the OS.
22:44 < garthk> adam___: so, let's say an API is createFile(fileName, callback): what ends up happening is that libuv and Node call your callback function once they know the result of the system calls they're making to try to create your file.
22:44 < garthk> adam___: you don't have to worry about how that works. You just have to know how to code around the pattern. 
22:44 < adam___> right, i understand the coding pattern
22:45 < garthk> adam___: createFile(fileName, function(err) { if(err) { /* handle it */ } else { /* do something else } });
22:45 < bnoordhuis> RienNeVaPlus: i kind of lied in that it's technically possible to make an in-process copy of the hash object
22:45 <@isaacbw> adam___: you don't in javascript
22:45 < adam___> how about something simple like.. I want something to execute at a certain time of day. How do I do something like that?
22:45 < bnoordhuis> RienNeVaPlus: but i'm guessing you want to store the hash data somewhere external?
22:45 <@isaacbw> that is in the native layer
22:45 <@isaacbw> adam___: use cron
22:46 < adam___> oh there's a package for that
22:46 < garthk> https://github.com/domenic/restify-oauth2 hope hope
22:47 < adam___> i was trying to come up with a simple example 
22:48 < RienNeVaPlus> bnoordhuis: i am working on a multi request uploader with large files. i recieve chunked data from the clients browser, write it into a WriteStream and need the hash of the whole file. due to the fact, that the files might be very large, i want to avoid, reading them all over again after the last chunk request finished. so i toght i could store the 'pre'-hash of each chunk and assemble them together at the end
22:49 <@isaacbw> adam___: look at harmony generators
22:49 < adam___> so you're saying that the core libs/modules have all possible events covered and i should just code around the asynchronous i/o pattern
22:50 <@isaacbw> adam___: http://wiki.ecmascript.org/doku.php?id=harmony:generators
22:50 <@isaacbw> adam___: um no I didn't say that
22:52 < adam___> this is like python's yield
22:53 < ckknight> adam___: correct
22:53 < ckknight> isaacbw: any idea when they're gonna update that to be in line with the TC39 March notes? https://github.com/rwldrn/tc39-notes/blob/master/es6/2013-03/mar-12.md
22:54 <@isaacbw> no idea
22:54 < bnoordhuis> RienNeVaPlus: if that's in a single process, you can just keep on calling hash.update()
22:54 < garthk> adam___: TL;DR: yes, code around the async pattern. 
22:54 < ckknight> isaacbw: what's in the notes are what are in line with Chrome's dev, and Firefox is using the old way as-is
22:55 < adam___> okay i think i have a better example
22:55 < adam___> let's say within my program, there are several places where a counter is incremented
22:56 < adam___> how would i attach an event where the counter hits a certain number and call the callback
22:56 < ckknight> I'd use EventEmitter, adam___
22:57 < RienNeVaPlus> bnoordhuis: nope, due to the fact, that the clients next request might end up on another instance of node (i am using the cluster functions), this won't work for me :(
22:57 < garthk> adam___: ckknight nailed it. if ((++counter) > threshold) { this.emit('hit-threshold', counter); }
22:57 < ckknight> precisely.
22:58 < adam___> hmm i see
22:59 < adam___> but that means that i would have to do that piece of code everywhere i would want to increment my counter
23:00 < adam___> i wouldn't even have to use that module, i can call the callback directly
23:00 < ckknight> sure.
23:00 < ckknight> it's your code
23:00 < adam___> or am i missing something
23:01 < garthk> adam___: don't get too spooked by the async stuff. This is still code. You're still a programmer. You can factor stuff out.
23:01 < adam___> if i call the callback directly, it would be in a somewhat synchronous fashion because it happens immediately after counter increment, but i would assume that this EventEmitter would push it to the event stack
23:02 < garthk> adam___: back to ckknight's example: you create an EventEmitter which OWNS the counter. You add a function to it which people call to increment the counter. That function emits the event when the threshold is hit. Anyone who wants to increment the counter calls the function. Anyone who wants to know when the threshold is hit subscribes to the event.
23:02 < adam___> oh i am not all too spooked by it and i've dealt with the pattern before. i am just wondering what is the exact mechanism in node.js
23:03 < ckknight> adam___: the mechanism basically boils down to calling a function. Whether you want to handle the function invocation directly or through an event system like EventEmitter is your prerogative.
23:04 < garthk> adam___: if I recall right, you can pound on emit() and EventEmitter will do all the work in the current tick… up to a point. Eventually it'll figure it's time to yield so timers and I/O callbacks can get some work done.
23:05 < adam___> i was wondering if there was a solution where the counter is handled by its own entity rather than having all instances where the counter is modified explicitly execute some code
23:05 < garthk> adam___: yes. You create that EventEmitter I talked about. It's the "entity". 
23:05 < spion> does the node windows installer add to the PATH environment variable?
23:06 < ckknight> adam__: function makeCounter() { var count = 0; return { inc: function () { ++count; }, get: function () { return count; }; }
23:06 < ckknight> add callback registration to that as you please
23:07 < phillip> where is "stdout" for node?
23:08 < spion> there is a stdout stream, process.stdout
23:08 < adam___> i see
23:08 < spion> and then there is console.log to log stuff to stdout
23:10 < phillip> thanks spion
23:10 < phillip> I'm getting lost using browserify with beefy
23:11 < phillip> browserify works great by itself--but doesn't seem to get invoked when I run beefy
23:11 < spion> i usually just make my own build script
23:11 < phillip> https://github.com/chrisdickinson/beefy
23:11 < adam___> thanks garthk and ckknight for the insight
23:11 < spion> using shelljs - also gaze to set up watches
23:11  * substack just runs browserify directly
23:12 < ckknight> adam___: *thumbs up*. There are many ways to do things, and not necessarily a best way.
23:12 < substack> soon I'll finish the refcounting in browserify so that third-party libs can set up watchers
23:12 < substack> and re-compile bundles with fast caching
23:13 < phillip> browserify will/has definitely changed the way I do client side JS
23:14 < phillip> substack, what do you mean (in docs) when you say "browserify-able node modules"?  What kind of modules don't work?
23:14 < adam___> actually one more question. is there a way to watch a variable for changes and perform a callback based on that
23:15 < martinrue> nathan7: tested again and got same thing in 1.2.23, opened an issue here so people can determine if it's undesired behaviour https://github.com/isaacs/npm/issues/3489
23:15 < nathan7> martinrue: thanks!
23:16 < martinrue> nathan7: thanks for the help
23:16 < substack> phillip: modules that don't populate exports/module.exports
23:16 < substack> like module that assign their junk onto `window`
23:17 < phillip> so if it's commonjs compliant it'll work then
23:18 < d4rklit3> substack, when will this ref counting be done? rigth now i have to use a transform to find all the references which breaks if there is a compile error.
23:19 < d4rklit3> not sure if I just build a totally seperate file watcher outside of browserify all together.
23:19 < garthk> substack: got Node 10 streams behaving properly now? I'm ~ok with my chunky (array of values) version of dominictarr's through module. 
23:52 < niggler> I have a module A and a module B that requires A.  I have a program C that requires B.  I want to set a debug mode in C and have that propagate to B and A (so that certain logging statements only show up in debug mode).  What's the standard way to do that?
23:54 <@Nexxy> with an environment variable
23:56 < ningu> I suppose you could also put a method on B to set its debug level
--- Log closed Mon May 27 00:00:14 2013
