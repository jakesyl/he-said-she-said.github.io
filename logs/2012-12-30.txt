--- Log opened Sun Dec 30 00:00:51 2012
00:01 < TehShrike> I've never gotten into the habit of writing tests as such, I usually write small example implementations for my libraries and use those as my tests
00:02 < emkei> TehShrike: basically it's the same :D
00:03 < TehShrike> Well, my examples don't produce pass/fail outputs, it takes a human to watch what happens and decide whether or not it was successful
00:03 < TehShrike> So I guess there's that
00:10 < dook> I have a fairly noobish, yet fundamental question regarding node app flow.
00:11 < dook> I have a series of APIs to query, and I was calling each one in a callback of the last, but when I query the first one multiple times, it will prevent the uniqueness of the callbacks..?  I think it's a scoping problem.
00:12 < dook> What's the proper way to scope multiple callbacks in js?  One friend was suggesting unique emitter IDs?
00:14 < Iszak> dook perhaps have a look at a async library if you want to do things in an sequence.
00:14 < dook> I will do that, thank you!
00:15 < dook> Will async protect the uniqueness of the callbacks within a function when called multiple times?
00:15 < Iszak> dook I'm not sure what you mean about "protecting the uniqueness"
00:16 < dook> Trying to word the problem, but I'm not entirely sure where it comes from… let me try to rephrase...
00:16 < Iszak> the context will be unique if that's what you mean.
00:16 < Iszak> dook perhaps a code sample is in order.
00:16 < dook> all the internal variables unique to within that callback?
00:17 < Iszak> within the closure, sure.
00:17 < dook> I agree, I will try to mock up what I mean.
00:32 < yani> hi everyone, I defined a few helper functions in Date object using Date.prototype - how to import the helper functions into another file? if I invoke require('') will it extend the global Date object?
00:32 < isaacbw> anyone here in the nyc area?
00:34 < MI6> joyent/node: isaacs created branch v0.9.5-release - http://git.io/Mw36Ug
00:35 < Iszak> isaacbw I wish!
00:37 < Iszak> yani so you're creating an object that prototypes date and adds your own methods?
00:37 < yani> Iszak: yes, Date.prototype.test_me = function() {}
00:37 < isaacbw> if you ever come out here, give a ring ;)
00:38 < isaacbw> the tech startup community is growing too
00:38 < Iszak> yani wouldn't that extend the Date object directly?
00:39 < yani> Iszak: it should, yes - I am just not sure if the changes persist when the file that extends the Date object is included into another file using require('')
00:40 < Iszak> yani but.. why would you want to directly prototype the date object?
00:40 < Iszak> I don't know, I just think of that prototype framework.. took it a bit too far.
00:41 < yani> it seems to be missing a few nice methods like get_zulu_date
00:41 < yani> or get the date formatted in a certain way
00:41 < Iszak> yani yes I know, but why not create your own object that prototypes the date and adds your own methods?
00:41 < Iszak> instead of polluting the date object with your methods.
00:42 < Iszak> isaacbw well.. I'm on the other side of the pond! and the other coast seems to be calling me more.
00:43 < yani> Iszak: that's another way, yea - I am considering it now
00:43 < Iszak> yani I would prefer that, because you don't know who else has edited the date..
00:44 < yani> Iszak: thanks :)
00:45 < Iszak> yani don't thank me! just putting my two cents in.
00:45 < RigidWig> anyone know why this all of sudden started to happen? http://pastebin.com/t25LS49U
00:46 < RigidWig> 10 minutes ago helloworld.js worked just fine...
00:46 < Iszak> RigidWig possibly an existing process failed to terminate.
00:46 < RigidWig> hmmm
00:46 < Iszak> RigidWig what OS?
00:46 < RigidWig> debian
00:46 < Iszak> ps aux | grep node
00:46 < Iszak> should show you running node processors alternatively you can do lsof -i :port
00:46 < Iszak> and just.. kill -QUIT that shit
00:46 < RigidWig> right, I see them, didn't know that's what was doing it. thanks Iszak...
00:57 < MI6> joyent/node: isaacs v0.9.5-release * 01994e8 : 2012.12.30, Version 0.9.5 (Unstable)  * assert: improve support for new e (+1 more commits) - http://git.io/enbdYw
01:08 <@isaacs> v0.9.5 is coming out in a few minutes
01:08 <@isaacs> mostly just some bug fixes and performance improvements over 094
01:08 <@isaacs> expect nearly-weekly releases until 0.10 lands
01:10 < Iszak> isaacs awesome! I look forward to it.
01:11 <@isaacs> there's still a lot of progress needed before we can release 0.10
01:11 < Iszak> isaacs have we got a roadmap?
01:12 <@isaacs> Iszak: https://github.com/joyent/node/issues?milestone=14&state=open
01:12 < Iszak> thanks
01:12 <@isaacs> Iszak: but mostly, http_simple has to be faster than v0.8
01:12 <@isaacs> that's the main blocker, imo
01:12 <@isaacs> Iszak: it's sooo hard for me to type "isz" instead of "izs"
01:13 < Iszak> isaacs sorry can't change my name, why izs over isz? Also why is that a blocker, not like performance is the be all and end all?
01:13  * isaacs is isaac zimmitti schlueter, aka @izs on twitter
01:13 <@isaacs> Iszak: we can't release a new stable version of node that isn't faster than the previous one
01:14 <@isaacs> Iszak: slowness is a critical bug.
01:14 <@isaacs> node must always be faster.
01:14 <@isaacs> this is a rule.
01:14 < Iszak> I think it's a good goal, but it's not really a bug, it can be a byproduct of features. What if v8 make node.js slower?
01:14 <@isaacs> then we would use a different version of v8
01:14 < Iszak> hold back the v8 upgrade and I didn't realize it was your twitter handle.
01:14 <@isaacs> yes, it is a bug.
01:15  * isaacs getting confused by the conversation thread preemption here...
01:15 <@isaacs> :)
01:16 <@isaacs> if it's a byproduct of features, then we change or remove the features that make us slow.
01:17 < othiym23> I think that's a fine goal
01:17 < Iszak> isaacs I'm not going to dispute it, mostly because at the end of the day your make the decision. Just interesting to see it be the deciding factor on all changes.
01:18 < othiym23> 0.8 isn't going to suddenly stop working
01:18 <@isaacs> yeah
01:18 <@isaacs> that's why 0.8 is faster than 0.6, and 0.6 is faster than 0.4
01:19 < Iszak> isaacs the real question is, performance in what form? real world of synthetic ?
01:19 < jamesd> from what i have heard, is that most node code is limited by network wire/pipe speed... 
01:19 <@isaacs> Iszak: we have a few benchmarks which stress node's known slow points, and a basic http server that just gets requests and sends responses
01:20 <@isaacs> if you run the same benchmark in the same system with the same network against localhost, then the networking is equivalent in both cases.
01:20 <@isaacs> and then any diff is due to node doing too much work
01:20 <@isaacs> especially if oyu send a very small response
01:20 <@isaacs> like, a 1 byte http response
01:20 <@isaacs> then the bottleneck becomes node itself
01:20 <@isaacs> that's why so much of node is so ridiculously optimized around http and event handling
01:21 <@isaacs> because any slight loss there slows down everything
01:21 <@isaacs> and we see it in the http_simple benchmark
01:23 < Iszak> isaacs makes sense to optimize those areas if that's the case. Anyhow, I don't want to go down the rabbit hole too much, I'm sure you have much more pressing matters to attend to.
01:25 <@isaacs> basically, if node isn't fast, it's kind of shit.
01:25 <@isaacs> programs get slow because you don't work on making them fast, so we work hard on making node fast.
01:25 <@isaacs> for example, npm: dog slow.
01:25 <@isaacs> because, really, who cares?
01:25 <@isaacs> you don't run it at runtime, so it can do a bunch of stuff
01:25 < Iszak> I would like faster npm tbh.
01:25 <@isaacs> heh
01:26 <@isaacs> i mean, it's not THAT slow, i guess.
01:26 <@isaacs> but there's a lot of opportunity for optimizations there, i'm sure.
01:26 < Iszak> it's like tests, they can be sooo slow sometimes. Any improvement over them is welcome.
01:26 <@isaacs> yeah
01:26 <@isaacs> oh, node's `make test` has been making me crazy with its slowness lately.
01:26 <@isaacs> of course, there's like 500 tests to run
01:27 < Iszak> isaacs throw resource at it? doesn't node.js have a build bot or something.
01:27 < Iszak> CI server or something
01:27 < MI6> joyent/node: isaacs created tag v0.9.5 - http://git.io/tawzEw
01:28 < MI6> joyent/node: isaacs master * 30bd774 : Now working on 0.9.6 (+3 more commits) - http://git.io/p2B-KQ
01:28 < jamesd> considering the creator of node, now works for the company that also has the creator of dtrace.... node has built in some of the best tools for finding performance and other issues despite running javascript that is very hard to debug... 
01:29 < MI6> joyent/node: isaacs v0.8 * 44ceb5d : blog: Post for v0.9.5 - http://git.io/jGT6RA
01:29 < Iszak> didn't know that.
01:32 <@isaacs> jamesd: ryan doesn't work for joyent any more.
01:33 <@isaacs> jamesd: he left a while ago to be a full-time hipster in brooklyn
01:33 <@isaacs> :)
01:33 < TehShrike> lol
01:33 < Iszak> can't tell if isaacs is serious or not.
01:33 <@isaacs> he still advises and follows things, but he's not very much involved with the actual running of node.
01:33 < TehShrike> Can I hire him to be a hipster near me?
01:33 <@isaacs> Iszak: i am always serious about the jokes i make.  and always joking about being serious.
01:33 < TehShrike> I have a couch
01:33 < TehShrike> I know a good hipster coffee shop
01:33 <@isaacs> TehShrike: i think you just need PBR to hire hipsters.
01:34 < TehShrike> Well shit
01:34 < TehShrike> Give me his number
01:34 < jamesd> pabst blue ribbon beer?
01:34 <@isaacs> hahah
01:34 <@isaacs> well, 0.9.5 is out.  enjoy
01:34 <@isaacs> now i'm off to vacation for a week.
01:34 < TehShrike> Enjoy!
01:34 < mmalecki> imagine the looks you'd get for showing up at a hipster coffee shop with him
01:34 < mmalecki> I bet almost everyone codes node there
01:34 < TehShrike> eh, the hipsters around here probably aren't cool enough to know him
01:34 < TehShrike> They're not useful hipsters
01:35 < TehShrike> They're college hipsters
01:35 < Iszak> isaacs just because ryan left joyent that's not to say he can't still contribute? or does joyent kind of like, own the rights to node.js?
01:35 <@isaacs> Iszak: oh, he can contribute.  (so can you, or anyone)
01:35 <@isaacs> that's how open source works :)
01:35 < mmalecki> TehShrike: ah, the least useful kind of hipsters, indeed
01:35 <@isaacs> he just... doesn't.
01:35 <@isaacs> because he's not working with node, so doesnt' mess with it much any more.
01:35 < Iszak> oh man that sucks.
01:35 <@isaacs> yeah.  what're you gonna do though?
01:35 < mmalecki> Iszak: people have to move on sometimes :)
01:35 < mmalecki> that's like, life
01:36 <@isaacs> he got sick of it.
01:36 < Iszak> yeah, I get like that with most projects after a few months.
01:36 < Iszak> I'm a starter, not a finisher.
01:36 <@isaacs> Iszak: ryah's a dabbler.  he likes trying stuff out.  working every day on teh same thing for 3 years was too much.
01:37 < TehShrike> I suspect he's crazy
01:37 <@isaacs> as a node person, it *really* sucks, because he was pretty damn good at making node good.  but as a friend and colleague, i mean, he needed to leave, so i'm glad he did.
01:37 < TehShrike> I saw a video of a talk he gave about node.js and his life beforehand.  It was awesome.
01:37 < mmalecki> TehShrike: on the other hand, do you know someone who isn't?
01:38 < TehShrike> mmalecki: nobody interesting
01:38 < mmalecki> yup :)
01:38 < Iszak> my relationship with node.js is a love/hate type of relationship.
01:38 < TehShrike> #jifasnif
01:40 <@isaacs> well, it's been fun, but i've got about an hour to pack for mexico.  g'nite 
01:40  * isaacs out
01:40 -!- Topic for #Node.js: Node.js - https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 - http://logs.nodejs.org/node.js/ | http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
01:40 -!- Topic set by konobi [~scott@aravis.narnia.org.uk] [Sun Dec 23 14:40:22 2012]
01:40 < inolen> thx for getting 0.9.4-5 out
01:42 <@konobi> and in new module update news... https://github.com/mcavage/node-restify/tree/master/examples/todoapp
01:46 < TehShrike> substack: when are you going to approve my incredibly important pull request >:-|
01:48 < substack> TehShrike: which repo?
01:49 < TehShrike> substack: subdir
01:49 < TehShrike> I made it Windows-friendly!
01:49 < TehShrike> And then I was going to write appropriate tests, but I wasn't sure how you would want to handle OS-specific tests
01:51 < substack> oh ok
01:52 < TehShrike> I was going to add a new file to the test folder, but I thought that seemed a bit audacious.
02:02 < JamesS237> Hi, is it possible to format a disk using Node.js? Or would I need a C++ extention?
02:03 <@konobi> JamesS237: call out to another program
02:04 < JamesS237> @konobi: Thanks, so something like GParted would be fine?
02:04 < substack> TehShrike: merged
02:05 < TehShrike> I love deleting forked repos
02:05 < JamesS237> @substack: With your libray propagit, is it possible to have it autodeploy? And also, is it stable enough for production?
02:05 <@konobi> JamesS237: yup
02:06 < substack> JamesS237: I would just use pushover directly
02:07 < JamesS237> @substack: I'm just getting used to node.js and git, how would I do that?
02:11 < substack> TehShrike: you broke my tests :( http://ci.testling.com/substack/subdir
02:11 < substack> reverting
02:12 < TehShrike> substack: the tests all passed for me :-x 5 of them were failing for me before the change
02:13 < substack> anyways fixed now http://ci.testling.com/substack/subdir
02:14 < TehShrike> Does path.sep not exist in the testling environment?
02:14 < substack> doesn't work on 0.6 either https://travis-ci.org/substack/subdir/jobs/3877179
02:14 < substack> path.sep is a 0.8 thing
02:14 < andrewaclt> I'm using socket.io and express. Socket.io seems to be sending requests to http://localhost:3000/socket.io/1/?t=4324234 instead of ip or domain of the machine I'm actually on. How do I change this?
02:14 < TehShrike> aah, I see
02:14 < shama> path.sep = path.sep || path.normalize('/');
02:14 < TehShrike> What versions of node do you usually aim to support substack?
02:15 < substack> the versions I'm using in production
02:15 < substack> 0.8 right now
02:15 < substack> although we still have some processes on 0.6
02:16 < TehShrike> I hadn't realized path.sep was so recent
02:17 < Technodrome> who here uses node.js for server side scripting? 
02:17 < TehShrike> meeee?
02:19 < Technodrome> i don't see to many using it for that
02:19 < Technodrome> mostly for web serviceds etc
02:19 < TehShrike> That's the most common use, yeah.  But I've seen a bunch of command-line scripts, too
02:20 < Technodrome> seems like express is the most popular 
02:21 < TehShrike> Middleware?
02:22 < fauverism> Hi anybody around?
02:22 < TehShrike> m|
02:22 < tjfontaine> fauverism: we're all figments of your imagination
02:22 < fauverism> lol
02:24 < fauverism> Hey so I have a question about using node without having sudo access on my computer. it's kind of pissing me off that I can't figure out a way around it. Is there a way to develop with node directly on a server? 
02:24 < TehShrike> Yeah, use a port over 100
02:24 < tjfontaine> fauverism: do you have enough root to make some changes to allow it?
02:26 < fauverism> nah, I'm pretty locked down. I have a company computer that prompts me for a u & p anytime I have to install anything from a package. I tried sshing into my mt(gs) and installing there but it's didn't work out to well. Forgive me if I'm asking obvious questions I'm a bit of a newbie to node
02:27 < fauverism> so i can't install node
02:27 < tjfontaine> you need to be able to muck with capabilities to allow regular users to bind to < 1024, or use a package like authbind
02:27 < tjfontaine> another options is to use the firewall to redirect traffic
02:27 < tjfontaine> *option
02:28 < fauverism> ok cool, i'll give it a shot
03:22 < _numbers> how could i effectively write a UInt8Array to disk, and read it back off the disk again?
03:22 < tjfontaine> .writeFile and .readFile
03:23 < TehShrike> What's the Right way to check to see if a module is being run from the command-line versus included with require?
03:25 < TehShrike> typeof module.parent === 'undefined'?
03:25 < tjfontaine> TehShrike: http://nodejs.org/api/all.html#all_accessing_the_main_module
03:25 < _numbers> tjfontaine: tried it but i get a file with a string content of: [object Uint8Array]
03:25 < _numbers> so its like writeFile did a .toString() on it first
03:25 < TehShrike> tjfontaine: aah, excellent.  Thanks
03:25 < tjfontaine> _numbers: your UInt8Array is a view of a source buffer? use that source buffer
03:26 < tjfontaine> _numbers: looks to be accessible with the .buffer member
03:26 < _numbers> hm its a huge lib and its minified so i'd rather convert uint8array back into a buffer if thats necessary
03:28 < tjfontaine> _numbers: writeFile(fname, uintarr.buffer, cb);
03:28 < _numbers> oic http://msdn.microsoft.com/en-us/library/ie/br230734(v=vs.94).aspx
03:28 < _numbers> ok now i have a file with a string: [object ArrayBuffer]
03:30 < _numbers> maybe i need to set filetype to 'binary'
03:31 < _numbers> or maybe i need to pass buffer to fs.createWriteStream ?
03:33 < _numbers> https://github.com/OptimalBits/fs.js#writeFile
03:33 < tjfontaine> well, it's expecting a Buffer which is a node type, and you're passing ArrayBuffer which I just presumed would have a fallback
03:35 < _numbers> node.js has both ArrayBuffer as part of v8, but the Buffer class provides a more flexible API. In order to read or write to an ArrayBuffer, you only need to create a view and copy across.
03:35 < _numbers> http://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer
03:35 < tjfontaine> _numbers: interestingly if you construct your Uint8Array from a Buffer, the .buffer member will be the right type, but if you new Uint8Array(10) it will be an array buffer
03:37 < _numbers> ah the toBuffer function worked
03:37 < _numbers> now how can i read it back into the Uint8Array format hmm
03:37 < tjfontaine> _numbers: so for this use case I would suggest instantiating your uint8array from a buffer proper object to avoid the copy procedure
03:37 < _numbers> tjfontaine its complicated. i think i am stuck with it for now
03:37 < tjfontaine> _numbers: nwe Uint8Array(readFileSync())
03:43 -!- mode/#Node.js [+o ryah] by ChanServ
03:47 -!- mode/#Node.js [+oooo wookiehangover freeformz sugyan minism] by ryah
03:47 -!- mode/#Node.js [+oooo inarru Gabriel413 zhware rafmc] by ryah
03:47 -!- mode/#Node.js [+oooo L10n percival__ Clex RageLink] by ryah
03:47 -!- mode/#Node.js [+oooo hkri tippenein Bwild_ mmalecki] by ryah
03:47 -!- mode/#Node.js [+oooo happosade aromasca_ draginx nail_] by ryah
03:47 -!- mode/#Node.js [+oooo topi` shama cTIDE rgmarcha_] by ryah
03:47 -!- mode/#Node.js [+oooo soahccc mistertwig gregmoreno simply-chris] by ryah
03:47 -!- mode/#Node.js [+oooo niclone william-s ryo heath] by ryah
03:47 -!- mode/#Node.js [+oooo kurd_debuggr kenperkins wavded_ jefferai] by ryah
03:47 -!- mode/#Node.js [+oooo sohcahtoa six JohnMcLear _br_] by ryah
03:47 -!- mode/#Node.js [+oooo chunhao ikss Zuchto ralphtheninja] by ryah
03:47 -!- mode/#Node.js [+oooo gf3 codelahoma russell_h bbloom] by ryah
03:47 -!- mode/#Node.js [+oooo SlexAxton vitsaus gildean __class__] by ryah
03:47 -!- mode/#Node.js [+oooo zykes- defunctzombie creationix Christian87] by ryah
03:47 <@mistertwig> oh god
03:47 < _numbers> hm
03:47 -!- mode/#Node.js [+oooo Pilate sorensen francisl mephux] by ryah
03:47 -!- mode/#Node.js [+o __main__] by __class__
03:47 -!- mode/#Node.js [+oooo tomb Me1000 kth5_ utf1000] by ryah
03:47 -!- mode/#Node.js [-o ryah] by mistertwig
03:47 -!- mode/#Node.js [+oooo Sonderblade limeforce_ chjj ootje] by ryah
03:47 <@mistertwig> lol
03:47 < _numbers> wtf was that
03:48 -!- mode/#Node.js [+b *!*@97.107.132.72] by mistertwig
03:48 -!- ryah was kicked from #Node.js by __main__ [Banned]
03:48 <@mistertwig> that was strange 
03:49 < _numbers> tjfontaine: working on this https://npmjs.org/package/node-sqlite-purejs
03:50 <@mistertwig> what was that?
03:51 < _numbers> hopefully an irc bot written with node.js
03:53 -!- mode/#Node.js [-oooo wookiehangover freeformz sugyan minism] by mistertwig
03:53 -!- mistertwig was kicked from #Node.js by __class__ [Mass deop.  Go sit in a corner.]
03:53 < ashnur> :))
03:53 < mistertwig> :(
03:54  * mistertwig sits in a corner
03:56 < mistertwig> isaacs: 
03:56 < tjfontaine> _numbers: it would seem like someone should teach emscripten a bit about real buffer's though that would probably break their browser stuff slightly
04:00 < _numbers> ya i dunno. still learning about Buffers :)
04:00 < mistertwig> isaacs needs to get on
04:01 < tjfontaine> why are you invoking him?
04:03 <@mbalho> he just went on vacation
04:03 <@mbalho> but i am a mod in case you want to do mod things
04:03 < mistertwig> everyone is op :P
04:03 < mistertwig> well okay not everyone 
04:03 <@mbalho> ryans drunk again, damn
04:03 < mistertwig> but quite a few
04:03 < tjfontaine> not everyone, ryah likes to pop in every once in a while and have fun with ops
04:04 < mistertwig> well it could have been everyone :P
04:04 <@mbalho> i dont even know the command to de-op someone, im noob
04:04 -!- mode/#Node.js [-oooo hkri heath inarru creationix] by ChanServ
04:04 -!- mode/#Node.js [-oooo zykes- defunctzombie gildean Bwild_] by ChanServ
04:04 -!- mode/#Node.js [-oooo bbloom Pilate Clex codelahoma] by ChanServ
04:04 -!- mode/#Node.js [-oooo ootje konobi mmalecki russell_h] by ChanServ
04:04 -!- mode/#Node.js [-oooo SlexAxton vitsaus limeforce_ gf3] by ChanServ
04:04 -!- mode/#Node.js [-oooo __main__ kth5_ mbalho zhware] by ChanServ
04:04 -!- mode/#Node.js [-oooo Gabriel413 isaacs Zuchto jefferai] by ChanServ
04:04 -!- mode/#Node.js [-oooo nail_ Christian87 rgmarcha_ Sonderblade] by ChanServ
04:04 -!- mode/#Node.js [-oooo percival__ wavded_ chunhao Nexxy] by ChanServ
04:04 -!- mode/#Node.js [-oooo simply-chris mephux _br_ __class__] by ChanServ
04:04 -!- mode/#Node.js [-oooo sohcahtoa six tippenein chjj] by ChanServ
04:04 -!- mode/#Node.js [-oooo aromasca_ ryo cTIDE ikss] by ChanServ
04:04 -!- mode/#Node.js [-oooo utf1000 happosade niclone JohnMcLear] by ChanServ
04:04 -!- mode/#Node.js [-oooo kenperkins RageLink topi` L10n] by ChanServ
04:04 -!- mode/#Node.js [-oooo kurd_debuggr Me1000 soahccc william-s] by ChanServ
04:04 -!- mode/#Node.js [-oooo ralphtheninja sorensen tomb draginx] by ChanServ
04:04 -!- mode/#Node.js [+im-oooo gregmoreno rafmc francisl shama] by ChanServ
04:04 -!- mode/#Node.js [-b *!*@97.107.132.72] by ChanServ
04:04 -!- mode/#Node.js [+o ryah] by ChanServ
04:04 <@ryah> :)
04:07 -!- mode/#Node.js [+o isaacs] by ryah
04:36 -!- #node.js Aria!~aredridel@209-6-40-98.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com has asked for an invite.
05:19 -!- mode/#Node.js [+o Nexxy] by ChanServ
05:19 -!- mode/#Node.js [-im] by Nexxy
05:19 <@Nexxy> O_o
05:19 <@Nexxy> wtf happened in here
05:19 <@Nexxy> lol
05:19 < nC-r> we got
05:19 < nC-r> pwnt by ryah
05:19 <@Nexxy> lol
05:19 <@Nexxy> who set +im?
05:19 < nC-r> chan?
05:20 <@Nexxy> someone made a twitter account just to tell me about it
05:20 <@Nexxy> lol
05:20 < nC-r> haha
05:20 <@Nexxy> weirdos
05:20 < mbalho> aww
05:20 <@Nexxy> o hai
05:20 < Technodrome> is express the most used web framework?
05:20 < mbalho> ryah hit me mommy
05:22 < mistertwig> thanks Nexxy
05:26 < astropirate> Who wants to be friends
05:27 < astropirate> not the ckrikets
05:27 < s5fs> astropirate: man i totally wanna be friends
05:27 < astropirate> \o/
05:28 < astropirate> s5fs, to be sure you arne't one of the 99% wire me 5 million, i'll send it back tommarow
05:28 < arnorhs> astropirate: i am willing to be your friend because i need a shoulder for my parrot
05:28 < arnorhs> space parrot
05:29 < astropirate> :D
05:29 < astropirate> who wants to work on a project together 
05:29 < arnorhs> what kind of project?
05:30 < astropirate> a cool one
05:30 < astropirate> i'll pm you
05:30 < s5fs> how cool?
05:30 < astropirate> ehh its alright
05:30 < s5fs> haha!
05:35 < nC-r> spill it then, what're you two making
05:42 < nyxynyx> Hello! What framework will you use if you are implementing a backend data processing + job queue system?
05:44 < nyxynyx> Also, will Kue be something u will recommend if you will be adding jobs scheduled to run a specific time in the future
06:20 -!- mode/#Node.js [+o ryah] by ChanServ
06:27 < jden|away> for cli tools intended to be installed globally, is there a preferred way to store config files? other than creating another dotfile in $HOME? I was looking through https://npmjs.org/doc/config.html#Per-Package-Config-Settings but that doesn't seem like what I want
06:31 < mAritz> jden: why not the folder where your module is installed to?
06:35 < jden> doh! now there's an idea. maybe I do need sleep after all.... thanks :)
07:26 < chovy> i just got a 2TB server for $160/year
07:27 < AviMarcus> 2TB of what?
07:27 < chovy> disk
07:27 < chovy> 4gb ram
07:27 < AviMarcus> :o
07:27 < AviMarcus> ... sounds too good to be true :P
07:27 < chovy> well, they are still processing the order
07:28 < chovy> but i have another server w/ them and its real.
07:28 < mistertwig> from where?
07:28 < mistertwig> and how is the ddos protection
07:28 < chovy> i have no idea
07:28 < chovy> about ddos
07:28 < mistertwig> oh
07:28 < AviMarcus> do you know where you bought it from? :P
07:28 < chovy> ovh.ie
07:29 < AviMarcus> oh them. I didn't know they had something so cheap.
07:29 < chovy> they just started selling them
07:29 < chovy> it's basically double ram/disk their normal starter package
07:29 < AviMarcus> Ah, i have a 2GB ram + 1TB hd from them for $25/month, but I don't really use it yet
07:30 < AviMarcus> maybe I should swap :P
07:30 < chovy> yeah
07:30 < chovy> i bought a server from them a month ago.
07:30 < chovy> i only paid for 3 months, so I ordered this one yesterday
07:30 < AviMarcus> I haven't really been monitoring it for uptime
07:30 < chovy> and will cancel the other
07:30 < chovy> i have not had mine go down at all in a month
07:31 < AviMarcus> it says uptime: 187 days but I wasn't pinging it
07:31 < AviMarcus> do you have a link to the package?
07:32 < chovy> mines been up 36 days.
07:32 < chovy> i will pm you, as they only have 30 left it says
07:32 < AviMarcus> thx
07:32 < chovy> and i haven't heard anything since i placed my order
07:35 < GreenDog> wtf
07:35 < GreenDog> that's cheaper than vps
07:36 < RigidWig> (how, or) can I .end a url.parse for a/all GET variable/s?
07:40 < RigidWig> not in express, that is
07:45 < chovy> GreenDog: yeah, its the best deal around, but you get 0 support
07:45 < AviMarcus> GreenDog, kimsufi is their "cheap" no-support, non-premium options side. I think all servers are in france, maybe some in UK. My last server is in france
07:46 < GreenDog> that's just slightly less than anyplaace else
07:46 < chovy> this one is in canada
07:46 < chovy> the special edition
07:46 < AviMarcus> oh? well. Hmm.
07:46 < AviMarcus> how do you know?
07:46 < chovy> because it says when you order it
07:47 < chovy> just add it to your cart you'll see they tell you what data center its in
07:47 < AviMarcus> "North East Canadian Datacenter (BHS)" I see.
07:47 < chovy> all these kimsufi special editions are in can
07:47 < AviMarcus> no, I have the http://www.ovh.ie/dedicated_servers/kimsufi.xml -- KS 2G  in france
07:47 < chovy> which will be a bit faster if you're in the US, but if you're in europe, probably slower
07:48 < chovy> AviMarcus: yeah, i have that one too -- its in France. I was talking about the special edition, basically the KS 2G w/ double ram/disk
07:48 < AviMarcus> oh I thought you meant all their specials
07:48 < chovy> http://www.ovh.ie/dedicated_servers/kimsufi_special_edition.xml
07:49 < AviMarcus> yeah, I got it now.
07:49 < AviMarcus> Not sure I want one in canada, though... my stuff is in London. I use linode for my production stuff.
07:50 < chovy> i have a cheap vps for $15/mo, but its only like 50gb or something
07:50 < chovy> in germany i think
07:50 < AviMarcus> I pay $40 for 1gb ram + 48gb HD but it's truly production quality :)
07:50 < chovy> i'm just using it for data backups, so i'd rather have 2TB.
07:51 < chovy> i can only upload at 1.5Mbps, so it takes me weeks with rsync to transfer all my data anyway. I don't really care where it is.
07:51 < AviMarcus> :)
07:51 < chovy> but canada is going to be a little better.
07:57 < chovy> linkedin got hacked, should change your pw
07:57 < mistertwig> really?
07:57 < mistertwig> links
07:58 < hol67> chovy: again?
07:58 < chovy> wait a ec
07:58 < chovy> i guess this is an old article from june
07:58 < chovy> http://thenextweb.com/
07:58 < chovy> i don't know why its on their homepage
07:58 < hol67> Ya a few others were hacked since then
07:58 < hol67> They're proud of it? 😁
07:59 < chovy> wtf, i've been reading this site for like 4 weeks now, and just realized all the articles i've been reading are outdated
08:01 < hol67> chovy: haha
08:02 < chovy> i guess it is just their homepage that has outdated stuff.
08:02 < snyp> i have a bit of confusion, what does 'this' refer to inside a callback function? I have an object which has an init(filename, params) function property, I call fs.readFile() from within the init() function, it seems the 'this' refers to fs instead of my object? :\ 
08:03 < snyp> 'this' is inside the callback function for readFile.
08:04 < mistertwig> chovy: not very good "news"
08:04 < SoulRaven> hello
08:04 < SoulRaven> there is something similar in node with window.crypto.getRandomValues
08:04 < mistertwig> er what
08:05 < SoulRaven> https://developer.mozilla.org/en-US/docs/DOM/window.crypto.getRandomValues
08:05 < chovy> mistertwig: yeah. i am still looking for good news source
08:05 < mistertwig> SoulRaven: in node?
08:06 < SoulRaven> yes
08:06 < mistertwig> yes there is
08:06 < mistertwig> hold on i have something i used
08:06 < AviMarcus> what kind of news?
08:06 < AviMarcus> quartz has some good stuff, but it's world political/business, not really tech
08:06 < chovy> snyp: i have read this so many times i i still don't understand this that well: http://net.tutsplus.com/tutorials/javascript-ajax/fully-understanding-the-this-keyword/
08:06 < mistertwig> SoulRaven: in the crypto module
08:07 < mistertwig> http://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback
08:07 < mistertwig> there lol
08:07 < SoulRaven> thx:)
08:07 < snyp> chovy: I am using var self = this; in the beginning of the init function to get around this. ok reading what you linked.
08:07 < mistertwig> i think the node.js one is better
08:08 < AviMarcus> chovy, nextdraft.com is also reasonable, but it's more "what's happening" and including the trending youtube videos
08:08 < AviMarcus> (both of those are daily newsletter wrap-ups)
08:08 < mistertwig> has anyone used sequelize?
08:08 < AviMarcus> tried it, I stopped. I've never gotten the hang of an ORM :/
08:09 < mistertwig> yeah i want to make a website using MVC pattern
08:09 < mistertwig> and i've heard you've gotta use an ORM
08:09 < mistertwig> for the models
08:09 < AviMarcus> supposedly an ORM can making DB interactions magical, but I've only found them to be restrictive and not do what I want to do. I've been doing raw SQL queries for years....
08:09 < mistertwig> that's what i'm thinking lol
08:10 < mistertwig> looks like it's a lot more verbose
08:10 < AviMarcus> if you're doing no-sql with no joins, then an ORM will be easier
08:10 < mistertwig> but then again it might help maintain consistency 
08:10 < AviMarcus> or even just SQL with no joins
08:10 < chovy> snyp: i think this refers to the head object if it's a nested function.
08:10 < mistertwig> well yeah
08:10  * GreenDog wishes avi was my coworker instead of my "must use orm" coworker
08:11 < chovy> does anybody do web sites anymore, or just iphone apps
08:11 < AviMarcus> lol
08:12 < mistertwig> wow sequelize doesn't have delete :S
08:12 < chovy> i use mongoose because i need the crutch
08:12 < AviMarcus> yeah,  task.destroy()
08:12 < mistertwig> AviMarcus: well not like a deleteAll or anything
08:12 < AviMarcus> uhm can you query everything and then destroy it?
08:13 < mistertwig> i'd like to use mongodb but i just find that relational data fits in my head better
08:13 < mistertwig> AviMarcus: yeah but that's kind of inefficient
08:13 < AviMarcus> dunno, rethinkdb looks AWESOME but I'm waiting for the next release for secondary indexes
08:13 < mistertwig> i'm thinking like in mongo for handling comments
08:13 < mistertwig> the two methods they showed to do it didn't really sit with me
08:14 < owen1> where is a common path to have the log files and the pid files of node apps? is it the app path or /var/log/  and /var/run/
08:14 < mistertwig> with a relational database it just makes more sense
08:14 < snyp> chovy: http://ideone.com/C8m1ag  line 1, 2, 4, and 25. 
08:14 < AviMarcus> mistertwig, in mongo, you could embed the comments into the post?
08:14 < mistertwig> yeah AviMarcus i know about that
08:14 < mistertwig> you can also put them in a different collection 
08:15 < AviMarcus> in couchdb too, but since couchdb is append-only then you have a lot of garbage collecting..
08:15 < mistertwig> but you'd need to store the user id in each comment
08:15 < AviMarcus> OK ?
08:15 < mistertwig> and if you wanna display their name, you'd need to do two queries 
08:15 < mistertwig> which just seems off 
08:15 < mistertwig> without a JOIN
08:15 < AviMarcus> mongo has no joins of any kinds?
08:15 < mistertwig> no
08:15 < mistertwig> that's the point of no sql
08:15 < mistertwig> lol
08:15 < mistertwig> well one of the ideas anyway
08:15 < AviMarcus> that's kinda silly. couchdb has pointers or something I think
08:16 < AviMarcus> e.g. if you need to create a unique key in no-sql it can be a huge PITA, e.g. for a login name
08:16 < mistertwig> hm i might look into couch
08:16 < AviMarcus> so lol, store their comments under their name?
08:17 < AviMarcus> and index it by post ID
08:17 < mistertwig> what if you have like user accounts or something
08:17 < AviMarcus> then you query the post + all users
08:17 < mistertwig> and you want to implement name changing
08:17 < mistertwig> or you'd like to put registered date in each comment
08:18 < chovy> i like using mongo
08:18 < mistertwig> with a relational database it just makes sense to have a comments table that stores the user id
08:18 < chovy> if you're used to json its a natural choice
08:18 < mistertwig> then you can grab their name in each comment, registered date, whatever you need
08:18 < AviMarcus> oh hmph, if you store it all in users, you get ALL their comments on each pull of it
08:18 < AviMarcus> chovy, yeah but well, lots of data is relational. or has needs a unique index on it.
08:19 < AviMarcus> Then you have to bend over backwards to fit that into nosql.
08:19 < AviMarcus> s/has //
08:19 < mistertwig> i mean i thought mongo was pretty interesting and i see how you can store a lot of different sorts of data
08:19 < mistertwig> but like AviMarcus said if you do have relational data
08:19 < mistertwig> it becomes a hassle 
08:19 < AviMarcus> mistertwig, take a look at rethinkdb
08:19 < AviMarcus> http://www.rethinkdb.com/
08:20 < mistertwig> oo table joins
08:20 < AviMarcus> chainable query API with joins and stuff
08:20 < mistertwig> node.js support AviMarcus?
08:20 < AviMarcus> and automatic parallel query and map/reduce 
08:20 < AviMarcus> Yep, node.js driver included
08:20 < mistertwig> very cool
08:20 < AviMarcus> only 2 caveats:
08:21 < mistertwig> that's awesome that it has joins
08:21 < AviMarcus> 1) when you do a function in a query, it's NOT a node.js function, but a function that gets executed within the DB, so you have to use it's lingo
08:21 < AviMarcus> 2) no secondary indexes YET, so if you need to find by non-primary key, it will effectively do a table scan
08:22 < mistertwig> well if that's a YET i'm not too worried 
08:22 < mistertwig> i don't mind working for the future on my hobby projects
08:22 < AviMarcus> supposed to be in next release
08:22 < mistertwig> i really want to do some more experimenting with express.js
08:22 < AviMarcus> s/it's/its/
08:22 < AviMarcus> heh
08:22 < mistertwig> i've just figured out a great way to handle routes
08:22 < mistertwig> and jade is great
08:22 < AviMarcus> permissions...
08:22 < mistertwig> so the only thing i've been stuck on is how to handle models
08:23 < AviMarcus> I gotta figure out how to do roles with RBAC in connect-roles
08:23 < AviMarcus> have you looked at the frameworks for node.js?
08:23 < AviMarcus> there's like 3-5 of them
08:23 < mistertwig> this looks like it has all the benefits of mongo with joins :P
08:23 < mistertwig> AviMarcus: not really
08:23 < mistertwig> it's not that i need a framework
08:23 < mistertwig> i don't think it's necessary
08:23 < AviMarcus> I think it's also append-only though, mongo is in-place updates
08:23 < AviMarcus> (if you do a lot of data-churn)
08:23 < mistertwig> what do you mean by that?
08:24 < AviMarcus> if you have an object that's a megabyte of data - meaning, one row
08:24 < AviMarcus> and you update a byte inside it
08:24 < AviMarcus> mysql will update in place, mongo does an update in place on disk, but rethinkdb, couchdb will append a new copy to the end of the file
08:24 < AviMarcus> and then at some point garbage collect and remove the initial one
08:25 < mistertwig> oh is that why it's a bit faster?
08:25 < AviMarcus> (well, at least mysql will do inplace if it's all fixed-lenght stuff)
08:25 < AviMarcus> it is faster, and it's also supposed to be more crash-resilient
08:25 < AviMarcus> well, it's faster if it's not rewriting too much
08:25 < AviMarcus> I think it's mostly for safety
08:26 < AviMarcus> redis has an append-only log, too, for disk persistence
08:26 < mistertwig> i see
08:26 < AviMarcus> oh right. so you can have multiple threads making updates
08:26 < mistertwig> i think rethink looks pretty cute
08:26 < AviMarcus> each just appends to the file and nothing has to get in the way of overwriting pieces of the file
08:26 < mistertwig> i like how they stick with naming i'm used to
08:27 < AviMarcus> yeah. Just my calls record list just hit 1 million records so I can't do table scans on it w/o massive performance hit :(
08:28 < mistertwig> so how would one go about implementing rethink in an MVC
08:31 < AviMarcus> ha!
08:32 < mistertwig> AviMarcus: please!
08:33 < AviMarcus> I must admit, I'm not that familiar with MVC. I finally got the hang of writing DRY and separating out everything into separate modules in JS.
08:33 < AviMarcus> for your model... you'd have a few parts.. the setters (or pre-save) that do condition checking, I'd presume.
08:34 < AviMarcus> so then the save / update
08:34 < AviMarcus> and the get
08:34 < AviMarcus> are you "allowed" to write a different rethink query for each different model?
08:34 < AviMarcus> and save/update might look different. There's an "overwrite" option if the primary key matches one that exists
08:35 < AviMarcus> ah freeswitch can use a redis backend for limits, that could come in handy..
08:35 < AviMarcus> redis is cool too, btw, but only for stuff that must be super-fast and fits into memory.
08:36 < AviMarcus> like 480 million records of number mapping :) 7.2gb of ram, that was a cool project.
08:56 < AviMarcus> mistertwig, no idea what to make of this re: rethinkdb: We no longer use a log-based approach. RethinkDB adjust for the underlying hardware - it's log-based on hardware that performs optimally on a log-structured workload, random for hardware that performs optimally on random workloads, and anywhere in between depending on the hardware system underneath.
08:57 < mistertwig> huh AviMarcus
08:57 < AviMarcus> I guess rethink isn't all log-based append only. Dunno.
08:57 < mistertwig> oh
09:04 < ashnur> what is a nice way of checking if a directory structure exists and if any level fails, creating it? 
09:17 < SinnerNyx> I'm wondering if it's possible for me to write a module that I require in my app to adds a function to the String or JSON objects. If so, how would I go about doing it?
09:17 < SinnerNyx> *add a function
09:24 < mistertwig> SinnerNyx: you can just append to the String prototype 
09:24 < mistertwig> though that isn't recommended
09:25 < SinnerNyx> mistertwig: It's mostly mini-helper functions where even if they are later implemented will likely work in much the same way that I would make them. For instance, startsWith or StringifyNonCircular. I won't publish it if that helps :P.
09:26 < SinnerNyx> so if I do that inside a module it will exist in all modules for the currently running node?
09:26 < mistertwig> err i'm not sure
09:26 < mistertwig> you can try it out
09:26 < mistertwig> i think so
09:26 < SinnerNyx> k I'm working on a demo now. will see :)
09:30 < SinnerNyx> mistertwig: it worked. Thanks :)
09:38 < AviMarcus> SinnerNyx, you extended the string prototype in a module, then required it, and that file had it's string prototype extended too?
10:36 < sherlock-holmes> is there anything similar to PHP's PDO available in Node.js? :)
10:57 < icebox> sherlock-holmes, yes it is. it dependes oon your db, relational or nosql, there are a few modules
10:57 < sherlock-holmes> have to find that baby
10:58 < dz0ny> sherlock-holmes: many libs check http://nodetoolbox.com/ http://nodetoolbox.com/packages/jugglingdb
11:00 < roger_rabbit> are you having an identity crisis?
11:00 < sherlock-holmes> who, me? :)
11:00 < yawnt> says roger_rabbit 
11:03 < SomeoneWeird> lol
11:07 < sherlock-holmes> if I were CIA
11:08 < sherlock-holmes> I'd be having even more nicknames :D ::P
11:08 < Virunga> Hi, is it possible to give a priority to callbacks?
11:09 < dz0ny> sherlock-holmes: Beware of NSA :) #29C3
11:13 < icebox> Virunga, order or priority?
11:13 < Virunga> icebox: priority, high, normal, low
11:14 < Virunga> I'm a noob, i googled it but didn't find anything that can help me.
11:15 < icebox> Virunga, well... in which context would you use the priority?
11:16 < SomeoneWeird> http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem
11:16 < Virunga> icebox: i'm making an irc bot with plugins, and i'd like each plugin has a priority.
11:16 < SomeoneWeird> that doesn't really make any sense
11:16 < SomeoneWeird> define priority
11:17 < icebox> Virunga, https://github.com/jslush/node-irc-stream
11:17 < aho> ~a sorting weight which defines the execution order (i guess)
11:17 < aho> stuff like that is pretty annoying though
11:18 < geNAZt> i dont think this will work with eventlisteners
11:18 < SomeoneWeird> yeah, have a weight then push them to an array in the order of the weight
11:18 < SomeoneWeird> then iterate the array
11:19 < geNAZt> or make more events
11:20 < Virunga> Yes, i can do that but i was asking to know if there was a way to do it with events.
11:20 < Virunga> Well, thank you guys.
12:16 < emkei> clear
12:20 < geNAZt> hi
12:20 < geNAZt> do i have the chance to know when the next gc cycle will be ?
14:23 < auburtic> Hi, anyone could have a look at this simple code http://pastie.org/5597287
14:24 < geNAZt> i took a look
14:24 < mAritz> me too
14:24 < auburtic> it just send ServerSent events, but when I create on a browser tab source = new EventSource('/events');source.addEventListener('message',function(e) {  console.log(e.data);}, false);
14:25 < mAritz> wat?
14:25 < auburtic> and trigger an event from another tab by browsing to localhost:8000?test=1
14:25 < auburtic> it doesnt go in console.log(e.data) as expected
14:26 < geNAZt> u have a eventsource in the browser
14:26 < zomg> auburtic: have you considered just using one of the existing libraries for event push?
14:26 < auburtic> yep
14:26 < geNAZt> if u request the SSE, does it chunk as u expect ?
14:26 < auburtic> zomg: it's simple to trigger it from http also
14:27 < zomg> auburtic: well I'm just saying, if you're having trouble with this, there are already several libraries for doing comet-style stuff that support more than just SSE
14:27 < zomg> unless you're just doing this for the sake of experimenting with it
14:27 < auburtic> zomg: sorry what do you mean exactly
14:27 < zomg> I mean you could just use for example Socket.IO which will let you do this sort of stuff without having to mess around with the low level stuff yourself
14:27 < geNAZt> https://github.com/einaros/sse.js
14:28 < auburtic> zomg: it's simple, and should work without any other library
14:28 < geNAZt> for example
14:28 < geNAZt> or socket.io
14:28 < zomg> auburtic: yes but *why* does it need to be like that?
14:31 < auburtic> geNAZt: I'd like to trigger sse events dynamically
14:32 < geNAZt> what do you mean with dynamically ?
14:32 < auburtic> not just  sse.on('connection', function(client) {client.send('hi there!');});
14:33 < auburtic> but trigger it from the same server when it receives a request (not a "event-stream")
14:33 < auburtic> or could use redis, but it's not necessary
14:33 < geNAZt> you could store the clients that connected to the sse
14:33 < geNAZt> and send data to it if u want to do it
14:34 < geNAZt> but back to your paste
14:34 < auburtic> ah, right storing clients
14:34 < auburtic> then I want t notify all of them but dynamically
14:34 < geNAZt> it doesnt follow the sse w3c standards
14:34 < auburtic> why
14:34 < geNAZt> http://www.w3.org/TR/2009/WD-eventsource-20091029/#event-stream-interpretation
14:34 < draginx> DOes anyone know how I can make sure the time displayed is set in EST from momentjs?
14:35 < auburtic> events shoould be data: ... id: ... not in json?
14:36 < geNAZt> if i interpret the document right u must give the data: and a CR
14:36 < geNAZt> to fire an event in the browser
14:36 < auburtic> oh
14:36 < auburtic> thx
14:36 < geNAZt>  res.write("data:"+queue.pop()+"\n");
14:36 < geNAZt> something like that
14:37 < auburtic> I think I'll use the libbrary also
14:37 < auburtic> k thx
14:37 < geNAZt> np
15:06 < auburtic> geNAZt: http://pastie.org/5597411 works perfect in one browser only, I must add an array of clients, best choice is to use https://github.com/einaros/sse.js or maybe it's also easy to do?
15:07 < mAritz> auburtic: you'll have to keep an array of clients either way
15:07 < auburtic> yep
15:08 < auburtic> hmm it's too hard, will rely on sse.js
15:08 < mAritz> what exactly do you think that'll make easier?
15:09 < yawnt> mAritz: hey bro
15:09 < mAritz> it's not really a large lib that's very complicated
15:09 < mAritz> yawnt: not now, i'm lecturing someone
15:09 < mAritz> :D
15:09 < auburtic> I need keep the array of other clients than oneself
15:09 < mAritz> sup ^^
15:09 < auburtic> maybe storing the 'res' objects
15:10 < geNAZt> maybe you should use closures
15:10 < geNAZt> http://de.wikipedia.org/wiki/Closure
15:11 < mAritz> that's not really a solution to his problem
15:11 < geNAZt> http://pastie.org/private/moh27bhye2mzgv830pqa
15:12 < geNAZt> it would work
15:12 < geNAZt> but the clients cant speak to each other
15:12 < mAritz> auburtic: keep an array of all clients, when broadcasting go through the array and only send it to the ones that aren't the originator?!
15:13 < mAritz> geNAZt: what the heck is that supposed to solve? :D
15:13 < mAritz> in fact: that doesn't do anything at all
15:13 < geNAZt> closures keep their context
15:13 < geNAZt> if u connect with a second event stream the contxt of the interval is changed to the new res object
15:13 < auburtic> ok, but I need a loop (for each client)
15:13 < geNAZt> with the closure you can have two res objects in two contexts
15:14 < auburtic> oh
15:14 < mAritz> there is no context to be lost there
15:14 < geNAZt> ofc
15:14 < mAritz> no, not in the place where you put it
15:14 < geNAZt> the interval setup relies on the res object
15:14 < geNAZt> that changes if a new request comes in
15:14 < mAritz> the interval has the scope of the sendSSE func
15:16 < auburtic> so in the closure you added, I check if it's a new client and add *res* to a list of clients?
15:16 < geNAZt> no if u use arrays to hold the clients you dont need a closure
15:17 < mAritz> you don't need that closure either way. it literally does nothing...
15:17 < auburtic> ok
15:18 < auburtic> is there a sort of res.id, that I could use to map them uniquely
15:20 < geNAZt> u can create one
15:20 < geNAZt> the res object is a normal javascript object so u cann add properties to it
15:20 < auburtic> yep but I don't want a same client to have 2 entries
15:21 < auburtic> or he will be spammed twice ;
15:23 < auburtic> would need sort of req.remote_addr if it exists
15:23 < geNAZt> that wouldnt work if u have two browsers on the same address
15:23 < geNAZt> in case of proxies or multiple tabs
15:24 < auburtic> hmm so I store all 'res' from the connect event
15:28 < geNAZt> http://pastie.org/private/mob6oatzvajeugkmispzw
15:28 < geNAZt> this could work
15:28 < geNAZt> i havent tested it
15:28 < auburtic> thx
15:29 < geNAZt> pls tell me if it works :P
15:32 < mAritz> that makes it so that everytime someone goes to /events a new interval is set up, quite unneccessary.
15:33 < geNAZt> a shit
15:33 < geNAZt> i forget to put that out of the function
15:33 < geNAZt> :D
15:33 < geNAZt> sry
15:34 < boutell> good morning. I'm trying to nest express apps. It works until I add another route in the parent app that should catch all URLs that didn't match something else. That route is slurping up URLs that ought to go to the second app. 
15:34 < boutell> Here's a gist:
15:34 < boutell> https://gist.github.com/4413317
15:35 < auburtic> ok so I put setInterval out, , and req.id = clients.push( res );? the .id shoudln't be there no?
15:36 < auburtic> oops
15:36 < geNAZt> http://pastie.org/private/kntfumz6vpr0h71el58zca
15:36 < auburtic> req.id is the index
15:36 < geNAZt> but be careful
15:37 < geNAZt> if u put the interval out the queue gets worked even if no client is connected
15:37 < auburtic> doesn't matter
15:37 < geNAZt> k
15:38 < auburtic> thx geNAZt & mAritz
15:38 < geNAZt> a bug is in the code
15:38 < mAritz> boutell: if you name gist files .js it automatically gets js highlighting
15:38 < geNAZt> if you disconnect a browser
15:38 < geNAZt> then another
15:38 < geNAZt> the app will crash
15:39 < geNAZt> maybe you should work with an object and delete
15:40 < geNAZt> but then u cant use foreach and have much undefined properties
15:40 < geNAZt> which is bad :D
15:41 < boutell>  mAritz: thanks for the tip, I'll do that next time. Any thoughts on the issue? 
15:42 < boutell> alternatively… will Express let me use full paths to views when calling res.render()?
15:43 < boutell> all I really want is to distribute some code as a self-contained module. I'm not married to having my own app object, but that would be one way to get my own view folder.
15:43 < mAritz> no clue why it isn't working like in your gist. i use it just like that.
15:44 < mAritz> (well, i use '*' as the catchall route, but still)
15:45 < mAritz> does the app2 route respond if you remove the catchall?
15:45 < boutell> mAritz: yes. 
15:46 < boutell> mAritz: and if I replace the app2 route with a route in app at the same path, that works with the catchall.
15:46 < geNAZt> maybe you should bind the app2 to the app before u init any routes
15:46 < mAritz> shouldn't be neccessary.
15:47 < boutell> geNAZt: interesting idea, but same behavior.
15:47 < boutell> it does look like I can use a rooted path to a view however.
15:47 < boutell> so if my module wants to have its own res.render() wrapper, I can use the main app object and not bother making one.
15:47 < boutell> I'm not sure whether a sub-app would have access to important stuff like req.user anyway.
15:48 < SinnerNyx> is there any discussion about adding bcrypt to the crypto module in node.js?
15:52 < geNAZt> boutell
15:52 < geNAZt> https://github.com/visionmedia/express/blob/master/lib/application.js#L403
15:52 < geNAZt> if u init a app with a router
15:53 < geNAZt> then the router is in top of the stack
15:53 < geNAZt> after taht the app2 comes
15:53 < boutell> hrrm
15:53 < boutell> I'm not sure where to go with that
15:54 < geNAZt> that means if u want to check if app2 route is correct
15:54 < boutell> do I need to be explicit about when I use app.router or something
15:54 < geNAZt> u must set it up before any routes in app
15:54 < geNAZt> no app.get or app.post are the functions
15:58 < boutell> if I use this render function rather than calling res.render() directly in my module, I am pretty much good. I can add my routes to the main app object, always specifying the prefix I want (I could wrap that too if I really wanted to)
15:58 < boutell> https://gist.github.com/4413441
15:59 < boutell> I'll return to this someday but for now I'm happy that I don't have to wonder what else will be weird and different about a sub-app as opposed to the main app object with which my code worked before I tried to refactor it
16:10 < SinnerNyx> is there any discussion about adding bcrypt to the crypto module in node.js?
16:11 < geNAZt> https://github.com/ncb000gt/node.bcrypt.js ?
16:17 < ohYeah> what is php?
16:17 < jamesd> what is google.com?
16:19 < aandy> don't you mean *who* is php?
16:19 < ohYeah> no... php vs node
16:19 < geNAZt> you cant mess php vs node
16:19 < ohYeah> php is a bullshit language right? and can't create webserves or none of the agile cool jazz that node can do right
16:20 < tjfontaine> oh trolls
16:20 < geNAZt> php isnt supposed to be this
16:20 < geNAZt> php should add dynamic in html files
16:20 < geNAZt> not more and not less
16:20 < ohYeah> and node's for creating webservers, right? primarily
16:20 < aandy> so you're saying php should be a template engine?
16:21 < geNAZt> it is designed to output html
16:21 < geNAZt> like the name of php says it
16:21 < geNAZt> Hypertext Preprocessor
16:21 < ohYeah> what is the range of nodes abilities?
16:21 < jamesd> if i want a webserver i deploy apache...  if want something more powerful and flexible i think about node. 
16:21 < aandy> i'm aware of the name, but that doesn't mean php isn't allowed to go beyond that
16:22 < geNAZt> y u can
16:22 < geNAZt> but it isnt designed for that
16:22 < aandy> in the usual basic web apps you also add some backend operations, db maintenance and such, - which has nothing to do with html
16:22 < aandy> or hypertext for that matter
16:22 < geNAZt> yes u can build cli apps with php
16:23 < geNAZt> u can also build a websocket server with php
16:23 < aandy> the argument i'm trying to make is that it's not very useful to discard languages based on what you think it was designed for. javascript wasn't designed to be a server side language per say
16:24 < geNAZt> but in node it is easier
16:24 < geNAZt> yes but languages have use cases
16:24 < geNAZt> and the use cases for php and node differ much
16:24 < aandy> no, you have use cases :)
16:25 < geNAZt> for the normal use u dont run php as cli
16:25 < jamesd> use the best tool for the job if you like a  CMS that is written in php, use php, if you want an app that is written in node use node... if you are writing from scratch use the best tool that matches your goals....  
16:25 < geNAZt> i havent seen a smtp server or a websocket php server which runs in production
16:25 < ohYeah> I might primarily be using my skills to create simple websites for sharing info and maybe some basic webapps, but node seems like a more capable language for technical things
16:26 < aandy> the last couple of times i've used php i did just that - ran it via cli :P
16:26 < ohYeah> I feel like node is a better longterm skill than php?
16:26 < aandy> i hope so
16:26 < geNAZt> node makes things like websockets easier
16:26 < geNAZt> php cant handle that by default
16:27 < aandy> well, neither can node by default :P
16:27 < zomg> PHP is a pretty solid skill tbh, but you will be grouped with the unskilled masses if you label yourself a "php programmer"
16:27 < geNAZt> but node cann by default hold connections
16:27 < zomg> well, this grouping will mostly be done by non-PHP programmers
16:27 < ohYeah> what are node alternatives, or competition to node?
16:27 < zomg> =)
16:27 < aandy> geNAZt: read up on the HTTP protocol before claiming such fallacies
16:29 < ohYeah> I was coming from the haskell chat room and some guys were shitting on node, saying callbacks and node itself is just inherently wrong lol
16:29 < zomg> ohYeah: oh there's a lot of shitting on things in the haskell channel =)
16:29 < zomg> infact, in many channels
16:29 < aandy> ohYeah: yet people manage to write javascript ;)
16:30 < ohYeah> lol... actually it was from the scala channel my mistake
16:30 < aandy> java loving bastards :p
16:30 < zomg> Many Haskellers are more on the pure computer science end of things so they don't always like the way things work in other languages =)
16:31 < zomg> People who don't use node or don't like JS like to make all kinds of claims about how Java or whatever was able to do the same thing back in the 90s
16:31 < ohYeah> well javascript is obviosuly necessay, but they were dissing it on the server side, I'm assuming they prever some haskell framework like happstack for more utility or wadeva
16:31 < zomg> Yeah haskell has some pretty neat frameworks, personally I quite like the Yesod framework
16:32 < zomg> It's not really similar to node though, so I don't think it's fair to compare
16:32 < ohYeah> what are the differences?
16:32 < zomg> Besides the fact it's completely different?
16:32 < zomg> lol
16:32 < ohYeah> yeah
16:32 < zomg> I mean node on its own is pretty much just a JS runtime with some neat libs 
16:32 < zomg> Yesod on the other hand is a bit more like a full stack web dev framework
16:33 < ohYeah> it's too abstract in my mind at the moent... node versus a web framework
16:33 < zomg> more comparable to something like Django or RoR I think
16:33 < ohYeah> js with neat libs.... server side libs?
16:34 < zomg> Yeah node libraries generally run on node itself =)
16:34 < CoverSlide> javascript is a language, ruby is a language. node is a runtime MRI/YARV is a runtime
16:34 < ohYeah> obviosuly node is an extension of javascript outside of the browser.... does that inherently make it have more utility than webframeworks outside the browser?
16:34 < zomg> Although I have heard of some people using node for building desktop applications too
16:34 < zomg> Well yes, a web framework is just a web framework
16:35 < zomg> Node on the other hand can do more than just web stuff
16:35 < ohYeah> so node is more of a scripting tool... if that's a good name?
16:35 < zomg> I mean there are mobile phones that run Node to provide some of their backend services :)
16:35 < konobi> appjs
16:35 < zomg> ohYeah: node is a program that lets you run javascript code
16:35 < CoverSlide> node is a runtime for the JavaScript language
16:35 < ohYeah> cool... node sounds very useful then... what might be alternatives or competition to it?
16:36 < zomg> well competition depends on what you want to do
16:36 < Aria> Depends on which space you're looking in
16:36 < CoverSlide> MRI, CPython, the Perl runtime
16:36 < Aria> High performance network IO? C, Lua, Python
16:36 < Aria> Easy scripting? Ruby, perl, python, lua
16:37 < zomg> I wonder if anyone has yet made a Minecraft mod to run Node...
16:37 < Aria> Server-side javascript? Rhino, narwhal, v8cgi
16:37 < zomg> There is a mod that runs Lua inside Minecraft...
16:37 < zomg> lol
16:37 < CoverSlide> v8cgi is now teajs
16:37 < geNAZt> vert.x
16:37 < aandy> zomg: hmm, isn't part of minecraft built using lua? would make sense that it can run lua then ;)
16:37 < ohYeah> node sounds sexy
16:37 < zomg> aandy: no idea, all I know it uses Java
16:37 < CoverSlide> Node is Fun because JavaScript is Fun
16:38 < ohYeah> I'm going to start learning node :D :D:D:D:D:D:D:D
16:38 < aandy> welcome aboard, ohYeah 
16:38 < zomg> Smiley overload
16:38 < ohYeah> I was really interested when I saw dahl make the tcp chat server... was like cooooooool this looks really useful
16:39 < ohYeah> :)
16:39 < ohYeah> and I'm interested in web stuff so
16:41 < Innocentus> hi
16:41 < geNAZt> hi
16:41 < ohYeah> I don't have much experience with js in web pages... it's cool if I start learning js from the server side, right? and I like functional programming, can I use underscore.js on top of other framewroks like coffee script for example? what's the compatibility like between frameworks?
16:41 < Innocentus> Is there a router for node.js which also accepts translated route segments?
16:41 < aandy> hmm
16:41 < Innocentus> like /en/apple or /fr/pomme ?
16:41 < Innocentus> for the same route but different language?
16:41 < aandy> zomg: http://ideone.com/jJEiKN = false
16:44 < aandy> ohYeah: you can use underscore in CS, yes, and node in general. you might need to name it as something besides _ though
16:45 < Aria> ohYeah: Yeah. Coffeescript translates into most of javascript, so there's not much you can't do with it( though I find it distasteful, ymmv) -- it's not really a framework. Just a language translator.
16:46 < Aria> ohYeah: "compatibility between frameworks" -- depends on what you mean by framework.
16:46 < CoverSlide> Although underscore isn't all that useful in node since a lot of the functional stuff is already built in to ES5
16:46 < Aria> ohYeah: express middleware = connect middleware = not much more than node already uses for http handlers. Flatiron middlewares are similar, too -- so it's not a lot of work to port between.
16:47 < Aria> ohYeah: Underscore is more a utility belt than a 'framework'. It REALLY doesn't affect things outside of itself.
16:47 < Aria> Backbone is a framework, but ... bare-bones. Just enough stuff to provide some structure to things you build with it.
16:47 < Aria> So it really varies a LOT
16:47 < Aria> Things like Meteor are way more opinionated, so you have to do more work to bridge to them
16:48 < ohYeah> ok, so all these blahblah.js vary in nature, underscore provides functional tools where as backbone is like mvs structure or something
16:48 < ohYeah> ?
16:49 < CoverSlide> kind of
16:51 < ohYeah> so there's nothing wrong with me learning js on the server side right, think i's a good idea to make an webpage chat client? I did that in php when I was learning
16:52 < ohYeah> I used txt files as the database lol
16:52 < CoverSlide> yeah that's fine
16:52 < aandy> i'd say i've learned more about js coding server side than client side, so i'd say no, nothing wrong 
16:52 < auburtic> geNAZt: I guess if I never remove ekement from clients, the server will crash at a moment ;)
17:22 < boutell> Is there a way to keep my wildcard route from clobbering app.use('/jot', express.static(__dirname + '/public')) ?
17:22 < boutell> the wildcard route is added later but it still hoovers up those URLs.
17:24 < ohYeah> where is the best place to start in my technical domination?
17:24 < ohYeah> good resources for learning node?
17:24 < ohYeah> everything about it... and the jerk off applications of it
17:24 < ohYeah> tutorials etcetera
17:26 < geNAZt> http://www.nodebeginner.org/
17:27 < manuelbieh> anyone here who can tell me how i can get "subtemplates" (partials?) working in mustache with express?
17:34 < ohYeah> geNAZt: Thanks!
17:48 < jimbojw> is there any way to iterate over a Set in node?
17:48 < jimbojw> e.g. s = new Set(); s.add(5); for (...code here...) { console.log(item); }
17:49 < jimbojw> the ES6 `of` keyword throws an 'Unexpected identifier' even with --harmony and "use strict"
17:49 < jimbojw> and for (let item in s) {} doesn't find anything
17:50 < aandy> jimbojw: Set as in https://github.com/PeterScott/simplesets-nodejs ? you could do for (var i=0, l=s.array().length; i < l; i++) { }
17:51 < aandy> or use the size() and pop() to guarantee order
17:52 < jimbojw> I was hoping to use native Set
17:52 < jimbojw> which doesn't appear to have .size(), .pop() or .array()
17:52 < jimbojw> all it has is .add(), .has(), and .delete()
17:53 < aandy> hmm, i've never seen a native Set, which library is that part of (or which version of node)?
17:54 < tjfontaine> aandy: it's part of the upcoming harmony syntax
17:54 < aandy> ah, thanks
18:01 < gsf> jimbojw: looks like an issue was already created for v8 http://code.google.com/p/v8/issues/detail?id=1793
18:03 < jimbojw> @gsf thanks, starred and commented
18:03 < jimbojw> guess I'll just use an Object for now
18:04 < jimbojw> actually, that won't work either since my objects aren't strings, unless latest v8 supports non-string keys?
18:04 < jimbojw> or I guess I could use an array and just search each time for collisions
18:05 < konobi> tried it?
18:06 < tjfontaine> you could also implement your own hashcode semantics
18:07 < jimbojw> *grumble*
18:09 < defunctzombie> Domenic_: ping
18:10 < Domenic_> defunctzombie: yo
18:10 < defunctzombie> I am tired of emails :p
18:10 < defunctzombie> specify is a global
18:10 < defunctzombie> did you not commit mocha.opts?
18:10 < Domenic_> oh, I didn't, nor did I pull down the latest zuul :P
18:11 < defunctzombie> haha
18:11 < Domenic_> --ui bdd should be default though?
18:11 < defunctzombie> hm, I figured if I didn't set anything mocha would do default
18:11 < Domenic_> @jimbojw: use https://github.com/paulmillr/es6-shim
18:12 < defunctzombie> Domenic_: ok, that part I got handled
18:13 < defunctzombie> Domenic_: so does anything fail currently?
18:13 < defunctzombie> I had 6 tests run and all pass
18:13 < Domenic_> defunctzombie: yeah, no failures right now; I haven't committed the ones that require extra files
18:14 < Domenic_> I'll do that
18:14 < defunctzombie> ah ok.. yea, commit that and I can make it work :)
18:14 < jimbojw> @Domenic_ yeah, was hoping to not have to use shims, but I guess that's the only option for now
18:14 < jimbojw> thanks all
18:16 < Domenic_> defunctzombie: done
18:17 < defunctzombie> Domenic_: what is "importScripts" ?
18:18 < Domenic_> It's a web worker thing
18:18 < defunctzombie> says not defined
18:18 < Domenic_> worker.js does not contain any tests and should not be run
18:18 < defunctzombie> bah
18:18 < Domenic_> it should only be used by test.js
18:18 < defunctzombie> I was running with the new dir mode of zuul
18:18 < Domenic_> Ah :P
18:18 < defunctzombie> where it picks up all *.js in a directory
18:19 < Domenic_> scripts["test-browser"] === "zuul ---server 9000 test/tests.js"
18:19 < Domenic_> Hmm the --slow doesn't seem to be working great.
18:20 < defunctzombie> do I need the latest browserify or something?
18:20 < Domenic_> I think so?
18:21 < Domenic_> Got a patch release of it out this morning to fix require("assert")
18:21 < Domenic_> But you said 6 tests ran and passed
18:21 < defunctzombie> Domenic_: I have not published a new zuul yet
18:21 < Agbeladem> Hi people. Is there a quick ( as in O(1) ) way to know which client a data comes from on an onData function ?
18:22 < defunctzombie> I just pushed the changes to github not npm
18:22 < Domenic_> defunctzombie: yeah just realized that
18:22 < defunctzombie> ok. so I got the wwwroot stuff working
18:22 < defunctzombie> that was trivial
18:23 < defunctzombie> now I get this error
18:23 < defunctzombie> http://localhost:9000/setImmediate.js  404 not found
18:23 < defunctzombie> cause it tries to load that file at some point I guess?
18:23 < Domenic_> Ya but with `require`
18:23 < Domenic_> O wait
18:23 < Domenic_> No
18:23 < defunctzombie> Error: Uncaught Error: NETWORK_ERR: XMLHttpRequest Exception 101 (http://localhost:9000/worker.js:1)
18:23 < defunctzombie>     at window.onerror (http://localhost:9000/mocha.js:4959:10)
18:23 < Domenic_> It's the importScripts
18:23 < Domenic_> lollll
18:23 < defunctzombie> that was also there
18:23 < defunctzombie> but the 404 was first
18:23 < Domenic_> ya ok this is my bad
18:24 < defunctzombie> no worries
18:24 < Domenic_> hmm
18:24 < defunctzombie> do you need all js files served up run through browserify or something?
18:24 < Domenic_> web workers are a hard case
18:24 < Domenic_> not sure what I need
18:24 < AndreasMadsen> Agbeladem: You should already know it, since you have assigned an event emitter to the client object: socket.on('data', function onData() { assert(socket === this); });
18:24 < defunctzombie> if you are looking to import the thing you built
18:25 < defunctzombie> "/build.js" is the file
18:25 < defunctzombie> that will be served
18:25 < Domenic_> that'll probably do the trick
18:25 < defunctzombie> (if you look at index.js)
18:25 < Agbeladem> AndreasMadsen: fair enough, but do socket have some kind of id or anything ?
18:25 < Agbeladem> AndreasMadsen: or actually, a hashcode
18:25 < defunctzombie> oh god dammit.. no
18:26 < defunctzombie> cause that has all the tests and shit too
18:26 < Domenic_> hehehe
18:26 < Xonk> How can I convert an object from one type to another?   It looks like I should be able to do "car = (Car) vehicle" to cast it, but this returns undefined.
18:26 < AndreasMadsen> Agbeladem: no, but you can assign one. socket.myid = uuid() or whatever
18:26 < AndreasMadsen> Agbeladem: I
18:26 < boutell> Is it considered bad practice to have singletons in an npm module? If my app installs npm modules a, b, and c and they all depend on module 'shared', nom is going to install three copies of 'shared' (note the main project does not depend on shared). Then 'require' will find different versions and any singletons in the module will get created over and over
18:27 < defunctzombie> Domenic_: is there a reason you want to test it in a webworker versus just the browser?
18:27 < nitind> Xonk: what language is that supposed to be?
18:27 < boutell> this means you can't just have an init() method for 'shared', there has to be a constructor and a variable you pass around that contains the state you intend to share
18:27 < Agbeladem> AndreasMadsen: fair enough
18:27 < Domenic_> defunctzombie: yes it's one of my setImmediate shim's features, that it works inside webworkers
18:27 < defunctzombie> I see
18:28 < defunctzombie> ok.. well, think about what the requirements are. to me it looks like you need worker.js also bundled up along with the file it tries to fetch to be the work
18:28 < Xonk> nitind - coffeescript.
18:28 < boutell> I know that npm will skip installing redundant copies of 'shared' for modules I add to my project if the project itself installs 'shared', but this is not the case if the project itself doesn't use 'shared', or that dependency is added later
18:28 < boutell> I think what I'm seeing here is that Singletons Cannot Be Trusted
18:29 < Domenic_> the problem is webworkers have no access to the parent context
18:29 < Domenic_> so no `require`
18:29 < Domenic_> And you can only instantiate them with actual filenames that exist on the server
18:29 < Domenic_> So I need worker.js to be at / or similar
18:29 < boutell> [annoyed with himself that he let someone talk him into allowing singletons in modules]
18:30 < Domenic_> And I need some file that I can `importScripts` that will insert setImmediate into the current global scope.
18:30 < Domenic_> (for within the worker)
18:30 < boutell> [wondering why heroku is slower than molasses right now]
18:31 < Domenic_> let me look at built.js
18:32 < Domenic_> defunctzombie: if built.js didn't contain `require("test/tests.js")` and exposed `require` to the global scope, this could probably work
18:33 < defunctzombie> Domenic_: the reason it contains that is to run the tests
18:33 < Domenic_> Right, ya. But you could move those lines into index.html?
18:33 < defunctzombie> I can make require exposed to the global scope
18:33 < defunctzombie> Domenic_: depends
18:33 < defunctzombie> it isn't always test/test.js
18:34 < Domenic_> I guess since my use case is so weird I can afford some workarounds
18:34 < defunctzombie> but yes.. I think there is a way to name the output
18:34 < Domenic_> if (inWebWorker) { dontRunTheTests }
18:34 < defunctzombie> hahah
18:34 < Domenic_> Then I can just importScripts("/build.js") and nothing will happen
18:34 < defunctzombie> I think so
18:34 < Domenic_> But I will get `require` globally and can `require("setImmediate")`.
18:35 < defunctzombie> let me see if that is true
18:35 < defunctzombie> how do I now if inWebWorker?
18:35 < defunctzombie> actually, Imma push my wwwroot stuff
18:35 < defunctzombie> and let you play with it :)
18:35 < Domenic_> ya perfect
18:36 < defunctzombie> Domenic_: pushed, just get the latest from git and have at it :)
18:36 < defunctzombie> zuul test/tests.js --server 9000 --wwwroot test/
18:36 < defunctzombie> that is what I have been running with for your repo
18:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:37 < Domenic_> sweet modal dialog test works now
18:57 < astropirate> Greetings earthlings
18:57 < Domenic_> defunctzombie: trying a different approach now. --wwwroot .
18:57 < Domenic_> But it's giving me "forbidden" errors from connect static
18:58 < samholmes> Is there a really basic middleware that logs http requests by IP and possibly a cookie or something?
19:00 < defunctzombie> samholmes: yes, the connect.logger middleware
19:00 < defunctzombie> it comes with connect
19:00 < defunctzombie> Domenic_: should just use the dir you specify
19:00 < defunctzombie> but maybe it has an issue with teh pack computation or something
19:02 < samholmes> defunctzombie: Where does it store the log?
19:03  * marcoslhc says hi!
19:04 < boutell> Any comment on the idea that npm modules should not have state in global variables because it can't be trusted to be the same instance of the module if it's used in more than one dependency of your project?
19:04 < samholmes> defunctzombie: A log file on the site or mysql, redis?
19:04 < samholmes> defunctzombie: I'm thinking of using this log data and doing stuff with it potentially.
19:05 < defunctzombie> boutell: right don't rely on globals as singletons
19:05 < defunctzombie> samholmes: I think on a file on disk
19:05 < boutell> defunctzombie: yeah. Bummer for the code I've already written that way, but I can clean that shit up and create a constructor.
19:10 < defunctzombie> boutell: just depends on what you are using the globals for, in general you should stay away from them for state. I generally use them for local caching, but even then not ideal
19:10 < marcoslhc> I like to write my modules as functions that returns objects. It's just a matter of style or has some other implications later?
19:10 < boutell> defunctzombie: yeah.
19:12 < boutell> marcoslhc: that sounds like a good approach, similar to var express = require('express'); var app = express();
19:12 < boutell> now you have an app with all the state and you decide who to pass it to, you don't get confused thinking you're guaranteed the global state of the module will magically be shared in places it isn't
19:15 < marcoslhc> Boutell that's right. And is a natural approach to a object oriented programmer, but sometimes you have to be aware of the non blocking flow. 
19:16 < marcoslhc> When I mash several modules this way I have to pay attention to control flow. 
19:23 < samholmes> defunctzombie: I think I can use a stream and therefore intercept the data and log it to a database if I want to
19:25 < defunctzombie> samholmes: most likely yes :)
19:26 < defunctzombie> you can also just write the middleware to log whatever you want very easily
19:26 < defunctzombie> middleware is super easy to write
19:28 < aandy> :)
19:38 < boutell> just "npm publish"ed a new version of uploadfs that returns a function for creating instances rather than relying on global state. It's a bc break, but I don't have a huge userbase yet, or if I do it's their fault for not being talkative (:
19:39 < aandy> bc break?
19:40 < boutell> (btw, uploads is an npm module that lets you publish images and other files on a local filesystem or in S3 with the same simple API)
19:40 < boutell> uploadfs rather
19:40 < boutell> aandy: backwards compatibility break.
19:40 < Domenic_> as long as you followed semver and bumped the major version number from 1.x to 2.x, should be fine
19:41 < aandy> ah
19:42 < boutell> Domenic: I was in 0.2.x, so went to 0.3.x. Anything in the 0.x series, you gotta be prepared to roll with it (:
19:42 < aandy> boutell: easy enough fix (simplistic, but hey, i'm on "vacation"): announce new feature with bc case, maintain the old, but without new features, hope people react like: "oooh, i'll get on the new api"
19:42 < boutell> aandy: not worried. No reason for anyone not to just deal with it, uploadfs is only a month old
19:42 < Domenic_> boutell: yep, that's why I hate 0.x packages. I have to pin their version numbers to 0.x.y with no tilde or anything if I want to be safe. wish everyone would just use real semver.
19:43 < boutell> Domenic_: I am a lot more careful with mature software
19:46 < marcoslhc> And what's the difference between var module = require('module'); var app = new module() and var module=require('module')()?
19:46 < boutell> Domenic: incidentally, npm install --save saves the exact version number and will never auto upgrade
19:46 < boutell> marcoslhc: a few characters, is all, but it's a nice convenience, and express is a model people are used to
19:47 < boutell> I could give the constructor arguments, but I hate that because if there's an error it's just bizarre. "You have an object, but it's broken and you can't try again. Cheers"
19:47 < boutell> (I don't mind constructor arguments when an error isn't possible)
19:47 < marcoslhc> Lol! I've come across that. Annoying
19:48 < marcoslhc> Something I've learned from python: begin with designing exceptions. 
19:53 < Xonk> I'm fairly new to Node and haven't been a big fan of ORMs in the past, but don't really want to create an uphill battle for myself by going against the natural way of doign things.  Does pretty much everyone here use an ORM for data access.  If not, do you create a full data access layer?
19:53 < boutell> Xonk: I use mongoose fairly often. It's not perfect but it's a pretty big win if you're in a hurry to have a working app and avoid repetition
19:54 < boutell> there are some non-ORM simplifying wrappers for the node mongo driver that are worth looking into, they eliminate some unnecessary steps
19:54 < boutell> without the overhead of full ORM
19:54 < boutell> but… node is pretty fast even with an ORM
19:54 < Xonk> I should have specified with a MySQL db.
19:54 < boutell> I have yet to think "that node app is slow"
19:54 < boutell> Xonk: ah. I haven't used MySQL and node together yet, although I'm sure it'll come up.
19:55 < boutell> I used to suffer with Doctrine 1.2, so everything in node is rocket propelled lambourghinis to me (:
20:10 < travisdunn> re: orm
20:10 < travisdunn> they are not too useful, especially in games
20:11 < astropirate> travisdunn, they one use though
20:11 < travisdunn> i have always found them most useful when dealing with nosql databases, which usually have an api acting like an orm anyway, or else in business-logic heavy apps, with massive well-defined schema
20:11 < astropirate> aye
20:14 < astropirate> ohh
20:14 < travisdunn> basically, i don't use an orm unless there's a clear advantage to the abstractions it provides. i do often start an app and then later add an orm as complexity grows.
20:14 < astropirate> doctrine looks like it would be great in the node worl
20:14 < astropirate> i think i shall implement a doctrine based DB agnostic lib
20:14 < travisdunn> but it's much easier to use some native driver, and then add an orm, than to predicate your app design around an orm, and then find out you only use 10% of the features/patterns
20:16 < skope> hello. i am doing my first node module and i was thinking, is it right to return false?
20:18 < ohYeah> I thought I was gonna take over the world with haskell or erlang... now it's node
20:21 < Xonk> what do you mean skope?
20:22 < skope> Xonk: is it right to do if(something) return true } else { return false; }
20:22 < mistertwig> no?
20:22 < mistertwig> skope: just return something;
20:23 < skope> mistertwig: okay
20:24 < Xonk> I wouldn't say it's wrong. But return (a==b) would be cleaner than if (a==b) return true; else return false.
20:26 < skope> Xonk: thank you
20:26 < skope> coming from php, so a bit different approach myself
20:27 < astropirate> ohYeah, don't hold your breath with haskell
20:28 < ohYeah> lol
20:28 < ohYeah> astropirate: lol
20:28 < ohYeah> i'm eating some durian now... delicious shit
20:28 < astropirate> you only have affairs with haskell
20:29 < astropirate> you don't build a long term relationship
20:29 < ohYeah> y u say so? astropirate 
20:31 < astropirate> ohYeah, http://pastie.org/5598668
20:32 < skope> Xonk: can't i return values with return? i tried return "something" and then in index.js i called console.log(modulename.function()) and it returned undefined
20:36 < ohYeah> astropirate: lol... can haskell do the networking stuff like node?
20:37 < astropirate> sure can
20:37 < ohYeah> can haskell do nething node can astropirate 
20:37 < ohYeah> can haskell do nething node can astropirate:
20:37 < astropirate> yah
20:38 < ohYeah> so if I have forever to learn then y not go back to haskell... she's got a lot of depth to her too after all
20:38 < ohYeah> what r the differences between haskell and node?
20:39 < astropirate> the type systems
20:39 < ohYeah> isn't statically typed like the shit
20:39 < astropirate> haskell is purely functional
20:39 < ohYeah> I like functional
20:40 < auburtic> Hi, got a problem with node-http-proxy http://pastie.org/5598707
20:40 < ohYeah> functional is very elegant, but what r different betweens it's capabilities
20:40 < uns0b> quit
20:41 < auburtic> well it seems it's a problem of port alreadey used
20:41 < auburtic> any idea how to kill opened sockets on port 80 on ubuntu?
20:42 < astropirate> ohYeah, they should both be able to do anything the other language can do. 
20:43 < shihan> "netstat -anpl |grep 80" would tell you which process has port 80 open
20:45 < auburtic> I have just 8000 and 8001
20:45 < shihan> oh, are you running that node script as root?
20:45 < ohYeah> so how would u create a webserver in haskell? or u can't?
20:46 < auburtic> not as root
20:46 < shihan> well, if you want to bind a port below 1024 you either have to run as root, or there other options, but root is generally the easiest way
20:47 < ohYeah> can you use node to write botnets
20:47 < ohYeah> good botnets
20:47 < auburtic> shihan:  ah ok rihgt
20:48 < shihan> auburtic, you can also look at "setcap" but that can get a bit messy
20:48 < auburtic> shihan I'm going to use *forever*  also to make sure the proxy restart if crash
20:49 < shihan> i've never used forever, but i would assume that wouldnt change much about how it opperates
20:50 < auburtic> looks brutal, but well
20:51 < shihan> i know the last time i looked at it, it had like 50 billion dependancies
20:51 < skope> http://pastie.org/5598740 that doesn't work for some reason, no idea why. changing return to console.log in urltitle.js shows the title in console
20:52 < shihan> skope, lol, either theres a simple syntax error at the end or my eyes are messed up
20:53 < skope> shihan: where?
20:54 < skope> shihan: true. missing )
20:54 < skope> shihan: it was correct, but mistyped in paste. still doesn't work
20:54 < shihan> yeah, also missing a closing */ at the top, but i'll assume a mis paste
20:55 < skope> it's just showing that which files they are
20:55 < skope> no matter in code
20:56 < shihan> hmmm, when you say doesnt matter, you realise as the paste reads its commenting out everything except the last 2 lines of code right?
20:57 < shihan> oh nvm, i see what you mean
20:57 < skope> yes
20:57 < skope> to my knowledge, that should work
20:57 < skope> but somehow does not
20:58 < skope> just shows up "undefined" in console
21:00 < owen1> i try to install a process monitoring script (https://github.com/visionmedia/mon/) and it tried to copy the script into /usr/local/bin but bin is owned by root. is it ok to chown this folder to the one that do the install?
21:01 < skope> apparently no matter if i change that return value to return "anything"
21:03 < shihan> skope yeah, there is a simple reason and its cause your function will return before the ballback finishes
21:03 < shihan> s/ballbak/callback
21:03 < samholmes> how does connect's logger middleware calculate response time?
21:03 < skope> shihan: so i just put that return value to a variable and return it in the end?
21:04 < shihan> skope, realistically you should probably be passing a callback to your get() function so it can return the value to you after its done its stuff...
21:06 < shihan> skope, something more like this http://pastie.org/5598788
21:07 < shihan> warning though, im a pretty average nodejs coder
21:07 < zomg> Seems like a reasonable solution, although common node practices for callbacks is that they should take two args, first being error or null if no error, second being the actual result
21:08 < zomg> skope: joko laskuri toimii? =)
21:08 < skope> zomg: hahahaha
21:11 < skope> shihan: now it works. thank you very much
21:11 < Kakera> if I don't read the whole available data from the stream, will 'readable' be emitted immediately afterwards?
21:11 < skope> zomg: how can i add error tracker to that module?
21:12 < zomg> Typically you would do callback(err, whatever); when calling your callback function
21:13 < skope> okay
21:13 < zomg> so in this case you'd do callback(null, $('title').text()); in the first case, and callback('Something went wrong'); in the other
21:13 < zomg> with null representing no error
21:14 < skope> and call that module then with urltitle.get('url', function(err, response) { if(!err) { console.log(response); }
21:14 < skope> ?
21:14 < skope> and optionally else { console.log(err); }
21:17 < skope> well good that i dropped in here. got it working as i wanted to
21:18 < skope> thank you zomg and shihan 
21:18 < zomg> Yeah the calling would work like you said
21:22 < ericanderson> Is httpAgent the best way to iterate over multiple requests for *different* domains?
21:30 < auburtic> dam, figured out that https://github.com/nodejitsu/node-http-proxy doesn't proxy server sent events
21:36 < Aria> Something outside regular HTTP?
21:37 < Aria> (you might try bouncy)
21:39 < auburtic> I submitted a bug for server sent event https://github.com/nodejitsu/node-http-proxy/issues/357
21:40 < auburtic> maybe I missed something.. but it's not working for me
21:42 < astropirate> http://xamry.files.wordpress.com/2012/08/nosql-expert1.png?w=300&h=450  lol
21:44 < samholmes> I'm trying to build my own logger middleware
21:47 < samholmes> Right now I'm logging all http requests, but must of these requests are for images and other resources not initiated directly by a user but by the user agent on behalf of the user. Is there a way to tell if a request is from a browser asking for resources or ajax or if it's by a user?
22:03 < ins0mnia> having awkward issues with browserify's API when using it within a module I'm writing, it seems to always try to load the modules from the main project (node_modules instead of node_modules/myplugin/node_modules); when manually setting the path on each required module browserify includes the full path in the bundle (not relative) making the bundled module inaccessible
22:04 < substack> ins0mnia: don't set paths manually
22:04 < substack> don't even use .require() at all
22:04 < substack> nor should you use .alias()
22:04 < ins0mnia> substack: What should I use then? I am using the API...
22:04 < substack> don't do that
22:05 < ins0mnia> substack: changing the basedir doesn't help either
22:05 < substack> use browserify(entryFile).bundle() or the command line tool
22:05 < substack> those work well
22:06 < ins0mnia> substack: I'm basically doing something like thid b=browserify({watch:true, cache:false, base: __dirname, mount: somepath, require:['domready']}];
22:07 < ins0mnia> b.addEntry(myentryfile)
22:07 < ins0mnia> b.bundle()
22:07 < ins0mnia> very simple
22:07 < substack> ins0mnia: don't use the middleware
22:07 < substack> I'm deleting that because it was a mistake
22:07 < substack> out of scope
22:08 < substack> domready isn't necessary either, just put <script> at the bottom of the <body>
22:08 < ins0mnia> substack: Got it.. it's a shame, it works as long as the thing is running in the project's main directory and not within a module 
22:08 < substack> all that api surface area is going to be deleted
22:08 < ins0mnia> substack: I'm intentionally avoiding putting a <script> at the bottom of the body tag
22:08 < substack> why?
22:09 < ins0mnia> substack: Because I'm uglifying and dynamically injecting the JS code into the document page 
22:09 < ins0mnia> substack: It's a single page app, need everything loaded in one go as a part of the document, same goes with CSS, minfied and embedded
22:10 < ins0mnia> substack: Much faster in this case
22:19 < perezd> hey, trying to diagnose some slow memory leak issues in a node process...
22:19 < perezd> sorta grabbing around in the dark, but noticed this when I measure allocations: http://cl.ly/image/2d1P2j3J3t2H
22:19 < perezd> is this normal? I'm doing a lot of hashing, but it seems like they don't always get cleaned up...
22:20 < perezd> graph shows a bit of growth after every GC: http://cl.ly/image/3R1I431X1k3s
22:24 < cellvia> anyone here messed with CUDA
22:24 < cellvia> for GPU processing ferried by nodejs
22:27 < astropirate> cellvia, ya
22:27 < astropirate> i've messsed with it
22:28 < astropirate> cellvia, https://github.com/kashif/node-cuda
22:28 < astropirate> i havne't used it through node though, but it should work
22:28 < cellvia> what kind of stuff hae you done with it
22:28 < cellvia> im just trying to scope it all out right now
22:29 < astropirate> we are using it for machine learning
22:29 < cellvia> im thinking about using this tool iannix to do experimental sequencing , and it outputs OSC (open sound contro) over network so i could have node listeners
22:30 < cellvia> that then trigger some CUDA gpu enhanced audio synth or fx
22:30 < cellvia> oh cool, do you have any kind o link or is it top secret
22:43 < samholmes> Anyone know much about hummingbird?
22:44 < timeturner> the bird?
22:44 < AviMarcus> http://hummingbirdstats.com/ ?
22:45 < AviMarcus> ha that's awesome
22:45 < AviMarcus> what 3 years ago would likely have been a hosted service is now open source freeware.
22:50 < samholmes> AviMarcus: Ikr!
22:50 < samholmes> It's awesome
22:50 < samholmes> However, is more than just a real-time statistics thing, or can it show you history?
22:50 < samholmes> timeturner: no, the link that AviMarcus showed
22:51 < AviMarcus> dunno. if it's a server, maybe it keeps a log. Did you watch the 2 videos?
22:53 < samholmes> AviMarcus: two?
22:54 < AviMarcus> top screenshot is a link to vimeo, bottom is a 12min video
22:54 < samholmes> didn't even know that
22:55 < AviMarcus> meh vimeo is only 37seconds
22:56 < samholmes> They should put a play icon over the top image
22:56 < samholmes> Still doesn't explain what I can do with this
22:56 < samholmes> Can I see which pages are being viewed in real-time?
22:57 < samholmes> Can I see who's viewing a page?
22:57 < samholmes> Can I track which pages someone is visiting and follow them?
22:59 < AviMarcus> samholmes, I never heard of it until you pointed it out. It's not really something I'm looking at.
23:01 < samholmes> If it can't do that, then I'd like to help make it do that.
23:02 < samholmes> The dashboard could do a lot of sucking fweat stuff!
23:05 < esoteric1> i want to write some nodejs code that calls a function written in C++ to do some computations w.r.t info in a text file.  is this feasible and would anyone know of some good tutorials or references to get me started.  ty in advance  
23:08 < mbalho> esoteric1: look up tutorials on how to write a node.js native extension module
23:11 < diomeo> hi dudes, please support bitfungus dot org
23:11 < diomeo> and dont forget to contact us for any feature/issue request
23:43 < samholmes> how is it that res.send doesn't allow for circular structures to be serialized, console.log somehow does?
23:46 < andu> res.send(JSON.stringify(circleobj));
23:47 < andu> samholmes, ^
23:47 < samholmes> how do i get it to be formated like console.log though?
23:47 < andu> try mime plaintext?
23:48 < andu> or i think theres a module somewhere for pretty json
23:48 < samholmes> oh and stringify wont accept circular structures either
23:48 < andu> orly :/
23:48 < samholmes> stringify is indeed the culprit with res.send
23:50 < andu> what are you working on
23:51 < andu> check this: https://github.com/fluentart/arrow 
23:51 < andu> ^_^ 
23:52 < auburtic> how can I get the querystring
23:52 < auburtic> req.url is the full url
23:52 < auburtic> the doc is hard to browse
23:52 < mbalho> andu: why not use firmata?
23:54 < andu> <kline> andu: i would personally recommend not using firmata. google have a good system, but ive not seen it used. i have seen lots of angst over firmata
23:54 < andu> people recommending against it
23:54 < mbalho> what is googles system?
23:54 < andu> and I just dont know it yet to judge
23:54 < andu> I have no idea ;P
23:54 < mbalho> https://github.com/jgautier/firmata works great 
23:55 < andu> mbalho, the bigger idea here is radio astronomy through distributed nodes
23:57 < mbalho> cool
23:58 < Innocentus> Hi
23:59 < Innocentus> Is there also a router for Node JS which can use translated route segments?
23:59 < Innocentus> dir
23:59 < Innocentus> So I can define a part of the route which can be translated in different languages?
--- Log closed Mon Dec 31 00:00:56 2012
