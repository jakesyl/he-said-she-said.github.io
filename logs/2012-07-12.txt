--- Log opened Thu Jul 12 00:00:07 2012
--- Day changed Thu Jul 12 2012
00:00 < bnoordhuis> Phoenixz: the regular make? that's not surprising because the makefile changed
00:00 < bnoordhuis> Phoenixz: but `sudo make install` afterwards should work without recompiling
00:01 < nude_angel> hey guys http://41.228.210.124:80/
00:01 < Phoenixz> very weird.. let me try with a clean git repo.. one sec
00:01 < EhevuTov_> bnoordhuis, could you label this issue 'freebsd' or the like? : https://github.com/joyent/node/issues/3623
00:02 < sh1mmer> Has anyone used Silk? Any thoughts/comments?
00:02 < Phoenixz> bnoordhuis: did a clean git clone, then went in, first applied the git show fecebe1 | git apply -R, resulted in this:  http://pastebin.com/vE5cxDc3 
00:04 < bnoordhuis> Phoenixz: just to be sure, are you at the HEAD of the v0.8 branch now?
00:04 < bnoordhuis> EhevuTov_: done
00:04 < insin> In my <3 Node.js place
00:05 < EhevuTov_> bnoordhuis, thanks
00:05 < Phoenixz> bnoordhuis: git co HEAD you mean?
00:05 < bnoordhuis> i guess that nude_angel guy was spamming. good thing his link didn't actually work
00:05 < bnoordhuis> Phoenixz: yes. git checkout v0.8
00:06 < Phoenixz> git checkout v0.8; Switched to a new branch 'v0.8'
00:07 < Phoenixz> now make..
00:07 < Phoenixz> bnoordhuis: but this will be v0.8.latest, right? Just to check....
00:08 < bnoordhuis> Phoenixz: yep
00:08 < bnoordhuis> Phoenixz: the gestating v0.8.3, so to speak
00:12 < othiym23> AAA_awright: did anyone ever get back to you on reasonable HTML parsing in Node?
00:12 < Phoenixz> bnoordhuis: and it starts comiling again... http://pastebin.com/pHnyaAKd
00:12 < othiym23> AAA_awright: I started messing around with cheerio last night, and for what I need (doing random DOM reading / manipulation in a vaguely jQuery-like way) it's working great
00:13 < othiym23> AAA_awright: a lot simpler than dealing with jsdom or Zombie for straight HTML parsing, too
00:13 < bnoordhuis> Phoenixz: sorry, my bad
00:14 < bnoordhuis> Phoenixz: i should've mentioned that you need to add the CFLAGS/CXXFLAGS bit to sudo make install as well
00:15 < AAA_awright> othiym23: I'm trying to use straight tautologistics/node-htmlparser... I think I've figured it out, the documentation is outdated and just awful
00:17 < othiym23> AAA_awright: K, fwiw cheerio has been dirt simple to use: var $ = cheerio.load(wadOfHutmuhl); var thinger = $('#anchor').text();
00:18 < othiym23> probably not quite so great for arbitrary DOM traversal, but seems no worse than jQuery from messing around with it
00:18 < AAA_awright> What I'm actually trying to do is transform the HTML and define patterns not unlike XSLT
00:19 < othiym23> good luck with that, champ
00:19 < othiym23> any time I need to deal with full XPath / XSLT outside a browser, I suck it up and use Java
00:21 < insin> I've just done a bunch of development and pulled in deps manually - is there an npm command to give me the deps in a format I can copy+paste into the package.json I'm about to create?
00:22 < pawn> What are the "native" events for socket.io?
00:22 < breck> anyone using forever to keep a node site running? running into difficulty remotely restarting a forever server
00:23 < breck> ssh -ti ~/.ssh/ourkey.pem user@domain.com "cd app;sudo forever restart app.js"
00:23 < breck> it restarts the server but dies with the ssh connection.
00:23 < breck> more of an ssh issue and i'm googling it now, but thought someone else using forever might have run into it before
00:24 < bnoordhuis> breck: nohup?
00:25 < epall> hey guys, I have a question about socket.setTimeout()â€“should a TCP keepalive from the other end reset the timer?
00:25 < breck> good idea. i'll give that a try, my thought was forever would eliminate the need for nohup
00:25 < insin> sweet, npm init rides again
00:26 < bnoordhuis> epall: no
00:26 < Phoenixz> bnoordhuis: sorry, was out for a sec.. but make ok, make install ok, and now node -v gives v0.8.3-pre....
00:26 < Phoenixz> bnoordhuis: question remains.. is it safe? :D
00:26 < othiym23> breck: at a past gig forever turned out to be a hassle and we replaced it first with a 5-line bash script, and then with Ubuntu's upstart
00:26 < bnoordhuis> Phoenixz: probably safer than v0.8.2 :)
00:26 < epall> bnoordhuis: thanks! I'm guessing there's no way for me to detect a socket hasn't seen a keepalive in N sec?
00:26 < bnoordhuis> Phoenixz: the master branch is what you should be scared of :)
00:27 < bnoordhuis> epall: no. we don't really expose that
00:27 < pianoroy> I need to build a websocket-like connection between two Nodes (a stream of messages over a connection)... anyone know of a good package to use?
00:27 < bnoordhuis> epall: frankly, i don't think even most operating systems do
00:27 < breck> othiym23: thanks for the tip
00:27 < epall> ah, so keepalive is more about making sure NAT doesn't drop it from the table?
00:28 < pianoroy> -- Socket.IO is for Node=>browser, dnode is for RPC...
00:28 < purr> Let it be known that pianoroy hates Socket.IO is for Node=>browser, dnode is for RPC....
00:28 < othiym23> pianoroy: nothing stopping you from using socket.io between servers and / or playing around with hook.io
00:28 < bnoordhuis> epall: yes, kind of
00:29 < othiym23> breck: I know it's not the most immediately useful advice, but if you have upstart available to you, it uses way less overhead than forever (depending on how you're using forever)
00:30 < epall> bnoordhuis: according to http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html, one can set tcp_keepalive_probes to have the OS notify the application that (outgoing) keepalive probes are failing. Is that supported in node.js?
00:30 < pianoroy> othiym23: tried socket.io between nodes... had trouble there.
00:31 < othiym23> pianoroy: what about hook.io?
00:31 < num1> is there anyone here who could walk me through how jsdom works?
00:31 < othiym23> pianoroy: and what's wrong with dnode? It's just a streaming connection
00:31 < pianoroy> othiym23: looking into hook.io, but the examples all seem to be event-driven, not continuous-stream (unless I'm mistaken)
00:31 < othiym23> you could use it for RPC, you could use it for an events stream
00:32 < othiym23> num1: depends on what you want to know
00:32 < pianoroy> othiym23: dnode seems to be for rpc -- do this, give me the result, close the connection, done
00:32 < num1> as far as I can tell, jsdom.jsdom() sets up a dom, gets the options setup, then writes to innerHTML, then calls close() and finishes
00:32 < num1> close() goes through all the events and handles all the resource loads
00:32 < bnoordhuis> epall: that's not quite how it works. tcp_keepalive_probes is a sysctl that tweaks a kernel setting
00:32 < pawn> Why am I having trouble getting how socket.io works?
00:33 < num1> but I can't figure out where in there the events are queued up that close() calls
00:33 < bnoordhuis> epall: i.e. it tells the kernel to send x probes before considering the connection dead
00:33 < bnoordhuis> epall: but that's a machine-wide setting
00:33 < epall> bnoordhuis: but it can be overridden with setsockopt
00:33 < epall> bnoordhuis: just like how TCP_KEEPIDLE is set
00:34 < epall> bnoordhuis: can you point me towards some docs so I can get a clearer understanding of this stuff?
00:34 < othiym23> pawn: have you tried playing with the examples?
00:34 < num1> othiym23, actually I'll just tell you what I'm trying to do, and maybe you can help me choose between the two options I think might work
00:34 < othiym23> pawn: it's a lot easier to understand if you watch how it's working in the browser
00:34 < pianoroy> othiym23: I'll look into dnode further. Thanks for the tips.
00:35 < othiym23> pianoroy: np
00:35 < num1> I want to load an arbitrary document, javascript and all, (yes, I'll do it in a separate process and be careful) and monitor all the network requests it makes
00:35 < bnoordhuis> epall: the setsockopt thing is indirectly exposed through socket.setKeepAlive()
00:35 < bnoordhuis> epall: as to docs, what documentation are you looking for? node specific or networking in general?
00:35 < num1> it looks like I can either just give it to jsdom in full "fetch and process everything" mode, and add a hook into resourceLoader that lets me look at every request
00:35 < othiym23> num1: are you trying to quarantine some kind of untrusted widget?
00:36 < pianoroy> So my options are dnode, hook.io, socket.io
00:36 < epall> bnoordhuis: I'm looking to better understand my options with TCP keepalive, and also what access node gives me. Looks like I can set TCP_KEEPIDLE, but not TCP_KEEPCNT
00:36 < othiym23> num1: also, have you tried this with Zombie?
00:37 < othiym23> pianoroy: you could probably also roll your own eventing system with Redis and pubsub without too much hassle, but I've only played around with that
00:37 < num1> or I can run jsdom with options.delayClose set so nothing gets run, then manually go through and load iframes and script elements and manipulate the dom
00:38 < num1> othiym23, yeah that's not my problem at the moment but I will need to quarantine them at the moment, I'm writing something very similiar to a web crawler
00:38 < othiym23> num1: if you're writing a crawler, definitely look at Zombie
00:38 < num1> othiym23, I looked at zombie but need to do this with a lot of pages at once, and decided the extra complication of writing it in node was worth the higher throughput
00:38 < bnoordhuis> epall: that's correct. it's because not all operating systems have a similar sockopt
00:39 < pianoroy> othiym23: I've heard good things about messaging systems in general ... another benefit is that clients exist for other envs (well, dnode and hook.io have that too)
00:39 < epall> bnoordhuis: ah, got it
00:39 < num1> zombie requires an instance of webkit (in it's own process) for each page right?
00:39 < othiym23> num1: if it's too much stuff, you can go back to using jsdom (Zombie is written on top of zombie), but Zombie is closer to being a headless browser than jsdom is
00:39 < othiym23> num1: you're thinking of PhantomJS, which is awesome and also a good choice for what you're trying to do, if you're willing to accept its overhead
00:39 < austinbv> man I wish jshint didnt freak with leading commas
00:40 < othiym23> austinbv: you can turn that off
00:40 < num1> you meant zonbie is written on top of jsdom?
00:40 < bnoordhuis> breck: forgot to mention - https://github.com/c9/runjs
00:40 < othiym23> num1: yeah
00:40 < othiym23> austinbv: laxcomma : true in your ~/.jshintrc
00:40 < bnoordhuis> breck: it's what we use at c9 and it works well (for us anyway)
00:40 < num1> othiym23, and thanks! I'll look into zombie then
00:40 < epall> bnoordhuis: thanks!
00:40 < num1> that's your way of saying trying to hook into jsdom is too hard?
00:41 < bnoordhuis> epall: happy to help :)
00:41 < othiym23> num1: jsdom struck me as a big, very complicated pile of stuff when I was trying to get into the guts of Zombie (before I figured out Zombie doesn't even try to deal with CSSOM stuff)
00:42 < othiym23> num1: you can probably make it do what you want, but if what you want is an in-process headless browser in Node, Zombie is closer to what you want
00:42 < num1> haha I've been looking through the code and I was amazed at how small jsdom is for how much it does
00:42 < num1> I'm looking at the zombie docs now
00:43 < pianoroy> othiym23: dnode comes with all the nice substack goodies (seaport, airport, pier, upnode, fleet)
00:43 < breck> bnoordhuis: thanks!
00:43 < pawn> othiym23: I've been reading the examples on socket.io website and github
00:43 < othiym23> num1: I was in a very tactical frame of mind at the time, trying to figure out why a whole bunch of jQuery pseudoselectors in my code weren't working
00:43 < joeandaverde> I'm creating a simplified node clone to teach how node, libuv, and v8 work together. I'm having trouble finding where libuv tcp connections are associated with javascript callbacks. Any guidance is appreciated.
00:43 < pawn> othiym23: But, I have a lot of questions when I read the examples.
00:44 < othiym23> pawn: it's a lot easier to grasp if you actually run them and can see things like the stream of websocket events that get logged by default as the socket.io server runs
00:44 < austinbv> othiym23: thanks
00:44 < austinbv> also why does mocha start mocha.js with a ;
00:44 < pawn> othiym23: I see. I'm not sure if I want my console to be full of logs, so is there a way to turn of that eventually?
00:45 < joeandaverde> austinbv: it's a common idiom to protect from javascript minifies running functions together.
00:45 < joeandaverde> minifiers*
00:45 < othiym23> pawn: the docs tell you how to configure socket.io at setup time, yup
00:45 < pianoroy> pawn: console.log = function() {}
00:45 < pianoroy> pawn: just kidding
00:45 < joeandaverde> if you look at jquery plugin guidelines i believe you'll see an example.
00:46 < jesusabdullah> There's a way to turn off socket.io logging. It amounts to punching io.log I believe
00:46 < othiym23> austinbv: fwiw, ryah was very apologetic about starting the trend of leading commas in the first place, so maybe we should all think about giving them up ;)
00:46 < pawn> pianoroy: ha. :)
00:46 < jesusabdullah> io.log.forEach(noOpThatLog);
00:46 < num1> othiym23, looks like zombie has the same problem, it just uses jsdom so intercepting network requests requires the same trickery as before
00:46 < othiym23> jesusabdullah: or you can just tell it what log level you want when you set up the io object
00:46 < num1> hm... maybe there's an easier way, is there some DOM event that gets fired before a resource is loaded?
00:47 < CIA-93> node: isaacs master * r3ad07ed / lib/tls.js : lint (+44 more commits...) - http://git.io/H9hh8w
00:47 < jesusabdullah> seriously though, that logging mechanism is the most retarded shit ever, I don't know why that hasn't been yanked out yet
00:47 < bricker882> Hello, can I npm install into something besides ./node_modules? The reason I want to do this is to try to share the packages across deployments when possible (using capistrano). I would like to install the packages in a shared folder, and then will symlink that shared folder to app_root/node_modules/
00:47 < othiym23> num1: so you're trying to gather up all the outbound requests and then run through them all at once after the DOM has been fully loaded?
00:47 < pawn> othiym23: where are the docs exactly?
00:47 < pawn> the API docs that is
00:48 < othiym23> jesusabdullah: people still use winston, so....
00:48 < pawn> All I see is examples, but where is the actual API list?
00:48 < num1> briancray, copy the file over to somewhere else, then make the symlink, the whole point of the symlink is npm won't ever notice
00:48 < austinbv> othiym23: I could agree with that
00:48 < num1> oops, bricker882 ^^
00:48 < austinbv> I am not a fan but if I am submitting a pull I will stay consistant with th file
00:49 < othiym23> pawn: for configuration, https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
00:49 < num1> othiym23, that too. I also want to intercept some requests and substitute a local file for the response, some domains I want to blacklist and have the request return an error
00:49 < jesusabdullah> othiym23: but winston's in your application code, not your module code
00:49 < bricker882> num1: I considered that first but thought there surely must be a way to just install the packages to another location, rather than have that extra step.
00:49 < jesusabdullah> othiym23: I like winston but I would not write a module that spams stdout
00:49 < othiym23> num1: you've now exhausted my competency ;), but I remember dealing with the resource-loader bits of jsdom as being a pain in the ass
00:50 < jesusabdullah> My favored strategy is logging events, or pipable streams
00:50 < num1> othiym23, no problem, thanks for trying :)
00:51 < othiym23> jesusabdullah: I probably wouldn't either, but Node's logging situation in general is a mess
00:52 < num1> bricker882, you could install the packages globally instead of locally
00:52 < russfrank> othiym23: when was ryan apologetic about starting the trend of leading leading commas
00:53 < num1> use npm install -g ..., and the package will be installed in {your node dir, or, prefix}/lib/node_modules
00:53 < num1> bricker882, ^^^
00:53 < othiym23> russfrank: in his NodeConf presentation
00:54 < russfrank> I figured 
00:54 < othiym23> russfrank: although maybe "sheepish" is a better way of describing it
00:54 < russfrank> damn, I really wanna see those talks..
00:54 < pawn> othiym23: Is there an API documentation anywhere where I can get an overview of all the methods and such?
00:55 < pawn> What's the difference between emit and send?
00:55 < livinded> pawn: send doesn't specify an event
00:55 < pawn> livinded: what does it do?
00:55 < othiym23> pawn: the socket.io "how to" covers most of it; it's a pretty simple API
00:55 < livinded> it just sends the data through the socket
00:55 < CIA-93> node: isaacs master * reb9b8f5 / (121 files in 16 dirs): npm: upgrade to 1.1.39 - http://git.io/xFieRg
00:55 < othiym23> just listeners and emitters, for the most part
00:55 < bricker882> What about this question: Once a node server is running, if I theoretically removed the node_modules directory, would that cause immediate problems?
00:55 < pawn> livinded: which listener callback get send events?
00:56 < livinded> pawn: I think data
00:56 < pawn> othiym23: you mean on http://socket.io?
00:56 < livinded> call send on a socket and find out though. You'll see whatever it is
00:56 < othiym23> bricker882: depends on whether all the dependencies get required when the system starts up (still not a great idea)
00:56 < livinded> the event is just a value in the JSON it sends
00:56 < pawn> othiym23: http://socket.io is the "how to"?
00:56 < othiym23> pawn: yep
00:57 < pawn> Hmm. I need to just get this on my server and play with it
00:58 < othiym23> pawn: this is what I'm saying :D
00:58 < pawn> When I include the /socket.io/socket.io.js script in the browser, do I need to store this js file in my public directory?
00:59 < othiym23> pawn: as long as it's hooked into e.g. an Express app, no
00:59 < sh1mmer> tripwire looks awesome
00:59 < othiym23> socket.io will intercept the request for the script and return it itself
00:59 < sh1mmer> anyone have thoughts on making it work on unix?
01:00 < othiym23> sh1mmer: context plz
01:00 < pawn> othiym23: cool. It just needs to be the path /socket.io/socket.io.js?
01:00 < Nuck> Okay, can somebody explain how in the hell I get NSSocket to run over TLS?  I keep trying to make it use TLS, but when I Wireshark it, it's sent in plaintext
01:00 < sh1mmer> https://github.com/tjanczuk/tripwire/blob/master/src/tripwire.cc
01:00 < othiym23> pawn: yes
01:00 < sh1mmer> https://github.com/tjanczuk/tripwire/
01:00 < Spion_> bricker882, also depends on the modules. Perhaps a module uses a file which it queries later, on-use. That kind of module would break.
01:01 < Spion_> s/uses/contains
01:02 < prettyrobots> Confusing.
01:02 < prettyrobots> When I write to console in Windows using stdout write, it will apply colors.
01:02 < prettyrobots> When I use fs.writeSync(1) it will not.
01:02 < pawn> What's the syntax for socket.set?
01:02 < Spion_> so if you load modules on startup, and those modules load their dependencies on load, and their dependencies ... etc... *and* none of the involved modules read external files located in their directory post-loading - then the answer is yes. otherwise no.
01:03 < prettyrobots> When I write using stdout.write() in Windows, it won't rewind \r.
01:03 < prettyrobots> When I write using fs.writeSync(1) it will.
01:05 < prettyrobots> https://groups.google.com/forum/?fromgroups#!topic/nodejs-dev/UQJosEyWcxo
01:06 < num1> othiym23, thanks a million for pointing out zombie.js, the code is quite educational. http://zombie.labnotes.org/source/jsdom_patches.html is a big headstart at modifying jsdom for my needs
01:08 < pawn> I'm not understanding require('socket-io').listen(app); Does it need to listen to port 80 and on the same host that the HTTP server is listening on? I thought that websockets don't go through the http protocol and how would the socket use the same port as the http server when there can only be one process listening on a single port?
01:09 < CIA-93> node: Bert Belder merge * rfeaf468 / (4 files in 3 dirs): Merge branch 'v0.6' - http://git.io/zs7WzA
01:13 < pawn> If I'm trying to build a chat application out of the already existing messaging application that goes through HTTP. If var io = require('socket-io').listen(app); is inside app.js how do I expose the io variable to my other controller modules without making io global or something?
01:16 < llrcombs_> Is there a way to get a "data" event on every single packet?
01:17 < llrcombs_> (in net.Socket)
01:17 < othiym23> num1: sweet d00d
01:18 < prettyrobots> Where can I find the colorization of PowerShell in the Node.js source?
01:18 < pawn> Should I just declare io as a global in my application so I can access it in my controller modules?
01:20 < othiym23> sh1mmer: tripwire does indeed look pretty cool
01:20 < othiym23> sh1mmer: got no idea how tough it would be to make it work on Unix doe
01:20 < llrcombs_> pawn: probably not. Mayhaps you can take the io as an argument in your module class's constructor?
01:20 < sh1mmer> I'd been using cluster and timeouts to do something similar
01:20 < sh1mmer> othiym23: yeah, looking at the code I'm not sure what would or wouldn't work.
01:20 < bnoordhuis> prettyrobots: you mean the repl colors?
01:21 < prettyrobots> bnoordhuis: I'm getting color when I write ANSI color escape sequences to STDOUT in PowerShell.
01:21 < prettyrobots> So, yes, if that's the same as REPL colors.
01:21 < Nuck> Can somebody take a look at this and tell me why NSSocket isn't encrypting (as WireShark has shown me) https://gist.github.com/3fb1d4607fb4ccc1a989
01:22 < Nuck> For some reason, even though everything looks right, it's failing
01:22 < prettyrobots> And I see that it is in libuv. Not node.
01:22 < bnoordhuis> prettyrobots: that's deep in the bowels of libuv
01:22 < prettyrobots> Finally.
01:22 < pawn> llrcombs_: my controller modules are required using a helper global called Controller. It works liek this:   app.get('/somewhere/over/the/rainbow', Controller('rainbow').getSomewhere);
01:22 < bnoordhuis> right :)
01:22 < bnoordhuis> prettyrobots: src/win/tty.c
01:22 < pawn> llrcombs_: I don't have a "class"
01:23 < pawn> the file:   /controllers/rainbow.js will export an object with the method getSomewhere
01:23 < prettyrobots> bnoordhuis: On windows `\r` doesn't rewind when you go through process.stdout.
01:23 < bnoordhuis> prettyrobots: piscisaureus_ is the man to speak about that
01:23 < prettyrobots> Is there an alternative?
01:24 < prettyrobots> Ah, hah.
01:24 < prettyrobots> Okay. Because I see the code where it:  EOL conversion - emit \r\n, when we see either \r or \n.
01:24 < prettyrobots> And why do that if you're going to do ANSI colors?
01:29 < TooTallNate> prettyrobots: process.stdout.write('\033[0G')
01:29 < TooTallNate> i believe
01:30 < prettyrobots> TooTallNate: Thank you!
01:30 < prettyrobots> I just found this: http://ascii-table.com/ansi-escape-sequences-vt-100.php
01:30 < prettyrobots> And was going to try to translate.
01:30 < TooTallNate> prettyrobots: maybe checkout ansi.js if you want a nice api for dealing with this stuff
01:31 < TooTallNate> https://github.com/TooTallNate/ansi.js
01:31 < CIA-93> node: Bert Belder v0.8 * rd2e40f6 / (4 files in 3 dirs): Merge branch 'v0.6' into v0.8 (+22 more commits...) - http://git.io/BDyQLQ
01:32 < pawn> Hmm. I noticed that if I have multiple tabs open of my app, it creates mutiple socket connections. This isn't really efficient is it?
01:32 < prettyrobots> Windows friendly?
01:32 < prettyrobots> Looks great.
01:35 < TooTallNate> prettyrobots: yes, windows friendly for the most part :p
01:41 < pawn> How do I get at the session data that I have in express through socket.io?
01:42 < pawn> Do I have to recreate the session data for the socket connection, or is there an built in way to do this if I'm using socketio.listen(expressApp)?
01:42 < llrcombs_> Is it possible to get individual raw TCP packets from net in Node? I'm working with a rather poorly-designed API; there's no easy magic number to watch for in a stream. It _is_ guaranteed that each message will be sent within one TCP packet, though.
01:43 < bnoordhuis> llrcombs_: unfortunately no
01:43 < bnoordhuis> llrcombs_: unless you dive deep into the (unsupported and unstable) guts of node
01:43 < llrcombs_> ack
01:44 < bnoordhuis> llrcombs_: and that still wouldn't always work because the kernel may coalesce packets as well
01:45 < llrcombs_> __maybe__ I can watch for the 01 00 00 00 00 00 00 00 at the start; I'm just concerned that there are a couple other times when that sequence could, in theory, appear
01:46 < wavded> pawn: essentially you have to duplicate the session data if you want to bring it in
01:46 < pawn> I use the req.session.user.userId to identify a logged in user. If every page load I'm creating a socket connection, how do I know which of the users is creating this socket?
01:46  * llrcombs_ has no idea why they didn't just use UDP
01:46 < bnoordhuis> llrcombs_: i was about to ask :)
01:47 < pawn> wavded: but read my  last message. How am I to determind which user a socket is for?
01:49 < wavded> pawn: https://gist.github.com/3095123
01:49 < wavded> use the cookie off the request to look it up in whatever you are using for a session store (the example i gave was for connect-redis)
01:49 < pawn> wavded: this is server end?
01:50 < wavded> pawn: this example is for connect 2.x btw
01:50 < wavded> pawn: yes
01:50 < pawn> Oh I see. So cookies are sent with the socket connection?
01:50 < wavded> right because they are part of the headers
01:51 < pawn> But aren't cookies an HTTP think, not a WS thing?
01:52 < wavded> i think they are just an HTTP thing, could be wrong though, but I believe the authorization happens in the HTTP layer
01:52 < wavded> that's why you are able to get at it during that step
01:56 < pawn> wavded: Wait, where's cookie defined?
01:57 < wavded> cookie is a npm module (npm install cookie)
01:57 < wavded> it used to be part of connect but now is its own separate module
01:57 < wavded> again that is a connect 2.x thing (if you are using connect 1.x it is still baked into connect.utils)
01:59 < austinbv> can anyone help me with this error from the repl module https://gist.github.com/3095173
01:59 < austinbv> I just want to require a lib before I start repl
02:00 < pawn> wavded: I'm using express 2.x
02:00 < wavded> ok so you are using connect 1.x then, lemmie see if i can dig up an example
02:01 < code-chimp> austinbv: which version of Node.js?
02:01 < wavded> http://stackoverflow.com/questions/4641053/socket-io-and-session
02:01 < wavded> pawn: i haven't done it this specific way before, but the example is using connect 1.x methods
02:01 < austinbv> code-chimp: 0.6.19
02:02 < austinbv> I wonder why it's so old :/
02:02 < austinbv> damn homebrew
02:03 < Nuck> Need help with NSSocket, any takers? :P
02:03 < austinbv> well the brew has been updated which is nice
02:07  * pawn is about to rage quite
02:08 < pawn> all of this socket.io stuff would be SO much easier if I just had an API documentation!
02:08 < code-chimp> austinbv: are you able to require and use repl without the Timecop include?  I just tested on 0.8.0 with a dummy module and didn't get the same error
02:08 < austinbv> It worked after an upgrade
02:08 < austinbv> to 8.2
02:08 < pawn> Where's the docs on io.set('authorization') ???
02:08 < code-chimp> austinbv: cool
02:09 < wavded> pawn: agreed, docs are hurting
02:10 < wavded> https://github.com/LearnBoost/socket.io/wiki/Authorizing
02:11 < pawn> wavded: Yeah, I'll get through this. x__x
02:12 < pawn> So, why do I need an authorization callback when the handshake data is available in the socket.handshake prop?
02:13 < pawn> Oh I get it. It's because the authorization "thing" (is it an event or is it some property, idk, this API is weird) is triggered before connection event.
02:16 < wavded> you might do some async stuff in that auth body and so it has a callback when you are all done to let socket.io know if the auth was successful or not
02:34 < prettyrobots> join /##javascript
02:34 < deoxxa> fail
02:38 < pawn> client-side connection event is called 'connect' or 'connection' in socket.io?
02:39 < Nuck>  Sigh.  Does anyone even use NSSocket?
02:39 < Nuck> Cause srsly, I cannot seem to get any help
02:41 < vlapan> pawn: connect
03:01 < backus> Hi, I'm creating a bot that interacts with http://plug.dj/  
03:02 < backus> How should I approach tasks like logging into the website and watching ajax calls from the site with node?
03:02 < backus> Or would I be better advised to use something like PhantomJS
03:04 < deltab> ccowan: by the way, you have some mislabelled characters under 'Recent blog posts'
03:08 < backus> Specifically... I want to log into this website via Twitter's OAuth. Any idea how I can do that?
03:12 < backus> :(
03:13 < deoxxa> backus: you realise node.js is not a browser, right?
03:14 < deoxxa> so things like "ajax" don't mean anything
03:14 < deoxxa> backus: what you want to do, by the sounds of it, is emulate their client code. that's definitely something you could do, technically speaking. the problems is one of whether or not it's against the TOS of the site.
03:15 < backus> It isn't
03:15 < backus> They have APIs on their site and people build crappy bots that they run in their browsers as bookmarklets
03:26 < pawn> Do I have to garbage collect sockets with the disconnect event?
03:27 < jesusabdullah> garbage collecting? What's that? :v
03:27 < deoxxa> depends, is your name "v8"?
03:31 < tim_smart> pawn: Just make sure you don't have any hanging references.
03:32 < pawn> tim_smart: what are references; how do I do this?
03:33 < jesusabdullah> pawn: Don't worry about it too much if you don't get it, but, like, let's see
03:33 < jesusabdullah> a reference
03:33 < jesusabdullah> So if I do,
03:33 < jesusabdullah> var a = {};
03:34 < jesusabdullah> I've defined some object, and it's *referenced by* 'a', meaning I've attached it to some namespace
03:34 < jesusabdullah> So, like, if you create an object in a function and then return, those objects will lose their references when the closure created by that function is cleaned up
03:35 < jesusabdullah> but if you *keep a reference around*---like, say you pushed each new object you got onto some global stack or something---then the garbage collector has no way of knowing that you don't need it anymore
03:36 < jesusabdullah> Does that make sense, pawn?
03:36 < Nuck> The New NPM site is gorgeous
03:37 < Nuck> Finally a site for NPM that doesn't make me sad
03:37 < jesusabdullah> sheah, liek
03:37 < jesusabdullah> its npm
03:37 < deoxxa> the npm site is nice, i guess. i can't really understand the whole "no frameworks!" deal though.
03:37 < jesusabdullah> huh?
03:38 < deoxxa> lemme find the doc
03:38 < deoxxa> https://github.com/isaacs/npm-www/blob/master/README.md
03:39 < jesusabdullah> I mean
03:40 < jesusabdullah> that's just a sense of style
03:40 < jesusabdullah> I don't think "composable pieces" and "framework" are mutually exclusive
03:41 < jesusabdullah> but the ideals of small pieces that work with the raw http server are reasonable ones
03:41 < pawn> jesusabdullah: Oh, like if I were to cache all the sockets in a chatSockets object?
03:41 < pawn> I would need to delete a reference to that socket in the chatSockets object when a socket is disconnected?
03:42 < deoxxa> the whole thing just reads like a "i've been coding for over 2 years now, i think i know better than you" rant
03:42 < jesusabdullah> pawn: Yeah, just 'delete sockets.socket' or whatever
03:43 < JasonWoof> what's a good way to find out why my node app isn't exiting?
03:43 < jesusabdullah> deoxxa: Maybe. Isaac's not the type to grumble about other people though
03:43 < pawn> jesusabdullah: I'm storing my sockets like: chatSockets[userId] = socket;
03:43 < jesusabdullah> deoxxa: He's the kind that just does his thing, says what he feels, writes some things, eats tacos
03:43 < pawn> jesusabdullah: So, I'll just need to do socket.on('disconnect', function(){ delete chatSockets[userId]; });
03:43 < jesusabdullah> y'know, chill, laid back, very reasonable to talk to
03:43 < jesusabdullah> pawn: Sounds right
03:43 < pawn> Also, are the events 'connect' and 'connection' synonymous?
03:44 < pawn> likewise, 'disconnect' and 'disconnection'?
03:44 < jesusabdullah> unsure I don't use socket.io
03:44 < deoxxa> jesusabdullah: oh i know it's not the case, and i'm sure it'll turn out great, but it's just not an approach i'm used to seeing when it comes to large infrastructure projects
03:44 < jesusabdullah> but probably not
03:44 < jesusabdullah> deoxxa: Sure
03:44 < deoxxa> so it makes me feel a little uncomfortable - just as a reflex action
03:44 < jesusabdullah> deoxxa: I've seen that style some places, typically in very small teams
03:44 < JasonWoof> seems that all (3 of) my spawned processes have exited, and I called process.stdin.pause() and called .end() on my stream created with fs.createReadStream()
03:45 < jesusabdullah> I think it helps small teams to be able to keep all these things in their head, and larger teams benefit more from having a spread out common knowledge of some overarching framework/set of tools
03:45 < jesusabdullah> like, the npm site is probably like, isaac and whoever he can coerce into looking at it for five minutes
03:45 < deoxxa> ha, yeah
03:46 < jesusabdullah> meanwhile, at nodejitsu we have like 15-20 dudes all using the same stack
03:49 < tjholowaychuk> jesusabdullah there's probably more value in aggregating those same components into a flatiron / express type of thing anyway so you're not forcing a shit ton of tests on your application
03:49 < tjholowaychuk> when a lot of things are not really specific to the app
03:50 < tjholowaychuk> which probably explains why the new npm site is pretty busted
03:50 < PIKE32> sigh - alright, just trying to get the simple hello world operational and im thinking its just the path to the example.js
03:50 < PIKE32> did basic install on windows - loaded command line 
03:51 < PIKE32> tried: node example.js
03:51 < jesusabdullah> tjholowaychuk: Yeah, it's definitely nice to have a set of non-custom tools
03:51 < PIKE32> but just get the three dots (its waiting for more)
03:51 < myndzi> how the heck do i pass something to msbuild /p in a gyp config file?
03:52 < PIKE32> example.js is on my root to make things simple - do i need to change a path?
03:52 < JasonJS> Are there any lightweight modules for sending custom events over a net.Socket?
03:53 < jesusabdullah> JasonJS: nssocket's probably the closest you'll find
03:54 < jesusabdullah> JasonJS: hook.io is nice too
03:55 < JasonJS> Hook just doesn't fit my use case quite right.
03:55 < jesusabdullah> JasonJS: nssocket's closer, I think.
03:56 < pawn> Why would it be that when I use socket.handshake.session.foo = 23; it would persist on other HTTP requests?
03:57 < Nuck> jesusabdullah: NSSocket sucks.
03:57 < Nuck> Jussayin
03:58 < JasonJS> Nuck: Why is that?
03:58 < PIKE32> lil help?
03:58 < jesusabdullah> weren't you just saying like 3 minutes ago that it was the greatest thing since sliced bread?
03:58 < Nuck> The API is awkward, especially when you're used to vanilla EventEmitters
03:58 < Nuck> jesusabdullah: the concept is great
03:58 < Nuck> The implementation, not so much
03:58 < jesusabdullah> I mean
03:58 < jesusabdullah> I'm not exactly enthralled by the api either but whaddagonnado
03:58 < tjholowaychuk> someone needs to write a pure js zmq
03:58 < Nuck> Also, the TLs support is glitchy at best, from what I've seen
03:59 < jesusabdullah> I think it got recent patches
03:59 < jesusabdullah> idk
03:59 < Nuck> All I know is, when I set up a TLS connection, it died instantly.
03:59 < jesusabdullah> I'm not really here to sell nssocket to some guy that wants to tell me how much it sucks.
03:59 < Nuck> lol
03:59 < Nuck> It's wonderful, but it needs some serious loving
03:59 < JasonJS> I'll give it a try - it is odd that they didn't stick with a more standard EventEmitter-like api
04:00 < jesusabdullah> we take pull requests, nuck
04:00 < Nuck> jesusabdullah: I would if I could understand some of this weird UTF8 stuff it's doing
04:00 < JasonJS> I'm just looking for a simple server to server layer that doesn't leak like a sieve
04:00 < Nuck> JasonJS: haha
04:00 < jesusabdullah> weird utf8 stuff? Can't be that bizarre, it's just json
04:01 < jesusabdullah> JasonJS: we use nssocket for that in prod, it's pretty solid
04:01 < jesusabdullah> I mean, idk about the tls sockets, but the tcp ones are nice
04:01 < Nuck> jesusabdullah: It's juggling buffers and using functions I've never seen before, like writeUInt32BE
04:01 < Nuck> I feel like this could be better solved by just throwing \00 as a delimiter
04:02 < jesusabdullah> Interesting. That sounds like a protocol detail though
04:02 < JasonJS> jesusabdullah: I need something new - I've been using dnode for the last 6 months and just dealing with the leaks but with their recent patches something has gone wrong with it
04:02 < jesusabdullah> JasonJS: I believe the latest dnode does not leak anymore?
04:02 < jesusabdullah> JasonJS: I talked to subb rubb about this at length, so did marak
04:02 < jesusabdullah> JasonJS: There are even tests that *prove* it leaks less
04:02 < JasonJS> jesusabdullah: Apparently, but now it gc'ing my callbacks before the are even used - very bizarre
04:03 < PIKE32> bueller?
04:03 < jesusabdullah> JasonJS: sub's fairly responsive to questions/concerns, very good at fixing bugs
04:03 < Nuck> socket.write(JSON.stringify(obj) + '\00') ought to work, I'd imagine, I can't understand why NSSocket is doing this fancy stuff
04:03 < Nuck> Oh wait.  WAT
04:03 < Nuck> Why is this thing capable of sending buffers?
04:03 < jesusabdullah> probably for sending binary data
04:03 < jesusabdullah> such as, say, large tarballs
04:03 < myndzi> any idea what EV_ERROR would be in pg's binding.cc ? appears to be undefined
04:03 < jesusabdullah> that's pretty sweet actually
04:03 < myndzi> i'm not sure what they're trying to do
04:04 < Nuck> hmm
04:04 < myndzi> maybe a constant/setting?
04:04 < PIKE32> ?
04:04 < JasonJS> jesusabdullah: I've been trying to get a small test case to reproduce the bugs I'm seeing in production with dnode but not having much luck. 
04:04 < jesusabdullah> Nuck: Have you ever tried to json-ify a buffer? It shits **everywhere** XD
04:04 < jesusabdullah> JasonJS: Just making an issue about it will get the ball rolling
04:04 < Nuck> jesusabdullah: I'm sure, but I would say this is a rather complex solution for something so seemingly simple
04:05 < jesusabdullah> JasonJS: surely you have a few stack traces saved up?
04:05 < jesusabdullah> Nuck: keyword "seemingly"
04:05 < Nuck> if you want to put a buffer onto the line, couldn't you just write the delimiter char and then write the buffer in two separate writes (one of text and one of binary data)
04:06 < JasonJS> jesusabdullah: It doesn't die - the callbacks just get cleaned up and set to function () {}
04:06 < jesusabdullah> also, one hallmark of paolo's coding style is that he'll go computer science on your ass no sweat
04:06 < Nuck> ahh the framing protocl also throws in lengths
04:06 < JasonJS> jesusabdullah: It's something within weakref
04:06 < jesusabdullah> JasonJS: I mean, *some* sign that confirms your hypothesis?
04:06 < Nuck> hmm this is a fairly smart protocol, but it seems like a lot of unneeded overhead :/
04:06 < PIKE32> yup - still  just getting three dots
04:07 < JasonJS> jesusabdullah: Heh - I known. It frustrating as all heck trying to reproduce this.
04:08 < JasonJS> jesusabdullah: GC is magic
04:08 < JasonJS> jesusabdullah: Deep, dark magic
04:09 < deoxxa> huh, my boss has disappeared
04:09 < deoxxa> now i have nothing to do
04:09 < deoxxa> reddit time!
04:09 < jesusabdullah> write moar nodethings
04:10 < JasonJS> jesusabdullah: nssocket looks nice and simple. You were saying you use it in production? How is it's stability and 'reconnect'ability?
04:11 < jesusabdullah> Yeah, it runs a whole bunch of nodejitsu's backend processes
04:11 < jesusabdullah> as far as I know the reconnect works great
04:11 < jesusabdullah> I mean, I've never heard of it causing us problems
04:11 < jesusabdullah> and I'm kind of on the front lines
04:13 < Nuck> le sigh
04:14 < jesusabdullah> why so glum?
04:15 < Nuck> https://gist.github.com/3fb1d4607fb4ccc1a989 I've been doing everything imaginable to get NsSocket to work but every time it does this
04:16 < Nuck> And yes, I know I'm passing the cert and shit to the client, I was grasping for straws
04:16 < Nuck> I mean, it looks at a glance to be an issue with the keypair
04:17 < Nuck> Judging by the SecurePair
04:17 < Nuck> But I generated everything with OpenSSL, I can't imagine what could cause this
04:18 < Nuck> The difference between .NsSocket and .createServer is extremely irksome
04:18 < Nuck> should be .createClient
04:21 < dominictarr> Nuck, does ns socket create streams ? it's basically an event emitter over tcp right?
04:21 < Nuck> dominictarr: It's creating a TLS stream, and it's an EventEmitter2 over TCP/TLS
04:21 < jesusabdullah> dominictarr: It can take a stream as an argument
04:22 < Nuck> It seems that it dies the moment I try to send data
04:22 < cainus> anyone using dnode?  I can't get the main examples to run at all...
04:22 < Nuck> But until I do that, it's fine
04:22 < Nuck> Which means it shouldn't be the TLS handshake, but something beyond that
04:22 < jesusabdullah> file an issue or something
04:23 < jesusabdullah> dominictarr: nssocket is starting to show its age a little bit, in that it was written before streams gained popularity in userspace
04:23 < Nuck> ahh
04:23 < jesusabdullah> dominictarr: I want to see mux/demux implemented on top of it
04:23 < Nuck> I might try and reimplement on top of it
04:23 < Nuck> Err, replace
04:23 < jesusabdullah> wat
04:24 < Nuck> I might try and make my own replacement
04:24 < jesusabdullah> great
04:24 < jesusabdullah> I mean
04:24 < tjholowaychuk> Nuck i have something from 5 or 6 months ago
04:24 < tjholowaychuk> not sure how stale it is though
04:24 < Nuck> tjholowaychuk: ?
04:24 < tjholowaychuk> never ended up using it
04:24 < tjholowaychuk> half-finished zmq implementation in js
04:24 < jesusabdullah> I mean, it's not every day you want a tcp transport
04:24 < jesusabdullah> I mean, zmq ain't bad
04:24 < jesusabdullah> wish I knew more about it but whatevs
04:25 < jesusabdullah> seems nice
04:25 < jesusabdullah> from what I've seen
04:25 < Nuck> I think ZMQ is a bit heavy for this task
04:25 < jesusabdullah> tjholowaychuk: maybe you can explain zmq to me
04:25 < tjholowaychuk> there's some gotchas but over-all it's great
04:25 < dominictarr> jesusabdullah, mux-demux and ns socket are pretty much the same idea
04:25 < jesusabdullah> dominictarr: Yeah, very very similar, just flipped around
04:25 < Nuck> All I want is a simple networked EventEmitter, like socket.io for the backend
04:25 < tjholowaychuk> jesusabdullah it kinda removes the concept of a server, either end can bind/connect and it provides a low-level [len, binary] message protocol
04:26 < tjholowaychuk> to shove json / msgpack etc over
04:26 < tjholowaychuk> very low latency
04:26 < jesusabdullah> dominictarr: you could easily use the namespacing for the muxing and just reemit the ents with/without namespace
04:26 < dominictarr> Nuck, https://github.com/dominictarr/remote-events
04:26 < tjholowaychuk>  5m message/s no problem on an air over tcp
04:26 < jesusabdullah> tjholowaychuk: So it's a small, lightweight, robust protocol built on top of tcp?
04:26 < dominictarr> works over any stream
04:26 < tjholowaychuk> basically just a small message queue with various socket types for different patterns
04:26 < tjholowaychuk> pub/sub req/rep etc
04:27 < SubStack> cainus: the interface changed rather substantially in 1.0.0
04:27  * Nuck faints
04:27 < brianc> voodootikigod: node-postgres native bindings should be good to go now
04:27 < tjholowaychuk> jesusabdullah yup, but more like udp
04:27 < tjholowaychuk> as far as the feel
04:27 < jesusabdullah> sure
04:27 < Nuck> dominictarr: Scary API you made there ;)
04:27 < jesusabdullah> I have to admit I have little if any udp knowledge
04:27 < cainus> Substack: current docs aren't for 1.0.0 ?
04:27 < SubStack> they are
04:27 < SubStack> cainus: which example are you running?
04:27 < jesusabdullah> tjholowaychuk: So you could implement a stream api on top of that yeah?
04:27 < cainus> I'm just copy/pasting the client/server example from the github page
04:27 < Nuck> I think I'll just write a simple JSON framing protocol
04:27 < cainus> with 1.0.0
04:27 < jesusabdullah> tjholowaychuk: I'm really digging this idea of having every type of connection thing ever being able to just hand you a stream
04:27 < Nuck> JSON + \00
04:28 < tjholowaychuk> jesusabdullah you can, it's kinda awkward for that sort of thing, regular tcp is nicer for streaming say big videos etc
04:28 < jesusabdullah> Yeah, that makes sense
04:28 < tjholowaychuk> but it has nice load balancing features
04:28 < dominictarr> Nuck, what do you mean scary?
04:28 < Nuck> dominictarr: It's a pretty heavy API, lots of boilerplate to link the two, it seems
04:29 < Nuck> See, I was thinking I'd base my API roughly on socket.io's
04:30 < dominictarr> Nuck, oh, you mean the spilt, parse stuff?
04:30 < Nuck> dominictarr: Yeah
04:30 < jesusabdullah> I don't like socket.io's api
04:30 < jesusabdullah> I like substack/shoe 's api
04:30 < Nuck> I love the core networked EventEmitter setup
04:30 < jesusabdullah> plus mux/demux
04:30 < dominictarr> could simplify it to con.pipe(ree.getStream()).pipe(con)
04:30 < Nuck> My biggest gripe with Socket.io is how bloaty it's gotten
04:31 < cainus> Substack: I guess the problem is more fundamental than the examples:  https://gist.github.com/3095725
04:31 < dominictarr> the thing is, there is no one-size-fits all api
04:31 < Nuck> I mean, that thing has gone from a WebSocket fallback layer that also provides events, to some enormous beast that tries to solve everything realtime
04:31 < dominictarr> that is why I wrote mux-demux, and advocate all communitaction libs expose streams.
04:32 < Nuck> All I want to do is expose JSON.
04:32 < dominictarr> each part of socket.io should be a seperate module that you can use if you want.
04:32 < Nuck> Streams are useful, yes, but JSON is another universal concept
04:32 < Nuck> You can put a LOT of things on top of JSON
04:32 < Nuck> dominictarr: I would love that
04:32 < Nuck> socket.io needs to be broken apart
04:32 < dominictarr> Nuck, yeah, but you're just gonna build these kinda abstractions with it.
04:33 < jesusabdullah> Umm
04:33 < dominictarr> some thing like an event emitter, some sort of rpc for req-res
04:33 < SubStack> dominictarr: there's engine.io now at least finally on npm
04:33 < SubStack> need to wrap that up shoe-style
04:34 < Nuck> dominictarr: Well, I'm thinking I'll build an EventEmitter system on it, and leave RPC to be Somebody Else's Problem
04:34 < Nuck> Might build a request/response system
04:35 < Nuck> But honestly, this would be easy enough to implement in JSON
04:35 < Nuck> Whereas implementing in Streams, while efficient, is a pain in the ass
04:35 < SubStack> mux-demux + (engine.io || shoe) + remote-event gives you all the things that socket.io does
04:35 < brianc> what's this mux-demux thing?
04:36 < Nuck> Is Shoe a layer for WebSocket fallbacks, SubStack?
04:36 < SubStack> Nuck: streams aren't about efficiency, they're about composability and backpressure
04:36 < SubStack> Nuck: it's a wrapper on top of sockjs that provides a stream api
04:36 < SubStack> sockjs has the properties you describe
04:36 < Nuck> hmm
04:36 < SubStack> brianc: https://github.com/dominictarr/mux-demux with this you can pack multiple streams into a single stream
04:36 < prettyrobots> SubStack: Are you using Bunker day to day?
04:36 < SubStack> prettyrobots: nope
04:36 < prettyrobots> SubStack: Anyone integrated it into their build tools?
04:37 < prettyrobots> SubStack: Need work or coverage just isn't your thang?
04:37 < JasonWoof> how do I attach a debugger? I sent sigusr1 and it says it's available on 5858. what command to I type to connect?
04:37 < prettyrobots> Or?
04:37 < brianc> SubStack: thanks for the link - looks nice
04:38 < JasonWoof> I've tried all kinds of things like this: node --debugger --remote_debugging --debugger_port=5858
04:38 < JasonWoof> or this: node --debugger_port=5858
04:38 < tjholowaychuk> Nuck oddly this thing i had is faster than the zmq bindings right now hahaha
04:38 < Nuck> SubStack: I don't really see how streams would relieve backpressure in most situations.  I mean, sometimes it will, but I can't see it
04:38 < tjholowaychuk> i have no clue what's wrong with them
04:38 < Nuck> tjholowaychuk: haha
04:39 < Nuck> tjholowaychuk: Are they binding into C?
04:39 < tjholowaychuk> somehow don't interact well with node at all
04:39 < tjholowaychuk> yeah
04:39 < Nuck> tjholowaychuk: That's your explanation, I think
04:39 < Nuck> Aren't C bindings slower than staying in JS?
04:39 < tjholowaychuk> i think there's a much bigger problem than that
04:39 < dominictarr> Nuck, they don't relive backpressuse, the just communicate it.
04:39 < dominictarr> it's the upstream's job to slow down.
04:39 < tjholowaychuk> it shouldn't go from 5m message/s to ~50k or whatever it was
04:39 < brianc> Nuck: streams don't relive backpressure, they allow you to exert it and deal with it. 
04:39 < Aria> Nuck: It depends on what you're doing, and implemented how; that said, there's some bookkeeping that can be pricey.
04:39 < Nuck> hmm
04:40 < brianc> dominictarr: the alternative is to "read the entire file upload into memory before writing it to disk" or something similar
04:40 < Nuck> Well, if I'm using a JSON parser, that's not streaming, so it doesn't really matter how fast the data comes in, I'm buffering either way
04:40 < dominictarr> Nuck, not if you use a streaming parser
04:41 < dominictarr> or you can use line seperated json
04:41 < Nuck> Are there any good streaming JSON parsers that don't require some special API?
04:41 < Nuck> dominictarr: Well, it's coming in JSON "packets" essentially
04:41 < Nuck> I just have one big JSON object that comes in and I parse it and hand it off based on a header in it
04:41 < Cat4D> why are JS projects designed for the browser implemented in node.js ?
04:41 < dominictarr> tell me what you think of this github.com/dominictarr/JSONStream
04:42 < dominictarr> if the object is array like, you can get each item out as it comes.
04:42 < brianc> dominictarr: been meaning to talk to you about that project actually if you have a min
04:42 < Cat4D> dominictarr: i noticed 4 other streaming structured data libs, is there a wrapper for all of them?
04:42 < brianc> dominictarr: can it pick up "mid-way" through a stream?
04:42 < prettyrobots> dominictarr: Neet.
04:42 < prettyrobots> dominictarr: Neat.
04:43 < deoxxa> NEET
04:43 < Cat4D> i was concerned with multiple channel streams without structural  synch
04:43 < brianc> dominictarr: the api for writing outgoing packets might could use a bit more documentation
04:43 < dominictarr> brainc, it needs to be valid json, which it wont be if you don't get the opening bracket.
04:43 < Nuck> dominictarr: The data is essentially ['event',{payload}]
04:44 < brianc> dominictarr: i looked at this a bunch because i log everything in json and wanted to write a streaming json grep type thing for back-end log searching
04:44 < dominictarr> Nuck, what is easiest, and what I use mostly is just line seperated json.
04:44 < brianc> also sometimes stream a huge amount of json down to the browser for back-office stuff 
04:44  * Nuck sighs
04:45 < Nuck> Streams make me feel guilty when I have to buffer :(
04:45 < brianc> dominictarr: how do you do line seperated json if the json contains possible line-breaks in the value of a test property?
04:45 < tjholowaychuk> Nuck nothing wrong with message oriented json stuff
04:45 < Nuck> brianc: line breaks in the data should be escaped I think
04:45 < tjholowaychuk> you control all the message sizes so who cares
04:45 < deoxxa> "streaming" doesn't necessarily mean "never buffer"
04:45 < Nuck> deoxxa: Doesn't make me feel any less guilty
04:46 < tjholowaychuk> the underlying tcp socket can just do its thing
04:46 < brianc> yeah, only need to buffer the stream for as much as you need for an entire packet
04:46 < dominictarr> JSON.stringify will have no line breaks
04:46 < Cat4D> its more like slush or chunks of ice or tree parts going down
04:46 < Nuck> tjholowaychuk: True, but future me may not be as bright
04:46 < Nuck> Valid JSON shouldn't contain any null chars right?
04:46 < Cat4D> \u
04:46 < dominictarr> Cat4D, good example
04:47 < jesusabdullah> No shame in buffering non-streaming data
04:47 < Cat4D> i was working on techniques for deep logic merge or intersect for schema structures
04:47  * Nuck goes to create a streaming splitter for his stuff
04:48 < Cat4D> so the structures could be indexed and packed flat, but then recompose without having to copy
04:48 < Nuck> I'm trying to think if there's anything to optimize if I know the event name before I know the payload
04:49 < Cat4D> but the options were limited, dominictarr 's streaming json and other block-binary extraction
04:49  * Nuck shrugs off the thoughts of optimization and just does
04:49 < Nuck> Okay, are TLS sockets instanceof net.Socket?
04:49 < Aria> Nuck: json strings can contain almost any unicode character; unicode defines nul as a character; that said, I bet a lot of implementations barf on that.
04:49 < Cat4D> there were two other streaming libs, besides IO and websockets
04:50 < Nuck> Aria: Hmm.  I thought JSON had to have chars escaped
04:50 < Cat4D> one was a mutual callback driver
04:50 < dominictarr> Cat4D, bradgignac you *could* count matching brackets
04:50 < dominictarr> oops, brainc ^
04:50 < Cat4D> which is designed for input events, nuck
04:50 < Aria> Nuck: any utf-8 character is fine to be non-escaped, except a tiny handful like newline.
04:50 < Aria> Nuck: And utf-8 allows nul.
04:51 < ljharb> "null" in javascript and json.
04:51 < Nuck> ugh
04:51 < Aria> ljharb: hm?
04:51 < Cat4D> it was in one of substack's writeups, for node-browser ipc and event transport
04:51 < Aria> Why ugh?
04:51 < ljharb> not "nul"
04:51 < Nuck> I don't wanna use newlines for delimiters because newline-delimited JSON is already a thing
04:52 < Nuck> I was thinking nul chars are a good delimiter but I guess that's out of the question
04:52 < Aria> ljharb: Either's acceptable in various instances of unicode...
04:52 < ljharb> Nuck: i missed the context. why do you need delimeters in json?
04:52 < tjholowaychuk> Nuck when you send the message you already know the length since it's message oriented
04:52 < Nuck> ljharb: I'm building a framing protocol around JSON messages
04:52 < tjholowaychuk> so you just tag it with the length
04:52 < tjholowaychuk> https://gist.github.com/3095871
04:52 < Aria> Nuck: You could have the parser know when it's back at the root and accept a new json document there with no delimiter ;-)
04:52 < tjholowaychuk> is the pub/sub api for my thing
04:52 < Nuck> tjholowaychuk: True, that is possible...
04:53 < Cat4D> multiple streams, or composite streams are a really severe problem for the browsers
04:53 < tjholowaychuk> wire is just [meta][length][data ....]
04:53 < Nuck> Aria: I'm basically just calling off to JSON.parse
04:53 < Cat4D> https://github.com/Cat4D/Spatial-Dimension/wiki   as an example, for the data IO
04:54 < Nuck> tjholowaychuk: meta?
04:54 < Aria> Nuck: Aaah.
04:54 < tjholowaychuk> Nuck: just some flags like the format transferred so it knows to parse json etc
04:54 < tjholowaychuk> so you can use json/binary for the same socket
04:54 < tjholowaychuk> and others
04:54 < dominictarr> yeah, Nuck  can you please implement the message length delemited stream.
04:55 < dominictarr> we need one of those.
04:55 < Aria> <small>netstrings</small>
04:55 < Nuck> That seems simple enough, and probably good
04:55 < ljharb> Nuck: so just use a semicolon as a delimiter between valid json objects.
04:55 < Nuck> ljharb: ... Yeah no
04:55 < Nuck> {'test':'fun fun fun;'}
04:55 < Nuck> -eval true
04:56 < Nuck> v8> true
04:56 < purr> Nuck: (boolean) true
04:56 < ljharb> yes i mean, a semicolon not contained in curly braces or brackets
04:56 < Nuck> Oh, so now I'm parsing with a Regex, am I?  This seems really efficient.
04:56 < Nuck> :P
04:56 < Nuck> length-delimited it is
04:56 < ljharb> ok - look for any '}' and any semicolon immediately after it, ignoring whitespace.
04:56 < dominictarr> that is not inside ""
04:57 < Nuck> ljharb: What happens if a data event splits btween the } and the ;?
04:57 < ljharb> hm, yeah
04:57 < dominictarr> use this
04:57 < ljharb> i guess if your chunks won't be valid json, then you'll just have to reimplement tcp
04:57 < Nuck> I've written streaming splitters before, and everything gets complicated when your delimiter is longer than a single character
04:58 < dominictarr> https://github.com/dominictarr/event-stream#split-matcher
04:58 < Nuck> I think tjholowaychuk had the best idea lol
04:58 < dominictarr> it's really simple actually. thanks to a pullrequest from mhart
04:59 < Nuck> Hmm
04:59 < Nuck> Had a sudden urge to use BSON on the wire, but fuck that
05:01 < Aria> netstrings!
05:01 < Aria> They're so very often the right answer.
05:01 < Nuck> I went to the BSON site to steal their flags for my payload types
05:01 < Nuck> And apparently bson.org is the wrong site
05:01 < Nuck> Whoops
05:03 < gkatsev> at least you didn't go to python.com thinking it was python.org
05:03 < Nuck> gkatsev: Can't compare to whitehouse.com
05:04 < gkatsev> that too
05:11 < bazel> can I use node.js to make this happen: client browser -> (in http) -> node -> (in https) -> web server?
05:12 < ljharb> what would be the point of the https, if communication from the browser to node is in http?
05:12 < ljharb> either it's all in https or might as well be none of it
05:12 < bazel> and have node act as a proxy, so that the client is receiving the page in http?
05:12 < ljharb> you could, but you'd basically be destroying the https site's security
05:12 < bazel> the point would be that the small powerless client will not have to encrypt/decrypt the ssl, and that i can debug and/pr capture the http which i can't do in https?
05:13 < bazel> client -> node is in LAN, node -> server is secure. and it's only for a while 
05:14  * JasonWoof bows deeply to the god of facepalm
05:14 < JasonWoof> here's my my app wouldn't quit: cat = spawn('cat', [], { stdio: ['pipe', 'pipe', 'ignore'] })
05:14 < cainus> bazel: why not just use firebug or httpfox ?
05:14 < JasonWoof> that was early test code to make sure I understood how to work with stdin and stdout
05:15 < JasonWoof> wasn't using that at all
05:15 < ljharb> bazel: if you're dealing with a client that can't handle security, that client should not be doing anything important. period.
05:15 < cainus> or some other http proxy
05:15 < ljharb> cainus: you could but again that would defeat the purpose of any https anywhere in the chain
05:15 < cainus> sounds like he's only doing it for debugging
05:16 < cainus> temporarily
05:16 < ljharb> besides, https isn't that intensive anymore. anything should be able to handle it.
05:16 < ljharb> if it's for debugging, you would just turn off https
05:16 < bazel> I understand. but this is a pet project of mine, not something that will be used publicly. I understand the security ramifications. I understand that it will defeat the purpose of using https in the first place. I was asking how to do it, not why not to do it.
05:16 < ljharb> why not to do something is often far more important than how.
05:16 < ljharb> if you are ok with removing security, just disable https in the first place.
05:16 < bazel> if you know of a proxy that can do it - tell me. proxy can act as MITM, but the communication between the client and the proxy will still be encrypted, only using a different certificate
05:17 < bazel> I can't disable https on the server, it's a blackbox.
05:17 < ljharb> that different certificate must thus be less secure than ssl, if the client can't handle ssl but can handle this cert
05:17 < cainus> browsers allow you to hook up a proxy
05:17 < cainus> even for https
05:17 < ljharb> then that server should block you the instant you set this up, because it's a huge security hole
05:17 < ljharb> but yes, any proxy can do it
05:17 < cainus> charles http debugger can do it
05:18 < bazel> Charles can't do it. charles will create a self signed cert of the fly, and the comm will still be encrypted.
05:18 < cainus> I've done it in charles
05:18 < ljharb> im sure you can disable that helpful feature of charles, although you shouldnt.
05:18 < bazel> cainus - do you remember specifics?
05:19 < cainus> socks proxy stuff
05:19 < cainus> but I don't remember the details
05:19 < cainus> was a couple of yrs ago
05:19 < cainus> I just use browser extensions for it now... firebug is even okay
05:19 < bazel> ok, i'll take a look. thanks everyone. 
05:19 < smartPudding> hi, could anybody point me to good articles about putting node.js into production on your own server ?
05:20 < bazel> The question was mainly educational, and all the security lectures were unwarranted, especially the second time around. cheers
05:21 < sechrist> what are some modules to start with if I want to build an terminal-based curses-esque monitoring thing. with ascii graphs and stuff.
05:21 < ljharb> the lectures are educational :-)
05:21 < sechrist> I see a couple of color modules and a bar charts one
05:29 < DTrejo> npm search dtrejo
05:34 < prettyrobots> sechrist: Readline is built into node.
05:34 < prettyrobots> Isn't that swell?
05:35 <@ryah> can someone test email me ry@tinyclouds.org
05:36 <@ryah> sorry - im fucking with exim4
05:36 <@ryah> and im not sure if i messed it up or not
05:36 < wookiehangover> I signed you up for some newsletters
05:36  * ryah rolls eyes
05:36 < wookiehangover> hope that halps!
05:37 <@ryah> Nexxy: thanks :)
05:37 <@Nexxy> ryah, :)
05:37 <@ryah> loved your talk at nodeconf too btw
05:38 <@Nexxy> \o/ thanks!
05:39 < jesusabdullah> I'm glad I got to see the ticket printer :)
05:40 <@Nexxy> jesusabdullah, haha yeah. I wish i could have had the time to demo all of that stuff too
05:40 <@Nexxy> but it would have been too hard to set up
05:40 < jesusabdullah> yeah, well, I was a noob and slept through your talk nexxy :( but I did look at the slides!
05:41 < jesusabdullah> AND AS YOU KNOW I had already been following your work!
05:41 <@Nexxy> hah ;P
05:41 < prettyrobots> Nexxy: Happy baby arrival event.
05:41 <@Nexxy> tl;dr I made a bunch of phones ring by waving my hands around
05:41 <@Nexxy> prettyrobots, thanks!! :D
05:56 < Frank1> can someone give me a pointer to info about modules and path resolution (newbe question)
06:08 < AlbireoX> FireFly: 0x8b3acbf0
06:08 < AlbireoX> oops i mean frank1, who left
06:08 < DTrejo> npmbro credits
06:08 < AlbireoX> joke ruined
06:08 < npmbro> DTrejo: npmbro was written by http://twitter.com/ddtrejo, and named by http://twitter.com/maxogden. The original npm was written by http://twitter.com/izs. Contribute to npmbro at https://github.com/DTrejo/npmbro.
06:09 < DTrejo> npm docs module
06:09 < npmbro> DTrejo: Please see http://github.com/koding/modulejs#readme
06:17 < DTrejo> npmbro
06:17 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm docs npmbro` or run `npm credits`.      Available commands: npm search | npm docs | npm help | npm node | npm credits
06:18 < DTrejo> yayyy
06:18 < DTrejo> my bot workz
06:18 < chrisbuchholz> [C
06:19 < AlbireoX> npmbro
06:19 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm docs npmbro` or run `npm credits`.      Available commands: npm search | npm docs | npm help | npm node | npm credits
06:19 < AlbireoX> npm install express
06:19 < npmbro> AlbireoX: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20install%20express
06:19 < DTrejo> damnit
06:20 < DTrejo> err wait maybe that is intended
06:20 < DTrejo> what is more useful: link to npm docs if it can't do that action, or link to docs on express
06:20 < AlbireoX> ...so, new person who just made a module, to publish it
06:20 < AlbireoX> npm deploy
06:20 < npmbro> AlbireoX: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20deploy
06:20 < DTrejo> you can only run informational commands, sadly
06:21 < DTrejo> it doesn't actually use npm underneath, it just links to things, and looks things up in the registry
06:21 < AlbireoX> i know
06:21 < DTrejo> hehe ok
06:21 < AlbireoX> i'm just saying it might be confusing
06:21 < AlbireoX> because it's called npm
06:21 < AlbireoX> but it's not npm
06:21 < AlbireoX> it's a bot
06:22 < AlbireoX> nodebot, nb, or something might be better imo
06:23 < DTrejo> you can call it npmbro
06:23 < DTrejo> npmbro install express
06:23 < npmbro> DTrejo: Please see http://github.com/visionmedia/express#readme
06:23 < DTrejo> there we go
06:24 < othiym23> npmbro be my friend
06:24 < npmbro> othiym23: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20be%20my%20friend
06:24 < othiym23> lol
06:24 < DTrejo> :)
06:24 <@maxogden> npmbro: YOU ARE ALIVE!
06:24 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`.                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
06:24 < DTrejo> wierd
06:24 < othiym23> npmbro doesn't want to be maxogden's friend
06:24 < DTrejo> that should not have printed out
06:24 < npmbro> othiym23: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20doesn
06:24 < DTrejo> I don't think
06:24 <@maxogden> npmbro install request
06:24 < npmbro> maxogden: Please see http://github.com/mikeal/request#readme
06:24 < DTrejo> weee
06:24 < DTrejo> it works
06:24 <@maxogden> npm install thispackagedoesntexist
06:24 < npmbro> maxogden: No results
06:24 <@maxogden> YESSS
06:25 < othiym23> npm install msgpack
06:25 < npmbro> othiym23: Please see https://github.com/pgriess/node-msgpack
06:25 < othiym23> suet
06:25 < DTrejo> maxogden: try npmbro credits, you will like
06:25 < AlbireoX> npm install archie
06:25 < npmbro> AlbireoX: Please see http://github.com/simplyianm/archie#readme
06:25  * maxogden say hello to npmbro in this channel! simply type `npmbro install seaport`
06:25 <@maxogden> oops
06:25 < AlbireoX> npm install npm
06:25 < npmbro> AlbireoX: Please see http://npmjs.org/
06:25 -!- maxogden changed the topic of #Node.js to: node point javascript - say hello to npmbro in this channel! simply type `npmbro install seaport`
06:25 < DTrejo> noicee
06:26 < DTrejo> I need to get it running from jit.su, right now it is running from my laptop
06:26 < AlbireoX> npm help
06:26 < npmbro> AlbireoX: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20
06:26 <@maxogden> DTrejo: oh ill change the topic back then
06:26 < AlbireoX> npmbro help
06:26 < npmbro> AlbireoX: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20
06:26 < DTrejo> no it's okay
06:26 < AlbireoX> that might need to be different
06:26 -!- maxogden changed the topic of #Node.js to: node point javascript. kinda like websphere but better
06:26 < DTrejo> there wont be any downtime, or if there is it will be a few seconds
06:26 < othiym23> HERESY
06:27 < othiym23> WEBSPHERE WAS THE BEST
06:27 < othiym23> EVER
06:27 <@maxogden> IS
06:27 < othiym23> actually, I knew I chose the correct boss when he brought me a (pretty nice, actually) JBoss schwag water bottle back from JAX
06:27 < othiym23> just to fuck with me
06:28 < othiym23> he knew how much I love me some eejaybeez
06:28 <@maxogden> haha
06:30 < sjork> asdf
06:30 < sjork>  _       _   _                    
06:30 < sjork> (_)     | | | |                   
06:30 < sjork>  _ ___  | |_| |__   ___ _ __ ___  
06:30 < sjork> | / __| | __| '_ \ / _ \ '__/ _ \ 
06:30 < sjork> | \__ \ | |_| | | |  __/ | |  __/ 
06:30 < sjork> |_|___/  \__|_| |_|\___|_|  \___| 
06:30 < sjork>                                   
06:30 < sjork>                                   
06:30 < sjork>                 ___            _ _        
06:30 < sjork>                / _ \          | (_)       
06:30 < sjork>   __ _ _ __   / /_\ \_   _  __| |_  ___   
06:30 < sjork>  / _` | '_ \  |  _  | | | |/ _` | |/ _ \  
06:30 < sjork> | (_| | | | | | | | | |_| | (_| | | (_) | 
06:30 < othiym23> hork hork
06:30 < sjork>  \__,_|_| |_| \_| |_/\__,_|\__,_|_|\___/  
06:30 < sjork>                                           
06:30 < sjork>                                           
06:30 < othiym23> blorf
06:30 < sjork>  _____                 _                         
06:30 < sjork> /  ___|               | |                        
06:30 < sjork> \ `--. _ __   ___  ___| |_ _ __ _   _ _ __ ___   
06:30 < sjork>  `--. \ '_ \ / _ \/ __| __| '__| | | | '_ ` _ \  
06:30 < sjork> /\__/ / |_) |  __/ (__| |_| |  | |_| | | | | | | 
06:30 < sjork> \____/| .__/ \___|\___|\__|_|   \__,_|_| |_| |_| 
06:30 < othiym23> flood is floody
06:30 < sjork>       | |                                        
06:31 < sjork>       |_|                                        
06:31 < sjork>   ___              _                     
06:31 < sjork>  / _ \            | |                    
06:31 < sjork> / /_\ \_ __   __ _| |_   _ _______ _ __  
06:31 < sjork> |  _  | '_ \ / _` | | | | |_  / _ \ '__| 
06:31 < sjork> | | | | | | | (_| | | |_| |/ /  __/ |    
06:31 < sjork> \_| |_/_| |_|\__,_|_|\__, /___\___|_|    
06:31 < sjork>                       __/ |              
06:31 < sjork>                      |___/               
06:31 < sjork>   __             _____                       _  
06:31 < sjork>  / _|           /  ___|                     | | 
06:31 < sjork> | |_ ___  _ __  \ `--.  ___  _   _ _ __   __| | 
06:31 < sjork> |  _/ _ \| '__|  `--. \/ _ \| | | | '_ \ / _` | 
06:31 < sjork> | || (_) | |    /\__/ / (_) | |_| | | | | (_| | 
06:31 < sjork> |_| \___/|_|    \____/ \___/ \__,_|_| |_|\__,_| 
06:31 < sjork>                                                 
06:31 < DTrejo> lol sjork
06:31 < sjork>                                                 
06:31 < othiym23> oh ffs
06:31 < sjork>  _____               _  
06:31 < sjork> /  __ \             | | 
06:31 < sjork> | /  \/ __ _ _ __ __| | 
06:31 < sjork> | |    / _` | '__/ _` | 
06:31 < sjork> | \__/\ (_| | | | (_| | 
06:31 < sjork>  \____/\__,_|_|  \__,_| 
06:31 < sjork>                         
06:31 < sjork>                         
06:31 < sjork>  _____       _               _  ___  
06:31 < sjork> |  _  |     | |             | ||__ \ 
06:31 < sjork> | | | |_   _| |_ _ __  _   _| |_  ) |
06:31 < sjork> | | | | | | | __| '_ \| | | | __|/ / 
06:31 < zomg> He was on #haskell doing that just now but promptly banned
06:31 < sjork> \ \_/ / |_| | |_| |_) | |_| | |_|_|  
06:31 < sjork>  \___/ \__,_|\__| .__/ \__,_|\__(_)  
06:31 < sjork>                 | |                  
06:31 < sjork>                 |_|                  
06:31 < DTrejo> npm search spectrum
06:31 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#spectrum
06:31 < zomg> Apparently also was on a few other channels
06:31 < othiym23> haha
06:31 < sjork> Please answer my BIG QUESTION
06:31 < AlbireoX> hep tep rog
06:31 < sjork> $nick told me to go away.
06:31 < zomg> wtf
06:31 <@maxogden> sj26: you want one written in node?
06:31 < sjork> stop fucking with my script
06:32 < sjork> http://img.afreecodec.com/screenshot/99/breakaway-audio-enhancer-606916.jpeg
06:32 < sjork> I'm looking for a free, open source, linux version of that: http://img.afreecodec.com/screenshot/99/breakaway-audio-enhancer-606916.jpeg
06:32 < zomg> sjork: piss off
06:32 < sjork> And don't say http://spek-project.org
06:32 < sjork> It's a nono
06:32 < zomg> maxogden: can you ban this guy? :P
06:32 < othiym23> sjork: http://spek-project.org
06:32 < sjork> I mean in ancient times the Egyptians used hard muscle-demanding labor to create large pyramids... and stone age people, the neanderthals, needed to burn 5000-6000 calories a day to survive
06:32 < sjork> But now people at Amazon use fork lifts, or skyscraper builders use heavy machinery
06:32 < DTrejo> sj26: sorry, we dont have one i dont think
06:32 < sjork> heavy machinery by companies like Hitachi or Kabuto or C.A.T. or whatever requires some object movement by people to make but not that of bodybuilders
06:32 < othiym23> you should check there
06:32 < sjork> But now all weight lifting is good for is police, military, or football/sports players
06:32 < sjork> Police don't really "contribute" and product to society, but it's always good pay and it's sort of needed
06:32 < sjork> Military is a waste of time and money
06:32 < sjork> And football players are like playing video games only in real life
06:32 -!- sjork was kicked from #Node.js by maxogden [sjork]
06:32 < sjork> Throwing a ball around doesn't help other people no matter how much someone is paid
06:32 < sjork> Turned into a pollen grain!  Talking about a bee turning into a nest.
06:32 < sjork> Police are mostly worthless
06:32 < sjork> Football is like a virus to the world
06:32 < sjork> What if I throw your balls around?
06:32 <@maxogden> lol
06:32 < sjork> Police don't deter crime
06:32 < sjork> They just mop up and catch the crooks
06:32 < sjork> Sometimes
06:32 < sjork> I look at the future and think: Computers will be obsolete because brain implants will replace them
06:32 < sjork> Being in shape and having the brain of a computer would mean sitting down would be wasting time.
06:32 < zomg> He must be high or something
06:32 < AlbireoX> hep tep rog
06:32 < sjork> $nick told me to go away.
06:33 < zomg> AlbireoX: wut
06:33 < sjork> yeah
06:33 < sjork> you guys
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < zomg> LOL
06:33 -!- sjork was kicked from #Node.js by maxogden [sjork]
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < othiym23> maxogden: kickban
06:33 < zomg> rofl
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < AlbireoX> npm install hepteprog
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < npmbro> AlbireoX: No results
06:33 < DTrejo> the chaos
06:33 < sjork> http://img.afreecodec.com/screenshot/99/breakaway-audio-enhancer-606916.jpeg
06:33 < zomg> AlbireoX: how did you figure that would make him leave? lol
06:33 < sjork> TELL ME WHERE TO GET A FREE VERSION OF THAT
06:33 < zomg> hep tep rog
06:33 < sjork> $nick told me to go away.
06:33 < AlbireoX> zomg: ruby
06:33 < AlbireoX> #ruby
06:33 < zomg> Oh?
06:33 < zomg> He was there spamming as well?
06:34 < AlbireoX> yep
06:34 < Lorentz> what was he asking anyway
06:34 <@maxogden> im guessing it was a generic software question script
06:34 < zomg> Lorentz: didn't make any sense if he was just spamming or asking...
06:34 < othiym23> so uh anyway now that everyone's awake, is there a good reference to D3 out there for server-side nerds?
06:34 <@maxogden> othiym23: d3 has a steep learning curve but basically its just javascript for svg
06:35 <@maxogden> othiym23: so go learn about svg first and then d3 will make more sense
06:35 < othiym23> I'm doing a lil thing with it and having a little trouble trying to figure out how to get it to act as a view for a model getting updated from socket.io
06:35 < othiym23> maxogden: the SVG=y parts are making sense to me, for what I need at least
06:35 < othiym23> no starburst diagrams for me -- for now
06:36 < othiym23> I have the initial draw stuff figured out, it's just the redraw
06:36 < othiym23> anyway, that's a question for ##javascript I guess
06:36 < othiym23> carry on
06:36 < DTrejo> npm search d3
06:36 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#d3
06:36 < AlbireoX> nice bot
06:36 < DTrejo> ty :)
06:37 < DTrejo> I finished it just earlier today
06:38 < othiym23> also, while I'm asking random questions, does anyone know of any extensions for Chrome that would make websockets fail?
06:38 < othiym23> I have a dirt-simple socket.io server running on localhost
06:38 < othiym23> works fine on my work laptop (more or less stock Chrome 20)
06:39 < othiym23> works fine on my home laptop with Chrome Canary
06:39 < othiym23> xhr-polls with regular release-channel Chrome 20 on my home laptop
06:39 < othiym23> I've run into this before, but at the time I was content to just blame it on nginx cuz why not
06:43 < owen1> when i write setTimeout, is the function i pass is added the the queue that the event loop listen to?
06:44 < owen1> i want to demoanstrate the non blocking aspect of node by hitting my hello world server a few times and having setTimeout there.
06:45 < othiym23> owen1: the function gets put on the event loop when the timer expires
06:45 < SubStack> it puts the function in the arguments list
06:54 <@maxogden> npm search pizza
06:54 < npmbro> maxogden: Please see http://eirikb.github.com/nipster/#pizza
06:54 <@maxogden> aww pizza is just a package.json, theres no code
06:59 < te-brian> just leveled up by using jquery deferreds .. feels kinda good ;)
06:59 < te-brian> for socket.io connection events
06:59 < lohkey> we took it the other way at my previous job
07:00 < lohkey> we went from using deferreds/promises in the browser, to implementing node.js continuation passing in the browser for everything in the browser
07:01 < te-brian> lohkey: yeah.. in general I have always done continuations
07:02 < te-brian> lohkey: fwiw here is my masterpiece :) https://gist.github.com/d432b7c097f921421c93
07:02 < te-brian> lohkey: was running into race conditions where I couldn't catch the connect event in time
07:02 < lohkey> The only complaint i have about deferreds/promises is you get awkward cyclomatic complexity out of them
07:02 < te-brian> lohkey: becuase I am doing AMD loading
07:03 < EhevuTov> $ehevutov:~/mabelly: npm i pizza
07:04 < te-brian> lohkey: added usage example.. heh.. just one of those things that I'm happy to have wrapped my head around
07:24 < jesusabdullah> npm all the things
07:24 < npmbro> jesusabdullah: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20all%20the%20things
07:24 < jesusabdullah> npm
07:24 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`.                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
07:24 < jesusabdullah> npm search browserify
07:24 < npmbro> jesusabdullah: Please see http://eirikb.github.com/nipster/#browserify
07:25 < jesusabdullah> I see. THANKS NPMBRO
07:26 < jesusabdullah> npmbro: shouldn't you be... dead? D:
07:26 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`.                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
07:26 < SubStack> having some crazy ideas here about "frameworks"
07:26 < jesusabdullah> figures
07:28 -!- maxogden changed the topic of #Node.js to: node point javascript - say hello to npmbro in this channel! simply type things like `npm install seaport`
07:28 < SubStack> jesusabdullah: with this idea you can still use express or derby or towerjs or flatiron or geddy or whatever the kids are using these days
07:28 < jesusabdullah> sure
07:28 < DTrejo> i use the toddler.js
07:28  * DTrejo ZzzzZzzz sleeping
07:28 < Industrial> DTrejo: url? :E
07:28 < SubStack> jesusabdullah: it's pretty much just how testling and browserling are structured, but for the masses
07:29 < jesusabdullah> sure
07:29 < SubStack> I can just take the bouncer for browserling and spin it out into its own module
07:32 < [AD]Turbo> hi there
07:36 < EhevuTov> npmbro hi
07:36 < npmbro> EhevuTov: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20hi
07:37 < EhevuTov> but that's not npm's documentation
07:37 < jesusabdullah> open the link
07:38 < jesusabdullah> npm
07:38 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`.                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
07:38 < jesusabdullah> npm search browserify
07:38 < npmbro> jesusabdullah: Please see http://eirikb.github.com/nipster/#browserify
07:38 < SubStack> whoa
07:38 < owen1> how to display a variable in the debugger? i have 2 lines app: var i = 1; debugger;  i run it with 'node debug test.js' and hit n(next). i => i is not defined.   any ideas?
07:38 < SubStack> npmbro: help
07:38 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`.                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
07:39 < EhevuTov> npm search node-fort
07:39 < npmbro> EhevuTov: Please see http://eirikb.github.com/nipster/#node-fort
07:40 < owen1> othiym23: thanks! so it's similar to http calls or db calls. using the event loop.
07:41 < DTrejo> npm docs fort
07:41 < npmbro> DTrejo: Please see https://github.com/substack/node-fort
07:41 < jesusabdullah> npm docs flatiron
07:41 < npmbro> jesusabdullah: Please see http://github.com/flatiron/flatiron#readme
07:41 < jesusabdullah> neat
07:42 < jesusabdullah> npm docs ecstatic
07:42 < npmbro> jesusabdullah: Please see https://github.com/jesusabdullah/node-ecstatic
07:42 < jesusabdullah> hell yeah
07:42 < DTrejo> :)
07:42 < SubStack> npm xmas
07:42 < npmbro> SubStack: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20xmas
07:42 < DTrejo> dangit
07:42 < DTrejo> I thought of implementing that
07:42 < DTrejo> but then I didn't
07:42 < DTrejo> will put it on TODO
07:43 < jesusabdullah> XD
07:54 < othiym23> my computer had a Christmas tree in it all this time and I didn't even know
08:22 < livinded> of all the node versions managers are any clearly better than the others?
08:23 < SubStack> livinded: I've been using nave pretty adequately
08:24 < SubStack> isaacs uses it to develop node so it'll probably be more actively maintained than most
08:24 < SubStack> if you're on windows I saw a version manager for that recently too
08:24 < livinded> on linux, bsd, and os x
08:25 < livinded> I'll look into nave. Just wish of macport's crappy packages and have the need for multiple versions now
08:25 < livinded> sick*
08:56 < flexd> So, hum.
08:57 < flexd> Not sure if this is mostly a express.js question or not, asking here anyway: 
08:57 < flexd> I am trying to use req.params.id (for a request /monitors/show/:id), but I just get a reference error: attributes is not defined  from inside underscore.js :/
08:58 < flexd> Hm, this might actuallyu have something to do with sequelize, just odd that it does not work when I do req.params.id, but if I just put 1 there (as in id=1) it works perfectly fine.
09:38 < flexd> livinded: why are you using macports when homebrew exists?
09:39 < flexd> I am using nvm which seems nice.
09:40 < jarr0dsz> im building a prototype with juggernaut ( node.js ) to send data to client subscribed channels but i still havent found a way to detect if a "send data" has worked
09:40 < jarr0dsz> can i with node somehow check if a  data message is delivered?
09:40 < jarr0dsz> or have it automatic resend instantly if its not delivered?
09:40 < ljharb> juggernaut?
09:40 <@Nexxy> what's a juggernaut?
09:41 < ljharb> the one referenced in http://blog.alexmaccaw.com/killing-a-library that's no longer supported as of today?
09:41 < jarr0dsz> juggernaut is ruby on rails implementation of node.js and websockets. its bsically a wrapper so to say
09:41 <@Nexxy> el oh el
09:41 < ljharb> that particular article points out why juggernaut is 100% unnecessary. it's written by the author.
09:41 <@Nexxy> \o/
09:41 < jarr0dsz> i have also tried a demo of sockets.io but that also does not do what i want exactly
09:41 < jarr0dsz> ah it is
09:42 < jarr0dsz> ah well. Nexxy thats the best thing to overcome me today that you send me that message
09:42 < jarr0dsz> i mean you tell me about that blog post
09:42 <@Nexxy> jarr0dsz, that was ljharb 
09:42 <@Nexxy> I just laughed at you ;P
09:42 < ljharb> lol
09:43 <@Nexxy> usually he's the one laughing
09:43 <@Nexxy> so this is a nice change
09:43 < jarr0dsz> ah sorry ;) * hails at ljharb
09:43 < ljharb> np
09:44 < strk> TypeError: Object.keys called on non-object <--- could these be turned into exceptions? 
09:46 < ljharb> what? why would you want them to be
09:46 < jarr0dsz> ljharb: you have expierience with the juggernaut replacement? im looking at the code samples now
09:46 < jarr0dsz> ljharb: seems its sinatra/ rails only? or could one integrate this easily in a ruby on rails app also?
09:47 < jarr0dsz> quite interesting though indeed another dependancy down the drain
09:47 < flexd> Why not use socket.io if you are using node?
09:47 < ljharb> i have no experience with it
09:47 < ljharb> and yes you should be using sockets with node
09:48 <@Nexxy> ever since nodeconf I can't say socket.io or long polling w/o a conquistador accent.
09:48 < SubStack> strum a guitar every time you say it
09:48 < flexd> I have been playing with socket.io recently, its very simple and very nice.
09:49 <@Nexxy> I want to.
09:49 < `3rdEden> socket.io all the things
09:49 < pneftali> carapace, drones.. too much sc2'ng ? =)
09:49 < flexd> Stuck on this silly bug now :/
09:49 <@Nexxy> too much? or just enough?
09:49 < SubStack> good reason to not use socket.io: streaming all the things
09:49 < SubStack> otherwise it's good for things
09:50 < `3rdEden> it's like 10 lines of code to build a stream interface on top of socket.io
09:50 <@Nexxy> I do have to say
09:50 <@Nexxy> after the dnode rewrite
09:50 < flexd> Hm, I think this is actually a sequelize bug :/
09:50 <@Nexxy> the components of my apps that I've written since
09:50 <@Nexxy> have been much smaller
09:50 <@Nexxy> streaming is nice
09:51 < flexd> Group.find(parseInt(req.params.id)).success(function (group) adding the parseInt() fixed the bug..
09:51 < flexd> Odd
09:51 <@Nexxy> and they say ORMs are an antipattern
09:51 < pneftali> don't get me wrong, i love the names. 
09:54 < SubStack> Nexxy: oh excellent
09:54 < SubStack> I was worrying a bit that the dnode changes wouldn't go over so well
09:54 < SubStack> they felt pretty necessary though
10:08 <@Nexxy> SubStack, at first I was like ._.
10:08 <@Nexxy> SubStack, but now I'm all like :D
10:12 < SubStack> I think the coolest part is how you can use dnode with any stream
10:12 < SubStack> or you can even pack an rpc channel in with other streams using mux-demux
10:12 < SubStack> blame dominictarr for the streaming idea
10:14 < flexd> I haven't really wrapped my head around what dnode is yet, got a quick explaination/example as to why one would need it? :p
10:14 < flexd> Me asking this means I do not need it right now. 
10:14 < SubStack> you can call remotely defined functions with it
10:14 < SubStack> and callbacks just work
10:15 < zomg> I guess it would be useful for splitting processing or such between processes or servers
10:15 < SubStack> yep!
10:15 < SubStack> and as a consequence you can write tinier apps
10:17 < flexd> Yeah I guess.. I just haven't really seen the benefit of it yet
10:18 < SubStack> big apps are pretty universally terrible
10:18 < SubStack> anything you can do to keep the size down helps I think
10:18 < standoo> big apps are terrible?
10:18 < SubStack> yes
10:18 < standoo> hmm, separate into smaller apps?
10:18 < SubStack> it's like a universal truth about reality or something
10:18 < SubStack> standoo: yep
10:19 < standoo> i'm building a cms based no node
10:19 < flexd> Hm, entirely different question:
10:19 < SubStack> split stuff up into subservices and modules
10:19 < flexd> What do you think about a server monitoring system (ala. nagios) made in node? :p
10:19 < standoo> SubStack: that's simple enough i guess
10:20 < jarr0dsz> ljharb: so im looking at the sample codes but im not seeing how i could move this to ror code
10:20 < flexd> Currently making something that's fetching server info and stuff from zabbix and doing some visual presentation of that, but I am starting to dislike zabbix -_
10:20 < ljharb> jarr0dsz: i'd be using sockets with node myself, so i'm not able to help you. all i did was point out that the blog post.
10:21 < jarr0dsz> you use node in a webapp of some sort ? i think i could use node.js standalone but i need some autentication
10:21 < jarr0dsz> so not anyone can mess around with the js and can do antyhing
10:25 < ljharb> node.js is the web server.
10:33 < flexd> I feel like I am missing half the conversation here.. or you guys are just having a very confusing conversation :p
10:59 < burg> hello. what is the difference between node 0.6.20 and node 0.8.2 ? i see that both have been released recently, and i don`t understand why to release 0.6.20 in the same time as 0.8.2
11:01 < aliem> burg: read the blog posts about it http://blog.nodejs.org/ (0.6.20 is a maintenance release)
11:05 < jetienne> 0.7 is dev branch ?
11:34 < jetienne> anybody knows a good generator for jsdoc ? something more modern that the usual jsdoc on google doc 
11:50 < gigo1980> hi all is ther an faster way to add something to the end of an array then array.push() ?
11:51 < deoxxa> gigo1980: not really - in what case is it slow?
11:52 < mmalecki> yeah its the fastest way
11:52 < ootje> not that i know how arrays are handled internally, but a linked list might be faster?
11:53 < deoxxa> ootje: i'd put money on an array being faster in nearly all cases
11:53 < mmalecki> ootje: due to internal architecture of v8 linked lists implemented in js might be slower
11:53 < mmalecki> actually, listen to doki_pen 
11:53 < mmalecki> e
11:53 < mmalecki> deoxxa: 
11:53 < mmalecki> he's not drunk
11:54 < deoxxa> this is correct
11:54 < ootje> deoxxa: how so? that depends on the implementation of the array structure.. a linked list will typically be a  "list.tail.next = linkedlistref(newitem)" etc
11:54 < ootje> + of course list.tail = new blah
11:54 < ootje> (well i scrweed up but you get the point)
11:54 < deoxxa> ootje: i'm assuming the linked list is pure js
11:55 < mmalecki> ootje: linked list in pure js vs c++ implementation of array in v8
11:55 < mmalecki> it's like, kind of clear
11:55 < ootje> mmalecki: right, ok. then that probably answers it
11:55 < deoxxa> the only time i could see it being faster is if you're doing a lot of splice()ing
11:58 < gigo1980> i have a big csv file an will create some json objects that i can push to mongo
11:58 < gigo1980> and some objects can have 30.000 arrayvalues
11:58 < deoxxa> gigo1980: you know there's mongoimport, right?
11:58 < gigo1980> and my applikation take 40 seconfs for an 200 mb csv file
11:59 < gigo1980> i have to transform the csv ;)
11:59 < ootje> deoxxa: well a linked list has memory overhead also, in that wrapper records need to be held in addition to the data
11:59 < ootje> (which is probably true for a good array implementation also :P)
12:01 < deoxxa> i really need to get off my arse and learn about backbone.js
12:19 < gigo1980> what is the fastest lib way to process csv?
12:19 < mmalecki> npm install seaport
12:19 < npmbro> mmalecki: Please see http://github.com/substack/seaport#readme
12:19 < mmalecki> nice.
12:21 < mmalecki> npm i seaport
12:21 < npmbro> mmalecki: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20i%20seaport
12:21 < mmalecki> lol.
13:04 < darrenlooby> Hello all
13:05 < radiodario> hai
13:06 < darrenlooby> I've created two node.js instances. One listen for events from another program (got that working) performs minimal processing and then forward to the other - the intention is to do this with Curl... but, it seems that request is what I should be using.
13:07 < darrenlooby> Question is... how do I make it into a module, such that I can do something like send(data) assuming I have the data to put in it, and all other settings for the connection such as method and URL are static...?
13:07 < RLa> you can use raw http module too
13:09 < RLa> export send function, i guess you can put method and url as export properties too
13:11 < darrenlooby> I'm a bit of a n00b, so I'm not sure how to structure it
13:14 < RLa> http://nodejs.org/api/modules.html
13:14 < RLa> this is how modules work
13:16 < darrenlooby> Yea, I've made a couple - I'm just not sure what to expose to export with respect to what I'm trying to achieve
13:19 < upb> http://blog.nodejs.org/2011/05/21/node-v0-4-8/ <- what do the numbers here reference
13:19 < upb> for example 836 Agent socket errors bubble up to req only if req exists
13:20 < upb> there's no pull request 836 on joyent/nodejs github
13:20 < RLa> aren't those issue numbers?
13:21 < AndreasMadsen> npm install seaport
13:21 < npmbro> AndreasMadsen: Please see http://github.com/substack/seaport#readme
13:21 < yawnt> HEY mAritz 
13:21 < spionHL> does learnboost up set some kind of environment variable? it would be useful to check if a server app is run by up or standalone
13:21 < AndreasMadsen> npm install domstream
13:21 < npmbro> AndreasMadsen: Please see http://github.com/AndreasMadsen/domstream#readme
13:22 < upb> RLa: indeed they are, thx :)
13:22 < AndreasMadsen> oh, well, that's cool
13:22 < mmalecki> upb: https://github.com/joyent/node/issues/836
13:23 < upb> yeah
13:23 < mmalecki> not a pull but includes a commit
13:27 < mAritz> HEY yawnt
13:28 < mAritz> found a name? :D
14:04 < owen1> where is the path of the glabal npm packages on a mac?
14:05 < gigo1980> is there something like an profiler for applikations ?
14:05 < gigo1980> i will know which parts of my applikations are slow
14:08 < drey> owen1: /usr/local/bin I think
14:09 < owen1> drey: npm list shows empty when i am there.
14:09 < drey> mine happen to be in there apparently, but I don't trust my npm setup
14:09 < owen1> i use nvm, btw
14:15 < theblackbox> seriously, genuinely, very impressed node.js
14:24 < jfroma> hi
14:25 < jfroma> I have a problem in one Win7 machine, npm and node seems to be on the path (node -v 0.6.19, npm -v 1.1.24)... When installing a package which has an install script like "node install.js, is like npm cant execute node...
14:26 < jfroma> CreateProcessW: The system cannot find the file specified. npm ERR! ws@0.4.20 install: `node install.js`
14:26 < jfroma> npm ERR! `cmd "/c" "node install.js"` failed with 127
14:26 < jfroma> npm ERR!
14:26 < jfroma> npm ERR! Failed at the ws@0.4.20 install script.
14:37 < CIA-93> node: Ben Noordhuis v0.8 * r202df30 / (common.gypi configure deps/v8/build/common.gypi): build: disable unsafe optimizations - http://git.io/NP-lHA
14:37 < CIA-93> node: Ben Noordhuis v0.8 * rc6bb361 / configure : build: partially fix configure on ARM - http://git.io/3baXlQ
14:37 < drudge\work> npm install request
14:41 < Phoenixz> How would I get the full request URL on express from the req. object?
15:28 < doki_pen> is there a way to control where gyp's working directory is?
15:28 < doki_pen> looks like it's using HOME?
15:37 < dob_> I am looking for a cheap hosting provider for node which offers me mongodb and redis support.
15:38 < AviMarcus> dob_, are you OK with your own system? if you want cheap there's VPSs for $3-$10/month that give you full control
15:38 < AviMarcus> and full responsibility to set up and maintain
15:39 < AviMarcus> (and dubious hardware, network connectivity, and business financial viability)
15:39 < dob_> AviMarcus: Yeah I have a few own root servers, but hoped to find something for a small project.
15:39 < AviMarcus> you can try finding something for $5/month on lowendbox.com
15:40 < AviMarcus> dunno if this is still active: http://www.lowendbox.com/blog/chicagovps-7month-2gb-openvz-vps-in-buffalo-ny-and-chicago-il-usa/
15:41 < AviMarcus> or maybe http://www.lowendbox.com/blog/yourdomaingoeshere-45year-768mb-openvz-vps-in-dallas-usa/
15:41 < AviMarcus> everything else on first two pages has tiny ram allocations
15:43 < chimeracoder> I don't know if this is a problem with Selenium or Soda, but should I have to manually wait between .open('/foo') and .assertTitle('Foo')?
15:43 < dob_> AviMarcus: Thank u I will have a look
15:45 < MartinCleaver> Is there a cookie-aware httpclient library for node.js?
15:45 < TimeTurner_> AviMarcus: are those real deals? Seem too good to be true lol
15:45 < prettyrobots> request
15:45 < prettyrobots> MartinCleaver: request
15:45 < jcrew> doesn't request do cookies
15:45 < prettyrobots> https://github.com/mikeal/request
15:46 < MartinCleaver> thanks a lot
15:46  * MartinCleaver should have asked here first
15:46 < upb> before implementing your own?
15:46  * MartinCleaver leaves a stream of pointers to back from the deadens he found
15:46 < MartinCleaver> no (not /that/ stupid :P) 
15:46 < MartinCleaver> thanks guys
15:49 < JacquesBH> Hi guys
15:49 <@isaacs> ircretary: tell Mikeal I'm seeing a lot of duplicate posts on http://planetnodejs.com/. Maybe wordpress or tumblr reblogs?
15:49 < ircretary> isaacs: I'll be sure to tell mikeal
15:49 < JacquesBH> I need to develop stuff in node js
15:49 < JacquesBH> do you have tutos (best practices...) for that ?
15:51 < JacquesBH> guys, no tutos for me ? :(
15:51 < JacquesBH> I know I can search on google
15:52 < JacquesBH> but I think I will found bad tutos
15:52 < JacquesBH> maybe not
15:52 < JacquesBH> but if someone is a good dev, I think you can give me some best practices ?  I'm magento developer... not nodejs :(
15:56 < AviMarcus> dob_, yw
15:57 < AviMarcus> TimeTurner_, yes, I've gotten several of them... just beware. e.g. there's post with deadpools of places that closed up. So if you just want a server to mess with... that's great. for production I'd vet them a bit more. And be very wary about paying yearly.
15:59 < qFox> is the json pretty printing broken in 6.19? stringify(obj,null,'    ') doesnt prettify. numbers dont work there either. i'm a bit lost
16:00 < version2beta> JacquesBH, I may not be far beyond you. I listen to each episode of NodeUp (thanks guys!) and have been working with various frameworks for experience. My current favorite is Tako - https://github.com/mikeal/tako. 
16:02 < qFox> also, the docs at http://nodemanual.org/latest/js_doc/JSON.html#JSON.stringify seem to wrongly state that the value argument to stringify should be a String.
16:02 < version2beta> JacquesBH, beyond that, http://howtonode.org/ seems solid to me, and I try to study creationix's code. (Thank you creationix!)
16:03 < creationix> :)
16:04 < qFox> hah, classic. parameters in wrong parens.
16:04 < qFox> so nevermind that. the documentation glitch is still valid
16:04 < creationix> qFox, could you file an issue against nodemanual
16:05 < qFox> tracker linky?
16:05 < creationix> qFox, https://github.com/c9/nodemanual.org
16:05 < qbit_> so i have an internal npm repository ( that is now in sycn after a long while ) .. i can install from it just fine.. but when i go to adduser .. i get a 404 for 'registry'
16:05 < qbit_> any ideas? 
16:05 < creationix> nodemanual is done by us at cloud9
16:05 < version2beta> JacquesBH, also there is http://www.planetnodejs.com/ which seems very comprehensive, especially in the blogroll. I'm not sure who to thank for that, maybe Mikeal?
16:06 < qFox> creationix: #12
16:07 < JacquesBH> thks qFox and version2beta 
16:07 < qFox> creationix: figured so much, since the repo is c9'ed :p
16:07 < qFox> cheers & bai
16:08 < TrahDivad_> Somebody using Mocha knows if there is way to make some code run before all tests? I want to use it to open a connection to the test database, instead of doing it in the before for each test suite.
16:08 < version2beta> JacquesBH, I should have mentioned that Tako is also by Mikael Rogers - totally worth reading his code, and that could keep anyone busy for a long time.
16:08 < tjholowaychuk> TrahDivad_ use before(callback) but outside of any describe()s
16:08 < tjholowaychuk> (if you're using the bdd ui)
16:09 < TrahDivad_> tjholowaychuk: I'm using the BDD ui. But what if my tests are in separate files?
16:09 < tjholowaychuk> doesn't matter, there's a "root" suite
16:09 < tjholowaychuk> named ""
16:09 < version2beta> (Is there another contributor to Tako? Max Ogden maybe? I don't want to misplace credit - it's important to me to not only know the code I'm using but also who know who to thank.)
16:09 < TrahDivad_> tjholowaychuk: cool! and thx for mocha btw :p
16:10 < JacquesBH> I will come back guys :) thanks a lot version2beta ;)
16:10 < tjholowaychuk> TrahDivad_ np, had to get rid of my hideous expresso hack haha
16:14 < TrahDivad_> tjholowaychuk: btw, will express 3 soon come out of beta? couldn't find a deadline mentionned
16:14 < tjholowaychuk> TrahDivad_: when I finish the docs, I'm almost done, I dont like my lame new design but it'll do for now
16:15 < qbit_> oh .. i can't search either 
16:15 < qbit_> eff
16:15 < TrahDivad_> tjholowaychuk: what design you talking about? 3.0 API design?
16:15 < tjholowaychuk> TrahDivad_ just for the site
16:15 < TrahDivad_> tjholowaychuk: ah ok ^^ looking forward to it
16:17 < hatch> hey guys/gals is there anywhere that offers managed node.js & mongo hosting in the same location?
16:17 < Deathspike> Is there an alternative to jsdom to scrape external html pages? I used super-agent to fetch the html but processing it.. do I really need an external lib for this (js does have a dom, doesnt it)? Problem of jsdom is mainly that it doesnt play well on windows.
16:19 < owen1> how to use the watch feature of the dubegger
16:19 < owen1> ?
16:23 < bradleymeck> Deathspike: JS does not have a DOM, DOM is a standard for multiple Languages, ppl just associate it with JS because of browsers
16:27 < timoxley> Deathspike `npm search scrape spider`
16:27 < timoxley> Deathspike `npm search dom`
16:33 < Deathspike> timoxley: I don't see anything related like that.
16:33 < sriley> Deathspike: take a look at cheerio
16:34 < iso1> hello
16:34 < iso1> has anyone heard of a project called bitcoin to create a new type of money?
16:34 < Deathspike> sriley: That looks great, thanks!
16:36 < bradleymeck> iso1 yes
16:37 < iso1> oh
16:37 < iso1> whats the general opinion of it?
16:37 < bradleymeck> difficult to make money generating bitcoins, so the only use of them is exchange in my opinion.
16:38 < CIA-93> node: Ben Noordhuis v0.8 * r5d97d72 / lib/net.js : net: fix bogus errno reporting - http://git.io/DTpjHQ
16:38 < CIA-93> node: Ben Noordhuis v0.8 * r3a6314d / (3 files in 3 dirs): net: fix net.Server.listen({fd:x}) error reporting - http://git.io/JiO37A
16:38 < motiooon_> is there any way to convert a base64 string to a buffer ?
16:38 < iso1> bradleymeck: does it work any good for exchange?
16:39 < Deathspike> sriley: Just tried a few and it is working splendidly, so thank you for the recommendation. Also, no weird issues whatsoever on Windows :D
16:47 < mikeal> isaacs: this planet bug is crazy
16:47 < mikeal> no idea why this is happening
16:52 < Deathspike> Any way to select elements in jQuery/cheerio that have a particular content (like in XPATH, //span[text() = 'Type'])?
16:53 < version2beta> Can anyone recommend a Node.js-compatible template engine that offers template inheritance? Django's templating engine or my favorite, Jinja2 in Python, are a couple examples.
17:11 < timoxley> version2beta https://github.com/visionmedia/jade/#a11
17:11 < motiooon_> does anybody know what type of encoding this data has ? : https://gist.github.com/3099416
17:13 < insin> some sensible bits appear if you decode it as base64
17:14 < motiooon_> insin: what do you mean ?
17:14 < motiooon_> so it's a base 64 string ?
17:14 < insin> just called window.atob on it and there were some intelligible bits, is it mixed?
17:15 < insin> xmp:CreatorTool="Adobe Photoshop CS2 Windows" xmp:CreateDate="2010-01-12T11:08:00+01:00" xmp:MetadataDate="2012-07-03T11:32:18-04:00" xmp:Label="Review" dc:format="image/jpeg"
17:15 < timoxley> motiooon_ yeah it's base 64
17:16 < motiooon_> so if I want to store it in a database that accepts binary or buffer what should I do with it ?
17:16 < timoxley> motiooon_ why store in db not as file
17:16 < motiooon_> what do you mean ?
17:17 < motiooon_> it should be a jpg 
17:17 < insin> paste it into you r browser's address bar with this tacked onto the front: data:image/jpg;base64,
17:17 < insin> it's a 150x99 jpg
17:18 < timoxley> motiooon_ why not just save it to a file and store reference to file in db
17:18 < motiooon_> I have to store it with a storage service
17:18 < motiooon_> that I can only access it trough http
17:18 < timoxley> how about S3?
17:18 < timoxley> oh a specific one
17:19 < motiooon_> yes, and if I post with a body of that base 64 string when I try to open the file from my computer it doesn't work
17:19 < motiooon_> the storage service receives binary or buffer/stream
17:19 < insin> version2beta: I'd recommend jade too, but there are a bunch of ports of Django/Jinja templates too
17:20 < motiooon_> and I have a base 64 string
17:20 < tjholowaychuk> version2beta check out swig / jazz / dust
17:20 < tjholowaychuk> version2beta https://github.com/visionmedia/consolidate.js
17:20 < tjholowaychuk> there's a list on there
17:21 < insin> node-ginger and plate too
17:21 < motiooon_> timoxley: the storage service receives binary or buffer/stream and I have a base 64 string
17:27 < timoxley> motiooon_ convert to binary buffer then send? 
17:28 < timoxley> motiooon_ this should get you started http://stackoverflow.com/questions/6926016/nodejs-saving-a-base64-encoded-image-to-disk
17:36 < motiooon_> timoxley: thanks
17:41 < Xeon06_> Hey guys
17:41 < Xeon06_> I'm trying to make a simple HTTP get request and get the response status code. Here is my code http://pastebin.com/ymLTuFhW
17:41 < Xeon06_> Whenever I try to run that, I get a "Error: connect EADDRNOTAVAIL"
17:42 < TrahDivad_> aheckmann: hi! are you the maintainer of express-mongoose?
17:42 < Xeon06_> I'm using node v0.6.3 on Win7
17:42 < Xeon06_> Does anyone know what's up with that?
17:43 < aheckmann> TrahDivad_: sort of. i initially wrote it but don't have direct access to it anymore. whats up?
17:46 < TrahDivad_> aheckmann: is it normal that if 'res.send' is given an object, it only runs the queries of it's direct values, and not sub-values?
17:47 < TrahDivad_> I'd like to give send an object like this: { objects: query, metadata: { count: query, offset: 0, limit: 10 } }
17:47 < TrahDivad_> Currently, metadata.count's query is not executed
17:47 < aheckmann> TrahDivad_: yes its by design
17:47 < aheckmann> TrahDivad_: we never added recursion
17:48 < aheckmann> TrahDivad_: send em a pull request. would be useful 
17:48 < TrahDivad_> aheckmann: how would you recommend I get my example working? Is there a solution without hacking express-mongoose?
17:48 < aheckmann> TrahDivad_: you have to manually run your query and wait to send the response until after it returns
17:49 < insin> js> 0.1 + 0.2
17:49 < purr> insin: (number) 0.30000000000000004
17:49 < insin> js> (0.1 + 0.2).toFixed(2)
17:49 < purr> insin: (string) '0.30'
17:52 < smartPudding> Xeon06_: mmmh, you don't seem to create a loop what's your terminal output when you run the app ?
17:53 < smartPudding> Xeon06_ Oh, are you trying to reach another server ?
17:53 < Xeon06_> smartPudding: I just want to make a GET request to a web page on another server. Not sure about your first question
17:54 < DTrejo> js> process.version
17:54 < purr> DTrejo: ReferenceError: process is not defined
17:54 < DTrejo> purr
17:54 < DTrejo> js> console.log(global)
17:54 < purr> DTrejo: ReferenceError: global is not defined
17:54 < qbit_> isaacs: where does one get $rev for this npmjs.org:push.sh script? "-H destination:'_design/app?rev=$rev'" 
17:57 < Xeon06_> smartPudding: I updated node to latest and it seems to work... thanks for your help!
17:58 < smartPudding> Xeon06_ : yep, i was gonna tell you it works perfectly on my OS X install of 0.8.x
17:58 < Xeon06_> smartPudding: odd
18:00 < smartPudding> Xeon06_ : At work (on 7) I prefer to run all my servers on a Virtual Machine, I usually get less problems
18:02 < Xeon06_> smartPudding: Haha yeah, probably. It's actually installed on the Ubuntu VM I use to develop, but for some reason I wanted to run it from my desktop
18:06 < adamramadhan> hello anyone knows why  console.log(new RegExp('/\b[a-zA-Z0-9]+\b/').test('Word')); fails?
18:06 < scott_gonzalez> isaacs: Should there be an entry in my PATH for globally installed modules or is npm supposed to put the binaries somewhere that's already in my PATH?
18:06 <@isaacs> scott_gonzalez: npm puts globally installed binaries somewhere that's likely to already be in your path, yes
18:07 <@isaacs> scott_gonzalez: check it with `npm bin -g`
18:07 < insin> adambrault: because of the forward slashes
18:07 < TrahDivad_> aheckmann: sorry, late reply. Thanks!
18:07 < insin> they're only for RegExp literals
18:07 <@isaacs> qbit_: from the /registry/_design/app
18:07 < insin> js> /\b[a-zA-Z0-9]+\b/.test('Word')
18:07 < purr> insin: (boolean) true
18:07 < qbit_> isaacs: thanks
18:07 < adamramadhan> insin: ah i see
18:08 < scott_gonzalez> isaacs: `npm bin -g` reports /usr/bin, but I just ran `npm install -g shelljs` and the shjs bin is not there.
18:08 <@isaacs> qbit_: I usually do this:  -H destination:'_design/app?rev='$(curl https://isaacs.iriscouch.com/registry/_design/app | json _rev)
18:08 <@isaacs> qbit_: `npm install jsontool` first
18:08 < Guest55349> http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   http://41.228.201.210:80/   
18:08 < scott_gonzalez> isaacs: Though I am running npm 1.1.0-3.
18:08 <@isaacs> scott_gonzalez: yeah, try upgrading to something a little less beta
18:09 <@isaacs> scott_gonzalez: like 1.1.30-something that comes with 0.6.20 or 0.8.2
18:09 < scott_gonzalez> When I get home I'll try on my other laptop which is more up to date and let you know if I'm having problems there.
18:09 <@isaacs> scott_gonzalez: or check out and make install
18:09 <@isaacs> kewl
18:09 < scott_gonzalez> I'll just link it for now.
18:09 <@isaacs> adamramadhan: you need to double-escape.
18:10 <@isaacs> adamramadhan: > console.log(new RegExp('\\b[a-zA-Z0-9]+\\b').test('Word'))
18:10 <@isaacs> true
18:10 < adamramadhan> insin: btw is that a javascript behaveor reading /regex/ as regex or its nodes ?
18:10 <@isaacs> adamramadhan: also, you don't use / in new RegEXp strings
18:11 < adamramadhan> ahh i see
18:11 < scott_gonzalez> isaacs: Nevermind; shelljs changed the name of the bin...
18:11 < qbit_> isaacs: k, any idea why i would get this: 
18:11 < qbit_> npm http GET http://localhost:5984/registry/_design/app/-/all
18:11 < npmbro> qbit_: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20http%20GET%20http
18:11 < qbit_> npm http 404 http://localhost:5984/registry/_design/app/-/all
18:11 < npmbro> qbit_: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20http%20404%20http
18:11 < qbit_> lal
18:12 <@isaacs> qbit_: the regsitry url should not be the design doc, it should be the rewrite
18:12 < insin> adamramadhan: : it's part of the ECMA spec
18:12 <@isaacs> qbit_: npm config set registry http://localhost:5984/registry/_design/app/_rewrite/
18:12 < adamramadhan> insin: thanks!
18:13 < qbit_> isaacs: lol, thanks :P sorry about my confusion 
18:13 <@isaacs> qbit_: np
18:14 < motiooon_> what type of encoding is this? https://gist.github.com/3099844
18:15 < motiooon_> is it binary ?
18:16 < iapain> isaacs: https://github.com/joyent/node/pull/3696 is that what you intended for #3668?
18:16 <@isaacs> iapain: yah, that's in my open tabs to review.
18:16 <@isaacs> iapain: i'll take a look at it soon
18:17 < iapain> isaacs: thx. i left somethings for you. Let me know if you need some improvements.
18:18 < austinbv> does repl not allow you to override Native objects like date
18:18 < aheckmann> TrahDivad_: anytime
18:18 < prettyrobots> austinbv: Override?
18:18 < prettyrobots> You mean function Date() {}?
18:19 < triple_des> can someone tell me if there is a way to create a timer on the fly in Node? 
18:19 < prettyrobots> austinbv: I was just able to replace Date with that no-op function, so REPL does, yes. austinbv 
18:19 < prettyrobots> Replace good.
18:23 < triple_des> why are u guys such twats
18:24 < robbe_> triple_des, setTimeout(function() {alert("done");}, 1000);
18:24 < Deathspike> Anyone know how I can check an element type in cheerio (i.e. element.is('div') from jquery)?
18:25 < triple_des> robbe_ but I need a way to terminate that timer before it goes off too
18:25 < robbe_> var foo = setTimeout ...; clearTimeout(foo);
18:26 < triple_des> I have to define foo in the server.js, I already know this way. I wanted to know if there was a way to create a timer without declaring it as variable in server.js
18:26 < stagas> Deathspike: it's somewhere in the source https://github.com/stagas/superscraper or you can use the lib
18:26 < austinbv> prettyrobots: I see the same thing, are functions passed as reference or copies
18:26 < austinbv> when they are an attribute of an object?
18:26 < prettyrobots> austinbv: I am confuse.
18:27 < prettyrobots> austinbv: I don't understand what you're asking. Maybe if I knew what you're trying to accomplish.
18:28 < Deathspike> stagas: That implements cheerio-soupselect, which is an outdated thing of what cheerio itself implements, and I can't find it there either.
18:30 < smartPudding> triple_des, what are exactly your requirements ? You want to be able to schedule an event ? You want to be able to cancel it, anything else ?
18:30 < prettyrobots> So...
18:30 < prettyrobots> Testing in the browser. Thoughts?
18:30 < stagas> Deathspike: still you can check the node's element and see if it's a div
18:31 < prettyrobots> I'm thinking about maybe I browserfy my node tests.
18:31 < Deathspike> stagas: That's what I was asking for, how do I do that? It's not documented as far as I see.
18:32 < stagas> Deathspike: target the element with a css selector and console.log(node) don't remember it exactly but you can check
18:32 < triple_des> look, what I am developing is a game that consist of 5 rounds of questions. So I need a timer that goes off at the end of each round. The problem is that I am going to scale this game so many players can play this. Lets say Player1 creates a game and player2 joins it. Now the timer needs to be created. I cant pre-define 10 000 timer var's in server.js for the 10 000 games that might occur...
18:32 < triple_des> ...simultanously.
18:32 < insin> prettyrobots: what are your Node tests written with?
18:32 < triple_des> smartPudding sorry for being unclear.
18:33 < prettyrobots> They are programs that emit TAP.
18:33 < prettyrobots> One little program per test.
18:33 < prettyrobots> I'm looking at browserfy, and it actually knid of makes a lot of sense to use it.
18:34 < smartPudding> you can put your timers in an object or an array or even a more complex structure
18:35 < triple_des> thats what I was thinking but how to create a new "var" when a client connects?
18:35 < triple_des> socket.on('joinroom', function (data) { var data = setTimeout .... ?
18:36 < adamramadhan> insin: wait why, new RegExp('\\b[a-zA-Z0-9]+\\b').test('Wo><rd') is true?
18:36 < insin> because of the word boundary before W and after o
18:36 < adamramadhan> js> new RegExp('\\b[a-zA-Z0-9]+\\b').test('Word')
18:36 < purr> adamramadhan: (boolean) true
18:36 < adamramadhan> new RegExp('\\b[a-zA-Z0-9]+\\b').test('Wo>rd')
18:37 < adamramadhan> js> new RegExp('\\b[a-zA-Z0-9]+\\b').test('Wo>rd')
18:37 < purr> adamramadhan: (boolean) true
18:37 < adamramadhan> ahhh 
18:37 < smartPudding> triple_des > why not access a "global" variable ?
18:37 < gtodd> bnoorduis: having a problem with iconv on freebsd
18:37 < insin> js> new RegExp('^\\b[a-zA-Z0-9]+\\b$').test('Wo><rd')
18:37 < purr> insin: (boolean) false
18:37 < triple_des> smartPudding, a global variable needs to be pre-defined yes?
18:37 < adamramadhan> insin: so we have to use ^ and $ ?
18:38 < insin> if you want to ensure the match is for the entire given string
18:38 < insin> it makes the \b moot, though
18:38 < triple_des> maybe I have to formulate my question a little better: How do I create a 'var timerX' on the fly (like for example when a client connects).
18:39 < smartPudding> triple_des > var scheduler = {} and then you use something like socket.on('joinroom', function (data) { scheduler[session_id] = setTimeout(
18:39 < triple_des> ok
18:39 < adamramadhan> insin: ok
18:39 < triple_des> I will try that and come back
18:39 < triple_des> thanks, smartPudding.
18:39 < gtodd> bnoordhuis: it builds but when I try to run something that uses it (like haraka) I get
18:39 < gtodd> iconv.node: Undefined symbol "_ZN2v811HandleScopeC1Ev"
18:40 < gtodd> ?
18:40 < smartPudding> triples_des > have fun :)
18:40 < prettyrobots> Okay. So, let's say I stream my TAP back to a server.
18:40 < prettyrobots> Isn't there a project now for streams between server and browser? 
18:42 < prettyrobots> Did Dominic Tarr create something that allows you to stream between browser and server?
18:42 < prettyrobots> This was just at NodeConf.
18:43 < upb> it's called http
18:43 < prettyrobots> upb: Nope. Not that. It was an abstraction layer that exposed the Stream interface on the client.
18:43 < prettyrobots> HTTP is different.
18:44 < prettyrobots> Well, I mean, it would be built on top of HTTP.
18:57 < qbit_> can the user agent of https.request or http.request be modified? 
18:58 < upb> yes
18:58 < robbe_> everything sent by the user could be modified
18:58 < graeme_f> prettyrobots: that sounds familiar, it might have been mentioned on NodeUp (or maybe not)
18:58 < prettyrobots> graeme_f: I just put a message on the listserv.
18:58 < prettyrobots> graeme_f: Thought it came out of NodeConf.
18:59 < qbit_> upb: where? :P 
18:59 < qbit_> i don't see it mentioned in the api
18:59 < upb> its a header
18:59 < prettyrobots> qbit_: Set the header.
18:59 < graeme_f> prettyrobots: the last episode was a nodeconf recap
18:59 < upb> or are you saying http overrides it?
18:59 < qbit_> request.header is read only
18:59 < qbit_> according to the api
18:59 < victusfate> any virtualbox users running node here?
18:59 < qbit_> *request.headers
18:59 < prettyrobots> graeme_f: Well there you go.
19:00 < qbit_> http://nodejs.org/api/http.html#http_request_headers 
19:01 < RLa> victusfate, yes
19:01 < prettyrobots> qbit_: http://nodejs.org/api/http.html#http_http_request_options_callback
19:01 < prettyrobots> Put your headers there.
19:02 < prettyrobots> In `options`.
19:02 < qbit_> ah
19:02 < qbit_> prettyrobots: thanks
19:02 < victusfate> ok RLa here's my config (and issue). host osx, vm ubuntu 11.1. using shared folders and config rc.local to mount it as logged in user. that all appears to work fine
19:02 < victusfate> when I'm ready to npm install, I'm getting errno 47
19:03 < victusfate> I jumped to this setup yesterday from dropbox (tired of cpu churning on the vm)
19:03 < victusfate> oh, and I'm running virtualbox 4.1.6 so that symbolic links work 
19:05 < victusfate> npm install burps saying the file exists (but it doesn't as far as I can tell)
19:05 < npmbro> victusfate: Please see http://github.com/aconbere/node-file-utils#readme
19:05 < victusfate> npm http 304 https://registry.npmjs.org/node.extend npm ERR! EEXIST, mkdir '/home/ubuntu/Desktop/Dropbox/mark_code/fastsociety/cameo-montage-scene/node_modules' File exists: /home/ubuntu/Desktop/Dropbox/mark_code/fastsociety/cameo-montage-scene/node_modules Move it away, and try again.  
19:05 < npmbro> victusfate: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20http%20304%20https
19:06 < RLa> hm, what that errno 47 means?
19:06 < RLa> victusfate, can you paste whole npm output log somewhere
19:07 < RLa> hm, oh
19:07 < RLa> file exists?
19:07 < victusfate> yup
19:07 < RLa> what if you remove it?
19:08 < victusfate> can't 
19:08 < victusfate> don't see it
19:08 < victusfate> on the vm or the host
19:08 < version2beta> insin, thank you for the template feedback!
19:08 < RLa> what it uses for directory sharing, nfs?
19:08 < victusfate> aka no node_modules directory in the project directory I'm in
19:08 < insin> np
19:08 < version2beta> tjholowaychuk, thank you for the template recommendations and the link to consolidate.js. I appreciate it.
19:09 < kenperkins> so is there a way of doing cluster like communcation between a spawned node child process?
19:09 < victusfate> uhhhh, virtual box share thing
19:09 < victusfate> checking...
19:09 < victusfate> shared folders
19:10 < RLa> victusfate, try /etc/init.d/virtualbox-guest-utils restart on guest
19:10 < timoxley> kenperkins http://nodejs.org/docs/latest/api/all.html#all_child_process_fork_modulepath_args_options
19:11 < RLa> googling reveals that lot of people have similar problems
19:11 < RLa> i would just use raw nfs (which osx should support very well)
19:11 < victusfate> so mount it in fstab with nfs
19:11 < victusfate> gotcha
19:12 < victusfate> thanks RLa, suggestion/help much appreciated
19:13 < version2beta> timoxley, thanks for the jade suggestion! I didn't realize it inherits. It looks cool, especially since I'm finally developing an appreciation for Haml. 
19:13 < RLa> tho i'm not sure if you can just mount the virtualbox share
19:16 < dexterity> Just uninstalled nodejs, when I type "man node" I get a wierd man page: http://hastebin.com/fevuloquga.xml
19:16 < dexterity> how can I get that man page removed
19:16 < dexterity> when I type whatis node I get:
19:16 < dexterity> __gnu_pbds::detail::bin_search_tree_traits (3) - (unknown subject) node (1)             - Server-side JavaScript 
19:16 < Eys> Hi everyone 
19:16 < dexterity> even though I uninstalled it
19:18 < Eys> Hi, Could someone help me with a question about Node.js?
19:18 < Eys> Please
19:20 < version2beta> Jade, Dust, and Swig: Anyone have experience with more than one of these and can talk about performance?
19:24 < Eys> Node.js is recommended for app that involves bank accounts and money? is secure?
19:24 < tjholowaychuk> version2beta they're all > 150,000 ops/s etc
19:24 < hunterloftis> isaacs: Hey man, anything I can do to help track down a resolution to https://github.com/isaacs/npm/issues/2597 ? Manually doing 'npm install' when our post-receive hooks fail is sucking :/
19:24 < tjholowaychuk> so it almost always doesn't matter
19:24 < tjholowaychuk> (with a medium sized template)
19:25 < Eys> Node.js is recommended for app that involves bank accounts and money? is secure?
19:25 < Eys> Node.js is recommended for app that involves bank accounts and money? is secure?
19:26 < upb> yes, make sure you use javascript floats for everything involving money
19:26 < gkatsev> probably not since all numbers are floats
19:27 < insin> Math.roundpointzerozerozerozerozerozerothreedown()
19:27 < gkatsev> hehe
19:28 < gkatsev> you could just treat everything as cents
19:28 < gkatsev> but then you'll just need to hope that the bank accounts dont have more than 2^53 cents in them
19:29 < gkatsev> it could be a feature of your bank. store 0-2^53 cents
19:29 <@isaacs> hunterloftis: can you make it dump the env before running `npm install`?
19:29 < fx> just round up all the rounding errors and add them to a separate account
19:29 <@isaacs> hunterloftis: just run `env`.  then gist it.  make sure to filter out anything that's secret (passwords, auths, etc.)
19:29 <@isaacs> hunterloftis: i suspect that git's post-receive hook is putting something in the environment that confuses `git checkout`
19:30 <@isaacs> hunterloftis: it's pretty notorious for that
19:30 < hunterloftis> isaacs: good idea. I think maybe since 'git' is running already for the post-receive, it's setting a path to some other place and then it doesn't recognize '.' as the repo
19:30 < gtodd> bnoordhuis: the iconv issue seems to have occurred on other platforms as well
19:30 < hunterloftis> isaacs: yeah exactly
19:32 < mortdeus> Yay. 
19:33 < gtodd> bnoordhuis: here's the message I get after installing iconv when I try to run haraka
19:33 < gtodd> /libexec/ld-elf.so.1: /usr/home/gtodd/node_modules/iconv/build/Release/iconv.node: Undefined symbol "_ZN2v811HandleScopeC1Ev"
19:34 < DTrejo> npmbro
19:35 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`. Powered by http://jit.su/                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm dtrejosaysyoushouldreallydie | npm install
19:35 < DTrejo> oops
19:37 < jesusabdullah> npmbro
19:37 < npmbro> npmbro usage: `npm <command> <arguments ...>` For more information on npmbro, see https://github.com/DTrejo/npmbro or run `npm credits`. Powered by http://jit.su/                          Available commands: npm search | npm docs | npm help | npm node | npm credits | npm dtrejosaysyoushouldreallydie | npm install
19:37 < hunterloftis> isaacs: done, https://gist.github.com/3100224#comments
19:37 < jesusabdullah> DTrejo: did npmbro ever die?
19:37 < DTrejo> it did
19:37 < DTrejo> and then I redeployed and has same issue
19:37 < DTrejo> but it's okay haha
19:38 < jesusabdullah> oh dang
19:39 < baudehlo> tjholowaychuk: ping
19:39 < tjholowaychuk> yo
19:39 < baudehlo> is knox still supported/working?
19:40 < tjholowaychuk> nope/not sure
19:40 < tjholowaychuk> i dont think anyone wants to maintain it
19:40 < baudehlo> I can get awssum working to get stuff from s3, but with knox I get authenticatino errors.
19:40 < baudehlo> but awssum doesn't let you stream/pipe
19:40 < tjholowaychuk> we might eventually pick it back up if we start using s3 again
19:41 < RLa> deoxxa, some alpha versions of node-mysql 2.0 did not reconnect when connection lost?
19:42 < baudehlo> I'll try noxmox - seems more recent.
19:44 < baudehlo> yeah that works.
19:45 < tjholowaychuk> baudehlo cool i'll recommend that to other people who ask
19:48 < benatkin> npmbro search oauth
19:48 < npmbro> benatkin: Please see http://eirikb.github.com/nipster/#oauth
19:48 < version2beta> tjholowaychuk, gawd I love node. Thank you.
19:49 < benatkin> npmbro search template
19:49 < npmbro> benatkin: Please see http://eirikb.github.com/nipster/#template
19:49 < owen1> socket.io doesn't work with firefox. is it just me?
19:49 < sabermonk> hi, i m using child_process.kill( ) to kill a certain process , but its not not getting killed at that instant, and next line i have is a return stmt, if return is called w/o child getting killed . i get errors.. How to make sure a process is killed instantly?
19:49 < owen1> (i see the data on the server though)
19:50 < RLa> sabermonk, maybe you need to send stronger signal to it
19:50 < sabermonk> RLa, i m using SIGKILL
19:50 < RLa> oh
19:51 < RLa> and it still does not die?
19:51 < sabermonk> sometime it does, sometime it doesn't
19:52 < RLa> what if you try to wait till it dies
19:53 < sabermonk> RLa, i tried to , someitmes even for 1000ms but it didn't work
19:53 < sabermonk> RLa, i have smthing like this - function(pid,cb) { pid.kill("SIGKILL"); cb(null,true) }
19:54 < DTrejo> npm search nipster rocks
19:54 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#nipster%20rocks
19:54 < victusfate> @RLa
19:54 < RLa> yeah
19:54 < victusfate> I tried setting up nfs via http://tumblr.intranation.com/post/4669998243/sharing-files-with-virtual-machines-using-nfs
19:54 < victusfate> got it exported fine on the mac side, but couldn't connect on the ubuntu/vm side
19:55 < victusfate> wasn't sure how to differentiate exports on my local network (desktop, laptop, etc)
19:55 < victusfate> without giving them their own IPs
19:55 < victusfate> so err I gave up and went back to shared folders pain (the devil i sorta knew)
19:55 < benatkin> DTrejo: agree nipster is some badassjs
19:55 < RLa> can't you use hostnames when mounting?
19:56 < victusfate> yeah
19:56 < RLa> victusfate, wait, i see problems
19:56 < victusfate> I picked 192.168.56.0 for one, and 192.168.57.0 for another
19:56 < DTrejo> benatkin:  :)
19:56 < RLa> those are netword addresses, not hosts
19:56 < RLa> work*
19:56 < victusfate> but if I was on another network (laptop) that ip could be taken
19:56 < victusfate> oh
19:57 < sabermonk> RLa, now if i introduce a timeout - setTimeout(function(){ cb(null,true)},1000);
19:57 < RLa> or you could create some sort of subnet where the vb host has known ip
19:57 < victusfate> its too tricky for my network needs (and skill)
19:57 < victusfate> punted with shared folders and it worked this time
19:58 < victusfate> if it flakes out I can restart and it works
19:58 < sabermonk> is there a way to have a callback for .kill - method?
19:59 < sabermonk> so that i can be sure the process is killed
19:59 < victusfate> but the setup is pretty cool when it's working, desktop/laptop with dropbox, and vms mount to dropbox drives
20:00 < victusfate> *waves*
20:02 < benatkin> DTrejo: it would be nice if it could provide some help without a link, like showing the top 3 w/ #watchers for a search
20:02 < benatkin> gotta love IRC :)
20:11 < owen1> socket.io doesn't work with firefox. is it just me?
20:11 < whitman> Works fine for me.
20:17 < jhsto> does anyone have a freaking idea how to reinstall centos from command line?
20:18 < gkatsev> owen1: which version?
20:19 < owen1> gkatsev: 0.9.6
20:20 < owen1> gkatsev: https://github.com/oren/node.js-presentation/blob/master/code/5-socket-io/server.js
20:20 < owen1> and the client: https://github.com/oren/node.js-presentation/blob/master/code/5-socket-io/public/myscript.js
20:21 < owen1> chrome is fine. in ff the server doesn't send the message to the client
20:21 < TrahDivad_> I found a weird behavior with express by accident. If I return a a Q promise from my routing, it seems to execute it for me. has somebody else encountered that?
20:22 < gkatsev> owen1: oh, meant which firefox version, lol
20:22 < gkatsev> if it's current, then weird, if older it may be disabled by default
20:24 < owen1> gkatsev: i think it's the recent version
20:26 < motiooon_> here's an interesting problem
20:26 < motiooon_> so I'm using async foreachSeries, and for each file in the iterator function
20:26 < motiooon_> I have an async waterfall
20:27 < motiooon_> for the waterfall I've called the callback to be callbackw
20:27 < motiooon_> for the first item in the array works fine for the second one it says callbackw undefined
20:28 < motiooon_> where callbackw is the callback that calls the next function in async
20:28 < motiooon_> I'm thinking at this point that is a weird closure that the nested functions are generating
20:29 < motiooon_> has anyone encountered callback undefined when using nested async methods ?
20:37 < wavded> gi
20:38 < wavded> oh hi vim :)
20:39 < timoxley> motiooon_ waterfall is a pain because the callback moves depending on how many arguments are passed
20:40 < motiooon_> so what should I use then ?
20:41 < timoxley> motiooon_ you can safely detect the callback in waterfall steps with: `var callback = arguments[arguments.length - 1]`
20:41 < timoxley> motiooon_ waterfall is useful if you need result of previous command for next command. is that what you need?
20:41 < motiooon_> yes
20:42 < motiooon_> so the case is that I'm using async forEachSeries (array, worker, callbac)
20:43 < motiooon_> the worker is a function that wraps an async watterfall
20:43 < timoxley> yep
20:43 < motiooon_> first time the worker runs all callbacks are executed so all steps in waterfall are executed
20:43 < motiooon_> the second time the worker is running I get callback undefined
20:44 < motiooon_> although the first time the waterfall worked corectly
20:44 < sabermonk> hi , a question. How to check whether a port is free or not?
20:44 < timoxley> motiooon_ console.log(arguments) in your worker methods. you may find truth
20:45 < motiooon_> ok, I'll try it this right now
20:45 < AzaToth> unless you've alredy have been informed, debian-ctte have made a ruling regarding nodejs vs node now. See http://lists.debian.org/debian-devel-announce/2012/07/msg00002.html for the resolution
20:46 < othiym23> oh lol Debian
20:46 < othiym23> Solomonic justice at its finest
20:47 < darrenlooby> I wonder if anyone can help me. I want to create a server. It only needs a root dir. The whole purpose is to take the POST array, process the data (filter and modify it), store it to a DB and then send it to Pusher.com...
20:47 < darrenlooby> I'm trying a few things, but I'm thinking that this should be really simple
20:48 < timoxley> sabermonk I'm pretty sure you have try connect to it and listen for EADDRINUSE error
20:48 < timoxley> sabermonk this is pretty handy https://github.com/indexzero/node-portfinder
20:48 < timoxley> darrenlooby is that a question?
20:49 < sabermonk> tim, i am using the same but i am get erroeneous results
20:49 < sabermonk> :(
20:49 < darrenlooby> Yea
20:49 < timoxley> sabermonk what you mean
20:49 < tjholowaychuk> sabermonk listen on (0)
20:49 < tjholowaychuk> http://en.wikipedia.org/wiki/Ephemeral_port
20:49 < RLa> AzaToth, will there be a project that provides symlink /usr/bin/node to /usr/bin/nodejs?
20:50 < sabermonk> sory sory, my bad .. i was using https://github.com/danielzzz/node-portchecker
20:50 < RLa> AzaToth, or "alternatives" system will handle it?
20:51 < cocacola> hi
20:51 < AviMarcus> what does pusher provide? I've spent several minutes on the site and I still can't figure it out.
20:51 < cocacola> anyone have any idea when the "vm" feature in node.js's api will be ready to use in a production setting?
20:51 < darrenlooby> Pusher.com -- is a socket service
20:52 < jesusabdullah> cocacola: I mean, I've been using it since it came out
20:52 < AviMarcus> darrenlooby, you can't just use socket.io... ?
20:52 < jesusabdullah> AviMarcus: pubsub
20:52 < timoxley> jesusabdullah I think cocacola refers to the 'unstable' label on it.
20:52 < cocacola> yes, i am referring to the unstable label
20:52 < timoxley> cocacola unstable doesn't mean the actual implementation is unstable
20:52 < jesusabdullah> "unstable" just means that the api is allowed to change
20:53 < AviMarcus> I see
20:53 < darrenlooby> AviMarcus, I plan on using socket.io at some point. But, can use Pusher.com well at the moment, and that'd just create another server that I need to create. So, for now - I'm just focusing on the business logic.
20:53 < cocacola> so it would be safe to use in a large-scale web application?
20:53 < jesusabdullah> yeah
20:53 < cocacola> awesome, thanks!
20:53 < jesusabdullah> I mean, what does "safe" *mean* anyway?
20:53 < jesusabdullah> I've never had the vm module barf on me if that's what you mean
20:54 < AzaToth> RLa: there will be a nodejs-legacy package that provides a node binary, but it's only for upstream compability, and no other packages are allowed to reference it
20:54 < cocacola> yes, that's what i meant. 
20:54 < cocacola> when will it be "stable"?
20:55 < cocacola> the phrase "The vm module has many known issues and edge cases. " on the website
20:55 < cocacola> simply concerns me.
20:55 < AzaToth> RLa: see point 2 of the resolution
20:57 < darrenlooby> AviMarcus, have any tips for my little server?
20:57 < RLa> oh
20:57 < AzaToth> othiym23: that's why it was referred to ctte because ax25node and nodejs maintainers couldn't agree
20:59 < othiym23> AzaToth: I'm more amused than anything else, I know these kinds of policy fights are gnarly
20:59 < othiym23> creationix is abusing Twitter somthin' fierce today
20:59 < AviMarcus> darrenlooby, I'm still a bit of a node noob
21:01 < timoxley> darrenlooby what are you having problems with exactly?
21:02 < darrenlooby> I'm having trouble pulling out POST from the request. I also need to get my head around doing it async
21:02 < darrenlooby> It needs to be able to handle a few thousand requests a second
21:03 < fx> Hi, I've been trying to use WebSockets with node, but the standard package doesn't support older protocol which safari uses. Is there a way to support two protocols ?
21:03 < creationix> othiym23, abusing?
21:03 < timoxley> darrenlooby what are you using? express?
21:03 < Deathspike> fx: Did you look into node.io?
21:03 < DTrejo> fx: standard package?
21:03 < darrenlooby> I've mostly been playing around with http
21:03 < DTrejo> npm search websocket
21:03 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#websocket
21:03 < othiym23> creationix: so many ccs
21:04 < creationix> othiym23, don't worry, I have a strict assert(tweets < followers) rule that keeps me from being too chatty
21:04 < TrahDivad_> Does anybody know if there has been discussions about making promises a central part of future node versions?
21:04 < fx> DTrejo, This one: https://github.com/Worlize/WebSocket-Node/
21:04 < othiym23> creationix: I don't mind, I just wonder how productive standards wrangling at 140 characters per message is
21:04 < othiym23> creationix: especially given some of the parties involved
21:05 < creationix> othiym23, it's surprisingly effective to get conversations started, but terrible for real debate
21:05 < timoxley> darrenlooby life will be a lot easier if you use express/connect. just drop in the body parser and you will have access to the post variables like magic
21:05 < othiym23> creationix: did you see my NodeConf writeup? New Relic's marketing manager found a picture of you looking handsome from your presentation
21:06 < creationix> othiym23, link?
21:06 < othiym23> http://blog.newrelic.com/2012/07/11/recap-of-nodeconf-2012/
21:07 < creationix> nice, though I look like I have oxygen tubes going into my nose :P
21:07 < darrenlooby> Which one do you think would be better for my service? Express or Connect? What are the major differences?
21:07 < othiym23> it's your supercharger, creationix 
21:08 < creationix> othiym23, I think there is a typo "...CoffeeScript and Fedor Indutny, and its developer..."
21:09 < othiym23> creationix: thanks, I'll fix
21:09 < creationix> darrenlooby, express uses connect
21:09 < creationix> so it's picking your level of abstraction
21:09 < creationix> darrenlooby, I usually just use stack
21:09 < othiym23> creationix: I wrote that like the day after the 4th on about 3 hours of sleep, I'm surprised it's mostly in English
21:09 < creationix> which is a connect-compatable dispatcher without any middleware
21:09 < creationix> othiym23, :)
21:10 < creationix> othiym23, also candor is a jit, just like v8
21:10 < distracteddev> I sincerely suggest using Flatiron. For me, it gave me a deeper understanding of Node but still allowed me to pass off some already solved problems to connect (static file serving, etc);
21:11 < othiym23> creationix: really?
21:11 < distracteddev> creationix: Where is this stack module?
21:11 < othiym23> I'll take your word on it, but Fedor sure spent a lot of time talking about native compilation in his talk
21:11 < creationix> yeah, jit is native
21:11 < creationix> but not static
21:11 < creationix> it's on-the-fly compiling
21:11 < creationix> same with v8
21:11 < distracteddev> (the term node-stack is too general for google)
21:12 < creationix> distracteddev, creationix/stack on github
21:12 < creationix> stack on npm
21:12 < othiym23> creationix: K, will tweak the wording
21:12 < distracteddev> creationix: Danke :)
21:13 < darrenlooby> creationix, would I use stack with connect?
21:13 < creationix> stack replaces connect
21:14 < creationix> but you can use most middlewares written for connect
21:14 < darrenlooby> So could use express?
21:14 < creationix> darrenlooby, that's up to you
21:15 < distracteddev> darrenlooby: Express uses connect, stack is simply connect compatible
21:16 < DTrejo> npm docs stack
21:16 < npmbro> DTrejo: Please see http://github.com/creationix/stack#readme
21:16 < DTrejo> creationix: ^
21:16 < DTrejo> distracteddev: ^
21:16 < fx> Deathspike, node.io is for data scraping, have i found the wrong thing?
21:16 < creationix> btw, i wrote both the original connect and stack
21:16 < creationix> but I don't maintain connect anymore
21:16 < distracteddev> darrenlooby: I think some background might help you: Connect is a middleware provider. Middleware can be simplified into a function that is called on each HTTP request. Express uses connect's middleware to handle all kinds of general request related tasks such as serving static files and a favicon.
21:16 < DTrejo> npm search creationix
21:16 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#creationix
21:16 < version2beta> creationix, what about tako? do you have an opinion?
21:17 < creationix> version2beta, I haven't looked too much, but it looked nice
21:17 < Deathspike> fx: My bad, I totally mean socket.io.
21:17 < owen1> is socket.io works with mobile browsers?
21:17 < creationix> I much prefer small frameworks
21:17 < creationix> connect is too much for me
21:17 < distracteddev> darrenlooby: stack allows you to use these middlewares in the case that you don't want to write your own fucntion to handle that part of your application. 
21:17 < TrahDivad_> Does somebody know if there already exist a helper method with express that creates an error and attaches a status code to it?
21:17 < Deathspike> owen1: It does.
21:18 < fx> Deathspike, Ah, i thought so. I have, and I couldn't make it work. Is there an example (a live one) where i can see both client and server code ?
21:18 < TrahDivad_> I know it's a three-liner, but I would prefer reusing it if it already exists
21:18 < Deathspike> fx: npm install socket.io express
21:18 < Deathspike> fx: That uses Express, and installs a fully functional example.
21:18 < Deathspike> fx: Then just run app.js and open in your browser.
21:19 < DTrejo> npm docs error-page
21:19 < npmbro> DTrejo: Please see http://github.com/isaacs/error-page#readme
21:19 < Deathspike> fx: http://socket.io/#how-to-use more here
21:19 < DTrejo> compatible with all http servers
21:20 < fx> Deathspike, but this is not specifically about websockets? I don't need a web framework
21:21 < Deathspike> fx: Look at the bottom of the page, "just using this as a cross platform websocket".
21:21 < fx> Deathspike, Oh god! completely missed that
21:21 < Deathspike> fx: It's very popular and allows you to send real-time messages to any browser, any device, etc. Exactly as you would with websockets, the client basically tries to use websockets, and falls back to other methods when it doesn't have that.
21:21 < distracteddev> Anyone here know of a list, or could provide a list of some good CS universities in Califronia?
21:23 < fx> Deathspike, is io.connect() part of native javascript?
21:23 < DTrejo> distracteddev: brown university
21:23 < Deathspike> fx: No, it's from socket.io.js (client-side component).
21:24 < Deathspike> <script src="/socket.io/socket.io.js"></script>
21:24 < owen1> Deathspike: thanks!
21:24 < owen1> Deathspike: any idea why my socket.io sample chat not working with FF? 
21:24 <@Nexxy> distracteddev, google.com
21:24 < othiym23> distracteddev: Cal (Berkeley), Stanford, UC Irvine, Harvey Mudd, Caltech
21:25 < othiym23> distracteddev: really depends on what you're looking for. Is this for grad school?
21:25 < Deathspike> owen1: I'm not an expert on it, so, no, unfortunmately not. I suggest looking at your firebug and checking what it shows.
21:25 < distracteddev> Nexxy: Google keeps giving me, exactly that.. just the absolute very best, I am trying to transfer from SFU, and most of those extrmely top-end schools don't accept transfers, or if they do, they make it extemely hard on you.
21:26 <@Nexxy> oh no I just meant attending google
21:26 < distracteddev> Nexxy:  oh okay :)
21:26 <@Nexxy> ;P
21:27 < fx> Deathspike, where do i get this socket.io.js ? The one in the repo uses method require() which is not found
21:28 < fx> Deathspike, this is ment to be used in a browser yes?
21:28 < Deathspike> fx: require is a standard part of node, so that's server-side. You want to use the client-side example bits in the browser, not the other way around :)
21:28 < distracteddev> othiym23: Its for undergrad, I was thimning of just dropping out and taking the offer I have in cali, but the other side of me just feels like I should knock out the year I have remaining so I atleast get my piece of paper
21:29 < fx> Deathspike, all examples include /socket.io/socket.io.js, which i can't find anywhere, there is a file at /lib/socket.io.js but that looks like its for server-side
21:30 < Deathspike> fx: Socket.io itself serves the file when you include it, you shouldn't worry about where it is. Just include it and let socket.io do its magic. :)
21:31 < fx> Ahh! i use another webserver to serve the static files
21:32 < DTrejo> yes
21:33 < DTrejo> fx if you want require in the browser, use
21:33 < DTrejo> npm docs browserify
21:33 < npmbro> DTrejo: Please see http://github.com/substack/node-browserify#readme
21:33 < fx> Deathspike, I'm guessing thats what makes it choose transports, so I can't just serve that JS with apache
21:34 < Deathspike> fx: Oh, you can, text is just text, but you're making things more complicated for yourself in terms of updating.
21:34 < fx> Well, i can get rid of the whole thing once safari updates its WebSocket implementation
21:35 < fx> I only need two transports. It doesn't make sense for my app to use any others (long polling, flash sockets, etc)
21:37 < Deathspike> fx: Not sure what your app is, but you might want to let that poor IE user on your app too :P
21:37 < fx> Everything else will also be broken, so its pointless
21:39 < fx> Deathspike, But i now understand how it works. I should be able to use this. thankyou
21:46 < othiym23> distracteddev: I uh "left" school after 5 years without a degree and have never particularly regretted it, but my dad sure has, and if you want to transfer for undergrad, your options are kinda limited
21:46 < othiym23> distracteddev: if your opportunity is in NorCal, there's always SFSU, which is not up to SFU's standards, but it pretty tolerant of transfer students
21:47 < othiym23> distracteddev: would SFU let you finish out your program remotely through independent study or something?
21:47 < distracteddev> othiym23: They don't offer the upper-division courses through distance ed, but if I had to, I could just enroll, never show up for class, and just go to the final exams
21:59 <@isaacs> npmbro: what are you?
21:59 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
22:00 <@isaacs> npm install failer
22:00 < npmbro> isaacs: No results
22:00 < holzp> Trying to decide between jade and ejs, any strong opinions either way?
22:00 <@isaacs> npm install npm
22:00 < npmbro> isaacs: Please see http://npmjs.org/
22:00 <@isaacs> npm install browserify
22:00 < npmbro> isaacs: Please see http://github.com/substack/node-browserify#readme
22:00 <@isaacs> so... it's the docs url?
22:00 <@isaacs> npm help npm
22:00 < npmbro> isaacs: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20npm
22:00 < Deathspike> holzp If you use Express, its almost natural to use JADE. :P
22:00 < sebicas> What framework you recommend me to build an REST API in Node.js?
22:01 <@isaacs> npmbro: help
22:01 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
22:01 < Deathspike> sebicas: Express
22:01 < holzp> I guess I don't totally understand why they include Jade by default instead of a different templating engine
22:01 < tjholowaychuk> holzp jade isn't included
22:01 <@isaacs> Anyone wanna mess around with the npm-www site?  It's really easy to start working on now: https://github.com/isaacs/npm-www/#getting-started
22:01 < holzp> seems sort of arbritary
22:01 < othiym23> holzp: I'd use Jade over EJS, but they're actually more or less complementary
22:01 < tjholowaychuk> holzp nothing is included
22:01 < SubStack> don't reach for frameworks
22:01 < SubStack> reach for libraries that solve the problems that you have
22:01 < sebicas> Anything more specific?
22:01 <@isaacs> Just have to install redis and couchdb.  it spins them up configured and everything.  clones some real data from the real site, and gets you going right off.
22:01 < holzp> hm I thought Jade was the default rendering engine
22:02 < othiym23> SubStack: Node.js's most strident apostle!
22:02 < Deathspike> holzp: Jade is a little overwhelming at first, but really elegant once you get the hang of it.
22:02 <@isaacs> SubStack++
22:02 < tjholowaychuk> holzp it's the default if you use express(1) to generate the app
22:02 < othiym23> preaching the good word of no frameworks
22:02 < holzp> right
22:02 < sebicas> Ok great adviceâ€¦ thx
22:02 < holzp> thats what I mean
22:02 < tjholowaychuk> frameworks == aggregates of shit you'll do anyway
22:02 <@isaacs> speaking of libraries-over-frameworks
22:02 < tjholowaychuk> with tests
22:02 <@isaacs> tjholowaychuk: i find that frameworks usually have fewer and less granular tests than libraries that do a single thing.
22:02 <@isaacs> tjholowaychuk: if a lib does one thing, chances are there are tests that test that one thing.
22:02 < Deathspike> Isn't express a framework too? :P
22:02 < tjholowaychuk> let's us focus on writing apps
22:02 < tjholowaychuk> instead of glue
22:03 <@isaacs> tjholowaychuk: well written libs don't require much glue.
22:03 < tjholowaychuk> npm-www is a lot of glue
22:03 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm help | npm node | npm credits | npm install
22:03 < jesusabdullah> I suspect that a framework can be composed of such libraries
22:03 < jesusabdullah> ?
22:03 <@isaacs> tjholowaychuk: really?  what do you consider glue, exactly?
22:03  * holzp is sorry for lighting a match
22:03 <@isaacs> tjholowaychuk: i mean, there's the decorate thing that should be pulled out.
22:03 <@isaacs> just haven't gotten to it
22:03 < tjholowaychuk> things that i'd do in 99% of my apps anyway
22:04 < tjholowaychuk> there's no one size fits all for that obviously
22:04 < jesusabdullah> idk isaacs I saw a lot of stuff in that codebase that was like, "I think flatiron does that by default"
22:04 < jesusabdullah> that said I felt the organiation of the project was reasonable
22:04 < jesusabdullah> do what works for you, I say
22:04 <@isaacs> jesusabdullah: the problem is that flatiron does a TON of stuff by default.
22:04 < jesusabdullah> HELL YEAH it does \m/
22:04 < tjholowaychuk> if you're going to aggregate anyway why not build a lib out of things you aggregate anyway
22:04 < jesusabdullah> the BEST stuff by default
22:04 < tjholowaychuk> if people do similar
22:04 < tjholowaychuk> they use it
22:04 < tjholowaychuk> if not, they use those libs
22:04 <@isaacs> jesusabdullah: so you say "i'm using flatiron" and it's like a doctor saying, "we're going to cure your diseas", and you say "how?" and he says "by practicing medicine!"
22:05 <@isaacs> same with express.
22:05 < tjholowaychuk> admittedly everything in connect should have been separate and just aggregated into connect for the middleware style
22:05 < tjholowaychuk> but im working on that
22:05 < jesusabdullah> isaacs: well, I'm not exactly encouraging you to use flatiron here. I'm just using it as an example because I'm vfamiliar with it.
22:05 <@isaacs> sure
22:05 < SubStack> curation and composability are at odds
22:06 < holzp> oh this is that tjholowaychuk
22:06 <@isaacs> SubStack: well, i'd say, curation belongs at the app level, not the library level, and i don't htink that there should be any other levels.
22:06 < jesusabdullah> I mean, flatiron's made up of at least 30 composable units, many of which aren't mutually depended on
22:06 < jesusabdullah> but that's not even the point
22:06 <@isaacs> the question is: 2 levels, or 3?
22:06 < jesusabdullah> More to the point: tako seems like a good fit for what you're doing isaacs 
22:06 <@isaacs> jesusabdullah: yeah, it's still kinda not.
22:06 <@isaacs> jesusabdullah: tako is a good fit for what mikeal and maxogden are doing.
22:06 < jesusabdullah> so it *seems* like you'd want an "ultralight" "framework", or a "collection of tools"
22:06 < jesusabdullah> THAT SAID it seems you've put this together already
22:06 <@isaacs> jesusabdullah: tako is not an ultralight-enough framework.
22:07 <@isaacs> in fact, npm-www as it is now is too much of a framework.
22:07 < tjholowaychuk> yeah there's a lot of framework-ish stuff in there
22:07 < distracteddev> isaacs: Well then whats the solution?
22:07 < jesusabdullah> idk man, I see a router, and some things
22:07 <@maxogden> i dont really like tako actually
22:07 <@maxogden> for the record
22:07 <@isaacs> haha
22:07 < jesusabdullah> I think having a router module and a logging module and so on and so forth that you use consistently is valuable
22:07 <@maxogden> if it was like 5 small modules i would like it
22:07 < jesusabdullah> maxogden would say that
22:07 < SubStack> distracteddev: write lots of tiny libraries that just do one thing and that compose other libraries, but only in order to do their one thing
22:08 <@isaacs> jesusabdullah: right, but if i wanted to switch from, say, routes.js to director, that'd be a lot easier than switching from flatiron to express or vice-versa
22:08 < jesusabdullah> I still make the claim that composability and curation are ***not*** at odds
22:08 < jesusabdullah> isaacs: Sure, sure. But you still have a router module. XD
22:08 < SubStack> I've been slowly building up to something with reusable pieces
22:08 <@isaacs> jesusabdullah, SubStack: Well, "composability and curation are at odds" is a typically inflammatory substackism ;)
22:09 < mikeal> isaacs: actually, i tried to switch from routes.js to director and couldn't
22:09 < SubStack> it's hard to resist the temptation to bundle lots of things together
22:09 <@isaacs> SubStack: it IS!
22:09 <@isaacs> mikeal: orly?
22:09 < mikeal> and then someone that wanted routes out wrote mapleTree
22:09 <@isaacs> mikeal: oh, right
22:09 < jesusabdullah> isaacs: Definitely. I'm just willing to make the opposite assertion
22:09 <@isaacs> mapeleTree
22:09 < mape> ?
22:09 <@isaacs> SubStack: so, decorate.js in npm-www is basically my flirtation with that templation
22:09 < jesusabdullah> ANYWAYYYYYYS I'm not here to fight the frameworks wars ;)
22:09 <@isaacs> mape: sorry, typeo.  meant "mapleTree"
22:09 < SubStack> I apologize for the size of this module. I didn't have time to make it smaller.
22:10 < mape> isaacs: hehe k
22:10 <@isaacs> SubStack: yep.
22:10 < SubStack> isaacs: so I think it's wise to realize that programmers will tend to build pieces that are too big and to consciously correct for that tendancy
22:11 < SubStack> by writing pieces that seem too small
22:12 < SubStack> it's also often the case that tiny modules will require later revisions for special cases for bugfixes and such
22:12 <@isaacs> SubStack: ++
22:12 <@isaacs> so, in npm-www, i have server.js (which is the cluster master), and worker.js (which is the cluster worker), and the site.js and decorate.js
22:12 <@isaacs> really, site.js and decorate.js should be the same file
22:13 < holzp> If you told me 12 years ago I'd be using Javascript like this I would have thrown you out of the room...
22:13 <@isaacs> ad most of the stuff int hem should be either in node-core, or in a separate module.
22:13 < SubStack> like for instance this module started out as a tweet last night https://github.com/substack/node-parents/blob/master/index.js
22:13 < tjholowaychuk> https://github.com/isaacs/npm-www/blob/master/decorate.js#L137
22:13 < SubStack> but it required extra things, especially for windows
22:13 < tjholowaychuk> even stuff like that
22:13 <@maxogden> npm install areyoumyrealdad
22:13 < npmbro> maxogden: No results
22:13 < tjholowaychuk> do you really want that in each app
22:13 < tjholowaychuk> or require a module per ~40 methods
22:14 < SubStack> tjholowaychuk: modules compose on top of other modules
22:14 < SubStack> you build them up brick by brick
22:14 < tjholowaychuk> even the concept of prototypes are coupled, we should have no prototypes
22:14 < SubStack> tjholowaychuk: so it's not really ever the case that you'll have dozens of modules in the same file
22:15 <@isaacs> i'm ok with having a lot of modules in an app
22:15 < SubStack> instead you'd have modules organized in a tree so you don't require very many modules in any particular place
22:15 <@isaacs> handlers for all the routes, and each of the templates.  makes sense.
22:15 <@maxogden> id rather have a lot of require() statements than a lot of one-off functions floating around
22:15 < othiym23> maxogden: ++
22:15 < distracteddev> maxogden: ++
22:15 < SubStack> maxogden: a lot of require statements is a good signal that a piece of code is trying to do too many things
22:15 <@isaacs> LETS ARGUE ABOUT THE SHAPES OF OUR CODES AND OUR FILES, GUYS!  MAYBE ON TWITTER!
22:15 <@isaacs> I LIKE 7 INDENTS!
22:16 < jonpacker> only 7?!
22:16 < SubStack> 5-space indents
22:16 <@isaacs> SubStack: 50 SPACE INDENTS!
22:16 <@isaacs> SubStack: EVERY SPACE IS PRECIOUS!
22:16 < jonpacker> now we're talking!
22:16 <@maxogden> i use subspace indents
22:16 < distracteddev> isaacs: Please guys, we all know that ZERO SPACE INDENTS IS WHAT ALL THE PROS USE
22:16 < othiym23> isn't that more or less what paulgraham (sorry, won't mention him again) was talking about in "programming from the bottom up", only with modules instead of Lisp functions?
22:16 <@isaacs> maxogden: hahah
22:16 <@maxogden> thou shalt not mention hackernews bros in this channel
22:16 < tjholowaychuk> var map = require('array-map'); var length = require('array-length') ...
22:16 < tjholowaychuk> sounds fun
22:17 <@isaacs> maxogden: watch out, though.  if you use subspace indents, you can trigger substack overflows
22:17 <@maxogden> hah
22:17 <@isaacs> tjholowaychuk: stop with the reduction to absurdity.
22:17 < tjholowaychuk> haha well that's my point
22:17 <@isaacs> tjholowaychuk: you've seen substack's code, you know what he's talking about.
22:17 < tjholowaychuk> it's all subjective
22:17 < othiym23> maxogden: hairwith spaces in Unicode -- look em up
22:17 < tjholowaychuk> there is no end
22:17 <@isaacs> tjholowaychuk: yeah, but saying "it's all subjetive so therefor i can say whatever" is like a typical 12-year-old's reason why they can stay out late.
22:17 < tjholowaychuk> if 500,000 devs find rails useful, then hell they find rails useful
22:18 < tjholowaychuk> is it bloated
22:18 < tjholowaychuk> yes
22:18 < tjholowaychuk> that's why we have options
22:18 < othiym23> I guess I like the idea of small single-purpose libraries, but it's getting really fucking hard to find anything
22:18 <@isaacs> tjholowaychuk: i mean, saying something is a "reduction to absurdity" isn't a compliment.
22:18 < tjholowaychuk> othiym23 especially when it's node-muffin
22:18 <@isaacs> tjholowaychuk: it's saying, "That argument misses the point of the thing we're discussing, in a specifically derailing way"
22:18 < tjholowaychuk> node-turtle
22:18 <@isaacs> tjholowaychuk: btw, i still can't figure out how to delete your turtle npm package :)
22:18 < othiym23> like, npm needs to foster discovery somehow
22:19 < tjholowaychuk> ahahaha
22:19 < othiym23> npm install npm-turtle
22:19 < npmbro> othiym23: No results
22:19 <@maxogden> othiym23: that is being worked on
22:19 < SubStack> othiym23: npm search exactly the thing you need
22:19 <@isaacs> othiym23: https://github.com/isaacs/npm-www/#getting-started
22:19 < othiym23> maxogden: I know, but I want it NAOOOOOOOOOOOO
22:19 <@isaacs> othiym23: you can help!
22:19 < SubStack> if there are too many results, add more keywords
22:19 <@isaacs> build the future!!
22:19 < othiym23> isaacs: I will do that, but sometimes it's fun just to be a whiny asshole too
22:19 <@isaacs> it can be.
22:20 < othiym23> it took me like 8 tries to remember my npm password last night
22:20 < othiym23> sorta embarrassing
22:20 <@isaacs> othiym23: you can reset it on the website now
22:20 <@maxogden> one one hand you have people who invent their own fiefdoms with weird patterns and high level apis that clearly solve specific problems so it attracts developers
22:20 <@isaacs> on https://new.npmjs.org/forgot
22:21 < othiym23> isaacs: good to know, and it probably needs to be changed anyway, cuz I'm not sure when I set it
22:21 < othiym23> ty
22:21 <@maxogden> but on the other hand there are small modules that expose more surface area and are more generic
22:21 <@maxogden> i dunno which one is a net benefit to node
22:21 <@isaacs> maxogden: thankfully, we can have lots of both
22:21 < jesusabdullah> probably mere existence is a good thing
22:21 < othiym23> maxogden: I've seen some real empire-building going on with a couple high-profile incubatory companies coming to Node on GitHub
22:21 < othiym23> it bums me out
22:21  * isaacs prefers his existence to be less mere
22:21 < jesusabdullah> I mean, the biggest downside is choice
22:21 < jesusabdullah> othiym23: empire-building?
22:21 <@maxogden> yea like meteor
22:21 <@isaacs> jesusabdullah: when yo uhave a lot of choice, you just need to figure out ways for your tools to help you make choices.
22:22 < tjholowaychuk> people are attracted to things that do more for them because they naturally have to do less...
22:22 < othiym23> jesusabdullah: yeah, like geddy only more Railsy / heavy-duty
22:22 < tjholowaychuk> finding the right level that works for 90-ish% of the case
22:22  * isaacs wants a recommendation engine for starred npm packages eventually
22:22 < tjholowaychuk> is a reasonable goal
22:22 < jesusabdullah> isaacs: Sure. But you're familiar with the paradox of choice n' shit right?
22:22 < othiym23> don't wanna name names because some of the devs are friends of mine and I"m not immune to the allure of Not Invented Here, but Christ
22:22 < othiym23> so not what I construe Node to be all about
22:22 < jesusabdullah> othiym23: you can talk about me in front of me it's okay!
22:22 <@isaacs> othiym23: i think NIH is often a good thing.
22:22 < othiym23> haha
22:22 <@isaacs> no, srsly.
22:22 <@maxogden> i hear a lot of 'who cares if we ignore the patterns in core we are super popular' 
22:22 <@isaacs> NIH is only bad if the thing invented elsewhere is better.
22:23 < jesusabdullah> nodejitsu's totally gonna win this risk game
22:23 < othiym23> jesusabdullah: I am completely unafraid to talk shit about flatiron
22:23 < jesusabdullah> WIthOUT FLIPPING THE BOARD mind you
22:23 <@isaacs> but a lot of times, deciding to use a module is akin to taking ownership of it anyway
22:23 < othiym23> isaacs: I think that's what I'm saying
22:23 <@isaacs> othiym23: i've NIH'd a few things.
22:23 < othiym23> isaacs: sometimes it feels like 60% of npm is flow control libraries
22:23 <@isaacs> othiym23: more like 2%.  but yeah, that's a lot of percent.
22:23 <@maxogden> if popular modules felt like using node core modules i wouldnt have anything to complain about
22:24 < othiym23> I think maxogden has it
22:24 < tjholowaychuk> why do you think node is popular? it scratches an itch, other things also scratch itches... if you dont like them dont use them
22:24 < jesusabdullah> maxogden: elaborate?
22:24 < tjholowaychuk> node is much larger than most third-party modules
22:24 < tjholowaychuk> larger than all of them?
22:24 < tjholowaychuk> full of codesmell
22:24 < jesusabdullah> I mean
22:24 < tjholowaychuk> it's not the best solution for everything
22:24 < othiym23> it's like when popular authors suddenly decide they're gonna write a postapocalyptic science fiction novel
22:24 < tjholowaychuk> it's just one of them, who cares
22:24 < jesusabdullah> I'm gonna write a postapocalyptric scifi novel
22:24 < drudge> tj loves codesmell
22:24 < othiym23> and it's super boring and lame to science fiction fans because the author doesn't know what's already been done and doesn't know the idioms
22:25 < jesusabdullah> ah
22:25 < tjholowaychuk> i do, <3 me some callbacks
22:25 < jesusabdullah> you mean, when stephen king writes a post apocalyptic novel and it's just a shittier version of Dune
22:25 < othiym23> jesusabdullah: you *are* a postapocalyptic scifi novel
22:25 < othiym23> jesusabdullah: yeah, but I cut Stephen King a lot of slack because he knows his sf pretty well, all considered
22:26 < jesusabdullah> sure, sure
22:26 < jesusabdullah> bad example maybe XD
22:26 < othiym23> I was thinking more of Doris Lessing or *cough* Cormac McCarthy or whatever
22:26 < jesusabdullah> I never actually read any of his books, much less those ones
22:26 <@maxogden> id rather make node core smaller and less smelly than invent frameworks on top of frameworks to solve short term problems
22:27 < othiym23> yeah, choose a couple core abstractions and just make your system super super good at them
22:27 < tjholowaychuk> like being super bad at error handling
22:27 <@isaacs> tjholowaychuk: bad at error handling?
22:28 < othiym23> tjholowaychuk: now who's just being an asshole ;)
22:28 < tjholowaychuk> if (err) delegate... x50000
22:28 < jesusabdullah> HOLY SHIT
22:28 < tjholowaychuk> i like node but it has some serious problems
22:28 < tjholowaychuk> that people seem to ignore
22:28 < jesusabdullah> digg's being bought for a paltry 500,000
22:28 < darrenlooby> I've created a module using "exports". It basically runs my sending of data via POST. However, it seems to be timing out and stopping my app. Whilst, it seems that if I just duplicate my code inline - it doesn't seem to happen... any tips?
22:29 <@maxogden> jesusabdullah: wrong channel
22:29 < tjholowaychuk> and just bitch at other devs instead
22:29 < jesusabdullah> wrong channel??
22:29 < jesusabdullah> tbh I did mean to target the people I was already talking to
22:29 < holzp> darren: i hate to say it but permissions?
22:30 < chapel> heh
22:30 < chapel> tjholowaychuk: continuables?
22:30 < chapel> :P
22:30 < tjholowaychuk> no lol
22:30 < tjholowaychuk> definitely not
22:30 < chapel> what is your solution, if you have one?
22:30 < darrenlooby> Sorry, holzp I think I've not been clear. It works and cycles through. But, eventually my app will stop. However, I can leave it running for a long time without errors when its inline...
22:30 <@isaacs> tjholowaychuk: the delegate thing is a pita.  but most alternatives are worse, as far as i've seen.
22:31 < chapel> ooc
22:31 < tjholowaychuk> chapel the battle-tested ones that exist already
22:31 <@isaacs> tjholowaychuk: you can use domain.intercept() to move it all to one place.
22:31 < tjholowaychuk> light-weight threads
22:31 < othiym23> tjholowaychuk: my job pretty much requires me to confront Node's weaknesses on a daily basis, but some of them just seem unavoidable consequences of the design
22:31 <@isaacs> tjholowaychuk: but then that's just trading one boilerplat for another
22:31 < chapel> that doesn't solve error handling though?
22:31 <@isaacs> tjholowaychuk: generators might be nice.
22:31 < tjholowaychuk> yeah domains suck
22:31 <@isaacs> tjholowaychuk: have you used them?  they do solve a real problem.
22:31 < tjholowaychuk> chapel yes it does
22:31 < jesusabdullah> npm install express
22:31 < npmbro> jesusabdullah: Please see http://github.com/visionmedia/express#readme
22:31 < tjholowaychuk> isaacs they help a bit but it's still blanketing the codesmell
22:31 <@isaacs> tjholowaychuk: they're really not for callbacks.  they're for event emitters.
22:31 < chapel> Im not as familiar, so forgive my ignorance
22:32 < holzp> whats an example of a language with elegant error handling?
22:32 <@isaacs> tjholowaychuk: and for handling errors in event emitters, they're really nice
22:32 < tjholowaychuk> nice compared to what we have now perhaps
22:32 < creationix> what's wrong with (the terribly named) "continuables"?
22:32 <@isaacs> tjholowaychuk: nice compared to handling errors in browser JS, or in PHP
22:32 < jesusabdullah> creationix: "continuables" sounds like a rag-tag team of superhero kids
22:32 < othiym23> holzp: Haskell
22:33 < jesusabdullah> THE CONTINUABLES at 8/7ctl on FOX KIDS
22:33 < creationix> maybe better named "double shotgun promises"
22:33 < othiym23> the maybe monad and either monad are great strategies for propagating failure through an execution flow
22:33 < jesusabdullah> except that they're monadds
22:33 < creationix> "continuables" are like monads
22:33 < jesusabdullah> shhhh!
22:33 < creationix> but simple javascript closures
22:33 < othiym23> jesusabdullah: get over it, man, they're super useful, they just have a scary name
22:34 < jonpacker> monads? I think you mean warm fuzzy things.
22:34 < creationix> fs.readFile(arg1, arg2, ...)(callback, errback)
22:34 <@isaacs> anyone who says that programming wiht node's callbacks is like programming in C has never done asynchronous programming in C
22:34 < jesusabdullah> othiym23: I'm cool with the name, but when you have 1000+ blog posts trying to explain what they are, I think there's a problem.
22:34 < creationix> isaacs, no kidding
22:34 <@isaacs> Monad = "I am smarter than you, and celibate"
22:34 < othiym23> jesusabdullah: yeah, the problem is that hackers are scared of math, apparently
22:34 < jesusabdullah> I mean
22:34  * st_luke has never done asynchronous programming in c
22:34 < othiym23> isaacs: :p
22:35 <@isaacs> whether the celibacy is a depressing or monastic thing, will be resolved at a future date.  LAZILY.
22:35 < jesusabdullah> I'm not scared of math, I'm scared of people saying, "oh you don't need to know what a reader monad is to use it"
22:35 < chapel> I do async programming in javasCript
22:35 < jesusabdullah> "uhhhhh"
22:35 < chapel> :)
22:35 < creationix> isaacs, and I've only done libuv, it's one of the easier C callback based APIs
22:35  * isaacs see what i dud there
22:35 < jesusabdullah> "I'm not Just Writing This Down without asking questions"
22:35 < jesusabdullah> "okay, let's start at the beginning. 165 million years ago..."
22:35 <@isaacs> creationix: yeah
22:35 < SubStack> DINOSAURS ROAMED THE EARTH
22:36 < SubStack> including dinosaurs with HIND LEG WINGS http://i0.kym-cdn.com/photos/images/original/000/328/693/93c.jpg
22:36 < jesusabdullah> AND IT WAS AT THIS TIME THAT WE SAW THE EARLIEST ANCESTORS OF MONADS EMERGE
22:36 < creationix> SubStack, or what that another earth that exploded and reformed into our earth?
22:36 < jesusabdullah> SubStack: fuck yeah hind leg wings
22:36 <@isaacs> creationix: the continuables thing is kind of weird.  also, having two callbacks (one for error, one for succes) doubles the boilerplate
22:36 < jesusabdullah> also ARM FEATHERS
22:37 < SubStack> creationix: like in BSG with the cylon earth?
22:37 < jesusabdullah> I also do not like errbacks
22:37 < creationix> isaacs, it's slightly more overhead, but 10x more powerful
22:37 < creationix> and if you forget to write the errback, it throws when called
22:37 < distracteddev> So whats wrong with using something like metaprogramming, where you create a function from another fucntion. We do that all the time, why not just create your route functions by calling another function that inserts the boilerplate for you? Or is this just not reasonable in practcie?
22:37 < creationix> just like EventEmitter's magic "error" event
22:38 < jesusabdullah> I mean
22:38 < jesusabdullah> it's not THAT magical
22:38 < jesusabdullah> you shove errors over the error event by convention
22:38 < jesusabdullah> and handle them if you feel like it
22:38 < jonpacker> On Error Resume Next imo
22:38 < SubStack> distracteddev: that's just a common functional programming tactic
22:38 <@isaacs> creationix: eh.  i dunno.  most of the time that I find that the single cb is a pita, it's because i really ought to be using an event emitter.
22:38 < SubStack> not so much metaprogramming
22:39 <@isaacs> cb's are only a pita when you have to keep a lot of state around
22:39 <@isaacs> state is what OOP is for.
22:39 < SubStack> which I mostly hear related to punching class innards
22:39 <@isaacs> use objects.
22:39 < distracteddev> SubStack: Well pardon my terms, but why isnt this being used to handle inserting all of this boilerplate code?
22:39 < SubStack> distracteddev: it is?
22:39 <@maxogden> metaprogramming might solve some problems but the complexity cost far outweights the convenience (in ruby-land at least)
22:39 < jesusabdullah> isaacs: Would you use objects to implement iterative methods?
22:39 < SubStack> if you have boilerplate then you're pretty much doing abstraction wrong
22:39 <@isaacs> I think it's hilarious how you guys are all saying "metaprogramming" like you already know what the other one means when he says it.
22:39 < jesusabdullah> isaacs: on one hand, you have state, and you can just make your object update itself until whenever
22:40 <@isaacs> jesusabdullah: i mean, the typical xmas-tree-code.
22:40 < jesusabdullah> isaacs: otoh, like, the api you really want is, answer(inputs) so you'd end up creating the object internally, doing some shit, returning the answers and never using that object again
22:40 <@isaacs> jesusabdullah: the "oohh, wyah, callbacks are harrrddddd"
22:40 < jesusabdullah> lulz
22:40 <@isaacs> jesusabdullah: that program shoudl be an object.
22:40 < SubStack> maxogden: but it's easy, you just (class << obj; self; end).send(:define_method, 'foo', lambda {|x| x*10})
22:40 <@isaacs> jesusabdullah: and the object should keep its state around and stuff
22:40 <@maxogden> SubStack: :)
22:40 < SubStack> EIGEN CLASSES
22:41 < tjholowaychuk> callbacks aren't hard they're just unnecessary
22:41 < jesusabdullah> TRUE MACROS
22:41 < SubStack> come on you guys eigen classes are totes readable
22:41 < tjholowaychuk> so many languages / platforms solve this already
22:41 < SubStack> ruby is such a beautiful language
22:41 < jonpacker> "callbacks are hard" is the reason that 2% of npm is control flow modules :P
22:41 <@maxogden> async programming sucks is the reason node exists
22:41 < jesusabdullah> I think callbacks make a nice base abstraction
22:41 <@maxogden> lets port all the sucky abstractions into node now!
22:41 <@maxogden> oh wait...
22:41 < jesusabdullah> if you want different ones on top, gfi
22:41 < jesusabdullah> but, like
22:41 < chapel> callbacks are hard if you don't know what callbacks are :)
22:42 < jesusabdullah> we should push innovation to userspace, as innovating in your core is much more difficult.
22:42 < tjholowaychuk> jesusabdullah yeah as a base it's definitely fine
22:42 < jesusabdullah> Just look at python 3!
22:42 < jesusabdullah> I mean, python 3 has been out for years right, and nobody uses it because of tiny changes that are admittedly very good changes to make!
22:42 < jesusabdullah> but you have to do it wholesale
22:43 < SubStack> I want to use different versions of node in the same program
22:43 < distracteddev> isaacs: I didn't assume anyone know what  i mean, which is why I gave an example.
22:43 <@isaacs> distracteddev: sure.
22:43 < jesusabdullah> Yeah, I mean, node's not immune but it's not being too crazy about it right SubStack 
22:43 < CIA-93> node: Nathan Rajlich v0.8 * r713b924 / (2 files in 2 dirs): Revert "events: don't delete the listeners array in removeListener()" - http://git.io/wVGpJA
22:43 < SubStack> well SOME things seem kind of silly
22:44 < SubStack> fs.exists{,Sync}
22:44 < SubStack> what's up with that
22:44 < SubStack> just making more busywork for everybody
22:44 < othiym23> SubStack: ++
22:44 < jesusabdullah> but like that's one thing, not xty-y things like in python 3
22:45 < jesusabdullah> and like, python 3 has real utf8 strings now by default, which is the most sane thing to do but it breaks a whole bunch of stuff
22:45 < SubStack> I think if you're going to deprecate something like that for no reason you might as well make both versions available for a version BEFORE turning on the warning spam
22:45 < jesusabdullah> like, everything you would ever do with a string
22:45 < SubStack> put the warning spam in 0.9 and 0.10 seems ok, but 0.8 is too early
22:45 < jesusabdullah> whiner.
22:46 < jesusabdullah> NODE MOVES FAST SUBB RUBB YOU GOTTA KEEP UP
22:46 < jesusabdullah> OR ARE YOU SAYING YOU CAN'T HANG WITH THE BLEEDING EDGE
22:46 < SubStack> I would rather that node just stopped being iterated on altogether
22:46 < jesusabdullah> You keep saying that
22:46 < jesusabdullah> I don't think that's as good an idea as it sounds.
22:46 < SubStack> it's fine the way it is, let userspace take over
22:46 < creationix> function doAwesomeAsyncThing(has, many, args...) { return (cb, eb) { ... } }
22:46 < chapel> heh
22:46 <@isaacs> SubStack: yeah.  {path,fs}.exists{,Sync} is bullshit anyway
22:47 <@isaacs> SubStack: it's a lying liar
22:47 < chapel> SubStack just hates updating all his modules
22:47 < chapel> :P
22:47 < nlf> in his defense, that's a lot of modules
22:47 < SubStack> well everybody should hate having to update all their modules for no compelling reason
22:47 <@isaacs> also, i think we're pretty much donemaking people update crap for crappy reasons
22:47 < EhevuTov> write a module that updates your modules
22:47 < jonpacker> creationix: isn't that pretty much a future?
22:47 < jesusabdullah> It's cool chapel we'll just spam him with our bot until he complies
22:48 < chapel> jesusabdullah: :P
22:48 < creationix> jonpacker, sssh
22:48 < othiym23> that's half of the .5% of node modules that aren't flow control libraries!
22:48 < SubStack> othiym23: presently 1.18% of npm
22:48 <@isaacs> SubStack is the 1%
22:49 < distracteddev> isaacs: Hate to be a noob, but what is this syntax you are using?? "{path,fs}.exists{,Sync}"
22:49 <@isaacs> OCCUPY!!
22:49 <@isaacs> distracteddev: glob
22:49 <@isaacs> $ echo {path,fs}.exists{,Sync}
22:49 <@isaacs> path.exists path.existsSync fs.exists fs.existsSync
22:49 < othiym23> path.exists | path.existsSync | fs.exists | fs.existsSync
22:50 < distracteddev> So you are suggesting to have one fucntion but a flag for sync vs async? or just async only?
22:50 < jonpacker> he was just using it to indicate all the things he was talking about distracteddev :
22:50 <@isaacs> distracteddev: no, i'm saying that the exists function is bullshit.  sync or async doesn't matter.
22:50 <@isaacs> we should replace it with a function that unlinks the file, and then returns false.
22:50 < darrenlooby> Can anyone help me with this error? http://pastie.org/4246570
22:50 <@isaacs> NOTHING EXISTS ANYWHERE.
22:50 < creationix> jonpacker, functionally it's like a future/promise, except without all the extra syntax and library
22:51 < EhevuTov> we're 99.9999% space
22:51 < SubStack> isaacs: wrapping a try/catch around fs.statSync is pretty lame
22:51 <@isaacs> SubStack: especially since it might throw something other than ENOENT
22:51 <@isaacs> SubStack: ie, it might raise EPERM or EACCES
22:51 < creationix> what is the language returned multiple values and you could do things like success, value = fs.fooSync()
22:51 < jonpacker> creationix: but you don't need a library to do future/promise, you just do it the way you did it?
22:51 <@isaacs> creationix: we'll have that with destructuring
22:52 <@isaacs> creationix: var {success,value} = fooSync()
22:52 <@isaacs> creationix: you can't do multi-val as-is, because (success, value=fooSync()) is already valid js
22:52 <@isaacs> it's 2 statements, joined with a ,
22:52 <@isaacs> a=b , c=d
22:52 < creationix> I know, I was trolling
22:52 < creationix> that's one thing I like about lua
22:53 < othiym23> on the one hand, multiple return in Go is super nice
22:54 < tjholowaychuk> othiym23 go's module is much nicer
22:54 < tjholowaychuk> in most ways
22:54 < tjholowaychuk> model*
22:54 < tjholowaychuk> yikes, too much node
22:54 < othiym23> on the other, it's sort of hilarious the way some Go devs act like multiple return is an innovation and achievement on the same level as the invention of peanut butter
22:54 < tjholowaychuk> package up all your deps as a bin and ship it off <3
22:54 < tjholowaychuk> binary diffs
22:55 < othiym23> tjholowaychuk: I don't disagree, but it's more in the details of how they deal with error handling, and the way structural typing works
22:55 < distracteddev> isaacs: Still not sure why you hate exists, how else do you want to check if a file is at that location?
22:55 < creationix> distracteddev, fs.stat
22:55 < creationix> check the err.code
22:56 < creationix> that's how it's done at the system level I think
22:56 < fatAgnes> hey folks
22:56 < brainoncapitalis> Can anybody recommend a good online tutorial for node.js?
22:56 < gege> Hi guys, I'm a total newb, is there a recommended method to sync only *changes* to a large array over socket.io (and not have to write the logic myself)?
22:57 < distracteddev> creationix: thanks :)
22:57 < holzp> brain: if you are willing to put a few bucks down, o'reilly safari has a few on their service
22:57 < EhevuTov> gene I think there are actual specific modules for that (that might use socket.io)
22:57 < EhevuTov> gege ^
22:57 < fatAgnes> guys, anyone know a good IDE for nodjs programming?
22:57 < tjholowaychuk> othiym23 an event loop hands down has a place, but i think it's wrong if we try to convince everyone that node's way is the "best" way
22:57 < tjholowaychuk> simply because it has hype
22:57 < fatAgnes> guys, anyone know a good IDE for nodjs programming?
22:58 < distracteddev> fatAgnes: Cloud9 if you want a full IDE, or vim is you just need a text editor
22:58 < gege> EhvuTov: what should I google? I'm sure there's a word for it, just not sure what to look for
22:58 < DTrejo> fatAgnes: textmate, vim, sublimetext2, textedit
22:58 < distracteddev> never tried Node-Eclipse, so can't speak to that
22:58 < EhevuTov> distracteddev, does Cloud9 have a Node autocomplete?
22:58 < brainoncapitalis> thanks, holzp
22:58 < distracteddev> EhevuTov: I believe so
22:59 < DTrejo> autcocomplete is not that useful b/c everything is already pretty short to type. I just look at
22:59 < DTrejo> npm node
22:59 < npmbro> DTrejo: Please ctrl-f or cmd-f through the node docs at http://nodejs.org/docs/latest/api/all.html
22:59 < holzp> brain: if you pony up for early access you can do 'learning node' which is not bad
22:59 < EhevuTov> fatAgnes, I think you would like Cloud9
22:59 < DTrejo> whenever I have something I need to look up
22:59 < fatAgnes> Cloud9
22:59 < fatAgnes> ok
23:00 < SubStack> isaacs: existsSync could just throw those errors then
23:00 <@isaacs> SubStack: then why not use statSync?
23:00 < brainoncapitalis> holzp: thanks, I appreciate the tip. I'm very new to node, but my brother-in-law, Tim Caswell, suggested I learn it.
23:00 <@isaacs> SubStack: it already does throw those errors
23:00 < SubStack> because try/catch is annoying
23:00 < SubStack> probs this should just be a module
23:00 <@isaacs> SubStack: oh, you mean, throw anything other than ENOENT?
23:00 < holzp> np, im new to it too dude
23:00 < SubStack> yes
23:01 <@isaacs> SubStack: the thing is, you shouldn't ever call .exists() on anything
23:01 <@isaacs> SubStack: it's never the right decision.
23:01 <@isaacs> just try to do what you want to do.
23:01 <@isaacs> don't ask permission.
23:01 <@isaacs> by the time you get permission, it's out of date.
23:01 < SubStack> often you'll want to see if a file already exists
23:01 < EhevuTov> brainoncapitalis, I think creationix is in here
23:01 < SubStack> to decide whether you need to create it
23:01 <@isaacs> SubStack: no!!
23:01 <@isaacs> SubStack: just create it!
23:02 < SubStack> isaacs: that's silly
23:02 <@isaacs> SubStack: by the time you know if it exists, you should already assume that some other process has created it
23:02 < tjholowaychuk> if creating it has overhead (db etc)
23:02 < tjholowaychuk> then that sucks
23:02 <@isaacs> SubStack: create it, then handle the EEXIST if it fails
23:02 < SubStack> isaacs: consider configuration files
23:02 <@isaacs> SubStack: just open with O_NOCREAT
23:02 < SubStack> if it already exists you don't want to overwrite it!
23:02 <@isaacs> SubStack: or a+
23:02 < SubStack> fuck all that c noise
23:02 <@isaacs> SubStack: open it in the mode that means what you want.
23:02 < brainoncapitalis> who is creationix?
23:02 < EhevuTov> brainoncapitalis, Tim Casweel
23:02 < SubStack> isaacs: I don't ever want to specify a node ever
23:03 < SubStack> *mode
23:03 < brainoncapitalis> ohhh! ok
23:03 <@isaacs> SubStack: open it with r+
23:03 <@isaacs> SubStack: that opens for reading, but creates if it exists.
23:04 < brainoncapitalis> EhevuTov: Funny, I was just mentioning to Tim on Skype that someone on here had the same name as his website. lol
23:04 < EhevuTov> brainoncapitalis, he's a good guy. He sings a mean "Lollipop" by the Chordettes in karaoke
23:04 < SubStack> isaacs: if I need to perform an initialization process to generate a file if it doesn't exist, all of that doesn't work especially well
23:04 < SubStack> especially if the initialization phase needs to do i/o
23:04 < brainoncapitalis> lol
23:04 <@isaacs> SubStack: then open with just r, and handle the ENOENT
23:04 < SubStack> O_NOCREAT is gross
23:04 < SubStack> fuck that
23:04 <@isaacs> SubStack: well, it's really ~O_CREAT
23:05 < SubStack> see, it's even worse
23:05 < EhevuTov> I like the idea of not using .exists and instead just check the error. good call
23:05 < SubStack> you've been in c++ too much, it rots your aesthetic sense!
23:05 <@isaacs> SubStack: but these are all given friendly string identifiers
23:05 <@isaacs> just like in C
23:05 <@isaacs> SubStack: bah.
23:05 < othiym23> "friendly"
23:05 <@isaacs> SubStack: this is unix, man!
23:05 <@isaacs> r, r+, w, wx, a, you have it all!
23:06 <@isaacs> ok, i'm gonna run out for a bit
23:06  * SubStack tacos it up
23:10 < DTrejo> npm docs c
23:10 < npmbro> DTrejo: No results
23:57 < CIA-93> node: Ben Noordhuis v0.8 * racbfc40 / node.gyp : build: fix add-on loading on freebsd - http://git.io/7Bvjjg
23:57 < sven_oostenbrink> bnoordhuis: on Node 0.8.3-pre, which I installed yesterday, I keep having the  ../deps/uv/src/unix/stream.c:732: uv__stream_io: Assertion `!!(events & EV_READ) ^ !!(events & EV_WRITE)' failed, then dead node server :(
23:58 < bnoordhuis> sven_oostenbrink: you're the phoenixz guy, right?
--- Log closed Fri Jul 13 00:00:02 2012
