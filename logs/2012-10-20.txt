--- Log opened Sat Oct 20 00:00:39 2012
00:28 < kenperkins> what's the postgreSQL module du jour
00:57 < context> anyone know a good place to learn spone
00:57 < context> spine*
01:10 < AttackingHobo> how do I reset a buffer to nothing?
01:17 < LouisT> AttackingHobo: i would assume you just set the var with new Buffer() again or something
01:18 < AttackingHobo> That does not seem like a best practice type of way. Calling new in a main loop is something I like to avoid
01:18 < LouisT> AttackingHobo: true
01:22 < LouisT> AttackingHobo: the only thing i can seem to find would be this https://github.com/bnoordhuis/node-buffertools
01:28 < TooTallNate> AttackingHobo: calling "new"? I promise that will *never* be your bottleneck
01:28 < TooTallNate> besides, node creates "new" objects all the time
01:31 < context> hahaha
01:39 < AttackingHobo> TooTallNate: everytime you call "new" in your a main loop, a kitten dies
01:39 < TooTallNate> oh please
01:40 < TooTallNate> can you say "premature optimization"?
01:40 < chilts> I can ... but I don't like it :)
01:41 < chilts> I thought we were over the whole not doing stuff in the main loop (internal within the program) :)
01:41 < chilts> hitting the DB inside every loop maybe, and even then taking it out is too early until it's been profiled
01:41 < deoxxa> i try not to do anything in the main loop
01:41 < deoxxa> actually i don't have a main loop
01:41 < chilts> :)
01:41 < deoxxa> (true story)
01:42 < chilts> yeah, it'll more like a main event
01:42 < deoxxa> main loops are a performance drain
02:18 < jipiboily> hey
02:19 < jipiboily> node new comer here, where should I start? Is there any good resources every node dev uses?
02:30 < context> is there a way to see the versions of a module through the npm command
02:45 < deoxxa> jipiboily: http://nodejs.org/docs/latest/api/all.html
02:45 < deoxxa> jipiboily: and https://npmjs.org/
02:46 < jipiboily> thanks deoxxa :)
02:46 < deoxxa> jipiboily: you'll learn to love the `npm' command too
02:46 < deoxxa> 1) `npm search <something>' 2) ??? 3) profit!
02:46 < jipiboily> what is most used templating "language"?
02:47 < deoxxa> jade is popular, as is handlebars and plates and ejs
02:47 < deoxxa> all of them do things in completely different ways
02:47 < deoxxa> and there are a ton of different choices out there
02:47 < jipiboily> thanks, I'll take a look at it
02:47 < jipiboily> yeah, but I would prefer to go with one of the most known
02:48 < deoxxa> jade is like haml, handlebars is like mustache, plates is... well, different, and ejs is just "embedded javascript"
02:48 < deoxxa> jade is probably the most widely used, but it'd do you good to research your choices a bit first
02:48 < jipiboily> oh, jade sounds like the first I'll take a look at then
02:48 < jipiboily> sure, I'll check the four you just mentionned
02:49 < deoxxa> there are so many great libraries out there - the key is finding the one that works for you
02:50 < jipiboily> deoxxa exactly! That's already helping me, there is much to learn before knockout and so little time in my life for it! ;)
02:53 < context> anyone here use spine and know how to replace jqueryify with zeptoify :x
02:58 < AAA_awright> jipiboily: Just keep in mind not everyone uses npm. Definitely bookmark http://nodejs.org/docs/latest/api/all.html and make sure you're on GitHub.
02:59 < jipiboily> AAA_awright: thanks!
02:59 < jipiboily> I had a github account for a few years now...;)
02:59 < jipiboily> not new to programming but definetely to node
03:00 < context> not everyone uses npm? those people dont matter.
03:01 < Aria> Hehe. Unlike rubygems, I'm inclined to agree on the npm front
03:01 < AAA_awright> context: Software is what matters.
03:04 < AAA_awright> Something I pointed out is you'll quickly run into limitations if you want to mix universes. If I want to use non-Nodejs, ECMAScript packages, maybe requirejs, maybe other module systems
03:04 < AAA_awright> npm uses a single namespace and this always poses long-term growth problems
03:04 < AAA_awright> See: Drupal
03:05 < AAA_awright> I don't know why I'm always the one to run into these problems, maybe because I'm the one who actually pushes Node.js to its limits with stuff like cross-platform scripting
03:06 < clever> i recently ran into a weird problem with socket.io, but didnt bother to debug it too far
03:06 < clever> the distro had node 0.2
03:06 < clever> so i built it from source, and socket.io refused to work
03:06 < clever> i eventualy traced it to some array operations not doing what i expected
03:06 < clever> so i checked out the version my other hosts run, and rebuilt, works fine since
03:07 < clever> q
03:07  * clever stabs XOFF
03:08 < Aria> 0.2, eh?
03:08 < clever> Aria: yes, its so old, it didnt even have npm
03:08 < Aria> Heh, yeah.
03:08 < Aria> Ancient.
03:08 < clever> but upgrading to git master went too far, it didnt work properly
03:09 < clever> socket.io failed to detect the handshake url, and gave a generic reply
03:09 < clever> causing the client end to fail in weird ways
03:10 < AAA_awright> Why would it have npm?
03:11 < Aria> 'cause node does now.
03:11 < Aria> And has for a while.
03:11 < AAA_awright> It's not Node.js
03:11 < AAA_awright> Nor should it be in core.
03:11 < AAA_awright> I won't even pretend it does
03:11  * Aria shrugs. It's certainly cultivated an explosion of modules.
03:12 < AAA_awright> (1) How can you demonstrate that? (2) That doesn't make it "right"
03:12 < Aria> I do dislike the super flat namespace, but I think that there's enough flexibility to extend that in the future.
03:12 < AAA_awright> It's bloat. Period.
03:12 < AAA_awright> If we're talking about removing the http module from core, how does npm get to stay
03:12 < clever> Aria: ive been having some namespace issues with the REPL area
03:13 < clever> Aria: i cant access global variables of the main js file
03:13 < AAA_awright> context: There's no global variables in Node.js...?
03:13 < Aria> I'm not sure what it bloats, 'cept maybe your disk.
03:13 < AAA_awright> There's no global anything
03:13 < Aria> There's "global"
03:14 < clever> AAA_awright: ok, how to i access the variables defined in the top level of the first js file that runs
03:14 < AAA_awright> If you need a global anything, I'd use the process variable, not "global"
03:14 < AAA_awright> context: You can't
03:14 < Aria> !
03:14 < Aria> Why on earth?
03:14 < context> why do you keep saying my name
03:14 < clever> my idea was to access any 'global' variable thru REPL without having to expose it ahead of time
03:15 < Aria> clever: Instantiating the repl how?
03:15 < AAA_awright> context: Bah, you and clever appear exactly the same to my tab-complete and auto-color
03:15 < clever> Aria: last time, thru node-inspector
03:15 < context> global is bad mmmmmmKay
03:15 < AAA_awright> clever: clever: clever:
03:15 < Aria> Ah, interesting.
03:15 < clever> Aria: but i also used REPL directly, thru a custom tcp socket
03:16 < AAA_awright> Aria: Why on earth use process? Same reason you'd attach request-specific data to the request variable
03:16 < clever> it winds up accessing variables defined with repl.js, not the main file
03:16 < AAA_awright> It's a variable that's unique to that particular Node.js process, request, etc
03:16 < AAA_awright> global has no particular semantics associated with it
03:16 < Aria> clever: there's a useGlobla flag for the REPL
03:16 < clever> Aria: i turned it on, doesnt help
03:17 < clever> Aria: that makes it use the global of repl.js, rather then a private global
03:17 < clever> with that off, it has access to nothing at all
03:18 < Aria> clever: Hm. I'm not sure if node-inspector complicates this at all, but the global should be shared between those scopes.
03:18 < clever> AAA_awright: is the 'global' variable shared between modules at all?
03:19 < AAA_awright> I think so?
03:19 < Aria> AAA_awright: global has those exact same semantics.
03:19  * clever tries
03:19 < AAA_awright> It's not particularly well defined
03:19 < Aria> (as does anything you attach to it)
03:20 < clever> AAA_awright: yeah, that seems to work
03:20 < clever> just leaves me with the original problem, i can only access things i put in global to begin with
03:20 < trakowski77> Anyone can suggest a package that would allow me to read jpeg or png pixel by pixel ?
03:20 < Aria> clever: What else would be there?
03:20 < Aria> trakowski77: node-canvas?
03:20 < clever> Aria: all variables defined at the top leve, but not a property on 'global'
03:21 < clever> or does the top level automaticaly become part of 'global' hmmmm
03:21 < trakowski77> let me take a look
03:21 < clever> seems it doesnt
03:21 < clever> global.connectionsMade is undefined, and i have var connectionsMade = 0; in the top of the main file
03:22 < Aria> clever: It doesn't. Node runs everything inside a function.
03:22 < clever> Aria: is strict mode on?, how would it behave if i just dont declare the variable local?
03:22 < AAA_awright> Aria: It explicitly doesn't have the same semantics, global===GLOBAL===root===_ represents the variables accessible in the top scope. This is different than a single variable scoped to the current process, which is similar to the request variable scoped to a single HTTP request
03:22 < Aria> clever: No, strict mode is up to you, but I'd suggest global.foo = for clarity.
03:23 < clever> Aria: kk
03:23 < AAA_awright> Also, by definition, everything in ECMAScript runs inside a function
03:23 < Aria> AAA_awright: I don't see a difference.
03:23 < Aria> AAA_awright: Oh?
03:23 < clever> i have used (function () {...})() before to isolate globals in greasemonkey messes
03:24 < Aria> Indeed. Node does that internally.
03:24 < AAA_awright> Aria: Yeah, variable scopes are only created inside functions, so that makes sense. But you can check out the spec for yourself. It's why you can "return" inside a file, without being inside an explicit function(){} block
03:25 < Aria> What's a file in ECMAscript?
03:25 < AAA_awright> file.js/file.es/etc
03:25 < AAA_awright> A Node.js module file
03:25 < AAA_awright> <script src="thefile.js"/>
03:26 < AAA_awright> Create a file with just the contents "return", that's valid ES
03:27 < Aria> Sure.
03:27 < AAA_awright> Aria: If you specify "GLOBAL.someVar = new Whatever;" then you can use someVar in other modules without any sort of declaration of their value, so we don't know where the variable comes from. This is as opposed to calling process.someVar, because process is a variable defined by Node.js.
03:27 < Aria> Doesn't mean it's in a function context.
03:27 < AAA_awright> It does mean it's in a function context
03:27 < AAA_awright> All expressions are evaluated inside some function context
03:28 < Aria> I think you're putting a lot between the lines of section 10.2 there.
03:29 < Aria> Execution context and scope are not tied.
03:30 < Aria> (And a function introduces both.)
03:31 < AAA_awright> See also the V8 API
03:31 < AAA_awright> When you compile a VM, for instance
03:31 < Aria> Indeed. Those can be started separately.
03:33 < AAA_awright> And in the ES grammar a Program is defined differently than a FunctionBody but they have the same definition, namely, they're both aliases to SourceElements
03:34 < Aria> Yeah. They're lexically very close.
03:35 < AAA_awright> They're lexically identical. And even more, take a look at the definition for Function and eval.
03:36 < AAA_awright> They use the same API within V*
03:36 < AAA_awright> ... V8
03:36 < AAA_awright> Point is, a module is a function that's evaluated exactly once
03:36 < AAA_awright> per process
03:37 < Aria> Ayup. Clever, that.
03:39 < huangjs> I don't really understand the mounting path in express 3, why req.url is stripped?
03:40 < AAA_awright> (Unless eval is called as a "direct call" in which it's evaluated as an expression. wtfjs)
03:40 < trakowski77> Aria, I've installed Cairo. and node-canvas, and I'm trying to understand how to go about reading an image.jpg into an array of pixels with their colours. 
03:40 < nigelb> Hi! can anyone help me debug this error? I get it everyone I require('os') http://www.hastebin.com/jetodejesu.rb
03:41 < owen1> we should figure out a way to educate newcomers about building websites/apps without express/middleware - https://twitter.com/schteppe/status/259192165308186625   is there a good blog post/tutorial about doing that?
03:41 < nigelb> os.js does exist. so I'm confused what's going wrong
03:41 < AAA_awright> nigelb: Maybe there's no such module as os?
03:41 < mscdex> nigelb: you have an old node version?
03:41 < mscdex> nigelb: what version are you running?
03:41 < AAA_awright> nigelb: Do you have it placed somewhere in the Node.js module path?
03:42 < Aria> trakowski77: https://developer.mozilla.org/en-US/docs/HTML/Canvas/Pixel_manipulation_with_canvas
03:42 < AAA_awright> nigelb: e.g. try require('./os.js'); if it's a file you're distributing with your application
03:44 < nigelb> AAA_awright: isn't os.js part of standard install?
03:45 < nigelb> mscdex: Probably. Let me find out.
03:45 < nigelb> mscdex: 0.2.5
03:45 < AAA_awright> nigelb: Which module are you talking about? There's potentially a lot of modules named 'os'
03:45 < mscdex> yep that's why
03:45 < mscdex> :-)
03:45 < mscdex> 0.2.5 is ancient
03:45 < nigelb> haha, ok
03:45 < nigelb> :)
03:46 < AAA_awright> Or that
03:46 < clever> i had the same problem just last week, had to upgrade via git
03:46 < nigelb> AAA_awright: This error is thrown everytime I try to run lessc
03:46 < AAA_awright> You said you had os.js which was confusing
03:46 < mscdex> i hope the only people running 0.2.x anymore are those running webos 2.x ;-)
03:46 < nigelb> Oh I meant /usr/lib/nodejs/os.js :)
03:51 < nigelb> mscdex: Arg. I found out the main cuse.
03:51 < nigelb> *cause
03:51 < nigelb> I had node in /usr/local/bin/ and the one from the ppa
03:51 < nigelb> the ppa version was newer, but the usr/local/bin one was getting picked up.
03:55 < mscdex> :O
03:56 < nigelb> and it works \o/ 
03:59 < samholmes> hwo do I check if a file returned in the fs.readdir files callback argument is a directory or an file?
04:01 < deoxxa> samholmes: fs.stat?
04:02 < samholmes> I guess. :/
04:04 < deoxxa> well... that's just... how you do it
04:04 < deoxxa> everywhere
04:12 < chovy> any companies in silicon valley using node.js that don't have a slave driver mentality when it comes to engineering?
04:14 < samholmes> how do I change the stdout in a way where I can display a progress bar or something that changes like that?
04:15 < vortexx> are there any google hangout like projects in node.js and socket.io?
04:16 < samholmes> vortexx: no
04:16 < LouisT> samholmes: that you know of
04:16 < samholmes> LouisT: No, I know all things.
04:18 < vortexx> so is that just too tricky for node and socket?
04:18 < LouisT> vortexx: i really doubt it
04:18 < LouisT> i'm sure node could do it just fine, as long as the code isn't horrible
04:25 < trypwire> is anyone here familiar with gruntjs? is it possible to concat my files into file X, then minify file X to file Y, then delete file X?
04:28 < gkatsev> trypwire: there's #gruntjs :)
04:28 < trypwire> gkatsev: :) thanks. didn't know about that
04:29 < gkatsev> trypwire: also, yes, it is possible to concat the files into X, minify into Y and delete X :)
04:30 < trypwire> gkatsev: nobody's in #gruntjs : /. do you kno whow to do it?
04:30 < gkatsev> er, maybe it was grunt.js?
04:30 < gkatsev> nope, hm...
04:31 < gkatsev> trypwire: OH! it's just #grunt, lol
04:31 < trypwire> ah ;). yes it is. thanks!
04:31 < gkatsev> np
04:40 < niggler> wtf is grunt
04:41 < gkatsev> niggler: gruntjs.com
04:41 < gkatsev> "task-based command line build tool for JavaScript projects"
04:41 < gkatsev> it's awesome
04:42 < niggler> can this replace gyp?
04:43 < gkatsev> that isn't the point of grunt
04:43 < niggler> ah
04:44 < gkatsev> but say you had a module that needed to be built with gyp and then had to have some js minified or something, you can make a grunt task to do it so that you can run both with one command
04:52 < samholmes> Anyone here experienced in using S3 online?
04:52 < samholmes> AWS S3 *
04:59 < samholmes> Anyone have good suggestions on this topic? http://stackoverflow.com/questions/12985397/using-aws-s3-for-photo-storage
05:01 < RLa> samholmes, and don't forget retina display users :)
05:01 < timeturner> samholmes: http://vimeo.com/43380478
05:02 < timeturner> felix shows the code for this exact problem
05:02 < timeturner> long story short: check memory cache (can store in redis as well) if image with specified image exists else create a new scaled image and store it in memory
05:03 < timeturner> that way you can store an infinite number of possibilities as needed
05:03 < RLa> uuh, infinite storage
05:03 < timeturner> ok not infinite lol
05:04 < timeturner> but it adds as needed
05:04 < timeturner> obviously you have to implement the caps and stuff as well
05:04 < RLa> hm, i would just create "standard" sizes and upload them all to s3
05:05 < RLa> you can do minor resizing at the client too
05:22 < samholmes> RLa: That's what I was thinking of doing. What's mirror resizing?
05:23 < samholmes> timeturner: I have this sort of thing on my app right now, but how do I write this for S3?
05:30 < RLa> samholmes, like if you need img with width 700px you can take 800px one and scale on the client
05:31 < owen1> we should figure out a way to educate newcomers about building websites/apps without express/middleware - https://twitter.com/schteppe/status/259192165308186625   is there a good blog post/tutorial about doing that or is my best option is to understand the codebase of https://github.com/isaacs/npm-www ?
05:31 < RLa> samholmes, i guess you need a script to upload to s3
05:32 < samholmes> RLa: timeturner was talking about making a script that resizes on demand so I could get any size I wanted.
05:33 < samholmes> RLa: I don't see how I could do this with S3 without streaming files from S3 through my server (thus eating bandwidth on my server, and not using S3's, so what's the point of that?)
05:36 < samholmes> RLa: Do you understand?
05:36 < defaultro> hey guys, we have an existing javascript web application. I'm very new to node.js. Will it be a problem to insert nodejs code to our javascript/jquery code?
05:36 < defaultro> I just read about i18next and looks like it uses nodejs
05:36 < samholmes> defaultro: well, nodejs code is on the server, jquery is on the client..
05:36 < defaultro> got it
05:37 < samholmes> So, two separate environments.
05:37 < defaultro> what I would like to do is have our new website support multiple natural language support
05:37 < defaultro> currently in our old website, we have text files which contains "title":"The Website" as an example
05:38 < defaultro> then we use php and kohana to load the text files
05:38 < defaultro> however, our new website is about 95% javascript/jquery code
05:42 < RLa> samholmes, yes i do, that's why i had picked the solution with static sizes and some client-side resizing
05:42 < RLa> also, image files can be large and thus eat ram
05:42 < samholmes> RLa: You've actually had experience doing this?
05:43 < RLa> i haven't used s3 but i have done dynamic resizing
05:44 < RLa> it will just eat cpu or ram or both
05:44 < samholmes> If I went with timeturner's suggestion you mean?
05:44 < RLa> yes, but you have to make decision
05:45 < samholmes> Well, I think it's perfectly fine to make several standard sizes pre-cached and then resized as needed on the client.
05:45 < RLa> dynamic resizing and caching in ram would work if you have "hot" images that get accessed a lot in different sizes
05:46 < samholmes> I don't think my size variance is to great to require dynamic resizing.
05:47 < samholmes> Plus, think of the exploit users would have; they would be able to cache a lot of different sizes if they were to send the correct dimension parameters.
05:47 < samholmes> Whether I cached them in RAM or S3, it wouldn't be pretty.
05:47 < samholmes> I've decided on a static set of dimensions.
05:47 < samholmes> However, where do I do the resizing?
05:48 < samholmes> I would need a separate process or worker or something?
05:48 < samholmes> Surely, I shouldn't do the resizing in my app like I currently am doing.
05:48 < samholmes> Maybe I just need to finish watching felix
05:48 < RLa> yeah
05:48 < RLa> maybe you get some better idea
05:49 < RLa> i guess resizing is cpu intensive
05:49 < RLa> would be nice to offload it to some external process or thread
05:51 < RLa> hackish solution would be to run n copies of mogrify where n is the number of different resolutions
06:03 < letchik> hi. help me plz. i'm trying to send a file to nodejs tcp server. all ok, but when i'm trying to fetch it using socket.on('data',func), func recieves parts of buffer sliced with 8kb or 16kb and raises few times. how can i fix it?
06:05 < mscdex> letchik: correct, 'data' can be emitted multiple times and you have to handle that
06:06 < mscdex> letchik: what are you ultimately doing with the incoming data? saving it to a file on the hard disk?
06:06 < letchik> it's not a file at all. so, there is a json with some params and a file with base64 encoding
06:07 < letchik> depends on params i have to save file and make something
06:08 < mscdex> ok, so if it's all text, then just create a string and concatenate the chunk on 'data'
06:09 < letchik> you mean i have to create a global buffer and copy data to it?
06:09 < mscdex> not global
06:10 < letchik> oh, understand. i'll try.
06:11 < mscdex> letchik: https://gist.github.com/1683db73fce1a3f6b4e7
06:11 < mscdex> either that or use a streaming JSON parser if you want to do it that way
06:17 < Tixz> I'm writing a little "Template engine" to precompile hogan templates and write them to files. I'd like to write to a log every time a file is red or compile/written. What's the best way to do this? 
06:17 < Tixz> I've beenusing console.log so far, but is there a better way?
06:19 < letchik> mscdex: it works! thank you
07:06 < jarek> Hi
07:06 < jarek> is there a library that would allow me to get codes statistics such as total number of lines or number objects?
07:10 < RLa> jarek, does it have to be written in js?
07:10 < jarek> RLa: it could be bash script I guess
07:11 < jarek> but I can't imagine counting objects without JS
07:12 < RLa> hm, there's ohcount for general source statistics
07:12 < RLa> what you mean by objects anyway?
07:13 < RLa> there's also esprima which you could use to extract specific patterns from the code
07:14 < jarek> RLa: I mean I would like to could the total amount of object literals in my code
07:17 < RLa> jarek, so everything between {} that is an object not a code block?
07:17 < RLa> how would nested objects count
07:17 < samholmes> So how would I offload my resizing script to a separate process?
07:18 < jarek> RLa: I don't want to count nested objects
07:18 < samholmes> If I do offload it to another process, I would need to wait on this resizing script, so that I can do some database stuff and respond to the HTTP requestion and what have you.
07:19 < RLa> samholmes, if it's a script you could use async exec
07:19 < samholmes> async exec?
07:21 < RLa> http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
07:23 < etcetera> do any of you  use github's post service hook to auto deploy?
07:28 < etcetera> anyone?
07:29 < etcetera> seems kind of insecure.
07:36 < deoxxa> etcetera: it's secure as long as you make sure the connection comes from github
07:36 < etcetera> deoxxa: noticed that you can also pass a url that has a username and password.
07:36 < etcetera> deoxxa: but yes, you need to whitelist their apis.
07:36 < etcetera> erm, IPs
07:41 < clever> etcetera: paypal does something similar, but with a lot of extra security
07:41 < clever> etcetera: basicaly, your callback must http post the arguments back to them, over https
07:41 < clever> and they will verify if its valid or not
07:42 < etcetera> interesting.
07:42 < clever> so all of the security is hanging off the ssl cert for paypal, via https
07:43 < clever> thats also what handles the retry stuff
07:43 < clever> if you dont verify the data, it assumes you crashed, and does a retry
07:46 < RLa> paypal does it right
07:47 < RLa> signing itself is not enough because signed response can be captured and sent again resulting in multiple payments
07:48 < clever> the paypal sandbox also sets an extra argument, which requires you to use a different host for that https call
07:48 < clever> so if somebody opens the sandbox (lets you generate fake payments), they arent valid enless your code knows about the sandbox
07:48 < clever> at which point, they aint valid!
07:48 < clever> in my case, i have a special flag in the DB to mark them as sandbox tests
07:49 < RLa> haha, i have secret url variable to enable sandbox
07:50 < clever> i just store all the sandbox payments to the db, and most querys WHERE them out
07:50 < clever> only thing i need to test is the callback itself
07:51 < redss> Can someone tell me what frameworks for SASS / SCSS work well with node.js?
07:53 < RLa> stylus? :)
08:02 < redss> RLa - I mean NOT stylus, but SASS / SCSS
08:03 < redss> I know the fluidity framework is based on stylus
08:51 < southvito> I have a problem compiling and configuring node. I have python 3.3 installed. I've read I had to use export PYTHON=`which python2`, but I'm not sure how to use this.
08:54 < AAA_awright> Why is Node.js still using python
08:54 < AAA_awright> If it wasn't an insult back in 0.2 it is now
08:54 < prrashi> hi
08:54 < AAA_awright> southvito: That's literally a command you run...
08:55 < prrashi> nodejs is awsome
08:55 < southvito> Wow... i'll try it
08:55 < AAA_awright> or `PYTHON=/usr/bin/python2.7 make` or something like that
08:57 < southvito> AAA_awright: the command you've posted gives me an error: 'NameError: global name 'file' is not defined '
09:17 < wockan> Helloo
09:20 < Aartsie> i added a file and when i changed the file and want to commit it to git i have to add it first ?
09:21 < deoxxa> yyyyes
09:21 < wockan> has anyone had any experiance with neo4j and node.js?
09:22 < Aartsie> deoxxa: so i have to stage it first
09:22 < deoxxa> Aartsie: yep
09:41 < dileep> node.js 
09:42 < dileep> i want to set up form and want to request come back from the server
09:43 < dileep> anybody is there tto help me
09:54 < wockan> dileep you want a html form to make a POST to the server and get data back?
09:58 < aandy> wockan: a little, yeah
10:00 < wockan> Did you use the rest interface or did you do something else?
10:00 < wockan> aadny
10:00 < aandy> i used a module from npm, which i think was a rest wrapper yeah
10:01 < wockan> hmm okej
10:01 < wockan> well the performance is quite bad
10:01 < aandy> about 500ms cold start on all queries
10:01 < aandy> yeah
10:01 < wockan> so i did a java neo4j connector
10:01 < wockan> as you can use cypher to do everything else
10:02 < wockan> i hoped there was something else ... :s
10:02 < aandy> there is another interface, tcp directly
10:02 < wockan> yeah?
10:02 < aandy> i don't know what it takes, gremlin/cypher or something else
10:02 < wockan> hmm ill check that out
10:02 < wockan> because i did my own tcp directly
10:03 < aandy> docs aren't that properly done
10:03 < aandy> ill see if i can find the reference
10:05 < wockan> oki :9
10:06 < aandy> wockan: have you looked at alternatives? i've been looking a bit at Titan lately, but haven't set it up big yet (with proper backend)
10:07 < aandy> i can't really see myself using neo4j when it does not scale at all
10:07 < aandy> or orientdb?
10:08 < wockan> havent really used orientdb
10:08 < wockan> neo4j not scaleable?
10:09 < aandy> nope. you can shard it yourself, but then you'd have to split up paths yourself
10:10 < wockan> yeah true
10:11 < aandy> that's why i looked at Titan where you can put your nodes in "any" db, like cassandra and distribute it like that
10:11 < aandy> but it does seem rather new. all specs built on the blueprint though
10:11 < aandy> http://thinkaurelius.github.com/titan/
10:12 < wockan> is it production ready?
10:13 < aandy> "yes"
10:13 < wockan> hehe
10:13 < aandy> it is used in production 
10:14 < aandy> if that's what you mean, hehe
10:14 < wockan> yea 
10:14 < aandy> is it as used as neo4j? probably not
10:14 < aandy> but then again, i have no idea how used any of the graph dbs are
10:14 < wockan> well they are quite "new"
10:14 < wockan> every graphdb
10:14 < aandy> orientdb looks very mature, but i had a pain setting it up
10:15 < wockan> does titan use rest or "direct tcp" 
10:15 < aandy> so for me, "i can use cassandra", "it can scale" and as long as it uses the standards (like gremlin), that was it for me, hehe
10:15 < aandy> well, both
10:15 < aandy> you can open a gremlin shell directly
10:16 < wockan> oki
10:17 < aandy> you can probably also be the author of the first node-titan, as i doubt there's something for it yet
10:17 < aandy> :)
10:17 < wockan> yay :P
10:18 < aandy> hmm, there doesn't seem to be a gremlin library either. odd
10:18 < wockan> no?
10:18 < aandy> but well, it's not that different from connecting to a sql server and writing "select * from ..". you just write gremlin instead :)
10:19 < wockan> ive just learned cypher... :P
10:19 < wockan> for neo4j
10:19 < wockan> omg will this ever stop... :D
10:19 < wockan> ;)
10:20 < aandy> then go with neo4j. cypher is their language, and i don't think anyone else uses it
10:20 < wockan> yeah
10:21 < wockan> right now i got nginx -> node.js (rest) -> java connector with neo4j 
10:21 < aandy> your app goes through nginx?
10:21 < aandy> i mean, when you talk to neo4j
10:22 < wockan> im talking node.js (rest) - CYPHER -> neo4j
10:22 < wockan> im not sending query through nginx
10:22 < wockan> its for load balancer
10:22 < wockan> and static stuff
10:23 < wockan> still work in progress
10:24 < aandy> ah okay, good good :)
10:24 < wockan> brb
10:27 < wockan> back again
10:28 < very> i have two commands. node and nodejs. i don't even know why. is there a difference?
10:29 < wockan> aandy, what project do you have in production?
10:31 < aandy> an image stream. i use graphs to control users feeds and store meta data for the pictures. not the most elaborate use of a graph db :p
10:32 < wockan> okej cool. 
10:32 < wockan> how many users ?
10:32 < aandy> and then i'm working on a stock portfolio scheme, but that's still in the works. just toying around with graph dbs
10:33 < aandy> 4 hehe
10:33 < wockan> but thats cool :)
10:33 < aandy> it's just a weekend hack thing
10:33 < wockan> right now i got zero in production
10:33 < aandy> what are you up to with graphs?
10:33 < wockan> yeah 
10:34 < wockan> im creating a "social network" (so original)... but its a nich for a community
10:34 < aandy> nice. lots of interesting questions that can be answered with graphs
10:34 < wockan> yeah i know
10:34 < aandy> how many of my IDIOT FRIENDS have click this youtube link
10:34 < aandy> or.. you know.. something else
10:34 < wockan> heheh
10:35 < wockan> oh and i will use mongodb for files
10:35 < aandy> but its funny with graphs, once you start thinking of other structures in such a way, with nodes (objects) and relationships
10:35 < aandy> just make sure you use 64bit then ;)
10:36 < wockan> hehe i know the feeling :D
10:36 < wockan> :d
10:36 < wockan> where have you hosted your projects ?
10:36 < wockan> garage or some cloud service?
10:37 < aandy> little bit of both. i have some on ec2, but when i'm building/toying around i use a couple of machine i have access to
10:37 < wockan> oki
10:37 < aandy> like the 4 user site. doesn't need to be cloud based, hehe
10:37 < aandy> i think i can handle the load
10:37 < wockan> No you cant!! :P
10:37 < wockan> yeah i guess
10:38 < aandy> well at some point maybe not. i am serving the images also, but.. yeah. for now 
10:38 < wockan> how do you handle images 
10:38 < wockan> from local storage?
10:38 < aandy> yeah, nothing fancy
10:38 < wockan> oki
10:38 < wockan> hows the locking?
10:40 < wockan> if multiple users want the same file
10:40 < aandy> but thats the advantage of storing the meta data. i could swap it for a cdn in a couple of minutes
10:40 < wockan> true
10:40 < aandy> i haven't stressed tested it. so far no problem, (linux filesystem)
10:41 < aandy> my (irrational) thinking was, that if i needed to stress test it, i would probably put the static files in a db or make better use of caching
10:41 < aandy> and that was way out of my 1 day budget of time :p
10:42 < wockan> pre optimizing and pre looking to far into the future is hell
10:42 < wockan> it will never get you up and running
10:43 < aandy> hehe
10:44 < wockan> so do you normally work with programming?
10:45 < aandy> i spend the time on some sorting algorithms instead. like inversing the weibull CDF to make a stream of random images, with a bias towards newer images
10:46 < aandy> no
10:46 < aandy> just hobby
10:46 < wockan> oki oki
10:46 < wockan> :)
10:46 < very> what is the difference between node and nodejs?
10:47 < wockan> dunno
10:47 < wockan> its the same version and everything
10:48 < wockan> propobly liked to the same "executer"
10:48 < ashnur> mornin
10:48 < wockan> probably*
10:48 < RLa> very, where?
10:48 < ashnur> wires: have you saw the response? :D https://github.com/dominictarr/JSONStream/issues/22
10:48 < ashnur> quite funny
10:48 < very> for me `node -v` returns v0.5.11-pre and `nodejs -v` returns v0.8.12
10:49 < wockan> for me its the same
10:49 < RLa> very, on debian there was a naming conflict
10:49 < RLa> very, how you installed 0.8?
10:49 < very> i installed 0.8 from the chris-lea repo with apt-get
10:50 < very> and i think i installed 0.5 with ubuntu repo
10:50 < RLa> very, check where node binary points and remove the directory, that removes npm and modules with it
10:50 < RLa> then symlink nodejs to node
10:50 < RLa> unless they provide separate package to do that automatically
10:52 < RLa> check if there is nodejs-legacy package
10:53 < RLa> very, http://lists.debian.org/debian-ctte/2012/07/msg00074.html
10:53 < RLa> very, if you install from source, you will get node command of course
10:54 < very> ah.. i think i have downloaded the old version manually
10:56 < very> with git.
10:57 < RLa> very, from source it installs to /usr/local/lib/node with default prefix
10:57 < RLa> removing the directory uninstalls it
10:57 < RLa> but you need to fix symlinks too
10:58 < very> yes, there is a folder named wafadmin in /usr/local/lib/node
10:58 < RLa> remove whole /usr/local/lib/node
10:58 < RLa> packaged version probably installs to /usr/lib/node
11:00 < deoxxa> my life with node became a lot simpler after i decided not to have a global install
11:00 < deoxxa> i just have everything installed in ~/local/node/versions/<version>
11:01 < deoxxa> with ~/local/node/current linked to whatever version i want to be "global" (accessible by typing "node")
11:01 < RLa> or just do one global install that you just upgrade (no multiple versions)
11:01 < RLa> and from source
11:01 < RLa> in case you need quick fix that is not in repo yet
11:01 < deoxxa> yeah sure, then every single time you upgrade node you have to go through and re-test everything you have deployed
11:01 < deoxxa> good idea!
11:01 < deoxxa> that sounds like it'll save -heaps- of time
11:02 < very> i try to remove every trace of node now before installing it new.
11:02 < deoxxa> i manage a bunch of node deployments, this isn't just some theoretical discussion on my part, RLa
11:03 < RLa> you do same even on dev machine?
11:03 < deoxxa> yes, because it means i have the same versions (same binaries in fact) available from production to test with
11:04 < RLa> i think over time you will have gazillion different versions to have there :)
11:04 < deoxxa> yes
11:04 < deoxxa> but that's not a problem
11:04 < deoxxa> and i think your suggestion of "just do one global install that you just upgrade" is silly
11:06 < deoxxa> also means i can really easily switch my node environment to a clean one for a specific project and make sure there are no contaminants from other things
11:07 < deoxxa> so i'd love to hear why having a single install is better/easier than that
11:07  * deoxxa waits
11:09 < very> deleted and uninstalled everything. still have a node executable in /usr/local/bin
11:10 < very> i hope i can safely delete this file too
11:11 < very> is node just a single file?
11:11 < deoxxa> very: the executable is, yes
11:11 < deoxxa> very: you might have an `npm' file as well
11:11 < RLa> very, first run stat /usr/local/bin/node
11:11 < deoxxa> very: and possibly a bunch of links to various module executables
11:11 < yawnt> yo deoxxa 
11:12 < RLa> to see if it's symlink
11:12 < deoxxa> hey yawnt
11:12 < yawnt> DON'T TALK BOUT SYMLINKS
11:12 < yawnt> GRRR
11:12 < deoxxa> haha
11:12 < yawnt> no really
11:12 < RLa> i actually had bug with them today too
11:12 < very> when i try to create symlinks i typically overwrite the actual file with the symlink.
11:13 < RLa> lol
11:13 < yawnt> yeah
11:13 < yawnt> happens to me too
11:13 < yawnt> never learned if the first arg is the symlink or the existing one
11:13 < yawnt> :D
11:13 < RLa> i finally managed to learn that
11:13 < very> /usr/local/bin/node seems to be the actual file.
11:14 < RLa> that's interesting
11:14 < wockan> symlinks are nice :(
11:14 < deoxxa> that's what node does
11:14 < deoxxa> it copies the file
11:14 < very> and there is a node-waf configuration file.
11:14 < deoxxa> yep, get rid of all that
11:16 < very> great, i think my system is node-free now.
11:17 < very> thanks everyone :)
11:18 < very> oh.. except the symlink. no clue where to look for it.
11:18 < deoxxa> what symlink
11:18 < aandy> try # which node and # which nodejs
11:19 < very> when i enter `node` it says `/usr/local/bin/node: No such file or directory`
11:20 < aandy> # rm `which node`
11:20 < aandy> should remove your symlink
11:20 < very> `which node` prints nothing
11:20 < deoxxa> or maybe you just need to close/open your terminal
11:20 < deoxxa> probably has the path cached
11:20 < aandy> yeah
11:21 < very> yes :)
11:21 < very> it worked
11:21 < aandy> now that you're node free... you're free to install node again! :)
11:24 < deoxxa> mkdir -p ${HOME}/local/node/versions/0.8.12; curl http://nodejs.org/dist/latest/node-v0.8.12-linux-x86.tar.gz | tar xzf -C ${HOME}/local/node/versions/0.8.12; ln -s ${HOME}/local/node/versions/0.8.12 ${HOME}/local/node/current; echo 'PATH="${HOME}/local/node/current/bin:${PATH}"' >> ~/.profile; . ~/.profile;
11:24 < deoxxa> something like that
11:30 < [ric]> got a complete noob question, sorry for this, but I installed the windows .msi file from the node.js website and after successful installation I can run the node application but can't seem to get the server running/responding
11:31 < SomeoneWeird> show us some code
11:31 < SomeoneWeird> :)
11:31 < [ric]> I am on Win7 x64 if that's any assistance. I copied a sample script from the website, I'll pass on a link
11:31 < [ric]> http://nodejs.org/api/synopsis.html
11:31 < [ric]> this one
11:32 < [ric]> took the content, saved it as a js, opened cmd, cd'ed to the .js directory, ran "node test.js" and the window rewarded me by 3 dots and nothing else
11:32 < [ric]> If i try the localhost on port 8124 I'm given an error response from the browser
11:33 < SomeoneWeird> what error?
11:33 < SomeoneWeird> cant connect?
11:33 < [ric]> it's clear I'm doing something f*cking stupid, so stupid you would wonder whether I can walk and chew gum, just need to figure it out
11:33 < [ric]> yeh no connect
11:33 < [ric]> Oops! Google Chrome could not connect to 127.0.0.1:8124
11:34 < [ric]> I'm no n00b when it comes to script, just can't figure out why the standard msi installer and a very basic script don't seem to be working
11:35 < SomeoneWeird> it should be
11:35 < [ric]> should be connecting?
11:35 < aandy> wockan: one of the advantages of new graph dbs: novelty presentations. http://www.slideshare.net/knowfrominfo/titan-big-graph-data-with-cassandra/20
11:35 < aandy> "How to deal with Father issues" haha
11:37 < deltab> [ric]: what happens if you type something in?
11:38 < [ric]> I tell you what's happened, and I am sorry for wasting your time here guys
11:38 < [ric]> but the firewall event didn't pop up the first time
11:38 < [ric]> it now had
11:38 < [ric]> *has
11:39 < [ric]> even thought it's going through the localhost it still hits the firewall
11:39 < [ric]> for some readon Win7 didn't pick that up the first couple of times I ran the script
11:39 < [ric]> it just kicked in now and I've allowed the access, the cmd line now states it's running 
11:39 < deltab> good to know, thanks
11:40 < [ric]> thank you deltab and SomeoneWeird 
11:40 < [ric]> apologies for Win7 being a c*nt
11:40 < SomeoneWeird> :)
11:43 < iKoALa> 1
12:07 < wockan> aandy: thx goona read
12:09 < aandy> interesting read for their benchmarks
12:10 < aandy> funny to think of how they run such a scaled network at 11$/h, that's 100k a year. then add staff etc. i sure hope twitter makes more than 0.002 $ per user :D
12:10 < wockan> :D
12:11 < trakowski77> hi
12:12 < wockan> i bet they do get a lot of money :)
12:12 < trakowski77> I'm testing this module
12:13 < trakowski77> https://github.com/LearnBoost/node-canvas
12:13 < wockan> hi
12:13 < trakowski77> I need to load an image and read all it's pixels data
12:14 < trakowski77> I'm following whatever I can find in Readme.md 
12:15 < trakowski77> but it appears to fail 
12:15 < trakowski77> http://pastebin.com/tq1xETdC
12:15 < trakowski77> that's my code
12:15 < aandy> wockan: there are cheaper setups than aws, and you can run fewer nodes etc., but still interesting to get a "ball park" for running a really big network :)
12:16 < aandy> i bet you can get really good performance on yours with even just one server starting out, hehe
12:16 < wockan> aws is for the services you get
12:16 < aandy> ec2*
12:16 < wockan> there are better cloud services (performance/money)
12:16 < wockan> but you get a lot of other stuff
12:17 < aandy> sure
12:17 < aandy> a friend of mine worked for rackspace and tried to make a sales pitch
12:17 < aandy> sure lower costs for the basics
12:17 < aandy> but after adding to make it equivalent to the aws setup
12:17 < aandy> it was the same or more
12:17 < aandy> :P
12:17 < wockan> :D
12:17 < aandy> so yeah, depends what you need exactly
12:18 < wockan> yep
12:18 < wockan> working with the nodejs tcp socket
12:19 < wockan> its different :D
12:19 < wockan> from what im use to. less code
12:19 < aandy> :)
12:20 < wockan> tho i get a error .. :S
12:20 < trakowski77> Anyone here good with node-canvas ?
12:21 < wockan> it wants to write twice data to the same callback
12:22 < aandy> what, the neo4j wrapper?
12:22 < wockan> my own i think its a bugg on the java side
12:24 < deoxxa> wockan: that might just be how it works
12:24 < deoxxa> wockan: can you describe what's happening?
12:25 < deoxxa> wockan: it's normal to get more than one "data" event for a "single" write operation
12:25 < wockan> i think nodejs is to fast for the java
12:26 < aandy> haha
12:26 < wockan> but i will fix
12:27 < wockan> i hope :S
12:27 < deoxxa> it might not be broken
12:27 < wockan> its not 
12:27 < wockan> just an error of logical thinking
12:27 < deoxxa> heh
12:28 < wockan> cuz i write say 1 from node to the java server
12:28 < wockan> and i want 2 back
12:28 < wockan> i get 22 
12:28 < wockan> if i write 1 and later 1
12:28 < wockan> again
12:28 < aandy> flush maybe?
12:28 < wockan> mostly i get 2  and then 2
12:28 < wockan> yeah
12:29 < wockan> propobly
12:29 < wockan> ill look into it
12:29 < wockan> how does socket handle flushes?
12:29 < wockan> client.connect('data', function...) does it take 1 flush at a time?
12:30 < wockan> or does it happen that 2 flushes compine?
12:30 < wockan> b*
12:30 < [ric]> guys does anyone use the nodejs extension for eclipse? I've installed it (from nodelipse.org) but the autocomplete and syntaxing doesn't get picked up.
12:30 < wockan> use sublime
12:30 < wockan> its really nice
12:30 < aandy> with \n
12:30 < wockan> oki
12:31 < wockan> so say i have a test with java.flush(Bla bla bla\nbla bla bla)
12:31 < wockan> will it cut it?
12:31 < aandy> couldn't say, i'm not a java guy
12:33 < wockan> ill have to try then
12:33 < aandy> # tcpdump ;) see what gets flushed
12:33 < wockan> or wireshark :P
12:34 < wockan> yep \n kills it
12:34 < wockan> ...
12:34 < wockan> bollocs
12:34 < wockan> ..
12:38 < wockan> well then i know why its bugging me :D
12:45 < SoulRaven> hello
12:45 < wockan> hi
12:45 < SoulRaven> i have some question regarding this module, https://npmjs.org/package/mysql
12:46 < SoulRaven> anyone work with this module?
12:46 < SoulRaven> i don't know how to access client.statistics([cb]) and client.ping([cb])
12:50 < SoulRaven> anyone?
12:51 < wockan> client.ping(function(something){ console.log(something);}); ?
12:51 < wockan> i dont think the something is used
12:51 < wockan> so its probably null
12:52 < wockan> you ll have to check it
12:52 < SoulRaven> so, [cb] is callback :))
12:52 < wockan> yes
12:52 < SoulRaven> strange notation))
12:52 < SoulRaven> :))
12:53 < wockan> well i think it is
12:53 < wockan> cb = 'c'all'b'ack... dunno :P
12:53 < aandy> [] means optional. it's pretty common notation. client.ping(), client.ping(function() {})
12:54 < aandy> if you're doing node and don't like the "cb" notation, you're gonna have a bad time :D
12:54 < wockan> hehehe
12:54 < SoulRaven> :))
12:54 < SoulRaven> client.statistics([cb]) returns null :))
12:55 < aandy> the statistics() call probably returns nothing, yes. data might be returned in the callback, like wockan wrote above with "something"
12:55 < deoxxa> SoulRaven: you're not, per chance, doing `var x = client.statistics([cb])', are you?
12:55 < SoulRaven> deoxxa: no
12:56 < SoulRaven> mysql.statistics(function(ping){ console.log(ping); });
12:56 < deoxxa> first argument is probably err
12:56 < deoxxa> second argument probably has the info
12:56 < aandy> (y)
12:56 < deoxxa> so mysql.statistics(function(err, res) { console.log(err, res); }) or something
12:56 < deoxxa> this is probably documented
12:57 < wockan> deoxxa probably right about first arg Error
12:57 < SoulRaven> deoxxa: is not documented :((
12:57 < SoulRaven> https://npmjs.org/package/mysql
12:57 < SoulRaven> client.statistics([cb])
12:57 < SoulRaven> Returns some server statistics provided by MySql.
12:57 < aandy> SoulRaven: https://github.com/felixge/node-mysql this?
12:57 < wockan> bah who need docs.. :P
12:57 < SoulRaven> aandy: yes
12:59 < deoxxa> what version are you using?
12:59 < sinclair> any TypeScripters here?
12:59 < SoulRaven> deoxxa: 0.9.6
13:00 < SoulRaven> deoxxa: scrach that, 2.0.0-alpha3
13:00 < aandy> i can't find any references to a statistics function in the new versions (or the git repo)
13:01 < deoxxa> yeah, me either
13:02 < SoulRaven> change back to 0.9.6
13:02 < aandy> seems to be two years old, and removed
13:02 < aandy> https://github.com/tehcodedninja/node-mysql/blob/92756400d66b15517e2c7a0f5af9c3d65cfb1293/lib/mysql/client.js
13:02 < aandy> and only seems to do a "ping"
13:03 < wockan> heh
13:03 < wockan> good plugin
13:03 < deoxxa> that would be https://github.com/felixge/node-mysql/tree/a10d0251b34ea73336d59652824a6a4c6d4f8407
13:03 < deoxxa> (0.9.6)
13:03 < felixge> statistics is not implemented in 2.0.x 
13:04 < felixge> should be easy to do so
13:04 < deoxxa> ^^ straight from the horse's mouth
13:04 < felixge> if somebody wants to send a patch
13:04 < SoulRaven> i have change back to 0.9.6
13:04 < SoulRaven> from 2
13:04 < aandy> SoulRaven: probably better to provide a patch and use 2.0.x
13:05 < SoulRaven> felixge: is any solution to check if client is connected to db, before to do any query?
13:05 < txdv> is that the guy who claims that his pure js implementation is faster than c++
13:05 < aandy> the constant is still in constants.js, so yeah
13:05 < MI6> joyent/node: Ben Noordhuis master * cb6d084 : node: update description of --print - http://git.io/0ObmjA
13:07 < SoulRaven> felixge: in mysq i see that i have a "connected" attrib, but all the time is false, any solution to populate that attrib with the state of the conection: mysql = require('mysql').createClient(setting.MYSQL_CONFIG); console.log(mysql.connect);
13:08 < deoxxa> SoulRaven: it's probably not connected yet when you try to read that property
13:08 < felixge> SoulRaven: you are using mysql 0.9.x
13:08 < felixge> please upgrade
13:11 < SoulRaven> felixge: change tom 0.9 to 2
13:11 < SoulRaven> now i get mysql = require('mysql').createClient(setting.MYSQL_CONFIG), TypeError: Object #<Object> has no method 'createClient'
13:18 < aandy> createConnection
13:18 < SoulRaven> i have resolved that
13:18 < SoulRaven> how i am looking in what return createConnection
13:19 < SoulRaven> to find out if something is for findout if the connection to db is ready or not
13:20 < txdv> hey felixge, is it fun to write v8 jit friendly js code?
13:21 < felixge> txdv: yes
13:21 < felixge> it's a hobby of mine :)
13:21 < txdv> I read your blog post, is yoru sql provider really faster than the c impl?
13:24 < txdv> I guess I have to try for myself to figure it out
13:27 < aandy> txdv: where does it say it's faster than c?
13:27 < aandy> or are you just pulling stuff from your behind? :)
13:28 < txdv> https://github.com/felixge/faster-than-c
13:29 < txdv> It is 'out of your ass' and not from your behind
13:29 < RLa> faster than c violates physics laws :)
13:30 < txdv> not if you have a smart jit compiler which work on some hotspots
13:31 < aandy> sigh
13:31 < RLa> oh, the c language
13:31 < txdv> aandy: it is not my claim to begin with
13:33 < very> running backwards. c + 1 == -c - 1
13:34 < very> it's a simple overflow.
13:34 < txdv> yeah because negative numbers have one value less than positive
13:34 < txdv> then
13:35 < RLa> speeds faster than c also enable time travel :)
13:36 < very> speeds between 0 and c enable forwards time travel. speeds faster than c are backwards time travel
13:37 < very> or the other way round depending on how you define forward.
13:39 < Soarez> how do you run a single test in node's codebase ?
14:07 < SoulRaven> felixge: how i check before any query if the module is connected to mysql?
14:07 < SoulRaven> any solution for that?
14:08 < RLa> SoulRaven, doesn't it just queue up queries before it's connected
14:09 < SoulRaven> yes, but if between queries, is get disconected ?
14:09 < SoulRaven> how i check that
14:19 < hemanth> meow
14:21 < wockan> Woff
14:22  * niggler pets purr 
14:22  * purr r
14:23 < wockan> purr ?
14:23 < wockan> i woff at you
14:24  * niggler scratches wockan 
14:24 < wockan> little to the left
14:37 < syskk> -_-
14:37 < purr> syskk: ಠ_ಠ is an IRC client/IRC client framework.
14:37 < syskk> o_o
14:37 < tuhoojabotti> hmm
14:38 < syskk> I am a bot.
14:38 < wockan> me 2
14:38 < tuhoojabotti> No, I'm a bot.
14:38 < wockan> im a robot
14:38 < syskk> I passed the Turing test had 14 years old.
14:38 < syskk> at*
14:38 < syskk> non intentional typos ot look more human
14:39 < wockan> i didnt
14:39 < wockan> im just perfect
14:41 < syskk> :D
14:45 < wockan> well laters!
14:59  * hemanth paws at niggler 
14:59  * hemanth paws at purr 
14:59  * purr rrrrrrr
15:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:21 < SoulRaven> is posibile in winston module, to add the posibilty also to display the method from where is called the log and also the line?
15:22 < SoulRaven> sometimes is important to know the place where the logging is called
15:23 < aandy> wockan: https://twitter.com/BigDataBorat/status/232959262052204545
15:29 < SoulRaven> is posibile in winston module, to add the posibilty also to display the method from where is called the log and also the line?
15:29 < SoulRaven> sometimes is important to know the place where the logging is called
15:30 < mmalecki> SoulRaven: that'd have a terrible performance cost
15:31 < SoulRaven> way? i guess with new Error object is easy to add in winston
15:31 < mmalecki> it is, but reading out a stack trace is expensive
15:32 < mmalecki> also, that means new error object with every log
15:32 < mmalecki> which is memory-intensive too
15:32 < SoulRaven> i undestand, at least the timestamp how is costume
15:33 < SoulRaven> because i have try timestamp : function () { return 'something'; }
15:34 < SoulRaven> and is not working, retung the log without any timestamp data or something in replace
15:37 < mmalecki> SoulRaven: set transport.timestamp to a function value
15:38 < SoulRaven> mmalecki: http://bin.cakephp.org/view/86925520
15:39 < mmalecki> this has no context
15:39 < oneto018> hi! any of you guys know any other free node services , than nodester, heroku , appfog or openshift
15:39 < mmalecki> oneto018: nodejitsu is free for one month, then it's $ 3/drone, pretty cheap
15:40 < aandy> is heroku free?
15:40 < oneto018> for a very limited resource
15:40 < SoulRaven> http://bin.cakephp.org/view/86925520
15:42 < SoulRaven> mmalecki: this is the context: http://bin.cakephp.org/view/86925520
15:44 < oneto018> how much clients a drone could hold (approx). any idea
15:45 < mmalecki> SoulRaven: that looks like it should work
15:46 < mmalecki> can you open an issue please?
15:46 < SoulRaven> yes, on git
15:46 < SoulRaven> yes
15:47 < mmalecki> oneto018: hello world socket.io app can handle 500 users
15:47 < mmalecki> and a lot more concurrent http requests
15:48 < oneto018> thank you @mmalecki
15:49 < SoulRaven> mmalecki: done
15:49 < SoulRaven> https://github.com/flatiron/winston/issues/191
15:50 < mmalecki> thanks!
15:55 < muthu> getting IOError when installing in Ubuntu..
15:56 < muthu> install.py not able to read /usr/local/lib/npm
15:57 < SomeoneWeird> perms?
15:57 -!- mbalho changed the topic of #Node.js to: node.js - now available in the cloud
15:58 < muthu> its 755 root
15:58 < muthu> IOError: [Errno 2] No such file or directory: u'/usr/local/bin/npm'
16:00 < muthu> probably some link issues
16:01 < mscdex> node.js in the cloud??? what will they think of next?!
16:01 < SomeoneWeird> node.js in the atmosphere
16:01 < SomeoneWeird> :o
16:01 <@mbalho> we literally put node in the cloud earlier tday
16:07 < SoulRaven> felixge: are you here?
16:13 < mscdex> SoulRaven: he's not the in the channel
16:13 < SoulRaven> :(
16:13 < SoulRaven> i have see that:(
16:13 < mscdex> what do you need help with?
16:14 < SoulRaven> i am still curious if is posibile if the mysql model has any var ar attrib to determine if the module is connected to mysql, before each query
16:15 < SoulRaven> i am working on a AVL parser, and i nead to know before any search if the DB is avalible, to ignore and close any other socket
16:15 < SoulRaven> something global, to call and check if the is connected to DB
16:16 < SoulRaven> because if i have 20+ method with querys, on each method i have to check and repopulate some global var with the new state of db connection
16:16 < SoulRaven> and like this is over killing
16:17 < mmalecki> why?
16:17 < mmalecki> there's most likely an event emitted on connection close
16:17 < SoulRaven> in each method i have to do somethink like this: http://bin.cakephp.org/view/1880239594
16:17 < SoulRaven> mmalecki: in 2.0 alpha is not
16:18 < mmalecki> pull request it :) ?
16:18 < SoulRaven> ??
16:18 < SomeoneWeird> lol
16:18 < mmalecki> I mean, write a patch?
16:25 < mscdex> SoulRaven: you can supply a callback to connect(), that is when you know it is connected
16:25 < mscdex> unless the err passed to it is set
16:52 < SoulRaven> mscdex: is not avalibile now in 2.0 alpha
16:52 < SoulRaven> mscdex: now is createConnection() instead of connect
16:59 < mscdex> SoulRaven: it should be, i'm looking at the master branch documentation
16:59 < SoulRaven> there is not
16:59 < mscdex> SoulRaven: you can call .connect(function(err){}) after using .createConnection
16:59 < mscdex> that's what the example shows :-)
17:00 < SoulRaven> https://github.com/felixge/node-mysql/wiki/Upgrading-to-0.9.2+
17:01 < mscdex> 0.9.2 is old
17:01 < SoulRaven> i know
17:01 < mscdex> https://github.com/felixge/node-mysql/blob/master/Readme.md
17:01 < mscdex> ^
17:01 < SoulRaven> i am on alpha now
17:02 < mscdex> the documentation says you can establish a connection using .connect() or implicitly by invoking .query()
17:09 -!- mode/#Node.js [+o konobi] by ChanServ
17:56 < aandy> anyone used gremlin/groovy?
17:56 < astropirate_> no
17:56 < astropirate_> no one
17:56 < aandy> that's a real possibility
17:56 < astropirate_> its the only reality
17:57 < wockan> yep
17:57 < aandy> considering how impossible the shell is, and complete lack of working docs/responses to forum bugs
17:57 < wockan> ive been coding almost all day + im sick
17:57 < aandy> i've been adding, committing, then adding again, then repeat^infinity
17:57 < aandy> because the shit never stores
17:57 < aandy> fuck gremlin
17:57 < wockan> hhehe
17:57 < astropirate_> hahahah
17:58 < Dantas> hi all, what is the best approach to handle back pressure ? for instance, when uploading a huge file and writing to file and the filesystem is too slow, what the http request does with the incoming data? The data are buffered until resume be called? 
17:58 < astropirate_> aandy, is there no irc chanel for groovy?
17:58 < astropirate_> i'm just suggesting. i'm not a  "off topic" nazi
17:58 < aandy> unfortunately it doesn't seem so, no. not on freenode anyway
17:59 < wockan> man i love graphs now but the performance is really annoying the crap out of me
17:59 < wockan> i got around double the performance with direct tcp 
17:59 < wockan> but still
17:59 < wockan> ugh
18:00 < wockan> well more like 7 times. But then after a while it gets slower and slower and slower
18:04 < aandy> astropirate_: right, and i didn't mean to drive it off topic. i hate when that happens ;) was only because wockan and i talked about it here earlier today
18:05 < astropirate_> aandy, nahh no need to appologise  i am just a troll
18:05 < aandy> WHAT!
18:07 < wockan> and im mostly crying out loud
18:08 < aandy> don't do that. i just got it working over here. apparently stopTransaction(SUCCESS) is no good, but shutdown() (which calls stop SUCCESS on all transactions) is OK, lol :(
18:09 < aandy> so i just have to open and close the db on every transactions. this seems like a good route to hell
18:09 < aandy> see you when you get there
18:09 < wockan> lol
18:09 < wockan> yeah that suxs
18:12 < wockan> yeah but i finally manage to create a pipe from nodejs and java neo4j
18:12 < wockan> everythings fine
18:13 < wockan> takes 4-7 ms per request (web to node to neo4j)
18:13 < wockan> and back
18:13 < wockan> (on the same comp
18:13 < wockan> )
18:14 < wockan> everything is fine performance wise until I try the same thing multiple times
18:14 < wockan> and boom
18:14 < trypwire> hey guys. i'd like to write a library that where i concat this file (https://github.com/Wolfy87/EventEmitter/blob/master/EventEmitter.js) into my own file and build some features on top of it. but in an AMD setting, the above file doesn't expose itself nicely… how would I reference it later in the file?
18:16 < trypwire> or should i just forget about preserving the original file and just modify it how i need?
18:34 < zezikaro> Hi does anyone know how to define a namespace for an element in node.js soap mdoule
18:34 < zezikaro> this module https://github.com/milewise/node-soap
18:36 < zezikaro> doing "xsd1:Product" worked
18:36 < zezikaro> but i think there might be a different way
19:14 < Rainbowwwww> hey does someone know if its possible to regex something in this fashion... lets say i have var dialog containing information like  moin : 'good morning' is there a would i could regex this dialog.'regex here'  to fetch the data.
19:14 < Rainbowwwww> ?
19:16 < Rainbowwwww> no one :(
19:17 < trypwire> yea
19:17 < trypwire> you could do
19:17 < trypwire> for (prop in dialog) { if prop.test(/yourregex/) { … do shit … }
19:18 < Rainbowwwww> trypwire yes make sense
19:18 < Rainbowwwww> thx
19:18 < trypwire> np
19:35 < Dantas> what is the best approach to handle back pressure ?for instance,   when uploading a huge file and writing to a filesystem too slow, what the http request does with the incoming data? We should buffer(Buffer instead of Array) the data until resume be called ?
19:40 < clever> Dantas: under normal (blocking) apps, you would just stop reading the pipe, and once the network buffers overflow, the network layer should send special tcp flags to slow/stop
19:40 < clever> Dantas: maybe theres something like connection.pause you can call?
19:40 < clever> something to tell node to stop checking for the event, and stop reading
19:41 < Dantas> clever: yeah, thanks. Calling pause on connection works
19:41 < clever> just remember to resume it when your file write is done
19:42 < Dantas> clever: yeah, thanks, my question u answer me ( flag stop/swlo on tcp )
19:42 < Dantas> slow*
19:42 < clever> i think at the raw level, it uses the tcp window size to control bandwidth
19:43 < clever> and you could manualy set that to throttle things without hard-stopping every time the disk hangs
19:43 < clever> basicaly, the thruput is one tcp window every round-trip
19:44 < Dantas> i thought that node will buffer incoming data until resume be called.
19:44 < Dantas> but the tcp flag answer me !
19:44 < clever> i thought that the kernel itself would do the buffering
19:45 < clever> eventualy, the kernel buffer will overflow, and it will send the tcp flags to stop traffic
19:45 < Dantas> sure sure
19:45 < kppullin> looking for suggetions on how to optimize: http://jsfiddle.net/eYgnQ/  .  Would like to not have to manage the "poolSize" myself, and not "resume" the reader on each completion.
19:45 < kppullin> thinking 'async' of 'fibers' may apply, but dont quite grok it yet
19:52 < Gottox> I've got a problem with node.js-addons. My addon causes node to run forever under some conditions. here's how I can trigger it: http://pastebin.com/MsKxfdiV
19:54 < Gottox> why is this happening?
19:57 < airtanah> has anyone tried using Foreman?
20:15 < TheFuzzball> Are there any good ways to watch directories for changes?
20:16 < nlf> fs.watch
20:16 < TheFuzzball> Does it work cross-platform?
20:17 < nlf> in most operating systems, it can be
20:17 < nlf> http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener
20:18 < nlf> fs.watchFile works in more situations, but it doesn't work on directories
20:18 < nlf> i think
20:19 < TheFuzzball> I'm watching a directory with quite a few levels of directories, so watchFile is out.
20:20 < TheFuzzball> It also uses fs.stat instead of fs-level watching, which is slow.
20:23 < nlf> fs.watch would do the job for you, assuming it functions correctly in your needed os
20:24 < TheFuzzball> It doesn't :)
20:24 < nlf> the big thing is the filename argument in the callback
20:24 < nlf> you might know that something changed, but not necessarily what
20:24 < TheFuzzball> Yeah, no filename argument in OS X. Also it only watches on the root directory, not recursively for all directories.
20:24 < TheFuzzball> The latter can be fixed, the former probably not.
20:24 < nlf> right
20:25 < nlf> your other options are to fs.watchFile every single file
20:25 < nlf> or poll them on a timer
20:25 < nlf> both are inefficient
20:25 < airtanah> i think supervisor watches every file
20:25 < nlf> probably
20:25 < airtanah> using one of the above methods
20:25 < airtanah> it works reasonably well
20:25 < TheFuzzball> That won't work in some situations, e.g. file being created in a directory.
20:26 < TheFuzzball> Also, I'm not watching for code, I'm watching for music files.
20:26 < airtanah> i guess, a good watcher would catch that directory for changes, then re-watch all fiels contained in it
20:27 < nlf> looks like supervisor uses fs.watch in windows and fs.watchFile everywhere else
20:27 < TheFuzzball> airtanah Yeah, I'm considering that. As long as there aren't thousands of files in one directory it won't be too bad.
20:29 < airtanah> well, depending how clever you want to be, you can always cache the directory names, so you only watch the new file
20:29 < airtanah> it sounds like a useful npm module if you make it :D
20:31 < nlf> i'd combine https://github.com/coolaj86/node-walk with fs.watchFile
20:31 < nlf> just store an array of filenames you're watching
20:31 < nlf> walk the tree on an interval
20:32 < nlf> see a filename you're not already watching, add it
20:33 < airtanah> call it node-stalker
20:33 < TheFuzzball> I'm building it for a larger app, hadn't thought of making it a standalone module.
20:39 < airtanah> a module would be cool if it worked very efficiently
20:40 < airtanah> that's assuming you have time tho
20:54 < TehShrike> What's y'alls favorite non-middleware routing module?
20:59 < culturelabs> whats up yall
21:03 < INFTG> hey guys quick performance questions
21:03 < INFTG> is go http faster than node.js http?
21:03 < deltab> faster how?
21:04 < aandy> as a general rule you should always do your benchmark yourself
21:04 < goku22> it depends on what you are actually using it for 
21:04 < aandy> otherwise you risk making decisions on biased, wrong, or misrepresentitive setups
21:05 < INFTG> can hold more connected clients
21:06 < goku22> look into nodes cluster if you want to use all the cores in your server … nodes is supposed to be good for I/O operations 
21:06 < goku22> but if you have like many clients 
21:06 < goku22> right now node runs only on one server
21:07 < goku22> i think
21:23 < jden> node takes forever to compile on an ec2 micro :/
21:23 < TehShrike> Why not use the binaries?
21:24 < jden> sheer stubbornness? I guess in the future I shall
21:24 < jden> and in fairness, it's v8, not node
21:26 < TehShrike> Yeah, I thought it was pretty cool when they started publishing the linux binaries
21:27 < airtanah> also ec2 micro is pretty gutless 
21:28 < marshall> hey node
21:28 < jden> forgive my lack of true linux foo - on my mac, I just brew install node. I tried yum install node, but it wasn't found. what's the best way to install node binaries on ec2 (I'm using their stock AMIs)
21:28 < TehShrike> jden: http://nodejs.org/download/
21:29 < kickandrew> jden: just go the ./configure && make && sudo make install route
21:29 < kickandrew> that's what I do.  Download the source, and build it!
21:29 < TehShrike> jden: Sorry, I misread your question
21:29 < TehShrike> I think
21:30 < TehShrike> But I've just downloaded the 32/64 bit binaries from there and then added the /bin folder to the path
21:30 < jden> @kickandrew I'm currently building it from source - @TehShrike mentioned binaries available to save time
21:30 < marshall> I've written a script to read a CSV file (2mb, streamed) and insert each line into a couchdb, but when I try to tun the script, it exits with "Killed" after a few moments. How do I get Ubuntu (EC2) to stop killing my process?
21:30 < kickandrew> my bad
21:30 < kickandrew> should have read your earlier thread, sorry fellas
21:30 < hasse> How do I know the end of a recursive function in nodejs?
21:30 < TehShrike> hasse: wat
21:31 < jden> np :)
21:31 < TehShrike> That question sounds very philosophical
21:31 < TehShrike> "Can anyone truly KNOW the end of recursion?"
21:31 < danheberden> "How do we know we aren't recursing RIGHT NOW?"
21:31 < TehShrike> lol
21:32 < TehShrike> I recursed once.
21:32 < TehShrike> I still am.
21:32 < Ontology> You should start by googling 'recursion'
21:32 < TehShrike> ooh, that's a favorite
21:32 < kickandrew> Ontology: yess
21:32 < TehShrike> Related: to understand recursion, you must first understand recursion
21:33 < TehShrike> Though I like this version better http://www.johndcook.com/blog/2012/08/14/understanding-recursion-ii/
21:33 < airtanah> i think NVM uses binary builds for some systems
21:39 < culturelabs> does anyone have any good computer science learning material
21:40 < TehShrike> What areas of computer science?
21:40 < culturelabs> i never went to college so i never got basic computer science training
21:40 < TehShrike> I've heard interesting things about the stuff on Khan Academy, though I haven't gone through it myself http://www.khanacademy.org/cs
21:40 < culturelabs> i just learned how to code
21:41 < culturelabs> like architecture and stuff
21:41 < kickandrew> http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?s=books&ie=UTF8&qid=1350769148&sr=1-1&keywords=code
21:41 < TehShrike> Ah yeah, I have that book
21:41 < culturelabs> thank you
21:41 < jden> pragmatic programmer & clean code
21:49 < hasse> TehShrike, Ontology: http://pastie.org/private/ysv2tbyr5xaehcdak7trfg
21:50 < TehShrike> hasse: I imagine you want to pass in a callback function for it to call when it finishes
21:51 < TehShrike> hasse: oh hey, you want to know when the last one is done?
21:51 < TehShrike> I think I saw a tool for that
21:51 < hasse> TehShrike: yeah, when the last one is done
21:52 < hasse> TehShrike: please share
21:57 < TehShrike> I think I was thinking of http://underscorejs.org/#after
21:58 < TehShrike> It wouldn't be hard to make a tool that would work in your case specifically though, I'm pretty sure
21:59 < owen1> we should figure out a way to educate newcomers about building websites/apps without express/middleware - https://twitter.com/schteppe/status/259192165308186625   is there a good blog post/tutorial about doing that or is my best option is to understand the codebase of https://github.com/isaacs/npm-www ?
22:00 < TehShrike> That is a good question that I also want to know the answer to
22:01 < owen1> TehShrike: this is my attempt, based on npm-www - https://github.com/oren/node-website-template
22:03 < richweskus> hey guys
22:03 < richweskus> [ { server: 's1', password: '500' } ]
22:04 < richweskus> if that is the result of my json.parse how do i access that?
22:04 < richweskus> settings.0.server ?
22:04 < TehShrike> or settings[0].server
22:05 < richweskus> ah thanks :)
22:05 < TehShrike> Or you could use https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/pop
22:05 < richweskus> i always forget
22:05 < richweskus> thanks
22:05 < richweskus> that works
22:05 < TehShrike> You may want to check the array's length first
22:06 < MI6> joyent/libuv: Ben Noordhuis master * 1bb1ba2 : unix: fix compiler warning in async.c  Include missing <string.h> header. - http://git.io/ywTMOg
22:09 < marshall> I'm trying to pause a csv stream and stream.pause isn't working. what do?
22:11 < LouisT> anyone know of a template system similar to aejs that has scopes?
22:11 < marshall> it's like the stream just can't be paused
22:17 < TehShrike> hasse: https://gist.github.com/3925018
22:18 < TehShrike> hasse: Note that that mechanism only works if the recursion is synchronous
22:28 < hasse> TehShrike: thanks
22:41 < mscdex> owen1: there's nothing wrong with using express
22:49 < owen1> mscdex: according to the core node guys it's not playing nice with streams.
22:49 < owen1> mscdex: i wish i could elabororate more.
22:50 < owen1> mscdex: in addition it is doing multiple things that can be break into smaller packages - routing, templating, etc
22:51 < jesusabdullah> those are simply trade-offs
22:52 < jesusabdullah> if you're not running into those problems I wouldn't stress
22:55 < mscdex> owen1: templating is separate, no?
22:57 < owen1> mscdex: what do u mean?
23:00 < serby_> Is there a way so that if I: 'npm install a ; npm install b ;' and 'a' depends on 'b', get npm to remove the version of a that is in b/node_modules/a
23:00 < ArxPoetica> Okay Stylus geniuses.
23:01 < ArxPoetica> Is there a way to access a parent's property?
23:01 < ArxPoetica> For example, if I want width to be 1/2 of the parent's width...
23:01 < serby_> Is there a way so that if I: 'npm install a ; npm install b ;' and 'a' depends on 'b', get npm to remove the version of a that is in a/node_modules/b
23:02 < TehShrike> serby_: you wouldn't have to run npm install b - if it's a dependency of a, it would get installed in a/node_modules automatically
23:02 < serby_> Is there a way so that if I: 'npm install a ; npm install b ;' and 'a' depends on 'b', get npm to remove the version of 'b' that is in a/node_modules/b
23:02 < TehShrike> :-|
23:02 < serby_> TehShrike: But let's say it is also a dep of my main project
23:03 < TehShrike> What, a, or b?
23:03 < serby_> a is a dep of both my main project and of b
23:04 < TehShrike> serby_: are you looking for https://npmjs.org/doc/prune.html ?
23:04 < serby_> If I install them the other way round, 'a' won't get install in 'b' because it is found in my projects node_modules
23:04 < serby_> That doesn't do it
23:04 < owen1> mscdex: the npm website is using https://github.com/isaacs/templar for templating
23:05 < mscdex> owen1: i mean there isn't a templating engine bundled with express
23:06 < TehShrike> serby_: https://npmjs.org/doc/folders.html#Cycles-Conflicts-and-Folder-Parsimony
23:07 < owen1> mscdex: oh. got it
23:08 < INFTG> hey guys
23:08 < ArxPoetica> you guys know the best place to get help with Stylus?
23:08 < INFTG> why is node slower than go? i thought it was async?
23:08 < TehShrike> lolwut
23:09 < jesusabdullah> INFTG: what do you mean by "slower" ?
23:09 < jesusabdullah> INFTG: in what situation?
23:09 < serby_> TehShrike: No that isn't this situation. 
23:09 < INFTG> node events slower than go channels, i should put it
23:09 < serby_> TehShrike: https://gist.github.com/3925151
23:10 < jesusabdullah> INFTG: if you can ask a well-formed question we might be able to answer it
23:10 < jesusabdullah> INFTG: keep in mind that go is a compiled language (last I checked) which means compute can happen faster
23:10 < jesusabdullah> INFTG: node is "fast" because v8 is fast *for a vm* and because the event loop allows for multitasking in a way that sync actions don't
23:11 < INFTG> i don't have a specific question
23:11 < jesusabdullah> well there you go
23:11 < INFTG> more of a general observation
23:11 < jesusabdullah> you can't really say that node is slower than go because it's not a well-formed observation
23:11 < TehShrike> INFTG: Well, jesusabdullah was wondering where you observed that
23:12 < serby_> TehShrike: It should be possible to determine after 'b' is installed that 'a' is no longer needed therefore could be cleared up by prune. But it isn't
23:13 < jesusabdullah> INFTG: it's like trying to compare the speed of, say, dial-up and carrier pigeon
23:13 < serby_> TehShrike: This seems like an obvious feature, the fact that is not apparent makes me think that I'm totally missing it, or there is a good reason why it has been left out
23:13 < jesusabdullah> the average speed
23:14 < jesusabdullah> like, if you asked, "why are carrier pigeons faster than dial-up?"
23:14 < jesusabdullah> or, say, if I asked that
23:14 < jesusabdullah> how would you answer?
23:15 < serby_> jesusabdullah: carrier pigeon has higher throughput buy at a very high latency
23:15 < jesusabdullah> serby_: exactly
23:15 < jesusabdullah> serby_: so, in some sense dial-up is faster than carrier pigeons, when ping time is what matters
23:15 < TehShrike> Carrier pigeons look cooler
23:16 < jesusabdullah> serby_: but if you need to pull down 40 gigs of data the carrier pigeon wins out
23:16 < jesusabdullah> so it's not really a case of "which is faster" but more, "which wins out in situation x"
23:16 < serby_> jesusabdullah: And possibly a higher error rate if it gets attacked or flies into a window or something
23:16 < jesusabdullah> I'm guessing you've blocked out your dial-up memories.
23:17 < jesusabdullah> I suspect that packet loss is less common for pigeons but that when it happens you, well
23:17 < jesusabdullah> you lose all the data that pigeon was carrying
23:17 < TehShrike> dial-up is more likely to result in partial data getting received.  With a single carrier pigeon it's most likely all-or-nothing
23:17 < jesusabdullah> exactly
23:17 < jesusabdullah> NOW YOU'RE GETTING IT
23:17 < nathan7> ahoy
23:17 < jesusabdullah> yo dawg
23:18 < TehShrike> I heard you like callbacks
23:18 < jesusabdullah> did you put a callback in my callback? ;)
23:18 < TehShrike> YOU KNOW IT!
23:19 < ArxPoetica> You guys know where the best place to go for Stylus Qs is?
23:19 < serby_> TehShrike: So do you agree that npm is missing a feature or am I just dumb?
23:19 < jesusabdullah> ArxPoetica: unsure
23:19 < jesusabdullah> which feat serby_ ?
23:19 < ArxPoetica> k thx
23:19 < jesusabdullah> ArxPoetica: see if learnboost has an irc channel
23:19 < serby_> jesusabdullah:  Is there a way so that if I: 'npm install a ; npm install b ;' and 'a' depends on 'b', get npm to remove the version of 'b' that is in a/node_modules/b
23:19 < jesusabdullah> ArxPoetica: or look for the teej
23:20 < jesusabdullah> serby_: npm dedupe?
23:20 < INFTG> what is a good npm package manager?
23:20 < ArxPoetica> I think I just found the answer to my question which is a big fat honkin NO.
23:20 < serby_> I'm on npm 1.1.21
23:20 < serby_> jesusabdullah: Which version?
23:20 < jesusabdullah> INFTG: npm
23:20 < ArxPoetica> :P (Can properties be looked up in Stylus, via inheritance.)
23:21 < TehShrike> aah, see, jesusabdullah is obviously more familiar with npm than I am
23:21 < jesusabdullah> serby_: 1.1.59
23:21 < TehShrike> https://npmjs.org/doc/dedupe.html
23:21 < jesusabdullah> TehShrike: I'm working on a package manager so I've read/borrowed big chunks of npm code
23:22 < ArxPoetica> dedupe is not a word
23:22 < TehShrike> jesusabdullah: nice.
23:22 < jesusabdullah> it's short for deduplicate ArxPoetica 
23:22 < ArxPoetica> lol
23:22 < TehShrike> What's the motivation behind your package manager jesusabdullah?
23:22 < ArxPoetica> I know, I know was kidding
23:25 < serby_> jesusabdullah: Thanks. I totally missed that my npm was set on a version from a old project I was working on.
23:33 < jesusabdullah> serby_: anytime :D
--- Log closed Sun Oct 21 00:00:45 2012
