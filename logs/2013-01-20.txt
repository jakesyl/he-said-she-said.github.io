--- Log opened Sun Jan 20 00:00:54 2013
00:01 < recamilio> coderarity: I'm not sure if I got what you mean, but, proxies has no access to HTTPS data, I just can't figure out how to measure data usage... It works nice for HTTP, the trouble is HTTPS...
00:02 < coderarity> Leeol: you could use the Host header, perhaps
00:03 < coderarity> Leeol: req.headers.host
00:03 < recamilio> coderarity: It's more like a transparent proxy, which should count the data usage and check the available data-quota for the user...
00:03 < coderarity> recamilio: it's like a TCP proxy?
00:06 < Leeol> coderarity: No, that just returns the host (no path)
00:06 < Leeol> I'm guessing the answer is to not use `app.use('path')` .. it seems to be very destructive
00:08 < recamilio> I didn't implement it yet... We have this proxy working for HTTP. After a long searching, couldn't find a way to do instead of Man-in-the-middle, which doesn't sound llike a solution. So, I'm trying to implement it as a TCP proxy... I got the packets using net.createServer, but, the Buffer is encrypted ¬¬... I'm trying to find somehow to fix it... Any idea?!
00:08 < recamilio> coderarity: I didn't implement it yet... We have this proxy working for HTTP. After a long searching, couldn't find a way to do instead of Man-in-the-middle, which doesn't sound llike a solution. So, I'm trying to implement it as a TCP proxy... I got the packets using net.createServer, but, the Buffer is encrypted ¬¬... I'm trying to find somehow to fix it... Any idea?!
00:10 < coderarity> recamilio: i see
00:12 < xk_id_> If I run 2 functions asynchronously on a machine with 2 CPU cores, what will happen?
00:12 < xk_id_> * If I run 3 functions asynchronously on a machine with 2 CPU cores, what will happen?
00:13 < coderarity> recamilio: i'm pretty sure a transparent proxy over HTTPS isn't gonna work out so hot. I mean, that's the point of HTTPS, to prevent a proxy you don't know about from stealing data. It sounds like you could do a less-transparent proxy with this guy's answer http://stackoverflow.com/questions/10085082/node-http-proxy-ssl-transparent/10544193#10544193
00:13 < coderarity> recamilio: maybe just count encrypted data as the same as non-encrypted data, too
00:16 < recamilio> coderarity: Right, I'll check... thanks in advance... 
00:26 < mscdex> xk_id_: they'll all run on the same core
00:27 < mscdex> xk_id_: all javascript is single threaded
00:27 < xk_id_> mscdex: thanks.
00:27 < xk_id_> So I need to require('cluster') in order to use more than a core, yes?
00:27 < mscdex> either cluster or creating a child process manually via spawn/exec/fork
00:28 < asturel> Warning: connection.session() MemoryStore is not designed for a production environment, as it will leak memory, and will not scale past a single process. - should i care?
00:28 < mscdex> asturel: if you don't care about persistence or scaling beyond one process/machine
00:28 < Gottox> some modules may use other cores.
00:29 < mscdex> Gottox: only in C++ land and if they use the thread pool, or they spin up child processes
00:31 < asturel> the memory leak was the scary part :D
00:32 < mscdex> asturel: well, i haven't looked at the memory store implementation, but it's possible it doesn't bother deleting sessions?
00:34 < asturel> idk, it only warnings in production mode
00:36 < gildean> asturel: use a better store like redis for the sessions
00:38 < asturel> but it needs a separate redis-server
00:39 < asturel> i liked that it doesnt need anything external app
00:41 < asturel> btw, if i switch to redis -- will the sessions remain even if restart node?
00:41 < asturel> i mean now ofc it lost when i restart it
00:44 < gildean> the sessions within redis will remain if you only restart the node app, and the app itself doesn't purge the redis
00:44 < gildean> at least i think so
00:46 < asturel> yeah i mean that
00:47 < xk_id_> Does anybody have advice on how to perform an array of function asynchronously, if I don't know the size of the set? 
00:47 < xk_id_> s/set/array
00:57 < bitpimp> I figured out how to create a REST server in node/express, but I haven't been able to git it to dish up the initial index page (and jquery includes)... can anyone suggest a good link/tutorial?
01:00 < blazes816> bitpimp: I use hem to generate serve up one each of an html, js, and css file.  in production I a CDN to serve these assets (nginx in staging).  then I use express/http/socket.io to to build a backend server to interact with the client
01:02 < bitpimp> ok
01:05 < nihilista> hiya... i am a complete noob for webservers and not-so-complete noob for linux, so i'd like to ask few questions here...
01:06 < nihilista> however i know js very good and i'm using it a lot in my django apps so i decided to give node.js a try
01:06 < nihilista> is node good solution to serve my django apps at all?
01:09 < nihilista> actually i'm trying to learn to set up some async web server for serving my django apps which are so full of ajax but i'm not sure if i picked the right thing...
01:14 < blazes816> nihilista: you probably want something like http://gunicorn.org/
01:14 < nihilista> hmm, why gunicorn and not for example tornado? or even node.js?
01:15 < gildean> nihilista: i don't think i've seen anyone mix node with django, as node is not a http-server but a platform
01:15 < blazes816> nihilista: tornado is also good
01:15 < blazes816> node.js isn't really for serving up python applications
01:15 < gildean> i don't know how you'd implement it, but why not, everything is possible i guess
01:16 < nihilista> ah, ok i see
01:16 < blazes816> you certainly could, it's just not common
01:17 < nihilista> but for what is node.js generally used then?
01:17 < gildean> nihilista: writing all kinds of applications, mainly network related ones
01:17 < nihilista> =)
01:17 < nihilista> ok well, thanks for help and advices then =)
01:18 < gildean> but usually in a more specific ways, check out https://npmjs.org and http://nodejs.org
01:21 < nihilista> well i did google a lot about my 'problem' and came out with solutions like gunicorn, tornado, twisted and similar
01:21 < nihilista> however, node.js seems pretty easy since i know js better than python, so i was thinking it will be able to help me...
01:22 < nihilista> i made a disclaimer in the beginning of my 'speech' that i am total noob for web servers and the whole thing is still a bit confusing in my head
01:22 < nihilista> i was using apache so far and i'm familiar with that, but all i did was just changing few simple options in httpd.conf...
01:23 < gildean> nihilista: you can build http-servers with node.js, and actually pretty perfomant ones 
01:24 < gildean> nihilista: but mainly people use it to build specific application servers
01:24 < gildean> nihilista: like instead of having a http-server which serves your apps, in node the app itself is the server
01:25 < gildean> or the app might consist of multiple servers each of them for specific purpose
01:25 < nihilista> ah i see... so if i need async web server for many web sites i should definitely use something else, right?
01:25 < coderarity> waaaiiiit
01:25 < coderarity> what you just said sounds wrong
01:26 < coderarity> if you want an async web server that hosts more than one website, Node would be a good match. I've heard of several people doing this.
01:27 < coderarity> on a single Node process
01:27 < nihilista> ahhh, the confusions grows bigger =))
01:27 < isaacbw> they should make fleshlights with windowed slots where you can put the logo of your favorite software packages
01:27 < coderarity> i haven't been following, admitedly
01:27 < coderarity> admittedly*
01:28 < coderarity> i just saw that that looked backwards
01:28 < nihilista> coderarity: ok, let me try to explain really quick
01:29 < nihilista> i have few dango projects which use js/ajax a lot. one of my favorite things is to use timeout() to fake pushing things from db
01:30 < nihilista> so i'm in search for some web server or something which would prevent me faking this thing and which i would use in the future for all my django projects
01:31 < coderarity> nihilista: you have a few django projects, you mean? and you are considering moving these to Node?
01:31 < gildean> isaacbw: you enjoy using a fleshlight on a public place so everybody could see what software you like to use?
01:32 < isaacbw> evangelism at its finest
01:32 < isaacbw> though I was thinking more like "I love angularjs so much I want to make love to it"
01:32 < coderarity> nihilista: and you want to or you don't want to be able to use fake timeouts? If you had multiple servers running on one Node process, the timeout wouldn't affect the other projects, which I assume is ideal.
01:33 < gildean> isaacbw: i got it more like "fuck you and your stupid software, literally"
01:34 < nihilista> coderarity: i'm considering moving them to any web server which would allow me the real polling (is that how it's called?)
01:34 < nihilista> coderarity: and i'd like to avoid fake timeouts since i suppose that it can get pretty nasty for a web server which is not made to do that
01:35 < coderarity> nihilista: i don't understand why you are using fake timeouts in the first place
01:35 < nihilista> coderarity: also, i have at least 5 web sites/projects which are currently using this faking
01:35 < nihilista> well, it's not 'fake timeout()'... it's fake polling =)
01:36 < gildean> nihilista: i'm guessing faking timeouts actually means like recursive timeouts to execute polling
01:36 < nihilista> i use timeout() but it gets tensy even for my browser if i have all those web sites opened... i suppose that my server don't like that also
01:37 < nihilista> what i'm using is timeout() function to make ajax calls to db and return data back to display it to user with no need to refresh the page =)
01:37 < kgee_> websockets 101 (and yes I know socket.io is available): I finally got my websocket hello world working, ( http://pastebin.com/Pk6ZchXv ) but this method wraps an http server in a websocket, and appears to have two request handlers. Is there a way to remove http and dependencies, while simplifying handlers? 
01:37 < gildean> nihilista: so what you really want is something that can push instead of pull, like a websocket
01:38 < nihilista> gildean: exactly =)
01:38 < coderarity> ahhhhh
01:38 < coderarity> i get it
01:39 < nihilista> \o/ i explained it!!! (partly)
01:39 < coderarity> i thought you meant on your server side
01:39 < coderarity> I was really confused
01:39 < coderarity> nihilista: in that case, yeah, Node.js is great for that stuff
01:39 < nihilista> hehee, ah sorry, yes... i really need it for client side stuff
01:39 < nihilista> so in my case: node.js ftw, right? =)
01:40 < coderarity> totally
01:40 < nihilista> \\\o///
01:40  * coderarity celebrates with good music
01:41  * nihilista is handing over a bottle of beer to coderarity
01:41 < nihilista> so, node will be able to handle my multiple websites without any problems, right?
01:42 < coderarity> nihilista: that's illegal
01:43 < coderarity> nihilista: also, yeah
01:43 < nihilista> =)
01:44 < coderarity> nihilista: route based on the Host header. that is, `if (req.headers.host === "www.mywebsiteone.com") { serveWebsiteOne(); } else if (req.headers.host === "www.mywebsitetwo.com") { serveWebsiteTwo(); }`
01:44 < nihilista> ok, going to try to install node then... probably will be back wih more questions soon =)
01:44 < gildean> kgee_: well, your websocket server uses the http-server to handle the initial connection, so in that case no, i don't think you can separate those two
01:44 < coderarity> nihilista: cool :D
01:44 < owen1> nihilista: are u using WebSocket-Node?
01:45 < kgee_> gildean: I'm seeing more docs that basically say the same. We use the http to bootstrap the websocket connection, but we use the websocket request handler rather than the http handler
01:45 < kgee_> so I can remove a few lines of code, but not the empty function
01:45 < nihilista> owen1: i'm not using anything yet... i just cklicked the 'install' button on ww.nodejs.org
01:45 < coderarity> i want a websocket module that runs as a middleware or something
01:45 < nihilista> owen1: why do you ask?
01:45 < owen1> (:
01:46 < coderarity> actually, maybe this is not possible D:
01:46 < owen1> nihilista: who posted this - http://pastebin.com/Pk6ZchXv
01:47 < owen1> kgee_: ^^
01:47 < nihilista> ah, it was kgee_
01:47 < nihilista> =)
01:47 < gildean> coderarity: you can use ws and socket.io (which uses ws) to use the same http-server as your normal http-stuff, if that's what you're after
01:48 < coderarity> gildean: nah, it's not that
01:48 < coderarity> i just want to not use http events, but i don't think this is possible
01:49 < bitpimp> I'm learning backbone; I need a REST server using a database to test my backbone chops; what is the easiest way to do that using node?
01:49 < coderarity> it needs to use that upgradeHandler thing
01:49 < coderarity> bitpimp: couchdb is pretty RESTful
01:49 < owen1> kgee_: it looks like WebSocket-Node is just websocket. socket.io have support for other transports like JSONP polling, etc. just be aware of that.
01:50 < coderarity> bitpimp: maybe check out resourceful, it's got a restful interface
01:50 < coderarity> https://github.com/flatiron/resourceful
01:50 < coderarity> and then https://github.com/flatiron/restful
01:50 < bitpimp> coderarity: ok... I used express... and actually got it returning REST commands, but I couldn't figure out how to get it to return my index page which contains the backbone content... lol.
01:51 < bitpimp> coderarity: that's because I was mainly copying/pasting. I'll read up on the links.
01:51 < coderarity> bitpimp: if you gist your index page route, I'll give it a look
01:51 < coderarity> it should be pretty easy
01:51 < gildean> bitpimp: if it's just a static file, use express.static
01:51 < bitpimp> coderarity: oh thanks... lifesaver... stand by.
01:52 < coderarity> gildean: that's far too simple
01:52 < coderarity> gildean: ;P
01:52 < owen1> is there a convention for the environment for developing on local machine? i am talking about NODE_ENV. i have a few servers for dev environment, does it mean i should use developent for running my app on my laptop?
01:52 < bitpimp> gildean: I suspect this is a one line issue, as you're suggesting.
01:54 < coderarity> bitpimp: express is built on connect. here's the docs http://www.senchalabs.org/connect/static.html
01:54 < coderarity> basically, app.use(express.static(__dirname+'/public'))
01:56 < bitpimp> coderarity: https://gist.github.com/4576233
01:56 < bitpimp> doubt that's what you meant...
01:57 < coderarity> bitpimp: index isn't defined
01:57 < bitpimp> coderarity: yeah... didn't know where to put it, tried/guessed at a number of lines... hold on...
01:58 < coderarity> http://expressjs.com/api.html#res.render
01:58 < coderarity> you probably meant res.render('index')
01:58 < gildean> bitpimp: if your index is just a static file, you can just remove the app.get('/'... and add the app.use(express.static()...
01:58 < bitpimp> gildean: ok trying that
01:59 < gildean> anyways you prolly want the static file server there unless you have a separate server serving the static assets like css etc.
01:59 < bitpimp> gildean: well... I ran immediately into cross site scripting issues when I used two servers... which I hardly grokked...
02:00 < coderarity> you should be serving things on a CDN eventually
02:00 < coderarity> right now, run them on the same server
02:01 < coderarity> bitpimp: this is what he means https://gist.github.com/4576240
02:01 < owen1> bitpimp: and if you want to try no-express approach use st for static files. isaacs is using it for npm website
02:01 < bitpimp> coderarity: aha ok
02:02 < bitpimp> owen1: yeah... express looks cool, but I was quickly lost in it.
02:03 < owen1> bitpimp: https://github.com/oren/node-website-template
02:04 < bitpimp> owen1: that's awesome
02:04 < owen1> it's based on isaacs's npm site. templar for templating (u can use jade, ejs, whatever), mapleTree for routing (u can also try routes)
02:04 < owen1> bitpimp: node is not ruby and u don't have to use frameworks.
02:05 < owen1> pick and choose whatever u like. and instead of connect/middleware just add a function to the response object.
02:05 < coderarity> bitpimp: yeah, just do whatever you want
02:06 < coderarity> express is fine
02:06 < coderarity> no framework is fine
02:06 < owen1> bitpimp: res.template = Templar(req, res, templarOptions);
02:06 < gildean> lots of people are also using restify, which is a framework i guess: https://npmjs.org/package/restify
02:06 < owen1> that's how u add the templates. it's just a function you add to the response object
02:06 < coderarity> bitpimp: honestly, I suggest sticking with express for now
02:06 < owen1> coderarity: why?
02:07 < coderarity> bitpimp: lots of people use it, easier to get people to help
02:07 < coderarity> that's more than enough reason to stick to it as a starter
02:07 < owen1> coderarity: it's also very easy to get help on generic node. http.createServer is great.
02:08 < coderarity> owen1: yeah, but if you don't understand HTTP, you're going to have trouble
02:08 < bitpimp> one thing I'm realizing, and sort of liking, is that there appear to be lots of ways to do things... this is a return of config over convention, it seems.
02:08 < owen1> coderarity: it's better to learn http
02:08 < coderarity> owen1: nah, you gotta do things in order
02:08 < coderarity> eventually, yes
02:09 < coderarity> owen1: but if you're starting out with node and javascript, you've gotta take it one step at a time
02:09 < owen1> true
02:09 < coderarity> the Node.js community is huge - there's tons of modules, frameworks, and different opinionated people
02:10 < coderarity> i mean, a lot of people are just dealing with stuff like callbacks, streams, etc. for the first time
02:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:10 < Engin> as I'm using node on Windows/Cygwin it proves to be problematic in many steps. Once and for all I want to fix this. Is it possibleto have a perfectly working node installation by just preparing a node folder and appending it to the PATH. i.e. can npm figure out what ist he prefix and install global packages accordingly ? so that I'd have nodeunit in the path automatically ?
02:10 < isaacbw> you could once and for all install archlinux :D
02:10 < owen1> is there a difference between dev environment and development?
02:11 < isaacbw> dev is short for development
02:11 < coderarity> i support arch linux
02:11 < coderarity> ^^
02:11 < owen1> isaacbw: i have dev servers but i also want to run my app on my laptop, what environment should i use for that?
02:11 < Lorentz> debian all day every day
02:11 < owen1> + debian
02:11 < Engin> let's delve into OS debate later :D
02:11 < owen1> Lorentz: also on your laptop?
02:12 < Lorentz> yes
02:12 < isaacbw> but owen1 needs an answer now!
02:12 < coderarity> someone's gonna say smartOS
02:12 < isaacbw> we must fight it out for his sake
02:12 < owen1> (:
02:12 < owen1> Lorentz: what's your laptop?
02:12 < owen1> i have lenovo x120e
02:13 < Engin> can I query npm's configuratoin ? i.e. where it thinks its prefix is.
02:13 < Lorentz> thinkpad x200
02:13 < Lorentz> pretty old now
02:13 < owen1> what WM/DE 
02:13 < coderarity> Engin: just install node normally, add it to your path, and then add the npm directory to your path. I think it's like %APPDATA%/npm/bin or something like that
02:13 < owen1> awesomeWM here
02:13 < coderarity> it's $(npm root)/bin
02:13 < Lorentz> enlightenment, e17
02:13 < coderarity> Engin: oh, the prefix, it's `npm root`
02:14 < coderarity> Engin: you can also set it, `npm config set prefix`
02:14 < coderarity> like, `npm config set prefix <directory>`
02:14 < owen1> isaacbw: so what environment should i run my node on my laptop? i already have dev for my dev servers.
02:14 < coderarity> personally, I set mine to ~ before i do anything
02:14 < bitpimp> coderarity, owen1, gildean: yay!  it's working!! thx!  ;-)
02:14 < coderarity> bitpimp: sweet
02:15 < owen1> bitpimp: express?
02:15 < gildean> bitpimp: np
02:15 < bitpimp> just the code at https://gist.github.com/4576240 ... 
02:16 < Engin> coderarity: sweet. it works as expected when I do "npm root -g" it shows AppData/Roaming/npm which just makes sense.
02:16 < bitpimp> but I'm going to work through all the links and comments you all provided.
02:16 < coderarity> bitpimp: honestly, there's a lot of modules to digest with Node
02:16 < bitpimp> kinda hooked on this seamless client/server js flow now.
02:16 < coderarity> bitpimp: look around, but don't lose focus :P
02:17 < bitpimp> coderarity: totally understand that
02:17 < bitpimp> coderarity: kinda my downfall... I'm one of those omg-I've-got-120-browser-tabs-open guys
02:18 < coderarity> i lose my focus really easily
02:18 < coderarity> totally normal, there's just a ton of cool things out there to be distracted by :P
02:20  * coderarity goes to distract himself
02:20 < bitpimp> I've actually got to write a tablet game for work... and I decided to go with html5 and Titanium (they didn't want to go for phonegap)... so I've been learning backbone, and then I needed a rest server, so now learning node... and I'm getting a wee bit off task now, lol.  
02:21 < bitpimp> It'll be like: 'I've got bad news and good news... I didn't finish the game, but I learned all about node!'
02:24 < isaacbw> owen1, I run archlinux for all development
02:24 < isaacbw> but what you use is up to you
02:24 < isaacbw> apparently node seems to be working reasonably well on windows
02:25 < Lorentz> I prefer running my dev env as close to production as possible
02:25 < isaacbw> that's probably smart
02:25 < isaacbw> ubuntu is an easy linux distro to get started with, as is debian
02:26 < isaacbw> I don't know how ubuntu's unstable/experimental repos are
02:26 < isaacbw> but you really need cutting edge repos to develop
02:26 < isaacbw> otherwise you'll be compiling everything from source and that's a pain in the ass
02:27 < isaacbw> actually yea, definitely don't use archlinux as your introduction to linux
02:27 < Lorentz> I like debian because it's a good baseline
02:27 < Lorentz> lots of things are based off it, and it just feels "standard"
02:32 < owen1> Lorentz: i use debian on both my home server and my lenovo laptop. got mac from work so started using it as well but i find debian lean and stable.
02:33 < owen1> speaking of home server, anyone can recommend on small, quite server for my office?
02:33 < owen1> got a few small node apps i want to host myself
02:34 < nihilista> is it smart to have apache and node.js running at a same time on my server?
02:34 < nihilista> i mean, i hope there will be no need to run apache anymore in the end -.-
02:35 < owen1> nihilista: why do u need apache?
02:35 < nihilista> currently to serve my web sites (which will be served by node pretty soon i hope)
02:40 < Lorentz> owen1: for hosting, I go with a vps instead of doing it at home
02:40 < Lorentz> or if it's big enough, proper dedicated hosting
02:40 < owen1> nihilista: i have 2 sites. both node and i use http-proxy (npm package) to redirect the domain of each to it's port on my machine.
02:40 < owen1> Lorentz: why? i want to experiment with a few small projects? why do i need to pay monthly?
02:41 < nihilista> owen1: oh, ok, i think i understand =) thanks
02:42 < Lorentz> owen1: even small projects, I don't trust my home network to be up all that constantly
02:42 < Lorentz> it's home connection, afterall
02:42 < Lorentz> if it's just playing around with your own stuff, a virtualmachine might be more suitable than setting up your own physical box
02:44 < Lorentz> if you really do feel that a physical box is needed, then just any old atom board would do
02:44 < Lorentz> depending on what you want to do, of course
02:45 < owen1> it's playing around, but i still want it to be available %90 and i want to access it anywhere i am.
02:45 < bitpimp> owen1: don't forget that amazon gives you one free server, with a free ip address.
02:45 < owen1> bitpimp: for how long?
02:45 < bitpimp> owen1: forever
02:45 < Lorentz> I suspect keeping a box on all day is more expensive than getting a cheap-as-cheap VPS though.
02:45 < Lorentz> in power usage.
02:45 < bitpimp> owen1: well, until they change it, I suppose, but it'll probably just get more generous
02:46 < Lorentz> at least, it's the case around here, assuming even something like 20W usage from such a box.
02:46 < bitpimp> owen1: http://www.aws.amazon.com
02:46 < bitpimp> owen1: if you already have an amazon account, to buy stuff, it just extends that.
02:48 < bitpimp> owen1: also, you can make images of your various servers in various configurations; their free tier lets you run any one of them, as long as it's a micro instance
02:49 < xk_id_> Is there any Node module that can make working with strings extraordinarily piece of cake?
02:50 < owen1> bitpimp: so i can get a free micro nistance for life?
02:50 < owen1> i'll try it now. thanks!
02:52 < bitpimp> owen1: well, yes
02:53 < bitpimp> but of course, next year, they could charge, but I expect they probably just sweeten the deals as other cloud providers compete with them.
02:54 < bitpimp> owen1: aws is addictive.
02:54 < owen1> bitpimp: there is something nice in owning my own little box
02:54 < bitpimp> owen1: yes... I'm all for that.
02:55 < bitpimp> owen1: just scrounge up an old laptop or computer and put ubuntu on it.
02:56 < bitpimp> owen1: or http://www.raspberrypi.org/
03:00 < xk_id_> Is anybody here affiliated with nodemanual.org? It's been offline for about a wekk.
03:00 < xk_id_> *week
03:01 < owen1> bitpimp: i was eyeing this one - http://www.newegg.com/Product/Product.aspx?Item=N82E16859107052
03:03 < bitpimp> owen1: that looks pretty good.  Also: http://www.newegg.com/Product/Product.aspx?Item=N82E16859107052
03:04 < bitpimp> oops... http://www.globalscaletechnologies.com/t-sheevaplugs.aspx
03:11 < isaacbw> are there any big forums for web hackers?
03:11 < isaacbw> developers
03:14 < owen1> bitpimp: interesting
03:16 < Engin> I'm strictly following (rather trivial) nodeunit examples but nodeunit does not execute any test... it processes the file but looks like it cannot detect the tests in it
03:16 < Engin> any common pitfalls ?
03:17 < lohkey> why'd you pick node unit? i've never used it before
03:17 < Engin> hahah it works when I do it on cmd.exe but mysteriously fails in cygwin
03:17 < Engin> fuck this shit
03:18 < lohkey> We use mocha at work
03:18 < lohkey> never really gave us any problems
03:18 < Engin> well, I seached for unit testing and this was recommended, so
03:18 < lohkey> recommended by search?
03:19 < Engin> yeah I didn't even search for it ... the search key words recommended it, they spoke to me
03:19 < SomeoneWeird> nodeunit is good
03:21 < Engin> if it wasn't mysteriously failing in cygwin that'd be great
03:22 < Engin> it's very weird, because it locates the file processes it but fails to execute the tests in it
03:23 < SomeoneWeird> all your problems seem to relate to cygwin
03:24 < Engin> yeah 
03:24 < Engin> that's very expected if none of the devs use cygwin as a platform :)
03:25 < Engin> what's not nice is that it is silently failing... 
03:27 < gildean> quoting the npm readme: Installing on Cygwin
03:27 < gildean> No.
03:27 < SomeoneWeird> do you have to use windows, for some other reason?
03:27 < SomeoneWeird> if so, don't use cygwin, if you don't, use linux
03:28 < isaacbw> or if you have a fast enough computer, set up a VM
03:28 < isaacbw> and run linux in that
03:28 < SomeoneWeird> yeah
03:28 < isaacbw> or dual boot
03:29 < Engin> very dangerous topics
03:29 < Engin> we can rant till dawn haha
03:29 < SomeoneWeird> well, you're asking for solutions
03:29 < isaacbw> mingw
03:29 < Engin> I know I know
03:30 < isaacbw> you could rent a dedicated server and ssh into that for all your development
03:30 < isaacbw> superpro
03:30 < Engin> I could install linux on a vm but I'M on a little 256G drive
03:30 < isaacbw> are VMs big?
03:30 < SomeoneWeird> debian is like 4 gigs installed or something
03:30 < SomeoneWeird> idno
03:31 < Engin> if you have 256G drive, they are
03:31 < Engin> I have 30G empty space I suppose
03:31 < Engin> and a pro advice for you -- never will your hard drive -- never :)
03:31 < SomeoneWeird> huh
03:32 < Engin> even my ssd started to fail when it is full
03:32 < SomeoneWeird> heh
03:32 < Engin> failed as in it cannot reallocate bad blocks as there's no spare blocks left
03:32 < SomeoneWeird> i have an external 1tb all my vm's are on
03:32 < Engin> I'm the person who had most  hdd problems on earth, I'm pretty sure
03:32 < Engin> that's be slow 
03:33 < SomeoneWeird> usb3
03:33 < SomeoneWeird> it's fine
03:33 < Engin> ssd rocks... but space is more precious
03:33 < Engin> never tried usb3 myself, but it'll be slower than ssd anyway 
03:33 < Engin> even if the bus is fast t hdd interface is most likely not
03:33 < SomeoneWeird> right, but running on OS off a usb3 compared to ssd will be barely noticable once it's loaded up
03:34 < SomeoneWeird> and when all your VM's are linux, they boot in like 30 seconds anyway
03:34 < Engin> obviously
03:34 < Engin> rule of thumb, if it hits page fault, it will be slow as fuck no matter what hdd you have
03:38 < cellvia> where the party at
03:38 < cxreg> isaacs: I got the repl/domains PR filed.  the test was tricky, as it was "passing" in the broken case since assert throws, and that fired the active domain, thus emitting the expected output.  laughs all around.  anyway, test works now and PR submitted
03:43 < xk_id_> isaacbw: have you tried HN?
03:43 < isaacbw> HN?
03:43 < isaacbw> oh
03:43 < isaacbw> I look at it every once in a while
03:44 < xk_id_> I think there's a lot of developers there.
03:45 < xk_id_> Does anybody know why string.match() returns an array with 3 components?! And where can I find the documentation for the method? (nodemanual.org is offline)
03:45 < cellvia> look up ecmascript 5 match
03:50 < xk_id_> http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.10 I still don't get it. 
03:50 < Engin> I think I'll give up and install ubuntu in a vm :/
03:50 < Engin> I don't want to hunt down shitty bugs
03:51 < Engin> or maybe I sdhould just fix them to help out
03:54 < AthanClark> Hello everyone, can someone tell me where the mailing list went? I have a suggestion / idea that I think would be really rad for the framework.
03:54 < Engin> scary stuff, nodeunit started working in cygwin 
03:55 < AthanClark> ...unless yall'd like to hear it here. Any takers? Eh?? Eh???
03:55 < gildean> AthanClark: shoot
03:56 < Engin> yeah, I'd like to hear it too
03:56 < AthanClark> Turn require() / NPM into a dependancy injector
03:56 < AthanClark> so you can test modules in units rather than with scenario tests
03:58 < AthanClark> Here's how I'm thinking it could be done in a unobtrusive way: Make a npm "modes" that define the folders that npm looks for in order to resolve require()'s, so you could put testing dummy modules in .test_node_modules and still keep production modules in the normal .node_modules
03:58 < AthanClark> what do you think?
03:59 < xk_id_> Why does this: "console.log("Page 1 of 2".match(/Page 1 of /));" print this: "[ 'Page 1 of ', index: 0, input: 'Page 1 of 2' ]" ??!
03:59 < xk_id_> what the hell is that array doing :(
04:00 < xk_id_> what the hell is that array doing :(
04:01 < xk_id_> oups. wrong window
04:01 < AthanClark> The first element of the array is the string matched I'm guessing. Try doing something like "Page 1 of 2".match(/\d/); and see if the first elements are numbers
04:01 < xk_id_> [ '1', index: 5, input: 'Page 1 of 2' ]
04:01 <@Nexxy> xk_id_, let me introduce you to MDN
04:01 <@Nexxy> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec
04:02  * xk_id_ nods
04:02 < xk_id_> I've already browsed that link.
04:03 <@Nexxy> there is a table right below the fold
04:04 < xk_id_> Nexxy: exec() returns the same strange array consisting of 3 elements.
04:04 < xk_id_> console.log(/\d/.exec("Page 1 of 2")); >> [ '1', index: 5, input: 'Page 1 of 2' ]
04:04 <@Nexxy> it's not strange
04:04 <@Nexxy> it's clearly explained 
04:04 < xk_id_> Ah. In the table. Right.
04:04  * xk_id_ reads
04:04 <@Nexxy> :)
04:04 < xk_id_> sorry!
04:05 < gildean> xk_id_: string.match returns the match, the index and the input
04:06 < gildean> add the g in the regexp and it'll return just an array with the matches
04:06 < xk_id_> So I can get what I want by using [0]
04:06 < Engin> modules and require-ee's does not share the same global scope ?
04:06 < xk_id_> hm okay let's try that. 
04:06 < gildean> as in: console.log("Page 1 of 2".match(/Page 1 of /g));
04:07 < Engin> i.e. if I define a global in a module, it's not available in main.js ?
04:07 < gildean> Engin: no, the global scope in node is the module scope
04:08 < Engin> ok
04:08 <@Nexxy> Engin, it will be available
04:09 <@Nexxy> but you shouldn't use globals
04:09 < Engin> well, it's not available
04:09 <@Nexxy> that's probably for the best :)
04:10 <@Nexxy> (but it should be, if you've declared it)
04:10 <@Nexxy> (but don't use it)
04:10 < Engin> :)
04:14 < xk_id_> gildean: I don't understand why adding g in the case of match() works. Furthermore, I don't understand why adding g in the case of exec() doesn't work. 
04:14 <@Nexxy> that's also explained on MDN
04:15 <@Nexxy> If the regular expression does not include the g flag, returns the same result as regexp.exec(string).
04:16  * Nexxy pasted for you
04:16 < Engin> what should I do if I want to debug a module (i.e. nodeunit) ?
04:16 < xk_id_> Nexxy: I swear I can't find that in my document. 
04:16 < Engin> calling it a package would be more appropriate I tjink
04:16 <@Nexxy> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match
04:17 < xk_id_> !
04:17 <@Nexxy> !
04:19  * xk_id_ bookmarks MDN
04:19 < xk_id_> thank you!
04:20 <@Nexxy> xk_id_, you're welcome :)
04:21 < Engin> is there a console.foo which would print the objects in a nice prsesentation ?
04:22 < gildean> Engin: it should give a pretty nice presentation?
04:22 < Engin> console.log prints [object Object]
04:22 < SomeoneWeird> it shouldn't
04:23 < gildean> it used to, iirc
04:23 < gildean> on an older version
04:23 < gildean> on older versions you could use console.dir iirc
04:23 < Engin> wait, ok, it was my fault 
04:23 < Engin> it pretty prints
04:23 < SomeoneWeird> :)
04:24 < gildean> am i wrong or did console.log used to give a string representation of the object?
04:24 < Engin> and it would be so nice if I could debug this package
04:24 < gildean> [object Object] in the case of object
04:25 < Engin> gildean: no, it prety prints, I had  a string concatanation so it called toString of the object 
04:26 < SomeoneWeird> that'd be why :)
04:26 < gildean> no, i know it does pretty print, i was just wondering if the console.log worked differently on an older version
04:26 < gildean> like on 0.6.x or something
04:26 < gildean> or am i just mixing it up with something other
04:28 < AthanClark> Can someone tell me how `require()` looks up modules? Is it part of Node's Core?
04:28 < niggler> AthanClark its in the docs
04:29 < niggler> AthanClark http://nodejs.org/docs/latest/api/modules.html#modules_modules look for 'All Together...'
04:30 < AthanClark> niggler can you tell me where require is implemented? Like where's the source code for it?
04:31 < niggler> AthanClark https://github.com/joyent/node/blob/master/lib/module.js#L231
04:32 < AthanClark> You're the man :) Thank you!
04:38 < Engin> hehe debugger also does not work under cygwing
04:38 < Engin> i have to debug the ebugger too
04:38 < Engin> looks like a input problem, as I can drop in dbeugger but it does not answer to my commands
04:39 < Engin> hmm is debugger a hack to interactive node ?
04:42 < Engin> ok, good news, i guess
04:42 < Engin> actually it even works in cygwin bash terminal (which is very crappy)
04:42 < Engin> though it does not work on my ssh terminal to my own box (a ssh  terminal to local sshd to get a decent cygwin terminal)
04:43 <@Nexxy> Engin, node has its own REPL
04:43 <@Nexxy> you just type `node`
04:44 < Engin> yeah I know, I was curious if the debugger is native code or not, i think it is
04:44 < Engin> I started to think that this case does not even worth debugging
04:45 < Engin> what is node using for terminal io ?
04:45 < SomeoneWeird> hm?
04:46 < Engin> to read the key presses
04:46 < Engin> because the debugger is not working fine in one of my terminals (putty)
04:57 < Engin> yeaaah
04:57 < Engin> definetely terminal IO is screwing up somewhere
04:57 < Engin> conseuqutive callsto console.log only prints the first one
04:57 < Engin> anyone can tell from top of his head how is console.log implemented ?
04:58 < Engin> or point me to the source file :)
04:58 < Engin> all along, nodeunit was working but only the first line of output was visible... hence I thought it was able to locate the file but cannot find the tests in it...
04:58 < Engin> I believe this is a cygwin bug
04:59 < SomeoneWeird> more than likely
04:59 < Engin> I remmeber this sort of stuff
04:59 < Engin> cygwin is a broad term actually
05:00 < Engin> it works in the bash.exe started in the cmd.exe
05:00 < Engin> it does not work in the bash.exe forked by sshd
05:00 < Engin> haha such bullshit
05:07 < timeturner> anyone using superagent here
05:07 < Engin> oh fuck
05:08 < Engin> I think it is because console.log is just printing \r and not \r\n
05:08 < Engin> is that possible ?
05:08 < timeturner> definitly
05:08 < timeturner> os.eol
05:09 < that4chanwolf> process.stdout.write(data + os.eol);
05:11 < Engin> os is not defined 
05:12 < Engin> os is not defined 
05:12 < Engin> oops sorry
05:12 < timeturner> require('os').eol
05:12 < Engin> now I also noticed that I'm getting inconsisted results
05:13 < Engin> process.stdout.write sometimes give output sometimes not
05:13 < Engin> there's a buffering issue somewhere
05:13 < Engin> is there a stdout.flush() ? :)
05:13 < Engin> looks like not
05:13 <@Nexxy> lol
05:14 < Engin> I couldn't find the reference for stdout though
05:14 < Engin> http://nodejs.org/api/process.html#process_process_stdout
05:16 < Engin> http://nodejs.org/api/stream.html ok
05:30 < xk_id_> So if Node is single-threaded, then async.parallel() isn't exactly parallel?
05:32 <@Nexxy> xk_id_, it can be
05:32 <@Nexxy> node has a single event loop, it still uses threads
05:35 < dominictarr> xk_id_: io, crypto, and zipping will all run in parallel
05:35 <@Nexxy> dominictarr, !
05:35 < mscdex> crypto is sync
05:35 < dominictarr> Nexxy: hey
05:36 < dominictarr> oh, I could be wrong
05:36 <@Nexxy> I've been meaning to ask you about how your wearable computer is going
05:36 < mscdex> i suggested there be an async crypto API some time ago
05:36 < xk_id_> so, does it make sense to the following in async.parallel(): scrape 3 webpages and push the results in the same array. 
05:36 < dominictarr> no progress, I lost my video glasses (which didn't work anyway) in moscow airport
05:37 <@Nexxy> noooo!
05:37 < dominictarr> xk_id_: yes, that will be parallel
05:37 < xk_id_> dominictarr: so I will benefit from doing that, it's not pointless, yes?
05:37 < cxreg> largely due to i/o wait
05:37 < cxreg> it's not pointless, no
05:37 < xk_id_> I may show my code to a teacher, I don't want to embarras myself :P
05:37 <@Nexxy> that's kind of the point exactly
05:37 < dominictarr> xk_id_: yes, do it that way
05:37 < xk_id_> brilliant!
05:37 <@Nexxy> it's the opposite of pointless!
05:38 < xk_id_> very pointful indeed!
05:38 < cxreg> .oO(pointful?)
05:38 <@Nexxy> haha, yes
05:38 < cxreg> heh
05:38 <@Nexxy> :P
05:38 < dominictarr> Nexxy: I'm gonna get a new pair when I get back to dublin, 
05:38  * Nexxy misses Dublin
05:38 < cxreg> it's not so much concurrent processing as "not in serial".  there's a difference.
05:38 < dominictarr> I'm not gonna be anyplace long enough to receive international shipping until then!
05:39 <@Nexxy> just ship to someone central to your travels
05:39 < dominictarr> yeah, most of the time is spent waiting - (io and international shipping -- both forms of IO)
05:39 <@Nexxy> and have them drop ship it when you get close enough!
05:39 < dominictarr> Gonna be based in dublin by marchish!
05:40 < cxreg> heh.  non-blocking travel
05:40 <@Nexxy> dominictarr, jealous
05:44 < dominictarr> Nexxy: come visit!
05:48 <@Nexxy> dominictarr, I plan to!
05:49 < dominictarr> VERY GOOD
05:54 < Rojuinex> getting a weird problem with express.  I only get a 404 when I have certain get variables… don't know what I'm doing wrong
05:55 < Rojuinex> NO 404!
05:55 < Rojuinex> GET /login?logout=true 200 46ms - 451
05:55 < Rojuinex> GET /stylesheets/style.css 304 7ms
05:55 < Rojuinex> GET /favicon.ico 404 3ms
05:55 < Rojuinex> NO 404!
05:55 < Rojuinex> GET /login?username=caleb&password=pass 404 11ms - 498
05:55 < Rojuinex> NO 404!
05:55 < Rojuinex> GET /login?google=yes 302 10ms - 74
05:55 < isaacbw> bleh
05:55 < Rojuinex> The NO 404! is output by the login route
05:57 <@Nexxy> Rojuinex, is there a question associated with this?
05:57 < Rojuinex> Why am I getting a 404 for the /login?username…. and not for the others?
05:57 < Engin> node -i just fails in the faulty terminal. node just exists. any idea how to debug it ?
05:57 < Engin> (i.e. any log ? verbosity level? )
05:58 <@Nexxy> Rojuinex, can you post code? (to a paste service?)
05:58 < Rojuinex> Nexxy Yeah 
06:03 < Rojuinex> I can do you one better https://github.com/Rojuinex/express_test
06:03 <@Nexxy> > coffeescript
06:03 <@Nexxy> there's your problem!
06:03 <@Nexxy> :P
06:04 < Rojuinex> :\
06:04 < Rojuinex> no
06:04 < Rojuinex> lol
06:04 < Rojuinex> i actually think I just figured it out
06:04 < Rojuinex> maybe
06:05 < Rojuinex> think it might have to do with my call back in login.coffee
06:06 <@Nexxy> I have a very hard time reading coffeescript
06:07 < TehShrike> I hear it's nice to write
06:08 < timeturner> can someone help me with a crossdomain problem I'm having... for the life of me I can't figure out why it's happening
06:08 < timeturner> I'm not doing a crossdomain request
06:08 < timeturner> but I get the error
06:09 < Rojuinex> Nexxy: You haven't programmed much in python then have you? :p
06:11 < brycebaril> timeturner cross domain is more than just domain -- subdomain, port also
06:13 < timeturner> on page http://localhost:3000, xhr'd to http://localhost:3000
06:13 < timeturner> I wish I could console.log something to see what's causing it to believe it's crossdomain
06:13 < timeturner> it was working before too...
06:16 < andu> timeturner, you do have console.log in a browser
06:16 < andu> ctrl+shift+i  go to console tab
06:16 < andu> in chrome
06:16 < timeturner> I mean, I don't know what to console.log
06:16 < timeturner> all I'm getting from the error is { crossDomain: true }
06:16 < brycebaril> Look at the headers, or do a packet capture
06:25 < brainbox1100> What's the trick to not use an anonymous function for a http.get's on 'end' handler but still allow it to get access to the data received?
06:26 < brainbox1100> As soon as I don't use an anon function I loose my vars outside. I suppose I could .bind() a different this.
06:27 < brycebaril> you could declare the named function in the same scope as the on 'end' handler I suppose
06:27 < SomeoneWeird> anyone here use metasploit?
06:29 < brainbox1100> brycebaril: Do people typically nest in this situation?
06:30 < brycebaril> I usually just declare an anonymous function there, it is usually just going to pass collected data to another callback
06:31 < brycebaril> so only a couple lines long and no further nesting
06:53 < xk_id_> Can somebody review this very simple code making use of the async library? Thanks! http://pastebin.com/t61NLhEb
06:57 < timeturner> xk_id_: looks fine
06:57 < xk_id_> I get Syntax Error at line 14
06:57 < xk_id_> No, not syntax.
06:57 < xk_id_> I get htis: "TypeError: undefined is not a function"
06:58 < xk_id_> and the pointer is under letter "c" of "callback(null, a);"
06:58 < cxreg> the call to three() passes no callback
07:00 < xk_id_> cxreg: what about the callback at line 14?
07:00 < cxreg> i think you wanted: async.waterfall([three, four]);
07:00 < SomeoneWeird> ^^ this
07:00  * xk_id_ nods
07:00 < xk_id_> worked..
07:00 < SomeoneWeird> you need the actual functions, not their returned values
07:00 < xk_id_> ooh!
07:00 < xk_id_> you guys are awesome. cheers!
07:01 < xk_id_> subtle mistake.
07:03 < cxreg> i'm not sure why this fails though: async.series([one, two]);
07:03 < cxreg> i only get "one" when i make that change
07:03 < xk_id_> I was just playing with that..
07:03 < cxreg> oh, it's because one never calls the callback
07:03 < xk_id_> ifyou do async.series([one, two()]); it works, tho
07:04 < cxreg> series passes a next function, which you are not calling
07:04 < SomeoneWeird> add cb to args for one, then call that after the console.log
07:04 < xk_id_> you need callbacks for series as well?
07:04 < SomeoneWeird> yes
07:05 < xk_id_> fair enough
07:11 < cxreg> xk_id_: https://gist.github.com/4577093
07:12 < cxreg> although simply passing the series cb  to the waterfall discards the result, which may or may not matter
07:13 < xk_id_> cxreg: cheers. looks good :)
07:13 < xk_id_> oh, wait
07:13 < xk_id_> I didn't notice the cb in the waterfall..
07:14 < xk_id_> is the cb in the waterfall necessary?
07:14 < cxreg> without it, three would never run
07:14 < xk_id_>  async.waterfall([three, four], cb);
07:15 < xk_id_> oh
07:15 < cxreg> i mean the outer three
07:15 < xk_id_> yes
07:15 < cxreg> i guess that should have been "five"
07:15 < SomeoneWeird> the cb in the waterfall is the callback for series 
07:15 < xk_id_> very interesting. thanks
07:16 < xk_id_> so the cb of the waterfall is picked up by the series?
07:16 < cxreg> other way around... the series callback is passed to two()
07:16 < cxreg> and needs to be called somewhere.  calling it from the final waterfall callback makes it proceed
07:17 < xk_id_> so, just, to check, "async.waterfall([three, four], cb);" is equivalent with " async.waterfall([three, four]); cb();"?
07:17 < cxreg> well, no.  that would call cb() too quickly.
07:17 < xk_id_> as far as the series is concerned
07:17 < cxreg> but yes
07:17 < xk_id_> ah!
07:17 < xk_id_> witty!
07:18 < xk_id_> hehehe
07:18 < SomeoneWeird> lol
07:18 < xk_id_> very cool. thanks
07:18 < cxreg> chaining, it's what's for breakfast
07:19 < mscdex> who was it that started on a pure js http parser?
07:19 < mscdex> some time back
07:20 < equark> When implementing an REST API with express, I keep avoiding building a model layer completely and just put validation and direct sql in the controller.  How bad is this really?
07:21 < xk_id_> Hm I wish there could be a way to bookmark a gist from within gisthub. And have a list associated with my account with all the bookmarked gists
07:24 < cxreg> xk_id_: you can star and fork them..
07:24 < xk_id_> oh, is there a way to see what I starred?
07:24 < xk_id_> yep, there is.
07:24 < cxreg> no doubt there is :)
07:25 < xk_id_> I thought it was like FB's like button. 
07:26 < SomeoneWeird> you can still see what you've liked on fb :P
07:29 < xk_id_> Ohh. Is it the activity log thing? It didn't use to be there back when I actually FB'ed. 
07:40 < brycebaril> xk_id_ cxreg I forked cxreg's gist to have it illustrate actually using async's accumulation/forwarding of results. Might also be of use
07:48 < xk_id_> brycebaril: what's the point of line 22?
07:49 < brycebaril> line 22 is sending the results to the waterfall accumulator
07:49 < chovy> anyone checkout this mega.co.nz yet?
07:49 < brycebaril> it was line 19 on cxreg's gist
07:50 < xk_id_> I know, but why the processing of the array?
07:50 < brycebaril> I was joining it there to signify in the final output that three and four happened in place of two. Doesn't need to be done that way.
07:52 < xk_id_> oh, shit. I didn't see the output of output()
07:55 < xk_id_> brycebaril: so, the code shows how the (final) callback of each item in the series accummulates, right?
07:58 < xk_id_> Question: Can I push a function into an array, without executing it? I want to push a bunch of functions in an array, and then execute them as part of an async.reduce. Does this make sense?
08:01 < brycebaril> I've not tried that, worth a shot, certainly. I haven't looked how async sniffs out the callback it might use, but probably just looks for a function in the final parameter and assumes that is it.
08:02 < SomeoneWeird> xk_id_, sure?
08:02 < SomeoneWeird> >> var a = function() {}; var b = []; b.push(a); b
08:02 < purr> SomeoneWeird: (object) [function () {}]
08:02 < SomeoneWeird> works fine
08:06 < brycebaril> xk_id_ yup, if you convert it all to functions it works fine.
08:08 < brycebaril> xk_id_ updated my gist to do that
08:14 < eddyb> pfffft
08:14 < eddyb> the repl is so broken
08:14 < eddyb> try{eval('let foo = 0;')}catch(e){throw e;}
08:15 < eddyb> the errors passes through two levels of indirection and it still makes the repl think I need to complete the line
08:16 < eddyb> I have to do this: try{eval('let foo = 0;')}catch(e){console.log(e.stack);}
08:18 < eddyb> oh, what do you know...
08:19 < SomeoneWeird> ...?
08:19 < eddyb> (function(){'use strict'; let r = []; for(let i = 0; i < 10; i++){r[i]=function(){return i;}}; return r;})().map(function(x){return x();});
08:19 < eddyb> block bindings are broken in v8
08:19 < eddyb> (run with node --harmony)
08:19 < eddyb> that should return 0,1,2,3,4,5,6,7,8,9, but instead it's all 10s
08:20 < eddyb> you have to do something like: for(let i = 0; i < 10; i++){let j = i; r[i]=function(){return j;}} to get the proper functionality
08:40 < RigidWig> IPs can't have subdomains, can they?
08:40 < dminus> err no
08:41 < dminus> you can delegate DNS for PTR ranges, which kind of looks like delegating authority for subdomains 
08:41 < RigidWig> dminus, PTR ranges?
08:42 < dminus> aka reverse dns
08:43 < RigidWig> relatively new to all this. but I have an amazon ec2 instance running with an elastic public IP. I have two node instances on different ports. I have nginx for reverse proxying, but I can't seem to hit a subdomain of the ip address
08:43 < RigidWig> e.g. sub.81.23.144.234 or whatever
08:43 < RigidWig> but this shouldn't be possible, right?
08:43 < dminus> erm
08:43 < xk_id_> never :)
08:44 < RigidWig> so the registrar has to have a record for where to direct a subdomain?
08:44 < RigidWig> or, if I didn't misread, it redirects with specific headers
08:44 < xk_id_> you can only apply a subdomain to a domain. IPs are not domains. 
08:44 < RigidWig> that nginx can use to send to a different node port?
08:44 < dminus> you need to have your app responding to Host header
08:45 < RigidWig> Public DNS is not a domain, either, correct?
08:45 < dminus> and set up with some hostname like "dev.watever.com", which would be pointed at your proxy/lb
08:46 < squeakytoy> i really really wish I had a second coputer, to run my node.js website at home
08:47 < RigidWig> xk_id_ and dminus, thank you guys, there are so many dimensions to all this, can get confusing sometimes...
08:47 < eddyb> hyperspace is tricky
08:47 < RigidWig> I know right?
08:47 < eddyb> dat fifth dimension man
08:48 < RigidWig> it makes the 7th look like the 2nd, am I right?
08:48 < eddyb> RigidWig: I was joking, but you should see a doctor
08:49 < RigidWig> In the 7th dimension, you see all kinds of things... doctors, unicorns...
08:49 < xk_id_> i heard there's cake too
08:50 < bitmage> the fifth dimension is ASCII
08:50  * xk_id_ claps
08:54 < squeakytoy> where do you guys host your node.js websites?
08:54 < timeturner> on a box
08:54 < RigidWig> squeakytoy: EC2 has a free tier....
08:54 < RigidWig> which I am using to learn all these shenanigans
08:54 < squeakytoy> so, by yourself, amazon
08:55 < timeturner> personally I would develop locally or ona virtual machine and then deploy on a server for production use
08:55 < SomeoneWeird> rackspace, nodejitsu, heroku, appfrog
08:55 < SomeoneWeird> etc
08:55 < squeakytoy> yea, but what is a "server for production" use
08:55 < timeturner> I'm using linode
08:55 < timeturner> works well
08:55 < timeturner> pricing is right imo
08:56 < dminus> linode rules :3
08:56 < timeturner> :D
08:57 < dminus> cheap unmanaged dedis can be good too
08:58 < RigidWig> since I'm so new to this, why is linode better than say aws? is it more than the cost per processing/storage/bandwidth?
08:58 < dminus> linode is a bit simpler
08:58 < timeturner> cleaner
08:58 < timeturner> interface has no bs
08:59 < timeturner> aws is quite convoluted imo
08:59 < RigidWig> so it's more of a usability thing, then?
08:59 < timeturner> usability, support
08:59 < RigidWig> which I assume can be a nightmare if you're not just sshing "node helloworld.js"?
08:59 < timeturner> yes
08:59 < timeturner> very much so
08:59 < SomeoneWeird> although amazon has elb and elestic storage too
09:00 < squeakytoy> appfog is forcing me to install ruby installer :S
09:00 < dminus> my reckoning is, once you encounter some limitation that the simple-ass (vm-on-a)box model can't handle
09:00 < dminus> then maybe time to look at aws
09:00 < dminus> until then, linode it up 
09:00 < dminus> and if you're not sure where you fit, it's the latter
09:00 < dminus> but just my $0.02
09:01 < RigidWig> linode being the latter?
09:01 < dminus> yeah, if you just want a system with an IP address and ssh access
09:02 < squeakytoy> intresting discussion
09:02 < dminus> and the ability to reload OS at will
09:02 < xk_id_> https://gist.github.com/4577373 << halp :/
09:02 < dminus> in case you break something
09:02 < dminus> there's others besides linode that follow the same model, it's just the one i'm familiar with
09:02 < RigidWig> dminus, when you say reload the OS, you mean the hardware OS? cause you can always "sudo reboot" on the instance?
09:03 < dminus> i mean reinstall the os from scratch, like if it won't boot anymore for some reason
09:03 < RigidWig> dminus, I see...
09:03 < dminus> or if it isn't accessible over ssh
09:03 < dminus> or if you decide you hate fedora and want to try debian
09:10 < iksik> mscdex: right, and fun also.. but i don't have so much time to spare it is still only hobby experiment, that is why i was looking for some already created stuff, to make things easier -_-
09:12 < mscdex> iksik: i wouldn't call the IMAP protocol 'fun' by any stretch, but to each their own :-)
09:12 < iksik> ;-D
09:13 < iksik> i have foun some code, which i think i can use as a start point and port it http://code.google.com/p/ruby-imapd/source/browse/trunk/imapd.rb
09:13 < iksik> found*
09:16 < iksik> at the beggining i even don't need any authorization... because haraka is relying on from local server to/from the web, but imapd works (dovecot currently) in my local subnet and it accepts only local connections
09:18 < iksik> hmm, i can use my vpn to login into it from the web -_-
09:30 < gru2> https://www.youtube.com/watch?v=idDCom9fHpM&t=1m40s
09:33 < LouisRoR> Hey Guise. I've got an £80,000 Senior Ruby-on-Rails developer role at one of the most desireable teams to work for in London + Multiple contracts at £300-400 /day onsite accross the UK if thats relevent to anyone at the moment? Msg for details - LouisRoR.com
09:37 < mscdex> iksik: it might be possible to have dovecot and periodically push new messages to it or have it pull messages from you?
09:38 < mscdex> via a plugin or some such
09:39 < iksik> well that was my first idea, but isn't it more hack-ish way of doing it?
09:40 < mscdex> well, it beats writing an IMAP server
09:41 < iksik> ;]
09:41 < mscdex> it looks like using maildrop or similar with dovecot might work
09:41 < mscdex> you feed it the message on stdin and puts the message where it needs to go in the right format
09:41 < iksik> mhm
09:44 < xk_id_> Guys, help. I'm trying to push functions into an array and then call those functions later (splice the array). https://gist.github.com/4577530
09:44 < paradoxquine> what does npm's --save-dev flag do ?
09:44 < xk_id_> sorry. forget the splice comment
09:50 < mscdex> xk_id_: i'm not sure i get how you're trying to accomplish that with the gist?
09:51 < mscdex> oh wait nvm
09:51 < xk_id_> ok
09:51 < mscdex> xk_id_: so what are you expecting that gist to output?
09:52 < xk_id_> "10"
09:52 < squeakytoy> a question, when you include "modules", with require, should the variable be: var mailService = require(), or var MailService = require();  to later do: mailService.mail(); or MailService.mail(); hmmmm
09:52 < mscdex> xk_id_: you're not returning param * 10
09:52 < xk_id_> mscdex: ah, shit.
09:53 < mscdex> squeakytoy: generally it depends on what require('foo') returns
09:53 < xk_id_> mscdex: works now. cheers! :)
09:53 < mscdex> squeakytoy: if it returns a "class", then use caps, otherwise no
09:54 < mscdex> a "class" meaning something you are going to instantiate with `new`
09:54 < mscdex> var m = new MailService(); m.mail(); vs mailService.mail();
09:54 < squeakytoy> mscdex, i didnt know i could control what it "returned". I thought it was just the whole file, as a module
09:54 < squeakytoy> mscdex, i dont know if "require" creates a new instance of the object, or one and same all the time
09:55 < mscdex> squeakytoy: well, i mean what you assign to module.exports (which is what is returned)
09:55 < SomeoneWeird> as in, module.exports = "a"; or module.exports = function() { return "a" }
09:55 < mscdex> it doesn't create anything
09:55 < st_luke> there are no classes in ecmascript just constructors and the objects they create
09:55 < mscdex> st_luke: hence the double quotes ;-)
09:55 < st_luke> mscdex: yea i know, I just hate using the terminology cause it confuses people
09:55 < mscdex> meh
09:55 < st_luke> plus when classes actually land eventually it's going to be even more confusing for people
09:55 < mscdex> gotta call it something
09:56 < mscdex> it acts like a class
09:56 < st_luke> you can call it a constructor cause that's what ecma-262 calls it :)
09:56 < mscdex> but then that's just as confusing :-)
09:56 < ljharb> it's not a class.
09:56 < mscdex> "so i instantiate a constructor?"
09:57 < ljharb> and the ES6 term is indeed confusing and is just syntactic sugar for javascript's non-classes.
09:57 < ljharb> mscdex: you instantiate an object, by using the new keyword with a constructor function.
09:57 < ljharb> *an instance of an object
09:57 < mscdex> heh
09:57 < st_luke> mscdex: yea, istantiating an object from a constructor is the least confusing way of putting it
09:58 < st_luke> at least if you wanna go by ecmascript terminology instead of stack overflow terminology 
09:58 < ljharb> people who come from classical languages will be the least confused in JS, the sooner they forget all of it and learn JS instead.
09:58 < mscdex> squeakytoy: ok, let me rephrase this then... if you set module.exports to something you are going to use `new` with, use the caps, otherwise no
09:58 < mscdex> :-)
09:59 < ljharb> yay
09:59 < squeakytoy> okay, so require() can return both singletones and new instances?
09:59 < ljharb> squeakytoy: require() can return the number 42 if you want.
09:59 < ljharb> it's just a value, like anything else in js.
09:59 < squeakytoy> yea, but the require-function has some kind of logic behind it
10:00 < squeakytoy> I will make some tests
10:00 < mscdex> squeakytoy: require just returns whatever you set module.exports to. it doesn't modify or mess with it in any way
10:00 < ljharb> what? there's no logic behind it
10:01 < mscdex> it does cache that value of course, but that's about it
10:01 < squeakytoy> ljharb, of course it has? by default, all variables are hidden, unless you use .exports, meaning there *has* to be some kind of magic logic that changes its visibility
10:02 < ljharb> squeakytoy: everything in the module is wrapped in a function, that simply does `return module.exports`
10:02 < ljharb> there is no magic logic other than the "return" keyword.
10:02 < squeakytoy> ljharb, thats the "logic" ;)
10:02 < squeakytoy> ljharb, but wait - it has to do more, than wrapping though
10:02 < ljharb> no, it most certainly does not.
10:03 < squeakytoy> ljharb, but if you write: x = 34; x does not become global
10:03 < squeakytoy> or global objects dont exist in node.js?
10:03 < ljharb> if you do that in common.js for example, it does.
10:04 < ljharb> and certainly you can affect global objects if you want to make that mistake.
10:04 < ljharb> i don't understand why you are insisting there's some kind of magic logic?
10:04 < SomeoneWeird> yeah, lol
10:04 < SomeoneWeird> there's nothing special about it
10:04 < rootcoma> can you lpush a object into a list with redis? or do you have to serialize it first?
10:05 < SomeoneWeird> you mean a set?
10:05 < squeakytoy> ljharb, okay, confirmed. global objects exists in node.js
10:05 < ljharb> yes, of course it does
10:06 < ljharb> but what's your point - ie why are you asking about it
10:06 < SomeoneWeird> congrats, they do in javascript too
10:06 < SomeoneWeird> :)
10:06 < squeakytoy> i know, but i just want to make sure before my second test case :-)
10:06 < squeakytoy> i didnt know if it was browser-specific or not
10:06 < ljharb> squeakytoy what are you trying to test?
10:08 < squeakytoy> ljharb, ok, i am going to challenge one of your statements now
10:08 < xk_id_> in "async.reduce(arr, memo1, iterator(memo2, item, callback){}, callback (err, results) {}", does memo1 become memo2 in the first iteration?
10:09 < squeakytoy> oh, no wait. ok
10:09 < ljharb> squeakytoy: can you answer my question first?
10:09 < SomeoneWeird> troll?
10:09 < squeakytoy> ljharb, i am learning how you can utilize require
10:10 < SomeoneWeird> require('./file.ermagerd')
10:10 < ljharb> squeakytoy: it's very simple. define a module that doesn't touch globals. "return" something by assigning it to module.exports. use it with `var exportedThing = require('path/to/file');`
10:11 < ljharb> i don't know why you're making a bunch of test cases and insisting there's magic :-p
10:12 < squeakytoy> ljharb, i have a test case i dont understand
10:12 < ljharb> ok, what is it
10:13 < squeakytoy> so baiscally, if i do .exports = new object(...); each time i do: var m = require(..); I get a new instance, correct?
10:13 < SomeoneWeird> no
10:13 < SomeoneWeird> wait, i don't think so
10:13 < ljharb> squeakytoy: no, because the result is cached
10:14 < SomeoneWeird> it caches the value
10:14 < ljharb> squeakytoy: you should return `object` and do the "new" every time you require it
10:14 < SomeoneWeird> do .exports = function() { return new object() }
10:14 < squeakytoy> why that pattern?
10:14 < SomeoneWeird> then var a = require('./file')();
10:14 < ljharb> squeakytoy: because modules are cached? so modules shouldn't return instances
10:15 < ljharb> squeakytoy: also because the whole point of modules is that you don't want to share state across things, so you wouldn't and shouldn't want to do that
10:15 < squeakytoy> SomeoneWeird, but with your example, a is a factory
10:15 < squeakytoy> SomeoneWeird, right?
10:15 < SomeoneWeird> a is the new object that's returned
10:15 < squeakytoy> SomeoneWeird, really? so a isnt the factory function?
10:15 < ljharb> squeakytoy: yes, you could return a factory like that
10:16 < ljharb> squeakytoy: note the () after the require in his example.
10:16 < SomeoneWeird> not if you add () after the require
10:16 < squeakytoy> ljharb, gatcha, okay, that makes more sense :-)
10:16 < squeakytoy> missed the ()
10:17 < squeakytoy> okay, okay - i understand now :-)
10:17 < SomeoneWeird> that's good haha
10:17 < squeakytoy> so basically, the standard module is a singleton
10:19 < squeakytoy> its good stuff to know
10:19 < squeakytoy> ljharb, so basically, to answer my first question, it should be: var MailService = require(...);  :-)
10:19 < SomeoneWeird> yes
10:19 < ljharb> yes
10:20 < squeakytoy> so... var fs = require('fs'); examples are actually wrong?
10:20 < ljharb> no, that's right
10:20 < ljharb> fs isn't something you construct. it's a namespace.
10:20 < squeakytoy> its.. an object?
10:20 < squeakytoy> that goe constructed with require
10:20 < squeakytoy> got
10:21 < squeakytoy> what do you mean, name space
10:21 < SomeoneWeird> it hasn't returned a class
10:21 < SomeoneWeird> it's returned an object of functions
10:21 < ljharb> it's a normal old javascript object, {}
10:21 < SomeoneWeird> so it's a namespace
10:21 < squeakytoy> no, but a singleton
10:21 < ljharb> squeakytoy: everything's not a singleton just because it's an object
10:21 < squeakytoy> ljharb, so you saying fs is not cached?
10:21 < ljharb> everything coming out of require is cached
10:22 < squeakytoy> so.. its a singleton
10:22 < ljharb> but you keep trying to apply the label "singleton", "factory", etc
10:22 < ljharb> forget the java you know, please.
10:22 < squeakytoy> ljharb, these are generic coding terms
10:22 < SomeoneWeird> not in js
10:22 < squeakytoy> you saying factories doesnt exist in js?
10:22 < ljharb> they're not generic. they exist in languages that are unable to express concepts clearly without patterns
10:22 < ljharb> i'm saying the totally fictional and invented concept of "factories" isn't necessary to explain javascript code.
10:23 < SomeoneWeird> ^
10:23 < squeakytoy> uhh, what?
10:23 < ljharb> "factories" aren't a thing. they're an imagined concept to help explain and organize code.
10:23 < squeakytoy> yea
10:23 < squeakytoy> so?
10:24 < SomeoneWeird> so, you don't need those concepts in js :)
10:24 < squeakytoy> factories + javascript gives 3.5 million hits on google
10:24 < ljharb> so i'm suggesting you forget all the "patterns" you learned in java, because they will just obstruct your understanding
10:24 < SomeoneWeird> omg
10:24 < ljharb> just because something is written about a lot doesn't mean it's a good idea.
10:24 < SomeoneWeird> >.<
10:25 < squeakytoy> ljharb, you are assuming i am from a java-background, why?
10:25 < ljharb> squeakytoy: whatever, replace "java" with "any classical inheritance-based language you learned in school"
10:25 < SomeoneWeird> is it not true?
10:26 < ljharb> schools also teach putting two spaces after a period, even though that hasn't been correct since the invention of the computer :-)
10:26 < SomeoneWeird> heh
10:26 < dminus> hey, patterns can be useful, as long as you don't turn them into a hammer with which to hit all the nails
10:26 < squeakytoy> dminus, they are arguing that "factories" is a term that should be used when coding in JavaScript
10:26 < ljharb> dminus: the likelihood that any human being who learns a pattern won't do just that is slim to nil.
10:27 < ljharb> squeakytoy: a term that should NOT be used.
10:27 < squeakytoy> dminus, they are arguing that "factories" is a term that should NOT be used when coding in JavaScript *
10:27 < xk_id_> what's factories
10:27 < xk_id_> :P
10:27 < ljharb> squeakytoy: more specifically, i'm suggesting that instead of trying to understand Javascript through the very narrow lens of "factories" or other patterns, you should try to understand it in terms of Javascript itself.
10:27 < dminus> everyone is always arguing about some fringe style or convention issue with javascript
10:27 < SomeoneWeird> yerp
10:28 < dminus> next month it'll be something else
10:28 < squeakytoy> xk_id_, http://en.wikipedia.org/wiki/Factory_%28software_concept%29
10:28 < squeakytoy> ljharb, i dont agree
10:28 < dminus> what they're probably really protesting is the invasion of java heads
10:28 < dminus> ;P
10:28 < ljharb> squeakytoy: i know you don't agree, but since you are still learning parts of JS, perhaps you might want to have an open mind.
10:29 < squeakytoy> ljharb, I am learning node
10:29 < ljharb> same thing.
10:29 < dminus> i figure whatever helps you get your thing made elegantly
10:29 < squeakytoy> ljharb, uhh, no?
10:29 < squeakytoy> ljharb, wow, you just lost all credibility when you say learning node is same as learning js
10:29 < ljharb> squeakytoy: node.js is an environment in which javascript runs. you need to learn JS to learn node.
10:29 < xk_id_> oh. okay
10:29 < ljharb> squeakytoy: obviously you don't need to learn the browser JS API, but you still need to learn the language.
10:29 < SomeoneWeird> <squeakytoy> ljharb, wow, you just lost all credibility when you say learning node is same as learning js < it is...
10:30 < squeakytoy> its like saying, that.. learning.. i dont know, the JVM is the same as learning Java
10:30 < squeakytoy> it makes no sense
10:30 < dminus> s/node/jruby; s/js/ruby # ?
10:30 < squeakytoy> nevermind, i thank you for the discussion
10:30 < nanashiRei> js isn't java though... 
10:30 < ljharb> squeakytoy: and v8 isn't the jvm.
10:30 < SomeoneWeird> do you even know what node is, squeakytoy ?
10:31 < squeakytoy> SomeoneWeird, yea i do
10:31 < SomeoneWeird> what, then?
10:31 < SomeoneWeird> and what's it not?
10:31 < squeakytoy> SomeoneWeird, its a plattform, its not a language
10:31 < dminus> it's not a hat
10:31 < dminus> i tried wearing it, she didnt give me the number
10:31 < nanashiRei> A node it not a tie!
10:31 < ljharb> squeakytoy: it's a platform that runs primarily a specific language.
10:31 < ljharb> squeakytoy: and if you're learning the platform, you must needs learn the primary language - javascript
10:31 < nanashiRei> But a node can be in a tie!
10:31 < nanashiRei> God... i'm so intelligent.
10:32 < ljharb> squeakytoy: i didn't say node === JS, i said learning one implies learning the other.
10:32 < nanashiRei> crazy shit :)
10:32 < squeakytoy> ljharb, yea, but the platform is not the language. You told me, learning the platform is the same as learning the language, lol
10:32 < ljharb> squeakytoy: you need to stop being so pedantic.
10:32 < squeakytoy> ljharb, scroll up dude, I am not forcing you typing all this.
10:32 < dminus> ooh ooh give me some life advice too i want some
10:32 < ljharb> lol
10:32 < dminus> ;p
10:33 < ljharb> squeakytoy: now that we're done arguing over the technical correctness of my node/js comment, the point remains: don't apply non-JS code patterns to the task of learning JS.
10:33 < dminus> but yeah the whole argument for the distinction is weakened by all this code that runs the same in both browser and #!env node
10:33 < squeakytoy> ljharb, and saying that: var fs = .. is a namespace, which is a concept, is okay - but using terms are factories isnt. That makes no sense.
10:33 < LouisRoR> Hey Guise. I've got an £80,000 Senior Ruby-on-Rails developer role at one of the most desireable teams to work for in London + Multiple contracts at £300-400 /day onsite accross the UK if thats relevent to anyone at the moment? Msg for details - LouisRoR.com
10:34 < dminus> what an appropriate thing to advertise in the nodejs channel!
10:34 < ljharb> squeakytoy: i said "namespace" since i assumed that concept would make more sense to you. but in truth it is merely an object. just like a function is an object.
10:35 < dminus> can't we debate something useful, like how node_modules sucks
10:35 < nanashiRei> Damn and here i was thinking NodeRuby was using JS -_-
10:35 < squeakytoy> i agree, lets drop it. i will post my question on stackoverflow instead
10:38  * nanashiRei drops a needle :o
10:38 < squeakytoy> ljharb, i think you are as confused as i am, to be honest.
10:38 < ljharb> that's certainly a better solution than trying to understand the advice you're being given
10:38 < ljharb> lol, alrighty, you just keep on thinking that.
10:38 < dminus> pride goeth before the fall, gentlemen
10:38 < squeakytoy> ljharb, when should you type: var MailService = require(); or var mailService = require();? If the MailService naming convention should ever be used
10:39 < ljharb> squeakytoy: altho both are functionally equivalent, convention would dictate that any function you intend to use with "new", should have the first character uppercased.
10:39 < nanashiRei> MailService, if it is a Contructor. Simple?
10:40 < nanashiRei> otherwise mailService, what"s not do get about it?
10:40 < ljharb> you can even call it mail_service or MAILSERVICE (but don't)
10:40 < nanashiRei> no
10:40 < nanashiRei> MailSERV
10:41 < nanashiRei> :3
10:42 < dminus> you could just call it "steve" and have it be your friend
10:42 < nanashiRei> or you do it all pro... var a = require(..), b = new a(), c = b.getC(), d = 0 * c;
10:42 < dminus> you can't be friends with someone with a name like "mailService" or any permutation thereof
10:42 < nanashiRei> also, don't use comments.
10:42 < nanashiRei> :D
10:43 < SomeoneWeird> dminus, i'm gunna start doing that
10:43 < dminus> it'll make you warm and happy inside
10:43 < ljharb> nanashiRei: seriously tho, don't use comments. code that needs comments is too complex.
10:43 < nanashiRei> yeah.
10:44 < squeakytoy> doesnt all objects really have a constructor?
10:44 < rootcoma> I had to JSON.stringify my object before lpush'ing it into a redis list. Then I had to JSON.parse is when I grab it
10:44 < ljharb> squeakytoy: nothing "has" a constructor unless it's been instantiated with "new"
10:44 < ljharb> squeakytoy: however, any function can *be* a constructor, by using the "new" keyword
10:44 < squeakytoy> nanashiRei, you read ljharb ? :>
10:44 < squeakytoy> heh
10:45 < nanashiRei> I'm still right. Heh?
10:45 < dminus> cause you're you, and you know, there you are, which is great
10:45 < ljharb> what exactly does "read ljharb" mean? i'm not a book.
10:45 < squeakytoy> nanashiRei, according to you, then it should never be MailServer
10:46 < nanashiRei> It's Java, stay away D:
10:46 < squeakytoy> which is okay
10:46 < dminus> i think scratch your own itch
10:46 < dminus> i would use mail_server since i'm from perl
10:46 < nanashiRei> omg ~ do you realise, that i was trying to help you? fkn idiot
10:46 < SomeoneWeird> and i'd use MailServer because i'm from javascript
10:46 < nanashiRei> just because you are upset with yourself, don't starrt fights.
10:47 < squeakytoy> nanashiRei, i am not upset. I am merely asking for what the conventions are, and when they apply
10:48 < ljharb> squeakytoy: i told you the convention, so did SomeoneWeird. did you not hear us?
10:48 < xk_id_> this async processing is tying my brains haha
10:48 < nanashiRei> then don't be overly intelligent, not every function is a constructor, just like ljharb said, so wtf is your point? 
10:48 < squeakytoy> nanashiRei, do you, as a node.js developer giving advice, see a situation where a developer would wrote: var MailService = require(...); ? if so, when?
10:48 < SomeoneWeird> it does that when you're trying to learn it xk_id_ :)
10:48 < nanashiRei> xD i'm not a "Node Developer"
10:48 < ljharb> i'll say it again just because i like to type: when you plan on instantiating it with "new"
10:49 < nanashiRei> just the regular Webdeveloper, on a stray mission atm :P
10:49 < squeakytoy> ljharb, so, you are saying: var MailService = require(); var ms = new MailService();?
10:49 < ljharb> squeakytoy: yes, precisely.
10:50 < squeakytoy> right okay
10:50 < SomeoneWeird> omg finally
10:50 < SomeoneWeird> lol
10:50 < dminus> so the require-as-constructor thing is considered bad form ?
10:50 < nanashiRei> squeakytoy: i would use "mailService" if you plan to contribute it later on, just for readability, otherwise doesn't matter really >:3
10:50 < dminus> i have seen that as well at times but not sure if it's for a reason or merely style
10:51 < xk_id_> SomeoneWeird: I reckon it kinda simplifies things once you get it. 
10:51 < nanashiRei> inplace of "ms"
10:51 < xk_id_> SomeoneWeird: like for example, I'm processing an array asynchronously. So instead of a[i], i++; I just do a.push() and that's that :)
10:51 < ljharb> dminus: no, it's not bad form, it's just another form
10:51 < squeakytoy> nanashiRei, depends on where its used though
10:52 < ljharb> dminus: i consider any form of construction to be bad form, but that's a different discussion :-)
10:52 < dminus> ljharb: maybe for singletons or the like ?
10:52 < nanashiRei> it's just cosmetic, so it's up to the reader.
10:52 < dminus> that strikes me as a more important issue than whether to capitalize the m
10:52 < squeakytoy> ljharb, you are against creating new objects in js?
10:52 < dminus> ;P
10:52 < ljharb> dminus: or for any "class" of any kind. in backbone, you'd require in a backbone model
10:52 < nanashiRei> i've actually seen people do the a,b,c,d shit :s
10:52 < ljharb> squeakytoy: no, i make new objects all the time. i just don't use the "new" keyword to do it.
10:52 < nanashiRei> they must be terribly bored.
10:53 < ljharb> squeakytoy: var foo = {}; is a nice, shiny new object :-)
10:53 < squeakytoy> ljharb, hm, how if not with new
10:53 < dminus> bless {}, shift;
10:53 < dminus> err
10:53 < dminus> ;o
10:53 < SomeoneWeird> xk_id_, same things
10:53 < SomeoneWeird> lol
10:53 < dminus> anyone ever play with joose?
10:53 < ljharb> squeakytoy: read http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html - it might help you shift your thinking out of OOP-land and into JS.
10:53 < squeakytoy> ljharb, oh, okay, but then you cant create instances of the same "class"-ish with that
10:53 < SomeoneWeird> uhh
10:54 < ljharb> squeakytoy: exactly. i don't design my apps to need instances. check out that article
10:54 < xk_id_> SomeoneWeird: not really. with i++ the order of elements in the array supposedly would have mattered. but it didn't really. 
10:54 < squeakytoy> ljharb, 2006, really?
10:54 < ljharb> squeakytoy: really. it's a parable, and time is irrelevant to it.
10:54 < nanashiRei> squeakytoy: because there is no classes :D
10:54 < dminus> there were good ideas in 2006 too
10:54 < xk_id_> s/didn't/doesn't
10:54 < ljharb> dminus++
11:00 < squeakytoy> ljharb, this articles supports your convention to never use "new"?
11:00 < dminus> i don't think he meant the specific syntax
11:00 < ljharb> squeakytoy: this article talks about using a more functional approach overall. in that world, you wouldn't create instances (nouns) that guard a mutable state, you'd pass pure data around to different functions (verbs)
11:00 < dminus> but more the idea of state and objects
11:01 < dminus> and yeah
11:01 < dminus> that stuff
11:01 < dminus> js definitely smells better as a functional language than trying to shoehorn a bunch of OO concepts into it
11:01 < dminus> much like perl
11:01 < ljharb> exactly
11:01 < squeakytoy> ljharb, one doesn't exclude the other though
11:01 < dminus> especially given the evented nature of it
11:01 < squeakytoy> ljharb, fyi
11:01 < nanashiRei> Since we are all so nice :D does anyone of you know "Forever"? And if so, is it good, or overkill or shit?
11:02 < iksik> mscdex: heh, i'm using this module for quick hacking with imap https://github.com/andris9/rai - and i've created some very simple code, which works with thunderbird and sends imap folders into it ;-D
11:02 < nanashiRei> it looks promising, if anything :x
11:02 < dminus> nanashiRei: seems to be the default solution to that particular problem
11:02 < ljharb> squeakytoy: in a pure functional language, nothing is mutable - and in a purely OO language, functions aren't first-class (ie they can't be passed around)
11:02 < dminus> squeakytoy: go try erlang
11:02 < nanashiRei> good, then google didn't lie about the cake
11:02 < ljharb> squeakytoy: javascript is a nice balance between the two, so you're right they're not mutually exclusive. however, i find that the more functions i use, and the less instances, the clearer my code becomes.
11:02 < dminus> or haskell if you really hate yourself
11:02 < squeakytoy> ljharb, really? and what is your.. source that a pure OO languge can't have first-class citizens?
11:03 < dminus> what is a pure OO language anyway, smalltalk?
11:03 < ljharb> squeakytoy: it has first-class citizens. just not first-class functions. altho java i believe has added or is adding first-class functions.
11:03 < ljharb> and php added them in 5.3
11:03 < ljharb> squeakytoy: but ideologically, a pure OO language wouldn't let you have functions without an object to contain them.
11:04 < dminus> thus necessitating state
11:04 < ljharb> right
11:04 < nanashiRei> hah. php :D still earning money with it xD
11:04 < nanashiRei> weird.
11:04 < squeakytoy> ljharb, well, you cant have functions in Java.  Its not in its JLS, but that doesn't mean its a pure or not pure OO language
11:04 < dminus> well i guess unless you made everything static functions in which case you're not doing objects, just namespaces
11:04 < ljharb> squeakytoy: "not pure" doesn't mean "bad" - JS isn't a pure anything
11:05 < squeakytoy> ljharb, so you saying Java is not a pure OO language, correct?
11:05 < dminus> i wouldn't say anything about java is pure
11:05 < nanashiRei> js is just a really 'alternative' way of doing things ^^
11:05 < ljharb> squeakytoy: i'm saying that if you can avoid creating state, then it's likely not a pure OO language - but it doesn't really matter which languages are pure whatever.
11:05 < dminus> thats not really a useful distinction beyond academics anyway
11:06 < squeakytoy> ljharb, I think you have a lot of.. opinions about things.. but I am not sure what the bottom line is
11:06 < dminus> in most environments a mix of approaches is possible
11:06 < dminus> the bottom line is that avoiding stateful anything in your application
11:06 < dminus> will lead to happiness with scaling, maintainability, clarity, etc
11:06 < dminus> especially in node
11:07 < squeakytoy> ljharb, Okay, from what I understand.. you dont use the keyword "new" in javascript, because you think that Nouns (instances) must own the Verb (the action), in Java?
11:07 < dminus> so try to avoid writing node like it's java, while it may be kind of possible it's using a sewing needle as a steak knife
11:07 < dminus> it's not about syntax!~!
11:07 < ljharb> squeakytoy: you have it backwards. using "new" means you're creating a noun/object. i prefer to avoid doing that, so i don't use new.
11:07 < ljharb> but yes, it's not about syntax, it's about the overall approach
11:08 < squeakytoy> ljharb, okay, so you not a versatile
11:08 < squeakytoy>  coder?
11:08 < squeakytoy> oups
11:08 < squeakytoy> ljharb, thats okay though
11:09 < ljharb> squeakytoy: how does preferring one approach make me not versatile?
11:09 < dminus> usually people don't choose functional programming unless they have exhausted OO and procedural (where everyone starts) 
11:09 < dminus> and usually have had some high level computer science education
11:09 < ljharb> versatile means "using the right tool for the job". if that happens to always be one approach, then using that one approach is versatile :-)
11:09 < nanashiRei> http://www.youtube.com/watch?v=k-hYbWs2dPg squeakytoy have some fun :)
11:10 < dminus> well maybe not exhausted, but found a problem where objects felt clumsy or excessive
11:10 < dminus> blarr
11:10 < nanashiRei> It's funny, really.
11:10 < squeakytoy> nanashiRei, ill see it
11:11 < nanashiRei> I hope it corrects your coder thing :P
11:11 < squeakytoy> nanashiRei, thats such a provocative clip :P
11:12 < nanashiRei> xD
11:12 < nanashiRei> But it's true :x
11:12 < nanashiRei> Stop being a coder... xD
11:13 < squeakytoy> nanashiRei, really? if you had swap coder and programmer, i think you wouldn't know the difference
11:13 < nanashiRei> Uh, actually skip through some wikipedia pages, you'll see, there is a distinction ^^
11:15 < SomeoneWeird> yeah, i'd say they were the same, too
11:15 < ljharb> again, the words and their definitions are irrelevant. the point is the message.
11:18 < squeakytoy> I have two modules, a and b. a requires b, so it has the statement: var b = require('b'); - how do I make this test friendly? Is it possible?
11:18 < squeakytoy> to mock b
11:19 < dminus> while testing a?
11:19 < squeakytoy> you are testing a's code yea
11:19 < squeakytoy> but you need to mock b
11:19 < SomeoneWeird> why not actual require b?
11:19 < squeakytoy> SomeoneWeird, b provides my mock data
11:20 < SomeoneWeird> heh
11:20 < dminus> oh
11:20 < ljharb> squeakytoy: what test framework?
11:20 < dminus> i thought b was a thing you were mocking
11:20 < squeakytoy> ljharb, tell me a framework that solves it
11:20 < dminus> as long as everything still quacks like the appropriate species of duck when your test runs
11:20 < ljharb> squeakytoy: var origRequire = require; require = function (path) { if (path === 'b') { return mock; } else { return origRequire(path); } };
11:21 < dminus> oh hey that's a neat trick
11:21 < ljharb> edit to use whatever framework you're using's normal mock/stub/spy approach
11:21 < squeakytoy> ljharb, where do i write that code?
11:21 < ljharb> squeakytoy: in your test
11:21 < squeakytoy> ljharb, you can override require globally?
11:21 < ljharb> in the "before" or "setup" part. then in the after/teardown, do require = origRequire
11:22 < ljharb> squeakytoy: it's javascript. you can override ANYTHING global, from any point.
11:22 < ljharb> that's why globals are bad.
11:22 < dminus> cant you pretty much muck about with anything you want?
11:22 < squeakytoy> ljharb, doesn't javascript offer the freeze keyword?
11:22 < ljharb> absolutely not
11:22 < dminus> oh i guess there's that
11:22 < ljharb> ES6 has Object.seal but that's not standardized yet.
11:23 < squeakytoy> ljharb, no? https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Object/freeze
11:23 < AAA_awright> I'm pretty sure it's in the specification?
11:23 < squeakytoy> ljharb, says its included in 1.8.5
11:23 < ljharb> hey, what do you know
11:23 < squeakytoy> ljharb, more things than you?
11:23 < squeakytoy> :>
11:24 < dminus> pretty nice flourish with the dick waving there
11:24 < dminus> 9/10
11:24 < ljharb> http://kangax.github.com/es5-compat-table/ it doesn't work in IE 8 yet, so it's not usable in browsers yet reliably.
11:24 < dminus> ljharb you're up! don't disappoint us now
11:24 < dminus> ;p
11:24 < squeakytoy> ljharb, when does IE use javascript :P
11:24 < ljharb> squeakytoy: either way, that would prevent you from modifying the original require function. but you can *always* override the "require" variable
11:24 < dminus> squeakytoy, abuse is the better verb
11:24 < ljharb> you can't ever prevent someone from reassigning an identifier.
11:25 < ljharb> Object.freeze freezes the value. you can't freeze the identifier.
11:25 < supersym> lol
11:26 < ljharb> so the method i gave earlier, with normal vanilla JS, should work perfectly.
11:26 < ljharb> squeakytoy: ps it's really not helpful to be such a dick when you're the one asking questions, and i'm the one providing answers.
11:27 < squeakytoy> ljharb, to be honest, overriding require is probably a bad practice. I think dependency injection patterns are better
11:28 < dminus> martin fowler says check's in the mail
11:28 < squeakytoy> but i am unsure how to do that in node, yet
11:28 < dminus> ;)
11:28 < squeakytoy> dminus, hes a great man :P
11:28 < dminus> i have a coworker who owns the whole set
11:28 < dminus> and DDD and all that jazz
11:28 < dminus> and he is insufferable
11:29 < squeakytoy> i wonder how rich he is
11:29 < dminus> well we get paid really poorly so
11:29 < dminus> not very
11:29 < dminus> ;/
11:30 < dminus> did you come from spring or something
11:30 < ljharb> squeakytoy: you're still calling through to the original require. my suggestion IS dependency injection, because you're mocking the require to B so that you're only testing one thing at a time.
11:31 < squeakytoy> no, mocking the require is not according to depdency injection..
11:31 < ljharb> squeakytoy: also, there's no way to mock anything in javascript without doing exactly what i suggested. that's how all the test frameworks do it.
11:31 < ljharb> my code is more or less exactly what Jasmine's spies do, for example.
11:31 < squeakytoy> giving a, a mocked b is depedency injection. Not mocking a global provider.
11:32 < dminus> have you checked npm for IoC modules
11:32 < dminus> there are a few
11:32 < ljharb> if you're working in a module environment and using require, you can't possible mock B if it's pulled through require
11:32 < squeakytoy> ljharb, is this your personal opinion or a fact?
11:32 < ljharb> squeakytoy: i'm double checking to make sure, but i think it's a fact.
11:33 < ljharb> squeakytoy: http://stackoverflow.com/questions/9563983/testing-node-js-mock-out-and-test-a-module-that-has-been-required uses a crazy approach where you're creating a VM for each module you want to test. but i think that's way too complex.
11:33 < squeakytoy> sounds a bit overkil :S
11:33 < ljharb> exactly.
11:33 < LouisRoR> Hey Guise. I've got an £80,000 Senior Ruby-on-Rails developer role at one of the most desireable teams to work for in London + Multiple contracts at £300-400 /day onsite accross the UK if thats relevent to anyone at the moment? Msg for details - LouisRoR.com
11:34 < ljharb> and i'm pretty certain the only other option is what i suggested.
11:34 < ljharb> LouisRoR: stop. this is node.js. go spam a ruby chatroom.
11:34 < dminus> LouisRoR: make me a coffee
11:35 < ljharb> LouisRoR: also it's "guys" - a "guise" is a mask or costume.
11:35 < dminus> he's looking for rails people
11:35 < dminus> hay guise is the native tongue
11:35 < dminus> (ha ha only serious)
11:35 < SomeoneWeird> lolol
11:36 < dminus> "MUST HAVE 3 POPPED COLLARS AND WAXED MOUSTACHE"
11:36 < squeakytoy> ljharb, here is my problem though. global variables are bad, right?
11:36 < squeakytoy> ljharb, but yet we use require like rabbits
11:36 < ljharb> squeakytoy: but you have to have at least one, "require", in order to be able to use a module
11:37 < ljharb> squeakytoy: the lesson is, there are no absolutes, and just like an hour ago "stop being so pedantic"
11:37 < squeakytoy> ljharb, what if you redid require..
11:38 < squeakytoy> ljharb, and create a dependency injection solution instead, so each module.. gets injected with its dependencies, instead of fetching them
11:39 < dminus> the whole notion of modules and search paths and require() behavior needs some polish i think
11:39 < xk_id_> How can I make a return instruction wait until a cheerio parsing has completed?
11:39 < ljharb> squeakytoy: you're welcome to create your own library. but the community tends to avoid DI. http://merrickchristensen.com/articles/javascript-dependency-injection.html might be relevant.
11:40 < squeakytoy> really? avoid DI, but thats so pretty and cool :P
11:40 < ljharb> not in JS.
11:40 < dminus> it tends to get over-wrought really fast unless it suits the language i think
11:40 < ljharb> it's yet another one of those patterns that doesn't fit in Javascript.
11:40 < ljharb> angularJS uses one because it's from google, and google's JS engineers are all trying desperately to turn it into java.
11:40 < dminus> in perl for example, there's a lot of wink/smile/leap-of-faith around DI because the object system is so minimal
11:41 < squeakytoy> im going to read this article with my special glases
11:41 < dminus> and js is basically the same thing except without even bless() to declare the namespace
11:41 < dminus> which is why functional style fits so nicely, because OO really doesn't
11:41 < dminus> not if you take it to astronaut level and try to do java/.net/c++ things
11:48 < squeakytoy> im so confused. Is fetching other modules, in a module, a part of the module pattern :S
11:48 < SomeoneWeird> ?
11:48 < SomeoneWeird> modules those files depend on, yes
11:49 < squeakytoy> but has the module itself, the responsibility to fetch its dependencies
11:49 < dminus> npm install has that responsibility
11:49 < SomeoneWeird> yes
11:49 < dminus> if the files aren't there at runtime it won't magically go fetch them
11:50 < squeakytoy> i mean, modules. Not packages.
11:50 < dminus> there is much discussion around the require() behavior
11:50 < dminus> basically it starts in the cwd of the file that ran it, looks in that dir for node_modules, then up one level, look for node_modules, etc
11:51 < dminus> at some point it also looks in the global node_modules dir, i believe after it has exhausted searching locally
11:51 < dminus> it's really naive and needs to be improved
11:51 < dminus> imo anyway
11:58 < squeakytoy> ljharb, [in module1.js] var m2 = require('module2'); [in test.js] var m1 = require('module1.js'); m1.m2.someFunction = ....; m1.callRealFunction(); <-- this must be a way better method than mocking the whole require
12:11 < alchimista> hi everyone, I need to have facebook in my app, i want to know any suggestion from u, if there is some small module for this
12:11 < alchimista> what i have to be able to do is: when some one login with his/her fb account, i have to save his data to my mongoDB and then  the next time, i should be able to recognize him/her that already authorized my app
12:11 < alchimista> shoud i proceed with the steps on fb developers web site, or is there a good module that do this for me
12:33 < LouisRoR> Hey Guise. I've got an £80,000 Senior Ruby-on-Rails developer role at one of the most desireable teams to work for in London + Multiple contracts at £300-400 /day onsite accross the UK if thats relevent to anyone at the moment? Msg for details - LouisRoR.com
12:35 < mahmoud_> what is the best tutorial
12:35 < mahmoud_> ???
12:43 < xk_id_> can I nest two async.series() in order to call the callback of a function in the first level within a function in the second level?
12:44 < geNAZt> it should work
12:47 < xk_id_> Actually.. I think I need more help..
12:47 < geNAZt> ask :D
12:48 < xk_id_> thanks, man. I'm coding a little example
12:51 < geNAZt> nice there is a module for topologic sorting
12:53 < xk_id_> https://gist.github.com/4578423 <-- how can I make sure that the array is returned *after* it was filled?
12:54 < geNAZt> well thats tricky cause u cant
12:54 < xk_id_> the last 3 hours of my life are proof
12:54 < geNAZt> why dont u pass a callback into this function code and let it execute if the array is full ?
12:55 < xk_id_> I've tried, but I couldn't figure it out...
12:56 < xk_id_> I need the returned array to combine it with another array
12:56 < xk_id_> and I need to call this function code several times, because I need several arrays like that. 
12:57 < geNAZt> async helps there alot :D
12:57 < xk_id_> yes, but I need 2 nested asyncs there, right?
12:58 < geNAZt> no
12:58 < geNAZt> what is the usecase for the first async series ?
12:58 < geNAZt> you have an array full of urls you want to crawl ?
12:59 < xk_id_> I have between 0 and several URLs.
12:59 < geNAZt> in an array ?
13:00 < xk_id_> no, but I could put them in an array. at the moment I plug in a parameter into the function code, and the function code creates the URL
13:00 < geNAZt> it is the best to put them into an array and map over them
13:00 < xk_id_> i.e req('http://dummy.com?u=" + var, ...
13:01 < xk_id_> hmmm
13:01 < xk_id_> would that sort me out?
13:01 < geNAZt> i will show you an example
13:04 < geNAZt> well cheerio is shit :D
13:05 < xk_id_> there's got to be a way out
13:07 < geNAZt> https://gist.github.com/4578504
13:07 < geNAZt> i dont know if line 19 works or if cheerio cant tell you the amount of elements of an seelctor
13:09 < xk_id_> :o
13:09 < xk_id_> but i see your point
13:09 < geNAZt> i would make it like that
13:09 < geNAZt> but i dont know cheerio or jsdom that much
13:12 < gildean> or you could run through the array of domitems with async.forEach($('selector'), function (item, cb) { array.push(item); cb(); }, function (err) { console.log(array); });
13:12 < gildean> or something like that
13:13 < geNAZt> if cheerio gives back an array
13:13 < geNAZt> i am not sure about that
13:15 < xk_id_> well I'm just gonna do the "$('strong').each" twice, so I can count how many times it occurs. 
13:16 < xk_id_> because, yeah, cheerio can't count that by himself...
13:16 < geNAZt> than you can have the problem that the count from the first each isnt correct in the second one
13:16 < geNAZt> cause the second one begins if the first one didnt finished
13:17  * xk_id_ cries
13:17 < xk_id_> a, wait
13:17 < xk_id_> async.series...?
13:17 < geNAZt> little hint: async.series
13:17 < geNAZt> :D
13:17 < xk_id_> aye!
13:17 < dminus> a coke is owed
13:32 < MI6> joyent/libuv: bnoordhuis created branch threadpool-rework - http://git.io/3HqJFg
13:35 < squeakytoy> "An easy and fast way on how to mock modules in Node.js " - http://blog.christoffer.me/2013/01/how-to-mock-modules-in-nodejs-in-most.html <-- what do you guys think? A decent solution?
13:38 < geNAZt> i am not sure but which database solution has synced functions in it ?
13:39 < squeakytoy> thats beside the point ;)
13:39 < eddyb> WOW
13:39 < asturel> is there an 'tutorial' for writing modules with async callback?
13:39 < eddyb> dat MI6
13:39 < eddyb> perfect colors
13:40 < asturel> like func(param1,param2, function(result) { .. });
13:40 < asturel> or it just a sime function pass by argument and call it simply inside the module?
13:41 < cainus> squeakytoy: you don't need a new module to do that
13:42 < squeakytoy> cainus, what module?
13:42 < cainus> the one you named 'module'
13:42 < squeakytoy> to do what?
13:42 < cainus> to mock
13:42 < squeakytoy> huh?
13:43 < squeakytoy> the production code is in module.js
13:43 < squeakytoy> test is in test.js
13:43 < RLa> asturel, it is
13:44 < RLa> asturel, common signature for callbacks is function(err, results) {}, you can't have results only in most cases
13:44 < cainus> ahh I see that now, sorry.  now I don't get it.  ;)
13:44 < squeakytoy> asturel, i think its very hard to create your own async code in js
13:44 < squeakytoy> asturel, i think its very hard to create your own async code in node.js
13:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:45 < squeakytoy> asturel, node.js is already single threaded for the developer. What *exactly* you going to do that is your own async?
13:45 < brettlangdon> asturel, here is an example of using a callback in a function: https://gist.github.com/4578708
13:46 < asturel> squeakytoy didnt thought for that 'aync'
13:46 < cainus> squeakytoy: only problem with that is that you might get pollution of your db object between test runs
13:46 < asturel> it just a simple http req and res.send
13:46 < squeakytoy> cainus, yea, thats an issue
13:46 < cainus> squeakytoy: sinon is good for solving that
13:47 < squeakytoy> cainus, you should write it as a comment, to inform others
13:47 < asturel> i did like this but i thought there is a better way to do this
13:47 < cainus> some people might not like that module exposes database as a property either
13:48 < squeakytoy> some people dont like bread either :|
13:49 < cainus> sinon would let you mock database before module even creates it, so you don't need to expose it
13:49 < RLa> asturel, you can call the callback synchronously
13:49 < RLa> or through nextTick or through setTimeout, does it make it async?
13:50 < RLa> asturel, squeakytoy, the idea is to use callbacks, it covers both sync and async cases
13:50 < squeakytoy> RLa, what idea?
13:51 < squeakytoy> RLa, I wasn't paying attention to what you have been writing to asturel 
13:51 < RLa> i thought he wanted tutorial on callbacks
13:51 < squeakytoy> yea, he did i think
13:52 < asturel> i wrote a module already but i thought it can be done better :D
13:52 < cainus> soooo... anyone have experience with domains?  I'm wondering how heavy it would be to wrap all my routes with one...
13:52 < RLa> from the caller'r point of view, there is no difference between sync and async when you use callbacks
13:53 < asturel> http://pastebin.com/hbhbv13E
13:53 < asturel> i get socket hangup very often
13:53 < asturel> maybe someone can help me to write it better :D
13:54 < asturel> basicly it just a simple post + fetch the result
13:54 < asturel> is there a way to 'keep alive' the http in module?
13:55 < RLa> maybe it would be easier if you used some request package
13:56 < cainus> what do you want to keep it alive for?
13:56 < cainus> doing some long-polling?
13:56 < asturel> this func called in very often
13:56 < asturel> like every 500ms
13:56 < cainus> oh that's fine
13:56 < RLa> also, you should indent your code
13:56 < cainus> just reopen it
13:56 < asturel> so it will re do the auth and those things.. it is possible to keepalive instead of do reauth every time?
13:57 < asturel> RLa wrote in mc :D
13:57 < cainus> every request in http uses a single connection
13:57 < RLa> that prohibits proper indentation :)
13:57 < asturel> https://github.com/mikeal/request this?
13:58 < RLa> also check out superagent module: https://github.com/visionmedia/superagent
13:59 < cainus> another library isn't going to help you do it wrong better ;)
14:00 < asturel> 'do it wrong' ?
14:00 < cainus> yeah... in general connections are supposed to close between requests
14:00 < cainus> that's http
14:00 < cainus> if you were long-polling, it'd be different, but you're talking about multiple requests
14:01 < geNAZt> can i bind more than one http server to express ?
14:02 < cainus> geNAZt: on a different port?  sure.
14:02 < RLa> cainus, most connections are not closed with http
14:02 < geNAZt> no on a different ip adress
14:02 < RLa> certanly not in modern browsers
14:02 < RLa> keepalive is the fundamental feature here
14:03 < RLa> if server permits, one should use keepalive when doing multiple requests
14:03 < RLa> sometimes server does not permit and closes connection itself to save resources
14:04 < cainus> RLa: he's trying to keep the request stream open
14:04 < asturel> how do i send postdata with request?
14:05 < cainus> see the forms section on the request github page
14:05 < RLa> that should work, server also should send if connection is kept alive after current request ends
14:06 < RLa> the problem is that cheking for it requires some plumbing which some modules already do
14:06 < asturel> yeah but its not 'form' :D
14:06 < asturel> so had to set 'body' ?
14:07 < cainus> if request.post() doesn't take a string as well, I'd be mighty surprised
14:08 < cainus> yeah looks like body
14:17 < asturel> body: 'Access denied, please login' }
14:17 < asturel> http://pastebin.com/thjPLYvd
14:21 < asturel> auth: { user: 'asturel', pass: 'fdsfds', sendImmediately: false } i see in the body log..
14:21 < asturel> so why this doesnt work
14:22 < asturel> \r\ncontent-length: 0\r\nAuthorization: Basic \r\nConnection: keep-alive\r\n\r\n',
14:23 < asturel> it seems it misses the base64encoded string from it?
14:23 < RLa> don't you need to send header with username/password?
14:24 < asturel> http://pastebin.com/hbhbv13E this was with the old http.request
14:28 < SomeoneWeird> i don't even
14:41 < asturel> so any suggestion , RLa?:D
14:43 < RLa> no :/
14:46  * xk_id_ taps geNAZt
14:46 < SomeoneWeird> wat
14:46  * SomeoneWeird hides
14:46 < xk_id_> :3
14:47 < xk_id_> stop being so weird
14:48 < geNAZt> hmmmm ? 
14:48 < mansoor-s> Anyone know of a Node.js hosting service that provides static IP address?
14:49 < xk_id_> geNAZt: you know the callback on line 20 of https://gist.github.com/4578504. It keep returning an undefined valued. Am I doing something wrong?
14:50 < xk_id_> I've applied it to what I need, and I keep getting an undefined value. Not sure if I'm doing something wrong.
14:50 < MI6> joyent/libuv: Ben Noordhuis threadpool-rework * f794d3e : unix: implement a better threadpool  Split the threadpool in two: a small - http://git.io/WtA2RQ
14:51 < geNAZt> you get undefined ? that is nearly inpossible. an empty array okay but undefined
14:51 < xk_id_> geNAZt: hold on. I think I've spotted a mistke
14:51 < Sly> mansoor-s: That depends on what you mean.
14:51 < Sly> You can access Nodejitsu "statically". `curl -H "Host: yourdomain.com" nodejitsu.com`, etc.
14:52 < mansoor-s> Sly, huu?
14:53 < mansoor-s> I need a static IP address so my application can be whitelisted by an API provider
14:55 < RLa> can't it whitelist by domain name?
14:55 < Sly> ^
14:55 < mansoor-s> no
14:55 < mansoor-s> that would be too easy
14:55 < mansoor-s> :(
14:56 < SomeoneWeird> that's stupid
14:56 < SomeoneWeird> kick the API provider
14:56 < mansoor-s> man you have no idea how much i would like that 
14:57 < Sly> mansoor-s: You *could* give them just *one* of Nodejitsu's load balancer IPs.
14:57 < Sly> They're static IPs.
14:57 < mansoor-s> that could work
14:57 < Sly> But then again.. not sure what your outgoing IP address would be..
14:57 < Sly> Hmmm..
14:58 < mansoor-s> App fog loadbalances their outgoing traffic
14:58 < mansoor-s> they gave me its IP address but said it has dynamic IP
14:58 < Sly> That's what I'm saying. If we do the same thing, what I just said is moot.
14:58 < Aartsie> hi all
14:58 < Sly> Because they'd have to add all of them in.
14:58 < squeakytoy> what mail module do you guys use? (im want to send mail via gmail)
14:59 < SomeoneWeird> nodemailer
14:59 < Aartsie> is it possible to show information with nodejs without an browser ?
15:00 < mansoor-s> Aartsie, console.log()?
15:00 < gildean> Aartsie: sure, why would yuo need a browser at all?
15:00 < gildean> if you don't want to, that is
15:01 < Aartsie> yeah i know console.log but then it is text i want some goodlooking information
15:02 < zomg> Aartsie: I'd imagine there are bindings to curses or such if you want to format text nicely in a console application
15:03 < geNAZt> Aartsie: appjs ?
15:05 < jacksmithz> Is it possible to embed node.js into a native iOS application? and if it is, are there any framework/libraries that allready provide this functionality?
15:06 < SomeoneWeird> no
15:06 < SomeoneWeird> and it'd be against apples ToS too, i think
15:08 < xk_id_> In "async.reduce(arr, memo1, iterator(memo2, item, callback){}, callback(err, result){};", is memo1 = memo2 during the first iteration?
15:09 < Aartsie> geNAZt: with appjs i still need an desktop 
15:09 < geNAZt> then on the other side: what do you have ?
15:09 < Aartsie> geNAZt: An raspberry Pi :) 
15:10 < Aartsie> i'm building an car information system, so i get the information with obd2 and want to show it on screen
15:10 < SomeoneWeird> 'on screen'?
15:10 < fdsf> is it best practice to start every node project by creating a package.json with dependencies etc.?
15:11 < geNAZt> roowilliams: yes
15:11 < Virunga> Aartsie: are you using node.js on raspberrypi?
15:11 < SomeoneWeird> rootcoma, you can run npm init which will do it for you
15:11 < Virunga> Aartsie: how is the performance?
15:11 < Aartsie> Virunga: Yes iam 
15:11 < Aartsie> the performance are good :) 
15:11 < Aartsie> not so good as my home computer but it works great
15:12 < roowilliams> geNAZt: cheers.. just getting started with node, and programming in general, so was wondering about the process and planning involved
15:12 < roowilliams> so you'd list the dependencies you know you'd need for the project, and then as you build it, if you need any others, just add them as you go?
15:12 < Aartsie> SomeoneWeird: Yes on my Pinoeer AVH 8400 bt 
15:13 < SomeoneWeird> roowilliams, yes
15:15 < roowilliams> SomeoneWeird: thanks, silly questions i know, but knowing that is the kinda thing that helps save a lot of confusion in the future :)
15:15 < SomeoneWeird> :)
15:16 < roowilliams> getting into node for internet of things-y projects
15:16 < roowilliams> using arduino/rpi
15:44 < tpayne> is there a special node way to get server side node js data to client side js?
15:44 < TheAceOfHearts> well
15:44 < TheAceOfHearts> like… what do you wanna send?
15:44 < tpayne> just some json
15:44 < tpayne> of data
15:44 < TheAceOfHearts> are you using express? 
15:44 < tpayne> yep
15:45 < TheAceOfHearts> uhh, you can just do res.json(OBJECT) I think
15:45 < RLa> god damn webstorm, screws up old settings on update
15:45 < TheAceOfHearts> http://expressjs.com/api.html#res.json typayne
15:46 < TheAceOfHearts> tpayne: is that what you were looking for?
15:47 < tpayne> i think so, am i still able to render?
15:47 < tpayne> a view
15:47 < TheAceOfHearts> umm, no, those are separate things
15:48 < TheAceOfHearts> ok so, when you render, you can pass stuff to the renderer to use while rendering whatever it is you're sending
15:48 < tpayne> ahh
15:48 < tpayne> nice! thanks
15:48 < TheAceOfHearts> those are like the parameters 
15:48 < TheAceOfHearts> but you can't just put up the data literally there
15:48 < TheAceOfHearts> I think...
15:49 < TheAceOfHearts> you could just do an ajax request from the client and respond with the res.json 
15:54 < solidoodlesuppor> what's new in node?
15:54 < TheAceOfHearts> ???
15:54 < tpayne> i don't think this works
15:54 < tpayne> i think this is just to pass it down to the view
15:55 < TheAceOfHearts> https://raw.github.com/joyent/node/v0.8.18/ChangeLog
15:56 < TheAceOfHearts> typayne: yes, that's what I said. when you render, you pass those things to the view, and it does stuff with it. you could put it in the DOM and do stuff with it if you were to inclined. or you could just so an ajax request lol
15:56 < TheAceOfHearts> which seems like the reasonable thing to do lol
15:56 < tpayne> another call?
15:56 < tpayne> i can just do <script>myJson</script> blah blah in the view
15:57 < TheAceOfHearts> I don't know what you're using to render the view
15:58 < tpayne> just a els file
15:58 < tpayne> ejs*
15:58 < TheAceOfHearts> I've never touched ejs, sorry x), I always just use jade
16:00 < TheAceOfHearts> but if you put it in script tags, it might work; try it out x)
16:01 < tpayne> yeah i'm going to create a partial that will read a variable
16:01 < tpayne> if present that i can set from the controller
16:01 < tpayne> keep it nice and clean
16:01 < tpayne> thanks
16:01 < TheAceOfHearts> well, hopefully that works :p
16:15 < _ior> so i'm feeling kinda dumb right now because it seems like i should be able to figure this out, or that it should be somewhat obvious, but i'm just not seeing the problem here, and probably because i'm just too new to node:
16:15 < _ior> i'm using formidable to get a file upload, but overwriting the form.onPart method to handle files myself, because i don't want to write to disk, but instead want to write to a postgres db bytea column
16:16 < _ior> using brianc's pg package
16:16 < _ior> i got this error: query error: error: invalid byte sequence for encoding "UTF8": 0x00  
16:16 < _ior> which made me think it was because i wasn't converting string to bytearray
16:24 < _ior> aaaand thanks for being my unwitting rubber ducks. i think i found the problem at long last :)
16:24 < phun-ky> afternoon
16:25 < tpayne> how can i turn a node.js json object into a javascript json object on my view?
16:25 < Iszak> tpayne JSON.parse
16:25 < tpayne> <script>var gdata = <%= JSON.parse(myObj) %>;
16:25 < tpayne> ?
16:25 < tpayne> </script>
16:26 < Iszak> tpayne what is myObj? a JSON string?
16:26 < tpayne> no a json obj
16:26 < tpayne> from node
16:27 < Iszak> tpayne and by JSON object you mean an javascript object stringified?
16:27 < tpayne> no
16:27 < tpayne> i mean like [Object object]
16:27 < Iszak> Right, so do you want it accessible in your view or in your views javascript?
16:27 < tpayne> views javascript
16:28 < Iszak> So I would stringify the object into JSON and then output it and get the client to parse the JSON into an object again.
16:28 < tpayne> how would that look
16:29 < Iszak> maybe not need to parse it into an object again, I have never really done this
16:29 < Iszak> var gdata = JSON.parse('<%= JSON.stringify(myObj) %>');
16:29 < Iszak> There's got to be a better way though.
16:30 < Iszak> var gdata = <%= JSON.stringify(myObj) %>
16:30 < Iszak> may also work
16:30 < tpayne> Iszak: that causes some quote; stuff
16:30 < Iszak> tpayne good point, then use the first one.
16:32 < tpayne> that's causing an error
16:32 < tpayne> <script>var gdata = <%= JSON.parse(myObj) %>;</script>
16:32 < tpayne> some really strange error
16:33 < tpayne> a syntax error
16:33 < Iszak> I mean var gdata = JSON.parse('<%= JSON.stringify(myObj) %>');
16:33 < Iszak> try that one. It's expected to error, because JSON has escaped characters e.g. ' and "
16:34 < tpayne> same problem with the &quot;
16:34 < tpayne> i can't believe nobody has ever done this before
16:34 < tpayne> seems like boilerplate stuff
16:34 < Iszak> tpayne what's your errors? JSON?
16:35 < tpayne> it can't parse the &auot that JSON.stringify is creating
16:35 < tpayne> i think JSON.stringify is the problem
16:35 < tpayne> i need to decode the entities
16:35 < Iszak> So you're telling me, JSON.parse() can't parse the content of JSON.stringify() ?
16:35 < tpayne> yeah that's right
16:35 < Iszak> seems a bit absurd.
16:36 < Iszak> give me a sample object that you're trying to serialize
16:36 < tpayne> myObject = {'hello': anotherObj};
16:37 < TheAceOfHearts> he's trying to pass that object to ejs, and then have it available from the client
16:37 < tpayne> when i console.log this in node, it prints out normaly
16:37 < Iszak> tpayne yes.. but what is anotherObj?
16:37 < Iszak> tpayne that doesn't tell me what specific character is breaking the parse.
16:38 < tpayne> ok i'll replace anotherObj with null
16:38 < tpayne> to eliminate that
16:38 < tpayne> <script>var gdata = JSON.parse('{&quot;hello&quot;:null}');</script>
16:39 < tpayne> see how it's printing that in view source of the page
16:39 < Iszak> OH right, ejs is probably escaping that shit
16:39 < Iszak> security first
16:39 < Iszak> use <%- insead
16:41 < tpayne> <script>var gdata = <%- JSON.stringify(View.head.data) %>;</script>
16:41 < tpayne> works
16:41 < tpayne> excellent, thanks!
16:42 < tpayne> why is that?
16:43 < Iszak> tpayne because <%= escaped by default <%- doesn't escape it's for security.
16:43 < tpayne> got it
16:43 < tpayne> thanks
16:44 < nodweber> hey, I'm trying to use v8/tools/mac-tick-processor but I get ReferenceError: arguments is not defined
16:44 < nodweber> var params = processArguments(arguments);
16:44 < nodweber> sorry in :v8/tools/tickprocessor-driver.js:46:
16:44 < nodweber> v8/tools/tickprocessor-driver.js:46:ReferenceError: arguments is not defined.. 
16:47 < nodweber> auu ? :S
16:51 < DarkLord7854> Any suggestions on handling uploading user content (through a wysiwyg) to Amazon S3? A lot of the WYSIWYGs out there use a PHP handler for it, I'm obviously wanting to stay purely on Node. Would rather avoid wasting time writing my own handler
17:23 < jack150> at the start of my script i create a filehandle for a stream: var f = fs.createWriteStream('log.txt', {'flags': 'a'}); and whenever i want to write something (at various points) i simply use f.write(string) // i never close it and i've only tested it for 1 user and it works but I wondered if it's bad on my resources/memory or if I'm likely to run into problems
17:23 < jack150> (i use an older version of node.js, I can't use fileappend)
17:34 < niftylettuce> http://www.startupsupper.com lol
17:40 < woopwoop> i'm calling a post from the client to node that then calls the facebook graph and returns a json object back to the client, am I doing it right?
17:46 < roowilliams> gyp ERR! stack Error: Command failed: CreateProcessW: The system cannot find the path specified.
17:46 < roowilliams> when trying to install node-serialport.. any ideas?
17:47 < roowilliams> (reading stack overflow now!)
17:53 < cxreg> can i use smartos as a guest os under linux?
17:53 < Engin> recommended way of forging request to use in nodejs ?
17:54 < Engin> or you guys test stuff at a higher level ?
17:56 < brycebaril> What do you mean by forging request?
17:58 < Engin> creating http.ServerRequest to feed handlers and test the response
18:00 < brycebaril> I do it at a higher level, i.e. http.request() and actually using the network
18:00 < shihan> hmmm, i have an app thats occasionally crashing with this error http://pastebin.com/6LGRmLQe and im at a loss trying to figure out whats causing it
18:02 < cainus> anyone have experience with domains?  seems like I'm using it correctly, but it's not catching thrown errors...
18:04 < cxreg> yes, have any example code?
18:05 < Engin> brycebaril: hmm that is a bit odd compared to other testing frameworks I've seen but sounds good
18:05 < cainus> cxreg: yeah... I'll pull out an example... 
18:05 < cxreg> optimist++ best arg parser evar
18:05 < cainus> cxreg: I'm mostly just wrapping a throw with mydomain.run() now and it doesn't catch it
18:06 < tjfontaine> I presume you have an on('error') as well?
18:06 < cainus> yeah
18:07 < cainus> heh damn... my ultra basic example works
18:08 < cxreg> always happens that way :/
18:08 < STRML> Hey guys... thought you might be interested; I built the first client-side encrypted file sharing platform, 2 months before Mega, on nodejs
18:09 < STRML> http://news.ycombinator.com/item?id=5087473
18:09 < CrawfordComeaux> without googling, I challenge the "first" part of that statement
18:10 < STRML> first as in the first browser-based solution
18:11 < CrawfordComeaux> well, true or not, well done :D
18:11 < CrawfordComeaux> now go make it fully homomorphic and I'll love you forever and always
18:12 < squeakytoy> anyoe know how to get an object's/function's name?
18:13 < STRML> crawfordcomeaux: Hah what does it being homomorphic have to do with its utility?
18:14 < STRML> squeakytoy: I'm not so sure how much sense that makes. How can you look up a variable's name if you don't know it's name to begin with
18:15 < squeakytoy> STRML, but if you do: function x() {
18:15 < squeakytoy> STRML, but if you do: function x() { .. } <-- does the function have the name x?
18:15 < STRML> yeah it does
18:15 < squeakytoy> know how to get it? ;)
18:15 < STRML> and so you can have it call itself recursively that way
18:15 < CrawfordComeaux> STRML: because then the host can operate on the data without decrypting (in theory)
18:16 < STRML> CrawfordComeaux: Interesting. What kinds of things would you want to do with it? just curious
18:16 < STRML> squeakytoy: Might get some mileage with arguments.callee, but be aware it's on its way out
18:16 < k_89> well, trying to make a simple blog-like-thingy in nodejs and getting a problem in using sequelize , This is my user model: http://paste.laravel.com/gey ... and this is my article model: http://paste.laravel.com/gez , the console.log(article) i have in the user Model definition shows its an empty object. I think the problem is with each definition requiring the other to be present. How do I tackle this
18:17 < CrawfordComeaux> STRML: as the host? find an industry where companies have specific data that's needed to calculate things, but the companies may be hesitant to allow third parties to have access to it....and then take your pick of the litter.
18:17 < CrawfordComeaux> ex: retailers and their cost data
18:18 < STRML> interesting idea.
18:18 < STRML> I was hoping, if I go anywhere with it, to go somewhere in the more legit direction. I don't want to be another kim dotcom
18:19 < CrawfordComeaux> medical data
18:19 < CrawfordComeaux> though that's such a huge PITA with regards to HIPPA (at least here in the US)
18:20 < STRML> I definitely think there's utility in terms of pitching to companies, lawyers, accountants, etc. especially freelancers
18:20 < STRML> they need an easy-to-use system to move data around without it sitting forever in email, relying on clients to securely encrypt in archives, etc.
18:20 < bitpimp> I'm working on a classic todo app backbone.js example.  The examples make get, put, delete etc REST calls which reference the todo's with simple ID numbers, such as 'todos/1' or 'todos/2'.  I set it up with a node db.  Node stores with the _id values... what is a typical way to work between the two versions of the todo items?
18:21 < bitpimp> sorry... struggled with the question due to my weak grasp on it all.
18:21 < STRML> bitpimp: Node DB? Do you mean mongo...?
18:21 < bitpimp> STRML: oops, yes.
18:21 < CrawfordComeaux> STRML: btw - fully homomorphic crypto systems are still pretty theoretical...don't think there's been a practical implementation to emerge yet
18:21 < k_89> question ... is there any open source project in node out there which uses sequelize, and has a bunch of related models set up
18:21 < k_89> ?
18:21 < k_89> or, rather, anyone here uses sequelize ?
18:21 < STRML> CrawfordComeaux: Ah. I'm not too familiar with it. Thanks for the info though
18:22 < STRML> bitpimp: nothing wrong with using the full mongo ID in the url
18:22 < bitpimp> STRML: I have node/express/mongodb on the server.
18:22 < CrawfordComeaux> you'd be having to code your own crypto library to implement it, too 
18:22 < k_89> and for that matter, how many of you guys prefer using an orm over a relational db in node ?
18:22 < bitpimp> STRML: ok... that's what I'll do, then.
18:22 < bitpimp> STRML: didn't know if that violated some REST principle or whatnot.
18:22 < STRML> bitpimp: Yeah you're going to have a hellish time trying to map that to a readable ID or anything like that. 
18:23 < STRML> nah. totally fine
18:23 < bitpimp> STRML: cool.
18:23 < STRML> k_89: I used mongoose for a long time in Node. TBH I don't like it
18:23 < TonkaTruck> k_89: orm and rdbms are not mutually exclusive.
18:23 < STRML> assuming you mean orm + document store vs rdbms
18:23 < k_89> STRML: no,i don't 
18:23 < k_89> i am having trouble setting up relationships in sequelize
18:24 < STRML> ohho, I see
18:24 < k_89> and i also keep thinking that an orm might complicate matters in node.js
18:24 < bitpimp> STRML: so, when the user creates a new todo item in the client, it gets pushed to mongodb... how does the client version get to know it's id?
18:24 < STRML> bitpimp: You would do something like POST /todo/new, which returns in the response the id of the new item
18:24 < bitpimp> STRML: aha ok.
18:25 < STRML> & then the browser redirects to e.g. /todo/{id}
18:25 < k_89> TonkaTruck: btw, what do you mean by "orm and rdbms not mutually exclusive" ?
18:25 < TonkaTruck> Ack…don't do POST /todo/new
18:25 < k_89> *not*
18:25 < CrawfordComeaux> STRML: http://bit.ly/Ww9FL9
18:25 < bitpimp> STRML: sweet.  Maybe todomvc.com has an example of this.
18:26 < STRML> bitpimp: I'm sure it does
18:26 < STRML> CrawfordComeaux: thanks for the link, reading...
18:26 < TonkaTruck> k_89: You can have an orm in front of virtually any data store…doc, rdbms, etc
18:26 < k_89> oh, that :P
18:27 < cainus> cxreg: seems like domains can't work inside the mocha test runner
18:27 < TonkaTruck> bitpimp: If Express is getting in the way of proper REST mapping, use Restify.
18:28 < TonkaTruck> No sense in starting the habit of making shitty APIs now :)
18:28 < STRML> no reason why express would get in the way
18:29 < bitpimp> TonkaTruck: ok
18:29 < brycebaril> I'm not sure that Restify makes REST mapping any easier than Express, but it does come with a lot of other handy stuff.
18:30 < TonkaTruck> If you don't need a 1998 website, use Restify + Mongoose.
18:30 < k_89> anyone here uses sequelize ?
18:30  * TonkaTruck hides
18:30 < STRML> TonkaTruck: lolwut
18:31 < k_89> and for that matter, i haven't found a single important use case of nosql dbs other than , well, storing histories :P
18:31 < k_89> and sessions, and caching data :P
18:32 < k_89> but yeah none of those are *important* use cases
18:32 < k_89> so anyone uses sequelize ? or works with rdbms using node ?
18:32 < brycebaril> meh, whatever floats your boat.
18:33 < cxreg> cainus: it's very likely try/catch inside the test framework
18:33 < mscdex> require('boat').float();
18:33 < cxreg> cainus: lately that has come up a lot
18:33 < k_89> btw, a designer i know finds node + express with haml and stylus a great way for prototyping stuff
18:33 < cxreg> cainus: see https://github.com/joyent/node/issues/4570
18:33 < cainus> cxreg: yep... due to mocha trying to do clientside js as well
18:33 < TonkaTruck> k_89: There is only one use case for doc dbs: storing data as it's *usually* displayed.  That being said, with a nice ORM, you can almost treat doc dbs as rdbms and join, ideally, in the ORM at the app level.
18:34 < cainus> cxreg: thanks... I thought I was crazy
18:34 < cxreg> heh :)
18:34 < cxreg> mocha can be patched to behave as you expect.. but at this point it's a common enough problem that maybe domains themselves should be improved to make it easier to get it right
18:34 < TonkaTruck> Aside from that, doc dbs grew in popularity for cultural reasons that allowed programmers to differentiate them from an "old internet" on their resumes...
18:35 < k_89> TonkaTruck: one big feature you loose out on in doc dbs is transactions, and i find nailing down business requirements to be much easier in relational dbs
18:35 < brycebaril> k_89 sequelize is like Hibernate or something?
18:35 < TonkaTruck> "I only use nosql" is my litmus test for how batshit new-wave hipster of a dev you are...
18:35 < k_89> brycebaril: yup
18:35 < cainus> cxreg: or mocha could use domains for its trapping
18:36 < brycebaril> Call me old school, but when I'm using sql I prefer to just write my own queries...
18:36 < cainus> actually that won't work either... somehow mocha is intercepting MY trapping
18:36 < CrawfordComeaux> STRML: just found this - http://css.csail.mit.edu/cryptdb/
18:37 < STRML> oh wow. interesting
18:37 < k_89> brycebaril: i dont know much about java ecosystem, but doctrine 2 in php allows you to pretty much forget sql
18:37 < k_89> iirc, its *inspired* from hibernate
18:37 < k_89> not sure though
18:37 < STRML> CrawfordComeaux: thanks for the link. hell of an idea
18:38 < TonkaTruck> brycebaril: The only argument against that would be that data abstraction layers grow more relatively cheap by the day and simultaneously gain you the power of abstraction.
18:38 < CrawfordComeaux> STRML: yeah...it's funny. I was reading something else & I thought "with all these different limited implementations, there's gotta be a way to chain them" and then boom, there it is
18:39 < TonkaTruck> Also, knowing sql and your rdbms is critical…just like knowing the power of normalization is KEY to understanding the power of DEnormalization.
18:40 < STRML> I think it's a hell of an idea. It seems that with many services, a DB breach is only a matter of time
18:40 < brycebaril> Yeah, though it may be that if you have so many different ways to extract data that you need something to abstractly generate them, you may have too complex of a system.
18:41 < CrawfordComeaux> brycebaril: the result of which would be....?
18:42 < CrawfordComeaux> oh wait...just realized that's a separate convo from me & STRML
18:42 < brycebaril> CrawfordComeaux -- talking about ORMs :)
18:45 < mansoor-s> Hello
18:45 < mansoor-s> I am trying to compile node on ec2, http://pastie.org/private/x6qht4khzdh1pmxuxcnq
18:45 < mansoor-s> what could be causing this?
18:46 < k_89> so yeah, the problem is arising because of circular dependencies
18:47 < mansoor-s> k_89, talking to me?
18:49 < k_89> mansoor-s: nope :P, sorry
18:49 < mansoor-s> nobody ever wants to talk to me :(
18:50 < brycebaril> mansoor-s :(
18:50 < k_89> mansoor-s: sorry, no idea about your problem, try googling the shit out of that error report
18:50 < brycebaril> What ec2 type/OS?
18:51 < mansoor-s> micro 
18:51 < mansoor-s> fedora i believe
18:51 < mansoor-s> yah fedora
18:51 < brycebaril> ugh, node takes forever to compile on micro -- I suggest the precompiled version
18:51 < mansoor-s> hmm ok
18:51 < brycebaril> however, wouldn't hurt to know why you can't build it, might be problematic for building other things
18:51 < mansoor-s> brycebaril, where do I move the binary for it to be in path?
18:52 < brycebaril> I typically do the other way -- adjust my path to include the binary. But either works, just depends on what your $PATH already is.
18:52 < marlun_> Can I console.log an object in node so that I can see all the properties on an object?
18:53 < brycebaril> marlun_ if console.log(obj) doesn't give you enough, try util.inspect
18:55 < marlun_> brycebaril: I did, and it only showed me like <Buffer XX XX XX ...> not the properties of the Buffer object.
18:56 < marlun_> console.log shows me "Object"
18:56 < brycebaril> How are you calling it?
18:59 < marlun_> console.log(util.inspect(var, true)) and console.log(var)
19:01 < brycebaril> Yeah, looks like Buffer might implement its own inspect
19:01 < brycebaril> http://nodejs.org/api/buffer.html
19:02 < mansoor-s> thanks brycebaril 
19:04 < squeakytoy> since modules gets cached, its a very good practice to make them state-less, right?
19:05 < timeturner> squeakytoy: you could use that to your advantage actually
19:05 < guybrush_> squeakytoy: just put the state outside of your module
19:05 < guybrush_> like /etc/my_module_state/state.db
19:06 < squeakytoy> i was about to create a wrapper for the session, as a module. But.. thats probably really really bad
19:06 < brycebaril> probably depends on your implementation
19:08 < squeakytoy> yea, confirmed. its a very good practice to make them state-less
19:09 < elfette> what are some good exercises to create in node.js? I read a beginner tutorial book but don't know what to practice on.
19:09 < brycebaril> elfette what sorts of things do you want to eventually build?
19:10 < elfette> brycebaril, probably web applications, but I don't feel I want to get into things like express juts yet
19:10 < elfette> just*
19:11 < brycebaril> and you've made the generic http server from the node.js main page?
19:11 < elfette> brycebaril, an equivalent, yes
19:12 < brycebaril> well you could start by thinking of functionality to add to that, but really express isn't a bad thing to dip your toe into.
19:14 < elfette> brycebaril, hmmm
19:14 < elfette> brycebaril, I was thinking of making a mini-framework with no middleware just to learn more node.js but wasn't sure where to start
19:15 < isaacbw> it's better to make an application to learn node
19:15 < isaacbw> and then make a framework once you've mastered it
19:15 < STRML> elfette: express is really pretty minimal. a basic use case just simply uses it to wrap routes
19:15 < STRML> but I agree. write a few simple apps first
19:15 < isaacbw> or at least know what goes into writing an application
19:16 < isaacbw> express is *very* light
19:16 < elfette> I see
19:16 < isaacbw> you could even just use raw connect 
19:16 < elfette> I find it interesting myspace is written in it however (not that people will use it anyway)
19:16 < isaacbw> if you want a learning experience
19:17 < owencm> Hi all! I'm building my first Node site, any advice for setting up a relational db for local development? Only help I can find online is for production..
19:17 < isaacbw> you just install it and set it going
19:17 < elfette> also, I understand many node developers don't like coffeescript, why is that?
19:17 < isaacbw> what db is it owencm 
19:18 < isaacbw> because javascript is a fine language without fluffing it up elfette 
19:18 < owencm> I don't mind which, I'm imagining postgres/mysql for prod
19:18 < brycebaril> owencm you should probably use the same in dev as prod, but for getting started SQLite is handy
19:18 < isaacbw> owencm, they arent' completely interchangeable
19:18 < elfette> isaacbw, I see
19:18 < isaacbw> you should be using the same in dev as prod
19:18 < isaacbw> ^^
19:18 < isaacbw> yea
19:18 < k_89>  owencm, plan to use an orm ?
19:18 < owencm> This my first time using Node for app development - I've always used an orm with rails before..
19:19 < k_89> owencm: look into sequelize
19:20 < k_89> owencm: and in node, drop the idea of one-model per file, define all your models in the same file
19:20 < k_89> that way, you wont have any trouble setting up relations
19:21 < owencm> Right, so if I install MySql I can then connect to it using sequelize, I see.
19:21 < owencm> I've only ever used sqlite3 and rails so this is a little new to me! I'll give it a go and see how far I get. Thanks!
19:21 < k_89> owencm: also, here is a small wrapper i wrote in order to switch dbs easily : http://paste.laravel.com/geW
19:22 < k_89> here is a std config http://paste.laravel.com/geX
19:22 < k_89> and the index.js
19:22 < k_89> http://paste.laravel.com/geZ
19:22 < k_89> and this is how you use it http://paste.laravel.com/gf0
19:23 < owencm> Thanks, k_89!
19:23 < k_89> np
19:28 < Kakera> I have a question about sockets. A lot of times, I get a 'close' event without receiving an 'end' first. Why would that happen? If the other party sends me a FIN packet, then I'll get an 'end' event. Why else would Node.js decide that the socket is closed?
19:28 < jacksmithz> what version of node.js is the most stable? the version from nodejs.org or the one from the github repository?
19:28 < STRML> jacksmithz: nodejs.org
19:30 < jacksmithz> ok thanks, does the version on github have any bugfixes or is it only used for "bleeding edge" new features?
19:30 < STRML> jacksmithz: both, essentially, but unless you're hitting a wall on something, don't bother upgrading to a bleeding-edge version
19:32 < jacksmithz> ok thanks
19:35 < mscdex> Kakera: 'close' will also be emitted if a TCP RST is sent
19:35 < mscdex> Kakera: so if you're not getting a FIN, you're probably getting RST
19:36 < isaacbw> man, how can kim dotcom be so successful with a simple file sharing service
19:36 < Kakera> mscdex, okay, time to go read up on the difference
19:37 < mscdex> isaacbw: i'm sure publicity helps ;-)
19:37 < isaacbw> no doubt
19:37 < isaacbw> maybe he engineered his arrest :O
19:37 < mscdex> heh
19:37 < isaacbw> my conspiracy sense is tingling
19:37 < mscdex> and maybe.... he's using node.js!
19:37 < isaacbw> :OOO
19:38 < mscdex> node.js === success
19:39 < isaacbw> except that mega crashed on day one
19:39 < Kakera> yeah it wouldn't happen with node.js
19:40 < wao> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19:40 < isaacbw> OF COURSE NOT
19:40 < mscdex> he was probably using the built-in memorystore that comes with express
19:40 < isaacbw> NODE IS MAGIC
19:40 < wao> is mega made in nodejs?
19:40 < isaacbw> probably not
19:40 < isaacbw> maybe
19:40 < isaacbw> but probably not
19:42 < dgs> i'm using socket.io  with node. is there any way to reduce the verbosity on the amount of info node/sockets is printing in the console? e.g. it's dumping the entire contents of each socket packet transmitted
19:43 < Kakera> dgs, https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
19:43 < Kakera> log level
19:43 < dgs> cool. thanks =)
19:45 < isaacbw> are any of you guys in nyc?
19:45 < jcrugzz> isaacbw: will be soon
19:45 < isaacbw> moving?
19:46 < elfette> do you guys prefer redis or mongodb
19:46 < jcrugzz> yea moving down to Brooklyn to stay with a buddy of mine 
19:46 < isaacbw> elfette, they fill different roles
19:47 < elfette> please explain, I'm new to to the web application development realm
19:47 < isaacbw> redis is faster but has fewer features and sits in memory
19:47 < jcrugzz> isaacbw: I'm guessing you live in nyc?
19:47 < isaacbw> mongo is slower (but still really fast), has more features and power, and stores in the disk
19:47 < isaacbw> jcrugzz, yup. I want to interact more with local developers
19:48 < isaacbw> I think there's room for a sort of casual lightning demo meetup
19:49 < isaacbw> where in brooklyn are you moving, jcrugzz?
19:50 < jacksmithz> does node.js customize V8, or does it use a V8 version "as is"? and what version of V8 does node.js v0.8.18 use?
19:51 < jcrugzz> isaacbw: I actually don't know yet lol. I'll let you know when I figure that out today. Making the move this week
19:51 < isaacbw> oh wow
19:51 < isaacbw> exciting!
19:52 < mscdex> jacksmithz: i believe node floats some patches on top of upstream v8
19:52 < isaacbw> it's a really unique city
19:52 < mscdex> jacksmithz: the answer to your second question: https://github.com/joyent/node/blob/v0.8/deps/v8/ChangeLog
19:52 < isaacbw> it's actually driving me a little mad, but it's worth i
19:52 < isaacbw> t
19:53 < mscdex> or more specifically: https://github.com/joyent/node/blob/v0.8.18/deps/v8/ChangeLog
19:53 < jcrugzz> isaacbw: You just can't get too caught in the rat race of it all
19:53 < isaacbw> exactly
19:56 < jcrugzz> Im pretty excited though, the fun part will be finding a job where I can keep doing node
19:57 < isaacbw> there's a growing web development industry here, which is super cool
19:57 < Kakera> what will happen if I try to write data over a socket that has been closed, but I haven't received the 'close' event? For example, I performed a CPU-heavy operation before writing to the socket.
19:57 < Kakera> will I get an error, or just a 'close' event?
19:57 < jacksmithz> thanks
20:01 < jcrugzz> isaacbw: That's good to hear
20:02 < isaacbw> did you hear that google just built a new office in charlotte?
20:02 < isaacbw> it's a whole block
20:03 < isaacbw> hah, npr just had a story where they said "per capita gayness"
20:03 < jcrugzz> lol damn, stepping up their game
20:07 < xk_id_> Can anybody understand why this simple async.reduce() only iterates *once*? https://gist.github.com/4581300 (code compiles)
20:08 < geNAZt> xk_id_: there is an error in this code
20:08 < geNAZt> you never load cheerio
20:08 < xk_id_> oups
20:09 < xk_id_> strangely, it wasn't picked up. adding it doesn't change the result. 
20:10 < geNAZt> reduce iterates over the first array and does what ?
20:10 < geNAZt> i really dont understand the reduce thing
20:11 < isaacbw> gay day on npr
20:11 < geNAZt> it seems like it is something like mapping
20:11 < isaacbw> now it's a story about 'lesbianism'
20:11 < isaacbw> and 'great women'
20:11 < isaacbw> god I love npr
20:12 < xk_id_> geNAZt: ideally, what i want is to push the stuff I scrape from the webpages with id=1, id=2 and id=3, into array2.
20:13 < geNAZt> first your code is aweful to read :D
20:13 < xk_id_> I'm sorry. how can I improve it?
20:13 < geNAZt> jslint
20:14 < geNAZt> what is the state of array2 in the first asnyc callback ?
20:14 < isaacbw> your tabs are just really wide xk_id_ 
20:14 < geNAZt> L#43: function (err, results){} => function (err, results){ console.log(array2); }
20:14 < isaacbw> I say 5 spaces max
20:15 < geNAZt> if i see it right you have an array full of functions
20:16 < isaacbw> xk_id_, you also put newlines in really weird places
20:16 < isaacbw> hah, I feel like a formatting snob
20:17 < isaacbw> ctrl-a h <tab>
20:17 < xk_id_> geNAZt: an array full of functions? array2.push(function()) should return a value, tho, no? because function() returns "result" on line 38.
20:17 < geNAZt> you never execute that function
20:17 < geNAZt> and returning out of a callback doesnt work
20:18 < xk_id_> I think it's inside the callback? the return is inside array2.push(----)
20:18 < geNAZt> function (err, result) {
20:18 < geNAZt> 						return result;
20:18 < geNAZt> 					}
20:18 < geNAZt> its inside the async function
20:18 < xk_id_> I thought it's inside array2.push()?
20:18 < geNAZt> it is called by the async and if u return something it will get lost
20:19 < xk_id_> oh. the waterfall async...
20:19 < xk_id_> hmm
20:19 < geNAZt> welcome to callback hell :D
20:19 < xk_id_> I've been getting myself comfortable actually for the past 6 hours
20:20 < xk_id_> what if I do: "return async.waterfall(..."?
20:20 < geNAZt> then the request lib get the return
20:20 < geNAZt> you cant throw the return that far
20:21 < xk_id_> well it's a bit far from the items in array1
20:21 < xk_id_> so... I can add return before the request too?
20:21 < geNAZt> one first thing you should do
20:22 < geNAZt> get the function that gets and parses the request out of the nextTick thing
20:22 < geNAZt> it is ugly and you never ever recognize what it is for
20:22 < xk_id_> Okay. I didn't understand, I just used the example in the tutorial. 
20:22 < geNAZt> then why process.nextTick ?
20:22 < xk_id_> -.-'
20:22 < xk_id_> it was in the API documentation for async
20:23 < geNAZt> yes but they say if u want to use more item better use async.parallel
20:23 < xk_id_> do you mean I can leave that out without any consequences?
20:25 < geNAZt> i still dont understand why u need reduce
20:25 < kgee> I'm learning about WebSockets and the various JS libraries that support it. It's a little off topic, but I'm curious if a websocket == socket. For example, can I use a JS websocket library to create a client capable of connecting to a generic ftp server? Or connect to a standard port 22 ssh service?
20:25 < kgee> so far I've seen examples of websockets connecting to websockets, but I want to know if it's more versatile than that
20:25 < geNAZt> the second parameter is only the first parameter in each iterate or am i wrong ?
20:25 < xk_id_> I need to end up with array2 full of all the stuff.
20:26 < isaacbw> guys guys guys guys guys guys
20:26 < geNAZt> so maybe a asny.map that creates an array full of function and then a async.parallel would be better i think
20:26 < RawProduce> kgee: websocket is over HTTP, which is over TCP
20:26 < isaacbw> caffeine
20:26 < RawProduce> you need a TCP interface to do, e.g. FTP
20:26 < xk_id_> geNAZt: why doesn't reduce work?
20:27 < geNAZt> it would work
20:27 < RawProduce> so no, you cannot
20:27 < xk_id_> geNAZt: it iterates just once. 
20:27 < geNAZt> but either i got it wrong or you got it wrong on the excat behavior on the reduce function
20:28 < geNAZt> it iterates just once maybe on the next tick you got an error that forces nodejs to shutdown
20:28 < xk_id_> https://github.com/caolan/async#reducearr-memo-iterator-callback <-- it looks so straight forward
20:28 < kgee_> RawProduce: so I couldn't use webSockets to build an FTP client which can interact with a filezilla server, even though they are both TCP connections?
20:28 < RawProduce> kgee_: you could, however, do that indirectly - http://blog.alex.org.uk/2012/02/16/using-apache-websocket-to-proxy-tcp-connection/
20:29 < geNAZt> now i understand what it does
20:29 < geNAZt> -_-
20:29 < purr> geNAZt: ಠ_ಠ is an IRC client/IRC client framework.
20:30 < xk_id_> geNAZt: I've caught an error in the callback of the reduce :(. It's "2" lol.
20:33 < xk_id_> I've updated the gist. The "console.log("aa");" on line 11 does not execute. 
20:34 < xk_id_> also, error is caught in the callback of the ".reduce()"
20:34 < kgee_> hmm, so there is a need for server-side middle-ware applications in order to proxy a websocket connection to a standard tcp connection. This means it's difficult to make javascript clients for existing (non-web) servers without going through extensive hoops to do so
20:39 < geNAZt> xk_id_: https://gist.github.com/4581539
20:41 < xk_id_> geNAZt: it still iterates once, and doesn't output results. 
20:41 < geNAZt> any errors ?
20:42 < xk_id_> geNAZt: I'm not catching aything.
20:42 < geNAZt> wait i will build a testcase for this thing
20:43 < xk_id_> I can give you mine
20:43 < geNAZt> no i only need to install cheerio :D
20:43 < xk_id_> okay
20:47 < geNAZt> the waterfall never gets executed
20:47 < geNAZt> oO
20:49 < geNAZt> if i change the selector from cheerio from strong to a it works
20:49 < geNAZt> are you sure the website that you catch has strong elements ?
20:49 < xk_id_> yep.
20:50 < xk_id_> and cheerio can pick them up, tested.
20:51 < geNAZt> well this works for me: https://gist.github.com/4581624
20:52 < xk_id_> geNAZt: cheers, bro. I'll start looking for what makes it work. you're amazing!
20:52 < geNAZt> thanks man or women :D
20:53 < xk_id_> man :)
20:53 < geNAZt> kk :(
20:53 < geNAZt> :D
20:53 < xk_id_> hehe
20:54 < xk_id_> geNAZt: btw, can I ask what do you recommend if I want to understand the subtleties of Nodejs?
20:55 < xk_id_> have you personally found any specific book particularly useful?
20:55 < skope> is there any decent method to get type of the file? mimetypes can be faked, extensions too
20:55 < geNAZt> currently i am reading this: http://www.amazon.de/Professional-Node-js-Building-Javascript-Scalable/dp/1118185463/ref=sr_1_1?ie=UTF8&qid=1358715179&sr=8-1
20:57 < xk_id_> interesting
20:57 < geNAZt> it is good for the beginning to nodejs
20:57 < geNAZt> but his english is a bit scary
20:59 < squeakytoy> What is the best "way" to determine I am coding locally?
20:59 < squeakytoy> or starting up the app locally
21:00 < xk_id_> I'm really struggling trying to unlearn my Java tendencies. 
21:00 < sprax> Can someone help me writing to a text file? I've googled to death, struggled with createWriteStream, and am getting nothing. I'm used to PHP $f = fopen('file','w'); fwrite($f,"blah blah blah"); fclose($f);
21:00 < xk_id_> I think I'm still in shock after discovering async. 
21:01 < geNAZt> sprax: your best friend: http://nodejs.org/api/ - For your problem: http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_encoding_callback
21:01 < xk_id_> sprax: did you do "require('fs');"?
21:02 < sprax> xk_id_,  yes, I did, and my fs.readFileSync is working fine
21:02 < skope> is there a way to check if array contains something? like python has in-operator
21:03 < geNAZt> skope: array.length
21:03 < ljharb> skope: indexOf
21:03 < geNAZt> shows you the length of an array
21:03 < geNAZt> if there is nothing in it it is 0
21:03 < ljharb> skope: [1,2,3].indexOf(2) > -1
21:04 < niggler> why > -1 and not !== -1
21:04 < skope> geNAZt: thanks, but ljharbs answer was what i was looking for. i asked a bit weird
21:04 < geNAZt> yes :D
21:05 < xk_id_> sprax: how about https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf ?
21:05 < geNAZt> niggler: cause the value if it is found is always > -1
21:05 < ljharb> niggler: they're the same. but, because > implies that there is a range of values 0 and higher that mean "present", whereas "!==" could mean that "-2" is a result that means presence.
21:05 < xk_id_> ah, already answered :)
21:05 < jcrugzz> sprax: https://github.com/mikeal/filed
21:05 < jcrugzz> it makes some things easier
21:05 < niggler> there's no circumstance where indexOf could return a negative value that isn'
21:05 < niggler> t -1
21:05 < skope> what does 2 mean in that indexOf?
21:05 < geNAZt> it is the value that you are searching for
21:06 < ljharb> niggler: i know that. but the person reading that line of code might not, and the ">" makes it clearer.
21:06 < niggler> ljharb then write >= 0
21:06 < skope> geNAZt: heh. true. maybe i should go to sleep, i am running slow
21:06 < ljharb> skope: ['a', 'b', 'c'].indexOf('b')
21:06 < skope> ljharb: yes. got it 
21:06 < niggler> >> ['a','b','c'].indexOf('b') @ skope
21:06 < purr> skope: (number) 1
21:06 < ljharb> niggler: sure. that's the same as > -1, and it's no better or worse.
21:06 < niggler> its "clearer"
21:07 < aandy> ljharb: no but it's different, which is stigglers point :)
21:07 < ljharb> niggler: how on earth is "greater than or equal to" clearer than "greater than".
21:07 < sprax> I was hoping to do it natively. Does a stream need to be closed before it will actually write out the data?
21:07 < niggler> ">= 0" is clearer than "> -1"
21:08 < geNAZt> sprax: no
21:08 < aandy> both imply it's a non-strictly positive value..
21:08 < xk_id_> sprax: you don't open a stream in the first place!
21:08 < ljharb> niggler: i disagree. it's more to think about.
21:08 < niggler> aandy that's not true unless you assume that it is integral
21:08 < sprax> I'm using var f = fs.createWriteStream('log.txt', {'flags': 'w'}); then f.write("some text");
21:09 < ljharb> niggler: neither one implies integerness any differently. "0.1" is possible with both. so that's not relevant.
21:09 < sprax> but I don't get a file called log.txt, and I dont get any errors
21:09 < geNAZt> then your file should contain some text
21:09 < aandy> niggler: i mean in an integer sense. if you argue that "people might not know that" well then people are really REALLY not thinking
21:09 < aandy> like, purposefully not thinking
21:09 < geNAZt> but it is locked for writing till the stream is closed
21:09 < niggler> aandy which is why i prefer !== -1
21:10 < niggler> because you are either not thinking, in which case >= makes the most sense
21:10 < geNAZt> sprax: what buffersize does the writestream have ?
21:10 < niggler> or you are thinking, in which case !== -1 makes it clear you know what indexOf does
21:10 < ljharb> niggler: you can prefer whatever you want, i'm just preferring the one that has caused the least amount of confusion in interviews and code reviews over the years i've been doing them.
21:10 < xk_id_> niggler, ljharb you are hilarious :)
21:11 < ljharb> niggler: the important thing isn't making it clear that you're smart. it's making clear the intention of your code :-)
21:11 < aandy> niggler: i agree, but only in the sense that they're "the same". i doubt any cpu time is lost checking whether it's higher than -1, or if it is exactly equal to 1. so for me it becomes a cosmetic, readability issue which i write
21:11 < aandy> ljharb: exactly
21:11 < aandy> but for niggler that might be !== 1
21:11 < aandy> for you it might be > -1
21:11 < niggler> >= 0 implies an index
21:11 < niggler> its not *as* evident that > -1 implies an index
21:11 < ljharb> niggler: that's not universally true. and, so does > -1.
21:12 < ljharb> "> -1" and ">= 0" are the *same thing*. the former just has fewer tokens to process.
21:12 < aandy> i personally use >= 0, but i don't really have other people to worry about, as my code isn't reviewing in that kind of detail (it is reviewed, but my supervisor would never say "hey, that should be !==1")
21:12 < sprax> geNAZt, I didn't specify one? I just took some sample code from stackoverflow
21:13 < aandy> it also something has to due with context. i had a piece of code once, where i had to make sure something was found, but wasn't at the beginning (along with other string comparisons)
21:13 < geNAZt> well the docs doesnt say the buffersize which it has by default 
21:13 < aandy> in such a case !== 1 would've made it less readable
21:13 < aandy> (where >= 0 was intended)
21:13 < niggler> aandy you mean >= 1
21:13 < aandy> so seriously, get off your high horses
21:14 < aandy> yes, but i said when >= 0 was inteded
21:14 < skope> maybe i shouldn't have asked
21:14 < aandy> so, >= 0, > 0 etc
21:14 < niggler> >= 0 was not intended there aandy
21:14 < aandy> for readability
21:14 < aandy> then you're not reading it right
21:14 < niggler> "i had to make sure something was found, but wasn't at the beginning (along with other string comparisons)"
21:14 < geNAZt> sprax: the normal behavior should be that it writes to the file if the write function was called
21:14 < jacksmithz> does node.js/V8 implement ECMAScript as specified in ECMA-262, 5th edition? or the 5.1 edition?
21:14 < aandy> i said, !== 1 would be less readable in that context, when >= was intended
21:14 < niggler> if its at the beginning, then it returns 0
21:14 < aandy> ..
21:14 < niggler> !== 1 would not be correct
21:14 < geNAZt> sprax: or to put it in an queue fro writing and then iterate it
21:14 < aandy> jesus
21:14 < squeakytoy> lol, you can use ANSI color codes, when doing console.log, thats so cool :P
21:15 < geNAZt> squeakytoy: unless you are on windows :D
21:15 < squeakytoy> geNAZt, i am using Git bash as my terminal, and it supports it
21:15 < geNAZt> yes its the "normal" bash shell i love it
21:16 < squeakytoy> geNAZt, ah, it works in windows 8 terminal too
21:16 < squeakytoy> geNAZt, cool
21:16 < geNAZt> windows 8 terminals now support ansi colors nice
21:17 < geNAZt> maybe its time to write a pen and paper multiplayer game with node support
21:18 < sprax> geNAZt, ok, I setup a stub and it works as expected, so I must be doing something else wrong. thanks for your help
21:19 < geNAZt> something like: http://www.bay12games.com/dwarves/
21:20 < isaacbw> geNAZt, dwarf fortress uses opengl/sdl, if that makes any difference
21:20 < isaacbw> and ncurses would be a better bet than straight up ANSI code
21:20 < geNAZt> no it is about the style of the game
21:20 < geNAZt> you could do that by only using the terminal
21:20 < isaacbw> you absolutely could
21:21 < isaacbw> hold on
21:21 < isaacbw> I have something for you
21:21 < alchimista> hi guys, I till now my app had a simple login with email, which i did it manualy, but today i add also facebook login, using passportjs, now i manage to save the new user that use his/her facebook accout to login to my account and in cosole log i see also this, New user: "a username" created and logged in!
21:21 < isaacbw> http://forums.tigsource.com/index.php?topic=27206.0
21:21 < geNAZt> nice an ansi engine :D
21:22 < isaacbw> it's in C too, so you could write a node wrapper
21:22 < alchimista> but what i have issue with, that my app.get('/home is checking that there exist a cookie for login
21:22 < mscdex> ZZT!
21:22 < isaacbw> and it's for the windows terminal
21:22 < alchimista> other wise it redirect to login page
21:22 < sprax> geNAZt, so the last thing my script does before it exits is write out some data. When I commented out the process.exit() it wrote out the data fine, but I had to break the app. Any idea?
21:22 < geNAZt> i have a idea for my next project :D nodejs multiplayer snake 
21:23 < alchimista> what i want to know, how to change my app.get('/home   to see that i already login with fb and doesnt redirect me
21:23 < geNAZt> do you exit the node process after the write call ? maybe node hasnt time to write the data on the next tick
21:27 < sprax> geNAZt, I'm trying to do soemthing hackish and use setTimeout(process.exit(), 10000); but even that's firing right away.... ugh
21:27 < geNAZt> hmmm that shouldnt be so
21:27 < geNAZt> how does the code that works look like ?
21:29 < sprax> geNAZt, let me stick a process.exit at the end of that code, standby
21:30 < sprax> geNAZt, this works, but if I put process.exit() on the end, it doesn't. I gotta run for a bit, will bbl. var fs = require('fs'); var w = fs.createWriteStream('log.txt', {'flags': 'a'}); w.write("test");
21:32 < geNAZt> yes you terminate the node process before the next tick can happen with the process.exit()
21:32 < geNAZt> so it couldnt work that way
21:47 < bingomanatee> good afternoon node
21:47 < bingomanatee> is there a comparison option in should for great than less than?
21:48 < bingomanatee> nm.
21:52 < radiodario> bingomanatee: i think so
21:52 < bingomanatee> found it - below/above
21:53 < execut3> tjholowaychuk, you happen to be around?
21:55 < cainus> anyone know of a dom other than js-dom?  it seems to be choking on a 5 MB html file :\
21:57 < ljharb> phantomjs? also why the lord do you have a 5mb html file
21:58 <@Nexxy> ljharb, you rang?
22:00 < ljharb> :rimshot:
22:00 <@Nexxy> :sadtrombone:
22:00 < cainus> 5mb html files happen in real life it seems :\
22:00 < ljharb> cainus: not in a properly designed system
22:00 < ljharb> that would crash most browsers anyways
22:00 < cainus> of course it doesn't crash any browsers
22:01 < ljharb> a 5MB html page?
22:01 < ljharb> html pages should rarely be more than a few hundred K
22:01 < ljharb> text is small
22:01 < cainus> http://pypi.python.org/pypi/
22:01 < cainus> 4.5 MB
22:02 < ljharb> wow, ok i guess it loaded fast enough
22:02 < brycebaril> Here, put your problem in perspective: http://superuser.com/questions/273777/how-to-open-a-huge-html-file  230MB HTML file
22:02 <@Nexxy> dude wtf
22:02 <@Nexxy> my browser is unresponsive
22:02 < ljharb> but, that's a poorly designed site
22:02 < ljharb> there's a thing called "pagination"
22:02 < brycebaril> pypi y u no paginate?
22:04 < cainus> ha 230 MB... that's fantastic
22:31 < claraweed> Hi
22:32 < claraweed> I have a dumb question pleaz
22:32 < claraweed> Since v8 compile javascript, why js is considered as an interpreted langage?
22:33 < ljharb> v8 absolutely does not compile javascript
22:34 < ljharb> interpreted languages are when the code you write is the same code that is distributed and run. java, for example, is compiled to bytecode, which is then interpreted in the jvm.
22:34 < isaacbw> v8 does a lot of optimizations that compilers do, but it would be a little off to say it compiles the javascript
22:35 < ljharb> it does those optimizations on every run of the code. compilers store those optimizations for later execution.
22:36 < isaacbw> I'm not arguing with you ljharb 
22:36 < isaacbw> I'm expanding on what you said
22:37 < ljharb> lol right, i was expanding on your expansion :-)
22:38 < claraweed> Here https://developers.google.com/v8/design
22:38 < claraweed> im reading this "V8 compiles JavaScript source code directly into machine code when it is first executed. There are no intermediate byte codes, no interpreter"
22:38 < isaacbw> oh, cool 
22:38 < isaacbw> man, the internet sucks
22:38 < claraweed> so?
22:38 < isaacbw> I always think everyone's trying to argue with me
22:39 < jcrugzz> V8 is technically a JIT compiler correct?
22:39 < isaacbw> sounds about right
22:40 < claraweed> Someone have a correct answer for me, please?
22:40 < isaacbw> it was answered
22:40 < isaacbw> v8 takes in source code and executes it. Think of it as a black box
22:41 < isaacbw> gcc takes source code and spits out a binary
22:41 < isaacbw> then the system executes the binary
22:41 < isaacbw> v8 doesn't compile javascript to be executed by the OS
22:42 < isaacbw> it 'compiles' it to a more efficient internal representation, then does its thing
22:43 < alchimista> what is the best i18n Module for Node and Express.js ?
22:44 < isaacbw> pretty much every interpreter will process the source code into optimized data structures
22:52 < jacksmithz> is node.js written entirely in javascript? or does it extend V8 with C/C++ too?
22:52 < aandy> v8 is c++ 
22:53 < aandy> and so is many core modules of node
22:53 < aandy> jacksmithz: https://github.com/joyent/node/tree/master/src
22:53 < jacksmithz> allright thanks
22:54 < mistertwig> it's written with c, c++ and javascript
22:55 < mistertwig> there was some circle graph showing how much of it is written in javascript
22:55 < isaacbw> node is both a c++ program that uses v8 as well as a set of libraries written in javascript
22:55 < Engin> nodejs provides any tools similar to $.extend to merge two objects ?
22:55 < isaacbw> util.inherits
22:55 < mistertwig> yes
22:55 < mistertwig> ^
22:56 < aandy> i think you can see that on github once, but not sure where
22:56 < Engin> was just looking tat that now :)
22:57 < Engin> though it looks like it is more geared towards providing inheritance, obviously
22:57 < Engin> all I want is to merge key value pairs
22:57 < saraweed> shit
22:57 < isaacbw> it would be really easy to write a merge function
22:57 < saraweed> i was disconnected
22:57 < isaacbw> you would just have to decide what to do with clashing values
22:57 < isaacbw> keys
22:57 < saraweed> have i missed the answer to my question?
22:58 < isaacbw> ask it again
22:58 < Engin> isaacbw: I want a specific one to be overriden
22:58 < aandy> ah, mistertwig : https://github.com/joyent/node if you mouse over the "red bar" under "Graphs" is that what you thought of?
22:58 < aandy> a
22:58 < Engin> isaacbw: oh, so I have to write one
22:58 < saraweed> "Since v8 compile javascript, why js is considered as an interpreted langage?"
22:58 < isaacbw> yes, it was answered
22:58 < isaacbw> several times
22:58 < mistertwig> probably aandy :P
22:59 < aandy> 70% js, 25% c++, 3% C, 1% D
22:59 < saraweed> isaacbw: can you gist me the log please ?
22:59 < saraweed> Thank you.
22:59 < jacksmithz> seems wierd with 1% D
22:59 < jacksmithz> :S
22:59 < mistertwig> aandy: someone put that in a circle graph
22:59 < aandy> i haven't seen it, but plausible yes
22:59 < isaacbw> "v8 takes in source code and executes it. Think of it as a black box"
23:00 < isaacbw> "gcc takes source code and spits out a binary"
23:00 < isaacbw> "pretty much every interpreter will process the source code into optimized data structures"
23:00 < Engin> saraweed: interpreted language is vague term anyway. you can assume that it does not result in object files. which is the case here. other than that, all interpreted languages are compiled.
23:01 < isaacbw> yea, it's not a very technical term
23:01 < isaacbw> if you can run something that takes source code and executes it, the language is interpreted
23:02 < mistertwig> crockford calls java interpreted
23:02 < Engin> riiight
23:02 < s3shs_> Java is compiled to an IR.  That IR is interpreted by a VM.
23:02 < s3shs_> So yes and no.
23:02 < s3shs_> Java
23:02 < Engin> it is more complex than that now.
23:03 < aandy> isaacbw: not to open an issue here, but i've been wondering about nodejs on freebsd. i got it working by compiling from the joyent github account, not the source code from nodejs.org (same "version", but might have more commits - which is why i wouldn't open an issue on it)
23:03 < aandy> i was just wondering if there's any notable difference between the source published on nodejs.org and the one in github. i.e. how is it "cleaned up"?
23:03 < saraweed> Engin: so depending on the engine, js can be compiled or interpreted ?
23:03 < isaacbw> aandy, you meant that for isaacs
23:03 < Engin> saraweed: it is compiled either way.
23:04 < aandy> apart from the fact that it's not an officially supported OS
23:04 < aandy> isaacbw: oh sorry, i mistook you
23:04 < isaacbw> look at the channel topic :P
23:04 < mistertwig> JS can technically be compiled
23:04 < mistertwig> if someone writes an engine to do so
23:04 < mistertwig> or compiler whatever :P
23:04 < Engin> it is being compiled dammit :)
23:04 < mistertwig> rhino can compile javascript into java classes
23:04 < saraweed> Engin: all langage are compiled langs then?
23:04 < mistertwig> AOT
23:04 < Engin> php is being compiled
23:04 < isaacbw> it would basically just be a binary with v8 embedded in it
23:04 < mistertwig> AOTTTT
23:04 < Engin> everything is getting compiled
23:05 < Engin> saraweed: most I sppose, probably bash is not.
23:05 < isaacbw> javascript is too dynamic to compile to machine code like you would c
23:05 < Engin> it can be executed as it is being read (interpreted)
23:05 < mistertwig> isaacbw: i wouldn't say it's impossible though
23:05 < mistertwig> it wouldn't be as efficient 
23:05 < ljharb> the fact that a compiler can produce JS doesn't make JS a compiled language
23:06 < Engin> ok, terms are loose here, this conversation is pointless
23:06 < ljharb> JS is interpreted because the code i write is the same as the code i distribute.
23:06 < isaacbw> the result would be marginally smaller than just embedding v8 and the javascript in a binary
23:06 < saraweed> IM CONFUSED, LOL
23:07 < saraweed> Someone give me a definitive answer, please.
23:07 < ljharb> saraweed: JS is interpreted. period.
23:07 < ljharb> saraweed: what the engine does is no concern of yours.
23:08 < Engin> if you want a healty discussion start by defining interpreted language.
23:08 < Engin> then proceed.
23:08 < ljharb> if we want to be really technical, what is commonly called a "compiled language" has a "linker" step, and an interpreted language lacks it.
23:08 < isaacbw> why does it matter so much saraweed 
23:08 < ljharb> that removes ambiguity over the term "compile".
23:08 < ljharb> 
23:08 < Engin> bullshit
23:08 < isaacbw> you seem desperate for an answer
23:09 < ljharb> Engin: unless you're just arguing to be pedantic, JS is interpreted, C is compiled, Java is both.
23:09 < isaacbw> IRC: Anonymous Pedantry Client
23:09 < ljharb> lol
23:09 < Engin> hahahah
23:10 < Engin> seriously though, no offense, but you are quite bullshitting ljharb.
23:10 < ljharb> i'm really not.
23:10 < Engin> YES YOU ARE
23:10 < Engin> haha
23:10 < isaacbw> I think saraweed doesn't know enough to understand the nuances of the terms
23:10 < ljharb> you're insisting that we define commonly used terms like "compiled" and "interpreted". no definition is necessary for a summary of the discussion.
23:11 < jacksmithz> all languages are turned into machine code eventually, compiled language are turned into machine code ahead of time, also called AOT compiled, other languages are compiled just in time, also called JIT compiled, and again other languages are interpreted by machine code
23:11 < jacksmithz> as far as i understand atleast
23:11 < ljharb> your argument is the same as "well technically all languages are bits and all bits are just formed of electricity which is quantum particles, so they're all compiled!"
23:11 < isaacbw> saraweed is confused because v8 does internal compilation. That doesn't mean javascript is a compiled language
23:11 < ljharb> isaacbw++
23:11  * Engin must. stop. reading.
23:12 < ljharb> alternatively, just stop insisting on overly precise definitions :-)
23:14 < Inoperable> hello everyone
23:15 < Inoperable> can someone tell me how to handle a PATCH ajax request with express - properly?
23:17 < _ior> yargh. anyone terribly familiar with formidable? http://pastebin.com/xMgvZJnY  gives me parse errors related to the encoding type (e.g. things like 'm is not a hex character' or '\0x00 is not valid utf-8'), but if i change encoding type directly with lines 31, 32 ... then it crashes
23:19 < ljharb> Inoperable: does express support patch? and which browser are you using that supports sending it?
23:19 < Inoperable> ljharb well i figured it out it does
23:19 < ljharb> Inoperable: also is patch even finalized?
23:19 < Inoperable> obviously
23:19 < Inoperable> ;]
23:20 < Inoperable> the new backbone supports patch for model data
23:20 < Inoperable> and sends a ajax patch req
23:20 <@Nexxy> OBVIOUSLY
23:20 < Inoperable> it seems as express can handle it
23:20 <@Nexxy> sheesh, ljharb
23:20 < ljharb> Inoperable: it depends on the browser - http://stackoverflow.com/questions/7502278/can-you-make-a-http-patch-request-from-javascript implies that you need a later IE, for one
23:21 < ljharb> ah, it looks like a normal post with _method: 'patch' will work with express
23:22 < Inoperable> yup
23:22 < ljharb> so you figured it out, is it app.patch()?
23:23 < Inoperable> yeah
23:23 < Inoperable> i must have a typo or something
23:23 < Inoperable> since it works now o.O
23:25 < Inoperable> ljharb thanks for the browser tip though ;-)
23:26 < ljharb> np
23:26 < ljharb> OBVIOUSLY its no problem.
23:37 < Inoperable> ljharb geez, bad word choice ;)
23:40 < miked595> I have a command line script publishing to redis. trying to figure out how to display the data in a browser
--- Log closed Mon Jan 21 00:00:00 2013
