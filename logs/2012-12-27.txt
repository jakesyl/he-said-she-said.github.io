--- Log opened Thu Dec 27 00:00:32 2012
00:00 < MI6> joyent/node: isaacs master * d76eacd : http: Handle end only when stream is not dumped  This fixes regression in - http://git.io/gi-fVg
00:14 < cellvia> for the new streaming api, is 'data' event intended to be replaced by 'readable' event entirely, and only exist for backward compat?
00:16 < cellvia> (@isaacs)   if so, how will piping work, will readable events be passed along instead of data events
00:20 < cellvia> +1 for unpipe
00:23 < cellvia> +1 for transform pipe stream
00:25 < substack> browserify.org preview: http://browserling.com:9009/
00:26 < cellvia> nice font did you make that
00:27 < substack> I drew it in inkscape
00:27 < cellvia> cool, makes browserify feel like it going to be an epic journey
00:27 < substack> the site will have testling-ci powered npm search pretty soon too
00:27 < substack> haha excellent
00:27 < substack> exactly the vibe I was going for
00:29 < substack> pretty crazy how little code it all is http://github.com/substack/browserify-website
00:29 < substack> it'll be even less once I factor out some of the logic into modules
00:30 < cellvia> did you just use a texteditor for all of the markup
00:31 < cellvia> i like the two diff styles of templating you did,  with the join (/n) and without it
00:32 < substack> yep I just used vim
00:32 < substack> oh I like the .join('\n') way better I think
00:32 < substack> but I wanted to get a feel for both of them
00:36 < cellvia> what is this hyperglue all about
00:36 < cellvia> did you make it just for this
00:36 < substack> it'll be its own module pretty soon
00:37 < substack> it's a tiny thing that assigns text and html content onto css selectors
00:37 < substack> in batch
00:39 < cellvia> lol nice youre using jsonstream for thos tiny articles
00:39 < cellvia> so you are streaming straight into the browser then
00:39 < substack> yep
00:39 < substack> from glog's blog.json route
00:39 < substack> the articles are just markdown files in a git repo
00:40 < cellvia> oh werd
00:40 < substack> glog is a git server over http for the articles
00:40 < substack> I wrote it just for this website
00:40 < substack> so I can just `git push` new articles
00:40 < cellvia> oh i didnt even click on them i thought those titles were the articles hah
00:41 < cellvia> its like instant, nice
00:42 < cellvia> does it cache the articles
00:42 < substack> cellvia: pushState
00:43 < substack> it just loads all the articles when the page loads
00:44 < cellvia> oh ok
00:44 < cellvia> will you want it to do that when you have many articles
00:44 < substack> I can solve that problem when I have it!
00:45 < cellvia> werd
00:45 < substack> when I have a lot of articles I'll just load them in chunks
00:46 < substack> also you can do this to download all the articles: git clone http://browserling.com:9009/blog.git
00:46 < cellvia> i see article is an event emitter
00:47 < bingomanatee> ping isaacs
00:47 < substack> it emits 'link' events so the pushState machinery can capture the link clicks
00:47 < cellvia> almost looks like a stream tho
00:48 < cellvia> do you not like using hash for the history
00:49 < bingomanatee> Anyone have something they want to talk about at the SFJS on the 7th/january?
00:49 < bingomanatee> http://www.meetup.com/jsmeetup/events/94490462/
00:49 < cellvia> for bookmarking
00:49 < cellvia> im not nitpicking jus curious, i havent been doing much clientside lateyl
00:50 < cellvia> im actually most impressed with using jsonstream in the browser i will have to figure that out at some point
00:51 < substack> cellvia: I've been doing that for a long time
00:51 < substack> it's really handy to incrementally parse big json docs from the server
00:52 < cellvia> werd yeah... ive been using jsonstream to handle large calls to external apis on the server, but not on the browser yet
00:53 < cellvia> i had to do some lame hacking to get the same thing with xmlstream
01:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:18 < myndzi> how would i go about inheriting from a class that forks worker processes cleanly?
01:22 < isaacbw> how can I check whether a file is a directory?
01:22 < cellvia> fs.stats i think
01:22 < defunctzombie> isaacbw: by reading the docs ;) http://nodejs.org/api/fs.html#fs_class_fs_stats
01:22 < isaacbw> I've been looking through the docs, just wasn't sure which one did it for me
01:23 < cellvia> fs.stat
01:26 < jcrew> myndzi: util has something for inheriting
01:53 < jtoft> Is there anyway to take a string, before you put it into a buffer, and run charCodeAt(n) across each of the strings? I was looking at Buffer.write(msg, …, 'ascii') but that doesn't seem to convert properly.
01:54 < cellvia> what are you trying to do
01:54 < jtoft> trying to take a string into the buffer as ascii
01:54 < jtoft> so like; I'd expect a to be 97, etc.
01:55 < cellvia> oh i see
01:55 < jtoft> I could bang the string in a loop with charCodeAt, but hoping there's a native way to do it
01:55 < jtoft> instead of one per run
01:56 < jtoft> I guess I'll just go that route.
01:58 < cellvia> i dunno any way but not sure youll find anything faster than that anyway
01:58 < cellvia> im curious tho what this is for
01:58 < cellvia> why are you trying to do ths
02:00 < jtoft> matching the ganglia gmond struct
02:00 < jtoft> the xdr packing structure is all funky, and node seems to want to use it's own representation instead of what I tell it
02:00 < jtoft> which is a little frustrating
02:00 < draginx> Anyone here have experience with FedEx's API with NodeJS?
02:01 < jtoft> so on a buffer; if I'm doing… buffer[0] = 112; I'm getting buffer[0] is 70
02:01 < jtoft> is there anyway around that?
02:02 < jtoft> is the best way to just creating an octet array and then slice it in place?
02:05 < cellvia> http://nodejs.org/api/buffer.html#buffer_buffer
02:05 < cellvia> im assuming you already looked through this
02:05 < cellvia> it seems to have ascii
02:05 < jtoft> yea, write('ascii') and asciiWrite
02:06 < jtoft> OH
02:06 < jtoft> got it
02:06 < jtoft> nevermind
02:06 < jtoft> awesome
02:06 < jtoft> wow
02:06 < jtoft> had nothing to do with that
02:06 < cellvia> what was the problem
02:06 < jtoft> found some bug that offset the struct by one padded null
02:06 < jtoft> completely my fault
02:07 < jtoft> no wonder
02:07 < cellvia> so it goes
02:07 < cellvia> i learned from it anyways so thanks i didnt know what octet array were and now i do :)
02:14 < naquad> totally noob question: i did npm install node-simplewhois and it installed it in project dir, but now how do i require it? directly with require or is there any an api to load npm installed packages so i won't have to write require('./npm_modules/...') ?
02:16 < cellvia> omit  ./npm_modules/ entirely
02:16 < cellvia> just require('node...')
02:17 < cellvia> remember that if you dont install it global, it wont be accessible outside of the project you install in
02:17 < deoxxa> uh
02:17 < deoxxa> bad advice
02:17 < deoxxa> that's not how global installs work
02:17 < deoxxa> global installs are almost exclusively for command line utilities
02:17 < cellvia> im not suggesting he install it global
02:17 < cellvia> jus sayin
02:18 < deoxxa> what you were implying is that by installing it globally, it will be available from outside the project
02:18 < deoxxa> which is incorrect
02:18 < deoxxa> you can't require() a globally installed module
02:18 < deoxxa> well, you technically can if you mess with some stuff, but you shouldn't
02:18 < cellvia> really? since when?
02:19 < cellvia> didnt realize
02:19 < naquad> cellvia, thanks, it worked out
02:19 < deoxxa> also you were framing it as though installing it locally was a bad thing
02:19 < deoxxa> have to be careful when guiding someone through how to use npm is all
02:19 < cellvia> not intentionally, i more meant to indicate why it wouldnt be working
02:19 < deoxxa> don't want to give people the wrong idea
02:20 < cellvia> but i am confused, what is a global install if not to access it in any project
02:21 < cellvia> in the past i recall being able to do so
02:21 < deoxxa> like i said, it's almost exclusively for command line utilities
02:21 < deoxxa> if you want to be able to do that, you should be using `npm link'
02:21 < cellvia> i dont do it anymore as its bad practice but, did it change?
02:22 < cellvia> or are you saying it was never possible
02:22 < deoxxa> well it's still *possible*, if you set a couple of environment variables correctly
02:22 < cellvia> hm
02:22 < deoxxa> but it's not default behaviour anymore (i don't think)
02:22 < cellvia> i dont remember doing anything special, but i was only doing that around the time that they first decided to make it opt-in
02:23 < cellvia> before i stopped doing global installs entirely
02:23 < cellvia> anyways naquad, i didnt mean to imply that you should install globally, as deoxxa brought up thats not a good idea
02:24 < naquad> cellvia, appreciate your comment and devoxa for warning. still seems node.js won't fit for what i'm doing just because libraries are missing :(
02:24 < _isaacbw> you could always make them
02:25 < cellvia> yeah, thats part of the fun
02:25 < _isaacbw> it's part of the reason node is so awesome, because the ecosystem is so new
02:25 < _isaacbw> lots of opportunity
02:25 < naquad> atm i don't have fun but i have a deadline: tomorrow morning
02:25 < isaacbw> welp
02:25 < isaacbw> it's a bit late to be starting something, yea? :P
02:26 < cellvia> dude, you still havent decided what platform and its due in hours
02:26 < cellvia> im the king of procrastination and ive never done that
02:26 < cellvia> what are you trying to accomplish
02:27 < cellvia> basicaly, do it in whatever you have experience in, dont try to learn node in 6 hours
02:27 < naquad> i need a domain name expiration checker taking domains from database, checking them, putting result back into database and in case if there are domains that expire in less than 1 month send an email to recipients specified in database. database is mysql btw
02:28 < cellvia> just use php or ruby or w/e
02:28 < Cronoh> should be pretty easy if you have knowledge on making each part
02:28 < Cronoh> i dont see any need for node in that scenario, specially if you are new to it
02:29 < naquad> thats why i thought about it: in ruby i can do this for about an hour, but it was interesting for me to try node.js in something else than require('http').createServer ...
02:30 < cellvia> translate it into node after youve completed it 
02:30 < Cronoh> well node doesnt provide you many benefits in that scenario imo, curl and some coding would do the trick
02:30 < cellvia> if you want to
02:30 < cellvia> gl
02:31 < naquad> i didn't want to make own whois libraries and parsing, tried to find something existsing, but didn't find any mature enough to accomplish this task
02:33 < isaacbw> how on earth does node not do what you want
02:34 < Cronoh> i think hes got a disease where he loves to think about ways to accomplish it instead of actually doing it :p
02:34 < Cronoh> i do that sometimes
02:34 < isaacbw> heh
02:34 < Cronoh> spend more time thinking of the best way to do something when i could have just coded it kinda dirty and made it work
02:35 < jden_> sys exec whois
02:37 < tippenein> looking for a way to add node apps to an existing node/express site.
02:40 < isaacbw> what does that mean tippenein 
02:41 < mistertwig> !!!
02:43 < tippenein> isaacbw: I have a website that uses express and I'd like to add an app to the website at site.com/app.  They are in separate git repos. Just wondering whether there is an easy way to add an app to an existing express site
02:43 < deoxxa> tippenein: you can literally mount the app
02:43 < tippenein> rather than change all the routing information
02:43 < deoxxa> tippenein: check out the docs for .use()
02:43 < tippenein> deoxxa: thanks, will do
02:44 < deoxxa> remembering that these days, in express 3, the app itself has the same signature as a middleware
02:44 < isaacbw> you could use a proxy too I guess
02:44 < deoxxa> i.e. function(req, res, next)
02:45 < deoxxa> tippenein: the important part is `The "mount" path is stripped and is not visible to the middleware function.'
02:45 < deoxxa> so you don't have to change the routing stuff
02:46 < tippenein> mmk, it's confusing to think as an app as middleware
02:46 < isaacbw>  huh, I piped process.stdout to a file stream but console.log stuff isn't going there
02:46 < tippenein> s/as/of
02:46 < deoxxa> isaacbw: process.stdout is a writable stream, not a readable stream
02:46 < isaacbw> * doh *
02:48 < isaacbw> thanks
03:00 < isaacbw> can anyone point me to a good command line argument parsing module?
03:00 < isaacbw> GNU style?
03:01 < draginx> isaacbw: not sure if its GNU style but I do remember visionmedia having a good command line argument module O_
03:01 < isaacbw> hmm, I'll look. thanks
03:01 < draginx> https://github.com/visionmedia/commander.js
03:01 < draginx> im not sure what GNU style is so forgive me if I misdirected you isaacbw :)
03:01 < draginx> he has a C version as well https://github.com/visionmedia/commander.c and a ruby one
03:02 < isaacbw> actually that looks perfect
03:09 < isaacbw> visionmedia is a busy fellow
03:10 < substack> isaacbw: mine does all the styles http://github.com/substack/node-optimist
03:11  * substack is annoyed when he uses a commander app and --foo=bar doesn't work
03:11 < draginx> visionmedia and substack are both busy people :P
03:11 < owen1> where do i get apple-worldwide-certificate-authority.cer  (Apple CA certificate)? when i go to http://www.apple.com/certificateauthority/ i see Apple Inc. Root Certificate. is that it? i see 'download certificate' and also 'download CRL'. any ideas?
03:11 < deoxxa> patches welcome
03:11 < isaacbw> oh neat subbyyy 
03:11 < isaacbw> er
03:11 < isaacbw> substack, 
03:12 < subbyyy> :P
03:12 < draginx> :P
03:12 < draginx> anyone know of a really fast msgpack parser for nodejs?
03:14 < draginx> Anyone in here have experience with using wdsl/fedex api/soap and nodejs?
03:15 < isaacbw> substack, how do I do something like "program [options] <file>"
03:16 < isaacbw> I'm not seeing how I can get optionless arguments out of this
03:18 < isaacbw> ah, is it argv._
03:54 < owen1> does anyone know if https://code.google.com/p/apns-php/wiki/CertificateCreation is the way to get the apple-worldwide-certificate-authority ?
04:12 < owen1> how to verify if an ssl private key uses a passphrase?
04:30 < MI6> joyent/node: Maciej Małecki v0.8 * c2e71dd : build: allow to specify custom tags  When building custom `node` versions - http://git.io/3TTOFA
04:32 <@mbalho> mmalecki[zzz]: nice broken english o/
04:35 < stefan41> is there a preferred systems management tool for node? (puppet, chef, babushka, ansible, pallet, etc?)
04:36 < Cronoh> using socket io, is there any security risk by exposing other user's socket id to eachother?
04:38 < MI6> joyent/node: isaacs master * 4be9c69 : build: Add hyphen to custom build tags  so that ./configure --tag=foo mak - http://git.io/79ZPwA
04:54 < chovy> howdy
06:40 < JamesS237> Anyone know how I can format a hdd in node?
06:51 < mistertwig> jade doesn't use eval does it?
06:51 <@konobi> JamesS237: call out to a program
06:53 < mistertwig> o my god it does
06:54 < mistertwig> :(
07:20 < rodyhaddad> Hey guys, I just wanted to know: for a .json file, does require("file.json") also cache the result?
07:45 < owen1> does anyone know what apple-worldwide-certificate-authority.cer  (Apple CA certificate) means and where to get it? is it 'Apple Root Certificate Authority' in my keychain?
07:48 < owen1> or maybe it's 'Apple Worldwide Developer Relations Certification Authority' ?
08:12 < cstamas> is someone familiar with amino and hook.io ?
08:12 < cstamas> i have a related question...
08:16 < cstamas> it seems to me that hook.io is some kind of messaging framework
08:17 < cstamas> I just start it and they connect to each other, I can send and receive messages without doing much
08:17 < cstamas> this does not seems to be the case for Amino
08:17 < cstamas> am i right?
09:17 < meltingwax> hi, interesting in trying out node.js. One thing I get tired of is ConcurrencyModificationExceptions from java, ie the whole data-structure-being-used-from-different-threads-deal. this is a question being asked before I know what my code wants to do, but are there any thoughts you give me about data structures and having a global state for a Server in node.js?
09:20 < jcrew> meltingwax: that's difficult to answer without having an example
09:21 < substack> meltingwax: your javascript runs entirely in a single thread so you don't need to worry about any of that ever
09:21 < jcrew> or being mor specific about global state for a server
09:22 < jcrew> substack: clustering?
09:24 < substack> jcrew: the cluster module just launches separate processes
09:24 < substack> also it's out of scope for node core and you shouldn't use it
09:28 < meltingwax> just for shits and giggles, here's an example. i have a var L=[]; Server.listen(6667, callback). One callback does for (var i=0; i<L.length; i++) { ... }, and another does L.pop() while the latter loop is still going. 
09:29 < substack> meltingwax: node doesn't work that way
09:29 < meltingwax> only one callback runs at a time?
09:29 < substack> yes
09:30 < substack> there is only ever a single execution context
09:30 < meltingwax> so if my project is intended to have multiple connections, node.js wouldn't be the right fit?
09:30 < meltingwax> multiple simultaneous connections on the same port*
09:31 < substack> that's also not how node work
09:31 < substack> s
09:31 < substack> you can serve multiple clients at once, you just do it from a single execution context
09:32 < substack> you should probably not even worry about any of this because none of it matters at all
09:32 < substack> you just write javascript with callbacks and it works
09:32 < jcrew> lol
09:32 < substack> so long as you're not writing while (true) {} loops everything is pretty much fine
09:32 < mistertwig> lol
09:33 < mistertwig> i love not having to use while(true) {}
09:33 < rouan> substack, ^5 dude. enjoyed your presentation on streams. what are you working on next year?
09:33 < substack> rouan: I don't ever plan anything more than a week in advance.
09:34 < rouan> hah okay, well.. what do you consider worth working on in the immediate future
09:34 < meltingwax> substack, will read about it more; I apologize for the old paradigm structural assumption 
09:35 < rouan> thats like the most important isnt it 
09:37 < rouan> i'm working on microcontrollers and video processing
09:37 < substack> I'm currently working on the browserify.org website
09:37 < substack> preview: http://browserling.com:9009/articles
09:37 < substack> http://browserling.com:9009/
09:38 < substack> push-state git push blog
09:38 < substack> the only database is git
09:38 < substack> no json files either
09:38 < meckanism> substack: love the new look :-)
09:38 < rouan> interesting, saw this few days ago
09:39 < substack> and you can just `git clone http://browserling.com:9009/blog.git`
09:39 < substack> since it's just a git server over http
09:39 < rouan> i'm from vfx background.. so done a few gui sockets stuff
09:39 < rouan> http://47.8bo.org/  was interesting
09:39 < rouan> click to add more dots
09:41 < jcrew> your math is wrong
09:41 < rouan> yeah?
09:44 < rouan> heres another one. http://cells.8bo.org/
09:45 < mistertwig> substack: isn't that require sync tho?
09:45 < substack> mistertwig: false characterization
09:46 < mistertwig> oh?
09:46 < substack> browserify makes a bundle.js so all the code is already in memory
09:46 < mistertwig> eval? :P
09:46 < substack> calling require "sync" implies IO, which is false
09:47 < mistertwig> oh so it isn't requiring js files
09:47 < substack> it does static analysis to make bundles
09:48 < mistertwig> is browserling supposed to be interactive?
09:48 < mistertwig> it isn't :S
09:48 < mistertwig> neat idea tho
09:51 < rendar> how it works?
10:13 < mmalecki> mbalho: hmm?
10:13 < mmalecki> mbalho: ah, that
10:14 < mmalecki> well, it happens
10:57 < test> I have data in in routes/index.js and I am trying to use google charts. So how I can pass data b/w diff modules? my chart is in public/javascripts/chart.js
11:14 < nb-ben> I am trying to find the generated ID of an inserted document using require('mongodb').MongoClient , anyone know how it's done? it appears db.collection.insert does not return the ID
11:25 < jcrew> nb-ben: did you see https://github.com/christkv/node-mongodb-native/blob/master/test/objectid_test.js
11:25 < jcrew> line 72 looks like it inserts and callbacks with id
11:30 < nb-ben> yeah though I'm using MongoClient, not Db
11:31 < nb-ben> and it appears db.collection.save updates the object to contain the generated ObjectId so I found my solution :D
11:58 < Sembiance> :)
12:13 < msguy> I am afraid that node.js will not be capable or suited for developing a full web application. So i will use asp.net MVC 4
12:14 < msguy> but I would like to use node.js for SOME stuff in the application. is that possible?
12:15 < zomg> msguy: sure. Although I don't see why node wouldn't be suitable for developing full apps
12:17 < msguy> zomg: node.js is new and doesn't have ALL the functions and frameworks that asp.net mvc4 has...
12:18 < SomeoneWeird> msguy, like what?
12:20 < msguy> i don't know... for example for image processing, computer vision... neural networks
12:20 < SomeoneWeird> node has bindings for all of them
12:20 < SomeoneWeird> opencv, brainjs for backprop etc.
12:20 < zomg> I don't think any of those are actually a part of ASP.NET :P
12:21 < SomeoneWeird> yeah, lol
12:21 < msguy> oh
12:21 < msguy> well asp.net also has UDP sockets, for example, it has everything.
12:21 < msguy> does node.js have udp?
12:21 < SomeoneWeird> of course
12:21 < SomeoneWeird> it's probably got BETTER udp support than asp
12:22 < msguy> oh really
12:22 < msguy> SomeoneWeird: how can i replace php inline code (inside html files) with node.js??
12:23 < msguy> in order to use node.js instead of php
12:25 < gildean> msguy: there are a bunch of ways, imo easiest is to use express in conjuction with a templating language and render templates with the inputted data
12:25 < msguy> what is express?
12:25 < gildean> a node module
12:34 < Cheery> I wonder how would I get clients PID from unix socket
12:35 < msguy> I like C# and .net because I always use new libraries. Since it's strongly typed and has autocompletion, I don't need to read a ton of docs for each library... how do you manage this in node.js?
12:36 < Cheery> msguy: by reading docs.
12:38 < msguy> LOL - that defeats the purpose of good autocompletion
12:38 < SomeoneWeird> no.. it doesn't
12:38 < msguy> but anyways... i don't find anywhere how to install node.js on IIS... they all "hack it up"
12:38 < SomeoneWeird> you don't..
12:39 < msguy> SomeoneWeird: it does defeat the purpose... which is saving time.
12:39 < Cheery> msguy: good autocompletioen doesn't mean you avoid reading docs to save time.
12:39 < SomeoneWeird> documentation is documentation, autocomplete isn't
12:40 < msguy> Cheery: yes it does. you don't have to constantly go and read docs in order to know the most basic things like what parameters a function accepts, and what type
12:40 < msguy> there's also inline documentation, that shows up in tooltips while coding
12:40 < SomeoneWeird> then you're doing it wrong
12:40 < gildean> msguy: node isn't just a parser you layer on some other webserver, it's a platform to create your own servers on
12:41 < SomeoneWeird> ^^
12:41 < Cheery> autocompletion saves time through typing assist. What you're talking about is not autocompletion
12:41 < msguy> gildean: yes but you can also run it inside IIS, as an http handler
12:41 < SomeoneWeird> ummm
12:42 < msguy> Cheery: i'm talking about intellisense. it's not only autocompletion, true
12:42 < msguy> it's method listing, and many other things
12:42 < msguy> which are apparently impossible to achieve with poorly designed languages like javascript, or php
12:42 < gildean> msguy: that's a feature on an ide, not a feature of a language or a platform
12:42 < Cheery> msguy: those are difficult to do in dynamic programming languages. though I have never need one.
12:43 < msguy> gildean: it's the language that allows such an IDE to exist. it's not only the IDE. can't do this with other languages
12:43 < SomeoneWeird> sure, C# is strictly typed, JS isn't
12:44 < Cheery> msguy: things like well written libraries that are easy to remember, and otherwise easily accessible documentation replaces intellisenseless rather well.
12:44 < msguy> Cheery: you have never needed one? you can always work without good features. you don't need OOP, objects, classes, you don't even NEED functions.
12:44 < gildean> msguy: there are ides that support node, and php too
12:44 < SomeoneWeird> lolol msguy, no
12:44 < msguy> gildean: they do not support the same level of help
12:45 < msguy> gildean: not even near.
12:45 < SomeoneWeird> of course they do
12:45 < Cheery> msguy: I prefer things like dynamic typing over typing aids that make you feel like in a wheelchair.
12:45 < shannonmoeller> msguy: Have you looked at WebStorm?
12:45 < shannonmoeller> http://www.jetbrains.com/webstorm/features/index.html
12:45 < SomeoneWeird> there are IDE's that beat VS 
12:45 < msguy> Cheery: they speed up development if you don't know NEW libraries by memory, which I use a lot.
12:46 < SomeoneWeird> as does everyone..
12:46 < msguy> if you always use the same libraries or classes, functions, etc, it is better to use a dynamically typed language even if you lose these helps.
12:46 < msguy> SomeoneWeird: i have no idea what you're talking about.
12:47 < SomeoneWeird> lol.
12:48 < Cheery> msguy: besides, you don't lose quick links into correct part of documentation.. you only lose having those features in ide.
12:48 < msguy> Cheery: what do you mean? you don't get a pop up window with the documentation, or method listing...
12:49 < SomeoneWeird> sure you do?
12:49 < Cheery> msguy: I just need to look into a browser and within seconds I have the documentation open
12:49 < Cheery> I can use ctrl+f to search through it
12:50 < Cheery> that's quite much enough for me.
12:51 < Cheery> also, I can keep the relevant sections of documentation open, so I can peek up into them fast.
12:51 < msguy> Cheery: that's slow. you have to alt+tab, cntrl+f, and write the function. You may have the same function or class name in many parts of the documentation. You only want to know the members of the object you're using.
12:51 < Cheery> it's fast enough.
12:52 < SomeoneWeird> why do you think intellisense is the only available autocomplete?
12:52 < zomg> Well he's not entirely wrong. Visual Studio's autocompletion is extremely good
12:52 < SomeoneWeird> i know it is
12:52 < zomg> while WebStorm does a good job, it is far from that level
12:53 < zomg> but I think it might not even be possible to offer that level for JS due to its dynamic nature
12:53 < SomeoneWeird> yeap
12:53 < zomg> but if he's worried about fast editing, then he probably shouldn't be using VS in the first place
12:53 < zomg> because Vim and Emacs beat it in editing speed anyway
12:53 < zomg> ;)
12:54 < msguy> zomg: i don't care about editing speed, I DONT CODE THAT FAST
12:54 < zomg> hehe
12:54 < msguy> I care about NOT having to read docs for EVERY new library i use.
12:55 < zomg> Well to be honest I think I would prefer looking at the docs myself
12:55 < shannonmoeller> msguy: Honest question: If you don't read the docs, how do you know which is the best lib to use?
12:55 < zomg> Because I would actually understand the library better if I did
12:55 < msguy> shannonmoeller: i only read the first page of each library. where they explain structure, etc. but i wouldn't want to read docs for EVERY function and class.
12:56 < msguy> (unless the usage is really complex, but most should be straightforward)
12:56 < shannonmoeller> msguy: It's been a while since I've done .NET dev (
12:56 < zomg> If I started doing ASP.NET MVC dev right now
12:56 < zomg> I would have to read the docs a lot
12:56 < zomg> =)
12:57 < zomg> I've fiddled with ASP.NET web forms stuff in the past but not a lot
12:57 < shannonmoeller> I'm still pining for Intellisense, but I remember still needing to read a lot of docs.
12:57 < msguy> lol
12:57 < zomg> The reason you don't need to read docs with ASP.NET is because that's what you're used to 
12:57 < msguy> yes, you still have to read docs unfortunately
12:57 < msguy> zomg: i am not used to asp.net
12:57 < gildean> msguy: most node modules are meant to be small and only do one thing, so the docs tend to be small also, usually you just need to read a few lines to know how to use them
12:57 < zomg> well it was just an example
12:57 < msguy> i am used to .net ONLY
12:58 < msguy> i always use new libraries.
12:58 < SomeoneWeird> but you just said you don't need to read the docs if you use autocomplete
12:58 < gildean> and when it comes to more complex modules, there's a lot more docs, but that's the same in any language/platform
12:58 < msguy> SomeoneWeird: yes, you don't need to read them in order to know what methods exist, what parameters to pass, etc.
12:58 < msguy> you only read if you have a weird bug.
12:59 < msguy> or if something isn't that straightforward
12:59 < Cheery> I wonder how would I getsockopt on node.js?
13:09 < Cheery> hmm.
13:10 < Cheery> there's no way to get pid of the sending process from unix socket in node.js?
13:12 < Cheery> apparently there isn't.
13:13 < gildean> Cheery: is the sending process a node.js process?
13:13 < Cheery> gildean: yep
13:13 < Cheery> well I can show what I'm doing here..
13:13 < gildean> process.pid has the pid of the process
13:13 < Cheery> http://bpaste.net/show/66710/ http://bpaste.net/show/66712/ http://bpaste.net/show/66713/
13:14 < Cheery> whenever client connects to a server, I'd like to identify the process behind connection, so I can send signals to it.
13:14 < Cheery> particularly TERM signal.
13:15 < gildean> the client connection?
13:16 < gildean> get the process.pid and send it over?
13:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:17 < Cheery> gildean: that I'm going to do soon, but client might send any arbitrary number in production env.
13:17 < Cheery> gildean: I'd like to get it reliably even if client wouldn't follow protocol.
13:21 < gildean> Cheery: well you can always just child_process.exec('pgrep processname', function (error, stdout, stderr) { console.log(stdout); });
13:22 < gildean> that should print out the pid
13:23 < Fodi69> hello, anybody using mongodb? How can I compare 2 ObjectID values? userID == user.id returns false, but the values are the same
13:24 < gildean> Fodi69: is user.id returned from a query? if so, try user.id.toString()
13:25 < gildean> also, use triple equals ===
13:25 < Fodi69> yes, it is coming in a database callback
13:25 < analphabet1> Fodi69: you may want to try asking this in #mongodb
13:27 < Fodi69> analphabet1: thanks, i'm trying there too
13:29 < gildean> Fodi69: actually, you need to get the string from inside the _id: ObjectId('string')
13:30 < Fodi69> someone helped: http://mongodb.github.com/node-mongodb-native/api-bson-generated/objectid.html#equals
13:37 < analphabet1> Fodi69: I thought it would be something like that...
13:37 < Fodi69> :)
13:46 < nb-ben> any express users know how to make it so that "app.use( express.static( ... ) );" be available at say "/static" of the httpd rather than make it an entirely static server
13:54 < Pickels> How would one console.log \n chars?
13:56 < astropirate> with \n  ? o_O
13:57 < SomeoneWeird> lolll
13:57 < Pickels> I mean how can I show the characters instead of a newline
13:58 < Pickels> since the newline might be a \r\n so I want to check what it really is
14:00 < bnoordhuis> Pickels: s.replace('\n', '\\n')?
14:02 < Pickels> bnoordhuis: that's what I was doing so I'll guess I'll keep doing that.
14:02 < Pickels> thanks bnoordhuis
14:07 < Kakera> are there any modules that work under Windows and use OpenSSL?
14:07 < Kakera> I'd like to see how they got it done
14:28 < msguy> Node.js with IISnode is not working.
14:29 < msguy> It shows this instead of my output:
14:29 < msguy> The iisnode module is unable to start the node.exe process. Make sure the node.exe executable is available at the location specified in the system.webServer/iisnode/@nodeProcessCommandLine element of web.config. By default node.exe is expected in one of the directories listed in the PATH environment variable.
14:30 < zomg> msguy: well does node.exe exist in the location specified in that setting?
14:31 < msguy> zomg: there is no such setting.
14:31 < msguy> and i don't want to use one.
14:31 < zomg> I see, does it exist in PATH then?
14:32 < msguy> i want it to work properly
14:32 < msguy> yes it does exist in PATH
14:32 < zomg> so if you do "node" in command prompt, it will work from any directory?
14:33 < Innocentus> hi
14:33 < Innocentus> I am totally new to node js
14:34 < msguy> zomg: yes it does.
14:34 < Innocentus> so nodejs is a facility which can run javascript, right?
14:34 < Innocentus> mostly as a server
14:34 < msguy> EXCEPT from web.
14:34 < zomg> msguy: the IIS service runs as a different user though doesn't it? Is the path correct for that user as well?
14:34 < zomg> If it is, then I'm not sure what's up with it
14:35 < msguy> WHERE is the global configuration for ALL node.js files???
14:35 < msguy> for all IISNODE files
14:36 < brettlangdon> Innocentus, for the most part, yes
14:36 < msguy> zomg: it's a system path
14:36 < zomg> Okay, then it should be correct I guess
14:36 < zomg> I haven't used iisnode so can't really help any further
14:36 < msguy> this sucks
14:37 < msguy> this is why we can't use node.js yet... it's too new... and buggy
14:37 < zomg> No, this is just a problem with iisnode
14:38 < zomg> I would suggest configuring the setting it mentioned in the error message and seeing if that will fix it
14:38 < Innocentus> what is this blocking/non-blocking issue? is this because of the limits javascript got or is this a general problem for all (threadable) programs?
14:39 < Innocentus> what is this blocking/non-blocking issue? is this because of the limits javascript got or is this a general problem for all (threadable) programs?
14:40 < msguy> zomg: i will not add annoying setting files to ALL my websites as a fix
14:40 < msguy> zomg: i want to configure it globally
14:41 < zomg> Well I would try it and see if it works anyway
14:41 < zomg> At least then you'll have something that works while you figure out how to do it globally
14:42 < brettlangdon> Innocentus, what do you mean? just how node.js does everything in async?
14:44 < bnoordhuis> Innocentus: come again?
14:46 < Innocentus> brettlangdon: yes, does it have to because otherwise javascript would block the whole server process
14:46 < Innocentus> brettlangdon: or is this an extra advantage?
14:46 < Innocentus> non-blocking means that the whole thing runs parallely?
14:52 < brettlangdon> Innocentus, the best way I am able to answer (because I don't know/remember 100% how it works under the covers) is that that is just the way javascript is, it does not start multiple threads to run your code in parallel, instead it sort of queues up the work to do and moves on, this allows your code to run in "parallel"
14:53 < Innocentus> brettlangdon: and this way of queuing is more efficient than a program with threading?
14:53 < brettlangdon> Innocentus, http://ejohn.org/blog/how-javascript-timers-work/
14:54 < brettlangdon> honestly, I think it depends on what you are doing
14:54 < Innocentus> brettlangdon: so in nodejs a server will take maximum advantage of parellism / processor cores?
14:54 < brettlangdon> as with most things
14:54 < brettlangdon> no, not on it's own
14:54 < brettlangdon> by default it is only ever 1 thread
14:55 < brettlangdon> but, node.js has a library to parellize your code across all cores
14:55 < Innocentus> but one can set it up to use all processor cores / maximum healthy number of threads?
14:55 < brettlangdon> http://nodejs.org/api/cluster.html
14:55 < brettlangdon> yup
14:55 < Innocentus> brettlangdon: so it is possible to use the server at 100% on all cores, right?
14:55 < brettlangdon> yes
14:56 < Innocentus> and with maximum number of threads?
14:56 < Innocentus> I guess the overhead would be very small for this?
14:56 < Innocentus> nice
14:56 < Innocentus> so one can use the complete potential of the server with nodejs
14:56 < brettlangdon> the thing where this async/parallel code execution comes in handy is lets say you have a web server and are handling requests, each request needs to go to the database, by having all the requests handled in async a single slow db call wont block other incoming requests
14:57 < brettlangdon> yes
14:57 < Innocentus> right
14:57 < Innocentus> brettlangdon: and for one single requests, the database queries can be also parallel?
14:57 < brettlangdon> yes
14:57 < Innocentus> brettlangdon: but one have to sync it, right?
14:58 < brettlangdon> yeah… but most of the community tries to support this async model and use of callbacks and etc
14:58 < brettlangdon> just embrace the async
14:59 < Innocentus> brettlangdon: and clusters can also span over multiple servers with multiple cores?
15:00 < Innocentus> brettlangdon: something what wouldn't be possible with php
15:00 < brettlangdon> not really
15:00 < brettlangdon> you'd have to handle it the same way you do with php, have multiple servers and a load balancer
15:00 < brettlangdon> afaik
15:00 < Innocentus> brettlangdon: but no async in a single request
15:01 < Innocentus> brettlangdon: what is most important
15:01 < Iszak> Innocentus I bet you could do it with PHP.
15:02 < Innocentus> Iszak: Iszak
15:02 < Innocentus> Iszak: hi
15:02 < Iszak> Hi.
15:02 < Innocentus> Iszak: I know you from another channel, what channel was it? :)
15:02 < Iszak> zftalk
15:03 < Innocentus> Iszak: so you make stuff in PHP + ZF and also NodeJs?
15:03 < Iszak> I use PHP/ZF at work, Node.js/Ruby on the side.
15:04 < Innocentus> Iszak: what do you think is nicer ? :)
15:04 < Iszak> Each has their own pros and cons, I wouldn't use node.js for everything nor would I use PHP/Ruby for everything.
15:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:33 < draginx> Anyone here have experience with imagick and nodejs on production servers?
16:39 < rouan> draginx, whats the problem?
16:39 < draginx> rouan: no problem persay besides the problem of preoptimization ;) I just wanted to know if anyone has done extensive benchmarking and/or has general principles for using imagick and nodejs (like how much to throttle, when/if something like gearman would even be required, etc).
16:40 < rouan> well its essentially the same as it would be with any stack
16:41 < rouan> one thing we did was downres the uploaded image to your large version (say 2000x) and then use that as your source for the smaller one
16:41 < rouan> and so on
16:42 < rouan> sure its not 100% what you wouldve gotten, but its close enough
16:43 < draginx> right but u dont throttle the amount of images that be processed at once?
16:43 < draginx> I guess in my situation it would be an API
16:43 < rouan> just queue em up, convert is pretty damn fast
16:44 < tjfontaine> depending on how many you need to do binding to the wand convert method would be better than spawn'ing convert process a bunch
16:44 < rouan> if your doing batch it might affect the overall box responsiveness
16:44 < tjfontaine> the only caveat really is that imagemagick needs a larger thread stack
16:46 < draginx> well im using identify for the most part :)
16:46 < tjfontaine> draginx: some abandon code I did from last year, no warranty on how well it still works https://github.com/tjfontaine/node-imagick/blob/master/src/command.cc
16:47 < draginx> interesting
16:47 < tjfontaine> draginx: that part is just a wrapper around the normal bin commands you would normally get, but without having to constantly spawn a new process for it
16:47 < draginx> why no npm for this? :(
16:48 < tjfontaine> draginx: I haven't spent the time to clean it up and make it .8 and beyond compatible
16:48 < draginx> ah i see
16:48 < tjfontaine> I'd have to check and see if libuv has a convenient way to set the stack size for a given thread for uv_queue_work
16:49 < rouan> whats wrong with https://github.com/rsms/node-imagemagick ?
16:50 < tjfontaine> rouan: it's not that there's anything wrong, they're just different ways to tackle the problem, with that you're exec'ing a binary, which can be fine if that's what you want to do
16:50 < drudge> it uses the cli tools
16:51 < kenperkins> isaacs: thrilled to see your response on 4362 (not immediately closing http connections)
16:51 < draginx> rouan: thats actually what im using
16:51 < draginx> i didnt realize there was a readMeta command though (!)
16:52 < draginx> idk why but someone told me it was better to spawn processes for imagick over using these commands...?
16:52 < rouan> if scale is an issue perhaps you can do that processing client side
16:52 < draginx> I could have been misguided though
16:52 < draginx> well its an API :P so no not really O_o
16:52 < tjfontaine> draginx: it all depends on your processing style
16:52 < bnoordhuis> kenperkins: don't get your hopes up. that battle has only just started
16:52 < kenperkins> bnoordhuis: you notice I didn't say "thrilled to see a commitment"
16:52 < kenperkins> :D
16:53 < draginx> tjfontaine: could you elaborate a bit more please? :)
16:53 < bnoordhuis> :)
16:53 < CoverSlide> yay v0.12.x
16:53 < CoverSlide> only have to wait 1 year or so
16:53 < kenperkins> I recognize it's a complex topic
16:53 < kenperkins> that said, it's not hard to work around it :D
16:53 < draginx> is exec'ing a binary considered slow?
16:54 < MI6> joyent/libuv: bnoordhuis created branch cleanup-gyp-build - http://git.io/WBsKgA
16:54 < CoverSlide> it can be
16:54 < tjfontaine> draginx: from a high level, spawning the process gives you inherent multi-core processing, using a binding means you're only initializing imagemagick once per process
16:54 <@isaacs> kenperkins, bnoordhuis: Yeah, it's tricky, and pretty much impossible until we clean up http.js more.
16:54 < CoverSlide> spinning up a new process compared to having a library already loaded
16:54 <@isaacs> it's such a nightmare right now
16:54 < CoverSlide> npm install http
16:54 < tjfontaine> draginx: it's kinda like the difference between apache mpm worker, and apache mpm prefork
16:54 <@isaacs> but it should be easier once we get that done
16:54 < kenperkins> Yea, you have insight there I don't 
16:54 < draginx> hmmm
16:54 < CoverSlide> abstract out http to userland i say
16:55 < kenperkins> I just know it's caused some pain trying to use haproxy between our database cluster
16:55 < kenperkins> (hence working around)
16:55 <@isaacs> kenperkins: voxer wants this very much, and since node is the Custom Voxer JavaScript Platform, we have to give them everythign they want.
16:55 < kenperkins> lol
16:55 < tjfontaine> draginx: if you were to use child_process and an imagemagick binding you could easily setup a queue of N imagemagick workers and you don't have to worry about the overhead of spawning up a new process
16:55 < kenperkins> I sense no sarcasm whatsoever
16:55 <@isaacs> kenperkins: nodejitsu wants it a lot as well, but they're much more mellow.
16:56 <@isaacs> kenperkins: not really sarcastic, but joking a little, yeah.
16:56 <@isaacs> kenperkins: voxer is good for node.
16:56 < draginx> tjfontaine: I think that's what I do now O_o I could be wrong though
16:56 <@isaacs> kenperkins: they help push us forward and keep us focused on real-world stuff.
16:56 < draginx> let me paste some code
16:56 < kenperkins> isaacs: what is (in your estimate) the highest profile consumer based site built on node
16:57 < CoverSlide> clipboard
16:57 < kenperkins> or the top few
16:57 < CoverSlide> jk
16:57 < kenperkins> CoverSlide: lol
16:57 < tjfontaine> draginx: in comparison for every operation you're spawning a process, where as with a binding in a child process you're only spawning a new process once
16:57 < kenperkins> we're a blip
16:57 < draginx> tjfontaine: https://gist.github.com/6321749390651eed2515
16:58 < draginx> oh, Im no longer exec'ing
16:58 < draginx> I guess I use to do that O_o
16:58 < draginx> but this code doesn't scale well yah?
16:58 < tjfontaine> draginx: depends on what you mean by scale :)
16:58 < CoverSlide> well the imagemagick cli tools are single-run, so you have that overhead. if you had a lib and had a way to prefork to several threads that would be ideal
16:58 < Cronoh> can someone take a quick second to look at this javascript, trying to use Array.filter() inside node, having no luck.. this pastey is using return true; and STILL comes back empty wtf? http://jsfiddle.net/EZpVc/2/
16:58 < draginx> it seems like imagick-node does this for me though (looking through their source) -- and by scale I mean.. more requests/second? :P faster? Handle more images at once?
17:00 < tjfontaine> draginx: each call to .identify results in a new process spawning and reading the file you've passed it, more processes doing that means the OS can distribute load over the cores and can do IO scheduling a little better, but if you're not careful you could call .identify so much that you essentially DDoS your server
17:00 < kenperkins> isaacs: regardless, I didn't want to pollute the github log with "yay" :D
17:01 < tjfontaine> draginx: you could queue your .identify calls, but that still means for every call you spawn a process which has a cost
17:01 < draginx> tjfontaine: ah! OK makes more sense, but! I also do...async.queue ( ... , 15)
17:01 < draginx> so I limit to 15 processes at a time :) which would help prevent DDoS yes? :D
17:01 < tjfontaine> draginx: depends on so much else going on on the system
17:01 < draginx> right
17:01 < tjfontaine> draginx: but having a limiter on it is a GoodThing(tm)
17:01 < draginx> lol
17:03 <@isaacs> kenperkins: the highest profile, or the largest?
17:03 <@isaacs> kenperkins: highest profile is probably bing mobile or linkedin mobile.
17:04 < elliottcable> anybody know how I can clear the line, using Node.js's “readline” module?
17:04 <@isaacs> kenperkins: biggest is harder to say, but i think voxer is still the largest node installation
17:04 < kenperkins> cool :P
17:04 < defunctzombie> don't think nodejitsu is bigger?
17:05 <@isaacs> defunctzombie: than voxer?
17:05 < defunctzombie> I dunno how many boxes each has
17:06 < defunctzombie> or how many node services :)
17:07 < kenperkins> we have 1.25 node boxes
17:07 < kenperkins> wer big
17:08 < roger_rabbit> }interesting note, etherpad - a realtime collaborative writing tool was originally written in java, scala, and javascript (rhino), with 257MB of RAM usage on startup, swelling to ~1GB, with 101k lines of serverside code, the node.js rewrite is in pure javascript, uses only 9k lines of code, uses 16 MB of ram on start, going up to ~30MB
17:09 <@isaacs> defunctzombie: i know for a fact that they're not ;)  voxer is gigantic.
17:09 < draginx> is aync.queue considered to slower than other alternatives such as kue? (Assuming I don't need platform indepedency [redis])
17:10 < defunctzombie> isaacs: ;)
17:10 < elliottcable> Anybody? Familiar with the readline module? >:
17:10 < tjfontaine> draginx: it's best to profile, but if you're asking in reference to your imagemagick work, the queue abstraction isn't slowing you down
17:10 < draginx> tjfontaine: ah ok :) my bottleneck would be imagick ya?
17:11 <@isaacs> elliottcable: i think you can put the cursor at 0 and then write a bunch of spaces and then put it back to 0
17:11 <@isaacs> elliottcable: i haven't dug into that code in a long time.
17:11 < tjfontaine> draginx: well, profiling would be needed to really know, but consider that for each operation you are spawn()'ing a new process every time, so you need to see how long it takes to spawn an operation
17:11 <@isaacs> elliottcable: you can also always jsut do process.stdout.write('\r' + new Array(numberOfColumnsInScreen + 1).join(' ') + '\r')
17:11 < elliottcable> isaacs ⑊ well, I'm familiar with ANSI codes; I've got *actually printing* the stuff down great
17:12 < elliottcable> my problem is that doing so confuses the readline library. Lemme see if I can show some example code.
17:12 <@isaacs> elliottcable: to get teh number of cols in the screen, i think there's a goober on process.stdout that tells you that
17:12 < tjfontaine> ^l is clear a line :P
17:12 < elliottcable> “a goober on process.stdout”
17:12 < fanweixiao> Hi guys. I just came into a problem these days. I created a file download server, using Stream pipe. but the bandwidth is limited, so, I wanna limit response speed.
17:12 < elliottcable> isaacs ⑊ I love you.
17:12 <@isaacs> elliottcable: dig into the code :)
17:12 < tjfontaine> er no
17:12 < tjfontaine> ^l is redraw
17:12 < elliottcable> isaacs: “i think there's a goober on process.stdout that tells you that” wat.
17:12 < elliottcable> (ignore that. putting it in the bot.)
17:13 < fanweixiao> but didn't find any resource about how to limit speed within pipe
17:13 < elliottcable> Any developer who writes CLI tools and doesn't have http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes memorized, is a silly goose.
17:13 < elliottcable> a silly goose, I say.
17:13 < draginx> tjfontaine: would u recommend *not* spawning a new process per operation? Also, any recommendations for a profiling library?
17:14 < tjfontaine> draginx: it would make sense to actually get numbers on this, but it would seem that spawning 15 processes before hand and letting them handle the queue would be faster than spawning a process for each queue item
17:15 < tjfontaine> draginx: lemme clean up my module and see if I can give you a quick benchmark
17:15 < elliottcable> hrm.
17:17 < fanweixiao> errr, about a download-speed-limit-server, anyone can help me out ?
17:17 < elliottcable> if I rl.write('\n'), it triggers the 'line' callback with the content on the previous line. ಠ_ಠ
17:19 < draginx> tjfontaine: thanks! Would appreciate it a lot :)
17:19 < draginx> And I'm not exactly sure how I can spawn 15 processes before hand and just throw them into the lions den
17:20 < tjfontaine> draginx: child_process module, then you change your queue to send and receive messages from them
17:21 < draginx> tjfontaine: I'll be heading out to the gym (dont have much of a choice since I dont have a car -- so im running on someone elses time :P) so if you can PM me that would be awesome
17:21 < draginx> and if u have a tipjar somewhere PM me that as well :)
17:21 < tjfontaine> heh
17:38 < fanweixiao> anyone available right now?
17:39 < rouan> ...
17:39 < rouan> for?
17:39 < fanweixiao> hi rouan
17:39 < rouan> oh download speed limiting... meh
17:39 < rouan> why make the net slower than it already is
17:39 < fanweixiao> I just wanna limit speed of my file download server 
17:39 < fanweixiao> yeah
17:40 < Industrial> Say I have a VPS with one IP that I expect to run as many as 20-30  domains on (at some point). I'm not that good with linux server administration, so I don't know the correct policy of which user needs to run what. Right now I actually have my root user running the proxy (in nodejs) because I couldn't get my normal user run it.
17:41 < Industrial> Should I just create a new user web that runs all servers?
17:41 < mpfundst1in> Industrial: You should create a user on each server which has all rights needed to run your process
17:41 < mpfundst1in> Industrial: this can also be pretty much automated
17:42 < Industrial> I was going to use fleet to do git based deployment
17:42 < fanweixiao> @rouan, if some user have high internet connection speed, using Stream.pipe will eat too much bandwidth
17:42 < rouan> that sounds like virtual hosts inside a virtual host
17:42 < mpfundst1in> Industrial: dont ever run a web service as root. you never know which evil things can happen ;-)
17:42 < Industrial> i know :>
17:42 < mpfundst1in> hehe
17:42 < fanweixiao> so others get lower download rate
17:43 < mpfundst1in> you can for example give the user a directory where he has all stuff needed to run the service. r/w access etc..
17:43 < jrajav> I run web services as root and doesn't afraid of anything
17:43 < mpfundst1in> like /var/www for apache
17:43 < rouan> fanweixiao, well, isnt it better to adress that issue? with fibre going up everywhere we'll need to figure out how to make node saturate 2.5gbit 
17:43 < fanweixiao> so, I wanna limit download rate to 200K per connection
17:43 < rouan> mirror raid SSD, in memory caching etc
17:43 < mpfundst1in> jrajav: well... not much to say bout that :D
17:47 < bradleymeck> isaacs: is there a recommended way to pipe a ReadableStream to the ether now (like /dev/null for .pipe without openning /dev/null) right now im just using .on('readable'
17:48 < taxxodium> hello, I'm new to node and have a question about modules
17:48 < rouan> taxxodium, ask away
17:48 < taxxodium> basically I created a class that I then exported as a module using exports.module but what I would like to do is create a function that instantiates this modules once
17:48 < taxxodium> is this code correct? https://gist.github.com/4390287
17:49 < rouan> https://github.com/fluentart/templates/tree/master/01_modules
17:49 <@isaacs> bradleymeck: well, you can use .resume()
17:50 <@isaacs> bradleymeck: http streams have a ._dump() which i'm considering making public
17:50 < rouan> taxxodium, i think .exports should be at the end
17:50 <@isaacs> bradleymeck: that's like .resume() but withotu all the 'data' event business
17:50 < bradleymeck> isaacs: i think some kind of .dump would be nice for times I just want to ignore content for a while
17:50 <@isaacs> yeah
17:50 <@isaacs> bradleymeck: though, it's not like you'd be able to un-dump it
17:50 < taxxodium> ok, but would the code in getMyObject work the way I want it?
17:50 < bradleymeck> would help with not making random buffers
17:50 < taxxodium> basically creating a singleton of MyObject class?
17:51 < cellvia> @isaacs is the data event going to be deprecated and simply replaced with the readable event?
17:51 < bradleymeck> isaacs: https://github.com/bmeck/node-tart/blob/master/lib/substream.js i wanted it for substreaming
17:51 <@isaacs> cellvia: it's not deprecated
17:51 <@isaacs> cellvia: it's just another way to do it
17:52 < cellvia> @isaacs ok cool thank you,  but i am correct in that now "readable" is an event that is piped 
17:52 < cellvia> along
17:52 < cellvia> and "data" only if you assign a handler ?
17:52 <@isaacs> cellvia: you can listen to readable to know when there's data available to be read, and then call chunk = stream.read(size)
17:52 <@isaacs> cellvia: yes, "data" will be emitted only when you assign a handler to it
17:52 <@isaacs> cellvia: and that'll cause the data to flow freely
17:53 < cellvia> @isaacs   ok main thing im checking for is that 'readable' gets passed down the pipeline just like 'data' does
17:53 < cellvia> er, did
17:53 <@isaacs> taxxodium: no, that code is not correct
17:53 <@isaacs> cellvia: not sure what you mean by "passed down the pipeline"
17:53 <@isaacs> taxxodium: once you set module.exports, the "exports" object is a pointless thing
17:53 <@isaacs> taxxodium: instead of exports.getMyObject, you now need to do MyObject.getMyObject = ...
17:54 <@isaacs> taxxodium: because oyu've clobbered the module.exports object
17:55 < taxxodium> ok I understand, so basically I can do singletons the same way I do in other programming languages
17:55 < cellvia> @isaacs  .pipe(destination)  how are the chunks of data passed
17:55 < taxxodium> just have a var gMyObject = null somewhere and fill it when I call MyObject.getMyObject
17:55 < jedahan> how do i force a line to be synchronous? I am building an array, and it gets returned before any branching logic is finished, and therefore is incomplete
17:56 < jedahan> (in case this is the xy problem, here are the offending lines : http://pastebin.com/j4p6wYp1 )
17:56 < bradleymeck> jedahan: you don't, look at the 'async' module for how to use callbacks to achieve same effect
17:57 < bradleymeck> coffeescript makes my eyes hurt at times
17:58 < cellvia> i manually set _write, and emit a 'readable' event?
18:00 < cellvia> i use a lot of what you call transform streams
18:01 < cellvia> and im used to declaring a write function that emits a data event
18:04 < cellvia> but now i should daisy chain 'readable' events, emitting the result of 'read(size)' each time ?
18:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:08 < cellvia> darn i lost @isaacs
18:09 < bradleymeck> cellvia: you should only need to declare _write
18:09 < bradleymeck> the streams impl takes care of readable
18:10 < taxxodium> isaacs: I get a TypeError when I try to access a method after doing this: var myObject = require("MyObject"); myObject.getMyObject(function() {});
18:11 < taxxodium> sais myObject has no function getMyObject
18:11 < cellvia> im seeing transform streams actually have _transform instead of read or write
18:11 < bradleymeck> taxxodium: whats require returning?
18:11 < taxxodium> the constructor function of MyObject
18:12 < bradleymeck> taxxodium: and the constructor has .getMyObject set on it?
18:12 < bradleymeck> not on the prototype
18:12 < taxxodium> no, I only have that on the prototype
18:13 < taxxodium> how do I set it in the constructor?
18:13 < bradleymeck> then you just have a constructor function, not an instance so it doesn't make sense
18:13 < bradleymeck> you can set it directly on the function
18:13 < bradleymeck> or if you wanted an instance use `new`
18:14 < taxxodium> yeah, well I want to prevent calling new
18:14 < taxxodium> I wanna create a singleton object of this module
18:15 < bradleymeck> taxxodium: don't do that, require x can resolve to different paths
18:15 < bradleymeck> singletons bad
18:15 <@mbalho> mmalecki: haha yea just messin with ya
18:15 < Iszak> if over used.
18:15 < Iszak> Nothing wrong with a single singleton
18:16 < cellvia> yeah what you got against a single singleton
18:16 < bradleymeck> Iszak: leads to odd bugs if multiple paths resolve to it
18:16 < taxxodium> the problem I want to solve is that in my code I use several time new MyObject, and I want to prevent that through cashing the instance
18:16 < Iszak> bradleymeck I haven't been following the discussion. But seeing such a blanket statement isn't correct.
18:16 < bradleymeck> look at the hell of require('nconf') vs making a new provider
18:17 < bradleymeck> Iszak: singletons lead to odd bugs due to non-shared modules from different paths
18:17 < bradleymeck> avoid them
18:17 < Iszak> never had a problem with singletons if used properly.
18:17 < Iszak> pain to test usually though.
18:17 < mmalecki> mbalho: hey, it could have been polish!
18:18 < bradleymeck> require('nconf') in one module that has nconf in its deps and in another with it in it's deps, then try to modify nconf globally in one of those, mismatch and chaos
18:18 < mmalecki> ^
18:18 < Iszak> bradleymeck that's just one case, I'm sure there is cases when it's fine.
18:18 < bradleymeck> pass things by arguments / dependency injection
18:19 < Iszak> It's like saying, MVC is the solution for everything.
18:19 < bradleymeck> Iszak if monitored carefully though all supermodules sure
18:19 < jcrew> mvc is the solution to everything
18:20 < Iszak> yeah, right.
18:20 <@mbalho> mmalecki: you should totally commit in half polish half english
18:20 < bradleymeck> Iszak: i say avoid them because of the potential problem for little gain vs just passing via arguments, if you want a large blog post on this pm me
18:20 < astropirate> how come there is no curl library for node.js :|
18:20 < bradleymeck> astropirate: require('request') npm i request
18:20 < Iszak> bradleymeck I don't need a large post on this, I just don't like people saying "don't use this, EVER"
18:21 < bradleymeck> Iszak: i stand by never
18:21 < astropirate> what are we not using ever?
18:21 < Iszak> singletons.
18:21 < astropirate> ohh
18:21 < jcrew> spaces instead of tabs
18:21 < astropirate> :p
18:21 < chovy> Iszak: singletons are easy
18:21 < Iszak> chovy meet bradleymeck
18:21 < astropirate> use them when they make sense, just don't go ape shit on using them
18:22 < chovy> now raising twins...that's a challenge
18:22 < astropirate> chovy, thats why god invented permanent markets 
18:22 < jedahan> thanks bradleymeck. async.filter did the trick, though I'm not quite there yet with understanding it. like, what operations are atomic and which are not
18:23 < jedahan> actually, its not about that, its just about ordering
18:23 < jedahan> ahh
18:23 < jedahan> ok i'm slowly getting this async stuff
18:24 < Iszak> Who here uses a service manager?
18:25 < astropirate> Iszak, what kind of a service manager?
18:25 < RLa> s service manager?
18:25 < Iszak> astropirate for services and their dependencies.
18:25 < astropirate> I do :D
18:25 < astropirate> i am writing a framework all around that notion
18:25 < Iszak> astropirate what module are you using for this?
18:26 < Iszak> astropirate I'm guessing all modules depend on the SM as opposed to passing the dependencies directly?
18:27 < astropirate> Iszak, well, it leaves it up to you how you want to interface with it
18:27 < Iszak> astropirate I never said there was anything against it, just wanted to know how you implemented it.
18:32 <@isaacs> taxxodium: do this:  MyObject.getMyObject = function() { ... }
18:32 <@isaacs> taxxodium: NOT this: MyObject.prototype.getMyObject= function(){ this is wrong }
18:32 <@isaacs> taxxodium: putting it on the prototype puts it on instances, not on the class itself.
18:35 < mmalecki> mbalho: I have a local branch where I translate node.js APIs into polish
18:35 < mmalecki> because JS totally supports UTF8 property names
18:35 < mmalecki> so sieć.połącz === net.connect
18:36 < ikss> mmalecki: lol ;-D
18:36 < ikss> just for fun? or... ? ;-)
18:36 < mmalecki> ikss: for fun, obviously
18:37 < tjfontaine> for profit clearly
18:37 < ikss> ;-)
18:37 < ikss> any yeoman users around perhaps? -_-
18:37 < pandeiro> i'm using npm install -g <pkgname> to download and install stuff, but when I start the node REPL and try to require it, it says module not found... do I need to specify where to look or something?
18:38 < jcrew> pandeiro: -g isn't for 'require'ing modules from any script, it's for binaries and utilities
18:38 < pandeiro> (node v0.8.16 btw)
18:38 < pandeiro> jcrew: i thought -g installed libs globally so i could require them from anywhere (?)
18:39 < jcrew> it doesn't, try doing the install without the -g from the same folder your script is in
18:39 < pandeiro> jcrew: so the lib has to be installed locally to use it?
18:39 < squeakytoy> whats the squid's best friend?
18:40 < pandeiro> jcrew: iow, i need to create a project dir to use the REPL with libraries?
18:40 < jcrew> a Marine 
18:40 < squeakytoy> soldier?!
18:40 < jcrew> and his rifle
18:40 < ikss> -_-
18:40 < purr> ikss: ಠ_ಠ is an IRC client/IRC client framework.
18:40 < ikss> lol :D
18:41 < taxxodium> isaacs, thanks
18:44 < pandeiro> sorry just to confirm - there's no way to install npm packages so that i can require them from any node repl?
18:46 < jcrew> pandeiro: i think there may be an environment variable where you can specify the node modules but i don't know for sure
18:47 < jcrew> specify where node looks for modules^
18:47 < mmalecki> NODE_PATH iirc
18:49 < gmg85> Have any of you guys implemented session management with restify?
18:49 < gmg85> :]
18:49 < pandeiro> mmalecki: ah thank you very much
18:50 <@isaacs> pandeiro: you can just install them in cwd, and then repl will find them
18:50 <@isaacs> pandeiro: the repl acts like a module at ./repl
18:51 < pandeiro> isaacs: yeah i'd like to just fire up the repl and not have to think about a cwd at all
18:51 < pandeiro> i think the problem is i built node w/o specifying --prefix (could that be it?)
18:51 < gmg85> is using mongodb to store session info the wrong way to go?
18:51 < pandeiro> b/c in the docs it says node should be looking in $PREFIX/lib/node ?
18:52 < EyePulp> gmg85: it's not a terrible option - a lot of people prefer redis for that role though.  (I'm using mongo and redis on different projects)
18:53 < EyePulp> gmg85: I think the argument might rest on ultimate performance expectations, architecture, and complexity of stored data.  All of which both tools could address, fwiw
18:53 < gmg85> EyePulp, so mongodb is ok to use in that case?
18:54 < EyePulp> gmg85: in which case?  You've given no details other than "to store session info"  which it can do.  For that matter sqllite can do it, or a flat file.  
18:55 < gmg85> EyePulp :] cool...let me try use mongo db and some sort of collection to store session info
18:55 < EyePulp> gmg85: in all likelihood, mongo or redis will be more than adequate.  Or postgres… or mysql...
18:56 < EyePulp> gmg85: sounds good.
18:56 <@isaacs> pandeiro: no, that's not the problem
18:56 < gmg85> EyePulp, yes it does
18:56 < gmg85> EyePulp, thanks
18:56 <@isaacs> pandeiro: the issue is that npm installs modules locally
18:56 <@isaacs> pandeiro: so you only get modules that are installed in the local project.
18:56 <@isaacs> pandeiro: cd into your project, then run the repl, and uyou'll see them
18:56 < pandeiro> isaacs: i'm using the -g flag though
18:57 < pandeiro> because i really am not using nodejs for 'projects' mostly, but more of an adhoc js runtime to try stuff out and render visualizations
18:57 < pandeiro> i thought npm supported installing stuff globally like i am imagining in the past; has that changed?
18:58 <@isaacs> pandeiro: you CAN require modules by doing NODE_PATH=`npm root -g`.  but i don't recommend it
18:58 <@isaacs> pandeiro: you're better off just creating a folder called "adhoc-js-runtime-stuff-to-try" and doing all your stuff in there
18:59 <@isaacs> pandeiro: then you can install locally, require() in the repl, etc.
18:59 < pandeiro> isaacs: yeah that is how i use clojure, i guess i will adopt that approach if that is your rec
19:04 <@isaacs> pandeiro: it makes it easier to hit a point where oyu go, "Ok, I wanna build something for real now..." and not haev a bunch of clutter in the way
19:04 <@isaacs> pandeiro: just cd into a new folder.
19:10 < cellvia> @isaacs any chance to come up with a very simple gist or example of a readable -> transform -> writable  pipeline with the new api
19:13 < drudge> https://groups.google.com/forum/?fromgroups=#!topic/objectivej/TBq-OxT3mEQ
19:24 < stongo> are there any node.js frameworks that offer decent search functionality (and I guess a db abstraction layer)?
19:24 < AAA_awright> stongo: Usually that's implemented by the database
19:24 < astropirate> db abstraction....
19:24 < astropirate> cant live it 
19:24 < astropirate> can't live without it
19:25 < astropirate> well, you can
19:25 < stongo> I can't remember what framework I had seen that had a db abstraction layer for several nosql types
19:26 < astropirate> i saw one, it was part of a framework
19:26 < astropirate> it was.. mediocre-ish
19:26 < astropirate> for my needs at least
19:26 < cxreg> is it known that node debug -e '...' crashes the debugger?
19:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:29 < stongo> mongoose seems really cool
19:29 < cxreg> hm, -e seems broken in other ways too, ill not use it :(
19:29 < mpfundstein_home> mongoose is also pretty intuitive to use
19:29 < mpfundstein_home> i can suggest it
19:30 < mpfundstein_home> just if you want to change to sql later one for example you would have to use a lot of rewriting
19:33 < stongo> mpfundstein_home: mongoose definitely seems very intuitive. I am only planning on using node.js for non-sql use cases, so I should be fine.
19:33 < stongo> has anyone used hapi much?
19:34 < arnorhs> no
19:34 < cxreg> isaacs: i've been toying with domains and it seems pretty easy to end up with a bloated domain._stack
19:34 < stongo> also wondering about compound.js ... haven't been able to find any reviews at all about it
19:36 < cxreg> isaacs: i'm playing with a patch that helps, but it doesn't solve for the fact that an exception ends the current Tick, so only the caught domain exits leaving "outer" ones on the stack.  in fact, i'm not sure it's ever valid to leave /anything/ in the stack between Ticks
19:37 <@isaacs> cxreg: a domain should always be exited if an error is caught
19:38 <@isaacs> cxreg: a test would be nice
19:38 < cxreg> yes but if you have a run() inside another one, and the inner one catches, the outer one remains
19:38 < cxreg> one sec
19:38 <@isaacs> hm.  i see.
19:38 < cxreg> i think the uncaught handler should just empty the stack, period
19:40 < terietor> hello
19:40 < terietor> I want to make an authenticated request with http.get
19:40 < terietor> my code works for non authenticated requests but not for the authenticated ones
19:40 < terietor> this is my code, http://paste.kde.org/632390/
19:43 < mpfundstein_home> terietor: you really should work on your naming conventions
19:44 < terietor> yes indeed
19:46 < terietor> mpfundstein_home I believe that the issue is between the lines 38-40, in those lines I add the auth stuff for the request
19:47 < cxreg> isaacs: it may be clear but here: https://gist.github.com/4391360
19:47 < cxreg> imagine doing that repeatedly, and your stack grows unbounded
19:48 <@isaacs> cxreg: yeah, that makes sense
19:48 <@isaacs> cxreg: wanna try a patch?
19:49 < cxreg> well.  i've been thinking about the whole problem space for about 2 weeks or so... i really want nested (and cascading) domains to work, but i can't imagine a way to make it ever sane or safe for a singleton stack to retain state between ticks... you just don't know what will run on any given tick
19:50 < cxreg> the bindings themselves could track the stack that was in place when they were created
19:50 < cxreg> having a stack-per-binding
19:50 < cxreg> anyway, to start off, i think the handler should empty the stack
19:52 < cxreg> the patch to that is trivial, of course... i can push one
19:52 < cxreg> isaacs: one thing that was tremendously helpful was throwing a print statement on every place in the code that enters or exits a domain.  could be useful as debug-level output
19:53 < cxreg> i couldn't put it in enter/exit directly because that seemed to induce infinite recursion
19:54 <@isaacs> hmm...
19:54 < cxreg> also, (node debug)++
20:04 < pedroncs> http://github.com/yeptlabs/wns new project
20:05 < astropirate> wolds best framework
20:05 < astropirate> HAAAA
20:05 < EyePulp> bold statements.
20:06 < EyePulp> I have a classic .asp framework that begs to differ, however.
20:06 < astropirate> lol
20:07 < arnorhs> hm, what are the benefits of Yii framework?
20:08 < arnorhs> as in, what is the motivation behind building one inspired by it
20:08 < AviMarcus> Yii is a framework for PHP that does a ton of stuff built in
20:08 < AviMarcus> I looked at it for a while but couldn't figure out how to get it to do what I wanted easily, so I kinda gave up on it
20:08 < arnorhs> what are the things that it does better than any other framework?
20:09 < AviMarcus> it has a built-in RBAC permission system, ORM, CRUD..
20:09 < astropirate> i want a comparison of Yii Symfony2 and ZF2
20:09 < AviMarcus> by crud, I mean with GUI for exposing the crud to users, with permissions
20:09 < AviMarcus> iirc
20:10 < trankil> astropirate: node is inspired by Yii, php is a great langage.
20:11 < astropirate> o_O
20:11 < bradleymeck> cxreg: well i just avoid reusing domains
20:11 < arnorhs> interesting
20:11 < EyePulp> trankil: 3/10  would troll again +++++
20:11 < AviMarcus> lol trankil 
20:12 < cxreg> bradleymeck: this is distinct from the "reuse" case, in my test every domain is a new one
20:12 < cxreg> there's two problems, i think
20:13 < cxreg> isaacs: i think im going to make a branch with a few of my ideas on it, see how it turns out
20:14 < nathan7> isaacs: so the npm registry isn't v6-ready
20:15 < nathan7> I am disappoint
20:16 < cxreg> i really wish mranney would start merging some of his node_redis PRs :(
20:16 < cxreg> i'm going to upload a fork to npm soon if he doesn't
20:17 < AviMarcus> redis? if you're doing to insert 400million records to redis, just use a node.js net server to connect to redis and send the SETs directly.
20:18 < AviMarcus> worked best for me :P
20:18 < trankil> cxreg: poke him on facebook, so he can merge your PR easily.
20:19 <@konobi> nathan7: you are disappoint in pragmatism?
20:19 < cxreg> i already did on twitter, a week ago
20:19 < nathan7> konobi: I don't have v4 for today
20:19 < cxreg> there have been no commits since nov 2, and there's 20 pending PRs
20:20 < nathan7> Not because it's not available (DHCPv4 got fixed fifteen mins ago) but because I'm curious on the state of v6-readiness
20:20 < VultureZ> Anyone know what happened to Hook.IO?
20:20 < nathan7> Died/got deprecated
20:20 < VultureZ> nathan7, for what?
20:20 < nathan7> No idea.
20:22 < trankil> cxreg: ok, fork then, npm publish redis-im_pissed_with_this_lazy_bdfl_module_owner
20:22 < cxreg> heh.
20:22 <@konobi> nathan7: your problem, not ours =0P
20:24 < cxreg> VultureZ: https://groups.google.com/forum/?fromgroups=#!topic/nodejs/FCsTCopm_dE
20:25 < cxreg> i've replaced it with a solution i wrote using redis pub/sub
20:25 < cxreg> i should publish that....
20:26 < nathan7> konobi: It's not like we have v4 addresses left, v6 is not optional anymore
20:26 <@konobi> nathan7: tell that to the ISPs
20:27 < cxreg> I can't use ipv6, even if i want to
20:27 < VultureZ> cxreg, thank you I will check that out
20:27 < cxreg> VultureZ: truth is, hook is just some minor tcp glue on top of EE2 anyway
20:28 < cxreg> it doesn't really add much
20:30 < jtane> felixge: any plans for a streams2 formidable?
20:30 < felixge> jtane: first pull request wins the merge :)
20:30 < jtane> felixge: haha, fair
20:31 <@konobi> nathan7: i used to have an IPv6 AS number and handle a lot of ipv6 traffic (but back then backbones didn't charge for that traffic)
20:31 <@konobi> but 0.001% of folks hitting your site/app will have ipv6 capability, so where's the motivation since they all have ipv6 anyway?
20:32 < cxreg> the most optimistic forecasts have 2% of the internet as ipv6 capable by end of 2013
20:32 < AviMarcus> none of my local ISPs seem to offer it...
20:35 <@konobi> *ipv4 even
20:43 < jtane> felixge: it'd be really swell if somehow the stream passed to onPart could exert backpressure on the incoming request... does this seem feasible?
20:43 < cellvia> what are popular solutions or ipc w/ node
20:44 < cellvia> 'sides redis
20:44 < cellvia> for*
20:44 < jtane> just wondering if anyone is already thinking about something like this...
20:52 < draginx> tjfontaine: any luck? :)
20:52 < tjfontaine> draginx: sure
20:52 < tjfontaine> using: -format ~~~%w~~~%h~~~%x~~~%C /home/tjfontaine/development/test/logo.png
20:52 < tjfontaine> imagick did 1000 in 0.319 seconds
20:52 < tjfontaine> imagemagick did 1000 in 7.093 seconds
20:52 < tjfontaine> now that's a single at a time
20:53 < draginx> right urs is imagick correct?
20:53 < tjfontaine> (because I changed my code to be blocking instead of async while I was testing things)
20:53 < tjfontaine> yes imagick is a binding, imagemagick is exec()'ing identify
20:54 < draginx> so not only is it blocking but it's faster...
20:54 < sethetter> Has anyone worked with the CompoundJS framework? Comments on maturity/quality?
20:54 < draginx> ugh I hate my life :P How much would it take to get your imagick setup for node v0.8?
20:54 < tjfontaine> draginx: https://gist.github.com/4391835
20:55 < draginx> is that using node v0.8? O_o
20:55 < tjfontaine> yes
20:56 < draginx> ah ty :) I'll give that a shot and see how it works out :D
20:56 < draginx> I appreciate this a lot
20:56 < tjfontaine> lemme push this code
20:56 <@konobi> what? no uv_custom?
20:57 < Raydiation> is there a hashmap class available?
20:57 < Raydiation> im using object literals atm
20:58 < astropirate> Raydiation, objects work fine
20:58 < Raydiation> im using myobject['hash'] = true
20:58 < Raydiation> for a hashset
20:58 < astropirate> yah, thats fine
20:58 < astropirate> thats the way to do it
20:58 < Raydiation> ty
21:00 < tjfontaine> draginx: I pushed to my repo, I did my testing on linux, it should work on most unicies, probably won't work on windows ... make sure you have libmagickwand-dev installed
21:00 < draginx> thanks tjfontaine! I owe you a beer or two :) Let me know if there's anyway to make that happen
21:00 < draginx> I'll test on debian lenny
21:00 < tjfontaine> konobi: I initially started with refactoring to support uv_queue_work but then as I was debugging I moved back to sync
21:00 < draginx> is this pushed on npm too or no? O_o
21:02 < tjfontaine> draginx: it's not really sane enough for npm imo, but you can install with `npm install https://github.com/tjfontaine/node-imagick/tarball/master`
21:02 < draginx> ah interesting :D
21:02 < draginx> so u wouldnt recommend this on production? :p
21:02 < tjfontaine> or checkout the repo and `npm install ../path/to/repo`
21:02 < tjfontaine> I am saying it may eat babies
21:03 < tjfontaine> and I'm not thrilled with necessarily supporting beyond "hey this is what I was talking about"
21:04 < astropirate> tjfontaine, dont eat babies
21:04 < astropirate> too many cops
21:04 < astropirate>  :|
21:06 < myndzi> anybody have an idea for a mechanism somewhere between a callback and an event emitter?
21:07 < myndzi> or know some library i could investigate or something like that
21:07 < draginx> lol tjfontaine I understand :) thanks!
21:07 < astropirate> myndzi, maybe a prmise?
21:07 < astropirate> myndzi, http://howtonode.org/promises
21:07 < draginx> tjfontaine: just out of curiosity thoguh, what about it makes u say this isnt ready for prod? I might be interested in forking and learning as a C++ project
21:09 <@konobi> i always have suggestions for native addons =0)
21:09 < myndzi> hmm, maybe so
21:10 < tjfontaine> draginx: little to no error checking is done, it's not that I don't think it wouldn't work well in production, matter of fact the code as it was used in production for someone else last year, I just made them the same stipulation that I wasn't responsible for the outcome
21:10 <@konobi> nb... promises were removed from node core due to lots of issues with them
21:10 < draginx> tjfontaine: ah very cool :) cheers
21:11 < tjfontaine> draginx: should I find more motivation I may clean it up and remove some of the other stuff I was doing with it, perhaps later this week[end]
21:11 <@konobi> draginx: jpegoptim, pngcrush and family would be nice to get in a native addon
21:11 < draginx> let me know if there's anyway I can help :)
21:11 < draginx> konobi: i couldve sworn I saw native addons for those
21:11 < draginx> or at least pngcrush
21:12 < tjfontaine> draginx: if you hit a problem that works from the command line but doesn't from the module file an issue with me
21:12 < draginx> will do :)
21:12 < rodyhaddad> Hey guys, I"m trying out express on node.js. GET is working for me, but POST isn't. Chrome is telling me it has been "canceled" and I'm not getting any response. I'm not sure how to debug it, can someone help guide me?
21:12 < draginx> again, a zillion thanks :D
21:12 < draginx> rodyhaddad: can you paste code somewhere? O_o
21:12 < rodyhaddad> dragging, yes sure. pastebin?
21:15 < draginx> rodyhaddad: *shrugs* w/e
21:15 < rodyhaddad> draginx, is there a better place where I can put node code for you to see? :p
21:15 < draginx> gist.github.com is nice
21:16 < Raydiation> is there a good way to check if a new file was created in a directory or its subdirectories??
21:18 < mpfundstein_home> inotify
21:18 < mpfundstein_home> if your not on a NFS or Sambda fs
21:18 < rodyhaddad> draginx, https://gist.github.com/bd6b38a2dd992156b4cd
21:19 < draginx> rodyhaddad: remove line 13 and then try again also how ar eu trying to access this?
21:20 < rodyhaddad> dragging, using jQuery.post in my app (the info gets to node without a problem, it's just the response that's bugging)
21:20 < Raydiation> mpfundstein_home: does fs.watchFile also work on directories?
21:21 < rodyhaddad> draginx, I removed line 13, still same problem. node gets the POST data and outputs it, but I still don't get a response
21:21 < draginx> whats the full URL that ur trying to access?
21:22 < rodyhaddad> http://localhost:8080/login
21:22 < rodyhaddad> GET works fine though
21:22 < rodyhaddad> is the fact that it's on localhost make POST not work? that would be weird...
21:25 < draginx> to whoever was asking about compoundjs.. it seems like a re-write of railwayjs without the virtual machine code
21:25 < draginx> which is awesome -- and needed
21:25 < draginx> rodyhaddad: no idea sorry :(
21:25 <@konobi> rodyhaddad: try res.end() after your send
21:26 < mpfundstein_home> Raydiation: no idea. i think inotify does a great job monitoring folders. thats what its designed for.
21:26 < draginx> nvm http://grokbase.com/t/gg/railwayjs/12cgjjkq1c/1546-breaking-we-may-have-a-new-name-soon-ruby-on-rails-founder-david-heinemeier-hansson-has-informed-the-community-he-believes-we-are-in-violation-of-its-trademark
21:27 < rodyhaddad> loool, I was opening my app using file:///... and trying to request http://localhost...
21:27 < rodyhaddad> well that was stupid :p
21:29 < rodyhaddad> guess I found my problem then, thx dragging (and konobi) :)
21:30 < rodyhaddad> draginx * oops
21:30 < draginx> :P
21:36 < tjfontaine> draginx: btw I just pushed such that it's async again, no appreciable change in the benchmark results, though the way I've done it it's likely that some commands may trigger the thread stack limit, but for just identifying it should be fine
21:36 < draginx> what if I needed more..?
21:36 < draginx> like resizing / convert?
21:37 < tjfontaine> try it and see if it seg faults, if it does I'll have to add back in the hack where I make a new thread with a larger stack
21:38 < draginx> ok :) uhm, I wont be able to tell u till about 2-3 days from now.. if that's ok..?
21:38 < draginx> I can just post an issue on github if that helps :)
21:38 < tjfontaine> yup
21:43 < draginx> tjfontaine: found my first issue :D
21:43 < tjfontaine> draginx: always sepcify full path, I'm guessing
21:43 < draginx> ah
21:43 < tjfontaine> *specify
21:44 < tjfontaine> path.resolve() is your friend
21:44 < draginx> invalid ELF header actually
21:44 < draginx> like i can't start up node to test :P
21:44 < draginx> https://github.com/tjfontaine/node-imagick/issues/1
21:44 < tjfontaine> that usually means it didn't compile approprtiately
21:44 < draginx> hmm
21:45 < draginx> added comment https://github.com/tjfontaine/node-imagick/issues/1
21:45 < tjfontaine> hmm why is it using node-waf?
21:45 < tjfontaine> it should be using node-gyp
21:45 < draginx> *shrugs* thats what i thought too
21:46 < draginx> is this something on your side/settings or mine?
21:46 < draginx> node -v -> v0.8.16
21:46 < tjfontaine> I've just pushed to the repo removing wscript, hopefully that will resolve things for you
21:46 <@konobi> might need to add engine to package.json
21:46 < draginx> let me try from your tarball directly
21:46 < tjfontaine> konobi: ah possibly
21:47 < draginx> installing form tarball is using gyp :)
21:48 < draginx> ../src/command.cc:8:29: fatal error: wand/MagickWand.h: No such file or directory thats strange.. despite me having magickwand installed
21:48 < draginx> apt-get install libmagickwand-dev libmagick-dev
21:49 < draginx> let me see if i need libmagickcore-dev
21:49 < tjfontaine> draginx: libmagick++-dev
21:50 < draginx> there we go :D
21:50 < draginx> ok it seems to have started
21:50 < tjfontaine> that's an old dependency that I can remove now
21:50 < draginx> ran just fine for identify :) awesome
21:51 < draginx> dont notice much of a speed diff :D but I bet I would after many hits.. now my next question to you is.. why the C++ binding? Creationix even says there's a slight performance lost with the C++<->JS bridge
21:52 < tjfontaine> draginx: there is a performance hit, but it's not *nearly* as large as spawn a process every time
21:53 < draginx> ah I see the diff now :)
21:54 < tjfontaine> when you're serving 1000 clients at a time, you want to respond timely, while at the same time not creating a fork bomb of an application
21:54 < draginx> this is pretty awesome :) ty
22:10 < isaacbw> does require use __dirname to normalize '.' ?
22:13 < isaacbw> I'm changing my working directory and expecting require to know what's happening, but it doesn't
22:14 < substack> isaacbw: yes, when you require() files the paths are relative to the file that is executing
22:15 < isaacbw> is there a way to trick it into looking somewhere else? I thought about making a proxy require() function, but require is more than just a function, so... I don't know if that will work
22:15 < tjfontaine> isaacbw: what problem are you actually trying to solve
22:16 < isaacbw> I'm loading other scripts and running them in a vm and I want the requires in those scripts to be local to them and not to the executing scrit
22:16 < isaacbw> *script
22:16 < tjfontaine> you'll want to sandbox the require then
22:17 < substack> isaacbw: you can use this module to do resolves with respect to a file path http://github.com/substack/node-resolve
22:19 < substack> vm.runInNewContext(src, { require : function (name) { return require(resolve(name, { basedir : path.dirname(file) }) } })
22:20 < isaacbw> awesome :) thank you!
22:24 < isaacbw> so is there no way to change the local path but keep an existing context?
22:25 < isaacbw> the base dir
22:25 < pedroncs> for those who not saw http://github.com/yeptlabs/wns
22:35 < isaacbw> ah, I got it. I was able to just set module.filename on the context and everything works fine
22:49 < samholmes> If I say npm install bcrypt will it install the latest version or the version stated in my package.json?
22:56 < astropirate> sambarino, latest
22:56 < astropirate> if you just do npm install   and with package.json in the working directory then it will install the specified versino
22:59 < astropirate> Anyone know someone thats hiring node.js devs?
22:59 < draginx> is .trim() a standard in nodejs now? O_o
23:01 < tjfontaine> draginx: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim
23:01 < draginx> ight nodejs complies with KS 1.8.1 ya?
23:01 < draginx> JS*
23:01 < draginx> yeah def
23:01 < draginx> thanks :)
23:01 <@konobi> astropirate: http://jobs.nodejs.org/
23:02 < astropirate> konobi, that list is depressingly small :(
23:02 <@konobi> it's not the only place
23:02 < astropirate> I may have to brush up on my C++
23:05 < samholmes> SOooooo, I cannot install bcrypt because I don't have make on  my mac
23:05 < samholmes> How, why..um..
23:05 < samholmes> ?
23:06 < AviMarcus> konobi, astropirate hmm if it costs $200 with discount to post there... maybe that's why not many people use it.
23:06 < astropirate> AvianFlu, what other places are there?
23:07 < astropirate> i searched on indeed and dice
23:07 <@konobi> gun.io
23:07 < astropirate> gun.io lol
23:07 <@konobi> github jobs
23:07 < astropirate> thats a funny website
23:09 < samholmes> How do I install make on mac?
23:09 < samholmes> Is there a preferred package manager for Mac that all the cool peeps use?
23:10 < astropirate> samholmes, yes, virtualbox/ubuntu -> aptitude
23:10 < astropirate> kidding aside i think
23:10 < astropirate> they have homebrew
23:10 < samholmes> is that the hipster pm?
23:10 < astropirate> hu?
23:11 < samholmes> hu?
23:11 < astropirate> no
23:11 < astropirate> neckbeards use linux
23:11 < astropirate> hipsters use macs
23:11 < astropirate> common man
23:11 < astropirate> get your steriotypes right
23:11 < MI6> joyent/node: Ryunosuke SATO master * 8936868 : http: remove unused variable  The module variable `END_OF_FILE` was no lo - http://git.io/yWPL_w
23:11 <@konobi> samholmes: get xcode commandline tools
23:11 < samholmes> astropirate: dudee! I know
23:12 < samholmes> konobi: so just installing Xcode will solve all my problems?
23:12 <@konobi> samholmes: that'll et you gcc, make, etc.
23:12 < samholmes> okie
23:12 < tjfontaine> samholmes: once xcode is installed you have to the preferences and install "command line tools" as well
23:12 <@konobi> you'd needthat before using homebrew anyways
23:12 < astropirate> when are they moving over to clang?
23:13 < Industrial> Can I do a fs.rmdir -rf ?
23:13 < samholmes> homebrew looks like a hipster thing
23:13 <@konobi> tjfontaine: you can also install them directly without the rest of XCode
23:13 <@konobi> which is handy, since it'll save you about 3 GB
23:13 < tjfontaine> konobi: perhaps but his response indicated he was just going to install all of xcode
23:14 < tjfontaine> konobi: after the 3gb he would have an unpleasant surprise awaiting him
23:14 < Industrial> I hope at least that I'm not required to recusively read all dirs and remove all nodes?
23:14 <@konobi> Industrial: there's npm packages
23:20 < Industrial> I see a rimraf
23:34 < tjfontaine> draginx: looks like there's already a package named imagick, even though the repo is mia, so I'll probably have to pick a new name
23:37 < AviMarcus> tjfontaine, you can possibly claim the name: https://npmjs.org/doc/disputes.html
23:37 < AviMarcus> "If someone wants to use it today, and you're just taking up space with an empty tarball, you're going to be evicted."
23:39 < LouisT> what name?
23:40 < draginx> tjfontaine: ah makes sense :) uhm .. hmm im wondering if I'm using your imagick or not then :P
23:58 < isaacbw> are there any modules to automate default values for object parameter lists?
23:58 < substack> isaacbw: that's just merge
23:59 <@konobi> there's modules if you want to do it with validation
--- Log closed Fri Dec 28 00:00:39 2012
