--- Log opened Wed Oct 17 00:00:23 2012
00:19 < rknLA_> hey
00:19 < ChrisPartridge> sup
00:19 < rknLA_> not too much
00:19 < rknLA_> you?
00:22 < rknLA_> anyone know the best way to handle getting JSON from an http.get?  right now i'm concatenating to a string, but i'm also getting a maxBuffer exceeded error.
00:23 < SomeoneWeird> 0.o
00:23 < SomeoneWeird> how bigs the JSON string rknLA_ ?
00:23 < rknLA_> 184kb
00:24 < SomeoneWeird> weird
00:25 < SomeoneWeird> maybe try use something like restler to test?
00:25 < rknLA_> looks like i should be using Buffer and Buffer.concat
00:25 < othiym23> rknLA_: stick it into a Buffer until it's done, then parse that all at once?
00:26 < rknLA_> oh, or that.. maybe just use restler in general.
00:26 < othiym23> or pipe the input to a streaming JSON parser?
00:36 < rknLA_> huh.. restler is causing things to error..
00:38 < rknLA_> damn, restler fails on maxBuffer too..
00:53 < jack78> d:) 
00:53 < jack78> How to organize a node.js project 
00:56 < ChrisPartridge> jack78: pick a popular module, and take a gander
01:00 < ang3lfir3> jack78, carefully
01:05 < RLa> why do i feel that manual testing adds no value
01:08 < ChrisPartridge> depends what you are testing for
01:08 < firebalrog> ps -ear |grep node
01:09 < firebalrog> Good manual test
01:09 < RLa> oh, it's not a node app at all :/
01:09 < firebalrog> Lol
01:09 < RLa> gui desktop stuff
01:10 < firebalrog> See GUI then GUI seen good manual test
01:10 < firebalrog> No GUI fail seen GUI test
01:11 < RLa> haha
01:20 < othiym23> is github screwing the pooch for anyone else?
01:21 < RLa> screwing the pooch?
01:21 < othiym23> in this case, timing out
01:22 < RLa> seems fine here
01:22 < othiym23> k thx
01:22 < RLa> both web and ssh access
01:53 < gabrieluk> any reason why i would get 500 errors for my .css, when using stylus?
01:54 < gabrieluk> it was working fine, i just made some relocation of code between files, than boom
01:55 < ChrisPartridge> gabrieluk: is it failing to build the css file?
01:56 < gabrieluk> yes
01:56 < TehShrike> Oh wow.  http://mountainjs.com/
01:59 < gabrieluk> it is failing, sad. and everything looks perfect, not a clue where could be wrong
01:59 < rknLA_> TehShrike: damn.
02:00 < gabrieluk> wtf, magically worked again :/..mm, i don't like that
02:03 < gabrieluk> ChrisPartridge, what could cause such thing? fix by itself?
02:03 < gabrieluk> or maybe just a white space i deleted?
02:04 < RLa> are you using stylus mw?
02:04 < gabrieluk> yeap, stylus
02:05 < RLa> what if you use stylus -w command instead and disable middleware
02:05 < gabrieluk> i'm not sure what you mean
02:07 < gabrieluk> i use stylus as it comes the default processor in an express app. and, yes, i had required and i see it is a middleware
02:07 < gabrieluk> i also installed nib with the compile function
02:08 < RLa> i wonder if mw shows the compile errors
02:09 < gabrieluk> how would i check that?
02:10 < gabrieluk> maybe you could point me documentation about the subject?
02:12 < RLa> maybe you could find the documentation first
02:12 < gabrieluk> maybe
02:12 < RLa> actually i think i have seen stylus errors in console
02:12 < RLa> but i would use stylus -w command
02:12 < gabrieluk> m, i can do that
02:12 < RLa> less complexity in the app
02:13 < draco2003> looking to abstract out the calculations in StatsD, but there is concerns about the calculations blocking. Is this sufficient to do https://github.com/draco2003/statsd/blob/c341f969e34d664700c900d80e50ed959504dc05/stats.js#L74 ? or would something like https://gist.github.com/3903315 be better/worse? 
02:15 < gabrieluk> RLa, the only thing i really need to know for now, is if such errors are comming from the way stylus is designed or some common quirk with node
02:16 < gabrieluk> i'm just using node as a base for my front end stuff, not going very complex for now
02:16 < RLa> well, i have no idea
02:16 < RLa> what does it do with invalid stylus file?
02:17 < gabrieluk> not sure. it is fine for now, if continue giving headache i will try something else
02:19 < RLa> i'm using stylus in lots of projects (also non-node) and i have always used stylus -w command
02:20 < gabrieluk> i don't get 1 thing, when do you fire this command? i was reading all stylus website, and i never see mentioning such command
02:20 < gabrieluk> i mean, not all, most of it
02:20 < gabrieluk> i can't recall really if i read it all
02:20 < RLa> first, install it globally
02:21 < RLa> npm install stylus -g
02:21 < RLa> then run on the command line stylus -w <your main stylus file>
02:22 < gabrieluk> but before/after nodemon app.js?
02:22 < RLa> and it's documented here: http://learnboost.github.com/stylus/docs/executable.html
02:22 < RLa> before you make first request
02:22 < gabrieluk> ah, ok, i will read
02:22 < gabrieluk> ok, before starting the server. atm i have stylus installed locally by express app generator
02:22 < RLa> btw, isn't nodemon eating stderr?
02:23 < RLa> install stylus globally to get the command
02:23 < gabrieluk> mm, yes, i understood that
02:24 < gabrieluk> nodemon auto reloads the stuff, not sure about "eating" stuff
02:24 < RLa> btw, i think supervisor eats stderr which is pretty bad design decision, not sure if nodemon does same
02:24 < RLa> if it eats stderr you won't see any errors or exceptions
02:24 < gabrieluk> ahh
02:24 < gabrieluk> tha is bad
02:25 < RLa> that's complete horror in dev
02:25 < fnguest> i have to make two database calls in one action (using express).  should i use a module like async so one doesn't have to wait for the other?
02:26 < RLa> fnguest, async would make it easier but you can do it also without it
02:27 < RLa> you would need some code to check if the other call has already completed in both callbacks
02:27 < RLa> since you do not know which one completes first
02:38 < gabrieluk> if i have an express3 app behind nginx, in a production server; I was reading I need to take some extra care using app.enable('trust proxy'), also talks about other effects wich are not detailed explained. i really need to understand all about this topic, as I want to avoid troubles in the future.
02:38 < gabrieluk> any links?
02:40 < gabrieluk> also, i would like to know about any tip or further concern regarding security with an express website
02:41 < EvilPacket> gabrieluk: that's a pretty broad topic. Essentially standard web app security rules apply :-)  
02:45 < gabrieluk> EvilPacket, maky frameworks out there offer standard security built in, is that the case for express?
02:46 < EvilPacket> gabrieluk: it does offer some using connect middlware, jade as a template engine encodes things to try and protect against XSS.  Use Helmet (I'm biased as I wrote it) to enable some security headers like X-Frame-options
02:48 < EvilPacket> gabrieluk: http://www.senchalabs.org/connect/middleware-csrf.html for csrf protection on forms anyway (still have to handle it yourself for socket.io or websocket connections)
02:49 < gabrieluk> what about  app.enable('trust proxy'), do i need just to add it to my app.js?
02:49 < gabrieluk> I was reading http://expressjs.com/guide.html , in the very end
02:50 < gabrieluk> and it seems there's more things to do
02:51 < EvilPacket> with most applications there is plenty to do. I haven't used express in this way before so haven't had to deal with trust proxy so don't really know the nuances of what it modifies for behavior.
02:51 < EvilPacket> Looks like it just says to let express trust the values that the upstream proxy is going to set
02:52 < ChrisPartridge> pretty much just checks the headers for the users actual ip
02:52 < EvilPacket> ah
02:52 < ChrisPartridge> if the proxy/proxies were kind enough to pass it along
02:53 < EvilPacket> Which it appears they should (i.e. make sure they do) if you are going to bother to set thatâ€¦ 
02:53 < gabrieluk> going to bother? are you saying it is not mandatory?
02:54 < gabrieluk> pardon me, i might have got wrong what you were refering to
02:54 < EvilPacket> if you are going to trust the proxy you should make sure the proxy is setting those headers I would think.
02:54 < gabrieluk> Sure, it seems a good idea
02:55 < ChrisPartridge> it's generally a non-issue, but if a users uses an anonymous proxy - you may get the proxies ip address
02:55 < ChrisPartridge> s/users/user
02:56 < gabrieluk> ok, so i just add that line of code and that is it? nothing to do with nginx vhost?
03:00 < gabrieluk> i mean, i just don't really understand what is going much really
03:00 < gabrieluk> i just want the basics of security to get me going
03:01 < gabrieluk> Enabling this setting has several subtle effects. The first of which is that X-Forwarded-Proto may be set by the reverse proxy to tell the app that it is https or simply http. This value is reflected by req.protocol.
03:01 < EvilPacket> yup
03:02 < EvilPacket> gabrieluk: i.e. the proxy can tell the app "trust me, I'm running https, it's all good. set req.protocol to https"
03:05 < gabrieluk> but the proxy is talking with the app just for the fact i inserted app.enable('trust proxy') ?
03:05 < EvilPacket> no
03:05 < ack006> hi all, small q about http://develop.jit.su, why does chrome reject the certificate for that?
03:05 < EvilPacket> gabrieluk: you have to tell nginx or whatever you are using to proxy to your listening express app
03:06 < gabrieluk> i'm using nginx.
03:07 < gabrieluk> EvilPacket, i'm not using https anyway, just normal http
03:07 < EvilPacket> ack006: looks like the cert is for *.nodejitsu.com
03:08 < EvilPacket> if you go to http://develop.jit.su it redirects https://webops.nodejitsu.com
03:08 < EvilPacket> gabrieluk: then you don't care about that particular nuance of the trust proxy setting
03:09 < jesusabdullah> EvilPacket: gabrieluk: We should have certs for the rest of them Any Day Now
03:09 < ack006> yup, got that, but chromium tells me that "the site operator has requested stricter security" so in chromium i can't go anywhere if i don't add a root cert.
03:09 < gabrieluk> mm, great, so it is fine for now, i will read the other links you sent, and also check your helmet :P
03:09 < jesusabdullah> ack006: that should be fixed by the new certs too
03:10 < EvilPacket> gabrieluk: thanks, it's a deep subject. Good luck on your quest :-)
03:10 < gabrieluk> ah, just 1 more thing, i'm using hogan,js not jade, is that good against XSS
03:10 < ack006> EvilPacket: using ubuntu 12.04, which is LTS. i suppose ubuntu should be keeping root certs up to date, not?
03:10 < gabrieluk> ?
03:11 < ack006> or are they still on the diginotar stuff :-p
03:11 < gabrieluk> i gues not, as it is plain html :/
03:11 < EvilPacket> gabrieluk: no clue, I have not used it. I would verify it yourself. I'll of course stab it if I get a chance :-)
03:12 < ack006> anyway, i can get in using firefox, will see what comes to pass.
03:12 < gabrieluk> no probs, consider it done, i am a born tester
03:12 < EvilPacket> ack006: ha yeah, I don't know,
03:12 < ack006> thanks anyway
03:13 < gabrieluk> i test everything, design, animation, software really, whatever output a computer produces I'm there, testing
03:16 < gabrieluk> went a bit off opic :D
03:16 < gabrieluk> opic? x.x
03:55 < protestContest> I have a question about socket.io
04:06 < sinclair_> protestContest: have you tried SignalR?
04:12 < mdedetrich> does anyone here use moment.js
04:13 < mdedetrich> and more specifically, how to deal with timezones when using moment.js
04:18 < chovy> mdedetrich: i've used it
04:18 < mdedetrich> chovy: I can't see any documentation regarding how it deals with timezons
04:18 < mdedetrich> chovy: and if it can do something like read timezone data from a tz file
04:18 < chovy> what do you mean?
04:19 < chovy> a tz file?
04:19 < chovy> oh, server side
04:19 < ChrisPartridge> mdedetrich: used it also, but I just pass around unix timestamps and use Moment.unix()
04:19 < chovy> no, i don't think it does that
04:19 < ChrisPartridge> but it does have timezone sutff, .zon() returns the offset in seconds or minutes
04:19 < ChrisPartridge> .zone()
04:23 < mdedetrich> hmm it seems it can use zone offsets
04:24 < mdedetrich> now I just need something that will read olsen timezone data
04:35 < othiym23> it's sad how often I find myself saying "I sure could use some monads right now."
04:35 < othiym23> Haskell has eaten my soul
04:44 < jamescarr_> hey can anyone tell me where the parseCookie method went in the latest connect version?
04:58 < mdedetrich> othiym23: haskell is a beautifully designed language
04:58 < mdedetrich> othiym23: absolutely terrible ecosystem though
05:02 < RLa> mdedetrich, fanboy :)
05:03 < mdedetrich> eh
05:03 < mdedetrich> its a really nice language
05:03 < mdedetrich> its just that someone needs to get into haskell designers and shove them do "just make it work" attitude
05:04 < mdedetrich> they don't even have a proper IDE (and yes I do have the firm belief you need an IDE for a static language)
05:04 < mdedetrich> to fully abuse its properties
05:07 < _Tristan> Hi. If I'm making an object that inherits from event emitter, and I want to override addListener but also call the parent function, how do I do that?
05:08 < _Tristan> I'm thinking this: events.EventEmitter.prototype.addListener.call(this, arguments)
05:09 < Raynos> yeah that would work
05:09 < Raynos> I would do `var _on = EventEmitter.prototype.one`
05:11 < othiym23> mdedetrich: it depends on what you're trying to do with it
05:11 < othiym23> right now, having a good Writer / State monad implementation would be awesome for a bunch of stuff I'm trying to do with Restify
05:14 < RLa> mdedetrich, othiym23 why not ocaml?
05:14 < jamescarr_> why not PHP? :-P
05:15 < othiym23> RLa: I love OCaml, but what I'm working with right now would be a lot simpler with do syntax and typeclasses
05:15 < jamescarr_> $stuff = function($more) use ($somethingOutside) {  return $more * $somethingOutside; }
05:15 < othiym23> OCaml's module support is great, but not as easy to work with for what I'm trying to do
05:15 < RLa> jamescarr_, does it have structural subtyping? :D
05:16 < pyrotechnick> ARE YOU NOT ENTERTAINED
05:18 < jamescarr_> YA IM ENTERAINED
05:19 < othiym23> anyone know how to tell Restify to turn off keep-alive?
05:19 < othiym23> I need to simulate a braindamaged jetty config
05:19 < othiym23> res.keepAlive = false is not doing what I want
05:32 < thusitha> Hi Everyone
05:32 < thusitha> I am bit new to Node..
05:33 < thusitha> Can anyone tell how to debug node child process?
05:34 < thusitha> I am using nodes 'child_process' module and node-inspector to debug my js..But I can't debug into the child process. Any ideas welcome
05:36 < mdedetrich> RLa: haskell is a lot nicer than ocaml
05:39 < othiym23> mdedetrich: but OCaml is a shit-ton faster than Haskell and has unboxed types, which is super nice when performance is important
05:39 < mdedetrich> othiym23: haskell also has unboxed types
05:39 < mdedetrich> and I am not sure what you mean by 'faster'
05:39 < mdedetrich> Haskell can easily approach the speed of C in a lot of cases
05:40 < othiym23> also OCaml's FFI is much friendlier, and strict semantics are generally easier to reason about when you're doing systemy things
05:40 < mdedetrich> I don't know where you are getting your info from
05:40 < othiym23> I mean that it's a lot easier to bludgeon OCaml into giving you decent performance than it is Haskell, especially if you're going to be doing a lot of IO
05:40 < mdedetrich> regarding OCaml being faster
05:40 < othiym23> mdedetrich: from using both of them for 10 years now?
05:41 < othiym23> well, OK, Haskell more like 8
05:41 < mdedetrich> not ever since Haskell did asynchronous and non blocking IO using epolll....
05:41 < mdedetrich> which is like GHC 7.x
05:41 < mdedetrich> iirc
05:41 < mdedetrich> and GHC has had unboxed types for some time
05:41 < othiym23> you're right about the unboxed types; I forgot about that
05:41 < mdedetrich> http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/primitives.html
05:42 < mdedetrich> I'm also right about the other thing
05:42 < othiym23> but the rich vocab of system-like types (uint64 etc) for OCaml is super nice if you're working with raw data
05:42 < othiym23> you can believe what you like!
05:43 < othiym23> I know that if I don't want to spend a lot of time fucking around with unsafeIO, it's a lot easier to do what I want with OCaml
05:43 < mdedetrich> its not a belief thing
05:43 < mdedetrich> you talked about faster
05:43 < othiym23> and I don't have to carry around a bunch of thunks
05:43 < mdedetrich> I do not see any evidence of haskell being slower than ocaml
05:43 < mdedetrich> then use the strict annotation
05:43 < mdedetrich> and you won't get thunks
05:43 < mdedetrich> its !
05:44 < mdedetrich> Haskell is lazy by default, thats well known
05:44 < othiym23> dude, I've written the same program in both Haskell and OCaml and benchmarked it, and OCAml was slower than straight C, around the speed of Java, and about 25% faster than Haskell
05:44 < othiym23> I've read the chapter in RWH on annotating / using unsafeIO / etc
05:44 < mdedetrich> mind sharing the program
05:44 < othiym23> but that takes a billion years compared to just writing it out in OCaml and having it do what I want the first time
05:45 < Zoney> you should write it asm so that it's faster than C
05:45 < mdedetrich> and what version of GHC did you use
05:45 < SomeoneWeird> lol
05:45 < othiym23> not handy right now, this was about 4 years ago and who knows where I put it
05:45 < mdedetrich> okj
05:45 < mdedetrich> so
05:45 < mdedetrich> thats the thing
05:45 < mdedetrich> GHC changed massively
05:45 < mdedetrich> like 2 years ago
05:45 < mdedetrich> so what you are saying is no longer true (may have been at the time)
05:46 < othiym23> yes but I'm comfortable writing this kind of code in OCaml
05:46 < mdedetrich> the epoll/asynchronous IO mechanism was only added a year ago
05:46 < othiym23> and I really don't care which is objectively superior for tha treason
05:46 < mdedetrich> thats cool, I'm not arguing with you regarding that
05:46 < mdedetrich> but your claim that OCaml is faster than Haskell is dubious
05:46 < mdedetrich> at best
05:46 < othiym23> and I think I was just saying that it would be super nice to have typeclasses and monads for what I'm doing in Node right now so whatevs
05:47 < mdedetrich> I'm just saying, you won't get very far throwing statements like ocaml being faster than haskell
05:47 < othiym23> I find a lot of these performance comparisons like to handwave away the time and effort it takes to rewrite your Haskell code to make it super fast
05:47 < mdedetrich> if you are happier with ocaml, thats great, use it
05:47 < mdedetrich> well tbf, unboxed primitives
05:47 < mdedetrich> are just as difficult
05:47 < mdedetrich> in both languages
05:48 < mdedetrich> and the strict annotation is a an extra character before your datatypes
05:48 < mdedetrich> (the ! symbol)
05:48 < mdedetrich> the epoll/asynchronous IO change is automatic, its done by defualt
05:49 < othiym23> for heavy file I/O, I like to be closer to the machine
05:49 < mdedetrich> and Haskell lets you do that.....
05:49 < _Tristan> ok, why does stream.prototype.end == undefined? Why is stream.prototype just {pipe: function} ??
05:49 < othiym23> and OCaml int32 / int64 + jocaml is a really straightfoward way to write concurrent, fast code that doesn't require me to understand what the runtime is doing for me
05:49 < _Tristan> and most importantly, how can I tell an object which inherits from stream to end?
05:50 < othiym23> faster to write fast code
05:50 < mdedetrich> ffs
05:50 < othiym23> _Tristan: streams are more conceptual than code based
05:50 < mdedetrich> haskell also has int32
05:50 < mdedetrich> and int64
05:50 < mdedetrich> and you can just put a !
05:50 < _Tristan> othiym23: I've noticed that
05:50 < mdedetrich> before the god damn data constructor
05:50 < othiym23> ReadableStream + WritableStream are intefaces, not superclasses
05:50 < mdedetrich> and its performance characteristics will mirror that of ocamls
05:51 < _Tristan> othiym23: ok, so I have to make my own end function?
05:51 < mdedetrich> othiym23: http://www.haskell.org/haskellwiki/Performance/Data_types#Unpacking_strict_fields
05:53 < mdedetrich> a lot of the things you are saying are currently not really true....
05:53 < othiym23> mdedetrich: yes, but that's optimization I have to do after the fact
05:53 < mdedetrich> strict
05:53 < mdedetrich> is not an optimization
05:53 < mdedetrich> its a characteristic of the language
05:53 < mdedetrich> datatypes can be strict or lazy
05:54 < mdedetrich> in most languages they are either always strict or strict by default (scala)
05:54 < mdedetrich> in haskell they are lazy by default
05:54 < othiym23> reducing thunk overhead is an optimization
05:54 < mdedetrich> so you just mark your datatypes as strict
05:54 < mdedetrich> and be done with it
05:54 < mdedetrich> yes but strict is not
05:55 < mdedetrich> strict datatypes don't cause thunks, they are evaluated immediately
05:55 < mdedetrich> thats what strict means...
05:55 < othiym23> _Tristan: you got it, the docs page tells you what you need to implement to end up with either a ReadableStream or a WritableStream
05:55 < othiym23> pipe's only job is to connect a readable stream to a writable stream
05:55 < _Tristan> I've done it... I've created YetAnotherAmazingThing.js
05:55 < othiym23> mdedetrich: that's exactly what I'm saying
05:56 < mdedetrich> what, you can't type !?
05:56 < mdedetrich> on your datastructures
05:56 < othiym23> don't be an asshole, dude
05:56 < mdedetrich> Im not sure what your issue is
05:56 < mdedetrich> your making it sound like you have to break an arm and a leg to make your data structures strict in haskell
05:57 < othiym23> I'm saying it is easier for me to write fast, efficient code directly in OCaml than it is in Haskell
05:57 < mdedetrich> I'm saying that claim has little credence :)
05:57 < othiym23> and that I have to spend less time going back and tweaking shit and changing the semantics of my code to get the results I want
05:57 < othiym23> and you're saying that you can read my mind
05:58 < mdedetrich> well you can just make every datatype strict in haskell when you create them
05:58 < mdedetrich> problem solved
05:58 < mdedetrich> no thunks, everything evaluated immediately
05:58 < othiym23> yes, and why would I want to do that when I have an SDK and environment that gives me the semantics I want by default *without me having to do anything*?
05:59 < othiym23> I use both of them, ffs
05:59 < chovy> is there anyway to deal with not well-formed json?
05:59 < mdedetrich> because that haskell program, since it compiles to byte code and is almost completely statically checked, would most likely be faster than your ocaml program
05:59 < othiym23> chovy: not if you want to use JSON.parse
05:59 < mdedetrich> your comment about SDK and environment I don't disagree with
05:59 < mdedetrich> your claim about performance I do
06:00 < othiym23> mdedetrich: static checking is a red herring; both languages are based on Hindley-Milner and both have well-formed type systems
06:00 < othiym23> arguably, OCaml's is more well-founded than Haskell's, depending on how you feel about _|_ in lazy languages (cf. ref. Robert Harper)
06:00 < mdedetrich> in haskell its almost basically completely enforced
06:01 < othiym23> the *only* difference between the type systems is that OCaml has subtyping and allows mutation
06:01 < mdedetrich> yes and that does have performance impacts, although how much really depends
06:01 < othiym23> the operational semantics may be quite different
06:06 < mdedetrich> othiym23: also you may want to have a look at Roy
06:06 < mdedetrich> http://roy.brianmckenna.org/
06:06 < mdedetrich> I wonder if they have implemented type classes yet
06:09 < othiym23> mdedetrich: that's totally cool, although I'm not sure "whitespace significant syntax" is really a feature per se
06:09 < mdedetrich> well it lets you do monads which compiles down to JS
06:09 < mdedetrich> I however don't think Roy will get anywhere until it implements require
06:09 < mdedetrich> once that is done, then it can be combined with node
06:09 < mdedetrich> and in that case it will be really powerful
06:10 < mdedetrich> personally I think whitespace significant syntax as a default is good
06:10 < mdedetrich> and having the option to create your blocks manually if needed
06:10 < chovy> othiym23: ok
06:10 < mdedetrich> like haskell
06:11 < othiym23> chovy: JSON is a pain in the ass that way; it's a really unforgiving format, but I guess most marshalling formats are
06:11 < mdedetrich> you can correct that to every mar shelling format
06:11 < mdedetrich> *marshelling
06:12 < othiym23> mdedetrich: it appears to have "import", which looks like it may be AMD-like, depending on how it's implemented
06:12 < mdedetrich> require is what it needs
06:12 < othiym23> or maybe just using "Crockfor modules" fed in synchronously, which would be less cool but would work better with require
06:13 < othiym23> it depends on whether they're doing real Haskell / SML-style parameterized modules (kinda doubt it)
06:14 < chovy> othiym23: ok. i am looking at an api that occassionally returns bad json
06:15 < mdedetrich> othiym23: I don't think that would really be feasible/possible
06:15 < mdedetrich> in Roy
06:15 < mdedetrich> since it mixes JS with Haskelly type stuff
06:16 < othiym23> chovy: the best way to deal with it is to wrap JSON.parse in a try / catch clause because it's synchronous and then either retry or pass the error back downstream, depending on what makes more sense for your app
06:16 < othiym23> mdedetrich: it's transpiling, so it could do that with the rest of the static bits, but yeah, it would mean in effect inventing some kind of macro system
06:17 < rknLA_> anyone know if it's a mongo or mongoose limitation that prevents me from storing an array of objects that have keys beginning with $?
06:17 < mdedetrich> othiym23: point is, it would be really ugly
06:19 < RLa> rknLA_, probably mongo
06:19 < mdedetrich> rknLA_: use the console and find out
06:19 < rknLA_> ah, good call.
06:19 < othiym23> mdedetrich: the whole thing is pretty ugly! I mean, it's a nifty idea, but it's taking on a whole additional level of pain from something like Iced CoffeeScript
06:20 < othiym23> there's at least one version of an OCaml -> JS compiler out there, and it's got a lot of scary stuff in its guts
06:20 < mdedetrich> oh wow Iced Coffeescript
06:20 < mdedetrich> never knew about that
06:21 < mdedetrich> although I have no idea why you can't just use the async library
06:22 < mdedetrich> eh when you try to mix ideologies like that, you get crazy stuff hapenning
06:22 < mdedetrich> like scala in mixing functional with OO stuff, ended up creating a type system which is turing complete
06:22 < othiym23> ask OK Cupid -- Iced CoffeeScript is a refinement of their Tame.js, which is itself based on some crazy async nonsense they did in C++
06:22 < pyrotechnick> the early bird catches the fattest worm
06:23 < mdedetrich> pyrotechnick: wrong, the early bird catches the frozen worm
06:23 < othiym23> await / defer do make for more straightforward-looking async code, but there are better ways to do flow control
06:23 < pyrotechnick> temperature is orthogonal to mass
06:23 < RLa> early bird gets eaten by cat :)
06:23 < mdedetrich> and so is my assw
06:24 < pyrotechnick> no you
06:24 < othiym23> if only Scala's type system were Turing-complete; restricting it to the JVM's dumbassed type erasure rules just makes it sort of hideous
06:24 < mdedetrich> othiym23: eh, I use async myself
06:24 < simmelj> What's the best practice if I want to have a process regularly fetch data form a server? setInterval? Or is it better to do it with cron? 
06:24 < othiym23> I use callbacks :D
06:24 < RLa> simmelj, there is node-cron!
06:24 < mdedetrich> callbacks get ugly when you have to chain more then 3 of them
06:25 < othiym23> that's when it's refactoring time
06:25 < simmelj> RLa: Thanks, I'll check it out! :)
06:27 < mdedetrich> simmelj: be careful with node-cron when doing horizontal scaling
06:27 < mdedetrich> you will need to do message parsing then
06:28 < simmelj> mdedetrich: Won't be a problem, it's just a small API-client that needs to fetch data every x minute!
06:28 < mdedetrich> yeah node.cron should be fine
06:28 < mdedetrich> you could just use settimout with forever
06:30 < RLa> it would be better if the api worked over websockets and pushed data itself
06:30 < RLa> then you won't need to poll it
06:31 < chovy> what's the best way to delete an item from a mongoose/mongodb collection array?
06:31 < RLa> the best way?
06:31 < RLa> do you have the array loaded?
06:31 < chovy> i'm currently doing list.items = list.items.filter(id){ return String(id) == String(item._id) };
06:31 < chovy> but seems a little ugly
06:32 < chovy> that's just to delete an item out of list.items
06:32 < simmelj> RLa: That would be better, but I have not power over the API.. :/
06:32 < chovy> RLa: yes, i have the array in list.items
06:33 < RLa> i wonder how many api's work over websockets today
06:33 < RLa> it's not rest i guess
06:33 < mdedetrich> you know what would be better
06:33 < mdedetrich> elephants
06:33 < RLa> chovy, then just save the array thought mongoose?
06:33 < simmelj> RLa: They say it's REST, but it's just one giant JSON-blob with all the data :p
06:34 < RLa> i think it would detect itself that an element was removed
06:34 < chovy> RLa: yeah, but am i doing it right? it works, but seems weird to cast them to string
06:34 < chovy> everything else i tried failed
06:35 < SomeoneWeird> try id.toString() == item._id.toString()
06:35 < RLa> chovy, check it out: http://mongoosejs.com/docs/api.html#types_array_MongooseArray-remove
06:36 < chovy> so i just do list.items.remove(id); ?
06:37 < RLa> lookes alike
06:39 < chovy> RLa: worked like a charm. thanks.
06:39 < RLa> mongoose docs are quite good
06:39 < chovy> yea
06:39 < chovy> i didn't see that 
06:39 < RLa> they have bothered to wtfm
06:40 < SomeoneWeird> unlike some people
06:40 < SomeoneWeird> *cough*
06:40 < RLa> true
06:40 < chovy> lol
06:40 < chovy> i saw one today that said "<my lib> Yah!" in the readme.
06:40 < chovy> that was it
06:41 < chovy> i won't even put my blinker on for that one
06:41 < SomeoneWeird> yep
06:41 < SomeoneWeird> quite a lot of packages like that
06:42 < chovy> is there anything like mongoose for mysql?
06:42 < chovy> if i were to do this for my company, would have to use mysql
06:42 < chovy> i'm just using mongoose in a side project to learn node
06:42 < RLa> maybe sequelize
06:46 < chovy> yeah, that looks close to rails 
06:46 < chovy> has migrations
06:47 < chovy> RLa: do you know of a way to check if an id is in a doc array?
06:48 < chovy> list.items.has(id)
06:48 < chovy> something like that
06:49 < chovy> MongooseArray#indexOf(obj)
06:49 < chovy> perhaps that
06:50 < RLa> hm
06:55 < chovy> ok, i think it works, but i'm getting user from session, which is stale
06:55 < chovy> i've updated user. i guess i just resave that user to session in .pre('save') function?
06:56 < RLa> depends
06:56 < RLa> i would keep user id only in session
06:57 < RLa> and reload data on each request when needed
06:57 < chovy> i see
06:58 < RLa> i think there is some mongoose caching plugin too
06:58 < RLa> that would invalidate automatically
07:05 <@Nexxy> mscdex_, 
07:06 < chovy> that indexOf doesn't appear to work
07:06 < chovy> at least not with object ids
07:07 < RLa> i think if anything else fails you could add function to MongooseArray that does what you want
07:08 < RLa> damn, i have bugs on my table
07:16 < sinclair_> RLa: are you ... Ra?
07:17 < chovy> is this valid?
07:17 < chovy> MongooseArray.prototype.indexOf = function indexOf (obj) {
07:17 < chovy> can you use a named function like that?
07:17 < chovy> function indexOf( obj)
07:17 < chovy> instead of just function(obj)
07:18 < RLa> sinclair_, no, i'm RLa :)
07:18 < RLa> i think you can
07:18 < kenokabe> lura
07:19 < RLa> i would not redeclare existing function tho
07:19 < RLa> maybe indexOfById or something like that :)
07:19 < chovy> none of the other functions on that page do that
07:22 < chovy> doesn't make any diff
07:29 < [AD]Turbo> hola
07:31 < SomeoneWeird> allo
07:33 < dch> halo
07:52 < mdedetrich> does anyone know if there is a library for creating error message tags
07:52 < mdedetrich> like what is done for validity
07:53 < mdedetrich> http://validity.thatscaptaintoyou.com/
07:53 < mdedetrich> except without all of the validity business logic (which I have implemented myself)
07:53 < chovy> mdedetrich: i use express-validator
07:53 < chovy> and i implement my own error displays in javascript.
07:54 < mdedetrich> chovy: oh, this is strictly a UI question
07:54 < chovy> i just save the error stack to <script><%= errors %></script>
07:54 < SomeoneWeird> maybe ask in #css or something
07:56 < chovy> mdedetrich: something like this? https://gist.github.com/1981118ab15c78000ec0
07:56 < chovy> or are you just asking how to style it
07:56 < mdedetrich> well I'm doing floating error tags
08:23 < andreibgodan> does anyone received message TypeError: Object #<Object> has no method 'createConnection' with mysql@2.0.0-alpha3
08:33 < pixie79> hi all, I have been set a challange to replace out current perl/poe daemon with a node process to improve performace and i would love a few ideas on where to start. I think probably before i worry about the daemon part i just need to create a node module to talk to it. Basically what happens is the dameon listens on one port for connections, people telnet to it and send a list of commands followed by 'END' this is then sent to the application we are 
08:51 <@Nexxy> pixie79, your message cut off after 'sent to the application we are'...
08:57 < pixie79> arh
08:57 < pixie79> interfacing with and the results  returned. our daemon in the background launches a connection to the dameon and creates two fifo's connecting stdin for the  application to one and stdout to the other. 
08:57 < pixie79> i have seen i can probably make use of cluster for the daemon part but am  unsure of where to start or what is best to create the connection to our app
08:58 < DreamWork> good morning
09:05 < chovy> if you change your user object, you need to destroy all your sessions.
09:05 < chovy> is there a way around this?
09:05 < chovy> items.list is not defined until i logout and log back in.
09:06 < chovy> i guess i shouldn't be storing user object in session, only user id.
09:06 < chovy> otherwise i have to keep updating it in session.
09:09 < Oddman> chovy, I mentioned that to you last week
09:09 < Oddman> :P
09:09 < chovy> Oddman: ?
09:10 < Oddman> only store the id
09:10 < chovy> sorry i don't remember what you said
09:10 < chovy> k
09:10 < Oddman> it's generally a bad practise to store more than you need in the session
09:10 < chovy> Oddman: do you create a helper method like getUser( req.session.userid ); that you can use all over the place?
09:11 < Oddman> depends on your context, but in most apps I'd write some middleware that fetches it for me if the user is logged in
09:11 < chovy> i'm thinking a middleware getLoggedInUser which sets res.locals.user
09:11 < Oddman> yup, exactly
09:12 < chovy> if i put it in res.locals it'll be available everywhere?
09:12 < Oddman> it's either res.locals or app.locals
09:13 < Oddman> can't remember
09:13 < Oddman> one of them makes it available everywhere
09:13 < chovy> in middleware it's res
09:13 < chovy> yeah
09:13 < chovy> app.locals is if you do it in app.js
09:13 < chovy> where you have 'app' object
09:13 < Oddman> ah yes
09:13 < chovy> same thing though
09:13 < chovy> one more thing...
09:13 < Oddman> shoot, I'll try and help
09:14 < chovy> i want to set a temporary attribute on a user object, user.logged_in 
09:14 < chovy> it won't be stored in db anywhere, i don't think...not sure how to do this.
09:14 < chovy> because i may call .save() on it at some point
09:15 < Oddman> using mongo right?
09:15 < chovy> yea
09:15 < Oddman> you can always set a virtual attribute
09:15 < Oddman> otherwise create a separate object for that
09:17 < chovy> seems reasonable, except how do i get access to req object for a virtual attribute in the schema?
09:17 < chovy> should i just pass it in? user.logged_in(req);
09:18 < chovy> logged_in would just check req.session.userid
09:18 < chovy> and return true or false
09:22 < _br_> Do you guys know how to do a node --prof with javascript code which was created to run in a browser (uses jQuery, RaphaelJS, reference to globals from browser (window, document, etc.)) ?
09:24 < guor> just run it in chrome and get the profile there?
09:24 < guor> node doesn't have DOM afaik
09:46 < pixie79> is the no module to mkfifo ? I have worked out my app needs to create two fifos, and export these as env variables, then start the application i need to run, it will connect its stdin/out one to each. Then i send my data to the stdin fifo of the program and get the response back on the stdout, after which the program closes and the fifos can be removed
10:12 < pixie79> ok, i have found readFile reads my fifo ok, but to write i guess i need stream, but i dont see how do i tell stream what my fifo is called to listen to
10:13 < pixie79> stream.end('test is some text\n', 'utf8); will do i think for sending the data
10:13 < pixie79> i just dont see how to tell it stream is fifo /tmp/fifo-in
10:26 < pixie79> is createWriteStream a file or a fifo, can it be made a fifo?
10:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:29 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
10:46 < izepstan2> http://pastebin.com/hR8hqmPJ
10:46 < izepstan2> these kinds of errors aren't very informative, aren't they?
10:56 < manuelbieh> hey guys
10:56 < manuelbieh> i'm trying to create a file upload with express
10:56 < manuelbieh> but my req.files object is always undefined
10:56 < manuelbieh> any idea why?
10:57 < manuelbieh> i copy and pasted the code from the example here
10:57 < manuelbieh> http://www.hacksparrow.com/handle-file-uploads-in-express-node-js.html
10:57 < SomeoneWeird> try req.body.files
10:57 < manuelbieh> console.log(req.body) is:
10:57 < manuelbieh> { image: 'singlepic.jpg' }
10:58 < _br_> 5~
10:58 < SomeoneWeird> weird
10:58 < _br_> guor: Thanks, I'll try. The last time I ran Firefox 15 with Firebug profiler and that thing ended up crashing horribly with no other open tabs -.- 
10:59 < _br_> Was hoping to using D8 or node --prof directly on that thing without the slowness of the whole browser...
11:00 < guor> well if you use the DOM, there is no way around actually using the DOM, right? :)
11:01 < manuelbieh> yes. weird
11:03 < _br_> guor: True... ;) Thanks for your feedback!
11:04 < guor> np :)
11:12 < manuelbieh> i have absolutely no idea why req.files is empty.
11:12 < manuelbieh> damn
11:14 < benDos> With spawn is it possible to use command line args with quotes?
11:15 < SomeoneWeird> maybe bodyparser doesn't do files anymore or something manuelbieh 
11:15 < SomeoneWeird> benDos, i don't see why not
11:15 < benDos> SomeoneWeird, well it keeps escaping them
11:18 < benDos> This seems like it can't be that rare an issue :/
11:19 < SomeoneWeird> how are you spawning it?
11:19 < benDos> var p = spawn("qalc",["-t", "-set", "\'PRECISION 30\'", maths],{ stdio: "pipe" });
11:20 < benDos> Every variation of those args I've tried has resulted in node escaping the argument, and breaking it
11:20 < SomeoneWeird> why add \?
11:20 < benDos> If i take it away, it escapes it away
11:20 < benDos> Same issue
11:21 < benDos> SomeoneWeird, var p = spawn("qalc",["-t", "-set", "'PRECISION 30'", maths],{ stdio: "pipe" });
11:21 < benDos> Same thing
11:22 < benDos> Now I could use exec
11:22 < benDos> But then I'd have to whitelist my input which for qalc is really really hard
11:22 < benDos> cause their grammar is quite complicated and as far as i know not something I could even validate with regexp
11:22 < SomeoneWeird> have you tried switching the quotes?
11:23 < benDos> Yup, tried single and double
11:23 < benDos> Not escaped, single escaped, double escaped
11:23 < SomeoneWeird> weird
11:23 < benDos> The shell args get escaped and there doesn't seem to be anything I can do when I actually do know better
11:24 < benDos> http://stackoverflow.com/questions/12310468/node-js-child-process-issue-with-args-quotes-issue-ffmpeg-issue seems similar
11:24 < benDos> But no longer works
11:24 < benDos> Or doesn't work on linux
11:24 < SomeoneWeird> yeah i saw that
11:25 < benDos> I really have looked into it
11:25 < benDos> I just want a switch on spawn when I know better, please don't escape these args :/
11:25 < benDos> Or maybe there's some other way i can't figure out having been awake half an hour
11:27 < benDos> SomeoneWeird, think it's worth my time opening an issue on github?
11:27 < manuelbieh> SomeoneWeird obviously the problem is, that i was using windows
11:27 < manuelbieh> running the same script on ubuntu now and it seem to work without problems
11:28 < SomeoneWeird> may as well benDos, they can just close it if theres a solution :)
11:29 < benDos> SomeoneWeird, I mean there isn't some obvious solution I'm just over looking that you see aye?
11:29 < SomeoneWeird> nope
11:29 < SomeoneWeird> no idea why it's happening
11:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:36 < benDos> SomeoneWeird, finally got it
11:36 < benDos> That is the most unintuitive  node api I've come across yet
11:36 < benDos> var p = spawn("qalc",["-t", "-set", "PRECISION\ 30", maths],{ stdio: "pipe" });
11:37 < benDos> Finally got it working, I assume spawn uses sh on linux maybe
11:37 < SomeoneWeird> ah
11:37 < SomeoneWeird> well, least its working
11:40 < benDos> Yup thanks
11:40 < syskk> hey would be nice to have some feedback on a library i just published (controllers for express/connect): https://github.com/olalonde/chungking (inb4: dont use controllers)
11:40 < dileep> hello
11:40 < dileep> any node.js  developer here
11:41 < SomeoneWeird> lots
11:41 < syskk> dileep: 836
11:41 < benDos> Lol
11:41 < syskk> :)
11:41 < dileep> i have some probllem in code
11:41 < SomeoneWeird> show us the code
11:42 < dileep> when i am loading that code and run by node,shows mmme error of     listen EADDRINUSE     at errnoException (net.js:769:11)     at Server._listen2 (net.js:909:14)     at listen (net.js:936:10)     at Server.listen (net.js:985:5)     at Object.<anonymous> (/home/dileep/chat.js/chat.js:49:4)     at Module._compile (module.js:449:26)     at Object.Module._extensions..js (module.js:467:10)     at Module.load (module.js:356:32)     at Fu
11:42 < syskk> inb4, trying to return from an async function
11:43 < syskk> dileep: probably you still have a process running
11:43 < dileep> the code is here     https://gist.github.com/5151ec2f5d79ce74a68a
11:43 < SomeoneWeird> another process is using that port
11:43 < AAA_awright> dileep: Use a different port or figure out which process is already listening on that port.
11:43 < syskk> dileep: it usually means the port is taken. if the port is below 1024 you need to run with sudo. sudo node app.js
11:43 < SomeoneWeird> you'll have to choose another one, or stop the program
11:43 < SomeoneWeird> syskk, normally you'll get a different err if you don't have perms to bind to it :)
11:44 < syskk> SomeoneWeird: ah, never noticed :|
11:44 < dileep> wat
11:44 < SomeoneWeird> do you have another program listening on port 8080 or 4000?
11:44 < syskk> I recall 8080 is default port for node-inspector.. are you using that?
11:45 < dileep> noops i am working onn8000
11:45 < syskk> try `killall node`
11:45 < syskk> or something like that
11:45 < dileep> and when i press like node chat.js then the following error comes
11:46 < SomeoneWeird> run lsof -i :8080
11:46 < SomeoneWeird> and show us the output
11:47 < dileep> now this error comes module.js:340     throw err;           ^ Error: Cannot find module '/home/dileep/chat.js'     at Function.Module._resolveFilename (module.js:338:15)     at Function.Module._load (module.js:280:25)     at Module.runMain (module.js:492:10)     at process.startup.processNextTick.process._tickCallback (node.js:244:9) 
11:47 < SomeoneWeird> can you please run the command I told you to?
11:48 < dileep> yeah after running thatt command i got this error module.js:340     throw err;           ^ Error: Cannot find module '/home/dileep/chat.js'     at Function.Module._resolveFilename (module.js:338:15)     at Function.Module._load (module.js:280:25)     at Module.runMain (module.js:492:10)     at process.startup.processNextTick.process._tickCallback (node.js:244:9) 
11:48 < SomeoneWeird> the command has nothing todo with node
11:49 < SomeoneWeird> does it give you any output?
11:49 < dileep> no the error
11:49 < SomeoneWeird> omg.
11:50 < dileep> watt happened SomeoneWeird
11:50 < SomeoneWeird> please learn how to use linux :)
11:55 < dileep> hello someone
11:56 < dileep> please help me to configure it out
11:56 < SomeoneWeird> please learn how to use linux :)
11:56 < benDos> dileep, is this a paying gig?
11:57 < benDos> If so I'd be happy to help in 2 or 3 hours i'm about to head out for a meeting though
11:57 < dileep> yeah ofcourse but tell me ma mistake aleast
11:57 < dileep> plz
11:58 < benDos> Without going through the scrollback it sounds like your mistake is not reading the manual....
11:58 < benDos> Just a guess
11:58 < dileep> what ur r talking aboyt
11:58 < SomeoneWeird> you need to learn the very basics of the system you're coding on, at least
11:58 < dileep> i am here to get some helpp
11:59 < benDos> dileep, have you used the info pages on linux yet?
11:59 < benDos> That is one of the better places to start
11:59 < benDos> But i gotta run
11:59 < dileep> ok
11:59 < dileep> bendos,what is that
12:00 < SomeoneWeird> http://linux.about.com/od/linux101/Linux_101.htm
12:01 < dileep> someone,any pdf u have
12:01 < SomeoneWeird> go find one yourself
12:01 < SomeoneWeird> google "how to use linux"
12:02 < dileep> :)
12:03 < dileep> hey u all are gud programmers and m d new one in this category so i need a kind of help dats only thng...u have the experience dat i need
12:06 < dileep> someone,can i have ur email plz if u dnt mind else i have to found u in community again
12:14 < sente> yo waddup dileep
12:15 < dileep> sente, i have some code problem and ask for help but all making fun
12:16 < sente> ya word
12:16 < sente> also, okay
12:16 < sente> you can email me a sentegotestu@gmail.com
12:16 < sente> but i'm not what you'd call a node.js expert
12:17  * sente scrolls up and sees you actually spoke reasonably, earlier
12:20 < SomeoneWeird> dileep, we're not making fun of you, we're trying to help
12:20 < SomeoneWeird> if you don't know the basics of linux you're going to have a really hard time coding on it
12:20 <@mbalho> dileep: i would recommend you check out some of the introduction to node.js materials out there
12:23 < NuZZ> so much node so little time
12:24 < sente> dileep: i would recommend you join #nodejitsu, also.  They are very helpful in that channel
12:25 < sente> i say this without reading whatever your problem was  
12:27 < SomeoneWeird> sente, his problem isn't with node, it's with linux
12:27 < SomeoneWeird> thats why i've been telling him to try and learn the basics
12:27 < dileep> sorry to all if i hurt somebody,else i ask only for error let tell me atleas once wat the problm is
12:28 < sente> ah
12:30 < syskk> if you return a function from a method, will 'this' be part of the closure?
12:30 < syskk> will it keep being accessible from the return function
12:33 < SomeoneWeird> 'this' will be redefined for the closure, afaik
12:33 < dileep> hey sorry someone u r helping me and i take it in wrong way
12:35 < syskk> SomeoneWeird: guess i could do A.prototype.somehing = function() {var self = this; return function() { console.log(self); } This should work right?
12:36 < SomeoneWeird> should
12:37 < aandy> syskk: http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/
12:37 < aandy> read the myth, especially myth 2
12:39 < syskk> aandy: thanks. but that's what i want to achieve. i want all my returned functions to have access to the same self object
12:44 < aandy> what you wrote should work, except you probably don't want self = this, but self = some_common_object
12:45 < aandy> this will (depending on your call context) be for the instance, not the prototype
12:45 < aandy> "this"*
12:55 < manuelbieh> is there a way to compile jade templates via command line?
12:56 < manuelbieh> i dont have any variables in my template, i just want the structure i have to be compiled to html
13:04 < rounce^work> yep
13:04 < rounce^work> https://github.com/visionmedia/jade#a17
13:16 < cebor> is there a cmd to update all my npm packages ?
13:17 < SomeoneWeird> npm update?
13:20 < AvianFlu> npm update -g for the global ones, most likely
13:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:28 < cebor> kk thx
13:29 < garrettwilkin> who's 'going' to nodestack?
13:30 <@mbalho> @enterprisestack is i think
13:48 < Salvatore> ciao
13:48 < Salvatore> !list
13:51 < therealkoopa> Is there a recommended place to write/read sockets? For instance, with cluster-master, tweak the socket location with the process.env.CLUSTER_MASTER_REPL to a specific location. Or is it best oto just keep it in the default directory/
14:11 < therealkoopa> Also, does a cluster master worker have to be some sort of server, or do something specific? My workers just listen for jobs, so I never see cluster master write the scoket file
14:12 < superjoe> given a process id, is there a way to get a callback when the process terminates?
14:13 < superjoe> I'm doing process.kill to another process, and I want a callback when the other process terminates
14:29 < therealkoopa> Oh, it looks like each worker needs to be a tcp server of some sort.
14:29 < pixie79> when using spawn how do i continue working in the parent, i need the child to spawn, it will then wait for input via a fifo from the parent: so far i have https://gist.github.com/3905806
14:30 < pixie79> which correctly created the fifo's and starts the child, but if i send data to the input it never reads the output fifo
14:30 < pixie79> if i just run the output proc without the spawn all is ok
14:31 < pixie79> but there is no point connecting the output if the child does not start
14:58 < pixie79> is there a when clause? when file exists do x ?
14:59 < timeturner> if(file) // do something
14:59 < timeturner> that's the when clause
15:09 < therealkoopa> I can get cluster working if my worker processes are a net.createServer. Is this absolutely necessary? 
15:11 < rudix> Hello, in sockets.io is it bad idea to use new connect function every time I need to emit new information from the server?
15:14 < rudix>  socket.on('connect', function ()   
15:14 < rudix> Like this
15:19 < jme128> looking for a remote part time node developer (located in US) for a company in P2P marketplace. equity + stipend for position. PM for details
15:21 < rudix> Jme128 I am from Bulgaria, still interested
15:26 < shoshy> hey, im trying to read into array a big file ~240MB, about 1.6 records, ive tried using "line-reader" which i always work with and it hangs and now i've switched to node-byline which seems to hang as well... (ruuning for a lot of time). I've been testing it on a machine with 16GB ram. Any ideas? 
15:29 < CoverSlide> shoshy: perhaps the file has only one line
15:29 < CoverSlide> or just a few very long lines
15:30 < CoverSlide> what format is the file in?
15:30 < shoshy> nope, it has many lines...
15:30 < shoshy> ive generated it.. and it works with small amount of records
15:30 < CoverSlide> how long is the longest line?
15:30 < shoshy> up to 1M
15:30 <@mbalho> what is M
15:30 < shoshy> 1 million
15:30 < shoshy> $ :)
15:30 <@mbalho> hah
15:30 < shoshy> when i try 1.2 it hangs...
15:31 < CoverSlide> you can write your own per-line streaming thing easy enough
15:31 < shoshy> CoverSlide: longest line? haven't checked that...
15:31 < CoverSlide> but if you have a hang it's probably because it's hit a very long line
15:31 <@mbalho> shoshy: why do you need the whole thing in memory?
15:31 < shoshy> its for memory usage :)
15:32 < shoshy> thats its purpose.. to be in memory...
15:32 < shoshy> CoverSlide: hangs for infinity... :)
15:33 <@mbalho> shoshy: usually node programs stream things, e.g. process data in chunks. why are you reading all 240mb at once?
15:33 < shoshy> i dont.. im reading line-by-line
15:34 < shoshy> as i said: "ive tried using "line-reader" which i always work with and it hangs and now i've switched to node-byline "
15:36 < shoshy> while readinng, i've adding the line (its a JSON object) to an array
15:36 <@mbalho> yea youre buffering it all in memory
15:36 < shoshy> "forgot" to mention this..
15:36 < shoshy> well, i need it to reside in-memory.. what other reading options do i have?
15:36 < shoshy> it works as a stream..
15:37 <@mbalho> the point of streams if you can process a chunk and throw it away then move on to the next chunk
15:37 < shoshy> but thats what node-byline does
15:37 <@mbalho> you might also have somethign that is using up more memory than it should
15:37 < shoshy> for me
15:37 <@mbalho> can you post your code?
15:37 < shoshy> sure..
15:37 < shoshy> hold-on :)
15:39 < shoshy> mbalho: http://pastebin.com/d3jY26iH
15:39 < shoshy> using node-byline
15:44 <@mbalho> shoshy: if you delete lines 7-21 does it still hang?
15:45 < zane> FWIW... just put a bounty on this StackOverflow node question that I've been struggling with for about a week now... http://stackoverflow.com/questions/12886438/node-js-app-slowing-down-becoming-unresponsive-over-time
15:45 < shoshy> but line 7 is responsible for reading each line...
15:45 < shoshy> also, i didn't say its not reading, i said it hangs after ~1M records
15:46 <@mbalho> shoshy: i know, deleting 7-21 will tell you if your code is causing a memory leak or not
15:46 < shoshy> ok...  sec
15:46 <@mbalho> shoshy: 7 doesnt read the data it just does things with the data
15:46 <@mbalho> shoshy: line 5 causes the data to get read
15:47 < shoshy> yep, didn't hang
15:48 < shoshy> quesion is how do i acheive what im doing there without causing a memory leak ?
15:48 <@mbalho> zane: http://blog.nodejs.org/2012/04/25/profiling-node-js/
15:49 < zane> @mbalho I'm already using nodetime and have attempted to correlate against spikes, as explained in the post, but I'll try using this performance tool instead...
15:50 <@mbalho> shoshy: what are you doing with the data after you have it all in an array?
15:51 < shoshy> use it to feed a data structure... and test several things. I need it for high speed concurrent tasks
15:52 < tnorris> zane: shot in the dark, but have you checked the number of open connections to your server? when I load test, I run into a problem where it seems that connections are left and linux runs out of open slots to create connections.
15:52 < stiang> Iâ€™m a little confused about how to go about something in node. I have an array of variable size that contains a number of strings. For each string I need to check whether redis returns a value for that key, and then call another function with the value in the redis callback if it does. How does one do looping/breaking with callbacks?
15:52 < tnorris> it usually happens when I run like 10 million hits with `ab` with concurrency of 1000 or more.
15:52 <@mbalho> shoshy: i think what is happening is nodes heap (which is smaller than your systems available RAM) is filling up because you are creating a gigantic array
15:52 < stiang> So I need to stop checking as soon as redis returns a match.
15:53 <@mbalho> shoshy: you might use something like redis to store the data in memory, its much better at those types of problems than javascript
15:53 < shoshy> i'm actually feeding that array to a kd-tree
15:53 < shoshy> but the kd-tree asks for an array
15:53 < shoshy> so.. 
15:53 < zane> tnorris: that's a good idea, in fact it makes sense, I have a RESTful API call which can take up to 20sec to run (I know, awful, but true). What would you recommend for testing # of open connections, and if that's the problem, what would you suggest?
15:54 <@mbalho> shoshy: call this every once in a while during your program to see hwo much memory is left in nodes heap http://nodejs.org/api/process.html#process_process_memoryusage
15:54 < shoshy> but also, why wouldn't it work on a 16GB ram box? on a 8GB  ok.. 
15:54 <@mbalho> shoshy: as i said earlier, node doesnt have access to all of the ram on your machine. it isnt designed for using lots of memory. the only thing that it can do is put Buffers in your system memory, but all other js objects are stored in a much smaller heap
15:55 < tnorris> zane: well, for testing I'd do something like `ab -c 1000000 -n 100 <url-here>`. I think I remember a discussion about how to resolve this issue. I'll try to find it.
15:55 < shoshy> mbalho: can i tell it to increase the heap size? and you mean to use setInterval inside that line-reading ?
15:56 <@mbalho> shoshy: yea that would work
15:56 <@mbalho> shoshy: you can increase the v8 heap size but not infinitely. i forget how
15:58 < tnorris> zane: may want to check this out: http://nodejs.org/api/http.html#http_class_http_agent
15:58 < shoshy> mbalho: ok, in the meanwhile ive ran with a 10s interval.. lets see
15:59 < jocafa> *sigh* i wish i was doing more stuff with node
15:59 < tnorris> zane: try some reporting on the number of `agent.sockets`, you may have to increase `maxSockets`
15:59 < zane> tnorris: yeah I've read that doc many times, but that doesn't mean I understand it perfectly. I've increased my maxSockets, but haven't made any other specific changes
16:00 < zane> tnorris: reporting the # of sockets isn't a bad idea, but I'm not sure if it would help given that I've already put maxSockets at 9999
16:01 < tnorris> zane: whoa, ok. well, if you're only doing 2-3 connections per sec then you shouldn't be getting close to that.
16:02 < tnorris> zane: so try reporting the number of sockets every few seconds, and see if the connection pool clears up. if it doesn't then i'm willing to bet that's your problem.
16:02 < Protected> If I have a for loop creating a number of resources will callbacks, and knowing that the creation of every resource only ends after the last iteration of the for cycle, how can I pass iteration-dependent data into the callback?
16:02 < zane> tnorris: 2-3 connections per sec? Definitely more than that. There are about 1k users using my API, which is implemented on 2 cloud servers, each user connects to the API about every 60 sec on average
16:03 < tnorris> zane: um... sorry. must have been reading something else at the same time and crossed it up. nm that. but i'd still try the later advice.
16:04 < tnorris> (just got into work, and caffeine hasn't kicked in yet)
16:05 < mscdex> Protected: one way is to wrap the function inside the loop that's creating the resource, in a closure and pass the relevant variables in
16:05 < zane> tnorris: checking...
16:06 < tnorris> zane: oh, mother. what is the memory usage of your node app when it starts running slowly?
16:06 < zane> tnorris: heap < 150Mb, Memory ~= 1Gb, Free Memory ~= 6Gb
16:07 < tnorris> zane: ok, I think I might know what it is. when v8 reaches 1GB levels, the gc starts being super aggressive and killing performance. I hit that all the time.
16:07 <@mbalho> tnorris: his heap is only at 150mb though
16:08 < zane> tnorris: yeah, heap is only 150Mb
16:09 < zane> Also, if you look at the post, I've played with the v8 GC a _lot_
16:09 < zane> I've done everything from --nouse-idle-notifications to manually implementing the gc() myself etc.
16:09 <@mbalho> lol
16:09 < zane> yeah, no fun.
16:09 < tnorris> zane: have your run your app with `--trace-gc`? it will give you detailed output about what gc is happening.
16:09 < zane> tnorris: yes, I have
16:10 < tnorris> heh, ok. drop that one.
16:10 < shoshy> mbalho: here's a snippet: { rss: 1614512128, heapTotal: 1596463512, heapUsed: 1508614688 } , now its already { rss: 1636253696, heapTotal: 1622261912, heapUsed: 1528472288 }
16:10 < tnorris> zane: any luck with the maxSockets suggestion?
16:10 < zane> yeah... I mean, it still might be part of the issue, but I killed several days on v8 / gc related stuff and got nowhenre
16:11 <@mbalho> shoshy: yea it looks like you are maxing out the v8 heap
16:12 < zane> hmm... in my attempts to print out the sockets, I'm console.log()ing the http.globalAgent.sockets when a connection comes in... is there a better way?
16:13 <@mbalho> shoshy: so you have some options. incrase the heap size in v8 (temporary solution), store your data as Buffers instead of strings, use redis, or write your program in a way that doesnt require the whole thign to be in memory
16:14 < tnorris> zane: i was thinking you would create a counter, and enumerate/increment for the number of sockets in the object.
16:14 < shoshy> mbalho: i've found: http://blog.caustik.com/2012/04/11/escape-the-1-4gb-v8-heap-limit-in-node-js/ , but its beyond my scope to compile V8 with the code-changes (he shows some command-line parameters as well but i think they are for something else)
16:14 < shoshy> mbalho: what is the temporary solution to increase?
16:15 <@mbalho> i dont remember but i think you can run node with a special command line flag or soemthing
16:15 < shoshy> is it â€“max-old-space-size=8192 ?
16:15 < zane> here's what I came up with: http://pastebin.com/pnhpxV5g
16:15 < tnorris> zane: have you have 'connection:keep-alive' set?
16:16 < shoshy> mbalho: btw, here, it just gave up: { rss: 1731371008, heapTotal: 1725512808, heapUsed: 1614545008 }
16:16 < shoshy> FATAL ERROR: JS Allocation failed - process out of memory
16:16 < _pid> fyi http://nodestack.org/ Â node online!! conference - Join ;-)
16:16 < zane> tnorris: not explicitly, but I believe HTTP does it automatically, no?
16:17 < zane> shoshy: out of curiosity, how are you printing your heap size?
16:17 < shoshy> zane: var util = require('util');setInterval(function(){var obj = util.inspect(process.memoryUsage());console.log(obj);},10 * 1000);
16:17 < tnorris> zane: yeah, so maybe try setting that to false. it could clear up the connection pool, if that's the problem. (http://nodejs.org/api/http.html#http_http_request_options_callback)
16:18 < shoshy> zane: credit goes tombalho
16:18 < shoshy> *goes to mbalho
16:19 < syskk> is there any connect/express middleware to package/minify assets (javascripts/css)
16:19 < zane> shoshy: cool :) I use nodetime for heap snapshots btw, very useful
16:19 < Protected> Thank you, mscdex
16:20 < shoshy> zane: yea, i know nodetime , had trouble with it not reporting in the past... 
16:20 < zane> shoshy: I had the same problem. Their support is excellent and cleared it up within an hour.
16:20 < zane> tnorris: hmm, is there a way to set keep alive to false on a global scope?
16:23 < zane> tnorris: also, I'm already setting the connection to "close" when doing OUTBOUND requests (eg, to Facebook). You're talking about inbound, though, right?
16:24 < tnorris> zane: yeah. sometimes the connection will remain open even after the content is transfered so if the client wants more data, it doesn't need to renegotiate a connection.
16:25 < zane> tnorris: okay, any clue how to set that for the incoming connections? Maybe I'm not understanding the docs
16:25 < zane> tnorris: or does in need to be set by the client making the connection?
16:26 < tnorris> zane: it's part of the message header. so set it the same place you would set content-type
16:26 < zane> tnorris: also, FWIW, the output from my socket log looks like this (interestingly, it doesn't seem to show incoming connections, only outbound to APIs): SOCKETS: {} { 'graph.facebook.com:443': 5, 'api.instagram.com:443': 1 }
16:26 < zane> tnorris: right, I get that, but does it need to be done by the client (eg, the JS)? I'm unclear how I would do it server-side, if possible
16:27 < zane> Eg, I know how to do it client-side, just set a header and viola
16:28 < drudge> isaacs: any idea why trying to run my script with nave use 0.4.12 ./server.js would lead to /bin/bash: ./server.js: Permission denied failed with code=126
16:28 < tnorris> zane: you pass a function [requestListener] like so: `http.createServer(function(req, res) {` then do this: `res.writeHead(200, {'connection' : 'false'})`
16:29 < zane> oh, fascinating, I didn't realize that putting a res.writeHead at the beginning (instead of when finally outputting the JSON) would have an impact
16:29 < CoverSlide> drudge: are you trying to listen on a port < 1024, and not running sudo?
16:30 < drudge> nope, port 2111
16:30 < Industrial> Can't view the NodeStack conference video :(( (nodestack.org)
16:30 < Industrial> Sorry! we can't play this video due to content limitations (free translation ..))
16:31 < Industrial> Anyone else get something along these lines
16:31 < CoverSlide> are you sure your file permissions are all kosher?
16:31 < tnorris> zane: yeah, and http.Agent is only for outgoing requests. so realized that wouldn't affect the pool of incoming connections.
16:31 < drudge> yeah the script runs fine outside of nave
16:31 < CoverSlide> can you rune node within nave?
16:31 < zane> tnorris: yeah, figured that was the case -- any way I can print the incoming? or is it even worthwhile, now?
16:32 < drudge> CoverSlide: it says Already installed: 0.4.12 using 0.4.12 and then exits
16:35 < SoulRaven> hello
16:35 < syskk_> npm keeps hanging up on me :(
16:36 < SoulRaven> i have a question regarding socket.write
16:36 < tnorris> zane: sorry, my bad. change `{'connection' : 'false'}` to `{'agent' : false}`
16:36 < zane> no quotes around agent, correct?
16:36 < MI6> joyent/node: piscisaureus created branch upgrade-uv - http://git.io/KHqn2w
16:36 < tnorris> zane: doen't matter.
16:36 < SoulRaven> in docs, says that return true when the write is ok and when buffer is empty emit drain
16:36 < zane> kk
16:36 < SoulRaven> but what happends when the socket is not existent or invalid
16:37 < SoulRaven> socket.write trow error or something?
16:38 < SoulRaven> anyone?
16:38 < syskk> damn, npm keeps stalling :(
16:38 < pyrotechnick> SoulRaven: did you read the docs?
16:38 < SoulRaven> pyrotechnick: Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is again free.
16:38 < pyrotechnick> and does it
16:39 < SoulRaven> but is not say nothing, when the socket is invalid or inexistent
16:39 < pyrotechnick> and no write won't throw anything
16:40 < SoulRaven> so return false when socket is invalid
16:40 < pyrotechnick> that's not what it says
16:41 < pyrotechnick> Event: 'close'
16:41 < pyrotechnick> it will emit a 'close' if it closes, not sure there's anyway to find that out on a write
16:42 < pyrotechnick> you'll have to keep track of the state outside your writes
16:42 < SoulRaven> :(
16:42 < pyrotechnick> it's better this way
16:42 < tnorris> zane: ok, nevermind the res.writeHead thing. don't think that will help. give me another few. you are definitely not the first with this problem.
16:43 < zane> tnorris: thanks for being so helpful, mate. I'm going to put this question up on StackOverflow, just to get some more voices, and hopefully get you some rep ;)
16:43 < pyrotechnick> if you can already know the socket died or otherwise closed you shouldn't be trying to write to it
16:44 < SoulRaven> for the moment i use this: http://jsfiddle.net/2DGEs/
16:44 < SoulRaven> but i want something more elegant
16:44 < tnorris> zane: heh, thanks. i'm interested since I might run into this problem shortly on a new service i'm launching.
16:44 < zane> tnorrisah :) If you're curious, you can see the API 
16:44 < zane> ;haha, oops
16:45 < zane> tnorris: if you're curious, you can see the API in action @ https://Streamified.me
16:45 < pyrotechnick> SoulRaven: form follows function
16:45 < zane> tnorris: the long-lived API call is the "stream update" API call, which is updating the user's timeline from many services at once, eg, connecting to FB Twitter etc.
16:45 < tnorris> zane: awesome, thanks. always like to see how other people do things.
16:45 < SoulRaven> pyrotechnick: ??
16:47 < syskk> god damn it, im in china and cant go on ustream for that conference :(
16:48 < zane> tnorris: http://stackoverflow.com/questions/12939253/node-js-app-that-has-api-endpoints-which-take-20sec-to-execute-thus-leaves-co
16:54 < zane> tnorris: just a shot in the dark... but if maxSockets on the globalAgent applies only to outbound connections, could it hypothetically limit the # of inbound?
16:55 < CoverSlide> globalAgent is only for outbound http requests
16:55 < CoverSlide> inbound limit i think depends on ulimit
16:55 < tnorris> zane: not for sure what you're referring to by "it", but yeah. I do think there could be a problem with your inbound connection pool.
16:56 < zane> CoverSlide: oooo that sounds promising. Can that be tweaked via node, or does it have to be done via command line?
16:56 < tnorris> CoverSlide: you're correct. I had to fix that for an app recently.
16:56 < CoverSlide> zane: are you on linux?
16:57 < zane> CoverSlide: yes, CentOS 5.2
16:58 < tnorris> zane: here's a file to remind me how to increase number of open files: https://github.com/trevnorris/norrd/tree/master/conf
16:58 < CoverSlide> zane: edit /etc/security/limits.conf 
16:58 < CoverSlide> oh there we go
16:59 < therealkoopa> I am using cluster master, and I see the socket. I'd like to stream something into that socket to find out how manyw orkers are up. I guess i need to create a readable stream, and then emit data to it with the command 'workers'. Does that sound right?
16:59  * konobi waves from dublin
17:00 < zane> tnorris: hmm, I can't really "restart" given that I'm on an Amazon Cloud instance...
17:00 < tnorris> zane: sure. if you run `sudo shutdown -r now`, you'll restart immediatly with the same IP. do it all the time on my EC2 instance.
17:01 < tnorris> but I would like to find how to reload limit.conf w/o restarting though. never been able to figure out how.
17:02 < CoverSlide> well limits.conf changes whenever the user logs in
17:02 < zane> tnorris: oh... odd. haha ok. So I need all of these changes, then? Any tweaks to any of the values, or should they all be "good"? Seems a lot of changes haha and I'm not sure on what exactly each does
17:02 < CoverSlide> or maybe with ssh you can restart sshd
17:02 < CoverSlide> zane: tnorris: http://lists.centos.org/pipermail/centos/2009-July/079128.html
17:03 < tnorris> zane: sysctl.conf is for number of open files the system can handle simultaneously.  limits.conf is for number of files an individual user can have.
17:03 < zane> got it... I made those 2 changes, but I don't have /etc/nginx/nginx.conf or /etc/pam.d/common-session
17:05 < CoverSlide> also, http://serverfault.com/questions/414637/reload-etc-security-limits-conf
17:06 < tnorris> zane: figured. pam is used by ubuntu, and nginx is the service I use to deliver static files.
17:06 < zane> any way to confirm the values have taken effect? sudo sysctl -p shows the updated fs.file-max 65000 even before a restart...
17:07 < zane> tnorris: yeah... I'm bad with teh linuxes. Is there an equiv. on CentOS etc. I should be considering? or are the first 2 sufficient?
17:08 < tnorris> zane: one sec. let me double check for centos.
17:09 < tnorris> zane: ah, perfect. good article specifically for centos: http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/
17:10 < tnorris> so run `ulimit -Hn` as the user that will run the node process.
17:10 < tnorris> on my machine it's 4096, by default.
17:11 < zane> cool. point of curiosity: we're talking about open files and incoming requests as if they're the same thing. Is this correct? Linux treats an incomming conn. like a file in the context of ulimit?
17:12 < tnorris> zane: in linux, everything you can write to is essentially a file.
17:12 < tnorris> (or treated as such)
17:13 < etcetera> sorry about that dropped off.
17:13 < etcetera> what happens to variables accessed from a closure in javascript.
17:13 < therealkoopa> Can someone help me figure out why the response from the socket isn't piped back to my sock stream? https://gist.github.com/e7eab23e9c08e3879335
17:13 < etcetera> are they simply out of scope or...copied/discombobulated for acecssibility?
17:13 < bradleymeck> isaacs: unsure, but do you have run-scripts tests somewhere or is that integrated throughout all of your npm tests. https://github.com/bmeck/npm-script , trying to conform to npm 
17:14 < CoverSlide> a socket uses a file descriptor, so unix treats them as such
17:14 < tnorris> yeah, really awesome if you want to seamlessly pass data from a parent to child process w/o overhead. you just pass the fd.
17:15 < therealkoopa> CoverSlide: Was that directed at me?
17:15 < zane> Interesting, cool. That tutorial was awesome, until I got to the end and tried to confirm the limits for the httpd user; I get a no user error trying to su into httpd... I'm wondering if perhaps my CentOS is setup differently re: users?
17:16 < tnorris> zane: yeah, http user is usually only setup for apache or such.
17:16 < zane> Hmm, so which user would I want in the case of node.js?
17:17 < pyrotechnick> root
17:17 < tnorris> if you're running you're node process now, just `ps fux | grep node` and you'll see the user that's running the node process.
17:18 < tnorris> pyrotechnick: mother... zane, bane this advice forever from your mind.
17:18 < tnorris> lol
17:18 < pyrotechnick> if you don't feel secure enough using root you're doing it wrong
17:18 < zane> heh, well, node is running as root
17:19 < nathan7> pyrotechnick: er
17:19 < nathan7> pyrotechnick: You believe that your program is absolutely perfect
17:19 < nathan7> pyrotechnick: and node and V8 too?
17:19 < zane> and, despite modifyng /etc/security/limits.conf with the "root" (intead of httpd) I still see 1024 as the hard/soft limits from SSH
17:19 < tnorris> zane: ok, well then do `sudo su -` and try the `ulimit -Hn`
17:19 < nathan7> pyrotechnick: that there are zero implementation errors?
17:19 < pyrotechnick> that's not what i said or what i'm trying to insinuate, in fact, quite the opposite
17:19 < nathan7> zane: there's something about ulimits with SSH
17:20 < pyrotechnick> virtuailisation is cheap these days, you can afford vm's for node
17:20 < bradleymeck> unfortunately sometimes you actually need root, like when dynamically adding users, any sore of non-system stuff should probably drop to a user though
17:20 < pyrotechnick> and yeah it's much more flexible
17:20 < tnorris> zane: and fwiw, I've always needed to restart my machine before seeing those changes take effect.
17:21 < therealkoopa> Oh my problem wsa the lack of a \n. Duh
17:21 < nathan7> pyrotechnick: Sure but my code doesn't need roo
17:21 < nathan7> *root
17:21 < pyrotechnick> meow
17:21 < nathan7> It being ulimited is just fine
17:21 < zane> hm. Is there any way to print the ulimit within node to confirm that it's taking effect?
17:22 < nathan7> If my node code can't write itself
17:22 < nathan7> then any attack is non-persistent
17:22 < pyrotechnick> personally i only use users for semantic value rather than security
17:22 < pyrotechnick> it's more fun
17:23 < tnorris> zane. sure, you'll want to spawn a child process. one sec for the syntax.
17:23 < CoverSlide> i can't think of anything I've had to restart linux for except switching to another kernel
17:24 < tnorris> zane: like so: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
17:24 < pyrotechnick> can't you even do that hot now CoverSlide>
17:24 < tnorris> CoverSlide: and I believe a way exists, but never had much luck changing ulimit w/o restart.
17:26 < optimus> I am looking into building a node based analytics tool, similar to Google Analytics, I was looking at UDP based systems or possibly websockets.  Does anyone have any references or guides that might be helpful?
17:26 < superjoe> does npm have a command to run a command from a local module?
17:26 < superjoe> so I don't have to install -g things?
17:26 < `3rdEden> websocket is not udp
17:26 < pyrotechnick> optimus: i did that for my first node gig, using node was awesome
17:26 < CoverSlide> pyrotechnick: if you know how, let me know
17:26 < pyrotechnick> CoverSlide: i don't but i have a friend really into linux and i remember him saying something about it
17:27 < bradleymeck> optimus: look at statsd by etc can be really useful
17:27 < bradleymeck> etsy*
17:27 < tjfontaine> CoverSlide: ksplice
17:27 < pyrotechnick> optimus: also don't try and cram it into one type of database like just mongo or just redis or something, use a combination
17:27 < optimus> bradleymeck, that is the udp system I looked at originally, I did not know if that was the best solution 
17:28 < zane> tnorris: weird, that works well on my dev machin, but on my prod machine I get "ulimit2: execvp(): No such file or directory"
17:28 < optimus> pyrotechnick, did you implement it using the udp protocol?
17:28 < tnorris> zane: um... yeah. no idea what that means.
17:28 < pyrotechnick> no
17:29 < pyrotechnick> websocket+fallbacks between client/server and redis between servers
17:29 < etcetera> anyone on my js closures question?
17:29 <@mbalho> wat
17:29 < pyrotechnick> UDP is for frame-based communication like the position of objects in games or gossip protocols
17:29 < bradleymeck> what was the question etcetera 
17:30 < etcetera> bradleymeck: when I create some local variable then have a few closures.
17:30 < EhevuTov> etcetera, I believe they are kept in the virtual machine and referenced
17:31 < etcetera> oh?
17:31 < tnorris> zane: are you just running `ulimit -Hn` from cli, or from node process?
17:31 < EhevuTov> etcetera, I'm not sure if the variable is popped onto a stack or if it's allocated like in the heap
17:31 < optimus> cool, thanks for the advice, I am going to concentrate on a websocket solution to see what it would entail
17:31 < zane> tnorris: from node. Works fine via SSH
17:32 < tnorris> zane: can you pastebin/etc your code for ulimit in node?
17:32 < etcetera> EhevuTov: but those objects are mutable right?
17:32 < zane> http://pastebin.com/MP0m4ktP
17:32 < etcetera> meaning each frame when a closure accesses that object requires a *separate* allocation?
17:32 < zane> works fine on my osx box, not on my CentOS prod ^
17:32 < EhevuTov> etcetera, I would think so. You still have a reference to it, so I would think you'd be able to change it. I haven't tried(at least to my knowledge)
17:32 < niggler> blargh
17:33 < etcetera> one of the reasons why I'm liking Go, this channels business is pretty awesome.
17:33 < niggler> javascript question: suppose I add a prototype to Array.  is there a way to set up the prototype so that it doesn't show up in a for .. in loop?
17:34 < bradleymeck> niggler: do not use for â€¦ in on arrays
17:34 < etcetera> I guess bottom line: if a variable is accessed from a block, it's non-optimal.
17:34 < nkuttler> niggler: see "for statement" in http://javascript.crockford.com/code.html
17:34 <@mbalho> mmalecki[slides]: http://static.izs.me/fonts/CentSchBook-Mono/
17:34 < tnorris> zane: i'm shooting in the dark, but possibly add a third parameter of `{cwd:__dirname}`
17:35 < niggler> ah hasOwnProperty 
17:35 < zane> tnorris: literally, __dirname? not a string or variable?
17:36 < draginx> has anyone here successfully exported an HTML page to PDF using PhantomJS with Node?
17:36 < tnorris> zane: http://nodejs.org/docs/latest/api/globals.html#globals_dirname
17:37 < CoverSlide> hmm ksplice is non-free, but i guess kexec can do it without completely shutting down the computer
17:37 < EhevuTov> etcetera, what makes it non-optimal? I'm not following you
17:37 < tnorris> zane: ok, i get the same error on ubuntu. so it's a linux thing. give me a minute to debug.
17:37 < zane> tnorris: same error :(
17:37 < zane> you rock
17:38 < tjfontaine> this is about if ulimit is an actual command or a shell builtin
17:38 < tjfontaine> in osx ulimit is a command, in linux world you are usually using the bash builtin
17:38 < etcetera> EhevuTov: every time you access that within some sort of closure, it seems like you'll get a heap allocation, then assignment back to the original address.
17:38 < CoverSlide> `which ulimit` will tell you
17:40 < EhevuTov> etcetera, I'm not sure how V8 works.
17:40 < etcetera> EhevuTov: it's how ruby operates it seems.
17:40 < CoverSlide> niggler: Object.defineProperty(arr, 'proto', {value: myPrototype, enumerable: false})
17:41 < niggler> aren't there issues with defineProperty in IE
17:41 < pyrotechnick> you don't need the enumerable: false
17:41 < CoverSlide> yeah IE < 9 doesn't have the ES5 Object.* and accessors
17:41 < CoverSlide> there's no way around it in ES3
17:42 < pyrotechnick> enumerable, configurable and writable default to false https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty
17:42 < CoverSlide> pyrotechnick: true, just thought it would be good to be explicit about the enumerable part
17:42 < CoverSlide> since that's the part that he asked for
17:42 < pyrotechnick> same
17:43 < pyrotechnick> i like your style though CoverSlide
17:44 < EhevuTov> etcetera, you've really peaked my interest in this. I'm wondering where to find this out
17:44 < etcetera> EhevuTov: piqued.
17:44 < EhevuTov> ah, thank hyou
17:45 < EhevuTov> it would be V8 specific
17:45 < tnorris> zane: ok, so I think that node spawns processes in sh, not bash, and ulimit doesn't work properly in sh.
17:46 < zane> tnorris: hm, 
17:46 < mscdex> symlink /bin/sh to /bin/bash!
17:47 < zane> mscdex: completely uninformeb, but that seems... dangerous
17:47 < EhevuTov> etcetera, looks like at first glance it uses the heap: https://bugzilla.mozilla.org/show_bug.cgi?id=542071
17:47 < tnorris> mscdex, zane: that would work, but not a production level solution.
17:47 < etcetera> EhevuTov: makes sense.
17:48 < tjfontaine> tnorris: production level would be binding to getrlimit/setrlimit
17:48 < CoverSlide> anyone know where this might have come from in my bashrc? http://hastebin.com/bebiduboxi.bash
17:48 < EhevuTov> etcetera, yeah, you can't have a non-local variable on a stack (that I can think of anyways)
17:48 < tnorris> zane: actually, not a sh, bash thing. just tried `spawn('bash', ['ulimit'])` and still failed.
17:49 < tjfontaine> because it's a *builtin*
17:49 < mscdex> eh?
17:49 < mscdex> dangerous?
17:50 < drudge> CoverSlide: http://dailyjs.com/2012/04/05/node-unix-interfaces/
17:50 < tjfontaine> tnorris: bash -c "ulimit -Hn"
17:50 < zane> I tossed this in my startup script "echo "I am running as $( id -un ) and I have $( ulimit -n ) sockets available."; " but I'm not sufficiently convinced that the ulimit is represented within node
17:50 < zane> but maybe I'm paranoid
17:50 < tnorris> tjfontaine: i'd kiss you.awesome.
17:50 <@konobi> Nexxy: landed?
17:51 < tnorris> zane: ok, here's the syntax `spawn('bash', ['-c', 'ulimit -Hn'])`
17:51 < mscdex> zane: you can also easily check the limits for any process: `cat /proc/<procid>/limits`
17:51 < EhevuTov> etcetera, #nodestack is talking about closures, memory and garbage collection right now, actually :-)
17:52 < tjfontaine> tnorris: I still advocate an actual usage of getrlimit it's far more portable than relying on a shell
17:52 < etcetera> EhevuTov: cool. My point is that it's more than likely non-optimal.
17:53 < etcetera> and likely a substantial bottleneck for more than a few apps.
17:53 < tnorris> tjfontaine: not familiar with getrlimit.
17:53 < zane> tnorris, mscdex: yay, nice on both!
17:53 < zane> properly showing my limits now
17:54 < EhevuTov> etcetera, V8 has something called closure 'fast path' that seems to speed of closure reads by an order of magnitude
17:54 < munro> node -v
17:54 < tjfontaine> tnorris: pretty standard function http://linux.die.net/man/2/getrlimit
17:54 < etcetera> EhevuTov: are JSObjects *ever* stack allocated?
17:54 < etcetera> please tell me no.
17:55 < tnorris> tjfontaine: but you'd have to write a C module for node for that solution, right? or is that a cli comman?
17:55 < CoverSlide> that's a system call
17:55 < tjfontaine> tnorris: you need access from core, a module, or ffi, but the results would be more predicitable
17:56 < tnorris> tjfontaine: ffi?
17:57 < tjfontaine> tnorris: https://npmjs.org/package/ffi
17:57 < tnorris> tjfontaine: holly... that is sweet!
17:57 < context> personally id avoid setting rlimit's in a process, thats something that should happen in the environment, unless you are trying to restrict the process via settings or something :/
17:57 < EhevuTov> etcetera, probably not in the traditional function call, push to stack way
17:58 < etcetera> EhevuTov: haha. right.
17:58 < tjfontaine> context: the context [irony] here is getrlimit to verify proper settings
17:58 < context> ahh
17:58 < etcetera> EhevuTov: played with Go yet?
17:58 < EhevuTov> etcetera, oh yeah. I love it
17:58 < etcetera> what are you building?
17:59 < EhevuTov> etcetera, I've just been playing with it. Nothing interesting
17:59 < etcetera> EhevuTov: what about with node?
17:59 < EhevuTov> mostly stuff I do with C, though
17:59 < etcetera> ah
17:59 < EhevuTov> etcetera, I'm doing a lot of piping and full stack apps with Node
17:59 < etcetera> EhevuTov: not sure what that means.
17:59 < EhevuTov> so like, I'll get data from a TCP stream, pipe and transform it, and send it to the web, or other things
17:59 < tnorris> zane: let me know if you see any performance improvements. you may need to set the limit higher.
18:00 < asteroid> hi
18:00 < EhevuTov> hi
18:00 < etcetera> EhevuTov: oh, nice for what purpose?
18:01 < asteroid> i'm looking for a debian repository or a .deb for node.js please. something maintained by community or a member near the node.js crew. Thx for info
18:01 < context> tnorris: tjfontaine: https://npmjs.org/package/posix
18:01 < EhevuTov> etcetera, I work at a telco company where we do things to phone call protocols
18:01 < context> gives you getr/setr amungst a bit other
18:01 < tjfontaine> right, I figured this was out there
18:01 < EhevuTov> things some would deem?unnatural
18:02 < zane> tnorris: I set the ulimit to 10240
18:02 < CoverSlide> EhevuTov: do you guys do a lot of erlang there?
18:02 < zane> tnorris: I'll let you know how it goes... that's 10x my previous
18:02 < EhevuTov> etcetera, for instance, I'd filter out 911 calls and then send alerts on the calls
18:02 < tnorris> context: and double awesome.
18:02 < zane> tnorris: I won't know the results for 24h, but I'll update the StackOverflow if needed
18:03 < EhevuTov> CoverSlide, no, I wish we'd at least explore it. I brought it up to my manager and he was like, "What's Erlang?".
18:03 < tnorris> zane: cool. I'll update your SO with a detailed description about what we've done if this proves to be the solution.
18:03 < jhsto> Sup guys, I've been battling with this problem earlier and I've not found a solid solution for it just yet. The problem is that I'm supposed to run a server-side function from client side on POST submit, but I would need to wait for the function to run before the actual POST is made. Adding a onsubmit parameter to form seem to not work either. Any ideas?
18:03 < zane> cool :)
18:03 < EhevuTov> I hear Erlang is hot-swappable, so it would be nice to have Erlang on our most south receiver that we could use to route our traffic
18:04 < EhevuTov> and route it to Node or Go or something
18:05 < CoverSlide> yeah i def. want to get into erlang, but i've got no time to learn
18:05 < etcetera> EhevuTov: 911, municipal services using node?
18:05 < EhevuTov> etcetera, not yet :-) I'm trying, but my boss doesn't understand my demos
18:06 < EhevuTov> I work at a small company were we try to be a MS shop
18:06 < EhevuTov> so, showing Node and Javascript, they think JS is still a toy
18:06 < pyrotechnick> MS sponsor node
18:06 < EhevuTov> I know right? That's what I tell them. Told them how MS helps on Node, etc.
18:07 < pyrotechnick> leave.
18:07 < EhevuTov> ?WebMatrix 2 editor etc
18:07 < EhevuTov> pyrotechnick, I think you've told me that once before :-P
18:07 < etcetera> EhevuTov: you do dispatch systems?
18:07 < pyrotechnick> and you're still winging
18:09 < EhevuTov> we do Q.703 phone signalling and do things like pickup/hangup correlation
18:09 < EhevuTov> and we provide hardware/software to allow telcos who is scamming them
18:09 < EhevuTov> tell who is*
18:09 < pyrotechnick> EhevuTov: maybe node is a failure in the making and they have tremendous foresight
18:10 < pyrotechnick> they might be trying to save yu
18:10 < EhevuTov> pyrotechnick, well, we currently do a lot of software in C# and .NET
18:11 < EhevuTov> ALthough I'm fine with C# as a language, I don't think it's the right language for our real-time, streaming needs
18:11 < pyrotechnick> JS is no better really
18:11 < pyrotechnick> the fact is most OS's aren't realtime
18:12 < pyrotechnick> what hope is there for anything running above that
18:12 < EhevuTov> It's a higher level language, which would allow us to fail more and thereby create better software
18:12 < pyrotechnick> JS is higher level than C#?
18:12 < Keyosk> Hey everyone :) I was hoping for a recommendation a reliable driver for Memcached. 
18:12 < zane> so... is theer a way to inspect the current open files as it pertains to the ulimit cap? I'd love to know how many of the cap is consumed, and by what...
18:13 < CoverSlide> in different ways ... C# is compiled, but not to machine code
18:13 < nathan7> pyrotechnick: JS's typing is far from how the machinery beneath it works
18:13 < analphabet> EhevuTov: so, just build your own OS, really!
18:13 < pyrotechnick> nathan7: http://msdn.microsoft.com/en-us/library/dd264741.aspx
18:13 < CoverSlide> Keyosk: require('net')
18:13 < Keyosk> CoverSlide: Would you really just integrate directly over TCP?
18:14 < CoverSlide> nah I'm kidding
18:14 < MI6> joyent/node: Bert Belder master * c11c19b : uv: upgrade to 1e32cb0 - http://git.io/WPQBRA
18:14 < CoverSlide> https://github.com/3rd-Eden/node-memcached
18:14 < Keyosk> LOL I hoped you were :)
18:14 < EhevuTov> from my research, it would be easier to create a horizontally scalable, piping, tranforming system in Node than in C# .NET
18:14 < nathan7> pyrotechnick: They're still very far from JS types
18:14 < pyrotechnick> not really
18:15 < EhevuTov> The C# ecosystem isn't open enough to do things like that quickly
18:15 < EhevuTov> I'm not saying you can't do it
18:15 < pyrotechnick> on the cosmic scale of typing they're neighbouring cities
18:15 < Keyosk> CoverSlide: That looks really active, ever seen any reliability issues with it?
18:16 < analphabet> EhevuTov: what about erlang (disclaimer: never actually used it...)
18:16 < pyrotechnick> EhevuTov: generally i found when people feel frustrated or restricted by C#/MS it's a lack of knowledge and understanding of what's already available and in use
18:16 < EhevuTov> analphabet, yeah, that's the 2nd mention in 15min. I've mentioned it to my boss, but his eyes just glazed over
18:16 < CoverSlide> nay, but i've just used it for toy projects, nothing serious
18:17 < EhevuTov> pyrotechnick, agreed. But it's that inaccessibility that tells me things are hard to find
18:17 < Keyosk> Well, the fact that it's made by one of the guys behind node.js is really promising
18:17 < pyrotechnick> EhevuTov: i'm not really convinced it's an open vs closed issue, and if it is, get out
18:17 < Keyosk> Err socket.io
18:17 < Keyosk> Thinking too fast ;)
18:18 < analphabet> Keyosk: some stats from npmjs.org: https://npmjs.org/package/memcached
18:19 < EhevuTov> pyrotechnick, well, we're a very closed place. A very DIY shop where we don't use libs. We're still on SourceSafe (I use Git)
18:19 < pyrotechnick> EhevuTov: you have to give them some credit though, things like XNA are fucking amazing
18:19 < pyrotechnick> and very open
18:20 < Keyosk> analphabet: Thank you for that, it seems like this is the way to go
18:20 < syskk> what do you guys use for authorization?
18:21 < EhevuTov> pyrotechnick, that's the first I've heard of the XNA framework. I've never created a game though, so I can't comment.
18:21 < EhevuTov> syskk, passportjs
18:21 < pyrotechnick> EhevuTov: that's PRECISELY what i'm getting at
18:21 < syskk> EhevuTov: yea i mean authorization, not authentication though
18:21 < syskk> EhevuTov: I'm looking for an ACL library or something in that vein
18:21 < pyrotechnick> EhevuTov: a "c# shop" and its coders know nothing about, not even the existence of, sister projects like XNA
18:22 < pyrotechnick> you can't blame MS for that
18:22 < pyrotechnick> it's an ignorance thing
18:22 < EhevuTov> pyrotechnick, man, I taught them about ASP.NET MVC and they looked at me like it was too "out there"
18:22 < tnorris> anyone read the ars article about dart "fixing" javascript?
18:23 < pyrotechnick> tnorris: i prefer novels if i'm going to read fiction
18:23 < tnorris> lol
18:23 < pyrotechnick> EhevuTov: http://www.asp.net/mvc/open-source
18:23 < dnolen> anybody use node-htmlparser? I'm trying to use it correct some malformed html - I would like to parse to correct and emit a string - I don't see anything about how to do this on the repo.
18:23 < pyrotechnick> you show them this kind of thing?
18:24 < EhevuTov> pyrotechnick, they consider open source to be "amateur" :-)
18:24 < blazes816> @jesusabdullah Hey, if you're online, I just wanted to thank you for the UserVoice SSO gist you sent us, and to let you know our Node lib is in the works!
18:24 < pyrotechnick> maybe you need to get them an xbox and play with some open source c# stuff for them to gain an appreciation for it
18:25 < pyrotechnick> EhevuTov: sometimes you have to rub people's noses in it
18:25 < CoverSlide> or just compare chrome to IE
18:25 < nathan7> dnolen: jsdom!
18:25 < CoverSlide> don't use jsdom
18:25 < CoverSlide> ever
18:25 < CoverSlide> it is horrid
18:25 < nathan7> Well, what are we supposed to use today?
18:25 < nathan7> if you say Cheerio I am removing your face
18:26 < EhevuTov> pyrotechnick, well, I'm showing them Demo's of what I'm doing in Node. I'm not just showing my boss, but everyone in the company, showing them how little code I need to do manipulate streams
18:27 < EhevuTov> pyrotechnick, and I'm hoping that will create a desire to get such projects as actual products and out to market quickely
18:27 < pyrotechnick> EhevuTov: yeah there's a bunch of chrome projects backing it with node too, like the interactive music museum thing, i forget the name but that stuff is so impressive
18:27 < nathan7> CoverSlide: Well?
18:27 < Keyosk> nathan7: I used Cheerio for a little pet scraping project of mine, it seemed... ok.. what problems have you run into with this?
18:27 < nathan7> Keyosk: Cheerio is fucking jQuery
18:27 < CoverSlide> it's not
18:27 < dnolen> nathan7: CoverSlide: I don't really care if it's horrid or not. My use case is pretty simple - I just want to correct some HTML that may not have all the required closing tags. Just need a simple example. Much appreciated.
18:28 < CoverSlide> it's closer to beautifulsoup than jquery
18:28 < nathan7> "cheerio - Fast, flexible, and lean implementation of core jQuery designed specifically for the server"
18:28 < EhevuTov> pyrotechnick, Chrome projects, like Chrome Apps?
18:28 < Keyosk> nathan7: Why does that make it a bad way to scrape a webpage using selectors?
18:28 < pyrotechnick> let me see
18:28 < nathan7> Keyosk: We have a real DOM API
18:28 < pyrotechnick> EhevuTov: http://www.chromeweblab.com/
18:29 < pyrotechnick> all the backend is node
18:29 < Keyosk> nathan7: I'm simply trying to learn a better option :) I'm not trying ot be a pain in the ass
18:29 < pyrotechnick> AFAIAW
18:29 < CoverSlide> use jsdom if you must
18:29 < pyrotechnick> hmm that's not really an acronym but it'll do
18:30 < nathan7> I wouldn't mind having Cheerio but with a real DOM API
18:30 < CoverSlide> honestly, cheerio does the job and does the job well
18:30 < Keyosk> I was happy with it. It did precisely what I needed to do and the bottleneck on my scraper wasn't the dom parsing it was the time to load the content from the remote site.
18:31 < analphabet> why should you not use jsdom?
18:31 < nathan7> I wouldn't mind taking the parser of Cheerio and building a real DOM on it
18:31 < nathan7> oh hey
18:31 < nathan7> htmlparser2 does have a DOM thingy
18:31 < nathan7> :>
18:32 < nathan7> Ah, it builds a tree
18:32 < nathan7> but not a real DOM
18:33 < dnolen> nathan7: CoverSlide: jsdom covers my simple use case, thanks much!
18:35 < pyrotechnick> EhevuTov: explanation at the bottom of http://www.chromeweblab.com/basic/universal-orchestra.html/
18:36 < Keyosk> Does anyone have a strong opinion of NOT using socket-io as an engine for handling a 1-1 instant chat solution?
18:36 < EhevuTov> pyrotechnick, I'm using Chrome but it's telling me I don't :/
18:37 < pyrotechnick> yeah i linked you to that page on purpose
18:37 < pyrotechnick> down the bottom is a vid and blurb about node
18:38 < EhevuTov> Javscript is going to rule the world for the next 20 years, MS stock is doing nothing, github is the new resume
18:38 < pyrotechnick> EhevuTov: even github's days are numbered
18:38 < pyrotechnick> it's replacing itself
18:39 < EhevuTov> with something better. What is replacing it?
18:39 < pyrotechnick> think about it.
18:39 < EhevuTov> seems a lot of the places I hangout are turning into head-hunter databases
18:40 < pyrotechnick> EhevuTov: also http://www.ro.me/ if you havent seen it
18:40 < EhevuTov> pyrotechnick, no seriously, what is replacing github. Yes, that's such a cool vid!
18:40 < pyrotechnick> not a video!
18:40 < EhevuTov> interactive vid
18:40 < pyrotechnick> lol
18:40 < pyrotechnick> i guess
18:41 < pyrotechnick> but mrdoob and his friends cry when you say that
18:41 < EhevuTov> it calls it an interactive video right on the front :-)
18:41 < EhevuTov> but, yes, if I was the engineer I would consider it epic :-)
18:41 < nathan7> hmm
18:42 < pyrotechnick> EhevuTov: i don't know where it is or what it's called but somewhere is an opensource github+towerapp/gitgui watever you want to call it written in node/html that will replace github and people's git tools
18:42 < pyrotechnick> probably in some mum's basement
18:42 < pyrotechnick> it's inevitable really
18:43 < pyrotechnick> it might not even be git
18:44 < pyrotechnick> it'd make more sense if it weren't
18:44 < analphabet> pyrotechnick: "i don't know where it is or what it's called"
18:44 < pyrotechnick> it's what git was meant to be, github has just been a necessary evil in the meantime
18:44 < EhevuTov> git was written by Torvalds on a cocaine/hooker binge in 2 weeks
18:44 < pyrotechnick> i'd believe that
18:45 < pyrotechnick> most tech revolutions (revelations) have come from Entheogens
18:45 < pyrotechnick> it's why they happen simultaneously around the world
18:46 < EhevuTov> why simultaneously
18:47 < pyrotechnick> platos realm of ideas
18:47 < pyrotechnick> dmt nexus
18:47 < pyrotechnick> spirit realm
18:47 < pyrotechnick> whatever you want to call it
18:47 < pyrotechnick> http://en.wikipedia.org/wiki/Multiple_discovery
18:47 < pyrotechnick> this is the anti-thesis and is wrong http://en.wikipedia.org/wiki/Heroic_theory_of_invention_and_scientific_development
18:48 < pyrotechnick> but the scientific dictatorship will have you believing otherwise 
18:48 < therealkoopa> I have an issue with a stream. Check this out: https://gist.github.com/15e30e4d9cd43c0e1b97
18:48 < EhevuTov> pyrotechnick, that might explain my observation that as a kid, we all said similar phrases as other kids around the world that had no cross-communication :-)
18:48 < pyrotechnick> EhevuTov: not everyone's tuned in
18:49 < pyrotechnick> EhevuTov: such is life
18:49 < therealkoopa> I can't figure out why it's escaping those strings if I output the variable, but if I hardcode the string, it's fine.
18:49 < pyrotechnick> time's are a changing though, age of aquarius (water bearer, secret spiller, revelation) is upon us
18:49 < russfrank> pyrotechnick: there's gitlab.. 
18:50 < EhevuTov> pyrotechnick, speaking of establishments, the medical establishment failed to notify me my whole life that I was allergic to certain foods. This had effected my programming.
18:50 < pyrotechnick> russfrank: tyvm i knew it existed, i suspect there will be many dozen implementations of a common standard
18:50 < pyrotechnick> like browsers perse
18:51 < pyrotechnick> EhevuTov: their primary concern isn't helping you it's helping themselves to your money or the government's money on your behalf
18:51 < EhevuTov> pyrotechnick, totally. just keep coming back(because you're sick) and we get incentive to keep you sick and coming back
18:52 < pyrotechnick> do not fear, it won't last much longer
18:52 < EhevuTov> anywho, I have seen mental acuity in my programming from getting off certain foods
18:53 < pyrotechnick> EhevuTov: http://www.reddit.com/r/nutrition
18:53 < pyrotechnick> http://www.reddit.com/r/fitness
18:53 < pyrotechnick> share it
18:53 < pyrotechnick> too much for TJ lol
18:54 < pyrotechnick> anyway i digress OT, but thanks for the links
18:58 < jaha> whats the correct regex for this?    /^(.*[^60x60])(60x60)?\..*$/     used with   blah-blah.jpg and blah-blah60x60.jpg, returning everything before the optional 60x60?
18:58 < jaha> woops, wrong channel
18:59 < zezikaro> jaha /^([\w-]+)/
18:59 < zezikaro> matches all chars and hyphens at the start of the string
19:00 < zezikaro> but doesn't match digits
19:00 < jaha> needs to support digits as well
19:01 < therealkoopa> Anyone have ideas on that encoding issue?
19:01 < jaha> blah123-blah12360x60.jpg (60x60 is constant)
19:01 < analphabet> therealkoopa: what was it again?
19:01 < therealkoopa> https://gist.github.com/15e30e4d9cd43c0e1b97
19:02 < therealkoopa> I'm trying to figure out where all the "1 type things are coming from
19:02 < therealkoopa> I'm using shoe to stream this to the client, and that appears to be where it's choking.
19:03 < pyrotechnick> "
19:03 < pyrotechnick> "The only interesting languages are C/C++, Go, Dart, JS (and possibly Rust). Everything else is legacy bullshit."
19:03 < pyrotechnick> lolololololol
19:04 < pixie79> can i say: if ((x) & (y)) { console.log(x + y)};
19:04 < pixie79> i can seem to find the correct syntax to require both to be true
19:04 < tnorris> pyrotechnick: what's that from?
19:04 < analphabet> pixie79: &&
19:04 < pyrotechnick> guess who
19:04 < pixie79> analphabet: thanks
19:05 < analphabet> pixie79: and you don't need the parens
19:05 < pyrotechnick> tnorris: none other than http://substack.net/images/dnode-slides/king_ryan.png
19:05 < pixie79> ok
19:05 < tnorris> awesome. surprised Rust was even mentioned.
19:05 < pyrotechnick> it's good
19:06 < pyrotechnick> Rust is a flower in a field of weeds
19:06 < analphabet> therealkoopa: 9477 looks like some terminal color annotations
19:07 < therealkoopa> analphabet: Ah! That makes perfect sense. This socket is coming from cluster masters repl, and it does pretty printing stuff.
19:07 < therealkoopa> Can I turn that stuff into a basic string?
19:07 < analphabet> therealkoopa: remove the color annotations, you mean?
19:07 < therealkoopa> Yea
19:08 < tnorris> pyrotechnick: i wonder if we'll ever get around to rewriting gecko in rust.
19:08 < zane> tnorris: well, ulimit does not seem to have fixed the problem :(
19:08 < zane> tnorris: still getting intermittent gateway timeouts
19:09 < therealkoopa> analphabet: The socket is from repl, and it prints things uses color annotations. I'm tryint to stream to the socket the repl writes, but I need just basic strings.
19:09 < analphabet> I think there should be a channel called #node.js-OT ...
19:09 < pyrotechnick> tnorris: i think both will happen, there's enough people and talent in the world to implement these things in both machine code and english and everything in between
19:09 < zane> tnorris: doing "ls -s /proc/#/fd" I'm able to see that node is using ~300 files including sockets, so even with my previous 1024 limit, I doubt it was the issue
19:10 < analphabet> therealkoopa: can't you turn off colored output for the app the stream is coming?
19:10 < pyrotechnick> tnorris: any other perspective is a lie from the pits of hell
19:10 < analphabet> therealkoopa: it's hard to remove single-handedly it once it's in there...
19:10 < tnorris> zane: freakin crap. what's the following ouput? `netstat | grep http | wc -l`
19:11 < therealkoopa> analphabet: It's not my module (cluster-master) that's creating the repl socket.
19:11 < therealkoopa> analphabet: Blast, Okay
19:11 < benDos> Is there any additional procedure surrounding pull requests?
19:11 < zane> tnorris: 14
19:11 < zane> tnorris: the other instance: 7
19:12 < tnorris> zane: well, freakin crap. but you said you didn't have this problem in 0.6.x, right?
19:12 < tnorris> pyrotechnick: awesome. haven't learned a new language for a while. might have to give rust a go.
19:12 < syskk> is it possible to bypass validations in mongoose?
19:12 < analphabet> therealkoopa: Maybe  this helps you http://stackoverflow.com/questions/7149601/how-to-remove-replace-ansi-color-codes-from-a-string-in-javascript
19:12 < zane> tnorris: tough to say. I DID get gateway timeouts with 0.6.x, and one of the first things I did was to upgrade to 0.8.12
19:13 < zane> tnorris: since then, I've done a LOT of debugging and work... so it could be the same issue, could be dif.
19:13 < analphabet> syskk: ask in #mongoose.js ;)
19:13 < pyrotechnick> tnorris: rust, go, http://elixir-lang.org/ i want to try but am too lazy
19:13 < syskk> this chan is dead :(
19:13 < pyrotechnick> elixer is most interesting to me
19:13 < zane> tnorris: its really hard to pin down because the cause is so unclear. Right now, I'm havnig zero issues at all, while my colleague (few blocks away) is having constant gateway timeouts...
19:14 < tnorris> zane: well, not gc, and not connection pool.. at this point I'd need to see source to help debug.
19:14 < zane> tnorris: best guess is that she's connected to a different instance
19:14 < zane> tnorris: though... LB should be randomizing between us
19:15 < zane> tnorris: I'd be okay sending you a zip of the source, or putting you on R/O for the SVN. Email?
19:15 < tnorris> pyrotechnick: never got used to non-curly style syntax
19:15 < tnorris> zane: trev.norris@gmail.com
19:16 < analphabet> syskk: sorry, it's #mongoosejs
19:16 < pyrotechnick> tnorris|lunch: i'm a coffeescripter :P
19:17 < pixie79> can anyone tell me what is wrong here? 
19:17 < pyrotechnick> humans
19:17 < pyrotechnick> but we're working on it
19:17 < pixie79> carsgo.spawn( cmd, [ '-b -iD ',path, ' -u WEB99'], { 'cwd':path, 'env':['FRO
19:17 < pixie79> pyrotechnick: lol
19:17 < pixie79> ReferenceError: Invalid left-hand side in assignment
19:18 < pixie79> i am using child_process (or trying to)
19:18 < pixie79> i need to spawn the process, then do something else all the time the pid is still valid
19:18 < pyrotechnick> paste it all
19:19 < pixie79> ok
19:19 < analphabet> pixie79: what's carsgo?
19:19 < analphabet> pixie79: don't paste in here, pls
19:19 < zane> tnorris: sent you a beanstalk invite + an email explaining a bit about the code. LMK if you have any questions deciphering my crap
19:19 < pyrotechnick> OH NO HE DIDN'T
19:19 < pyrotechnick> https://twitter.com/ryah/status/258631505537007617
19:19 < pyrotechnick> BOYCOTT EMBER.JS
19:20 < pixie79> https://gist.github.com/3905806
19:20 < pixie79> in an house cobol program
19:20 < pixie79> that only talk to external program via fifo's
19:20 < pyrotechnick> WYCATS HAS INSULTED OUR BELOVED PROPHET RY AND HIS DIVINE CREATION NODE PEACE BE UPON THEM
19:21 < CoverSlide> yehuda is an asshole and a ruby guy
19:22 < pyrotechnick> not even
19:22 < pyrotechnick> not even ruby likes him
19:22 < pyrotechnick> he's a rebel without a cause
19:22 < pyrotechnick> starts merb, wrecks that, takes over rails, wrecks that, takes over sproutcore, wrecks that, starts in ember/node, is wrecking that
19:23 < pyrotechnick> bring back the guillotine 
19:24 < pyrotechnick> i put a jihad on wycats
19:24 < CoverSlide> FUCK YOU MAGIC MOUSE
19:24 < CoverSlide> sorry
19:25 < CoverSlide> fucking magic mouse craps out all my like 5x a day
19:25 < analphabet> pixie79: http://nodejs.org/docs/latest/api/all.html#all_child_process_spawn_command_args_options
19:25 < pyrotechnick> i'm going into battle #ruby #rubyonrails
19:26 < CoverSlide> #ruby-lang too
19:26 < CoverSlide> #ruby is where noobs hang out
19:27 < pyrotechnick> MINASWAN (Matz is nice and so we are nice)
19:27 < chovy> he wreckked rails?
19:27 < chovy> rails was pretty good i thought
19:28 < pixie79> analphabet: that is what i was trying to follow
19:28 < chovy> except it was not ajax-ready.
19:29 < pyrotechnick> oh man this is good
19:30 < analphabet> pixie79: This very probably doesn't even get past the parser....
19:30 < analphabet> pixie79: 'env':['FROM_CASSD'=fifoout, 'TO_CASSD'=fifoin ] is invalid javascript, afaik
19:31 < pyrotechnick> LOL
19:31 < pixie79> oh,  
19:31 < analphabet> pixie79: prehaps you meant { 'cwd':path, 'env':{'FROM_CASSD':fifoout, 'TO_CASSD':fifoin }}
19:32 < pixie79> possibly - i will try that
19:33 < analphabet> pixie79: If had ever actually run that code, you would have got a nice error message, telling you what's wrong
19:34 < pixie79> analphabet: i did get a message just didnt understand it - programming is a side for me but i am trying :)
19:35 < pixie79> thank you that did work, now i just need to would out how to do something else only while that program is running
19:35 < therealkoopa> analphabet: Thanks for the help with the terminal codes. I coudln't figure out where the hell they were coming from, as I never messed with those before.
19:35 < analphabet> pixie79: that's ok. but you could have posted the error message along the code, making it easier to help you
19:36 < analphabet> therealkoopa: no problem
19:36 < purr> no
19:36 < pixie79> ok - sorry
19:39 < exit2> I need more node.js tuts, I'm burning through the ones I've found on Google
19:44 < wycats> pyrotechnick: lololol
19:44 < pyrotechnick> MATZ IS GOOD AND SO ARE WE
19:44 < pyrotechnick> ALL HAIL MATZ
19:45 < pyrotechnick> SUPREME LEADER
19:45 < context> wait wut
19:45 < CoverSlide> except he can't write a decent interpreter for his own language
19:45 < pyrotechnick> now tell your minions to stop stalking me with pms
19:46 < pyrotechnick> it's creepy
19:48 < pyrotechnick> cue ruby community imploding and turning on eachother like dogs
19:49 < exit2> pyrotechnick: why because of what Ryan wrote on Twitter?
19:49 < pyrotechnick> *shrugs*
19:50 < pyrotechnick> i need popcorn
19:51 < pyrotechnick> ryah: A++++++++ troll speedy delivery just as subscribed would follow again
19:58 < pixie79> ok i am getting further, my program now correctly starts a tcp server, opens a connection to our program via the file handles and when someone sends data direct to the inboud fd, our program responds and sends the data over the tcp socket which is correct.
19:58 < pixie79> now i am just stuck on how i recive data from the socket and write it to my fifo
20:06 < FunnyLookinHat> So I'm running through the code on the homepage and having a bit of a disconnect... I get how to run the server side of stuff, but to test the "echo" sample script that's on the homepage, where would I write/run that from?  I can't do it within a browser w/o a required lib/script, right ?
20:06 < syskk> damn it, i hate when i contribute to a project but the maintainer is MIA
20:07 < pyrotechnick> syskk: GH needs to incorporate this http://stillmaintained.com/
20:08 < syskk> pyrotechnick: yea. would be nice if GH could recommend forks that are more active/popular too
20:11 < pyrotechnick> FunnyLookinHat: that example is just TCP not HTTP, use netcat or something
20:11 < FunnyLookinHat> pyrotechnick, Ah ok - that makes sense
20:11 < FunnyLookinHat> thx.
20:11 < pyrotechnick> net is for tcp
20:11 < pyrotechnick> http://nodejs.org/api/net.html
20:18 < pyrotechnick> it's okay guys ryah has got this, keep calm and node
20:19 < timeturner> what happened
20:19 < timeturner> ?
20:19 < CoverSlide> twitter happened
20:20 < timeturner> whose twitter?
20:20 < pyrotechnick> twitter is merely a conduit 
20:20 < pyrotechnick> if it weren't twitter it'd be here
20:20 < pyrotechnick> or mailing lists
20:20 < CoverSlide> or G+
20:20 < pyrotechnick> yep
20:20 < timeturner> no I mean what happened with ryah and node
20:20 < purr> no
20:20 < pyrotechnick> yes
20:21 < timeturner> re pyrotechnick
20:21 < pyrotechnick> remember sms and pagers and stuff was around before twitter it's nothing new
20:21 < CoverSlide> im still remembering ryah's last rant
20:23 < pyrotechnick> best symphony of science so far: http://www.youtube.com/watch?v=cvz9uSK3zXo
20:32 < nlf> am i wrong, or should /\/(\w+)\/?/g NOT capture the slashes in the result?
20:32 < pyrotechnick> http://leaverou.github.com/regexplained/
20:34 < nlf> that doesn't even work right
20:34 < nlf> i've been using refiddle
20:34 < nlf> it's showing exactly what javascript is returning, i'm just not sure why the slashes are being returned in the capture groups when they're outside the parens
20:35 < pyrotechnick> show me the refiddle
20:35 < pyrotechnick> and nice site btw thanks
20:37 < nlf> http://refiddle.com/a38
20:37 < nlf> refiddle is great
20:39 <@Nexxy> konobi yus! 
20:39 <@Nexxy> sleeping off the jetlag though :P
20:42 < s5fs> Nexxy: whats up Dublin!
20:43 <@Nexxy> s5fs so much Guiness
20:44 < s5fs> Nexxy: quite the problem! glad to hear you arrived safely
20:44 < s5fs> I think I'm a magnet for fugly code, haha!
20:44 <@Nexxy> haha thanks :)
20:44 < nlf> urf, seriously? you have to loop to find all results?
20:45 < nlf> apparently .match doesn't support capture groups
20:45 < nlf> and .exec on the regex object will only return one capture at a time
20:45 < pixie79> i think the way i am writing out to my fifo is breaking the fifo as when the node script connects to it the other end disconnects straight away instead of waiting for the data, is there a better way to write this? -> https://gist.github.com/3908041
20:47 < mmalecki> mbalho: ping?
20:47 < chovy> nlf: can \w be a slash?
20:47 < chovy> http://refiddle.com/a3l
20:48 < Slade-> So I'm creating a sockjs/amqp bridge module.. its the first module I've written.. would someone mind giving me some useful criticism?  I'm pretty new to nodejs and want to make sure i'm doing things the right way.. https://gist.github.com/e86e6e3954c37f92da9b
20:48 < Slade-> I'm mostly concerned with all the nested events..  this seems.. holey
20:48 < chovy> nlf: it looks like the highlighting is done on the regex, not the captured characters
20:49 < garrettwilkin> Nexxy: I didn't get to use JohnnyFive last night :(
20:49 < garrettwilkin> baby duty called just after I npm installed it...
20:49 < chovy> nlf: http://refiddle.com/a3l
20:50 < nlf> possible \w can be a /
20:50 < nlf> i didn't think it could though
20:50 < nlf> i'll just specify a tighter character set
20:50 < chovy> nlf: it isn't
20:51 < chovy> but the highlighting is the /.../ not just ()
20:51 < nlf> right, but in code with the ( ) in place i'm getting the exact same as the highlighted results
20:52 < Slade-> is the 'events' module the proper way to do events in node? or has it been superseded by other fun things
20:52 < chovy> /\/\w+/g and /\/(\w+)/g highlight exactly the same. the entire regex, not captures only
20:52 < pyrotechnick> Slade-: of course
20:53 < pyrotechnick> Slade-: this is OK if you need more stuff https://github.com/hij1nx/EventEmitter2
20:53 < pyrotechnick> but there are hundreds of similar libs
20:53 < Slade-> yea i've seen that
20:53 < pyrotechnick> Slade-: if `events` has all you need, use that
20:53 < Slade-> is this related in any way to 'promises'?
20:54 < pyrotechnick> no
20:54 < purr> no
20:54 < Slade-> k
20:54 < Slade-> thats something else i need to learn about :)
20:54 < nlf> yeah, i had to use a while loop
20:54 < pyrotechnick> there's a bunch of event libs on http://microjs.com/
20:54 < chovy> what is promises? I keep seeing it mentioned
20:54 < pyrotechnick> google it
20:55 < pyrotechnick> youtube it
20:55 < pyrotechnick> watch somebody using them
20:55 < nlf> var match, type, pattern = /\/(\w+)\/?/g; while (match = pattern.exec(stringtotest) { type = match }; type = type[1]; finds the last match
20:55  * Slade- is still on events.. promises seem like too much of a commitment for right now.
20:55 < nlf> it's ugly, but it worked
20:55 < CoverSlide> you don't need pormises
20:55 < CoverSlide> it's a pattern that no longer has anything to do with node
20:55 < purr> no
20:56 < Slade-> yea. thats what bankruptcy court is for
20:56 < Slade-> oh yea? so ignore it? alright
20:57 < CoverSlide> if you want to, look at the q module
20:57 < CoverSlide> but yeah you can ignore it
20:57 < chovy> nlf: are you just trying to get an array of paths? like /foo/bar/baz => ['foo','bar','baz'] ?
20:57 < pyrotechnick> if you want to learn something dont listen to someone telling you not to, learn about it why they are telling you to avoid it
20:57 < pyrotechnick> you might up finding out they're wrong
20:58 < Slade-> q module. a module named after the james bond guy?  mysterious
20:58 < nlf> chovy: kind of? not quite though
20:59 < nlf> i'm probably going to end up just using split and manipulating the results
21:00 < Slade-> oh, promises look cool, so does q.. why is it not the 'one true path'  anymore?
21:00 < pyrotechnick> Slade-: one true path is a myth
21:01 < pyrotechnick> always was
21:01 < pyrotechnick> it's called collectivism
21:01 < pyrotechnick> and anything that ends in ism is evil
21:02 < Slade-> hmm that sounds like a general-ism to me
21:02 < CoverSlide> because there's all these politics involved with promises. node used to use promises, but there were a lot of people accusing them on not actually following the definition of "promises", and implementing true promises became a bigger pain, so finally it was decided to use callbacks and eventemitters
21:02 < pyrotechnick> Slade-: go on
21:02 < CoverSlide> isms in general are not good
21:03 < Slade-> ah so events replaced promises.. 
21:03 < pyrotechnick> they don't replace eachother
21:03 < pyrotechnick> they're different means to the same end
21:04 < CoverSlide> "Not that I condone fascism, or any -ism for that matter. -Ism's in my opinion are not good. A person should not believe in an -ism, he should believe in himself." 
21:04 < medikoo> Slade-: Promises are valid and extremely useful concept, thing is that it takes time to coin it really well, it's not as straight-forward stuff as e.g. EventEmitter
21:05 < Slade-> yea trying to find an event tutorial now :)
21:05 < medikoo> Slade-: see: https://gist.github.com/3889970
21:06 < medikoo> Slade-: also check first example at https://github.com/medikoo/deferred it shows the power of it
21:12 < Slade-> hm
21:13 < pyrotechnick> CoverSlide: nice quote
21:16 < pyrotechnick> medikoo: dems fighting words https://gist.github.com/3890101
21:17 < Slade-> is it appropriate to 'inherit' EventEmitter.. or simply have one internally?
21:17 < pyrotechnick> whatever feels good manâ„¢
21:18 < pyrotechnick> if it makes sense to expose the event api then inherit
21:18 < pyrotechnick> if you want to wrap or otherwise obscure it
21:18 < pyrotechnick> then compose it in
21:19 < pyrotechnick> generally you should favour composition over inheritance but for something as simple and primitive as events not so much
21:19 < pyrotechnick> i struggled to decide this for a long time and eventually realised there's no golden rule
21:19 < purr> no
21:20 < pyrotechnick> go on purr
21:22 < Slade-> i don't build my objects using prototype ever either. that's probably a mistake
21:22  * Slade- notes he does a bunch of things weird
21:22 < pyrotechnick> purr: going to substantiate that "no"?
21:22 < purr> no
21:22 < pyrotechnick> that's what i thought
21:23 < Slade-> thanks for all the feedback. its been super useful
21:24 < pyrotechnick> #rubyonrails will sort you out if you need anymore
21:24 < Slade-> i've always been icked out by ruby
21:24 < pyrotechnick> good
21:24 < Slade-> maybe never given it its fair chance
21:25 < pyrotechnick> it's an evolutionary col-de-sac
21:26 < Slade-> theres probably a dozen gp languages i use.. and ruby never seemed to add anything pleasant
21:26 < pyrotechnick> it's not the worst by any means
21:27 < Slade-> no, but it felt alot like a cult.. where there was koolaid to drink
21:27 < purr> no
21:27 < pyrotechnick> you're close to the truth right there
21:27 < pixie79> ok - i am completly lost on working out how to connect to a fifo on disk that already exists and has something listening on the other end so that i can send data to it
21:28 < Slade-> i use c# alot (and like it), but embracing anything msft is also cultish :P
21:28 < pixie79> i think i should be using stream? but i dont see how to tell that what the pipe is called
21:29 < Slade-> pixie79: i dunno the details but is this something like a nix file pipe?
21:35 < chovy> pixie79: are you talking about event streams for client side?
21:37 < Azra-el> hello guys.. any freelance devs available and interested in a chat?
21:37 < pyrotechnick> there was a guy here yesterday i know is desperate for work
21:37 < pyrotechnick> let me check the logs for you
21:37 < Azra-el> much obliged pyrotechnick
21:40 < pyrotechnick> Azra-el: the net is literally dropping in here drop by drop here are the logs http://piscisaureus.no.de/node.js/index
21:40 < purr> no
21:40 < pyrotechnick> shuit your fucking mouth purr
21:41 < etcetera> do you guys just use terminal on mac?
21:41 < etcetera> or something like iterm?
21:43 < pixie79> Slade: yes this is a unix fifo 
21:43 <@mbalho> pyrotechnick: is purr a bot
21:43 < s5fs> etcetera: i hear iterm is the hotness
21:43 < pyrotechnick> i dunno if it is its a shit bot
21:43 < pyrotechnick> i dont mind bots if they're helpful or funny
21:43 <@mbalho> pyrotechnick: would you mind not raging so hard against purr, its offputting
21:43 < pyrotechnick> but just saying no is worse than my trolling
21:43 < purr> no
21:43 < pixie79> chovy: no i am creating a tcp server that writes to a fifo
21:43 < purr> no
21:44 -!- mode/#Node.js [+b *!*purr@ell.io] by mbalho
21:44 -!- purr was kicked from #Node.js by mbalho [purr]
21:44 < s5fs> etcetera: I ran across this article the other day, some good stuff in it: http://danielmiessler.com/blog/enhancements-to-shell-and-vim-productivity
21:44 < pyrotechnick> thanks
21:44 < gkatsev> why? :( purr is useful.
21:44 < s5fs> no
21:44 < pyrotechnick> no
21:44 < s5fs> exactly
21:44 < CoverSlide> no
21:44 <@mbalho> pyrotechnick: no problem, just try to be less aggressive about it in the future
21:45 < gkatsev> actually, do we want to bring in ecmabot from ##javascript? It has a repl and factoids. It also isn't as talkative like purr is.
21:45 < pyrotechnick> sorry i haven't had my fluoride today
21:45 < pyrotechnick> i'll try to be more autistic in the future
21:45 < s5fs> gkatsev: i vote in favor of ecmabot
21:46 < pyrotechnick> >>> 1+1
21:46 < CoverSlide> who owns ecmabot?
21:46 < gkatsev> inimino maintains it
21:46 < gkatsev> it's an open source project
21:47 < gkatsev> https://github.com/oftn/oftn-bot
21:48 < etcetera> s5fs: what does iterm give me that terminal does not?
21:49 < s5fs> etcetera: not certain, i don't use mac. however, many of my mac friends dig iterm vs standard terminal.app. i know it supports windows splitting, tabbing, etc but i don't know how much of that is also in terminal.app
21:51 < CoverSlide> splitting and tabbing are in terminal.app
21:51 < CoverSlide> but i think it's only horizontal split
21:52 < rauchg> speed
21:52 < rauchg> it's faster at repainting 
21:52 <@mbalho> noticabl?
21:52 < rauchg> (anecdotal evidence)
21:52 <@mbalho> +y
21:52 <@mbalho> rauchg: also hello from dublin, sucks youre not out here
21:53 < rauchg> :'(
21:55 < CoverSlide> i say use termkit
21:55 < exit2> I'm coming from Django which has a lot of 'batteries included' like auth, templates, etc.. Am I going to need to get a couple of dependencies to do the same with node?
21:56 <@mbalho> node isnt a web framework so you'll have to rely entirely on third party modules for that stuff
21:57 < Azra-el> hello guys.. any freelance devs available and interested in a chat?
22:00 < sgorthi> I have a dependency that is checked out locally in a lib/ folder
22:00 < sgorthi> how do i add a reference to it in my package.json file?
22:00 <@mbalho> put it in node_modules
22:00 <@mbalho> if its a node module
22:00 < s5fs> exit2: take a look at express, it's a popular web framework and pretty quick to get started with
22:01 < sgorthi> I would not like to check-in the node_modules folder
22:01 < sgorthi> into my version control
22:01 < sgorthi> there seem to be some issues when i run npm install lib/module_name
22:02 < pyrotechnick> new node logo: http://thenounproject.com/noun/binder-full-of-women/#icon-No6451
22:02 < exit2> s5fs: does it have those additional features like auth?
22:02 < sgorthi> i'd rather my colleagues just run npm install --dev (or something like that) and have the module added to node_modules
22:02 < deoxxa> sgorthi: don't put it in lib
22:02 < deoxxa> sgorthi: also don't check in node_modules if you don't want to, it's your choice
22:02 <@mbalho> pyrotechnick: what does that have to do with node?
22:03 < exit2> s5fs: I'm really interested in having a full stack of js, seems awesome
22:03 < sgorthi> deoxxa: how would you configure your package.json to let users install all dependent modules before running node code?
22:04 < sgorthi> i have a node module checked out with customizations that i need them to install before running the node app
22:04 < deoxxa> sgorthi: http://package.json.jit.su/ see the "dependencies" part
22:04 < CoverSlide> pyrotechnick: http://bindersfullofwomen.tumblr.com/
22:06 < nym> i have objects full of women
22:06 < sgorthi> deoxxa: I did read that, and tried to add something like this to my dependencies: { ... "cucumber": "lib/cucumber-custom-js", ... }
22:06 < CoverSlide> i have streams full of women
22:06 < sgorthi> it was not able to pick it up
22:07 < Raynos> what is this
22:07 < nym> i has a question! i am trying to deliver json data to an RIA app, and I'm considering trying to make an websocket style server to deliver json streams on demand
22:07 < pyrotechnick> that's not a question
22:07 < nym> let me get to it
22:08 < deoxxa> sgorthi: that's not how it works
22:08 < deoxxa> sgorthi: packages get installed to node_modules
22:08 < nym> but the problem with doing that is we would loose the advantage that a CDN provides
22:08 < deoxxa> sgorthi: then you require them with require("module-name")
22:08 < pyrotechnick> nym: how fresh is the data?
22:08 <@mbalho> nym: cdns are good for static assets, but there are geographically distributed data centers if you just care about low pin gtimes
22:08 < nym> do you guys know of anyone who has done this kind of json streaming?
22:09 < CoverSlide> ... what, what do you need a CDN for?
22:09 < nym> hosting static JSON content
22:09 < sgorthi> deoxxa: I see. How do I package my module with a customized dependency then?
22:09 < nym> we have a lot of static JSON
22:09 < sgorthi> maybe that's a better question
22:09 < sgorthi> i'd rather not have to pull it from npm registry
22:09 < deoxxa> sgorthi: check it into git
22:09 < sgorthi> i know it's the right way to do it
22:09 <@mbalho> nym: if you need to stream it and the JSON is sufficiently large you can just read it from a cdn over http and use a streaming json parser in client side js
22:10 < sgorthi> but that's not an option
22:10 < nym> mbalho: streaming json parser??
22:10 < deoxxa> sgorthi: write code that can predict the future then, and ask it to generate your library on installation. i don't know.
22:10 < nym> this is news to me
22:11 < nym> btw, my client is a web browser
22:11 <@mbalho> nym: https://github.com/dominictarr/JSONStream
22:11 < nym> just found https://github.com/dscape/clarinet 
22:11 < nym> mbalho: do you recommend?
22:11 < sgorthi> uh oh. I hope I can stop asking dumb questions then. 
22:11 < sgorthi> let me try again
22:11 <@mbalho> nym: clarinet is sax based and doesnt have a query language so it is hard to use
22:12 <@mbalho> nym: jsonstream works pretty well though, i have streamed ~1 million objects into google chrome with it
22:12 < nym> mbalho: okay, i need a solution that works in modern web browsers
22:12 < sgorthi> the version of the dependency checked into npm registry does not have the bug fixes present in the github repo for that module
22:13 <@mbalho> nym: https://github.com/maxogden/browser-csv-stream
22:13 <@mbalho> nym: oh wait
22:13 < sgorthi> to prevent future problems like this, and to work on a known version of the module, i'm trying to have that module checked out locally into a folder
22:13 <@mbalho> nym: that doesnt do json, it does csv
22:13 <@mbalho> nym: here ya go https://github.com/maxogden/streaming-xhr-example
22:13 <@mbalho> nym: http://max.iriscouch.com/oakland_assessor/_design/streaming-xhr/_rewrite this streams json using JSONStream
22:13 <@mbalho> nym: and a single XHR
22:14 < nym> awesome, i knew this question was good for this channel (as opposed to #jquery or ##javascript)
22:14 < sgorthi> i was wondering if i could add a reference to the dependency checked out locally to my package.json's dependencies or devDependencies so that developers could do npm install --dev to configure their environment to get working
22:14 < pyrotechnick> #web is decent too
22:14  * nym is surprised
22:14 <@mbalho> nym: you'll have to learn about browserify and how to package node modules for use in the browser
22:15 <@mbalho> nym: but other than that its pretty straightforward
22:15 < nym> np, easy
22:15 < CoverSlide> FORESTWIZARD IS THE TREE MASTER
22:15 <@mbalho> nym: i think the only tricky thing is you have to use the buffer browserify thing that was linked in the readme of the csv streaming thing
22:15 < nym> neat, this example is from maxogden
22:15 <@mbalho> nym: though since then i believe Buffer might be available in the normal browserify distribution 
22:15 <@mbalho> nym: yea thast me
22:15 < substack> wow so the OTHER web conf party is really loud
22:16 < substack> can hear it from my hotel room
22:16 <@mbalho> substack: yea its down the street
22:16 <@mbalho> substack: im in the library now
22:16 <@mbalho> substack: dominic just went to bed
22:16 < CoverSlide> and you're just sitting there masturbating?
22:16 < substack> right-o
22:19 <@mbalho> substack: whats the easiest way nowadays to get modules that expect Buffer to run in browsers with browserify?
22:21 < nym> mbalho: we met and talked about a year ago at singly
22:22 < substack> mbalho: window.Buffer = require('buffer').Buffer before you do any requires
22:22 <@mbalho> nym: oh sweet, whats ur twitterz
22:22 <@mbalho> substack: sweet
22:22 < nym> mbalho: you expanded my understanding of trust networks wrt dns, malware, etc
22:22 < nym> mbalho: @nym
22:22 <@mbalho> ahha sweet
22:23 < nym> mbalho: the streaming example is bad ass
22:23 <@mbalho> svg kills the browser though
22:23 < nym> although it doesn't work if you don't have the console open
22:23 <@mbalho> it works when chromes console is open
22:24 < nym> yes- i guessed that was the case
22:24 <@mbalho> nym: but yea, streaming data is awesome. people usually only care about DSLs and middleware though and arent really using node for what it is designed for :/
22:26 < nym> mbalho: i am a fan of dart, but my gut is leading me to dartlang 
22:26 < nym> *i'm a fan of nodejs, but my gut is leading me to dartlang
22:27 <@mbalho> ahh nice, i havent really played with it. i like node because its simple and the modules are plentiful
22:37 < mscdex> node.js rules!
22:38 < CoverSlide> there are no rules
22:40 < s5fs> CoverSlide: i think that's the only rule
22:40 < CoverSlide> s5fs: you don't rule me!
22:40 < s5fs> or as my mom used to scream, "do whatever you want, try to disobey that!"
22:40 < exit2> so in node if I do a huge db query, I can load the rest of things and not have to wait on that, right?
22:41 < CoverSlide> exit2: true
22:44 < dazld> hey, i've installed node and npm with brew on osx
22:44 < dazld> everythign is ok, but the global packages aren't being picked up
22:44 < dazld> like, if i do npm install -g express
22:44 < dazld> then in bash, i should be able to do express etc etc
22:44 < dazld> but that's not happening
22:45 < dazld> i can see the packages in teh npm folder
22:45 < dazld> does osx not let you have those commands in bash?
22:45 < dazld> it works fine on my desktop (ubuntu)
22:46 < CoverSlide> dazld: do you know what PATH means?
22:46 < dazld> I do
22:47 < dazld> are you saying to add each module individually to the path?
22:47 < CoverSlide> no
22:48 < dazld> so..?
22:48 < dazld> if npm needs an extra path config on osx
22:48 < dazld> i dont know what that is
22:48 < exit2> what handles db models and api?
22:48 < exit2> or is it just raw sql?
22:48 < CoverSlide> executable files are files not folders
22:49 < CoverSlide> modules are contained in folders
22:49 < dazld> i found it
22:49 < dazld> usr/local/share/npm/bin
22:49 < CoverSlide> way to go!
22:49 < dazld> does npm not add itself to the path by default..?
22:50 < CoverSlide> should it?
22:50 < dazld> certainly should
22:50 < CoverSlide> if you say so
22:50 < dazld> or at least pop up a message saying "do this"
22:51 < dazld> for dribbling noobs such as i
22:51 < CoverSlide> seems to be a problem with brew
22:52 < dazld> yup
22:52 < ChrisPartridge> dazld: yeah, get rid of your brew version and just compile it
22:53 < dazld> ah, i'm done already
22:53 < dazld> and brew is pretty cool generally
22:53 < CoverSlide> https://github.com/mxcl/homebrew/blob/master/Library/Formula/node.rb#L114-118
22:53 < dazld> 0.8.12 is the version in brew
22:54 < dazld> node
22:54 < CoverSlide> it seems it does tell you
22:55 < dazld> missed that then
22:56 < CoverSlide> whoa, just found out you can't reopen a closed tab in chrome porn mode
22:57 < CoverSlide> slightly annoying but thankful that it works
22:57 < ChrisPartridge> :|
22:58 < s5fs> CoverSlide: haha!!
23:01 < fnguest> hi, i'm trying to use async.parallel but i can't get the callback function to run.  my test code is here: http://pastebin.com/0xDwF2ta
23:01 < fnguest> can anyone see what i'm missing?
23:04 < ChrisPartridge> fnguest: pretty sure each parallel method needs to call a callback
23:05 < fnguest> that's what the example has but i thought it might be optional
23:05 < ChrisPartridge> nope
23:05 < dazld> is there some way to fire up a local server from an arbitrary directory?
23:06 < dazld> i normally make an apache vhost
23:06 < dazld> but that's pretty longwinded
23:06 < dazld> like, rails s will start a server in the current directory
23:06 < ChrisPartridge> web server? just use the http server, or express/connect
23:07 < dazld> im not really doing much node as a server development
23:07 < dazld> (yet)
23:09  * etcetera really wished terminal allowed for using mouse and keyboard shortcuts to position cursor
23:10 < sgorthi> etcetera: ctrl+a not working for you?
23:30 < pyrotechnick> substack: so. much. win. https://github.com/substack/undirender
23:31 < substack> I needed it for things.
23:31 < substack> anyways the line algorithm is slightly off
23:31 < substack> I just ripped it out of surrender but modified it
23:31 < pyrotechnick> yeah that's what i'm thinking
23:31 < pyrotechnick> is it bad to use unicode?
23:32 < substack> who cares
23:32 < pyrotechnick> thattaboy
23:33 < pyrotechnick> you restore my faith in humanity
23:33 < pyrotechnick> anyway madprops, as you were
23:33 < pyrotechnick> keep calm and node on
23:39 < draginx> Is there a way to export the node path to all of the users on the system?
23:40 <@mbalho> dazld: npm install -g http-server, then type http-server in a directory
23:49 < timoxley> draginx I think you can add it to /etc/profile or /etc/environment or something like that
23:50 < timoxley> draginx or you could symlink it into somewhere that's already on the path
23:51 < timoxley> e.g. /usr/local/bin/
23:53 < exit2> what do you guys use for db queries/api?
23:55 < duko> hi i'm wondering if anyone has an opinion on the best way to attach listeners to form controls
23:55 < duko> i'm overwhelmed by the choices for doing this
23:55 < Raynos> ...
23:55 < duko> attaching one listener for all of the most common events and having those call added callbacks
23:55 < timeturner> attach listeners to form controls?
23:56 < timeturner> what does that have to do with node
23:56 < ChrisPartridge> duko: ##javascript
23:56 < duko> you've got me. I'm off-topic
23:59 < madhums> I am writing tests, I am looking for a good module to stub data (like factorygirl in rails), using mongodb in the backendâ€¦ any suggestions?
23:59 < madhums> I am using mocha
--- Log closed Thu Oct 18 00:00:28 2012
