--- Log opened Sun Apr 28 00:00:59 2013
00:01 < SrPx> kevireilly: where do you suggest I declare a 3 lines long independent class?
00:02 < TehShrike> SrPx: it might be easier to try to think of modules as units of functionality, not definitions of data structures
00:02 < Industrial> looks like it already works like that, nice!
00:03 < SrPx> TehShrike: so again, how am I supposed to declare a 3 lines long class? Where? Just put everything in the same file? On my project? 
00:04 < TehShrike> SrPx: constructor functions should be inside the module that creates those objects
00:06 <@isaacbw> SrPx: are you coming from a java background?
00:07 <@isaacbw> a "three lines long class" is a very java-ish thing to say
00:10 < Industrial> How do I test these methods in isolation? https://gist.github.com/Industrial/90a22a19db837aecfcd8/5ecaa93f29bfea84d80c3e2e583cfbcc7cf23a88#file-1-observer-test-js-L94
00:13 < owen1> i plan to have many node daemons that are 'subscribers' to muliple queues in RabbitMQ. each subscriber have different kind of job and i want to be able to deploy and manege each one independently from the others. what patterns/npm packages/ideas should i look into?
00:13 < owen1> each subscriber can be on the same host, or even on a different host.
00:14 < owen1> one package that came to my mind is fleet. i never used it so if anyone did, or got other ideas, please share!
00:20 < Industrial> http://stackoverflow.com/questions/16258254/how-do-i-test-methods-that-are-to-be-used-together-in-isolation :] I guess the question was more suited for SO
00:36 < curvedmark> is it that streams are only meant to work with bufs & strs? e.g., if a parser gets a str and outputs an ast, which will be used in later stages. it's not appropriate to implement each stage as a steam?
00:36 < deoxxa> curvedmark: streams can work with objects
00:37 < deoxxa> curvedmark: in fact, streams are often a really nice way to work with objects
00:38 < curvedmark> but for example, if i implement the parser as a transform stream, I just output the transformed ast?
00:39 < curvedmark> the highWaterMark option in readable & writable streams seems to suggest that the data to be working with need to have the concept of length...
00:40 < deoxxa> with {objectMode: true} streams, highWaterMark refers to the number of objects/elements
00:41 < curvedmark> deoxxa, missed that one, I will give it a try, thanks
00:42 < deoxxa> curvedmark: streams are pretty great
00:43 < curvedmark> deoxxa, i thought so, banging my head against the wall to understand it. :)
00:43 < deoxxa> curvedmark: check out https://github.com/deoxxa/flvee - i made it the other day and it emits objects
00:44 < owen1> is there a convention to write function declarotion before it's usage? 
00:45 < owen1> (js is hoisting them, but maybe there is a reason not to relay on that aspect of the language?)
00:45 < deoxxa> owen1: i usually do, but only because it seems to make the code easier to understand
00:46 < owen1> deoxxa: i try to set the guidlines for my team regarding node and curious if i should mention that.
00:46 < owen1> it's not part of felix style guide
00:47 < howdynihao> i dont like it when people do var i,a,b,c,d,e,t,f,a,g,y,h,w; up top
00:48 < owen1> howdynihao: i was talking mainly about functions, but why don't u like it?
00:48 < howdynihao> well it applies to functions too
00:49 < owen1> true
00:49 < DaMorpheuS> hey guys I have a security question... Can someone take over a websocket connection once it is made???
00:49 < owen1> howdynihao: it seems like felix agree with u - http://nodeguide.com/style.html#variable-declarations
00:49 < howdynihao> i think its easier to read that way instead of globbing all your declarations in one place
00:52 < curvedmark> and using var inside an if is a strong indication that it's tmp, and will not be used in another branch, if you are doing it right.
00:52 < curvedmark> deoxxa, thanks for your code, very helpful
00:52 < deoxxa> \o/
00:52 < mscdex> curvedmark: until you start using the same "tmp" name in multiple blocks
00:53 < curvedmark> mscdex, i think it's fine to use tmp in multiple branches, as long as you always give them initial values.
00:57 < mscdex> curvedmark: but then you make the linters cry!
00:57 < curvedmark> use jshint and allow shadow should ease it. :)
01:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:06 < DaMorpheuS> I have a security question... Can someone take over a websocket connection once it is made???
01:07 < deoxxa> DaMorpheuS: what
01:08 < DaMorpheuS> i make a secure connection through a websocket and provide a session id to the client. Can someone take over that connection to pretend to be the client that has the session
01:09 < deoxxa> DaMorpheuS: well, the client can take it over
01:10 < DaMorpheuS> i mean someone else? then the client that is intended to have the connection
01:10 < deoxxa> DaMorpheuS: if they can intercept the traffic somehow, sure
01:10 < DaMorpheuS> uhmm anyway to make it really secure to get something from the client that is unique?
01:10 < deoxxa> DaMorpheuS: but like, they'd have to have already broken ssl or compromised one of the ends of the connection
01:11 < DaMorpheuS> or be in the middle of it!
01:11 < howdynihao> well before that
01:11 < M2Ys4U> that's what SSL is for...
01:11 < howdynihao> the easiest solution would probably be to guess the socket id
01:11 < deoxxa> if they can break ssl, sure
01:12 < DaMorpheuS> but ssl is secure enough to keep the most out ofcourse
01:12 < DaMorpheuS> but thanks for the answers that would be enough for now i guess
01:13 < howdynihao> no but seriously socket id guessing
01:13 < howdynihao> i mean you're not going to break ssl
01:14 <@isaacbw> goddamn domain squatters
01:17 < waynedb> i'd like to run a node script that runs another command and then exits when the other command is done. what do i do for that? child.exec? won't node exit before the callback if the command takes a while?
01:17 < waynedb> i also hate domain squatters
01:19 <@isaacbw> no
01:19 < waynedb> waah
01:20 <@isaacbw> child.exec is fine
01:20 <@isaacbw> or child.spawn
01:20 <@isaacbw> node won't exit until all the callbacks have been called which can be called
01:20 < waynedb> ok that's what I wanted to hear
01:20 <@isaacbw> that's the event loop magic
01:21 < waynedb> sweet, thanks so much for clarifying that. easier than testing :)
01:21 <@isaacbw> no problem
01:21 <@isaacbw> it's always good to just try something out though
01:21 <@isaacbw> you'll have a much better understanding
01:22 <@isaacbw> and sometimes people like me just make shit up to break the silence
01:22 < waynedb> oh yeah, i got the code built already
01:25 < waynedb> you know what I love about node? it's going to replace batch files for me on Windows.
01:26 <@isaacbw> hah okay. Well I'm glad node can do that for you
01:26 < waynedb> the only batch files (or power-shell scripts) i'll be writing from now on will be to do things that node can't do quickly and easily
01:26 <@isaacbw> why on earth didn't you do that a long time ago with python or even perl though ;P
01:26 < waynedb> too much setup
01:27 < waynedb> node is so tiny and it downloads the rest with npm
01:27 <@isaacbw> ah
01:27 < waynedb> and uncomplicated and...otherh people (windows devs) know javascript
01:27 <@isaacbw> is there any particular reason you're doing development on windows in the first place?
01:28 < waynedb> well gee, because it's the best os ever maybe?
01:28 < waynedb> lol
01:28 <@isaacbw> heh
01:28 < gluxon> waynedb: Is that being said through the eyes of not seeing any other OS's? :(
01:28 < waynedb> no seriously, i like it as a desktop better than anything else, no kidding
01:28 < curvedmark> admit it, you are a gamer.
01:28 < howdynihao> sim city
01:29 < gluxon> waynedb: What have you tried?
01:29 < howdynihao> why you take forever to come out for os x
01:29 < gluxon> APT is awesomeness.
01:29 < gluxon> That can't be argued. Windows applications don't have a central updating system.
01:29 < waynedb> i have a macbook pro sitting next to me, i have decent enough nix skills to tackle just about anything i want to...i just like the windows desktop
01:29 <@isaacbw> windows does have nice chrome, but I usually just alt tab between an editor, a browser, and a terminal anyway
01:30 < waynedb> i have tried all the major distros starting way back in the 90s with redhat
01:30 <@isaacbw> if you ever decide to take another stab at linux, try xfce
01:31 < howdynihao> i paid for linux back in the day
01:31 < waynedb> my first job i maintained 2 public bind servers and built a dmz for them and a couple of web servers with ipchains...worked a lot with asterisk/freeswitch, yada yada yada
01:35 < paulkon> windows desktop + unix vm + sublime text 2
01:35 < paulkon> the sweet spot
01:38 < curvedmark> paulkon, i considered that combo, will network sniffing inside unix vm become hard?
01:44 < howdynihao> when companies put up things like trusted by, or, some of our customers... and they list them, isn't there privacy concerns?
01:44 < waynedb> curvedmark: i believe that vmware and virtualbox support promiscuous mode, hyper-v does not.
01:46 < waynedb> curvedmark: scratch that, it's esx server that supports it and vbox only supports it for internal networks (eg. virtual networks)
01:49 < curvedmark> waynedb, i'm worried a middle layer of that complicity that tries to be transparent will always be a trouble.
01:49 < curvedmark> *complexity
01:50 < waynedb> not sure what you're saying
01:51 < curvedmark> waynedb, that network sniffing will give indirect or even incorrect results inside a vm
01:51 < waynedb> oh yeah, i'd be concerned too
01:51 < waynedb> for network sniffing, maybe get a small device like an arduino
01:51 < waynedb> or rasberry pi
01:52 < waynedb> maybe just run your normal nix stuff in your nix vm
01:54 < daverocks> hi
01:54 < waynedb> i am loving this new windows 2012 server turned workstation that i built. newish quad core xeon with 32gb of ram and a few TB of disks - hyper-v runs all my vms in the background and i just ssh or rdp into them
02:13 < paulkon> client side event emitters are the stuff
02:34 < RobW> Node newb. Can someone give me an idea of what a missing callback error is?
02:34 < RobW> Playing with the fs methods, recieved fs: missing callback Error: ENOENT, rename file.
02:34 < gagan0123> Is there any good CMS for Node which is having theme support?
02:34 <@isaacbw> RobW: you probably need to pass a callback
02:35 <@isaacbw> ;)
02:36 <@isaacbw> does anyone remember that css/js framework for making presentations?
02:36 <@isaacbw> I forget what it's called
02:37 <@isaacbw> ah, impress.js
02:40 < MikeLax> question, has anyone used zombie.js against secure URLs with a self-signed ssl certificate using node >= 0.10.x?
02:41 < curvedmark> @isaacbw, the objectMode option of writable stream is not documented. Is it intentional?
02:43 < happyGilmorian> RobW, did you specify a call back to the fs method?
02:48 < curvedmark> ok, I thought you were izs, sorry about the pinging.
02:48 < howdynihao> that isnt isaac?!
02:50 < curvedmark> i don't know, that seems to be https://npmjs.org/~isaacbw
02:50 <@isaacbw> ahoy
02:50 < howdynihao> ive been fooled
02:50 < howdynihao> all this time
02:52 <@isaacbw> the topic comes up at least every other day
02:52 < RobW> happyGilmorian: I did not. Is it required?
02:53 < happyGilmorian> RobW, as far as I know yes
02:53 < RobW> isaacbw: There's another one (presentation framework) called reveal.js
02:53 < RobW> A little nicer, IMO
02:54 <@isaacbw> oh cool
02:55 < curvedmark> how do I make a transform stream to have a objectMode writable end and non-objectMode readable end? Since both readable & writable streams use the objectMode option?
02:56 < happyGilmorian> RobW, are you doing a fs.readFile(filename)   and leaving out the callback?
02:57 < MikeLax> sorry, computer crashed, has anyone figured out how to use zombie.js connect to a server with a self-signed ssl cert using node .10?
02:57 < RobW> happyGilmorian: I'm doing a fs.rename('app/css', 'app/' + this.cssDir);, leaving out the callback. If I don't care what happens after, how would I deal with this?
02:58 < RobW> Or, do you have any suggestions, as they would be appreciated.
02:58 < zomg> MikeLax: Haven't used, but have you tried adding the cert to the list of accepted certs on your box?
02:58 < mscdex> pass in a noop function
02:59 < happyGilmorian> RobW, fyi I'm a newbie myself. but I would just pass an empty function… is anything actually happening though, it the file actually reading cuz I would expect that "callback" to be where it actually read the file and did something with it
03:00 < MikeLax> zomg: yes I already have the cert installed in my keychain
03:01 < erockk> can anyone pass along any good learning resources they've come across? I'm new to node, but I think it's way cool
03:01 < happyGilmorian> erockk, personally i like codeschool
03:01 < happyGilmorian> codeschool.com
03:02 < RobW> happyGilmorian: from looking at other examples it seems I should pass an error catching function in as the callback. Seems to work.
03:03 < erockk> happyGilmorian: is that free or subscription based?
03:03 < happyGilmorian> RobW,  mscdex had mentioned using a noon function, may want to look into that too. I'm not familiar with it but seems similar to the empty function idea
03:03 < MikeLax> i am 99% sure the issue was introduced in node .10 where by default "unauthorized" certs are rejected by default instead of accepted
03:04 < RobW> happyGilmorian: Thanks.
03:04 < mscdex> happyGilmorian: it's the same exact thing, but you can reuse the function
03:04 < happyGilmorian> erockk, it's subscription based but worth it to me… if you're a new you can at least look at the first one for free
03:05 < happyGilmorian> mscdex, do you have to set it like a property before reuse or can you just use as-is?
03:05 < erockk> happyGilmorian: nice, ill check that out, thanks
03:06 < happyGilmorian> erockk, just tested… looks like the first 3 are free, definitely worth it
03:06 < happyGilmorian> erockk, it's like 5-10 minute videos with quick hands on, so gets your feet wet and makes easier to understand documentation online afterward
03:07 < erockk> happyGilmorian: so think think watch those, and then jump into docs afterwards?
03:08 < erockk> and maybe try to build something myself at the same time
03:08 < happyGilmorian> erockk,  everyone learns differently, for me that works best because I'm a conceptual guy but still need hands on to actually remember it
03:09 < happyGilmorian> erockk, that's the approach they use.. quick useful spurts of knowledge so it works really good for me so I recommend it for others too… but yeah you have to build something with the knowledge to get the whole picture
03:10 < happyGilmorian> erockk, if you have 15 minutes worth of free time, I say try it. you can use up the free stuff and then move on to docs… no need to pay
03:11 < mscdex> happyGilmorian: you just keep the function around, like at the root of your module scope and refer to it by name everywhere you don't care about the callback used
03:11 < erockk> happyGilmorian: will do, thanks for the advice
03:12 < happyGilmorian> anytime
03:13 < happyGilmorian> mscdex, oh ok thanks
03:16 < happyGilmorian> I know this isn't an angularjs room, but struggling to get this node operation to work with angularjs…. 
03:17 < happyGilmorian> mscdex, I'm using a web socket to pass a string of javascript… it arrives at the client (angularjs) is found, but can't get it to eval (run)
03:17 < paulkon> I've realized that programming is mostly about how quickly how pick things up and apply them
03:17 < happyGilmorian> any ideas? that's for anyone
03:18 < happyGilmorian> paulkon, I'm still realizing that…. I noticed that I have a tendency to get in my own way on the mental front
03:18 < paulkon> sometimes you just have to nail in a concept though
03:19 < paulkon> I remember when I was confused about instances and 'this' in a variety of different contexts...took me a while but I realize now that I got it only after trying it for myself
03:19 < paulkon> reading about it just enough to get the idea
03:20 < paulkon> and no more than that usually
03:20 < happyGilmorian> yeah my issue it that I sometimes get stuck in a particular implementation
03:20 < paulkon> then just whip out the node repl and try out everything you possibly can
03:20 < paulkon> all the questions you have in your mind about a concept
03:20 < paulkon> just write them and press enter
03:21 < paulkon> and see what gets returned
03:21 < happyGilmorian> I either try a different solution (not knowing why the first didn't work after a while) or got stuck too long a a bad direction till I almost forget the other route (and that was the solution all along)
03:21 < paulkon> yeah that happens to me now and then too
03:22 < paulkon> but eventually you'll figure out how to keep on track and turn your focus when things feel like they've taken a large tangent
03:25 < RobW> OK, so it looks like what I'm trying to do is use exec synchronously and call two functions that rely on it's output when finished. Can anyone recommend a good tutorial on writing async/sync code, or how to bend my mind around async style nodejs when I'm used to procedural php?
03:26 < RobW> (slash procedural js, synchronous ruby)
03:28 < happyGilmorian> RobW, lol… code school talks about this exactly, I watched a short vid on it
03:29 < RobW> thanks again!
03:29 < happyGilmorian> you can use readFileAsync… at worst but I think you may have to get passed that cuz node is all about async
03:29 < happyGilmorian> non-blocking
03:29 < howdynihao> what if its the other way
03:30 < howdynihao> i wonder if in #php anyone is asking they're coming from thinking in async and trying to wrap their heads around sync code in php
03:30 < happyGilmorian> fs.readFile('filename', function (err, content) { function1(content); function2(content) });
03:31 < happyGilmorian> most code is sequential & blocking so probably not to norm to come the other way around but can be if async is the way a developer learned from the beginning
03:31 < happyGilmorian> brb
03:34 <@isaacbw> so I just set emacs to use a non-monospaced font for the first time ever and it seels amazing
03:34 <@isaacbw> *feels
03:35 <@isaacbw> this is crazy
03:49 < erockk> this might be a dumb question, but after writing $ node hello.js in the terminal, how can I do $curl http://localhost:8080 without stopping the server?
03:50 < erockk> it just gives me a blank line that i can't write commands on
03:50 <@mbalho> erockk: open up 2 terminal windows
03:51 < erockk> aha, thanks mbalho
03:59 < danneu> isaacbw: i'll try iti
04:00 <@isaacbw> danneu: pick a good one like droid sans and make sure you have an awesome color theme
04:00 <@Nexxy> color schemes are important
04:01 < danneu> i would guess that stuff wouldnt line up anymore right?
04:02 <@isaacbw> right
04:02 <@isaacbw> well, the starts of lines do
04:03 < danneu> in case anyone is wondering, it makes Clojure unreadable
04:03 < danneu> in case yall were waiting on my weigh in
04:04 <@isaacbw> but clojure is already unreadable by design, silly
04:06 < danneu> comic sans makes it all worthwhile
05:01 < geri> how can i run binaryserver async?
05:03 < sshaun> Hi, New to node.js. I'm converting a PHP app to Node and it uses requirejs to load front-end scripts. Works fine in the PHP version. In the Node version, the assets are being loaded out of order. I'm guessing it has something to do with async, but Im not sure how to debug
05:07 < geri> sshaun, socketio?
05:08 < sshaun> geri: Nope. Just regular ole requirejs on the frontend. No idea why its not working on the node app. afaik, Im not doing anything specia
05:08 < sshaun> special*
05:14 < geri> sshaun, how do you connect to the node.js from the client?
05:20 < sshaun> Sorry, forgot to mention I'm using expressjs to serve up the page. https://gist.github.com/simshaun/6e552ba6df27244fb82d
05:20 < sshaun> geri:
05:20 < sshaun> But, the php vs node is irrelevant, as this is front-end code
05:22 < geri> sshaun, do you use socket.io?
05:22 < sshaun> no
05:22 < sinclair-work> does anyone know what i can find the js code behind require() ?
05:22 < sinclair-work> is there any js code behind require ?
05:26 < mhhegazy> hey noder
05:27 <@mbalho> require() is part of node.js
05:38 < sinclair-work> mbalho: ok
05:39 < sinclair-work> mbalho: is global.process.mainModule.paths a garenteed way to find all the module search paths in node?
05:41 < Bonuspunkt> https://github.com/joyent/node/blob/master/lib/module.js <-- there should be the require code
05:41 < Bonuspunkt> you can debug into with with ex. node-inspector
05:53 < FortuneDays> Thoughts on using node.js for an IRC client?
06:22 < sshaun> Anyone using winston and express?
06:24 < MI6> joyent/node: Fedor Indutny master * f2d5cea : benchmark: add chunked-encoding benchmark (+4 more commits) - http://git.io/uFcBvA
06:25 < echoSMILE> for those who use socket.io, is this line "for(var client in io.sockets.clients(channel)) { count++ }" to heavy to constantly run on node?
06:33 < medice> who knows, everything is so poorly documented
06:37 < echoSMILE> medice: I mean, iterate a object that can have 10 or 100 entries you know?
06:37 < echoSMILE> or 1000
06:38 < echoSMILE> and this running in paralel like a lot of times, can put things slow?
06:42 < MI6> joyent/node: isaacs master * 9cfc929 : doc: stream writev cleanups - http://git.io/bKtqRg
07:10 < geNAZt> echoSMILE, loops are bad
07:10 < geNAZt> they block the event loop
07:33 < echoSMILE> geNAZt: roger that. tks
07:38 < geNAZt> a little example
07:38 < geNAZt> https://gist.github.com/geNAZt/5476203
07:39 < geNAZt> foreach is 100% faster
07:40 < doug> huh
07:40 < doug> node_modules/mocha/bin/mocha app/test/server/account-manager-test.litcoffee
07:40 < echoSMILE> geNAZt: but even forEach are not a good thing to do inside node right?
07:40 < doug> Error: Cannot find module '../app/server/modules/account-manager'
07:41 < doug> clearly, `require '../app/server/modules/account-manager'` isn't quite right in the test
07:41 < geNAZt> its better then using for, while or such loops
07:41 < echoSMILE> dont know why i was using the for() was the only one,
07:41 < ningu> echoSMILE: why not?
07:42 < Dev_G> hey guys I am trying to reterive value from a array inside for loop in Soda/nodejs to fill dynamic value but it is giving me undefined error
07:42 < Dev_G> browser.assertText('css=div.keyYears table tbody tr:nth-child('+i+') td:nth-child(3)',''+ cellsData[startRowId].numValue +'',function(){ console.log(' =>  balance )})
07:43 < Dev_G> not identifying  cellsData[startRowId].numValue
07:43 < echoSMILE> ningu: get the number of users will be something running lot of times even for one unique user, I can't imagine this to all. Imagening that can be up more than 1.000.000 users :/ 
07:43 < Dev_G> startRowId=27
07:43 < Dev_G> TypeError: Cannot read property '27' of undefined
07:43 < geNAZt> echoSMILE, if you only want to count the users
07:43 < geNAZt> do
07:44 < ningu> echoSMILE: I would not worry about that. v8 is quite efficient with forEach afaik.
07:44 < geNAZt> Object.keys(io.sockets.clients(channel)).length
07:45 < echoSMILE> geNAZt: right, was why I dont get why i was using the for() there, but then I have something inside the loop like:
07:45 < echoSMILE> if(!io.sockets.clients()[client].disconnected){
07:45 < echoSMILE> I don't know for sure if disconnected users will remain inside channels
07:45 < geNAZt> well socket.io deletes disconnected sockets or not ?
07:46 < echoSMILE> geNAZt: I need to deal with that or socket.io do it by him self?
07:48 < Dev_G> hey guys I am trying to reterive value from a array inside for loop in Soda/nodejs to fill dynamic value but it is giving me undefined error
07:48 < Dev_G> browser.assertText('css=div.keyYears table tbody tr:nth-child('+i+') td:nth-child(3)',''+ cellsData[startRowId].numValue +'',function(){ console.log(' =>  balance )})
07:48 < Dev_G> not identifying  cellsData[startRowId].numValue
07:48 < Dev_G> startRowId=27
07:48 < Dev_G> TypeError: Cannot read property '27' of undefined
07:49 < Dev_G> function testSpreadsheet(){ var startRowId=27 return function(browser) {for (var i = 1; i <= 4; i++) { browser.assertText('css=div.keyYears table tbody tr:nth-child('+i+') td:nth-child(3)',''+ cellsData[startRowId].numValue +'',function(){ console.log(' =>  balance )})}}}
07:51 < geNAZt> Dev_G: please use a pastie, gist or something, code in irc is hard to read
07:51 < geNAZt> and second on which data does this happen ?
07:54 < Dev_G> geNAZt  let me create a pastie
08:03 < Dev_G> geNAZt   http://pastie.org/7732120
08:26 < beg> How would I create a diff patch and json strings effeciently on a http server?
08:26 < beg> diff patches*
10:07 < SomeoneWeird> hrm, how do you compile js into the node binary again?
10:08 < SomeoneWeird> there was a file you could add to the config that gets compiled into it
10:09 < r04r> SomeoneWeird: https://github.com/crcn/nexe ?
10:09 < SomeoneWeird> nah, there was a custom library you could include in the actual node source
10:10 < r04r> ah alright
10:10 < r04r> idk then sorry
10:10 < SomeoneWeird> allgood
10:10 < squeakytoy> what do you guys think of a filename convention like "car.factory.js"
10:10 < squeakytoy> or "string.util.js" or "database.service.js"
10:11 < SomeoneWeird> why not put them in another directory?
10:11 < squeakytoy> oh, having both
10:17 < squeakytoy> if i have an empty text file, how many lines does it have? :-)
10:18 < GlitchMr> 0 or 1. It depends on your definition of line.
10:18 < squeakytoy> 3
10:29 < satazor> hey guys, quick question about getting the last modified date of a directory (including its files). fs.stat only accounts for the modification date of the directory which is predictable. Is there any library that you guys know that has files into account? 
10:30 < geNAZt> stat also can read modify from files
10:30 < satazor> geNAZt: I know, ultimately I will have to do a little functions that walks the directory recursively
10:31 < satazor> and calls fs.stat for each entry and finds the MAX mtime
10:31 < satazor> little function*
10:31 < satazor> I was hoping there was a little module that already does this. I've searched npm and couldn't find.
10:32 < satazor> Actually I've found one, but it does too much by caching old values and just comparing with new ones. So it only gives true if it changed since last check and false otherwise
10:32 < satazor> but I just want the mtime of it
10:32 < geNAZt> https://github.com/coolaj86/node-walk
10:35 < booyaa> squeakytoy: sounds like you'll be cursing when you decide you change your namespaces
10:35 < squeakytoy> when does that ever happen :P
10:35 < squeakytoy> srsslylsy
10:36 < booyaa> has anyne come across a vim plugin that allows me to refactor/extract code as function using select?
10:36 < booyaa> regex is cool, but a pita to remember
10:46 < shmoon> can someone tell me how this sourcemap thing works with browserify, i add --debug option it generates some base64 encoded sourcemap at end but i cannot debug the files separately, its still a single file?
10:51 < substack> shmoon: the files are included in the base64 blob
10:51 < substack> if you have a recent version of chrome with source maps enabled the developer tools will let you set breakpoints and see exceptions across the original files
10:53 < shmoon> substack: yeah but i see the single large file only, can't see different original files under Sources tab, am i getting something wrong?
10:53 < snuggl> booyaa: you want to cut/move a function def?
10:54 < substack> shmoon: upgrade your chrome version
10:54 < substack> or turn source maps on
10:55 < shmoon> substack: i turend source maps on, chrome version is 26.0.1410.63 - pretty mu ch latest
11:00 < booyaa> snuggl: yes, but not just a straight cut and paste. can already do that using vV select
11:00 < booyaa> i'd like to highlight a section of code, cut it and paste it a new function
11:01 < booyaa> with the required number of arguments as the function signature
11:02 < booyaa> i think i'm gonna haev to write it... haven't found anything yet. well not for js. maybe i could cannablise other languages python and ruby
11:03 < snuggl> booyaa: http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim read that first answer
11:04 < snuggl> its a primer to vim marks and registers
11:04 < snuggl> using V to cut is really ineffective =)
11:05 < snuggl> i go back to that post every now and then to get rid of stupid keymashing that finds it way into me editing from IDEs and whatnots
11:06 < snuggl> booyaa: ooh, create a new function from selection, nm me 
11:06 < booyaa> there's a trade off on how much energy i want to spend learning the nuances of vi/m and getting on with code. example: using syntastic/jshint to make sure my js isn't crap, let see what else is making my life easier :)
11:06  * booyaa peeks in his vim bundle
11:06 < booyaa> snuggl: yeah dude i never write good clean code first time around
11:07 < booyaa> usually start refactoring once the ufnction starts to scroll lol
11:07 < snuggl> anyway, that guide is one of the best writeups on vim navigation/registers and are a worth read
11:08 < booyaa> using tabular, tagbar (nice way to nav through code), tcomment (awesome block commenting action) and powerline
11:08 < booyaa> yeah i should...i suspect this is why there is no refactor plugin
11:09 < snuggl> booyaa: snippy/snippetsemu might do what you want
11:09 < booyaa> will have a peek cheers
11:09 < snuggl> it can do templated boilerplate and let you insert stuff instead of the placeholders
11:09 < booyaa> tell you whose a bit of a ninja in vim peteris krumins
11:15 < geNAZt> does someone know a good dependency manager for nodejs ?
11:22 < geNAZt> how can i access a function arguments list without calling the function itself ?
11:27 < booyaa> geNAZt: re: function argument list within an ide? like code completion?
11:27 < booyaa> or documentation?
11:27 < geNAZt> function test($logger, $http) { console.log(arguments) };
11:28 < geNAZt> and i want to know that function test requires logger and http
11:28 < geNAZt> but 
11:28 < geNAZt> >> function test($logger, $http) { console.log(arguments) };test.arguments;
11:28 < purr> geNAZt: (object) null
11:30 < booyaa> function test($logger, $http) { console.log(arguments) };test.toString()
11:30 < booyaa> >> function test($logger, $http) { console.log(arguments) };test.toString()
11:30 < purr> booyaa: (string) 'function test($logger, $http) { console.log(arguments) }'
11:30 < booyaa> scrappy i know you could then regex bvetween ()
11:31 < booyaa> i think arguments is called during excuting
11:31 < booyaa> tion
11:31 < geNAZt> well that would be dirty as hell
11:31 < geNAZt> :D
11:37 < booyaa> geNAZt: you can get the number of args by a calling length
11:37 < booyaa> but that's not what you want
11:37 < geNAZt> yes
11:37 < geNAZt> i want to know how angular does it
11:37 < booyaa> which is odd that you can do that... ah
11:38 < booyaa> then in that case i've got the answer  :D
11:38 < geNAZt> they have a injector which injects the right service in the controllers
11:38 < booyaa> http://stackoverflow.com/a/13660631/105282
11:38 < booyaa> if you haven't seen it already
11:38 < booyaa> or not
11:38 < geNAZt> nice found
11:38 < geNAZt> but its based on regex 
11:39 < geNAZt> and i need to parse the whole function body
11:40 < geNAZt> but it works nice
11:40 < geNAZt> i will try it thanks
12:37 < devdoo> I'm getting an interesting error: ".delete() requires callback functions but got a [object Undefined]"
12:37 < devdoo> I have a DELETE route that acts the same as the others.
12:40 < devdoo> Jk...
12:40 < devdoo> Function name was wrong.
12:55 < r1chard> Bilge, I'm here too, now which channel is worst.
12:59 < sinclair-work> does anyone here mind if i go off on a random TypeScript rant
13:00 < sinclair-work> devdoo: delete may be a reserved keyword
13:00 < sinclair-work> random TypeScript rant anyone?
13:02 < r1chard> sinclair-work, I'm curious about your typescript rant
13:03 < r1chard> sinclair-work, because I'm switching my entire codebase to it
13:03 < sinclair-work> r1chard: really? 
13:03 < r1chard> sinclair-work, yes.
13:03 < sinclair-work> r1chard: ts on node sucks atm
13:04 < r1chard> sinclair-work, there are issues indeed. To be fair most of my code is browser code, mostly relying on jQuery.
13:04 < r1chard> For Node.JS one problem is you need declarations.
13:04 < jonno11> I've only just seen this channel's topic. So good hah
13:04 < sinclair-work> r1chard: TS in the browser is great, TS on node is rubbish
13:04 < r1chard> "Ask a question, get a random stranger's strong opinion!" hehe
13:05 < sinclair-work> r1chard: i have been trying to work out why TS on node is so rubbish
13:05 < r1chard> sinclair-work, I'm willing to agree with that. Hopefully things will change. What weaknesses have you found
13:05 < sinclair-work> r1chard: most of the weaknesses come down to workflow
13:05 < sinclair-work> and commonjs module loading
13:05 < r1chard> sinclair-work, do you compile at runtime or you use --watch
13:06 < NodeJS> Hello evetyone
13:06 < sinclair-work> r1chard: i have been recompiling in the past, but after many many hours, i have worked out i don't like it
13:06 < NodeJS> Does anybody tried to make facebook iframe application on nodejs?
13:06 < sinclair-work> r1chard: that is trying to node on TS in and out of Visual Studio, i couldn't make anything gel
13:07 < r1chard> sinclair-work, specifically?
13:07 < sinclair-work> r1chard: make change, build ts, run node, repeat
13:08 < sinclair-work> r1chard: i have written a .net application that runs a bunch of build scripts on file change, even then, its stupid
13:08 < sinclair-work> r1chard: if you are porting your code base to TS, node is fully capible of compiling TS on the fly
13:09 < r1chard> sinclair-work, maybe you can either make VS run node for you, or use --watch to compile on every save automatically.
13:09 < sinclair-work> i wrote my own application to do that
13:09 < sinclair-work> r1chard: personally, i think its better to compile TS on the fly
13:10 < r1chard> sinclair-work sure.
13:10 < sinclair-work> r1chard: its hard to pinpoint all the little things that make TS on node difficult, things like....
13:10 < sinclair-work> var http = require("http") // in node would be....
13:10 < sinclair-work> import http = module("http") // in TS
13:11 < sinclair-work> however
13:11 < sinclair-work> if you have written something in node_modules, then you have an issue
13:12 < sinclair-work> you either have to then build declaration files, (which lack node specific declarations that take into consideration node_modules directory layout)
13:12 < sinclair-work> you end up hacking it with....
13:12 < sinclair-work> import mymodule = module("node_modules/mymodule/index"); for example
13:13 < sinclair-work> r1chard: from what i have seen, none of the npm packages are taking into consideration TS's commonjs module loading scheme
13:14 < sinclair-work> r1chard: anyway, on one side you have the wonderfully tight language of TS, on the other you have the absolutely borked workflow that hinders you more than it helps
13:15 < sinclair-work> r1chard: its so much of a hindrance on node, its no wonder people resort to JS
13:16 < sinclair-work> r1chard: anyway, i am currently working on a TS on node, compile on the fly binding for node, something that solves all TS's current workflow problems, 
13:19 < sinclair-work> r1chard: in all tho, its still worth porting your code to TS, at some point in future, there should be a wealth of code analysis tools, as well as generics and other awesome language features
13:27 < r1chard> sinclair-work, yup, TS 0.9 already has generics
13:28 < sinclair-work> r1chard: yeah, it does, im looking forward to it, but not so much upgrading my code to it, they rewrote the compiler, 
13:29 < Bergle_2> TS is typescript ? 
13:35 < sinclair-work> Bergle_2: yes
13:39 < mscdex> TS is terminal server!
13:58 < joebobjoe> I'm trying to test my javascript project with testem, but I can't seem to get testem working with any of the BDD frameworks on Windows. Can anyone have a look at my error msg to help me out?
14:14 < ePirat> when using node http client api, close OR end will fire, never both, right?
14:15 < ePirat> for some reason when destroying the request, on mac os 'end' is emitted, on windows it emits 'close'…
14:26 < mscdex> ePirat: both can be emitted
14:27 < ePirat> so how can I prevent executing things twice?
14:28 < ePirat> It is not important for me if it is an end or close… just should do something when the request terminated
14:29 < mscdex> ePirat: i would use a guard variable and listen for both events
14:29 < ePirat> that wouldn't work with multiple requests at the same time, would it?
14:29 < geNAZt> well end gets emitted if the stream (connection) ended
14:29 < geNAZt> close gets called if the socket closes (either on end or on error)
14:30 < ePirat> so close is called, no matther what happens?
14:30 < ePirat> *matter
14:30 < geNAZt> yes
14:30 < mscdex> `var isClosed = false; function onfinish() { if (!isClosed) { /* do something */ }} conn.on('end', onfinish); conn.on('close', onfinish);`
14:30 < mscdex> er and set `isClosed=true` inside that if-block ;-)
14:31 < geNAZt> but end != close
14:31 < mscdex> ePirat: the only thing might be it takes a little long for 'close' to happen
14:31 < mscdex> compared to 'end'
14:33 < ePirat> Indicates that the underlaying connection was terminated before response.end() was called or able to flush.
14:33 < ePirat> Wouldn't that mean it only is emited when end isnt?
14:33 < ePirat> *confused*
14:33 < mscdex> no
14:34 < mscdex> for TCP connections, the 'end' event is emitted when a TCP FIN packet is received
14:34 < geNAZt> close is also emitted if the socket closes without an error
14:34 < mscdex> the 'close' event is generally when a TCP RST packet is received
14:35 < geNAZt> or the connection closes without notification
14:36 < squeakytoy> anyone can recommend a unit test framework for node?
14:37 < geNAZt> i use jasmine
14:37 < Havvy> jasmine or mocha
14:37 < mscdex> i use node core's test framework
14:38 < ePirat> thanks mscdex and geNAZt 
14:45 < pellis> before I build this: anyone knows of a good Hash "masher" ? i.e. given an Array of Hashes, merge them all together based on a common key, and based on a conflict resolution strategy (here: merge) ?
14:45 < geNAZt> wait what ? :D
14:45 < pellis> geNAZt: refering me?
14:46 < geNAZt> y
14:46 < pellis> well, imagine an array of objects.
14:46 < pellis> within this array, you have similar objects (how do you define similarity? let's say by property "ID")
14:47 < geNAZt> ok
14:47 < pellis> if I have 2 Person objects with the same ID, but in one i have a phone #, and in another i have a "name", i want 1 Person object with both (this is conflict resolution = merge)
14:47 < pellis> so lets imagine a function:   supermerge("ID", Conflict.MERGE, arrrayOfHashes)
14:48 < geNAZt> well i would first try to find the conflicts
14:48 < geNAZt> and then extend them
14:48 < pellis> geNAZt: i have this implemented already. i'm thinking of wrapping it up as a library and pushing to npm
14:48 < pellis> before I waste time on cleaning it up, i'm wondering if anyone already did that
14:49 < pellis> also if this already exists I would love to throw away my code and use someone else's - less code to maintain
14:50 < pellis> it sounds like something substack would have...
14:52 < ome> Hello people,
14:52 < geNAZt> hi, ome
14:52 < ome> Here is my code, http://pastebin.com/nmbLXybT, baiscally it's a loop based on events, how can I force stop it?
14:52 < ome> hello geNAZt :)
14:53 < geNAZt> why coffeescript -_-
14:53 < ome> Ops, there was a typo, here it is: http://pastebin.com/cdf3Dfqk
14:53 < ome> geNAZt: Because it's fast, but hold up, I write it in vanila js.
14:54 < geNAZt> coffeescript is fast ? faster then js
14:54 < geNAZt> ololol
14:54 < geNAZt> :D
14:54 < Sven_vB> maybe faster to write
14:54 < geNAZt> maybe
14:54 < pellis> my guess was correct (I think). substack has everything :) https://github.com/substack/hash-join
14:54 < geNAZt> but for me its harder to read
14:55 < geNAZt> because i hate the coffee syntax
14:55 < Sven_vB> what kind of event shall force-stop the loop?
14:55 < Sven_vB> ome, --^
14:56 < ome> here is the vanila js, http://pastebin.com/gWQxyqL9.
14:56 < geNAZt> so you always run the loop
14:56 < geNAZt> and never step out of it ?
14:56 < ome> Sven_vB: I am not sure about that, I would like to stop this event when ever I recieve a `stop` event from the client, websockets.
14:57 < geNAZt> first of all what is the goal of this piece of code ?
14:57 < ome> geNAZt: Yes, it goes forever, given that there is always a `query` in the `data` but how do I stop it even if there is a `query`.
14:58 < geNAZt> is it all synced ?
14:58 < geNAZt> or does it use async calls in the backend ?
14:58 < Sven_vB> ome, first you'd have to make sure that node has a chance to process other events in between calls to getData, i.e. add a delay or something. then in your delayed callback, check whether your stop flag has been set.
14:59 < Sven_vB> if it is set, abort. there may be some promise libraries around with a revoker scheme for that task.
15:00 < ome> Sven_vB: Yeah, that is what I thought of, using a flag, but I was hopping there is smore elegent or at least magical way to do it.
15:00 < Sven_vB> btw, make sure each instance of the "loop" has its own stop flag.
15:00 < Sven_vB> a more elegant way would be to use futures
15:01 < geNAZt> or fibres
15:01 < ome> http://pastebin.com/4h4ivWPJ, there was a bit of a confusing naming before.
15:01 < niggler> isn't it fiber geNAZt 
15:02 < geNAZt> is it called fiber ? sry :D
15:02 < geNAZt> https://github.com/laverdet/node-fibers
15:03 < Sven_vB> i should start using fibers to build all my web apps.
15:03 < geNAZt> why ?
15:03 < geNAZt> :D
15:06 < mscdex> callbacks all the way down!
15:07 < geNAZt> forever a callback
15:07 < squeakytoy> if i publish something at npm, how often can i update it?
15:07 < geNAZt> there is no limit i guess
15:07 < ome> mscdex: It's like putting two mirrors spiral into infinitay. :D
15:07 < geNAZt> my shortest update time was 2 minutes
15:07 < geNAZt> :D
15:07 < squeakytoy> is it recommended it update an npm project.. 2 times a day?
15:07 < mscdex> squeakytoy: as long as you're not DDOSing npm, i think you'll be fine
15:08 < geNAZt> squeakytoy, if you need to
15:08 < ome> ok, thanks geNAZt and Sven_vB, I looked into Fibers and Futures, but I am not really sure what they are.
15:08 < squeakytoy> i have started an open source project, got it on github too, but maybe npm would be nice repository too
15:08 < squeakytoy> hm
15:08 < ome> Any decent article or a short explianation would be very lovely. :)
15:08 < Sven_vB> geNAZt, well, i used to build by interwebz with threads, but it was hard to find bugs with them
15:09 < geNAZt> ome, fibers help you in function execution control
15:09 < geNAZt> you can stop execution or pause execution of functions
15:09 < ome> Does npm host your projects too? I thought they mirrored github or other repos.
15:09 < Sven_vB> with fibers it might be easier to try and catch them
15:09 < mscdex> ome: npm stores tarballs of your modules
15:09 < mscdex> ome: when you publish
15:10 < mscdex> ome: you can link to repositories and other places in your package.json too if you want
15:10 < ome> geNAZt: So in my example, I would need to have the whole App inside a fiber? or have a fiber inside app.getdata?
15:13 < geNAZt> well i would try to make a fiber inside of app.getdata
15:41 < glosoli> Hello folks, I am trying to find some workaround for some of node modules to be precise karma and grunt-karma,  grunt-karma seems to bundle karma with it, so question is: if I execute any command being in the dir which holds grunt-karma it will run the modules that are specific for that workspace, instead of using globals ? 
15:43 < geNAZt> it will use the globals
15:44 < glosoli> so by priority it is globals if none available will fall to locals ? 
15:44 < geNAZt> no
15:45 < geNAZt> if you have karma installed as a local module
15:45 < geNAZt> it doesnt have any binary
15:45 < glosoli> aaah understood
15:45 < geNAZt> if you install it in global it creates a binary
15:45 < glosoli> thanks geNAZt
15:45 < Sven_vB> there might still be a binary in ~/node_modules/.bin
15:46 < geNAZt> global => installation of node applications
15:46 < geNAZt> local => node modules which could be used in your code
15:46 < geNAZt> yeah might be
15:46 < glosoli> but modules can also be globals
15:46 < glosoli>  ? 
15:46 < geNAZt> yes
15:46 < glosoli> Interesting, I seem to like node so far
15:46 < geNAZt> you also can link globals down to locals
15:47 < geNAZt> but globals doesnt get read by node i think
15:47 < geNAZt> so if you do npm install socket.io -g
15:47 < geNAZt> and try require('socket.io') it will fail
15:48 < glosoli> Hmm
15:49 < Sven_vB> that sounds like a bug
15:49 < Sven_vB> even probably a site-local one
15:49 < RobW> Javascript newb question: If you have a variable and a method in an object that could have basically the same name, is there a convention that people follow to indicate var and method?
15:49 < geNAZt> well i think its intended to be so
15:50 < Sven_vB> i'll try that with locomotive and hope the results are applicable to socket.io as well
15:52 < Sven_vB> where do i put that "-g"? "sudo npm install -g locomotive" installs into my home directory, no idea why i should use sudo for that anyway
15:53 < geNAZt> for normal the npm tries to install it in the local lib
15:53 < geNAZt> and for that it needs root
15:53 < geNAZt> i did npm install sails -g
15:54 < geNAZt> it installed it to /usr/local/lib/node_modules/sails
15:54 < geNAZt> created a binary in /usr/local/bin
15:54 < geNAZt> and i cant require it
15:54 < Sven_vB> oh i see. there seems to be something very wrong with the path. observe the duplication inside my home dir. /home/sven/lib/node_modules/lib/node_modules/locomotive
15:54 < glosoli> linux requires sudo last time I checked
15:54 < glosoli> :)
15:54 < Sven_vB> no wonder node cannot find it that deep
15:55 < geNAZt> you have compiled node with a prefix i asume ?
15:57 < MikeLax> hi all, has anyone been able to get the env variable mentioned in this pull request to be recognized using mocha:  https://github.com/joyent/node/pull/4023
15:59 < geNAZt> which env variable ?
15:59 < geNAZt> oO
16:00 < geNAZt> you mean: NODE_TLS_REJECT_UNAUTHORIZED
16:00 < MikeLax> sorry, yeah, NODE_TLS_REJECT_UNAUTHORIZED
16:00 < Sven_vB> genNAZt, i didn't compile it, i installed npm via an ubuntu ppa
16:01 < MikeLax> i set it within a makefile, and try to run a single test, in the test case I log the env variable and it displays true, but the test is still failing with an error [Error: SELF_SIGNED_CERT_IN_CHAIN]
16:02 < geNAZt> well the NODE_TLS_REJECT_UNAUTHORIZED must be '0' (string)0
16:12 < MikeLax> geNAZt: I saw that in his message, how do you make an env variable an explicit string?  here is my two line makefile:
16:12 < GOMADWarrior> FATAL ERROR: JS Allocation failed - process out of memory
16:13 < MikeLax> test:
16:13 < MikeLax> 	NODE_TLS_REJECT_UNAUTHORIZED=0 \
16:13 < MikeLax> 	mocha test/desktopweb/ajax-feed-test.js -R spec --timeout 30000
16:16 < genazt-laptop> well i would try to NODE_TLS_REJECT_UNAUTHORIZED='0'
16:18 < MikeLax> i just tried single and double quotes and same error
16:19 < genazt-laptop> is the NODE_TLS_REJECT_UNAUTHORIZED in the process.env when you start the test ?
16:20 < MikeLax> yeah, because this statement in my test prints 0:  console.log("the reject value is:  " + process.env['NODE_TLS_REJECT_UNAUTHORIZED']);
16:20 < MikeLax> thanks for the help so far, I  have to run now.  i'll be back online later
16:20 < genazt-laptop> can you log the type of it ?
16:21 < MikeLax> i didnt try that, but i suspect the type (not being a string) could be causing the issue
16:26 < GOMADWarrior> please help
16:26 < GOMADWarrior> im getting FATAL ERROR: JS Allocation failed - process out of memory
16:32 < genazt-laptop> well your app needs more ram then v8 can handle
16:32 < genazt-laptop> :D
16:32 < niggler> you can allocate outside of v8
16:33 < niggler> but you need a C module for that
16:33 < niggler> *C++
16:33 < ome> Sven_vB: Try/Catch did the trick, I set a flag and then throw an exception from the callback which then return from the top level function, `app.getdata`.
16:33 < ome> Thanks a lot for the help.
16:34 < genazt-laptop> but for the most time it is a memory leak inside your js
16:40 < Sven_vB> ome, i think with that architecture you might run into stack overflow sooner or later. if not you, then other users of your module.
16:41 < Sven_vB> ome, if you go deep into a long stack, it also means that you lose parallelity
16:42 < Sven_vB> there should really be better solutions to whatever made you choose that path
16:44 < genazt-laptop> well throw something other then a exception ?
16:59 <@isaacbw> that's not really worth worrying about
17:01 <@isaacbw> wait, throw an exception from the callback?
17:01 <@isaacbw> bad
17:01 <@isaacbw> http://bit.ly/ZX9j0f
17:02 < genazt-laptop> well whats the "good" way to get out of a loop of async recursion ?
17:03 < niggler> genazt-laptop cry uncle
17:03 < niggler> or just pass an empty callback
17:06 < genazt-laptop> ome posted this: http://pastebin.com/4h4ivWPJ
17:06 < ome> isaacbw: http://pastebin.com/4h4ivWPJ How would I go about closing that?
17:06 < ome> genazt-laptop: Ah, same timing. :)
17:06 < genazt-laptop> and i think breaking out of the async loop with a throw can work
17:10 < niggler> oh yeah isaacbw: you can't just say something is MIT licensed
17:10 < niggler> you actually have to include the license
17:10 <@isaacbw> I realized that I forgot for that project
17:11 <@isaacbw> I think I have a LICENSE file with most of the others
17:11 <@isaacbw> hah, keeping me in check 
17:11 < niggler> license niggler
17:12 < Regis_> should i use buffers
17:13 <@isaacbw> ome: you could clean that up with events
17:13 < niggler> GOMADWarrior don't use Buffers but do use Buffer
17:14 < niggler> isaacbw https://gist.github.com/Niggler/5426452 (work in progress)
17:15 <@isaacbw> holy shit that's hilarious
17:15 <@isaacbw> hah
17:15 <@isaacbw> now you need it to automatically leave comments
17:16 < niggler> the problem isaacbw is that some repos use COPYING
17:16 < niggler> others use LICENSE-MIT.txt or LICENSE.txt or LICENSE.md
17:16 < niggler> and there's no easy way to query for a full file listing using the github API
17:17 < niggler> the "right thing" is to clone and peek at the files, but then it's not a nice one-line pipeline
17:17 <@isaacbw> I love that you included a license for your one liner script
17:17 < niggler> its a real problem isaacbw 
17:17 < s_e> would be useful if github offered a way to tag licenses with metadata
17:17 <@isaacbw> niggler: it seems like something that should be a feature of github itself
17:17 < niggler> my concern s_e is that people would slap a free license without actually verifying if its appropriate
17:18 < niggler> isaacbw:  http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html
17:18 <@isaacbw> as long as GPL is big red text explaining why it's shit
17:18 <@isaacbw> *has
17:18 < s_e> ahem s/shit/onlyappropriateifyouknowwhatyouregettinginto
17:18 <@isaacbw> or at least explaining why it can cause a lot of heartache
17:19 < s_e> ^^
17:19 < niggler> s_e https://github.com/stephen-hardy/xlsx.js is licensed under the "Microsoft Office Extensible File License" which is definitely not open source
17:19 < niggler> and every once in a while someone uses that code in a project and slaps an MIT or GPL license without actually reading the license
17:20 < niggler> s_e: https://github.com/stephen-hardy/xlsx.js/issues/8 
17:20 <@isaacbw> oops
17:20 < niggler> lol
17:20 < niggler> isaacbw: https://github.com/isaacs/ahyane/issues/1 (even isaacs tripped up)
17:22 < niggler> but it's better as a community if we are all careful to appropriately license code (and to point it out to others) but I would rather see thousands of unlicensed repos than one repo improperly applying a license
17:25 <@isaacbw> I wish there was a permissive license that was explicit about using portions of code or forking
17:25 < s_e> not sure i have the legal awareness props to understand that thread ><
17:26 < s_e> github needs its own license then isaacbw? :)
17:27 <@isaacbw> or at least a license that understands the github workflow
17:27 <@isaacbw> I guess github would have the klout to throw its own license into the fray
17:27 < niggler> what do you mean isaacbw 
17:27 <@isaacbw> man, that seems like a good idea
17:27 < s_e> how would that be different to e.g. BSD?
17:28 < niggler> forking is a form of copying
17:28 <@isaacbw> niggler: I'm thinking in terms of transplanting functions and the like from larger projects
17:29 <@isaacbw> when I do that I tend to just consolidate all of the transplanted code into a single file or two and stick the original license at the top
17:29 <@isaacbw> but that isn't conducive to the organic nature of open source development
17:30 < s_e> again, if license meta data existed github could do that for you.
17:30 < niggler> a more modest goal would be a blanket license
17:30 <@isaacbw> maybe an example (not necessarily a good one) of a git-friendly license would require you to maintain a file referencing the original commit and files that pulled in the code, and then after tha commit you can do whatever you want
17:31 <@isaacbw> as long as your HEAD still has a reference to the original commit with the in-tact merge
17:31 < ashnur> this licensing stuff is crazy.
17:31 < ashnur> i don't understand why people go with it
17:31 < niggler> what happens if someone violates in-between isaacbw 
17:31 < s_e> because copyright is implicit
17:31 < niggler> that is to say, B forks A but does so in a noncompliant way
17:31 < niggler> then C forks B in a compliant way
17:31 <@isaacbw> I see
17:32 < ashnur> probably it is for the same reason they get licenses for using medical marijuana
17:32 <@isaacbw> well, my example probably wouldn't be good :P
17:32 < niggler> the issue is that, without an explicit statement, the author retains copyright
17:32 < ashnur> niggler: that is stupid
17:32 < ashnur> i mean, i know it is the law. but it is stupid
17:32 <@isaacbw> niggler: if you pull in someone else's code which has the same license as yours, is it enough to just add their name to your authors list?
17:32 <@isaacbw> I don't think so, right?
17:33 < Bubo> hi
17:33 < niggler> isaacbw here's a compliant example: https://github.com/Niggler/js-xlsx/blob/master/LICENSE
17:34 < niggler> isaacbw: "'jszip.js' is a modified version of JSZip, Copyright (c) Stuart Knightley, David Duponchel, Franz Buchinger, Ant'onio Afonso.  JSZip is dual licensed and is used according to the terms of the MIT License." (which is what the js-xlsx project uses)
17:35 < niggler> which is why, in general, it is better to keep transplanted functions and code in separate files
17:35 < niggler> and to avoid stack overflow and expertsexchange
17:35 < niggler> hey Bubo 
17:36 < myhrlin> they should really change that name, I definitely had issue parsing expertsexchange
17:36 < s_e> stack is great for understanding, i'm not sure i would copypasta from there though
17:36 < niggler> myhrlin they also use experts-exchange now
17:36 < myhrlin> excellent
17:36 < ashnur> myhrlin: what is the problem with expert sex change?
17:36 < ashnur> isn't that what is about?
17:36 < myhrlin> nothing wrong if there's good money involved
17:37 < myhrlin> don't want to disrupt commerce clauses as it were
17:37  * myhrlin sadly looks at cannabis
17:37 <@isaacbw> niggler: that discourages integrating existing solutions into your own codebase. You are basically forced to maintain it as a separate component
17:38 < niggler> i don't disagree isaacbw (it does add friction) but unfortunately we can't assume that everyone else is diligent
17:38 <@isaacbw> I find myself deciding to implement my own solutions just because I don't want the headache
17:38 < niggler> right, which is IMHO the true origin of NIH
17:39 <@isaacbw> I'll remain optimistic that someone will figure out a clever solution
17:40 <@isaacbw> in the meantime maybe someone should write up a guide on correct-licensing for open source developers ;)
17:41 < ashnur> niggler: by the way, i understan you do not like my comments, but I still honestly believe that licenses & copyrights are a solution for a non-existing problem. the issue is not that people are stealing each others work, the issue is that any kind of work can be so valuable that it is worth stolen. in a healthy society well values are shared no such thing is needed. maintaining these lies might be beneficial
17:41 < ashnur> on the short term, but ultimately people should realize that the idea of property, especially digitally copiable property is foolish and laughable. 
17:41 < niggler> I didn't say I didn't like your comments ashnur 
17:41 < niggler> it's all fun and games until someone makes a boatload
17:42 < niggler> then everyone who wrote open-source software will want their piece of the pie
17:43 < ashnur> we are on the verge of times where people will realize that work should have nothing to do with how much services you get from society, and that money is an outdated concept.
17:43 < niggler> if you knew someone was taking your open source code and using it as part of their billion-dollar project, wouldn't you want a piece of the action?
17:44 < niggler> the logical extension of that, ashnur, is something veering close to socialism
17:44 < niggler> if you haven't done so, id recommend that you read thomas more's utopia
17:44 <@Nexxy> 'cause communism works perfectly!
17:44 <@isaacbw> it will be a while until that's true ashnur 
17:44 < zapu> so i have this emscripten compiled code that shits all over my global scope
17:44 < niggler> afternoon Nexxy 
17:44 < ashnur> the OSI guy who responded to my question about what if I just write DAFUQ as a license name said what if i took a photograph and someone stole it and entered it in a contest and won with it :)
17:44 < zapu> is there any way to fix this?
17:45 < zapu> i could iframe it maybe and interact with it that way...
17:45 < ashnur> isaacbw: sooner than you seem to think
17:45 < niggler> zapu wrap the entire thing in a function
17:45 <@Nexxy> ashnur, are you a wizard?
17:45 < ashnur> niggler: i am not sure about what name this should be called. i do not like taking concepts and tagging them with one word
17:45 < Scrat> jade is giving me this after the latest update:
17:45 < zapu> will it work? it doesnt even 'var' its variables
17:45 < Scrat> boolean is not a function at isKeyword (.../node_modules/character-parser/index.js:200:11)
17:45 < zapu> just does Aa = something
17:45 < ashnur> Nexxy: define wizard (no, most definitely not)
17:45 <@isaacbw> add var
17:46 <@Nexxy> ashnur, well it's just that you seem to know what the future will hold :P
17:46 < zapu> its huge and unreadable (emscripten product)...
17:46 < zapu> i'd like to avoid trying to read and edit it
17:46 < niggler> salient point ashnur is that you are being a bit idealistic
17:46 < niggler> which is not a bad thing
17:46 < ashnur> Nexxy: i really hope that i am not wrong about this because the other options is friking scary
17:46 <@Nexxy> I think you're forgetting about entropy
17:47 < ashnur> Nexxy: no, i know exactly what entropy is :)
17:47 < ashnur> it does not work like that.
17:47 <@Nexxy> neither do people :P
17:47 <@isaacbw> is emscripten really that naughty?
17:47 <@Nexxy> there is no utopia coming
17:48 < ashnur> Nexxy: i am sure that humans will not see the end of the universe, but this should be on a scale many orders of magnitudes of smaller
17:48 <@Nexxy> unless you consider extinction a utopia
17:48 < zapu> probably not, I've seen properly namespaced emscripten code
17:48 <@isaacbw> zapu: is this code that you generated?
17:48 < zapu> but this one I have is global, maybe its a setting somewhere in the compiler, I can't really recompile it now though
17:48 < ashnur> Nexxy: i have not talked about an utopia, i am sure there will always be problems. for humans, existence means having problems. 
17:48 < niggler> i wouldn't be surprised isaacbw -- emscripten seems designed to dominate your web app
17:48 < ashnur> it is just that money is obviously an outdated thing.
17:48 <@isaacbw> hmm
17:49 <@Nexxy> ashnur, I disagree
17:49 < niggler> when i said utopia, i referred to a specific concept as explained in the book Nexxy ashnur 
17:50 < niggler> its this island, but in support of the island there are surrounding harbors
17:50 < niggler> and those people in the supporting areas certainly aren't enjoying life
17:50 < ashnur> niggler: i missed that line, sorry. I know about the book, i probably have not read it. i am not sure, must check it again. those types of books are hard for me to remember 
17:50 < niggler> lol ashnur  i made the mistake of initially pursuing a liberal arts degree
17:50 < ashnur> niggler: i don't remember
17:51 < ashnur> niggler: who knows what is a mistake :)
17:51 < ashnur> Nexxy: you disagree that money is outdated? :) 
17:51 <@isaacbw> shit, that's a really deep thing to say
17:51 <@isaacbw> "
17:51 <@Nexxy> ashnur, completely
17:51 <@isaacbw> "who knows what is a mistake"
17:52 < niggler> mistake is a relative term
17:52 < s_e> mind=blown
17:52  * niggler slaps s_e 
17:52 < niggler> face=slapped
17:52 < ashnur> Nexxy: i almost feel like asking things i perhaps should not. so let this topic end. it is already too long, and I do not feel comfortable talking about offtopic things too much. the police will come sooner or later :)
17:52 <@Nexxy> fuck the polic
17:52 <@Nexxy> e
17:52 < niggler> lol Nexxy 
17:53 <@isaacbw> zapu: it really sounds like something emscripten is doing badly
17:53 <@isaacbw> you can't fix it after the fact except to explicitly declare variables
17:53 < niggler> i wouldn't be surprised if CIA agents paid you a visit tomorrow Nexxy 
17:53 <@Nexxy> we will never stop owing people things
17:53 <@Nexxy> money makes it easy to transfer
17:54 <@Nexxy> whether that money is salt or bitcoin
17:54 <@Nexxy> it will never become obsolete
17:54 < Sly> NEXXY <33333
17:54 <@Nexxy> SLY <3333333
17:54 < Sly> I haz new phone and number.
17:54 < Sly> uz want it?
17:54 <@Nexxy> yes, give it to me
17:54 <@isaacbw> I like to think that at some point when we all have replicators we'll have everything we could ever want
17:54 < niggler> woah woah woah bitcoin is a pyramid scheme
17:54 < niggler> thats not how it works isaacbw 
17:54 < ashnur> Nexxy: there is a hidden lie here. 
17:54 < niggler> some people want "more"
17:55 < niggler> some people have defined satiety in relative terms 
17:55 < niggler> zapu https://github.com/kripken/emscripten/blob/master/src/shell.js#L16
17:55 < GOMADWarrior> help im getting  	
17:55 < GOMADWarrior> FATAL ERROR: JS Allocation failed - process out of memory 
17:55 < ashnur> pft
17:55 < niggler> GOMADWarrior check out isaacbw's hashtable
17:55 <@isaacbw> :O
17:56 < ashnur> niggler: that wouldn't help him :)
17:56 < GOMADWarrior> where
17:56 < niggler> ashnur i was getting that same problem
17:56 < zapu> niggler, i fixed it
17:56 < niggler> GOMADWarrior https://npmjs.org/package/hashtable
17:56 < zapu> wrapped whole thign in function
17:56 < ashnur> niggler: probably for very different reasons. I hope that it is for different reasons :D
17:56 < zapu> and manually fixed some vars and thises
17:56 < niggler> cool beans zapu but it's tragic that emscripten pollutes the global namespace
17:56 < niggler> you should file an issue
17:56 < zapu> it "starts", i dont really care if it breaks
17:57 <@isaacbw> zapu: just be careful. If there's already a variable in global scope with the same name then your function will overwrite it
17:57 < zapu> its just for a talk
17:57 <@isaacbw> oh
17:57 < zapu> so ill just f5 if it fails for some reason
17:57 <@isaacbw> loool
17:57 < zapu> I mean, I want to be able to "restart" the emscripten program
17:57 < niggler> I'm surprised that mozilla hasn't made a spider monkey equivalent of nodejs
17:57 < zapu> or "rerun" it
17:57 <@isaacbw> we need a page to paste #node.js quotes
17:57 < zapu> :D
17:57 < niggler> shit #node.js says?
17:57 < zapu> is "ill just f5" a good quote?
17:57 <@isaacbw> "screw this, I'll just use silverlight and asp.net"
17:58 <@isaacbw> that made my night
17:58 < zapu> lol
17:58 < niggler> hehe isaacbw that was great
17:58 < s_e> wat?
17:58 <@Nexxy> niggler, I thought I heard brendan talking about it
17:58 <@Nexxy> but I don't pay attention to him so I have no clue what became of it
17:58 < niggler> s_e yesterday
17:58 < niggler> 02:18:04	<lilred>	I think I'll just use SilverLight + ASP.NET, screw this
17:58 < medice> it's a valid strategy
17:59 < s_e> but what for?
17:59 < niggler> Nexxy its sad that mozilla (with the inventor of JS) hasn't won the browser wars or the JS engine wars
17:59 <@Nexxy> > SilverLight
17:59 < ashnur> isaacbw: i had such a page for the hungarian php irc channel for years. 
17:59 <@Nexxy> I think it speaks to the open nature of teh web
17:59 < niggler> silverlight was discontinued i thought
17:59 <@isaacbw> netflix still uses it for its web client
17:59 < ashnur> isaacbw: btw, how it is with the regex challenge site?
17:59 <@isaacbw> though apparently they're switching to html5
18:00 < s_e> everyone has been switching to html5 forever :/
18:00 <@isaacbw> ashnur: I don't think I'm the right person to think up good puzzles
18:00 < niggler> its a slow process s_e
18:00 <@isaacbw> I would rather solve them than make them
18:00  * s_e sets fire to ie<9
18:00 < niggler> ashnur you are making a regex challenge ?
18:01 < s_e> I'm convinced that ie<9 is the root of all the world's ills.
18:01 < ashnur> niggler: no, it was isaacbw who said it would be a good idea, and I said I would like it but I don't think there are that many possible challenges to put up 
18:01 < niggler> s_e the fact that FF doesn't support innerText irritates me 
18:02 < substack> .textContent works at least
18:02 < niggler> but chrome and IE both support innerText
18:02 < niggler> so the question is whether you view it as IE being broken or FF being broken
18:02 <@isaacbw> wait, really? I'm almost certain I've used innerText in ff
18:03 < niggler> http://stackoverflow.com/questions/1359469/innertext-works-in-ie-but-not-in-firefox#1359507 @ isaacbw 
18:03 < s_e> that's a slightly more specific issue than IE not supporting half the modern web
18:03 < niggler> to be fair s_e ie8/7/6 are old
18:04 < ome> I wish, oh so I wish I hadn't give up on node.js when every other day I had to realearn the API.
18:04 < ome> :P
18:04 <@isaacbw> wait, so its not even w3c :P
18:04 < niggler> and people upgrade chrome and FF all the time
18:04 < s_e> they are, yet at least a 5th of the internet still uses them
18:04 < s_e> and in some domains more than half
18:04 < niggler> so it's really users' proclivities to use older versions of IE
18:04 < s_e> (corporate IT)
18:06 < ome> Corporate IT in Australia sucks, the general popluation is very adeptive of new tech, but Corporate word. Some of them would have still use a typewriter if they could.
18:07 < s_e> it sucks more or less everywhere ome
18:07 < niggler> the thing is, in most businesses having the latest technology doesn't matter
18:07 < s_e> UK here, most of my web dev clients request support back to 6 or 7
18:07 < niggler> a restaurant doesn't need cutting-edge software if their existing software serves the purpose
18:08 < doug> use cake, or not use cake?
18:08 <@isaacbw> no one here is going to recommend php doug 
18:08 < niggler> to be fair, php does have its uses
18:08 < ashnur> doug: if you have no other options but php, try lithify.me
18:10 <@isaacbw> codeigniter is alright
18:10 < s_e> laravel, symfony and zend are all respectable and allevate a lot of php nightmares
18:11 < ashnur> s_e: that last word saved you :D
18:11 < s_e> alleviate*
18:11 < ashnur> i was just about to go full rage
18:11 < s_e> oh?
18:12 < ashnur> s_e: i read your line that all of those are nightmares :D
18:12 < RobW_> Is there a node way to move/copy/make a file and it's parent directories in one step?
18:13 < niggler> RobW_ you can always farm out jobs to the shell
18:13 < niggler> but i think stuff like cpr, mvr exist
18:13 < niggler> well, at least cp -R exists: https://npmjs.org/package/cpr
18:14 < RobW_> niggler: Thanks a bunch!
18:14 < niggler> there needs to be a bot here that does npm search
18:14 < niggler> kinda like the bot on ##javascript
18:14 < s_e> and !quotes
18:15 < niggler> so i nominate isaacbw, the resident isaac, for that task
18:15 < s_e> make one, I heard node can make things like that :P
18:19 < ashnur> niggler: i really miss ecmabot from here
18:19 < ashnur> if i had a server for a bot i would've already asked to set it up :)
18:19 < mscdex> > 'there is already a javascript bot here!';
18:19 < mscdex> aw
18:19 < mscdex> >> 'there is already a javascript bot here!';
18:19 < purr> mscdex: (string) 'there is already a javascript bot here!'
18:19 < mscdex> there we go
18:19 < ashnur> oh
18:20 < niggler> purr needs to do more
18:20 < ashnur> !find 
18:20 < niggler> ideally it'd do stuff like 
18:20 < ashnur> !help
18:20 < niggler> !npm foobar
18:20 < mscdex> why?
18:20 < ashnur> just like ecmabot does mdn
18:20 < niggler> and it'd say something like
18:20 < ashnur> mscdex: because it is convenient
18:20 < niggler> foobar: a test module <https://npmjs.org/package/foobar>
18:20 < mscdex> opening up a terminal and doing `npm search foo` is too hard?
18:20 < ashnur> maybe even links for the node api
18:21 < niggler> its for the benefit of others mscdex
18:21 < niggler> others are asking
18:21 < niggler> bam! module reference
18:21 < ashnur> mscdex: that is not the point
18:21 < s_e> not everyone has a node env ready and waiting :)
18:21 < niggler> plus some people use ipads
18:21 < mscdex> then there's npmjs.org
18:21 < mscdex> ;-)
18:21 < ashnur> when someone asks a question on ##javascript and I know he is looking for a DOM api method, i can just do something like: 
18:21 < s_e> so many clicks!
18:21 < ashnur> !mdn appendChild @ <nickname>
18:22 < niggler> btw mscdex your ssh module doesn't show up when you search for ssh
18:22 < ashnur> and the bot will the asker the link
18:22 < niggler> its on the dreaded page 2
18:22 < mscdex> or you could just say, <nickname>: appendChild
18:22 < mscdex> niggler: not my fault :-)
18:22 < ashnur> mscdex: that would require them to realize what I am talking about, and that they have to google it. 
18:22 < niggler> the fact that you forgot how the javascript bot works, mscdex, is evidence that the bot needs an overhaul
18:23 < mscdex> niggler: it used to accept one >
18:23 < ashnur> mscdex: in the meantime others would respond too. so your one word response is not efficient
18:24 < ashnur> mscdex: i don't say it would be surely useful to you, but I can say that it is useful on #js and i believe it would be useful here too. 
18:25 < mscdex> i'm just skeptical because similar bots have been implemented in here before and hardly used
18:26 < mscdex> and then disappeared :-)
18:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:26 < ashnur> mscdex: i understand
18:26 < niggler> i will use some of my azure time for this purpose
18:26 < niggler> (if you are worried about persistence mscdex )
18:26 < s_e> your time has colours? trippy maaaan.
18:27 < niggler> s_e: http://www.microsoft.com/bizspark/azure/
18:27 < ashnur> :D :D
18:27 < niggler> http://www.windowsazure.com/en-us/offers/ms-azr-0012p
18:27 < niggler> there we go
18:28 < niggler> so i run one small instance and I think there are enough hours per month for 2
18:28 < s_e> lovely
18:28 <@isaacbw> I think me freebie ec2 instance could stand to do some more besides run irssi as well
18:28 <@isaacbw> lol
18:28 < s_e> there are a few of these around
18:28 < niggler> they give perpetual free instances?
18:28 < howdynihao> why dont you guys just use something thats forever free? and not time limited free
18:29 < jdelgado> Azure scares me
18:29 <@isaacbw> niggler: I think it will run out eventually
18:29 < ome> howdynihao: for example?
18:29 < sambarino> i have a free vps, it's meant to be $9/month but they never charge me lol
18:29 <@isaacbw> *my
18:29 < niggler> i am concerned jdelgado that they may suddenly decide to axe it one day
18:29 < howdynihao> ome: appfog.com
18:29 < ashnur> sambarino: that must be convenient
18:29 < ome> niggler: just like nodejitsu did.
18:29 < jdelgado> Yeah, microsoft has a way of doing that niggler 
18:29 < ashnur> heroku also has free option
18:30 < sambarino> yeah, though maybe it's because i am below some kind of bandwidth threshold
18:30 < ome> howdynihao: can't use your own domain, what is the point, sir.
18:30 < niggler> exactly ome
18:30 < ashnur> appfog has no persistent storage, that can be a bit annoying
18:30 < howdynihao> -_- well if you get to that point you should pay
18:30 < jdelgado> mscdex: Really impressive ssh module, I'll have to try it out today!
18:30 < howdynihao> i was talking about for running lowly stuff
18:30 <@isaacbw> https://blog.pinboard.in/2011/12/don_t_be_a_free_user/
18:30 < sambarino> i use webbynode, it's quite legit, similar to heroku i think
18:30 < ome> jdelgado:  what is that impressive ssh module?
18:31 < ome> By the way, I love Mosh.
18:31 < niggler> !npm ssh2 @ ome
18:31 < jdelgado> ome: https://npmjs.org/package/ssh2
18:31 < niggler> lol jdelgado 
18:31 < jdelgado> lol, hey, it's faster!
18:31 < jdelgado> not really but whatever!
18:31 < ome> jdelgado: wow!
18:32 < ome> jdelgado: Mosh is not only about being fast, it's about being able to roam around with your client over different networks!
18:32 < ome> mscdex: Do you use openssl for the encryption?
18:32 < mscdex> ome: built-in crypto, yes
18:33 < niggler> built-in crypto uses openssl
18:34 < jdelgado> mscdex: really well done
18:36 < ome> mscdex: Great stuff.
18:38 < mscdex> http://i.qkme.me/3u533x.jpg
18:40 < ashnur> :)))))))))))
18:40 < ashnur> so, mscdex, you wrote a node ssh client in 2004? :D 
18:41 < mscdex> in a parallel universe, yes.
18:41 < ashnur> :D
18:41 < jdelgado> lol
18:41 < ashnur> too parallel
18:46 < Seventoes> anyone know if saving a document in mongoose will also save modifications to other documents they're referencing?
18:47 < jdelgado> Seventoes: You mean update info that is already in the db?
18:51 < Seventoes> sec lemme whip up some code, not sure how to explain it :P
18:51 <@isaacbw> why do so many people use mongoose instead of the native driver
18:52 < Seventoes> i like mongoose's validation and reference population
18:52 <@isaacbw> ideally you would design your schema to require little if any reference population
18:52 < ashnur> isaacbw: seems very tempting at first sight
18:52 <@isaacbw> :(
18:53 < Seventoes> o rly? 
18:53 < jdelgado> The entire object management layer really helps with huge projects
18:53 < ashnur> it is just like with jquery. many people use it → must be good
18:53 < Seventoes> are there any docs that explain how to do that? i'm not sure i can even figure out how to avoid needing population lol
18:53 < jdelgado> for smaller projects though, I'd just use native
18:54 < jdelgado> Seventoes: What are you trying to do?
18:54 < Seventoes> i'm building an application in which things belong to other things haha
18:55 < gildean> i like mongojs, it wraps the native driver nicely without inference
18:55 < jdelgado> Seventoes: Just build your scheme to reflect that... Only reference the data once - and if you delete something - chain it in your application. If you want that natively, switch to mysql
18:56 < Seventoes> that
18:56 < Seventoes> that's what i was doing, isaacbw said that I should be avoiding it though
18:56 < Seventoes> unless i misunderstood
18:57 < maybach> hello
18:57 <@isaacbw> no, you're right
18:57 <@isaacbw> when using mongo, you should be chanting the mantra: "denormalize"
18:57 <@isaacbw> "denormalize"
18:57 <@isaacbw> "denormalize"
18:57 <@isaacbw> it's the whole reason you're using it over a relational db
18:58 < jdelgado> indeed
18:58  * mscdex shakes a fist at nosql
18:58 < ashnur> haha
18:58 < Seventoes> hmmm ok
18:58 < niggler> what's nosql?
18:58 < jdelgado> lol
18:59 < niggler> is it SQL or not SQL?
18:59 <@isaacbw> as jdelgado said though, you might actually want to use an rdbms
18:59 < niggler> and if its not SQL, why is SQL in the name?
18:59 <@isaacbw> lol
18:59 < niggler> linux isn't notwindows
18:59 < niggler> node isn't noror
18:59 <@isaacbw> I try to say the database explicitly rather than say nosql
19:00 <@isaacbw> and I say "document store" to describe both couch and mongo
19:00  * s_e immediately forks debian and calls it notwindows
19:00 < niggler> lol s_e
19:01 < dypsilon> nosql = not only sql
19:02 < niggler> so that suggests dypsilon that you can use a nosql system as if it were sql
19:02 < niggler> but afaict you don't have the SQL guarantees with systems like mongo
19:02 < jdelgado> yeah, that made no sense lol
19:02 < dypsilon> niggler, Some authors refer to them as "Not only SQL" to emphasize that some NoSQL systems do allow SQL-like query language to be used.
19:02 < dypsilon> https://en.wikipedia.org/wiki/NoSQL
19:02 <@isaacbw> in summary: it's a terrible term
19:02 < niggler> lol history "Carlo Strozzi used the term NoSQL in 1998 to name his lightweight, open-source relational database that did not expose the standard SQL interface."
19:03 <@isaacbw> oh cool, document store is the standard term
19:03 < niggler> so something that does not expose an SQL interface can't be deemed "not only sql"
19:03 < ashnur> i read somewhere that nosql means not only sql :D 
19:03 < jdelgado> if you link to wikipedia, your argument is immediately invalid
19:03 < dypsilon> well, you could have sql guaranties, with mongodb for example
19:03 < ashnur> i guess someone wants a bail out 
19:03 < dypsilon> if you force it
19:03 < ashnur> oh
19:04 <@isaacbw> but that would be silly
19:04 <@isaacbw> and stupid
19:04 < ashnur> i am so slow
19:04 < ashnur> sry
19:04 < ashnur> i should not read backward, but i always do :(
19:04 < dypsilon> jdelgado, i'm not trying to win an argument here, but to provide people with new insight
19:04 <@isaacbw> that's a skill ashnur 
19:04 < niggler> we should just stop using the term
19:05 < ashnur> isaacbw: i feel sarcasm :(
19:05 <@isaacbw> the funny thing is mscdex said it in jest and the rest of us immediately started going on about how awful a term it is
19:05 <@isaacbw> and mscdex quietly went back to work
19:05 < ashnur> niggler: i like graphdbs. not that i know them, i just know their names. but I quite like  what they seem to offer
19:05 < dypsilon> niggler, personally, I prefer, document oriented datastore or something like this
19:05 < dypsilon> or graph database
19:05 < ashnur> niggler: especially orientdb and hypergraphdb
19:05 < dypsilon> if it is
19:05 <@isaacbw> did any of you ever spend time with jcr
19:05 < niggler> isaacbw i assume everyone is chatting whilst compiling
19:06 <@isaacbw> compiling
19:06 < niggler> jcr?
19:06 < ashnur> niggler: ahaha
19:06 <@isaacbw> niggler: a java thing 
19:06 < ashnur> compiling
19:06 < niggler> ah isaacbw 
19:06 < niggler> ashnur excel is dying
19:07 <@isaacbw> a content storage model that's sort of graph-ish
19:07 < niggler> there are undocumented limits on the size of PtgArrays but it's non-obvious
19:07 < ashnur> niggler: ?
19:07 < niggler> (const arrays)
19:07 <@isaacbw> niggler: that whole business with the high-profile excel typo in the economics paper made me think of you
19:07 < ashnur> i know you are doing that excel clone
19:07 < niggler> lol isaacbw i actually have something for that purpose
19:07 < niggler> that's how I'm testing formula parsing)
19:07 < ashnur> but I do not know how it is progressing
19:07 < niggler> the xls2csv takes a --formulae arguments
19:07 <@isaacbw> hah
19:07 < niggler> *argument
19:07 <@isaacbw> wondeful
19:08 < niggler> and it dumps all of the formulas
19:08 <@isaacbw> *wonderful
19:08 < niggler> excel supports in-line matrices and arrays
19:08 < niggler> for example, =FVSCHEDULE(1,{0.09,0.11,0.1})
19:08 < ashnur> scary
19:08 < jdelgado> lets all go around the table and say which database makes us happy
19:08 < niggler> that {0.01,0.11,0.1} is an array (internally called PtgArray)
19:09 < jdelgado> I'll go first. Microsoft SQL 2008 ;D
19:09 < ashnur> jdelgado: i like plain text :-S
19:09 < niggler> unfortunately, there are limits and excel 2011 / 2013 present different limits
19:09 < jdelgado> ashnur: hahah
19:09 < niggler> ++ashnurf
19:09 < dypsilon> jdelgado, none, happy customers make me happy
19:09 < niggler> flat files for the win
19:11 < niggler> ashnur the way excel stores formulas is best described as dysfunctional RPN
19:12 < ashnur> niggler: once i had to create excel charts. with formulas and everything. so i created a html table and put everything in it. 
19:12 < ashnur> it was lik 5 times larger than a native solution
19:12 < ashnur> but it was 2004, and it worked:D
19:12 < s_e> 2 seconds with wikipedia and i got that joke niggler
19:12 < ashnur> all excels read it just fine
19:13 < drewp> when stream.js:81 does "throw er; // Unhandled stream error in pipe.", how can i try/catch that? it's not in my stack
19:13 < niggler> s_e what joke?
19:13 < drewp> i.e. a try/catch around my fs.createWriteStream doesn't catch it
19:13 < s_e> this is where you tell me it wasn't a joke :( dynfunctional RPN
19:13 < s_e> dys*
19:13 < niggler> lol s_e basically it stores tokens in one place and the actual data elsewhere
19:14 < niggler> and its not internally consistent and not even libreoffice handles it properly
19:14 < niggler> so this is truly uncharted territory
19:14 < jdelgado> drewp: Why not try/catch the require
19:14 < niggler> at this point, I'm convinced no one actually tried to go through the docs and implement it properly, not even the so-called standardization experts
19:15 < ashnur> niggler: trust me, even who wrote those things would not want to do what you are doing right now.
19:16 < ashnur> you scared me the first time you explained and I still can not believe it. 
19:16 < drewp> jdelgado: what require? the error happens in some async thing inside fs.createWriteStream
19:16  * drewp tries domains
19:17 < mscdex> drewp: attach  'error' listeners for the streams you're piping together?
19:17 < jdelgado> drewp: My appologies, I thought you mentioned a module
19:18 < drewp> mscdex: it happens before that- my createWriteStream was simply writing to a nonexistent directory, which i wanted to catch and report back to the user
19:18 < drewp> domain seems to work well
19:18 < drewp> bottom part of http://stackoverflow.com/questions/7310521/node-js-best-practice-exception-handling#7313005
19:19 < drewp> so thanks for writing that up, balupton :)
19:22 < pringlescan> JSON will always be faster than a custom binary format if we're talking server and client side as far as parsing and traversal goes, right?
19:23 < jdelgado> pringlescan: Depends on how advanced your 'custom bianary format' is
19:23 < niggler> and if you use typed arrays
19:23 < s_e> dunno about faster, but "a hell of a lot easier"
19:23 < alexisabril> Using NPM, installing from github(git read only url), however NPM is not currently pulling down the project's dependencies. What's the recommended way to setup a github hosted module, publicly accessible?
19:25 <@isaacbw> publish it to npm
19:25 < niggler> or go into the directory and npm install
19:26 < sambarino> not sure if it's relevant but i did npm install {url} to the url of my github repository's tarball and it worked decently
19:26 < pringlescan> I want to port the Open Source Routing Machine's routing engine to Javascript (just the routing, not the part that does the contraction hierarchies). The data files for an entire city is only 25-30mb uncompressed, and anything that takes 3ms of a VPS would probably reasonably well on a modern smart phone. It likely won't be faster; but it won't require a data connection.
19:26 < alexisabril> Publishing to npm is not a course I wanted to take with this module. Although it's open source, it's specific to one group of projects. I feel publishing to NPM would be polluting that namespace
19:26 < alexisabril> Is there no way to npm install from a github repo and also install it's dependencies automatically(without running npm install again from the subdirectory)?
19:26 < niggler> call it xxx-whatever
19:27 < sambarino> alexisabril: npm install {url} where url = your github repo's tarball, if you have a package.json in there with dependencies they will get installed
19:27 < pringlescan> It seems like browsers that support WebGL have some new ways of working with binary data
19:27 < alexisabril> @sambarino Much appreciated, just noticed I missed your first message
19:28 < niggler> alexisabril where's this repo
19:28 < sambarino> i just tried that myself because i forked a module and didnt want to register my folk
19:28 < sambarino> fork*
19:29 < mscdex> pringlescan: depending on the client and server, i've had better results performance-wise with msgpack than json
19:32 < alexisabril> @Sambarino, no joy. It does install the package, however package dependencies don't seem to come along for the ride
19:32 < alexisabril> @niggler Repo is: https://github.com/bitovi/testify
19:33 < pringlescan> I guess a starting point might even be trying to use Emscripten; it seems like you can compile Boost as a static library
19:33 <@isaacbw> compile boost to javascript
19:33 < niggler> hmm what node version are you using alexisabril ?  it installed your deps when i tried it on 0.10.4, 1.2.18
19:33 < sambarino> alexisabril: ah, that sucks, it did work for me, my module only had one dependency but that dependency had quite a number and all of them did get installed, so not sure why
19:33 < niggler> isaacbw lol compiling templates
19:34 <@isaacbw> that would be the epitome of instanity
19:34 < sambarino> my node is 0.10.3
19:34 < alexisabril> niggler, running version 0.8.18
19:35 < niggler> alexisabril can you do an npm install -g npm and try again?  I wonder if that behavior was changed recently
19:52 < JohnMcLear> http://blog.etherpad.org/2013/04/28/north-america-2013-meetup-videos-of-talks-presentations/ for those who are interested
19:52 < JohnMcLear> A talk by isaacs
19:53 < JohnMcLear> pita, dgreenspan, rhelmer, marktraceur, josephg and others, very mixed bunch :)
19:53 < JohnMcLear> isaacs talks about what is new in node 0.10
19:54 < dypsilon> JohnMcLear, thanks
19:54 < niggler> what's air mozilla
19:55 < Bubo> JohnMcLear: thanks for that, now I won't just sit doing nothing
19:55 < dypsilon> how many devs are working full time on node right now?
19:55 < niggler> define "working full time on node"
19:55 < niggler> there's a company joyent
19:55 < JohnMcLear> Sorry for the disrupion :)
19:55 < JohnMcLear> tion..
19:55 < dypsilon> how many devs are working only on node an nothing else
19:55 < dypsilon> *nad
19:55 < dypsilon> *and
19:55 < JohnMcLear> dypsilon 41291
19:56 < niggler> what does "on node" mean?
19:56 < niggler> core development
19:56 < niggler> or using it to make products
19:56 < dypsilon> sorry, yes, I mean core devs
19:56 < JohnMcLear> look on github:?
19:57 < niggler> dypsilon https://github.com/joyent/node/blob/master/AUTHORS
19:57 < niggler> 444
19:57 < niggler> but i would suspect that most have contributed very little
19:57 < JohnMcLear> depends how you define very little
19:57 < JohnMcLear> cleaning up white space is gods work..
19:58 < dypsilon> yes, those are all contributors, I mean how many devs are working full time, like isaacs
19:58 < niggler> I added a fix to a REPL issue, which in the grand scheme of things is very little
19:58 < niggler> isaacs may not even be doing it full time
19:58 < niggler> dypsilon id look at the employees of joyent
19:58 < jdelgado> dypsilon: You mean ON node? or using node?
19:59 < dypsilon> I mean developing node core.
19:59 < dypsilon> niggler, I suppose many joyent empoyees have nothing to do with node.
19:59 < jdelgado> dypsilon: Doubtful anyone is working on it full-time, Joyent have their guys working a slew of things
20:02 < dypsilon> oh, I always thought there is a team of like 5 devs at joyent doing nothing else but working on node core.
20:04 < dypsilon> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/aeSvUVCadO8
20:04 < dypsilon> so what does "core team" mean?
20:05 < paulkon> node core
20:05 < paulkon> aka https://github.com/joyent/node
20:05 < whomp> what's the best book for learning the ins and outs of JS, but without all the stuff about browsers?
20:06 < paulkon> https://developer.mozilla.org/en-US/learn/javascript
20:06 < bnoordhuis> whomp: javascript the good parts?
20:06 < paulkon> best book would be ^
20:06 < whomp> thx
20:07 < dypsilon> http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/
20:07 < bnoordhuis> dypsilon: two or three
20:07 < dypsilon> http://eloquentjavascript.net/contents.html
20:07 < bnoordhuis> and a few people that work on it part time-ish
20:07 < dypsilon> bnoordhuis, ah, thx
20:07 < paulkon> mdn was my go to resource for all js related concept questions
20:07 < bnoordhuis> only one works at joyent btw
20:07 < paulkon> and still is
20:08 < dypsilon> bnoordhuis, and the others?
20:09 < bnoordhuis> dypsilon: strongloop (bert and me), voxer (fedor)
20:10 <@isaacbw> alright, editing source with a non-mono font has gotten tiresome
20:10 < dypsilon> bnoordhuis, nice, thank you for the info
20:11 < bnoordhuis> no problem :)
20:11 < dypsilon> isaacbw, why would do that?
20:11 < dypsilon> *you
20:11 <@isaacbw> it was cool for a day or so
20:11 < niggler> lol i love how google changed isaac's email address
20:11 < niggler> "Isaac Schlueter" <i...@izs.me>
20:12 <@konobi> bah, lack of negative lookbehind assertions biting me
20:13 < niggler> konobi reverse the regex and do a lookahead
20:13 <@konobi> ha
20:15 <@konobi> dypsilon: the rest of the joyent guys use node day in and day out... and often help with issues, diagnosis and tooling... but not directly on core.
20:16 <@konobi> though several have contributions to core
20:19 < Y3K> Hi, I'm starting with Node.js + Meteor.js - I want to install Meteorite (yet another package manager), however when I run "npm -install meteorite" everything is installed in ~/node_modules and also creates many more dirs (tmp, .node-gyp, etc). What would be a "best practice" for packages? Isn't there something like virtualenv for Py?
20:20 < Seventoes> Y3K: npm install -g packagename" to install globally
20:20 < Seventoes> aka, not in ./node_modules
20:21 < Y3K> Seventoes: If later I remove Node.js will the node_modules removed too or they're stored somewhere else?
20:21 < Seventoes> they go to /usr/local/lib/node_modules on my OSX install
20:22 < Y3K> It isn't Node's directory, so I guess they won't... Is there ny solution like virtualenv then?
20:22 < Y3K> *any
20:22 <@konobi> no idea what virtualenv is
20:23 < Industrial> Can anyone tell me if I tested this correctly? https://gist.github.com/Industrial/a8c2692f42187924db34/1e4815b389ee8aaefe26a12ca1a4a756974138ca Any improvements?
20:24 < Bubo> Y3K: if you install with "npm install" they are installed only locally in the node_modules directory of your project. If you install it with "npm install -g" then they are installed globally. If you remove the directory node_modules from your project, then all of the packages are removed except those which are installed globally
20:25 < Bubo> so if you install files locally you can only use it in that application, not everywhere
20:25 < Bubo> much like virtualenv
20:25 < Y3K> Bubo: Ok, so the thing here is I ran npm -install in ~, if I do it somewhere else then it'll inside that dir.
20:25 < Seventoes> yup
20:25 < Y3K> Basic stuff I guess, sorry for the "bad question".
20:27 < Y3K> And... What's the .node-gyp stuff? Can I remove it after install?
20:28 < Bubo> https://github.com/TooTallNate/node-gyp
20:29 < Waffle-MS> PHP vs Node.js -- I am looking to learn a useful language to create servers in the console, I already have PHP knowledge but I have heard node.js can do more. Which should I use?
20:30 < Bubo> What do you mean by servers in the console?
20:30 < Y3K> Bubo: Interesting... Thanks.
20:31 < Waffle-MS> WebSocket Servers -- For an open Chat Website
20:31 < Bubo> I think node.js can do more with socket.io, but I am a beginner so you should wait for someone else to answer you.. 
20:31 < Seventoes> PHP and node.js can both do websockets just fine
20:32 < Waffle-MS> Thankyou very much.   I'll ask at a different time
20:33 < Seventoes> node.js will be a bit easier to work with though if you're focusing on websockets
20:33 < Waffle-MS> Would node.js be able to handle as much traffic in comparison?
20:34 < Seventoes> if you don't even know the language yet you shouldn't really need to worry about optimization :P
20:34 < dypsilon> why did meteor create their own package manager?
20:35 < Waffle-MS> Good point!  I was just wondering if it is worth learning the new language if it wouldn't be able to handle the eventual goal of the website?
20:36 < Seventoes> Facebook's written in PHP
20:36 < Seventoes> :P
20:37 < dypsilon> Seventoes, also one should mention, they hack php a lot and have world class caching infrastructure
20:37 < Seventoes> that is, handling traffic goals is up to your infrastructure, not your language choice
20:37 < Seventoes> of course
20:38 < Seventoes> Waffle-MS: Since this is a node channel we obviously prefer using Node, and as far as using websockets I think node is your best choice
20:38 <@isaacbw> I actually don't use node. I just like you guys
20:38 < Seventoes> I also happen to dislike PHP with a passion, but unless you're writing a gigantic application, the only thing that determines which language you should use is your preference
20:39 < Bubo> haha
20:39 < dypsilon> isaacbw, aaawwww, I like you, too
20:39 < dypsilon> lets hug, every one
20:39 < Seventoes> <3
20:39 < Bubo> i am watching isaacbw atm on youtube xD
20:39 < dypsilon> Waffle-MS, if you expect a lot of traffic, meaning a lot of request, I would not choose PHP.
20:39 <@isaacbw> Bubo: what
20:39 <@isaacbw> I'm not on youtube :(
20:40 < dypsilon> isaacbw != isaacs
20:40 < howdynihao> whaaaat
20:40 < Bubo> Ah.. i see
20:40 < Seventoes> someone op'd him on accident a while ago and just hasn't corrected the mistake yet
20:40 < howdynihao> when did this happen
20:40 < Waffle-MS> Enough said!  I'll give Socket.io a try.  Thankyou Seventoes!!!
20:40 < Bubo> you are not isaacs but isaacbw
20:40 < Bubo> sorry xD
20:41 < Seventoes> Waffle-MS: this is worth a look if you're worried about performance too: http://www.techempower.com/blog/2013/03/28/framework-benchmarks/
20:41 < Seventoes> TL;DR don't use Cake
20:41 < Seventoes> lol
20:42 < dypsilon> Waffle-MS, simple reasoning: PHP has a share-nothing architecture: your object graph is built on every request. As opposed to node: you start a webserver once and respond to request in an event loop.
20:42 < Bubo> what is netty?
20:43 < Bubo> how come it is so fast
20:43 < unstable> I just installed npm locally. In my ~/.npm/*/*/package I have a bunch of directories with 'bin' in them. How can I have a central bin for all of them? So I can add one thing to my $PATH and not forty. So for instance my ruby environment, all my dozens of binaries/gems can be in one place: ~/.rbenv/versions/2.0.0-p0/bin/, and I just add this to my $PATH and everything works.
20:44 < kevireilly> Bubo: java
20:44 < Bubo> ah
20:44 < Bubo> How come it is so fast?
20:45 < dypsilon> unstable, tbh i have no idea, i just run npm install -g "something" and it's magically in my PATH
20:45 < dypsilon> Bubo, java is pretty fast
20:46 < dypsilon> java ui ist slow
20:46 < dypsilon> *is
20:46 < Bubo> I didn't know it was that fast, dypsilon
20:46 < sandfox> Bubo: yeah, apart from slow start-up time in some cases, the JVM is pretty damn fast
20:47 < howdynihao> everything in that top list is on the jvm :S
20:47 < howdynihao> idk what vertx is though
20:47 < sandfox> vertex is a platform for running other languages via shims on the JVM
20:48 < sandfox> is also insanely fast (faster than node in some cases)
20:48 < unstable> dypsilon: Thanks a lot! When I use npm -g, it installs the bins in ~/.javascript/node-v0.10.5-linux-x86/bin as a centralized place I can put in my path.
20:48 <@isaacbw> java has a lot of problems, but the jvm isn't one of them
20:48 < unstable> I appreciate the help.
20:48 < Bubo> I thought because it used bytecode it wasn't that fast
20:49 < Seventoes> wut
20:49 < dypsilon> unstable, you are welcome
20:49 < Seventoes> byetcode is why it's fast :P
20:49 < sandfox> Bubo: those 2 things have no relationship...
20:50 < Bubo> Doesn't Java compile to bytecode and than the JVM interprets it? How can bytecode be faster than compiled machine code
20:50 < Bubo> or am I wrong on something here..?
20:52 < mscdex> gcc java.cc --speed=ludicrous -o lightspeedtooslow
20:52 < Seventoes> lol
20:52 < mscdex> s/gcc/g++ !
20:54 < howdynihao> well
20:55 < howdynihao> jvm is statically typed, that helps
20:57 < unstable> https://github.com/alexch/learn_javascript ... I wanted to start playing around with some javascript/jasmine for fun. I found a neat set on github I wanted to try. I wanted to run the tests from command line, like rspec/ruby, using phantomjs. I have phantomjs installed, how can I (if possible) run these tests without a web server? Just find out which tests are passing/failing.
20:58 < jdelgado> unstable: jasmine-node?
20:58 < unstable> jdelgado: thanks! That worked.
20:59 < unstable> $ jasmine-node HelloSpec.jsFFFailures:1) Hello says helloMessage:ReferenceError: hello is not defined
20:59 < unstable> cool
21:17 < beelzebobby> Is it possible to access a JSON field with a key of "$" and if so, how?
21:17 < kevireilly> beelzebobby: obj['$']
21:18 < jdelgado> beelzebobby:  object['$'] ??
21:18 < beelzebobby> so anything but dot notation?
21:18 < beelzebobby> or brackets is the one way?
21:18 < mscdex> it's amazing that apparently nobody bothered to proofread the mysql protocol documentation on dev.mysql.com
21:18 < kevireilly> also necessary for spaces and other cases I can't recall
21:19 < erockk> what's the best js framework to use with node?
21:19 < erockk> backbone?
21:19 < mscdex> erockk: doesn't really matter
21:19 < substack> why do you need a framework?
21:19 < erockk> mscdex, what do you use?
21:19 < erockk> more scalage, less messy
21:19 < kevireilly> beelzebobby: i think dot notation only allows alphanumeric characters but not sure... basically if it doesn't work, try brackets :)
21:19 < erockk> scalable*
21:19 < paulkon> because life is just soo hard without a framework...
21:19 < mscdex> beelzebobby: you can use dot notation with $ prefix
21:20 < RLa> beelzebobby, you can use dot notation too
21:20 < RLa> yeah
21:20 < mscdex> :-)
21:20  * mscdex shakes a fist at javascript<->PHP context switching
21:21 < kevireilly> ah, gotcha. I figured the question suggested it wasn't working, but I'm guessing you guys just tried it ;)
21:21 < mscdex> erockk: nothing yet
21:21 < beelzebobby> Well, I get an Unexpected string error when trying dot notation but brackets works fine. Thanks for the help.
21:21 < erockk> substack, frameworks are good to use for larger applications, adds structure and organization
21:21 < mscdex> >> var o = { $foo: 'bar' }; o.$foo;
21:21 < purr> mscdex: (string) 'bar'
21:21 < mscdex> ^
21:22 < erockk> there's a lot of hype around backbone these days, wondering if any of you node.js'ers have played around with it
21:22 <@isaacbw> angular 4 lyfe
21:22 < mscdex> s/node.js'ers/noders/
21:22  * booyaa thought it was all about angular nowadays
21:23 < erockk> booyaa, not too familiar with angular, is that the one built by google?
21:23 <@isaacbw> it is
21:23 < erockk> is it also MVC?
21:23 <@isaacbw> in a way
21:23 < mscdex> all the client-side frameworks use json for their data source, so as long as you spit out json in your node server, you're good to go no matter what you decide on
21:23 < erockk> mscdex, good to know thanks
21:23 < substack> I looked at backbone and angular and I just don't get what the point of them is
21:24 < substack> what problem do they even solve?
21:24 <@isaacbw> building large software
21:24 <@isaacbw> angular is basically a component system
21:24 < substack> what does that even mean
21:24 < s_e> abstraction
21:24 < s_e> which is what most frameworks solve
21:24 < substack> that's just a mysterious answer
21:24 <@isaacbw> um
21:24 < substack> it doesn't tell me anything
21:24 <@isaacbw> you build small well defined functionality and then piece them together into larger systems
21:24 < substack> why not just use a module system instead?
21:25 < s_e> because making those modules talk to each other is what a framework does
21:25 < s_e> you don't have to write boilerplate to make everything work in concert
21:25 < substack> I really haven't seen how that even happens
21:25 <@isaacbw> angular's defining characteristic is the concept of scopes which tie data to html elements
21:25 < substack> all the examples I've seen seem really confused and indirect
21:25 < substack> and boilerplatey even
21:25 < mscdex> isaacbw: and the magical dependency injection
21:26 <@isaacbw> and directives
21:26 < substack> and they spread their tendrils all over the place
21:26 < erockk> isaacbw, doesn't backbone also do that?
21:26 <@isaacbw> erockk: I don't know
21:26 < erockk> i mean, maybe not directly
21:26 < erockk> but you can tie your models to templates
21:26 <@isaacbw> angular is a lot closer to html than other client-side frameworks
21:26 < substack> why can't programs just take input and produce output?
21:26 < s_e> I was dropping json in attributes before it was cool, *sunglasses*
21:27 < mscdex> i gave up on backbone after several serious attempts at using it
21:27 < Industrial> i'm about to start one
21:27 < erockk> I tend to use a lot of online learning resources, (code school, lynda, etc) the only framework they really cover is backbone
21:27 < Industrial> what made you give up?
21:27 < topek> i like the bidirectional binding of angular, it's kindof magic (which is not good) but lets you write less code
21:28 < erockk> i don't know if this necessarily means its better or not
21:28 < Industrial> except I want the page to consist of components, each having its own router, controller, model, view(s) etc
21:28 < erockk> maybe just more widely used
21:28 < s_e> substack, how do you define input or output which is more than just text?
21:29 < substack> s_e: I'm not sure what you mean
21:29 < mscdex> Industrial: several reasons. i wanted something where i could easily re-use validators on both sides. i also had a hard time grokking how to (efficiently) set up and use the controllers and collections and updating views
21:29 < mscdex> Industrial: and some other things i can't remember offhand
21:29 < mscdex> oh, another one was relational models
21:29 < mscdex> i saw several plugins to handle those, but each had their own issues :-\
21:30 < Industrial> Well, I really want this component structure (for work). What are you using now? Could I use that? :)
21:30 < s_e> input, an image file, output a collection of similar image files, would you want to code that without some sort of framework?
21:30 < mscdex> i haven't found anything yet really, the project is kind of on the back burner. i'm still kind of seeing and testing what's out there
21:31 < ome> If i like to fork out a new instance of my App for every client, is there any mechanism already for that or it's a no-no?
21:32 < Seventoes> ome: use PHP 
21:32 < Seventoes> ^_^
21:32  * mscdex shakes a fist at PHP
21:32  * faceleg|work nooooo
21:32 <@isaacbw> ome: that's a pattern that node.js is designed to avoid
21:34 < ome> Seventoes: No events nor it's async.
21:34 < Seventoes> ome: why do you think you need a new process per client?
21:34 < mscdex> i did see a libevent binding for php the other day
21:34 < mscdex> but still, node is the way to go
21:34 < Bubo> if you wanted to do a browser (turn-based) game, would you use angular for it isaacbw?
21:34 <@isaacbw> absolutely not
21:34 < Bubo> what would you use
21:34 < ome> Backbone.js
21:35 <@isaacbw> cancas
21:35 <@isaacbw> *canvas
21:35 < ome> Angular.js is more for webapps.
21:35 <@isaacbw> and raw javascript
21:35 < Bubo> not that kind of game isaacbw
21:35 <@isaacbw> then what do you mean
21:35 < ome> I said Backbone.js because that is pretty much, well, raw javascript.
21:35 < Bubo> text based.. so you click a button "Fight" or "heal" or "move to region xx" stuff like that
21:35 <@isaacbw> oh yuck
21:35 < Bubo> Why yuck? :|
21:35 < s_e> are you mocking the glory of hacks?
21:36 <@isaacbw> that's a combined yuck at those kinds of games and at this 100% bar I'm trying to eat
21:36 <@isaacbw> *cocoa
21:36 < Bubo> browser based mmorpg
21:36 <@isaacbw> anyway, I wouldn't use a framework if I was making that kind of game
21:36 < Bubo> what would you use isaacbw? 
21:36 < Bubo> Games like Travian
21:37 < Bubo> Ogame
21:37 < Bubo> erepublik
21:37 <@isaacbw> nothing, I would build something up from plain old javascript
21:37 < Bubo> In node, right?
21:37 <@isaacbw> aren't those games usuaully server-side rendered anyway?
21:38 < Bubo> yeah, they are
21:38 < Bubo> how would you make it isaacbw? help me out here, I am looking for ideas
21:39 <@isaacbw> I don't know what you want from me. I don't think you would have much if any clientside javascript
21:39 < Bubo> I am talking about server side
21:39 < Bubo> like node + express + socket.io
21:39 < Bubo> would be good..
21:40 <@isaacbw> use whatever you're comfortable with
21:40 <@isaacbw> but no, not socket.io
21:40 <@isaacbw> not if you're rendering everything on the server
21:43 < Bubo> isaacbw: socket.io for doing stuff like "Attack" or "heal" or real-time notifications if someone attacked you
21:43 <@isaacbw> I know you want me to say "use x" but what it really comes down to is what you're comfortable with enough to finish a project
21:43 < kevireilly> Bubo: You might also want to consider using an existing open source base or example. BrowserQuest by Mozilla is neat example served by Node http://browserquest.mozilla.org https://github.com/mozilla/BrowserQuest
21:43 < Bubo> kevireilly: ill check it out, thanks
21:43 < Bubo> isaacbw: I am not expecting that, I'm just curious what other people would do
21:44 < Willox> BrowserQuest is amazing
21:45 < Bubo> kevireilly: it's not a game like BrowserQuest..
21:46 <@isaacbw> Bubo: just start developing it with express.js/socket.io and be willing to pivot to a new tech if you find yourself hitting a wall
21:46 < Bubo> yeah,I was thinking of doing that
21:47 < booyaa> wow bq ftw
21:47 < sh4k> oh lol
21:47 < sh4k> je vous proute sur la face
22:04 < kevireilly> Are sessions worth trying to avoid from the beginning or is it something one should just potentially eventually replace when trying to find the path of least resistance in the immediate moment?
22:06 < kevireilly> The "We'll fix it later" approach isn't my favorite, but I've also not dealt with sessions at scale and am only going based on things I recall reading when it comes to scaling session based infrastructures
22:06 <@isaacbw> what do you mean? Why would you avoid sessions
22:07 <@isaacbw> or do you mean something specific by session
22:07 < kevireilly> isaacbw: I suppose in favor of token based requests where you don't have to maintain a specific session with a specific server in, for example, a multiple node cluster of servers
22:08 < kevireilly> isaacbw: mostly related to authenticated user requests
22:09 <@isaacbw> you're going to have to store authentication state somewhere persistent
22:10 <@isaacbw> other than that, you state should be implicit and driven by urls, not on the server
22:10 <@isaacbw> *your
22:10 < kevireilly> indeed, but iirc, a non-session based architecture will allow the application layer to remain stateless where otherwise a session would have to be established and maintained between a single server and a single user
22:11 < dypsilon> kevireilly, popular opinion ist that sessionless servers are easier to scale
22:11 < dypsilon> *is
22:11 < kevireilly> I'm mostly asking because the path of least resistance for using Passport seems to be using sessions
22:12 <@isaacbw> a connection to a single server needn't be maintained
22:12 <@isaacbw> you can have a central session store that you query with each request to make sure the user is authenticated and authorized
22:12 < dypsilon> kevireilly, true, passport doesn't have a token based auth, which is, in my opinion, an issue of passport.
22:12 <@isaacbw> usually that session store is in memory with some sort of persistence
22:13 < kevireilly> isaacbw: ah i see, interesting. So off loading the session storage basically and getting context prior to forwarding the request. Like with memcache or something?
22:13 <@isaacbw> or something, yea
22:13 < dypsilon> if you only need sessions for auth, use tokens
22:13 < kevireilly> dypsilon: hrm, yeah, are you aware of any other alternatives? I mean, it isn't the end of the world and I have no users but just trying to think ahead
22:14 <@isaacbw> the issue with memcached is that without a peristence model, your users will all get logged off (i.e. if they selected "keep me logged in") if that machine goes down
22:14 < dypsilon> kevireilly, I'm using hapi cookie auth, which is sessionless.
22:14 < imm> skalsm
22:14 < dypsilon> http://spumko.github.io/resource/api/#toc_10
22:14 < kevireilly> isaacbw: right, I actually meant couchbase which uses a memcache philosophy but also is a persistent data store
22:15 <@isaacbw> so something like that would be the best solution
22:15 < dypsilon> also if you go sessionless you don't have to maintain session state on the server, which is nice even if you don't have to scale
22:16 <@isaacbw> it also depends on how important security is to your application
22:16 < dypsilon> isaacbw, what do you mean? cookie based auth is pretty secure
22:16 < kevireilly> dypsilon: ah so request tokens are stored in a cookie?
22:16 < dypsilon> kevireilly, yep
22:17 < dypsilon> same as session based auth, though, but it relies on encrypting cookie information rather than storing a session key in the database
22:17 < Guest50175> kevireilly: I personally prefer redis mountains over memcached after getting comfortable with it. It's also replicable/shardable to support a scalable centralized in-memory session store. Redis also supports persisting to disk, ofcourse.
22:18 < kevireilly> dypsilon: I probably need to go back to http 101, but, oh right.. yeah. So, a session/cookie for server.com and server.com:1234 will be different, correct? oramitripping
22:18 < myhrlin> ubtrippin
22:19 < kevireilly> Guest50175: ah! very nice, I will check it out for sure. Thanks for the heads up
22:19 < jdelgado> dypsilon: use express
22:19 < dypsilon> kevireilly, oh not sure
22:19 < dypsilon> jdelgado, do not want
22:19 < dypsilon> :)
22:19 < jdelgado> dypsilon: why
22:19 < kevireilly> yeah I didn't want to either haha. I integreated it to try passport though
22:20 < dypsilon> jdelgado, several reasons
22:20 < kevireilly> the sessions there were definitely applicable to :80 versus :1234 in that static files (or at least the single paged index.html) was served from 80 while frontend requests were being made to 1234
22:20 < jdelgado> dypsilon: being?
22:20 < dypsilon> jdelgado, awkward routing
22:20 < dypsilon> for example
22:20 < jdelgado> dypsilon: 0_0
22:21 < dypsilon> also i'm not saying express is bad, express is bad in may particular case
22:22 < dypsilon> and i like hapi
22:22 < dypsilon> hapi hapi, joi joi!
22:22 < Y3K> Hi everybody. Newbie here... What would be a common way to install Node.js + Meteor?
22:22 < kevireilly> myhrlin: so a cookie is regardless of port, perhaps per domain, while a session is not?
22:22 < Y3K> Something like Python... virtualenv, activate and pip.
22:23 < dypsilon> Y3K, use directions meteor is giving you. They are forking node.js so you are relying on meteor.
22:23 < kevireilly> Y3K: just out of curiosity, what is wrong with NPM?
22:23 < kevireilly> oh, the question is different than earlier
22:23 < dypsilon> kevireilly, afaik meteor doesn't use npm
22:23 < Guest50175> Cookies are per domain, designed when everyone used www., so, cookies set by domain.com are accessible by *.domain.com, but cookies set by www.domain.com <http://www.domain.com> are only accessible by www.domain.com <http://www.domain.com>. I'm almost certain the port is irrelevant.
22:24 < Y3K> dypsilon: I know, actually I installed meteor + dependencies (Node, MongoDB) first, but then when I tried to use Meteorite too it tried to re-install Meteor.
22:24 < Y3K> So I thought I was doing something wrong.
22:24 < dypsilon> Y3K, nope, meteor is
22:24 < kevireilly> Guest50175: gotcha! thanks a bunch
22:24 < Y3K> dypsilon: Meteor is wrong? How is that? Haha :P
22:25 < Y3K> Actually, I'd like to know better if there's some solution like python-virtualenv for Node.js and/or Meteor
22:25 < Guest50175> I will eventually fix the nick on this irc bot... -___-
22:25 < dypsilon> Y3K, what does pythong-virtualenv do?
22:25 < dypsilon> *python
22:25 < kevireilly> Guest50175: regarding sessions, express, passport it was non-www.domain.com both server and client but the client requests were going to non:80 and it seemed to be created a new session every API request
22:26 < Y3K> dypsilon: Lol, that was funny - It creates isolated environments, so you can install packages that run only in that venv.
22:26 < Y3K> dypsilon: That way, there's no "garbage" system-wide and everything is nice and sleek.
22:26 < jdelgado> Y3K: That is basically node by default, within a server you make.
22:26 < Guest50175> The sessions are handled by the server and per-browser instance. i.e. in chrome, you can open up 10 incognito windows and get a different session for each of them.
22:27 < jdelgado> Y3K: Just make a folder, do your npm commands, and you're set.
22:27 < Y3K> dypsilon: For example, I can have different venv with different Py versions and packages (with different versions too), with Node.js AFAIK I can't do that.
22:27 < dypsilon> Y3K, npm does it by default. There is node_modules directory where all the project packages live
22:27 < Y3K> jdelgado: What do you mean?
22:28 < jdelgado> Y3K: Just make a folder and run your NPM commands, you'll be fine/
22:28 < Guest50175> I think someone else may be able to explain it better... http://php.about.com/od/learnphp/qt/session_cookie.htm
22:28 < Y3K> Well, so far I've installed packages in ~... You're telling me that if I run npm in ~/foo then the packages would be installed only in that folder? Nothing system wide?
22:29 < jdelgado> Y3K: Yes, unless you include -g.
22:29 < kevireilly> Guest50175: hmm for some reason I couldn't get a session to stick unless the html rendered by http://foo.bar.com was also coming from the same port where the clientside requests were being made. IE: http://foo.bar.com:1234 sessions worked fine while http://foo.bar.com with clientside requests going to foo.bar.com:1234 were creating a new session every requests
22:29 < Y3K> jdelgado, dypsilon: And what about the commands? Are they added to tha PATH too? Or how do I active that module?
22:30 < jdelgado> Y3K: Yes and run your project.
22:30 < Guest50175> And you were persisting them in something on the serverside? If they aren't being persisted, new sessions will be created no matter what. Express has an easy localstorage configuration that will allow you to persist the session information in memory (does not persist through application restarts.)
22:30 < dypsilon> Y3K, as far as commands go, you have 2 ways: 1. Install a module globally with -g or run the commands out of node_modules. For example node_modules/mocha/bin/mocha --recursive
22:32 < dypsilon> Y3K, as far as different versions of node go, there is nvm: https://github.com/creationix/nvm
22:32 < Y3K> dypsilon: I see... It's a bit "weird" (most likely different) to what I'm used to but I think it works too. I guess that if I want to remove a package or the whole thing just deleting the directory is fine, right?
22:32 < dypsilon> Y3K, yep
22:32 < dypsilon> it's not weird, it's awesome :)
22:32 <@isaacbw> dypsilon: can you require a re-authentication for certain actions with cookie sessions?
22:32 < kevireilly> Guest50175: Yeah they were being persisted with express indeed
22:33 < Y3K> dypsilon: Ok, so far I think the Node.js part is filled, now let me investigate about how to do that with Meteor :P
22:36 < dypsilon> isaacbw, good question, never needed it yet, I guess it's possible by looking at the timestamp of the cookie. If it's not fresh = not authorized.
22:37 < jdelgado> Make sure you tamper-proof your cookies!
22:37 < dypsilon> Y3K, afaik meteor uses forked node.js and their own package manager. So you don't have neither npm nor nvm.
22:37 < dypsilon> jdelgado, ofc
22:37 < jdelgado> I love sites that just give me a cookie with a userid, so I can become anyone I want. It's fun!
22:37 < Y3K> dypsilon: I think you're wrong, Meteor requires Node.js as a dependencie, it isn't an forked one.
22:38 < dypsilon> oh it could be, maybe they changed it
22:38 < kevireilly> jdelgado: oh wow, that is awesome ;)
22:38 < Y3K> dypsilon: I don't know before but right know it's that way ;)
22:41 < jdelgado> Y3K: dypsilon: no, they are still a fork of Node.. I just looked
22:41 < jdelgado> That would have been a huge change
22:41 < dypsilon> "Embrace the Ecosystem. Meteor is open source and integrates, rather than replaces, existing open source tools and frameworks." <-- yeah...
22:41 < kevireilly> jdelgado: how do you get around that? like a hash of the UID or something else with salt that requires a decryption and persistent data store on the server side for -every- request?
22:41 < Y3K> jdelgado: Strange, I've installed Node.js with pacman and works flawlessly with Mteor.
22:41 < kevireilly> * a persistent data store look up
22:41 < Y3K> *Meteor
22:42 < jdelgado> Y3K: Well they don't talk to eachother, it would be seperate installs.
22:42 < jdelgado> dypsilon: I don't think that sentence has anything to do with node :)
22:43 < Y3K> jdelgado: No, they aren't... I can't run meteor w/o node =/
22:43 < dypsilon> kevireilly, look at this paper if you really want to understand how cookie based auth works: http://pdos.csail.mit.edu/papers/webauth%3asec10.pdf
22:43 < dypsilon> jdelgado, sadly
22:43 < jdelgado> kevireilly: Yeah, what I personally do, is I take the data, run a hash on it with a certain key, they append it to the cookie - so it contains the data and the hash. Each page then takes it and makes sure the data matches the hash.
22:44 < kevireilly> dypsilon: will do
22:44 < dypsilon> kevireilly, the answer to you question is in 4.1 Cookie Recipe
22:44 < jdelgado> kevireilly: Along with some more secret sauce double checking on the backend
22:44 < jdelgado> Y3K: Bro, i'm positive ;0
22:45 < jdelgado> Y3K: ;0*
22:45 < jdelgado> Y3K: ;)**** Smilies are hard
22:45 < Y3K> jdelgado: Haha, ok bud, thanks ;)
22:46 < dypsilon> Y3K, maybe you could talk to the guys on #meteor
22:46 < jdelgado> Yeah, that would be much more helpful
22:47 < Y3K> dypsilon, jdelgado: I did, they don't answer ;)
22:47 < dypsilon> oh well
22:47 < dypsilon> that's why i dislike the whole meteor lot
22:47 < kevireilly> dypsilon: awesome, lawry's seasoned salt, I don't get the expiration time though. Guessing it is addressed elsewhere in the paper, but an expiration for the request itself? Not the token?
22:47 < dypsilon> 1. we fork node. 2. we don't use npm 3. we use node's community and don't really give back
22:48 < Y3K> dypsilon: Not a firendly community?
22:48 < kevireilly> Oh, nevermind. This is the cookie recipe, not the request recipe
22:48 < Y3K> dypsilon: Ok, that was a nutshell, haha.
22:49 < kevireilly> jdelgado: I like secret sauce on everything, even my other sauces
22:49 < dypsilon> kevireilly, what is request expiration? http ist stateless.
22:49 < dypsilon> *is
22:52 < Y3K> dypsilon: Why running npm install meteorite in ~/foo installs a copy of meteorite (and many other packages) in ~/.npm??
22:53 < howdynihao> y3k: its npms cache dir
22:53 <@isaacbw> npm maintains a cache
22:53 < dypsilon> yep
22:54 < Y3K> Should I take the "cache" dir as "a perfect replica of everything installed?"
22:55 < howdynihao> no
22:56 < dypsilon> Y3K, why do you need a replica?
22:57 < Y3K> dypsilon: I don't, just wanted to know if it was a copy of all the packages.
22:57 < dypsilon> ah ok
22:58 < kevireilly> dypsilon: yeah i was fused with corn and cornfused
22:58 < jdelgado> dypsilon: Y3K Meteor scares me because it is client-side validation. That is a hacking just waiting to happen
22:59 < jdelgado> In addition to the absolute terror of scaling to multiple servers
22:59 < dypsilon> jdelgado, don't they validate on the server, too?
22:59 < Y3K> jdelgado: I haven't used it too much yet, but the docs doesn't says the same, they've server validation too.
22:59 < jdelgado> dypsilon: Nope, the client accesses the DB
23:00 < dypsilon> yeah, I would expect them to do serverside validation, it's web security 101
23:01 < jdelgado> dypsilon: Y3K http://stackoverflow.com/questions/10099843/how-secure-is-meteor
23:02 < jdelgado> Client has DB access, since the server/client is the same code, they're still trying to work out how to fix that
23:03 < dypsilon> jdelgado, I thought that was pre 0.5 and they introduced the security package including accounts, accounts-ui etc
23:03 < niggler> isn't there a #meteor chatroom
23:04 < dypsilon> niggler, valid point
23:05 < jdelgado> dypsilon: They've added some, but still not secure enough for production
23:05 < kevireilly> btw, thank you very much for you feedback isaacbw, dypsilon, Guest50175 and jdelgado
23:06 < dypsilon> kevireilly, you are welcome
23:06 < jdelgado> kevireilly: Glad to add
23:08 < dypsilon> yeah, nobody answers on #meteor
23:08 < Y3K> dypsilon: I saw your message, haha.
23:08 < niggler> lol tragic dypsilon 
23:08 < niggler> id think they'd have an active community
23:09 < jdelgado> They had a bunch of people support it in the beginning, but it quickly died
23:09 < niggler> don't they have $$?
23:09 < dypsilon> niggler, you don't need any community if you got 11M vc money :)
23:09 < jdelgado> supporting* I need to work on verb congigation, I guess.
23:10 < niggler> i suspect joyent spent less on node development yet has a better community
23:11 < dypsilon> you can't really compare a framework and a plattform
23:12 <@isaacbw> meteor is weird
23:12 < dypsilon> +1
23:12 < substack> when you do things right, people won't be sure you've done anything at all
23:13 < niggler> not relevant substack 
23:13 < substack> community-wise
23:13 < niggler> at the early stages of a project, support is critical
23:13 < niggler> and meteor is still in that early stage where support is critical
23:13 < niggler> to be fair, so is node
23:14 < substack> there wasn't any support for node for years
23:14 < substack> in its early days
23:14 < niggler> when did the community in its current incarnation start to take shape?
23:14 < substack> doesn't need to be since it has a very restricted scope and a good internal separation
23:14 < howdynihao> 0.6
23:14 < substack> when I joined this irc around march 2010 or so it was pretty lively
23:20 < sh4k> Whzhahhahahah node.js omfg !! WhahhAHhAh
23:20 < sh4k> Whzhahhahahah node.js omfg !! WhahhAHhAh!
23:20 < sh4k> happy new year
23:20 < dypsilon> sh4k, ok
23:20 < sh4k> huh yes
23:20 <@isaacbw> wtf
23:21 < myhrlin> couldn't possibly be chinese new year...
23:45 < niggler> rodyhaddad_ you having issues?
23:48 <@isaacbw> can someone paste the last thing said before niggler? I feel like my client is missing messages
23:48 < niggler> nothing isaacbw 
23:48 < niggler> i just see a bunch of rodyhaddad logging in and out
23:48 <@isaacbw> weird. I guess it's just been quiet lately
23:48 < niggler> before me was
23:48 < lohkey> myhrlin: couldn't possibly be chinese new year...
23:49 < niggler> yeah lohkey 
23:49 < niggler> that's what i see as the last message before mine
23:49 < niggler> but i see a bunch of rodyhaddad and rodyhaddad_ logging in and out
23:49 < niggler> like just now 
23:49 < niggler> isaacbw any way to ban him?
23:50  * dypsilon disabled parting messages in his client and is happy ever since
23:51 <@isaacbw> is it still happening niggler 
23:53 <@isaacbw> I have parts ignored as well
23:54 < niggler> someone named rodyhaddad__ joined
23:54 <@isaacbw> this happens every once in a while. It would be nice to have a bot that will temp ban nicks that join and leave a lot
23:55 -!- mode/#Node.js [+b *!*rodyhadda@206.248.136.*] by isaacbw
23:55 -!- rodyhadd_ was kicked from #Node.js by isaacbw [rodyhadd_]
23:56 < kwikness> hey guys. trying to install geddy via "sudo npm install -g geddy" but getting the following error: http://codepad.org/DKJdkwao
23:56 < avo_> I want to hide parts but I know I'll end up talking at someone for 10 minutes after they leave
23:57 -!- mode/#Node.js [-b 35!*@*] by isaacbw
23:57 -!- mode/#Node.js [-b *!*rodyhadda@206.248.136.*] by isaacbw
23:57 < dypsilon> avo_, nick autocompletion helps with that
23:58 -!- mode/#Node.js [+b *!*rodyhadda@206.248.136.*] by isaacbw
23:58 -!- rodyhaddad_ was kicked from #Node.js by isaacbw [rodyhaddad_]
23:58 < jdelgado> kwikness: Looks like you have an invalid version
23:59 < avo_> dypsilon, oh that would be a good habit to get into then :)
23:59 <@isaacbw> what's annoying is that he isn't saying anything
23:59 < mscdex> kwikness: you probably need to upgrade node
23:59 < mscdex> isaacbw: probably afk
--- Log closed Mon Apr 29 00:00:04 2013
