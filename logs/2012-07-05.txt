--- Log opened Thu Jul 05 00:00:34 2012
00:22 < amagee> does node.js have a de facto standard framework for classes/inheritance?  like https://github.com/daffl/uberclass or similar?
00:26 < wltsmrz> No, amagee
00:26 < amagee> ok
00:26 < amagee> is there one that you would recommend?
00:26 < wltsmrz> Javascript!
00:26 < wltsmrz> What's wrong with prototypal inheritance?
00:29 < amagee> i guess i'm just looking for some nice syntactic sugar around it
00:31 < wltsmrz> Maybe you can give one of these a try https://github.com/joyent/node/wiki/Modules#wiki-class-system
00:31 < wltsmrz> (I at least haven't noticed widespread usage, enough to call anything "de facto" in the way that mikeal's 'request' module is for HTTP clients)
00:32 < amagee> cool, thanks
00:33 < amagee> yeah i think i'll go with this -- very simple https://github.com/bnoguchi/class-js
00:33 < owen1> what does socket pooling means? i noticed agent.maxSockets and it's default is 5.
00:34 < owen1> "Determines how many concurrent sockets the agent can have open per host." i still don't understand it.
00:34 < owen1> what is 'agent'
00:37 < othiym23> if anyone else wants to play around with SmartOS and has vmware Fusion, I put together a little gist containing instructions on how to get the Node SmartMachine up and running with minimal pain: https://gist.github.com/3050224
00:38 < owen1> othiym23: i hope that one day i'll be able to use dtrace on linux
00:45 < othiym23> owen1: Linus is on the record as saying he's not super interested in allowing probes / hooks into the kernel, so it's going to be a different kind of DTrace than the one on OS X / SmartOS
00:46 < othiym23> owen1: there's nothing stopping you from using VirtualBox to run SmartOS yourself in the meantime
00:53 < owen1> othiym23: not a bad idea
00:55 < Lorentz> time to properly fork the kernel and go separate ways from mainline?
00:55 < mmalecki> Lorentz: no, please don't
00:56 < othiym23> owen1: https://gist.github.com/3050224 is updated with a link to a page detailing how to git VirtualBox running SmartOS
00:57 < Lorentz> mmalecki: >:D
00:57 < othiym23> Lorentz: there's a project to patch the kernel to support DTrace, but much like the systemtap patches, there's a very small chance it will ever get applied to a mainline kernel
00:57 < owen1> othiym23: nice. is your main motivation the 'flame graphs'?
00:58 < owen1> http://www.cs.brown.edu/~dap/helloworld.svg
01:00 < othiym23> owen1: it's generally just having the ustack helpers and the various bits to dump the Node.js heap data structures in the debugger
01:00 < othiym23> rather than having to wade through a puddle of JIT stackframe chowder
01:01 < othiym23> Dave Pacheco's blog has a lot of good stuff on using DTrace / mdb: http://dtrace.org/blogs/dap/
01:01 < othiym23> the flame graphs are really pretty and interesting, it's true
01:02 < diegoviola> i'm really disappointed with termcap/terminfo
01:03 < diegoviola> why do things have to be so inconsistent with it
01:04 < diegoviola> a TERM supports this, another term DB supports that, fuck it
01:04 < diegoviola> and it's not easy to tell what supports what even
01:09 < bnoordhuis> othiym23: Linus is on the record as saying he's not super interested in allowing probes / hooks into the kernel
01:10 < bnoordhuis> othiym23: i believe he doesn't want to bless a single solution
01:10 < bnoordhuis> i.e. dtrace, systemtap, lttng
01:10 < bnoordhuis> but there's tons and tons of probes in the kernel
01:17 < othiym23> bnoordhuis: are there hooks, or is there a general mechanism for inserting monitoring into the kernel?
01:18 < othiym23> bnoordhuis: the way systemtap injects itself into kernelspace seems pretty primitive / general / open-ended
01:18 < bnoordhuis> othiym23: there's a general mechanism, kprobes
01:24 <@Nexxy> ermahgerd
01:24 < bnoordhuis> is that a primal scream or the nick of someone in this channel?
01:25 < __peterbraden> does anyone have any experience with gyp?
01:25 < ermahgerd> you rang?
01:26 < bnoordhuis> __peterbraden: yes
01:27 < __peterbraden> bnoordhuis - how do I link to another library without hardcoding the header paths?
01:27 < __peterbraden> is there a way to use something like pkg-config?\
01:27 < bnoordhuis> __peterbraden: no, not really. the solution we use in node is to wrap it in a python script
01:28 < __peterbraden> ah, I see
01:28 < bnoordhuis> gyp is really only for building, not feature discovery
01:28 < __peterbraden> I just want a fairly robust build, that uses whatever path a library has
01:28 < __peterbraden> I guess I can hardcode for now
01:39 < timoxley> isaacs is new.npm's login supposed to work?
01:39 < timoxley> oh
01:40 < othiym23> timoxley: have you gotten new.npm login to work?
01:40 < othiym23> it hasn't for me, yet
01:40 < timoxley> nope
01:40 < timoxley> othiym23 it doesn't explicitly say it works
01:41 < timoxley> othiym23 perhaps only works through account creation
01:43 < othiym23> yeah, I just get a couch 401 Unauthorized stacktrace when I try to log in
02:23 < _Tristan> I'm trying to package something, and I did "npm install . -g" to check if it would work. If I do require('~/.npm/thingy/') it works fine, but if I do require('thingy') it can't find it.
02:43 < _Tristan> I AM GOING TO KILL EVERY HUMAN WHO HAS EVER CONTRIBUTED A SINGLE LINE OF CODE TO NPM.
02:43 < mmalecki> ok.
02:43 < mmalecki> I'll grab my gun then.
02:44 < _Tristan> mmalecki: Perhaps instead you could tell me why my package won't work?
02:45 < timoxley> _Tristan you can't require globally installed modules?
02:45 < timoxley> _Tristan install it locally, then require should work
02:46 < _Tristan> ohgodthatwasit.
02:46 <@konobi> _Tristan: wassup?
02:47 < mmalecki> _Tristan: do I still need my gun?
02:47 < mmalecki> this tavor is kinda uncomfortable to handle
02:47 < _Tristan> no, I don't think so.
02:47 < mmalecki> ok, great
03:04 < tim_smart> _Tristan: If you are a fan of globally, you can export the npm directory to your NODE_PATH
03:04 < tim_smart> *globally installing modules
03:06 < tim_smart> Time to write a gui in visual basic to track a external ip address...
03:12 <@konobi> tim_smart: poor goit
03:12 < tim_smart> konobi: The csi clip gets me everytime
03:12 < tim_smart> Or wherever show it is
03:12 < tim_smart> that*
04:24 < CIA-93> node: Fedor Indutny master * rd923269 / deps/openssl/openssl.gyp : tls: make tls a little bit faster - http://git.io/qI8aPg
05:13 < owen1> does anyone understand this diagram (node.js architecture)? http://platformjs.files.wordpress.com/2010/11/nodejsarch.png
05:21 <@isaacs> timoxley: yes, login is supposed to work.  but it's probably got bugx.
05:21 <@isaacs> *bugs
05:21 < timoxley> isaacs np
05:22 <@isaacs> ok, back to "home finally, watch movies and veg" mode :)
05:30 < pecke01> isaacs: hehe sounds nice
05:31 < othiym23> I am going to be rewriting NodeConf notes until I die
05:31 < othiym23> at least this way I have half a chance of remembering what actually happened this week
05:32 < othiym23> here's the entirety of my notes on felixge's talk: "daaaaaaamn boyyyyyy — writing code on the fly" and "your stream parsers need to be resumable and deal only with the data you’ve received so far"
05:32 < othiym23> it was that kind of presentation
05:35 < owen1> othiym23: i heared something about joyent rewriting some c code into node. are there any blogs/writeups about this?
05:39 < owen1> i try to test a js code with node.js asserts. the js code is a file with some functions in it. it's not a module with exports. i guess my question is how to access a function like that in my test code?
05:40 < owen1> (it's an angular.js controller, if it means anything to anyone)
05:45 <@Nexxy> isaacs, wb
05:47 < othiym23> owen1: what are you using as a test framework?
05:48 < othiym23> owen1: the AngularJS tutorial has a bunch of examples of testing with Jasmine in the browser
05:49 < othiym23> if you don't want to wrap up your controller classes in a CommonJS (Node) module, there's not necessarily a super-straightforward way to use Node to test it
05:49 < othiym23> you could take a look at grunt, maybe, and see how it tests client code using QUnit and PhantomJS, but that seems a little heavyweight for what you're trying to do
06:03 < owen1> othiym23: true. angular tutorial uses jasmin for unit tests and for end-to-end they use their own dsl to make http calls. i want to try node.js built-in assertions.
06:03 < owen1> othiym23: at least for unit tests. and it will be great if i'll be able to use it also for e2e.
06:04 < owen1> othiym23: i like to feel the pain before moving to testing frameworks. plus i like to test in the terminal
06:15 < myndzi> i've been re-evaluating some data storage choices, and i'm wondering if anyone has experience with analyzing large sample sets of data?
06:15 < myndzi> it's looking like one-row-per-sample and pray that i can index and optimize queries enough may not cut it
06:16 < owen1> is this still the architecture of node.js - libev for event loop, libeio for thread pool, c-ares for asyc dns? http://blog.zorinaq.com/?e=34
06:22 < owen1> if that's the case, can someone explain libeio and when is it come to play?
06:23 < owen1> also, what does node binding (socket, http, etc) in this diagram means? http://platformjs.files.wordpress.com/2010/11/nodejsarch.png
06:42 < TimeTurner> owen1: libeio is the lib which facilitates node's backend thread pooling in a very efficient async-y sort of way and node's bindings are the built in modules, so to speak, that the end user has access to and can 'require' in their app. the bindings are basically the lowest level libs that node provides for use within the js env
06:44 < wubino> hello folks, I would like to build a simple restful json server in node.  Where should I start?
06:44 < TimeTurner> express
06:44 < TimeTurner> https://github.com/visionmedia/express
06:47 < wubino> looks great, any ideas or reads on implementing simple authentication?
06:48 < TimeTurner> https://github.com/visionmedia/express/tree/master/examples/auth
06:49 < TimeTurner> simplest, yet secure auth you can get
06:58 < othiym23> owen1: if you want to see the platform layer of recent versions of node, you should definitely be looking at libuv: https://github.com/joyent/libuv/blob/master/include/uv.h
07:00 < othiym23> libev and libeio are sort of subsumed by libuv, which is meant to be a platform-neutral library that handles the eventing / nonblocking parts of the node core under POSIX / Windows
07:00 < TimeTurner> the code is so clean
07:00 < TimeTurner> and beautifully commented
07:01 < TimeTurner> wow
07:01 < othiym23> TimeTurner: that's good, because it's practically the only documentation libuv has ;)
07:02 < othiym23> but creationix used it to build luvit, so it's probably good enough
07:05 < TimeTurner> https://github.com/luvit/luvit 2 to 4 times faster than node.js :O
07:07 < othiym23> TimeTurner: that was true before 0.8 came out, but 0.8 stole the performance crown back ;)
07:07 < othiym23> which isn't to say that luvit isn't totally awesome
07:07 < nykac> hey, why can't i set a variable inside a callback? http://pastebin.com/VcWptXfJ (errors are in the client.get callbacks)
07:07 < othiym23> the fact that it has the Node API but in a completely different language is a testimonial both to the luvit team and the quality of libuv
07:08 < TimeTurner> I've heard so much about Lua that I'm really tempted to check it out especially since the syntax looks really cool
07:08 < TimeTurner> yeah
07:09 < othiym23> nykac: your response is getting written before your client.get callbacks have a chance to fire
07:09 < TimeTurner> that's primarialy the reason node people will want to check out luvit
07:09 < nykac> othiym23: how should i fix this?
07:10 < othiym23> nykac: you're going to want to figure out how to pipeline all those requests to Redis and then have the finished data object handed off to the response once they've all had a chance to run
07:10 < nykac> othiym23: thanks
07:11 < othiym23> take a look at how github.com/caolan/async's waterfall method works -- you can either use the library, or just emulate its style on your own
07:11 < othiym23> TimeTurner: creationix's talk at NodeConf was enough to convince me to pick up the Programming in Lua book, and I'm looking forward to having some time to work through it
07:12 < othiym23> also, luajit is an interesting vm project all its own, and its FFI mechanism seems neat, although it turned out to not work for what luvit needed
07:26 < __future__> At first glance, Lua looks like Python Unleashed or something 
07:27 < [AD]Turbo> hi there
07:52 < Noor_> how can i maintain login session cookies through all https.requests??
07:53 < Noor_> anyone?
07:54 < myndzi> use express or something like that
07:54 < myndzi> unless you want to do all the work yourselfd
07:57 < owen1> TimeTurner: othiym23 thanks for the info about node architecture. so inside every node process there is an event loop (libev) and also a library (libeio) that keeps a reference to any callback function. and the event loop ask the libeio if there is any io function that was completed, and if that's the case, the relevant callback is being called, and all that happens in the same process and the same 
07:57 < owen1> thread?
07:57 < Noor_> how can i do it?
07:57 < Jakey> can you install node as user
07:58 < Jakey> within user accoun
07:58 < TimeTurner> same process, different threads. My knowledge on the internals of node aren't that great actually but it basically uses thread pooling of some sort to facilitate multiple I/O tasks that return to the stack and execute the callbacks
07:59 < myndzi> http://lmgtfy.com/?q=express+session+support
08:00 < TimeTurner> you know its late when people use lmgtfy in #node.js :P
08:00 < myndzi> i only use it in extreme cases :P
08:00 < myndzi> 1) i don't know anything about express
08:00 < myndzi> 2) google does
08:00  * myndzi shrugs
08:00 < myndzi> it's right there on the express website under session support
08:02 < TimeTurner> yeah I agree for this one
08:02 < TimeTurner> honestly people need to sit down and read before asking questions imho
08:02 < owen1> TimeTurner: when i read libeio it say it uses threads. that's why i don't understand when i hear that node asyn is done with no thread. even ryan mentioned it when he said that node is similar to nginx - it's not using threads but uses event loop instead!
08:02 < Noor_> wouldn't globalagent  be useful for that
08:02 < TimeTurner> true
08:02 < Noor_> ?
08:03 < myndzi> i don't always know what to read, that makes up the majority of my questions
08:04 < myndzi> that or weird crap
08:04 < TimeTurner> owen1: the single-threaded nature is what is exposed to the dev for performing I/O tasks. the threads are handled very effectively by node and only node has internal access to them. the dev cannot perform blocking operations under any circumstance and if they do then the whole system will get blocked
08:05 < myndzi> think i just read something about this earlier, the threads are only used for blocking calls(?)
08:05 < TimeTurner> myndzi: yeah that's the problem with all these modules. too many choices and even when you narrow it down you have to sift through 10+ web pages talking about each of the modules in which half of them have different viewpoints on best practices
08:05 < myndzi> well, there's four categories of knowledge
08:06 < myndzi> 1) things you know that you know 2) things you know that you don't know 3) things that you don't know that you know 4) things that you don't know that you don't know
08:06 < myndzi> i'm usually after category 4, or i've spent at least an hour+ trying to solve it myself
08:06 < myndzi> :P
08:07 < myndzi> i'll still answer easy questions if it doesn't take me as much effort to research them as it would to reference someone to them :)
08:09 < owen1> TimeTurner: so when i do http.createServer or fs.readFile, it create a thread for me, but i can't access it and don't care?
08:09 < wubino> can I implement oauth for a json client?
08:12 < owen1> Noor_: what do u mean by 'mainain login session cookies'. i am trying to use node.js without express and curious about this. i am currently creating a cookie after the user logged in.
08:12 < Noor_> express isn't useful in my case! let me make it in different way. I want to make a post request to sign in a user on a remote website x. the user session cookie should be saved so it can be used on later requests.
08:13 < Noor_> something that resembles browser cookie handling 
08:13 < owen1> Noor_: that's how i create a cookie  res.writeHead(200, { 'Set-Cookie': 'loggedin=true', 'Content-Type': 'text/plain' })
08:14 < Noor_> then how do you use it in other reuests?
08:15 < TimeTurner> owne1: yes, exactly. node exposes its bindings api in such a manner that you don't need to or should care about how node handles the async stuff. the take away point is that it is the most async as can be and still handle multiple requests without blocking on them
08:15 < owen1> Noor_: i use browserID, btw, and i do a POST to the browserID provider, and if i get 200 from that post, i create the cookie. not sure about other requests. i just impleted it now.. 
08:16 < Noor_> i have this implemented. but i'm trying to get other user data that needs authorization using other requests and its not working
08:17 < owen1> TimeTurner: yeah, but ryan said that nginx can handle more requests and with less memory due to the fact it's not using a thread per reqests. threads are expensive in cpu and memory. so now i understand that even node is using threads. so i am a bit confused.
08:18 < myndzi> ...
08:18 < myndzi> "loggedin=true" ?
08:18 < myndzi> that's the least secure thing you could possibly have come up with :P
08:18 < myndzi> 1) NEVER trust data submitted from the client
08:18 < myndzi> 2) see 1
08:18 < myndzi> Noor_: if you don't want to use a module, you will need 1) some sort of data store 2) some way of generating unique identifiers and 3) a little work
08:19 < myndzi> when the user authenticates, you generate a unique id and store it in your database, memory store, or whatever
08:19 < myndzi> you give them a cookie with that id
08:19 < myndzi> every time they connect, they will send the cookie
08:19 < myndzi> and you check that the cookie exists and retrieve the data associated with it
08:19 < Noor_> myndzi… you're answers are totally irrelevant to my questions, but thanks anyway.
08:20 < myndzi> i was initially replying to owen
08:20 < myndzi> but you do want to retrieve data associated with a session on a user request, yes?
08:20 < Noor_> no
08:20 < owen1> Noor_: I have the user's email. i plan to send the email on each requet. is that relevant?
08:21 < myndzi> Noor_: what information do you need, then?
08:21 < owen1> myndzi: i set the cookie so i can hide the login form. what's the issue with this again?
08:21 < myndzi> owen1: by your example, all you set is a cookie where the client says "i'm logged in!" and you trust them
08:21 < myndzi> if you don't use that for authentication, then it's irrelevant
08:21 < Noor_> simulating a headless browser behavior.
08:21 < myndzi> but it's not clear since you didn't specify any sort of id
08:22 < Noor_> node is client here. not a server
08:22 < myndzi> Noor_: so you want to STORE the cookie and re-send it to the server
08:22 < Noor_> exaclty 
08:22 < myndzi> capture the set-cookie header, then supply the required cookies in a cookie: header each request
08:22 < myndzi> or... use zombie or casperjs
08:23 < Noor_> I'm saving set-cookie array and resending it. doesn't work
08:23 < myndzi> not specific enough
08:23 < myndzi> show code or be specific
08:23 < myndzi> the server might send more than one Set-Cookie header
08:23 < myndzi> but you should only be sending one Cookie: header
08:23 < Noor_> tru
08:24 < myndzi> separate multiple cookies with semicolon space
08:24 < Noor_> true
08:24 < Noor_> its an array anyway
08:24 < myndzi> the server will also send scope and expiration information
08:24 < myndzi> you should not be providing that back
08:24 < myndzi> finally, ensure that it's not only cookies that are required
08:25 < myndzi> two-factor authentication and the like may require that you parse the html for hidden form fields and submit those with your login request
08:25 < myndzi> and/or any further requests
08:25 < Noor_> i'll try to provide a pastebin 
08:25 < myndzi> if you want to simulate a browser
08:28 < nrw> Hello, all.
08:28 < nrw> I have a Buffer that I want to read via a Read Stream. Is that possible?
08:29 < myndzi> nrw: check out the Binary module
08:30 < myndzi> i don't know exactly what you mean, but it is a super handy thing for processing formats and protocols
08:30 < nrw> myndzi: i'll check it out.
08:34 < owen1> myndzi: thanks for your feedback about my lack of secure login (: just to make sure we'r on the same page. i use browserID - i make a post to the browserID server and get back the user's email. i then add a cookie with loggedin=true and send back the email to the client and save the email in a js variable on the client. u'r saying it's not secure since evil developer can call my api with similar cookie?
08:35 < Noor_> http://pastebin.com/EvgSsmFs
08:40 < myndzi> owen1: pretty much
08:40 < myndzi> ask yourself a question
08:40 < myndzi> could somebody make up a valid cookie without interacting with your server?
08:40 < myndzi> and
08:40 < myndzi> could somebody make up a valid cookie without properly authenticating?
08:40 < EvilRabbit> Having an issue installing node using the windows installed on the node site. Works up untill the section creating shortcuts and then says an error has occurred and rollsback - is there not a log somewhere I can review
08:40 < myndzi> if all i have to do is provide an email and my "promise" that i'm logged in, the answer to both of those is true
08:41 < myndzi> Noor_: ... yeah, it comes back to what i was saying about the format of the server set-cookie header and the client cookie header
08:42 < myndzi> the server can send 0 or more set-cookie headers
08:42 < myndzi> and it separates the cookie from some other info with semicolons
08:42 < myndzi> so the server might say
08:42 < myndzi> Set-Cookie: lololololo; domain=foo.com; expires=somedate [i don't remember the exact formatting]
08:42 < myndzi> node will give you the header in an array if there is more than one item
08:42 < myndzi> with one item per array index
08:43 < myndzi> to properly supply the cookies to the server,
08:43 < myndzi> you must send Cookie: lololololo; cookie2; etc.
08:43 < myndzi> which means you have to 1) remove the cookie scope data
08:43 < Noor_> ok
08:43 < myndzi> and 2) put it into string format
08:43 < Noor_> ok
08:43 < myndzi> i suggest you echo the set-cookie header results so that you can see what they look like
08:43 < myndzi> and then use regexes or string.split (?)
08:44 < Noor_> i already did 
08:44 < myndzi> and .join
08:44 < wubino> is node.js no longer a scripted language?
08:44 < Noor_> split(';')?
08:44 < myndzi> ?
08:44 < myndzi> Noor_: i don't recall if the space is mandatory, but it seems to exist frequently -- however you only want the first token so it's irrelevant and that should work
08:44 < myndzi> split('; ') might be more technically accurate, i'm uncertain
08:44 < myndzi> you should probbaly use join('; ') though
08:45 < Noor_> I agree.
08:45 < myndzi> since that's how browsers seem to do ti
08:45 < Noor_> will try
08:45 < myndzi> it*
08:45 < Noor_> thanks a lot 
08:45 < owen1> myndzi: so on successful login, i should generate a unique id, save it in my users collection (i use mongo) and put that id in the cookie. and each reqest i'll query the users collection for the id from the cookie?
08:45 < myndzi> yes.
08:45 < myndzi> or cache it in memory, depending on how you wanna do things
08:46 < myndzi> you cannot trust ANY information from a client
08:46 < myndzi> apply this to all aspects of your application and you'll be the better for it
08:47 < myndzi> i'll give you a real-world example :)
08:47 < myndzi> go to nomorepasting.com
08:47 < myndzi> check out the html and examine their captcha
08:47 < booo> how do i check if I called uv_poll_init() on a handle already?
08:47 < owen1> myndzi: cache in memory sounds nice since it's faster than db. can i use a simple js array or hash that is part of the node.js server.js?
08:47  * myndzi shrugs
08:47 < myndzi> use whatever you want
08:48 < myndzi> i'm just talking about the information going back and forth
08:48 < owen1> myndzi: let me look at the site
08:48 < myndzi> if a guy comes up to your house and says "hey i'm your sister's uncle, lemme in" are you gonna be skeptical?
08:48 < myndzi> on the other hand, if a guy comes up to your door and says "hey, your sister sent me this unique 512 bit code in a letter, here's the letter"...?
08:48 < myndzi> a little less skeptical eh? :)
08:49 < owen1> nice
08:50 < myndzi> right? what is it, xor 255? i can't quite remember
08:50 < nrw> myndzi: node-binary is close, but I think it's a bit lower level than i need. More context: I'm getting an image file out of GridFS with node. It arrives as a Buffer. I want resize the image. The tools i've found (node-gm, etc.) take a file path or readStream. Is there a way to do this without saving the file to disk?
08:50 < myndzi> sure: provide a readstream yourself
08:51 < myndzi> create an instance of readablestream and emit data events and all that
08:51 < nrw> myndzi: oh. :P
08:51 < nrw> thanks. i see how this is going to work.
08:53 < RushPL> how to unpipe a pipe?
08:54 < myndzi> not any particularly straightforward approach, a better question may be: why would you need to?
08:55 < RushPL> I am creating a custom Stream to which I can attach filters which are Stream themselves. I have a pushFilter() method, and I'd like to make a popFilter as well. I am using pipe in a few places which is quite convenient.
08:56 < RushPL> so well it would be quite natural to be able to "unpipe".
08:57 < myndzi> i think the concepts of streams are more along the lines of "once and for the duration"
08:57 < myndzi> it may be simpler and cleaner to create instances of your stream as necessary and bind the desired filters at the time you use it
08:57 < myndzi> otherwise, um.. you may have to read the stream.js class and unbind all the events manually
08:57 < RushPL> hmm, possibly
08:58 < myndzi> but streams by their intent aren't the kind of things that are meant to be piped and unpiped
08:58 < myndzi> you could, of course, subclass stream and provide an unpipe :)
08:58 < RushPL> myndzi: I was thinking of ripping .pipe from stream.js and rolling my own :p but then, I'd like to use as much from core node as possible without writing my own stuff :)
08:58 < myndzi> you can inherit stream and add your own .unpipe prototype
08:59 < elliottcable> Nexxy!
08:59 < RushPL> thank you for clarification :)
09:04 < othiym23> owen1: your Node code is always single-threaded, but evented
09:05 < othiym23> owen1: and like I said, look at libuv instead of libev / libeio
09:05 < othiym23> owen1: there are threads at play within the Node.js process, but they're for things like maintaining connection pools and garbage collection -- they're not accessible to use as a Node platform user
09:06 <@Nexxy> elliottcable, !
09:06 < myndzi> there's always child_process and cluster though
09:06 < myndzi> :)
09:06 <@Nexxy> elliottcable, <3
09:06 < elliottcable> 'sup sexy
09:06 < elliottcable> sexxy*
09:06 < elliottcable> sorry forgot how to count x's
09:06 <@Nexxy> Nexxy*
09:06 < othiym23> owen1: it takes a while, but if you can wrap your head around events and streams and the notion of an event queue handling all of your work, it gets to feel much more natural and you stop worrying about the low-level implementation details
09:07 < othiym23> at least until it's time for you to make the whole thing scale under load ;)
09:07 < elliottcable> is Natasha awake? feeling up to IRCing? I'd love to talk to both of you at once, been ages since I got to.
09:07 < myndzi> yeah, 10-deep callback trees are a treat ;p
09:07 <@Nexxy> she's next to me
09:07 <@Nexxy> reading this
09:07 <@Nexxy> I will join ##hat so we don't spam #Node.js 
09:07 < elliottcable> o7 nexxt to Nexxy
09:08 < elliottcable> okay, bye bye again #Node.js, for another year or two ;)
09:08 < othiym23> myndzi: yeah, process-based concurrency is the Node way to get something like multi-threaded processing
09:09 < othiym23> but even then you should be communicating via streams and not trying to do hairy stuff with mutexes and whatnot
09:10 < myndzi> i totally muted my ex :V
09:10 <@Nexxy> myndzi, I did that to
09:11 <@Nexxy> ++
09:11 < othiym23> I haven't had to do that since the 90s
09:11 < othiym23> when I turned off talk on all my login sessions
09:13 < owen1> othiym23: i can't read c/c++ so i didn't understant the libuv code u sent me. when u say maintain connection pool. u mean when i use http.createServer it will use more than one thread to receieve requests, right?
09:14 < owen1> but within this thread, all the io stuff will use the event loop, so it will be single threaded, right?
09:14 < othiym23> owen1: yes, but that's just an optimization that's abstracted behind the Node API
09:14 < othiym23> as far as you know, as a Node user, there's only one thread
09:15 < owen1> othiym23: right. i want give a node.js talk so i try to understand a bit under the covers
09:15 < owen1> othiym23: i know, but i am curious about what really happens below.
09:16 < othiym23> you just write calls and callbacks, and if you need to break up work, either because it's I/O or CPU-intensive, you either call process.nextTick() yourself or you wrap streams / EventEmitters around the work to be done
09:16 < owen1> when i do fs.readFile(function(){...} - what happens? what libraray is doing what? are there threads involve, etc.
09:16 < othiym23> if you want to understand what's going on under the cover, uv.h is going to be your best bet ;)
09:16 < othiym23> just read the comments, you don't have to read the code
09:17 < othiym23> for a simple file I/O operation like fs.readFile, almost all of the real work being done is in setting up the underlying stream
09:20 < othiym23> owen1: if you want to get a real feel for how Node is working under the hood, find some code that uses fs.createReadStream and then uses .on() event handlers to deal with the file data
09:21 < othiym23> and read up on stream.pipe(): http://nodejs.org/api/stream.html#stream_stream_pipe_destination_options
09:22 < owen1> what about http.request(option, function(){...}). the address of my callback is registered somewhere, and the event loop asking the os "hi. is there anything ready for me?" and when something is ready (let's say a data event is ready) the event is being called with some data (buffer in this case).
09:25 < othiym23> the handler is called, yes
09:25 < othiym23> the underlying mechanism is essentially the select() call
09:25 < owen1> select is part of the event loop, right?
09:26 < owen1> there is a unix command that suppose to be similar
09:26 < othiym23> so there is a loop that's periodically scanning all the available file descriptors open in the process and seeing if there's anything to be done with the data it has available
09:26 < othiym23> "man select" will tell you how select works
09:27 < othiym23> I said "essentially" because there are a variety of mechanisms that get used, depending on whether Node is running on Linux / OS X / SmartOS / Windows / etc
09:27 < othiym23> but most non-blocking I/O works very similarly
09:28 < othiym23> anytime an operation does I/O in Node, it should be creating a handler / callback that goes on the event queue
09:28 < othiym23> that way other event handlers will get a chance to run if any of their data has come in, and hand off any further I/O operations they may have
09:28 < othiym23> and the whole system keeps running smoothly, without needing to use threads
09:29 < Noor_> myndzi: split didn't simply work for me. some regex magic and everything was great.. just wanted to thank you.
09:29 < othiym23> there are circumstances when all this starts to break down, and node has various strategies for dealing with that, but that's the conceptual model it's operating under
09:30 < dob_> some everyauth user here?
09:38 < owen1> othiym23: bookmarked the libuv header file. thanks
09:45 < dob_> Did somebody every try to implemenet moduleErrback function in everyauth? 
09:58 < owen1> othiym23: let's say i create readable stream of a file - rs = fs.ReadStream('test.txt'). fs is an event emiter so let's say I  get 3 'data' events and eventualy an 'end' event. i had total of 4 events. the os had to read small chunk of test.txt. it did it 3 times. and it did it in the same thread of the node app. is this accurate so far?
09:59 < owen1> i am using the example from this page - http://nodemanual.org/latest/nodejs_dev_guide/understanding_streams.html not sure if the api is still the same
10:00 < owen1> i actualy don't see ReadStream here http://nodejs.org/api/stream.html#stream_stream
10:03 < strk> can I tell npm-install not to look at npm-shrinkwrap.json ?
10:41 < TrahDivad__> hi ppl
10:41 < j86> can i somehow pass signals to a node process? or need to setup tcp / http backend?
10:42 < TrahDivad__> Can someone tell me if they are having a really slow connection to http://nodejs.org/?
10:42 < TrahDivad__> It's taking me 5 hours to download the latest node.js package (7Mb)!!
10:42 < flexd> Uh, I think I'm doing something wrong or Jade has messed up. doing script{:type => "text/javascript", :src  => "js/main.js"} in the jade template and I get <script>{:type => "text/javascript", :src  => "js/main.js"}</script> in the generated html :s
10:44 < AAA_awright> flexd: What's with the {:type...} stuff?
10:45 < flexd> I thought that's how you do it? I was looking in the jade documentation
10:45 < flexd> oh
10:45 < flexd> DOH
10:45 < flexd> The jade syntax documentation for scala
10:45 < flexd> Damnit I hate links with #whaterverplace that does not mention a title :P
10:46 < AAA_awright> flexd: Jade should be passing tag contents literally
10:46 < AAA_awright> Also, https://github.com/visionmedia/jade
10:46 < TrahDivad__> Can somebody else tell me how long it takes them to download the latest node.js package from the official website?
10:46 < AAA_awright> Though the syntax shouldn't change between languages...
10:48 < shanse> the increase in download time is a test of faith. if you can wait a couple of hours for the package then you're worthy to use node
10:49 < flexd> AAA_awright: It was some Scala version of Jade, kind of silly of me not seeing thet title :)
10:49 < flexd> Works now
10:50 < flexd> TrahDivad__: Like 10 seconds_
10:50 < flexd> ?
10:50 < flexd> Kind of depends on your internet speed and what mirror you use I suuppose.
10:51 < strk> building and installing 0.8.0 :
10:51 < strk> ln -sf ../lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm
10:51 < strk> shebang #!/usr/local/bin/node /usr/local/lib/node_modules/npm/bin/npm-cli.js
10:51 < strk> fs.js:338
10:51 < strk>   return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);
10:51 < strk>                  ^
10:51 < TrahDivad__> flexd: I'm just trying to see if I have to call my ISP or not
10:51 < strk> Error: ENOENT, no such file or directory '/usr/local/lib/node_modules/npm/bin/npm-cli.js'
10:51 < TrahDivad__> shanse: I'll wait 5h then :) I'm a true beleiver
10:51 < strk> note that I'm switching between different node versions, so there might be a leftover from node-0.6
10:52 < strk> rm -rf/usr/local/lib/node_modules # fixed this
10:55 < flexd> TrahDivad__: What are you using to download node? npm?
11:07 < strk> so I noticed that "npm install", in presence of an npm-shrinkwrap.json file, still refuses to install the listed versions if they say they won't work with the running node version
11:07 < strk> shouldn't "npm-shrinkwrap.json" be authoritative also for that ?
11:20 < panosru> Hello, I have install node via NVM but when I try to require global installed modules I get Error: Cannot find module, anyone got the same experience with me ?
11:22 < klaemo> hi! how can i handle streaming file uploads in express?
11:22 < sfoster> hey I run a js usergroup in leeds, uk. We're doing an intro to node next Wednesday: http://leedjs.posterous.com/july-meetup-introduction-to-nodejs
11:24 < sfoster> if anyone fancies doing a quick "here's how I use node" talk - on site or via goog hangout (10mins or less) I'm trying to collect different perspectives
11:24 < sfoster> plz dm me on here/ on freenode, or tweet @leedsjs
11:28 < Glenjamin> sfoster: I work for SkyBet, based in Leeds - we use quite a bit of Node.JS
11:28 < Glenjamin> i'll circulate the post around the dev team
11:28 < sfoster> Glenjamin: awesome thanks, I'd love to see some of you there. 
11:30 < Drager> So I'm trying to accomplish a easy task over here.. I want to push some data, I have it like this: registerform in python and then I'm counting all the users in the database and displaying it on my home page, when a user creates a new account that value increases but the user ahve to refresh that page to see the count of the users. I dont want that. I want to push that count. Anyone have a idea?
11:34 < sfoster> Drager: this is the job of http://socket.io/ .. there are other implementations, but basically you want node watching the db (or maybe a file) and have it send a message to the front-end when the value changes. 
11:36 < Drager> sfoster: Yes, I thought so. I have installed node.js aswell as socket.io. But I can't figure out howto do it..
11:37 < sfoster> If it were me I would keep it simple and just write the user count to a file whenever I updated the db and just have node watch that file. But that's just because I'm a front-end dev and leary of databases :)
11:38  * wltsmrz suggests to use plain jane `ws` module
11:39 < sfoster> the value of socket.io is the fallbacks and shimming it provides you on the client-side I think
11:39 < flexd> You could just touch or increment something in the database too, or redis or whatever, or a ifle
11:39 < flexd> file*
11:41 < wltsmrz> When did firefox begin to default websocket support, again?
11:41 < wltsmrz> I'm wondering when we can stop worrying about providing websocket fallbacks.
11:42 < wltsmrz> By we I mean we users and developers of web applications whose users are less likely to be running IE 6
11:42 < wltsmrz> But yeah, as of now, for that reason, socket.io might be a good idea
11:42 < wltsmrz> Redis has nice increment commands
11:43 < wltsmrz> http://redis.io/commands/hincrby
11:44 < wltsmrz> Last time I tried to use hincrbyfloat, node_redis wasn't kosher (I think)
11:51 < flexd> I'm using redis.incr to keep track of how many connected clients I have atm.
11:52 < Drager> sfoster: Yeah sure, but have no idea where to begin
11:54 < AdTaylor> Hey guys - I'm wanting to use a service but without using a package like soap. Is there a way to set the header of http.get to a soap action?
11:55 < wltsmrz> Drager, there's a github & such, I believe
11:55 < wltsmrz> Have you investigated?
11:55 < Drager> wltsmrz: Looked like a maniac
11:56 < wltsmrz> What about this? http://socket.io/#how-to-use
11:57 < Drager> wltsmrz: Been there, done that
11:57 < wltsmrz> Are you saying that you were capable of getting this much to work?
11:58 < wltsmrz> Or that you tried & failed to understand this much?
11:58 < Drager> I totally failed
11:59 < Drager> or I did get some things of it
11:59 < wltsmrz> Socket.io tries to serve a script to the client so that you have one API exposed for graceful fallback from websockets (optimal choice) to AJAX polling, etc.
11:59 < Drager> I could set it up and use the socketio and get some messages
11:59 < wltsmrz> Well then
11:59 < wltsmrz> You're on your way
12:00 < Drager> I guess..
12:00 < Drager> I did try this aswell; http://www.gianlucaguarini.com/blog/?p=272
12:29 < RushPL> hmm, is there a way to create anonymous fifo with node.js? similiar to one that fork() creates but I need a second one.
12:31 < bnoordhuis> RushPL: not with node core
12:33 < RushPL> bnoordhuis: so nothing like "pipe (2)" ?
12:34 < bnoordhuis> RushPL: nope
12:36 < RushPL> bnoordhuis: and what about "server.listen(path, [listeningListener])#" - couldn't this work?
12:36 < RushPL> would it work on Windows as well?
12:36 < bnoordhuis> RushingS: that creates a unix socket
12:37 < bnoordhuis> it does a similar thing on windows, yes
12:37 < RushPL> all right, so theoretically I could use this - even though I would prepare to have it anonymously.
12:46 < TrahDivad> Can somebody tell me if there exists a production ready way of doing database migrations with a Postgres DB? node-migrate does not seem to support PG yet.
12:48 < RushPL> bnoordhuis: I actually I think you might have been wrong .. see http://nodejs.org/api/child_process.html .. they say I can specify an additional communication channel (pipe) during spawn, and according to doc I could do the same for fork() - you think it might work?
12:48 < RushPL> "The 'stdio' option to child_process.spawn() is an array where each index corresponds to a fd in the child. The value is one of the following:"
12:49 < bnoordhuis> RushPL: yes, but it's not a fifo
12:49 < bnoordhuis> at least, not a fifo in the fifo(2) sense
12:50 < bnoordhuis> it's not a pipe either but a socketpair of anonymous unix sockets
12:50 < RushPL> ah well, my question was too inprecise. I need a two-way stream to my process.
12:50 < bnoordhuis> oh, that - yes, that it does :)
12:52 < chiel> Hi there. If I do an `npm install -g` of a module, and then try to do `require('module')` in a js file, shouldn't it be able to find it, since it's global? It works if I first do `npm link <module>`, but ideally I wouldn't want to do that
12:52 < wltsmrz> I wonder if you're using nave
12:53 < chiel> wltsmrz: nave? probably not, since i have no idea what it is :p
12:53 < wltsmrz> Some guy earlier had such a problem and mentioned that he was using nave :thumbsup:
12:54 < wltsmrz> My understanding is that the point of globally installed modules is that you an access them from anywhere, yeah
12:54 < wltsmrz> But you can just install locally until you solve that riddle
12:54 < chiel> yeah, did an npm link to bypass it
12:54 < chiel> but on the build server I'd rather not have to link it every time I want to run the integration tests :p
12:55 < wltsmrz> RIght
13:12 < RushPL> bnoordhuis: actually code for fork overrides options.stdio :/
13:13 < RushPL> options.stdio = options.silent ? ['pipe', 'pipe', 'pipe', 'ipc'] :
13:13 < RushPL>       [0, 1, 2, 'ipc'];
13:13 < RushPL> you think it's a bug or intentional?
13:13 < bnoordhuis> RushPL: intentional. spawn() should work for your use case, though
13:13 < RushPL> yes
13:13 < RushPL> just wondering if it was a bug, I can use spawn no problem
13:14 < bnoordhuis> RushPL: no, no bug. things in node core (like cluster) that depend fork() make certain assumptions about how fork() sets up the child process
13:14 < bnoordhuis> *depend on
13:14 < Piriel> Hi, when I run ./configure I get : File "./configure", line 266     o['default_configuration'] = 'Debug' if options.debug else 'Release'                                           ^ SyntaxError: invalid syntax
13:15 < bnoordhuis> Piriel: you need to use python 2.6 or 2.7
13:16 < Piriel> no I dont need
13:16 < Piriel> 'I have to use you mean
13:17 < bnoordhuis> Piriel: depends. do you want to build node?
13:21 < Glenjamin> hrm, node requires 2.6+ to build now?
13:21 < bnoordhuis> Glenjamin: yes
13:21 < Glenjamin> that's going to bite us when we try and move to 0.8 :(
13:21 < Glenjamin> old-ish centos boxes :s
13:21 < bnoordhuis> yet another reason to upgrade to centos 6 :)
13:21 < Glenjamin> is it just because of stuff like the ternary statement, or is it deeper than that?
13:22 < Glenjamin> the "project" is underway
13:22 < bnoordhuis> no, that'd be easily fixed
13:22 < bnoordhuis> gyp - our build system - requires 2.6
13:22 < Glenjamin> yeah, just wanted to check
13:22 < bnoordhuis> 2.5 _may_ work but no guarantees
13:23 < Glenjamin> does that mean extension modules which build against 0.6.19 are likely to see some issues too?
13:23 < Glenjamin> now that they're generally switching to gyp
13:23 < bnoordhuis> yes
13:24 < Glenjamin> might have to bump the build box ahead of the rhel package until we get the proper upgrade then, once to keep an eye on
13:25 < jondot> hi all. i'm having some problems with encodings for Hebrew RSS feeds. looks like in Ruby it 'just works'. in node, i'm getting gibberish
13:28 < bnoordhuis> jondot: encoding issue?
13:29 < jondot> bnoordhuis, yes, i'm basically using mikeal's request, fetching an RSS feed, then returning it with Express as json
13:30 < jondot> there are 2 points where things can go wrong - request=>rss, and express=>enduser
13:30 < bnoordhuis> jondot: is the feed utf-8? if not, there's your problem
13:30 < deedubs> request(url, {encoding: 'utf8'}, ...)
13:30 < jondot> bnoordhuis, its not, i think.
13:30 < jondot> this is the feed: http://www.ynet.co.il/Integration/StoryRss2.xml
13:31 < jondot> sometimes the xml says an encoding, but the devs dont really know what their doing and stream it on ut
13:31 < jondot> utf8
13:31 < jondot> this is the case where the website is crappy and i shouldn't even expect their rss to be wellformed
13:31 < bnoordhuis> jondot: maybe use node-iconv?
13:32 < jondot> bnoordhuis, is that what ruby does then?
13:32 < bnoordhuis> jondot: i've no idea
13:36 < jondot> bnoordhuis, looks like it. i was able to manually use iconv on the incoming text and it worked, because i do know the source charset. looks like ruby is able to detect the encoding and also issue conversion to utf8
13:37 < Piriel> Hi bnoordhuis, I need to install the nodejs on virtual mchine, I dont understand what do you mean : build a node
13:39 < bnoordhuis> Piriel: if you want to compile node, you need python 2.6 or 2.7, anything else likely won't work
13:39 < Piriel> many thanks I will install python and then node.js. 
13:41 < bnoordhuis> Piriel: good luck :) pop in if you need further help
13:44 < Piriel> thanks :)
13:46 < Owner> you want a chillidognerd?
13:55 < thewanderer1> hi. if I set a timeout with a callback, at what stage will it get executed? at event loop iteration? or can it interrupt another function's execution to return into it later?
13:55 < kklg> Is there a better place than this channel to ask questions about problems with node-gyp?
13:57 < Zipp> You can probably hit up TooTallNate on Twitter or something
13:58 < bnoordhuis> thewanderer1: node is single-threaded, one function never interrupts another one
13:58 < Zipp> But this is just as good a place as any
13:59 < kklg> Zipp, I'll try that as a last resort; don't want to bug him with minor problems. :)
13:59 < thewanderer1> bnoordhuis: well, single-threaded could mean using signal and signal handlers that interrupt execution... but I'll assume this is just executed in the event loop, then
13:59 < Zipp> kklg: Eh, he's nice :P Maybe he could help. What's your problem anyway?
14:00 < kklg> I'm compiling an addon on Windows. The problem is that when I compile it with gyp, node can't load it and I get the following error: http://pastebin.com/5EV9Jrys
14:01 < kklg> That's from the REPL; when I try in a script I get this: http://pastebin.com/CNijLU3y
14:01 < bnoordhuis> thewanderer1: it is
14:01 < kklg> The addon works fine when I compile directly from Visual C++.
14:02 < kklg> I'm using Visual C++ Express with the Windows 7.1 64-bit SDK and 64-bit node.
14:02 < Zipp> hmm, I've got nothing. Don't support Windows? :P
14:03 < kklg> No choice, I'm afraid. I must support ONLY Windows.
14:04 < kklg> I think it might be a problem with third party DLLs that I'm using. Maybe gyp isn't linking them correctly or something? I'm not 100% sure how that stuff works.
14:06 < Zipp> You have Python v2.7.2, right? (I mean, I know that's a shitty question, but I really don't know lol)
14:12 < kklg> Zipp, I have it, but my active installation is 2.6.7. Do you think that could affect it? The addon did compile correctly; I'll try again with 2.7.2, though.
14:16 < kklg> Looks like that didn't fix it.
14:19 < austinbv> is there a rake like tool for node projects
14:20 < vicapow> has anyone written up a decent response to this yet? http://blog.bearstech.com/2012/07/nodejs-is-a-toy.html
14:20 < kklg> austinbv, google's I'm Feeling Lucky gives me this: http://howtonode.org/intro-to-jake
14:23 < thewanderer1> in timers, is it guaranteed that a callback registered for +100ms will be executed earlier than registered for +101ms? and if not, how do I enforce such ordering? any specific pattern?
14:25 < thewanderer1> I suppose I could make a FIFO, push callbacks onto the queue, and then execute the whole queue on each timer's alarm, stopping at the first element whose time is not due yet...
14:25 < thewanderer1> but is there any kind of monotonic clock available inside node.js?
14:26 < Protected> Hey people. Is there any way to access a variable defined outside a function from within that function when it's passed as a callback and executed in a different context?
14:27 < kklg> thewanderer1, there's os.uptime(), but it might not have the resolution you need.
14:27 < thewanderer1> kklg: well, I need milisecond resolution
14:27 < mickhansen> Protected,  have you tried it out? Afaik context of the function call should not matter
14:27 < Protected> It's not working, says undefined
14:27 < thewanderer1> kklg: know of any other means of queueing events for the future in a defined order?
14:28 < Piriel> Hi I have installed python 2.7 and node.js 2.7.1. My questiion is how to run node.js and if there is a GUI ?
14:28 < kklg> thewanderer1, nope, sorry.
14:29 < booyaa> node js 2.7.1?
14:29 < booyaa> dude we're already at v0.8
14:29 < mickhansen> Protected, http://jsfiddle.net/QnaV6/1/ - Seems to work fine in this small example - Can you pastebin your code?
14:29 < booyaa> Piriel: http://www.nodebeginner.org/ http://nodetuts.com/
14:30 < booyaa> if you want a gui, give webmatrix2 a go
14:30 < austinbv> kklg: I saw jake and grunt wondering if one was standard
14:30 < booyaa> it has intellisense / code assist for node.js and modules
14:30 < kklg> austinbv: I don't know the answer to that.
14:30 < booyaa> Piriel: ^^^
14:32 < kklg> Protected: you're not talking about v8 contexts, are you?
14:33 < Piriel> yes booyaa
14:33 < Piriel> tell me
14:33 < eldios_> yo dudes.. any hint on how to use jade at runtime within a node app?
14:35 < booyaa> Piriel: i have set you on the path of node.js ninjadom you must now walk the lonely road alone
14:35 < booyaa> if you make it to the other side you will be ready
14:35 < thewanderer1> okay, let me expand my question a bit... I need to schedule actions to be executed in the future, but they strictly have to maintain order, i.e. if A is scheduled earlier than B, it must run before B, and if A is scheduled at the same time as B, the first one needs to be the action which was scheduled earlier
14:36 < thewanderer1> (earlier = added to the event queue first)
14:36 < Piriel> I am man who walks alone :)
14:37 < thewanderer1> so if I schedule two actions at +100ms, A and B, A runs first and B second, because I added A first and B second to the queue
14:37 < plato> thewanderer1 you could probably do that with the async library and setTimeout
14:38 < plato> there is also something like nextTick that ensures that something will be executed on the next iteration of the event loop
14:38 < plato> which might be helpful to avoid race conditions
14:39 < thewanderer1> plato: my problem with setTimeout is that the doc says execution order is not guaranteed
14:39 < notjrbauer> I'm getting an Error: Cannot find module './vendor/cookie', I did an npm update last night and everything seemed fine - i'm using express.js
14:39 < thewanderer1> and I need this property
14:40 < Protected> kklg: I don't know, so maybe not?
14:40 < mickhansen> Protected, probably not then :) You mean different context like function.call(context, args) right?
14:41 < plato> thewanderer1: perhaps you create new Job = {prereqsDone = false, task = function(){stuff}}, then in your setTimeout callback, you check if prereqsDone = true and only execute task if so
14:41 < kklg> Protected: Yeah, you'd know if you were. :)
14:42 < notjrbauer> anyone ever see that type of error after an npm update? :-\
14:42 < Protected> Scope, maybe
14:42 < thewanderer1> plato: it's not a set of inter-dependent tasks - they are wholly independent, but need to be in order
14:42 < Protected> I'm also talking about it in #express right now so I'll bug you again if we can't solve it there :)
14:43 < plato> yes you would set b.prereqsDone in a.task
14:43 < Piriel> Hi I Think I am in agood way ! I gave comand node. Then i gave command console.log ('hello'); and I received ---- > hello undefined
14:43 < thewanderer1> plato: how does this maintain order for 3 events? I don't think I understand...
14:44 < thewanderer1> plato: do you mean the task() function should "activate" the next event, in a linked-list fashion?
14:44 < plato> yes
14:45 < plato> it is probably not the best solution
14:45 < thewanderer1> the events don't know about one another... hmm
14:45 < plato> thewanderer1: look at this : https://github.com/caolan/async/
14:45 < plato> you should be able to build an array of functions on the fly, then pass it to async.series()
14:46 < plato> async will make sure they are executed in order
14:46 < thewanderer1> well, I need to modify the queue on the fly, like this: A added, 1 second passes, B added, 50 ms passes, queue executes
14:46 < plato> also it looks like the async.queue might work
14:47 < thewanderer1> async.queue is meant for work queues, not for serial queues, based on the description... could work if I set the parallelism limit to 1, but is kludgy
14:48 < thewanderer1> I think I'll just roll my own - just found out how to obtain the time with milisecond precision (Date.now())
14:48 < plato> thewanderer1: gl, sorry i couldnt be of more help
14:49 < Piriel> I need a help please: I have installed python 2.7.1 and node.js. When i give command console.log ('hello'); and I received ---- > hello undefined
14:49 < thewanderer1> I know it's probably not a monotonic clock - need to find a way to get around that, or write a C module which does it for me
14:49 < plato> piriel thats normal, what are you trying to do
14:49 < thewanderer1> plato: thanks, at least you helped me see the requirements that the implementation needs to meet
15:02 < herzogharker> so because i totally didn't ask around during nodeconf
15:03 < herzogharker> what mocking library do people like? my coworker has tried a few, none have really pulled through
15:04 < mateodelnorte> @herzogharker, since node is a dynamic language, I find it fairly easy to just write custom mocks each time. That said, 'require' is a problem since we don't write our code to support dependency injection w/ Node. So, I wrote 'mockrequire'. Give it a look and feel free to let me know what you think. 
15:07 < Piriel> Plato thanks i saw its normal and the example I made was succesfull !!!! :)
15:10 < herzogharker> mateodelnorte: thanks. 
15:16 < herzogharker> mateodelnorte: thanks. he hasn't tried yours yet, i'll pass it along
15:16 < RushPL> Is it possible to revert setEncoding?
15:16 < mateodelnorte> sure thing. enjoy ;)
15:16 < RushPL> with API I mean
15:17 < RushPL> it works with "socket._encoder = undefined;" which is ugly :)
15:17 < RushPL> couldn't setEncoding do it instead of undefined argument is passed? it doesn't do it
15:24 < mateodelnorte> @isaacs I've been using a simple postInstall script to install tarballed dependencies for my projects (ala "postinstall": "npm cache clean; npm install ./local_module-0.0.1.tgz"), but that no longer seems to work with the newest version of npm. I now get the error "npm WARN skipping, cannot run in /path/to/my/app@0.0.6 npm cache clean; npm install ./local_module-0.0.1.tgz. Is there another way I can specify a *local* tarball to install?
15:28 < sfoster> Protected: did you figure out your scope problem? 
15:29 < sfoster> Without seeing the code, I'm going to hazard a guess that you have a local variable in your function that has the same name as the one you are trying to access in the outer function
15:33 < Protected> sfoster
15:33 < Protected> Apparently the problem was that I was using this syntax:
15:33 < Protected> var name = new require('./class.js').Class();
15:34 < Protected> Splitting this in two lines, one to fetch the Class and the other one to instantiate it (new), the class is recognized inside the callback
15:34 < sfoster> ah ok. 
15:34 < Protected> So I have to use a dummy pointless variable outside the callback in order to store the class
15:35 < sfoster> var name = new (require('./class.js').Class)() would also do it. 
15:35 < sfoster> correction: var name = new (require('./class.js').Class))() 
15:36 < sfoster> unless I'm mistaken (which does happen)
15:37 < sfoster> its a precedence problem, its ambiguous in the first as to what the () are being applied to.
15:37 < Owner> my co-workers call this nerd.js and are picking on me :(
15:38 < booyaa> haha love that
15:38 < booyaa> nerd.js that needs to be a t-shirt
15:38 < herzogharker> i'd wear it
15:38 < booyaa> ditto
15:41 < Owner> i dont like it :(
15:44 < drudge\work> tjholowaychuk: what do you think of chocolat?
15:44 < tjholowaychuk> pretty nice so far
15:45 < tjholowaychuk> some subtle annoyances
15:45 < tjholowaychuk> like you can't (that I know of) style invisibles differently
15:45 < tjholowaychuk> usually like them lighter
15:45 < tjholowaychuk> the sidebar thing is kinda lame
15:45 < tjholowaychuk> some vim mode issues
15:45 < tjholowaychuk> but the rest is cool
15:45 < tbranyen> their site is pretty obnoxious
15:45 < tbranyen> Write code like a neckbeard! (though real neckbeards use Emacs)
15:46 < tbranyen> lol $49 for a text editor :-/
15:46 < tjholowaychuk> yeah that's too much
15:46 < drudge\work> yeah was discounted before the launch, better deal then
15:46 < alexgordon> want a discount?
15:46 < alexgordon> :P
15:46 < tjholowaychuk> too late :p bought it already hahaha
15:46 < drudge\work> tjholowaychuk: how do you mean style invisibles differently?
15:47 < tjholowaychuk> im not that cheap, but it is a bit much
15:47 < tjholowaychuk> drudge\work just to style them a lighter gray
15:47 < drudge\work> you can under themes
15:47 < alexgordon> I don't think it's too much? it's cheaper than pretty much every other paid mac editor
15:47 < tjholowaychuk> oh
15:47 < tjholowaychuk> hmm
15:47 < tjholowaychuk> im using my old github theme
15:47 < tjholowaychuk> which worked in TM
15:48 < tjholowaychuk> oh jesus
15:48 < tjholowaychuk> i totally missed that invisibles color picker
15:48 < drudge\work> :)
15:48 < tjholowaychuk> I thought it was a normal selector thing
15:49 < drudge\work> alexgordon: i think when it supports scripting it'll be worth the price :P
15:49 < tjholowaychuk> i like the automated syntax error thing
15:49 < tjholowaychuk> plenty of those with js
15:49 < tjholowaychuk> haha
15:50 < drudge\work> don't get me wrong, I already bought it. Just sayin'
15:50 < tjholowaychuk> some of my bundles seem messed up though. printfTAB fucks up now but meh I'll look into that later
15:50 < drudge\work> tjholowaychuk: which sidebar, the symbols one or the workspace area?
15:51 < tjholowaychuk> the file tree
15:51 < drudge\work> you don't like it?
15:51 < tjholowaychuk> nope
15:51 < drudge\work> why not?
15:51 < tjholowaychuk> chromeless more like aiwriter
15:51 < alexgordon> why not?
15:51 < tjholowaychuk> would be way better
15:51 < tjholowaychuk> and have that optionally fold out
15:51 < alexgordon> fold out how?
15:52 < tjholowaychuk> I dont mind how the first textmate does it, tm2 is ugly as fuck
15:52 < drudge\work> you mean a drawer?
15:52 < tjholowaychuk> yeah that
15:52 < tjholowaychuk> http://a1.mzstatic.com/us/r1000/064/Purple/v4/d3/ca/5e/d3ca5eb7-5514-9c64-f246-5b3704174a8b/mzl.ifmakvot.800x500-75.jpg
15:52  * drudge\work shivers
15:52 < tjholowaychuk> chromeless would be hot though
15:52 < alexgordon> printf snippet is: printf("%{1="%s"}\n"%{1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}%{2}%{1/([^%]|%%)*(%.)?.*/(?2:\);)/} ...lol
15:53 < alexgordon> I can definitely see how that might have a bug in it
15:53 < tjholowaychuk> haha
15:53 < tjholowaychuk> im not sure if you can get around esq for symbol autocomplete in vim mode
15:54 < tjholowaychuk> esc*
15:54 < drudge\work> you actually use vim mode?
15:55 < tjholowaychuk> yeah
15:55 < tjholowaychuk> some things are a little quirky
15:55 < tjholowaychuk> it would be nice if search would highlight as you type
15:56 < tjholowaychuk> and choc(1) seems to do weird things haha I've just alised open -a
15:56 < tjholowaychuk> other than that stuff i like it so far
15:56 < alexgordon> weird things?
15:57 < tjholowaychuk> it's been opening multiple windows, some blank
15:57 < tjholowaychuk> ill see if i can reproduce it
15:57 < alexgordon> oh, that
15:57 < alexgordon> I was able to reproduce it once, then it stopped doing it
15:58 < tjholowaychuk> yeah - weird seems like it's fine now
15:58 < alexgordon> really annoying
15:58 < tjholowaychuk> weird now i can $ choc newfile and it works
15:58 < tjholowaychuk> yesterday that was failing
15:59 < Owner> nerd.js is NOT A CLEVER INSULT
16:03 < Guest69770> pm isaacs Are you here?
16:04 < tk> has anyone had a problem with JSDOM not loading jQuery in most recent Node.js updates? on 6.0.18... and existing scripts now die with $ not defined everytime :/
16:05 < CIA-93> libuv: Bert Belder versioning * r8105bed / (5 files in 3 dirs): Prepare for proper versioning - http://git.io/ITPcfg
16:11 < eddyb> chjj: ping
16:15 < bmatusiak> anybody alive today
16:15 < tjholowaychuk> alexgordon another small thing that might be nice is (optionally?) displaying more of the filename for similarly named files
16:15 < tjholowaychuk> maybe from the open project's root or something
16:15 < tjholowaychuk> the ACTIVE part does it nice
16:21 < TheEmpath> RIP Computer Science http://i.imgur.com/Wx91Z.jpg
16:23 < context> wow do those books actually exist ?
16:24 < chjj> eddyb: hey
16:25 < alexgordon> context: apparently so http://www.amazon.co.uk/Spotify-For-Dummies-Computers/dp/1119952344
16:26 < eddyb> chjj: I fixed your focus problem in tty.js (I made it so that the terminals have automatic focus - the tabIndex trick - and it's not required to always have a focused terminal), should I push and make a pull request?
16:28 < context> alexgordon: i dont know whats worse, that the book was actually written, that it was actually printed, or that people actually buy it
16:30 < chjj> eddyb: what do you mean? id like to see your branch to see what youre talking about, yeah
16:34 < bmatusiak> anybody interested in helping me build a express middleware?
16:34 < tjholowaychuk> bmatusiak #express
16:34 < tjholowaychuk> or the mailing list
16:35 < bmatusiak> cool thanks, question still applies :P
16:36 < bmatusiak> only b/c the middleware does not fully apply to express 
16:37 < deedubs> bmatusiak: your vagueness is what's causing the general disinterest
16:38 < deedubs> anyone want to write software with me?!! YA!
16:38 < deedubs> :)
16:39 < bmatusiak> well you never know how big a project can really be ^_^
16:40 < eddyb> chjj: heh, I'm getting delayed because of my failed attempts at a commit message
16:43 < Owner> deedubs~# ILL WRITE SOFTWARE WITH YOU!
16:44 < Owner> IT WOULD BE AN HONOR
16:44 < trave> heh
16:46 < deedubs> haha Owner send my your github username :D
16:46 < Owner> i dont use github
16:47 < deedubs> Oh nvm
16:47 < Owner> no time for that nonsense
16:47 < eddyb> chjj: https://github.com/eddyb/tty.js/commit/61bf0c342e33cafc2269638240ceacb8331ea9d9 the change is quite simple and removes the only (I think it was the only one) global event handler
16:49 < eddyb> I'll make a pullreq out of it if you want to merge it in your repo
16:50 < Owner> what is github facebook for programmers?
16:51 < eddyb> Owner: not sure if ignorant or troll...
16:51 < deedubs> Owner: interesting position.  Your use of TOR bewilders my attempts to see if your trolling me
16:57 < notjrbauer> hey everyone, i did a brew install node - everything looked cool but when i type 'node' nothing occurs
16:58 < eddyb> notjrbauer: nothing can mean a lot of things
16:58 < deedubs> notjrbauer: `brew link node` ?
16:58 < notjrbauer> doesn't recognize 'node' in terminal
16:58 < owen1> othiym23: http://www.2bs.nl/nodeconf2012/#1 interesting talk about libuv from nodeconf. i can't wait for the video
16:58 < notjrbauer> deedubs you own
16:59 < notjrbauer> thank you X_X
16:59 < deedubs> notjrbauer: also I'd recommend using the packages on nodejs.org instead of brew
16:59 < notjrbauer> I've been getting some make errors when i install other packages
16:59 < notjrbauer> friend said try homebrew instead 
17:03 < Zipp> Ugh, I need to eat salads for the next week to recover from all the drinking at Node.conf
17:04 < Zipp> owen1: Should have gone :P
17:06 < Protected> Would anyone here like to recommend a synchronism module to a newbie? Preferrably with a syntax as minimalistic as possible? I ask because there seem to be a lot of those.
17:10 < drudge\work> sweet theme song http://www.codeschool.com/courses/real-time-web-with-nodejs
17:12 < othiym23> owen1: I was at that talk, and it was awesome ;)
17:13 < othiym23> owen1: also worth finding creationix's slides from his presentation on luvit, which is basically taking libuv and wrapping Lua around it
17:14 < creationix> owen1: https://github.com/creationix/nodeconf2012
17:14 < creationix> I think you have to check out the whole repo since the pdf is so large
17:14 < creationix> (github doesn't direct-download large files)
17:15 < Zipp> The Luvit presentation kinda made me want to write some server monitoring tools in Luvit. Anyone know what Rackspace is doing with it?
17:15 < JoeyJoeJo> How do I install optimist on Ubuntu 12.04?
17:15 < Zipp> npm install optimist
17:15 < creationix> Zipp, server monitoring agent
17:15 < Zipp> Real-time / evented, similar to Nagios?
17:16 < JoeyJoeJo> Zipp: I did that, but I keep getting this error -  throw e; // process.nextTick error, or 'error' event on first tick
17:16 < creationix> Zipp: https://github.com/creationix/nodeconf2012
17:16 < creationix> err, https://github.com/racker/virgo
17:16 < creationix> (copy paste fail)
17:16 < Zipp> hah thanks :P
17:16 < othiym23> owen1: as for your explanation of working with streams, it's mostly correct. fs itself is just a module, not an EventEmitter on its own, but the ReadStream returned by fs.createReadStream *is* an EventEmitter; there were indeed 4 events, and they were all handled on a single thread
17:17 < timoxley> JoeyJoeJo what version of node?
17:17 < othiym23> owen1: the streaming and fs APIs remained mostly stable between 0.6 and 0.8, there were just a couple methods that moved from the path module into fs
17:18 < othiym23> owen1: and there isn't really a ReadStream class, just Readable and Writable Streams that are more or less abstractions over certain event patterns
17:19 < Zipp> creationix, I love the readme file. "A project" lol
17:21 < owen1> othiym23: thanks for clarifying it. so those four events where done async with no threads. and i should thank libuv for that.
17:23 < owen1> othiym23: creationix i saw the lua slides. so the main advantage is memory. but i assume that there are not enough modules since the lua community is smaller.
17:26 < owen1> oh. 2-4 times faster
17:26 < Zipp> It's cause V8's kinda slow
17:27 < creationix> currently luvit is slower than node in some cases
17:28 < creationix> the real difference is the memory usage
17:28 < creationix> and the language
17:29 < owen1> creationix:do u predict luvit replacing node?
17:29 < creationix> not at all
17:29 < creationix> javascript is the web language
17:29 < creationix> node's memory overhead is fine for webservers
17:30 < creationix> and v8 is darn fast
17:30 < creationix> luvit's strengths are it's ffi interface and low memory usage
17:30 < owen1> oh. so maybe for small devices
17:30 < creationix> so embedded on mobile devices or for writing desktop apps
17:30 < owen1> nice
17:30 < owen1> btw, i can't open the keynote file
17:30 < creationix> I wrote luvit after working with node on webos
17:31 < creationix> node was too bloated to run 5 processes on a phone at once
17:31 < creationix> and startup time was around 1000ms
17:31 < creationix> luvit is instant
17:31 < owen1> wow
17:31 < creationix> phones and tablets are a lot slower than desktops.  I got around 20x slower for node http servers vs my laptop
17:32 < creationix> so I think luvit will compliment node
17:32 < creationix> fill in the niches where node isn't a good fit
17:32 < owen1> gotch
17:32 < owen1> a
17:32 < creationix> that's why I mirror the node api
17:32 < creationix> I expect people to be using both
17:33 < tjholowaychuk> it could be a lot better in lua IMO (api) with coros
17:34 < creationix> tjholowaychuk: did you see my "fiber" sugar for luvit
17:34 < tjholowaychuk> less callback crazy mess of doom
17:34 < tjholowaychuk> i saw a bit of it a while back (months ago)
17:34 < creationix> tjholowaychuk: I wrote a new one
17:34 < creationix> much easier to use
17:34 < creationix> https://github.com/luvit/luvit/blob/master/examples/fs-coroutines.lua
17:34 < creationix> I'm still worried coroutines are too expensive for per-request handling
17:35 < creationix> but only real life experience will show
17:35 < tjholowaychuk> fuck that
17:35 < tjholowaychuk> beats what we have
17:35 < tjholowaychuk> low-level networking stuff should use callbacks sure
17:35 < tjholowaychuk> but not app-level stuff
17:35 < creationix> tjholowaychuk: well, as you see in the example, it looks blocking
17:35 < creationix> very easy to use
17:35 < tjholowaychuk> that looks good though, before it was a little weird with some resume function or something passed
17:35 < tjholowaychuk> i cant remember now
17:35 < tjholowaychuk> yup
17:35 < tjholowaychuk> and you had local res, err =
17:35 < tjholowaychuk> i think
17:36 < creationix> yep
17:36 < jagan_> this is jagan
17:36 < jagan_> any one is there
17:36 < jagan_> ??
17:36 < tjholowaychuk> hello jagan
17:36 < jaha> got any slick ways to simulate network outage in development between to local node.js processes?
17:36 < jagan_> hii
17:36 < creationix> tjholowaychuk: here was the old API https://github.com/luvit/luvit/blob/8af392db3f7cb77f54338fb9e032f8073db8096a/examples/fs-coroutines.lua
17:37 < Zipp> jaha, you could use vagrant, create two VMs, put them on the same virtual network, then remove one of the VMs from the virtual network
17:37 < creationix> jaha: you could probably hack up a tcp proxy 
17:37 < jagan_> afea
17:37 < Zipp> Or just vbox :x But I <3 Vagrant (and it uses vbox anyway..)
17:42 < jaha> Zipp: would vagrant require me to have duplicate environments runing and software installed on both VMs before running the node apps through them, ie: I have to install the right linux kernel, node, and its dependancies to both vms?
17:44 < Zipp> Yes
17:44 < creationix> jaha, just write a simple tcp proxy server in node
17:44 < creationix> and provide a repl to the proxy where you can tweak variables
17:44 < Zipp> java: creationix's solution's pretty easy
17:45 < creationix> just make sure the variables you want to tweak are accessable to the repl
17:45 < jaha> creationix: yea thats what im thinking, ohhh, maybe I could use Little snitch also to block the process specifically?
17:45 < creationix> making them global is one way
17:46 < jaha> creationix: thanks
17:46 < kklg> Zipp: I asked TooTallNate and he had the answer. The problem was that my module name was different than my target_name in my binding.gyp file.
17:46 < Zipp> kklg: Ahh cool, glad he helped you out :) Met him at Node Conf and he's wicked nice
17:47 < kklg> Yeah, he was. Responded really quickly, too: only took three minutes.
17:48 < kklg> Have a nice day. Thanks for pointing me in the right direction.
17:52 < Zipp> np
17:52 < Zipp> oh, he left
17:52 < Zipp> lol
18:00 < eddyb> chjj: did you take a look yet? or are you busy?
18:01 < chjj> eddyb: i took a look, just not sure what this is fixing
18:03 < troy--> sup
18:03 < chjj> eddyb: i also really dont like: on(document, 'keydown', in term.open, thats bound to cause a leak
18:05 < eddyb> chjj: how should I put it... the global keypress handler was a dirty hack, and there was no way of unfocusing a terminal. if I had an editor in the same page with a terminal, anything I'd type in the editor would also end up in the terminal
18:05 < chjj> eddyb: the focusin focusout stuff could work, but the way keydown was changed seems unrelated and has problems. it will create a memory leak, and it will also cause a performance hit for key presses
18:05 < eddyb> chjj: oh, sorry, thanks for pointing that out, I think it's a mistake
18:06 < phillyDesignr> anyone know how to create a stream from a string? I'm trying to use a csv parser that requires a stream but I can't write to disk on host
18:06 < chjj> eddyb: https://github.com/chjj/tty.js/pull/36
18:06 < chjj> eddyb: ive been meaning to do something like that, or merge that pull request
18:07 < troy--> anyone here familiar with play for scala? My webapp is very javascript goodness and play doesn't really offer me anything in that regard
18:08 < troy--> does node.js?
18:08 < eddyb> chjj: it works with this.element instead of document, I thought that's how I've written it in the first place
18:09 < eddyb> chjj: pfffft, so I'm late to the party :(
18:11 < Zipp> search.npmjs.org, y u no responding?
18:13 < chjj> eddyb: yeah, well i want to implement this somehow, but theres stuff im not sure about in both branches ive seen
18:13 < eddyb> chjj: I fixed that small thing by amending the commit, btw
18:14 < dz0ny> ZIpp try https://new.npmjs.org/
18:14 < Zipp> As of Tuesday, I didn't think search worked on new.npmjs?
18:14 < eddyb> dz0ny: AFAIK, that doesn't have search implemented yet
18:14 < EhevuTov> Zipp, it wasn't working for me as of last night
18:15 < EhevuTov> I did get to update my profile info. I'm very excited about the new site.
18:16 < deedubs> I like when you go here https://new.npmjs.org/profile/ry it seems like your signed in as ry
18:22 < dhalsim> hi, I have a node application: http://dpaste.com/hold/767781/ ... and I like to serve javascript files to Clients... My client html file is: http://dpaste.com/hold/767782/ ... When I looked /socket.io/EventManager.js it gets Welcome to socket.io.
18:24 < EhevuTov> deedubs, It's definitely still a work in progress and I think Isaac welcomed people to look at the source code and contribute
18:25 < deedubs> EhevuTov: yeah indeed I think its going to be a improvement from what I've seen so far
18:26 < EhevuTov> deedubs, oh yeah. I'm so excited for it. It reminds me of MetaCPAN. I'm hoping it will produce some champion libs and bubble good libs to the top
18:41 < adalgiso> anyone with experience using coffee-resque able to help debug a problem? It seems my 'jobs' are completing successfully, but the function I need to run in every job never gets called: https://gist.github.com/e4a5def25715d5c24879
18:42 < Funhouse> Is anyone here using node.js + couchbase?
18:43 < thanpolas> any nodeunit folks here? I am writing an adapter for QUnit, please stop me if it exists already...
18:48 < tristanz> ls
18:48 < tristanz> What do I put in package.json to install from HEAD of git repo rather than have it pick up a particular tag?
18:51 < dsirijus> how to decode base64 encoded json with node.js?
18:52 < tjholowaychuk> well seems like my "res.socket.parser.incoming" hack is breaking, anyone know a better way for node's request / response to reference each other?
18:52 < tjholowaychuk> moving some things out of connect but I need the res.req req.res references
18:52 < dsirijus> i'm using http://pastie.org/4205899 for now
18:53 < dsirijus> (which, obviously, doesn't work)
18:55 < TheEmpath> things like symfony is why grafting/traits/mixins exist
18:55 < TheEmpath> god i hate this framework.. i have to spend 95% of my time thinking of clever tricks to bypass its ultra-rigid user configuration
18:58 < thanpolas> TheEmpath why use it then?
18:58 < Bonuspunk> dsirijus https://gist.github.com/9b9118975e6ea1cfa91f helps?
18:59 < TheEmpath> Company is forcing me to.
18:59 < TheEmpath> It's slooowwwing me down sooo mucchhhh ugh...
19:00 < TheEmpath> you literally need to have been a founding member of the project from years back in order to finely tune user activity
19:00 < dsirijus> Bonuspunk: i think both should work, BUT, i think the 'signed_request' i'm receiving is encoded even more so
19:00 < TheEmpath> its just one massively opinionated system on top of another
19:00 < dsirijus> yeah, hmac256
19:02 < dsirijus> wow, this npm knows about every package i've encountered anywhere... npm install just works, it's great!
19:07 < Zipp> Did they post the "family photo" anywhere?
19:10 < Zipp> Guess I'll assume not; I can't find it anywhere on the intarwerbs :x
19:12 < owen1> anyone knows how many lines of js and of c/++ node have? also how many contributors? i have slides from 2009 and it say 8000 lines of c/c++, 2000 of js, 14 contributors.
19:13 <@Nexxy> Zipp, I haven't seen it yet
19:14 < jetienne> owen1: you can do those stats easily with github
19:14 < jetienne> owen1: the source are there to get the nb of lines. github provides the contibutors
19:15 < owen1> jetienne: so all i need is one repo? node?
19:17 < jetienne> Owner: exactly
19:17 < Owner> :D
19:17 < Owner> exactly what
19:17 < Zipp> Nexxy thanks :)
19:18 < owen1> find . \( -iname '*.[ch]' -o -iname '*.php' -o -iname '*.pl' \) | xargs wc -l | sort -n   => 668016
19:18 < jetienne> php ? pl ?
19:18 < jetienne> there is the v8 part
19:18 < jetienne> node is much much small than 660klines
19:19 < owen1> jetienne: yeah. i didn't notice the php part...
19:20 < owen1> 266241  when i do only .js
19:30 < herzogharker> fun, someone tried to break into my house while i was at nodeconf
19:30 < herzogharker> thankfully they were unsuccessfuly
19:30 < herzogharker> s/y$//
19:32 < TimeTurner> "write a hello world program in node to open the door"
19:29 < Owner> herzogharker~# http://pleaserobme.com/
19:30 < Owner> TimeTurner~# console.log("Hello Door!");
19:31 < TehShrike|Work> Anyone here use Step?
19:31 < jetienne> herzogharker: glad to know they were unsucessful
19:32 < TimeTurner> TehShrike|Work: have you tried async ?
19:32 < TehShrike|Work> I have not.  Is it superior for some reason?  I'm attracted to the simplicity of Step
19:34 < TimeTurner> I haven't tried Step before but the syntax is pretty simple for async as well
19:34 < TehShrike|Work> TimeTurner: which of async's tools would be analogous to what Step does?
19:34 < TimeTurner> it has more utility functions as well
19:34 < TehShrike|Work> That's a turn-off ;-P
19:34 <@Nexxy> use an array.
19:35 <@Nexxy> there's liek, 0 utility there
19:35 <@Nexxy> you'll love it!
19:35 < TehShrike|Work> eh?
19:35 < TimeTurner> lmao
19:35 < TehShrike|Work> You consider it odd for someone to prefer modules that do one thing well?
19:36 < TimeTurner> async does many things well. they are all in the same arena
19:36 <@Nexxy> fighting to the death
19:36 < herzogharker> 2 modules enter
19:36 <@Nexxy> ONE... MODULE... 
19:36 <@Nexxy> to rule them all
19:37 < herzogharker> ./~ we don't need another module ./~
19:37 < TehShrike|Work> Which of async's tools does the Step-like separation of functions/callbacks?
19:37 <@Nexxy> HEY! CODER!.... leave them codes alone!
19:37 <@Nexxy> all in all you're just another step in the build
19:37 < TehShrike|Work> Looks like it's series()
19:38 < TimeTurner> it's funny because originally Google came up with the philosophy of "doing one thing and only one thing well" but as we can all see they have branched off in all directions from stuff that's not even related to search anymore
19:38 < TimeTurner> or at leas thtey were the first ones in the tech space to publisize it
19:38 < TimeTurner> they*
19:38 < TimeTurner> publicize*
19:38 < TehShrike|Work> Do you find yourself using both underscore and async in the same project, or does async generally replace underscore in your experience?
19:39 < herzogharker> they do totally different things
19:39 < herzogharker> and as such i tend to use them both
19:39 < TehShrike|Work> Well, there's obviously some overlap
19:39 < TehShrike|Work> Seeing as async seems to have the traditional mapping and reducing functions
19:39 < TimeTurner> yeah underscore doesn't do async stuff per se and for the stuff that overlaps I use async
19:39 < TehShrike|Work> I was mostly querying to see how great the overlap was
19:40 < TehShrike|Work> Fair enough
19:40 < herzogharker> it would make your code a bit unreadble to use async.map when _.map would do :)
19:40 < TimeTurner> tbh I'm not a fan of "_" character as a namespace. gets kind of annoying to debug
19:40 < herzogharker> you are free to use something else
19:40 < herzogharker> var u = require('underscore')
19:40 < TimeTurner> but yeah es5 already has map/reduce
19:46 < TehShrike|Work> How does one traditionally "return" values from an async.series call?
19:48 < RLa> use the final callback
19:48 < TehShrike|Work> Are you saying that the return of the final callback is the return of asinc.series()?
19:48 < RLa> no
19:49  * TehShrike|Work humbly requests clarification
19:49 <@Nexxy> there is no return
19:49 < RLa> you cannot "return" because of asynchronity
19:49 <@Nexxy> returns are like spoons
19:49 < TehShrike|Work> lol
19:49 < blakmatrix> there is no spoon
19:50 <@Nexxy> even when you see them they are an illusion!
19:50 < RLa> async.series([ ... ], function(err, results) { "results are here" });
19:51 < blakmatrix> Do not try to bend the return — that's impossible. Instead, only try to realize the truth: there is no return. :P
19:51 < TomWij> herzogharker: I made you another module: 
19:52 < TomWij> But I couldn't publish it. :(
19:52 < TomWij> It's name was "useless" and only contained a minimal package.json file... :)
19:57 < TehShrike|Work> Is it possible with async to use series (or something similar) to split the iterator function out of a reduce call, ala Step's group function?
19:59 < vicapow> anyone have a nice, simple example of using s3 with request js?
20:03 < deedubs> vicapow: https://github.com/learnboost/knox
20:03 < deedubs> opps
20:04 < deedubs> didn't see the s3 part
20:05 < marcosmlopes> hey, someone can ask my question on stackoverflow? http://stackoverflow.com/questions/11334568/how-to-stream-an-webm-video-through-ffmpeg-using-node-js
20:05 < vicapow> deedubs: seems like it might work but seemed a little out of date. hasn't been updated in a while. i was thinking, maybe the better way to go was to just use request directly
20:07 < marcosmlopes> hey, someone can answer** my question on stackoverflow? http://stackoverflow.com/questions/11334568/how-to-stream-an-webm-video-through-ffmpeg-using-node-js
20:07 < deedubs> vicapow: hasn't been updated because nothing has changed :D
20:07 < CIA-93> node: Fedor Indutny master * rf210530 / lib/tls.js : tls: use slab allocator - http://git.io/XimfPQ
20:08 < vicapow> deedubs: lol. okay. :D
20:12 < tjholowaychuk> alexgordon: is there any reason some TM bundles wouldn't work?
20:12 < tjholowaychuk> I have "JavaScript node.tmbundle" and a few others
20:12 < tjholowaychuk> other bundles are picked up from that dir but not others
20:15 < ome> not strictly node, but how do I change the IP, Port for the C9 ? it seems to bind to the localhost and I can't access it from outside even with firewall switchedd off.
20:16 < alexgordon> tjholowaychuk: not sure. maybe it doesn't like the space in the name?
20:17 < alexgordon> tjholowaychuk: it'll hide anything that's already installed. try clicking show all?
20:17 < tjholowaychuk> alexgordon interesting yeah that seems to be it, even though other's are listed with spaces haha
20:18 < tjholowaychuk> hmm doesn't show up in the actions menu
20:20 < alexgordon> tjholowaychuk you might have to relaunch after installing (I'm not sure if the actions menu gets updated automatically)
20:20 < tjholowaychuk> tried that already :(
20:30 < alexgordon> tjholowaychuk: just thought, it could be that the bundle *has* no actions. Chocolat ignores any commands that it doesn't think will work, generally those that use textmate's ruby API
20:30 < tjholowaychuk> alexgordon I can't select it instead of "javascript" though so things like "fTAB" are replaced with the one you guys have in there
20:31 < tjholowaychuk> hmm seems like it's grabbing them
20:31 < tjholowaychuk> but it just presents a list instead
20:48 < Owner> awww dumb the github tutorial requires a github account :(
20:51 < RLa> Owner, maybe time to create one?
20:56 < chapel> isaacs: ping npm couch db is down
20:56 <@isaacs> wat?
20:56 < jroes> would that couchdb thing affect npm installs?
20:56 < chapel> well, getting 404s
20:56 < chapel> search.npmjs.org
20:56 <@isaacs> chapel: works for me
20:57 <@isaacs> oh, that
20:57 <@isaacs> hrm.
20:57 <@isaacs> that's weird
20:57 <@isaacs> it's a 503, not a 404
20:58 < jroes> I'm getting shasum failures with my npm installs on random libs. I'm not sure if it's related
20:58 < chapel> yeah
20:58 < chapel> https://registry.npmjs.org/mongoose/mongoose/-/mongoose-2.5.10.tgz
20:58 < chapel> get a 404 on that
20:59 < jroes> sounds like random 404s, I'm getting http 404 https://registry.npmjs.org/jade/jade/-/jade-0.26.0.tgz
21:00 < chapel> looks to be going fine so far now
21:00 < chapel> another 404 though
21:01 <@isaacs> jroes: whoa, that url is wrong
21:03 <@isaacs> ahhhh...
21:03 < jroes> npm http 404 https://registry.npmjs.org/joyentexpress/joyentexpress/-/joyentexpress-3.0.0.tgz
21:03 <@isaacs> <-- made a bug, hold on
21:03 < jroes> 10-4
21:05 <@isaacs> k, `npm cache clean`
21:05 <@isaacs> should be working properly now
21:06 < jroes> sweet! works. thanks :D
21:06 <@isaacs> thing is, it was working when fetching the root doc, but not the version'ed dcs
21:06 <@isaacs> *docs
21:07 <@isaacs> so if you had the root doc already, but not the specific version, it wouldn't fail, and i didn't catch it for that reason
21:08 < CIA-93> node: Ben Noordhuis v0.8 * r0c47219 / (lib/timers.js test/simple/test-timers.js): timers: fix handling of large timeouts - http://git.io/SqBUWA
21:08 < chapel> it was failing heroku installs, thats how I noticed
21:08 < owen1> question about using async i/o (promise to shut up after that) - if there is only 1 thread, and i make an async operation. this operation got to be executed sometime. when this operation is being executed, how can my main app still be working?
21:12 < hillct> isaacs: seems there's a couchDB failure over at http://search.npmjs.org/
21:13 < hillct> though I presumably you were already aware...
21:14 <@isaacs> yeah
21:14 <@isaacs> i have no idea why search. is failing.
21:15 <@isaacs> that's really weird.  the couchdb can be hit just fine
21:15 < Glenjamin> commandline search seems fine, its odd
21:15 <@isaacs> hillct, chapel: It works http://isaacs.iriscouch.com/registry/_design/ui/_rewrite/
21:16 <@isaacs> but of course, all the xhr's assume that / is the root, not /registry/_design/ui/_rewrite/
21:17 < hillct> isaacs: is it possible that iriscouch changed their defaults resulting in this new behavior?
21:17 < myndzi> how do i drop a module from the cache so that i can reload a changed version from disk?
21:17 < myndzi> i thought it was module.cache or some such but it seems to be empty
21:18 < myndzi> oh, require.cache
21:18 <@isaacs> myndzi: it's not generally a very good idea
21:18 <@isaacs> myndzi: but you can delete the filename from out of the require.cache, yes
21:19 <@isaacs> myndzi: delete require.cache[ require.resolve("some-module") ]
21:19 < therealkoopa> tjholowaychuk: should.exist(1) is giving me a: Property 'exist' of object #<Assertion> is not a function suddenly.  Thoughts?
21:19 < myndzi> yeah, i'm just at a node live prompt
21:19 < myndzi> and i don't want to retype everything
21:19 < myndzi> :)
21:19 < tjholowaychuk> therealkoopa dunno i dont use that, i drop to assert() for that stuff
21:22 < therealkoopa> tjholowaychuk: I'm guessing the assert module also works well in the browser?
21:22 < tjholowaychuk> therealkoopa yeah, should wont work in non-modern browsers
21:31 < Funhouse> Is anyone here using node.js + couchbase?
21:32 <@isaacs> myndzi: i think .clear will clear it out
21:33 <@isaacs> oh, no, it doesn't any mre
21:41 < myndzi> oh well, i just made use of the clipboard :)
21:41 < myndzi> just found myself wanting to do it more than once
21:46 < jerrysv> good afternoon
21:47 < fomatin> hi, i'm trying to do a multi part upload to S3 and I need to split a file into smaller 10 mb pieces. any ideas how i could do that?
21:47 < fomatin> because I need to know the exact size of each part
21:56 < Torne> i just installed node and npm from the ubuntu ppa referred to on the wiki, and the very first "npm install" i ran immediately started chewing 100% cpu while doing nothing, and trying to kill it has resulted in it now being stuck in D state. any guesses what happened?
21:56 < Torne> also, er, any idea how to un-stick it without rebooting? :/
22:11 < dexter_e> hey folks:    Trying to install  NODE.IO and getting:   https://gist.github.com/3056790     with Node 0.8  Can anyone see why ?
22:11 < context> dexter_e: whats wrong?
22:11 < bnoordhuis> dexter_e: it's not actually erroring, is it?
22:12 < dexter_e> yeah , its not able to install it
22:12 < context> i dont see any error in there
22:12 < context> it says it installed it
22:12 < context> npm list -g
22:12 < context> node.io is probably something that would be installed into your project and not globally isnt it
22:13 < context> nm. it does have a command
22:13 < dexter_e> yeah they say it should be installed globally
22:13 < dexter_e> I will check it again , it did seem to work after I installed  node-gyp
22:13 < dexter_e> Thanks guys!
22:16 < Torne> hrm. apparently both the locked-up nodejs processes on this machine are waiting in do_exit
22:16 < Torne> i.. didn't know you could even block there.
22:49 < elliottcable> There used to be a utility function for copying all of the members of a require() onto the global namespace, something like that. I forget the specifics, this was years ago.
22:49 < elliottcable> That still exist anywhere?
22:58 < slajax> anyone using spf13 vim plugin with handlebars?
23:18 < joelverhagen> I'm doing a project with socket.io and I keep running into the same design problem over and over. I have an event called "getFooInfo", with a parameter to identify which foo I want to get information on [socket.emit("getFooInfo", id)]. I then listen for "getFooInfoDone" [socket.once("getFooInfoDone", function(fooInfo) { ... }]. This works great if only one call to getFooInfo happens at a time. 
23:18 < joelverhagen> What's the best way to have a one-to-one correlation between an .emit(...) and a .once(...)?
23:18 < alex4nder> joelverhagen: use request IDs
23:18 < alex4nder> or queue them all
23:18 < alex4nder> and make them synchronous.
23:21 < joelverhagen> alex4nder, thanks. I will do request IDs that if that's the common practice. Do you happen to know if there is a library that wraps that up?
23:27 < jonmarkgo> Anyone here used the apricot package?
23:28 < EricBlade> hey guys. i have a situation where i'm using a lib that makes use of the xml2js lib .. and that's blowing beyond my rather anemic memory limitations .. anyone maybe possibly familiar with that lib who might have any ideas for reducing it's memory footprint?
23:29 < Raynos> isaacs: http://search.npmjs.org/
23:29 < Raynos> the site is down
23:30 < joelverhagen> aw snap
23:46 <@isaacs> Raynos: and its back :)
23:55 < Raynos> isaacs: o/ We should get coffee some time
23:57 <@isaacs> Raynos: you in town now?
23:57 < Raynos> yes / no
23:57 < Raynos> In  the mission, at stackhouse tonight
23:59 < Raynos> isaacs: you at the joyent offices?
23:59 <@isaacs> Raynos: no, i'm in oakland
--- Log closed Fri Jul 06 00:00:01 2012
