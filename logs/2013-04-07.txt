--- Log opened Sun Apr 07 00:00:34 2013
00:10 < jukio> any one to give me a quik tour of sync execution of node js code
00:13 < zemonk> and also, strage enough, when i debug..the node process exits prematurely
00:13 < zemonk> for unknown reason
00:13 < zemonk> i am debugging using node-inspector, with the program started using --debug-brk
00:14 < combataircraft> hi all. is there any easy way to open a child process that has isTTY as true ?
00:15 < combataircraft> I'm running a script that checks isTTY and works only if isTTY is true. I gotta run  it as child process, any ideas?
00:42 < zemonk> for the node experts here, if anyone can help - that would be awesome!
00:42 < zemonk> http://stackoverflow.com/questions/15857568/node-js-program-either-exits-unexpectedly-or-just-hangs
00:43 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:14 < s5fs> zemonk: what is check() doing? I assume it has more going on than just what you posted on SO, yes?
01:14 < zemonk> check uses async and does a bunch of network operations
01:14 < zemonk> so uses the net module and dns
01:15 < zemonk> relies on callback from each action before the next one is done
01:18 < s5fs> zemonk: without seeing anything, I'd just start carving up the code until I find whatever the offending line is. i have to assume there is something different in your program execution when you're running it as a test.
01:25 < Industrial> Can I browserify CSS files?
01:27 < substack> Industrial: http://github.com/substack/brfs
01:27 < substack> and https://github.com/substack/insert-css
01:28 < Industrial> _o_
01:28 < Industrial> not one, no, you link 2 packages you made :P well played sir >_O
01:29 < AAA_awright> That... is...
01:29 < AAA_awright> Why
01:29 < AAA_awright> Just, why
01:31 < Industrial> because what if I minify, crunch obfuscate all the css and js, and it becomes the tiniest possible size, gzipped; just one string of characters without newlines\whitespace
01:32 < AAA_awright> Industrial: There's programs that'll do that without requiring client-side Javascript
01:33 < Industrial> AAA_awright: this is all done beforehand..
01:33 < AAA_awright> Namely, http://yui.github.io/yuicompressor/
01:33 < Industrial> on the server side
01:33 < gluxon> AAA_awright: Your nick seems familiar...
01:33 < substack> AAA_awright: inlining static assets is very handy for shipping resuable bundles of functionality
01:33 < AAA_awright> I know everyone here like family, maybe that's why :0
01:34 < AAA_awright> >_>
01:34 < Industrial> \:D/
01:34 < prettyrobots> I've registered my module with NPM and Bower.
01:34 < prettyrobots> It works in both Node.js and the browser.
01:35 < prettyrobots> Where else should I register it? Publish it?
01:56 < Industrial> substack: can I give more then one argument to browserify -t?
02:01 < substack> Industrial: just add more (-t)s
02:04 < Determinist> hey guys
02:05 < Determinist> any way to set the server time in nodeJS?
02:05 < Determinist> force it to a certain timezone?
02:05 < youjelly> http://pastebin.com/tfXAUYjm
02:06 < youjelly> JSON issues :S
02:06 < youjelly> even with stringify getting undef
02:13 < youjelly> http://pastebin.com/tfXAUYjm
02:17 < deoxxa> youjelly: why are you... stringifying... already serialised json?
02:18 < deoxxa> Determinist: why do you want to change the time zone of the whole environment? why do you want to change it at all? how is the current timezone causing problems for you? (all these questions will help make your original question easier to answer)
02:18 < youjelly> cuz otherwise I get an uncaught exception when I parse
02:18 < youjelly> and node crashes
02:18 < youjelly> If I don't call stringify when I'm sending
02:19 < deoxxa> youjelly: JSON.stringify is meant to work on objects - like `JSON.stringify({a: "b", c: "d"})'
02:19 < Determinist> deoxxa: to stop the silliness of having to always take into account that server time may be different from UTC, and the DB is in UTC by default and all API requests are receiving times in UTC
02:19 < youjelly> ok, lemme try that
02:19 < deoxxa> youjelly: that's the most obvious problem with the code you pasted - we'll go through fixing things in order of most to least obvious :P
02:20 < deoxxa> Determinist: well, the good news is that you can ignore the timezone completely because javascript only really cares about UTC. i.e. Date.now(), (new Date()).valueOf(), (new Date()).toISOString() are all UTC
02:21 < Determinist> deoxxa: do you live in the UK?
02:21 < deoxxa> australia! :>
02:21 < youjelly> I don't get why though, on server side I pasted you the data I'm recieving
02:21 < Determinist> deoxxa: notice that you didn't mention any of the other methods and you have to assume everybody's going to always remember to use get/setUTCxxx()
02:22 < deoxxa> Determinist: ah, you're using other date methods?
02:22 < Determinist> deoxxa: unfortunately
02:22 < deoxxa> Determinist: well... the easy (cop-out) answer is to tell you to use the UTC methods, but the actual answer might be to set the TZ environment variable
02:23 < deoxxa> Determinist: that is to say that the correct way to do it would be to use the UTC methods, but that setting the TZ environment variable might get you the effect you want... for now.
02:23 < deoxxa> Determinist: until you run into this problem again, that is. which you will.
02:23 < Determinist> in package.json under scripts:     "start": "TZ=UTC node app.js"
02:23 < youjelly> var speakInfo = JSON.stringify({message: \""+text+"\",conf: \""+conf + "\""});
02:23 < youjelly> Uncaught SyntaxError: Unexpected token ILLEGAL 
02:24 < deoxxa> youjelly: problem seems to be that you don't understand javascript syntax. i can't fix that, so you should go read about how javascript works.
02:24 < deoxxa> Determinist: i think it might be Etc/UTC
02:24 < deoxxa> Determinist: i'd have to double-check that though
02:24 < Determinist> deoxxa: using both, every date method is now using the utc equivalent and in addition, setting the TZ to UTC before starting, and TZ=UTC actually works, btw
02:24 < deoxxa> oh, neat
02:24 < Determinist> :)
02:25 < Determinist> been bitten by all of this date stupidity so many times
02:25 < deoxxa> Determinist: you'll definitely want to kick whoever used local-time methods instead of utc methods in the butt though, if it's meant to be returning utc times
02:25 < Determinist> oh, there's a dude called 'so' in here. he must be enjoying life
02:25 < deoxxa> Determinist: and if it was you... well... maybe ask a friend to kick you
02:26 < Determinist> wasn't me :)
02:26 < Determinist> but i've already kicked the CTO in the ass for being a noob
02:26 < deoxxa> good, good
02:29 < youjelly> deoxxa, thanks, fixed it lol
02:40 < sinclair|work> Determinist: the CTO recommended and gave nodejs the go ahead?
02:40 < sinclair|work> that alone says a lot about his competency 
02:40 < Determinist> sinclair|work: interesting, why would you say that?
02:40 < deoxxa> sinclair|work: oooooh, burn
02:40 < deoxxa> sinclair|work: how's that C# going
02:41 < sinclair|work> deoxxa: um, good actually
02:41 < deoxxa> see?
02:41 < deoxxa> doesn't make a lot of sense to make such a broad generalisation about a platform now, does it? :>
02:41 < sinclair|work> deoxxa: tho, am spending some time today looking at JS interpreters for .net
02:42 < sinclair|work> deoxxa: the way i see it, nodejs would be extremely well suited for pushing data between native/.net managed components on a network
02:42 < Determinist> sinclair|work: am i to assume that as far as you're concerned, nodejs would not be the right platform to choose?
02:42 < ningu> JS interpreter for .net? that seems.... odd
02:43 < sinclair|work> ningu: some of the best libs around today are implemented in JS
02:44 < sinclair|work> Determinist: if you are pushing data around a network, nodejs would be super fine, if you are using it for web work (aka, making a website), i think there are far better technologies to use
02:44 < Determinist> sinclair|work: depends on what kind of website you're making. a JSON based REST API + node doesn't sound like such a bad choice to me.
02:45 < sinclair|work> Determinist: guess not, so long as the heavy lifted is handled by something other than node
02:45 < sinclair|work> *lifting
02:45 < Determinist> sinclair|work: and yes, i've read the web framework comparison on hacker news, everybody has, sure, java can squeeze better performance out of the hardware
02:46 < sinclair|work> Determinist: im not really sold on java either, i tend to think asp.net mvc is by far the best web application framework around right now, but i am a bit biased
02:46 < deoxxa> hardware is so expensive these days
02:47 < Determinist> sinclair|work: not crazy about .net, tbh. C# is pretty cool, but so far I haven't found .net to be such a compelling solution that I would agree to switch over to the dark side.
02:47 < Determinist> and no, i'm not going to use mono
02:48 < sinclair|work> Determinist: i do note tho, that the C# 5.0 async /await stuff means you can get full C# utilization with basically no effort at all, and is fully supported on mvc controller actions
02:48 < sinclair|work> Determinist: yeah, its not really about going to the dark side, Mono supports everything the MS CLR supports nowadays
02:48 < Determinist> sinclair|work: assuming you buy into the framework as a whole, and what happens if something breaks? can you go in and patch it? wait for MS to release a patch? yeah, good luck with that.
02:49 < sinclair|work> the trade in going with Mono tho, is you lose the top notch tooling support 
02:49 < sinclair|work> Determinist: you don't need to patch MS stuff
02:49 < Determinist> sinclair|work: i'll let the guys who had to shutdown a whole project based on .net from a few years back and ran into a problem MS wouldn't fix know.
02:50 < Determinist> that's millions down the drain too
02:50 < deoxxa> burrrrrn
02:50 < Determinist> big corporate stuff
02:50 < Determinist> you don't need to patch MS products != you can patch MS products
02:50 < sinclair|work> Determinist: yeah, ill be honest, Microsoft sucks at web applications, SharePoint, Commerce and MSCRM are all the worst things in the world
02:51 < Determinist> care to pay a zillion bucks a year to MS for a support contract?
02:51 < sinclair|work> Determinist: its not a zillion, and its completely optional
02:52 < Determinist> sinclair|work: optional, sure, till you run into something you can't fix and you can't just lift the engine cover and take a look around. and it is a zillion if you're a bootstrapped small company
02:52 < sinclair|work> Determinist: corperates and IT managers are easily sold into SharePoint, but SharePoint is expensive, hard to extend, theme, and whatnot, and its painful to develop for, i hate it
02:52 < Determinist> look, we've all been there (us old enough, anyways)
02:53 < Determinist> obviously, it's a product for executives who make decisions based on white papers, not for the poor sods who have to actually make it all work
02:53 < sinclair|work> Determinist: i think the majority of what people are using SharePoint for (file manager, groups, bulletin boards etc) can be coded in a few weeks on other technology btw
02:54 < sinclair|work> Determinist: anyway, contrast SharePoint with nodejs development, 
02:54 < OTBS4Life> Oh man, did I just walk in on a SharePoint discussion?  :-)
02:54 < deoxxa> OTBS4Life: it's ok, just pretend you didn't see it
02:55 < OTBS4Life> Ha, all I know is that when I hear SharePoint being seriously considered, it's time to look for another job.  Unless my current job is a consultant.  SharePoint consultants make like $1,000,000/hr.
02:55 < Determinist> sinclair|work: nahh, i'm done with that stuff. no more. if I can't talk to the dev who wrote the thing or the active contributors of something in some internet channel/forum/whatever, i'm not "buying" into it anymore
02:55 < sinclair|work> Determinist: 1) nodejs hasn't gotten to version 1.0 yet, 2) its extremely painful to stitch packages together, 3) it scales, painfully 4) you have to write it in JS
02:56 < youjelly> I'd say look into lync
02:56 < Determinist> sinclair|work: sure, there are alternatives, but i've found node to be perfectly adequate, so far, and my peers seem to be agreeing.
02:56 < OTBS4Life> Who cares that Node.js isn't at some mystical version "1.0" yet?  I'm just happy they have picked a versioning scheme that makes sense, and have stuck with it!
02:56 < sinclair|work> nodejs is not a good technology for web application dev, REST / JSON services in node is also questionable, 
02:57 < Determinist> sinclair|work: provide tangible proof or stop spreading FUD, I say
02:57 < youjelly> also, look at meteor and all the cool frameworks being build around node js
02:57 < youjelly> lol
02:57 < Determinist> oh, meteor
02:57 < Determinist> ok, that's not what i'd use for an example
02:57 < deoxxa> but... but... how will he troll #node.js if he has to provide substantive proof?
02:57 < sinclair|work> Determinist: it aint FUD mate, REST / SOAP is message based, messages require serialization, serialization is expensive, 
02:58 < youjelly> ember.js
02:58 < youjelly> ?
02:58 < OTBS4Life> I put SharePoint in the same bucket as PHP Nuke and #8 recyclables.
02:58 < mscdex> postnuke!
02:58 < sinclair|work> Determinist: streaming data around with node is message-less, stream based, and just really really easy to do
02:58 < Determinist> sinclair|work: REST requires serialization (who's using SOAP these days anyways?), not if you have a web server that talks HTTP...
02:58 < sinclair|work> it also makes a lot of sense imo
02:58 < OTBS4Life> PostNuke?  Lol, what is this...
02:59 < mscdex> :-D
02:59 < OTBS4Life> "But, PostNuke's functionality can be increased by installing modules, blocks and themes. For example, you can add a forum, a gallery and contact form. You can also change how your entire site looks by changing themes. All of this can be done with just a few clicks in the administration panel saving you hours of time, both in the initial creation of the website and in its day to day maintenance."
02:59 < Determinist> sinclair|work: not a valid argument, sounds like something that came out of a MS white paper
02:59 < sinclair|work> Determinist: the difference is, most web servers out there have a thread pool able to handle several serializations at the same time, it doesn't halt 
03:00 < Guest8576> using node and express, using jquey ajax, get the following error: Origin http://localhost:3000 is not allowed by Access-Control-Allow-Origin. 
03:00 < sinclair|work> node js is still single threaded, and should not be doing any heavy lifting at all
03:00 < Determinist> sinclair|work: and if you're not completely useless, you run several node processes on one machine and load balance between them, this isn't rocket science
03:00 < Guest8576> i thought i am doing CORS right, guess not: http://pastebin.com/t8sxaAZY
03:00 < Determinist> app.all isn't what you think it is
03:00 < OTBS4Life> Guest8576: What happens if you drop that Access-Control-All-Headers line?
03:01 < sinclair|work> Determinist: then you need to balance between them, you have basically lost all the simplicity you originally had
03:01 < sinclair|work> Determinist: anyway, i think the jury is still out, i tend to think you get a lot in the short term, and utter confusion in the long term
03:01 < Determinist> sinclair|work: running several processes, each on a different port and setting up nginx to spread the load between them is complex? I doubt IIS is going to make it simpler
03:02 < Guest8576> OTB : same error 
03:02 < youjelly> Determinist, when it comes to shared sessions etc, it can be
03:02 < OTBS4Life> Determinist: Actually, IIS 7 does that internally doesn't it?
03:02 < sinclair|work> ^
03:03 < Determinist> well, heroku does that automatically too :)
03:03 < Determinist> not even saying heroku is the perfect solution, but if you're after simple, that's simple enough for ya
03:03 < sinclair|work> you could set up named pipes to a third nodejs component sitting somwhere to managed shared state between processes, but that is again, extremely painful
03:03 < youjelly> sinclair|work, we can avoind that by using web sockets though
03:03 < OTBS4Life> sinclair|work: There are tools for every job.  Nobody should pick a tool at random for an arbitrary job, just as nobody should listen to your generalizations as to what jobs Node.js is good/not good for.
03:03 < youjelly> avoid the need for parallelising node
03:04 < OTBS4Life> sinclair|work: You're taking a few facts here and saying nothing about the specifics, which in my experience, make a great deal of difference.
03:04 < Determinist> what OTBS4Life said
03:04 < sinclair|work> OTBS4Life: specifics about what tho, 
03:04 < Determinist> sinclair|work: have you had a specific problem with node or is this just hacker news regurgitation?
03:05 < sinclair|work> these are all fundamental characteristics about nodejs, you can choose to ignore them if you want, it doesn't mean they go away
03:05 < OTBS4Life> sinclair|work: The problem you're trying to solve, and the constraints in how you solve it!
03:05 < Determinist> i'm not even the most pro node guy out there, but hey, give it credit where it's due
03:05 < OTBS4Life> sinclair|work: Nobody isn't ignoring the characteristics of Node.js or JavaScript!  We are all well aware of how it works.
03:06 < Determinist> sinclair|work: again, have you actually been trying to scale node yourself or is this all based on some theoretical stuff you've picked around?
03:06 < sinclair|work> OTBS4Life: i didn't think you were, but based on what i have said, nodejs on its own is single threaded, and should not handle any heavy lifting at all. If a nodejs application does, you all of a sudden have to run multiple node instances, and balance between them with all the headaches of shared state etc, 
03:07 < OTBS4Life> sinclair|work: Depends on what you are doing.  Your JavaScript is single threaded, but not IO.  Also, have you tried playing with the process API?  Depending on your needs, it is quite easy to work with.
03:07 < Determinist> sinclair|work: single threaded async, nobody's telling you to image resizing one a 1 thread system, but hey… it really matters what you're trying to do
03:07 < sinclair|work> Determinist: again, i did suggest node was more suited to pushing data around between native components
03:08 < howdynihao> so has anyone experienced this issue with socket.io, where you have to delay an emit in your client on('connect') because the server is 'slow' to register a listener
03:08 < Determinist> so many typos. getting too late for me to be having this kinda conversation :)
03:08 < Determinist> sinclair|work: according to that POV, what's .net doing if not that?
03:08 < OTBS4Life> howdynihao: No, never had that problem.  If you add your listeners upon connect, I don't imagine that would be a problem.
03:08 < sinclair|work> Determinist: .net specifically ?
03:08 < howdynihao> thats what im doing
03:09 < Determinist> sinclair|work: anything can be described as being good at invoking C code, just saying that's not necessarily a valid argument
03:09 < OTBS4Life> howdynihao: Can you work up a small reproducible test case?
03:09 < sinclair|work> Determinist: its also exactly practical to code all components in C++ either
03:09 < deoxxa> sinclair|work: "and balance between them with all the headaches of shared state etc"
03:09 < sinclair|work> *not
03:09 < deoxxa> sinclair|work: explain that further
03:09 < howdynihao> well its fixed now, it just wasted a few minutes of my lifeeee
03:10 < OTBS4Life> howdynihao: What was the problem?
03:10 < howdynihao> just put a 50ms settimeout on the emit for now
03:10 < OTBS4Life> howdynihao: Depending on your problem, that may not fix it universally.
03:10 < deoxxa> sinclair|work: especially explain how having to design your application to handle that from the start is a bad thing
03:10 < sinclair|work> deoxxa: lets say you have some kind of session state, (as a requirement for whatever reason). and you have several node processes handling requests. where does that state live?
03:11 < deoxxa> sinclair|work: i understand that problem, i'm asking you how it's worse to design your application to handle that from the very start as opposed to doing it weeks/months later when you have n-thousand live users
03:11 < OTBS4Life> sinclair|work: There are tons of options for that... depends on your needs.  Socket.IO users often balance across many servers and use something like Redis for that.
03:11 < sinclair|work> deoxxa: its mostly a solved problem in other frameworks
03:11 < deoxxa> sinclair|work: oh so it magically doesn't happen. that's good to know!
03:11 < deoxxa> (idiot)
03:12 < sinclair|work> deoxxa: no need for name calling
03:12 < OTBS4Life> sinclair|work: If you don't like the options currently available, you could always write something.  Personally, I'm quite happy that the standard library around Node.js is clean and light.  To me, that's one of the biggest pros for using it.
03:13 < howdynihao> OTBS4Life: i'm pretty sure its this socket.io session module i'm trying, before using it i looked at its source and thought to myself its 'slow'
03:13 < OTBS4Life> Everything is left up to the users.  There is no shortage of NPM packages for doing just about everything... some better than others, but I've found it pretty easy to weed out packages that aren't so good.
03:13 < OTBS4Life> howdynihao: What module?
03:13 < sinclair|work> deoxxa: the idiotic thing to do would be to try reinvent the wheel with little or no gains
03:13 < howdynihao> session.socket.io
03:13 < OTBS4Life> howdynihao: Sorry, never used it before.
03:14 < sinclair|work> deoxxa: a developer wants a consisting state management API, and at the end of the day, the state (where it is stored, and sharing policies) should be handled by configuration, such that a system admin can manage it
03:15 < sinclair|work> deoxxa: by default .net (as a example) stores state inproc (in memory to the local machine) however, it is trivial to change it from inproc out to several network storage mechanisms, like a dedicated state machine, or SQL state etc
03:16 < OTBS4Life> sinclair|work: Let me give you a Node.js use case that I think you'll agree with.  I started out building a streaming server in .NET.  Handling all of the threading and basic serving code myself was a real hassle, but it worked.  5,000 lines of code later, I had a basic system to build on.  A year later, I duplicated the exact same stuff with 20 lines of JavaScript on Node.js.  Sure, there are differences... but Node.js to me has 
03:16 < OTBS4Life> the right-sized-pieces for network applications.
03:16 < sinclair|work> in addition to that, the means in which data is written and read to the state machine is also configurable, it may traverse a network, or may use a named pipe 
03:16 < deoxxa> sinclair|work: lol
03:16 < sinclair|work> deoxxa: the question is, are you going to want to develop all of that from scratch ?
03:16 < howdynihao> C# ASYNC!
03:16 < howdynihao> 5.0!
03:17 < Determinist> sinclair|work: re session with multiple processes in node: if you've ever designed a system that scaled beyond one server, you'd know that your session storage shouldn't exist in your application server process, or you'd run into issues when scaling to two machines. good luck with your design principals. you're going to need it.
03:17 < sinclair|work> Determinist: no one would do that
03:17 < sinclair|work> Determinist: except the developer working locally on his machine
03:17 < Determinist> sinclair|work: exactly, so why would that be a problem with node?
03:18 < sinclair|work> Determinist: not a problem, just a lot harder
03:18 < Determinist> sinclair|work: that's just FUD, i've done this before and it wasn't hard at all
03:18 < sinclair|work> Determinist: harder as in you had to think about it, again, this is mostly a solved problem
03:18 < Determinist> sinclair|work: i believe express supports something similar out of the box and you can throw in redis, mongodb or whatever makes you happy
03:18 < OTBS4Life> sinclair|work: Have you built anything with Node.js?  I admit, I was VERY  skeptical at first, but once I understood some of the common patterns and what all was available, it was much easier to understand.  It's worth doing a project or two in it to know if it will save you time.
03:19 < sinclair|work> OTBS4Life: i like nodejs, i just wouldn't use it for anything than shuffling data around
03:20 < sinclair|work> the way nodejs handles streams and IO is super elegant, but it was geared up for that, not all this other guff people are throwing at it. that's just my opinion tho
03:23 < OTBS4Life> sinclair|work: I agree with you on that for sure.  Now, let me explain another reason I think that the ecosystem for Node.js is a bit broad.  It's extremely quick to develop with.  It's easy to deploy.
03:23 < OTBS4Life> sinclair|work: Again, depending on your needs, servers might be much cheaper than developers.
03:23 < OTBS4Life> sinclair|work: With JavaScript being a common language for web stuff, I've found that it's much easier to higher engineers who at least know some JavaScript basics.
03:24 < OTBS4Life> sinclair|work: There is a huge shortage of developers here in Chicago.  Language and stack consideration has to factor in what we can hire for.
03:26 < Determinist> OTBS4Life: actually, tbh, not sure if i'd want to hire people who know JS basics to work on a nodeJS project. most of the people i know who write javascript for a living actually know javascript very superficially, so the hiring part isn't actually easier (neither in the US nor Israel)
03:26 < sinclair|work> OTBS4Life: being quick and easy to get something up and running is not always the best thing, if you need to write an application that needs to updated and maintained for the next 5 to 10 years, i just don't think node is the right call. at least now, when libraries and frameworks are changing monthly, and node itself hasn't hit its own version 1. 
03:26 < deoxxa> OTBS4Life: shortage of developers in chicago, eh? interesting...
03:26 < deoxxa> OTBS4Life: what's rent like over there? :P
03:27 < Determinist> i wouldn't live in chicago if people gave me a free house...
03:27 < OTBS4Life> Determinist: It's been a gamble for sure.  People who "know JS" usually don't, but throwing them in the deep end on with more knowledgeable devs for a week or two seems to fix that.
03:27 < Determinist> but that's jut me
03:27 < Determinist> just*
03:27 < sinclair|work> OTBS4Life: not to sound like a Microsoft Zealot, but the stuff that would built on .net 1.1 still runs perfectly fine today
03:28 < Determinist> sinclair|work: yeah, some stuff i've built with PHP3 still runs fine today too, let's all use that
03:28 < sinclair|work> OTBS4Life: MS does have a good track record for maintaining backwards compatibility 
03:28 < OTBS4Life> sinclair|work: I beg to differ.  I've had nothing but trouble with .NET 1.1 apps.  .NET 2 on the other hand.  But anyway, most of what I"m building won't need to exist beyond the next year... at least not before morphing to something else.  AGain, depends on your needs.
03:28 < deoxxa> Determinist: aw
03:29 < OTBS4Life> deoxxa: Rent is very high.  I'm paying $1,800/mo. for a 2 bedroom apartment.  There are cheaper options, but then your commute becomes long an expensive... ends up being a wash.
03:29 < sinclair|work> Determinist: the difference is, a application intended to run on .net 1.1 will also run fine on .net 4.5, meaning newer components being written can leverage all the new stuff. nothing breaks (mostly)
03:29 < OTBS4Life> Determinist: Why don't you like Chicago?
03:29 < deoxxa> OTBS4Life: i'm paying $1600/month for a 1 bedroom here in mebourne (australia), so...
03:29 < deoxxa> lol
03:29 < OTBS4Life> deoxxa: Wow!
03:29 < sinclair|work> Determinist: anyway, MS does have a good track record for backwards compatibility 
03:30 < Determinist> sinclair|work: yeah, good luck with that. a word of caution tho, run some tests before assuming your 1.1 system deployed on 4.5 is going to work oob.
03:30 < deoxxa> OTBS4Life: rent here is *ridiculous*
03:30 < deoxxa> OTBS4Life: i've been kind of thinking about spending some time in the US lately though, so i'm constantly absorbing little bits of information to become more informed
03:31 < sinclair|work> Determinist: but i've moved several dozen old 1.1 application onto 4.0 with no problems at all
03:31 < inolen> deoxxa: that's not too outrageous compares to major US cities
03:31 < Determinist> OTBS4Life: weather, people, city looks like a broken up part of new york (the parts i've seen), weather, people… you know, the usual. mind you, this is very subjective, so i'm sure there are good weather days, good people and good looking areas over there, it's just that i haven't seen too many.
03:31 < OTBS4Life> deoxxa: Chicago is a nice town.  It's got a bad reptuation for being dangerous, but it honestly isn't it.  It's a city... there are people of all walks of life here.  Just use common sense... don't leave your door unlocked, and don't get into a gang fight.
03:31 < deoxxa> inolen: yeah, i figured i'd be looking at probably $1400/month or so for a decent place in a nice spot, from what i've scoped out on various apartment sites
03:31 < Determinist> sinclair|work: you should fill in lottery tickets every now and then, seems like you're a lucky guy.
03:32 < inolen> in NYC my rent was ~2k a month in a nice place. LA I pay around $1900 for a small 2 br house, a decent 1 br apartment is gonna be ~1400 here.
03:32 < sinclair|work> Determinist: .net was geared towards this kinda thing from day one
03:32 < OTBS4Life> Determinist: The weather is beautiful at the moment!  I'm sitting on my roof, enjoying a warm breeze.  But yes, it is very cold in the winter.  I like the people here in general, but again, there are people of all types here.
03:32 < OTBS4Life> inolen: Wow.  I'm just shocked at prices, because I just moved from the 2nd cheapest place to live in the country.  Rent was $450/mo. for a large 3 bedroom.
03:32 < sinclair|work> Determinist: the runtime runs everything, any issues, just have the application reference older assemblies, and i have only had to do that once
03:33 < OTBS4Life> inolen: You could buy a house there for like $70,000.
03:33 < sinclair|work> Determinist: contrast that with lib X tied to nodejs version X (i don't know any examples of that tho)
03:33 < deoxxa> OTBS4Life: re: chicago being a mixed bag - i think that's true about everywhere, except maybe osaka which was the chillest place i've ever lived. i never saw anything even close to dangerous or unfriendly there, haha
03:33 < Determinist> sinclair|work: good for you, i'm still not tossing out the mac and getting a windows 8 machine with a $2000 software kit just to run hello world
03:34 < sinclair|work> Determinist: i run ubuntu
03:34 < Determinist> with a VM
03:34 < sinclair|work> yeah
03:34 < Determinist> and lemme guess, MS gave you a buncha licenses because you look pretty in a tshirt?
03:34 < deoxxa> OTBS4Life: i know it's definitely the case here in melbourne. for the most part, everyone is totally awesome, but there are some really shifty areas where you'll get robbed if you're out after dark
03:34 < sinclair|work> Determinist: what's with the hostility ?
03:35 < Determinist> sinclair|work: nah, just being a smartass, not meaning to be offensive in any way :)
03:35 < OTBS4Life> Determinist: the .NET compilers are actually free.  Although, they are a real hassle without Visual Studio.
03:35 < Determinist> OTBS4Life: i know :)
03:35 < OTBS4Life> Ha, ok
03:35 < Determinist> and you can get bizspark
03:35 < Determinist> no thanks
03:35 < Determinist> been there
03:36 < sinclair|work> Determinist: i don't think ive said anything that isn't already an established truth for node. so... your CTO should get the sack
03:36 < Determinist> done that
03:36 < Determinist> sinclair|work: I beg to differ, but I guess we'll just have to leave it at that.
03:36 < OTBS4Life> Bizspark... is that the get-software-for-cheap-or-free-until-you-can't-leave-us-and-then-charge-you-a-ton plan?
03:36 < Determinist> OTBS4Life: bingo
03:36 < OTBS4Life> Yeah, I've heard not so great things from other companies as well...
03:36 < sinclair|work> Determinist: time will tell if nodejs pays off, i think its still a gamble at this time
03:37 < OTBS4Life> Just when you get into your 3rd year, and bam.
03:37 < Determinist> sinclair|work: indeed
03:37 < howdynihao> its a fair deal... for microsoft 
03:38 < OTBS4Life> I've got an educational license of Visual Studio from when I was mentoring a student group a couple years ago.  I thought about upgrading to the latest version... I can't imagine paying $10,000 for it.  So, I just stopped developing .NET stuf, ha.
03:38 < howdynihao> i mean the point is that if youre a startup you have limited cash, so they are giving it to you for free, if in 3 years your startup goes nowhere you don't pay anything
03:38 < howdynihao> so i mean its not like they're baiting you
03:38 < sinclair|work> OTBS4Life: you get what you pay for
03:39 < sinclair|work> OTBS4Life: like... menu bar items that scream at you in CAPS
03:39 < sinclair|work> and lots of grey
03:39 < sinclair|work> (all customizable)
03:40 < OTBS4Life> "Cloud" hosting plans these days are all on the crack dealer pricing plan as well.  I'm trying to convince a company to dump Heroku right now, or end up with a sizable bill.
03:40 < OTBS4Life> Their CEO really likes Heroku.  They have their own cage and servers alrady... why would they pay for it?  Because he likes it.
03:41 < OTBS4Life> He's familiar with deploying on it.
03:41 < OTBS4Life> That small hump is going to cost them like $60,000/mo. in a bit, lol.
03:41 < OTBS4Life> The argument, "Heroku is free!", doesn't hold water as soon as you get traffic.
03:41 < sinclair|work> OTBS4Life: what kind of application are you running?
03:42 < sinclair|work> 60k on heroku is insane 
03:42 < sinclair|work> per month
03:42 < substack> yow
03:42 < OTBS4Life> I'm exagerating... i don't remember the actual figures, but do remember that it was over $30
03:42 < OTBS4Life> $30k
03:42 < OTBS4Life> Insane indeed.
03:42 < sinclair|work> even tho, thats a insane a amount for hosting costs
03:43 < OTBS4Life> Yep.  Especially when they've already got the hardware to handle it paid for.
03:43 < substack> well if there's the revenue base to support that kind of bill who cares
03:43 < OTBS4Life> There isn't  :-)
03:43 < sinclair|work> OTBS4Life: better optimize !
03:44 < ningu> I don't understand what's wrong with a dedicated server
03:44 < OTBS4Life> sinclair|work: You don't even know what they're doing, so don't even try to claim that you think optimization would help this case.
03:44 < ningu> or servers
03:44 < sinclair|work> OTBS4Life: i was joking
03:44 < OTBS4Life> In any case, all I'm saying is that when you have $80k invested in a rack of servers, you should be using it.
03:44 < OTBS4Life> sinclair|work: Ha, ok.
03:45 < OTBS4Life> Hmmm, the lightning is coming in.
03:45 < OTBS4Life> I can see it off on the horizon.
03:45 < howdynihao> ningu: i mean auto scaling
03:45 < OTBS4Life> Determinist: I think you called in the bad weather  :-)
03:46 < howdynihao> you can't really be like need more servers right now! but then wait till the physical server gets deployed
03:47 < ningu> howdynihao: yeah I suppose but you also get a lot more server for your money if it's a real server don't you?
03:47 < howdynihao> ningu: nah cost is so comparable now
03:48 < ningu> howdynihao: so why is it that I can get a dedicated server for $100/month from hetzner with 24GB ram? I am not aware of any cloud offerings that give you that much ram for that price and some things need it.
03:49 < ningu> for hosting a large SQL database I don't really know how you can do it in the cloud when it only runs optimally with a ton of memory and cpu power.
03:49 < howdynihao> ningu: if you were to use that up 100% no more or no less, i see your point, but when your 24GB server is only being used 40% or something then the cost begins to even out i'd imagine
03:50 < ningu> you can do clustering but that doesn't work if you have high-demand individual queries that can't be split across servers.
03:50 < howdynihao> or you use 110% now you have to pay another 100$? 
03:50 < sinclair|work> ningu: good point
03:50 < ningu> unless you have a database that can do distributed individual queries, but that seems difficult to do
03:51 < howdynihao> ningu: well for a database i'd probably go that way too
03:51 < howdynihao> just because of the data
03:51 < ningu> howdynihao: yeah it's obviously much less flexible, no question there
03:51 < ningu> I can see plenty of use cases where it would be a bad choice
03:52 < ningu> random comment: I think I've finally found the holy grail of the lightweight web server that supports cgi and is not braindead in some way or other. ;)
03:52 < OTBS4Life> ningu: Apache?
03:52 < ningu> I said lightweight.
03:53 < OTBS4Life> Apache can  be lightweight, but go on.
03:53 < ningu> it seems pointless to me to run apache behind nginx just for cgi
03:53 < Determinist> OTBS4Life: sorry about that :)
03:53 < ningu> OTBS4Life: anyway the one I found is hiawatha
03:54 < OTBS4Life> "Hiawatha has been written with security in mind. This resulted in a highly secure webserver in both code and features. Hiawatha can stop SQL injections, XSS and CSRF attacks and exploit attempts. Via a specially crafted monitoring tool, you can keep track of all your webservers."
03:54 < ningu> I tried lighttpd but it had a really silly bug/shortcoming where if a cgi script exited nonzero it responded with http status 200 and an empty response *AND* didn't log the error
03:54 < OTBS4Life> Doesn't sound lightweight.
03:54 < ningu> you don't have to turn any of that stuff on
03:54 < OTBS4Life> Ah, good.
03:55 < ningu> old fashioned thttpd also has logging issues
03:55 < OTBS4Life> I hate when servers and server modules try to put a bandaid on stuff like that.  It doesn't work... those are problems that should be solved by the application.
03:55 < ningu> all I want is to log a cgi script's stderr without fail
03:55 < ningu> this is for legacy stuff obviously
03:59 < howdynihao> anyway, im disappointed in google's offering to compete with amazon ec2
03:59 < ningu> what is their offering?
04:00 < howdynihao> https://cloud.google.com/pricing/compute-engine
04:01 < ningu> hmmm... yeah, no low-end stuff to speak of
04:01 < ningu> nothing like ec2 micro or small
04:01 < howdynihao> well their pricing is more expensive overall it looks like
04:01 < howdynihao> and not 'spot instance' feature
04:04 < deoxxa> ningu, howdynihao, apparently the I/O performance on google is miles ahead of amazon
04:04 < ningu> well that would not be too surprising
04:04 < deoxxa> yeah
04:04 < ningu> since amazon's is pretty bad
04:04 < deoxxa> google's got that whole massive-empty-fibre-network thing going on
04:04 < ningu> so if it was worse I'd be like... wtf
04:05 < ningu> ubuntu claims I have a zombie process but it isn't showing up in ps aux... it's an invisible zombie
04:05 < deoxxa> the best kind
04:06 < deoxxa> lol
04:06 < deoxxa> i just typo'd the engines.node field in a package to 10.0.0
04:07 < deoxxa> was wondering why my deployment stuff couldn't vendor the right node binary
04:07 < owen1> I get connection timeout when trying to access my node server. It's running on port 3000 on my home server. I added A-record for my domain, I opened port 80 on my Motorola NVG510 Modem/Router and I run http-proxy on port 80 with a simple config file - http://hastebin.com/jixaheqibu.vhdl 
04:07 < owen1> Here is the output of 'curl www.weighmyplate.com -v' => 'Trying 108.227.80.160... Connection timed out'
04:07 < ningu> owen1: you don't need http-proxy, you need port forwarding for your router
04:08 < ningu> forward port 80 on the outside to port 3000 on whatever your machine's ip is on the local network
04:08 < howdynihao> what do you guys feel is a fault tolerant efficient way of doing workers?
04:09 < ningu> they need to have legal status
04:10 < howdynihao> well, i was thinking of even dropping using nodejs because of the memory footprint
04:10 < howdynihao> its low, but it could be lowerrrrr and writing the worker in c
04:12 < owen1> ningu: i have a few more sites on other ports. 3000, 4000 etc
04:13 < howdynihao> unless theres a way for a supervisor process that crashes for instances and when i start it up it can re-claim its orphans? if i fork i mean
04:13 < wookiehangover> owen1: I usually use iptables to re-route to whatever port my app is running on
04:13 < ningu> owen1: ok, then you can use something like http-proxy for that, but you still need port forwarding
04:14 < wookiehangover> something like `sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000 && sudo iptables-save`
04:14 < deoxxa> ningu: oh dear, i lol'd at "legal status"
04:14 < owen1> wookiehangover: very interesting! scary but interesting
04:15 < ningu> deoxxa: I'm glad someone got it ;)
04:15 < wookiehangover> uptables are pretty scary at first
04:15 < wookiehangover> but they're reasonably well documented
04:15 < ningu> owen1: none of that will work though unless you have the port forwarding set up from your router
04:15 < wookiehangover> the only caveat is that they updates don't persist after reboots by default
04:16 < owen1> ningu: yeah, i forward ports 3000 and 4000 on my router/modem. let me make sure.
04:16 < owen1> wookiehangover: how to undo this command?
04:16 < ningu> owen1: huh? you forwad *from* a public port *to* a local port. there are always two ports involved.
04:16 < owen1> (debian)
04:16 < owen1> ningu: 1 sec.
04:16 < ningu> the command wookiehangover gave you won't help you at all on your local machine
04:17 < wookiehangover> and fwiw to undo, just `sudo iptables --list`
04:17 < wookiehangover> and `sudo iptables -t nat -D PREROUTING 1`
04:17 < wookiehangover> where `1` is the rule number you added
04:18 < wookiehangover> but I thought you were asking how to make a server run on port 80
04:18 < wookiehangover> without needing to run it as root
04:18 < ningu> yeah, what you gave him will work fine for that :)
04:18 < wookiehangover> listen to ningu about the port forwarding
04:19 < ningu> too bad you can't get a summer job waiting iptables
04:19  * wookiehangover rimshot
04:19 < owen1> wookiehangover: i didn't ask that, but now i know it's possible!
04:19 < wookiehangover> so like if you wanted to forward port 80 from your router to your server
04:19 < deoxxa> ningu: you can if you mess with the spelling and make it "weighting" instead
04:19 < wookiehangover> but still run your server as a non-root user and such. it's what I do
04:21 < owen1> ningu: ok. on my modem/router i see Global Port Rang: 3000 - 3000,  Base Host Port: 3000.   should the base be 80 instead?
04:22 < ningu> global port range 80 - 80, then set base host port to whatever you want http-proxy to run on
04:22 < ningu> and set the ip address to your LAN ip, there should be a thing for that too
04:22 < ningu> 192.168.0.* or similar
04:23 < ningu> where * is some number :)
04:24 < owen1> ningu: i run 'what is my ip' and i have it. i am trying to access my server from outside my network.
04:25 < ningu> owen1: yes, but your router doesn't know which of the machines on your network to forward the outside request to unless you tell it
04:26 < ningu> your router interface should say something about connected clients, or you can from ifconfig from the computer running your node app, if you're on linux or OS X
04:26 < ningu> and in the output somewhere it will say "inet addr:..."
04:26 < ningu> you want the one that isn't 127.0.0.1 ;)
04:26 < owen1> ningu:  192.168.1.149 / server3
04:26 < ningu> yep
04:26 < ningu> that's the one
04:27 < ningu> so you need to put that in the port forwarding config as the ip to forward to
04:27 < zemonk> is there someway to let node know that i am waiting for a callback to execute?
04:27 < zemonk> i am listening to the data event on a stream
04:27 < ningu> btw side note, there may be ways to make your LAN ip static -- the router can recognize your machine by its MAC address and always assign the same ip to it
04:28 < ningu> zemonk: if you are listening... then it knows :)
04:28 < zemonk> lol
04:28 < ningu> I'm not really sure what else to tell you. what isn't working?
04:28 < owen1> ningu: Service Name: weighmyplate, Global Port Range: 80-80, Base Host Port: 3000.  i don't see other textbox!
04:28 < zemonk> i create an object that stores a callback in a property
04:28 < zemonk> and when the data event on a stream fires
04:28 < ningu> owen1: hmm strange. well just try it.
04:29 < zemonk> it invokes the callback stored on the object property
04:29 < zemonk> however, node doesn't seem to realize that
04:29 < ningu> owen1: try running the app on port 3000 without using http-proxy and see if it sees requests to port 80 from outside
04:29 < zemonk> i guess it makes sense that it doesn't know that the property is a callback
04:29 < owen1> ningu: it's called 'custom service'. if i go back to Hosted Applications
04:29 < ningu> zemonk: what do you mean "node doesn't seem to realize that"?
04:29 < zemonk> because it exits
04:29 < owen1> i see pre-built apps, like ssh, where i can specify the server ip.
04:29 < owen1> (server3)
04:30 < ningu> owen1: hmm well I don't know your router config obviously
04:30 < owen1> ningu: but i don't see that under 'custom service'
04:30 < ningu> you could use one of the pre-built ones and just change the ports to whatever you want if it will let you
04:30 < ningu> dunno
04:30 < zemonk> it doesn't wait for the "data" event on the stream to be fired and then for my code to execute the function stored in the property
04:31 < owen1> ningu: wait! i think i know what's going on. i need to add a custom service, and than i can choose it from the drop down under 'hosted apps'
04:31 < owen1> ningu: works! thank you so much 
04:31 < ningu> zemonk: generally node waits for all pending listeners to wrap up and close before it exits... I suspect the stream is closing without emitting a data event
04:31 < owen1> wookiehangover: and u too
04:31 < ningu> cool
04:32 < ningu> zemonk: you might want to listen for 'error' or 'close' and see what's happening
04:32 < zemonk> oh, that sounds good, let me try
04:32 < zemonk> thanks!
04:33 < ningu> zemonk: these are a bit hard to debug, but I suspect you either need to add more listeners, or you're accidentally calling callbacks you didn't mean to
04:33 < ningu> and so node things it's done
04:33 < ningu> thinks*
04:34 < zemonk> ahh, seems like it
04:34 < zemonk>  an "end" seems to get fired
04:35 < owen1> ningu: but it doesn't let me add my other website. it tells me 'Pinhole Conflict Detected XXX'
04:35 < owen1> my other site is set to Global Port Range of 80 and Host Port of 4000
04:35 < ningu> owen1: http-proxy can sort that out for you probably. direct everything to the http-proxy's port and have it decide where to send the request
04:36 < ningu> yeah you can't have more than one thing on port 80 forwarding
04:36 < owen1> ningu: right. so both to 80
04:36 < ningu> global port 80 to *one* local port
04:36 < ningu> whatever it may be
04:36 < ningu> doesn't really matter
04:36 < ningu> local port 80 is fine but you can do whatever
04:36 < owen1> ningu: i am confused.
04:36 < ningu> global port 80 => local port that http-proxy is listening on
04:37 < ningu> http-proxy decides which node app to send the request to
04:37 < owen1> proxy is on 80 at the moment
04:37 < ningu> ok then just use that
04:37 < owen1> do i need 2 entries on my router? one for 3000 and one for 4000 ?
04:37 < ningu> no, the router should only go to where http-proxy is running
04:37 < ningu> so just 80 => 80
04:37 < owen1> so only 1 entry ?
04:37 < owen1> ok
04:38 < ningu> I had you do port 3000 so you didn't have to worry about whether http-proxy was configured right
04:38 < ningu> but for more than one app you need to use it
04:38 < ningu> owen1: and how will it decide which app to send it to? are there different domain names?
04:39 < owen1> yeah
04:39 < ningu> ok, that should work
04:40 < ningu> your router settings from the hastebin look fine for that
04:41 < zemonk> i am a little confused, reading up about the "end" event
04:41 < zemonk> does this get fired at the end of all communication?
04:41 < ningu> zemonk: what kind of stream?
04:41 < zemonk> this is a socket created using net.connect
04:42 < zemonk> i am writing something like a basic smtp client
04:42 < ningu> then 'end' is fired when the other side sends FIN I believe
04:42 < ningu> unless you have allowHalfOpen
04:42 < zemonk> i send a message, i wait for the response, and i alternate
04:42 < zemonk> i see, i should probably read up on that
04:42 < ningu> yeah, I haven't played with it much but that's one of the settings
04:43 < zemonk> cool, sounds good, yea, seems like something i should be doing
04:43 < zemonk> thanks again ningu!
04:43 < ningu> sure
04:45 < owen1> ningu: works. i am glad we did that mistake. i understand it a bit better now.
04:45 < owen1> i only open one entry to my router. it's the proxy.
04:45 < owen1> i have to run it on port 80, i believe.
04:46 < owen1> on namecheap i had to set the A-Record to the ip, i can't add port there.
04:46 < ningu> owen1: no, the http-proxy can listen on any port and you can forward to it on that port. port 80 is for the global port range setting
04:46 < ningu> the http-proxy is all your local setup so it doesn't matter what port it's on
04:46 < ningu> port 80 works fine but so would any other port :)
04:47 < ningu> if the global port range isn't 80 then it won't forward http requests on port 80 which is where browsers will send them
04:47 < ningu> but where it forwards *to* after that is up to you and it doesn't really matter
04:47 < owen1> so lets say i run http-proxy on 3000, all i need to do on the router is change the Host Port to 3000+
04:47 < owen1> ?
04:48 < ningu> yes, except one of your apps is on port 3000 so you'd have to change that too
04:48 < ningu> one app per port :)
04:48 < owen1> sure. 
04:48 < owen1> let me try. this is so coool
04:48 < ningu> hehe
04:48 < owen1> i thought i have to run as sudo (:
04:49 < ningu> nah
04:49 < ningu> if this was a server that wasn't behind a router then you'd want to do that, or use wookiehangover's thing
04:50 < owen1> why would i want to do something like running as sudo?
04:50 < ningu> you can have the web server run under another user, but it needs root access to start up. on *nix ports 1024 and lower are privileged and can only be bound to as root
04:51 < ningu> typically apache, nginx etc. immediately change the user to www-data (or whatever) upon startup
04:51 < owen1> ningu: i am confused. if i can run my server on 3000 why do i still need sudo?
04:51 < owen1> regardless if it's under a router or not
04:51 < ningu> owen1: I said *if* you aren't behind a router and want to bind to port 80
04:52 < ningu> because you wouldn't want people to have to connect to http://domain.com:3000
04:52 < ningu> it would work, but it would be kind of silly
04:52 < owen1> oh
04:55 < rcombs> well, I'm having trouble in my Node app, but I'm pretty sure it has nothing to do with Node itself
04:56 < rcombs> given that my issue has to do with sending too many bytes in a single zero crossing on a 60Hz powerline
04:56 < rcombs> :3
04:56 < owen1> ningu: do u have a sysadmin or dev-ops title at work?
04:57 < ningu> nope I've just done this stuff before
04:57 < rcombs> owen1: if you want to bind on 3000 you don't need root
04:58 < owen1> rcombs: yeah. i just did that. my http-proxy is running with no root
04:58 < rcombs> huzzah
04:58 < ningu> cool
04:58 < owen1> now i have a question about architecting my web app. it's related to the proxy.
04:59 < rcombs> owen1: just ask
04:59 < owen1> in the past (before node) people would build big web apps.
04:59 < ningu> sometimes they still do :P
04:59 < rcombs> people still do
04:59 < rcombs> but moving on
05:00 < owen1> it seems like many people in the node community like the substackian/unix approach for apps. i am curious if i can use the revese proxy to 'chunk' my web app to small vertical slices.
05:00 < owen1> so each chunk is a few features and can be deployed by it's own.
05:00 < rcombs> *its
05:00 < ningu> well sure you can set up http-proxy however you want and have as many or as few apps running behind it as you want
05:00 < owen1> ningu: but for the user it will appear as one site
05:01 < rcombs> owen1:  I'd recommend you make express-compatible modules
05:01 < owen1> rcombs: i try not using frameworks if i can.
05:01 < ningu> owen1: only if the domain name is the same, but it looks like http-proxy supports routing by directory
05:01 < owen1> createServer is good enough, i hope
05:01 < rcombs> owen1: express is _really nice_
05:01 < rcombs> owen1: it's like, if Node.js had a builtin router lib, it'd be express
05:01 < ningu> owen1: anyway, it really depends on what you are building -- you don't want to split things up if they share a lot of code
05:01 < owen1> i like to copy issacs's work on npm.
05:02 < owen1> my router is a funciton
05:02 < ningu> if things are tightly coupled put them in one app, if loosely coupled or not coupled at all then split them up
05:02 < FunnyLookinHat> Checking out this method of extending classes and whatnot - http://phrogz.net/JS/classes/OOPinJS2.html - does anyone know how I would call the parent constructor from within a child constructor ?
05:02 < rcombs> owen1: awww, don't write your own router when express does the job so well
05:02 < owen1> or 'routes' package
05:02  * rcombs did that once, regrets it
05:02 < FunnyLookinHat> Trying to avoid copy / pasting my entire constructor which is the same
05:02 < owen1> https://github.com/aaronblohowiak/routes.js
05:03 < ningu> the whole question of how many apps to have is separate from what framework to use in the apps
05:03 < ningu> I agree that express is really useful though
05:03 < owen1> true (:
05:04 < rcombs> owen1: that looks like express's router
05:04 < owen1> ningu: i guess what i really want is to be able to deploy small chunks of my app
05:04 < ningu> owen1: do the chunks need to know anything about each other?
05:04 < rcombs> owen1: lo and behold, it's connect's router
05:04 < rcombs> owen1: and express is connect++
05:04 < owen1> rcombs: ok. and if i need templates i use templar - https://github.com/isaacs/templar
05:05 < owen1> ningu: probably.
05:05 < owen1> rcombs: but why do u need connect? 
05:05 < rcombs> owen1: which uses Express's temptating APIs
05:05 < ningu> so why make them separate apps?
05:05 < owen1> ningu: so i can deploy small features without deploying the entire thing
05:06 < rcombs> owen1: it sounds to me like you're building a fake Express out of its component parts
05:06 < owen1> rcombs: connect addes a function in the middle of the request
05:06 < owen1> rcombs: just add a function foo to the request object
05:06 < owen1> req.template = function() { bla }
05:06 < ningu> and what's wrong with adding a function in the middle of the request?
05:06 < owen1> req.error = bla
05:07 < rcombs> owen1: and trying to deploy small features as entirely different app with an HTTP proxy rather than modules with express, which would likely be far easier and still drop-in-able if you did it well
05:07 < owen1> rcombs: let's not mix the small deployable apps with express vs no express (:
05:08 < owen1> ningu: that's the million dollar question.
05:08 < rcombs> owen1: well, express or not, it'd be easier to have small modules that a single parent app runs than trying to deal with small entire apps and an HTTP proxy
05:10 < rcombs> also, JS functions are not expensive like PHP's
05:11 < owen1> ningu: according to Raynos, express doesn't play well with streams and using a middleware is like adding a global function for your entire app. it was a while ago when he said that so maybe things changed.
05:12 < rcombs> owen1: express is often configured in such a way that it doesn't play well with streams, but it definitely can
05:12 < howdynihao> well the expensive part is relative ;P
05:12 < rcombs> and I don't get your analogy
05:13 < howdynihao> an extra function call that does nothing for your app is still a function call
05:13 < rcombs> true
05:13 < ningu> owen1: you should profile it if you are actually concerned about performance. I seriously doubt it's having a measurable effect
05:13 < ningu> anyway I have to go
05:13 < owen1> Raynos: did u change your opinion about express/middleware?
05:14 < howdynihao> owen1: its still true
05:14 < NuZZ> um guys, ive a wtf to understand
05:14 < NuZZ> when I am looking at HTOP
05:14 < owen1> howdynihao: the global part and the streaming part?
05:14 < NuZZ> and spawn a http server( to keep the process ongoing)
05:14 < howdynihao> well the 'global' part
05:15 < NuZZ> then fs.exists __filename, () ->
05:15 < owen1> howdynihao: so it's a problem with connect, right?
05:15 < NuZZ> it spawns fucking 5 extra child processes for each worker
05:15 < NuZZ> and it wont go away
05:15 < howdynihao> well problem is up to you to decide
05:16 < rcombs> NuZZ: I'm not aware of Node.js spawning child processes in any case unless you tell it to directly
05:16 < NuZZ> i know right
05:17 < deoxxa> what's the best way to compare if Buffer("a") !== Buffer("b")?
05:17 < NuZZ> i should screenshot this
05:17 < deoxxa> NuZZ: they're libuv threads for I/O
05:17 < rcombs> deoxxa: probably best way involves native code
05:17 < milani> isaacs, Can we expect single v8 instance shared between multiple processes in the future? 
05:17 < owen1> howdynihao: so when i add a middleware to my app, there is a function that is being called for each request? i think it's about time to read connect's code
05:17 < rcombs> deoxxa: to do it in JS, check if both are buffers and lengths are equal, then loop through and compare each value
05:17 < NuZZ> so should i just ignore the "extra processes" in htop?
05:17 < NuZZ> or use existsSync
05:17 <@isaacs> milani: no, you cannot expect that.
05:18 <@isaacs> milani: that doesn't actually make much sense.
05:18 < milani> isaacs, do you think it is even possible?
05:18 <@isaacs> milani: you'd have to be sharing computation and memory between processes
05:18 < milani> isaacs, if you have an idea I want to know, because I'm implementing appjs in multiprocess mode I want to access browser v8 in node
05:18 < rcombs> deoxxa: if you're lazy, compare the buffer.toString("hex")'s, but that's probably slower
05:18 < howdynihao> owen1: yea pretty much, depends where you put it along the request route
05:18 < deoxxa> rcombs: i'll probably go with (a.length !== b.length) || (a.toString("hex") !== b.toString("hex")) for lol
05:18 < deoxxa> ha
05:18 < deoxxa> yeah
05:18 < deoxxa> great minds
05:18 <@isaacs> milani: kind of the whole point of an os "process" is to provide separation
05:19 < milani> isaacs, right.
05:19 < substack> milani: what are you trying to do?
05:19 < substack> sounds like xy problem
05:20 < rcombs> deoxxa: it's not too much more work to do if(!(Buffer.isBuffer(a) && Buffer.isBuffer(b) && a.length === b.length)){return false}for(var i = 0; i < a.length; i++){if(a[i] !== b[i]){return false;}}return true;
05:20 < rcombs> deoxxa: in fact, I just did it for you
05:20 < deoxxa> rcombs: indeed!
05:20  * deoxxa stealz
05:20 < milani> substack, I wanted to use v8 in multithread mode, but it needs locks,
05:20 < rcombs> deoxxa: wrap it in function buffersEqual(a,b){}
05:20 < deoxxa> ha
05:20 < milani> substack, I could not go everywhere in chromium source and put locks here and there
05:21 < rcombs> deoxxa: I wrote a version of that earlier today whose only difference is whitespace and a ; after return false
05:21 < substack> milani: c++ extensions in node can make use of the thread pool
05:22 < milani> substack, but chromium doesn't create context when I use v8 in two threads. actuall v8::Context::Create() returns an empty pointer.
05:23 < milani> substack, I mean if I remove locks, it returns empty context, If I put locks, it works for a few instructions, but not always.
05:23 <@isaacs> milani: multithread != multiprocess
05:23 <@isaacs> milani: threads and processes are very different animals
05:23 < milani> isaacs,  I know, this was the story:)
05:23 <@isaacs> oh, ok
05:24 < milani> isaacs, I tried using multithreading, that doesn't work. I used multiprocess to have appjs working at least, but now I don't have access to both V8s at the same time:)
05:28 < paultman> hello everyone :)
05:29 < paultman> anyone with some time to talk about session-less storage options?
05:30 < rcombs> paultman: it basically comes down to "sign your shit with an HMAC of some sort and stick it in a Cookie"
05:30 < rcombs> paultman: optionally, if you don't want the user to know what you're storing, encrypt it
05:31 < paultman> @rcombs ok, sign requests... can do, but how much are u talking about sticking in a cookie?  
05:32 < paultman> and on the server, still use session but only for session_id?
05:32 < rcombs> paultman: I meant "stick your session data in an Object, JSON-ify it, make an HMAC for it, and put the JSON and the HMAC in one or two cookies"
05:32 < deoxxa> rcombs: or just put the hash in there and reconstruct the session data by brute forcing the hash!
05:33 < ElectricMaxxx> God Morning
05:33 < rcombs> deoxxa: have I told you about the best compression format ever that #bakabt came up with?
05:33 < deoxxa> oh dear
05:33 < deoxxa> md5?
05:33 < paultman> so besides session_id, nothing is saved on the server....
05:33 < deoxxa> does jarudin still run that thing?
05:33 < rcombs> deoxxa: store 10 hashes of a file with different algorithms and the file length
05:34 < deoxxa> ha
05:34 < rcombs> deoxxa: jarudin, Duki, et. al.
05:34 < rcombs> paultman: with HMAC cookie-sessions, you store nothing on the server
05:34 < rcombs> paultman: and there are no session ids
05:34 < deoxxa> rcombs: do jisakujien or houkouonchi still hang out there?
05:35 < paultman> @rcombs, oh, geez, in that case I'll need to read up on HMAC cookie sessions.  I thought it was simply to sign data in cookie to prevent client tampering 
05:35 < rcombs> deoxxa: I recognize neither
05:35 < deoxxa> darncakes
05:36 < rcombs> paultman: that is the point
05:36 < rcombs> paultman: you put all your data in the cookie and sign it to avoid tampering
05:36 < rcombs> paultman: and that way you don't need to store anything on the server because the client sends it all in the cookie
05:36 < rcombs> paultman: and they can't screw with it
05:37 < paultman> rcombs:  yeah, thinking about it, I really don't have a use of session id on the server, if it's not tied to any session data (on the server)....
05:37 < rcombs> paultman: in practice, it's like server-side sessions, except friendly across multiple servers and configless and the client can find out what's in the session data (but can't change it)
05:38 < rcombs> express has a module for it
05:38 < paultman> is it secure enough for sensative stuff like username and hashed/encryped password?
05:38 < rcombs> paultman: well you can just store username then
05:39 < rcombs> paultman: no need to store hashed password when you're validating the data with an HMAC; you can take your own word for it that the username is correct
05:39 < paultman> yeah, I guess i can trust that if username is set, i've already validated pass in the first place
05:39 < rcombs> yep
05:39 < rcombs> also, that's one less trip to the database and one less hash check every request
05:39 < paultman> *thank you, thank you, thank you :)
05:40 < rcombs> also keep in mind that the only things that see this are you and the client browser
05:40 < paultman> clears up lots of questions I came up with last night when trying to balance how much I was keeping in session storage vs db requests
05:41 < rcombs> so if you wanted to cache some things in there like user perms and email address and whatever to make fewer db requests, you could do that without worrying about tampering, server-side session files getting too large, or anything like that
05:42 < rcombs> (and if you're using https, you don't have to worry about sniffing either)
05:43 < paultman> yeah, and rather then big objects like the user object, I can lazy load them, add them to cookie, and on repeated calls, if some attr is in the cookie, use it, else check db, and add it to cookie (for future requests)
05:43 < rcombs> anyone up for doing s/ {2,}/ / on the topic?
05:43 < deoxxa> lol
05:44 < paultman> what's and s/ {2,}/ / ?
05:44 < rcombs> paultman: yea, you can do that
05:44 < deoxxa> there's two spaces before the SO url
05:44 < rcombs> replace 2 (or more) spaces with 1
05:44 < deoxxa> which is throwing off rcombs's OCD
05:44 < rcombs> deoxxa: yup
05:44 < rcombs> double-spaces bug me
05:44 < paultman> gotcha, i realized it was a regex just after askign :p
05:44 < deoxxa> that's a  shame
05:44 < rcombs> esp. after periods in blocks of text
05:45  * rcombs does like how HTML clobbers them :P
05:47 < paultman> rcombs: when using the HMAC cookie in this manner... what do u think about multiple expire settings.  I mean something like user (never changing) maybe I want to last a while, but for other, more dynamic values, I want session expiration...
05:47 < wizard_2> When making a stream-next transform stream. I'm doing a bunch of async operations that eventually call push(), but calling done() right after I set all that up. I'm not sure I fully understand the conseqences of my actions. Something tells me that maybe, just maybe I should wait until I've actually processed my async operations to call done();.
05:47 < Incip> Newbie question but what's the best way to speed test things?  
05:48 < paultman> does anyone every use 2 cookees? maybe on a subdomain to have session vs longer term expiration?
05:49 < Incip> nm went to google like a good newbie
05:49 < rcombs> paultman: I tend to use a single long-lived cookie and update things server-side
05:50 < paultman> ok, that's pretty safe.  was considering multiple cookies for expiration and request payload... might be worth more investigation
05:50 < rcombs> that also could work
05:51 < paultman> then again, the problem is the server will only see one cookie per request
05:51 < rcombs> paultman: why?
05:51 < paultman> so i'd have to manage that somehow
05:51 < rcombs> paultman: server can definitely get multiple cookies in one request
05:51 < paultman> really?  on a single url?
05:51 < deoxxa> wizard_2: ah, streams2!
05:52 < paultman> i thought i do sub.domain.com and domain.com
05:52 < paultman> for 2
05:52 < wizard_2> paultman: your browser will supply all cookies it's allowed to send with every request
05:52 < deoxxa> wizard_2: when you call done(), you're saying "i'm ready to accept more data *right now*"
05:52 < deoxxa> wizard_2: so if you have some async stuff that might get backed up (database calls, etc), you might want to put off calling done()
05:52 < wizard_2> paultman: its why speed freaks like to have assets on a seperate domain that has no cookies
05:53 < mscdex> imap protocol sucks
05:53 < wizard_2> deoxxa: that makes sense
05:53 < paultman> wizard_2, that's what I was alluding too, having cookies on 2 diff domains to segment payload and expiration
05:54 < wizard_2> deoxxa: may I ask, when piping with streams2, when I call read(), and I've got a few streams piped together, do they reach back up the pipe and call read if they have nothing to share?
05:55 < wizard_2> paultman: seems complex, I think I missed the begining of your setup however
05:55 < deoxxa> wizard_2: they'll actually do that even without being asked - they'll try to read() up to highWaterMark bytes/things optimistically, hoping you'll come calling for data one day
05:55 < wizard_2> deoxxa: that's really nice of them
05:55 < deoxxa> wizard_2: check out https://gist.github.com/deoxxa/5308872 - i put it together as an experiment the other day to visualise this exact effect
05:57 < wizard_2> deoxxa: I think our stream docs need a little more clarification about watermarks when we're reading objects instead of buffers, I'll hit the source on that one for now however
05:57 < wizard_2> deoxxa: Thanks!
05:57 < wizard_2> deoxxa: also that's a cool visualization 
05:57 < deoxxa> thanks! :>
05:58 < deoxxa> the new stream stuff is a lot to grok at first, but there's some really neat stuff sitting under the surface if you poke around a little
05:59 < wizard_2> deoxxa: it makes a ton more sense to me then streams1 did =)
06:14 < rcombs> deoxxa: you said URL, not domain
06:15 < deoxxa> rcombs: wha
06:15 < rcombs> deoxxa: sorry, meant paultman 
06:16 < rcombs> meanwhile, I may have the strangest race condition in the history of node.js
06:17 < rcombs> I have to wait a particular number of half-cycles on the mains power line before sending more bits
06:19 < paultman> rcombs: you're right.  thanks again for pointing me in the right direction =)
06:19 < rcombs> paultman: welcome
06:22 < JamesMGreene> Anyone have experience with any Node.js message queue servers without any external dependencies? (i.e. no Redis, etc.)
06:22 < JamesMGreene> I only see 3 and only 2 of those are on NPM
06:23 < JamesMGreene> 1 is new, 1 hasn't been updated in 1 year and isn't on NPM, and 1 hasn't been updated in 3 years
06:23 < JamesMGreene> (respectively: fairy, websocket.MQ, and wormhole)
07:05 <@isaacbw> this might be a long shot, but is there anyone in NYC who would be interested in an office share? We could rent a loft and find a few other people and have a small co-working space
07:05 <@isaacbw> I'm looking for office space now, and I would prefer a small office share to renting a desk at in a larger workspace
07:07 <@isaacbw> or if anyone can recommend a good coworking space with permanent desks for a desktop, I would love to hear about them. DUMBO Startup Lab is really the only thing in my sights
07:10 <@isaacbw> well, if the idea appeals to anyone, send me a PM
07:11 <@isaacbw> we could probably find a good space and four or five people would have desks for a few hundred each
07:31 < abrener> hi. anyone familiar with dgram multicast? am getting EADDRINUSE when calling socket.addMembership('239.255.255.250') using cluster
08:45 < patstoms> Am I only who get crashes after some days uptime because of mongoose?
08:55 < deoxxa> patstoms: probably not - mongoose is crazy complex
08:58 < yawnt> moin
08:58 < deoxxa> moin indeed, my european friend
08:59 < deoxxa> i wish couchdb wasn't such a temperamental baby
09:09 < whiskers75> deoxxa: Is there any implementation of entities and tile entities in JSMC?
09:11 < deoxxa> whiskers75: nope
09:11 < deoxxa> whiskers75: that's something i never decided on a good method for implementing
09:11 < whiskers75> deoxxa: Great. Now I need to find a way to implement tile entities
09:11 < whiskers75> the wiki details the NBT format, but not the protocol...
09:12 < whiskers75> deoxxa: I'm currently in the process of making a function to check if an item is placeable (at present, you can try and place down, say, a sword and glitch out)
09:13 < deoxxa> ha
09:13 < deoxxa> nice
09:13 < whiskers75> I'll submit a pull request when I'm done.
09:13 < deoxxa> whiskers75: you might want to take a peek at https://github.com/fador/mineserver for item definitions and stuff
09:13 < whiskers75> deoxxa: thanks
10:10 < whiskers75> deoxxa: done :) https://github.com/deoxxa/jsmc/pull/30
10:10 < combataircraft> hi all. I've created a replacement for GruntJS and Makefiles this weekend.
10:10 < combataircraft> check it out; https://github.com/azer/indev
10:10 < combataircraft> it's way more convenient IMO
10:11 < whiskers75> combataircraft, nice
10:12 < whiskers75> deoxxa?
10:41 < jonaslund> hmmm
10:51 < crypto-tron> sup
10:54 < abrener> anyone here familiar with udp multicast?
11:32 < ashnur> what does app.get() when it is passed 2 arguments?
11:32 < ashnur> express*
11:33  * ashnur is a bit tired, sorry for the uninteresting but silly questions
11:33 < ashnur> i am trying to find this, and no luck yet
11:50 < ashnur> oh fuck, that get is not the same as the other get
11:51 < floby> hey people
11:52 < floby> I wrote an article about new streams2
11:52 < floby> someone care to peer review before it goes to prime time ?
12:36 < webjay> How do I output the error message from this: "{ [Error: Response timeout] timeout: 5000, status: 503 }"?
12:36 < j3lte> JSON.stringify
12:36 < webjay> I can get .timeout but how do I get to Error?
12:37 < webjay> but I believe it is JSON
12:37 < j3lte> oh wait sorry
12:37 < webjay> the above is just from console.error(err)
12:37 < webjay> this object: http://www.senchalabs.org/connect/timeout.html
12:37 < j3lte> I have no idea ;)
12:38 < webjay> ok :)
12:40 < floby> [0]
12:40 < floby> that's where your error is
12:41 < webjay> nope, found it, since it's an Error object it's at .message
12:41 < webjay> http://docs.nodejitsu.com/articles/errors/what-is-the-error-object
12:55 < mucker> :( dust.js issue ... res.render({user:foo}) does not render even though console.log(foo) prints just fine
12:57 < gildean> mucker: you're not referencing to a template?
12:57 < gildean> i mean shoudln't it be: res.render('templatename', {somekey: someval});
12:59 < mucker> yeah ... 'template' was there
13:00 < mucker> gildean: in the template.dust I have a {user} which also prints just fine
13:00 < mucker> typeof user == object
13:00 < mucker> {user.username} does not print
13:05 < gildean> mucker: sorry, i haven't used dust.js so i can't help you more than that
13:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:28 < Arnar> hi all!
13:29 < Arnar> I'm having some weird problems with npm, any http requests it tries to make fail with system errno 64 (os-x)
13:29 < Arnar> curl works fine, and I have no proxy settings anywhere
13:38 < mucker> gildean: typeof ['users'] == 'object' I had to give a user[0]
14:26 < medice> geez how awful, webmatrix2's npm gallery extension crashes the whole project if installed 64 bit nodejs and it doesn't find it
14:26 < medice> *crashes the webmatrix
15:08 < MI6> joyent/node: Tobias Müllerleile v0.8 * 1a95ce5 : tls: Re-enable check of CN-ID in cert verification  RFC 6125 explicitly s - http://git.io/dJ9K4w
15:14 < whiskers75> deoxxa, i finished the unsupported lib
15:17 < whiskers75> Anyone here know a lot on https://npmjs.org/package/minecraft-protocol?
16:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:25 < base698> anyone know how on a mac get option+b to get interpreted like it does in the terminal?  In the GUI it does an integral: ∫
16:50 < telenieko> hi. I'm a newbie that somehow got his node+express+passport thing frozen after succesfully authenticating. When my Node.js seems to be stuck processing a request, how can I get a print of the current stack to see where's it hanging around?
16:51 < myndzi> sounds like you want remote debugging
16:51 < myndzi> unfortunately i haven't really encountered anything easy to get working yet :( it all seems outdated or complicated
16:52 < telenieko> yes, that's my current impression. I'll fill all my code with "console.log()" statements.. hehe
16:52 < myndzi> that's whit i wind up doing :\
16:52 < myndzi> anyway, google around for node remote debugging
16:52 < myndzi> you should be able to get a webkit inspector up and running and connected to your node app
16:52 < myndzi> if you get it up and running it's super handy i'm sure ;)
16:53 < telenieko> thanks for the tips ;)
16:53 < myndzi> well, it's better than nothing i guess :P
16:57 < JohnMcLear> Ideas guys..  I have a socket session that can restart express, how can I restart express without losing that socket session?
16:59 < ningu> err... why do you want to restart express?
17:01 < wavesounds> Can anyone tell me how I find what NODE_PATH is set to on OSX?
17:01 < myndzi> echo $NODE_PATH ?
17:02 < crypto-tron> anyone want to hear a song i wrote?
17:03 < wavesounds> myndzi: from the terminal? I get a blank line ...
17:03 < myndzi> then it's empty?
17:03 < myndzi> or the variable is spelled wrong or something, dunno
17:04 < myndzi> ex: echo $PATH
17:05 < wavesounds> myndzi: yeah that works - should NODE_PATH get set if I have node installed?
17:05 < myndzi> not really
17:05 < myndzi> type node -v
17:05 < myndzi> does it print out a version?
17:06 < wavesounds> yeah 0.8.8
17:06 < myndzi> then obviously it runs :)
17:06 < myndzi> i'm not sure where you encountered NODE_PATH but i'm no expert either
17:06 < myndzi> perhaps something wants to know specifically where your node binary is
17:06 < syncan> try "which node"
17:06 < wavesounds> ahh thats what im looking for :-)
17:06 < wavesounds> thanks
17:06 < syncan> :)
17:07 < syncan> echo $NODE_PATH if you want to test if its set
17:07 < syncan> but i don't have mine set like myndzi said
17:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:10 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:14 < MI6> joyent/node: Fedor Indutny v0.10 * 77715ed : crypto: zero is not an error if writing 0 bytes  fix #5128 (+1 more commits) - http://git.io/yUQvlw
18:17 < trippeh> Ugh, NPM crashes on nat64
18:24 <@mbalho> is that like nintendo 64?
18:25 < trippeh> mbalho: Not sure if serious or trolling ;)
18:25 < trippeh> But no.
18:26 <@mbalho> trippeh: what does crashes on nat64' mean
18:26 < trippeh> It doesnt work if network is ipv6-only but has a NAT 6 to 4 gateway
18:26 <@isaacs> trippeh: network address translator 64?
18:27 <@isaacs> trippeh: ohhhh ok
18:27 <@isaacs> trippeh: i think this is probably a general node problem, not so much just npm
18:28 < trippeh> isaacs: Hum.
18:34 < trippeh> isaacs: It seems to prefer using the A-record, even when AAAA is available.
18:34 < trippeh> But it does support AAAA as it works if I filter out A's.
18:35 <@isaacs> trippeh: yeah, there's a github issue on this
18:35 <@isaacs> trippeh: to use AAAA if available, falling back to A
18:35 <@isaacs> and to listen on both
18:35 <@isaacs> er, listen on both v6 and v4 stacks
18:36 <@isaacs> trippeh: so, yeah, this is a failing of node in that case.
18:36 <@isaacs> trippeh: known issue, planned to fix, not fixed yet.
18:36 <@isaacs> there aren't that many people using ipv6-only networks, it would seem, because this doesn't come up very often
18:37 <@isaacs> trippeh: hence the fact that it's not fixed yet.
18:37 < syncan> the temporary fix is AAA batteries
18:37 < trippeh> Heh, ok.
18:38 < trippeh> We're moving to v6-only backend networks
18:38 < trippeh> :)
18:40 <@isaacs> syncan: or you can put two AA batteries together to get a AAAA for IPv6
18:40 < syncan> isaacs: I'm going to use this for a cluster: http://www.amazon.com/Homedics-Octo-Node-Mini-Massager-Assorted/dp/B003ZXYL5O
18:41 <@mbalho> put a raspberry pi in it
18:41 <@isaacs> that's the new "put a bird on it"
18:41 <@isaacs> "put a pi in it!"
18:42 <@mbalho> hah
18:42 < syncan> nice IPV-6! put a pi in it!
18:42 < syncan> All done!
18:42 <@mbalho> isaacs: hey you should come check out the baby chickens at my house, me and substack wanna name em sed, awk, grep and git
18:43 < syncan> I just got word PyPy is suing for rights
18:45 < syncan> what's the longest any of you have stayed up straight? days?
18:45 <@mbalho> 17
18:45 < syncan> i'm in my third decade, and i broke my all-time record this week
18:45 < syncan> wow
18:45 < ljharb> after 40 hours, you're considered clinically insane
18:45 <@mbalho> mercury days AHAHAH
18:46 <@mbalho> oh wait thats longer
18:46 < syncan> ljharb, in my case it was 40 hours after I was born
18:47 < syncan> so not really 17 days
18:47 < syncan> and not ~1800
18:48 < trippeh> isaacs: So I assume these issues are on the back burner for now, unless someone steps up and just fixes it
18:48 <@isaacs> yeah
18:48 < syncan> i stayed up for 4.5 days two nights ago
18:48 <@isaacs> trippeh: and there's some question about the best way to go about resolving DNS for ipv6/v4 hosts
18:48 < syncan> i was able to make people in photos move
18:49 < syncan> only the .gifs, but still
18:49 <@isaacs> trippeh: edge cases that can lead to ridiculous latency if you don't do it right
18:49 < trippeh> isaacs: And I assume wether to go for happy eyeballs or the normal "rfc ordering"
18:49 <@isaacs> yeah, ther'es been some discussion.
18:49 < trippeh> (I prefer the latter as it doesnt paper over problems)
18:49 <@isaacs> trippeh: search for "dual stack" in the issues list
18:50 <@isaacs> trippeh: or jus tping indutny in #libuv
19:10 < [Fudge]> are there any more minimalistic frameworks for HTTP out there, other than express?
19:10 < [Fudge]> I haven't found any so far
19:12 < trippeh> [Fudge]: sure, does other languages apply? :P
19:12 < [Fudge]> trippeh: I mean for node :P
19:12 < [Fudge]> I've looked at geddy but it's not really what I'm looking for
19:14 < syncan> [Fudge]: have you been here? http://todomvc.com/
19:14 < [Fudge]> that seems to be client side syncan 
19:15 < syncan> oh, sorry, i missed the node-specific reference
19:15 < syncan> yeah, primarily client-side
19:15 < [Fudge]> express is fine, I'm really just looking at other options
19:16 < syncan> though, of course, there's things you can take into consideration; as far as how bound you are to your data models
19:16 < [Fudge]> I don't want loads of bells and whistles
19:16 < [Fudge]> just something I can extend as needed
19:16 < gildean> [Fudge]: restify seems somewhat popular
19:16 < syncan> I can across something today I was going to check out; not a lot of bells and whistles; looking for the same. one sec
19:16 < gildean> https://npmjs.org/package/restify
19:16 < syncan> can=came
19:16 < syncan> yeah, noticed that today too
19:17 < [Fudge]> I've used that gildean, seems to be aimed at APIs rather than full web applications
19:17 < syncan> do you want bindings?
19:17 < syncan> data bindings
19:17 < [Fudge]> not sure what you mean
19:17 < gildean> [Fudge]: well, most web apps are just apis with frontends
19:18 < syncan> binding to properties of a data model; when those properties are updated on the server - or via your ui - it's auto-updated in persistence
19:18 < [Fudge]> I suppose
19:18 < [Fudge]> syncan no, none of that
19:18 < [Fudge]> nothing like meteor
19:18 < [Fudge]> "Express' use case is targeted at browser applications and contains a lot of functionality, such as templating and rendering, to support that. Restify does not."
19:18 < syncan> id' say 75% of the frameworks do i
19:18 < syncan> it
19:19 < [Fudge]> I'm looking at flatiron at the moment
19:19 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:21 < mscdex> yes, finally! github added a "delete this branch" button that pops up after a PR is merged
19:23 < ljharb> mscdex: i wish they'd add a way to disable that per-repo :-/ but at least there's a "restore branch" button too
19:23 < syncan> [Fudge] Huh .. this looks like a lot of snippets from here and there. Don't mean that in a bad way.
19:23 < [Fudge]> syncan flatiron?
19:23 < syncan> Yeah
19:23 < [Fudge]> yeah, I'm not sure I like it
19:24  * [Fudge] should roll his own
19:24 < syncan> Looking at the various components, it's certainly a composite of very frequent patterns you see
19:24 < syncan> Right, this looks like just a tier above doing that
19:26 < syncan> This wouldn't be a bad start to swap out your own roll, however
19:26 < syncan> if the architecture and components wire to your liking enough
19:26 < syncan> Like working stub code, heh
19:33 < dominictarr> tmpvar: yo, whats up?
19:34 < `3rdEden> Anyone ever had # Fatal error in ../deps/v8/src/incremental-marking.cc, line 462 
19:35 < `3rdEden> related gist; https://gist.github.com/3rd-Eden/5332108
19:53 < mscdex> yes! a geocities bootstrap theme!
19:54 < niggler> mscdex ?
19:54 < mscdex> niggler: http://divshot.github.io/geo-bootstrap/
19:54 < niggler> when did github.com become github.io?
19:55 < mscdex> niggler: https://github.com/blog/1452-new-github-pages-domain-github-io
19:55 < zon3d> i'm using the node-mysql library... when i do a connection.query(updateQuery, function(err, results) { console.log(results); });      // { affectedRows: 1, message: '(Rows matched:1 Changed:1 Warnings:0)', ........ you get the idea. it's not the model which was inserted. is this what's supposed to happen?
19:55 < syncan> wait, where's the web ring? :(
19:55 < niggler> i take a few days off and feel like the internet has completely changed
19:56 < syncan> <blink>Noo!</blink>
19:56 < niggler> where's the marquee mscdex 
19:57 < mscdex> niggler: it's at the top
19:59 < mscdex> zon3d: huh?
20:01 < s5fs> niggler: changed for the better or for the worse?
20:01 < zon3d> mscdex, shouldn't the "response" be the object that was inserted? instead it's some object containing the results of what happened
20:04 < niggler> s5fs its stranger
20:04 < syncan> zon3d: https://github.com/felixge/node-mysql  the documentation on the Readme.md is pretty good
20:04 < niggler> gotta change bookmarks
20:05 < syncan> zon3d: your working with callbacks, so your result is going to be in the callback parameters
20:05 < syncan> you're
20:06 < mscdex> zon3d: no
20:06 < zon3d> so do i need to perform an update, and then a select? REST convention would be that on a PUT, the server responds with the updated model
20:07 < s5fs> niggler: in any event, welcome back. i usually run into your comments on hn.
20:08 < niggler> why did github change the domain?
20:08 < mscdex> zon3d: why do you need this information if you just supplied it to query() ?
20:08 < niggler> boo "HTTP/1.1 301 Moved Permanently"
20:09 < zon3d> mscdex, i don't update every single field.. i only send the fields which have changed.
20:09 < zon3d> i suppose client side could be just updating what's changed too, then. i had it to just overwrite the old model entirely though.
20:10 < mscdex> zon3d: ok, then you have to do a select afterwards. it's probably more efficient to just update the client as you said -- that's one less query to do
20:10 < zon3d> ok. yeah that makes sense. thanks
20:14 < DTrejo> l'm sad: i want to use rework, but the newest browserify has an error when i try to require it. 
20:23 < pulse_reaction> hello gentlemen.
20:24 < pulse_reaction> I'm thinking of writing a turn based, online risk-like multiplayer game. Would Node.js, along with the Chilly framework (and something nice for the frontend), be a good pick?
20:33 < faceleg|work> pulse_reaction: do it
20:33 < faceleg|work> call it
20:33 < faceleg|work> node wars
20:33 < faceleg|work> +1 like
20:34 < syncan> RT @faceleg|work: +1 like for node wars
20:34 < zivester> anyone familiar with Buffers? trying to understand why my encoding/decoding is wrong: https://gist.github.com/zivester/5332362
20:36 < pulse_reaction> faceleg|work, syncan, hahaha. But would I want to kill myself writing the game? I mean, is Node.JS the ideal resource to use or are there better ones? 
20:36 < syncan> i'm looking at the source code now
20:37 < syncan> it'll work great; if you optimize for mobile, turn-based is a good jump-off point
20:39 < syncan> if it's 2 players, you'll be handshaking and maintaining an atomic state between very clear state "transition" events (as opposed to doing something realtime, and worrying about lag compensation, snapshots, etc
20:40 < syncan> (when i say 2 players, i really just mean turn-based, actually)
20:42 < pulse_reaction> syncan: I was thinking about more than 2 players, would that complicate things beyond impossible? also, each game would be around 1h+, would garbage collection be a problem?
20:42 < syncan> what platform?
20:43 < pulse_reaction> syncan: basically browsers. and optimizing for mobile wouldn't be a bad idea
20:43 < syncan> you'll need to have [player.attention retain] for mobile, even with Obj-C now having GC
20:44 < syncan> so just looking at the framework
20:44 < syncan> it's pretty barebones
20:45 < syncan> not necessarily a bad thing; but you'll be doing a lot
20:45 < syncan> also, it looks like there's just a single server; i'd have to double check
20:45 < pulse_reaction> I was thinking about using a node framework called chilly
20:46 < syncan> but it looks like it's having clients connect on a single server, and also doing all message handling through websockets 
20:47 < syncan> what's your experience level with online game architecture?
20:47 < syncan> yeah, Chilly is the framework code I just reviewed :)
20:47 < pulse_reaction> no experience
20:47 < syncan> That's the one that's pretty bare-bones. It's using the connect middleware rack, and it seems to be keeping things clean… but
20:48 < syncan> okay, well I'd recommend taking a couple weeks doing R&D on it
20:48 < pulse_reaction> which is why I'm thinking I'm way over my head with this idea
20:53 < syncan> just looked over it again
20:53 < syncan> i'm pretty curious about the framework myself; i'll probably play with it some tonight :)
20:54 < syncan> pulse_reaction: i think it's absolutely worth digging into, if you have the ambition
20:55 < syncan> that's the great thing about nodejs, npm, etc. strong community with a lot of open resources
20:55 < syncan> just with this framework and nodejs, you'll be able to get something running in a very short amount of time
20:55 < syncan> you'll need to be vigilant on scalability, but it's a good start
20:56 < syncan> and if you have to worry about scalability, you're in a good place
20:58 < syncan> that's my 94 cents
20:59 < pulse_reaction> syncan: yeah I'll certainly give it a try. thanks a lot for those cents
21:00 < syncan> pulse_reaction: no problem. i've worked on a bunch of commercial MMOs, so feel free to ping me in regards to that
21:01 < syncan> and there's probably at least 800 people in here who know everything about something
21:02 < syncan> they could be bots too, i'm not quite sure
21:04 < syncan> i know that isaacs is based on ELIZA
21:12 < dominictarr> tmpvar: https://github.com/tmpvar/vec2.js/pull/4
21:21 < MI6> joyent/node: Fedor Indutny v0.10 * eb39c98 : net: fix buffer iteration in bytesWritten - http://git.io/LPHxQw
21:41 < sitapati> morning
21:41 < sitapati> anyone using conditionals in a CCMS book?
21:42 < sitapati> (anyone meaning "anyone in channel atm")
21:46 < urbanizator> Good evening :)
21:46 < _sh0x> what is the best way to manipulate a buffer to remove a byte and xor the following byte? for example i'd like to remove 7d and xor 33 with 0x20.. so <Buffer 00 7d 33 00 00 02 81 99> changes to <Buffer 00 13 00 00 02 81 99>
21:47 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:48 < syncan> how important are the original positions?
21:49 < syncan> is it a one shot thing, or algorithmic based on the pattern/indices?
21:50 < _sh0x> the remaining bytes would need to stay in order. basically whenever i see a 7d i want to remove it and xor the next byte with 0x20
21:54 < _sh0x> which changes the size of the buffer so i guess i'd have to copy it to a new buffer 
21:54 < syncan> ah, ok .. and the starting length?
21:55 < syncan> not by chance always padded by 00 is it?
21:58 < syncan> actually, that's not too bad
21:58 < _sh0x> i'm trying to write a frame parser for node serial port. i have a frame like this for example
21:58 < _sh0x> <Buffer 7e 00 1e 91 00 24 46 00>
21:58 < _sh0x> <Buffer 00 06 c0 8f 7f 99 00 00>
21:58 < _sh0x> <Buffer 00 7d 33 00 00 02 81 99>
21:58 < _sh0x> <Buffer 7f 8f c0 06 00 00 46 24>
21:58 < _sh0x> <Buffer 00 8e 9c>
21:59 < syncan> so basically, it'll always be 7d 33
21:59 < syncan> somewhere
21:59 < _sh0x> 7e is the delimiter, the 2nd and 3rd bytes are the length of the frame (00 1e). the rest of the frame needs to stay in tact but whenever i get a 7d i need to remove it and xor the next byte with 0x20
21:59 < syncan> 7d needs to removed, and 33 xor with 20
21:59 < _sh0x> always 7d and the next byte could be 1 of four different bytes
22:00 < _sh0x> yes
22:01 < syncan> the next can be 1 of 4 diff bytes
22:01 < syncan> is the 33 constant, or just whatever is immediately followign 7D
22:02 < _sh0x> 33 isn't constant. whatever follows 7d should be xor'd with 20
22:02 < syncan> always the byte adjacent to the one for deletion
22:02 < syncan> gotcha
22:02 < _sh0x> yes
22:04 < syncan> you scanning in 8 byte windows?
22:04 < MI6> joyent/libuv: Elliot Saba master * d67d713 : build: make `make clean` remove test/runner.o - http://git.io/T738IQ
22:04 < _sh0x> it looks like node serial port is emitting them that way
22:06 < syncan> ok, but you'll probably be reading in a 32-bit int
22:06 < Metal3d> hi, I've got a strange problem
22:06 < syncan> i'm assuming
22:06 < syncan> not that it matters that much i suppose, one sec
22:06 < _sh0x> yea. it will change based on the frame type
22:06 < Metal3d> I made a node module that can use consolidate, I do npm link and it's on my global npm modules
22:07 < Metal3d> then I go to my other project that should need the first
22:07 < Metal3d> I did npm link mymodule
22:07 < Metal3d> it's ok
22:07 < Metal3d> I declare that the template engine is "swig" that is installed in my project
22:08 < _sh0x> i'll still have to write the rest of the parser
22:08 < Metal3d> but I have an error that says "swig module not found"
22:08 < _sh0x> just trying to learn the best ways to work with the buffer data
22:09 < MI6> joyent/libuv: Ben Kelly master * 8ef07cc : doc: add link to Visual Studio Express in README - http://git.io/Ezb01w
22:09 < _sh0x> i think if i can remove the 7d and xor the next byte it'll be easy to handle the bytes as a stream
22:09 < syncan> i'm gonna put up a pseudo code gist in a min
22:10 < _sh0x> right now its streaming all the bytes but i can't parse the frame correctly because i need to do this piece of processing
22:10 < _sh0x> cool
22:10 < _sh0x> tx
22:10 < syncan> there's actually a couple ways to do it
22:10 < Metal3d> If I install module on the first project (that is linked), it works
22:10 < syncan> what's your perf requirements?
22:12 < _sh0x> that was my dilemma. it doesn't need to be high performance, but i'd like to do it in a way that is also efficient.
22:13 < _sh0x> i thought about doing a loop and pushing each byte into an array. then write the array back to a buffer in the end. but i thought this might be converting it to strings and then back to bytes (less efficient)
22:13 < syncan> that's why i asked about perf ;)
22:14 < _sh0x> wasn't sure if there was a way to do this with the buffer directly. don't see a way to splice it. but i saw substack has a node-buffers module with splice
22:15 < _sh0x> not sure which way to go now, or if there are other ways i should be exploring
22:15 < syncan> do you have a snip of your code?
22:16 < syncan> i'm going to be wrestling with something similar in a week or so, so testing it now seems good as any
22:17 < ningu> so here's a general question. say I work in a team where I'm the only person who knows node and I've written some apps for us to use. it's possible that in the future someone else who doesn't know node may need to do some maintenance or modify the apps. what level of documentation is appropriate?
22:18 < syncan> are you going to be releasing them to NPM or do they need to be internal-only?
22:18 < ningu> I'm using standard node modules like express and jade. I can document the specifics of the apps themselves but that won't really help for someone who doesn't intimately know js, node, express, etc.
22:18 < ningu> internal-only.
22:18 < ningu> for now, anyway.
22:18 < syncan> a general answer is that javadocs, good commenting, and tests are what future programmers of your code needs
22:19 < ningu> you mean jsdoc?
22:19 < syncan> *docs yea
22:19 < faceleg|work> jsdoc3 FTW
22:19 < DTrejo> anyone know of a thing that helps you find rogue console.logs in other people's code? at runtime hopefully
22:19 < syncan> i always say javadocs
22:19 < faceleg|work> DTrejo: grep
22:20 < DTrejo> haha okay
22:20 < syncan> if you have admin on your source control, put in a pre-commit hook ;)
22:21 < ningu> syncan: requiring that docs be present?
22:21 < syncan> sorry, that was about console.logs
22:22 < myndzi> anybody know how to use my own logger with socket.io?
22:22 < ningu> syncan: ok but what level of documentation in jsdocs or whatever is appropriate? can I assume that the person is familiar with express and not document express-isms or what? can I assume that they understand node callbacks?
22:22 < _sh0x> syncan: i was testing with this and thinking this is the less efficient way (looping through the bytes and pushing them into an array)
22:22 < _sh0x> https://gist.github.com/anonymous/5332800
22:22 < myndzi> io.set('logger', fn) doesn't appear to work
22:22 < _sh0x> would be nice if i could just deal with the buffer data directly 
22:22 < syncan> ningu: certainly don't rewrite the wheeldocs
22:23 < ningu> syncan: so then what *do* I write? :)
22:23 < chilts> ningu: just made it home ... and came straight to work from the airport! :)
22:23 < syncan> ningu: comment your API in j*docs format
22:23 < chilts> it's been a mega weekend!
22:23 < ningu> chilts: cool, did you get any sleep?
22:23 < chilts> bits and pieces I think, sometimes it's hard to tell how much though :)
22:23 < ningu> you are probably in better shape than me, our hot water is broken so it's hard to take a shower :P
22:24 < chilts> maybe 4 hours
22:24 < chilts> heh
22:24 < chilts> oopse, am not laughing
22:24 < syncan> ningu: what i always encourage is, when possible, writing a code file like story. when you're presenting characters, you give their descriptions first
22:24 < ningu> syncan: ok. the reason I'm not sure is the whole app is literally 100 lines of code, with templates. so the majority of confusion over it will come from not knowing js/node/express/jade
22:25 < ningu> I may be exaggerating slightly, it might be 200 lines
22:25 < syncan> ningu: if you do that, then that helps bring context to private functions and variables - the stuff that shouldn't be top priority to document (if ever). it should be well commented, put into descriptive functions. methods are verbs/actions
22:25 < syncan> oh
22:25 < ningu> yeah, I mean I can document that stuff and will
22:26 < ningu> but I know it will not be easily comprehensible to someone who doesn't know node and don't see what way there is around that besides just saying here are the node docs go read
22:27 < syncan> just put Isaac Schlueter's email in 72pt font at the top 
22:27 < ningu> haha
22:27 < syncan> with "Call 24/7"
22:28 < syncan> _sh0x: okay, got it
22:28 < syncan> thanks
22:28 < deoxxa> ningu: exaggerating is the worst thing in the world
22:29 < syncan> ningu: it really should be "here are the node docs, go read"
22:29 < deoxxa> syncan: how do you call an email
22:29 < ningu> google voice
22:29 < deoxxa> magic!
22:30 < syncan> RTFM is like the Silence from Doctor Who. It's everywhere, but when someone turns around they forget there is the internet and google
22:30 < syncan> "Let me call X and ask him how to open Finder again"
22:31 < syncan> deoxxa: I'm from the 1800s. "Call" is used in the gentleman/lday sense
22:31 < deoxxa> syncan: neat!
22:45 < syncan> _sh0x: making some test/dummy data
22:47 < MI6> joyent/node: Ben Noordhuis v0.10 * e8c0173 : doc: document linux pwrite() bug  On Linux, positional writes don't work  - http://git.io/1I3t_w
22:53 < syncan> ha
22:53 < syncan> _sh0x: what is your intended data flow?
22:53 < syncan> intercept, and at what point?
22:56 < Industrial> Is it possible to define an object (hierarchy) (say call it Slot or Region) that maps to the DOM that is to contain View/Templates without needing a DOM element for the Slot itself?
22:57 < DTrejo> faceleg|work: https://gist.github.com/DTrejo/5332930
22:57 < DTrejo> that worked great
22:57 < _sh0x> data flow, intercept? 
22:58 < syncan> the latest node commit that just passed us was for a bug in Linux, writing to serial ports
22:58 < syncan> always writes to EOF, not from specified pos
22:58 < _sh0x> ah ok i'm running 0.10.2 at the moment
22:58 < syncan> just happened to click the commit
23:00 < syncan> you're using the serialport module i assume?
23:00 < _sh0x> good to know. i'm just working on reading right now but i'll be doing some writing with it after this. 
23:00 < _sh0x> yes
23:00 < syncan> there's custom v8 compiled code, so i'm checking that out
23:00 < syncan> https://github.com/voodootikigod/node-serialport/blob/master/src/serialport.cpp
23:01 < hello_kitty> I'm trying ot write an object (it is supposed to be a string of javascript code, but I don't really knwo what it is) to a file. When I console.log the object I can see my desire javavscript code... when i fs.writeFile the object all i get is a file that says [Object object] -- how do i force it ot be a string? (or whatever it is that console.log does that makes it look like text)
23:01 < _sh0x> cool
23:04 < trippeh> w00t, 1,5GByte/s per node process now, over TCP, with a framing protocol, checking some bitflags, moving Buffer objects around
23:06 < _sh0x> awesome
23:10 < howdynihao> hello_kitty: its [Object object] because you're making it a string
23:11 < howdynihao> hello_kitty: do console.log(fsObject)
23:16 < syncan> _sh0x: https://github.com/codeboost/binaryparser
23:17 < _sh0x> checking
23:19 < syncan> more of just an FYI to watch
23:19 < _sh0x> yea this looks cool thanks
23:19 < syncan> hasn't been updated in a while, but it's an inline node-level version
23:20 < syncan> the bit and/xor was the easy part
23:21 < syncan> but also mundane, this is more fun
23:21 < syncan> i think i've got a fine link between in/out on the binary parser
23:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:38 < MI6> joyent/libuv: Ben Noordhuis master * 4a55522 : unix: remove superfluous check in stream.c - http://git.io/9KjwHg
23:45 < syncan> _sh0x: will commit this rough bit of code here in a few and send you the link
23:45 < syncan> then i'm gonna make a worker do it
23:46 < _sh0x> cool thanks. appreciate any help. trying to learn.
23:46 < syncan> no prob - me too with the serial port parsing stuff for sure 
23:47 < syncan> well, except in terminal we could probably pipe dd fin="/path/to/serialdevice" | grep | etc ..
23:47 < syncan> but that's no fun
23:50 < hello_kitty> howdynihao, the full code is b.bundle(function(opts, cb) { console.log(cb); fs.writeFile('bundle.js', cb, errorstuff); })
23:52 < hello_kitty> the return object of b.bundle(blah) is a 'readable stream' maybe that's where im messing it up
23:57 <@mbalho> hello_kitty: b.bundle(blah).pipe(fs.createWriteStream('bundle.js'))
23:58 < garthk> Morning!
23:58 < garthk> Any levelup/leveldown/leveldb people in here?
23:58 <@mbalho> yep
23:58 <@mbalho> also ##leveldb
23:59 < garthk> Aha! 
--- Log closed Mon Apr 08 00:00:16 2013
