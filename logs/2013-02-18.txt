--- Log opened Mon Feb 18 00:00:00 2013
--- Day changed Mon Feb 18 2013
00:00 < AAA_awright> I believe password goes after channel name
00:00 < Havvy> AAA_awright: That's only if you are joining a channel with a key. ;)
00:00 < Havvy> I'm talking about a password for using the join command.
00:00 < AAA_awright> A password to authenticate to the bot?
00:00 < Havvy> AAA_awright: That would be the next level in security, yes.
00:02 < Havvy> Anyways, I thought I had a security vulnerability in one of my programs, but it seems I don't.
00:02 < factormystic> hi all
00:02 < factormystic> question: is there a simple way to serve a static file on a dynamic route? (also using express)
00:03 < factormystic> not set a directory as service public files
00:05 < mscdex> factormystic: res.sendfile() ?
00:06 < mscdex> factormystic: http://expressjs.com/api.html#res.sendfile
00:07 < factormystic> well that looks promising
00:11 < factormystic> cool looks like that will work, thanks mscdex
00:14 < asdf12> anyone want to use a beta lib that validates and ensures object/data integrity across your app?
00:14 < asdf12> i need testers
00:22 < nkohari> what do you mean by data integrity?
00:44 <@Nexxy> magic robots
00:51 < nkohari> interesting. robots.
00:55 <@Nexxy> bloody fucking robots
00:56 < niggler> !!!
00:57 < sshaginyan> Nexxy: Come on sucker lick my battery 
00:57 < niggler> ha, Nexxy the last person to say fuck wasn't me
00:57 < niggler> damnit!
00:57 < niggler> nvm
00:57 <@Nexxy> see what I did there?
00:57 < niggler> entrapment
00:57 <@Nexxy> lol
00:57 < niggler> but your "bloody fucking robots" shouldn't be attributed to me in your count
00:58 <@Nexxy> oh I filter it
00:58 < niggler> although you have set a dangerous precedent
00:58 <@Nexxy> mikeal set the precedent 
00:58 <@Nexxy> I was just repeating it
00:58 < niggler> i follow the rush limbaugh tradition of quoting out of context and string it together
00:59 < niggler> so when i say "fuck ___" what im really doing is saying "fuck[sic] ... ____", quoting Nexxy
00:59 < harrisonm> I hate the homeless...ness problem that plagues our city
00:59 <@Nexxy> niggler, have another oxy
01:01 < Havvy> >> Exception
01:01 < purr> Havvy: ReferenceError: Exception is not defined
01:01 < Havvy> >> Error
01:01 < purr> Havvy: (function) Error
01:01 < crabtree> hi niggler
01:01 < niggler> the first time i saw the limbaugh letter, there was an interview with hillary clinton where he asked some ludicrous question and had her respond "yes" (quoting one of many speeches in which she said 'yes')
01:01 < crabtree> >>> new Error
01:01 < purr> crabtree: (object) {arguments: undefined, stack: (Getter/Setter), type: undefined}
01:01 < niggler> hey crabtree where's misterhat
01:01 < crabtree> >>> old Error
01:01 < purr> crabtree: SyntaxError: Unexpected identifier
01:02 < crabtree> niggler: he's gone
01:21 < groundwater> anyone use groc to generate documentation? 
01:22 < groundwater> http://underflow.ca/federation/lib/route.html
01:22 < groundwater> all my indentation is being removed
01:22 < groundwater> but when i generate it locally, it works
01:23 < chapel> >> 'test'
01:23 < purr> chapel: (string) 'test'
01:23 < chapel> >> + new Date
01:23 < purr> chapel: (number) 1361150443549
01:24 < chapel> >> process
01:24 < purr> chapel: ReferenceError: process is not defined
01:24 < chapel> >> this
01:24 < purr> chapel: (object) {}
01:24 < Havvy> >> this.prototype
01:24 < purr> Havvy: undefined
01:25 < Havvy> >> Object.getPrototypeOf(this)
01:25 < purr> Havvy: (object) {constructor: (function) Object}
01:26 < chapel> >> Object.getPrototypeOf(this).toString()
01:26 < purr> chapel: (string) '[object Object]'
01:26 < Havvy> RangeError: Maximum call stack size exceeded   :((
01:26 < chapel> >> JSON.stringify(Object.getPrototypeOf(this))
01:26 < purr> chapel: (string) '{}'
01:27 <@isaacbw> the bot can be PMd
01:27 < chapel> isaacbw: but what fun is that?
01:53 < elliottcable> Well, the Homebrew guy was unreceptive to this.
01:53 < elliottcable> Any NPM people who use Macs, here, want to comment?
01:53 < elliottcable> https://github.com/mxcl/homebrew/issues/17458#issuecomment-12970280
02:09 < niggler> elliottcable why are you installing npm with homebrew?
02:09 < niggler> *node/npm
02:11 < elliottcable> I install everything with Homebrew; it's the easiest way to manage and update my system.
02:11 < elliottcable> As many people do.
02:12 < cainus> hey all... does anyone have any suggestions for ensuring a stream is handled in the original order?  Obviously the events for it are fired in order, but what if you only want the second handler to start when the first has finished?  locks?  pause/resume?
02:40 < mscdex> cainus: that's how it already works, the event handlers are called in order and the javascript execution is synchronous and non-interruptible
02:40 < cainus> unless you do something asynch in the handler you write though, right?
02:42 < cainus> which is probably most of the time
02:43 < niggler> hate to ask github questions here, but how does github handle cherry-pick
02:48 < mscdex> cainus: not necessarily most of the time, but yes, async operations will not block so the next event handler will be executed right after
02:48 < mscdex> cainus: that's just how the built-in EventEmitter works
02:49 < mscdex> cainus: what use case are you finding this to be a problem?
02:49 < cainus> right... so I'm wondering how to preserve order if the target I write to doesn't naturally force sequential-ness
02:50 < cainus> queue service to queue service... the queue is apache kafka
02:50 < cainus> it's better for the stream to drop entirely than for the stream to go out of order
02:51 < asdf12> why is it in star trek when they put their shields up they can still move in and out (teleport) through the shield
02:51 < asdf12> but yet lasers and explosives can't penetrate it
02:52 < asdf12> mysteries of life ^
02:52 < niggler> blargh is there a way in the package.json to instruct npm to ignore html files?
02:52 < elliottcable> there's probably some episode that addresses that
02:52 < elliottcable> i.e. they try to teleport a bomb into another ship or something
02:52 < elliottcable> idk startrek. meh.
02:53 < finishingmove> i think you can teleport through if you know the frequency of the shields
02:53 < asdf12> oh right
02:53 < asdf12> i think thats it
02:56 < cainus> mscdex: I think just writing to a web service is example enough... Imagine if you don't want to POST request #2 until request #1 has a 200 OK.
02:56 < asdf12> it is related to node.js! i'm modelling my api kind of after that
02:59 < penzur> good morning!
03:00 < cainus> it's funny how making everything asynch-by-default makes doing stuff sequentially hard
03:01 <@Nexxy> cainus, it takes a shift in thinking
03:02 < asdf12> good morning to you too sir
03:03 < cainus> Nexxy: I'm talking about the case when sequential is the requirement though...  ie events need to be handled in the order they were fired
03:03 <@Nexxy> cainus, use an array?
03:05 < cainus> yeah that's what I'm doing actually... was just wondering if someone had a better idea.... like locks or some pause/resume magic or something
03:06 <@Nexxy> unless you're doing some funky things that most people aren't that wouldn't really be ncessary
03:06 <@Nexxy> but if it's just waiting for things like requests to come back
03:07 < cainus> yeah http requests for example
03:07 <@Nexxy> just write named functions and compose them
03:07 < cainus> imagine you need a 200 OK from job #1 before you handle job #2
03:07 < cloudbender> have job 1 fire job 2
03:08 < penzur> ps4 is coming
03:08 <@Nexxy> that's what the callbacks take care of for you
03:08 <@Nexxy> if job 1 has a callback
03:08 <@Nexxy> you give it to job 2
03:08 <@Nexxy> and let job 2 call it when it's done
03:08 < asdf12> yes ps4 is coming... in like 2 years... oh but its coming
03:09 < cainus> well we're talking about a lo-fi job queue now, and not simple event handlers... but you're right.. that's the way I'm doing it
03:09 < cloudbender> I am finding the same challenge, cainus
03:09 < penzur> what's the best way to hone my js ninjutsu?
03:09 < cloudbender> I'm redesigning my thinking around the idea that things won't always happen in order.
03:09 < asdf12> by not calling it that
03:10 < asdf12> rule#1 of being a ninja is to not let anyone know you are a ninja 
03:10 < cloudbender> Rule #2 of bening a ninja is being a ninja
03:10 < cainus> makes me wonder if there's a SequentialStream object out there somewhere that expects your eventhandler to take a callback and for that callback to fire before it will emit a new event
03:11 < cloudbender> cainus have a good look at the timers, events, and process.nextTick for some ideas.
03:11 < cainus> cloudbender: sometimes things need to be in order though
03:11 < asdf12> rule#3 of being a ninja is always being a ninja, no more walking, you have to climb walls
03:11 < cloudbender> They need to be done when other things are ready
03:12 <@Nexxy> I don't think there's really a good use for timers in control flow
03:12 <@Nexxy> magic numbers make things break
03:12 < cainus> a transaction log for instance needs to be in order.  you can't process that asynchronously
03:12 < cainus> or a db commit log
03:12 < cainus> etc,etc
03:12 < cloudbender> You can push them to an array then post them
03:12 < asdf12> the good thing about timers is, they are a reliable way to unreliably get a race condition some time or another
03:13 < asdf12> BE POSTIVE NEXXY sheesh
03:13 < cainus> cloudbender, yeah that's what I'm doing... just wondering if someone has a better idea
03:13 < cloudbender> It's a question of form I think.
03:13 < cainus> I could write something to abstract it I guess
03:13 <@Nexxy> asdf12, I do see a good use for timers in control flow when you're looking to test for unreliable IO throughput!
03:13 < asdf12> there you go
03:14 < asdf12> the world is sunny again
03:14 < cainus> ChaosMonkeyStream
03:14 <@Nexxy> \o/
03:15 < asdf12> penzur, though semi-seriously there's a book for that, being a ninja and javascript
03:16 <@Nexxy> javascript rockstar ninja cowboy 
03:16 <@Nexxy> ... robot
03:16 <@Nexxy> 9000
03:16 < finishingmove> you mean
03:16 < finishingmove> iJavascriptRockstarNinjaCowboyRobot:9000
03:16 <@Nexxy> yeah that's the one
03:17 < Havvy> I'm seeing a comment on a web script `isNaN("") is true WTF` but it is false in Node. What is isNaN("") is ECMA3?
03:17 < cainus> somebody sent me a pull request for my queue client that emits events instead of forcing the user to poll... it's so much more node-ish, but then it makes you just through more hoops to keep things sequential... :\
03:17 < penzur> ECMA sounds like ACHMED
03:17 < cainus>  /s/just/jump
03:17 < finishingmove> ECMA the dead terrorist?
03:17 < finishingmove> huehue
03:17 < penzur> i kill u!
03:18 < finishingmove> i call you back
03:18 < finishingmove> ...maybe
03:21 < Havvy> penzur: ECMA is the organization that keeps the standards for JS.
03:22 < gkatsev> Fun Fact: ECMA used to stand for European Computer Manufacturer's Association. Today, ECMA is just a word.
03:22 < penzur> is Cluster any good?
03:23 < RLa> any idea how much ECMA charges for standards?
03:23 < gkatsev> $10
03:23 < gkatsev> actually, no idea
03:23 < RLa> do they ripoff as ISO does?
03:25 < Havvy> RLa: The JS standards can be obtained for free. I don't know about the rest of them.
03:27 < RLa> then that might not be so bad :)
03:35 < asdf12> designing an api is hard
03:35 < asdf12> you gotta come up with names and figure out use cases
03:35 < asdf12> but the names man.. thats the hardest part
03:37 < Havvy> Names are always the hard part.
03:38 < mcw> Anyone know of a node package that styles [insert language] into html. I've founds a few for markdown but none that branch out.
03:39 < gkatsev> you'll have to be more specific
03:39 < niggler> is there a way to test if the npmignore is working
03:40 < asdf12> what i do is
03:41 < asdf12> npm pack .
03:41 < mcw> I need to turn js and md into html on the fly
03:41 < Steven___> good afternoon :) all.
03:42 < Steven___> I have a question. 
03:42 < substack> mcw: into html for syntax hilighting and rendering of markdown?
03:42 < niggler> asdf12: that worked
03:42 < Steven___> Is there some awesome websites made of 'nodeJS' ?
03:42 < mcw> yea.
03:42 < substack> mcw: https://npmjs.org/package/marked
03:42 < niggler> substack why is browserling more awesome than browserstack
03:42 < substack> is one of those
03:43 < substack> niggler: dunno, try them both and see for yourself
03:45 < mcw> substack: thanks, but this just md right? I've found a bunch of md to html tools, but none that take raw javascript (or other languages) and display them well.
03:46 < gkatsev> you need to 'fence' the code
03:46 < elliottcable> substack ⑊ I saw you've added iDevices. No announcement yet? Are they functional?
03:46 < elliottcable> mcw ⑊ Pygments.
03:46 < gkatsev> either via a 4-space indent, or via ``` if it's github-flavored-markdown compatible
03:47 < elliottcable> mcw ⑊ Never used it, but a cursory Google results in https://github.com/pksunkara/pygments.js
03:47 < cloudbender> an example of an 'array like' ...
03:47 < elliottcable> (I mean, I've used pygments, but never that Node library for it. Looks fine, though.)
03:47 < cloudbender> er, array-like
03:47 < mcw> cloudbender: sweet. reading docs right now
03:48 < elliottcable> Pygments is excellent, but the install process may make you balk.
03:48 < mscdex> cainus: there's modules like the 'async' that can help you do what you want
03:48 <@Nexxy> lol
03:48 <@Nexxy> "the async"
03:49 < elliottcable> Nexxy ⑊ I miss you.
03:49 <@Nexxy> elliottcable, I bet :)
03:49 < cainus> mscdex: async deals with streams?
03:49 < elliottcable> SO MUCH
03:49 < elliottcable> How's life?
03:49 < elliottcable> er, are you two-hash or one-hash?
03:49 <@Nexxy> fantastic!
03:49 <@Nexxy> 2
03:50 <@Nexxy> I'm "unofficial"
03:51 < substack> elliottcable: I just need to update browser-badge for ios
03:51 < mcw> elliottcable: as long as its easier than writing the code over again, I'm ok with a sucky install process
03:51 < gkatsev> substack: how did you get ios working? That's awesome.
03:51 < gluxon> God, it sucks going from Node.js back to Java. It hurts so much....
03:51 < substack> gkatsev: co-located mac mini
03:51 < cloudbender> cainus, you load how in other languages you (for instance) open and load a large file ?
03:52  * gluxon came in here just to say that.
03:52 < gluxon> :'(
03:52 < cloudbender> oh never mind that
03:52 < gkatsev> substack: and actual devices plugged in?
03:53 < cainus> not sure where you guys are going with this :)  I'm talking about sequentially processing data events from a  stream... I'm currently just dumping them in an array and having a worker go over the array sequentially... was just wondering if someone had a better suggestion
03:54 < substack> gkatsev: just using the emulator right now
03:54 < cainus> I don't have any problem with the node 101 stuff of forcing serial processing
03:54 < cloudbender> cainus I miss-typed my last comment entirely
03:54 < cainus> ahh okay :)
03:54 < gkatsev> substack: still pretty cool. Plans on getting actual devices? Because that would be *killer*
03:55 < cloudbender> As an example, and forgive me if I use an obvious one ...
03:55 < cloudbender> whe you read a file using code, and you are using the async version of the reader
03:55 < niggler> gkatsev what does testswarm do
03:55 < cloudbender> there is no way the 'read' will be fininshe in time for your next code statemnt.
03:56 < cloudbender> you have to write for that
03:56 < cainus> cloudbender: you talking to me?
03:56 < cloudbender> yeah
03:56 < cainus> heh I understand how asynchronous processing works...
03:57 < cloudbender> ok
03:57 < gkatsev> niggler: isn't TestSwarm kind of manual? Unless I'm missing half of what it does.
03:57 < cainus> the problem is *maintaining order* of a stream... I want to make sure I don't handle an event until the last one has been handled
03:58 < elliottcable> yeah, actual devices would be great, substack
03:58 < niggler> gkatsev i thought browsers poll the server for work
03:58 < niggler> and if there's somethng it runs within an iframe
03:58 < elliottcable> in fact, I've got some old broken devices of various types I'd be willing to donate
03:58 < elliottcable> all work fine, but have broken screens.
03:58 < elliottcable> (@ substack)
03:58 < gkatsev> niggler: yes, but intially you need to join it by opening a webpage.
03:58 < cainus> if it's a file stream you get that for free, because files are written sequentially and everything queues up nicely.  
03:58 < niggler> you need to join it once
03:58 < elliottcable> perfect for sitting plugged into a colo'd Mac Mini, jailbreaking, and running websites on.
03:58 < niggler> its not something you repeatedly need to do
03:59 < cloudbender> So what are you doing while the file streams ?
03:59 < niggler> how do you colo a mac mini?  is there a standard 1U chassis?
03:59 < cainus> but if it's a web service for instance, where you need to ensure a 200 OK  before you write again, and you care about *maintaining order*, there's some work to do
03:59 < cloudbender> right
04:00 < cloudbender> You are aware you can push and pop fromeither end of an array ?
04:00 < cainus> ha yeah... that's what I do... I use an array as an event queue and have a single worker go over it
04:00 < cloudbender> Have the server load with push and have the worker stream out with shift
04:00 < cainus> was just wondering if someone had a better idea... or had played with pause/resume for this purpose
04:02 < cainus> on('data', function(data){ stream.pause(); /* do stuff with data */ stream.resume(); } 
04:02 < cainus> seems a bit hacky
04:05 < elliottcable> substack ⑊ could you go ahead and add iOS devices to ci.testling, even though you haven't done icons for them?
04:05 < elliottcable> or is there output of this somewhere else I can watch?
04:08 < mscdex> cainus: it doesn't deal with streams, but it can help you with async workflow
04:09 < substack> elliottcable: they're already live
04:09 < substack> just the badges will be messed up
04:09 < elliottcable> substack ⑊ hm, I didn't get anything shown
04:10 < elliottcable> lemme try again in a moment
04:10 < substack> "iphone/6.0" and "ipad/6.0" are the browser names
04:11 < cainus> mscdex: sure... I don't really have that problem though.  I just shift from the array after each event is processed
04:16 < sshaginyan> Hey guys I can't do exports = function() {}?
04:16 < elliottcable> Anybody know of an automatic-generating, webhook-based, docco documentation generating site?
04:16 < elliottcable> something like readthedocs.org for docco/JavaScript instead of sphinx/Python
04:17 < skabbes> sshaginyan: module.exports = function() {}
04:18 < skabbes> ^^ but I don't think that's the "node way"
04:21 < dc``> Is anyone using dreamhost to host nginx, node & expressjs? I'm having trouble setting it up to listen for my express app on port 3000
04:23 < mscdex> sshaginyan: you can't do that because 'exports' is a local variable
04:23 < mscdex> sshaginyan: ''exports' simply points to 'module.exports'
04:24 < mscdex> sshaginyan: so if you want to replace the default object, you have to do like skabbes suggested
04:26 < sshaginyan> k
04:27 < sshaginyan> mscdex: If I overwrite module.exports will it still be cached?
04:27 < sshaginyan> after the first load
04:28 < sshaginyan> mscdex: Do you work at joyent?
04:28 < skabbes> sshaginyan: ya, it will be.  but just make sure you don't have any circular dependencies
04:28 < sshaginyan> k
04:30 < shesek> <skabbes> ^^ but I don't think that's the "node way"
04:30 < shesek> exporting functions as the main module is quite common in nodejs
04:30 < shesek> lots of popular packages do that
04:32 < shesek> like underscore, request, express, optimist, connect, etc
04:33 < sshaginyan> shesek: Your absolutely correct. I can confirm this because I wrote underscore, request, express, optimist, connect, etc
04:33 < skabbes> i see what you're saying, it just seems like that was an api nice-ness that they're exposing.  the node modules system seems to work better with exposing the other way
04:33 < skabbes> no matter either way
04:34 < shesek> well, sometimes it makes sense to export a function as the main "entry point" to the module, and sometimes it doesn't
04:34 < sshaginyan> shesek: Can you give me the situations?
04:34 < shesek> when it does fit, I find it it quite nice to work with
04:35 < mscdex> sshaginyan: no i don't work at joyent :-)
04:35 < cloudbender> messager.bind(null, "hello", "goodbye")     sets messager's 'this' to null ?
04:35 < sshaginyan> Who does from this channel? 
04:35 < sshaginyan> I work like a block away from joyent. Just wanted to visit :)
04:35 < mscdex> sshaginyan: isaacs and others
04:35 < shesek> cloudbender, not quite. returns a function that'll invoke messager with `this` set to `null` when you call it
04:36 < shesek> it doesn't effect messager itself
04:36 < cloudbender> so messager would be non-thisable
04:36 < cloudbender> lol
04:37 < cloudbender> internally
04:37 < mscdex> sshaginyan: they might still have office hours or whatever, i dunno
04:37 < sshaginyan> mscdex: really there is such a thing?
04:37 < mscdex> they used to
04:37 < cloudbender> OK I'll try it
04:40 < cloudbender> Can someone confirm 'test1' will make to the loop and be callef from there, rather than being invloked before it is passed ?
04:40 < cloudbender> process.nextTick(test1.bind(null,'hello'));
04:40 < cloudbender> *invoked
04:42 < skabbes> yep, sure does
04:42 < cloudbender> shweet
04:42 < cloudbender> kinda wierd but it works
04:42 < skabbes> easy way to tell is to put a console.error before `process.nextTick` and one inside `test1`
04:43 < cloudbender> Or try it without bind ?
04:44 < cloudbender> ok then I have two fundemental options ......
04:44 < shesek> cloudbender, why are you doing that?
04:44 < skabbes> just for debugging execution order in general
04:45 < shesek> there are some good reasons to use nextTick, but many wrong reasons
04:45 < shesek> what are you trying to achieve?
04:45 < cloudbender> I use nextTick as a simple way to test callbacks
04:45 < cloudbender> just for workups
04:45 < cloudbender> so back to my point
04:45 < cloudbender> I have two options
04:45 < shesek> ah, well, I guess writing tests is one of them good reasons :)
04:46 < cloudbender> I can ... function(){test1('hello')}       or I can    test1.bind(null,'Hello);
04:47 < shesek> they're basically the same
04:47 < shesek> the only difference is that you'll get less meaningful stack traces with bind()
04:47 < cloudbender> hmmmmm tracews good point
04:47 < cloudbender> one of those perfection kills things
04:48 < cloudbender> Since I'm generating two functions anyway I might as well go ahead and frame the callback
04:49 < cloudbender> I seeeee
04:49 < shesek> hmm... actually, it seems like Chrome does handle it well
04:49 < shesek> the stack traces, that is
04:50 < shesek> it would happen with a user-defined bind() function, tho
04:50 < shesek> I'd expect it to show the native bind function as the one originating those calls, but it seems like they thought of that and show the real call
04:51 <@Nexxy> what will they think of next?!
04:51 < vikash> hi Everyone, I am planning a chat application and made one. But now I want to have its separate instances on everypapge… so each page acts as a diff channel which will be dynamic so how to do this?
04:52 < cloudbender> A seperate connection for each page
04:52 < shesek> vikash, using web sockets?
04:52 < xdomox> okay so wen sockets right
04:53 < vikash> shesek, yes.. should I post the codes in github?
04:54 < xdomox> im trying to keep a list of online clients and their user names and w/e anyway so when the page changes they quickly disconnect and reconnect, which updates the array and w/e, but the array quickly gets messed up
04:54 < xdomox> or they don
04:54 < xdomox> don't* reconnect properly or something
04:55 < xdomox> can someone have a look. I've been hitting my head against the wall for hours
04:55 < asdf12> link again
04:56 < elliottcable> Stop doing that, you'll get brain damage.
04:57 < vikash_> shesek, or send you as  a zip :)
04:57 < xdomox> http://pastebin.com/SBbCStmc
04:58 < ShodoPan> I'm trying to npm publish and am getting permission problems, it's suggesting I run as root. Is this... expected?
04:58 < ShodoPan> http://pastie.org/private/nahdxbwrtyiqi3bemwaqq
04:59 < asdf12> no
04:59 < vikash_> shesek, so what do you say?
05:00 < asdf12> ShodoPan you probably need to sudo chown -R that dir
05:01 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
05:01 < ShodoPan> asdf12: checked that, it's youngian:users which is normal permissions for my system
05:02 < ShodoPan> on ~/tmp, that is
05:03 < asdf12> check deep into that path
05:04 < ShodoPan> the ownership looks right all the way down. at some point the permissions become -rw-r--r--
05:04 < someprimetime_> `anyone using connect-flash with redirects?
05:04 < ShodoPan> ...but I would think that's okay, since it should be running as owner
05:05 < asdf12> yea should if you're 'youngian' 
05:05 < xdomox> so anyone know what my issue is?
05:05 < ShodoPan> I am
05:06 < asdf12> then idk, but you could make a package yourself and publish the package instead of relying on publish to do it
05:06 < vikash> hi Everyone, I am planning a chat application and made one. But now I want to have its separate instances on everypapge… so each page acts as a diff channel which will be dynamic so how to do this?
05:07 < ShodoPan> Yeah, not a bad idea, I'll try that
05:07 < asdf12> ShodoPan: something like cd /to/src; npm pack; npm publish the-tarball.tgz
05:07 < elliottcable> magic. http://ell.io/iFTPJ
05:12 < ShodoPan> Strange, getting the same error from npm pack
05:12 < ShodoPan> BTW, I did try with TMPDIR=/tmp just in case it was something weird about my local tmp folder, same result
05:13 < vikash> I am thinking app.get('*', function(req, res){ res.sendfile(__dirname + '/index.html'); }); but this will seeve induex.html every time. so I want to somehow change index.html so separate pages are being served even if they don't exist
05:13 < vikash> and start chat channels on them
05:17 < asdf12> vikash: you mean like function(req, res) { res.render('index', { chat: req.query.chat } ) } ? then users make new chats with /?chat=mychatname ?
05:18 < Whitez-> Zombie/Mocha/Backbone/Node question (Nobody in #zombie.js): I am running a text script, but the DOM is not updating when navigating to a hash. Any suggestions?
05:20 < vikash> asdf12, this can work :) but being a beginner, I was thinking of something like, say a req comes to localhost/asd and a channel is started at add similaryl
05:20 < vikash> if requests come to localhost/qwerty a separate channel is instantiated at qwerty
05:22 < asdf12> vikash: you do app.get(':chat', function(req, res) { res.render('index', { chat: req.params.chat }) })
05:22 < vikash> asdf12, any explanations for these so that I can understand them clearly :)
05:23 < asdf12> you need a template engine to render index
05:24 < vikash> I did localhost:8080/qwerty and I received Cannot GET /qwerty
05:24 < asdf12> <script>var chatroom = {{chat}} socket io stuff............. use chatroom var </script> 
05:24 < vikash> asdf12, ^ and whats the :
05:25 < vikash> asdf12, ok
05:25 < asdf12> you could also do it purely from javascript too though, but that way is just 2 line changes
05:25 < asdf12> client side javascript i mean
05:26 < vikash> asdf12, can you please show it once, if you don't mind :)
05:26 < asdf12> vikash: you just read the uri 
05:27 < vikash> yup!
05:28 < asdf12> vikash: var chatroom = window.location.pathname.replace(/^\//, '')
05:29 < asdf12> 1 liner, oh heh, i guess this way is simpler, but you get more control doing it from server end? i guess
05:30 < vikash> and what bat var chatroom = {{chat}} ?
05:30 < malealone> rkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr 
05:30 < malealone> kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv 
05:30 < malealone> apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr 
05:30 < malealone> uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi 
05:30 < malealone> k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s 
05:30 < malealone> db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv 
05:30 < malealone> apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv 
05:30 < malealone> apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv 
05:30 < malealone> apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr 
05:30 < malealone> uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi 
05:30 < malealone> k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiewr uoi k sdbhvr kfv apoiewr uoi s dbh vrkfv apobhvrkfv apoiewr uoi k s db hvrkfv apoiewr uoi k  s dbhvrkfv apoiewr uoi k   s dbhvrkfv apoiew
05:32 < asdf12> vikash: i was showing you 2 possible ways to do it, one via backend, one completely front end
05:32 < vikash> yaa.. cool :)
05:32 < vikash> thanks
05:32 < vikash> Now I should try either of them
05:32 < vikash> :)
05:32 < asdf12> if you do it with window.location way, you don't need to change anything in express
05:35  * AAA_awright cough
05:37 < SomeoneWeird> isaacs, konobi mbalho Nexxy piscisaureus_ ^
05:37 -!- mode/#Node.js [+b *!*dertuloun@220.82.34.219] by piscisaureus_
05:37 -!- malealone was kicked from #Node.js by piscisaureus_ [See You - Kick sponsored by www.trillian.im]
05:37 <@piscisaureus_> ok
05:38 <@piscisaureus_> thanks SomeoneWeird
05:40 < vikash> asdf12, ok.. I am facing some issue still cannot get :(
05:42 < asdf12> what issue
05:43 < vikash> I added app.get(':chat', function(req, res) {  res.render('/index.html', { chat: req.params.chat }) }); in app.'s and var chatroom = window.location.pathname.replace(/^\//, '') inside index.html.. Can you think where did I go wrong. The source is here https://gist.github.com/ivikash/4975309
05:43 < vikash> I am sure I have made some mistakes. And thank-you for helping :)
05:43 < SomeoneWeird> app.get('/:chat'
05:43 < SomeoneWeird> tr
05:43 < SomeoneWeird> try
05:43 < SomeoneWeird> that
05:43 < SomeoneWeird> gosh I can't type
05:44 < asdf12> vikash: you're trying to do both ways
05:44 < asdf12> just pick one
05:45 < vikash> ok.. so first I try with app.get one and comment out the var chatroom...
05:45 < asdf12> vikash: just change your routes back to before
05:45 < asdf12> and it should work
05:46 < asdf12> apt.get('*' ....... res.sendfile() ) etc. the way you had it before
05:47 < vikash> ok
05:48 < asdf12> yesss, now use chatroom accordingly clientside
05:49 < vikash> Cool. things are working. But I am looking for something diff. Now what is happening all channels are single and connected to index.html but I want each of them to be a separate channel
05:50 < asdf12> vikash: i feel like you are asking me to write it all for you
05:50 < sshaginyan> Anyone know of a nice error checking library where I can set accepted values /regex and expected keys of an object?
05:50 < vikash> asdf12, not exactly.. pointers will do :)
05:51 < AAA_awright> sshaginyan: Elaborate more
05:51 < asdf12> sshaginyan https://github.com/lovebear/vaa.js
05:51 < vikash> asdf12, its just I am complete beginner to Node.js so don't have all concepts that clear!
05:52 < sshaginyan> AAA_awright: So I get an object from a server and I want to check wether the keys have the correct name and values are accepted by some sort of criteria. Either exact match or a regex. Btw I have a AAA card will I get a discount?
05:52 < asdf12> vikash: you need to take a step back more then
05:53 < asdf12> sshaginyan, the library i linked you will do that, its on npm, npm install vaa
05:53 < AAA_awright> sshaginyan: I'll also need a credit card number and social security ID
05:53 < vikash> asdf12, I am ready :) buckle-up. Just some pointers...
05:53 < AAA_awright> sshaginyan: Try https://github.com/tdegrunt/jsonschema
05:54 < AAA_awright> That's soon to be an RFC
05:55 < sshaginyan> AAA_awright: Here is my credit card  ^4[0-9]{12}(?:[0-9]{3})?$ and social is ^\d{3}-\d{2}-\d{4}$
05:55 < sshaginyan> k
05:55 < AAA_awright> Looks legit
05:56 < finishingmove> thanks!
05:56 < SomeoneWeird> lol
05:56 < finishingmove> :D
05:57 <@Nexxy> sshaginyan, that doesn't validate a credit card ;<
05:57 < niggler> you need a luhn check sshaginyan
05:57 <@Nexxy> you have to use the luhn algo
05:57 < asdf12> vikash: you need to re-write bits of your gist
05:57 < sshaginyan> Oh well I tried, but I can verify that it works for the credit cards on the moon
05:57 < elliottcable> Here's mine:
05:57 < niggler> sshaginyan http://www.getcreditcardnumbers.com/
05:58 < elliottcable> 5427-3527-4188-9801, exp 02/15, sec 033
05:58 < elliottcable> Elliott Cable, ZIP 28403
05:58 <@Nexxy> invalid
05:58 < sshaginyan> invalid
05:58 < asdf12> vikash: its set up to have a static room list, so you need to rework it to auto enter 'chatroom' on connect
05:58 < elliottcable> MasterCard.
05:59 < sshaginyan> elliottcable: …. I put some money in there and I'm sorry
05:59 < vikash> ok lemme try to do 
05:59 < vikash> asdf12, thanks :)
05:59 < vikash> asdf12, Once I do.. I will get back in sometime
05:59 < asdf12> vikash: switch room on clientside needs to work differently too
05:59 < vikash> ok...
05:59 < vikash> Thanks
06:00 < vikash> asdf12, lemme rewrite everything.as a separate src
06:01 < elliottcable> http://www.darkcoding.net/credit-card/amusing-feedback/
06:01 < xdomox> is there a way to tell socket io to wait 10 seconds before disconnecting a user
06:01 < xdomox> like
06:01 < sshaginyan> xdomox: Have you tried asking it?
06:02 < xdomox> not politely
06:02 < sshaginyan> xdomox: Have you died turning it off and then on?
06:02 < sshaginyan> tried*
06:02 < asdf12> elliotcable: weren't you really into django at one point?
06:02 < xdomox> for example, when a user changes page the online users list shifts because the dc and reconnect
06:03 <@Nexxy> elliottcable, I just bought myself a gift
06:03 <@Nexxy> it's from you
06:03 <@Nexxy> thanks :D
06:03 < elliottcable> Nexxy ⑊ <3
06:03 < sshaginyan> xdomox: Have you looked at keep-alive?
06:04 <@Nexxy> <3 :(
06:04 < sshaginyan> Then maybe count the 10 seconds and disconnect the user
06:05 < xdomox> sshaginyan: the connection stays alive if the user stays on the same page
06:07 < sshaginyan> xdomox: http://stackoverflow.com/questions/12651466/how-to-set-the-http-keep-alive-timeout-in-a-nodejs-server
06:07 < finishingmove> django, a slave-turned-bounty hunter or python framework? /philosoraptor
06:08 < asdf12> or musician
06:09 < Eigen> asdf12: you still use qwerty?
06:09 < asdf12> yes i use a qwerty keyboard?
06:09 <@Nexxy> you mean you haven't switched to workman?
06:09 < Eigen> whats workman?
06:09 < Eigen> I felt like a n00b when i was on a qwerty
06:10 < Eigen> my fingers even complained to me
06:10 < finishingmove> you mean there exists an alternative to qwerty?
06:10 < finishingmove> :o
06:10 < Eigen> yes
06:10 < Eigen> you don't use dvorak?
06:10 < niggler> lol
06:10 < Eigen> much better
06:10 < niggler> fuck dvorak
06:10 < Eigen> nonono
06:10 <@Nexxy> lol
06:10 < asdf12> why did you ask me out of all people Eigen?
06:10 < Eigen> because
06:10 < finishingmove> is it the one where the letters spiral out alphabetically?
06:10 < niggler> im waiting for a keyboard layout in which the f u c and k keys are lined up on the home row
06:10 < Eigen> asdf is under your right hand
06:10 < asdf12> ah i see
06:11 < niggler> preferably under my left hand
06:11 < Eigen> oh
06:11 < Eigen> under your left hand yes
06:11 < Eigen> sorry
06:11 < finishingmove> would be good to have a double width keyboard
06:11 < finishingmove> so you can switch hands
06:12 < Eigen> i think there must be a better alternative to a keyboard
06:12 < Eigen> that is faster
06:12 <@Nexxy> but first, burritos
06:12 < Eigen> we should at least use eye tracking instead of a mouse
06:12 < Eigen> i hate mice
06:12 < Eigen> so ineffecient and slow
06:12 < asdf12> all keyboards you come in contact with 99% of the time are qwerty, so it'll be weird to learn a different layout
06:12 < niggler> have you tried a space mouse eigen
06:13 < finishingmove> jokes aside, i have seen such eye-tracking technology demoed somewhere recently
06:13 < finishingmove> though when you think about it, it would probably be pretty tiring for the eyes after a while
06:13 < Eigen> true
06:13 < Eigen> imagine if you could think and move the mouse
06:14 < Eigen> not those shitty devices that measure your brainwaves 
06:14 < groundwater> i do think and move the mouse
06:14 <@Nexxy> clearly the answer is EEG HID 
06:14 < Eigen> but actually if you could visualize it
06:14 <@Nexxy> like emotiv
06:14 < finishingmove> sometimes i move the mouse without thinking
06:14 < Havvy> Imagine if you thought of a problem and then the computer solved it.
06:14 < finishingmove> so i guess mouse is superior
06:14 < finishingmove> :D
06:14 < Eigen> like it would be like thinking when you move your arm
06:14 < Eigen> it would be a part of your body
06:14 < Eigen> Havvy: that would be scary
06:15 < Eigen> like what happens if it did that all the time
06:15 < Eigen> it would do crazy shit
06:15 < Lorentz> if you get drunk and code, that's what happens
06:15 < finishingmove> this is off-topic but
06:16 <@Nexxy> (famous last words)
06:16 < finishingmove> i had a Sega console and the solution to a puzzle in a ninja turtle game came to me in a dream
06:16 < Eigen> Lorentz: just generally. I personally think of problems all the time.
06:16 < finishingmove> i hope this is not too off-topic for #node.js
06:16 < Lorentz> I do remember coding in my sleep
06:16 < finishingmove> well, that's my story anyway
06:16 < asdf12> finishingmove, oh yea that happened to me like never
06:17 < finishingmove> i guess it's kind of an edge case
06:17 <@Nexxy> finishingmove, that sounds relatively on-topic compared to a lot of discussion that goes on here
06:17 < Lorentz> like actually writing code, and running it, debugging it
06:17 < finishingmove> lol
06:17 < Havvy> It could be worse. It could be more >> evals.
06:17 < Lorentz> clearly I've been doing this too long and need to get out of the industry
06:18 <@Nexxy> or 
06:18 <@Nexxy> you need to get
06:18 <@Nexxy> further in
06:18 < groundwater> until you don't even see the code anymore
06:18 < Lorentz> further in to the exit and then go home
06:18 < Lorentz> like now
06:18 <@Nexxy> like when neo starts seeing the matrix for what it really is
06:18 < sshaginyan> asdf12: How do I install vaa?
06:18 < sshaginyan> npm install vaa?
06:19 < sshaginyan> doesn't work
06:20 < groundwater> sshaginyan: seems to work for me
06:20 < sshaginyan> that was weird is wasn't working now it is
06:20 < cloudbender> When I write letters I have to force myself not to end my sentences with simcolons;
06:20 < finishingmove> hah
06:20 < finishingmove> i don't have that problem since i skype a lot
06:21 < finishingmove> no punctuation ever
06:21 < finishingmove> not even brackets
06:21 < finishingmove> :D
06:21 < asdf12> time to go semi colon less javascript
06:21 < cloudbender> I dumped skye when it became an MS product.
06:21 < cloudbender> *skype
06:21 < mscdex> asdf12: how dare you
06:21 < finishingmove> it's still ok
06:21 < cloudbender> for now
06:21 < finishingmove> but i'm glad they're terminating messenger
06:21 < asdf12> mscdex how dare you dont!
06:21 < groundwater> i only started using semi colons in javascript after i saw legitimate cases where it parsed incorrectly
06:21 < cloudbender> glad++
06:22 < groundwater> the "it's slower" reason is stupid
06:22 < finishingmove> as for semicolons, i am the type who tends to overuse them rather than the opposite
06:22 < niggler> cloudbender why do you postincrement
06:22 < cloudbender> I do both
06:22 < cloudbender> It depends on the algorithm
06:23 < Havvy> Anybody who thinks using semicolons is slower *really* needs to think about what language they are using.
06:23 < asdf12> http://mislav.uniqpath.com/2010/05/semicolons/
06:23 < asdf12> ^ groundwater
06:24 < niggler> wait wait that article is idiotic
06:24 < finishingmove> http://benalman.com/news/2013/01/advice-javascript-semicolon-haters/
06:24 < niggler> thee recommendation is to *start* lines with semicolons?
06:25 < groundwater> asdf12: there are cases where it doesn't parse correctly, i think
06:25 < groundwater> rare cases
06:25 < asdf12> yes there are
06:25 < asdf12> the bottom of taht article explains when
06:25 < elliottcable> lol.
06:25 < finishingmove> so semicolons are not optional but rather optionally typed
06:25 <@Nexxy> ;ilol'd
06:25 < elliottcable> Read inimino's article, and stop arguing about it.
06:25 <@Nexxy> ;(function() { let's all just start writing everything like this })();
06:26 < elliottcable> Your options are simple, and nobody sane and useful gives a shit which you do:
06:26 < harrisonm> ;_;
06:26 < niggler> Nexxy where's the upside down semicolon
06:26 < elliottcable> - *prefix* “dangerous” lines with a semicolon
06:26 < cloudbender> I personally prefer the })() form
06:26 < elliottcable> - end *every* line with a semicolon
06:26 < asdf12> Nexxy: you misread the article
06:26 <@Nexxy> asdf12, I didn't read it at all
06:26 < elliottcable> - never write semicolons, and avoid “dangerous” lines entirely
06:27 < elliottcable> Nexxy ⑊ also, that's unnecessary. Use a unary operator for iife's.
06:27 < elliottcable> ~function(){
06:27 < elliottcable>    // whee
06:27 < elliottcable> }()
06:27 <@Nexxy> oh yes let's be even more cryptic
06:27 <@Nexxy> wait
06:27 < niggler> wait why is that even necessary elliottcable
06:27 <@Nexxy> https://gist.github.com/maxogden/3401560
06:27 < elliottcable> can't immediately invoke, if it's parsed as a declaration
06:27 < elliottcable> unary operator forces it to be parsed as an expression
06:27 < cloudbender> ~function(){  }() is a valid form ?
06:28 < gkatsev> Nexxy: lol, was just going to link that one.
06:28 < elliottcable> cloudbender ⑊ yep, you're welcome.
06:28 < gkatsev> ben_alman's post at the end is the best.
06:28 < harrisonm> Nexxy: thank you for that
06:28 <@Nexxy> harrisonm, thank mbalho 
06:28 < elliottcable> gkatsev ⑊ end of what?
06:28 < gkatsev> elliottcable: max ogden's gist
06:29 < gkatsev> elliottcable: that Nexxy posted
06:29 < elliottcable> Oh.
06:29 < elliottcable> I'm always so confused when people use somebody's real name, when they go by a handle online.
06:29 < elliottcable> also, don't you mean “that one Emily posted?”
06:30 < elliottcable> Just sayin'.
06:30 < gkatsev> sorry, cowboy's
06:30 < gkatsev> elliottcable: lol
06:30 <@Nexxy> elliottcable, no one calls me Emily lol
06:30 < elliottcable> I do. ;)
06:30 <@Nexxy> you're... different.
06:30 < cloudbender> ok so ~function zap(thing){ .... }(), does it have a reference 'zap' within the body ?
06:30 < elliottcable> actually, if I recall correctly, I called you “nexy” out loud, once, the first time I met you
06:30 < gkatsev> I'm using the IRC usernames
06:30 < elliottcable> cloudbender ⑊ yes.
06:30 < Havvy> In the semicolons are optional link...he questions why to use braces even for single line expressions...
06:30 <@Nexxy> elliottcable, yes lol
06:30 < cloudbender> awesome
06:30 < elliottcable> cloudbender ⑊ and it doesn't expose “zap” outside that body, either.
06:31 < elliottcable> cloudbender ⑊ Read the specification regarding function expressions vs. function declarations.
06:31 < asdf12> Havvy: you do?
06:31 < Havvy> asdf12: Yes.
06:31 < asdf12> most people don't
06:31 < elliottcable> Nexxy ⑊ also, you're ... different, too. ;)
06:31 < elliottcable> can we be “...different-buddies”? :D
06:31 < Havvy> It gives a structural guard against people changing your code incorrectly.
06:31 <@Nexxy> mostly
06:31 <@Nexxy> I'm a little the same
06:31 < gkatsev> elliottcable: you're much more different than Nexxy is.
06:31  * elliottcable gasps
06:31 < finishingmove> i do in javascript but not in php
06:32 < elliottcable> I'm hurt. >:
06:32  * elliottcable goes to hide in a corner
06:32 < finishingmove> cuz i am just generally freaked out by random things going wrong in js
06:32 < Havvy> Also makes the weight of the branch more obvious.
06:32 < cloudbender> I knowhow iife's work, i had just never seen the ~function()... form before now.
06:32  * Havvy has not seen a place to use ~function() ever.
06:32 < asdf12> Havvy: yea but part of his point is, it's up to you, should someone force you not to or to do it??
06:32 < Havvy> Maybe it's just that my anonymous functions just always return values.
06:33 < harrisonm> Only time I've left braces off one-liner conditionals is for default parameter-type things
06:33 < Havvy> asdf12: Depends. Who owns the project I'm working on?
06:33 < elliottcable> the ~func is my own.
06:33 < elliottcable> I don't exactly go around telling other devs what to do, so I doubt it's spread.
06:33 < asdf12> Havvy: yes well, thats of course obvious you should stick to the owners style
06:33 < gkatsev> void function () {}() is another popular way
06:33 < elliottcable> !func works just as well, by the way; both are unary-only operator. I just think the bitnot is prettier.
06:34 < cloudbender> I use the empty braces on conditionals, as a matter of form.  Keeps me out of the weeds
06:34 < SomeoneWeird> (function(){})()
06:34 < Havvy> (function () { ... })() for me.
06:34 < cloudbender> if(!(true)) {} else {do some stuff};
06:34 < SomeoneWeird> lol
06:34 < SomeoneWeird> no
06:35 < elliottcable> ... lol, what
06:35 < elliottcable> I just had a “Nexxy reaction.”
06:35 < SomeoneWeird> if(!true) { console.log("SHIT END OF THE WORLD") }
06:35 <@Nexxy> elliottcable, that's a thing?
06:35 < Havvy> if (!true) { a.b.c(); }
06:35 < elliottcable> I like to put offensive or customer-system-breaking code into impossible conditionals all over my code.
06:35 < elliottcable> Just to keep me on my toes.
06:36 < Havvy> >> if (!true) { a.b.c(); }
06:36 < purr> Havvy: undefined
06:36 < elliottcable> if (browser === 'Firefox -12e13') { exec('sudo rm -rf /*') }
06:36 < SomeoneWeird> Nexxy, you're very popular
06:36 < finishingmove> elliottcable, that's the spirit
06:37 < Havvy> elliottcable: s/Firefox -12e13/Internet Explorer/
06:37 < elliottcable> if (user.last_name === user.age) { console.log("Well, your name is a number. You're a fucking faggot.") }
06:37 < asdf12> whoa.
06:37 < SomeoneWeird> s/Internet Explorer/[(Internet Explorer)|(.*firefox.*)]/
06:37 -!- elliottcable was kicked from #Node.js by Nexxy [elliottcable]
06:37 < finishingmove> what if it's "Missy 18" ?
06:37 < SomeoneWeird> >.<
06:37 < elliottcable> wat
06:37 < SomeoneWeird> bad elliottcable 
06:37 < elliottcable> since when is profanity not allowed?
06:38 < elliottcable> D:
06:38 <@Nexxy> profanity is fine
06:38 < asdf12> this chat room is increasingly more becoming rated R
06:38 < elliottcable> “increasingly.”
06:38 < elliottcable> You obviously haven't been here long. ;)
06:38 < asdf12> not really
06:38 < asdf12> i've seen Nexxy call someone out for using the term 'gay' to mean lame, but i guess 'fucking faggot' is acceptable?
06:38 <@Nexxy> asdf12, did you see the part where I kicked him?
06:39 <@Nexxy> it's not OK
06:39 < niggler> well it could also be interpreted as a bundle of sticks being used for sexual activity
06:39 < groundwater> niggler: way to diffuse the tension
06:40 <@Nexxy> which would be almost as out of scope
06:40 < niggler> that begs the question though: is it referring to a long or a short faggot
06:40 < elliottcable> a long ton of long faggots?
06:40 < elliottcable> that's a lotta sticks.
06:40 < finishingmove> i don't smoke so can we change the topic?
06:40 < niggler> there are actually two units that claim the name faggot: the short faggot is 3'long, 2'circumference
06:41 <@Nexxy> 3, 2, 1... zip it
06:41 < niggler> its 1:40 AM and im waiting for a long computation to run :/
06:41 <@Nexxy> www.zipit.com
06:41 < finishingmove> www.winrar.com
06:41 < Havvy> >> [3, 2, 1].zip("it")
06:41 < purr> Havvy: TypeError: Object 3,2,1 has no method 'zip'
06:41 < SomeoneWeird> -.-
06:42 < cloudbender> Throw me a fricken bone here ......
06:42 < groundwater> so on a tangent, did you know Chrome now supports multiple concurrent profiles. kind of like having multiple incognito modes
06:42 < cloudbender> Zihvago was on tonight
06:42 < Havvy> Oh? Is that what Chrome has been doing?
06:42 < elliottcable> I keep confusing cloudbender and cloudhead.
06:43 < cloudbender> own your confusion elliot
06:43 < harrisonm> Feel like Chrome and Firefox have been in a dev tool arms race lately
06:43 < elliottcable> harrisonm ⑊ all to *our* betterment.
06:43 < Nuck> elliottcable: You have a knack for confusing people.
06:44 < elliottcable> Look! It's Nucksy!
06:44 < Nuck> No no, now you're mixing up Nuck and Nexxy.
06:44  * elliottcable snaps his fingers along to Cake, and tries to horribly break the CoffeeScript parser
06:44 < niggler> wouldnt it be nuxxy?
06:44 < Nuck> niggler: Nah, that's the other way around.  More her than I.
06:45  * Nexxy considers developing an "Acceptable Use Policy" for her nickname
06:45 <@Nexxy> lol, afk
06:45 < niggler> lol
06:45 < Nuck> lol purr
06:45 < elliottcable> -purr
06:45  * IWishIWasNexxy 
06:45  * niggler pets purr
06:45 < elliottcable> ↑ what he said
06:46 < Nuck> For once I'm not the root cause of distraction in #Node.js — I'm gonna bask in this moment.
06:52 < finishingmove> silence ensues
06:56 < harrisonm> Yes, "Silence Ensues" would be a good name for a finishing move
06:58 < elliottcable> harrisonm ⑊ well played.
07:01 < finishingmove> :-)
07:01 < finishingmove> also, 'semicolon'
07:02 <@Nexxy> la puntuacion de la muerte.
07:04 < niggler> holy mother of fuck anyone using an old version of excel?
07:05 < groundwater> what's excel?
07:06 <@Nexxy> X97L97
07:07 < niggler> wow, spent an hour to find out that there's a bug in excel :/
07:07 < niggler> take a wild guess: what does 5.1*12850 equal
07:07 < sshaginyan> asdf12: In vaa why would a callback be necessary?
07:08 < harrisonm> >> 5.1*12850
07:08 < arf> harrisonm: (number) 65534.99999999999
07:08 < niggler> excel 2007 has a problem with that particular calculation.  It reports 100000 instead of that
07:08 < SomeoneWeird> wat
07:08 < SomeoneWeird> lol
07:09 < niggler> blargh i was convinced i f'd something up in javascript, but this is all excel's fault
07:10 < harrisonm> niggler: so it's rounding to the limit on an Int16 and getting really confused?
07:11 < niggler> i think its related to an issue regarding how numbers are stored in excel
07:11 < niggler> the biff format has a quirk where it reads 30 bits and implicitly assumes the rest are zeroes
07:11 < asdf12> sshaginyan: mainly if you write your own validation using _post, ie: you can introduce async code, otherwise the lib itself is sync
07:12 < niggler> and even though reading the file gives you the correct result, it appears that excel actually was reading the last few bits
07:12 < sshaginyan> asdf12: So this is no good for node.js
07:12 < harrisonm> huh, weird
07:12 < asdf12> sshaginyan: what do you mean? 
07:12 < sshaginyan> I mean it's going to be blocking 
07:13 < asdf12> it won't
07:13 < asdf12> thats why you pass a callback
07:13 < sshaginyan> asdf12: Does it create another thread?
07:13 < asdf12> no, why does it need to?
07:14 < groundwater> sshaginyan: he means, if you include async methods it won't break
07:14 < sshaginyan> I never understood this. So your code is running async so that means another thread is created does it not?
07:15 < groundwater> sshaginyan: async does not mean another thread
07:18 < sshaginyan> groundwater: So a single thread can handle many code spaces at the same time I guess? I don't know if "code spaces" is the right word
07:18 < sshaginyan> Is it like context switching at a very high level?
07:19 < groundwater> sshaginyan: async code is just code scheduled to run at a later time
07:19 < groundwater> sshaginyan: but it all happens in one thread, one at a time
07:19 < sshaginyan> groundwater: But how much later?
07:20 < groundwater> sshaginyan: that depends on the code, nextTick happens right after the current block
07:20 < sshaginyan> just before a function looses scope?
07:20 < asdf12> sshaginyan: you normally don't worry about this stuff, thats why you use call backs
07:20 < asdf12> thats with anything in node
07:21 < sshaginyan> asdf12: I just want to know if my close is blocking or not
07:21 < sshaginyan> for example I know that forEach blocks
07:22 < sshaginyan> Shouldn't everything be like a stream? 
07:22 < sshaginyan> As soon as you get data operate on it?
07:24 < groundwater> sshaginyan: nothing blocks in node, well nothing practical
07:24 < sshaginyan> groundwater: I'm assuming callbacks are also queued?
07:24 < groundwater> sshaginyan: it depends, forEach is called immediately
07:24 < groundwater> sshaginyan: the function passed to forEach i mean
07:25 < sshaginyan> So that means it does or doesn't block?
07:25 < groundwater> you're using the term block incorrectly, nothing blocks
07:25 < sshaginyan> please explain
07:25 < groundwater> block means your thread waits for some other thread
07:26 < sshaginyan> So nothing blocks 
07:26 < sshaginyan> in node
07:26 < groundwater> readFileSync blocks
07:26 < groundwater> but those methods are rare
07:26 < sshaginyan> Why would one need to use them?
07:26 < asdf12> >> console.log(1); console.log(2); setTimeout(function() {console.log(3)}, 1000); console.log(4)
07:26 < arf> asdf12: ReferenceError: setTimeout is not defined; Console: 1, 2
07:26 < ncmn> any method that has the name Sync in it is going to block, fyi, afaik
07:26 < groundwater> sshaginyan: convenience / ignorance 
07:26 < asdf12> sshaginyan: that code will output 1,2,4,3
07:27 < sshaginyan> yes I know
07:27 < groundwater> sshaginyan: sync means the code will execute in the same call stack
07:27 < sshaginyan> ohhhhh
07:27 < groundwater> sshaginyan: async means the code will execute in a different call stack, possibly the next
07:28 < groundwater> so if you A -> B -> C and C calls D synchronously, the stack looks like A -> B -> C -> D
07:28 < groundwater> if C calls D asynchronously, when D executes the stack will just be D
07:28 < groundwater> i accidentally some words
07:29 < asdf12> that should explain some things to you? normally code executes in sequential order, top to bottom
07:29 < sshaginyan> So there are kinda like two call stacks one for regular function calls and one for async function calls. 
07:31 < sshaginyan> Now I can make my regular functions calls depend on a async function call and vise versa?
07:32 < groundwater> just one stack, powered by the event loop
07:32 < groundwater> each tick of the loop starts a new stack
07:32 < groundwater> the next stack doesn't start until the previous exist
07:32 < groundwater> exits*
07:33 < groundwater> if you call an async method, it gets scheduled for one of the next loops
07:35 < sshaginyan> Lets say your code is executing and D is async A->B->C->D->E->F->A (our event loop) tick_1 A, tick_2 B, tick_3 C, tick_4 D (will exec in later loop) tick_5 E, tick_6 F, tick_7 D?
07:37 < sshaginyan> So a callback means execute at a later loop iteration
07:37 < groundwater> an async callback
07:37 < groundwater> callbacks can be sync
07:37 < sshaginyan> how?
07:38 < groundwater> usually if it calls process.nextTick
07:39 < groundwater> or calls a C++ function that operates outside the main event loop
07:39 < sshaginyan> groundwater: Say I have a function where I have inside a function call and callback to that function. How would I return the callbacks parameter as a return for the outer function?
07:40 < sshaginyan> without having the outer function have a callback itself.
07:40 < groundwater> sshaginyan: https://gist.github.com/anonymous/4975688
07:41 < sshaginyan> yes got that
07:41 < groundwater> sshaginyan: i've gotta peace out, let it stew for a while
07:41 < sshaginyan> one more question
07:42 < groundwater> quickly
07:42 < sshaginyan> http://hastebin.com/goxusehanu.js
07:42 < sshaginyan> groundwater: How would you do this?
07:43 < sshaginyan> return msg for test
07:43 < someprimetime_> has anyone made their own session flash messages (without using express or connect-flash)?
07:43 < groundwater> sshaginyan: test() doesn't return anything
07:43 < sshaginyan> I know
07:43 < sshaginyan> But I want it to return msg
07:43 < sshaginyan> what I pass a function to test?
07:44 < groundwater> well, if a.b is async, you need to use a callback
07:44 < groundwater> test(callback)
07:44 < sshaginyan> if it isn't
07:44 < sshaginyan> ?
07:44 < mhr> does anyone know a channel discussing appfog?  I'm having trouble updating my app's source
07:44 < sshaginyan> ohhh
07:44 < sshaginyan> h
07:44 < sshaginyan> then I would have it at the end
07:44 < sshaginyan> right?
07:44 < groundwater> callback(msg) instead of return msg
07:44 < groundwater> if that's what you'er thinking
07:44 < sshaginyan> no if it's sync 
07:45 < groundwater> so, there are two axis here
07:45 < groundwater> async vs async
07:45 < groundwater> callback vs return
07:45 < groundwater> callback works with BOTH async and sync
07:45 < sshaginyan> then I can just return it normally 
07:45 < groundwater> return ONLY works with sync
07:45 < sshaginyan> k
07:54 < mhr> g2g, I'll be on tomorrow...
07:55 < chmac> Managed to get node installed last night, now looking to play about. Any recommended "getting started with node" guides? I'm particularly interested in putting some simple data in mongo.db...
07:56 < Whitez> Has anyone here used zombie.js? Having a problem with Backbone, and no-one in #zombie-js
07:56 < ncmn> nice, i was just going to ask if anyone could recommend a nosql system for node
07:57 < SomeoneWeird> mongo
07:57 < SomeoneWeird> redis
08:06 < ncmn> for a webcrawler that is network io heavy and only needs to disk write a few string values of 0.2 to 4KB in size per page, and hash them with data from just one other page, do you think mongo or redis would be better? or something else?
08:09 < ncmn> or probably about the same?
08:09 < ncmn> and if so, does one have a better toolset for node, etc
08:09 < Gambit-> ncmn, that's a really good question to ask at a not-middle-of-night-on-a-weekend time.
08:10 < Gambit-> you're asking a performance question, though, and those are hard to answer without lots more detail.
08:11 < asdf12> id say mongodb
08:12 < ncmn> ha, that's true, just a minute ago i thought 'wow, it's pretty late right now, this might not be the best time to be able to ask good questions'
08:12 < Gambit-> and what you write it into depends a lot on what you're going to do with it on the other end too.
08:20 < asdf12> names are very important
08:20 < asdf12> mostly because its almost irreversible
08:22 < ncmn> really, i will just be taking a few string elements from page A with GET,  submitting info related to A via POSTS on page B and also taking a few string elements from page B, and hashing them together serverside with a multidimensional array. that's for starters. after that, i'll be using the hash to POST update page B with changes on page A after another node script notices a change in the element on A
08:24 < asdf12> well
08:24 < asdf12> this sounds like a case of it doesnt matter? i mean does it really demand performance?
08:25 < ncmn> so basically scrape info from A, post it to B, and hash A's URI with B's URI, then reload A until it notices a change at which point it updates B.
08:25 < ncmn> there will be thousands of these things though, as many as i can fit
08:25 < ncmn> so A[1...1000] and B[1...1000]
08:26 < ncmn> and a lot of GET requests to A after the initial hashtable is made
08:27 < ncmn> like every 15 minutes or less (as frequently as I can get away with)
08:29 < asdf12> yea but, its like hash save, notice change query
08:30 < asdf12> thats not very demanding whatever you use redis or mongo
08:42 < [AD]Turbo> hi there
08:43 < asdf12> hey
08:50 < SomeoneWeird> anyone know how I can download a SSL cert?
08:52 < skabbes> you want a self signed cert?
08:52 < SomeoneWeird> nah, I wanna download a websites cert
08:52 < SomeoneWeird> (from node)
08:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
08:53 < skabbes> like their public key?
08:53 < SomeoneWeird> hm, there's getPeerCertificate()
08:53 < SomeoneWeird> no, their entire SSL certificate
08:55 < skabbes> any reason you want to do it with node?  i know you can do `openssl s_client -connect google.com:443`
08:56 < SomeoneWeird> yeah I know I can do that
09:01 < skabbes> hmm, have you browsed through the tls.js code for node at all?
09:01 < skabbes> might be some hints there
09:02 < SomeoneWeird> yeah, I'm looking atm
09:02 < skabbes> https://github.com/joyent/node/blob/master/lib/tls.js#L511
09:02 < skabbes> perhaps pair.ssl?
09:04 < asdf12> groundwater: you still around?
09:39 < SomeoneWeird> fwiw
09:39 < SomeoneWeird> http://stackoverflow.com/a/14633136/1982847
09:39 < SomeoneWeird> works
09:52 < Doublon> hello
09:54 < Doublon> I'm reading this https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager and I have a question about nodejs-dev
09:55 < SomeoneWeird> ?
09:55 < Doublon> what is it supposed to do exactly?
09:55 < Doublon> I mean
09:56 < Doublon> the doc says 'If you want to compile Node C++ modules' install node-dev
09:56 <@Nexxy> Doublon, http://packages.ubuntu.com/precise/nodejs-dev
09:57 < Doublon> the 'issue' I have is that on the prod server 'npm install' seems to download the needed modules and put them into node_modules
09:57 <@Nexxy> Doublon, working as intended
09:57 < Doublon> whereas on my dev machine 'npm_install' compiles a lot a stuff
09:58 < SomeoneWeird> npm install will compile things if they need to be compiled (native modules)
09:58 < Doublon> I don't know if that's related to nodejs-dev
09:59 < SomeoneWeird> nodejs-dev is headers for native compilations afaik
09:59 < Doublon> hm ok so if nothing get compiled on the prod machine it could be thanks to the cache perhaps?
10:04 < Ov3rTaf> is there a good timer library to use with node.js ?
10:08 <@Nexxy> Ov3rTaf, setTimeout and setInterval?
10:18 < pixelbrother> i've never used an IRC before, but would like to suggest adding a 1px solid white border to the #wrap element in the npm website (npmjs.org)
10:19 < pixelbrother> border-top*
10:19 < SomeoneWeird> isaacs, ^
10:20 <@Nexxy> there's a chat on the npm site?!
10:20 < pixelbrother> oh yeah?
10:21 < prawnsalad> i see no chat
10:22 < SomeoneWeird> Nexxy, wut
10:23 <@Nexxy> SomeoneWeird, what?
10:23 < SomeoneWeird> there's no chat
10:23 < SomeoneWeird> lol
10:23 <@Nexxy> that's kind of what I was saying
10:23 < SomeoneWeird> good
10:23 < SomeoneWeird> >.>
10:23  * SomeoneWeird runs
10:24 < lihnuz> ther is a link to an irc-webchat
10:24 <@Nexxy> yeah, the freenode web client
10:25 < prawnsalad> npm should link to an irc client thats actually stored within npm itself
10:25 < prawnsalad> like.. http://kiwiirc.com/client/irc.freenode.net/node.js
10:27 < pixelbrother> i sent isaacs an email :P he'll probably spam trash it
10:27 < SomeoneWeird> open an issue on github
10:27 < pixelbrother> ok, can i do this without cloning everything?=
10:28 < SomeoneWeird> yes
10:29 < SomeoneWeird> pixelbrother, https://github.com/isaacs/npm-www/issues/new
10:29 < pixelbrother> ok, found it! thanks :)
10:33 < pixelbrother> bye guys! thanks SomeoneWeird
10:43 < _DomY-Dom> Problem with running my node program on Mac: http://bpaste.net/show/4NxEnoPwmf3XiHkuXODV/
10:44 < SomeoneWeird> _DomY-Dom, it just means you're calling .replace on an empty variable
10:54 < carpii> whats the recommended way to run a node server in production? Should I have an angel process which restarts it in the event of failure? Can I daemonsie node or do I just background it?
10:55 <@Nexxy> carpii, upstart + monit seem to be a popular combination
10:56 < carpii> thanks, ill check them out
10:56 < mscdex> why monit if you have upstart?
10:56 <@Nexxy> lol mscdex I'm not even going to answer that
10:56 < chakrit> upstart just checks the pid
10:57 < chakrit> monit you can do http request etc.
10:57 < chakrit> see if the process is really "alive"
10:57 <@Nexxy> ... because chakrit is going to answer it for me
10:58 < SomeoneWeird> lol
10:58 < chakrit> so you'd have upstart to run node and monit to check if the frontpage still responds 200
10:58 < SomeoneWeird> mhm
10:58 <@Nexxy> or other things
10:59 < chakrit> yeah
10:59 < carpii> could you not just use monit to start it in the first place?
10:59 < chakrit> dunno. i think upstart is a bit more sophisticated
10:59 < chakrit> i.e. you can setuid chdir setenv and stuff
10:59 < carpii> oki, thanks
10:59 < chakrit> monit just does monitoring i think
11:06 < mscdex> you can do some monitoring with upstart
11:12 < toni`> ya all
11:13 < toni`> eeeeeeeee
11:14 < Andy-> Hey guys, I'm using Node to connect to Twitter's stream. Is there a safe way of making sure my node instance doesn't get throttled by Twitter's stream. It currently gets to about 3.5k and then dies.
11:14 < Andy-> 3.5k tweets
11:15 < Andy-> but each tweet is wrapped in a load of other data, so it's not 3.5k * 150 chars
11:17 < amurdaca> toni`
11:23 < Ov3rTaf> can my server.js for node.js / socket.io stores a lot of infos ? is it ok if i push connecting users in a array ? will it "out of memory" or such ?
11:25 < carpii> i think theres a default limit of 1G on 64 bit machines, it can be raised but
11:25 < carpii> if you have 1G of memory arrays, then trying to search through them in real time is not going to work so well
11:25 < carpii> if youre talking about 200k im sure itll be fine
11:26 < Ov3rTaf> ty :)
11:28 < Ov3rTaf> is there a way to console.log() memory used my all my memory stored js server ?
11:28 < amurdaca> here i am, from emacs with love
11:29 < carpii> process.memoryUsage()
11:29 < carpii> returns an object
11:30 < gildean> console.log(process.memoryUsage());
11:32 < Ov3rTaf> works great :) ty
11:42 < carpii> socket.io has an option to destroy non socket.io websocket upgrade requests. Anyone know how its detecting this? cutoms http header perhaps? 
11:43 < gildean> carpii: i'd guess it has something to do with the handshake
11:44 < carpii> yeah, im inspecting it in chrome but cant really se anything proprietary 
11:44 < gildean> but that's just a guess
11:56 < Doublon> I'm struggling to understand how npm works
11:56 < Doublon> on one server 'npm install express' takes like 30sec
11:57 < Doublon> on another one (same config, npm version) it tries to download and compile a lot of stuff
11:57 < Andy-> if it's only one server, I'd wager it's the server causing the delay
11:57 < Doublon> and I get a lot of failures
11:57 < SomeoneWeird> the first one probably has everything needed for node-gyp
11:57 < SomeoneWeird> when you first run it, it downloads more dependencies
11:58 < Doublon> ok but it's not the first time I run it even on the second
11:58 < Doublon> one*
12:00 < carpii> i debugged socket.io, it seems it detects whether its a socket.io websocket upgrade simply by checking the reuest uri is hitting /socket.io 
12:00 < carpii> not as useful as i hoped :)
12:05 < Andy-> How so carpii?
12:05 < Doublon> could it be that npm fails to get some modules on a very slow connection?
12:06 < carpii> Andy, i was just hoping maybe there was a custom http header sent from socket.io.client
12:06 <@Nexxy> carpii, io.transports[socket.id].name
12:07 < carpii> thanks
12:07 <@Nexxy> :)
12:09 < SomeoneWeird> Doublon, possibly
12:10 < xdomox> seriously fuck pants
12:10 < xdomox> i wish my legs just had pockets 
12:11 < xdomox> or that my ballsack had a pouch or something
12:11 < Andy-> it does
12:11 < Andy-> or rather, it is.
12:12 <@Nexxy> genitals are rather out of scope for #Node.js 
12:12 < carpii> im wearing my fuck pants
12:12 < xdomox> also what editor do you guys like for node.js?
12:12 <@Nexxy> perhaps try #sexorgans
12:12 < Andy-> kind of a grey area Nexxy?
12:12 <@Nexxy> Andy-, a little bit
12:15 < xdomox> are there any plugins for vs2012 that better it for node.js dev?
12:15 < carpii> if i create a module and expose the constructor via the exports, could I then just use require('mymodule') in place of a callback function ?
12:15 <@Nexxy> no
12:16 <@Nexxy> you want to keep your requires in the setup portions of your scripts
12:16 < carpii> id do var mymodule = require('mymodule')   and then pass mymodule.handler ?
12:16 <@Nexxy> (technically you can but it's not a good idea)
12:16 < carpii> yeah its not something i really wanted to do, im just trying to understand it better
12:16 <@Nexxy> yeah
12:16 < carpii> ok thanks
12:16 <@Nexxy> it's functionally equivalent once the require is complete
12:17 <@Nexxy> it's that synchronous IO that can be an issue
12:17 <@Nexxy> so load early & it is cached, not a problem
12:17 < carpii> you mean if require('mymodule') was somehow being called multiple times, its going to read from disk each time?
12:18 <@Nexxy> no
12:18 <@Nexxy> but the first time it does
12:18 <@Nexxy> it will block until it's finished
12:18 < carpii> ok, and during startup its not an issue because theres no clients, right?
12:18 <@Nexxy> exactly
12:18 < carpii> ok cool :)
12:18 <@Nexxy> ^-^
12:20 < jan____> I hooked connect.static into http-proxy as per the docs, it all works fine until there’s a request for a nonexistent file, I expect a 404, but I get a never closing http request.
12:23 < mmalecki> jan____: hi, do you happen to have a test?
12:24 < jan____> mmalecki: I have only my code at this point, I could try and make a minimal test case.
12:25 < jan____> mmalecki: does not return a 404: https://github.com/hoodiehq/hoodie-app/blob/master/lib/hoodie-server.js#L69 — server setup: https://github.com/hoodiehq/hoodie-app/blob/master/lib/hoodie-app.js#L95
12:25 < jan____> (yes, the code is a tad ugly :)
12:25 < mmalecki> jan____: that's helpful, I'll check it out
12:37 < devnul> l
12:39 < carpii> nexxy, you know how I should require all my modules at the top?  What about in cases where I have several functions which require('request') ?   If I have them all share the same instance of request, arent they going to trample over each other?
12:39 <@Nexxy> they shouldn't do any trampling
12:40 < carpii> but request has internal data, and its now in global scope rather than local to each user i thought?
12:40 <@Nexxy> is request your module? or do you mean mikeal's request module?
12:40 < carpii> no its not custom, its the commonly knownone
12:40 <@Nexxy> it should be fine
12:41 <@Nexxy> unless you're doing things to the request module itself
12:41 < carpii> is require('request') analogous to an 'include' or to a 'new Request()' ?
12:42 <@Nexxy> it's an include
12:42 <@Nexxy> you're just saying, "make this variable equal whatever you evaluate from this file"
12:42 < foobar321> What's a good JSON -> XML converter for node ?
12:42 < carpii> ah i see, i thought because it returns an object it was both incuding and instantiating one 
12:42 <@Nexxy> not unless the module specifically chooses to
12:42 <@Nexxy> which isn't the case w/ request (that I'm aware)
12:42 < carpii> oki, thanks
12:43 <@Nexxy> carpii, https://github.com/mikeal/request/blob/master/main.js#L1104-L1120
12:43 <@Nexxy> that should help
12:44 <@Nexxy> you will get a new instance of the Request object every time you call request(...);
12:44 < carpii> ah nice, so the request constructor is like a factory which returns a new one
12:44 < carpii> awesome :)
12:44 <@Nexxy> yeah!
12:44 < carpii> thanks for the help, its starting to gel a bit now :)
12:45 <@Nexxy> good job :D
12:46 < jetienne> suppose i want to access a mysql, what is the recommended npm ?
12:46 < mmalecki> Nexxy: y u not go to thaijs?
12:46 <@Nexxy> what
12:47 <@Nexxy> no one invited me!
12:47 <@Nexxy> jetienne, node-mysql
12:47 < jan____> wat?
12:47 < jan____> JasonSmith: ^^
12:47 < ben_alman> finishingmove: "<finishingmove>	 so semicolons are not optional but rather optionally typed"
12:47 <@Nexxy> mmalecki, also I seem to remember it being super expensive
12:47 < ben_alman> that's exactly right http://benalman.com/news/2012/04/semicolons-required-in-javascript/
12:47 < ben_alman> heh
12:47 < ben_alman> i love the way you put it
12:48 <@Nexxy> BEN ALMAN IS A COWBOY
12:48 <@Nexxy> woops, caps
12:48 < ben_alman> heh
12:48 <@Nexxy> keyboard cowboy?
12:48 < ben_alman> yee haw, i guess
12:48 <@Nexxy> samurai?
12:49 < ben_alman> tired
12:49 < ben_alman> so tired
12:49 <@Nexxy> there's a chemical for that
12:49 < finishingmove> ben_alman: well i kind of got that understanding reading your thoughts on the issue. so we're both in agreement with you. that's good for us!
12:49 < SomeoneWeird> damn caffine
12:49 <@Nexxy> something that ends with 'ine'
12:49 < ben_alman> finishingmove: i love it when, like 6 months later, i still agree with myself
12:49 <@mbalho> im uhn new zullund
12:49 <@Nexxy> mbalho, kiwis!
12:50 <@mbalho> yar!
12:50 <@mbalho> dominictarr be here as well
12:50 <@Nexxy> o snap
12:50 <@Nexxy> http://www.youtube.com/watch?feature=player_detailpage&v=U7S8XzvNJs8#t=21s
12:50 <@Nexxy> mbalho, did you get my PM a few days ago?
12:50 <@mbalho> probably not
12:50 <@mbalho> was in the woodz
12:51 <@Nexxy> I am in need of your beard powers
12:51 <@mbalho> .. and my axe!
12:52 <@Nexxy> tell me where the disk is!
12:52 <@mbalho> cool
12:53 < jan____> mmalecki: I think it is because connect internally sets up a 404 handler somewhere, and http-proxy doesn’t
12:54 <@mbalho> jan____: hey dominic made a sweet FTI for leveldb on a plane to NZ just now
12:54 < gildean> Nexxy: about to hack the gibson?
12:54 <@mbalho> jan____: are you cookin up crazy db magics in node now?
12:54 <@Nexxy> gildean, forever and always
12:54 <@mbalho> jan____: i was hanging with volker last week in SF and he said hi
12:54 < jan____> mbalho: ohai
12:56 < jan____> mbalho: rvagg took on the challenge: https://github.com/rvagg/node-leveljs
12:57 <@mbalho> jan____: oh yea i met rvagg at campjs this weekend
12:57 <@mbalho> jan____: he was hacking on c++
12:57 <@mbalho> super a+ standup fellow
12:59 < jan____> mmalecki: minmal test case: https://gist.github.com/janl/af5c9e8a23a67695e39e
13:00 < mmalecki> jan____: that's possible. will check at the airport, gotta pack now
13:00 < jan____> hit localhost:9000 and you get "index.html
13:00 < mmalecki> oh, word, thanks man
13:00 < jan____> "
13:00 < jan____> mmalecki: cool, no hirries,t hanks
13:00 < jan____> *hurries
13:00 <@mbalho> mmalecki: where ya goin?
13:00 < jan____> mmalecki: needs some setup, added acomment to the gist
13:01 < mmalecki> mbalho: thaijs!
13:02 <@mbalho> oh woot
13:03 < mmalecki> mbalho: yeah, super excited
13:04 < mmalecki> a bit scared too
13:04 <@mbalho> mmalecki: haha
13:04 <@Nexxy> just make sure you carry enough cash to pay bribes and you will be fine
13:05 < mmalecki> Nexxy: yup, that's on my check list
13:05 <@Nexxy> good lad
13:05 < carpii> i just got back form vietnam, crazy place
13:10 < jeturcotte> So, I'm trying to read through a series of csv files that essentially are a relational database of sorts… one relies upon another replies upon another… and will be translating them into mongodb; Normally I could perl up one time procedural importer for this kind of thing, but since this is a node environment, I'm stuck using node for it… I'm using 'csv' and have found that I need to literally start a new 
13:10 < jeturcotte> csv.from()… within the on.('end', function(){}); of the last one in order to ensure that the data from the first is available to compliment or compare against the data from the second...
13:11 < jeturcotte> my question is, is that fundamentally a misunderstanding of how to use the csv module of node?  I mean, if I keep going on like that I'll have four, maybe five levels of nested csv.from() calls to these varying inter-dependent files.
13:12 < mmalecki> related question, does anyone have FotoVerite's phone number?
13:12 < carpii> jet, you could define your functions seperately, and then pass those as the callback instead of nesting them all
13:13 < mmalecki> he's the first to check into our airbnb and I have no idea how to get there
13:13 < jeturcotte> so… one func encapsulates a csv read of file x, another for the read of y, etc… 
13:13 < jeturcotte> (sorry, whoever so is)
13:13 <@Nexxy> mmalecki, you mean you don't use voxer?
13:14 < mmalecki> Nexxy: I believe this is what I actually mean
13:14 < carpii> yes, and then if youre crossreferencing them, youd call readfile2 from within the end of readfile1, and just pass readfile1 as the callback 
13:14 < jeturcotte> the immediate issue I ran into was the async nature of node; if I read them separately, the data for one was not yet returned before it started with another
13:14  * mmalecki gets on Voxer
13:14 < carpii> im probably not explaining it very well, let me see if i can find the link someone pasted
13:15 < jeturcotte> (yes, I am nodenoob, but that's one major point in doing this.)
13:15 < carpii> http://callbackhell.com/
13:16 < jeturcotte> =)
13:17 < jeturcotte> stashed in my reading list, carpli, thanks
13:17 < carpii> np
13:26 <@mbalho> dominictarr: http://www.youtube.com/watch?v=ZqmHqrHr8xg
13:28 < devnul> i don't really understand how to use mocha, i've followed the example test with array but didn't get nothin lol
13:29 < devnul> is there some example that show how to test simple function? (or even express app, that is what i want to achive)
13:36 < armetiz> hi there
13:37 < armetiz> I've created a package around 6month ago.. 
13:37 < armetiz> I've just fixed a bug, and I don't rembere how to update npmjs.org.. I have push a new package.json with a new version information on github; create a new tag
13:37 < armetiz> do I have to do something on npmjs ?
13:37 <@Nexxy> `npm publish`
13:38 < armetiz> ok
13:39 < armetiz> Nexxy, thanks, npm login & npm publish is ok.
13:39 <@Nexxy> armetiz, :)
13:39 < armetiz> I guess it take few times to npmjs.org to be updated ?
13:39 <@Nexxy> it may take several minutes, yes
13:39 < armetiz> ok thanks
13:40 < armetiz> I'm using composer from PHP. A dependency manager, just need to create a new tag on git and it's ok
13:48 < OliverJAsh> So how do people use their Node.js apps in production? I've read you can use Nginx to proxy to a Node server (such as Express/Connect). There's also haibu by Nodejitsu. What's the general consensus out there?
13:49 <@Nexxy> I just use node + upstart
13:53 < typesthings> Was having connection trouble - so I'll repeat. Apologies if I'm saying it twice. I'm trying to write a NodeJS native addon and when I require my module, I get "Error: no error" thrown. Anyone seen that before?
13:53 < hemanth_> tree -> json anyone?
13:53 < carpii> i guess a nginx proxy is useful if youre running a node httpd on a site which already has an http on 80
13:54 < hemanth_> tree as in dir structure 
13:54 < nkohari> we use nginx as a frontend over multiple node processes and direct traffic to them based on routes
13:55 < carpii> ah yeah, load balancing too, good call
13:55 < nkohari> well the processes are actually different apps
13:55 < nkohari> but they can also be clustered themselves
14:02 < typesthings> Ok if no one has seen "Error: no error", any C++ experts here that can offer advice on how to debug it?
14:03 < carpii> from what?
14:03 < typesthings> from a native addon that I'm building
14:03 < typesthings> require('./build/Release/mything') => "Error: no error"
14:04 < carpii> id imagine the return value youre providing is wrong, maybe 0 or null?
14:06 < typesthings> I'm doing NODE_MODULE(mything, init) where init is void init(Handle<Object> target)
14:16 < mscdex> typesthings: is your "name" in binding.gyp set to "mything"? do you have the source uploaded somewhere?
14:17 < devnul> to download a file and save it should i use fsstrem.pipe right?
14:18 < typesthings> I'll upload my stuff. mything was an example. I'm trying to get access to the PTAM library from NodeJS
14:18 < mscdex> devnul: that's probably the best way.... source.pipe(fs.createWriteStream('/tmp/downloadedfile'));
14:18 < devnul> yes i'm trying to build a torrent client
14:19 < devnul> so i open the socket with the peer
14:19 < mscdex> typesthings: right, but i mean the two names have to match
14:19 < devnul> and then copy data to a file stream
14:19 < devnul> does this make sense=
14:19 < devnul> ?
14:20 < mscdex> devnul: i'm not familiar with the bittorrent protocol. there are bittorrent modules on npm though...
14:20 < devnul> i know but this is my "weekend" project to learn node :D
14:20 < devnul> so i won't rely on thirdy-party stuff
14:22 < mscdex> most people start with a chat program
14:22 < mscdex> heh
14:22 < devnul> too easy! ahah
14:22 < devnul> i just learn the protocol and make tries lol
14:26 <@Nexxy> damnit mbalho 
14:27 <@Nexxy> with your interesting videos
14:27 < btipling> is there a better way to run npm with a different version of node than the one installed in path than  node=/path/to/node/node-v0.8.19/node npm i
14:27 < btipling> ?
14:28 < typesthings> @mscdex - binding: https://github.com/hitsthings/node-ptam/blob/master/binding.gyp sourcefile: https://github.com/hitsthings/node-ptam/blob/master/src/ptam.cc
14:29 < rudiX> hello 
14:29 < rudiX> how to get the date in this format - 2008-07-17T09:24:17Z
14:30 < btipling> rudiX:  https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date#Example.3A_ISO_8601_formatted_dates
14:31 < btipling> Date.toISOString()
14:31 < btipling> > (new Date()).toISOString()
14:31 < btipling> '2013-02-18T14:28:07.703Z'
14:32 < rudiX> wow thanks
14:33 < btipling> yay
14:36 < carpii> how best to console.log a sparse array? Im just using JSON.stringify at the moment but it shows a null for each unassigned index 
14:37 < mscdex> typesthings: you're missing code
14:38 < mscdex> wait, i take that back
14:38 <@Nexxy> carpii, array.filter(function(e) { return !!e });
14:38 < typesthings> I'm trying a simplified version too (without PTAM at all) and getting similar results.
14:38 < carpii> thanks nexxy
14:39 < typesthings> I thought it was something to do with x86 vs x64, but it does the same thing regardless of which node.exe I run
14:39 <@Nexxy> :)
14:39 < mscdex> typesthings: where are you calling PTAMWrap::Init() ?
14:41 < mscdex> typesthings: i think you're better off just creating one class and do the "createPTAM" function in javascript
14:41 < typesthings> I'm not, so that'll bug out :) but it doesn't een get to calling .createPTAM()
14:42 < typesthings> ok so I export a class instead of a function?
14:42 < typesthings> I set the class on the target arg in init()?
14:42 < mscdex> typesthings: here's an example: https://github.com/kkaefer/node-cpp-modules/tree/master/06_objects
14:45 < typesthings> Cool, I'll see if that makes a difference. Thanks a ton!
14:46 < xdomox> is it socket[USER ID].emit() to send to a specific client?
14:48 < carpii> io.sockets.sockets[socketid] returns the socket object
14:52 < hemanth_> dir tree -> json anyone?
14:57 < aeosynth> i want to benchmark my app, how do i open up 100k connections?
14:58 < carpii> websockets or httpd ?
15:00 < aeosynth> if i have to choose, sockets, but why not both?
15:00 < carpii> well if it was just httpd, you can use apaches 'ab' tool
15:01 < carpii> for sockets i dont know im afraid. I've written php scripts in the past to bench (non-node) websockets, but it kinda needs bits of protocol built in 
15:03 < RLa> aeosynth, this seems to be preferred lately over ab: https://github.com/wg/wrk
15:03 < RLa> carpii, check it out too
15:03 < carpii> yep looking, thx
15:04 < aeosynth> thanks, but does that handle web sockets?
15:04 < carpii> theres a websocket client on github, which has a heap of benchmarking tests.. http://worlize.github.com/WebSocket-Node/benchmarks/
15:05 < carpii> you could maybe look at those too
15:05 < RLa> yeah
15:05 < typesthings> @mscdex no luck :( Same error. New code: https://github.com/hitsthings/node-ptam/blob/master/src/PTAMWrap.cpp
15:06 < carpii> oh it relies on autobahn, which as it turns out looks quite useful… http://autobahn.ws/testsuite
15:08 < pooya> doh, why is my node-inspector not running now! 	var debugServer = new DebugServer() TypeError: object is not a function
15:08 < typesthings> Are there certain classes of errors that would return the "Error: no error" response? Maybe that'll help me debug
15:10 < xdomox> does io.set('authorization', ...) occur whenever the page is changed?
15:11 < xdomox> it seems like i get the session id and store it when the user logs in, but after the page refreshes it changes and doesn't rewrite
15:11 < carpii> types: i couldnt find "no error" anywhere in node.js source, so I can only assuming its being provided by c compiler or perhaps the OS
15:12 < xdomox> okay wait that's wrong
15:12 < xdomox> the issue is with the cookie's sid not being the same as socket.io's
15:12 < typesthings> ah that's good to know. Thanks carpii! I just found out I can find the problem line easier if I use node -e, and it's failing on the process.dlopen()
15:20 < typesthings> The "no error" is from libuv. it couldn't load my addon and doesn't know why :(
15:20 < typesthings> Anybody know any good resources for debugging the node process at the C level?
15:21 < typesthings> I'm calling it quits for the night, but it would be good to have a jumping off point tomorrow :)
15:24 < bradleymeck> typesthings: dtrace helps a ton if you can put w/e on a smartmachine for a bit
15:24 < bradleymeck> can see every entry/exit into C
15:25 < typesthings> linux-only? is that what "smartmachine" is?
15:26 < typesthings> meh, sleep needed. Night all. Thanks for all the help!
15:27 < xdomox> with io.set('authorization', function (data, accept)
15:27 < xdomox> what are the properties of data?
15:27 < xdomox> where is the documentation for this?
15:27 < carpii> handshake object, i think its the headers basically
15:28 < carpii> https://github.com/LearnBoost/socket.io/wiki/_pages
15:28 < carpii> see Authorizing
15:29 < eddyb> hi, can someone help me make sense of a profiler output?
15:29 < eddyb> https://gist.github.com/eddyb/d3a5fc2b9ff8f60c8e1f
15:30 < eddyb> am I reading that wrong, or is most of the time spent compiling? (the entire run, w/o profiler, takes 15s)
15:36 < hmarr> is there any reason the 'detached' option isn't available when calling child_process.exec?
15:36 < hmarr> it is available for spawn, but none of the other child_process methods
15:36 < Aartsie> Can some one help me to acces a array in my mongodb database using mongoosejs ? https://gist.github.com/Aartsie/dc06820bf9e460598cf0
15:39 < cloudbender> is there a way to check the stack weight or count frames or something ?
15:40 < carpii> hmarr, is it possible theyre always detached by definition ?
15:42 < hmarr> carpii: based on a quick glance over lib/child_process.js, it looks like it isn't
15:42 < hmarr> carpii: i was having problems killing subprocess that spawn other subprocess, but i think i may've solved it by closing open fds on exit
16:20  * cloudbender rangeError: maximum call stack size exceeded
16:23 < carpii> recursion i imagine
16:24 < TehShrike1> How much recursion?  Infinite!
16:24 < j_fresh> Does anyone know of any good resources to learn node.js?
16:24 < tuhoojabotti> recursive closure!
16:24 < bradleymeck> anyone know of a logger that can 1. reserve a uid when requested 2. accept a raw http request and just dump that without magic as it goes
16:24 < tuhoojabotti> j_fresh: Learn JS and make modules.
16:25 < tuhoojabotti> j_fresh: Node is very easy if you have JS background.
16:25 < carpii> best way to learn node is just pick a project and start getting your hands dirty
16:25 < tuhoojabotti> I'm talking from experience. :)
16:25 < tuhoojabotti> Yeah
16:25 < carpii> and research as you go
16:25 < tuhoojabotti> That's what she said.
16:25 < carpii> :)
16:25 < jeremy_c_> I am trying to install geddy via npm, and I get several dependent packages that fail to install stating "package lacks shasum" ... for example, xmlhttprequest, async_testing ... any thoughts on getting around this?
16:25 < j_fresh> i have very little js experience, but i was picking it up ok following a tut, until they wanted to charge for the rest
16:26 < tuhoojabotti> j_fresh: Google ought to be full of tuts.
16:26 < j_fresh> i have a project in mind but this seems very different than the languages that i'm used to
16:26 < tuhoojabotti> http://www.nodebeginner.org/
16:26 < j_fresh> that's the one that wants to charge
16:26 < tuhoojabotti> j_fresh: what are you used to?
16:26 < tuhoojabotti> yeah
16:26 < j_fresh> Java, C, C++
16:27 < carpii> i dont think youll struggle
16:27 < tuhoojabotti> I learned JS first, then Java
16:27 < j_fresh> it's not the language, just the proper way to write and run.  once i have that down, i'll be able to go from there
16:27 < tuhoojabotti> Yeah
16:27 < tuhoojabotti> j_fresh: Setting up the workflow
16:27 < j_fresh> yeah, exactly
16:28 < j_fresh> just like writing android:  the Java is about the same but the way Android does stuff is just different
16:31 < daslicht> j_fresh: I am also coming from a Java / ActionScript background, the biggest difference for me was that you code in JS blind since therer is not really any code completion etc, and the async way of coding 
16:32 < daslicht> that code completion of Flex builder I really miss in JS things :)
16:32 < tuhoojabotti> j_fresh: I'm probably not the best example. I just edit in Sublime Text, sync to server and run.
16:33 < daslicht> is therer meanwhile a way to move file in sublimes sidebar ?
16:33 < daslicht> or that new creted files are shown ?
16:33 < daslicht> heh
16:33 < daslicht> when I create a new file in sublime its not shown in teh sidebar 
16:33 < daslicht> really annoying
16:40 < jvanveen> ehm, is it possible to pass a function reference and add a parameter to it at the same time?
16:40 < jvanveen> like i have app.scheduler.repeatTask(app.siteTracker.monitoringTask, {interval:1000});
16:41 < jvanveen> but i need to pass a url to it as well(to monitoringTask)
16:41 < context> you'd have to wrap it in another function
16:41 < context> or your repeatTask method needs to handle it....
16:42 < context> or you could just avoid this app.scheduler and do setInterval, unless app.scheduler really is adding something useful
16:42 < jvanveen> ah thanks for the tips!
16:42 < j_fresh> i found a few tuts on dailyjs.com.  i might try to follow through a few of those to get the hang of it
17:02 < jvanveen> ehm is it possible to programatically set arguments on a function?
17:02 < jvanveen> like python's foo(*args)
17:05 < Kakera> jvanveen, Function.apply?
17:06 < jvanveen> Kakera: aha thanks!
17:07 < ePirat> Hello
17:08 < ePirat> can someone tell me what this snippet will do? http://twitter.com/ePirat/status/303547746420408320/photo/1
17:09 < bradleymeck> ePirat: it will immediately log 10000 then log test then wait for 10 seconds and freat out because undefined is not a function
17:09 < bradleymeck> freak* , or it will just log 10000 then freak out because undefined is not a function
17:10 < chapel> bradleymeck: heh
17:10 < ePirat> hm ok why? :P
17:10 < bradleymeck> cause you invoke the function immediately
17:10 < chapel> bah bradleymeck 
17:10 < bradleymeck> you dont pass a reference you pass in the result of the function
17:11 < ePirat> oh… I see…
17:11 < ePirat> thanks
17:12 -!- mode/#Node.js [+o isaacbw] by ChanServ
17:15 < marktheunissen> hello all, does anyone know of a method of *modifying* argv ?
17:16 < marktheunissen> for example, if I execute `node server.js --greeting hello`
17:16 < marktheunissen> i would like to modify `hello` so that when i run `ps` on the command line, it shows me something else
17:17 < context> marktheunissen: modify it the say way you modify any other array ?
17:17 < cloudbender> assertion: node will remain resident until the event loop is clear.
17:17 < context> marktheunissen: there is a better way of doing that
17:17 < context> marktheunissen: http://nodejs.org/api/process.html#process_process_title
17:17 < context> marktheunissen: note... that ONLY works on linux.
17:17 < marktheunissen> context: Yes! thank you!
17:18 < marktheunissen> context: exactly the tip i was fishing for
17:18 < cloudbender> is there a way to get some type if indication from node that it as terminated ?
17:19 < context> cloudbender: after its terminated?
17:19 < cloudbender> well have it send an exit code to the console
17:19 < context> cloudbender: process has an 'exit' event
17:19 < cloudbender> hmmm
17:19 < context> not sure if you can change the exit code there
17:20 < cloudbender> don;t want to change it just want to see it
17:20 < context> cloudbender: you can force the code and exit: http://nodejs.org/api/process.html#process_process_exit_code
17:20 < context> cloudbender: you want to see it IN the process before termination ?
17:21 < cloudbender> I want to know node has quit because the event loop was cleared ?
17:21 < cloudbender> does that make sense ?
17:21 < chapel> http://nodejs.org/api/process.html#process_event_exit
17:22 < cloudbender> My understanding is that node remains resident as long as it has work to do.
17:22 < context> cloudbender: you can attach to the exit event, i dont think thats going to tell you "why" though
17:23 < context> cloudbender: why else would node close besides being forced
17:24 < cloudbender> well, theoretically, either terminates normally, or becuase an error was thrown
17:25 < cloudbender> *it either
17:25 < context> cloudbender: then catch exit, AND uncaughtException
17:25 < context> whichever gets called is why it's exiting
17:25 < context> cloudbender: or check the return code after exiting
17:27 < Mehfuz> Just released a new blog engine lighter , please check it out http://www.meonbinary.com/2013/02/introducing-lighter-blog-engine
17:27 < Mehfuz> using node + mongo
17:31 < cloudbender> Is there a command that gives me help in the node shell ?
17:32 < cloudbender> sorry, no docs anywhere
17:32 < context> cloudbender: what? help on what
17:32 < context> docs: http://nodejs.org/api/
17:33 < gildean> cloudbender: i don't think you can get much more than the code the process exited on
17:33 <@isaacbw> .help
17:34 < gildean> which you can get like this: process.on('exit', function (code) { console.log('process exit on code ' + code); });
17:34 < cloudbender> thanks isaacbw  gildean  context
17:34 < cloudbender> gildean thats perfect thank you
17:34 < gildean> np
17:35 < cloudbender> I figure if I can get my head around the event loop concept I can stay out of the weeds.
17:36 < cloudbender> I'm trying to re-thunk myself to evented coding versus flow-based cloding.
17:36 < cloudbender> It's different.
17:40 < cloudbender> so I can use node debug repl instead of bashing the bots, ok
17:43 <@isaacbw> are there any jsfiddle-y sites for node code?
17:49 <@isaacbw> http://i.imgur.com/NvPhxba.png
17:50 < tuhoojabotti> isaacbw: I think I saw an online repl for node
17:51 < tuhoojabotti> Not sure if you can save/share, though
17:51 <@isaacbw> it would be cool if you could get a VM with all/most of npm available
17:52 < tuhoojabotti> yeah
17:53 <@isaacbw> the tricky part would be sandboxing the file system and networking in a smart but still useful way
17:54 < AAA_awright> I'm getting:
17:54 < AAA_awright> ../src/node_object_wrap.h:62:36: error: 'class v8::Object' has no member named 'GetPointerFromInternalField'
17:54 < AAA_awright> Which prevents compilation
17:54 <@isaacbw> do we have any bots here for recording messages that get repeated a lot?
17:58 < ncmn> i was wondering the same thing yesterday, isaac. that would be helpful for making faqs
18:04 < HankHendrix> hello all
18:05 < HankHendrix> how can I emit a socket io event within a mongo db success callback?
18:05 < HankHendrix> (this is in a database class that doesn't require socket io)
18:06 < wao> hm, is it worth using libuv on linux
18:06 < wao> ?
18:06 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:07 < bradleymeck> wao: for … ?
18:07 < gildean> HankHendrix: attach a eventemitter to your "class" and emit an event, then listen on that event and act accordingly
18:07 < gildean> HankHendrix: that's one option, but not the only one
18:07 < wao> bradleymeck: as platform layer for nodejs https://github.com/joyent/libuv
18:08 < HankHendrix> gildean - I'm trying to avoid that...I don't want to pollute my db class
18:08 < bradleymeck> wao: node already is using libuv, and libuv is a very fast event loop (and the only one that likes windows)
18:08 < gildean> HankHendrix: pollute with what? an eventemitter?
18:08 < HankHendrix> gildean yeh
18:08 < gildean> HankHendrix: i don't see how that's polluting anything?
18:09 < HankHendrix> gildean: hmmm, I'd rather pubsub
18:09 < bradleymeck> encapsulate your ideas, if aomething is triggering a notification of an event, keep it an event emitter. if it is a middleware hook keep it with a middleware framework
18:10 < gildean> HankHendrix: that's basically what you're doing with an eventemitter
18:10 < wao> bradleymeck: ahm, ook )
18:10 < bradleymeck> HankHendrix: pubsub in process should be done with an eventemitter, ipc is different, use a message queue with pub/sub if doing pub/sub
18:11 < HankHendrix> bradleymeck: what's ipc?
18:11 < carpii> inter process comms
18:12 < HankHendrix> cool
18:12 < HankHendrix> thanks guys
18:12 < HankHendrix> I think I might actually try the EventEmitter object
18:12 < HankHendrix> and trigger an event from inside the db class which can be listened to in the controller
18:13 < gildean> HankHendrix: that's the easiest too imo. just use the utils.inherit(YourModule, events.EventEmitter);
18:14 < cloudbender> thanks all using this ... process.on('exit',function(){console.log('Node is Exiting')});
18:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:21 < HankHendrix> gildean: I can't seem to get this work...I'm emitting the event from my database class with "express.emit(..."
18:21 < HankHendrix> and then listening in my app.js with "app.on(..."
18:22 < HankHendrix> I think the problem is because I can't access "express()" or "app" from inside my database class
18:22 <@isaacbw> *sigh* time warning is forcing me into a remote irssi process :(
18:22 <@isaacbw> goodbye for now xchat
18:22 < gildean> HankHendrix: you should just attach the eventemitter to your "class" and emit events from there
18:23 < HankHendrix> right...so I require it?
18:23 < gildean> HankHendrix: i'm guessing you already are requiring the db-module as a module?
18:23 < HankHendrix> gildean: yes
18:24 < HankHendrix> surely I don't assign the require to a var???
18:24 < gildean> HankHendrix: yes you do
18:25 < HankHendrix> would I then use that var for the actual methods??
18:26 < gildean> var dbModule = require('./dbmodule'); dbModule.on('yourevent', function (someargs) { doWhatever(someArgs); });
18:26 < MI61> joyent/node: isaacs master * d75e397 : Merge remote-tracking branch 'ry/v0.8' into master  Conflicts: 	AUTHORS 	 (+16 more commits) - http://git.io/5E1N9w
18:26 < gildean> HankHendrix: you could, it's not necessary, but it's how it's usually done
18:29 < HankHendrix> gildean: I've read the docs about EventEmitter...but I can't work out how to subscribe to an event
18:29 < HankHendrix> "server.on('connection', func..." - I take it this means publish an event?
18:29 < gildean> no, that's the listener
18:30 < HankHendrix> but I'm not sure of the syntax to listen
18:30 < HankHendrix> gildean: ah right...how would I emit then?
18:31 < gildean> in your module you could do this.emit('coolevent', 'this is passed on', { so: 'is', this: ''});
18:31 < gildean> if this is in that scope the object which has the eventemitter
18:31 < gildean> 'this' i mean
18:36 < cloudbender> Will be scarce for about 10 days, please no tears, headed back to work at http://www.northstarresort.ca gotta help build an ice road for 500,000 litres of fuel
18:36 < st_luke> mikeal: does request support MKCALENDAR?
18:37 < HankHendrix> hmm
18:38 < HankHendrix> gildean: I'm doing an emit and a listener in the same file and they don't seem to be working....however I'm not getting any syntax erors etc
18:38 < cloudbender> F.Y.I my favorite fishing lure is the 'Splashin` Poodle'
18:39 < cloudbender> works every time
18:39 < gildean> HankHendrix: this was a pretty good blogpost about eventemitters, maybe it'll answer some questions for you: http://wekeroad.com/2012/04/05/cleaning-up-deep-callback-nesting-with-nodes-eventemitter
18:40 < HankHendrix> gildean: thanks!
18:42 < MI61> joyent/node: isaacs master * 09b1212 : http: Add fixme comment about ECONNRESET handling - https://github.com/joyent/node/compare/d75e39794bb9...09b121225444
18:44 < isaacbw> ugh
18:46 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:46 < WeezzZ> hello
18:54 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:58 < nanicoar> Hi there.
18:58 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:03 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:23 < nanicoar> Are there SVG libraries for the server side?
19:24 < carpii> im writing a chat app, and am escaping messages before broadcasting them to clients. Im already disconnecting clients who send large messages, as well as plans to use redis for DOS mitigation.  What other security issues do i need to consider with node? 
19:27 < carpii> nani, using jsdom.. this looks interesting http://blog.davidpadbury.com/2010/10/03/using-nodejs-to-render-js-charts-on-server/
19:28 < MI61> joyent/node: isaacs master * 75df612 : doc: Use 'close' rather than 'exit' in spawn examples  Close #4515 - http://git.io/IstH3w
19:30 < nanicoar> carpii: veeery interesting. Can skip so many wheel reinventions!
19:30 < carpii> :)
19:33 < isaacbw_> ugh, setting up irssi took long enough...
19:34 < nanicoar> I drew a doodle of a witch's calduron today. I'll make it bubble with client-side js, and bats and ssh randomart glyphs fly out of it. You'll get a bat every time you click the calduron, and in fact everyone will get one so you can spam it terribly. Every time someone connects their SSH public key will pop out in brilliant colours.
19:34 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:34 < nanicoar> It will be the best web site ever.
19:34 < jocafa> irssi? weechat.
19:34 < context> isaacs: why make process exit/close different? now you have to keep track of what code is for a "process" and whats a child.... what if its possible for code to be both...
19:35 <@isaacs> context: 'close' = exit, and also all the stdio is flushed
19:35 <@isaacbw> actually that does look nicer jocafa...
19:35 <@isaacs> context: they're different things.
19:35 <@isaacbw> I've wasted too much time configuring IRC today though
19:35 < context> isaacs: ok gotcha
19:35 <@isaacs> context: you can of course listen to 'exit' on the child proc, and then also wait for 'end' on all the stdio output
19:35 <@isaacs> that's fine.
19:35 < jocafa> it's a bit more extensible
19:35 <@isaacs> but it's kind of a pita
19:35 < jocafa> yeah you'd have to fiddle with it a lot, too
19:35 <@isaacbw> jocafa: it looks like it has a more familiar layout
19:36 < carpii> on serverside, if i socket.emit("foff !"); socket.disconnect();   can i be sure the message will be sent before closing the connection?
19:36 <@isaacbw> I would stick with my xchat, but time warner drops me to 90% packet loss every few hours
19:36 < jocafa> ouch!
19:37 < gildean> isaacbw: you can theme and change the layout of irssi as much as you want
19:38 <@isaacbw> gildean: I know that there's a way to have a nick list on the side, but I can't figure out how to configure nicklist.pl
19:39 < nanicoar> http://codebase.es/riffwave/ 
19:39 < niix> >> ['1','2','3'].map(Number);
19:39 < arf> niix: (object) [1, 2, 3]
19:39 < gildean> isaacbw: it's a perl-script, you load it with /script load scriptname.pl
19:39 <@isaacbw> gildean: I know how to add it, but not configure it
19:39 < mrvisser> Hmm, I have a problem installing node-cas-sfu with node.js. Ending up with "make: cc: Command not found". It's node-gyp building it, anyone know the proper way to fix it?
19:39 <@isaacbw> I don't really want to fuss with it right now though tbh
19:39 < mrvisser> Is the proper way to set the CC env var?
19:41 <@isaacbw> could someone ping me?
19:42 < drudge> isaacbw: PING 1.45s
19:43 < context> mrvisser: do you have gcc installed at all?
19:43 < context> or are you on windows
19:43 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:45 < mrvisser> context: I don't, but I'm seeing now that I don't have cc *or* gcc
19:46 < mrvisser> that would be the problem :) catches me off-guard because my setup is automated through puppet
19:46 < mrvisser> I just assumed the problem was that it installed gcc and not cc, and node-gyp wanted cc
19:46 < mrvisser> so I think I can make my way through this.
19:46 < mrvisser> thanks for the reply
19:46 <@TooTallNate> mrvisser: ya you need gcc
19:48 < owen1> i work on a node module that can ping an array of websites - ping(['foo.com', 'bar.com'])   i want to send an email for each site that is down. should i pass mailer argument as dependency or should i pass callback or should my ping be an event emitter?
19:49 < owen1> it feels like callback and event emitter is more decoupled than injecting a dependency.
19:50 < Havvy> owen1: Callback or event emitter would be more decoupled. Since this is a function, and not an object, I suggest a callback.
19:51 < owen1> Havvy: so if i want to turn it into an object, an even emitter might be better.
19:52 < context> you could make the email support as a plugin
19:52 < context> and id still use events...
19:52 < owen1> context: what do u mean 'plugin'?
19:53 < context> npm supports plugins now
19:53 < Havvy> owen1: I generally reserve event emitters for long running objects. Ultimately the event emitter allows you to do multiple callbacks easily. Are you going to need multiple callbacks?
19:53 < owen1> multiple, as in different kind of events? no
19:53 < context> http://domenic.me/2013/02/08/peer-dependencies/
19:53 < owen1> it's the same type of event, just different info (site)
19:53 < bradleymeck> owen1: if it is purely notification with potentially multiple consumers: use an event (you can add callbacks as desired). if it is interruptable ala middleware look into a middleware framework for this sort of thing.
19:57 < tribalab> anyone around?
19:58 < bradleymeck> many
19:58 < owen1> bradleymeck: i am not sure what multiple consumer means in practice.i am writing a gist that describe what i think. thanks!
20:00 < tribalab> Anyone used socket.io with unity?
20:00 < tribalab> I'm struggling
20:02 < txdv> tribalab: oO
20:02 < txdv> tribalab: tell more about how you want to use it
20:03 < tribalab> passing steering data from a smartphone accelerometer/gyro to a native unity client
20:03 < tribalab> i have a driving game in unity that I want to drive via a socket
20:04 < txdv> driving ftw!
20:05 < tribalab> https://github.com/NetEase/UnitySocketIO
20:05 < txdv> you know that socket.io is a message mechanism for a web server and the browser
20:05 < tribalab> is where i started but I ran across comments saying it's out of date
20:05 < txdv> so date it up
20:06 < tribalab> is socket.io not intended for communicating to native app/clients?
20:08 < owen1> bradleymeck: is this correct? http://hastebin.com/newipawete.hs
20:08 < bradleymeck> owen1: looks fine to me
20:08 < gildean> tribalab: the socket.io server can communicate with most of the websocket-client-implementations available
20:10 < gildean> tribalab: but because your client isn't a socket.io client, you might be better off using the websocket module used in socket.io which is named ws
20:10 < owen1> bradleymeck: so why multiple consumers is a better fit for event emitter? maybe you mean sending the event multiple times?
20:10 < txdv> tribalab: I never though of it like that, but I guess if the browser can connect then a native client can connect for sure
20:11 < gildean> tribalab: https://github.com/einaros/ws
20:11 < bradleymeck> owen1: i mean you can have pinger.on('ping', worker1.doSomething) pinger.on('ping', logger1.doSomething) etc
20:12 < bradleymeck> if you are going to use a notification in potentially multiple ways you can just add emitters rather than doing weird callback hooking
20:15 < owen1> bradleymeck: got it. i am not sure why, i previously thought that callbacks should be used and only if you can't, use event emitters.
20:15 < owen1> maybe since callbacks are part of js and event emitters are not
20:17 < tribalab> thank you txdv
20:18 < tribalab> I'll read up on this and come back with any questions I come up with
20:18 < cgeisel> i'm having an issue compiling node and was wondering if someone could help me with the output from "make install".
20:20 < bradleymeck> how can i inform `request` my .form is not finished?
20:24 < cgeisel> this is the error from make install: python tools/install.py install    File "tools/install.py", line 228     cmd = args[1] if len(args) > 1 else 'install'
20:25 < cgeisel> i believe the probelm is that although i specified a different version of python when i ran ./configure (python2.6), for some reason the install is using the older version of python (ie "python")
20:25 < typesthings> Hi all! I was asking for help debugging a native issue last night with my code: https://github.com/hitsthings/node-ptam It was failing to load with "Error: no error"
20:25 < typesthings> Looking at the libuv source, I believe this is happening in uv_dlopen when it calls LoadLibraryExW
20:25 < typesthings> now I want to debug it on Windows
20:25 < cgeisel> and i've verified that is the problem--if i symlink "python" to the newer version of python, node will make install successfully.
20:26 < cgeisel> however the workaround is not ideal. i want to automate the process and would prefer not to make/unmake a symlink.
20:26 < typesthings> anybody know about debugging node addons on windows? I can't seem to attach windbg to the node process
20:29 < jd823592> Hello any idea how to get bcrypt work with node 0.9.9 (node-gyp fails to rebuild)
20:30 < bradleymeck> jd823592: move to stable if you want it to work, unstable is more for node core dev than using as a dev
20:31 < jd823592> well i just spent too much time building v8 and node to revert it back... cannot this be done easily? when is stabilization of 0.9.9 gonna happen (estimate)?
20:32 < typesthings> 0.8.x is stable, 0.9.x is unstable. Odd minor versions are unstable
20:32 < Fishrock123> Is bcrypt compatible with 0.9.9 yet?
20:33 < bradleymeck> 0.9.9 should not be used for production / you should not expect anything to be 100% til 0.10.0
20:33 < Fishrock123> Because if it isn;t, than that might be your issue.
20:34 < jd823592> ok, any estimate about the stable release due date?
20:35 < tjfontaine> WIR
20:36 < gildean> jd823592: 0.8 is stable
20:37 < chillerwhale> using fs.createReadStream to read a text file with ~500k lines, seems to be stopping consistently after parsing ~500 of them, any ideas as to why this may be happening?
20:39 < Voting> ok, so I have this new job and there is SOME chance that someone in this new employer of mine might look at my code. This will be the  very first Node.js code I will ever have written and I really don't want to look like I'm stupid. Anyone who wants to look at it and tell me anything I should clean up about it, well, I'd be SO grateful. Basically, all it does is provide the client side with the ability to get some objects from MySQL and
20:39 < Voting> http://hastebin.com/bavunivivo.coffee
20:39 < Voting> Please don't be polite! Tell me all the ways that my code SUCKS.
20:39 < jd823592> gildean: i know, i hoped for something compatible with the version of v8 i have
20:40 < Voting> I have a Teflon ego so please rip into http://hastebin.com/bavunivivo.coffee and tell me all the stuff I should have done differently! 
20:41 < Fishrock123> Voting: You're using that many brackets in... CoffeeScript.... ?
20:41 < Voting> Fishrock123: This is supposed to be js.
20:42 < Fishrock123> Voting: Ummm... then why is it .coffee?
20:42 < Voting> Fishrock123: what brackets are you talking about? 
20:42 <@isaacbw> hastebin guesses at an extension
20:42 < Fishrock123> Oh.
20:42 < Fishrock123> That explains a lot.
20:43 <@isaacbw> I got so much done yesterday that I can't get myself to do anything today
20:43 < Voting> I don't know http://hastebin.com at all. Just started to use it.
20:43 <@isaacbw> I like hastebin
20:43 <@isaacbw> it's uncluttered and makes forking really easy
20:43 < Fishrock123> As a general rule, know what you are using before using it. XD
20:44 <@isaacbw> hey, I had this idea a long time ago but people told me it was useless: an application that adds an item to your windowing environment's context menu and lets you upload and get a public link of a file in one click
20:44 < CoverSlide> you can stick whatever extension you want  on it and it will do the propert syntax hilighting
20:44 <@isaacbw> so sort of a simpler dropbox public folder without the folder part
20:44 <@isaacbw> it doesn't have the prettiest syntax highlighter
20:45 < Fishrock123> Gist ftw. But w/e. :P
20:45 < Fishrock123> A one-click app that uploads to gist / hastebin . whatever would be cool, I suppose.
20:46 <@isaacbw> I was thinking for images mostly
20:46 < groundwater> right-click to imgur would be cool
20:46 < Fishrock123> Voting: You should try to keep you're function(){ / function() { spacing consistant.
20:46 < Fishrock123> Oh yes. to imgur would be awesome. :o
20:47 < carpii> mac has an app called skitch
20:47 < groundwater> imgur might even do it for you, if you asked nicely
20:47 < typesthings> Anybody able to help with debugging NodeJS native code on Windows? Is there a .pdb for symbols?
20:47 < carpii> which is kinda cool, uploads with one click
20:48 < bradleymeck> felixge how does formidable know when a form is done, i have a large latency staggered form coming in with up to 30s pauses of nothing on the wire, but after a boundary end
20:48 <@isaacbw> upload with one click and give you a URL to share
20:49 < Fishrock123> Only issue is that imgur generates the link server side and might take a min till you get it, I think?
20:49 < Fishrock123> (If it makes it after the upload)
20:49 <@isaacbw> it would have to be its own service
20:50 < Fishrock123> Mmmm.
20:50 <@isaacbw> so it would give you a URL and if people go to it before the upload is finished, it will say something like "Upload is in progress"
20:50 < Voting> ok, I'm back now. Lost connection for a while. Did any of you make comments about my first node.js program yet? If so, please repeat yourselves!
20:51 < Fishrock123> Voting: Scroll up until you see your name highlighted
20:51 < Voting> Fishrock123: I don't think this will work. I was OFF LINE.
20:51 < Fishrock123> -_-
20:51 < arf> Fishrock123: ಠ_ಠ is an IRC client/IRC client framework.
20:52 < Fishrock123> arf: Huh?
20:52 < asdf12> you heard arf!
20:52 < Fishrock123> Voting: You should try to keep you're function(){ / function() { / function (arg) { spacing consistent with one style.
20:53 <@isaacbw> or even better, a one click screenshot taker/uploader/sharer
20:53 <@isaacbw> with cropping
20:53 <@isaacbw> :O
20:53 < Fishrock123> Genius.
20:53 < Voting> Fishrock123: OK, spacing... what else? 
20:53 <@isaacbw> I have no idea how you would monetize it though
20:54 < Fishrock123> Paid app? Idk.
20:54 <@isaacbw> it's one of those things that would be useful but not viable so it will never happen
20:54 < jd823592> hello, is it possible to mask odd version numbers? for example somehow like this =net-libs/nodejs-0\.[1-9]*[13579]\..*
20:54 < Voting> Fishrock123: not sure what I should return when I send an insert SQL query! 
20:54 < jd823592> sry bad channel
20:54 < carpii> isaac, you probably wouldnt. theres too many one-purchase apps doing it now, and providing the hosting too
20:54 < Fishrock123> Voting: I don't know anything about SQL, soooo...
20:55 < cTIDE> i started building that once, but got lazy before i built the client piece
20:55 < Voting> Fishrock123: ok... others can answer then. 
20:55 < Fishrock123> isaacbw: Yeah. I think it would only be viable if it could use someonelse's hosting.
20:56 < gildean> Voting: is your app only for single client at a time?
20:56 < Voting> gildean: why do you ask?
20:57 < gildean> Voting: because you're redefining the clientSocket object each time a new client connects
20:57 < Voting> gildean: likely there will be only one person using it at a time but I didn't mean to depend on that. 
20:57 < Voting> gildean: ah! so a second user would kick the first user off the system?
20:58 < gildean> Voting: it wouldn't, but you're then referencing to the clientSocket object, which is only the last client connected
20:58 < dave2dave2> hi guys, is there any way to specify dependency as local tar.gz file/package in package.json? It is possible to do so in 'npm install package.tar.gz', but I haven't found a way to specify it in package.json.
20:58 < Voting> gildean: What do I need to do so that I can support lots of users? 
20:59 < gildean> Voting: maybe check the socket.io wiki here for more info: https://github.com/learnboost/socket.io/wiki
21:00 < Voting> gildean: Not sure what I should look at on https://github.com/learnboost/socket.io/wiki to understand how to do it right. 
21:00 < gildean> Voting: but basically you could just use io.sockets.emit('someevent', 'something');
21:00 < gildean> that would emit the event to all connected sockets
21:00 < Fishrock123> Wait.... Voting you said "ok, so I have this new job and there is SOME chance that someone in this new employer of mine might look at my code."
21:01 < Voting> gildean: is there a good example app I should study?
21:01 < Fishrock123> I would be disturbed if they didn't check your code.
21:01 < Voting> Fishrock123: this is a quick hack that will get evolved so not sure when the first code review would happen. Once I put it in the corp repository, ANYONE could go look at it and say bad things about me.
21:02 < asdf12> LET THEM
21:02 < Fishrock123> God most companies are run like crap.
21:02 < carpii> you seem more cocerned about what people will say, rather than becomeing a better developer :(
21:02 < Voting> gildean: I don't want to reply back to EVERY client connected. 
21:02 < Fishrock123> They should point out your errors to make you a better developer for them. >_<
21:03 < carpii> voting, no, then youd use broadcast. But you do want the response to go to the right client
21:03 < Voting> gildean: my tests did not suggest that it did reply back to other clients yet.
21:05 < Voting> carpii: Do  you see other things to fix up about my first node.js app? http://hastebin.com/bavunivivo.coffee ? 
21:05 < gildean> Voting: then you need to either do the emitting in the callback of the connection, where the client 'socket' resides, or use io.sockets.sockets[socket.id].emit out of the scope while passing the clients socket.id forward
21:06 < Voting> gildean: is THIS a page that explains the issues? https://github.com/LearnBoost/socket.io/wiki/Authorizing ??
21:06 < carpii> not really Voting, but i havent studied it in detail. It kinda looks a bit messy IMO
21:06 < Voting> gildean: I'm trying to understand "then you need to either do the emitting in the callback of the connection, where the client 'socket' resides, or use io.sockets.sockets[socket.id].emit out of the scope while passing the clients socket.id forward" now... THANKS FOR YOUR HELP! 
21:07 < Voting> carpii: Not disagreeing that it may be a bit messy. 
21:09 < gildean> Voting: the client socket is accessible only in the io.sockets.connection(function (socket) { }); function, or in the io.sockets.sockets object by referencing the id of the client, each client gets an id property attached on connect
21:10 < context> voting: any reason you cant just use rooms, and not access the raw sockets
21:10 < elliottcable> “package” is a reserved word in CoffeeScript?
21:10 < elliottcable> I thought CoffeeScript abstracted away reserved words for me.
21:10 < Voting> context: I just don't know anything about rooms and when / if to use them. I'm new to node.js and to socket.io.
21:10 < carpii> neither did i, until i read about them
21:10 < carpii> took 5 minutes
21:11 < carpii> https://github.com/LearnBoost/socket.io/wiki/Rooms
21:11 < Voting> gildean: is rooms a good way to do this or are you explaining to me a simple way to do it right w/o rooms?
21:12 < context> im not even totally sure what you are trying to do
21:13 < nexion> how can I profile the use of a module that has C/C++? node-profiler just tells me that there's an infinite loop in the native code, but for details it shows some address and also libc-*.so
21:13 < carpii> me neither, it looks like random cut and pasted bits of code off the net :)
21:13 < gildean> Voting: rooms are like channels on irc, if that's what you're after, then use them, if you only want to react to single events per client then no
21:13 < carpii> whats D1, D2? 
21:13 < Voting> gildean: I want to basically handle DB access. Clients request of the server to get and update rows in mysql. No reason to use rooms, right? 
21:14 < gildean> yes
21:14 < context> if you only need to talk to the current client then no there is no reason for rooms
21:14 < Voting> carpii: D1, etc. are just there for debugging. Eventually those functions will update a model for the UI.
21:15 < carpii> ok, just be careful because again D1, Result etc are in global scope
21:15 < carpii> and not tied to a particular socket/client
21:15 < context> offtopic: sql helpful tip: avoid 'select distinct'
21:15 < Voting> D1 are ON the client.
21:15 < carpii> what do you mean
21:15 < Voting> context: why should I avoid 'select distinct' context?
21:15 < carpii> oh i see now
21:16 < Voting> carpii: D1, D2, etc. are just on the client side for my debugging.
21:16 < context> so... whats the problem with your code?
21:16 < context> voting: select distinct is SLOOOOOW
21:16 < Voting> context: in what DB is it slow?
21:16 < carpii> its not usually slow, but you should only use it when you know you really need it
21:16 < context> any/all? it might not be for you now but...
21:16 < context> just a general tip
21:16 < carpii> and not just routinely stick distinct on every query
21:17 < Voting> context: I don't know all the problems w/ my code. Its my FIRST node program. Likely EVERYTHING is wrong w/ it!
21:17 < context> :/
21:17 < context> voting: so remove what dont work.  and slowely add to it.
21:17 < context> stop trying to make everything work at once
21:17 < context> add one small piece at a time
21:18 < context> select period, entity, max(score), min(score) group by period, entity;
21:18 < carpii> oh god, i see what hes doing now
21:18 < carpii> yeah no group by :)
21:18 < Voting> context: I'm going to build the UI today and show up in the AM w/ a little basic demo to show I'm a useful prototyper. 
21:18 < context> define useful
21:18 <@isaacbw> can anyone recommend a module for creating a pool of workers and distributing work (atomic) to them?
21:19 < carpii> kinda like mapreduce sorta thing?
21:19 <@isaacbw> no no
21:19 < asdf12> Voting: write tests! it'll help
21:19 <@isaacbw> more like input->output
21:20 < groundwater> isaacbw: you could share an http socket
21:20 <@isaacbw> I just want something that abstracts the worker pool and acts like a single worker
21:20 < groundwater> isaacbw: it aint pretty, but it works
21:20 < context> isaacbw: there is stuff like que, that uses redis and worker processes
21:20 <@isaacbw> groundwater: no, that's not what I want
21:20 <@isaacbw> maybe I'll just make something
21:20 < asdf12> groundwater: why is that course beginning in March? its really new?
21:20 <@isaacbw> I feel like I can't even describe this well
21:21 < groundwater> isaacbw: sounds like a work queue
21:21 < carpii> i suppose you could add a gearman client and have the gearman jobs talk to node 
21:21 <@isaacbw> groundwater: nope
21:21 < groundwater> asdf12: they are re-running it
21:21 < Drajwer> the simpliest one might be beanstalkd. the protocol is very simple and I saw some simple node lib.
21:21 <@isaacbw> I'm just bad at formulating sensible sentences
21:21 <@isaacbw> I'll make it and show you :)
21:21 < asdf12> oh, i thought it was already done, ie: just videos and files, doesn't require anyone activately reviewing or teaching
21:21 < Voting> isaacbw: you want a pool of consumers consuming jobs? 
21:22 < groundwater> asdf12: do they let you sign up? i think i can still view all the old material
21:22 < context> isaacbw: http://learnboost.github.com/kue/
21:22 <@isaacbw> Voting: and then returning the results
21:22 < Voting> isaacbw: each consumer would be a node instance? 
21:22 <@isaacbw> guys, I'm not looking for a queue
21:22 <@isaacbw> Voting: yea
21:22 < asdf12> its free right?
21:22 < Drajwer> isaacbw: use beanstalk
21:22 < groundwater> asdf12: yea
21:22 < asdf12> OK!
21:23 < carpii> can you give an example of these input->outputs>
21:23 < asdf12> haha thats all i needed to hear
21:23 <@isaacbw> beanstalk?
21:23 < Voting> isaacbw: you want to load balance? 
21:23 <@isaacbw> no :(
21:23 <@isaacbw> don't worry about it
21:23 < context> hha
21:23 <@isaacbw> I'll come back when it's done
21:24 < Drajwer> isaacbw: yep, there is some node lib to use it thought it is so simple you can write one.
21:24 < Voting> isaacbw: you going to try http://learnboost.github.com/kue/ for now?I'd LOVE to know how it works for u.
21:24 <@isaacbw> no, I'm not using kue
21:24 < Voting> isaacbw: what then?
21:25 <@isaacbw> I am going to implement it myself
21:33 < asdf12> i notice some people will never use spies for testing
21:40 < typesthings> I'm trying to build Node with debug symbols on Windows. Anyone able to help? I ran vcbuild.bat debug, but that wasn't enough to get a pdb file.
21:41 < typesthings> actually, I think it just didn't build at all. It compiled the deps, that's it
21:43 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:44 < typesthings> opening in VS and rebuilding from there seems to work, nvm
21:44 < ins0mnia> anyone here with sockjs experience?
21:48 <@isaacbw> ls
21:49 <@isaacbw> mis
21:50 < carpii> im updating sockets with the last time they recieved a (non-heartbeat) packet. now i want to periodically disconnect any which have been idle for a while. whats the best way to do this? Would setInterval() run in a seperate thread and so introduce race conditions?
21:51 < daleharvey> can I get package.json to install a dep globally (grunt)
21:51 < crabtree> -g
21:51 < arf> crabtree: No search results found.
21:51 < carpii> hm actually, setInterval isnt in a seperate thread 
21:52 < daleharvey> I can put  -g in package.json?
21:52 < asdf12> carpii, if you do it that way, you need to manage something, maybe the id of the timer, and i';d use setTimeout instead?
21:52 < asdf12> but you'd have a bunch of timers
21:52 < carpii> ah yea, setTimeout is the one i was thinking of
21:52 < carpii> i dont mind managing it, just wondering if theres a better way
21:52 < dscape> daleharvey: preferGlobal: true
21:52 < dscape> i think
21:53 < asdf12> or one setInterval, with a huge queue that you keep id , last heartbeat timing data on and the setInterval will compare?
21:53 < carpii> a queue of what?
21:54 < carpii> i think it would be more efficient to just store it against the socket object, since its already available during an incoming message, without having to loop of a queue
21:56 < asdf12> you won't get a race condition though as only one end is manipulating data, and the other end is just consuming it, worse case is setTimeout or interval run a little early right before a heartbeat comes in
21:57 < carpii> yeah i was thknking setTimeout runs in a seperate thread, but thats not the case :)
21:57 < carpii> so its not possible im removing sockets while new ones are being added 
21:57 < daleharvey> dscape: preferGlobal is for your own packages I thought?
21:57 < dscape> yeah
21:58 < dscape> sry just skimmed past the question
21:58 < dscape> guess that wasnt it
21:58 < dscape> :)
21:58 < daleharvey> I am guessing this broke since grunt took preferGlobal out of theirs
21:58 < dscape> preferGlobal only warns
21:58 < dscape> doesnt prevent you from installing local
21:58 < dscape> ttbomk there's no forceGlobal — isaacbw isaacs 
21:59 <@isaacbw> why would jsdom add a script element to the DOM for jQueryify
21:59 <@isaacbw> :(
22:00 < daleharvey> well the problem I cant run a straight npm test since it depends on a global install of grunt
22:01 < daleharvey> I can just replace the test with a script that npm install -g grunt && grunt test, but kinda annoying
22:01 < dscape> you can do a hook before 
22:01 < dscape> on npm
22:01 < dscape> that does npm install -g
22:02 < dscape> i never tried it though
22:02 < dscape> https://npmjs.org/doc/scripts.html
22:02 < dscape> or dont use grunt, like the rest of us :P
22:05 < carpii> do people normally develop node with strict mode ?
22:05 < trodrigues> yeah, the latest version of grunt has quite a few breaking changes
22:05 < trodrigues> http://weblog.bocoup.com/tearing-grunt-apart/
22:05 < daleharvey> carpii: I do
22:06 < trodrigues> and yeah, that seems to be one of them
22:06 < carpii> dale, does it increase compile time warnings, or its meant to act as a sandbox ?
22:08 < daleharvey> carpii: it turns 'warnings' where nothing was really ever warned into straight errors
22:08 < carpii> the idea being it helps produce less buggy code, though?
22:09 < daleharvey> yes
22:09 < carpii> ok thanks
22:09 < carpii> i'll have me a bit of that
22:09 < daleharvey> since you find out as soon as you do something like use an undeclared variable or similiar, instead of stuff just working and finding out months later
22:10 < daleharvey> trodrigues: cheers
22:10 < carpii> but you turn it off for production, right?
22:14 < asdf12> write tests for yo tests
22:15 < daleharvey> carpii: nope
22:15 < trodrigues> carpii: why would you turn it off for production?
22:15 < asdf12> i notice the travis image banner caches for a long time
22:15 < carpii> not sure, just wondered if there was a slight perf hit
22:16 < asdf12> first compile probably some
22:17 < asdf12> but after that it either crashed or it didnt
22:17 < asdf12> lets test that 
22:21 < asdf12> there is very slight overhead apparently
22:21 < asdf12> actually no my tests is wrong
22:21 < Voting> gildean: If I changed the stuff on line 34-36 to be closures instead of function names so that those closures would retain access to the "socket" var (instead of sticking it in the clientSocket global, would that fix the problem you were talking about in my code or am I still confused?  (I'm STILL talking about http://hastebin.com/bavunivivo.coffee ). The point is that the io.sockets.on fn gets called EVERY time a client connects to the
22:22 < asdf12> or maybe it's right
22:22 < asdf12> carpii: http://jsperf.com/use-strict-has-overheads-hmm-what
22:23 < carpii> heh nice. thanks
22:23  * carpii scratches head
22:23 < asdf12> though that doesn't test it reliably
22:24 < asdf12> that just tests it in a function, not your entire script
22:24 < booyaa>  anyone recommend another other modules aside keyboardjs for grab key strokes?
22:24 < carpii> yea
22:24 < carpii> but im confused by the graph
22:24 < carpii> results say strict is faster at 115M ops compared to 110M
22:24 < asdf12> OH MY GOODNESS i can't press delete fast enough, must delete use strict!!!
22:24 < carpii> yet graph shows nostrict as being faster
22:25 < Havvy> Mine shows it being a wash.
22:25 < eddyb> there's an overhead only in Chrome 23
22:25 < Havvy> Also, I'm just gonna take a guess here, but the overhead comes from reading the 'use strict' line a lot.
22:25 < carpii> ohh, the graph shows aggregated results from different users?
22:25 < eddyb> Havvy: exactly
22:25 < carpii> not just a visual representation of my results
22:25 < Havvy> Try declaring use strict outside of the function.
22:26 < asdf12> can't do that
22:26 < carpii> youd need two sep tests i guess
22:26 < asdf12> otherwise everything will be use strict, and you can't perform the no use strict test
22:26 < eddyb> Havvy: that's what I thought, v8 having to do just a bit more makes it a tiny bit slower
22:27 < Havvy> var strictadd = (function () { "use strict;" return function (a, b) { return a + b; }; }());
22:27 < asdf12> yes more overhead!
22:28 < Havvy> asdf12: That's a one time overhead cost. ;)
22:28 < asdf12> but it could be specific v8 version as other browsers aren't showing any difference
22:29 < Havvy> Though almost guaranteed to be more overhead than leaving "use strict;" in the function.
22:29 < Havvy> In any case, I don't use the "use strict"; pragma.
22:29 < asdf12> which.. would mimic real world use though -_-
22:29 < asdf12> Havvy: leaving it there is what we were talking about
22:31 < Havvy> I don't put it there in the first place.
22:31 < Havvy> I know what is and isn't strict.
22:37 < tim_smart> isaacs: Ping. NPM issue
22:37 < tim_smart> isaacs: I need to make sure all my usernames are lowercase: Tim-Smart and all variations of casing.
22:38 <@TooTallNate> tim_smart: he did that for me a while back… what module are you having problems with?
22:38 < tim_smart> TooTallNate: uuid
22:39 <@TooTallNate> ahh yes i see
22:39 <@TooTallNate> well ya, you need isaacs for that :)
22:49 < istvanskeri> does anyone know of a good node library that will support xhr requests to load jquery plugins on demand
22:50 < istvanskeri> forexample: a user click on an icon on the screen and onclikc it would fetch a jquery plugin and append all the required scripts/css to the dom and then fire the plugin
22:52 < CoverSlide> TheMoonMaster: 
22:52 < TheMoonMaster> What?
22:53 < TheMoonMaster> CoverSlide: Hi?
22:54 <@mbalho> tim_smart: hey dont you live in nz?
22:57 < jden_> hey gang. quick question: recommendations for a csv parsing module? there are so many... https://npmjs.org/browse/keyword/csv
22:58 < carpii> 'csv' seems pretty active
22:58 < carpii> https://npmjs.org/package/csv
22:59 < tim_smart> mbalho: Sure do
22:59 < tim_smart> mbalho: Wellington
23:00 < context> https://npmjs.org/package/butter-require <- 'lets you var config = require("./config.json") -- couldnt you require json already?
23:01 <@mbalho> tim_smart: <- maxogden here, got in last night, chillin at raglan roast coffee on an outdoor couch now
23:01 < hydrozen> Any recommendations for sending jobs to a queue and run them with a worker? Using Amazon SQS seems like get basic tooling but have a bit of work to do yourself… then I see other tools that use Redis such as https://github.com/learnboost/kue and http://kinetik.qualiancy.com/
23:01 <@isaacbw> you have lots of options
23:02 < groundwater> hydrozen: do you have more details on the requirements?
23:02 < tim_smart> mbalho: So you are in Raglan?
23:03 < tim_smart> hydrozen: I make a redis queue library as well
23:03 < tim_smart> *made
23:03 <@mbalho> tim_smart: no idea really, around the corner from fidels
23:03 < tim_smart> mbalho: So you got no idea where in NZ you are?
23:04 <@mbalho> :D
23:04 <@mbalho> tim_smart: im in wellington
23:04 < tim_smart> Lost. Season 20
23:04 < hydrozen> groundwater: will be used to handle things such as sending emails and what not. Also, I need to be able to know if a job failed.
23:04 < tim_smart> mbalho: OK. PM me if you want my mobile number
23:04 < hydrozen> with SQS by itself I think I have to handle how I serialize/describe the jobs… and I have to do my own tracking to know if a job worked or not.
23:05 < groundwater> hydrozen: not every queue is fault-tolerant, you can prob. eliminate half the options on that alone
23:05 <@mbalho> tim_smart: no phone here, but if you wanna hang out with me and dominictarr then that would be fun
23:05 < tim_smart> mbalho: Oh dominic is back?
23:05 <@mbalho> tim_smart: yea we both flew in last night
23:05 < hydrozen> so which well supported options does that leave me with you think?
23:06 < tim_smart> mbalho: I'm on my lunch break in a sec, got no idea where raglan coffee is though
23:06 <@mbalho> tim_smart: cuba and abel smith, roughly
23:08 < tim_smart> mbalho: Hmm I don't have a spare 30 minutes to spend walking there and back.
23:08 < tim_smart> mbalho: I'm available after 5 though
23:08 < groundwater> hydrozen: so you want to add messages to the queue, and workers will pick up the messages and email them out?
23:08 <@mbalho> tim_smart: no worries, im here a week
23:08 < groundwater> hydrozen: and, should an email fail to send, you want to be notified, is that right?
23:09 < tim_smart> mbalho: http://goo.gl/maps/YJ10b
23:10 < tim_smart> mbalho: Walking rather http://goo.gl/maps/tuoe3
23:10 <@mbalho> tim_smart: nice
23:11 < hydrozen> groundwater: it's not all emails, but its one example of what I need to do. Another example is that I need to create "events" in the database for one month in the future… and if for some reason one of the event does not get generated I want to know about it. Seems like using a queue could be useful instead of just running a cron job that will report on which events were not created.
23:11 <@mbalho> tim_smart: im staying like 1 block from there
23:11 < tim_smart> mbalho: Hah. That is my work though. Anyway - out for lunch
23:12 < groundwater> hydrozen: message queues are only going to ensure messages make it from one process to another. you will need another consistency check to indicate that a process has received a message, but has failed to act on that message
23:13 < groundwater> hydrozen: the simplest way is to just have the process submit a "job failed" notice to some kind of central 'error' queue when there are errors
23:13 < hydrozen> groundwater: yeah for sure. But i mean, something like resque or delayed_jobs in ruby usually tracks if a job ran successfully or not.
23:15 < groundwater> hydrozen: how does resque know when a failure has occurred? i assume the worker is reporting the error back to resque 
23:15 < hydrozen> groundwater: yeah unless i guess the ruby process bombed and it catches the exception. I will have to do some work on my end to determine if a job worked or not, I don't mind doing that.
23:16 < hydrozen> groundwater: my feeling is just that Amazon SQS is like basic tooling to create your generic queue and then implement something on top of it.
23:17 < hydrozen> groundwater: I don't want to reinvent the wheel if there's already something well supported and tested for node that does such a think (like Kue and Kinetik)..
23:17 < groundwater> hydrozen: SQS solves the delivery problem, but you still have more to add
23:17 < hydrozen> think = thing
23:17 < groundwater> hydrozen: i don't know of any such library, but that doesn't mean it doesn't exist. you may want to try asking the email list
23:18 < groundwater> hydrozen: if you DIY, i recumbent using a supervisor-tree, where each process reports back to a supervisor. and any errors are placed on an error queue
23:19 < groundwater> recommend*
23:19 < hydrozen> Kue looks pretty good but it's a TJ Holowaychuk lib so that makes me be a bit more careful because he manages too many projects
23:19 < hydrozen> :P
23:19 < groundwater> lol
23:20 < carpii> amazon seem to offer 1001 services now, and they all have cryptic names
23:20 < groundwater> carpii: amazon is the ikea of cloud services
23:20 < hydrozen> last update was 2 months ago so it doesnt seem to be abandoned yet
23:20 < carpii> groundwater: i dont agree, that would suggest theyre pretty cheap
23:20 < carpii> amazon cloud hosting is pricey imo
23:20 < carpii> maybe their other services are reasonable tho :)
23:21 < groundwater> carpii: i think there are certain scales where aws is a good deal, and scales where it is not
23:21 < carpii> yeah youre probably right
23:21 < groundwater> hydrozen: a better metric might be browsing the issues list
23:22 < carpii> i host with theplanet.net, and they're trying to push people form cheaper dedicated servers to much more expensive cloud offerings too
23:22 < groundwater> TeX is never updated, but that doesn't mean it sucks
23:22 < hydrozen> groundwater: 91 issues :(
23:23 < groundwater> hydrozen: i think you can see graphs on open/closed
23:23 <@mbalho> tim_smart: @MattMcKegg and @bnolan have also expressed interest in hanging out after work
23:27 < carpii> how would i go about changing my node socket server to use ssl ?
23:28 < groundwater> carpii: often using an SSL terminator is easier than getting node to do the SSL
23:29 < carpii> you mean a frontend proxy which deals with ssl and forwards it to node ?
23:29 < groundwater> carpii: yah, like HAProxy in TCP mode
23:29 < carpii> ok thanks, that sounds good
23:29 < groundwater> TCP mode won't mess with your websockets
23:30 < groundwater> carpii: AWS Elastic Load Balancer can do it for you =p
23:30 < carpii> hehe :p
23:31 <@mbalho> carpii: see also stud-proxy
23:54 < tim_smart> mbalho: tim@fostle.com - email with more details
--- Log closed Tue Feb 19 00:00:58 2013
