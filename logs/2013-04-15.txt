--- Log opened Mon Apr 15 00:00:25 2013
01:46 < ChrisPartridge> mm pie
01:47 < kam187-rMBP> nom nom nom
02:13 < AAA_awright> What's everyone's favorite RFC, that you frequently consult?
02:14 <@mbalho> rfcs have no soul
02:14 < Lorentz> mmmm, kfcs
02:20 < AAA_awright> mbalho: Do any documents have a soul?
02:21 <@mbalho> yes i have scientific data to prove it
02:21 <@mbalho> also im pro-abortion
02:22 < ChrisPartridge> i don't even need to see the proof, i'll start spreading the word
02:22 < substack> life begins at curl -X PUT /create
02:23 <@mbalho> hahah
02:23 <@mbalho> unless you are creating life on another domain then you have OPTIONS
02:23 < ChrisPartridge> but WHO created the API... the age old question
02:23 <@mbalho> #metaphor
02:24 < substack> database schemas as family-planning
02:24 < substack> schemaless document databases being the unplanned alternative
02:28 < sinclair-work> hey guys, anyone here done multiple file uploads in html5?
02:29 < sinclair-work> ideally, the kind of drag and drop -> upload sort
02:29 < sinclair-work> i have drag and drop working, but not entirely sure how to go from the files collected from a file drag and drop, to the actual upload itself
02:30 < sinclair-work> additionally, the drag and drop data contains a lot of -moz- specific crap, so i was wondering if there was a better alternitive
02:31 < AAA_awright> http://magnode.org/rfc Anything I should add to this list?
02:33 < ChrisPartridge> smtp, if you're doing mail?
02:35 < ChrisPartridge> sinclair-work: you should probably gracefully degrade to a standard file input
02:52 < AAA_awright> JSON, d'oh
03:08 -!- Nexxy changed the topic of #Node.js to: Why can't Node.js be more like Node.js? - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
03:30 < owen1> when writing a node module that will be used with -g, what should be the first line in that file? #!/usr/local/bin/node or /usr/bin/node? or something else?
03:31 < Guest62765> owen1: #!/usr/bin/env node
03:31 < owen1> Guest62765: works. can u explain why?
03:32 < Guest62765> When node globally installed, it's in the Linux path, which is what env uses to determine the binary to use.
03:33 < owen1> Guest62765: so env is some environment variable that hold the correct path?
03:33 < rvagg> owen1: you have no guarantees what path it's installed in, /usr/bin/env will safely locate and pass on proper environment variables
03:36 < owen1> rvagg: got it
03:42 < owen1> and thanks to you guys i made a pull request to this awesome module - https://github.com/getprove/node-bootstrap-readme-docs/pull/2
03:43 < owen1> makes sweet looking single page app out of a readme.md file
03:44 < cryss> Hello, I have a question for my application provar use "node app" but if I want to run indefinitely on my server as I do?
03:46 < nanashiRei> Anyone in here looking for a job as freelancer, we are currently looking for skilled node.js programmers. We are focusing on RESTful API design, working from home is a possibility, too. If you are interessted please query me :)
03:49 < cryss> Hello, I have a question for my application provar use "node app" but if I want to run indefinitely on my server as I do?
03:49 < substack> cryss: screen is the simplest thing you can use
03:50 < substack> screen -S myserver
03:50 < substack> node app.js
03:50 < substack> ^Ad
03:50 < substack> then when you want to re-attach do screen -x myserver
03:50 < substack> and ctrl-a d to detach
03:51 < substack> see also http://github.com/substack/ploy for something that is a bit more work to set up but lets you do continuous git deployment and manages vhosts
03:51 < substack> or a paas like nodejitsu handles all that stuff for you if you want to go that route
03:52 < substack> or there's https://github.com/nodejitsu/forever
03:54 < owen1> substack: so ploy can be used just as a way to deploy my code to prod even if i don't care about the sub-domains? if that's the case, i just need to run ploy server on my prod box?
03:54 < ryanaz> Is there an express add-on to make 'apache type access logs' ? 
03:54 < substack> owen1: yes
03:54 < cryss> substack: thank you very much, now I know where to start, I will read all the documentation on what you tell me, to know that I should.
03:54 < substack> owen1: just do ploy server ~/datadir
03:54 < substack> and give it a port with -p
03:55 < owen1> substack: but it's not going to run any post-deploy task? like restarting my node server, installing npm packages?
03:55 < substack> a non-root port with iptables forwarding from 80 is recommended https://github.com/pkrumins/ploy/blob/4894983e99a8fe32100c04cf713b3017813fae5f/readme.markdown#running-as-non-root
03:56 < substack> owen1: it runs `npm install .` if you have a package.json
03:56 < substack> and so you can use the scripts.{pre,post,}install fields for that
03:56 < substack> I usually put my browserify build steps in there
03:58 < owen1> substack: "NOTE: INSTALL SCRIPTS ARE AN ANTIPATTERN" - https://npmjs.org/doc/scripts.html
03:58 < substack> owen1: for modules
03:58 < substack> not for applications
03:58 < substack> for applications scripts.install is really handy
03:58 < substack> isaacs: ^^^
03:58 < jesusabdullah> also think for yourself owen1, just because someone said it doesn't mean it's 100% true all the time
03:59 < jesusabdullah> even if they're isaac
03:59 < owen1> jesusabdullah: i know. it's just funny that it's all caps
03:59 < cryss> substack: thank you very much
03:59 < owen1> like someone is screaming at you (or my dad's emails)
04:03 < jesusabdullah> HI SON IM HAVING TROUBLE GETTING THIS NODJS WORKING ON MY COMPUTER IT SAYS IT ISNT INSTALLING CAN YOU COME OVER AND HELP ME SET UP MY PRINTER
04:03 < jesusabdullah> THE DOG IS DOING WELL SHE MISSES YOU
04:05 < substack> YOU CAN'T KNOW WHAT THE DOG IS THINKING THAT IS NOT SOMETHING YOU COULD EVER KNOW
04:06 < jesusabdullah> but substack it's dad he doesn't know that
04:09 < hackedy|away> dads are secretly in league with dogs, Paul Graham said so on Hacker News
04:09 < hackedy> woops.
04:10 < hackedy> dad/dog conspiracy theories.
04:10 < hackedy> isaac isn't a dad, is he
04:11 < jesusabdullah> I don't think so!
04:12 < hackedy> the plot thickens.
04:13 < owen1> i told my old man that USING CAPS on the internets = screaming in real life but he doesn't get it
04:13 < hackedy> HAS ANYONE WRITTEN CAPS.JS YET
04:14 < owen1> https://github.com/substack/CAPS-LOCK
04:14 < owen1> require('caps-lock').ENGAGE(); console.log('beep boop'); => BEEP BOOP
04:15 < hackedy> yeah i thought I remembered that
04:15 < Korvin> Hey, I'm getting connection refused with my https request to duckduckgo api
04:15 < substack> https://github.com/rvagg/CAPSLOCKSCRIPT
04:15 < Korvin> it's only getting that on my server and not locally
04:15 < Korvin> I'm able to curl the url?
04:16 < hackedy> weird. can you curl from the server?
04:16 < Korvin> yes
04:17 < hackedy> :\
04:17 < Korvin> heres the error 
04:17 < Korvin> https://gist.github.com/spaux/ba556fc7f535e0a9c710
04:18 < ChrisPartridge> what node version?
04:18 < Korvin> 0.6.12
04:20 < hackedy> does upgrading fix it? it might not be feasible for you to upgrade but you could at least get a newer copy of node and run a quick https test
04:20 < hackedy> see if the problem is a node problem
04:23 < owen1> what is the correct terminology or npm package? can i call them modules? i am confused with commonJS modules when someone say module.
04:26 < Korvin> meh
04:26 < Korvin> updating broke something else
04:27 < hackedy> Korvin: just take the updated node and write a test case that does nothing but the https connection
04:27 < Korvin> yeah
04:31 < ChrisPartridge> Korvin: did you go striaght to 0.10? if so, try 0.8
04:31 < Korvin> That fixed it
04:31 < Korvin> updating did atleast
04:32 < hackedy> :D
04:49 < rcombs> does data passed around in streams2 have to be in a particular format, or can it be whatever I want?
04:50 < chilts> whatever you want
04:50 < chilts> take a look at turning the stream into an object mode stream
04:51 < chilts> opts.objectMode = true
04:53 < Seventoes> Are there any modules for mongoose that will generate forms from me, without needing me to redefine all of my validation again?
04:53 < Seventoes> generate forms from my schemas**
05:01 < zacharypch> Hi,
05:02 < zacharypch> using socket,io, io.connect is giving me a 404 on this: "http://localhost:3000/socket.io/1/?t=1366001787131", so the socket.io.js file is loaded, but for some reason this connection is not being made?  
05:03 < zacharypch> having a real problem finding this, SO has a bunch of questions about just getting the JS file served correctly...
05:03 < zacharypch> grateful for any hints...
05:22 < wolfspraul> wow, 900 nicks :-)
05:22 < wolfspraul> I cannot figure out how to loop over mysql query results
05:23 < wolfspraul> I do connection.query('...', function(err, rows, fields) {
05:24 < wolfspraul> but I cannot find documentation on how to continue with rows or fields. some examples only use function(err, rows), others include 'fields'
05:24 < ChrisPartridge> rows should be an array
05:24 < wolfspraul> one example says rows[0].solution
05:25 < n0cturnal> rows.each
05:25 < wolfspraul> but how to access the fields in each row? where are the names of the objects/arrays documents (I mean for rows & fields, I guess err is just a scalar?)
05:25 < ChrisPartridge> in that example, "solution"  is a field name
05:25 < wolfspraul> ahh :-)
05:25 < wolfspraul> first confusion
05:25 < wolfspraul> I thought that's some pre-defined variable name (defined in the object)
05:25 < n0cturnal> 'SELECT 1 + 1 AS solution'
05:25 < wolfspraul> yes yes
05:25 < wolfspraul> :-)
05:25 < ChrisPartridge> rows will be an array of objects
05:26 < ChrisPartridge> with the object keys, being the column names
05:26 < wolfspraul> yes!
05:26 < wolfspraul> that piece of information was missing (in my head)
05:26 < ChrisPartridge> and the "fields" arg, just contains some meta data about the columns and their types afaik
05:26 < wolfspraul> I didn't notice the column name was 'solution' as well
05:26 < wolfspraul> ah so fields is also an array, but one member per column only
05:27 < wolfspraul> so there would be a fields.solution (in this example)?
05:27 < wolfspraul> ok perfect, I made the next step
05:27 < wolfspraul> thanks a lot!
05:27 < ChrisPartridge> yw
05:28 < wolfspraul> I didn't notice that solution was the column name
05:28 < wolfspraul> it's so generic, you may want to pick a more unambiguous (to the newbie reader) name
05:28 < wolfspraul> column_name_from_table
05:28 < wolfspraul> :-)
05:30 < ChrisPartridge> "AS solution" kind of gives it away :P
05:30 < wolfspraul> in the example it's not a table, but that's where I got lost
05:30 < wolfspraul> sure but a lot of people may have this table concept in their minds when reading this
05:30 < wolfspraul> I overlooked this, anyway
05:30 < wolfspraul> just giving feedback
05:30 < wolfspraul> now it's crystal clear
06:24 < wolfspraul> now I have a pure javascript newbie question
06:25 < wolfspraul> I am assigning some of my db strings to an array, but whatever I push from inside the connection.query() is lost outside?
06:25 < wolfspraul> I can do console.log(db_str), but global_array.push(db_str) will not work
06:34 < wolfspraul> hmm. when is the connection.query() actually executed?
06:34 < wolfspraul> it looks like it's executed quite late
06:38 < wolfspraul> ok I moved my processing into the query() function, will understand the real reason later :-) for now it works
06:45 < ChrisPartridge> wolfspraul: because of the very nature of node - all IO related tasks will be async
06:45 < ChrisPartridge> s/will/should
06:47 < wolfspraul> yes :-) still learning
06:47 < wolfspraul> switching from php
06:48 < wolfspraul> I like the fact that I can do minimal servers (and server-client interactions) all in node.js
06:48 < wolfspraul> not having to drag with me the whole big apache+php legacy. let's see whether this all works :-)
06:48 < Katafalkas> does anyone know any reliable ppa for node js 0.8 ? as ubuntu 12.04 and 12.10 both got 0.6, and most ppa's got latest - 0.10
06:53 < ChrisPartridge> Katafalkas: not sure if you can reference prior builds, but you can access previous builds on https://launchpad.net/~chris-lea/+archive/node.js
06:59 < donCams> hey guys
07:00 < Katafalkas> ChrisPartridge: I can see only 0.10 version builds :) 
07:04 < ChrisPartridge> Katafalkas: https://launchpad.net/~chris-lea/+archive/node.js/+builds?build_state=built
07:06 < Katafalkas> ty
07:06 < Katafalkas> 23
07:07 < herbnerder> What's the current recommended way to install on OS X? The pkg from nodejs.org, Homebrew, NVM, etc … 
07:08 < zomg> herbnerder: doubt there's much practical difference beyond the command you run to install
07:09 < herbnerder> Does the Homebrew version still not include npm?
07:09 < mikeyMike> hi
07:09 < mikeyMike> http://pastebin.com/TDbE0TWb
07:09 < jap_> Does anyone know why http requests aren't executed immediately? The requests are made after everything is executed. See here: https://gist.github.com/anonymous/c627878b6246c82a9972
07:09 < mikeyMike> why does it works in that way?
07:09 < mickhansen> mikeyMike: node.js is async
07:09 < herbnerder> and how are updates updates handled with the standard pkg? you just download it manually every time?
07:09 < mickhansen> mikeyMike: you want your response.end to be inside the callback
07:10 < mikeyMike> aaaaaaaaaaaaaaaaah...
07:10 < mikeyMike> let's try....
07:11 < mikeyMike> hm now it's "3hey"
07:15 < zomg> jap_: the loop blocks any callbacks from executing until it has finished
07:17 < jap_> zomg: I even tried just listing a bunch of request.get(...) (not in a loop) and got the same results. Is there anyway I can do requests as they are called?
07:18 < zomg> How did you determine the requests aren't made until everything is done?
07:19 < jap_> zomg: and it's not just the callbacks that are blocked. The actual requests don't happen until after.
07:19 < ChrisPartridge> jap_: look at the "pool" option on request
07:22 < jap_> ChrisPartridge: I'm not sure if that explains why all the requests aren't made until after they are all requested. I think there is 6 sockets by default in the global pool.
07:22 < donCams> hi. anybody here used Sequelize? just wondering how to implement nested associations
07:23 < donCams> table1 > table1_table2_mapping > table2?
07:53 < [AD]Turbo> hi there
07:53 < geNAZt> hi
08:18 < mikeyMike> i wanna return file by node.js i mean when i am doing some ajax connection in JS to my server in nodeJS i wanna to make file downloadable
08:19 < geNAZt> should work
08:19 < mikeyMike> ill make it by
08:20 < mikeyMike> res.writeHead(), ok
08:20 < mikeyMike> but i don't wanna download file with .js extension
08:20 < mikeyMike> how to change that suffix to another on the server-side?
08:22 < geNAZt> http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html
08:23 < geNAZt> or the short way: "Content-Disposition: attachment; filename='$filename'"
08:28 < sha0coder> hi
08:29 < geNAZt> hi
08:29 < sha0coder> i'm getting a  Error: connect EMFILE
08:29 < geNAZt> in which case ?
08:29 < sha0coder> but descriptor limit is not reached :/
08:30 < sha0coder> doing many http
08:30 < sha0coder> get
08:30 < geNAZt> above 65k ?
08:30 < sha0coder> https://code.google.com/p/dirscan-node/
08:30 < sha0coder> with this
08:31 < sha0coder> at errnoException (net.js:646:11)
08:31 < geNAZt> well you need to raise your users fd numbers
08:32 < geNAZt> EMFILE is when the linux kernel says "No more File Descriptors for you"
08:32 < sha0coder> but ulimit -a 
08:32 < sha0coder> open files                      (-n) 4096
08:32 < geNAZt> yes and current opened ?
08:33 < sha0coder> how to see that?
08:33 < geNAZt> lsof | wc -l
08:37 < sha0coder> 6371
08:37 < sha0coder> geNAZt: normal ..
08:37 < geNAZt> and thats more then 4096
08:37 < geNAZt> so he says no
08:38 < sha0coder> true thnkx
08:38 < sha0coder> ulimit should solve it then
08:39 < geNAZt> yes
08:40 < master_op> hi, how can raun a nodejs (expressjs) program on more than one thread
08:41 < geNAZt> master_op: with nodejs cluster: http://nodejs.org/api/cluster.html
08:42 < sha0coder> cluster is more than one process
08:43 < geNAZt> cluster are more processes with ipc between them
08:43 < geNAZt> multithreaded nodejs in one process is impossible
08:46 < angezanetti> hey guys, what is the best way to install & keep  an update version of node.js?  
08:46 < geNAZt> angezanetti: https://github.com/creationix/nvm
08:46 < Havvy> angezanetti: If on Linux, via your package manager.
08:46 < sha0coder> angezanetti:  nave
08:47 < geNAZt> package manager != update version
08:47 < angezanetti> i'm on debain squeeze
08:47 < geNAZt> never use package managers from debian is you want an update version
08:47 < angezanetti> 6.0.7 :p
08:48 < angezanetti> oh, so what i have to compile it ?
08:48 < angezanetti> there is no cool ppa somewhere ?
08:48 < geNAZt> yes nodejs isnt updated anymore since it cannot move up in the repository
08:48 < geNAZt> ppa ? this isnt ubuntu :D
08:48 < angezanetti> yeah, i miss it :)
08:49 < geNAZt> either you compile it by yourself
08:49 < sambarino> why can't node.js be more like ubuntu?
08:49 < geNAZt> or you use some node version manager which compile it for you
08:49 < geNAZt> because ubuntu sucks as a server os :D
08:49 < sha0coder> cya, thnx geNAZt 
08:50 < geNAZt> <3 minimal debian
08:50 < geNAZt> :D
08:50 < angezanetti> a node version manager ?
08:51 < leichtgewicht> you mean a nvm?
08:51 < geNAZt> https://github.com/isaacs/nave or https://github.com/creationix/nvm
08:51 < angezanetti> checkin' 
08:53 < JamesMGreene> Also: https://github.com/visionmedia/n
08:53 < angezanetti> oh it's a rvm like :)
09:01 < angezanetti> nvm also support npm ? 
09:01 < geNAZt> well npm is bundled in node
09:01 < geNAZt> so it also would install npm
09:01 < angezanetti> cool :)
09:06 < leichtgewicht> I wondern when the last breaking changes of npm have been..
09:07 < geNAZt> 1.2.14
09:07 < geNAZt> or so
09:10 < leichtgewicht> Fairly recently!
09:10 < leichtgewicht> Doesn't that make installing older/newer versions of npm dangerous?
09:11 < geNAZt> yes
09:11 < geNAZt> but who says, that it is stable ? :D:D
09:12 < leichtgewicht> So: npm/nave/n are tools to wreck your machine?
09:13 < geNAZt> why should they ?
09:13 < leichtgewicht> Because they are used to install newer/older versions of npm
09:14 < geNAZt> well that should not be that problem
09:14 < geNAZt> since they can switch between them
09:14 < geNAZt> and a 1.2.14 work with node 0.6 - 0.10
09:15 < geNAZt> but 0.6 bundled npm doesnt work anymore
09:15 < geNAZt> due to changes to the npm system
09:16 < narwek> hey
09:17 < leichtgewicht> Good to know.
09:17 < narwek> anybody?
09:19 < geNAZt> hi
09:20  * donCams 's head explodes from sequelize
09:21 < narwek> he geNazt
10:27 < emilsedgh> hi, im receiving an 'end' event on a file descriptor of a device. that seems random. could that be a bug on node?
10:36 < iam5o1> .markov say
10:36 < iam5o1> oo
10:36 < iam5o1> bunge?
10:38 < iam5o1> huh
10:38 < emilsedgh> damn, i cannot find the link to documentation of older versions
10:38 < iam5o1> so . in a channel is not found.
10:39 < iam5o1> .markov say
10:40 < iam5o1> .markov say
10:40 < iam5o1> oh i see.
10:43 < iam5o1> .markov say
10:43 < Bunge_> he sent you here?
10:43 < iam5o1> excellent.
10:43 < iam5o1> bot made with node-irc
10:43 < iam5o1> for my funzies.
10:50 < master5o1> .markov say
10:50 < Bunge_> guys would ask for ID on a holiday the opposite of thanksgiving
10:50 < master5o1> .markov say
10:50 < Bunge_> heater and footer; any ideas?
11:02 < master5o1> .markov say
11:02 < master5o1> .markov say
11:02 < Bunge_> homosexuals this morning?
11:02 < master5o1> .markov say
11:02 < Bunge_> irc or aol
11:02 < Bunge_> I'm trying to come through in the beginner category of traders
11:02 < donCams> hi. anybody here using sequelize?
11:02 < master5o1> .markov say is node.js really cool or what?
11:02 < Bunge_> be a constant frequency sine wave would be awesome if it drops under 70 again
11:03 < master5o1> .markov say i wrote my own irc bot using node-js
11:03 < Bunge_> ape that walks upright is: HILARY DUFF APE SEX!
11:03 < master5o1> >_>
11:05 < davve_> heya.. i want to have a function running with setInterval and different arguments, though it crashes with this message even though i do not use process.nextTick :/ (node) warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.
11:05 < davve_> RangeError: Maximum call stack size exceeded
11:07 < davve_> should i be using child_process.fork() or something?
11:11 < killingmachine> Why does c9.io IDE restart every 4 hours?
11:11 < killingmachine> Or it doesn't?
11:13 < master5o1> .markov
11:13 < Bunge_> Usage: .markov (list|count|probability <float>|say|<words of inspiration>)
11:13 < master5o1> .markov say
11:13 < Bunge_> spankings and nipple clamps shitting on the property of others do
11:13 < master5o1> interdasting
11:13 < master5o1> Bunge_ has all of bash.org loaded into its markov db.
11:14 < master5o1> and a bunch of bitcoin channels as feeders.
11:45 < mikeyMike> hi i have a script in node.js which return some file
11:46 < mikeyMike> on the output
11:47 < davve_> is there a "this" or simillar to refer to module.exports = ?
11:47 < davve_> this module
11:50 < mikeyMike> that script takes parameters from POST
11:51 < mikeyMike> should i do this on the client side with simply form with hidden field
11:51 < mikeyMike> or use ajax?
11:51 < mikeyMike> (i wanna make file downloadable)
11:51 < mikeyMike> when i'm entering server.js file there is a prompt with "Save as" , so it works
11:51 < mikeyMike> when i use ajax it doesn't work
11:58 < siyb> davve_: export the whole module by doing something like: module.exports = new MyModule(); (maybe i misunderstood your question)
11:58 < siyb> davve_: do you want to export a singleton
11:58 < siyb> ?
12:06 < davve_> siyb: naw, just wanted to know which module im using... module.filename sufficed
12:09 < siyb> davve_: aw ok, misunderstood your question completly then ;)
12:10 < davve_> no worries, thanks for answering ;)
12:11 < davve_> my original question was, how to implement multiple polling functions to mongodb (setInterval?) without overflowing
12:11 < davve_> it is really f*cking with me :p
12:45 < Rimi> hi guys, i am new to node and would like some help,  my question is: if i have a .js app that get's some links from a website and then pushes the links into an array is it possible to use the content of the array in another .js app? and if yes : How? i am using "module.exports.links = links;" to output the array and on the other file i use "var file = require("./file"), 	link = file.links; // 
12:45 < Rimi> but console.log(link); returns undefined. Thank you
12:45 < andrew12> maybe you could use a database?
12:45 < andrew12> like redis
12:46 < Rimi> ok so i have to write the data to a file.. i thought i could declare it somehow like a global variable
12:47 < gildean> Rimi: do you mean two completely different processes?
12:47 < Gottox> Rimi: not in that way. As node.js is working asynchronous, you have to inform the 'other' app, that the data is received.
12:47 < Rimi> yeah i believe that the consonle. log executes before it recieves the data
12:48 < gildean> if so, there's no way to share the state between two processes, or at least any simple way, apart from using a datastore like redis
12:48 < gildean> if you mean just getting data from a module, that's pretty easy
12:48 < Rimi> ok guys , :) i thought it would be more simple( for me since i am a total noob)
12:49 < Rimi> i will try to export it as a json string an load it into the other file.. is this a recomended procedure?
12:49 < gildean> Rimi: you didn't really explain clearly enough, are you using two different processes, or a single node process with just multiple modules?
12:58 < mikeyMike> ONE MORE QUESTION
12:59 < mikeyMike> when i'm using that
12:59 < mikeyMike> 'Content-Disposition': 'attachment; filename='+filename
13:00 < mikeyMike> then downloadable file when in "Save as..." Window shows me type of file not mine (like *.exe) but JS (*.js). Can i repair it somehow or not? The filename is good, but Type of file (in that Combobox) is other
13:05 < bajtos> mikeyMike: you have to specify Content-Type header, e.g. 'Content-Type: application/octet-stream'
13:16 < Sven_vB> davve_, about the process.nextTick problem, I think the rightmost part of the error message is what you're looking for: "Please use setImmediate for recursive deferral."
13:19 < davve_> Sven_vB: thing is, i never explicitly call process.nextTick just a few setIntervals within the mongoclient callback
13:50 < riku> is there something special when using child_process module on windows? it seems to trigger the 'close' event even tho the process is still running when using .kill()
14:01 < kam187-rMBP> riku: .kill sends a SIGTERM to the child, you should catch that event and decide if you want to exit or not
14:01 < kam187-rMBP> "SIGTERM
14:01 < kam187-rMBP> The SIGTERM signal is sent to a process to request its termination. Unlike the SIGKILL signal, it can be caught and interpreted or ignored by the process. This allows the process to perform nice termination releasing resources and saving state if appropriate."
14:02 < kam187-rMBP> that's why it triggers the close() event, it's upto u there if you want to actually quit the process i guess
14:02 < riku> oh
14:02 < riku> thank you!
14:14 < kesla> join ##leveldb
14:14 < kesla> aaaaargh
14:14 < kesla> sorry
15:25 < tclarke> having trouble installing a module with npm...headers and libs needed by the build are not in standard locations and I'm not sure how to tell npm to look in the proper include and lib dirs ("CFLAGS=-I/path/to/include npm install foo" doesn't seem to work)
15:33 < guor> isaacbw: it would be great if we get some input from you guys on this issue https://code.google.com/p/v8/issues/detail?id=2254
15:34 < guor> long-running regexps are no issue for chrome, but does it pose a DoS threat for node.js?
15:45 <@isaacs> substack: scripts.install is always a mistake, except for compilation.
15:46 <@isaacs> substack: if you are going to build some stuff that is not platform-specific, then it should do that in a prepublish
15:46 <@isaacs> substack: if you have to download big things, or build stuff, or attach to OS things, you should do that on first-run, not at install time.
15:46 <@isaacs> substack: the reason you're getting that error is because install scripts are run as `nobody` if you're installing as sudo
15:51 <@isaacs> [6~[6~[6~[6~/topic
15:54 < molestier> Hello everybody.
15:54 < molestier> I'm not trying to initiate a hollywar of any sort, as it might looks, but here's the question:
15:55 < molestier> what MVC framework is now better to use on top of express?
15:55 < molestier> I'm looking ar sails, locomotivejs and matador.
15:56 < molestier> or may be i missed something even better?
15:56  * Gregor grabs a sprig of holly and fashions it into a whip.
16:01 < marshall> het node
16:01 < marshall> *hey
16:02 < marshall> can I just paste the shrinkwrap file into my package.json for dependencies?
16:14 -!- Topic for #Node.js: Why can't Node.js be more like Node.js? - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
16:14 -!- Topic set by Nexxy [~emily@unaffiliated/nexxy] [Mon Apr 15 03:08:40 2013]
16:14 <@isaacs> marshall: why would you do that?
16:14 <@isaacs> marshall: (also, no, you can't, different formats)
16:15 <@isaacs> marshall: but you dont' need to.  if there's a npm-shrinkwrap.json file, then npm will use that, and ignore dependencies when installing
16:22 < wesbos> Anyone expereicend with importing a large dataset? http://stackoverflow.com/questions/16019965/insert-large-amount-of-entries-into-mongodb-with-nodejs
16:38 < marshall> isaacs: oh, thanks mate
16:39 < marshall> isaacs: thanks for maintaining node, too. you guys are doing a great job
16:39 < marshall> isaacs: thanks for nodeup too
16:40 < marshall> isaacs: and npm...
16:40 < marshall> sunshine, etc.
16:44 < gildean> wesbos: i'd try to do it with a readStream instead, read the file until there's a newline, make an insert out of it etc.
16:45 < Xymon-Sinclair> is anyone in here in #web?
16:45 < Xymon-Sinclair> I have absolutely no idea why i was just banned, I haven't been active all day and just happened to look over and i was banned by Daemon?
16:48 < sinclair-work> hey
16:49 < gildean> Xymon-Sinclair: you spawned like ten bots at once, that's considered hostile
16:50 < Xymon-Sinclair> o-O o did?
16:50 < Xymon-Sinclair> I did*?
16:51 < Xymon-Sinclair> It must of been a glitch... there should only be one...
16:51 < Xymon-Sinclair> Shit. that means 2 problems,
16:51 < Xymon-Sinclair> Oh damn i did :| tell em i said sorry... wasn't intentional.
16:51 < JohnMcLear> lies
16:52 < Xymon-Sinclair> I really would like to know why it's doing that though... 
16:53 < Xymon-Sinclair> I knew it was for some reason launching 2 every now and then... but i've never had it go past that.
16:59 < gildean> Xymon-Sinclair: you could just query daemon and tell him that
17:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:23 < sadtaco> Is the memory footprint of a string or an object reference smaller?
17:26 < JohnMcLear> I'd guess at string
17:41 < dypsilon> sadtaco, what's heavier, some amount (!) of rice or the bag it's wrapped in?
17:42 < s5fs> dypsilon: leading question, you didn't specify the amt of rice
17:42 < sadtaco> It depends how much the bag weighs compared to a string. That's what I'm asking
17:42 < pachet> what if the bag is made of rice
17:42 < sadtaco> A string is probably like 4bytes+length*2 I'm guessing.  I have no idea how big a reference is. 16bytes?  More?
17:43 < s5fs> pachet: deep
17:43 < sadtaco> Or bits. Eh.
17:43 < s5fs> 32 nybbles
17:44 < kam187-rMBP> in java?
17:45 < dypsilon> sadtaco, dunno, but i would think string is an object so to create a string you'll need a reference for it. But tbh i don't know why you need to optimizie on such micro level.
17:45 < kam187-rMBP> in java 32bit uses 4 bytes, 64 bit uses 8 bytes as a reference
17:45 < sadtaco> Because I have something really big.
17:45 < kam187-rMBP> a string is an object so it's the same
17:45 < sadtaco> But this is javascript not java.
17:45 < kam187-rMBP> the 'object' size depends on the object
17:46 < kam187-rMBP> most languages work the same way, a reference is just a pointer to a object in memory
17:46 < dypsilon> i would guess object reference is smaller
17:46 < kam187-rMBP> it sounds like you want to know how big the object it's pointing to which is a different question
17:47 < kam187-rMBP> there's no difference between a reference to an 'object' vs reference to a 'string', both are exactly the same
17:47 < sadtaco> No.  I wanted to know if it's better to store pointers in array, or strings that are used in getters.
17:47 < dypsilon> kam187-rMBP, i think he is choosing between using a tiny string vs using object refrence for referencing an object
17:47 < sadtaco> Yeah
17:47 < sadtaco> In Java, the reference would definitely be better.  I can't really find information on memory usage in Javascript/Node/V8
17:47 < kam187-rMBP> ahh so reference to string, or the string itself instead?
17:48 < sadtaco> No, I was going to have objs = {'foo':{object}} objs['foo'] getter instead of passing references.
17:48 < dypsilon> sadtaco, if you have to think about that, better think if javascript is the right tool for what you are trying to accomplish
17:49 < sadtaco> Ha.
17:49 < sadtaco> Node is pretty fast, though.
17:49 < dypsilon> not faster as c ;)
17:49 < kam187-rMBP> really arrays hold references to allocated objects, there's no real way to insert random sized things into arrays on a low level
17:49 < sadtaco> But I imagine it might be better than Python or Ruby.
17:49 < dypsilon> true
17:49 < sadtaco> And EVE Online server is programmed in Python.
17:50 < kam187-rMBP> you putting strings into the array is actually an array of references to those strings on a low level
17:50 < sadtaco> I've done some tests on speed of things, and Node is generally really fast. Faster than PHP, Python, and other VMs.
17:50 < sadtaco> Yeah but if you have ['foo', 'bar'] it's creating new strings named those.  Or are you saying if 'foo' and 'bar' exist somewhere else, they're only stored in memory once?
17:51 < sadtaco> With a reference in both spots?
17:51 < Bunge_> in the futujre
17:51 < dypsilon> sadtaco, maybe you could write a v8 addon for that specific part of your programm
17:51 < sadtaco> Hm? To do what?
17:52 < dypsilon> sadtaco, well, sounds like you have a part of your programm which needs such micro optimization, so you could write it in c to be very memory effective
17:52 < dypsilon> just a wild guess
17:52 < sadtaco> It sounds like V8 already does it fine
17:53 < dypsilon> depends on how you define fine
17:54 < dypsilon> v8 is optimized for lots of use cases, therefore needs to make some compromises here and there
17:54 < dypsilon> but than again, no idea what you are building
17:55 < kam187-rMBP> sadtaco: if you create ['foo', 'bar'] on a low level it actually allocates two string 'foo' and 'bar' then stores [@foo, @bar] in the array
17:55 < kam187-rMBP> where @ is a reference to them in memory
17:56 < kam187-rMBP> otherwise if it stored the literal strings in ram as [ f o o , b a r ] what happens when you change foo to foofoo
17:56 < sadtaco> And if you have a second array ['test', 'foo']; then just test is created, and for foo it adds that same reference?
17:56 < kam187-rMBP> it would have to shift 'bar' accross etc
17:56 < kam187-rMBP> no, because it can't know if those two objects are to be identical, if u changed one array it'd change both otherwise
17:56 < sadtaco> That can't be right, since if you changed one foo..
17:56 < sadtaco> Yeah
17:56 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:57 < kam187-rMBP> all i'm saying is if u put a string inside an array, the array actually holds a pointer to the string which is in ram somewhere else
18:01 < dypsilon> I have a JSON config (has to be JSON), but I need to be able to define a callback function in it, how would you do it?
18:02 < dypsilon> I would just pass a value from the config directly to require. That's my best idea right now.
18:03 < raadad> hey guys is there anyway to get teh npm to just spit out json?
18:05 < raadad> ?
18:05 < gildean> raadad: spit out what in json?
18:05 < raadad> npm install --json
18:06 < raadad> will output a json object at the end
18:06 < raadad> but it also spits out the normal stuff
18:06 < kam187-rMBP> u want to just see the .json package info?
18:07 < kam187-rMBP> npm view <package>
18:07 < raadad>  npm install --json
18:07 < raadad> should output the results of the install in json format
18:07 < raadad> but it acutally outputs both
18:09 < Ramone> hey all? any mocha users in here?  I'm trying to figure out if there's a way to run tests in random order...
18:10 < kam187-rMBP> raadad: u probably want to use --silent or play with loglevel
18:10 < kam187-rMBP> npm help config
18:10 < raadad> ill give that a shot 
18:10 < raadad> thanks dude
18:10 < kam187-rMBP> np
18:14 < s5fs> I'm using net.connect, how do I gracefully handle connection errors? I wrapped the net.connect business in a try block, but it's not being caught. Help appreciated.
18:15 < kam187-rMBP> doesn't net have an error event?
18:15 < s5fs> kam187-rMBP: it does, but as a client it doesn't appear to fire
18:15 < s5fs> lemme post some codez
18:15 < kam187-rMBP> what kind of errors do u end up having?
18:16 < raadad> --silent does not work properly :
18:16 < raadad> :(
18:16 < kam187-rMBP> what does it do?
18:16 < s5fs> https://gist.github.com/aulvi/5390075
18:16 < raadad> try: npm install --silent node-expat
18:17 < s5fs> kam187-rMBP: in my case, it throws an ECONNREFUSED error, but I cannot trap on it.
18:18 < kam187-rMBP> hmm, what line does your code exit on that error with?, 81?
18:18 < s5fs> kam187-rMBP: n/m i got it, moved the .on('error') outside of the connected block. 
18:19 < s5fs> someone has a case of the Mondays
18:19 < kam187-rMBP> was going to say that :P
18:19 < s5fs> kam187-rMBP: thanks for being my sounding board
18:19 < kam187-rMBP> http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener
18:19 < kam187-rMBP> was looking at that :P
18:19 < kam187-rMBP> np!
18:19 < s5fs> kam187-rMBP: same, i've got it up as well. the server example is spot on, haha!
18:20 < kam187-rMBP> if it happens again give up till day !== monday
18:20 < s5fs> kam187-rMBP: if coffee doesn't fix it, upgrade to red bull
18:21 < kam187-rMBP> ahaha
18:21 < kam187-rMBP> don't do it! you'll end up like this http://i1138.photobucket.com/albums/n533/nevy1/BashKeyboard.gif
18:22 < s5fs> kam187-rMBP: haha! thankfully, my body has a caffeine fail-safe mechanism, too much and i just dance
18:23 < s5fs> which sucks because i can't really dance
18:23 < kam187-rMBP> it's ok, looks like u can't code either
18:23 < kam187-rMBP> *sorry*
18:24 < context> kam187-rmbp: thats honestly how i feel some days
18:24  * kam187-rMBP <-- most days
18:31 < Fli-c> is Appfog's free app hosting plan free forever? or it's just some long trial, for 1 year or so?
18:32 < s5fs> kam187-rMBP: haha!!!
18:32 < Bunge_> ALL YOU'VE GOT TO MEET YOU
18:34 < AAA_awright> bnoordhuis: I don't terribly appreciate issues being closed before the issue is... closed
18:34 < AAA_awright> It's still unresolved and should be marked as such
18:47 < n0skill> 'sup
18:49 < dypsilon> If I add a listener to an event which already happened, will event emitter ever execute the listener?
18:49 < n0skill> I was thinking of using node.js (and learn btw) for a wireless network node on a raspi :)
18:50 < kam187-rMBP> n0skill: i think someone did do that already, it even worked over ssl, u just need to drop the tls slab size
18:50 < n0skill> nice !
18:50 < AAA_awright> bnoordhuis: If you want me to fork Node.js then please pull out V8 and all this 3rd party nonsense.
18:50 < AAA_awright> bnoordhuis: I'm sorry but this is just silly. I don't even care if you don't want to patch anything, I am asking that the issue remain open if there's a chance that it can be *properly* resolved sometime in the future.
18:51 < n0skill> yeah and do you have any guide for a begninner like me ? That would be awesome :)
18:51 < kam187-rMBP> dypsilon: why would it?  Even if it did, how would it know how far back in time you wanted to handle events for?
18:52 < dypsilon> kam187-rMBP, you are right, but I had this hope...
18:52 < kam187-rMBP> dypsilon: or do you have some kind of race bug and are wondering why your listener is firing on some event that should have happened before u added this listener?
18:52 < dypsilon> kam187-rMBP, nope
18:52 < kam187-rMBP> why do u need that?
18:53 < kam187-rMBP> can't u just add the listener right away?
18:53 < kam187-rMBP> you could make your own event queue and stack up things you want to process later i guess
18:53 < dypsilon> kam187-rMBP, I can't because the listener doesn't have everything it needs right away (in terms of variables).
18:54 < kam187-rMBP> that's just scoping tho.. setup your variables in scope, and put other listeners etc in the same scope, and in this listener just get it to check if those variables are set yet
18:54 < JamesMGreene> dypsilon: Wouldn't be that hard to add... just make an EventEmitter module that keeps all emitted events and replays the pertinent ones to any new listeners
18:55 < kam187-rMBP> if not, ignore the event OR stack it in a queue till u do have them
18:56 < dypsilon> kam187-rMBP, yeah, I think I'll hold the listener unit it's able to retrieve everything it needs, thanks
18:56 < dypsilon> JamesMGreene, thank you
18:58 < dypsilon> *unit=until
18:59 < JamesMGreene> dypsilon: Welcomed
19:06 < AAA_awright> Should there be any reason that matching a regex causes an infinite loop?
19:06 < AAA_awright> Like, my program just halts?
19:07 < AAA_awright> And argh, Node.js can't catch ^C while in an infinite loop
19:07 < AAA_awright> ARGH
19:07 < st_luke> just hit it twice
19:07 < IncipLTN> that doesn't sound right at all
19:07 < st_luke> you probably did something wrong, gist it
19:07 < hydrawat> killall node
19:08 < AAA_awright> No, that doesn't work at all
19:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:08 < AAA_awright> st_luke: The REPL doesn't even catch it the first time to print that message to hit it a second time
19:08 < Bunge_> but you can add yer deets there
19:08 < AAA_awright> But this also affects non-REPL programs
19:09 < st_luke> if you're on os x you can just do killallnode or pkil node if you cant get out of your repl
19:11 < AAA_awright> I have other daemons running though, don't want to kill those
19:11 < AAA_awright> I *am* eventually getting through to the process
19:11 < AAA_awright> It takes like 60 seconds
19:11 < st_luke> then just kill by pid
19:11 < st_luke> you have other node daemons running?
19:11 < st_luke> killall wont kill things not named 'node'
19:12 < Madwill> Hi, i'm reading a lot on node.js and trying to find enough info if it would be worth it for the next iteration of our platform to move from java to node.js for its simplicity/performances
19:12 < AAA_awright> Why doesn't killall have a pretend flag
19:12 < Madwill> i still read that its single threaded and this model does not serve well for a server
19:13 < Madwill> does that still holds ? and how can it serves thousands of request per second if its single threaded ? 
19:13 < st_luke> wtf is a pretend flag?
19:13 < AAA_awright> st_luke: Don't actually perform any actions, just list what you would do
19:13 < Remy> pretend as as in 'test run '?
19:14 < gluxon> Madwill: Node.js is in actuality, not single-threaded.
19:14 < AAA_awright> >> "&lt;http://example.com/about.html&gt;  In particular, it notes\nthat".match(/&lt;(http:\/\/(-\s+|.+)+)&gt;/gi)
19:14 < purr> AAA_awright: Timeout Error: Execution time exceeded 2 seconds
19:14 < Madwill> are each request a thread ?
19:14 < AAA_awright> >> "&lt;http://example.com/about.html&gt; In a, it notes\nthat".match(/&lt;(http:\/\/(-\s+|.+)+)&gt;/gi)
19:14 < gluxon> Madwill: I think it is 8 threads, but that's not the important part.
19:14 < purr> AAA_awright: (object) ['&lt;http://example.com/about.html&gt;']
19:14 < st_luke> are you working on a production machine or something? how many node processes are you running?
19:15 < AAA_awright> Why does the former take 2 seconds, but I remove and the latter goes right away
19:15 < AAA_awright> *remove a single word
19:15 < Madwill> i need to read more on it, do you have antything you can point that would help make decisinos
19:15 < gluxon> Madwill: When you hear someone say Node.js is single threaded, they are referring to the execution of the program.
19:15 < AAA_awright> Not even remove, but change a single word
19:15 < gluxon> Madwill: Node.js written programs will always ran "like" a single thread. The key part is that the single thread is ran asynchronously.
19:16 < gluxon> Madwill: What type of server is this?
19:16 < Madwill> I've read the linkedin post of node.js performance i have no problem with asynchronous process
19:17 < gluxon> Node.js trades multiple processes and/or threads for asynchronous IO. In many cases, that is a hugely beneficial tradeoff.
19:17 < st_luke> that is incorrect
19:17 < Madwill> Its part CMS and part RED5 (for push able calls) and we think we could achieve both with a single server using node.js only keeping red5 for streaming and getting rid of RTMP/AMF for JSON slowly moving towards a more html client
19:17 <@konobi> multiple blasts in boston around the marathon it seems
19:17 < gluxon> st_luke: What is..?
19:18 < AAA_awright> >> "&lt;http://&gt; In particular, it notes\nthat".match(/&lt;(http:\/\/(-\s+|.+)+)&gt;/)
19:18 < purr> AAA_awright: Timeout Error: Execution time exceeded 2 seconds
19:18 < st_luke> gluxon: asynchronous io
19:18 < Bunge_> lately that Zophar is using my 'cock'~#@E Q&amp;!#*(
19:18 < gluxon> st_luke: As a beneficial trade off to multiple threads/processes?
19:19 < st_luke> gluxon: node.js doesn't use async io
19:19 < meuserj> I'm trying to implement a server with Server-Sent Events using NodeJS, but the npm modules are rather sparse on documentation and useful examples... anyone here know of any resources I can look at?
19:19 < Madwill> st_luke isen't async  i/O what node.js is all about by "non blocking"
19:19 < st_luke> sockets & pipes use non blocking io. fs uses thread pool
19:19 < MI6> joyent/node: Ben Noordhuis v0.10 * afbadde : os: handle 256 character hostnames  Fix a (rather academic) buffer overfl (+1 more commits) - http://git.io/Kj40Pg
19:20 < gluxon> st_luke: Ok, how about this? "Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time         applications that run across distributed devices."
19:20 < gluxon> non-blocking IO is same as asynchronous IO.
19:20 < Madwill> taken from the front page
19:20 < meuserj> I'm wanting the server to accept a REST command (using restify) and then send a message to another client.
19:20 < gluxon> Madwill: Exactly :)
19:21 < master5o1> ...
19:21 < Industrial> Howcome this var can be undefined here? I just set it to false .. https://gist.github.com/Industrial/9aa3e59cc80979bab3a2#file-1browserify-js-L13
19:21 < gluxon> st_luke: fs doesn't use async? I'm pretty sure it does unless you tell it not to :-/
19:21 < master5o1> Industrial: javascript scoping rules.
19:22 < master5o1> inside that function you defined var recompile, compile;
19:22 < st_luke> gluxon: thread pool
19:22 < Bunge_> can play with it on my p2pool node at ltc.webboise.com:9237 0% fee to 1% shows hes not taking notes
19:22 < master5o1> that hides the previously defined outside of that function compile = false.
19:22 < Industrial> oops
19:22 < master5o1> it hides it from inside that function scope.
19:22 < gluxon> Madwill: If you guys have the resources to make the switch, I'd say go for it.
19:23 < Industrial> yeah problem lies with livescript. I should more explicitly define my scope there.
19:23 < master5o1> livescript? :O
19:23 < master5o1> huh
19:23 < Madwill> gluxon we have, do you have any recommended read to make sure one does not fall in known pitfall for a massively concurrent environement ?
19:24 < Madwill> like maybe node.js in action ?
19:24 < AAA_awright> How am I supposed to properly write a regex that matches everything up to a sequence of characters? iirc ECMAScript doesn't support readahead
19:24 < Madwill> We have the ressource to make the switch but we don't have the ressource to miserably fail on doing so :P
19:25 < gluxon> Madwill: I learned from http://www.nodebeginner.org/
19:25 < Madwill> Thanks
19:26 < gluxon> Madwill: There are pitfalls with programming asynchronously that's a bit different from common programming.
19:26 < gluxon> Madwill: Ex: while/for loops are rarely seen in Node.js applications.
19:26 < gluxon> Execution is all callback based.
19:26 < samholmes> I get this "Too many connections" error from node-mysql module, which means that I'm forgetting to close a database connection with db.end() somewhere. But I have no idea where! :\
19:27 < gluxon> So, I guess learning the API is also essential, but that's always essential.
19:27 < Madwill> Thanks its duly noted, i'll start right away
19:27 < geNAZt> samholmes: your mysql server cant handle more connections
19:27 < geNAZt> thats the error
19:30 < Bunge_> doesn't belong to US
19:30 < Bunge_> a coworker of mine no questions :)
19:30 < samholmes> geNAZt: Because I set a limit?
19:30 < geNAZt> in the config there is a connection limit
19:31 < samholmes> Yeah, it's set to 151 max connections.
19:31 < samholmes> But, how am I reaching that limit so quickly?
19:32 < geNAZt> pooling ?
19:32 < geNAZt> other applications ?
19:32 < geNAZt> it is a mysql global config
19:32 < samholmes> geNAZt: Nah, I'm not pooling.
19:32 < samholmes> This is how I do:
19:33 < gluxon> samholmes: Any while or for loops?
19:33 < samholmes> I have a simple module that exports a new connection to the database. I use it to get data from "model" modules. Then close it and return that data.
19:33 < gluxon> samholmes: Are you able to post your source?
19:34 < samholmes> gluxon: my entire site? Which part of my source?
19:34 < gluxon> samholmes: Any you think is causing issues. Probably the SQL requests portion.
19:35 < superjoe> when using node-redis, what's the best way to check if an error is "NOSCRIPT No matching script, please use EVAL"?
19:35 < RLa> if you run your node apps on Linode then after recent hacking troubles will you switch to elsewhere?
19:35 < superjoe> should I do a simple string match on err.text?
19:35 < samholmes> gluxon: I use for loops when I need to loop, why?
19:35 < gluxon> samholmes: while and for loops don't play nice with async IO.
19:36 < samholmes> gluxon: Well, I have roughly 24 model files that deal with the database
19:37 < gluxon> samholmes: If you are using while and for, I would know your issue instantly, are you?
19:37 < samholmes> gluxon: for going over data results
19:38 < gluxon> samholmes: Can you post just that for loop, and relevant lines around it?
19:46 < samholmes> gluxon: I just said I use them, I have a bunch. The problem I'm having is a global issue, I haven't the faintest idea where the problem is occurring in the code if any one specific place
19:46 < samholmes> You see what I mean?
19:47 < samholmes> I just get emails about critical errors crashing the site; Too many connections is the only error I'm getting currently.
19:48 < gluxon> samholmes: I do, and this is my guess. Your loops are executing asynchronously. They're calling SQL requests as fast as they can, and not waiting until a request is done before starting another.
19:48 < gluxon> samholmes: That is my guess, I can't say more without looking at source or perhaps more detailed errors.
19:49 < samholmes> gluxon: That I'm definitely not doing. :P
19:49 < gluxon> samholmes: Good :)
19:50 < samholmes> I'm aware of the the distinction between async and sync operations
19:50 < samholmes> Like I said, I'm only using sync for/while loops on result data, not for creating db connections.
19:50 < samholmes> Let, me double check that though.
19:50 < Bunge_> have one of the install in json format
19:51 < gluxon> samholmes: What are the error logs saying? It should be giving a error on the line you're initializing your what.. 152nd connection?
19:52 < samholmes> gluxon: its just logging somewhere in the mysql module, nothing saying where it is in my code
19:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:54 < gluxon> samholmes: Post that issue on StackOverflow with all the information you have on the error. I've never worked with node-mysql, hopefully someone will stop by and check it out with more information.
19:54 < samholmes> gluxon: what db do you work with?
19:54 < Amfy> Possible to "fire" a child_process from a specific (sub)folder?
19:55 < gluxon> MySQL, but that was with PHP.
19:56 < gluxon> I haven't had a use for DB's with Node.js yet.
19:57 < Hotroot> Question about stores and whatnot. I was using connect-redis for Express with the same client as my regular redis calls.
19:57 < Hotroot> I'm now looking at the socket.io redis code, and it looks like they split things up into multiple clients
19:59 < Hotroot> S.io also uses it's own redis store. Can it share with express? Is there a problem with using multiple redis store libs?
20:00 < samholmes> gluxon: I know, I must be doing loops in the controllers when using my models! So, I'll do something like: forEach(function(xyz){ Model('somemodel').method(...) })
20:01 < samholmes> gluxon: so, you're saying that these sync functions are creating tons of connections almost instantaneously?
20:02 < gluxon> samholmes: No I agree with you, they shouldn't be causing issues if they're being used only for data.
20:08 < kam187-rMBP> Hotroot: the libs just connect to redis as clients, as long as they're not using the same room names or anything it doesn't matter
20:09 < kam187-rMBP> i actually use one redis for my data store, and one for room messages
20:09 < Naked_> optimist seems kind of cool - but how does one add a --help option to it?
20:09 < kam187-rMBP> i gave up on socket.io with redistore tho, it leaked like crazy
20:09 < Hotroot> kam187-rMBP: Okay, just feels weird having 2 session stores, 3 redis libs, and like 6 total clients
20:09 < Hotroot> kam187-rMBP: Oh crap, really? I mean, I don't need it, but I use redis already so I figured why not
20:09 < kam187-rMBP> well most session 'stores' just use redis to pass messages around between threads
20:10 < kam187-rMBP> there's a major bug.. so when a new connection comes in, the socket subscribes to the redis channels 
20:10 < Hotroot> This is probably going to end up being a single thread anyway
20:10 < kam187-rMBP> on disconnect it never unsubscribes, and the socket could keeps rising
20:10 < Hotroot> Guess I'll ditch it till I actually need it
20:10 < kam187-rMBP> someone made a patch which they added, then reverted because it broke the test suite
20:10 < kam187-rMBP> i tried the patch and even that doesn't work properly
20:10 < kam187-rMBP> i now just use a sticky-session
20:11 < kam187-rMBP> it's unecesary overhead if it's just one thread anyway
20:11 < Naked_> kam187-rMBP: if you are looking for socket.io but leaking and stuff is getting to you: https://github.com/josephg/node-browserchannel
20:12 < kam187-rMBP> Naked_: yeah i did see that and socketjs,but i've already rolled out socke.io to the client apps
20:13 < kam187-rMBP> i had my socket.io + node sucking up a ton of ram, maybe 16gb over 2 days, now it's stable at 1.5 gb (that's total server ram, so minus 800mb or so for the OS etc)
20:13 < Bunge_> packet and chew bubblegum
20:14 < Hotroot> So, also, second question. I like express logs, but I'm not sure if I should use redis for storing those, or just write to a file
20:14 < kam187-rMBP> redis is actually insanely fast
20:15 < Hotroot> The log would probably end up huge over time, but I'm worried about a failure wrecking the logs
20:15 < Hotroot> So in that sense redis seems better, but I guess it really shouldn't be in memory
20:16 < kam187-rMBP> oh is it an actual long running log? then i'd just dump it to file
20:16 < kam187-rMBP> email it to yourself periodically and clear it
20:16 < kam187-rMBP> or tar it and clear it
20:17 < Hotroot> If I have a file stream open, do I have to do something special to prevent corruption on bad shutdown?
20:17 < Hotroot> Also, should it build up chunks or just write as it comes in?
20:19 < samholmes> gluxon: well, I am looping over my model functions which are async and do db stuff
20:27 < kam187-rMBP> Hotroot: if you're that worried you might be better off just printing to console, and redirecting it at the unix level to a log file
20:28 < kam187-rMBP> that way no matter what uncaught error you have you'll still catch it
20:28 < Hotroot> I'm not super worried
20:28 < Hotroot> Just curious about the proper way to do some of these things
20:29 < kam187-rMBP> for my stuff curently i actually print a few things to console, and just use 'forever' to keep it running - i redirect output to a log file
20:29 < kam187-rMBP> so if it every crashes i can go check for this rare case that i missed
20:29 < kam187-rMBP> *ever
20:30 < Hotroot> Hmm. I'll do some tests with purposely crashing it, few things I'm going to have to just see.
20:30 < niix> What's a better way to do this? http://hastebin.com/bonuquqeba.js
20:31 < niix> I feel like it's kind of cheap doing it as a callback
20:32 <@mbalho> if (err) return callback(err) ... then later ... callback(false, lists)
20:32 < niix> mbalho: so do var getLists = function(callback, err)
20:32 <@mbalho> other than that it looks fine, very much in the node core style
20:33 <@mbalho> niix: no you dont have to do that
20:33 < Bunge_> sides through the verification i did neither..
20:33 <@mbalho> niix: it would change getLists(function(lists) { to getLists(function(err, lists) {
20:33 < niix> mbalho: ah ok in the get for the index
20:40 < mrvisser> anyone use node_redis in production?
20:44 < MI6> joyent/node: Ben Noordhuis v0.10 * d58ee7e : os: unbreak windows build  Windows doesn't have MAXHOSTNAMELEN. Introduce - http://git.io/0NGleA
20:46 < kam187-rMBP> mrvisser: yes
20:46 < Bunge_> C:\My Documents\My Received Files\dogbert1.jpg
20:47 < kam187-rMBP> mrvisser: took some work to deal with the memory leakage!
20:47 < mrvisser> kam187-rMBP: if you shut down your redis server normally, does the reconnect cycle go for you?
20:48 < mrvisser> or do you enable anything for it?
20:50 < kam187-rMBP> hmm i'm not sure actually i have redis auto start as a service, along with a startup script running forever
20:52 < brycebaril1> mrvisser: what are you trying to ask about node_redis?
20:53 < kam187-rMBP> mrvisser: i use one instance for my data store, and another for room messages + socket.io + ssl
20:53 < mrvisser> brycebaril: I'm having a problem where when I kill redis, my server doesn't start going into a reconnect cycle
20:53 < brycebaril> your node_redis client you mean?
20:54 < mrvisser> right, sorry. my *client* doesn't start a reconnect cycle
20:54 < kam187-rMBP> did u bind to 		redisclient.on("error", function (err) { ?
20:54 < mrvisser> I do, but it isn't getting fired
20:54 < mrvisser> it's "end" which is being fired
20:54 < brycebaril> That shouldn't be necessary, in my experience if you kill redis it will attempt to reconnect & if you start redis back up again soon enough it will be fine.
20:54 < kam187-rMBP> client will emit end when an established Redis server connection has closed.
20:55 < kam187-rMBP> ^^ sorry that's a quote, so i guess redis gracefully killed the client
20:55 < kam187-rMBP> error is probably for when it can't establish a connection in the first place
20:55 < mrvisser> I'm connecting through HA proxy, I suspect HA proxy is gracefully closing a client connection when the server connection dies
20:55 < mrvisser> so I'm getting "end" on the client side when I've even kill -9'd my redis server
20:56 < mrvisser> and it seems node_redis doesn't try to reconnect when it has received an "end". only "error" ?
20:56 < kam187-rMBP> can't u do it yourself inside the listener?
20:56 < brycebaril> mrvisser: node version?
20:56 < mrvisser> 0.8.23
20:58 < kam187-rMBP> "retry_max_delay: defaults to null. By default every time the client tries to connect and fails time before reconnection (delay) almost doubles. This delay normally grows infinitely, but setting retry_max_delay limits delay to maximum value, provided in milliseconds."
20:58 < kam187-rMBP> how long do u wait before u restart redis, maybe that delay has got pretty large by then
20:58 < kam187-rMBP> try fixing it to something like a second to test it
20:59 < mrvisser> kam187-rMBP: I kill the server as I tail my app server logs
20:59 < kam187-rMBP> yeah i mean how long between kill and restart of redis?
20:59 < mrvisser> I never start redis
20:59 < mrvisser> I just wait
20:59 < kam187-rMBP> oh do u expect 'error' to fire and look for that?
21:00 < gnarf> @isaacs great talk! <3 JIFASNIF
21:00 < mrvisser> node_redis emits "Redis connection gone from end event.", then doesn't retry
21:00 < mrvisser> kam187-rMBP: yes, that's what I expect
21:01 < mrvisser> but I get the log message that the server is shutting down, and I don't get anything after that.
21:01 < kam187-rMBP> hmm yeah sounds like that's its normal behaviour then maybe.  you'll probably have to handle it yourseld in the end event
21:03 < mrvisser> I don't think it's expected. Code review shows the client wants to try and reconnect unless a QUIT command or "connection.end()" has been invoked
21:04 < kam187-rMBP> lets check node_redis source...
21:07 < kam187-rMBP> https://github.com/mranney/node_redis/blob/master/index.js
21:07 < kam187-rMBP> line 432 is probably the culprit
21:07 < alessioalex__> hey guys
21:08 < alessioalex__> anybody here that can help me with an Ace editor issue? ;-)
21:08 < mrvisser> kam187-rMBP: why? the only time `closing` is set to try is when a QUIT or connection.end() is invoked, as I mentinoed earlier
21:08 < kam187-rMBP> hmm 755 it only gets set if client sent quit
21:08 < brycebaril> kam187-rMBP: that line should only be true if client.end() is used (works in 0.8.x, broken in 0.10.x currently) or client.quit() is used
21:08 < kam187-rMBP> mrvisser: just talking out loud while i was reading the code
21:10 < mrvisser> fwiw, I create the redis connection with no options (undefined)
21:10 < kam187-rMBP> turn on debug mode and see what you get
21:10 < kam187-rMBP> yeah it defaults to reconnect with no options
21:17 < brycebaril> mrvisser: var r = require("redis").createClient(null, null, {max_attempts: 50}).on("error", console.log).on("reconnecting", console.log)
21:17 < brycebaril> Looks like you do need to use max_attempts and at least an error handler, the reconnecting handler is nice for accounting purposes.
21:18 < mrvisser> I have a error handler which logs output, and it doesn't end up outputting anything
21:18 < mrvisser> I'll attach the max_attempts, is it busting the reconnect process without having out?
21:18 < brycebaril> quite possibly. I haven't looked at that recently enough for it to be fresh
21:19 < mrvisser> seems like it might bypass. but the log on reconnecting I don't have, which may be very helpful
21:19 < kam187-rMBP> if (this.max_attempts && this.attempts >= this.max_attempts) {
21:20 < kam187-rMBP> that logs to console console.error("node_redis: Couldn't get Redis connection after " + this.max_attempts + " attempts.");
21:20 < kam187-rMBP> otherwise contines, so you probably don't need to set max_attempts
21:24 < retnuh> anyone know of a decent wrapper for handling git repos in node?
21:25 < mrvisser> it looks multiple reconnect cycles may be starting concurrently under load
21:37 < faceleg|work> hey people, how to clone an instance of a "class"?
21:37 < belak> Is there a way to get all incoming messages with socket.io?
21:37 < belak> I'm trying to use socket.io as a relay for a generic socket connection... and I was just wondering if there was a good way to do that so I can pass all the messages
21:38 < faceleg|work> <<
21:39 < faceleg|work> >> function c() {}; var a = new c(); b = new c(); console.log(a instance of c, b instance of c);
21:39 < purr> faceleg|work: SyntaxError: Unexpected identifier
21:39 < faceleg|work> lame 
21:39 < faceleg|work> but you know what I mean
21:40 <@isaacbw> no, what do you mean
21:40 <@isaacbw> >> function c() {}; var a = new c(); b = new c(); console.log(a instanceof c, b instanceof c);
21:40 < purr> isaacbw: undefined; Console: true, true
21:41 < faceleg|work> isaacbw: I realise I am an idiot
21:41 < faceleg|work> and my example is meaningless
21:41 < faceleg|work> I mean how to clone an instance of a class
21:41 < faceleg|work> in JS
21:41 <@isaacbw> I still don't know what you mean
21:41 <@isaacbw> 'oh okay, I was trying to figure out what your example had to do with cloning
21:41 < faceleg|work> you know jquery has $.extend
21:41 <@isaacbw> there's no out of the box way to do it
21:42 < faceleg|work> how to do that with a clone
21:42 < faceleg|work> man I'm not making sense
21:42 < faceleg|work> yeah that's what I thought
21:42 < faceleg|work> ok, thanks
21:43 <@isaacbw> you're treading in deep water trying to do that in javascript
21:44 <@isaacbw> I would recommend rethinking the problem and avoiding the immediate OO solutions
21:45 < faceleg|work> yeah same
21:45 < faceleg|work> thanks, asking for  colleague
21:45 < kam187-rMBP> faceleg|work: http://stackoverflow.com/questions/8445776/javascript-cloning-a-class-instance
21:45 < faceleg|work> who doesn' tkonw the wonder of the node js irc
21:45 < faceleg|work> kam187-rMBP: yes I've seen that one thank you :)
21:45 < mrvisser> wow, I think I know what's happening
21:46 < kam187-rMBP> faceleg|work: so what's the problem exactly?
21:46 < mrvisser> kam187-rMBP brycebaril: I think it's my load test that I'm running. When redis goes down, it gets marked as not ready, in the meantime my test continues to try and fire reads and writes.
21:46 < mrvisser> when redis is unavailable, the process of firing reads and writes never does any I/O, so it gets stuck in the same process tick
21:47 < faceleg|work> colleague wants to know if it is possible to clone an instance of a class
21:47 < faceleg|work> but it's not posisble (or shouldn't be done)
21:47 < mrvisser> so no timeouts or anything get an opportunity to be executed
21:47 < kam187-rMBP> ahh
21:47 < mrvisser> no retries, no async (bunyan) logs in my app such as "reconnecting" or anything get an opportunity to fire.
21:47 < mrvisser> so i basically just need to add a process.nextTick I think in my test
21:49 < kam187-rMBP> faceleg|work: http://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object
21:49 < kam187-rMBP> that probably explains the reasoning best
21:50 < faceleg|work> kam187-rMBP: yes that is my opinion too, thank s;)
21:50 <@isaacbw> faceleg|work: oh okay. Yea, I think the best answer is 'don't do it'
21:51 < faceleg|work> isaacbw: kam187-rMBP yes. my colleague will not accept this. I leave hte situation now shaking my head
21:51 <@isaacbw> but I suppose if you really wanted to you could make it work pretty well just copying everything over
21:51 < faceleg|work> yeah
21:51 < faceleg|work> that's not really what he's after
21:51 < kam187-rMBP> yeah, basically there's no generic way to do it, because there are too many cases you can't guard for
21:51 < kam187-rMBP> if u know what the object is, its realtivly trivial
21:52 < faceleg|work> yeah
21:53 <@isaacbw> does he want a deep copy?
21:53 < faceleg|work> yeah he does
21:54 < faceleg|work> he wants $.extend for class instances
21:54 <@isaacbw> tell him he's a turd
21:54 < mrvisser> zing!
21:54 < faceleg|work> lol
21:54 < faceleg|work> I'll take that under advisment
21:55 < mrvisser> faceleg|work: can you define a class instance?
21:55 < yardi> Hello, I have very little javascript background, mainly I worked on backend side using python and ruby, my question is that should I master javascript client side programming to master the server side (backend) programming?
21:55 < mrvisser> faceleg|work: what I have in my head is extending the prototype object ?
21:56 <@isaacbw> yardi: no, you don't need to master DOM shit to master javascript
21:56 < faceleg|work> yardi: no
21:56 < yardi> isaacbw: cool :) I am very interested in nodejs.. any standard book to start with?
21:56 <@isaacbw> not really
21:56 < faceleg|work> isaacbw: http://stackoverflow.com/questions/16024940/how-do-i-clone-a-javascript-class-instance
21:57 < faceleg|work> yardi: get an idea of waht you want to build
21:57 < faceleg|work> then build it
21:57 < faceleg|work> learning all the way
21:57 <@isaacbw> if you need a book, just get a good book on javascript and then read through the node.js api docs
21:57 < sandfox> Does anyone have any pointers/examples of organising large node.js apps. I need some examples or somewhere to start researching to counter a colleague who has built a Zend Framework style app in node.js and is making a huge mess (imho)
21:58 < belak> Since it looks like the socket.io channel is pretty much dead, where should I be asking?
21:59 < ryanaz> So why don't any of Amazon's aws-sdk node examples work?  
22:00 <@isaacbw> yardi: node.js itself is pretty simple if you have a good grasp of javascript
22:00 < Bunge_> the price is between 5 to 7 inches in length and 1 Roll of duct tape.
22:00 < plato> creationix: i need to do `sudo forever app.js` using the node binary installed by nvm
22:00 < plato> basically, this issue: https://github.com/creationix/nvm/issues/43
22:00 < ryanaz> I can't seem to find a simple s3 putObject for aws-sdk … their examples are lame.
22:00 < plato> i placed the aliases mentioned at the bottom of nvm.sh but I still get 'comand not found' when I try sudo forever app.js
22:02 < ryanaz> How do I stream a file into "Body" to send ?  http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3/Client.html#putObject-property
22:02 < AAA_awright> isaacbw: DOM "shit"?
22:03 < puckey> We launched our latest interactive music video - using Node.js in the back end: http://donottouch.org
22:05 < plato> creationix: ha! nvm I figured it out, i forgot to restart my terminal or resource my .bashrc
22:05 <@isaacbw> puckey: it's taking a really long time to load
22:05 <@isaacbw> oh, there it is
22:05 < ryanaz> puckey: that's interesting .. is that realtime all the cursors? 
22:05 < ryanaz> all the pointers?
22:06 <@isaacbw> welp
22:06 < ryanaz> How do I stream a file into "Body" to send ?  http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3/Client.html#putObject-property
22:08 < ryanaz> According to this document I need to send the files up in { Body:  (BUFFER) } … 
22:08 < ryanaz> how do I load a file into Body to be streamed properly ?? 
22:08 < ryanaz> http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3/Client.html#putObject-property
22:09 < puckey> darn - there went my battery power : )
22:10 < puckey> ryanaz: no, we composite the cursors to video using node.js
22:10 <@isaacbw> puckey: I found it hard to follow the instructions because of the cursors obscuring the view. You should let people do it once without the cursors, then let them watch the composite after
22:10 < puckey> everything is hosted on s3 and vimeo.. users upload cursor data to s3 using signed urls
22:10 <@isaacbw> and maybe do some culling of all the cursors that never move
22:11 < puckey> isaacbw: I know.. we will probably turn down the amount of cursors we allow into the video
22:11 < ryanaz> Hey guys how do I make this work?  http://pastebin.com/4KK3ZF8s
22:11 < puckey> we already cull.. but could do some more
22:11 <@isaacbw> you could also do something like a heatmap, so don't have actual cursor images
22:11 <@isaacbw> or maybe small green dots
22:11 < ryanaz> right now this works fine to put the contents of the file of Body: that says "Hello!" … how do I actually upload a "file" ? 
22:11 <@isaacbw> anyway, very cool :)
22:11 < ryanaz> isaacbw: you will know the answer to this question …  
22:11 < puckey> hehe yeah we will do a version like that.. we have gigs of cursor data to play with
22:12 < puckey> perhaps we should open source the cursor data - hm.
22:12 < ryanaz> isaacbw: how do I actually read a file into "Body" instead of just the words "Hello!"  http://pastebin.com/4KK3ZF8s
22:12 < puckey> at one point we were getting 15k concurrent visitors today
22:12 <@isaacbw> ryanaz: I haven't used the aws sdk. Sorry
22:13 <@isaacbw> maybe base64 encoding
22:13 < plato> ryanaz u need form(enctype='multipart/form/data') in your client page... and if you use express, it will go to req.files.elementName
22:13 < ryanaz> plato: I have the file part done on the client side.
22:14 < plato> sry ryanaz i didnt see paste till now
22:14 < plato> no experience with AWS :(
22:14 < ryanaz> plato: just trying to actually do the upload part.  If you look at the paste bin  ( http://pastebin.com/4KK3ZF8s ) and their documents ( http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3/Client.html#putObject-property ) it just says I need to put the info into 'Body" 
22:14 < ryanaz> plato: if you look at the past bin example it is uploading the contents of "Body" into the file.  
22:15 < ryanaz> plato: It feels like I need to do some sort of "createReadStream" thing ?
22:16 < plato> maybe you can pipe it that would be nice
22:16 < ryanaz> their example shows that for  a "read", but it doesn't work right.. their example gives errors in node.  
22:16 < plato> oh body is a buffer
22:16 < ryanaz> right
22:17 < ryanaz> so how do I attach a createReadStream in that?
22:17 < plato> so yeah, read your file into the buffer and pass that as Body
22:17 < ryanaz> how? :) 
22:17 < plato> idk look up docs for fs 
22:17 < plato> is there a bot that can give docs for fs?
22:18 <@isaacbw> we could use a few more canned answer bots
22:18 < plato> ryanaz: http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback
22:21 < ryanaz> hmm
22:21 < chilts> ryanaz: might be worth taking a look at connect-stream-s3
22:21 < chilts> it'll upload your files to S3 automatically ... after bodyParser() runs (so it'll stream the files saved into /tmp/ for you)
22:21 < chilts> I wrote it, uses AwsSum
22:23 < plato> Neat
22:28 < ryanaz> chilts: awesome
22:28 < ryanaz> i got it working ..   http://pastebin.com/xMWb2SMv
22:29 < ryanaz> chilts:  How is calling this after the file uploads different than the connect-stream-s3 ? 
22:32 < faceleg|work> isaacbw: "Stack gets unwound - Error().stack doesn't tell you much
22:32 < faceleg|work> "
22:32 < faceleg|work> I foudn stacks were helpful enough sort of?
22:37 < chilts> ryanaz: it's not, but I think it's easier since it takes care of a few things for you
22:37 < chilts> anyway, looks like you're done
22:38 < chilts> connect-stream-s3 is middleware so you can just get it to do stuff prior to you ending up in your final route, and it's all already happened
22:39 < chilts> hackedy: thanks for retweeting! :)
22:44 < hackedy> chilts: what when where why?
22:49 < hackedy> ugh isaacs is so busy "talking" at "txjs" come back isaacs
22:49 < asterick> Question: I'm opening ~60HTTP requests simultaniously in node using http.request(...), and it appears that the module is requesting the individual elements sequentially rather than all at once (this is a load test script).  Is this normal behavior?
22:50 < asterick> note I set the agent to null so it doesn't pool them
22:50 < asterick> agent: false, not null
22:51 < asterick> correction, was reading the traffic wrong. NVM
23:06 < ryanaz> chilts: so I have the files uploading in the amazon s3 storage buckets, but i can't see them on the web.  seems like permissions issues, saying something about XML, know anything about this?
23:09 < owen1> i am setting up node.js consumers that poping up items from RabbitMQ. should i have 1 node proccess per machine or is it better to have a fet?
23:09 < owen1> few
23:10 < owen1> a consumer will send the messagee to an ftp server or an http endpoint (and also save some stats + failurs to MongoDB)
23:14 < chilts> ryanaz: you need to make them public-read
23:14 < chilts> it's an ACL thing on PutObject
23:15 < Technodrome> Good day
23:15 < Technodrome> express still the main framework? 
23:15 < faceleg|work> GOOD DAY
23:16 < faceleg|work> there are many frameworks
23:17 < Azimi> Ive been trying to use https://github.com/thedjpetersen/subway
23:17 < Azimi> How can i edit the interface efficiently
23:17 < Azimi> ?
23:18 < master5o1|work> .markov say
23:19 < Technodrome> faceleg|work: express is still the de facto choice though right? 
23:20 < faceleg|work> AFIAK
23:20 < faceleg|work> as far as I know
23:20 < Technodrome> thank you faceleg|work , those as the answers I like 
23:20 < faceleg|work> lol
23:20 < faceleg|work> I mean
23:20 < faceleg|work> express is what I use
23:21 < chilts> many people are using express, but flatiron and hapi are also good alternatives
23:21 < faceleg|work> I used flatiron but had trouble
23:21 < chilts> worth a look to see
23:29 < dypsilon> hapi hapi joi joi!
23:29 < belak> Are there any good books about node.js?
23:30 < IncipLTN> I'm just a beginner myself but "Smashing Node" seems to be pretty good
23:31 < Technodrome> node is a one day learning session
23:31 < Technodrome> you probably just need to actually learn javascript
23:31 < Technodrome> javascript is not pick up and go unlike say PHP 
23:31 < dypsilon> +1
23:32 < Technodrome> faceleg|work: what is the popular way of accessing data these  days? ORM? most people using raw  sql? if so what library 
23:33 < belak> Technodrome: I've done a bit of work with js... just not server side
23:33 < Technodrome> my statement still stands :) 
23:35 < belak> I'm just not good at learning from documentation... I do best with tutorials and books...
23:35 < dypsilon> belak, 1. you don't really need a big book to learn node, just pick some tutorials and you'll be fine. 2. lots of books are outdated. 3. most valuable knowledge sits on npm and in the source
23:36 < Technodrome> eloquent javascript 
23:36 < Technodrome> ^^ 
23:36 < dypsilon> belak, that said here is _a_ guide: http://nodeguide.com/
23:37 < Technodrome> dypsilon: ruined him! 
23:37 < dypsilon> hm?
23:37 < belak> Thanks for the tips. I'll be sure to go through elequant js first, though the first few chapters seem to be reviewing for loops... which are pretty standard
23:38 < faceleg|work> Technodrome: I've used mongoose (sorry was afk)
23:39 < Technodrome> belak: make sure you understand the object model (biggest thing) 
23:39 < dypsilon> belak, eloquent js is a must, read it. Also I would recommend http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/
23:39 < dypsilon> and read the node docs through
23:39 < faceleg|work> also understand that JS OOP is not standard OOP, and you shouldn't always try to use it for everything
23:39 < Technodrome> faceleg|work: you a big fan of mongo db?
23:39 < faceleg|work> Technodrome: no it was just the first one I found, and for my project I needed a flexible doc store over a schema-bound one
23:40 < faceleg|work> mongo is the NoSQL db I'm familiar with
23:40 < dypsilon> with mongodb i don't need no stinking orms :)
23:41 < owen1> Technodrome: after u'r done playing with express try using node without it.
23:41 < Technodrome> owen1: you mean like writing the http server myself?
23:42 < owen1> Technodrome: node have http library with a function called createServer()
23:42 < Technodrome> yes
23:42 < owen1> Technodrome: many people using it without express
23:42 < Technodrome> i'm aware, yep 
23:42 < Technodrome> express is pretty light though
23:42 < Technodrome> and seems like  de facto standard for it 
23:43 < owen1> i'll write a blog post about that when i'll get a chance
23:43 < belak> I think what's gonna mess with me the most is the lack of standard scope
23:44 <@isaacbw> what do you mean
23:44 < niggler> isaacbw std:: from C++ :P
23:44 <@isaacbw> oohh
23:44 <@isaacbw> heh
23:44 < belak> Well, C, C++, Java, PHP, Go... most other languages
23:45 < belak> Well, most other C style languages
23:45 <@isaacbw> I think the only one of those with a standard scope is c++
23:45 < Technodrome> just don't worry about it belak  
23:45 < Technodrome> I think imma go just raw SQL guys heheh 
23:46 < dypsilon> Technodrome, best choice
23:46 < Technodrome> i know that scares people these days, but its still just as reliable 
23:46 < niggler> who is scared of sql Technodrome 
23:46 < chilts> I think it's better (for a lot of cases)
23:46 < dypsilon> people are not scared, they just hate it
23:47 < chilts> I don't know how people can hate something that is faster than the other stuff :)
23:47 < faceleg|work> I'd rather raw SQL 
23:47 < faceleg|work> with mongo I don't care
23:47 < dypsilon> sql is a an unnecessary
23:47 < dypsilon>  abstraction nowadays
23:47 < hackedy> dypsilon: what do you mean
23:48 < faceleg|work> I would vastly prefer raw SQL over any ORM I've seen dealing with SQL
23:48 < niggler> the idea of a financial institution using mongodb is horrifying
23:48 < faceleg|work> lol
23:48 < hackedy> do you mean "SQL the language" is an unnecessary abstaction
23:48 < dypsilon> hackedy, yep
23:49  * Technodrome runs from the flame war
23:49 < Technodrome> SQL isn't bad, i even write most of my queries before hand, so its like a one take go pretty much :) 
23:50 < faceleg|work> OMG have any of you use doctrine?
23:51 < faceleg|work> bleagh
23:51 < dypsilon> you know it's like drones using speech to communicate in star wars, why to hell do they do the whole text to speech <-> speech to text routine if they could just use bluetooth or something like that
23:53 < dypsilon> i feel the same when i have to concatinate my values into a query just for the rdbms to parse it on the other end and do something
23:55 <@isaacbw> it's going to get concatonated and parsed regardless of whether you do it in application code
23:55 <@isaacbw> sql is just a standardized transport
23:56 < ChrisPartridge> so much sql hate recently
23:56 < dypsilon> faceleg|work, doctrine used to be cutting edge brand new awesomesauce orm back in the day i used php :)
23:56 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:56 < dypsilon> isaacbw, true, not a very machine friendly though
23:59 < Technodrome> actually stupid question for me, how do you guys send query results to a template, the mysql module for instance, queries are functions in themselves, not exactly just like an array returned in say Python ? 
--- Log closed Tue Apr 16 00:00:08 2013
