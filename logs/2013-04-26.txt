--- Log opened Fri Apr 26 00:00:11 2013
--- Day changed Fri Apr 26 2013
00:00 < dypsilon> what do you mean, it doesn't properl handle POST?
00:00 < conphile> as far as I can tell, it's reading my JSON post data and then discarding it, and this is a known bug
00:01 < dypsilon> wow, that's a serious one
00:02 < conphile> https://github.com/flatiron/director/issues/81
00:05 < dypsilon> conphile, , seems like they found a solution finally
00:07 < dypsilon> im going to bed, bye
00:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:37 <@isaacs> isaacbw: you're writing tap stuff?
00:37 <@isaacbw> isaacs: yea. I some time digging through node-tap but broke down and rolled my own
00:37 <@isaacbw> heh
00:38 <@isaacs> isaacbw: i was telling ljharb the other day that he should just rewrite node-tap
00:38 <@isaacs> isaacbw: i think node-tap has the correct API for a node test lib thingie, but it's kind of awful beyond that.
00:38 <@isaacbw> I wrote a framework with a slightly varied API that I like a little more, and then a separate package with just a test runner
00:39 <@isaacbw> https://github.com/isaacbwagner/node-runtests
00:39 <@isaacs> isaacbw: neat!  that could go handily wiht tt
00:40 <@isaacs> isaacbw: i run tt tests with node-tap
00:40 <@isaacs> which is a bit silly
00:40 <@isaacs> but tt doens't have a tap parser.
00:40 <@isaacs> i feel like with streams2 i could have written tap so much more easily.  i kinda wanna do it again
00:40 < kenperkins> isaaception
00:40 <@isaacbw> tt?
00:40 < kenperkins> you two aren't supposed to talk, you ruin the illusion
00:41 < chilts> kenperkins: agreed! :)
00:41 <@isaacbw> oh, tap-test
00:42 <@isaacbw> it seems like the power of tap is modularity, so having a separate test runner that plays nicely with a variety of tap producers is valuable
00:43 < chilts> definitely, Perl's Tap ecosystem is great and it's lovely to be able to pick and choose which testing thing you want to use, yet still have the same format
00:46 < sorensen> whats the benefit of tap vs mocha?
00:51 < sayd> starPause did you get the version /install figured out?
00:52 <@isaacs> isaacbw: no, tt.  http://npm.im/tt
00:52 < pluma> sorensen: What's the benefit of apples vs oranges?
00:53  * isaacs meetup-ing &
00:53 < sorensen> pluma: always appreciated
00:53 < pluma> sorensen: You're welcome.
00:53 < sorensen> thanks ;)
00:54 <@isaacbw> isaacs: oh, that makes much more sense :P
00:55 <@isaacbw> you should plug runtests in the readme
00:55 <@isaacbw> :D
00:56 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:11 < deoxxa1> i seem to remember there being an npm irc channel
01:11 < deoxxa1> was that a dream?
01:11 < deoxxa1> like, a channel where packages are announced etc
01:12 < Technodrome> is adding this.somemethod to an object and object instance.somemethod = function etc , the same thing? 
01:12 < Technodrome> both are properties?
01:13 < alexguan> Any zookeeper developers here? I just published a pure javascript zookeeper. Check it out if you are interested https://npmjs.org/node-zookeeper-client
01:13 < alexguan> zookeeper client*
01:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:19 < ljharb> alexguan: can you throw travis CI on there for node 0.6, 0.8, and 0.10?
01:19 < ljharb> i'll send it to some coworkers who use zookeeper
01:19 < alexguan> yeah, planning to adding travis support
01:19 < ljharb> sweet
01:19 < alexguan> it's used internally at yahoo right now
01:20 < ljharb> zookeeper is?
01:20 < ljharb> or your node module
01:20 < alexguan> both
01:20 < ljharb> twitter also uses zookeeper, but not in node - yet :-)
01:21 < alexguan> hope this helps :D
01:22 < chilts> alexguan: your profile on NPM points to a git.corp.yahoo thing which I guess is internal : https://npmjs.org/~alexguan
01:23 < alexguan> ah, forgot to change it
01:23 < alexguan> just updated :D
01:23 < alexguan> thanks for pointing it out
01:23 < keyosk> Err : https://github.com/https://github.com/alexguan ^^
01:24 < ljharb> the github field just wants a username
01:24 < ljharb> it'd be nice if it parsed it out when you paste the url tho
01:24 < alexguan> ...
01:24 < alexguan> updated again
01:24 < keyosk> There you go :)
01:31 <@isaacbw> I forget who recommended coffivity to me, but this is wonderful
01:32 <@isaacbw> I just put it underneath everything else and it makes me heaps more productive
01:32 < ljharb> you should use coffee-filter
01:33 <@isaacbw> I'm not coming up with anything when I do a search for that
01:34 < jdelgado> isn't that a ruby gem?
01:35 < jdelgado> perhaps this is the reference? http://mgeraci.github.io/Coffee-Filter/
01:35 < ljharb> no, one sec
01:35 < ljharb> https://npmjs.org/package/coffeefilter
01:36 < Bergle_2> awesome lib lol...
01:36 < ljharb> best ever
01:36 < keyosk> Hah.. no kidding
01:36 <@isaacbw> this is what I was talking about http://coffitivity.com/
01:36 < jdelgado> uhhh?
01:36 <@isaacbw> that is pretty hilarious though
01:36 < ljharb> aahhh so much JS and a popup modal
01:36 < keyosk> I'm trying that under my music right now isaacbw, it's pretty interesting
01:37 < ljharb> modals should be illegal
01:37 < ljharb> hm, interesting
01:37 < ljharb> wow actually this could be really awesome
01:37 <@isaacbw> I have a really shitty internet connection so sometimes my main sound feed cuts out and it's less jarring to have the coffee shop sounds stay there
01:37 <@isaacbw> it seems to behave well with a sketchy internet connection
01:38 < keyosk> It's a small looping file, it shouldn't  have problems like that ^^
01:38 <@isaacbw> oh ha
01:38 <@isaacbw> I sort of hoped it was a live feed from a coffee shop
01:39 <@isaacbw> but I knew deep down it wasn't :(
01:39 < ljharb> that probably exists
02:14 < kevino80> I added both line numbers to the pivotal bug
02:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:16 < jdelgado> anyones thoughts on coffeescript?
02:17 < ljharb> gross.
02:17 <@Nexxy> jdelgado, just about everyone does
02:18 <@Nexxy> coffeescript is good as a gateway drug to get you off of ruby/python and into JS
02:18 <@Nexxy> but ideally you should probably just write vanilla JS
02:18 < ljharb> ^ yes
02:18 < gluxon> Nexxy: Why's that?
02:18 <@Nexxy> there are a lot of reasons
02:18 < gluxon> I hate CoffeeScript, I need a better reason to say I hate it.
02:18 < gluxon> :)
02:18 <@Nexxy> CS shadowing, compile steps, source mapping, ...
02:19 <@Nexxy> you will lose out on adoption if you are writing a library intended for consumption
02:19 < ljharb> generates inefficient JS.
02:19 < ljharb> less people will be able to maintain it, so you'll get fewer contributions
02:19 < jdelgado> I prob won't drop ship from vanilla, but I always thought it looked clean
02:20 < ljharb> "how it looks" is one of the least important metrics, unless it relates to "how well people can understand, debug, and maintain it"
02:20 <@Nexxy> people will do this to your modules: http://i.imgur.com/mpSHzUW.jpg
02:20 < thatryan> is there a way to "nuke" my install of node and npm packages? Something got messed up (noob) and I want to start fresh
02:20 < jdelgado> true that
02:20 < ljharb> it'll be typed once. it'll be read and maintained hundreds of times.
02:21 < jdelgado> thatryan: You can do npm -g rm <package>
02:22 < jdelgado> Alright, you guys have convinced me, I'll stay with vanilla. Thank you. :)
02:24 < jdelgado> If anyone wants a good laugh: https://www.youtube.com/watch?v=1e1zzna-dNw
02:26 <@Nexxy> jdelgado, lol
02:26 < ningu> jdelgado: repost!
02:26 <@Nexxy> NODE DOT JAY ESS
02:26 < thatryan> does using the dowloadable installer package NOT install node and npm globally?
02:26 < ningu> his main argument is "it can't be fast, it's *java* *script*"
02:26 < jdelgado> lol I just saw it on my youtube recommended, I'm rolling
02:27 <@Nexxy> big lies, guise
02:27 < ningu> what's fast, anyway
02:27 < ningu> and also what is code?
02:27 < ningu> thatryan: not sure what you mean by "globally"... what platform are you on?
02:27 < thatryan> os x
02:27 < gluxon> jdelgado: That's the third time I've been linked to that :-/
02:28 < ningu> thatryan: not sure where it installs it, I would assume in /usr/local
02:28 < ningu> I use brew
02:28 < jdelgado> gluxon: Heh, sorry. It's funny though! :)
02:28 < gluxon> Meh.
02:28  * ningu just realized it was "that ryan" and not some sanskritic name
02:28 < gluxon> That guy just annoys me in my dreams.
02:28 < gluxon> JavaScript is blazing fast for interpreted code.
02:28 < jdelgado> Absolutely
02:29 < ljharb> don't qualify it
02:29 < thatryan> lol
02:29 < ningu> yeah but I mean like, everyone has their own interpretation
02:29 < thatryan> maybe my path is messed up
02:29 < jdelgado> It's hilarious one of his reasons for not using node is because it has its own http server. Logic.
02:29 < ljharb> that's like saying "she throws well for a girl". don't be that guy
02:29 < ljharb> lol
02:29 < ljharb> is that the node is cancer guy?
02:29 < ningu> yes
02:29 < ningu> and cancer means crab in latin
02:29 < ningu> q.e.d.
02:30 < abraxas> node has crabs?
02:30 < LouisT> is it possible to unref an http server?
02:30 < ningu> well node was written at joyent which is in SF where they eat dungeness crabs
02:30 < ningu> LouisT: what do you mean "unref"?
02:30 < ljharb> which are delicious
02:30 <@Nexxy> ningu, what do you mean 'was'?
02:30 < jdelgado> My favorite part is when he recommends PHP instead
02:30 <@Nexxy> also I'm petty sure it's written all over the place
02:31 < ningu> Nexxy: ok, I meant "was created at"
02:31 < LouisT> ningu: such as http://nodejs.org/api/net.html#net_server_unref
02:31 <@Nexxy> but ryah created it
02:31 <@Nexxy> and then joyent took it over
02:31 < ningu> oh right
02:31 < ningu> I forgot about that :)
02:31 < ningu> I thought he was already at joyent
02:31 <@Nexxy> never forget!
02:31 <@Nexxy> idek
02:32 < ningu> I know it was his project originally, not theirs
02:32 < ningu> LouisT: hrm I see. I don't know.
02:32 < ningu> I've never used unref, obviously. I think http servers may be different than net servers.
02:41 < Leeol> Anyone know if it's possible to use Express Route Strings to make the following two strings a single pattern? "/foo/:bar.json" and "/foo/:bar/*" ?
02:41 < Leeol> I'm looking through the route regex now, but it's a bit complicated hah.
02:41 < jdelgado> Leeol: Just regex it
02:42 < Leeol> jdelgado: I'd like to use a consistent pattern
02:42 < jdelgado> Leeol: Ok, then why not make one /foo/:bar.json, then the second /boo/:bar, which would catch all not going to the first
02:43 < jdelgado> Correction, second being /foo/:bar/:second
02:43 < Leeol> jdelgado: Well i'm trying to combine the two into a string, there are obvious workarounds :). Workarounds being regex, or simply use the same function for each string route
02:44 < jdelgado> There you go
02:44 < jdelgado> Why would you want anything else?
02:44 < Leeol> jdelgado: .. Because it would be better? lol
02:48 < ljharb> Leeol: regex is not a workaround, it's THE way to combine two paths into one.
02:49 < ljharb> Leeol: if you don't want a regex, do two paths. end of story.
02:49 < jdelgado> Exactly my view...
02:49 < ashnur> this regex thing
02:50 < ashnur> pops up second time today
02:50 < ashnur> or at least in the past hours
02:50 < jdelgado> ashnur: It's regular expression. it's really useful.
03:00 < ashnur> http://download.gamespotcdn.net/d4/user_images/2718/notsure.jpg
03:00 < Leeol> jdelgado, ljharb: I was simply asking if it was possible. Either Strings or Regex is the first choice, i'm using strings at the moment. Anything else is a workaround to a break in my pattern. A simple "no, it is not possible" would suffice. :)
03:01 < jdelgado> ashnur: lol'd
03:01 < jdelgado> Leeol: That is what we both said.. lol
03:01 < ljharb> Leeol: no. strings represent one and only one path.
03:01 < Leeol> jdelgado: No, you said "use regex" 
03:02 < ljharb> Leeol: and if you don't want ocmmentary, google's right there. you came and asked for help from people :-)
03:02 < jdelgado> Leeol: Then once you specified that wasn't a choice, I told you that was it.
03:04 < Leeol> ljharb: I always go to Google first, for this very reason :P
03:04 < ljharb> advice is usually more helpful than you realize.
03:05 < jdelgado> indeed
03:06 < Leeol> Yes, but i wasn't looking for advice, i was simply curious if that was possible. It would be like asking if you can match a variable in an Express Route string, with an extension, and being told "use regex". Technically it would be correct, but it's not what the real answer was
03:07 < Leeol> The answer being, "/foo/:bar.json" as Express automatically strips `.json` from the match
03:07 < jdelgado> Leeol: No need to argue, we're all on the same page
03:07 < Leeol> Fair enough
03:07 < ljharb> the real answer isn't what's important. obviously you want to match two things. so we told you how to do that. assuming the person is asking the right question is usually wrong :-)
03:08 < Leeol> ljharb: Yea, that's an annoying bit with IRC questions. I don't disagree though, it's just annoying hah.
03:08 < ljharb> fair enough :-)
03:08 < Leeol> If only i could get Google to always answer me, we'd all be happier. :)
03:13 < mirkob> hi
03:13 < howdynihao> hollllllaaaaa
03:15 < mirkob> anyone familiar with socket.io-client? 
03:15 < mirkob> I am trying to connect from one node instance as a client to a socket.io server, all works well
03:15 < mirkob> but if I want to connect via ssl to a server with self signed certs, the connection isn't established
03:16 < mirkob> any clue were I can digg in deeper? options that I can set?
03:18 < jdelgado> mirkob: What is your end goal? Coordinate two nodes wih ssl?
03:19 < mirkob> end goal is to have mobile app connect to node backend with websockets. Am using a second node.js server as a simulator for now. 
03:19 < mirkob> setup works well with non ssl connection ... 
03:19 < mirkob> so one option would be to revert back to non ssl for dev 
03:20 < mirkob> to simulate other mobile devices ... 
03:20 < jdelgado> mirkob: I assume you are using express as well?
03:20 < mirkob> yes
03:20 < jdelgado> mirkob: The SSL part comes from express, not socket.io
03:21 < mirkob> doing this on the client side
03:21 < mirkob>     this.socket = io.connect(serverUrl, { 'force new connection': true,                                            'secure': true,                                           'port': '8443' });
03:22 < mirkob> wondering if there is an option to ignore server cert, like in curl --no-check-certificate
03:27 < WigglesMcMuffin> Guys and gals, anyone know why I'm getting undefined back when I try to require a module? I've attempted to install them with npm. Could that be the possible cause? Like is there some configuring I might have missed?
03:28 < mscdex> WigglesMcMuffin: what module?
03:28 < ljharb> WigglesMcMuffin: also, can you show some code of how you're requiring it?
03:28 < jdelgado> WigglesMcMuffin: How are you requiring it? Did you install it?
03:28 < WigglesMcMuffin> I ran npm install mysql
03:28 < WigglesMcMuffin> Which *seems* to run to completion (no errors)
03:28 < ljharb> then require('mysql') ?
03:29 < WigglesMcMuffin> Right
03:29 < WigglesMcMuffin> returns undefined
03:29 < jdelgado> Did you require it in your project.json?
03:29 < ljharb> package.json, and that's not necessary to dev it
03:29 < WigglesMcMuffin> hold on, let me check
03:29 < jdelgado> lmao @ I just wrote project.json - overall failure.
03:29 < mscdex> mirkob: the behavior is browser-dependent. chrome accepts self-signed certs. firefox requires you to basically visit the wss:// uri in your browser to be able to accept the certificate first
03:30 < jdelgado> It's obviously getting late
03:30 < mirkob> mscdex: what is the behavior if I run the code in a node instance
03:30 < mirkob> ?
03:30 < WigglesMcMuffin> Ok... where would I find the package.json?
03:31 < mscdex> mirkob: then it depends on the websocket client module you're using?
03:31 < mirkob> mscdex: I am using https://github.com/LearnBoost/socket.io-client
03:33 < mscdex> mirkob: socket.io-client uses engine.io-client which uses ws which has a 'rejectUnauthorized' setting
03:34 < ljharb> WigglesMcMuffin: in the root of your node project
03:34 < mirkob> mscdex: wow great, let me try that!
03:34 < ljharb> WigglesMcMuffin: https://npmjs.org/doc/json.html
03:34 < WigglesMcMuffin> Oh! Yeah, I haven't gotten *that* far. I'm just trying to get the modules working. Is it *necessary* for just starting out?
03:35 < mscdex> package.json isn't required
03:36 < WigglesMcMuffin> But probably a best practice for anything sizable yes? I'll bookmark the page
03:36 < mscdex> yes, package.json will hold a list of your project's dependencies and versions, etc
03:37 < ljharb> WigglesMcMuffin: just `npm install mysql` in the project dir, and `var mysql = require('mysql');` should work. what version of node?
03:37 < WigglesMcMuffin> Anyway, yeah.  > var mysql = require('mysql');
03:37 < WigglesMcMuffin> undefined
03:37 < WigglesMcMuffin> node v0.10.4
03:37 < ljharb> 0.10.5 is latest. but it shouldn't matter.
03:38 < ljharb> WigglesMcMuffin: wait
03:38 < ljharb> you're typing that in the console?
03:38 < ljharb> try "mysql" after that.
03:38 < ljharb> the var declaration will always return undefined.
03:38 < WigglesMcMuffin> Huh
03:38 < WigglesMcMuffin> Right
03:38 < WigglesMcMuffin> Well
03:38 < jdelgado> WigglesMcMuffin: Did you run npm install mysql@2.0.0-alpha7 ?
03:38 < mirkob> mscdex: looks like engine.io-client is passing opts to ws  this.socket = new (ws())(this.uri());     but will digg deeper! Thanks for the great pointer!
03:38 < WigglesMcMuffin> hrmmm
03:38 < ljharb> so am i right?
03:38 < mirkob> https://github.com/LearnBoost/engine.io-client/blob/master/lib/transports/websocket.js
03:38 < WigglesMcMuffin> It didn't *seem* to work when I ran a sample script online. Though it might be the same script then?
03:38 < mscdex> mirkob: looking at the `ws` module code, I think it defaults to a false-y value for rejectUnauthorized
03:39 < WigglesMcMuffin> It was this one: http://www.giantflyingsaucer.com/blog/?p=2596
03:39 < mscdex> mirkob: so you should probably be safe
03:39 < ljharb> WigglesMcMuffin: try it in a console.
03:39 < jdelgado> WigglesMcMuffin: Yeah, he's right. Var declarations don't return anything to console, hense undefined.
03:39 < ljharb> WigglesMcMuffin: ie `node`
03:40 < WigglesMcMuffin> Right. I should have remembered that! Get the same thing in the chrome js terminal
03:41 < mscdex> mirkob: actually, i take that back. i think it will depend on your node version
03:41 < mirkob> mscdex: might have changed https://github.com/joyent/node/issues/3949
03:41 < mscdex> mirkob: yeah
03:43 < mirkob> mscdex: ok now will step back to engine.io-client and see on how I can pass rejectUnauthorized
03:43 < mscdex> mirkob: you'll have to either roll your own using 'ws' manually with the socket.io/engine.io-parser and/or create a feature request on gh about passing options to ws
03:43 < mscdex> or monkey-patch that method that instantiates ws()
03:44 < mscdex> :-)
03:44 < WigglesMcMuffin> Ok... yeah, I'll chalk this up to the tut being perhaps outdated, or user error (probably likely). Either way. Thanks a ton guys!
03:45 < mirkob> mscdex: will try to monkey-path for now and do a feature request on gh ... 
04:19 < Jester831> Sup guys
04:20 < Jester831> What do you guys think is the best promise implementation?
04:20 < Havvy> Jester831: Any of the ones that follow the Promises/A+ spec.
04:21 < Jester831> I've been looking at using Q
04:21 < Jester831> not sure if that's Promises/A+ spec
04:21 < ljharb> it is
04:21 < gkatsev> q is probably the most used and popular promises lib
04:22 < Havvy> I wish Node.js had Promises in its standard library.
04:22 < Jester831> solid, just sort of wanted to confirm
04:22 < Jester831> Thoughts on CompoundJS for doing a rest architecture?
04:22 < gkatsev> wow, I didn't realize that async was *so* depended upon in npm.
04:23 < Havvy> gkatsev: The #1 most depended upon module.
04:23 < Jester831> Q?
04:23 < gkatsev> Havvy: #2.
04:23 < substack> Havvy: you can just use a library to wrap the core lib if you like promises
04:23 < Havvy> Oh? What's #1?
04:23 < gkatsev> Havvy: underscore
04:23 < Jester831> oh I love underscores
04:23 < gkatsev> https://npmjs.org/browse/depended
04:23 < substack> I don't like promises so I appreciate that the core lib is minimal
04:23 < Havvy> Ah, right. Underscore.
04:23 < gkatsev> substack: you're #4 most prolific recently! you're slipping.
04:24 < Havvy> substack: I'm not saying make the core library use promises. I'm just saying have them there.
04:24 < gkatsev> Havvy: why should it be in core if it isn't used?
04:24 < substack> Havvy: that's what npm is FOR!
04:24 < substack> node ships with npm
04:24 < substack> THEREFORE
04:25 < substack> everything on npm is "having them there"
04:25 < substack> even CAPSLOCKSCRIPT
04:25 < gkatsev> as well as semicolon
04:25 < Havvy> substack: http://nodejs.org/api/punycode.html is in the standard library...why is it there?
04:28 < ningu> Havvy: unicode support is essential. you can't really do without it.
04:28 < ningu> substack: out of curiosity, why don't you like promises?
04:28 < Havvy> But JS is UTF-16 already?
04:29 < gkatsev> Havvy: what about the stuff outside of utf-16?
04:29 < ningu> Havvy: yes, that's the problem.
04:29 < ningu> right.
04:30 < ningu> astral plane chars with utf-16 surrogates are a huge pain without something like punycode
04:31 < ningu> if your standard library doesn't let you ask basic questions like "how many chars are in this string?" you have a problem.
04:32 < Havvy> Like the JS standard library?
04:32 < ningu> Havvy: no. you are wrong.
04:32 < gkatsev> >> "𡈒".length
04:32 < purr> gkatsev: (number) 2
04:32 < ningu> you've never dealt with those cases so you don't realize.
04:33 < Havvy> Yes. I know that .length tells you the number of code points in a string.
04:33 < ningu> no, it doesn't.
04:33 < Havvy> It doesn't?
04:34 < ningu> it tells you the number of encoded 16-bit chars.
04:34 < Havvy> Isn't that what a code point is?
04:34 < ningu> not sure what the technical term is. but anyway, if the codepoint doesn't fit in 16 bits, it will show up as length 2.
04:34 < Havvy> Or am I getting terminology confused?
04:34 < ningu> unicode codepoints don't map exactly to bytes
04:34 < Havvy> Then yes, I am.
04:34 < ningu> that's why there is utf-8, utf-16, utf-32
04:35 < Havvy> utf-7. ;)
04:35 < gkatsev> unicode isn't an encoding.
04:35 < ningu> heh yeah
04:35 < ningu> you can reliably transform utf-8/16/32 into codepoints.
04:36 < ningu> punycode does utf-16 => codepoints and vice versa
04:41 < devoidfury> roughly how accurate is process.hrtime?
04:42 < substack> ningu: I just don't see how promises help me
04:43 < substack> I've merely not been convinced.
04:44 < ningu> substack: me neither, was just wondering if you had a more nuanced argument :)
04:44 < ningu> I'm basically just waiting for it to sort itself out, might use them if eventually there is a standard practice
04:46 < gkatsev> we've been using them at work. Not personally, but a coworker said he understands the code better when it uses promises but that he feels to get it working right, it's actually more annoying.
04:47 < mirkob> mscdex: Just as an update, I found an easy way to fix the issue for now, without patching any code. Added process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0'; in my simulation class for the dev environment...
04:48 < Havvy> https://gist.github.com/domenic/3889970
04:49 < Havvy> substack, ningu: ^^
04:51 < Jester831> recommendations on redis-based task queue solutions?
04:53 < gkatsev> I think promises still have some kinks that need to be ironed out.
04:54 < s3shs> Is it possible to stringify an Error() object?
04:54 < s3shs> What comes out of the parse is not an Error() object.
04:54 < gkatsev> >> JSON.stringify(new Error('foo'))
04:54 < purr> gkatsev: (string) '{}'
04:54 < Guest51509> Jester831: I was looking for them recently, I liked redisq a lot. Seems maintained and works for my usecase.
04:54 < gkatsev> you'll need to do some work yourself before hand.
04:55 < s3shs> I stuffed another field in to my Error and it's not ending up in the stringified version.
04:55 < gkatsev> like adding a toJSON or something.
04:55 < s3shs> Hmf.
04:55 < s3shs> Maybe I'll just convert it to a plain object and stringify that.
04:55 < gkatsev> >> var myerr = new Error('foo'); myerr.toJSON = function() { return this.message; }; JSON.stringify(myerr)
04:55 < purr> gkatsev: (string) '"foo"'
04:55 < Jester831> Oh nice, yea sometimes it's just a little daunting how many solutions there are out there, and how new they all are
04:56 < gkatsev> s3shs: that's another way
04:56 < Jester831> I was just looking at background-task, did you evaluate taht at alll?
04:57 < s3shs> gkatsev, can I do that as Error.prototype.toJSON?
04:57 < gkatsev> s3shs: probably
04:57 < s3shs> Last question...
04:57 < s3shs> If I have an array of errors inside my error, will that "just work"?
04:57 < gkatsev> >> Error.prototype.toJSON = function() { return this.message; }; JSON.stringify(new Error('foo'))
04:57 < purr> gkatsev: (string) '"foo"'
04:57 < s3shs> (When I stringify the outer layer.)
04:58 < Jester831> Does redisq utilize process ticking at all
04:58 < gkatsev> >> Error.prototype.toJSON = function() { return this.message; }; JSON.stringify([new Error('foo'), new Error('bar'), new Error('baz')])
04:58 < purr> gkatsev: (string) '["foo","bar","baz"]'
05:00 < s3shs> I've actually got the array of errors stuffed in to a field of another error.  ;-)  But looks like that'll work.  Thanks!
05:00 < Guest51509> Jester831: I don't think I had found background-task. Looks pretty neat. Yes, it uses nextTick.
05:01 < Jester831> redisQ or background-task?
05:01 < Guest51509> redisq, not sure about background-task. 
05:01 < Jester831> oh nice
05:47 -!- mode/#Node.js [+o TooTallNate] by ChanServ
06:01 < s3shs> How can I view more than a few characters of a variable in the console?  It all gets attenuated and then I see "length: 180"
06:52 < aszeszo> hi all, how to do such string to binary conversion: "f2bc2db04a4f0803540f0eb80fdb9409" -> <Buffer f2 bc 2d b0 4a 4f 08 03 54 0f 0e b8 0f db 94 09> ?
06:54 < aszeszo> i have md5 hashes of the files stored as strings, but to be able used them in Content-MD5 http header i need to use their base64 encoded representation
06:54 < ningu> aszeszo: use the 'hex' encoding on the buffer
06:54 < ningu> new Buffer(str, 'hex') I believe
06:55 < ningu> and then buf.toString('base64')
06:56 < aszeszo> ningu: perfect, new Buffer(str, 'hex') works!
06:56 < aszeszo> thanks for that
06:57 < aszeszo> ningu: so does toString('base64') - thank you very much!
07:02 < ningu> aszeszo: cool :)
07:04 < garthk> Ahaaa. I think I'm stuffing up somehow in how I pipe one input stream into two output streams, where one needs to end and the other doesn't.
07:18 < garthk> Oh. Hang on. If I'm doing an http.request({ method: 'POST', … }, function(res) { /* should I be doing something to res in here to close the response stream? */ }; /* pipe data into req for POST */
07:29 < kongyang> Can I use socke io to emit json but not json string to clients?
07:33 < joeytwid1le_> kongyang: surely it is symmetrical, and your problem is something else
07:34 < joeytwid1le_> kongyang: JSON is always a string.  if not, you are trying to send a Javascript object
07:35 < Gabriel403> joeytwid1le_: not strictly true
07:36 < kongyang> joeytwid1le_: I lookup socket io's api, it seems that I can only emit string to clients
07:37 < ningu> garthk: req.write(...); req.end();
07:37 < joeytwid1le_> kongyang: that's fine then, send a JSON string in both cases, convert it back to an object when you receive it
07:37 < garthk> ningu: I've got that. Anything to do to res once the headers come through, though?
07:37 < ningu> garthk: well, there's res.on('data') I believe
07:38 < garthk> Oh, hang on. The hang is happening sometimes on reads from the cache. So, maybe there's something wrong with the output pipeline…
07:38 < ningu> yeah, res is just a readable stream
07:38 < ningu> with a bit of extra stuff
07:41 < joeytwid1le_> kongyang: also, you can send objects :P  http://stackoverflow.com/questions/11805130/socket-io-how-to-send-javascript-object
07:41 < joeytwid1le_> emit* objects
07:42 < kongyang> joeytwid1le_: wow!it's cool! I did find that page just now, but ignore it...
07:44 < Sven_vB> hi, i'm exploring stuff with voxels. so what could be a clean and efficient way to store large (but sparse) [x,y,z] grids?
07:45 < Sven_vB> actually, even more efficience would be in order for retrieving cube ranges
07:46 < Sven_vB> or should i not care to store them in node but instead use a MySQL memory table?
07:48 < rendar> Sven_vB: i guess you'll need an octree to store x,y,z voxels, don't you?
07:48 < Sven_vB> not sure, i'll be looking that up
07:49 < Sven_vB> looks a bit like binary space partitioning
07:49 < Sven_vB> yeah i think an octree would be a good idea, then i don't need to implement bsp :)
07:50 < Sven_vB> wow, there's even an article aboud sparse voxel octrees
07:51 < rendar> Sven_vB: where?
07:52 < Sven_vB> http://en.wikipedia.org/wiki/Sparse_voxel_octree
08:02 < jsmonkey> Hi, I am using vows.js but I can't even run the simple example from their site. In the console it says x Errored >> 1 errored. It happens whether I try to assert something simple as 1 is 1.
08:02 < jsmonkey> Anyone had this problem? I really don't know what might cause this, it's not the test itself but something with the enviroment. I cloned an example repo and same thing for that.
08:08 < jsmonkey> j/ #vows.js
08:13 < bid> hi, any one have information about preformance of node vs awk? i want to parse 1GB+ files
08:14 < sente> bid: i prase 1GB++ files all the time
08:14 < sente> in many languages
08:14 < sente> they all do it fine
08:14 < sente> use whatever you're more comfortable with
08:17 < bid> node is easyer for me but still command line with it is not natural for me, anyway thanks.
08:26 < wockan> right now we are using java and tomcat at work. But we are looking for a different framework/way because we are going to build a more restful api. I would like to convince some of my co-workers to use nodejs. Help me obi wan kenobi :)
08:26 < wockan> any tips for how to convince. I have already read some stuff at google
08:27 < CoverSlide> the best way to spur adoption is to use it in a trivial side-project
08:29 < wockan> we are using nodejs for building applications right now using appcelerator 
08:29 < wockan> mobile applications
08:31 <@konobi> wockan: have a look at some of the blog posts and conference/meetup videos by voxer
08:31 < wockan> ill check them out
08:31 < wockan> thanks
08:32 < CoverSlide> well talk to the people in charge of the decision
08:33 < wockan> we dont have a real "super decision maker" 
08:37 <@konobi> Sven_vB: there's always hilberts curve
09:06 < BarryDingle> ghost town?
09:16 < EriksLV> hi
09:17 < EriksLV> forever works on 0.10.4, but is broken because of lazy on 0.10.5
09:17 < EriksLV> can anyone confirm?
09:18 < zaleb> Im running forever-monitor latest tarball from github with 0.10.5
09:20 < EriksLV> and forever list doesn't throw an error?
09:21 < zaleb> hmmm, forever-monitor is the programmaticly part of forever
09:22 < zaleb> we control our pids with init.d scripts
09:22 < zaleb> so Can't tell you about that :(
09:26 < BarryDingle> this is more javascript than node per se, but is there anyway to wrap an entire html file in order to deal with it as 1 object?
09:27 < BarryDingle> i'm using sendgrid to send out emails, but whenever i try to add my html to the html field i get errors
09:29 <@Nexxy> an html file should already be one object
09:30 < BarryDingle> this is true, i guess i should rephrase
09:31 < BarryDingle> i believe the html section requires the actual html 
09:32 < BarryDingle> i was thinking of just setting a link, but i'm not quite sure how to do that (yes i know this seems absured) but i'm working with a relatively big backend
09:45 < SrPx> I'm confused in how to organize node.js projects. Say I have 2 files, "main.js" and "my_class.js". "my_class.js" is supposed to access an object called "world" that is defined on "main.js". How is that possible?
09:51 < basiliothecat> SrPx: wouldn't dependency injection kind of way do it best here? e.g. you iether pass that 'world' as a parameter into constructor function or set it via methods/properties from the main driver program...
09:51 < basiliothecat> s/iether/either
09:51 < SrPx> basiliothecat: I've thought that but this would complicate a lot the code. I mean, really, a LOT
09:52 < SrPx> basiliothecat: I'm just doing eval(fs.readFileSync(...)) for now because it allows the constructor to get inserted into the global closure
09:52 < basiliothecat> on the other hand you can require a module that defines 'world' from my_class.js but here it would mean requiring main.js from my_class.js which sounds weird in exatct that wording
09:53 < SrPx> :/
09:53 < basiliothecat> SrPx: yeah, poluting global namespace aint a good path to stick to
09:54 < SrPx> no, I mean the constructor function is created inside the global closure, without poluting it at all, but being able to access it just like if it was created in the same file.
09:54 < basiliothecat> s/poluting/polluting
09:55 < SrPx> which is what I want. maybe I should just not use require at all
09:56 < basiliothecat> SrPx: sorry, guess i got lost here a bit. but the generally it's a good way to spread things among files requiring needed parts as you go
10:02 < basiliothecat> SrPx: anohter attemp - does main.js consumes/uses my_class.js or it's users are unrelated/unrestricted to main.js?
10:05 < SrPx> basiliothecat: I'm not sure what you mean, but I think it does.
10:06 < SrPx> basiliothecat: main.js has a loop running, so it calls my_class_instance.tick() on each instance of my_class continuously
10:06 < SrPx> basiliothecat: I've stack overflowed that question: http://stackoverflow.com/questions/16233819/how-to-correctly-modularize-a-node-js-project
10:11 < greelgorke> SrPx: in my_class,js you can access requiring module via module.parent in main.js you just export your so-called globals and require my_class.js there.
10:11 < greelgorke> but injecting thins is better
10:11 < basiliothecat> SrPx: to me the best way seems a variation on point #3, but with a twist - as 'world' doesn't seem to be part of my_class.js, you still inject that dependency into my_class.js, but do it on a file scope - say whatever file needs acccess to 'world' thing, you inject it in main.js after requiring my_class.js, and store the injected one in files local scope
10:15 < SrPx> basiliothecat: but if I require main.js on my_class.js it'll just create a new, non-shared version of "world" for itself
10:15 < basiliothecat> SrPx: e.g. in main.js: var my_class = require("./my_class");my_class.world = world; here the exported object from my_class.js should be sort of { world: null, MyClass: function(){}}
10:15 < SrPx> basiliothecat: oh sure, but this is pretty much the same as my_class(world)
10:16 < basiliothecat> sorry, didn't meant requiring main.js from my_class.js - but the opposite
10:16 < SrPx> basiliothecat: I see, this was actually my second option and I've just been waiting for more opinions before reworking it
10:16 < SrPx> (:
10:16 < basiliothecat> SrPx: yeah, technically speaking - same thing. just that you save the glabal state within module's local snamespace
10:17 < basiliothecat> s/glabal/global
10:17 < SrPx> s/global/glabal
10:17 < basiliothecat> damn, too many typos today...
10:17 < SrPx> accept your mistakes .!
10:17 < SrPx> :P
10:18 < greelgorke> SrPx: if you do in your main.js: global.world = world then every piece of code in this v8 context can access it
10:18 < SrPx> greelgorke: interesting. please a source?
10:19 < greelgorke> http://nodejs.org/api/globals.html#globals_global
10:19 < greelgorke> it's all in the docs
10:20 < greelgorke> but injection or shared module still better solution
10:21 < basiliothecat> SrPx: like in movies, when you have an angel on one shoulder telling you to use injection and a devil on the other suggesting to use globals :)
10:23 < SrPx> haha but basiliothecat i think globals suffer from the same "eval" overrated fear. they are used for things they shouldn't, and then crucified so people don't use them for what they should
10:23 < greelgorke> look here http://codeshare.io/c0gGV
10:24 < SrPx> basiliothecat: using eval to create a pseudo array is bad. using an eval to parse user generated code isn't. having a global "i" for a for loop is bad. having a global "world" doesn't seem so bad.
10:24 < SrPx> greelgorke: thanks
10:24 < basiliothecat> sure, there is always a case for globals, as it is with goto's - you just should clearly understand the consequences if any
10:24 < SrPx> basiliothecat: but I'm not sure tho
10:25 < SrPx> basiliothecat: I think about it, some things are global already. js's semantics are theorically global.
10:25 < basiliothecat> afraid, here i can't reason as good without knowing the domain all that well
10:26 < greelgorke> the rule of thumb is: if your hacking on your app, you can do whatever you want, just be sure it works as expected. if you're hacking on a lib, that's for others to use, don't do globals or polute native protos
10:26 < greelgorke> there is one exception: if your app is bigger, or developed by more than 1-3 ppl, don't do globals
10:26 < basiliothecat> yeah, agree here
10:27 < SrPx> greelgorke: if I get it your codeshare isn't using globals at all, right? it's how you'd do it?
10:27 < SrPx> it's basiliothecat 's solution
10:27 < greelgorke> yes, no globals there
10:28 < greelgorke> it uses the fact, that require caches modules
10:28 < greelgorke> no need for poluting globals
10:28 < greelgorke> just require an empty module
10:28 < greelgorke> and use it as your app-shared namespace
10:29 < greelgorke> this is how i do shared configurations etc.
10:29 < SrPx> greelgorke: I didn't know this happened, isn't a completely new version of ./shared created on require()
10:29 < greelgorke> on first require yes
10:30 < greelgorke> following requires on the same module are delivered from the cache
10:30 < greelgorke> so a module is a singleton by default
10:30 < SrPx> greelgorke: but this is the same thing as a global, except not using a global
10:30 < greelgorke> exactly
10:30 < SrPx> ... but ... why?
10:32 < greelgorke> why not just using globals? 
10:33 < greelgorke> for me: consistent behaivour. with the chaed module i can use shared state in a lib and not interfing with possible globals of the using code
10:33 < greelgorke> chaed -> shared
10:34 < greelgorke> and it's not exactly the same as using global
10:34 < SrPx> hmm I see
10:34 < greelgorke> require caches modules by absolute path
10:34 < greelgorke> so 2 shared.js in 2 different directories are 2 different modules
10:35 < greelgorke> its more like global.aNamespace
10:35 < SrPx> I get it.
10:35 < SrPx> very nice , thanks
10:36 < SrPx> eh just a little thing, I've used nvm to install node.js and "node" only works on bash. "sudo npm" doesn't work for example. any idea what I should do? apt-get gets a very old version
10:37 < greelgorke> ?
10:37 < SrPx> well, on ubuntu.
10:37 < Gottox> theres a PPA for that, iirc
10:37 < SrPx> I've installed NVM, but it only works after "bash". If I exit bash it doesn't recognize
10:37 < SrPx> a PPA?
10:38 < basiliothecat> SrPx: why not compiling the fresh sources yourself?
10:38 < greelgorke> i use nave, it plays bit different than nvm
10:38 < SrPx> I thought NVM was recommended, but ok then basiliothecat 
10:38 < greelgorke> there are 3 version manager libs out ther
10:39 < greelgorke> nave, nvm and n
10:39 < Gottox> SrPx: if you want to stick to nvm, just put the path to node in your PATH variable.
10:39 < greelgorke> check em out, look what works better for you
10:40 < Gottox> and write it to /etc/profile
10:40 < SrPx> Gottox: OK !
10:42 < booyaa> hey dudes, re: tdd and modules. what's the best way to test private functions i.e. not exposed by the module? i'm using nodeunit at the private functions can be accessed unless their in the exports of the module
10:42 < Gottox> echo export PATH=$PATH | sudo tee /etc/profile
10:42 < SrPx> Gottox: greelgorke basiliothecat well all OK, thanks guys
10:42 < Gottox> this should be enough for a workaround.
10:42 < Gottox> np :)
10:42 < SrPx> :D
10:42 < Gottox> tee -a
10:42 < Gottox> not tee alone.
10:43 < booyaa> ah sandbox
10:47 < Gottox> SrPx: if you just need the newest node version, you may prefer this over a version manager: https://launchpad.net/~chris-lea/+archive/node.js/
10:48 < Gottox> wrong link: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
10:49 < SrPx> Gottox: thanks but just finished compiling it. Compiling on the machine makes it a little faster, doesn't it?
10:49 < greelgorke> does someone use nave here?
10:51 < Gottox> that's mostly a myth. There are some cases where building on your own can advance the speed, but most of the times the distro guys know what they are doing.
10:51 < Gottox> most of the times... ^^
10:54 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:07 < mainiak> Hi. What is best approach to ensure correct exit code is returned?
11:07 < mainiak> I found this, but it's ugly - https://github.com/mhevery/jasmine-node/blob/master/lib/jasmine-node/cli.js#L177
11:10 < Aartsie> Hi all, i want to install node.js on my ubuntu 12.04 machine but is it better to compile it by my self or is it smarter to use the package manager ?
11:11 < skinofstars> Aartsie: there is a ppa
11:11 < Aartsie> skinofstars: what is a ppa ?
11:11 < skinofstars> Aartsie: Personal Package Archive https://launchpad.net/~chris-lea/+archive/node.js/
11:16 < mainiak> https://gist.github.com/mainiak/5466515
11:17 < mainiak> ^^^ process.exit strange behaviour
11:33 < mscdex> mainiak: ?
11:33 < mainiak> brb
11:36 < mscdex> mainiak: it works for me... exits with code 0
11:37 < mscdex> mainiak: also the removeListener usage is unnecessary since node only executes the 'exit' handler once (it has a guard in place)
11:38 < bmatusiak> my background on http://bmatusiak.us/ is output for node.js build
11:38 < bmatusiak> lol
11:46 < mscdex> bmatusiak: aw man, i thought it was live!
11:50 < bmatusiak> mscdex lol
11:57 < sinclair-work> hey all, 
11:57 < sinclair-work> is it possible to have fork child workers using clustering?
11:59 < bnoordhuis> sinclair-work: 'have fork child workers'? what does that mean?
12:00 < sinclair-work> well, using the cluster module, it looks like its possible to have the master proc spawn / fork child procs
12:01 < sinclair-work> in that instance, you have a flag i.e cluster.isMaster
12:01 < bnoordhuis> sinclair-work: yes. that's the express goal of the cluster module
12:01 < bnoordhuis> goal, purpose
12:01 < sinclair-work> right, so, lets say a spawn a child worker, can i further spawn more from there?
12:02 < bnoordhuis> sinclair-work: no. well, you can spawn more processes from a worker but they won't be workers themselves
12:02 < sinclair-work> what will they be?
12:02 < bnoordhuis> iow, you can't have a tree-like structure of workers that are in turn masters themselves
12:03 < sinclair-work> yeah, thats what im after
12:03 < bnoordhuis> well, cluster.fork() won't work in a worker process
12:03 < bnoordhuis> you can call child_process.fork() and handle it yourself
12:03 < sinclair-work> cluster is just a wrapper to the child_process.fork() ?
12:03 < bnoordhuis> yes
12:04 < sinclair-work> bnoordhuis: it should be possible to, say do some heavy lifting in s child processes without killing node right?
12:04 < bnoordhuis> yep
12:04 < sinclair-work> bnoordhuis: nice
12:05 < sinclair-work> bnoordhuis: i was looking at implementing a task/promise like lib, that basically allowed me to pass a task/promise to a child_process, have the child process do the work and return to the caller on an event
12:06 < sinclair-work> bnoordhuis: afaik, the async lib is best used as a orchestrator of async stuff, it doesn't leverage child_processes right?
12:09 < sinclair-work> bnoordhuis: thanks for the heads up
12:15 < wolfeidau> Anyone here know where the gypfile: true convention in the package.json came from? 
12:37 < deoxxa> https://gist.github.com/deoxxa/5467112 << i made a thing that uses streams to render video in the console with ANSI control characters
12:38 < deoxxa> (it needs http://npm.im/jetty for the ANSI bits)
12:42 < SomeoneWeird> deoxxa, we knew you were crazy
12:43 < deoxxa> i'm watching battlestar galactica with it, lel
12:43 < raffer> hi there, want kind of project management tool you guys use? jira, fogbugz?
12:44 < RLa> raffer, redmine :)
12:45 < RLa> have used it since 2010
12:46 < greelgorke> github + trello
12:48 < raffer> we 're using github/trello now, but need something more elaborate
12:49 < snuggl> take a look at youtrack
12:49 < snuggl> its a bit ugly but great features
12:49 < raffer> thanks for all the suggestions!
12:49 < greelgorke> define more elaborate :)
13:01 < mainiak> mscdex, thnaks for reply - I was only wondering, if there is better approach
13:02 < mainiak> mscdex, and the strange part with process.exit is - that on handler you can override return code given from first process.exit - then it's never used
13:03 < raffer> our problem right now is we jump from 1 task to another, like all the time. We want to really focus on 1 sprint a the time and ship what we planned 1 or 2 weeks before
13:03 < raffer> now our bugs are on github and the feature board on trello, but we miss a middle man
13:06 < greelgorke> raffer: thats not a tools fault. we put all bugs in trello. but it's more an issue of the discipline, not of a tool
13:07 < brianng> Hi i need some help to find a module to help me with what i need
13:07 < brianng> i need a chat bot that greets and asks a question
13:07 < brianng> and replies accordingly
13:07 < brianng> and asks another question and waits for response and replies again
13:08 < brianng> in a sequense
13:08 < brianng> sequence
13:10 < SamOliver> so what you are looking for is a human impersonator machine?
13:12 < raffer> greelgorke: i know :)
13:14 < chmac> New to node and playing with node-mysql. I'm trying this connection.query('SELECT * FROM foo WHERE bar = "?"', req.params.bar, callback);
13:14 < chmac> Does that look like the correct syntax? The query is not returning any results.
13:15 < chmac> Missing the [] around req.params.bar it looks like
13:16 < chmac> Well, still not getting any results...
13:16 < chmac> Got it, no "" around the ? :-)
13:18 < RLa> or read docs and examples of it
13:30 < mscdex> mainiak: yeah, that's the way it's always been. that property can be useful in some cases
13:32 < chmac> In restify, when I call `res.send new restify.BadRequestError 'Bad request'` how do I then stop the rest of the script from executing? 
13:32 < chmac> I want the equivalent of exit(), but only for this request...
13:33 < pachet> return?
13:37 < chmac> pachet: Yes, that seems to work in my "primary" function
13:38 < chmac> But I also want to achieve the same within another function, called from the one handling the request
13:38 < chmac> So it's server.post '/foo' foo_handler
13:38 < chmac> Then in foo_handler I want to call verify_auth(), and in that function, if the auth is invalid, I want to call the send badrequesterror and then stop there.
13:38 < chmac> I've ended up putting everything in a single function so that return will work.
13:43 < chmac> Ok, gotta go, will check this out later, thanks for the input
13:44 < sinclair-work> can i ask a rather beginners question?
13:44 < TRUPPP> of course =)
13:45 < sinclair-work> i come from a C# background, i am really familiar with classes and namespaces, i am wondering what people do in node to get the same effect
13:45 < sinclair-work> or, even if that effect is desired
13:46 < bnoordhuis> sinclair-work: what effect in particular?
13:46 < sinclair-work> using module; <-- brings everything in module into scope
13:46 < RLa> sinclair-work, objects and constructors
13:46 < sinclair-work> so, if i had module.MyClass {}
13:46 < sinclair-work> and i had...
13:46 < sinclair-work> require('module')'
13:46 < sinclair-work> on the next line i could have ...
13:47 < sinclair-work> var obj = new MyClass();
13:47 < sinclair-work> not....
13:47 < sinclair-work> var mod = module('module');
13:47 < sinclair-work> var obj = mod.MyClass();
13:47 < sinclair-work> ^ this feels a bit awkward, and against the grain to me
13:47 < RLa> var MyClass = require('./module').MyClass;
13:47 < bnoordhuis> sinclair-work: var MyClass = require('module').MyClass // if i understand you correctly
13:47 < RLa> yeah
13:48 < sinclair-work> yeah, is there a better way to bring things into scope tho?
13:48 < bnoordhuis> sinclair-work: for (var key in mod) global[key] = mod[key]
13:48 < bnoordhuis> but why would you want to
13:48 < sinclair-work> say, if i want several classes from a given module, i wouldn't want to specifically declare them each time
13:48 < sinclair-work> bnoordhuis: its just a small detail
13:49 < sinclair-work> bnoordhuis: global only applies to the current module right?
13:50 < bnoordhuis> sinclair-work: no. global is global but this (as in: the this keyword) is the module's scope
13:50 < bnoordhuis> a module is really a chunk of code wrapped in a function
13:50 < sinclair-work> bnoordhuis: so using this would be better
13:50 < sinclair-work> ?
13:50 < bnoordhuis> hence `this` is the function's scope
13:50 < pachet> sinclair-work: idiomatically you'd just require the package
13:50 < bnoordhuis> with all that said, explicit > implicit
13:50 < pachet> and then call whatever exposed constructors you needed, when you needed them
13:50 < bnoordhuis> so just var Foo = mymodule.Foo; var Bar = mymodule.Bar
13:50 < sinclair-work> bnoordhuis: umm, is it?
13:51 < bnoordhuis> yes
13:51 < pachet> var Foo = require('./Foo'); new Foo.Bar(), new Foo.Baz()
13:51 < sinclair-work> using System.Net; for example, that is quite well understood
13:51 < bnoordhuis> in c# land
13:51 < sinclair-work> bnoordhuis: but i like C# land :)
13:52 < sinclair-work> and i like node
13:52 < sinclair-work> what to do..
13:52  * sinclair-work is soo comflicted
13:52 < bnoordhuis> you're not in kansas anymore, toto
13:52 < bnoordhuis> to misquote something
13:52 < pachet> lol
13:52 < sinclair-work> bnoordhuis: well, like in python, i had the same problem
13:53 < bnoordhuis> python has `from foo import bar, baz, quux`
13:53 < sinclair-work> python modules go about things the same way, but i still like the idea of just bring everything into scope
13:53 < bnoordhuis> node doesn't have anything like that
13:53 < bnoordhuis> for better or worse but probably better
13:53 < pachet> better
13:53 < sinclair-work> bnoordhuis: but based on your for (var n in mod) {} example, it could be possible
13:54 < pachet> people already have enough idiomatic encouragement to pollute the global
13:54 < bnoordhuis> certainly. but possibly isn't the same as preferable
13:54 < bnoordhuis> *possible
13:54 < sinclair-work> pachet: well, bringing types in is fine isn't it?
13:55 < pachet> not sure i follow
13:55 < sinclair-work> and, you are already doing that with require anyway, surely bringing everything into scope couldn't be that bad
13:55 < bnoordhuis> sinclair-work: it's bad for the same reason that `from foo import *` is bad in python
13:55 < sinclair-work> bnoordhuis: why is it bad?
13:55 < pachet> you're making assumptions about how the author structured the module exports
13:55 < bnoordhuis> sinclair-work: you don't know what you're importing
13:56 < pachet> there may be things in there that will overwrite other props on the global
13:56 < bnoordhuis> yep
13:56 < sinclair-work> bnoordhuis: you do tho, you are importing everything in foo
13:56 < bnoordhuis> yes. everything in foo that you want but also everything in foo you don't want
13:56 < bnoordhuis> consider what will happens when you upgrade foo to a newer version
13:56 < sinclair-work> that's ok tho
13:56 < bnoordhuis> and foo's author added a new function called open
13:56 < sinclair-work> yeah? updating isn't a problem, its never been a problem in .net
13:57 < sinclair-work> bnoordhuis: at this point, i should probably mention i am using TypeScript here
13:57 < bnoordhuis> then you're definitely not in kansas anymore
13:57 < ljharb> ew
13:57 < sinclair-work> and, TS feels a lot like C# anyway, but the compiler has some tricks, 
13:58 < sinclair-work> for example, in code, i import the entire module, but the compiler works out what i am or am not using, and just drops anything im not
13:58 < bnoordhuis> sinclair-work: going back to my open example. it will override the default open function
13:58 < pachet> typescript aside, let's say you do something like this: for (var a in myModule){global [a] = myModule [a];}
13:58 < bnoordhuis> if your code does open('/path/to/quux') somewhere
13:58 < bnoordhuis> but the new open function is really an alias for unlink
13:58 < bnoordhuis> well, bad things will happen
13:58 < bnoordhuis> therefore, don't do wildcard imports
13:58 < pachet> if [a] is a method that requires its calling context to be myModule
13:59 < pachet> all of a sudden you're calling it on global
13:59 < pachet> and strange things happen
13:59 < pachet> of course that wouldnt be true of constructors necessarily
13:59 < sinclair-work> pachet: yes, i understand the potential for disaster 
13:59 < bnoordhuis> so don't do that :)
13:59  * sinclair-work does all sorts of crazy things
14:01 < sinclair-work> well, i still like the idea of being able to import everything on global, only if it is global to the current module, which i think it is
14:01 < bnoordhuis> sinclair-work: it's your call
14:01 < pachet> your house your rules
14:01 < pachet> kiss the chef
14:01 < sinclair-work> yeah, im just playing around
14:01 < mscdex> unless the chef has a severe, contagious disease
14:01 < bnoordhuis> but you should always assume that the guy who comes after you is an ax wielding serial killer
14:01 < ljharb> who knows where you live
14:02 < bnoordhuis> so you don't want to piss him off
14:02 < ljharb> and how many TODOs you put in, labeled or not
14:02 < pachet> bnoordhuis: i tend to apply that thinking to life in general
14:02 < sinclair-work> Javascript gives me options to fluff stuff up, i like fluffing stuff up
14:02 < pachet> and you know what, i've got a pretty good track record of not getting axed
14:02 < pachet> 0 so far
14:02 < bnoordhuis> pachet: ditto. living in a bunker also helps, i've found
14:02 < pachet> truth
14:03 < ljharb> sinclair-work: the expression is "it gives you all the rope you want to hang yourself with".
14:03 < sinclair-work> well anyway, maybe ill do some code, and ping it here for people to see
14:03 < sinclair-work> ljharb: i wonder sometimes tho, there are plenty of ways to interpret an implementation style in JS, everyone seems to follow one approach, its a bit fun to explore other styles
14:04 < pachet> so spake evolution
14:04 < ljharb> it's because they've already explored the other styles. and found them lacking.
14:04 < sinclair-work> pachet: is it evolution tho?
14:04 < ljharb> feel free to play, but "best practices" are the top of the food chain
14:04 < pachet> survival of the fittest idioms
14:04 < ljharb> indeed
14:05 < sinclair-work> pachet: id be naive to think the way everyone codes node is not a result of battle hardened JS developers learning from years of trial and error
14:05 < sinclair-work> but, lets see
14:05 < ljharb> sinclair-work: also, most of the "bad patterns" are ones that people brought from other languages
14:06 < ljharb> JS is JS, not anything else - other langs' patterns tend not to work here.
14:06 < ljharb> and that's also been learned through exploration
14:06 < sinclair-work> ljharb: bad patterns such as tho?
14:07 < ljharb> classical inheritance, for one
14:07 < sinclair-work> ljharb: yeah, that was a lovely disaster 
14:07 < pachet> declarative binding in angular ;[
14:07 < ljharb> still is a disaster. people try to fake classical inheritance all the time.
14:07 < ljharb> OOP in general is another one.
14:07 < ljharb> thankfully, the trend in JS is to make it as functional as possible.
14:07 < sinclair-work> ljharb: i disagree with you there
14:07 < ljharb> you're welcome to, but don't fight evolution ;-)
14:08 < sinclair-work> well, OOP and functional can co exist nicely
14:08 < bnoordhuis> what are we bickering about?
14:08 < sinclair-work> bnoordhuis: no one is bickering
14:08 < ljharb> not bickering
14:08 < bnoordhuis> i'll have to change that then
14:08 < sinclair-work> ljharb: so you have any thoughts on LiveScript?
14:08 < ljharb> sinclair-work: they can, sure. but in a lang with first-class functions, anything that can be solved with OOP can almost always be solved without it
14:09 < bnoordhuis> sinclair-work: btw, PLT people would disagree with your statement
14:09 < ljharb> the original name for JS, or the altJS transpile language
14:09 < bnoordhuis> (that OOP and functional code can co-exist)
14:09 < ljharb> i hate all JS transpiler languages. JS is JS, write JS, why are you wasting your time with a translator
14:09 < sinclair-work> bnoordhuis: everyone finds something to disagree about something
14:09 < bnoordhuis> in a strictly functional environment, there are no side effects
14:09 < bnoordhuis> which is exactly the thing OOP depends on
14:10 < sinclair-work> ljharb: well, the X > JS compiler languages do offer some very nice features
14:10 < pachet> what's the term
14:10 < pachet> diametrically opposed
14:10 < ljharb> sinclair-work: and some huge detriments. obv each person can choose which wins out
14:11 < sinclair-work> ljharb: i still quite like TypeScript, and LiveScript is quite neat, and in tune with the land of functional
14:12 < ljharb> JS is in tune with it too :-p
14:12 < ljharb> if i ever feel like JS isn't functional enough for me, i might check out alternatives, but until then, i write for the browser
14:12 < sinclair-work> ljharb: there is a lot of focus on dependency injection / test driven development practices, and OOP lends itself well to that scene
14:13 < ljharb> nothing about functions makes testing hard
14:13 < ljharb> and modules make that very easy
14:13 < ljharb> commonjs ftw
14:13 < sinclair-work> ljharb: well, mocking things i suppose is pretty much the same thing
14:13 < ljharb> it is
14:13 < bnoordhuis> i mock things all the time
14:13 < sinclair-work> ljharb: but at a module level 
14:13 < bnoordhuis> people too
14:14 < ljharb> and for tests, dependencies should be there.
14:14  * bnoordhuis goes back to work
14:14 < sinclair-work> bnoordhuis: were you in threejs the other day?
14:14 < ljharb> tests should always be testing a black box. each individual piece should also be separately tested, as a black box.
14:14 < bnoordhuis> sinclair-work: unlikely
14:14 < OliverJAsh> i have a project with several node apps, each using different ports. i need to host this under a domain, which different apps using different subdomains. how can i map subdomains to ports?
14:14 < sinclair-work> bnoordhuis: ah ok, your nick looked familiar is all
14:15 < bnoordhuis> sinclair-work: you've probably seen it in node's changelog or something
14:15 < sinclair-work> yeah, maybe
14:15 < ljharb> humblebrag
14:15 < sinclair-work> ljharb: anyway, cheers for the chat, always interesting to talk about node
14:15 < bnoordhuis> ljharb: well, i am a maintainer
14:16 < ljharb> indeed
14:16 < ljharb> bnoordhuis: lol and thanks for that. doesn't make it not a humblebrag ;-)
14:16 < bnoordhuis> oh, nothing like that. the only thing i base my self-esteem on is my paycheck
14:17 < ljharb> haha
14:18 < OliverJAsh> trying to achieve this. domain.com = node app on port 3000. api.domain.com = node app on port 3001. never deployed node apps before so if someone wants to recommend a way for me to go, that would be appreciated
14:19 < OliverJAsh> i believe i could do something like this with nginx?
14:20 < zomg> OliverJAsh: you can either do it using a proxy or with separate IP addresses
14:20 < zomg> assign IP 1 on domain.com have node app listen on that, assign IP 2 on api.domain.com have app 2 listen on that IP
14:21 < zomg> if you want to use different ports, you can set up something to listen on port 80 and forward the connection to the desired port based on the Host header
14:21 < zomg> and yes I think nginx will be able to do that, I've been using varnish for the same purpose myself
14:22 < OliverJAsh> zomg: cheers, that will get me started
14:24 < unlucky2013> i can't live a life when i am threatened all the time .. you do whatever you wanna do
14:26 < unlucky2013> lure me to usa and take naked photos of me with cameras in all rooms fuck you
14:26 < bnoordhuis> is it troll time already?
14:26 < unlucky2013> no its illuminati time
14:27 < bnoordhuis> nuh-uh. the illuminati have a slot at 7
14:27 < kevinswiber> Did I miss a fight regarding functional programming vs OOP?  Damn it. ;)
14:28 < bnoordhuis> kevinswiber: it was brief but brutal
14:28 < bnoordhuis> but the forces of all that is just prevailed
14:28 < kevinswiber> Fantastic.
14:29 < kevinswiber> Code that is written to adhere to theory smells weird.  Code that organically grows to coincidentally fit into a previously defined theory smells delicious.
14:30 < sambarino> how about something in between?
14:30 < kevinswiber> Like Scala?
14:31 < sambarino> like having some sort of plan but letting it grow organically from that
14:31 < kevinswiber> Or in-between theory and practice?  Sure.
14:32 < kevinswiber> Reading about functional idioms and making a strict attempt to create a library that uses those idioms is kind of ass-backwards, though.
14:32 < kevinswiber> Choosing a solution before knowing whether or not it solves the problem is kind of a waste.
14:32 < kevinswiber> But helps you practice, I guess.
14:32 < sambarino> yeah, was just thinking that if you do need some kind of theory in mind even while letting the code grow or it won't end up fitting anything other than a sphaghetti outline :P
14:33 < sambarino> but i guess being a brilliant programming that would just happen without thinking
14:33 < sambarino> programmer*
14:33 < kevinswiber> It's really just a matter of experience, I guess.  I'm guilty of using functional programming where OO would have been better... and vice-versa.
14:33 < sambarino> which i'm not... yet
14:33 < sambarino> yeah
14:46 < dstevens> sambarino: Thinking doesn’t guarantee that we won’t make mistakes. But not thinking guarantees that we will.
14:50 < ashnur> wtf
14:51 < ashnur> one can not not think
14:53 < standoo> hello
15:58 <@isaacbw> first order functions 4 lyfe
16:00 < nilc> higher order functions for fun & profit!
16:03 <@isaacbw> jk, first order functions can eat a turd
16:07 < kevinswiber> Nerds.
16:07 < astropirate> test
16:07 < astropirate> Why does this deep copy function exhaust the call stack? http://pastebin.com/0U1y24w2
16:08 < kevinswiber> Guess: It's infinitely recursive.
16:08 < kevinswiber> Guess 2: Your object is infinitely large.
16:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:08 < kevinswiber> * No pictures required for proof.
16:09 < jocafa> <mom joke>
16:09 <@isaacbw> you'll want to put in a check for any cyclical references
16:10 <@isaacbw> huh, how on earth would you do that in js without embedding some sort of meta-data in every object you hit
16:10 < jocafa> hoverbeeeeaaaaarrrr
16:11 <@isaacbw> which would be yucky
16:11 < astropirate> kevinswiber, its neither I get the object from a mongodb database
16:12 < astropirate> isaacbw, ^^
16:12 <@isaacbw> o
16:14 <@isaacbw> this whole thing is yucky
16:14 <@isaacbw> why are you doing that
16:14 <@isaacbw> writing a generic deep copy function, that is
16:14 < kevinswiber> Note: "Because I want to learn how to do it" is totally valid. ;)
16:16 < kevinswiber> astropirate: If you're using Mongoose, this might be related: https://github.com/LearnBoost/mongoose/issues/1024#issuecomment-11754641
16:17 < astropirate> kevinswiber, isaacbw , because the object I get from Mongoose, is insane. I can't edit, delete, or add any properties to the child documents (objects)
16:17 < astropirate> i checked for seal and frozen
16:17 < astropirate> its neither
16:18 < astropirate> been banging my head on this for awhile now
16:18 <@isaacbw> you can't modify the object at all? 
16:18 < astropirate> no
16:19 <@isaacbw> that seems really strange
16:19 < astropirate> actually i haven't checked with getOwnPropertyDescriptor
16:19 <@isaacbw> does mongoose do some crazy black magic
16:19 < astropirate> let me do that
16:20 <@isaacbw> I think you should try to figure out how to use mongoose properly first, but if you do end up wanting a deepCopy I guess it isn't yucky as long as all the data is coming from json/bson
16:21 < kevinswiber> I'm not sure _why_ Mongoose would do some crazy black magic if that's the case.
16:21 < astropirate> Object.getOwnPropertyDescriptor(myObj, 'childProperty')   gives me undefined
16:22 < astropirate> isaacbw, kevinswiber, how do I get around this black magic
16:22 < kevinswiber> Shoot the werewolf with a silver bullet?  Not entirely sure.
16:29 < Havvy> astropirate: That probably means the property doesn't exist. ;)
16:29 < astropirate> no
16:29 < astropirate> mongoose is retarded
16:29 < astropirate> hahaha
16:29 < astropirate> jk
16:29 < astropirate> but it does some black magic
16:29 < astropirate> and the object can't be modified
16:29 < astropirate> you have to call .toObject() on it
16:30 < astropirate> to get on object that is editable
16:31 <@isaacbw> is anyone on mac?
16:31 < bmatusiak> i am
16:32 < booyaa> here too
16:33 < bmatusiak> isaacbw, do you need someone with a mac?
16:35 <@isaacbw> bmatusiak: would you be willing to see if this branch compiles? https://github.com/isaacbwagner/node-hashtable/tree/apple
16:35 <@isaacbw> just npm install
16:36 < astropirate> bmatusiak, no, mac users are not needed
16:36 < astropirate> please exit the channel :p
16:36 < bmatusiak> lol
16:37 < bmatusiak> isaacbw https://gist.github.com/bmatusiak/9cbe45ac333fdf145f38
16:38 < OliverJAsh> where is a good place for me to keep my node environment variables? i have a debian system.
16:38 <@isaacbw> lol what. That's a ridiculous requirement.... damn you apple
16:38 <@isaacbw> bmatusiak: would you be willing to add the space it's asking for and try again?
16:39 <@isaacbw> sorry, you can just pull again. I added the space and pushed
16:39 <@isaacbw> it's cool that npm lets you install straight from github
16:40 < bmatusiak> isaacbw https://gist.github.com/bmatusiak/9cbe45ac333fdf145f38
16:42 <@isaacbw> alright, one more time, I promise 
16:42 <@isaacbw> <3
16:42 < bmatusiak> isaacbw wrong :P
16:42 < sinclair-work> side note
16:42 < sinclair-work> http://pastebin.com/Hj15p9x4
16:42 < sinclair-work> ^ this works
16:43 < bmatusiak> isaacbw https://gist.github.com/bmatusiak/9cbe45ac333fdf145f38
16:43 <@isaacbw> dammit
16:43 <@isaacbw> "error: a space is required between consecutive right angle brackets (use '> >')" who the fuck decided that was a good idea
16:44 < bmatusiak> lmao
16:44 < bmatusiak> mr jobbs?
16:45 < tjfontaine> difficult to differentiate template specialization and >> operator
16:45 < bmatusiak> isaacbw did you fix it?
16:46 < bmatusiak> isaacbw https://gist.github.com/bmatusiak/9cbe45ac333fdf145f38
16:46 < bmatusiak> if you did
16:48 <@isaacbw> bmatusiak: would you try one more time? The warnings should be gone now too
16:49 <@isaacbw> and maybe pretty please do 'npm test' as well
16:49 < bmatusiak> isaacbw 7 warnings still show
16:50 < bmatusiak> isaacbw 'sh: runtests: command not found'
16:51 < bmatusiak> am i missing something?
16:52 <@isaacbw> no, nevermind. It won't install the devDependencies if you do npm install <git url>
16:52 < bmatusiak> ill pull with git and run the test
16:52 < bmatusiak> gimmie a sec
16:52 <@isaacbw> :D
16:53 < przemek> hi, I'm having issues serialzing/deserialzing thrift files using the node-thrift 1.0.0-dev. Does anyone here mind helping me out with this?
16:54 <@isaacbw> bmatusiak: I just pushed again to get rid of the warnings
16:54 < bmatusiak> k well i picked up './src/hashtable.h:5:10: fatal error: 'unordered_map' file not found'
16:54 < bmatusiak> isaacbw !
16:55 <@isaacbw> did you grab the apple branch?
17:00 < bmatusiak> isaacbw https://gist.github.com/bmatusiak/9cbe45ac333fdf145f38
17:00 <@isaacbw> alright, I give up for now
17:00 <@isaacbw> heh, thanks
17:01 <@isaacbw> I think I need to actually have a mac to figure out why it isn't building right
17:02 <@isaacbw> but thank you so much <3
17:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:06 < przemek> does anyone have a working example of serializing/deserialization of a thrift message?
17:07 <@isaacbw> isn't the point of thrift to compile the serializers and dezerializers automatically?
17:07 < przemek> as far as I understand, it does al the automatically when you use RPC 
17:07 < przemek> but I'm using RabbitMQ to send the thrift encoded messaged
17:08 < przemek> there is a simple deserialization example in node-thrift 1.0.0-dev but it's not helping me much
17:09 <@isaacbw> there's the protocol and the transport
17:09 <@isaacbw> the protocol should be independent of the transport
17:11 <@isaacbw> shit this is cool: https://code.google.com/p/logstalgia/
17:19 < g0z> TooTallNate: you around? I have a node-canvas build issue (with fonts)
17:29 < standoo1> hello
17:29 < standoo1> fellow nodejsian
17:30 < niggler> lol standoo1 nodejsasian
17:30 < standoo1> one person who responds
17:31 < niggler> we are all on and off standoo1 
17:31 < standoo1> that 0.01%
17:31 < niggler> most of us aren't paid to be here
17:31 < standoo1> so am i
17:31 < standoo1> haha
17:32 < niggler> i mean, there are a few joyent employees here
17:32 < standoo1> are you one?
17:32 <@isaacbw> niggler: I published the hashmap module
17:32 < niggler> nah
17:32 <@isaacbw> are you on mac?
17:32 < niggler> isaacbw i am
17:32 < standoo1> i see
17:32 < niggler> lemme try it out isaacbw 
17:32 < standoo1> cool
17:32 <@isaacbw> I don't have a mac of my own, so it doesn't compile
17:32 < standoo1> i'm writing a PaaS
17:33 < standoo1> for nodejs with sftp support
17:33 < niggler> yeah isaacbw unordered_map isn't available on osx
17:33 < niggler> standoo1 cool
17:33 < standoo1> wondering what do you guys think of this idea
17:33 <@isaacbw> niggler: I did a little bit of work in this branch, but I have basically been developing blind 
17:33 <@isaacbw> https://github.com/isaacbwagner/node-hashtable/tree/apple
17:33 < standoo1> and whether it would be useful
17:33 < niggler> isaacbw is unordered_map part of stl?
17:34 <@isaacbw> in c++11 it is
17:34 < niggler> hmm the file exists
17:36 < niggler> hmm isaacbw my gcc doesn't recognize c++11
17:36 < niggler> "i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)"
17:37 < robey> hash_map might be similar enough
17:37 < niggler> robey this is strange though
17:37 < niggler> the header clearly exists
17:38 < niggler> http://hastebin.com/xawaxuyise.cpp
17:38 < robey> reminding me why i ran away from the c++ world
17:39 < niggler> heh agreed robey 
17:39 <@isaacbw> I could just implement my own hash table
17:39 <@isaacbw> generics are overkill if it's going to be too much trouble to be cross-platform
17:40 < niggler> one sec isaacbw 
17:40 < manacit> woah that's cool
17:40 < manacit> a node wrapper around a real hash table
17:40 < niggler> how do you get node-gyp to tell you the command it is running
17:42 <@isaacbw> hmm, no idea
17:42 <@TooTallNate> niggler: V=1 env variable
17:42 <@TooTallNate> niggler: if you're on unix that is
17:42 < niggler> that worked on OSX
17:43 <@TooTallNate> well osx is a flavor of unix ;)
17:43 <@TooTallNate> so story checks out
17:43 < asterick> well, "sorta"
17:43 < niggler> isaacbw is it acceptable to replace the header with tr1/unordered_map ?
17:43 < asterick> it's a unix "like"
17:44 < g0z> TooTallNate: I have a problem I installed node-canvas and when I do require('canvas').Font it's undefined any ideas?
17:44 <@isaacbw> niggler: I have no idea. Probably not 
17:44 < niggler> actually __APPLE__ guards can be put around it
17:44 <@isaacbw> I was just playing around 
17:44 <@TooTallNate> g0z: don't you need to have pango-cairo installed or something?
17:44 < g0z> hm
17:44 <@isaacbw> the branch I linked has __APPLE__ guards
17:45 < g0z> Ihave libcairo do not have pango
17:45 <@isaacbw> I don't know if tr1/unordered_map is interchangable with unordered_map though
17:45 < FrankLampard> Hello!
17:45 < FrankLampard> Wanted to share  a new programming forum: http://thedevshed.net/forum/ 
17:45 < FrankLampard> feel free to join :)
17:45 <@isaacbw> dude
17:45 <@isaacbw> the spam is getting a little tiresome
17:45 < standoo1> spam
17:45 < FrankLampard> Noo!
17:46 < g0z> hm
17:46 < kenperkins> wow Lamps has joined us
17:46 < kenperkins> impressive 
17:46 < wwicks> … well it was fun while it lasted
17:46 < g0z> I don't have X installed on this box
17:46 < g0z> so no gtk, no pango
17:46 < g0z> ugh
17:46 < g0z> I'm gonna have to tell this dude he needs to give me a newer box I can't get all this installed on fedoracore13
17:46 < booyaa> is this a different devshed?
17:47  * booyaa thought those guys were ancient php dudes
17:47 < standoo1> i'm going to spam too
17:47 < standoo1> anyone here eats spam?
17:48 < g0z> any hawaiians?
17:48 < g0z> (they love spam)
17:51 <@isaacbw> niggler: did you ever figure out if sparse integer keys are as fast as continuous ones?
17:51 < niggler> in an object? yes, in an array? no
17:51 < niggler> lol the pesky 'length'
17:51 <@isaacbw> I could have told you that about arrays :P
17:51 < niggler> hoping for a sparse array was wishful thinking
17:52 < niggler> isaacbw i sent a PR
17:52 < niggler> probably similar to what you had in the apple branch
17:53 <@isaacbw> would you mind running npm test to make sure the implementation is the same?
17:58 < niggler> isaacbw yeah i did 
17:59 < niggler> isaacbw: http://hastebin.com/mokiwanamu.rb
17:59 < niggler> isaacbw: http://hastebin.com/wemaneyova.erlang_repl
18:00 < Raynos> npm publish is failing for unknown reasons. is it an issue with the npm registry?
18:00 < niggler> Raynos what is the error?
18:00 < Raynos> npm ERR! cb() never called!
18:01 < Raynos> oh wait a second!
18:01 < martin__1> d
18:01 < martin__1> d
18:01 < Raynos> I'm trying to publish an unpublishable module
18:01 < Raynos> Got it
18:01  * niggler slaps raycloud_ 
18:03 < Victor53> Good evening. I have a problem. I still can't think asynchroniously. http://paste2.org/3NvgPes7  i'm going to use db.js in routes and render page using getUsers()/ I know that im thinking wrong and i should get new architecture. But dont know how to
18:08 < joeytwid1le_> Victor53: you *cannot* return results.  you *must* pass a callback function to getUsers, and call that when you have the result.  async Javascript uses callbacks, instead of returning data.
18:11 < przemek> when I try to deserialize a thrift message I get the following error: throw Error("Invalid type: " + type); Error: Invalid type.... I'm new to node so I don't even know where to start looking as far as this error is concerned
18:13 < Victor53> joeytwid1le_: yes. i see. but i should render the page. http://paste2.org/XtdeZkM2 this code will be wrong. but  i could render in callback function...
18:14 <@isaacbw> niggler: woo, awesome! Thanks a bunch
18:15 <@isaacbw> I did a few benchmarks and it's amazing how much performance drops when you try adding a few million non-integer keys to v8 objects
18:17 <@isaacbw> right now the module holds on to a v8 handle for strings, integers, etc. but I want to eventually have it store all non-object types outside of v8 as well
18:18 <@isaacbw> *for values
18:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:19 < niggler> wouldn't you incur overhead in creating new handles?
18:22 <@isaacbw> I don't think that's very expensive and v8 ends up making a lot of handles for new scopes anyway, but I would want to do benchmarks to make sure it's actually worth it to keep the data out of v8
18:23 <@isaacbw> man github is slick. I pulled and merged your changes from my terminal and the github page I had open for the pull request auto-refreshed as soon as I did 'git push'
18:23 < niggler> it also updates when there are notifications
18:24 < niggler> btw isaacbw you need to push to npm
18:24 < volter_> hello
18:24 < howdynihao> but yet they cant seem to stop taking down the entire site every couple a days
18:25 < niggler> howdynihao github downtime bothers me insofar as I can't clone issues
18:26 <@isaacbw> niggler: done
18:29 <@isaacbw> I'm headed out for a bit
18:36 < martin__> Hello
18:37 < martin__> Hello
18:37 < dvberkel> hello
18:40 < booyaa> hello
18:41 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:41 < pluma> hello
18:41 < Lkert> Does anyone have experience deploy node.js apps to Windows Azure?
18:42 < Lkert> deploying*
18:44 < niggler> Lkert using the VM or using their heroku-like service?
18:44 < niggler> *azurewebsites or cloudapp
18:45 < Lkert> niggler:  their heroku like service, I guess
18:45 < Lkert> websites
18:45 < niggler> did you go through their demo?
18:45 < Lkert> yeah, built a basic server that works fine locally but i get errors on Azure
18:45 < niggler> http://www.windowsazure.com/en-us/develop/nodejs/tutorials/create-a-website-(mac)/
18:45 < Lkert> "The page cannot be displayed because an internal server error has occurred."
18:46 < Lkert> ^ that's what Azure spits out
18:46 < niggler> Lkert following http://www.windowsazure.com/en-us/develop/nodejs/tutorials/create-a-website-(mac)/ ?
18:46 < niggler> lemme try it agaij
18:48 < Lkert> niggler: Already went through that as well. Googling leads me to SO where I haven't had much luck.  
18:48 < niggler> Lkert http://niggler.azurewebsites.net/ i just pushed this
18:48 < niggler> http://hastebin.com/welupoteja.js is the code
18:48 < niggler> can you put up your code somewhere Lkert ?
18:50 < Lkert> pretty much the same thing.  one sec
18:52 < niggler> did you put an engines field in package.json Lkert 
18:52 < Lkert> err.. don't have a package.json. 
18:52 < Lkert> I didn't use one locally, so didnt think I needed one.
18:53 < niggler> http://hastebin.com/vakikimiki.sh @ Lkert 
18:53 < niggler> Lkert you need the package.json to tell it what version of node to run
18:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:53 < niggler> you don't need the formidable dependency (that was there for some other tests)
19:07 < Lkert> niggler: sorry I timed out.  Still there?
19:09 < niggler> hey Lkert sup
19:09 < MI6> joyent/node: Miroslav Bajtoš master * fd9e01c : debugger: print port number when connecting to debuggee (+1 more commits) - https://github.com/joyent/node/compare/45ed54600931...fd9e01c031ac
19:09 < safani> does anyone here use derbyjs
19:10 < safani> have you been having any problems with components?
19:10 < MI6> joyent/node: Miroslav Bajtoš v0.10 * 8c2ad47 : debugger: `restart` with custom debug port - http://git.io/UKyAzA
19:11 < Lkert> niggler: I skipped git for now, connected via ftp and copied your package.json & server.js over.  Now I get, "You do not have permission to view this directory or page."
19:12 < niggler> Lkert don't you need to run it now?
19:12 < niggler> the git post-commit hook will fire up the app automatically
19:12 < Lkert> oh!
19:12 < niggler> i haven't used FTP but AFAICT there's no way that the server could do that automagically
19:14 < Euclides> Anyone knows what can be happening here? I was using passport with express in osx and suddenly stop working , with this error http://pastebin.com/a9Tbsq4e , the weird thing is that i run the code in a virtual machine and works great, tried delete my node_modules and reinstalling, even reinstalled node, with no luck.  any help will be appreciated 
19:16 < deoxxa> Euclides: network problem, apparently. got a firewall or something in the way? little snitch maybe?
19:18 < deoxxa> also, i'm just going to link this again now that all the people on the other side of the world are awake: https://gist.github.com/deoxxa/5467112 << rendering video in the terminal with streams
19:20 < niggler> deoxxa is that on npm?
19:20 < deoxxa> niggler: nope, that's the whole thing right there
19:21 < niggler> also deoxxa there's a way to get the terminal size
19:21 < deoxxa> i know, but it has to know the size of the video
19:21 < niggler> wait what are the width and height arguments ?
19:21 < niggler> that's the width and height of the screen
19:21 < deoxxa> telling it the dimensions of the video stream
19:22 < niggler> oh they need to match
19:22 < deoxxa> yep
19:22 < niggler> couldn't you interpolate?
19:22 < niggler> err average
19:22 < deoxxa> sure, but then it'd be a whole ton more complex :P
19:35 < draginx> Is .forEach async? O_o
19:35 < howdynihao> no
19:35 < niggler> draginx make your own
19:35 < draginx> ty
19:35 < niggler> forEachAsync
19:36 < niggler> I imagine caolan/async has something
19:38 < sashman> could sb help me i cant get the message from mongodb server away with this safe:false blubb blubb i really tried everythinngg 
19:44 < pluma> draginx: There's http://npmjs.org/package/async if you want that
19:44 < draginx> yeah im just going to use that thanks
20:02 < context> anyone here looked at hoodie much? looks pretty awesome
20:04 < jdelgado> context: Only if you are doing small stuff :(
20:04 < context> jdelgado: everything is small if done right ;)
20:05 < jdelgado> context: Heh, I would love for you to look at some of the infastructures I've made then. :P
20:05 < context> though its kind of scary cause it seems any/all your validation is on the client side
20:05 < mien> Hi, ima build my first node cli application. Can someone recommend a good cli framework for node?
20:06 < jdelgado> I just use backbone on client and server, so validation happens twice.
20:06 < jdelgado> mien: commander. Hands down.
20:11 < d2dchat> anyone know of a project that does number validations?
20:11 < d2dchat> on forms?
20:12 < jdelgado> d2dchat: What kind of validation? Usually number stuff isn't complex enough for a module
20:13 < d2dchat> jdelgado: maybe.. I think micro modules are fine
20:20 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:23 < groundwater> othiym23 ahoy!
20:25 < howdynihao> look who finally decided to show up
20:26 < keyosk> So, i'm working on a project involving hitting an API written in PHP served by Apache. After attempting to get http.request to work, and getting the incremental timeout of doom issue. I wrote a very bassic http client using the 'net' class. And the same thing is happening. After I reach a certain point, which is a couple hundred simultaenous requests, I start getting "read ECONNRESET" and massive timeouts. Can anyone enlighten me as to what kind of bottl
20:26 < keyosk> e neck i'm hitting?
20:26 < groundwater> =]
20:27 < jaseemabid> How can I extend should.js ? I want to see if few of my functions return objects of a specific type. I need something like obj.should.be.a('myObj') just like obj.should.be.a('string'). 
20:28 < jdelgado> keyosk: Has something to do with your PHP box, bro.
20:28 < jaseemabid> Can I extend should.be.a with new, custom types ?
20:29 < howdynihao> jaseemabid use instanceof
20:31 < jaseemabid> howdynihao Can I check for properties and property values on that object, not just instance of type? 
20:31 < keyosk> jdelgado, it can handle far more traffic.
20:31 < keyosk> It's a distributed high traffic website that can handle an absurdly large amount of traffic, it's really not the issue.
20:32 < keyosk> Moreover, if I point the test script i've written based on the class elsewhere, I see the same incremental timeout issue.
20:32 < jdelgado> keyosk: That error indicates that it is a problem with the PHP box. Maybe you have some kind of IP throttle on the box that you don't know about.
20:33 < jdelgado> keyosk: I'm not trying to fight with you, I'm just telling you that it has something to do with that box. I have no idea what, but it isn't node if you are getting a connection reset.
20:34 < jdelgado> keyosk: Unless, of course, you have some kind of outbound throttle, which would also not be node's fault.
20:34 < keyosk> jdelgado: sysctl and file descriptors are tuned correctly, I don't see any other outbound throttle source here =/
20:36 < jdelgado> keyosk: Could be your provider for all you know. Time to get dirty and do some tcpdump digging.
20:36 < keyosk> jdelgado: But i'm testing on over a private lan :/
20:37 < jdelgado> keyosk: What does that have to do with anything? tcpdump it out
20:37 < howdynihao> jaseemabid: how complex will that get? if its like instanceof and check 1 or 2 properties then you dont need to extend
20:37 < xorbit> I am using the crypto module with aes-128-gcm and I am wondering how I'm supposed to read out the authentication tag after encrypting my message. Anyone have any idea?
20:38 < howdynihao> jaseemabid: though personally i wouldn't extend should.js anyway, i'd just write a custom function that does all the complex checking
20:39 < keyosk> jdelgado: How many net.connects would you expect to be able to be fired simultaneously before seeing timeouts of this nature?
20:41 < jdelgado> keyosk: You're only limited by your network bandwidth, open tcp ports on both boxes and memory... there shouldn't be a magic number. On my hardware, i'd say in the ten thousands.
20:41 < gbit86> prepare yourselves.. I am about to ask the dumbest question ever.. let's say I have 2 nodejs apps, one called server.js and the other called client.js on the same server and let's so I want client to poll server for some information.. how the frak do I run both?
20:42 < gbit86> all I know how to is type in node app name.js
20:42 < jdelgado> gbit86: forever
20:42 < gbit86> and ctrl + C to end it
20:42 < jdelgado> gbit86: npm search forever
20:42 <@mbalho> gbit86: make them both modules and make a third thing that requires them both
20:42 < gbit86> I have to use forever? There isn't something more simple for testing?
20:43 < gbit86> ok, that sounds more simple
20:43 < xorbit> keyosk: I did a test once with node.js where I managed to open 100000 simultaneous TCP connections. Took a little over 1 GB of memory and some changes to some kernel parameters to make it work, and the machine was struggling, but the connections did stay open for a while.
20:44 < gbit86> so I just run that third thing, and I can put a trigger in client to do something (connect to server) when I hit it on its port I suppose
20:45 <@konobi> keyosk: both ends are tuned?
20:45 < keyosk> konobo: Yep :/
20:45 < jdelgado> gbit86: I think that might be a little bit more complex than you want. If you are just testing, just do nodemon app.js & then do your next command
20:45 < keyosk> konobi ^^
20:46 <@konobi> may just be that the server can't keep up with the accept queue
20:46 < jdelgado> Indeed, that is why I suggested tcpdumping, so you can see where things start going sour
20:47 <@konobi> wireshark ftw
20:47 < jdelgado> There is obviously something wrong if you can only do a few hunded, unless you are working on dialup bandwidth
20:48 < jdelgado> konobi: How good is wireshark for ubuntu? Someone recommended that to me a month ago, have yet to try it out.
20:48 < keyosk> At this point i'm no longer doing my tests on production as the results are more or less consistent to my test machine. So right now i'm working with a local copy of the Apache / PHP API on the same machine as the node application. So all my requests are loopback
20:48 <@konobi> wireshark is good
20:48 < niggler> you probably want a lighter distro jdelgado 
20:49 < keyosk> I don't have nearly as much CPU or RAM as the production servers, but sysctl and apache confs are almost identicle
20:49 < jdelgado> niggler: :P
20:49 <@isaacbw> really, development on ubuntu is a nightmare
20:50 < niggler> ubuntu is the windows of linux
20:50 <@isaacbw> centos is the windows server of linux
20:50 < niggler> RHEL
20:50 < jdelgado> centos drives me up a wall
20:50 < xorbit> Anyone have experience with the crypto module?
20:51 < niggler> what are you trying to do xorbit 
20:51 < jdelgado> what distro are you guys on?
20:51 < xorbit> I am using the crypto module with aes-128-gcm and I am wondering how I'm supposed to read out the authentication tag after encrypting my message.
20:51 < niggler> jdelgado: I'm not always on linux, but when I am I use debian 
20:51 < niggler> (currently on a mac)
20:51 <@isaacbw> archlinux (niggler: sshh)
20:52 < niggler> lol isaacbw 
20:52 < jdelgado> lmao
20:52 < xorbit> jdelgado: Linux Mint on my laptop and Debian on servers
20:53 < jdelgado> I have ubuntu on most of them, debian on the rest. CentOS drives me nuts and don't even get me started on red hat
20:53 < jdelgado> I'm derping with windows on my dev machine
20:54 <@isaacbw> "I'm derping with windows on my dev machine" what a strange thing to say
20:55 < jdelgado> lol
20:57 <@isaacbw> alright, for some reason firefox won't render github's fonts properly
20:57 < niggler> isaacbw switch to chrome
20:58 < jdelgado> chrome ftw
20:58 <@isaacbw> chromium doesn't report anything to google, right?
20:58 < niggler> isaacbw srware iron
20:59 <@isaacbw> wait, so it does?
20:59 <@isaacbw> yuck
21:00 < internaut_jack> Ok, beginner question
21:01 < internaut_jack> How do I copy a folder using node?
21:01 < internaut_jack> Looking at the stream API, it doesn't seem obvious
21:01 < internaut_jack> Am I missing something?
21:01 < niggler> internaut_jack: easiest way is to use child_process
21:01 <@konobi> internaut_jack: check fstream
21:02 < internaut_jack> niggler, and execute cp from the cli?
21:02 < internaut_jack> konobi, fstream is a module?
21:02 < niggler> yeah internaut_jack like you would on the command line
21:02 < niggler> child_process.exec
21:02 < internaut_jack> niggler, perfect, thanks!
21:03 <@konobi> internaut_jack: yup
21:03 < internaut_jack> konobi, thanks!
21:05 <@isaacbw> google has started to really weird me out with the extremely targeted ads
21:05 < niggler> watching too much porn isaacbw ?
21:05 <@isaacbw> heh
21:05 < jdelgado> no adblocker?
21:06 <@isaacbw> nope
21:06 <@isaacbw> it's weird to be searching for something and immediately see ads for that thing on every other page you visit
21:07 <@isaacbw> it's like internet is saying "we're watching you"
21:07 < jdelgado> adblockplus.com - it's amazing
21:07 < niggler> ghostery.com
21:08 < niggler> isaacbw though i agree with that sentiment (targeted ads are creepy)
21:09 <@konobi> depends just how targeted
21:09 <@konobi> i'd rather see something at least half way in the realm of interest than ones for quilting tools
21:10 < niggler> "meet local horny node.js developers" at adultnode.com
21:10 <@isaacbw> lool
21:11 < Petrogad> lol
21:11 <@isaacbw> konobi: that's how I felt at first, but it just got to be too much
21:11 < jdelgado> niggler: Almost just spit out my drink on that one lol
21:11 <@isaacbw> and I've started using duckduckgo
21:11 < Petrogad> duckduckgo ftw
21:11 < Petrogad> so much nicer
21:11 < niggler> DDG has been confusing me recently
21:11 <@isaacbw> it really only took about a week for me to stop longing for google
21:12 < niggler> only recently i started seeing "built by DuckDuckGo in partnership with: Y!"
21:12 <@isaacbw> the results are just yahoo results
21:12 <@isaacbw> which surprised me to learn actually
21:13 <@isaacbw> you've been tricked into using yahoo!
21:13 < jdelgado> yeah
21:13 < jdelgado> lmao has anyone done the bingiton thing?
21:13 < jdelgado> I pick google each time
21:13 <@isaacbw> yup, I tried a few times and kept picking google
21:21 <@isaacbw> so somehow loading in a certain color theme to emacs sometimes causes me log out of linux
21:22 < thomblake> wut
21:22 <@isaacbw> wut indeed
21:22 < thomblake> Well, I could see how that could happen I guess.
21:23 < thomblake> You probably have it set up so that certain characters log you off, and the weird color theme might be sending those characters.
21:23 <@isaacbw> hmm, maybe
21:24 <@isaacbw> I think the only solution is to write my own text editor
21:24 < thomblake> Though now that I've said it I find it very unlikely and the mystery is probably buried in the gigantic source code of emacs.
21:24 < aleksandar> I am sending json strings to my clients from my server, but i want to reduce the trafic, so I wonder how would I compare the difference between the old string and the new one and only send an "updated" version that contains the difference between them?
21:25 < daurnimator> aleksandar: http://bramcohen.livejournal.com/73318.html
21:25 < eighty4> Anyone tried geddyjs.org and have any opinions on it?
21:26 < jdelgado> eighty4: Stick with express... geddy is a little too uptight and overweight
21:26 < daurnimator> aleksandar: also a cursory google fount this: https://github.com/jclulow/jsondiff
21:26 < keyosk> aleksander: keep track on the server the last string you sent to each client, then only send if it differs
21:27 < eighty4> jdelgado: ok :)
21:27 < jdelgado> aleksandar: Or, if you can, just send changes as they occur. :)
21:27 < aleksandar> It's a http server jdel
21:28 <@konobi> aleksandar: implement diff and patch in JS
21:28 < aleksandar> and the structure of the program wouldn't allow it
21:28 < jdelgado> aleksandar: Gotcha, just wanted to make the suggestion, in case it was possible.
21:29 < keyosk> So i've re-run my timeout tests with wireshark running, I've tagged each request with a unique id in the url and on timeout I log that url, so that I can easily corrolate in wireshark and find the log for the request which timed out
21:29 <@konobi> aleksandar: https://code.google.com/p/google-diff-match-patch/
21:30 < keyosk> Still not sure why these are deciding to time out :/
21:30 < semvar> package.json semver question. Is there community wisdom as to best use cases whether to put the ">" next to your dependencies semvers or the default "~" which is placed there when doing a npm install -S <package> ?
21:31 < jdelgado> semvar: I just leave it on the exact version, so that way, stuff doesn't break.
21:31 < aleksandar> konobi, those examples were great! yes i should be able to use this
21:32 < keyosk> I'm seeing some items marked with [TCP Retransmission] by wireshark - any ideas?
21:33 < samholme_> I get EACCES error when trying to use port 80
21:33 < samholme_> What does this mean?
21:33 < keyosk> samholme_ : something is already listening on port 80
21:33 <@konobi> something is using it or you don't have permission to open the port
21:33 < samholme_> keyosk: how do figure out what?
21:34 <@konobi> samholme_: netstat -an
21:34 < keyosk> samholme_ : Are you running a webserver or skype?
21:34 < samholme_> Oh, I needed to sudo
21:34 < samholme_> :P
21:34 < keyosk> :P
21:36 < jdelgado> keyosk: That sounds like a problem
21:36 < ScroatyMcduggins> indeed
21:36 < keyosk> Yep...
21:36 <@konobi> keyosk: http://www.counting-to-infinity.com/2012/05/troubleshooting-common-networking_28.html
21:37 < keyosk> I'll take a look into this, thank you
21:40 < samholme_> I'm having trouble port forwarding my SMC networks router
21:41 < samholme_> I have the port forwarding set up correctly for HTTP (port 80), but when I try to access my IP it don't work. :p
21:42 < samholme_> I checked canyouseeme.org on port 80
21:42 < samholme_> and it says success
21:44 <@konobi> samholme_: you're probably running into a NAT loopback issue
21:45 < samholme_> konobi: yeah, was just going to say that maybe my own computer cannot loop around like that
21:45 < samholme_> what is a loopback?
21:45 < samholme_> konobi: WHat causes this issue do you think?
21:45 <@konobi> NAT
21:45 < aleksandar> samholme_, http://hidemyass.com
21:45 <@konobi> so it'll be your router
21:47 < aleksandar> I read this in networking but I can't remember how to explain his issue, or wait I can, that's just the way it is.
21:47 <@konobi> depending on the firmware, you can get it working
21:47 < keyosk> I think the TCP Retransmission might be a red herring, none of the requests that timed out are flagged with TCP Retransmission
21:48 <@konobi> basically your stateful-ness needs to mark not only your internal IP, but which interface the traffic came over
21:57 <@isaacbw> is there a way to see the log output on travis ci
22:02 < LeftWing> aleksandar: https://github.com/jclulow/jsondiff # that one is mine; let me know if anything about it is unclear.
22:02 < LeftWing> (or broken!)
22:04 <@isaacbw> man, does anyone know what version of gcc travis-ci is using
22:04 <@isaacbw> it doesn't recognize the -std=c++11 flag
22:07 <@isaacbw> heh, 4.2
22:08 <@konobi> isaacbw: https://github.com/travis-ci/travis-core/issues/195
22:08 <@isaacbw> yup, I'm having the same issue
22:09 < dcholth> Hello.  I have an API call: app.get( '/api/questionsByZone/:zone', function( request, response ) {//stuff}  and when I go to the URL http://localhost:3000/api/questionsByZone/foo, request.params are always empty
22:09 <@isaacbw> damn
22:09 <@isaacbw> "If you have a good source where we can get an updated version of g++ (a PPA for instance), we can look into it." wut
22:09 < jdelgado> isaacbw: I noticed that too lol
22:10 <@isaacbw> any idea how to specify clang in my binding.gyp?
22:10 < dcholth> Any idea why my :zone property isn't populating?
22:11 <@isaacbw> or maybe a conditional for which gcc version is being used
22:12 <@isaacbw> they've got gcc 4.6 for c++ projects, but not for other projects it seems
22:12 <@isaacbw> that's too odd to be true
22:12 < jdelgado> hmm
22:15 <@isaacbw> what a pita
22:15 <@isaacbw> so I just have to wait for them to figure out how to update gcc?
22:15 < jdelgado> sounds like that is your only choice
22:17 <@isaacbw> aside from whining on github, which I'm about to do
22:17 < jdelgado> that will prob work
22:17 < jdelgado> you can also tweet about it
22:18 <@isaacbw> does travis have different vms for different build types?
22:19 < mscdex> isaacbw: OSX does support unordered_map btw
22:20 <@isaacbw> mscdex: in the <tr1/unordered_map> header, right?
22:21 < mscdex> isaacbw: yeah and then accessible via tr1::std::unordered_map
22:21 < dcholth> Gah!  Nvm its working...
22:21 < mscdex> isaacbw: i just check if __APPLE__ is defined, then use tr1 version, otherwise use std::unordered_map
22:22 <@isaacbw> yea, niggler put together a header block for me and I merged it in
22:22 < mscdex> ah ok
22:27 < LouisT> I have this: this[shortcuts[num]] = function (api,id,cb,opts) { this.byid(id,api,cb,opts); }.bind(this,api);
22:27 < LouisT> what would be the best way to get rid of that bind?
22:28 < dypsilon> LouisT, there is a bind function in lodash
22:28 < oxigen8> heya
22:28 < aleksandar> Hi
22:28 < dypsilon> you could use closure: var self = this
22:29 < LouisT> dypsilon: that's not really the issue, I need to be able to pass 'api' to the function without the user having to do it..
22:29 < oxigen8> Im some problems using https://github.com/mariano/node-db-mysql driver for nodejs, any mature driver recommendation ?
22:29 < dypsilon> LouisT, use closure and return the function which has api inside the closure scope?
22:30 < LouisT> I'm not sure how to do that.
22:30 <@konobi> LouisT: look up "function currying"
22:31 < dypsilon> +1
22:31 < dypsilon> also just look at lodash, there is _bin, there are partial invocation and so on
22:31 < dypsilon> *_bind
22:32 < dypsilon> LouisT, maybe this SOQ will help http://stackoverflow.com/questions/8487768/returning-functions-in-javascript-understanding-scope-closures
22:32 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:33 < LouisT> dypsilon: yea, thanks
22:34 < dypsilon> LouisT, you are welcome
22:54 < dukedave> I'm using http://mongoosejs.com/docs/api.html#query_Query-stream, but in my mocha tests finish before "stream.on('data'," is ever called
22:55 < dukedave> This makes sense, because there aren't any outstanding timers / callbacks, but I'd like to wait until I get a "stream.on('close'," before finishing 
22:55 < dukedave> I think I probably just need a decent stream tutorial
22:56 < dukedave> Or: Just don't use streams 
22:56 < dukedave> Opinions? :)
22:57 < howdynihao> mocha tests can be async
22:58 < jdelgado> inded
22:58 < jdelgado> indeed*
22:58 < Technodrome> why can't you do a getProrotypeOf on a callable property?
22:58 < dukedave> howdynihao, yes! 
23:01 < howdynihao> yea? 
23:01 < howdynihao> yea!
23:05 < jdelgado> indeed
23:20 < DDIIM> Hello!
23:20 < DDIIM> Wanted to share a new programming forum: http://thedevshed.net/forum/forum.php 
23:20 <@isaacbw> cut it out
23:22 -!- DDIIM was kicked from #Node.js by konobi [next time will be a ban]
23:22 <@mbalho> there isnt even a node forum
23:23 <@isaacbw> lol
23:24 < jdelgado> lol all 0 posts
23:24 <@mbalho> they did say 'new'
23:25 < jdelgado> do people even use forums anymore? I haven't been on one in so long
23:26 <@mbalho> forums are the soul of the internet
23:26 <@isaacbw> I feel like javascript/web hackers are missing a good forum
23:29 < dypsilon> github is our forum
23:30 < dypsilon> + SO
23:30 < brycebaril> it's not a form until you can have a 640x480 animated gif avatar next to your name.
23:30 < jdelgado> yeah, that is kind of how I feel
23:30 < brycebaril> *forum
23:30 < jdelgado> lmao
23:30 < dypsilon> and a banner sized animated signature
23:30 < dypsilon> !
23:31 < dypsilon> i want that on github, now!
23:31 < jdelgado> those were the days
23:31 < brycebaril> submit a PR :)
23:34 < paulkon> lol https://vaadin.com/home
23:35 <@isaacbw> why don't they learn
23:35 < paulkon> I find it comical that Java and modern are on the same line
23:36 < jdelgado> That's like calling coldfusion practical
23:37 < dypsilon> java is still better as many other languages for lots of task nowadays
23:38 < s5fs> jdelgado: coldfusion? you work linode or something?
23:39 < jdelgado> s5fs: lmao. Can you believe that entire fiasco?
23:39 <@isaacbw> dypsilon: not so much for clientside web development
23:39 < s5fs> jdelgado: I received a call from my bank tuesday, card is dead. I'm assuming it was them.
23:40 <@konobi> java is quite modern... i mean everyone has interacted with it recently... okay, it was to disable it for security reasons, but everyone none the less
23:40 < dypsilon> isaacbw, nope, not at all :)
23:40 < paulkon> qq, why does google still look for java and python developers?
23:40 <@konobi> fiasco?
23:40 < s5fs> jdelgado: very surprised you can compromise a cf server and somehow gain access to their billing systems
23:40 < paulkon> why not node developers?
23:40 < s5fs> konobi: linode was compromised via a coldfusion server hole
23:40 < jdelgado> s5fs: It just amazes me that they knew their database had been stolen, the private key is on the same server, yet they don't alert customers.
23:41 <@isaacbw> paulkon: because google has a lot of java and python applications?
23:41 < jdelgado> s5fs: Yeah, indeed
23:41 < dypsilon> paulkon, they invested too much in java and python
23:41 <@konobi> ha
23:41 < paulkon> but do they even believe that server-side javascript is the way of the future?
23:41 < paulkon> or, is it?
23:41 < paulkon> I mean for quick development
23:42 < paulkon> performance wise I always think back to C or C++
23:42 < dypsilon> nobody knows what google believes
23:42 < jdelgado> I think Atwood's law is wildly accurate
23:42 < s5fs> google doesn't know what google knows. if you ask the dart or golang teams what the future is, i'm sure they'd have different answers.
23:42 <@konobi> paulkon: pppfffttt.. ASM
23:42 < jdelgado> paulkon: ^
23:43 < paulkon> it's all about the future
23:43 < s5fs> paulkon: hell, i'm not sure server-side js is the future.
23:43 < paulkon> yeah, no one knows
23:43 < s5fs> it's my current, for sure, but who knows what the market will want in 6mo
23:44 < jdelgado> If it isn't, I think it will stick around for a lot longer than some other coding fads.
23:44 < s5fs> paulkon: this isn't even my first dance with server-side js, back in the late 90s/early 2000s I was reponsible for managing a site built with Netscape Livescript.
23:44 < paulkon> it won't go away until js on the client goes away imo
23:45 < jdelgado> s5fs: Ohhh shittt
23:45 < paulkon> wow, early 90s huh?
23:45 < s5fs> jdelgado: dude, I was writing cobol as recently as 2008, nothing seems to ever die
23:45 < paulkon> late*
23:45 < s5fs> paulkon: sorry, meant late
23:45 < s5fs> my first job was cleaning up html generated by FrontPage 98 haha!
23:45 < jdelgado> s5fs: what could you possibly be coding in cobol? :P
23:45 < s5fs> tables baby!
23:45 < s5fs> jdelgado: financial system work, an ERP called Lawson
23:46 < jdelgado> s5fs: Oh that makes sense, if it was already coded in it
23:46 < s5fs> Lawson had a large investment in dhtml!
23:46 < s5fs> jdelgado: yup, my cobol work was extending existing apps, applying patches by hand and leaving funny comments for future me.
23:47 < s5fs> also, custom app dev, but even that was copy/pasta work
23:47 < jdelgado> heh yeah
23:47 < s5fs> i'm 33 but have the work experience of a 60yr old haha
23:48 < dypsilon> what do you guys think about generating integration/functional tests? shoul i go that route or should i start building abstractions in the automated tests?
23:48 < jdelgado> dypsilon: It really depends on what you are making
23:49 < dypsilon> jdelgado, rest api tests
23:50 < routerpro> hi
23:52 < jdelgado> dypsilon: Both would work, I personally have jasmine tests that makes requests to the port, that way, I can make sure it actually works, not just the function works.
23:53 < jdelgado> dypsilon: Just be sure not to over do it.
23:53 < jdelgado> routerpro: Hi
23:54 < dypsilon> jdelgado, thank you for your input
23:57 <@konobi> dypsilon: one is "are you doing what i mean", vs "are you doing what I say" =0)
23:58 < howdynihao> test yo tests
23:58 < dypsilon> konobi, how do you mean it?
23:58 <@konobi> for example, you can test of a feature is there
23:58 <@konobi> but... you can't always handle all the error cases in those types of tests
23:59 < dypsilon> konobi, how does this relate to my question?
--- Log closed Sat Apr 27 00:00:02 2013
