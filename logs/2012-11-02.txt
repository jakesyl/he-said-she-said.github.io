--- Log opened Fri Nov 02 00:00:41 2012
--- Day changed Fri Nov 02 2012
00:00 < bradleymeck> creationix is there a writeup on forwarding an ssh session into c9
00:01 < mdedetrich> hey I'm trying to use this captchagen library https://github.com/wearefractal/captchagen
00:02 < mdedetrich> and I have no idea how to user the buffer that it outputs
00:04 < wdent> Anyone have an opinion on setting up your own oauth server to handle securing an API you have?
00:06 < raj> what's npm?
00:06 < raj> node package manager?
00:06 < Germanaz0> hello everybody
00:06 < tnorris> son of a bitch. thought I was doing real good with my js prime generator (1e6 primes in 3 sec). then ran a cpp implementation. took 1/10 sec.
00:06 < tnorris>  js is great for a lot of stuff, but not for raw mathematical calculations.
00:08 < opus_> Can somebody tell me what I am doing wrong with Mongoose/Model.Update() on a nested document? http://pastebin.com/F5UnvLz4
00:08 < mdedetrich> tnorris: my motto is to always look for a library first
00:10 < bradleymeck> wdent sure, just let me have bearer tokens and scopes so you can limit / revoke tokens sanely
00:10 < Germanaz0> Is there any way to make chat video conferences, face to face, like google hangout
00:10 < Germanaz0> but with nodejs
00:10 < larzconwell> mdedetrich,  The outputed buffer is just a Node Buffer http://nodejs.org/api/buffer.html
00:10 < sinclair_> the nodejs windows installer has a bug
00:11 < bradleymeck> Germanaz0: long story : yes, short story i would use webrtc server provided by google
00:11 < sinclair_> which they should fix, because its breaking a lot of other installers
00:11 < Germanaz0> so webrtc is good ?
00:11 < larzconwell> sinclair_,  Make an issue?
00:12 < bradleymeck> Germanaz0: if you only want to support browsers with webrtc sure, there are other ways to do it, but its a pain (hence my saying "long story")
00:12 < sinclair_> larzconwell: yeah, i might, its only a small issue, the x86 installer does not wind up in the C:/Program Files (x64) directory
00:13 < mdedetrich> larzconwell: thanks
00:13 < raj> I have node.js installed (don't remember how I did it last time). But I would like to update it to the latest version. Is there a way to do this all by commandline?
00:13 < sinclair_> meaning i have to manually copy it from Program Files and update the environment vars just to be able to install some additional ms tools 
00:13 < Germanaz0> bradleymeck, so to use webrtc I need a special browser
00:13 < larzconwell> raj What OS are you intending to install it on?
00:13 < raj> ubuntu
00:13 < larzconwell> mdedetrich,  You're welcome
00:13 < sinclair_> like the azurenodesdk :(
00:13 < bradleymeck> Germanaz0: just a recent one and not IE
00:14 < Germanaz0> ah good then :D
00:14 < raj> I looked on synaptic and their version looks very old
00:14 < raj> 0.3.x
00:14 < bradleymeck> raj: look at nvm
00:14 < larzconwell> raj Yes synaptic versions are usually old sense they sync up with Debian unstable 
00:14 < raj> k
00:14 < larzconwell> raj Don't use nvm on Ubuntu.
00:14 < raj> so sudo apt-get install nodejs npm would be old, no?
00:15 < larzconwell> raj Uninstall the old Node version, then go here https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager and install the PPA
00:16 < Germanaz0> bradleymeck, any nodejs package that could reccomend to a better webrct implementation ?
00:16 < bradleymeck> no
00:16 < raj> larzconwell, oddly enough, I have no idea how to uninstall the old version I have
00:17 < larzconwell> sinclair_,  Yeah that's sounds like a bug. Better create an issue hopefully someone can help you get it fixed.
00:18 < sinclair_> larzconwell: its just a inconvenience more than anything, but it would annoy some folk out there, where can i submit
00:18 < sinclair_> ?
00:18 < raj> larzconwell, any idea how I might be able to uninstall my current version?
00:19 < larzconwell> sinclair_,  You can submit bugs/etc to https://github.com/joyent/node/issues/new but before you create a new check if any other issue has that problem already
00:19 < sinclair_> alright, cheers
00:19 < larzconwell> raj,  Okay go in your lib directories(/usr/lib, /usr/local/lib) and see if you can find "node_modules" in either of them/
00:20 < larzconwell> sinclair_,  Cheers, hopefully you can get that solved, sounds a bit annoying.
00:20 < raj> larzconwell, nope, not in either of them
00:21 < sinclair_> larzconwell: actually, i wish the MS installers would let me select the node install location
00:21 < larzconwell> Ohhhh, okay so in your shell do "which node"
00:21 < raj> /home/raj/local/bin/node
00:21 < larzconwell> sinclair_,  Well let them know that in the issue! That's a great idea IMO.
00:21 < larzconwell> Oh okay so it's a local install. 
00:22 < larzconwell> Check if "node_modules" exists in /home/raj/local/lib/
00:22 < raj> yes it does
00:22 < raj> in fact, nothing else is in that directory except `node` and `node_modules`
00:22 < larzconwell> Okay awesome.
00:22 < larzconwell> is there a "share" directory in /home/raj/local
00:22 < raj> yes sir
00:22 < raj> has a `man` directory in there
00:23 < larzconwell> Is there a "nodejs" directory in there?
00:27 < raj> larzconwell, no
00:27 < larzconwell> Okay that's fine, I'm gonna gist a couple commands for you to do to uninstall the old version.
00:28 < raj> i'm actually having to deal with my electric company guy at the door (hurricane area), would you pm it to me? I'll run them as soon as I get back and we can continue?
00:28 < raj> I REALLY APPRECIATE IT BTW!!!
00:29 < larzconwell> Okay yeah I will.
00:31 < ronson> Hi I just installed node.js on CentOS 5.7 following these instructions: https://gist.github.com/3178637 but npm isn't working.
00:32 < ronson> Does anyone know of a good guide to remove this broken version and how to install npm from source?
00:33 < ronson> I tried the curl script but some URLs in it are down
00:37 < larzconwell> ronson,  You can try this to uninstall the broken version https://gist.github.com/3997856 just set PREFIX
00:39 < ronson> larzconwell: got it.  I removed the folder of the old broken one, downloaded the install.sh to my drive and ran it with sh install.sh and it worked
00:39 < ronson> the curl thing wasn't working though
00:39 < ronson> or maybe the dead links revived themselves, who knows
00:42 < larzconwell> There's no curl use in the post you linked?
00:42 < chilts> anyone know how to tell bouncey to not respond to a message (ie. you don't want to forward it to another server since you know it's a 404)?
00:51 < MelkorNemesis> hi guys
00:51 < MelkorNemesis> can anyone help me? https://www.evernote.com/shard/s220/sh/a41955e6-98bb-49aa-8ff9-5dc758605b4d/e132b9d96d40b7c1bdb6bcdbb480d6c2
00:51 < MelkorNemesis> i dont know, why there are these errors
00:52 < MelkorNemesis> do i really need to set path to xcode so it can rebuild something? i hoped it just downloads all the dependencies compiled
00:54 < TooTallNate> MelkorNemesis: you have the command line tools installed?
00:54 < MelkorNemesis> TooTallNate: you mean xcode command line tool?
00:54 < TooTallNate> yes
00:54 < MelkorNemesis> for "make install" and so?
00:54 < MelkorNemesis> probably not :/
00:54 < MelkorNemesis> that's what i am asking, thanks
00:55 < TooTallNate> MelkorNemesis: ya you need that to install node-expat since it's a native add-on module
00:55 < MelkorNemesis> tobmastr: ok thanks, i am on it
01:04 < opus_> is there a Portable Contacts schema for Mongoose that I can use?
01:06 < opus_> ha, supergoose is a funny name
01:32 < netgene> http://pastebin.com/3SCntvAM   <--  I know the problem has to do with the asynchronous execution? but how can I get the results of $products outside the inner function once the execution is complete??? 
01:43 < mscdex> netgene: use a callback or something
01:46 < mscdex> netgene: something like this perhaps: https://gist.github.com/d342d9802c8b8b7ea697
02:19 < motin> hi all
02:20 < motin> i have a very annoying situation where node.js simply ignores any errors encountered and kind of assumes a "on error resume next" execution
02:20 < motin> is this a common situation? easy to fix?
02:25 < motin> this is in a for loop btw, playing now with try catch
02:29 < mscdex> motin: got example code?
02:30 < motin> @mscdex: i do but it's rather dense, it will take some time to get a simple code example gisted
02:33 < motin> i got this simple symptom code:   		console.log('before throwing');
02:33 < motin> 		throw new Err("foo");
02:33 < motin> 		console.log('after throwing');
02:33 < motin> and only "before throwing" gets shown in the console
02:34 < motin> then the script continues
02:37 < motin> aha, now i found the culprit
02:37 < motin> a return statement somewhere in a async callback
02:42 < motin> but arg now it happens again
02:43 < motin> apparently throws in async callbacks are not propagated to the error handler?
02:43 < motin> is this normal in node.js?
02:44 < AAA_awright> motin: Does what happen?
02:44 < astropirate> yes
02:44 < AAA_awright> Which error handler?
02:44 < astropirate> motin, look into Domains
02:44 < motin> domains, ok
02:44 < AAA_awright> Well it depends on which error handler motin is talking about
02:45 < motin> @AAA_awright: like the "default" error handler :)
02:45 < motin> so that an error is reported on stderr
02:45 < AAA_awright> process.on.error ?
02:45 < AAA_awright> Uncaught exception error?
02:45 < AAA_awright> First argument of a callback err?
02:45 < motin> putting it in noob speak: i dont see the error in the console output
02:46 < AAA_awright> If a callback returns an Error object as its first argument, no, that's not going to be thrown to the console, you have to test for that
02:46 < motin> the callback throws an error using throw
02:46 < motin> in any other programming language, i'm used that a throw will cause the program to halt, but not here
02:46 < motin> and I have no try/catch blocks
02:47 < AAA_awright> A throw that isn't caught should cause a fatal error if there's no process.on.error handler
02:47 < AAA_awright> But callbacks don't use throw (there's no call stack for them to throw to)
02:48 < motin> hmm ok, so if I manually put a throw in there it is in order for it to be ignored?
02:49 < AAA_awright> What do you mean?
02:49 < motin> or any errors
02:49 < motin> like this
02:49 < motin> console.log('before undefined function');sdfsfdsfsf();console.log('after undefined function');
02:49 < motin> this code is in a callback, and in the console I only see: "before undefined function"
02:50 < drikoda> just got into nodejs.. it's awsome in the backend.. I have a question about the front end. How do you do it?
02:50 < motin> @drikoda: look into express
02:50 < drikoda> particularly, routes, controllers and views
02:50 < AAA_awright> motin: There's generally two or three ways errors are reported... Obviously, they can be silently ignored. If you pass a random string to Date like (new Date("invalid date")).valueOf() will be NaN
02:50 < drikoda> thanks motin 
02:51 < AAA_awright> motin: They can throw an Error object, which unwinds the stack until it hits a catch block
02:51 < AAA_awright> motin: Or you can pass an Error object as an argument to a callback
02:58 < motin> ok now i think i found it
03:00 < motin> i am loading an image and it has an onload and a onerror handler
03:01 < motin> @AAA_awright: would you mind helping me how to structure this callback? https://gist.github.com/3998426
03:01 < motin> i tried to follow nodejs conventions and pass the error object as the first argument to the callback function
03:02 < motin> but doing that made all errors silently ignored
03:07 < mscdex> motin: that looks fine to me
03:08 < mscdex> what does done look like?
03:11 < motin> updated the gist with the done function
03:12 < motin> it seems that the error goes back to the readImage and the onerror is triggered, so it goes right back into the callback function again
03:14 < mscdex> i don't understand. the error should be passed in to your done function. you're not checking it or using it at all in done?
03:14 < motin> not in this code to reproduce the problem
03:15 < draginx> I'm running into a rather strange problem.. I have a local machine and a dev machine both with phantomjs.. I have the following code: https://gist.github.com/29400ca068e85891e4ff and it works fine on my local machine.. but on the dev server I get a 504 timeout with it... both are behind nginx with the same configs, both have the same version of phantomjs.. any ideas?
03:15 < motin> and before this, I was doing some things within the if (err) {} block, and those errors where silently ignored, hence my coming to this chat :)
03:16 < draginx> I've chown www:www the ./system folder, and chmod 777'ed it (just to see if it was a permissions error) the nginx user (www) is not the same as my /home/draginx folder though.. could this be the problem?
03:16 < motin> and now I believe i get it… if there is any error occurring within the if (err) {} block, then those errors will be thrown up, which will call upon done(err) and an infinite loop occurs...
03:17 < mscdex> there should be no infinite loop if the canvas library you're using was coded properly
03:19 < motin> the actual output i get from the gisted code is:
03:19 < motin> before undefined foo-function
03:19 < motin> before undefined foo-function
03:19 < motin> [ReferenceError: foo is not defined]
03:19 < draginx> Nothing shows up in stderr.log either
03:20 < motin> so it runs into the error, goes back up to onerror, back down to the callback, which runs into the error, and then it gets output to the console maybe by node itself or similar
03:20 < motin> so no infinite loop, just one extra loop...
03:20 < mscdex> what does foo do?
03:21 < motin> foo() is a function that is undefined
03:21 < motin> just to simulate that i made a typo or a bug
03:21 < mscdex> what canvas module is this?
03:21 < motin> npm install canvas
03:24 < motin> it seems to be something fishy with the onerror, onload logic...
03:25 < motin> so maybe I can assume that this is some canvas issue and not a general node.js issue
03:25 < motin> hard to tell as a newcomer… 
03:26 < mscdex> well, it is wrapping the callbacks in a try-catch
03:26 < mscdex> onerror and onload are wrapped in a try catch
03:26 < motin> uuurgh
03:26 < motin> then there is definitely something fishy!
03:27 < motin> forgot that it is so easy to check the source code of modules… 
03:28 < mscdex> but when it catches an error in the callback, it falls FatalException which should emit uncaughtException
03:28 < mscdex> s/falls/calls
03:29 < mscdex> but it does do some checking with persistent handles
03:29 < mscdex> so the problem may lie there
03:29 < mscdex> *shrug*
03:30 < motin> thanks for the support mscdex!
03:30 < motin> at this stage, I dont have an inner compass of what is expected and not expected in nodejs "strangeness"
03:31 < mscdex> no wait, actually that makes sense
03:31 < mscdex> the image loads and calls onload which calls done, which causes an error
03:32 < mscdex> and because of that, it then calls onerror which calls done which causes an error
03:32 < mscdex> and because of that it calls FatalException which throws and exits the process as you saw
03:33 < motin> true, this extra verbose output tells the same story:
03:33 < motin> in readImage done(). err: null
03:33 < motin> before undefined foo-function
03:33 < motin> in readImage done(). err: [ReferenceError: foo is not defined]
03:33 < motin> before undefined foo-function
03:33 < motin> uncaughtException [ReferenceError: foo is not defined]
03:33 < motin> so the moral of this story is… 
03:34 < mscdex> ... use a try-catch in your error handler for errors
03:34 < mscdex> :p
03:35 < mscdex> and check err in done first
03:35 < mscdex> etc etc etc
03:35 < motin> hmm
03:35 < motin> and...
03:35 < motin> process.on('uncaughtException', callback);
03:36 < motin> i had only an console.log statement in that callback
03:36 < motin> so maybe thats why the script continued...
03:36 < motin> and didnt halt
03:36 < mscdex> yeah
03:37 < mscdex> uncaught exceptions are hard to recover from
03:37 < mscdex> that's why domains are important
03:38 < motin> ah
03:38 < mscdex> canvas could get domain support for free if they used an EventEmitter instead of function properties
03:38 < mscdex> but i'm guessing the canvas module is trying to be API compatible with the browser
03:38 < motin> yes exactly
03:39 < motin> i'll read up on domains
03:39 < motin> now i realized another moral
03:39 < mscdex> i'm not sure if explicit domain creation would help in this case or not
03:39 < motin> _never_ have an error handler that is silent and doesn't throw the error in case it isnt recovered from
03:40 < motin> or several...
03:40 < motin> this is what I had. the onerror just ran done(err) and the uncaughtexception handler
03:40 < etcetera> is socket.io a superset of websockets protocol?
03:41 < motin> that's why multiple errors happened seemingly at random and i experienced "on error resume next" style behavior
03:41 < motin> ok I believe I have learned a lot from this exercise
03:41 < motin> thank you sensei mscdex
03:41 <@Nexxy> lol
03:41 < mscdex> etcetera: no, it's an abstraction layer on top of transports
03:42 < mscdex> etcetera: although it does provide an alternative API that makes it look websockety
03:42 < etcetera> mscdex: so it's not compatible with a standard websocket client?
03:42 < mscdex> etcetera: sure, socket.io has a websocket transport
03:43 < mscdex> it'll be a bit hard without a socket.io client though, because socket.io uses its own protocol
03:44 < mscdex> if you knew the protocol well enough, you could roll your own client i suppose, but that'd be kind of silly
04:03 < jwulf> mongo updating question
04:03 < jwulf> if I do:
04:04 < jwulf> update({key: value})
04:04 < jwulf> how do i distinguish between "key" and var key
04:04 < jwulf> there
04:04 < jwulf> ?
04:04 < timeturner> ?
04:04 < jwulf> a literal value or a variable
04:05 < jwulf> in examples I see unquoted literals used as keys
04:06 < Mortchek> jwulf, object literal keys are always strings, not variables
04:06 < Mortchek> jwulf, you can't use a variable for a key name in object literal notation. Instead, you can do foo[bar] = baz
04:07 < jwulf> for mongo update strings?
04:07 < Mortchek> (by the way, that question is unrelated to MongoDB; it's a basic JS question)
04:07 < TehShrike> thing.butts = butts is the property name.  thing[butts] = butts is a variable containing the property name.
04:08 < jwulf> sorry, still not quite getting it 
04:08 < jwulf> from http://www.mongodb.org/display/DOCS/Advanced+Queries
04:08 < jwulf> / i.e., select * from things where x=3 and y="foo"
04:08 < jwulf> db.things.find( { x : 3, y : "foo" } );
04:08 < jwulf> how do I do
04:08 < Mortchek> jwulf, again, has nothing to do with MongoDB.
04:08 < jwulf> var searchfield = 'X'
04:08 < jwulf> db.things.find( { searchfield: 'something' })
04:08 < Mortchek> jwulf, you would need to create the object, then do obj[searchfield] = 'something'
04:09 < Mortchek> Because searchfield there *always* means 'searchfield', the string.
04:09 < jwulf> k, got it
04:09 < jwulf> thanks
04:09 < jwulf> so i construct an "updateObject"
04:09 < TehShrike> >> var butts = 'lol'; console.log({ butts: butts })
04:09 < purr> TehShrike: undefined; Console: {butts: 'lol'}
04:09 < jwulf> then pass that as the argument
04:10 < jwulf> >> console.log('Hello World');
04:10 < purr> jwulf: undefined; Console: 'Hello World'
04:10 < jwulf> whoa, i didn't know there was a node-parsing bot here
04:10 < TehShrike> >> { who: 'me' }
04:10 < purr> TehShrike: (string) 'me'
04:10 < jwulf> i'll just do all my programming in channel
04:10 < TehShrike> lol
04:10 < TehShrike> IT'S LIKE A REPL BUT OTHER PEOPLE ARE WATCHING
04:10 < jwulf> >> var util = require('util');
04:10 < purr> jwulf: ReferenceError: require is not defined
04:11 < TehShrike> AND ALSO I HAVE TO FIT EVERYTHING ONTO A SINGLE LINE
04:11 < Mortchek> jwulf, actually it's not Node, it's just a plain JavaScript interpreter.
04:11 < Mortchek> >> this
04:11 < purr> Mortchek: (object) {}
04:11 < jwulf> >> for (var i = 0; i < 100; i ++) { console.log(i); }
04:11 < purr> jwulf: undefined; Console: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, …
04:11 < jwulf> >> for (var i = 0; i < 1000; i ++) { console.log(i); }
04:11 < purr> jwulf: undefined; Console: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, …
04:11 < TehShrike> >> var jwulf = 'buttface'; console.log(typeof exports === 'undefined' || jwulf)
04:11 < purr> TehShrike: undefined; Console: true
04:11 < Mortchek> >> Object.getOwnPropertyNames(this)
04:11 < purr> Mortchek: (object) ['undefined', 'parseFloat', 'escape', 'Infinity', 'numbers_that_add_and_subtract_to', 'obfuscate', 'decodeURIComponent', 'JSON', 'print', 'Date', 'TypeError', 'decodeURI', 'URIError', 'Sol', 'braille', 'encodeURI', 'strip_color', 'Math', 'Number', 'Array', 'parseInt', 'RangeError', 'String', 'console', 'Error', 'RegExp', 'EvalError', 'SyntaxError', 'numbers_th…
04:12 < jwulf> lol
04:12 < opus_> its annoying that express removed route.js from their packages. why??
04:12 < TehShrike> opus_: your best answers will most likely be found in #express
04:12 < opus_> thanks.
04:13 < etcetera> mscdex: well I don't want to use the websocket stuff on a browser.
04:13 < etcetera> which I totally know...is stupid.
04:13 < TehShrike> All I know about sockets is that I want to use sockjs/dnode instead
04:13 < TehShrike> But obviously, I don't know much about websockets
04:14 < Mortchek> etcetera, Socket.IO provides several fallbacks for if the browser doesn't implement websockets.
04:14 < etcetera> Mortchek: well the client is not a browser.
04:14 < Mortchek> Ah.
04:34 < hakuna> Is there any nodejs interactive tutorial like this one http://tutorial.mongly.com/tutorial/index for mongodb?
04:36 < mscdex> etcetera: there is a socket.io client for node iirc
04:36 < mscdex> which i believe uses websockets
04:37 < echosystm> can anyone point me toward some guides for testing node apps?
04:37 < echosystm> ive used vows etc. before but im interested in "best practices" if you will
04:38 < echosystm> given that js isnt strictly object oriented, its a bit vague what exactly constitutes a unit
04:39 < TehShrike> You can orient JavaScript around objects if you want to
04:39 < TehShrike> JavaScript is all about your objects
04:40 < TehShrike> It's just your sinful classical inheritance that gets in the way
04:40 < echosystm> most of the node libraries ive used dont seem particularly object oriented, regardless of inheritance
04:41 < echosystm> is the basic unit to test actually a "module" (ie. a file) ?
04:41 < TehShrike> Most people are very happy with modules that export a single function
04:41 < TehShrike> Sometimes, that function is a class/constructor function
04:42 < TehShrike> But yeah, it seems the module is generally the basic unit
04:42 < echosystm> ok so say i have one of these god functions that does magic things
04:42 < echosystm> theres no dependency injection etc.
04:42 < echosystm> how do you test that?
04:42 < echosystm> do you mock out the require() function?
04:42 < echosystm> etc.?
04:42 < TehShrike> So, I'll be the first to admit that I'm a testing noob
04:42 < TehShrike> But I don't understand the question
04:43 < echosystm> ok
04:43 < TehShrike> My impression of traditional testing is that you write up a bunch of tests that poke at the outside of the module
04:43 < TehShrike> You require() it, you call its functions, you make sure that the outputs are what you think they should be
04:43 < TehShrike> And anybody else in this chat room should feel free to step in and say something more intelligent
04:43 < TehShrike> But maybe you could restate the question?
04:44 < echosystm> say you have some thing you are testing that depends on some unknown (and therefore untestable) external entity
04:45 < echosystm> or perhaps you just want some dependency to always provide some known value
04:45 < echosystm> for example, setting a users password which depends on a random salt - you cant test that unless you can mock out a random number generator that always returns a known value
04:46 < echosystm> how would you approach this in a nodejs app?
04:46 < TehShrike> I would ask somebody who isn't me, who writes good tests :-x
04:46 < echosystm> ok haha
04:46 < TehShrike> I believe substack has opinions on such things, if he's around
04:47 < echosystm> ive used node a lot, for a long time, but only for small tools etc.
04:47 < TehShrike> substack runs http://testling.com/
04:47 < echosystm> ive never had any need to do testing
04:47 < TehShrike> I always need to do testing
04:48 < TehShrike> But I generally just write tests as I'm writing it in a very informal manner
04:48 < TehShrike> And then throw them away when I'm done
04:48 < TehShrike> >_<
04:48 < echosystm> i come from a java background, so im used to strict OOP and i have a very specific idea of how to do things that doesnt really map over to dynamic languages well
04:49 < TehShrike> I spent 5 years writing Win32 C++ (MFC, if that's an acronym that means anything to you) before my job became all JavaScripty
04:49 < vahnpaper> hi echosystm, is your problem related to mocking objects?
04:49 < TehShrike> But I didn't do any more testing then :-x
04:49 < TehShrike> ooh, maybe vahnpaper knows something
04:49 < echosystm> vahnpaper: somewhat, perhaps i'll put an example together
04:49 < echosystm> give me a few mins
04:50 < vahnpaper> ok..
04:50 < vahnpaper> im not an expert in node, im a C# developer but i'm currently studying node...
04:50 < TehShrike> Well... welcome! :-)
04:50 < vahnpaper> about mocking, you can mock any object in javascript since its a dynamic language
04:51 < TehShrike> You'll like it here!  Our functions are also objects!
04:51 < echosystm> vahnpaper: sure, but do you ever use the require() function to mock things out instead?
04:52 < vahnpaper> nop
04:52 < vahnpaper> could you give same sample implementation on how you're going to use mocks..
04:52 < echosystm> ok, so lets say you have a user object and changePassword() uses generator.generate() for a salt
04:52 < echosystm> do you literally just mock out generator = { generate: function() { return 'x' } }
04:52 < echosystm> ?
04:53 < vahnpaper> nop
04:53 < vahnpaper> i created a fake function
04:53 < vahnpaper> which will return a fake object
04:53 < vahnpaper> thats maybe because i didnt know any mocking framework for javascript
04:55 < substack> why does crypto.createSign() hate me? https://gist.github.com/3998791
04:55 < echosystm> i think im just going to write java style code that i am familiar with in nodejs lol
04:56 < vahnpaper> echosystem, heres what a sample of what i did to simulate mocking in javascript
04:56 < vahnpaper> http://pastebin.com/avnj1LEZ
04:56 < TehShrike> echosystm: if you don't want to hate yourself (more than is necessary) in six months, at least try weird stuff that might be more betterer!
04:57 < TehShrike> substack: I haven't used that library yet
04:59 < TehShrike> Which library is that even?
04:59 < TehShrike> waveto/node-crypto?
04:59 < TehShrike> Or Gozala/crypto?  Doesn't look like it could be that
04:59 < substack> it's the crypto in core
04:59 < substack> cripes
04:59 < substack> _THE_ crypto
04:59 < TehShrike> Oh, hah
04:59 < TehShrike> Of course, what was I thinking
05:00  * TehShrike coughs loudly and grabs a drink
05:00 < echosystm> http://pastebin.com/g6hzC7i6
05:00 < echosystm> heres an exmple of how i might do something in java
05:00 < echosystm> how would you do this same thing in nodejs, without literally writing a DI-capable constructor etc ?
05:00 < echosystm> DI does not seem to be a common thing in JS
05:00 < substack> echosystm: just use an object literal to create an object inline to hold stuff
05:01 < substack> var user = { hash : '...' }
05:01 < TehShrike> DI?
05:01 < substack> TehShrike: "dependency injection"
05:01 < substack> which is not a thing that people should care about in javascript
05:02 < echosystm> substack, can you give me a full example of this kind of object, with a test?
05:02 < TehShrike> It's a phrase I should probably be familiar with, but am not, for reasons that can be theorized later - can someone explain the concept to me in a sentence or two?
05:02 < substack> you just go about writing code instead of being an architecture astronaut and design pattern librarian
05:02 < echosystm> or explain in full what you might do?
05:02 < substack> echosystm: it would be data. it wouldn't do anything
05:03 < echosystm> so basically you're treating it like c and making a struct?
05:03 < echosystm> then you ahve some setPassword function out in the ether that works on this struct?
05:03 < substack> echosystm: you haven't presented why you think you need something like a user class in the first place
05:03 < substack> usually it's unnecessary
05:03 < TehShrike> I'm a magician
05:03 < TehShrike> I can make objects using nothing but REGULAR CURLY BRACES
05:04 < Lorentz> there are irregular curly braces?
05:04 < echosystm> i guess im used to making everything an object substack 
05:04 < TehShrike> Lorentz: maybe
05:04 < TehShrike> Lorentz: I haven't used those as far as I know
05:04 < echosystm> encapsulation and shit
05:04 < echosystm> seems kinda important to me
05:04 < substack> echosystm: not actually, you're used to thinking in terms of normalized top-level class hierarchies
05:05 < vahnpaper> echosystem, i think its easy to implement what you are trying to acheive in javascript
05:05 < substack> moreso because you think that "object" necessarily entails a class definition
05:05 < echosystm> vahnpaper: i can write this exact java code in JS without any problem, i just dont think its idiomatic
05:05 < vahnpaper> why?
05:06 < echosystm> for the reasons substack is saying, but i dont entirely comprehend
05:06 < vahnpaper> maybe you are just used to languages with static types
05:06 < TehShrike> So for a while
05:06 < TehShrike> It can feel kind of dirty
05:07 < TehShrike> Having an object, where you know that it needs to have certain things
05:07 < TehShrike> But not having it explicitly defined somewhere
05:07 < echosystm> i can show you what this exact code looks like in javascript, hang on
05:07 < vahnpaper> ok
05:07 < substack> echosystm: for one thing you don't actually ever want to set a password on an object, you want to *store* a new password in persistent storage and update existing copies
05:08 < substack> I would usually go about doing that through simple objects and listening for events to know when the underlying data changed
05:08 < substack> since that's just a state replication problem
05:10 < substack> echosystm: so the really nice thing about plain objects for data like user records is that you can just JSON.{parse,stringify} it to read/write it somewhere
05:10 < substack> then you can just write transform functions that take the previous value as input and return a new object with certain fields changed as output
05:11 < substack> and store the return values in the database
05:11 < brianc> yeah I have found more and more using "static" methods and objects without methods on them - kinda like higher level C code
05:11 < substack> and hopefully your database has an update feed so you can hook into that to update existing copies in memory
05:12 < TehShrike> brianc: I think the kids are calling those methods "functional" nowadays
05:12 < TehShrike> Or something like that
05:12 < brianc> TehShrike: haha right on
05:12 < TehShrike> ;-D
05:12 < substack> putting methods on data that you want to serialize is not so great
05:12 < brianc> substack: ++
05:12 < substack> should probably just leave that as data
05:13 < substack> something called "user" should definitely just stay data
05:13 < echosystm> http://pastebin.com/SSfbmRk7
05:13 < TehShrike> Objects don't even NEED functions
05:13 < substack> because you will definitely be serializing such objects
05:13 < echosystm> basically the same thing in javascript
05:13 < TehShrike> Or methods, at least
05:13 < echosystm> by the way guys, this is just an example
05:13 < echosystm> im not saying i would actually do this
05:13 < echosystm> i just want to get out of java mindset
05:15 < echosystm> this is how i know to do OOP
05:15 < substack> don't do oop
05:15 < TehShrike> substack: that's such an awkward thing to say
05:15 < substack> pick the best approach for the problem at hand
05:16 < brianc> just do P
05:16 < substack> javascript lets you pick and choose
05:16 < TehShrike> That's quite true
05:16 < TehShrike> I love having objects, I love having pure functions
05:16 < echosystm> i think the OCD in me makes it hard to accept dynamic languages
05:16 < echosystm> theres not enough rules
05:16 < TehShrike> echosystm: I can understand that.  Check out typescript, mebbe?
05:16 < TehShrike> I haven't used it yet myself, but I do like type checking
05:17 < brianc> echosystm: you can make up your own rules
05:17 < vahnpaper> TehShrike: echosystm: I can understand that.  Check out typescript, mebbe? <--- good advice
05:17 < echosystm> brianc: i would, except i eventually have to use someone elses crazy closure-intensive non-OOP library
05:18 < TehShrike> typescript doesn't give you the inheritance that you're used to, or change objects in JS or anything like that at all
05:18 < TehShrike> It just gives you type checking, to calm some of the OCD which I totally understand
05:18 < echosystm> if i can derive some basic general practices from the node world, then i can reconcile this with my need for uniformity :P
05:18 < TehShrike> Well, I dunno about you, but I've been acclimating to JS for most of this year
05:19 < TehShrike> I mean, I wrote JS before this year, but I didn't try to find out how to do it right
05:19 < TehShrike> I just wrote things that made web pages do stuff
05:19 < TehShrike> Probably took me 3-4 months to write stuff that I wouldn't wince horribly at now
05:19 < TehShrike> And I keep learning more stuff
05:19 < TehShrike> So, read a lot, write a lot of JS
05:20 < TehShrike> Or be smarter than me
05:20 < maseb> I learned stuff once. It wasn't so great. 
05:20 < TehShrike> I would recommend all of those things
05:21 < TehShrike> Well, I think I'm going to walk over to the office and get some more of this fine IPA.  Back in a bit
05:32 < etcetera> oh bummer.
05:32 < etcetera> seems my websocket library is not compatible with socket.io.
05:34 < deoxxa[cookies]> etcetera: socket.io adds some stuff on top of websockets
05:34 < etcetera> deoxxa[cookies]: yea that's super annoying
05:34 < etcetera> node's websocket lib works fine tough.
05:36 < echosystm> do buffer.concat and buffer.slice cause any data to be copied?
05:36 < echosystm> or do you just get a new buffer object with the appropriate memory addresses
05:58 < etcetera> how do continually stream something on a given connection with websockets?
06:21 < chovy> .
06:21 < TehShrike> !
06:21 < chovy> |   .
06:23 < TehShrike> .   ?
06:31 < substack> so anyways why does crypto.createSign() hate me and only ever return ''? https://gist.github.com/3998791
06:31 < pyrotechnick> subtack
06:31 < pyrotechnick> GET IT
06:31 < sgarbesi> :o
06:31 < small> heya how can I trim a string in nodejs? I need the first 50 characters of a req.body.variable
06:31 < pyrotechnick> substack make a browserling for node
06:32 < substack> fuck crypto I'm just going to implement signing myself
06:32 < pyrotechnick> that people run nodes in vms in and connect back to server you can distribute jobs to and test on platforms and stuff
06:32 < substack> node core crypto is so bad
06:32 < sgarbesi> i'm trying to mimic the __get __set functions from php within nodejs, anyone attempt this? i've seen some posts on stack overflow but nothing solid
06:32 < pyrotechnick> crypto is bad in general because it's about trying to keep secrets that don't want to be kept
06:33 < sgarbesi> substack: i won't tell your secrets
06:33 < syskk> afternoon'
06:33 < pyrotechnick> it's pushing shit uphill and always will be
06:33 < syskk> so sunny today
06:34 < TehShrike> small: what, are you looking for https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substr ?
06:34 < opus_> do I check ensureAuthenticated in passport ... or what, it seems the doc doesn't tell
06:34 < small> TehStrike I tried   var x = (req.body.x).toString().substr(50); 
06:34 < small> to get the first 50 characters. but x is empty
06:34 < small> even though req.body.x = "asdf'
06:35 < TehShrike> small: read the page
06:35 < syskk> small: substr(0, 50)
06:35 < TehShrike> syskk: aw, making it easy for them :-P
06:35 < small> oh nvm I'm dumb. 
06:35 < TehShrike> The trick is to get them to read the documentation
06:35 < small> yeah just noticed
06:35 < syskk> solly :(
06:36 < reza> lol
06:36 < TehShrike> Once they realize the documentation has answers
06:36 < TehShrike> They start reading it
06:36 < syskk> js doc sucks on the web… usually I just open up the ecmascript spec
06:36 < TehShrike> syskk: whatchu talkin' bout?  MDN is excellent
06:36 < pyrotechnick> the "flaws" in crypto and security in general are an illusion, they're actually in us
06:37 < pyrotechnick> read dr nuemanns latest work
06:37 < pyrotechnick> he's onto it
06:37 < syskk> yeah, MDN is probably the best out there.. but the ecmascript is surprisingly easy to understand
06:37 < syskk> (usually)
06:37 < TehShrike> syskk: I won't lie, I really feel like Google and MS should have documentation of equivalent quality, but until then, MDN is really good
06:37 < syskk> ecmascript spec*
06:37 < TehShrike> syskk: how do you generally search it?
06:38 < syskk> just open up the PDF haha :)
06:38 < syskk> there might be an HTML version somewhere
06:38 < TehShrike> Have a link to the PDF?
06:39 < SomeoneWeird> <syskk> js doc sucks on the web… usually I just open up the ecmascript spec < compared to..?
06:39 < TehShrike> I have the "JavaScript: The Definitive Guide" book, but MDN just solves all my problems so I never need to use it
06:41 < syskk> from the ecmascript pdf: The substring method takes two arguments, start and end, and returns a substring of the result of converting this object to a String, starting from character position start and running to, but not including, character position end of the String (or through the end of the String is end is undefined). The result is a String value, not a String object.
06:42 < syskk> pretty clear
06:42 < TehShrike> Well sure, but so is MDN :-)
06:42 < syskk> I prefer going to the source :D
06:42 < syskk> yea I'd say I would recommend both
06:42 < TehShrike> Sure, I wouldn't mind having a copy of that around to read, but I do like that MDN often contains useful notes about version differences between browsers
06:43 < syskk> probably digging through the spec is a bad idea if you are learning programming or Javascript.. but if you already have some foundation 
06:43 < TehShrike> Oh, I can completely appreciate reading the specs
06:43 < syskk> I actually had the MDN docs badge on my blog for 2 years
06:43 < TehShrike> But again, you should link me to them >:-|
06:46 < syskk> trying to find an HTML version
06:49 < syskk> http://ecma262-5.com/ELS5_HTML.htm
06:49 < syskk> ugly as hell though
06:49 < syskk> haha
06:50 < TehShrike> Hey, it's Ctrl+F compliant :-)
06:55 < syskk> yea :D
06:56 < syskk> I think node.js is probably the standard library with the best docs out there
06:56 < syskk> along with php.net
06:56 < TehShrike> heh
06:57 < TehShrike> PHP's documentation is pretty great
06:57 < TehShrike> I love node's documentation, but I still stare at http://nodejs.org/api/ without knowing which thing to click sometimes
06:57 < syskk> yea. now, if only the language was pretty great :D
06:57 <@Nexxy> lol
06:57 < syskk> yea.. I usually go to the single page and Ctrl-F
06:58 < TehShrike> I should probably just do that
06:59 < TehShrike> I gloss over the PHP comment because I just don't think there's anything to say about that language :-|
07:00 < syskk> interesting I just found out about the "node debug script.js" syntax
07:00 < syskk> I usually use the --debug and --debug-brk flags. wonder what's the difference
07:01 < TehShrike> It may be because I'm not leet enough
07:01 < TehShrike> But I didn't get much benefit from them
07:01 < TehShrike> Now, node-inspector, that's something I wish I could get to work under Windows...
07:03 < syskk> ah didn't know node-inspector didn't work on Windows
07:03 < TehShrike> Somebody probably got it to work
07:03 < TehShrike> I just haven't yet
07:03 < syskk> you could maybe get a free heroku or ec2 instance and run node-inspector from there?
07:03 < TehShrike> I tried getting it to run in a VM
07:03 < TehShrike> But I wasn't able to get that to work either
07:03 < syskk> yea
07:04 < TehShrike> Most of the fault was probably mine, but I wouldn't know
07:04 < syskk> on the other hand, do you really need windows?
07:05 < TehShrike> I like it
07:05 < syskk> It would be worth switching to Ubuntu if you do a lot of Node
07:05 < TehShrike> heh
07:05 < TehShrike> Let me tell you about my new dev environment :-D
07:06 < TehShrike> VPS courtesy of Dreamhost, with file access via WebDrive.  I edit in Sublime Text, execute via an SSH session in Putty.
07:06 < TehShrike> Just started using it this week.  It's worked surprisingly well.
07:06 < syskk> well, not a bad start :)
07:07 < TehShrike> Ideally, module developers will write things that work under Windows :-P
07:07 < syskk> but if you're serious about it I would def switch to a unixy OS
07:07 < syskk> right
07:07 < syskk> it's hard to do sometimes
07:07 < TehShrike> Serious about what?
07:08 < TehShrike> Unix is cool, I'm glad that OS X is so popular among devs, and all that
07:08 < TehShrike> But I really do like Windows as an operating system
07:08 < syskk> I don't know.. I just feel Windows is very painful to work with if you use Node.js
07:08 < TehShrike> Only when you try to use modules that don't work on Windows ;-P
07:08 < syskk> it doesn't matter if you like it :D you'll get over it in a few days
07:09 < TehShrike> pfft
07:09 < TehShrike> I have a good friend who's had to make the switch to developing on OS X
07:09 < TehShrike> Now, again, OS X is a fine operating system, and I have nothing against it
07:09 < TehShrike> But when you're used to Windows, it just feels clumsy and wrong
07:10 < SomeoneWeird> ive been on unix OS's for years and recently installed (read. like 2 days ago) windows 8 and i really like it... just not for developing
07:10 < syskk> yes maybe.. but you dont have to waste hours trying to get stuff to work
07:10 < TehShrike> SomeoneWeird: I can understand that
07:10 < syskk> SomeoneWeird: exactly my point
07:10 < TehShrike> If I was a badass unix user, I'm sure I wouldn't want to code in any other environment
07:10 < SomeoneWeird> yea
07:11 < TehShrike> But I'm not, and I'm comfortable with Windows, and it works really well for me
07:11 < syskk> like if I was a designer I would never use Ubuntu
07:11 < TehShrike> Whatcha gonna do?
07:11 < syskk> cause it sucks for designing
07:11 < TehShrike> I'm glad that OS X is so popular among programmers today
07:11 < SomeoneWeird> lol syskk 
07:12 < SomeoneWeird> COME BACK dshaw_!
07:12 < syskk> I guess if you don't do too much low level stuff it doesn't really matter in the end
07:12 < syskk> just don't expect every module to work out of the box :)
07:12 < TehShrike> Yeah, that's why I had to find a way to get my execution environment to be *nix :-(
07:12 < SomeoneWeird> i reckon 90%+ native modules won't compile on win
07:12 < TehShrike> I wish it wasn't necessary
07:13 < SomeoneWeird> install a vm
07:13 < TehShrike> But it is still
07:13 < SomeoneWeird> or dualboot
07:13 < TehShrike> SomeoneWeird: that's the first thing I tried
07:13 < SomeoneWeird> sublime is perfect in unix too
07:13 < TehShrike> I'm not going to dualboot to write code :-P
07:13 < SomeoneWeird> i do
07:13 < SomeoneWeird> lol
07:13 < syskk> I don't know.. learning a new OS takes less than a week.. seems you must rlly like Windows if you don't want to give Ubuntu a try :D
07:13 < TehShrike> I can't even handle having coding/non-coding activities on different virtual desktops
07:13 < TehShrike> I always end up having an editor open on my primary desktop
07:13 < SomeoneWeird> yeah
07:14 < TehShrike> syskk: I disagree, it takes longer than that
07:14 < SomeoneWeird> depends on how in depth you need to get
07:14 < syskk> OS X I can understand… you would have to buy a mac laptop
07:14 < TehShrike> I've given Ubuntu a try twice in the past, each time for over 6 months
07:14 < syskk> but Ubuntu takes a few hours to understand and in less than a week you'd be pretty comfortable
07:14 < SomeoneWeird> for developing, all you need to know is CLI commands and package management
07:14 < syskk> ahh ok then :[
07:15 < TehShrike> Ubuntu was a fine OS for me, but I never got as comfortable with it as I have been with Windows
07:15 < TehShrike> I won't diss Ubuntu, and I won't diss OS X
07:15 < syskk> weird
07:15 < TehShrike> But I'm deeply familiar with Windows, and I like a lot of the philosophies behind it
07:16 < wltsmrz> What are some of those philosophies?
07:16 < syskk> it's just nice to be developing in an environment that is similar to your server
07:16 < TehShrike> wltsmrz: expose many settings to the user, but make them accessible without needing to drop to the command-line (though you probably can drop to the command-line to do what you want)
07:17 < TehShrike> syskk: yeah, I hear that
07:17 < syskk> on Ubuntu/OS X most users don't ever use the command line as well
07:18 < TehShrike> I tested Codeweavers on Ubuntu
07:18 < syskk> anyways, I feel we're not going to reach a constructive discussion here anymore :D
07:18 < TehShrike> syskk: every time I had to fix something, or try to do something that wasn't straight down the middle of the road, I had to Google all the linux stuff I didn't know in order to get it to work
07:18 < TehShrike> Which is fine for a leet user
07:19 < TehShrike> And I don't begrudge anyone who wants to be that leet of a user
07:19 < syskk> gotcha
07:19 < TehShrike> Linux is an awesome development environment
07:19 < TehShrike> As is OS X
07:20  * sinclair_ yawns
07:20 < SomeoneWeird> all comes down to what you're comfortable with
07:20  * SomeoneWeird stares at sinclair_ 
07:20 < TehShrike> I really like Windows, and it would be nice if I could do everything I wanted with various programming languages in it, but I can't, so I add a few awkward shims to other execution environments
07:20 < sinclair_> Visual Studio > everything
07:20 < TehShrike> lol
07:21  * syskk where is the world going to?
07:23 < SomeoneWeird> <sinclair_> Visual Studio > everything< for .net, ofc
07:23 < syskk> I think that pretty much sums up my argument: http://paulgraham.com/gh.html
07:23 < SomeoneWeird> for all interpreted langs, sublime > *
07:23 < SomeoneWeird> tldr syskk 
07:25 < syskk> tldr: What do hackers want? Like all craftsmen, hackers like good tools. In fact, that's an understatement. Good hackers find it unbearable to use bad tools. They'll simply refuse to work on projects with the wrong infrastructure.
07:27  * syskk thinks it's time to stop talking OSes.
07:28 < TehShrike> Hey, this has seemed like a civil, interesting conversation so far
07:28 < TehShrike> If you have things to say, I'm willing to listen
07:28 < wltsmrz> I personally love to operate.
07:28 < kanyl> Can I have an item in an array that returns other items in the array, added together?
07:29 < syskk> well, I think we've pretty much exhausted the subject :)
07:29 < syskk> kanyl: yes. Array.prototype.reduce 
07:29 < TehShrike> kanyl: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce
07:30 < syskk> see the example there: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce
07:30 < syskk> TehShrike: ah, beat me to it :D
07:30 < kanyl> Spank you sirs!
07:30 < SomeoneWeird> we need an mdn bot in here
07:30 < syskk> thank you will do :)
07:30 < syskk> ah good idea
07:30 < syskk> or ecmascript bot
07:31 < SomeoneWeird> both
07:31 < SomeoneWeird> >> var a = 1;
07:31 < purr> SomeoneWeird: undefined
07:31 < SomeoneWeird> olook
07:31 < SomeoneWeird> it is here
07:31 < syskk> how about a w3schools bot :D
07:31 < SomeoneWeird> >> console.log('lol');
07:31 < purr> SomeoneWeird: undefined; Console: 'lol'
07:31 < TehShrike> syskk: NO FUCK YOUUUUUUUUUUUUUUU
07:32 < syskk> :D
07:32 < SomeoneWeird> >> console.log(Math.random());
07:32 < purr> SomeoneWeird: undefined; Console: 0.10925689456053078
07:32 < SomeoneWeird> k
07:32 < syskk> >> [1,2,3,4].reduce(function(p, c) { return p+c; });
07:32 < purr> syskk: (number) 10
07:32 < SomeoneWeird> y am i undefined
07:32 < syskk> cool
07:33 < syskk> lol
07:33 < syskk> >> process.exit()
07:33 < purr> syskk: ReferenceError: process is not defined
07:33 < syskk> :(
07:33 < kanyl> syskk: TehShrike: Is that a pretty way to add values in an array? It's not quite what I was looking for. I have some variables, db.host, db.port etc. I want to bind something like db.url to return it all formatted in a URL. just wondering if this is even possible in javascript.
07:34 < SomeoneWeird> thats not an array
07:34 < SomeoneWeird> that's an object
07:34 < kanyl> in node*
07:34 < SomeoneWeird> >> var a = {}; a['port'] = 80; a
07:34 < purr> SomeoneWeird: (object) {port: 80}
07:34 < kanyl> SomeoneWeird: db['port]*
07:34 < kanyl> i meant
07:34 < syskk> kanyl: you can use the url module. var url = require('url')
07:34 < syskk> ahh I see what you mean
07:34 < sinclair_> does anyone here use this? http://linqjs.codeplex.com/
07:34 < SomeoneWeird> you probably shouldn't be using associative arrays anyway
07:34 < SomeoneWeird> objects are better + faster (iirc)
07:35 < syskk> maybe util.format('%s:%s', db.host, db.port)  .. is that what you mean?
07:35 < kanyl> I'll go with objects
07:35 < kanyl> thanks
07:35 < SomeoneWeird> a.url = [ a.host, a.port ].join(':');
07:36 < syskk> You can also use getters and setters but it's not usually good practice
07:36 < SomeoneWeird> >> require('http')
07:36 < purr> SomeoneWeird: ReferenceError: require is not defined
07:36 < SomeoneWeird> fak u
07:36 < syskk> >> require('SomeoneWeird')
07:36 < purr> syskk: ReferenceError: require is not defined
07:36 < syskk> >> SomeoneWeird()
07:36 < purr> syskk: ReferenceError: SomeoneWeird is not defined
07:36 < SomeoneWeird> wonder if its creating a new scope each time
07:36 < syskk> yay
07:37 < SomeoneWeird> >> a = 1;
07:37 < purr> SomeoneWeird: (number) 1
07:37 < SomeoneWeird> >> a
07:37 < purr> SomeoneWeird: ReferenceError: a is not defined
07:37 < sinclair_> mmmm, npm install linq
07:37 < SomeoneWeird> lol you could so DoS that
07:37 < syskk> while(true) {} ?
07:37 < syskk> haha
07:38 < syskk> wonder if it has a timeout 
07:38 < TehShrike> >> "hey", "you"
07:38 < purr> TehShrike: (string) 'you'
07:38 < TehShrike> NO U
07:38 < syskk> I wonder if this would kill the bot :| >> while(true) {}
07:38 < syskk> so tempted to try
07:39 < SomeoneWeird> syskk, possibly, its creating a new js scope each time you run code though, just write an irc bot that sends it some really mem heavy code lots times and watch it die
07:39 < syskk> or it could have a timeout that stops a script after a certain delay
07:40 < SomeoneWeird> even so
07:40 < SomeoneWeird> do it fast enough... :P
07:41 < syskk> right
07:41 < TehShrike> >> while (true) { console.log('no u') }
07:41 < syskk> I guess the assumption is that no one has enough time to waste to try that :D
07:41 < purr> TehShrike: Timeout Error: Execution time exceeded 2 seconds
07:41 < TehShrike> yup.
07:41 < SomeoneWeird> lawl
07:42 < SomeoneWeird> >> setTimeout(function() { console.log('wat'); }, 1999);
07:42 < purr> SomeoneWeird: ReferenceError: setTimeout is not defined
07:42 < SomeoneWeird> bullshit
07:42 < syskk> talking about which, I need to get back to work
07:42 < SomeoneWeird> kbai
07:43 < syskk> >> function a() { a(); }
07:43 < purr> syskk: undefined
07:43 < syskk> oops
07:43 < SomeoneWeird> lol
07:43 < syskk> >> function a() { a(); } a();
07:43 < purr> syskk: RangeError: Maximum call stack size exceeded
07:44 < SomeoneWeird> lawl
07:44 < syskk> ahh :(
07:44 < syskk> lol
07:44 < SomeoneWeird> that was fast
07:44 < syskk> yea
07:44 < syskk> >> while(true) {}
07:44 < purr> syskk: Timeout Error: Execution time exceeded 2 seconds
07:44 < syskk> ahh it does have a timeout :)
07:44 < SomeoneWeird> yea
07:59 < TehShrike> According to today's xkcd, I will one day be regarded as a wizard!  This brings me hope and joy.
08:00 < SomeoneWeird> TehShrike, wat
08:00 < TehShrike> My phone number is JOSHUA 0 LOL
08:00 < SomeoneWeird> 0.o
08:04 < chovy> howdy
08:11 < chrisdickinson> >> Uint8Array
08:11 < purr> chrisdickinson: ReferenceError: Uint8Array is not defined
08:11 < chrisdickinson> >> Buffer
08:11 < purr> chrisdickinson: ReferenceError: Buffer is not defined
08:11 < SomeoneWeird> i don't think its node
08:11 < SomeoneWeird> plain js
08:22 < sshaginyan> Anyone tried installing jsdom in os x?
08:22 < sshaginyan> I get errors
08:25 < sshaginyan> anyone?
08:36 < pixie79> http://pixie79.blogspot.co.uk/2012/11/nodejs-sensu-meminfo.html New modules written in NodeJS to output Sensu or Nagios style metrics for use in Graphite
08:36 < [AD]Turbo> hi there
08:37 < EriksLV> Hi!
08:38 < EriksLV> quick question: what is the best way to communicate between web and multiple workers?
08:39 < RLa> ipc channel or unix socket?
08:39 < EriksLV> RLa: what would you prefer?
08:39 < RLa> i think the cluster module already sets up the channel, so you could use that
08:39 < sshaginyan> yes it does
08:40 < RLa> but if your workers are on the other machine you could use tcp
08:40 < sshaginyan> Guys can you tell me why I can't install jsdom…? I can show you the errors I'm getting
08:40 < RLa> stuff like dnode etc.
08:40 < sshaginyan> please
08:40 < RLa> just paste the error somewhere
08:41 < EriksLV> thanks RLa
08:41 < sshaginyan> vhttp://pastie.org/5170852
08:41 < sshaginyan> RLa: Sorry had an extra v http://pastie.org/5170852
08:42 < RLa> sshaginyan, i think contextify is the native module
08:42 < sshaginyan> RLa: Are you saying there is something wrong with my build?
08:42 < RLa> no
08:42 < sshaginyan> node.js build?
08:43 < RLa> wait, Error: "pre" versions of node cannot be installed, use the --nodedir flag instead
08:43 < RLa> i think it was discussed here some time ago
08:43 < RLa> but i do not remember what was the solution
08:44 < sshaginyan> :(
08:44 < RLa> googling shows it's pretty common error
08:44 < sshaginyan> not really what did you google?
08:46 < RLa> Error: "pre" versions of node cannot be installed"
08:47 < sshaginyan> So I need to get an older version I'm guessing?
08:47 < RLa> i think it want headers of your node
08:47 < sshaginyan> How would I go about doing that? How should I uninstall this version?
08:48 < sshaginyan> Where would I enter my headers?
08:48 < RLa> whereever the node install put them
08:48 < RLa> it says  use the --nodedir flag instead
08:49 < RLa> but i have no idea where you stick that flag
08:49 < sshaginyan> I did type --nodedir
08:49 < sshaginyan> npm install jsdom --nodedir
08:49 < sshaginyan> no?
08:49 < RLa> npm command, somewhere into gyp files
08:49 < RLa> no idea
08:50 < astropirate> I remember when this channel used to be cool
08:50 < RLa> well, i guess most people are sleeping atm
08:50 < sshaginyan> RLa: should I get node  v0.8.14?
08:51 < RLa> sshaginyan, how you installed the current one
08:51 < sshaginyan> RLa: configure && make && make install
08:51 < RLa> and which version it is
08:51 < sshaginyan> v0.9.3-pre
08:51 < RLa> that should install everything needed
08:51 < RLa> oh
08:52 < RLa> yeah, try with 8.x series
08:52 < RLa> just run make uninstall in the source tree
08:52 < sshaginyan> RLa: How would I downgrade?
08:52 < RLa> and then build and install the older source
08:53 < sshaginyan> k
09:00 < sshaginyan> RLa: THanks
09:01 < RLa> is it working now?
09:04 < innociv__> http://blog.nodejs.org/2012/04/25/profiling-node-js/ I'm trying to follow this and I most be doing something wrong.  The #2 step command should create a stacks.out file in the current path I'm at, correct? IT doesn't.  And  the #3 step command a stacks.svg at the same location? It also doesn't.
09:04 < innociv__> It looks like my dtrace doesn't have an -n command
09:05 < innociv__> I installed dtrace from systemtap-sdt-dev on debian. Maybe that's wrong
09:38 -!- mode/#node.js [+o piscisaureus_] by ChanServ
09:43 < innociv__> weird... now I see it
09:49 < EhevuTov> tmpvar, I got node-gyp working. I had to add -fno-rtti to the binding.gyp. Thank you for the help the other night
09:59 < sshaginyan> Does anyone know how to make jsdom.env non blocking like http
09:59 < sshaginyan> ?
10:07 < pyrotechnick> substack: you remember https://github.com/dekz/dcrypt right?
10:20 < abrkn> what's a quick way to get a seeded random 0..1 (must be browserify compat)? seededrandom.js looks nice but overwrites Math.random
10:23 < pyrotechnick> abrkn: PRNG okay?
10:24 < abrkn> aye, it's for shuffling cards deterministic: var random = new SomeRandom(secret); var cards = __.sort(.range(52), function() { return random.next(); });
10:24 < pyrotechnick> you using peoples real money?
10:24 < pyrotechnick> or for fun?
10:25 < abrkn> haven't decided :)
10:25 < SomeoneWeird> lol
10:25 < pyrotechnick> i'm pleading the fifth
10:26 < abrkn> hmm, im not american. do i need to learn the amendments now?
10:26 < pyrotechnick> this looks OKyish https://github.com/abe33/chancejs
10:26 < abrkn> looks very organized
10:27 < pyrotechnick> i tried 'prng' 'random' 'rng' etc in npm but you get better results looking for particular algos like 'mersenne' etc.
10:27 < al80> I can't debug a noteunit test...How am I supposed to do it with node-inspector?
10:27 < abrkn> pyrotechnick: i'll give chancejs a shot
10:27 < pyrotechnick> http://en.wikipedia.org/wiki/Category:Pseudorandom_number_generators
10:27 < pyrotechnick> there's some food for thought
10:27 < pyrotechnick> good luck.
10:29 < pyrotechnick> your best bet's to use the cosmos though. i.e. random.org and friends
10:29 < abrkn> holy shit chancejs has a lot of dependencies
10:29 < pyrotechnick> esp. if you're dealing with people's money
10:29 < pyrotechnick> they have a tendency to come at you bro
10:29 < al80> if I run the following command  "node --debug-brk <nodeunitpath> mytest.js"  and I open Chrome at localhost:8080, it starts to debug nodeunit, not my test.
10:29 < pyrotechnick> it's helpful to be able to say look blame the cosmos
10:29 < pyrotechnick> webcam on a lava lamp is good too
10:29 < abrkn> pyrotechnick: pfft, random.org is weak. i have a usb quantum rng
10:29 < pyrotechnick> get creative.
10:30 < pyrotechnick> abrkn: what you've failed to recognise is the aliens on planet X screwing with entanglement
10:31 < pyrotechnick> that ole' non-locality strikes again!
10:31 < pyrotechnick> http://en.wikipedia.org/wiki/Cancelled_(South_Park)
10:31 < abrkn> i thought you couldnt send information from messing with entanglement
10:31 < pyrotechnick> FUD
10:32 < pyrotechnick> god doesn't play dice with the universe
10:32 < abrkn> I AM GOD
10:32 < abrkn> hmm, this escalated quickly
10:32 < pyrotechnick> it's me DW
10:32 < pyrotechnick> put your burdens on me
10:32 < abrkn> you need to stop saying acronyms i dont understand, ive googled like 10 things youve said so far =)
10:32 < pyrotechnick> i have the strength to carry on
10:33 < pyrotechnick> but you're god?
10:33 < abrkn> http://www.youtube.com/watch?v=FONN-0uoTHI
10:33 < pyrotechnick> anyway let's give them their room back i'll meet you in #philosophy
10:33 < pyrotechnick> not.
10:34 < abrkn> haha, now i need to see if that channel exists
10:34 < abrkn> oh dear lord
10:34 < pyrotechnick> you've much to learn young one
10:34 < pyrotechnick> the kindergarten has had mercy on you
10:35 < pyrotechnick> *poof*
10:36 < sinclair_> http://database.cs.brown.edu/projects/mapreduce-vs-dbms/
11:54 < deoxxa[cookies]> i'm profiling a node application and i see _i386_set_ldt is eating 95% of tick time
11:54 < deoxxa[cookies]> is this bad?
12:04 < Turquesa> Hi all, I'm trying to interconnect two node.js (they both use socket.io for managing websockets) servers with SSL. Is it possible two establish SSL params (certs,ca) in the io.connect method?
12:06 < motin> how can I force a writeFile or writeFileSync to complete immediately? currently it waits for a giant for loop to complete, then it saves all files at once...
12:07 < SomeoneWeird> um
12:07 < SomeoneWeird> you cant..
12:07 < SomeoneWeird> writeFileSync should block until it's written
12:10 < Nopik> hi.. i have some problems using 'cluster' module.. what i'm trying to achieve is to have master forking serveral workers and then gracefully exiting (by waiting until current requests finish) them all.. i got the working, and i got the exit part, but it is not gracefull
12:11 < Nopik> i tried cluster.disconnect(), worker.disconnect() as well, but it is always immediate, doesn't wait for request to finish
12:11 < Nopik> node 0.8.8
12:11 < Nopik> anyone had similar effects? or, at least can someone confirm that this clustering works as advertised (which would mean that i am doing something wrong on my side)
12:12 < Nopik> i'm on the macos, btw
12:12 < Nopik> hm, i may try it on linux, too, give me a sec
12:19 < deoxxa[cookies]> motin: first, you have to invent a universe where work takes exactly 0 seconds to complete
12:20 < Nopik> deoxxa[cookies]: i thought that the node.js is so fast that it provides this feature to the universe
12:22 < deoxxa[cookies]> Nopik: that feature was removed, it was causing too many problems with users accidentally travelling forward in time to the end of existence
12:22 < Nopik> deoxxa[cookies]: oh noes.. i'd left it as optional switch, node --enable-time-travel file.js
12:23 < Nopik> i guess few people could find it useful
12:23 < SomeoneWeird> awh
12:24 < motin> @SomeoneWeird: hmm, but even when using writeSync it will save all files in the end of the process. do I need to change the whole app to run synchronously??
12:24 < SomeoneWeird> you can't.
12:24 < motin> ok… :)
12:24 < motin> then I won't
12:25 < motin> as long as it doesnt take up a lot of memory meanwhile
12:25 < motin> in the end of the script, 1gb of images is written
12:27 < Nopik> damn, i have problems with sending messages to cluster workers.. is anybody using this feature?
12:27 < RLa> Nopik, what is the problem
12:28 < Nopik> RLa: i do worker = cluster.fork() then worker.send("test") and in worker i have process.on 'message' which doesn't get called
12:29 < RLa> you call it immediately?
12:29 < RLa> what if you wait a bit
12:30 < Nopik> RLa: doesn't help, i call it once immediately (so probably the setup event did not arrived yet), but i also have process.on 'sigint' in master who sends this, so when i press ctrl-c master reacts, but workers do not
12:31 < RLa> hm, weird
12:32 < Nopik> yeah, tell me about it ;)
12:32 < Nopik> i'm now setting up node on my vagrant so i'll see if i have the same behaviour on linux
12:32 < Nopik> if it will work there, then at least i know that there is a chance ;)
12:35 < nunodonato> hi
12:36 < nunodonato> I'm considering using node.js for an embedded project, but I need serial communication with RS485.
12:36 < havoc74> good morning all
12:36 < nunodonato> Anyone know is this is supported?
12:37 < nunodonato> I checked serialport and serialport2
12:37 < nunodonato> but it doesn't specify
12:37 < SomeoneWeird> you can write to files nunodonato 
12:37 < SomeoneWeird> maybe /dev/tty1 or whatever 
12:37 < RLa> serialport2 is merged into serialport
12:38 < Nopik> RLa: hm, so if i do worker = cluster.fork(); worker.on 'listening', function(){worker.send(msg)}, it works. but, later on when i do iterate over cluster.workers() it doesnt send message
12:41 < nunodonato> SomeoneWeird, will it work? just writing to the file?
12:45 < Nopik> ok, it seems, that cluster communicaation doesn't work if i call it in sigint handler.. moving it out of signal handler makes it work way better
12:51 < Nopik> and, if i use sighup instead of sigint it works better, too.. 
12:56 < abernier> hi, could anybody tells me what the '/-/' stands for in npm registry's URLs, for example 'http://registry.npmjs.org/-/users' ? is it a pattern?
13:03 < abernier> it appears @isaacs likes re-using *NIX's patterns, like the Apache one's "/~username" so I'm wondering where '/-/' comes from and what does it mean...
13:05 < RLa> abernier, isn't that couchdb convention?
13:07 < abernier> RLa, I'm not aware of that if it is... would you have any reference?
13:08 < RLa> hm, maybe it's not
13:08 < abernier> RLa, here is the configuration used for rewrites rules: https://github.com/isaacs/npmjs.org/blob/master/registry/rewrites.js
13:09 < RLa> but i think it used to run directly on couchdb
13:09 < RLa> so - is obviously prettier than _
13:10 < abernier> RLa, but why '/-/all' rather '/all'? '/-/' should have a meaning :)
13:11 < SomeoneWeird> it looks cool
13:12 < abernier> isaacs: any clue on this?
13:18 < aandy> this sounds really urgent
13:18 < aandy> but we can say it's a binder, if that's what you're into?
13:21 < dschatz> Is there any way to have shared data between cluster workers?
13:21 < AAA_awright> abernier: They're justnames of resources, they don't need any rhyme or reason, at least from the client's perspective
13:22 < aandy> i'm speculating, but it could be to make the distinction that you're using the api, and not a "normal" browser url
13:23 < AAA_awright> aandy: There shouldn't be any difference between an "API" URL and an end-user URL
13:23 < AAA_awright> If it identifies the same resource it deserves the same URL
13:24 < aandy> but it's not the same ressource. you wouldn't use that /-/users url as an end user
13:24 < aandy> would you prefer /users.json vs. /users?
13:25 < aandy> two different domains aswel, but that's not directly observable to the end user
13:26 < MI6> joyent/libuv: Ben Noordhuis master * 9c7ae2e : darwin: don't use deprecated AbsoluteToNanoseconds (+1 more commits) - http://git.io/6QO5jg
13:26 < AAA_awright> aandy: Well those would be different information resources then. If you use /users.json you always request the JSON file, if you request /image.png you always get the PNG-encoded file.
13:27 < aandy> i agree that the urls should be the same, i'm just speculating the /-/ part. i didn't design it :p
13:27 < AAA_awright> The idea with HTTP is you can request a non-information resource like /users, and you use content-type negotiation to return HTML or JSON, or whatever, and along with the response, the server tells you "This is /users.json" or "this is /users.html"
13:28 < AAA_awright> I do like the ~
13:31 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:39 < MI6> joyent/libuv: Ben Noordhuis master * dcce1ea : test: fix -Wmissing-field-initializers warnings (+1 more commits) - http://git.io/gE0Oqg
14:31 < dschatz> IS there a common way to share data amongst cluster workers?
14:32 < context> memcached or similar
14:33 < dschatz> so there is no lightweight method?
14:33 < SomeoneWeird> redis
14:33 <@mbalho> scuttlebutt would do it
14:33 <@mbalho> you just establish duplex pipes over stdin/stdout and it handles replication
14:33 < dschatz> In theory, theres no reason I couldn't have shared memory though. Does node expose anything like this?
14:35 < jcrew> that doesn't really sound lightweight unless you're read only
14:35 < abrkn> anyone have a debug browserify wrapper? heard talk of it before but cant find it
14:36 < dschatz> If I just have an integer that I want to query the value frequently and rarely modify, shared memory seems like the best solution
14:37 < dschatz> shared memory is far more lightweight than some messaging layer or a database/caching layer
14:37 < context> shared memory is very limiting in the fact that you are screwing yourself from expanding sideways later on
14:37 < jcrew> unless you're constantly writing
14:38 < context> you just forced yourself into "this will never require the app run on more than one machine"
14:38 < context> you're fired.
14:38 < dschatz> well I can use shared memory within the machine, and a separate mechanism across machines
14:38 < jcrew> lol
14:38 < navaru> I have a few web services (built on a php framework) and I need to port all the services to node, what's a good way to make decoupled services?
14:38 < context> dschatz: i hope you are joking.
14:39 < context> dschatz: you just made your "light weight solution" extremely damn complicated
14:39 < jcrew> i use separate keyboards for different keys
14:40 < dschatz> a distributed system is largely about managing communication. Shared memory is one such method of communication and I don't see why you would completely rule it out
14:40 < navaru> I want to use a proxy to separate routes, would dnode make a good fit?
14:40 < context> dschatz: how do two machines communicate to eachother using shared memory ?!@#
14:41 < context> answer that than i will not rule it out.
14:41 < dschatz> potentially through rdma, but thats beside the point, I can communicate within a machine using shared memory and communicate across machines with a different mechanism. Theres no reason to use the same mechanism for all communication
14:41 < context> go back to 1995 where scaling involved buying bigger hardware.
14:41 < context> dschatz: managability ?
14:42 < context> i have ONE mechanizm to maintain and keep an eye on. not two.
14:42 < dschatz> That doesn't mean there are no cases where I would want to use shared memory
14:42 < context> you just took something simple (many processes talking to eachother) into something really complicated
14:42 < dschatz> for performance I may be willing to accept complexity
14:42 < navaru> dschatz: what's the application side of it?!
14:42 < context> "they use shared... no wait are they on the same machine? ok then they might use memcached... or wait are they in the same datacenter? then they use tcp ... err wait"
14:42 < jcrew> if the number rarely changes you're not gaining a lot in performance
14:43 < dschatz> shared memory is far faster to access than suffering a context switch to hit my caching or database layer or setting up a broadcast messaging layer to change the value
14:43 < jcrew> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/J8habdlLLsY
14:43 < context> if you are that worried about performance you wouldn't be using node and we wouldnt be having this conversation
14:45 < dschatz> There's no technological limitation preventing shared memory in node. I was wondering if someone had implemented such a thing
14:45 < navaru> dschatz: shared memory, when it comes to hardware is not an easy task, mainly if you rely on a single point, which would be a disaster if it fails
14:46 < context> dschatz: how bout this: store it in memory (which is prolly faster than shared without having to worry about locking etc) and use redis with pubsub so all processes get PUSHED the new value every time it changes. now you get fast AND single communication.
14:46 < context> <-- just won
14:46 < dschatz> context: except that it interrupts the workload to update the value
14:46 < jcrew> lol
14:46 < navaru> omg :))
14:46 < dschatz> context: Do you truly believe there is no value in having shared memory?
14:46 < context> it goes into the event queue...
14:46 < context> along with ... eveyrthing else in node
14:47 < context> whatever hitting your app causes an interrupt, make sure you run a node process for each request so it doesnt get interrupted
14:47 < context> dschatz: not for what you are talking about.
15:00 < MI6> joyent/node: Ben Noordhuis master * a6fef47 : build: make debug build on os x compile at -O0  Set GCC_OPTIMIZATION_LEVE - http://git.io/QiyGHg
15:28 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:42 < innociv__> http://blog.nodejs.org/2012/04/25/profiling-node-js/ Can anyone give me some guidance with this? stacks.out simply says CPU     ID                    FUNCTION:NAME
15:42 < innociv__>    0 190227                        :tick-60s 
15:43 < sinclair_> ah ha, no nodejs modules for Microsoft CRM
15:43 < sinclair_> probably a good thing
16:15 < claudio> Hi... it's my system somehow b0rken or... why npm installs in /usr/local/lib/node_modules while node searches in /usr/local/lib/node ?
16:19 < larzconwell> What OS, and how did you install Node?
16:20 < larzconwell> claudio ^
16:20 < claudio> I'm on Ubuntu and I installed from sources
16:20 < larzconwell> Okay, I had the same problem. Uninstall from Make, then install via PPA: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
16:20 < larzconwell> Not sure why that happens.
16:21 < claudio> larzconwell, but this is fine according to docs. "npm installs global modules in $PREFIX/node_modules" and "node searches in $PREFIX/node" - which does not make sense :)
16:21 < plato> i'm on linux mint, for me it symlinked /usr/local/bin/express -> ../lib/node_modules/express/bin/express
16:22 < larzconwell> Yeah that's what It's supposed to do.
16:23 < path[l]> hi, for applications, do you guys recommend using shrinkwrap? And if so, how can I update my shrinkwrap?
16:29 < jcrew> claudio: npm global is for binary modules, not to make a module globally 'require'able
16:29 <@isaacs> ircretary: tell abernier Because /all would be the package named "all".  "-" isn't a valid package name, so I use that.
16:29 < ircretary> isaacs: I'll be sure to tell abernier
16:30 < claudio> jcrew, mmh. So there's no point to npm -g install a requireable module. Too bad 
16:31 < claudio> (I mean., too bad for me that I need to explain it to my "users")
16:56 < jcrew> claudio: right - it's useful for utilities like supervisor
16:57 < claudio> jcrew, thanks for the hint :)
17:00 < lpin> exports = module.exports = function(options) {// configure module here; return exports};
17:00 < lpin> is it better to avoid something like this?
17:01 < CoverSlide> lpin: ... what?
17:01 < lpin> works but don't really like it
17:01 < CoverSlide> you don't need to return exports
17:01 < tbranyen> tjholowaychuk: i love the express docs theme
17:01 < CoverSlide> and each module is enclosed in its own iife
17:01 < CoverSlide> so you don't have to make your own
17:01 < tjholowaychuk> tbranyen thanks!
17:01 < lpin> CoverSlide wait
17:02 < lpin> var mymodule = require('mymodule')(options)
17:02 < lpin> mymodule.myprop
17:02 < tbranyen> tjholowaychuk: i need something nearly identical for my layoutmanager lib
17:02 < lpin> that's what i want to do
17:02 < CoverSlide> lpin: if you just do module.exports = function(){}; that should be enough
17:03 < tbranyen> also i've been thinking about components in backbone-boilerplate
17:03 < lpin> nope that way the module exports only that function
17:03 < lpin> it needs to exports other things
17:05 < tbranyen> tjholowaychuk: is component usable as a lib?
17:05 < tjholowaychuk> yup
17:05 < tjholowaychuk> i'll be improving that more as we go but yup
17:09 < lpin> CoverSlide http://vpaste.net/Z8Cwh
17:10 < lpin> need to return exports otherwise mymodule is the function
17:10 < CoverSlide> lpin: do you know how to use prototypes in javascript?
17:11 < jrowny> module.exports = myModule = function(options){}
17:11 < jrowny> myModule.prototype.foo = function(){}
17:11 < CoverSlide> yeah that will work better
17:11 < lpin> oh right
17:12 < lpin> ty
17:12 < jrowny> here's an example: https://github.com/jrowny/node-rtf/blob/master/lib/elements/text.js
17:12 < jrowny> although that one has some extra stuff in there for fake inheritence
17:33 < other_guy> Does anyone know of a better way to coerce an instance of one object into being another kind of object without looping and copying the properties across?
17:33 < tbranyen> other_guy: can fake it with __proto__ easily enough
17:33 < _schulte_> is there a way to keep npm from prefixing my man pages with the package name?
17:34 < other_guy> I've tried about a thousand different ways of doing it with my_instance.__proto__ =  other_type_instance.__proto__
17:34 < other_guy> and it doesn't work
17:34 < tbranyen> other_guy: other_type_instance.__proto__ = my_instance
17:34 < other_guy> hmmm…. tbranyen… lemme try it out… one sec
17:36 < other_guy> tbranyen… that seems to work, but it's weird because if I inspect other_type_instance… it doesn't show the same members, getters/setters, etc. as my_instance
17:36 < other_guy> even though I can call them
17:38 < other_guy> tbranyen, https://gist.github.com/4002983
17:38 < other_guy> I would expect those console statements to have the same outpit
17:38 < tbranyen> other_guy: because they are looked up in the property hierarchy
17:38 < other_guy> output*
17:38 < tbranyen> prototype*
17:39 < other_guy> that's crazy, it even gets the right constructor name and everything
17:40 < tbranyen> <3 __proto__
17:40 < purr> Let it be known that tbranyen hearts __proto__.
17:41 < innociv__> http://blog.nodejs.org/2012/04/25/profiling-node-js/ Can anyone give me some guidance with this? stacks.out from step #2 simply contains "CPU     ID                    FUNCTION:NAME    0 190227                        :tick-60s."
17:41 < other_guy> tbranyen, would there be any way to get their 'inspect' signatures to line up?
17:41 < gnarf> heh isaacs nice RT
17:42 < sshaginyan> Does anyone know how to do a async forEach loop?
17:42 < other_guy> because that will be confusing for other devs
17:42 < other_guy> sshaginyan I use async.forEach from the asyncjs library
17:43 < sshaginyan> other_guy: well then your s*xy is what you are
17:43 < other_guy> :-)
17:46 < other_guy> tbranyen, yeah that's going to be a bitch for other developers trying to debug things :-(  
17:47 < tbranyen> other_guy: get better developers
17:47 < other_guy> lol
17:47 < other_guy> well, the problem is the type coercion happens as a result of a DB search
17:47 < tbranyen> a prototype chain shouldn't be "complicated"
17:48 < other_guy> basically the things that come out of the DB result are generic
17:48 < other_guy> they need to be coerced into a specific Model type, and fed back to the consumer
17:49 < other_guy> The specific Model type inherits originally from the generic DB type when you're doing new Model()
17:49 < other_guy> basically what I want to do is the inheritance post factor
17:49 < other_guy> facto*
17:50 < tbranyen> backbone wraps all its stuff
17:50 < tbranyen> so its super easy to coerce
17:50 < tbranyen> "coerce"
17:50 < tbranyen> keep the data abstract and then just wrap it with the correct model type
17:50 < other_guy> Well that's exactly what I want to do
17:50 < other_guy> I suppose I should go look at how they handle it
17:51 < other_guy> since that sounds like precisely what I'm attempting.
17:51 < other_guy> I basically get the generic object back, and I want to extend it into my model object
17:52 < tbranyen> other_guy: backboen has an internal `attributes` property
17:52 < tbranyen> and that is the raw data
17:52 < tbranyen> the instance is a bunch of methods and properties specific to that model type
17:52 < other_guy> that's how mine works… there's an internal data property where the data actually lives
17:52 < tbranyen> that operate internally on that object
17:52 < tbranyen> yeah
17:52 < tbranyen> just swap that out then
17:52 < sshaginyan> other_guy: So if I were to apply a async.forEach loop to a query $('a') how would I do this?
17:52 < sshaginyan> other_guy: I have async.forEach($('a'), function(item, cb) { console.log(); }, function(err){});
17:53 < other_guy> then there's a bunch of getter's setters added at the Model level that actually push things in an out of the .data member
17:53 < sshaginyan> other_guy: I want to get the $('a').attr('href') in each async iteration
17:54 <@mbalho> sshaginyan: dom operations are synchronous so you dont need an async helper
17:55 < sshaginyan> mbalho: But why should it be?
17:55 < other_guy> tbranyen, so just create a new instance of my expected model, and grab the data from the generic and stick it on the specific model…. rather than trying to apply the prototype extensions of Model to Generic after the fact?
17:55 < tbranyen> right
17:55 < pspeter3> Is there a standard file name for a utility module in a package?
17:56 < tbranyen> other_guy: typically there is a method you can use to `set` internal attributes
17:56 < tbranyen> called set
17:56 < tbranyen> :-p
17:56 < sshaginyan> I mean I'm getting my complete page in jsdom I can't asynchronously collect all the anchor tags?
17:56 < nlf> don't know if anyone's interested, but we have most of the video from realtimeconf online. http://2012.realtimeconf.com speaker names are links to their talks
17:56 < other_guy> well I was trying to avoid doing two things… first I was trying to avoid running my constructor
17:56 < nlf> i think all of day 1 is posted
17:57 < other_guy> since it's already been run once, I wanted to just copy its results to the generic object
17:57 < other_guy> and I wanted to do that without looping through them.
17:57 < dosequis> hey all - I was wondering if any of you know of a program that does the following: basically I have used node.js to create a site and the dev time is nice and fast with templating and all. Is there now a way to convert this to a pure static site? i.e. a crawler of some sort that goes through and turns it into a static site?
17:57 < plato> other_guy: obj1.foo = obj2 ?
17:58 < other_guy> plato… take a look here...
17:58 < other_guy> https://gist.github.com/4002983
17:59 < other_guy> the reason I want to avoid repeatedly invoking the constructor of my Model object is that it's somewhat expensive, since it defines a bunch of getters/setters
17:59 < other_guy> so I wanted to create one fresh instance of the Model, and then apply all its attributes to the bevy of generics I'm getting back out of the DB
18:00 < other_guy> otherwise what I have to do is run my Model constructor for each generic that comes back, and then copy the relevant members from one to the other.
18:00 < other_guy> in this case .metadata and .data
18:00 < plato> dunno, sorry, more advanced stuff than I am familiar with
18:00 < other_guy> rather than do that I just want to extend, in-place, the generics
18:01 < other_guy> :-) no worries.  It's got my head going in circles
18:01 < plato> isn't that gonna be just as expensive as creating a new Mode
18:01 < plato> since each generic is gonna have to wind up with the same properties
18:02 < other_guy> I wouldn't think so
18:03 < other_guy> copying an existing property should be cheaper than creating getter's and setters
18:07  * niggler steals deoxxa[cookies]'s cookies
18:18 < styol> Anybody by chance familiar with a decent guide or example on user registration / user login with salted passwords? I'm presently checking out an example that appears to require that you save the salt along with every password, but I may be interpreting it wrong or generally not understanding: https://github.com/alexyoung/nodepad/blob/master/models.js explanations on the salt aspect are also welcome (line 40 - line 84)
18:28 < wyrdvans> I'm running a local mirror of the npm repo and noticed the directory "/var/lib/couchdb/.registry_design". Is that the _design docs related to the registry db?
18:35 < slajax> Anyone seeing Error: EBADF, close with express@3.0 ?
18:35 < slajax> It's driving me nuts.
18:37 < tuhoojabotti> slajax: https://github.com/visionmedia/express/issues/1393
18:38 < tuhoojabotti> oh right
18:38 < slajax> yup that's me
18:38 < tuhoojabotti> that's your issue
18:38 < tuhoojabotti> :D
18:38 < slajax> heh, read it over, if you can think of anything i'm all ears
18:38 < slajax> i've tried 3 different node versions, express@2.5 is fine
18:38 < slajax> It happens for me on two separate machines
18:39 < slajax> i'm at a complete loss for how to fix it, about ready to donate my laptop to charity and start over
18:40 < timeturn> I'll take that laptop ;P
18:40 < slajax> if you can fix my issue i'll give you it
18:40 < tuhoojabotti> oh wow
18:40 < slajax> wait, no, that's counter productive
18:40 < tuhoojabotti> :D
18:40 < tuhoojabotti> a deal's a deal
18:40 < slajax> if you can fix it i'll buy you beer
18:40 < slajax> or socks
18:40 < slajax> or whatever you are into
18:40 < slajax> seriously desparate
18:41 < timeturn> huge box of snickers bars
18:41 < slajax> deal
18:42 < tuhoojabotti> slajax: I don't know, promising rewards is counter productive, because we start thinking about the rewards instead of the problem
18:42 < slajax> i can't win
18:43 < aandy> there is no snickers bar
18:43 < aandy> there, better?
18:43 < slajax> ahh perfect, reverse psych
18:43 < slajax> well played aandy
18:44 < slajax> I'm on page 10 of google looking up this error and as I scroll back through the pages, it's a sea of a:visited
18:44 < slajax> hope is dwithering
18:45 < gloryfish> Hi friends, I've just installed node.js via Homebrew (v0.8.12). I have this file: https://gist.github.com/4003466 I can run node server.js, but I can't connect to the server at all. This is on OSX 10.8. Firewall is permitting connections to node. ANy suggestions on what to look for?
18:45 < tuhoojabotti> slajax: what's the load on the server?
18:45 < slajax> it's my local machine
18:45 < tuhoojabotti> okay
18:45 < slajax> so just me hitting it
18:45 < slajax> nothing serious
18:45 < tuhoojabotti> I call broken hdd!
18:45 < slajax> but as the load increases the issues start getting worse
18:45 < slajax> static files start 503ing
18:46 < slajax> session cookies start throwing the error too
18:46 < aandy> i don't see any code in the issue? so i'll call "migrating to express 3.x problem"!
18:46 < tuhoojabotti> sounds bad
18:46 < slajax> It's a completely fresh install of express3.x
18:46 < slajax> no migration
18:46 < slajax> it's pretty much out of hte box except for adding mongostore
18:46 < slajax> which I disable, and still get the issue on express.static
18:47 < CoverSlide> 503?
18:47 < slajax> if it was an hdd issue it'd be consistent on other versions of express i'd think
18:47 < slajax> well 404 in the browser
18:47 < aandy> slajax: there's also #express which might have more express users than in here
18:47 < CoverSlide> do you have it behind a proxy?
18:47 < slajax> I think express returns a 503 or something though
18:48 < slajax> Yeah, I'll try that. Seems to be lower level then express though. If you google it pops up in joyent/node issue tracker too
18:48 < EhevuTov> slajax, is it on a really heavy loaded system?
18:48 < slajax> it's my dev environment
18:48 < slajax> and my production environment
18:49 < slajax> neither get much traffic
18:49 < slajax> my local machine is clearly just me 
18:49 < slajax> it'll happen on a normal page refresh
18:49 < slajax> but it get's more frequent the more traffic I send
18:49 < CoverSlide> define "as the load increases"
18:49 < slajax> so yes, load related, but i'm not talking about a heavy traffic site
18:50 < slajax> CoverSlide: yes, load.
18:50 < CoverSlide> like using a load tester?
18:50 < EhevuTov> I wonder if it happens on Windows
18:50 < slajax> Nah not even
18:50 < CoverSlide> or just with browser/s
18:50 < slajax> Just like, regular dev
18:50 < slajax> hitting f5
18:50 < CoverSlide> ok yeah that doesn't sound right
18:50 < slajax> nope.
18:50 < slajax> it's brutal
18:50 < EhevuTov> Windows uses FD's differently I think. I wonder if you'd have similar issues on a Windows box.
18:51 < slajax> Hard to say, i've only tested it on osx / ubuntu
18:51 < slajax> as per the issue linked above
18:51 < EhevuTov> Do you think it's trying to access an FD that is already closed?
18:52 < Industrial> Anyone have an idea :-)? https://groups.google.com/forum/?fromgroups=#!topic/nodejs/74o6uWZqOBE
18:52 < slajax> EhevuTov: that sound as if it's part of the issue from the tickets I've read
18:52 < slajax> also seems to be socket related
18:52 < slajax> one guy mentions netstat and tweaking some systil settings
18:52 < slajax> but that didn't fix me
18:52 < nlf> other_guy: if you're still wanting to add a protobuff backend to nodiak, my riakpbc module is an easy to follow implementation of the raw protocol
18:53 < EhevuTov> it's a lower level issue as it seems you know. it might not be connect or express that's causing it
18:53 < slajax> Yeah I agree with that
18:53 < EhevuTov> it's literally a bad kernel call
18:53 < slajax> I think there is just something inside the new versions that is prevoking it
18:53 < EhevuTov> well, maybe not a bad call, but it's out of wak
18:53 < aandy> slajax: have you tried different versions of node aswel?
18:53 < slajax> *provoking
18:53 < slajax> Yup, 0.6.4, 0.8.11, 0.8.14
18:53 < slajax> happens consistently across all of them
18:53 < aandy> hmm
18:54 < other_guy> nlf, I am, and I'm planning on pinging you and trying to integrate your client underneath when I do :-)
18:54 < EhevuTov> slajax, I know it's a long shot, but try to run it on Windows. Node handles file descriptors differently on Windows IIRC, and if you don't have the error on Win, then you'd be on to something possibly with Node itself
18:54 < nlf> as of now i'm not doing any translation whatsoever, what the protocol spec says is what you send, and what it says is what you receive
18:55 < slajax> EhevuTov: well I think that rules out the problem simply by running a differnt machine. I've ran the code base on another two other osx machines and it's been fine
18:55 < slajax> So I know it's somewhat isolated
18:55 < slajax> the only thing I can think is that it's an issue with running express3.0 on 0.6.4 and my nvm is bluffing about actually updating the node -v
18:57 < EhevuTov> slajax, oh, could be. I'm just spit balling, but I wonder if your code is expecting an FD to be kept open and it's actually not
18:57 < slajax> could be, it's happening in multiple repos and other guys are running the same repo's without issue
18:58 < slajax> i'm gonna try cleaning house on the node -v's and install the binary for 0.8
18:58 < slajax> will report back
18:58 < slajax> thanks guys
18:59 < EhevuTov> slajax, good luck. Can't wait to hear what the problem was
19:00 < nlf> i really want to find a better way to implement waiting for a reply on a socket before sending the next packet
19:01 < jrajav> Does anyone know a good vanilla or underscore.js pattern to map an asynchronous function a whole array, with a callback to be performed when they've all finished?
19:01 < jrajav> Preferrably in parallel
19:02 < jrajav> I can figure out how to do it in sequence
19:03 < nathan7> jrajav: like async does?
19:04 < jrajav> Yes.
19:04 < nathan7> ie https://github.com/caolan/async#forEach
19:05 < slajax> fingers crossed, might have fixed it
19:06 < slajax> I cleaned all node versions and disabled nvm and installed node 0.8.14 binary and it is fixed!
19:06 < slajax> now I just need to get nvm running so I still have 0.6 and I'm good
19:06 < slajax> who watns a snickers bar!?
19:06 < EhevuTov> slajax, awesome! Congrats
19:07 < jrajav> nathan7: Yeah, so the source for that just stores an increment to track completed async functions. I assumed there was a more elegant solution that I was derping out on. Guess I was wrong!
19:07 < jrajav> I knew async could do it but didn't think to check its source
19:08 < nathan7> async's insides aren't that nice
19:08 < nathan7> I still have to write a .mapLimit
19:08 < jrajav> What does that do?
19:08 < nathan7> like .forEachLimit
19:09 < jrajav> Oh
19:12 < prsn> I'm trying to follow the install instructions at https://gist.github.com/579814#file_node_and_npm_in_30_seconds.sh
19:12 < prsn> when I get to the configure line, I get:
19:12 < prsn> Error: Cannot find module '/home/jake/node-install/python'
19:13 < prsn> I'm on debian
19:15 < innociv__> http://blog.nodejs.org/2012/04/25/profiling-node-js/ Can anyone give me some guidance with this? stacks.out from step #2 simply contains "CPU     ID                    FUNCTION:NAME    0 190227                        :tick-60s."
19:17 < aandy> hi, i have an api which is only accessible through http and groove shell, and i need to use it in a node project. cold starting the api calls adds bewteen 100 and 1000 ms of overhead on top of the query execution time. any tips on what i can do to make sure i'm not .. well, slowing it down further? off the top of my head i'm thinking of having a pool of http req's opened (connected) to the api endpoint, but not write data until needed (should at least remo
19:17 < mscdex> prsn: that's a really old guide
19:17 < prsn> mscdex: what should I be doing?
19:18 < mscdex> prsn: just download the latest version: http://nodejs.org/dist/latest/node-v0.8.14.tar.gz and `tar zxf node-v0.8.14.tar.gz` and `cd node-v0.8.14` and `./configure && make && make install`
19:18 < mscdex> use `sudo make install` if you're not root
19:18 < prsn> i tried that first
19:18 < prsn> before i tried the guide
19:18 < prsn> and i think i had the same issue
19:18 < prsn> or no
19:18 < prsn> there just WAS no ./configure
19:19 < mscdex> you're missing something then :-)
19:19 < prsn> there was like /lib/node/npm/configure or something
19:19 < prsn> which didn't work
19:19 < mscdex> nonono
19:19 < mscdex> inside the source tarball
19:21 < prsn> ok, i was misremembering, or it was something else i tried
19:21 < prsn> anyway it is there
19:21 < prsn> but i get the same error
19:21 < prsn> Error: Cannot find module '/home/jake/Downloads/node-v0.8.14/python'
19:21 < mscdex> what os are you building on?
19:22 < prsn> debian
19:22 < CoverSlide> ... wtf ... require('python')
19:22 < CoverSlide> ?
19:22 < CoverSlide> prsn: which version
19:23 < mscdex> prsn: and you tried doing this from scratch (blowing away the node source directory you had before)?
19:24 < mscdex> prsn: also can you gist the entire output?
19:24 < prsn> mscdex: yes, from scratch
19:24 < prsn> and sure
19:25 < prsn> http://pastie.org/5173313
19:25 < CoverSlide> mayhap it would be easier to just get the binaries
19:26 -!- mode/#node.js [+o piscisaureus_] by ChanServ
19:27 < mscdex> prsn: what version of python do you have installed?
19:27 < prsn> 2.6.6 apparently
19:28 < FunnyLookinHat> So I pass a lot of objects back and forth with socket.io and whatnot - do any of you have a good way to define the schema for those?  Simply commenting the hell out of a .js file doesn't feel nearly sufficient
19:28 < CoverSlide> hmm or maybe chris lea's ppa, wonder if that'll work with debian
19:30 < CoverSlide> fuck Nexxy's fuck script
19:30 < CoverSlide> oops wrong window
19:31 < raj> I was trying to remove node using this script https://gist.github.com/3997856 but there's also a /usr/local/include/node directory that I have
19:31 < mscdex> prsn: do you have another version of node already installed ?
19:31 < raj> should I leave that?
19:31 < prsn> well, i started trying because npm wasn't in my path, so I don't think so. But it's possible!
19:32 < CoverSlide> isn't there a make uninstall?
19:32 < raj> that script only shows ./include/nodejs as being removed
19:32 < mscdex> prsn: check via `which node` and `which nodejs`
19:33 < raj> after running that script, which node and which nodejs give nothing as output
19:33 < CoverSlide> since when does it ever refer to nodejs?
19:33 < CoverSlide> except from a third-party package?
19:33 < mscdex> raj: that was to prsn :-)
19:33 < raj> however, there's still an /usr/local/include/node
19:33 < CoverSlide> raj: just rm -rf it
19:33 < mscdex> CoverSlide: debian uses nodejs as the binary name
19:34 < raj> ok
19:34 < mscdex> CoverSlide: afaik
19:34 < CoverSlide> mscdex: is there some other node?
19:34 < mscdex> CoverSlide: yep, some packet radio thing or something
19:34 < CoverSlide> i see
19:36 < filip> hey guys, is there anyone with node_redis package experience?
19:36 < bartek> Hey there. If I'm just doing a http.get for some JSON data, is there a nice pattern for getting all the chunks into a single variable? I feel weird doing var data = ""; res.on('data', function(chunk) { data += chunk; } ..
19:37 < CoverSlide> bartek: that's basically how it's done
19:37 < mscdex> yep
19:37 < CoverSlide> bartek: you could use request though, it's super good
19:38 < CoverSlide> filip: what be your question?
19:38 < bartek> request? You mean http.request? 
19:38 < bartek> Or this one from mikeal https://github.com/mikeal/request ?
19:39 < CoverSlide> bartek: b)
19:39 < bartek> Cool, cheers.
19:40 < bradleymeck> just want to tell; callback hell is just logic smell.
19:40 < mscdex> bradleymeck: nah, you just wanted to rhyme ;-)
19:40 < bradleymeck> is that a crime?
19:40 < joaojeronimo> if in node, a require statement is synchronous, then inside the module I'm requiring, I should be able to set module.exports asynchronously (inside a callback) right ?
19:41 < niggler> in the case where node has no callback to process, does it spin or sched_yield or sleep?
19:41 < CoverSlide> joaojeronimo: not really
19:41 < CoverSlide> you can
19:41 < joaojeronimo> CoverSlide, then I should export a function that calls back with the thing I wanted ?
19:41 < sinclair_> hmmm, writing and developing applications in node is way better than writing and debugging js in the browser
19:41 < CoverSlide> but you'd have to wait for the callback to finish before you can actually use what's in module.exports
19:42 < bradleymeck> sinclair_: gdb integrations makes for lols
19:42 < sinclair_> you just can't beat a terminal window
19:42 < joaojeronimo> CoverSlide: cool, that's what I want
19:43 < sinclair_> for those mildly interested, the following are the TS declarations for the TypeScript compiler http://pastebin.com/JiG6MEVj
19:43 < CoverSlide> i do enjoy debugging node in the browser though
19:43 < CoverSlide> https://github.com/dannycoates/node-inspector
19:44 < joaojeronimo> CoverSlide, but what's happening is that I'm requiring something that is adding an object to module.exports asynchronously, and then that object is undefined...
19:44 < sinclair_> i wrote my own node-dev application in C#, kinda wish i knew about node-dev first
19:44 < CoverSlide> joaojeronimo: yeah, like i said, it will be undefined
19:44 < CoverSlide> until the asynchronous callback finishes
19:45 < mscdex> prsn: also what does `which python` say?
19:45 < raj> someone sent me a good link on how to install node, I can't find it though
19:46 < raj> ppa:something
19:46 < sinclair_> raj: node is just a executable
19:46 < sinclair_> raj: on windows?
19:46 < CoverSlide> raj: the best way to install node is `git clone http://github.com/joyent/node;cd node;./configure;make && make install`
19:47 < CoverSlide> anyone using node should be able to do that
19:47 < mscdex> only git clone master if you want to be on the bleeding edge ;-)
19:47 < CoverSlide> well true
19:47 < joaojeronimo> CoverSlide, but isn't the require statement always synchronous ? I thought the whole script would hang before the module being required is actually returned
19:47 < joaojeronimo> by returned I mean the script finished evaluating
19:47 < larzconwell> raj: Here's the PPA https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
19:47 < CoverSlide> joaojeronimo: you can't just make something asynchronous magically synchronous
19:47 < mscdex> prsn: if nothing else, you can always download the pre-built binary distribution tarball from nodejs.org
19:48 < CoverSlide> joaojeronimo: it will be evaluated, but the asynchronous parts will not be executed yet
19:49 < joaojeronimo> CoverSlide, ok... so that's it... I guess that means I'll have to make module.exports = function () { /* etc etc */ }
19:49 < joaojeronimo> CoverSlide, thanks!
19:49 < CoverSlide> yep
19:50 < CoverSlide> joaojeronimo: if you want to play with asynchronous module loading, look into AMD and https://github.com/ajaxorg/node-amd-loader
19:52 < CoverSlide> oh wow, so is ajax.org basically just cloud9 now? i remember when they just made client side frameworks, and they had a cool DOM-based 3d graph thingy
20:00 < rideh> i don't know how to troubleshoot posts that seem to hang
20:01 < context> http://www.urbandictionary.com/define.php?term=Pomby
20:01 < context> oops
20:03 < raj> larzconwell, hey! :)
20:03 < raj> thanks for the instructions yesterday
20:05 < raj> do you prefer this ppa way or the make/install way CoverSlide mentioned?
20:05 < bradleymeck> rideh, 1. log that a request came in (`date` + method + url + content-length), 2. log that you are doing some async task like hitting a db (`date` + db ); use the debugger if not in prod
20:06 < larzconwell> raj I would do the PPA, so you don't have to worry about manually updating everytime.
20:07 < larzconwell> raj Also the source way has always caused problems for me when requiring from the REPL.
20:07 < raj> fair enough, ppa it is
20:07 < raj> what's python-software-properties for?
20:08 < raj> is that the ppa itself?
20:08 < larzconwell> Hold on let me check it out
20:10 < larzconwell> raj,  I think that's for the apt-add-repository command. It may already be installed
20:10 < larzconwell> add-apt-repository *
20:12 < Nopik> hi all.. i'm trying to use cluster module to have several workers and make them exit gracefully. it mostly works, except in case of keep alive connections. I'm using it on ec2, and their load balancer opens long-lived connection to my nodes, even if the actual requests are sent very rarely.. so node.js cluster does not shut down in such case :(
20:13 < Nopik> any idea how to get around of that?
20:13 < Nopik> i want to implement zero-downtime updates, and the fact that the workers do not disconnect gracefully basically destroys whole concept :(
20:14 < Nopik> maybe i will have to use some nginx or something in front, but i'd like to avoid this
20:17 < AndreasMadsen> Nopik: Its a difficult problem. In order to know if all TCP sockets are done with their HTTP request and force close them after a timeout you will have to store them in an array, that could be memory consuming (I don't believe it is that bad as long as you remove them when the TCP connection is closed).
20:17 < AndreasMadsen> Nopik: an alternative is to force quick the worker from the master after a given timeout.
20:18 < AndreasMadsen> s/quick/quit
20:18 < Nopik> AndreasMadsen: but, if clients are not using keep-alive connections, that works flawlessly, workers wait as long as requests are processed, whenever all requests are done, workers quit immediately
20:18 < Nopik> AndreasMadsen: so, i have sockets opened, but no active requests on them, and that breaks cluster functionality
20:20 < AndreasMadsen> Nopik: there is an alive connection between the server and the client, as long as there is anything open the worker will not kill itself. 
20:20 < rideh> bradleymeck:  working on it
20:21 < Nopik> AndreasMadsen: well, when master calls cluster.disconnect(), workers could drop any idle keep alive sockets, this seems to be the feature i look
20:22 < Nopik> oh, there is setTimeout() on sockets, it might be what i look for
20:22 < AndreasMadsen> Nopik: If it where not an HTTP sever but a TCP server, the definition of socket-done would be when the end event emits (FIN package send). Cluster dosn't do anything http specific in only handles the port sharing.
20:23 < AndreasMadsen> Nopik: if socket.setTimeout works for your use case then thats a good solution.
20:24 < Nopik> AndreasMadsen: yeah, but it apparently closes socket even when there are active requests on it, just tried and it closed prematurely
20:26 < AndreasMadsen> Nopik: that depends on the the timeout.
20:27 < Nopik> AndreasMadsen: what do you mean?
20:27 < AndreasMadsen> Nopik: Your problem is that there is really no connection between when a HTTP request is done and when a TCP request is done.
20:27 < Nopik> AndreasMadsen: more or less, yes
20:28 < AndreasMadsen> Nopik: I havn't tested for my self, but if you set the timeout to something like 10000 (10 sec) then its unlikely that that socket is worth keeping alive.
20:28 < Nopik> AndreasMadsen: but what if request handling will take 11 seconds? i will close socket before sending response
20:29 < AndreasMadsen> Nopik: if you have a timeout in your server handler set to 11 sec, then yes that will be a problem.
20:30 < Nopik> AndreasMadsen: i mean, that if i set timeout on socket, it will close regardless if there are any requests being served over this socket or not, so this timeout is useless for me
20:31 < AndreasMadsen> Nopik: You either have to define your own definition of when a TCP socket is dead based on its HTTP requests, or define a timeout there is within a threshold you find acceptable.
20:32 < AndreasMadsen> Nopik: As I read the documentation, if where send a package other than PING/PONG the the timeout will be extended.
20:32 < Nopik> damn, i accidentally cleared out this window, AndreasMadsen, could you repeat last message, please?
20:32 < AndreasMadsen> Nopik: You either have to define your own definition of when a TCP socket is dead based on its HTTP requests, or define a timeout there is within a threshold you find acceptable. 
20:32 < AndreasMadsen> Nopik: As I read the documentation, if where send a package other than PING/PONG the the timeout will be extended. 
20:33 < AndreasMadsen> Nopik: know the feeling.
20:33 < Nopik> actually, maybe there is another solution, make ec2 load balancer to stop using keep alive connections ;)
20:33 < Nopik> but that will hurt performance ;(
20:34 < Nopik> damn, i have everything working for cluster management, except this last detail :(
20:37 < AndreasMadsen> Nopik: how to handle keep alive connection in a graceful shutdown is a very subjective decision, there is really no right or wrong.
20:38 < Nopik> AndreasMadsen: yeah, request can be flying toward me when i'm sending FIN, thats the show stopper apparently
20:40 < raj> anyone using testacular? I'm having an issue with `npm install -g testacular`, I get the following error: http://paste.ofcode.org/32iddBFV3KBcPwUj6VniJaK
20:41 < CoverSlide> raj: sudo
20:41 < AndreasMadsen> Nopik: thats a very good example of the complexity :)
20:41 < raj> aah, thanks
20:41 < raj> sudo npm install -g testacular
20:42 < Nopik> AndreasMadsen: ;) it seems that nginx has some graceful shutdown support.. i think i'll try putting nginx in front of my node.js and see how it works.. though i'm afraid that nginx will introduce some limit on the number of concurrent requests
20:42 < AAA_awright> I'm trying to figure out what a "graceful shutdown" is
20:42 < raj> why is sudo needed? is it installing to my distro's site-packages?
20:43 < AndreasMadsen> Nopik: if that is the case, you should consider investigating how nginx does the graceful shutdown and implement that in your node worker.
20:43 < CoverSlide> raj: the default prefix is /usr/local
20:43 < Nopik> AAA_awright: i'm looking toward solution which could allow me to shutdown node.js in such way that existing requests are handled properly, and no new ones are accepted. i.e. when i sent 'quit' signal to it, it stops listening for new requests, finish existing ones and quit
20:44 < CoverSlide> raj: or /usr rathcer
20:44 < AAA_awright> Nopik: Just close the TCP listener
20:44 < AAA_awright> When all the requests are done, the Node.js process will exit
20:44 < AAA_awright> by itself
20:44 < Nopik> AAA_awright: now, thats an idea ;)
20:45 < bartek> Are there any decent patterns for storing the result of something into a variable without going through callback hell? I am using the node redis client and I do a .get() for my key. If it doesn't exist, I have to make an external call, then I have a callback on success to set the key. Now I just want to do var result = MyFunction() .. What kind of pattern should I be doing to achieve this?
20:45 < AAA_awright> Nopik: You'll just need to catch SIGTERM and have it close the listener instead of calling process.exit like it does by default
20:45 < Nopik> bartek: i'm using promise pattern for this.. still doesnt look like synchronous code, but nicer than the hell
20:45 < CoverSlide> raj: if you want it in your home directory for example, you can do this (which is what i do): echo prefix=$HOME >> ~/.npmrc
20:46 < bartek> Nopik: Thanks, I'm going to look that up.
20:46 < Nopik> AAA_awright: yeah, i manage to do that
20:46 < AAA_awright> process.on('SIGTERM', ...)
20:46 < CoverSlide> raj: you have to modify your PATH to point to $HOME/bin though
20:46 < Nopik> AAA_awright: sure, currently i'm doing cleanup on sigusr2
20:47 < AAA_awright> I'd suggest that SIGUSR* not do things that adversely affect the program, usually they reload configuration files and such stuff that's considered safe
20:47 < AndreasMadsen> Nopik: have you looked at now www-npm works, I believe that isaacs have an implementation on his version of what graceful shutdown is.
20:48 < AAA_awright> I feel like I've had this exact conversation years ago when Node.js was in 0.4
20:48 < Nopik> AAA_awright: yeah, i was playing with cluster module and apparently it wasn't working properly when i was using SIGINT handlers.. as long as i moved to SIGUSR2 things started to work, so i stayed with it
20:48 < Nopik> AAA_awright: not with me :)
20:49 < AAA_awright> Nopik: The command to tell a program to quit is SIGTERM usually
20:49 < Nopik> AAA_awright: yeah, i was playing with ctrl-c to keep things more convenient to test :)
20:49 < AndreasMadsen> Nopik: SIGUSR2 is used by v8 to begin debug mode, be careful with that one.
20:49 < CoverSlide> AndreasMadsen: ... what?
20:50 < Nopik> AndreasMadsen: yes, i've noticed that if i'm not careful, debugger agent gets started ;)
20:51 < AndreasMadsen> CoverSlide: sorry it is the SIGUSR1 there starts debug mode.
20:52 < CoverSlide> wait so any SIGUSR1 and v8 goes into debug mode?
20:52 < CoverSlide> I don't get why that would be implemented from the vm ...
20:52 < raj> I got disconnected, sorry
20:52 < raj> 16:40 < raj> why is sudo needed? is it installing to my distro's 
20:52 < raj>              site-packages?
20:52 < raj> 16:41 -!- Usse [~usse@2-230-71-170.ip200.fastwebnet.it] has 
20:52 < raj>           joined #Node.js
20:52 < raj> 16:43 < raj> also, can things not be installed to a virtual env?
20:52 < raj> 16:44 < raj> additionally, why doesn't this tutorial mention 
20:52 < raj>              sudo? http://docs.angularjs.org/tutorial/
20:52 < raj> 16:44 < raj> I assume it can also be done without sudo then?
20:52 < raj> oooh, damn, sorry, didn't expect it to come out like that
20:53 < CoverSlide> [client]
20:53 < CoverSlide> default-character-set=utf8
20:53 < CoverSlide> [mysql]
20:53 < CoverSlide> dammit
20:54 < CoverSlide> raj: npm installs to where node was installed by default, which is usually /usr
20:54 < raj> oh
20:54 < raj> so I shoulda put node in my /home directory
20:54 < CoverSlide> raj: and i hope you understand unix permissions enough  to know you need to be root to write to /usr
20:54 < CoverSlide> raj: you can
20:55 < CoverSlide> but you'd have to compile it yourself
20:55 < raj> oh, nm then
20:55 < raj> :)
20:55 < AndreasMadsen> CoverSlide: you are right it is strange, looking intro it, it is node there has that feature https://github.com/joyent/node/blob/master/src/node.cc#L2793
20:55 < CoverSlide> for npm you can do this command: echo prefix=$HOME >> ~/.npmrc
20:56 < raj> how can I see what it is now?
20:56 < CoverSlide> and npm -g should install to $HOME instead
20:56 < CoverSlide> but be sure that $HOME/bin is in your $PATH
20:56 < CoverSlide> that's how mine is set up
20:56 < Nopik> AAA_awright: hm, it seems that node.js process is not exiting after http server is closed, so i have server = http.createServer(); server.listen 8080; process.on 'message', -> server.close(); what I'm missing?
20:56 < raj> gotcha
20:57 < raj> ok, well, I've wasted enough time trying to set this thing up, I just wanna start playing with it
20:57 < AAA_awright> Nopik: You sure you don't have any other listeners open? No readline, no write streams, etc?
20:58 < AAA_awright> Everything needs to be closed
20:58 < Nopik> AAA_awright: it seems that cluster IPC connection held it. i added callback to server.close() which called cluster.worker.disconnect() and it did the trick
20:58 < AAA_awright> Nopik: Why process.on('message, server.close)
20:58 < CoverSlide> AAA_awright, Nopik: the child process message listener is still open. i forget how to close it, i know there was a recent commit regarding it
20:59 < Nopik> AAA_awright: i'm sending message from master process
20:59 < AAA_awright> Nopik: That's what SIGTERM is for
20:59 < AAA_awright> It's requesting that the program shut itself down
20:59 < Nopik> AAA_awright: heh, gonna try that ;)
20:59 < AndreasMadsen> Nopik: could you provide an example of that code.
21:00 < AAA_awright> Also CoverSlide may be right, if there's a message passing utility that might have an open connection, I don't know the internals of that
21:00 < AndreasMadsen> Nopik: we have had problems where process.disconnect() needed to be called twice, but we have never been able to reproduce it consistently.
21:00 < Nopik> AAA_awright: sigterm immediately shuts down whole cluster, without waiting for existing requests to finish
21:01 < Nopik> AAA_awright: sure, i can put my own sigterm handler and cleanup myself
21:01 < AAA_awright> Nopik: Right, without a listener it will just call exit()
21:01 < AAA_awright> Largely the same as specified in the POSIX API
21:02 < Nopik> yeah, thats fine
21:02 < Nopik> nice, server.close() so far seems to do the trick.. now let me try keep alive connections :)
21:02 < ben_alman> isaacs: is process.env.npm_config_global something i can rely on to complain if someone tries to install a module gloibally?
21:02 < ben_alman> i want to REALLY strongly discourage it
21:04 < Nopik> damn, if there are keep alive connections, server.close() doesn't help me ;(
21:04 < Nopik> so, i'm back at the begining
21:05 < Nopik> nginx will be the next try, i think, and i'll check that www-npm 
21:05 < Nopik> need to go now, thanks guys
21:07 < AAA_awright> Nopik: Just close the Keep-alive connection
21:07 < AAA_awright> That's what the HTTP spec says
21:11 < CoverSlide> hmm are all connections referenced on the server object or will he have to keep a list of references himself to do that?
21:12 < CoverSlide> perhaps that should be an issue ticket
21:25 <@isaacs> ben_alman: in package.json a scripts.whatever script, yes.
21:28 < mnaser> http://nodejs.org/api/net.html -- Is socket.pipe not documented somehow?
21:29 < mguy> clear
21:30 < ben_alman> isaacs: thanks
21:32 < ben_alman> isaacs: in what circumstances is process.env.npm_config_global set?
21:32 < ben_alman> when a script lives within the global prefix dir?
21:32 < TooTallNate> mnaser: it's part of the Stream interface, so check that page
21:32 < TooTallNate> ben_alman: i believe it's when the user is installing the package with -g
21:33 < ben_alman> ok, only when installing.
21:33 < ben_alman> good to know
21:33 < ben_alman> is it for just hte package being installed by name, or also for deps inside of that package?
21:34 < mnaser> TooTallNate: thanks! i'll check it out, my codebases for a tcp proxy just became SO much smaller when just piping the two sockets but i just want to understand the implications of it
21:43 <@isaacs> ben_alman: whenever npm runs a script, it sets those envs to the current config setup in npm
21:43 <@isaacs> ben_alman: so if you do `npm install foo` and foo calls `grunt whatever`, then it'll be false.
21:43 <@isaacs> ben_alman: also, it's always "set".  it's just set to "false" or "true"
21:43 < ben_alman> ok
21:44 < CoverSlide> krull-chan: in soviet russia script runs npm
21:44 < CoverSlide> dammit
21:44 < ben_alman> well i was trying to figure out if it's different whether or not someone does npm install -g grunt vs npm install -g something-that-requires-grunt (and it's a "grunt" script)
21:44 < ircretary> CoverSlide: What a Country!
21:45 < ben_alman> like, when grunt is installed -g, grunt is being installed globally. but when something-that-requires-grunt is installed -g, grunt is being installed locally to that thing
21:45 <@isaacs> ben_alman: in both cases, because the -g was set, npm_config_global=='true'
21:45 < ben_alman> ok.
21:45 <@isaacs> ben_alman: regardless of how grunt is installed.
21:45 < ben_alman> is there any sane way to differentiate?
21:45 < CoverSlide> wouldn't that be a peerDependencies type use-case?
21:45 <@isaacs> ben_alman: any sane way to differentiate how grunt was installed?
21:45 < ben_alman> well
21:45 <@isaacs> ben_alman: if it matters, you're doing it wrong
21:46 <@isaacs> :)
21:46 < ben_alman> if it was being installed, itself, globally vs being installed as a dep of something else that ws being installed globally
21:46 < ben_alman> yeah i know it's wrong
21:46 < ben_alman> it's a stop-gap solution until the next version comes out
21:46 <@isaacs> ben_alman: if the top-level npm command was -g, then the env will be "true"
21:46 < mnaser> I'm not sure going about from here… I use lxc groups for php-fpm and because php and mysql are fucked, "localhost" is always the local socket (which isn't accessible because >lxc containers).. i made a small nodejs proxy that pipes things through which is working fine, now sometimes i have runaway queries taking more than n time, is there a way i can kill a socket/connection if it takes longer than "x" secs?
21:46 < ben_alman> right, ok.
21:46 < ben_alman> hmmn.
21:46 < mnaser> jesus wall of text
21:46 <@isaacs> ben_alman: if the top-level npm command was not -g, it'll be "false"
21:46 < ben_alman> believe me, i know it's wrong
21:46 < ben_alman> lots of changes happening
21:46 < ben_alman> but not for this interim version
21:47 < ben_alman> hmmn.
21:47 <@isaacs> mnaser: socket.setTimeout(1000) // kill if no activity for 1 second
21:47 < mnaser> isaacs: hm, that makes sense, but i was thinking more activity or not, don't want it to last more than 30s or something like that
21:47 <@isaacs> mnaser: you can also set a listener on the 'timeout' event, or do that via socket.setTimeout(1000,onTimeout)
21:48 < EhevuTov> Yo dawg, I heard you wanted timeouts for your timeouts
21:48 <@isaacs> mnaser: so you expect there to be activity while it's timing out?
21:48 <@isaacs> mnaser: ie, the connection to the db.  that'll be having activity even while the connection is hanging?
21:48 < mnaser> isaacs: i see, true, but i guess that depends if mysql streams output if someone does select * from world;
21:49 < mnaser> if it doesn't, then the timeout will work, if it does then the timeout won't really
21:49 < mnaser> it won't prevent someone from getting a huge dataset and taking out all the resources
21:50 < ben_alman> fwiw isaacs i've been having success recommending people split their monolithic grunt tasks into a standalone lib and a lightweight grunt wrapper plugin
21:50 < ben_alman> which is super cool
21:50 < ben_alman> more high-quality (hopefully) libs
21:51 <@isaacs> mnaser: you can also roll your own thingie pretty easily if that doesn' twork
21:51 <@isaacs> mnaser: function doQuery(q) { var t = setTimeout(killWithFire,30000); client.doQuery(q, function(res) {
21:51 < mnaser> isaacs: well that's what i was looking, but i wasn't sure on how to go about, or actually thinking about it i could just setTimeout after connecting successfully
21:51 <@isaacs> clearTimeout(t); }) }
21:51 < mnaser> heh, yep, just clicked
21:52 < mnaser> thanks isaacs !
21:52 <@isaacs> mnaser: just clear the timeout when you're done and it comes back
21:52 <@isaacs> np
21:52 < mnaser> make sense, tyvm
21:54 <@Nexxy> CoverSlide, lol... it's not a script
21:54 < sokaeoals> Hello
21:56 < substack> gigantic updates: https://github.com/substack/seaport
22:09 < abrkn> how come you name your readmes readme.markdown as opposed to README.md?
22:12 < bradleymeck> substack: do you have a seaport wrapper for saving commands as a string (instead of `register name@ver -- cmd`) just `register name` from cli or the like
22:12 < substack> nope
22:12 < bradleymeck> substack: well you will soon lol, also what are you using to restart the thing, just checking for child to die?
22:13 < substack> bradleymeck: yes just hooking onto .on('exit'
22:14 < sokaeoals> 45+
22:15 < sokaeoals> wtf this channel just consits of people livingand itveyngol
22:15 < aho> don't drink and type
22:28 < Industrial> Say I have a few different kinds of eventemitters (Website, Logger). I'm not sure how to 'connect' these e.g. When creating a Website should I create a Logger too? What if I only want one Logger and 10 Website's, can I connect all those to one Logger EventEmitter but still know where the message came from with each log message? Could I be running these EventEmitters on different hosts/processes?
22:36 < Industrial> I could use https://github.com/substack/emit-stream to connect the pieces and seaport for fetching the port ;o
22:36 < Industrial> maybe..
22:36 < sokaeoals> 6+
22:40 < Industrial> I guess I just want too hard that my program is a directed graph :P
22:51 < adlwalrus> hi, all...
22:52 < adlwalrus> not too familiar with node, but trying to run a script and can't figure out why it's not working.. https://github.com/jugglinmike/DressUp
22:52 < adlwalrus> that's the script.
22:52 < adlwalrus> and I need to give it two arguments: the js file, and the css file.
22:52 < adlwalrus> but it's just exiting silently.
22:53 < adlwalrus> anyone know why that would be?
22:55 < adlwalrus> can I use a shebang on windows?
22:56 < CoverSlide> i think i've seen it work before. try it
22:56 < adlwalrus> CoverSlide: what syntax?
22:56 < CoverSlide> although i think you need to give it a full path, like drive letter and everything
22:56 < adlwalrus> #!C:\Program Files\nodejs\node.exe?
22:56 < CoverSlide> and /usr/bin/env i don't think would work
22:57 < CoverSlide> give it a try
22:57 < adlwalrus> CoverSlide: FWIW I'm calling it from git-bash.
22:57 < adlwalrus> CoverSlide: I have, it doesn't work.
22:57 < CoverSlide> well it's been a while since i've developed on windows, so I can't remember how i got it to work before
22:58 < nlf> any of you experienced in profiling?
22:58 < nlf> just trying to figure out if things that are listed as LazyCompile: then a function name are things i can optimize more
22:58 < CoverSlide> yeah, i lock my doors whenever i see black people
22:58 < nlf> touché
22:59 < adlwalrus> CoverSlide: haha
22:59 < nlf> also, KeyedLoadIC.. no idea what that is
23:03 -!- mode/#node.js [+o piscisaureus_] by ChanServ
23:14 < joaojeronimo> each time I modify an Object's prototype, am I creating a copy of that object in v8 ? If I add 10 methods to the prototype, will I have 10 versions of that object in memory ?
23:16 < EhevuTov> joaojeronimo, I believe V8 creates a context for your object, and new extensions of those objects (like inheritance) get linked and go through a link-chain(like in Javascript scope-chaining) IIRC
23:17 < EhevuTov> joeytwiddle, the purpose of prototypes is to only need one instance, which is the prototype
23:17 < EhevuTov> so when you modify the prototype, you're just modifying the one code that all the other objects reference as well. I could be totally wrong, but from my research this is basically what I've found
23:18 < EhevuTov> now, if you add a non-prototype function, I think it adds another context(more memory)
23:18 < EhevuTov> e.g. prototype.pop() versus .pop()
23:20 < EhevuTov> joaojeronimo, here's a post about V8 and closures. It kind of touches on things you might be interested in: http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html
23:21 < joaojeronimo> EhevuTov, so it would not hurt to create an object and add 10 methods to it one by one after ? does that scale well ?
23:21 < EhevuTov> joeytwiddle, I think it scales at O(n) since it's basically just a link, which all inherited objects would also link to
23:22 < joeytwiddle> joaojeronimo: wanna switch nicks?
23:22 < tnorris> whoa, just compiled node with clang. at least twice as fast.
23:23 < EhevuTov> so if you're adding 10 prototype functions yet have 10 objects that inherit those, I think it's still 10 instructions and not 100
23:23 < joaojeronimo> joeytwiddle, lol yeah we should
23:24 < darach> npm install byline <- works with streams, pipes and is ~4x faster than line-reader (on a 2GB file). Nice.
23:24 < joaojeronimo> EhevuTov, cool! So one final thing, just to make sure I got it,    making: obj.prototype.foo = function () { /*etc*/}; obj.prototype.bar = function () { /*etc*/} would be exactly the same as.... (wait for it...)
23:24 < EhevuTov> lol
23:24 < joaojeronimo> the same as obj.prototype = { foo: function () { /*etc*/}, bar: function () { /*etc*/} } ?
23:25 < EhevuTov> hrm, I think so. Is that a trick question? :-)
23:26 < joaojeronimo> EhevuTov, its not... Col I just wanted to understand that :)
23:26 < joaojeronimo> *Cool
23:26 < EhevuTov> I'm not a Javascript expert, but I think so. One is literal notation while the other is the other notation that I can't seem to think of
23:26 < joaojeronimo> great
23:26 < joaojeronimo> btw, thanks for that article, seems very interesting
23:27 < EhevuTov> yes, I was interested Closures and just what they were. I usually have to understand the machine better to understand higher-level code. It's fine when learning Assembly to C, but V8 to Javascipt is a love/hate relationship
23:30 < tnorris> EhevuTov: so are you a cpp expert?
23:30 < EhevuTov> tnorris, heck no :-) trying though
23:30 < EhevuTov> tnorris, I keep flipflopping between Node and C++
23:30 < EhevuTov> my manager keeps sidetracking me
23:31 < tnorris> EhevuTov: heh, me too. mainly because I want v8 to have the proper harmony Set spec implemented.
23:31 < tnorris> lol
23:31 < EhevuTov> tnorris, I love you
23:31 < EhevuTov> tnorris, have you tested Harmony in V8 and node yet? I haven't been I've seen where you can do some things now. I'm excited
23:32 < tnorris> EhevuTov: sorry, already married ;)
23:32 < EhevuTov> me too! Crazy world
23:32 < tnorris> EhevuTov: yeah, I aliased node to "node --harmony"
23:32 < EhevuTov> LOL oh man, I should do that
23:33 < EhevuTov> I just started using node-gyp for my new C++/Boost/Net-SNMP project.
23:33 < Benvie> vm> ({ abc(){ return 'xyz' } })
23:33 < continuum> Benvie: { abc: [Function abc] }
23:34 < EhevuTov> I'm still learning C++ and had some problems with node-gyp and -fno-rtti due to virtual functions or something, but I'm getting betta
23:34 < tnorris> EhevuTov: don't know what I'd do w/o Maps and Sets anymore.
23:34 < tnorris> EhevuTov: heh, you're way above me. I brushed the dust off my college cpp guide last week to brush up.
23:34 < EhevuTov> tnorris, yeah, I learned C++ back in the 90's before I think the STL was even standardized and never learned it extensively in school. Getting back on the pain train now
23:34 < tnorris> feel like I've forgotten everything.
23:35 < EhevuTov> tnorris, me too brother
23:35 < EhevuTov> The c++ I'm use to is like, two or three standards behind. My old code didn't even compile 0.o
23:35 < tnorris> EhevuTov: i'm sure you've already seen this article, but it's a good one for using harmony in node: http://dailyjs.com/2012/10/15/preparing-for-esnext/
23:36 < TheAceOfHearts> so, after searching around a bit... I found that it was suggested to ask on IRC for best node modules to use, I have to send emails, and I found nodemailer. Would that be a good choice or should I keep looking for something else?
23:36 < EhevuTov> yup, I'll have to read it again. I'm doing a Cereal and Code event here in Chicago tomorrow so maybe I'll get to play with it some then
23:36 < TheAceOfHearts> https://github.com/andris9/Nodemailer link :D
23:37 < tnorris> EhevuTov: sounds like fun. and I'm going to work on creating my first c++ module for node.
23:37 < tnorris> though, have no idea what I'm going to do with it.
23:38 < EhevuTov_> sorry, dc'ed
23:38 < EhevuTov_> if a truck drives past our office, i get dc'ed. ATT wireless
23:39 < Benvie> http://benvie.github.com/continuum/ you can prepare for esnext there =D
23:39 < tnorris> lol, never heard that one before.
23:41 < tjmehta> Hi All Im doing TDD on a node project with mocha, does anyone have any suggestions for a file watcher that will run my tests on file change -- But also will not cancel mid test if a file change triggers to run the tests again.
23:41 < tnorris> Benvie: mother effing. you seriously think you can get that working in ie6?
23:41 < EhevuTov_> tnorris, I know, right. it's not like it's line-of-sight. i think it has something to do with Farraday cages
23:41 < Benvie> yeah
23:41 < Benvie> not the interface
23:41 < Benvie> but the vm itself
23:41 < EhevuTov_> tjmehta, can you use 'nodemon' and then suffix that with your test cmd?
23:42 < Benvie> it's almost good to go in ie8
23:42 < Benvie> I haven't spent any time on it though, but it's coded using stuff that will work in ie6 no problem
23:42 < EhevuTov_> like, 'nodemon --exec run_my_test test.exe'
23:42 < EhevuTov_> that's what I use
23:43 < tnorris> TheAceOfHearts: never used it, but it follows my key things when looking for a prod lvl module: active, well documented, strong user base.
23:44 < tnorris> Benvie: if you can get ie8 working, that's good enough for me. in my mind ie6/7 are dead.
23:44 < Benvie> yeah I'm planning on spending a bit of time on it. Shouldn't be much work, just gotta work out the kinks
23:44 < Benvie> it works in ie9 right now
23:44 < EhevuTov_> by the looks of its stock, MS might be dying if their surface product doesn't fly
23:45 < EhevuTov_> and I'm not a anti-MS zealot
23:45 < Benvie> it implements the whole js runtime itself and only requires basic js stuff to do it so there's no reason it can't
23:45 < Benvie> it implements property descriptors, prototyapl inheritance, the whole object model
23:46 < tnorris> EhevuTov_: I think windows 7 will be the next XP. haven't read an overall positive review about 8 yet.
23:46 < EhevuTov_> tnorris, I agree
23:47 < nlf> tracking memory leaks is super tedious
23:47 < tnorris> Benvie: that's excellent. it's too bad browsers are dragging their feet with some of the more awesome es6 features.
23:48 < tnorris> nlf: is it the kind that slowly builds up over time, the type that is fine then some unknown bug causes it to explode, or one that seems completely random?
23:48 < nlf> it's building slowly over time
23:48 < nlf> i'm sure i'm missing something silly, i just haven't found it yet
23:49 < EhevuTov_> nlf, are you using closures but not destroying them when you're done with them?
23:49 < tnorris> nlf: have code? for some sick reason I like looking for stuff like that.
23:49 < nlf> the biggest leak is apparently an instance of Number
23:49 < EhevuTov_> I wonder if it's a closure
23:49 < nlf> first step is going to be narrowing it down to a single library
23:49 < EhevuTov_> good idea
23:50 < TheAceOfHearts> tnorris: Thanks! I guess I'll give it a try :D.
23:50 < TheAceOfHearts> I guess I'll use those same criteria when selecting a module as well
23:51 < tnorris> TheAceOfHearts: yeah, and just remember that in some cases there is no single right choice, only wrong choices.
23:51 < tjmehta> EhevuTov_, I am using nodemon currently. Unfortunately, if the tests were already triggered, another file change will kill the test process and restart it. Which leave the test db in an unknown state since the tests weren't allowed to cleanup after themselves.
23:51 < draginx> tjholowaychuk: its durango from git, since u reverted redis-connect to 0.7 .. if I were ot do a npm update would redis-connect use 0.7 even if I have 0.8.1 installed?
23:51 < tjholowaychuk> draginx it should yeah
23:51 < tjholowaychuk> or rm it
23:51 < draginx> thanks dude :) I appreciate it
23:52 < draginx> well idk about rm'ing it
23:52 < draginx> since I use it externally as well
23:52 < EhevuTov_> tjmehta, oh i see. Maybe you have to get creative with ps|grep nodemon
23:52 < nlf> ah, definitely in butils
23:53 < CoverSlide> butils: "it's faster, just leaks a little"
23:53 < CoverSlide> who needs all that memory managing stuff anyway?
23:54 < EhevuTov_> tjmehta, maybe you could get creative with 'nodemon -d'
23:55 < nlf> yeah yeah :P
23:55 < chovy> is there anyway to parse links in markdown?
23:55 < EhevuTov_> tjmehta, maybe create a test mutex lock :->
23:55 < tjmehta> EhuvuTov_ , ah yup you beat me to it I just finally took some time to checkout nodemon's options.. that'll for now I guess. thanks!
23:55 < chovy> i know you can use [Google](http://google.com)
23:55 < chovy> but i just want to convert http://google.com into a link
23:56 < EhevuTov_> tjmehta, awesome. happy coding man
23:56 < EhevuTov_> or woman
23:56 < tjmehta> EhevuTov_ , ditto
23:56 < EhevuTov_> o/\o
23:57 < CoverSlide> or hermaphrodite
23:59 < jesusabdullah> wut
--- Log closed Sat Nov 03 00:00:00 2012
