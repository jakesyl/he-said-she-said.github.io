--- Log opened Fri Feb 01 00:00:03 2013
00:00 < miracleblue> It is not the stylesheet that bends
00:00 < miracleblue> It is only yourself
00:01 < aandy> less is more in a sense
00:01 < miracleblue> No!  More is more!
00:01 < miracleblue> more sidechain!  More reverb!
00:01 < aandy> <herp></derp>
00:01 < miracleblue> All the delay!
00:01 < miracleblue> Moooaaaaaar
00:04 < aandy> http://code.google.com/p/arc90labs-readability/source/browse/branches/haiti/js/readability.js
00:04 < aandy> :)
00:07 < xk_id> Does anybody know if the second request reuses the connection, or if it creates a new one? https://gist.github.com/4687608. I'm testing it on this server (https://gist.github.com/4687625), and server reports two requests, although the callbacks in the client are not executed.
00:12 < someprimetime> https://github.com/twitter/flight thoughts? Discuss.
00:13 < miracleblue> aandy: I'll have to check that out :)
00:14 < wao> someprimetime: what it supposed be
00:14 < zomg> someprimetime: looks like backbone.js
00:14 < zomg> well, at least slightly like it :P
00:15 < wao> slllightly... but not much
00:15 < someprimetime> "Flight is a lightweight, component-based JavaScript framework that maps behavior to DOM nodes. Twitter uses it for their web applications."
00:15 < someprimetime> i already *don't* like it because it's twitter so was wondering what other people though
00:15 < someprimetime> s/gh/ght
00:16 < gf3> someprimetime: That's silly
00:16 < someprimetime> oh?
00:17 < gf3> “i already *don't* like it because it's twitter”
00:18 < wao> heh
00:23 < aho> if you already made up your mind, why would you care what other people are thinking?
00:23 < miracleblue> someprimetime: Looks interesting
00:24 < aandy> aho: to judge other people on basis of superiority?
00:24 < someprimetime>  aho because i'd like to be convinced otherwise before I invest time into it
00:24 < aandy> can't really be convinced otherwise if you've made up your mind. that's the definition
00:24 < someprimetime> yeah; you're right
00:24 < aho> huh? why would you invest time into it? :)
00:25 < aandy> time is money?
00:25 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:25 < someprimetime> aho: probably by using it in a project...
00:25 < cTIDE> isaacs?
00:25 < aho> nah, i meant if he decided that he doesn't like it, why would he invest time?
00:25 < someprimetime> i'm sure unsure about twitter and their "business policies"
00:26 <@isaacs> cTIDE: !
00:26 < cTIDE> hi
00:26 <@isaacs> hola
00:26 < cTIDE> was just reading through https://github.com/joyent/node/issues/4583
00:26 < aho> looks like crap. let's use it! :v
00:26 < cTIDE> someday, i hope what you mention becomes a reality (exceptions only happening with invalid inputs)
00:26 < aandy> that's why i built my own twitter, with blackjack.. and hookers
00:26 < someprimetime> never said it looked like crap; just said I don't like twitter
00:26 < cTIDE> so my airbrake stops looking like this: http://imageshar.es/510b08c8a17b39341f000bf6
00:27 < cTIDE> because it makes me sad :(
00:28 <@isaacs> cTIDE: well, you still need to handle error events on your things
00:28 < cTIDE> i do
00:28 <@isaacs> cTIDE: it looks like you're not adding error handlers on your response objects or something
00:28 <@isaacs> cTIDE: whatever stream you're doing the 'write' on, it's emitting an error
00:29 < cTIDE> i didn't write this code, unfortunately, i just inherited it, but from waht i could tell
00:29 < cTIDE> it seemed like we were at least handling the exception argument to callbacks
00:29 < cTIDE> but it's entirely possible there are error events not being caught properly
00:31 < sorensen> aandy: actually, forget the hookers
00:34 <@isaacs> cTIDE: Add this on the response objects in your http server where these throws happen:
00:34 <@isaacs> cTIDE: res.on('error', function(er) { console.log('CAUGHT YOU!', er.stack) });
00:34 <@isaacs> cTIDE: i bet you'll get a bunch of them.
00:35 < cTIDE> k
00:35 <@isaacs> cTIDE: 'error' events will always throw if unhandled.
00:35 <@isaacs> cTIDE: it's up to you to listen for those.
00:38 < cTIDE> i'll see what i can find in there, thanks
00:47 < miracleblue> Alrighty, making great progress here :D
00:47 < miracleblue> Feels good to have a debug log full of nothing but nice things.
01:07 < yept> released the WNS framework v0.0.3 - http://git.io/8ZRcZg - check the changelog
01:35 < holzp> miracleblue, that just means your errors are being sneaky :)
01:40 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:42 < FrozenFire> Using npm, is there a way to automatically add a package as a dependency in my package.json?
01:44 < biscarch> npm install my package --save
01:45 < FrozenFire> Doesn't seem to work. Might that be only available in a newer version than 1.1.4?
01:47 < FrozenFire> Aha
01:47 < FrozenFire> Had to rm the dependency first
01:47 < biscarch> ah, ok. I was checking up on my versions. 
01:48 < biscarch> glad you got it
01:48 < FrozenFire> Not that I'm inclined to start throwing around the word "bug", since this is the first time I've used it, but that seems like a bug. :P
01:48 < FrozenFire> Being able to add dependencies to package.json automatically after already having them installed seems like a no-brainer
01:48 < FrozenFire> Thanks, though
01:48 < biscarch> I heard there was something called shrinkwrap
01:48 < biscarch> I think
01:49 < FrozenFire> Yeah
01:49 < biscarch> https://npmjs.org/doc/shrinkwrap.html
01:49 < FrozenFire> I must say, being a seasoned PHP developer, and even being versed in composer, node.js and npm are giving me funny feelings
01:50 < FrozenFire> One other question. I've encountered in another project I've been poking at, the hardcoding of calls to "node" instead of "nodejs"
01:51 < FrozenFire> Was nodejs historically named "node" as a binary?
01:51 < biscarch> is it called nodejs these days?
01:51 < biscarch> it's always been `node` on the command line
01:52 < FrozenFire> Oh weird...
01:52 < biscarch> so: `node app.'s` runs app.js
01:52 < FrozenFire> Maybe I installed the wrong package on my VM that I was testing on
01:52 < FrozenFire> It *was* explicitly "nodejs" on the VM
01:52 < FrozenFire> Despite being the same distro
01:52 < xk_id> does anybody have any general tips on how to do an "async.parallel", when I need to iterate one task but I don't know a priori how many times?
01:53 < holzp> when will you know how many times?
01:53 < xk_id> At the moment I'm using "async.reduce".
01:53 < biscarch> dunno, OSX and every linux distro I've used have been `node`
01:53 < xk_id> right before it
01:53 < biscarch> I install with nvm though
01:54 < holzp> so can you make the tasks  array dynamically based on number of iterations?
01:55 < holzp> like pad the tasks array with the tasks funciton then pass it in?
01:55 < xk_id> holzp: yes! I think I can. good idea
01:55 < holzp> :)
02:20 < bingomanatee> how do you write a tap test for a method you want to throw an error?
02:25 < xk_id> mikeal: if I'm queueing several requests on one socket, is there a way to also delay the execution of two consecutive requests?
02:46 < holzp> does node have a built in way to mixin two objects?
02:47 <@TooTallNate> holzp: it does but it's underscore'd for some reason
02:47 < holzp> is it from underscore?
02:47 <@TooTallNate> holzp: https://github.com/joyent/node/blob/master/lib/util.js#L563-L573
02:48 < holzp> woah
02:48 < holzp> nice
02:48 <@TooTallNate> holzp: not "from" underscore the library, but i mean undocumented
02:48 <@TooTallNate> and therefore not guaranteed to be there
02:48 < holzp> My middle name is "Danger"
02:49 < jtomasrl> how can i make tests to test my server?
02:49 < xk_id> Guys, does anybody have a clue what adding ".forever()" in "var request = require('request').forever()" does? would it keep the socket open forever, instead, of closing it after .end() is received in the stream?
02:51 < holzp> ah TooTallNate perfect!
02:58 < holzp> jtomasrl, you talking like load bearing tests or just assurance testing?
02:58 < holzp> correctness and the like
02:59 < jtomasrl> holzp: i want to test if my route to "/make" create a house sending the correct params, the house is created
03:02 < holzp> not entirely sure but an approach I would explore would be something like: get nodeunit tests going, in a test make the call to the server with a http request, and after that returns test to see if the house was created
03:02 < samholmes> I thought about making this module that takes a file and uses it to list the file and a exported function to be used as a route handler for express
03:02 < samholmes> but what should I call this file with a certain syntax that looks like:
03:02 < holzp> well if you are testing the "server" you really need to call out and around over http right?
03:03 < holzp> https://github.com/caolan/nodeunit
03:03 < holzp> ive liked this framework sofar
03:03 < jtomasrl> better than assert?
03:03 < holzp> it uses the build in asserts
03:03 < samholmes> http://pastie.org/6002883
03:03 < xk_id> guys, is it appropriate to email a node developer with a question?
03:04 < xk_id> oh, maybe I can just post on github under issues
03:04 < samholmes> What should I call these files?
03:04 < holzp> why not just post it on github? then it would be harder to ignore :)
03:04 < jtomasrl> i'll try it
03:04 < FrozenFire> http://pastebin.com/Chfap4VD Still very new to node.js. I'm getting "TypeError: Property description must be an object: undefined" for the Object.create call
03:04 < holzp> unless its some horrible exploit or something
03:05 < samholmes> .routes files
03:05 < samholmes> or .route?
03:21 < xk_id> Question about creating a new connection or reusing the socket: https://github.com/mikeal/request/issues/425
03:23 < miracleblue> woooo
03:23 < miracleblue> Nearly finished my application
03:28 < samholmes> How do I unbuffer a require?
03:28 < miracleblue> Any AdmZip experts here?
03:30 < echo> samholmes: Just a guess, but wouldn't you just re-require it to the same object?
03:31 < samholmes> echo: no
03:31 < samholmes> cause the file's content is cached
03:31 < samholmes> so subsequent requires just pull from the same cached object
03:33 < echo> samholmes: Thanks! :D I think I may have found a solution for you: `delete require.cache['/home/shimin/test2.js']`
03:33 < echo> http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js
03:37 < miracleblue> What the hell
03:37 < miracleblue> AdmZip's addLocalFiles method seems to have no logic in it at all
03:38 < samholmes> echo|1: thanks!
03:40 < miracleblue> Okay guys new question
03:40 < miracleblue> Are there any decent, up-to-date libraries dealing with creating zip files?  Other than AdmZip
03:42 < asdf12> is it PEEcan or pa-can ? pecan
03:42 < miracleblue> Peacan pie!
03:42 < echo> asdf12: Puh-cawn
03:42 < asdf12> oh ok
03:44 < echo> miracleblue: Looks like node-zipfile is maintained rather well. Another one from the recent months is node-zip. Assuming you haven't tried a bunch of the ones in npm and assuming you don't have any prerequisites they don't meet.
03:44 < sorensen> heyo
03:45 < asdf12> hi
03:45 < miracleblue> echo: Thank you kindly.  I'm looking at node-zip at the moment but it looks a bit underwhelming.  Might try node-zipfile
03:46 < echo> From what I just skimmed in a few stackoverflows, node-archive was previously well established and is now thought of as heavy. It also hasn't been committed to in 3 years though.
03:46 < miracleblue> Ah yeah
03:46 < miracleblue> bugger
03:46 < miracleblue> I want something that is sure to be up to date :)
03:47 < miracleblue> I've just been using AdmZip, worked really well for unzipping, but it's totally broken when it comes to zipping back up
03:47 < echo> Ah, I haven't had a need for zipping stuff yet. Wish I could provide more direction. :)
03:48 < miracleblue> Thank you though :) much appreciated
03:48 < miracleblue> this is my first ever node project, and it's a tool I'm building for work
03:48 < miracleblue> To automate a really long task
03:48 < asdf12> use grunt!
03:48 < asdf12> though i have to say, ive never used grunt
03:50 < miracleblue> Neither have I :)
03:50 < miracleblue> I'd like to avoid another learning curve
03:51 < echo> I've used software that depends on it and uses it, but I've never used it explicitly myself either. 
03:52 < mscdex> anyone know of a fast json library in C?
03:57 < rump> ive never done front end js templating... the dozens of large frameworks are terrifying me.. whats a simple something i can use
03:58 < rump> i usually just hide it and then toggles classes but i guess that way is depreciated
03:59 < asdf12> you want a framework for manipulating dom ?
03:59 < asdf12> there's that new thing twitter/flight
04:00 < asdf12> it reminds me of enyo on a quick glance
04:04 < echo> rump: Honestly, I think you should try them all, they all have strengths and weaknesses. I have yet to have a single problem with anything in node that I couldn't figure out in less than ~30 minutes. However, I've spent weeks trying to make sense of backbone.js and make it work for my use case. 
04:04 < c4milo> mscdex: https://github.com/lloyd/yajl
04:06 < asdf12> i dont know about backbone, i just dont know
04:07 < echo> Apparently it's very difficult to work with nested data models in Backbone.js. Which ofcourse is what my application uses. -____-
04:08 < asdf12> i dont like it
04:08 < rump> echo: thats the same sort of thing for me
04:08 < rump> nodejs just makes sense to me, and even keeping everything server side with a thin client all easy
04:09 < rump> but as soon as i start having models and views client side my world crumbles and ive already spun in circles trying a few of them
04:10 < rump> plus i hate having to use all these libraries at 100k+ a pop
04:10 < asdf12> try angular
04:10 < rump> how gross
04:10 < asdf12> if you having data client side you need to manage
04:11 < rump> do you think thats true... how supposedly the future of web dev is keeping everything client side with ultra thin servers?
04:11 < substack> both sides will be doing plenty of things
04:12 < echo> :/ Yeah, I'm right there with you. I'm actually putting this project on pause and starting another one that is much simpler to deal with client side so I learn a little better. And the whole reason I want the client-side w/ rest-api backend kind of format is just for sheer user-experience. Everything flows, ajaxxy, ultra-responsive UI's. The server does tons of work, I just can't inject things into the page dynamically after a
04:12 < asdf12> rump: i think the future is using both resources, finding the balance
04:12 < asdf12> where it use to be all server side and no tapping client side resources
04:12 < rump> isnt it hard to have both,  MVC <-> MVC, its a lot to keep up with
04:12 < substack> rump: I like using modules from npm browser-side and ignoring all this business about Ms and Vs and Cs
04:13 < rump> echo: is injecting 500bytes of html really a lot slower than inject 250 bytes of json and then templating it and sticking into the ultra slow dom?
04:13 < substack> the dom is not slow
04:13 < substack> it's much faster than doing io
04:13 < rump> i saw this slide about latency and performance on web apps and it was like even currently, 80% of wait time is waiting on the browser and slow dom.. not server or moving data... which makes it seem like the future of this thin server heavy client apps seem backwards
04:14 < asdf12> wait what
04:14 < rump> maybe in the php/mysql/wordpress/drupal days where any html generation took 600ms... but now most of my apps generate and deliver 5-50ms
04:15 < asdf12> 5ms??? yea if you're next to the web server :P
04:15 < onr> 600ms?
04:15 < rump> onr: i come from drupal and i have several in production apps that take 600ms+ per page load
04:15 < echo> rump: It's not the size that I think matters really, it will seem in the client experience to take MUCH longer when you're staring a blank white page for 3 (potentially) seconds instead of a spinner for ~1-2 seconds at most, and you can be doing other things while you wait on that anyways. Round-trip-time is so much easier to pass-by with junk to atleast look at instead of a white page.
04:15 < rump> and they're considered lean, other peoples take 1s
04:16 < rump> anoymous pages are cached of course but that doesnt really help future web apps
04:16 < rump> RoR is almost as bad
04:16 < asdf12> rump: how is this helping your point
04:17 < rump> well i'm not necessarily trying to make a point :)
04:17 < rump> i guess im thinking maybe that "the future of web apps is on the client side" was back before node and sub 50ms page generation
04:17 < rump> when you had apache bringing machines to its knees
04:17 < rump> nginx/node saves the day
04:18 < asdf12> the biggest problem is the io, the network connection
04:18 < asdf12> thats the slow part
04:18 < asdf12> or communicating with a db and having to wait on all that
04:19 < rump> i can see that
04:19 < rump> but if you gotta get something is it really a big difference if its 250 bytes json vs 500 byte html ready to insert
04:19 < rump> i mean even client side apps have to do io right?
04:19 < rump> i guess now with htm5 localstorage stuff
04:19 < rump> meteor is pretty impressive
04:20 < echo> rump: I think so too. I just think it may be too flashy. Kind of scares me. Also, I don't prefer to use mongodb.
04:21 < rump> also how are client side apps gonna get google love
04:22 < rump> how long before google starts spidering with phantom
04:22 < onr> it provides server-side rendering too
04:22 < sorensen> ~.^
04:22 < rump> really?  last i checked in on meteor for example i disabled javascript and got blank screens
04:23 < asdf12> rump: yea but client side io can be doing in the background without slowing down visible performance to the user
04:23 < rump> still:  disable js and go http://meteor.com/main
04:23 < echo> rump: Have to use URL fragmenting and render the site from the server. 
04:23 < echo> https://developers.google.com/webmasters/ajax-crawling/docs/specification
04:23 < onr> it's not 1.0 yet
04:23 < asdf12> rump: it's like a web store, a user is adding stuff to his cart, are you going to make every item added into their cart taking 50ms~ by doing a ajax call?
04:24 < onr> also enable javascript but disable cookies, blank screen as well
04:24 < asdf12> you would just add it in there cart instantly, and in the background tell the server
04:24 < rump> asdf12: but in real world examples... even client side apps pull js... its not really a matter of to make an io or not, but its really the difference of a few bytes of json vs html
04:25 < rump> nevermind you followed up well
04:25 < rump> heh :)
04:26 < rump> what about underscore
04:26 < rump> it looks leeaan
04:26 < onr> you mean backbone, i guess
04:26 < rump> templating in like 100 lines of js
04:27 < rump> which front end js framework is more like sinatra and less like RoR
04:28 < CoverSlide> front end framework?
04:28 < onr> Spine.js
04:28 < rump> CoverSlide: we were talking about thin servers and fat clients
04:28 < CoverSlide> like backbone?
04:28 < samholmes> How does express know about jade module by just setting app.set('view engine', 'jade')?
04:29 < asdf12> jade is an express dependency 
04:29 < rump> samholmes: jade has a _express function
04:29 < samholmes> rump: how does that work?
04:29 < AAA_awright> That sounds really hackish
04:29 < samholmes> express require()s 'jade' and checks if it has an _express function?
04:30 < rump> every templating engine that wants to work with express needs to have an _express function or at least i think a render function with a certain argument signature
04:30 < onr> rump: uhm, Sammy,js
04:30 < rump> or this https://github.com/visionmedia/consolidate.js
04:30 < asdf12> oh
04:30 < asdf12> yea its render
04:31 < samholmes> wait
04:31 < asdf12> oh no wait yea, its __express :P
04:31 < samholmes> consolidate is used by express to know of the different template engines?
04:31 < samholmes> what if a template engine isn't "known" by express, how would i use it?
04:31 < rump> samholmes: https://github.com/visionmedia/ejs/blob/master/lib/ejs.js#L337
04:32 < rump> samholmes: require it and render it and res.send it
04:32 < asdf12> it needs to expose a __express function
04:33 < samholmes> rump: how do I use res.render('mytemp'), instead of res.send(require('myengine').render('./views/mytemp.myengine'));
04:33 < rump> render will either return the html or better have a callback
04:34 < rump> so just pass it the res object
04:34 < rump> but, just pick from one of the 50 expres compatible templating engines :)
04:35 < rump> or fork it to have exports._express with a argument signature of path, options, fn
04:36 < asdf12> no but seriously you should check out angular
04:36 < samholmes> angular?
04:36 < rump> asdf12: im looking now
04:36 < asdf12> my only complaint is it makes your html look fugly
04:36 < rump> yeah i can stand that sort of thing
04:36 < rump> i saw all the attribute additions to tags
04:36 < rump> thats gross eh?
04:36 < asdf12> talking to rump
04:37 < asdf12> though i wouldnt classify it as sinatra like
04:38 < samholmes> jade doesn't have layout files?
04:38 < rump> samholmes: it does
04:39 < samholmes> rump: I have to explicitly specify a layout from res.render?
04:39 < rump> samholmes: although i think they refer to them as extends and blocks
04:39 < rump> no, in the templates
04:39 < samholmes> rump: How does it work, I'm coming from EJS
04:39 < rump> samholmes: whats wrong with ejs, thats what i use
04:39 < samholmes> rump: nothing, I just am starting a side project, and I'd like to try out Jade with it
04:40 < samholmes> It's good to broaden experience with different tools, right?
04:40 < rump> i have enough to learn i dont need to learn additional languages like coffeescript and jade that compiles down into what everyone else is using
04:40 < samholmes> am I right or am I right, right?
04:40 < asdf12> ejs is slow thats whats wrong with it
04:40 < asdf12> also its fugly
04:40 < rump> asdf12: ejs is way faster than jade
04:40 < rump> samholmes: or invest in using/learning the standards, js/html/css
04:41 < samholmes> rump: that's your philosophy I guess, but I want to get my hands wet in many things to become impressive to stupid people who don't know those things and pay me because they think I'm super smart. :D
04:41 < rump> instead of the feature of the week, coffee/sass/lass/icec/etc
04:41 < samholmes> rump: I know the standards, I could use EJS, but I'd like to try something different.
04:41 < rump> asdf12: i actually have a benchmark suite comparing several templating engines
04:41 < rump> ejs was 2nd best
04:41 < rump> marginally
04:42 < SomeoneWeird> ejs pwns
04:42 < rump> <3 ejs
04:42 < rump> even without layouts
04:42 < rump> include is all we need
04:42 < SomeoneWeird> yep
04:43 < asdf12> hmm
04:43 < rump> samholmes: are you a rubyist at heart
04:43 < rump> seems like its mostly the rubyist who want to learn all these interim languages which compile into the real languages
04:45 < rump> if i wanted to run a make file (or watch directories for changes) for every edit before i can view it i'd just write in a compiled language
04:45 < rump> backbone looks pretty sexy
04:46 < rump> asdf12: angular is a mess
04:46 < asdf12> thats what they always say
04:47 < asdf12> but you will be cursing backbone soon enough, sooooooon enough
04:47 < rump> yeah?
04:47 < rump> where does it fall apart?
04:47 < asdf12> i dont know, i used it alongggg time ago haha
04:47 < asdf12> but i didnt like it
04:47 < rump> the code looks pretty clean
04:47 < cainus> lots of boilerplate
04:48 < cainus> once you start writing something real
04:48 < rump> :/
04:48 < asdf12> but that was when the docs were bare
04:48 < cainus> backbone is meant to be a small utility, so that's natural
04:48 < asdf12> yea yea
04:48 < rump> i like small
04:48 < asdf12> its like so you want sinatra, but you end up doing everything the hard way and end up with rails anyway
04:48 < cainus> yeah so you'll learn it quickly at least
04:49 < rump> http://backbonejs.org/examples/todos/todos.js
04:49 < rump> i would never end up with rails
04:49 < asdf12> that todo example is huge compared to the angular one
04:49 < cainus> asdf12: sort of, but I doubt anyone ends up with rails on purpose :)
04:50 < rump> show me a non cached rails site that has a response time sub 400-600ms
04:50 < rump> blek
04:50 < rump> just hack wordpress at that point
04:50 < asdf12> cainus: yea... but sometimes people shy away from frameworks that have conventions or seem kind of big and aren't small and light
04:51 < asdf12> and you end up with a massive weird pile of poop
04:51 < asdf12> sometimes conventions  imposed on you by frameworks are a good thing
04:51 < cainus> asdf12: yeah... depends on the developers
04:51 < asdf12> versus doing it all your way
04:51 < rump> as a 6 year drupalist, who contributed lots of modules and wrote many projects to many crazy things and bend it every which way... i can honetly say ive learned that its 10x easier to build something from scratch then to keep having to gut out and scrape away cruft
04:52 < cainus> i've seen rails apps that have gone terribly awry as well though...
04:52 < asdf12> no but this isn't about rails, rails is dumb
04:52 < asdf12> im just saying in general when there are good convetions frameworks impose on you
04:52 < asdf12> sometimes people don't like that even
04:52 < rump> sinatra found a good middle ground
04:52 < cainus> true
04:52 < rump> add npm to it and perfection
04:53 < asdf12> its like ejs as a templating engine *cough*
04:53 < rump> haha
04:53 < rump> yeah, exactly!
04:53 < asdf12> templates should be logicless , thats a good convention
04:53 < rump> you dont wanna do string functions on it yourself but at the same time why learn a whole new language and jade/haml grossness
04:54 < rump> but thats just me,.. im the minority in that regard
04:56 < samholmes> rump: I'm a JSist at heart. :)
04:57 < samholmes> rump: JS is the language I'm most good at, but I also like other languages and things that make things simpler. At heart, I'm a minimalist, if JS was more minimal I'd love it more.
04:57 < Lorentz> minimal? try C today!
04:58 < rump> i agree
04:58 < rump> js is pretty darn minimal if you follow crockford
04:58 < rump> object and functions, the end
04:58 < ckknight> what about numbers? I still want those.
04:58 < ckknight> but like, not all the time
04:58 < ckknight> I'll use em less, I swear!
04:59 < rump> thats an object
04:59 < rump> next!
04:59 < ckknight> not in the general case
04:59 < ckknight> it can be coerced to an object easily, no doubt
04:59 < asdf12> number is a primitive
04:59 < ckknight> but numbers, strings, booleans, null, and undefined are primitive.
04:59 < rump> i just want local scope
05:00 < rump> only peeve
05:00 < rump> block scope, rather
05:01 < asdf12> guys
05:01 < asdf12> im going to tell you a story
05:01 < AAA_awright> rump: Instead of function scope?
05:01 < rump> AAA_awright: yep
05:01 < AAA_awright> Yeah, definitely
05:02 < asdf12> when i was in college, and undergraduate, i was in math lab, and we had do some number sequences or something or other
05:02 < ckknight> rump: you could use a compile-to-JS language that supports it
05:02 < rump> ckknight: gross
05:02 < ckknight> fair enough.
05:02 < rump> ckknight: so i can debug twice
05:02 < asdf12> and the professor had some graduate students helping him help us, and one of them was a pretty girl
05:03 < asdf12> and we had computers to figure out the formula or whatever to find the next number in the sequence, but i was doing them in my head
05:03 < asdf12> and the girl noticed and was like how'd you do that??
05:03 < rump> asdf12 the rainman
05:03 < asdf12> no the point of the story is
05:03 < asdf12> that is the only time in history math ever impressed a pretty girl
05:03 < rump> were they octals
05:04 < ckknight> asdf12: I don't know what you're talking about. I use my math skills to get women all the time.
05:04 < rump> did you get her digits
05:04 < rump> ba dom dom!
05:04 < asdf12> if i got her digits i wouldnt be on irc right now
05:05 < rump> what a perfect setup
05:05 < rump> "i know numbers baby, can i get your digits"
05:06 < rump> and now she laying next to some jock who barely knows multiplication, how does that make you feel
05:06 < asdf12> afk crying
05:07 < rump> haha
05:35 < samholmes> I did app.use(stylus.middleware({src: __dirname + '/public/stylus', dest: __dirname + '/public/styles' }), but it doesn't work?
05:43 < stagas> { foo: [String, 'bar'] } <-- is there a name for this pattern? I see mongoose schemas implementing it
05:43 < samholmes> I can't seem to get any compiled files from stylus. What am I doing wrong: http://pastie.org/6004831
05:44 < astropirate> an object with a key foo with a value of type array :p
05:44 < stagas> astropirate: hahahaha yeah actually it is :P
05:45 < rump> samholmes: is the static middleware working?
05:45 < samholmes> rump: Yes
05:45 < rump> hm, directories exist?
05:45 < samholmes> Yup
05:46 < samholmes> What's it suppose to do?
05:46 < samholmes> It converts all the .styl files into .css files?
05:46 < rump> thats the idea i think
05:46 < samholmes> And they're placed in /public/styles/ folder
05:46 < rump> https://github.com/LearnBoost/stylus/blob/master/docs/middleware.md
05:47 < samholmes> Then how do I include these files in my document?
05:47 < stagas> astropirate: it looks like it's a way to have strong/custom typing for properties, plus passing defaults and other meta data as a bonus
05:47 < rump> try the compile key?
05:47 < rump> samholmes: the old fashion way of <link rel="stylesheet" href="/public/styles/file.css">
05:47 < samholmes> rump: so isn't there a way to bundle all my styles into one file?
05:48 < astropirate> stagas, I would have personaly done it this way:   { foo: { type: String, value: 'var'} } but what do i know
05:48 < rump> yeah there are other uglify-css or similar
05:48 < xk_id> the 'http' module writes the 'host' header of an http client with lower-case 'h'. How can I modify this? It makes the header look fake to the server.
05:50 < rump> xk_id: incoming or outgoing?
05:50 <@mbalho> http headers are case insensitive from a spec perspective
05:50 < samholmes> rump: what should the compile funciton do?
05:50 < rump> you're using the agent to make requests or receiving requests?
05:50 < xk_id> rump: what do you mean? this is client-wise. 
05:50 < rump> samholmes: compile them perhaps
05:50 < stagas> astropirate: sure if you like being verbose, which is why I'd like to read more about this pattern if I knew how it's called!
05:50 < xk_id> rump: I'm making requests to a server.
05:51 < rump> xk_id: you can modify req.headers directly
05:51 < samholmes> rump: So I'm suppose to do .import() for each file?
05:51 < rump> samholmes: dunno what that is
05:51 < xk_id> rump: I tried. Node overwrites the 'host' one when it makes the request. All other headers that I set up remain intact.
05:52 < samholmes> rump: it says on the page you sent me that I should create a compile function like the one on the page. The one on the page does stylus(str).import(...).import(...)
05:52 < astropirate> stagas, well yah it is more verbose,  but you know exactly what it does without someone telling you what it is. Also, it might be called "type annotation"?? I don't know if really has a name
05:53 < rump> xk_id: what about the request npm module
05:53 < xk_id> rump: that's what I'm using
05:53 < astropirate> stagas, in the java/php world they use comments to define types for ORMs
05:54 < astropirate> atleast from waht i've seen..
05:56 < styol> xk_id: node request module making a request to another node with an http module response?
05:57 < echo> xk_id: Especially the host header isn't case sensitive. What issue are you running into?
05:57 < xk_id> styol: I'm making the requests and listening with netcat
05:57 < xk_id> echo: it's not case sensitive, but it makes the headers look fake nevertheless. browsers usually send it as "Host"
05:58 < xk_id> I don't wish to appear as an attacker.
05:59 < stagas> astropirate: it is a kind of type annotation though it's used to create custom types ie { pos: { type: Vector, value: [10,20] } }, you can reset the value back to the default and generally lots of flexibility
06:01 < echo> xk_id: http://pastie.org/6004979 Do you have proof of it being marked as "fake". If anything, I would think you'd want to be most worried about your user-agent.
06:01 < xk_id> echo: I have already customised the other headers. I just wish I could make the 'host' upper-case too. None of my browsers send it lower-case, not sure if any genuine browsers do. 
06:02 < xk_id> would it not be possible to identify the line in the source code that I need to changed?
06:05 < mansoor-s> stagas, what are you working on, if you dont mind me asking
06:05 < isaacbw> can anyone recommend "The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws"?
06:09 < rump> xk_id: i wonder if its request or node's http which is hijacking that header
06:09 < stagas> mansoor-s: I'm using the pattern in a game framework I'm working on https://github.com/entity
06:09 < rump> http://nodejs.org/api/http.html#http_http_request_options_callback
06:09 < rump> does that simple example, if you set the header as Host, still lowercase it?
06:10 < stagas> mansoor-s: like here https://github.com/entity/arkanoid/blob/master/arkanoid.js#L269-L272
06:12 < isaacbw> hahaha: http://www.squarefree.com/pornzilla/
06:12 < Havvy> Heh. This book on interfaces: "The least frequently used combination is asynchronous/procedural"
06:12 < MiracleBlue_> Ahoy
06:12 < isaacbw> this was a recommended install for a security book I'm looking at
06:13 < rump> isaacbw: heh?
06:13 < isaacbw> I don't know if it was a joke or if it's actually useful for something
06:14 < xk_id> rump: headers are uppercase in that example.
06:14 < isaacbw>  how about this book? http://www.amazon.com/Web-Security-Testing-Cookbook-Systematic/dp/0596514832/ref=sr_1_7?s=books&ie=UTF8&qid=1359698506&sr=1-7&keywords=web+application+security
06:14 < rump> xk_id: so request is the culprit
06:14 < xk_id> rump: I'm not sure. Perhaps.
06:14 < isaacbw> recommend me all the books
06:15 < Lorentz> have you read your SICP today?
06:16 < mansoor-s> stagas, ahh ok, i'm looking though it, very cool
06:16 < isaacbw> Lorentz, no! :O
06:16 < isaacbw> I've had it recommended to me before though
06:16 < isaacbw> holy shit the print copy is expensive
06:17 < isaacbw> the internet version will have to do :(
06:19 < Havvy> isaacbw: Have you watched your SICP videos today?
06:19 < Havvy> Or in the past.
06:19 < isaacbw> :(
06:19 < isaacbw> noooo
06:19 < rump> xk_id: https://github.com/mikeal/request/blob/master/main.js#L192
06:19 < rump> xk_id: if headers.host isnt defined, it defines it
06:19 < isaacbw> which ones are you talking about Havvy?
06:19 < stagas> mansoor-s: I mean, it's a very cool pattern! if all my type constructors eventually have .toString I can serialize the entire state and reapply it without side effects
06:19 < Lorentz> I also recommend The Pragmatic Programmer
06:19 < xk_id> rump: I've tried defining it, and it overwrites it in lower-case. 
06:20 < rump> xk_id: host != Host
06:20 < xk_id> rump: I think it always overwrites it, because URI is one of the essential options of request
06:20 < Havvy> Lorentz: My local library has lots of books from that publisher.
06:20 < rump> it looks for lower case host and if it doesnt exist it overwrites it
06:20 < rump> err creates it
06:20 < Lorentz> Havvy: you mean by pragmatic bookshelf
06:20 < Havvy> Uh, sure.
06:20 < rump> id say thats a bag
06:20 < Havvy> Yeah.
06:20 < rump> you could submit a quick pull request to case insensitive search on line 192
06:20 < xk_id> rump: so how can I avoid this?
06:21 < xk_id> rump: is it too tedious to fix the code?
06:21 < rump> its a 1 line fix
06:21 < isaacbw> cool, thanks
06:21 < rump> line 192
06:21 < Lorentz> Havvy: it's good reading
06:21 < samholmes> Wow. This wasted a lot of my time..
06:21 < samholmes> https://github.com/LearnBoost/stylus/issues/122
06:21 < rump> i mean i think, i only looked for a second but that was my first hit
06:22 < samholmes> apparently my directory structure has to be taken into account with stylus.
06:22 < Havvy> isaacbw: http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/
06:22 < isaacbw> oh, neat
06:22 < Havvy> Lorentz: If I see it, I'll be sure to grab it.
06:22 < Havvy> isaacbw: Warning: Those videos are long.
06:22 < Havvy> There's at least 25 hours of content.
06:22 < isaacbw> hmm
06:23 < Havvy> (As an anime, it would be ~80 episodes)
06:23 < xk_id> rump: ? what if it calls that variable later? I need to change it when it makes it into a string and sends it to the browser anyway. line 192 only assigns a value to the object, it doesn't send its name to the server
06:23 < rump> xk_id: try setting both host and Host
06:23 < rump> what does netcat say to that
06:24 < xk_id> rump: I'm not entirely sure you understand my issue? if I set 'host', I will set its value, not its name to "Host". 
06:24 < rump> yes i know
06:24 < rump> set the header host and Host im curious
06:24 < xk_id> okay, hold on
06:25 < xk_id> but I'm pretty sure it gets overwritten because of the URI option
06:25 < rump> i bet you have both then
06:27 < xk_id> rump: ok, put both "Host" and 'host', and I only get 'host' (and the value assigned, not the one parsed from the URI) in netcat 
06:27 < rump> ah
06:27 < rump> im gonna try
06:28 < rump> cause i was just about to use this for a project so its worth figuring out
06:28 < Guest36887> i have a problem with join 2 or more tables in mongo DB ?
06:28 < MiracleBlue_> Man I hate being so ADD
06:28 < xk_id> :D
06:28 < MiracleBlue_> Can't settle my mind down
06:28 < MiracleBlue_> I wanna write something cool but I have no idea what to write.
06:30 < samholmes> UGH! Still doesn't make since!
06:30 < samholmes> sense*
06:35 < isaacbw> Guest36887, mongo doesn't have joins
06:35 < isaacbw> and doesn't have tables
06:37 < rump> haha dang you're right thats gross
06:37 < rump> maybe its in the uri processing
06:38 < xk_id> rump: well it's not, because I set it up to 'aaa' and it stays like that.
06:38 < rump> howd you get nc to listen for aaa?
06:38 < xk_id> nc listens to a port
06:38 < xk_id> I'm just using "nc -lk <port>"
06:39 < rump> yeah but request parses url or uri object
06:39 < echo> xk_id: This may be risky, but, what happens if you capitalize this object reference from self.headers.host to self.headers.Host:
06:39 < echo> https://github.com/mikeal/request/blob/master/main.js#L193
06:39 < rump> and setting the host from that i think
06:39 < xk_id> rump: it sends it to netcat as "aaa", not as anything parsed for the URL (which is "http://127...")
06:40 < rump> ok so its not hijacking host completely
06:40 < rump> just the case :/
06:40 < xk_id> echo: I reckon it needs to use it later, so if it's case sensitive, it won't find it. Plus, that's where the value gets assigned, rather than when the name is transformeed into string and sent to the server. Also, it seems that if I set it to a custom value in the options, it remains that way (i.e line 193 doesn't change it anymore)
06:40 < rump> http://dpaste.com/902987/
06:41 < rump> ewww
06:41 < rump> wait
06:41 < rump> no i was right xk_id
06:42 < rump> it is hijacking host compeltely from the URI
06:42 < rump> xk_id: http://dpaste.com/902990/
06:42 < rump> host should be 'example.com'
06:42 < rump> but its taking it from uri key
06:42 < MiracleBlue_> I think it's time to learn how sessions work in node
06:42 < MiracleBlue_> In express, rather.
06:43 < echo> rump: That's done after the URI is parsed: self.headers.host += (':'+self.uri.port)
06:43 < rump> echo: are you on the line?
06:44 < echo> It's 3 lines down from my last link.
06:44 < rump> lets jsut add a check for a host header before setting that and do a pull request
06:44 < xk_id> rump: http://dpaste.com/902991/
06:44 < mscdex> so what is the fastest msgpack javascript module out there?
06:44 < mscdex> :-D
06:44 < rump> xk_id: curious what happens if you change url key to uri
06:44 < xk_id> rump: that's because you wrote it upper case in /902990
06:44 < xk_id> write "Host" as "host" and you'll get what I get
06:45 < rump> xk_id: ah, yep that did it
06:46 < xk_id> and stop focusing on line 193, we need to change what is sent to the server :)
06:46 < xk_id> line 193 assigns the value, which is used by the socket, etc. 
06:47 < xk_id> It's not the plain text sent as a header to the server
06:48 < rump> so i just commented out that if block
06:48 < rump> and now i get capitalized H host
06:48 < xk_id> lol
06:48 < xk_id> did you break the internet?
06:48 < AvianFlu>  doesn't http_parser lowercase the headers?
06:49 < echo> Probably :P
06:49 < rump> http://dpaste.com/902996/
06:49 < AvianFlu> I'm pretty sure that on either outgoing or incoming requests, all the headers wind up lowercased
06:49 < AvianFlu> I forget which it was
06:49 < AvianFlu> haven't read that in a long time
06:49 < rump> no people we are having proper cased headers all over
06:49 < rump> just not host
06:50 < rump> and nodejs's http (http_parser) preserves the header case
06:50 < rump> its just npm's require
06:50 < AvianFlu> well that's just weird then
06:50 < rump> xk_id: can you verify that commenting that block does the same for your setup?
06:50 < rump> so we can at least narrow down
06:52 < Guest36887> isaacbw: thanks
06:53 < xk_id> rump: here's what I get
06:54 < xk_id> if I don't add anything host-related in the custom options, no "host" header shows up in netcat
06:54 < xk_id> if I add both "Host" and "host" in options, only "host" shows up in netcat
06:54 < xk_id> and if I add only "Host", "Host" shows up.
06:54 < greg5green> im playing around with my first node/express app and on the return from my jsonp request, it's coming up as 'myFunction && myFunction({' instead of just 'myFunction){'. has anyone seen that before
06:54 < rump> xk_id: is this referring to 183-192 commented out?
06:54 < greg5green> my code: http://pastebin.com/fc2iKcZz
06:55 < Guest36887> i have 2 objects : users : users : { 	id: 1 	name: 'test', 	session: 1 }  session: { 	id: 1, 	dep: 'demo' }
06:55 < rump> interesting
06:55 < Guest36887> i want to display session : 'demo' from users object in mongo
06:56 < tpayne> how can i convert a [Object obj] into a string of JSON? Right now, JSON.stringify is putting a bunch of slashes everywhere that my server doesn't like. Any ideas?
06:56 < xk_id> rump: and, obviously, it sitll connects to the right host regardless
06:56 < xk_id> rump: but, who knows if we broke anything...
06:56 < rump> right
06:58 < MiracleBlue_> For all the game developing people in the room, any particular game JS libraries you'd recommend?
06:58 < inolen> For what purpose?
06:59 < inolen> I'm partial to gl-matrix for vec/mat ops
06:59 < MiracleBlue_> For learning, I suppose.  2D DOM-based (preferably) game.  Maybe a basic shooter.
06:59 < MiracleBlue_> I'm undecided at the moment.
06:59 < rump> i dont think this block breaks a lot xk_id
06:59 < rump> its just convenience function which sets host
06:59 < xk_id> rump: https://github.com/mikeal/request/issues/426 feel free to post you finding?
07:00 < xk_id> I'm not yet decided how to go about this..
07:00 < rump> we should jsut change line 184
07:00 < xk_id> I looked too through the code, but I couldn't find what I wanted. i.e, where it sends the headers as string to the server
07:00 < rump> to do a case insensitive key lookup for host Host hOst HOST
07:00 < rump> or minimally host or Host
07:01 < rump> xk_id: i think you're off base
07:01 < rump> it just sends the header object
07:01 < rump> its adding the host key right here in this block
07:02 < rump> if lowercase host doesnt exist, make it exist!
07:02 < rump> i just need to see where it flattens two hosts of different cases
07:02 < rump> then change the one line then pull request it
07:03  * xk_id nods
07:03 < xk_id> that sounds good
07:04 < rump> if (self.setHost) delete self.headers.host
07:04 < rump> wtf
07:07 < echo> rump: I saw that too and was like... waaat >_> Well... Okay. 
07:08 < rump> pretty tangled
07:08 < rump> in Request.prototype.start
07:11 < rump> thats just a convenience function that has to go i guess (183-191)
07:11 < rump> the only cruft left behind will be some setHost stuff im still trying to sort out
07:12 < rump> isnt there others?
07:12 < rump> xk_id: superagent?
07:13 < xk_id> pardon?
07:13 < xk_id> I'm sorry, I'm clueless :)
07:14 < rump> https://github.com/visionmedia/superagent
07:14 < rump> hmm is that the same or is that for the client side
07:25 < greg5green> sorry to ask again, but it's driving me nuts
07:25 < greg5green> im playing around with my first node/express app and on the return from my jsonp request, it's coming up as 'myFunction && myFunction({' instead of just 'myFunction){'. has anyone seen that before
07:25 < greg5green> my code: http://pastebin.com/fc2iKcZz
07:26 < greg5green> everything works even with that "malformed" start to the jsonp response, but i'm really just curious what my problem is
07:26 < rump> xk_id: https://gist.github.com/4689885
07:27 < xk_id> rump: what's this sorcery?
07:27 < rump> xk_id: https://github.com/visionmedia/superagent
07:27 < rump> the studly tjhalowicks implementation of request
07:28 < rump> tjholowaychuk rather
07:29 < rump> maintains Host case and looks pretty slick/simple
07:29 < Octagonking> I'd like to execute an MS-DOS command when running my Node.JS file in the command line interpreter. How can I do that
07:29 < bradleymeck> Octagonking: require('child_process').spawn|exec
07:29  * Havvy is guessing create a cmd.exe process and feed it the command.
07:30 < xk_id> rump: so is that replacing the request module?
07:30 < rump> xk_id: yes
07:30 < Octagonking> The Node.JS Command Line Interpreter IS a cmd.exe process
07:30 < Octagonking> It' basically CMD with Node.JS adaptatioons
07:30 < xk_id> Interesting. is it reliable?
07:31 < rump> xk_id: well, its written by the creator of express and about 500 other modules
07:31 < bradleymeck> Octagonking: link?
07:31 < Octagonking> Is there a way to clear STDOUT and all displayed text without clearing STDIN
07:32 < rump> probably the guy who has done the most for the community out of anyone besides ry and i_saac
07:32 < Octagonking> bradleymeck: Huh
07:32 < xk_id> rump: ah, could work
07:32 < bradleymeck> Node.JS Command Line Interpreter? seems you aren't talking about the repl
07:32 < Octagonking> Not the REPL
07:33 < Octagonking> it's named 'Node.JS Command Prompt' when you install Node
07:33 < xk_id> rump: hmm.. I need more functionality from my agent
07:33 < rump> whats request do that superagent doesnt?
07:33 < bradleymeck> Also if you have ansi.sys, CSI 2 J (SEE http://en.wikipedia.org/wiki/ANSI_escape_code)
07:34 < Octagonking> I just need to be able to clear STDOUT without clearing STDIN
07:34 < xk_id> rump: I need to catch http errors, set manual time-outs, restrict the maximum number of sockets to 1 and keep the first connection open forever (i.e keep-alive and re-use it for subsequent requests)
07:34 < xk_id> rump: I'm writing a crawler, so all these are part of being gentle to the server
07:34 < rump> i know it handles errors
07:34 < bradleymeck> Octagonking: you don't clear stdout… once its buffered it is buffered, you could use something to clear the screen
07:34 < Octagonking> clear all the text in the environment without clearing the data that defines STDIN
07:34 < rump> the callback takes err, req and has res.error
07:35 < rump> timeouts, hmm
07:35 < Octagonking> how can I clear the screen
07:35 < rump> xk_id: http://visionmedia.github.com/superagent/
07:35 < rump> theres better documentation
07:35 < bradleymeck> use the ansi escape code mentioned above
07:35 < xk_id> oh
07:35 < rump> xk_id: http://visionmedia.github.com/superagent/#request-timeouts
07:36 < rump> so timeouts and errors done
07:36 < rump> now the sockets thing
07:36 < bradleymeck> otherwise windows does not directly support that in the consoles provided and you would need to drop into C++
07:36  * xk_id nods
07:37 < rump> i imagine one instance is 1 connection
07:37 < rump> res.abort() could be handy too
07:37 < xk_id> hmm
07:38 < rump> yeah it seems more features here than request
07:38 < rump> tj doesnt mess around
07:38 < rump> do it all as streams
07:38 < rump> like a bauss
07:38 < xk_id> with "request" I do this: "require('request').forever();" and then "pool = {maxSockets = 1}". and then "request({pool : pool, url: url}, ..."
07:39 < rump> ok so the only thing less
07:39 < xk_id> this doesn't close the socket, and each subsequent request reuses it
07:39 < rump> is for you to explain yourself why you are using 8 space tabs :)
07:39 < trevnorris> how do you guys handle posting bug fix changes to npm? (e.g. 0.4.2-1)
07:39 < xk_id> rump: where? :P
07:39 < rump> hmm
07:39 < rump> thought i saw before in some of your pasties
07:40 < xk_id> rump: I'm using very small tabs in my Sublime Text, only when I copy/paste to github they get huge
07:40 < xk_id> I'm not ashamed by the size of my tabs
07:40 < xk_id> I'm tabbing like a man
07:41 < rump> i dont see where you can do keepalives
07:41 < rump> i wonder if you can chain .gets
07:42 < Octagonking> I'm confuse
07:43 < Octagonking> I want toknow how to use a script to clear the screen
07:45 < bradleymeck> if you don't want to do it with escape codes, executing `cls` may work depending on your goal?
07:45 < Octagonking> you don't know what my goal is
07:45 < Octagonking> I'd ask in #windows if it was a CMD issue
07:45 < rump> quick how do i get nc to announce connections
07:45 < Octagonking> but it's a Node.JS prompt issue
07:46 < lewellyn> of course we don't know the goal. that's why the random suggestion, surely.
07:46 < Octagonking> I'd like to clear the prompt screen
07:46 < Octagonking> so there is a clean screen to put the output on
07:46 < echo|1> Octagonking: I take it a large amount of new lines outputting won't suffice?
07:47 < bradleymeck> why not use the escape code?
07:47 < Octagonking> echo|1: will not suffice
07:47 < Octagonking> bradleymeck: escape cde confuse me
07:48 < xk_id> rump: hmmm?
07:48 < Octagonking> I want to clear the Node.JS Command Prompt with a script command.
07:49 < rump> xk_id: i dont see how to make superagent do multiple requests per keep alive connection :/
07:49 < bradleymeck> try: node -e 'console.log("\x1b\[2J")' , if you have escape code support it will clear it
07:49 < lewellyn> Octagonking: you're apparently on windows from "Node.JS Command Prompt", so i fail to see how "use `cls`" is inappropriate.
07:49 < xk_id> rump: regarding your netcat question... I have no idea :) I've been trying the entire day to figure out
07:49 < rump> the man page doesnt have anything but that seems silly
07:50 < rump> guess i could write a node app real quick
07:50 < cxreg> rump: maybe you want socat
07:50 < xk_id> rump: also couldn't find anything online
07:50 < cxreg> it's like netcat but with more oomph
07:50 < rump> $ brew install socat
07:50 < rump> lets give it a whirl!
07:50 < bradleymeck> anyone have a good way to detect network utilization per process, without tanking cpu
07:51 < cxreg> rump: look at the bottom of its manpage for some example usage
07:51 < cxreg> in particular, look for the TCP4 and fork stuff
07:52 < rump> haha holy "oomph" cxreg 
07:52 < cxreg> no joke
07:54 < xk_id> did you manage to see opened connections with socat?
07:55 < mansoor-s> who wants to work on a project together? :)
07:55 < MiracleBlue_> What kinda project?
07:55 < xk_id> mansoor-s: I'm working on a very interesting dissertation if you're interested :))
07:56 < xk_id> I wouldn't mind some help
07:56 < MiracleBlue_> I'm working on an audio application and I'd love some help haha
07:56 < echo|1> lol
07:57 < echo|1> I learned the hard way that there's a difference between getting some help and having someone write large amount of something for you. The climax just doesn't feel the same.
07:57 < bradleymeck> MiracleBlue: node-pcm  + node-speaker based?
07:57 < MiracleBlue_> bradleymeck: Not node at all, actually
07:58 < MiracleBlue_> Web Audio API
07:58 < MiracleBlue_> Been working on it for over a year
07:58 < bradleymeck> MiracleBlue_: fun I looked into that, but wished someone wrote a microphone shim for flash since getusermedia still fails in chrome
07:58 < bradleymeck> fun;*
07:58 < MiracleBlue_> bradleymeck: Oooh cool
07:59 < MiracleBlue_> I was actually looking into doing something with microphone as well at one point.
07:59 < MiracleBlue_> Though the application I'm working on is a fully featured DAW in native JS
07:59 < phI||Ip> Is it possible to add a .node file to the executable like a module so I need not have it on the host machine?
07:59 < MiracleBlue_> With live synthesis and everything.
08:01 < bradleymeck> phI||Ip: not at this time
08:02 < rump> xk_id: yeah but node gives me parse errors
08:02 < rump> its kind of a mess
08:02 < xk_id> rump: can you paste the command for me?
08:02 < rump> a node app will be quicker
08:02 < rump> its busted
08:02 < xk_id> hm ok
08:02 < rump> sec ill just write the app
08:02 < phI||Ip> bradleymeck thanks
08:10 < rump> hmm
08:10 < rump> gist wont let me post it
08:11 < Octagonking> using 'cls' won't work, cls is not a function
08:11 < rump> xk_id: http://dpaste.com/903038/
08:15 < rump> xk_id: actually the dashes got old real quick: http://dpaste.com/903040/
08:15 < xk_id> hmm
08:16 < rump> so now to get superagent to deliver multiple REQUESTs under one CONNECT
08:16 < rump> i guess you could chain requests
08:16 < rump> err not chain
08:17 < rump> but call recursively or pass on in the callback
08:19 < rump> nope
08:20 < rump> when called recursively it creates a new connection each time
08:27 < xk_id> rump: dude, thanks for the server..
08:27 < xk_id> I didn't know about the 'connection' event
08:28 < xk_id> I managed to confirm that my "require('request').forever()" re-uses the sockets :)
08:28 < xk_id> me happy
08:28 < xk_id> I wasn't sure if it works, I just read the snippet somewhere online. 
08:30 < rump> np
08:31 < rump> yeah i just browsed superagent
08:31 < rump> and i dont see how can do the keepalive thing
08:31 < rump> what will you go with?
08:32 < xk_id> I'm going to wait to see if anyone replies on github
08:32 < xk_id> otherwise, I think it would be preferable for my dissertation to re-use the connections. 
08:32 < mscdex> anyone ever get this when trying to build a node addon?: "ar: illegal option -- T"
08:33 < xk_id> Reusing the connections is more gentle to the server.
08:34 < xk_id> On the other hand, using improper headers may identify me as an attacker...
08:34 < xk_id> But I think I'll take the risk
08:35 < rump> hmm
08:36 < rump> even apachebench with keep alive is making that server close the connection each time
08:36 < xk_id> it's not the server.. it's the client that closes the connection
08:36 < xk_id> the callback is executed when the stream sent by the server passes an .end()
08:37 < xk_id> by default, the socket closes upon receiving the .end(), and executes the callback
08:37 < rump> yeah but im running:  $ ab -k -n5 http://localhost/
08:37 < rump> -k is keepalive
08:37 < rump> so that node server should use 1 connect
08:37 < rump> it works for your request module one?
08:38 < xk_id> it works, yes. I got it to reuse the connection
08:38 < xk_id> hm, I just realised I'm not closing it, tho 
08:38 < [AD]Turbo> hi there
08:38 < rump> http://nodejs.org/api/http.html#http_request_setsocketkeepalive_enable_initialdelay
08:39 < xk_id> what do you think that means, rump?
08:39 < rump> sec gonna mess with it
08:41 < rump> i cant get keep alives!
08:45 < xk_id> rump: for reference, how I do it with request https://gist.github.com/4690140
08:45 < iksik> hello
08:45 < rump> and you get 1 CONNECT and a bunch of REQUESTs?
08:45 < xk_id> yep
08:45 < xk_id> try it
08:46 < iksik> how can i handle error: listen eaddr in use? it's thrown if superviser restarts my server too fast, i want to be able handle it, to delay .listen() function
08:46 < SomeoneWeird> setTimeout
08:48 < rump> xk_id: try $ ab -k -n3 http://thatnodeserver:port/
08:49 < xk_id> rump: what am I supposed to see?
08:49 < rump> do you get multiple connects?
08:50 < xk_id> no, I get a flood of Requests
08:50 < rump> wth
08:50 < xk_id> and one Connect
08:50 < xk_id> at the beginning
08:50 < rump> even with ab?
08:50 < rump> im losing my mind
08:50 < xk_id> this is with running your command
08:50 < xk_id> as copy/pasted
08:51 < xk_id> and your server
08:51 < xk_id> you should get the same thing
08:51 < rump> xk_id: http://dpaste.com/903059/
08:52 < xk_id> well you're running -n5, instead of -n3?
08:52 < xk_id> Not sure what the param does, tho
08:52 < rump> number of requests
08:52 < rump> -k is the keepalive
08:52 < xk_id> hm
08:53 < xk_id> heh
08:53 < xk_id> yes, this is strange
08:53 < xk_id> have you changed anything in the server?
08:54 < rump> xk_id: http://dpaste.com/903060/
08:54 < rump> same as yours, right?
08:55 < xk_id> rump: I've commented out the "hello world"
08:55 < xk_id> xD
08:55 < rump> oh
08:55 < rump> that might be important
08:55 < rump> .end()
08:55 < xk_id> because .end()
08:55 < xk_id> yup
08:55 < rump> but then the connections never close
08:55 < SomeoneWeird> very
08:55 < rump> they will hang until you kill the server or like few minutes
08:57 < xk_id> rump: dude I've added the .end()
08:57 < xk_id> and I don't seem to get multiple connects
08:57 < MiracleBlue_> Hey SomeoneWeird 
08:57 < rump> i comment out the .end(), and ab stalls on first request
08:58 < rump> xk_id: node -v
08:58 < xk_id> I'm telling you, I've added the .end() and I'm still not getting multiple connects
08:58 < rump> just wonder which node version you're running
08:59 < SomeoneWeird> MiracleBlue_, howdy
08:59 < sorensen> blargh
08:59 < rump> else im cozy in bed and this is a nightmare
08:59 < MiracleBlue_> :D
08:59 < sorensen> worked on a file for an hour and then deleted it by mistake
08:59 < xk_id> rump: but ab is unreliable.. sometimes it works, sometimes it doesn't. is this normal?
08:59 < rump> that kind of simple illogical bug that haunts me
08:59  * sorensen am moron
08:59 < xk_id> v0.8.17 btw
08:59 < rump> xk_id: not really
08:59 < bradleymeck> sorensen: autobackup if your editor supports it
08:59 < sorensen> using sublime text 2
09:00 < zeen> hey. i'm trying to understand node js frameworks. is there a framework out there where i can code the client AND the server and then optionally pull out the client and put it on a different server than the client? then the client will talk to the server via json?
09:00 < xk_id> well I'm randomly getting "Connection reset by peer" from ab. 
09:00 < zeen> currently we have a RoR and BackboneJS stack
09:00 < zeen> i'm looking at NodeJS to replace BOTH RoR and BackboneJS
09:00 < sorensen> was only a few hundred in
09:00 < sorensen> so not too bad
09:00 < rump> zeen: you'll probably still need a client side js framework such as backbone
09:01 < rump> the code reuse both server and client is highly overstated imo... check out visionmedia's github for 'components'
09:01 < sorensen> need is a strong word
09:01 < rump> but you can stay in the same language and not have to context switch skillllz
09:01 < bradleymeck> once browserify shims out a couple more modules...
09:01 < rump> xk_id: yeah thats weird for so few of connections
09:01 < rump> or did you ramp up requests?
09:02 < rump> 100s to 1000s of requests for a mac thats normal until you reset some kernel sysctl values
09:02 < bradleymeck> rump: depends on how you make stuff, if you don't decouple… yea… its just input validation sharing at that point
09:02 < sorensen> i really think the reuse of client/server code is more trouble than its worth
09:02 < rump> bradleymeck: yeah i only share input validation
09:02 < rump> but i mean, what else is there
09:02 < bradleymeck> mvc does not like the code reuse, i just have to drop to old school interfaces and black boxes
09:03 < bradleymeck> rump, i use dep injection in my controllers so w/e producer/consumer of them can be abstracted and they can be shared
09:03 < zeen> ohh damn
09:03 < bradleymeck> but you still have to write a produce and consumer for both browser and server
09:03 < zeen> i misunderstood, lol
09:03 < bradleymeck> which sucks
09:04 < sorensen> zeen: why replace both?
09:04 < zeen> well, i thought it would have been a cool platform to have client and server on the same thing, then some how being able to pull the client out and throw it into phonegap
09:05 < rump> sure
09:05 < zeen> i can understand it might be more trouble than it's worth.. but my brain was ticking away this morning with this "magic"
09:05 < rump> but if you want a good client you're still gonna havta use a front end framework
09:05 < zeen> so i got my dev to jump on nodejs this morning
09:05 < rump> and get json from your server
09:05 < zeen> and now (afternoon) we just realised it's not like i thought
09:05 < rump> xk_id: i have no idea
09:05 < zeen> ya
09:05 < rump> xk_id: illogical
09:05 < zeen> so if anything we'd be replacing rubyonrails with nodejs for the server side
09:05 < zeen> then keeping with backbone js for the front end
09:06 < cretine> php is best
09:06 < rump> zeen: yep
09:06 < zeen> php is best..
09:06 < zeen> that's a joke right? :P
09:06 < skope> hope so
09:06 < cretine> ye :)
09:06 < zeen> phew hehe
09:06 < cretine> im not stupid
09:06 < rump> yeah he's kidding... really we all think asp is the best
09:06 < skope> that is true
09:06 < lewellyn> especially asp.net
09:06 < zeen> thank god because i need to upgrade to windows 8
09:06 < skope> and i love visual basic
09:06 < rump> original gangsta asp
09:06 < cretine> D:
09:06 < rump> powered by an Access database
09:07 < skope> no better
09:07 < lewellyn> gotta admit that i really miss cold fusion though!
09:07 < skope> i actually had to debug some VB when i was at civilian service
09:07 < rump> dude i loved coldfusion
09:07 < rump> before it became java
09:07 < skope> i wanted to jump out of the window
09:07 < cretine> i havn't touched cf
09:07 < lewellyn> cold fusion was like the best parts of asp and php, before either was mature enough to really use!
09:07 < cretine> hope i havn't missed anything
09:07 < rump> xk_id: i really hope the author of request can sort that out
09:07 < rump> xk_id: im gonna need it like, tomorrow
09:08 < bradleymeck> w/e get some google spreadsheets powered websites and we will talk, AppScript update handlers ftw
09:08 < sorensen> zeen: the client side organization wont go away no matter what backend you pick
09:08 < SomeoneWeird> CF was pretty cool
09:08 < xk_id> rump: what for?
09:08 < sorensen> backbone would be good for php/python/node/ruby
09:08 < lewellyn> it was cool, but using it was mindbleedy
09:08 < lewellyn> i can't imagine going back to the CF of 15 years ago today
09:08 < zeen> backbone is alright, but the frameworks out for backbone are still a bit shit
09:08 < zeen> and then you end up rolling your own framework
09:09 < rump> xk_id: some crummy little thing i thought up last night for a buddy http://honeycrisp.seandunaway.com:8888
09:09 < zeen> which i've done.. but i'm just worried it's not good enough for a foundation for software
09:09 < rump> always bitching about having to login to 2 sites, and go 5 pages deep for a crummy text based calendar and he wanted it on his iphone
09:09 < sorensen> frameworks for backbone?
09:09 < sorensen> you lost me
09:09 < zeen> backbone js is a library
09:09 < zeen> it's not a framework
09:10 < sorensen> its a clientside framework
09:10 < mansoor-s> its a framework
09:10 < cretine> exit
09:10 < zeen> how does your router look after a months worth of dev?
09:10 < sorensen> how you choose to hook it up to your backend is a different story
09:10 < sorensen> pretty good
09:10 < sorensen> lol
09:10 < xk_id> rump: do you store the calendars on your servers?
09:10 < sorensen> but i've been doing backbone for a while
09:11 < zeen> full backbone js app?
09:11 < sorensen> https://www.genoglyphix.com/browser/18/1/212100000/234600000/
09:11 < sorensen> full backbone
09:11 < rump> xk_id: nah, webcal://honeycrisp.seandunaway.com:8888/webcal?u=b2279276980aaf7a615b273e98355501&p=b2279276980aaf7a615b273e98355501
09:11 < sorensen> mad science :P
09:11 < zeen> did you use AMD and RequestJS?
09:11 < sorensen> hell no
09:11 < rump> xk_id: login/pass get AESd and then we just proxy a request everytime the iphone calendar software or similar wants updates
09:11 < rump> proxy and parse
09:11 < zeen> i have no idea what i'm looking at but it looks nice
09:11 < sorensen> genomic data
09:11 < zeen> why hell no to request js?
09:11 < sorensen> of the human genome
09:11 < SomeoneWeird> I DUN TRUST U 
09:11 < sorensen> needless complexity imo
09:12 < bradleymeck> amd makes me sad, browserify less so, but still kinda sad
09:12 < zeen> depends on the app i guess
09:12 < sorensen> it does
09:12 < SomeoneWeird> AMD sucks
09:12 < sorensen> i dont want to lazy load my resources
09:12 < sorensen> i want to minify them into a single script and be done with it
09:12 < xk_id> rump: but the calendar content, is on your servers, right?
09:12 < lewellyn> rump: you have a typo: "osasis" :)
09:12 < xk_id> like, the events
09:12 < bradleymeck> bundle it or say no to speed
09:12 < rump> lewellyn: ty! :)
09:12 < zeen> amd does suck, i've moved away from "AMD" and done a convention like RoR using RequestJS
09:12 < rump> xk_id: no, publix's backend
09:12 < zeen> the app we're doing has a lot of "controllers"
09:13 < zeen> which i can't load in at one go
09:13 < zeen> and don't want to
09:13 < othiym23> bradleymeck: do you have any idea what changed between 0.6.11 and 0.6.12 wrt child_process?
09:13 < lewellyn> rump: i'm being good and not commenting on font choices :)
09:13 < bradleymeck> thats ancient mmm
09:13 < rump> lewellyn: heh its a first draft and only a few hours old :P
09:13 < SomeoneWeird> commonjs pwns
09:13 < othiym23> I have test cases in node-tap that will finish fine in 0.6.12 but hang the process indefinitely in 0.6.11
09:13 < xk_id> rump: ooh. I wasn't aware of the publix brand. cool
09:13 < lewellyn> rump: fontsquirrel is your friend ;)
09:13 < rump> lewellyn: what do you have against comic sans ms!
09:14 < sorensen> meh
09:14 < lewellyn> it doesn't look good rotated via css :)
09:14 < sorensen> i might just be stubborn
09:14 < rump> the whole site is gross
09:14 < othiym23> bradleymeck: yeah, I know, but I claim to support 0.6.x in my thinger (newrelic) and so I'm trying to figure out what is up
09:14 < rump> makes my eyes hurt
09:14 < bradleymeck> othiym23: process.stdin leaking?
09:14 < rump> ill put something proper once its working
09:14 < othiym23> it's possible
09:15 < othiym23> I didn't know how hard I was leaning on process._getActiveHandles() until I didn't have it anymore
09:15 < othiym23> 0.6 is a weird and scary place to me now, even though I did a ton of development against it, lo, only a year ago
09:15 < xk_id> rump: btw, someone just told me there are case sensitive implementations server-side in respect to http headers
09:15 < xk_id> he said he saw such implementations
09:16 < xk_id> although the RFC states headers shouldn't be treated as case sensitive
09:16 < dolfly> what?
09:16 < lewellyn> shouldn't, or mustn't? ;)
09:16 < rump> xk_id: what do you mean... that Host is important vs host?
09:16  * xk_id nods
09:16 < rump> maybe add that to that issue :)
09:17 < othiym23> this is a job for DTrace, but I don't feel like booting up my SmartOS vm right now
09:17 < othiym23> guess I'll pick this up in the morning
09:17 < sorensen> what a smart oss..
09:17  * sorensen ba dum chh
09:17 < bradleymeck> othiym23: check with fs.fstatSync(0), i remember early 0.6 hating stdin
09:17 < dolfly> DTrace 
09:18 < dolfly> fs.fstatSync
09:20 < lewellyn> xk_id: since you didn't answer, RFC 2616 says they are not case-sensitive.
09:21 < lewellyn> it's in the bnf descriptive text. section 2 i think
09:21  * lewellyn can quote too much of that rfc
09:21 < xk_id> lewellyn: yes, but someone actually noted that he saw that, despite the RFC
09:22 < lewellyn> xk_id: yes. servers and clients can use HOST if they want. it's to be treated the same as host or Host
09:22 < xk_id> lewellyn: still, the browsers I'm emulating send 'Host', not 'host'. 
09:22 < xk_id> I'm trying to avoid being identified as an attacker
09:22 < lewellyn> that's the de-facto standard.
09:22 < xk_id> for the most part
09:23 < lewellyn> if something isn't recognizing Host, it's not going to work with practically any user agent out there
09:23 < lewellyn> but i'd be tempted to ban people using HoSt or hOsT out of principle ;)
09:23 < othiym23> bradleymeck: fs.fstatSync(0).nlink -> 1, which is what I'd expect
09:24 < othiym23> is there anything else on the stat structure I should be looking at?
09:25 < bradleymeck> not that i can think off top of my head
09:25 < bradleymeck> let me check issue log
09:26 < othiym23> it's irritating, because the only tests that are failing are related to child_process, but I lack the tools I need to introspect into the runtime to figure out what's going on, and I don't know if that's, like, important
09:26 < bradleymeck> https://github.com/joyent/node/issues/861 https://github.com/joyent/node/issues/2891 ?
09:26 < rump> i doubt any of the proper browsers send 'host' (lowercased)
09:26 < othiym23> I could just process.exit(0) from the shutdown callback, but the whole reason I use node-tap instead of mocha for those tests is because tap doesn't play fast and loose with processes
09:26 < rump> might as well have a Wget user agent
09:27 < bradleymeck> rump: curl does at times
09:28 < rump> great so more potential for 'host' to be banned
09:28 < othiym23> ooo dtruss hadn't thought of that
09:29 < bradleymeck> rump: meh, i wouldn't ban people doing that, if its available as "Host" any sane person writing scripts would use "Host"
09:29 < rump> bradleymeck: except for any nodeists apparently!
09:29 < rump> the request module forces lowercase
09:29 < othiym23> DTrace on osx, y u such a broken piece of shit
09:30 < othiym23> of *course* dtruss will just bail the fuck out when I try to run node under it
09:30 < othiym23> why wouldn't it?
09:30  * othiym23 grumbles
09:30 < rump> all you node haxors are now banned from my sitez
09:30 < bradleymeck> cause its freebsd + mach / AIX % solaris
09:30 < bradleymeck> except for my love of curl
09:31 < lewellyn> rump: some mobile browsers have been seen unicasing their request headers
09:31 < zeen> why does it seem everyone is using nodejs at the moment instead of python or ruby?
09:31 < bradleymeck> windows
09:31 < lewellyn> i can't think of any logical reason they would. maybe better in-memory compression of the app or some random platform-specific thing.
09:31 < rump> zeen: cause its the new hot shit
09:32 < rump> until the next thing in a year or two
09:32 < rump> http://new.myspace.com/  new nodejs hotness
09:32 < zeen> but any example or any site using it could be coded in any other language
09:32 < lewellyn> zeen: oh wow. this is a nodejs channel? i thought it was #lisp! doh! ;)
09:32 < rump> yeah but,
09:32 < zeen> hehe, just trying to figure it out before we jump on it here
09:32 < rump> i rewrote an app from sinatra to nodejs and shaved about 300ms off the response time
09:33 < zeen> it does seem the "cool" thing to do at the moment
09:33 < lewellyn> zeen: a proper toolbox has many tools. those who rely exclusively on one tool deserve what they get, imo.
09:33 < zeen> i'm just trying to figure out if it's worth it
09:33 < rump> its the best thing we have for a scriptable language right now which just happens to be all async and have a great package manager and be really easy to get started with oh and in the universal language
09:33 < rump> so wh ynot
09:33 < zeen> well we do RoR and CakePHP here already
09:33 < rump> zeen: they are slow as shit
09:33 < lewellyn> and rails has been problematic lately
09:33 < rump> RoR and CakePHP are like 600-800+ms response times for noncached sites
09:33 < rump> show me a noncached RoR page under 500ms!  show me!
09:34 < zeen> you can compile it with --turbo
09:34 < AAA_awright> zeen: Not that Node.js is a replacement for ruby (maybe for python though), but it's that it has comparative advantage for lots of tasks which aren't ideal shoe-horned into ruby
09:34 < AAA_awright> or PHP for that matter
09:34 < lewellyn> zeen: only on gentoo though, right? ;)
09:34 < bradleymeck> once execSync lands, pshaw
09:34 < zeen> centos and ubuntu seem ok compiled with turbo
09:34 < rump> zeen: show me one :)
09:34 < rump> in the wild
09:34 < lewellyn> zeen: it was a joke regarding the stereotypical gentooer...
09:34 < rump> i havent been able to find one
09:34 < zeen> ah :)
09:34 < AAA_awright> -O9 -funroll-loops
09:35 < AAA_awright> Only way to go!
09:35 < AAA_awright> >_>
09:36 < AAA_awright> Actually, I use CFLAGS="-O2 -march=native -pipe"
09:38 < rump> i dunno how i feel about modifying the html markup with data-bind attributes for some of the front end js frameworks, angular/knockout/etc
09:38 < rump> seems that would get hectic
09:39 < rump> cant content be content, what if you ever have to hand it off to copywriter or something
09:40 < AAA_awright> I'm inclined to agree
09:40 < AAA_awright> Not to say there's no use for custom attributes
09:41 < rump> microdata
09:42 < xk_id> Guys, do you reckon it would be reasonable to expect from my EC2 cluster to do the following.. Basically I will have one server and up to 5 workers. workers will inquire the server for links from a redis DB; will ask server for the time of the last crawl and will update server when they start the crawl (server will store value in memory); will ask server for two variables (stored in memory); will send scraped 
09:42 < xk_id> data to the server, and server will write it to 2 txt files; will send an html file to server, and server will store it to disc.
09:42 < xk_id> Will this bottleneck?
09:43 < rump> depends req/s i guess
09:43 < rump> if it bottlenecks it will be on the file write
09:44 < xk_id> It's append, and I keep the stream open
09:44 < rump> you gonna use redis as pub/sub?
09:44 < xk_id> I will use redis for the job queue
09:45 < rump> how are they sending back the data
09:45 < xk_id> dnode
09:45 < xk_id> they call functions remotely
09:45 < rump> hmm that could be slow
09:46 < rump> why not workers push to redis and queen bee takes and dumps it occasionally
09:46 < rump> if you wanted to keep yer stack thin
09:46 < xk_id> It's just writing to a .txt...
09:46 < xk_id> I think someone said it should be fine to write directly to disc
09:47 < rump> i mean as a method of your worker bees communicating the data to queen
09:47 < xk_id> But, I could create multiple databases, and dump them periodically
09:47 < rump> we know redis is fast, im not sure about dnode
09:47 < rump> you'd have to bench it
09:47 < xk_id> Ic
09:47 < xk_id> balls..
09:47 < rump> im guessing its a lot slower
09:49 < xk_id> k.. time for a few hours of sleep, I think
10:10 < MiracleBlue_> Derp
10:10 < MiracleBlue_> Anyone alive?
10:11 < SomeoneWeird> nope
10:11 < MiracleBlue_> :(
10:11 < MiracleBlue_> All dead
10:12 < greg5green> zombie here.
10:12 < MiracleBlue_> :D
10:12 < MiracleBlue_> I'm trying to distract myself with code
10:13 < standoo> distract with code?
10:13 < MiracleBlue_> Woah, net split
10:13 < lewellyn> small one
10:14 < mansoor-s> who makes node.js based websites here?
10:14 < lewellyn> not i. :)
10:14 < standoo> me...
10:14 < MiracleBlue_> I'm starting to :)
10:14 < standoo> sorta
10:14 < mansoor-s> who wants to give me feedback/ideas? :D
10:14 < standoo> me...
10:15 < jesusabdullah> i mean
10:15 < jesusabdullah> do you have anything specific?
10:15 < jesusabdullah> or are you asking for broad general advice w/ node?
10:16 -!- ServerMode/#Node.js [+o Nexxy] by wolfe.freenode.net
10:16 < jesusabdullah> holy moley
10:16 < jesusabdullah> netsplit I guess
10:16 < MiracleBlue_> Boom
10:16 < rump> regarding the front end vs backend framework/templating conversation earlier: http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html
10:17 < rump> tl;dr, client side rendering sucks and is slow
10:18 < jesusabdullah> both suck, it's just a matter of where you want the suckitude
10:18 < jesusabdullah> and which suckitude you prefer
10:18 < jesusabdullah> me, I'm lazy so I use something like ejs, swig, etc
10:18 < MiracleBlue_> I personally would go for client side over server side template rendering.
10:18 < MiracleBlue_> That's just me.
10:18 < jesusabdullah> personally not huge on jayde but that's up to you
10:19 < jesusabdullah> I'll do that for clients that, like, just hit up a json api
10:19 < jesusabdullah> y'know?
10:19 < jesusabdullah> at that point though I'm usually already jquery'd up
10:19 < jesusabdullah> so, like, why not? XD
10:34 < RobertFromRDP> This always is inactive...
10:35 < MiracleBlue_> Or so you think >.>
10:35 < MiracleBlue_> <.<
10:35 < mansoor-s> o_O
10:35  * MiracleBlue_ cues spooky music
10:35 < RobertFromRDP> >_>
10:36 < MiracleBlue_> I'm always active.  I never sleep.
10:37 < bradleymeck> rump: first load being done in html then everything else in json makes sense, its a compromise
10:37 < rump> bradleymeck: and complexity
10:37 < RobertFromRDP> I'm in a desktop inside a desktop
10:37 < rump> RobertFromRDP: we must go deeper
10:38 < rump> inception
10:38 < bradleymeck> rump: generally yes. but most sites do not need the couple ms you shave off
10:38 < othiym23> bradleymeck: you were right: https://github.com/joyent/node/commit/27d8b059fa214c56de6dc359ebdb8c05ad6b9f99
10:38 < RobertFromRDP> I'm in Windows Server 2008 RC2 inside Windows Vista...
10:39 < othiym23> add a process.stdin.pause() to my cleanup code, and things start working in node 0.6.11 and earlier
10:39 < othiym23> that's dicks
10:39 < othiym23> but I guess that's why there's patch releases
10:40 < MiracleBlue_> Winception
10:40 < RobertFromRDP> ^
10:40 < MiracleBlue_> I really gotta get me a new desk chair
10:40 < RobertFromRDP> BTW the remote desktop client is made with HTML5
10:41 < MiracleBlue_> One that reclines properly
10:42 < RobertFromRDP> The remote desktop server's is ALOT (50x) faster than the client
10:42 < RobertFromRDP> :<
10:42 < MiracleBlue_> haha
10:43 < MiracleBlue_> Can't say I'm surprised
10:43 < RobertFromRDP> internet connection-wise
10:43 < RobertFromRDP> The server is a DEMO
10:43 < RobertFromRDP> I'll come on with the client
10:45 < Robert00001> Hello, I am the client
10:49 < rump> bradleymeck: best write up ive seen so far http://openmymind.net/2012/5/30/Client-Side-vs-Server-Side-Rendering/
10:50 < bradleymeck> rump: sure for simple sites, for complex one page apps, i disagree
10:50 < rump> you read fast
10:50 < bradleymeck> a book a week will do that
10:51 < bradleymeck> the caching of html is a bit misleading I think for fragments but mostly true
10:52 < rump> ESIs
10:52 < rump> i cache html of blocks on a couple sites
10:53 < MiracleBlue_> It's not so much that doing client-side rendering is *faster*, per-se, but rather there's a concern of server performance when doing it on the server especially for large complex web apps.
10:53 < bradleymeck> yea, but if I use the stuff as interactive data, cached HTML will make it terrible
10:53 < bradleymeck> if its purely viewing sure
10:54 < rump> server performance is easy
10:54 < rump> buy more machines
10:54 < rump> or hell nowadays spin up a few more instances
10:54 < MiracleBlue_> Lol
10:54 < bradleymeck> for example D3 + HTML rendering = NO
10:54 < rump> i cant spin up more iphones
10:55 < threedot> hi
10:56 < MiracleBlue_> HI!  :D
10:56 < Robert00001> HI
10:56 < threedot> i have a question
10:56 < threedot> where can i find available charsets to use on Buffer?
10:57 < bradleymeck> hex, base64, utf8, do not use other things
10:57 < bradleymeck> use iconv from npm if you need other ones
10:57 < threedot> how can i handle iso-8859-9?
10:57 < threedot> buffer malforming this charset i can't change with iconv
10:58 < bradleymeck> buffer is not, however it is being loaded is causing some string conversion which might
10:58 < threedot> buffer malforming like this: http://stackoverflow.com/questions/6543548/whats-going-on-with-this-byte-array?answertab=votes#tab-top
10:59 < threedot> The original byte array is not encoded as UTF-8. The StreamReader therefore replaces each invalid byte with the replacement character U+FFFD. When that character gets encoded back to UTF-8, this results in the byte sequence EF BF BD. You cannot construct the original byte value from the string because the information is completely lost.
10:59 < threedot> there is a lot of EF BF BD bytes on stream
10:59 < Robert00001> Aww the me on the server disconnected
10:59 < bradleymeck> something is causing the stream to .toString, find whats doing that and stop it
11:10 < Secutor> i need some help compiling node from git
11:11 < Secutor> i cloned the git repo from joyent and checked out v0.8.18 because i need the stable version
11:11 < Secutor> during make i get the error:
11:11 < Secutor>  /git/node/out/Release/mksnapshot: Permission denied
11:12 < Secutor> even when running as root
11:12 < Secutor> i am installing on ubuntu 12.04
11:12 < Secutor> any ideas?
11:13 < bradleymeck> Secutor: chmod +x ?
11:14 < Secutor> it is executable
11:14 < threedot> did you try to clone another place on the disk and compile?
11:14 < Secutor> -rwxr-xr-x 1 me me 5998201 Feb  1 12:04 mksnapshot
11:14 < geNAZt> hi
11:14 < Secutor> well /git is in my homedir
11:15 < Secutor> but no i didn't
11:15 < geNAZt> what are the rights inside the mksnapshot ?
11:15 < threedot> maybe disk sector is corrupted
11:15 < Secutor> drwxrwxr-x
11:16 < geNAZt> what error do you get ?
11:18 < Secutor> http://paste.ubuntu.com/1596304/
11:19 < geNAZt> are you the user which belongs to the mksnapshot file ?
11:19 < Secutor> yes, i alsu tried running it as root
11:19 < Secutor> still i get the permission denied error
11:19 < Secutor> *also
11:19 < geNAZt> the error 126 implicts that u MUST use root for the compilation
11:20 < geNAZt> since it needs to write data in root only folders
11:20 < Kakera> bnoordhuis, https://github.com/joyent/node/issues/4698
11:20 < threedot> Secutor: did you try that: sudo make clean;git pull;make;
11:20 < geNAZt> http://ubuntuforums.org/showthread.php?t=1947860
11:21 < Secutor> i did, as root,  a make clean; git reset --hard; make
11:21 < geNAZt> same error ?
11:21 < Secutor> yes
11:24 < threedot> what is difference 'utf8' and 'ascii' charset for Buffer?
11:24 < Secutor> also i neede to run ./configure using #python configure
11:24 < Shinister> ascii is smaller, but doesn't support non-english characters
11:24 < Secutor> i goet a permission denied when running ./configure
11:25 < threedot> i know but i question for Buffer of node.js
11:25 < geNAZt> ah okay
11:25 < Shinister> I'd just use utf8
11:25 < geNAZt> Error 126 is the error that a shell gives you if it cant spin up a process
11:26 < threedot> i wrote iso-8859-9 to ascii buffer. it's malforming special chars with 'EF BF BD' like utf8
11:27 < Secutor> i'm guessing that would be the mksnapshot process
11:27 < geNAZt> maybe increase you file_open limit
11:27 < geNAZt> and try again
11:27 < Secutor> how can i do that?
11:27 < geNAZt> ulimit: http://ss64.com/bash/ulimit.html
11:28 < geNAZt> first ulimit -n to see the current value
11:28 < geNAZt> and then set it that + 500 or so
11:28 < geNAZt> and try again
11:28 < Secutor> it's now set to 1024 according to ulimit -a
11:29 < Secutor> open files                      (-n) 1024
11:29 < geNAZt> and u ?
11:29 < geNAZt> maximal number of processes for a single user
11:29 < Secutor> http://paste.ubuntu.com/1596335/
11:30 < geNAZt> you are running as root right ?
11:30 < Secutor> yes
11:30 < geNAZt> ps hax -o user | sort | uniq -c
11:31 < geNAZt> it counts the current processes for each user
11:31 < Secutor> thats < 300
11:32 < geNAZt> but not more than ulimit -u ?
11:32 < Secutor> ulimit -u is set to 30969
11:33 < geNAZt> and: lsof | wc -l
11:33 < Secutor> i am currently running a new make in a new git clone, not finished yet
11:33 < geNAZt> i counts the current files open
11:33 < geNAZt> it should be under ulimit -n
11:34 < Secutor> it's abt 12k
11:36 < pioconiglio> ciao
11:36 < pioconiglio> !list
11:36 < geNAZt> well thats heavy
11:37 < geNAZt> try ulimit -n 14096
11:37 < geNAZt> and run again
11:37 < Secutor> hmm, weird. the compile in the new folder is successfull
11:37 < geNAZt> well if there is space in the current files open it should run
11:37 < Secutor> thats annoying, no idea where it went wrong.
11:38 < Secutor> ok, node is running now, thank you for your help though
11:38 < geNAZt> no problem :D
12:19 < mboro> hi! I'm using i18next for translation. I want to set certain translated strings in `app.locals` but I can't do that before i18n has fired its callback. is is ok/best practice to set `app.locals` and bind `app.listen` in the i18n callback?
12:20 < mboro> (using express v3 too)
12:32 < draginx> is there a way to throttle secific users to X req/s in an express app?
12:33 < MiracleBlue_> Hey AAA_awright 
12:33 < AAA_awright_> Hey MiracleBlue_
12:33 < MiracleBlue_> Sup?
12:33 < AAA_awright_> Trying out my new improved IRC client, so far
12:33 < MiracleBlue_> Oh nice
12:34 < AAA_awright_> We have /topic and sorted nicknames now
12:34 < AAA_awright_> :)
12:34 < MiracleBlue_> Sweet :)
12:34 < MiracleBlue_> Is it something you've built?
12:34 < AAA_awright_> Eh yeah, I was talking about it a few days ago
12:35 < MiracleBlue_> :D oh excellent
12:35 < MiracleBlue_> Can I make a feature request?
12:35 < AAA_awright_> cloudbender may also remember
12:35 < AAA_awright_> MiracleBlue_: What?
12:36 < Ivru> Hi
12:36 < MiracleBlue_> Sorry one moment, just moving to the study :)
12:36 < Ivru> Is these the right place for jade help ?
12:37 < Ivru> this*
12:37 < draginx> Ivru: u can try here
12:37 < draginx> AAA_awright_: in node?
12:37 < draginx> (your irc client)
12:37 < AAA_awright_> draginx: Yeah
12:37 < draginx> AAA_awright_: nice, open sourced / can I see? :D
12:38 < AAA_awright_> The cool stuff is all client-side probably, anyways
12:38 < AAA_awright_> http://chat.bzfx.net/beta/
12:39 < Ivru> ok. I've a JS inside my template : http://pastie.org/private/wunndnrmbyzyphr0lp7pq The problem is at lines 4 and 7, when jade see <option he insert a new line in the generated html and so, my selector does not work anymore. Any idea ?
12:39 < mansoor-s> draginx, not sure about that, but I personally would put nginx infront of node and throtte that way
12:39 < draginx> mansoor-s: can i throttle by specific header key?
12:39 < mansoor-s> hmmm i'm not sure abotu that
12:40 < AAA_awright_> Ivru: You probably want to begin your lines with | to say "this is plain text"
12:40 < mansoor-s> Draggor, http://wiki.nginx.org/NginxHttpLimitReqModule
12:40 < mansoor-s> that comes with the default complete installation of nginx
12:40 < AAA_awright_> Ivru: Also make sure you're encoding your angle brackets in HTML, you can't have literal < characters inside HTML :p
12:40 < AAA_awright_> I think the | should do that though
12:41 < mansoor-s> there might be other modules otu there with more feturs
12:41 < Ivru> AAA_awright, kind of verbatim mode ?
12:41 < AAA_awright_> Yeah
12:41 < draginx> mansoor-s: yeah im not trying to put a production server by installing a new module O_o
12:41 < Ivru> oh, thanks, I didn't understand the doc
12:41 < Kakera> node.js has exactly 20000 stars now D:
12:41 < AAA_awright_> Not your fault, Jade has just gone through a lot of changes like that
12:42 < MiracleBlue_> Okay back
12:43 < MiracleBlue_> AAA_awright_: A feature I loved about the old mIRC was how it would pick random colours for different nicknames in the chat
12:43 < AAA_awright_> I already do that
12:43 < MiracleBlue_> Ooooh
12:43 < MiracleBlue_> Perfect
12:43 < AAA_awright_> Check out the link I posted
12:43 < MiracleBlue_> Will do :D
12:44 < AAA_awright_> Sometime soon, it's only up while I'm working on it (for now)
12:44 < AAA_awright_> Like, you're orange or so
12:44 < MiracleBlue_> Checking it out now
12:44 < Ivru> there must be something wrong.. If I prefix each line by a |, it output the |
12:46 < AAA_awright_> Ivru: You may need proper indenting or something, but most easily, just use &gt; and &lt;
12:47 < MiracleDerp> testing
12:47 < MiracleDerp> :D
12:47 < MiracleDerp> This is cool!
12:47 < AAA_awright_> Like "Wow, someone FINALLY built the quintessential Node.js app"
12:48 < Ivru> AAA_awright, yeah indent problem fixed. but Still have the same pb.
12:49 < AAA_awright_> Ivru: Then idk, I'd have to dig through the source (Which isn't really that hard to do)
12:50 < Ivru> http://pastie.org/private/baw95u2qzgftonaizb8q
12:51 < AAA_awright> Ivru: Well I mean the Jade source
12:51 < onr> AAA_awright_: your nickname is too noticeable, i even remember a 4 line conversation we had in 2008
12:51 < Ivru> yeah, yeah AAA_awright  :) Thanks
12:51 < AAA_awright> But idk, maybe try putting a space after the pipe? idk
12:51 < Ivru> I was just copy/pasting 
12:52 < AAA_awright> Ivru: I'm suprised you can remember a date at all hah
12:52 < kschzt> anyone running their own npm repository mirror? are you keeping it up to date with the upstream repository/registry?
12:56 < Ivru> AAA_awright, ok, puting the script inside a <!-- //--> solved the problem
12:56 < AAA_awright> Inside a comment?
12:56 < AAA_awright> Well no wonder that solves the problem :p
12:56 < Ivru> yep :)
12:56 < MiracleBlue_> AAA_awright: Is this on github yet?
12:56 < MiracleBlue_> :D
12:57 < AAA_awright> Not quite
12:57 < AAA_awright> I
12:57 < AAA_awright> I'm unsure of where to take it, give it another month
12:57 < AAA_awright> The idea is to make this a service. And some of the backend will be released, e.g. http://magnode.org/
13:18 < MiracleBlue_> AAA_awright: ah I see :)
13:18 < MiracleBlue_> Looks really good so far anyway man
13:18 < AAA_awright> Thanks :)
13:19 < MiracleBlue_> Would love to see the code whenever its made available :)
13:21 < AAA_awright> MiracleBlue_: Well, there's something resembling a mailing list on http://chat.bzfx.net/, and on http://magnode.org/, and my GitHub is https://github.com/Acubed
13:22 < MiracleBlue_> Awesome!  Now following your github :D
13:23 < cloudbender> good morning
13:23 < MiracleBlue_> Morning!
13:23 < MiracleBlue_> It's only just barely morning here.
13:29 < mscdex> anyone here work with domains much?
13:30 < mansoor-s> mscdex, which domains
13:30 < mansoor-s> for error handling?
13:31 < mscdex> yes
13:31 < jtomasrl> whats the best way to return errors from when using a class instance methods that connect to a db
13:33 < mansoor-s> mscdex, wahts yoru question? surely someone here will know the answer
13:33 < mscdex> just need a way to get a backtrace anywhere in the script
13:33 < mscdex> i don't have the slightest idea where it's coming from
13:33 < geNAZt> console.trace() ?
13:33 < kschzt> mscdex, I used them a little while ago (0.8.3)
13:34 < mscdex> it doesn't happen all the time
13:34 < mscdex> and when it does happen, it's in some place that's async
13:34 < AAA_awright> Add error handlers to ALL the EventEmitters!
13:34 < mscdex> that won't do it
13:34 < mscdex> this is a javascript error
13:35 < AAA_awright> What's the error message?
13:35 < mscdex> e.g. "Cannot read property '0' of undefined"
13:35 < AAA_awright> Well then on what line is that?
13:35 < kschzt> mscdex, var d = domain.create(); d.run(fn); d.dispose()
13:36 < yuho> hi jak :)
13:36 < AAA_awright> I don't think domains handle anything except EventEmitter errors
13:36 < kschzt> mscdex, d.on('error')
13:36 < AAA_awright> But what do I know, I haven't used them (for that reason)
13:36 < kschzt> hey yuho! 5000+ ;)
13:37 < AAA_awright> mscdex: If it's an ES error then it should show the line that it's on, yes?
13:37 < mansoor-s> kschzt, when are you suppose to dispose a domain?
13:37 < AAA_awright> I mean it's not like you can't find the code in question?
13:37 < AAA_awright> Unlike some Node.js errors ("Uncaught Exception", fantastic, where was it thrown?)
13:39 < mscdex> AAA_awright: it's being caught in uncaughtException handler right now
13:39 < kschzt> mansoor-s, http://nodejs.org/api/domain.html#domain_domain_dispose, basically lets you trash the domain
13:39 < mscdex> so there is nothing
13:39 < AAA_awright> mscdex: The process-wide one? Or what?
13:39 < kschzt> mscdex, you should be able to catch it with domain, but we had lots of problems using domains in 'real' code :)
13:40 < mscdex> kschzt: hrmm :\
13:40 < AAA_awright> If it's a process uncaughtError then dump the error yourself, if it crashes the program, it should print error.stack for you
13:40 < kschzt> it wouldn't properly dispose of http's internal requests etc for wathever reason
13:40 < mscdex> AAA_awright: that doesn't help if it came from a callback
13:40 < AAA_awright> It's an ECMAScript error it shouldn't matter
13:40 < kschzt> so it neved closed them and at maxSockets it would just do nothing, waiting for the previous requests to close... it was hell :D
13:41 < AAA_awright> mscdex: What's your exact stack?
13:41 < AAA_awright> The exact error stack trace?
13:42 < kschzt> there needs to be more work integrating domains into the rest of node.js code, was my take on it
13:43 < kschzt> mansoor-s, so in case there's an error, destroy() cleans up anything that's in there. normally it should get disposed of when the event loop is done, iiuc.
13:43 < kschzt> s/destroy/dispose/g
13:45 < MiracleBlue_> One of the tiny screws in my new glasses came out :(
13:45 < MiracleBlue_> Now I can't see anything at a distance until I take them in to be fixed haha
13:48 < AAA_awright> pfft
13:48 < AAA_awright> see mscdex, even in an async call I still get a stack trace
13:48 < AAA_awright> TypeError: Cannot call method 'indexOf' of undefined
13:48 < AAA_awright>     at node_modules/irc/lib/irc.js:233:54
13:49 < rickibalboa> I don't know if this is the best place for this question, or whether it's more ##javascript related, but I have a web socket server, very complex with a lot going on so its a large ish application, obviously it has bugs like every other application. Would I see a major performance decrease from putting a fair bit of the functions inside a try catch?
13:50 < AAA_awright> No
13:50 < rickibalboa> Hmm okay
13:51 < bnoordhuis> rickibalboa: a try/catch block won't help if there's async functions inside though
13:51 < rickibalboa> I had a feeling that would be the case
13:52 < rickibalboa> There is one object which contains a lot of functions that don't do much async stuff in them, they just keep track of long and deeply nested objects and it occasionally crashes with an undefined error or something due to a different circumstance. I may consider putting them functions in try catch statements
13:52 < bnoordhuis> rickibalboa: that should work
13:52 < bnoordhuis> v8 used to have a bug where it would always deopt code in a try/catch block
13:53 < bnoordhuis> but i think it's fixed and anyway, it was easy to work around
13:53 < bnoordhuis> try { do_work(); } catch (e) { ... } <- doesn't deopt
13:54 < rickibalboa> Ah right ok. I just don't want it to have a massive performance overhead, these functions can be called quite a few times every second if things get busy (many 100's of times)
13:55 < Robert00001> javascript on the server end is alot faster than the client-side
13:55 < bnoordhuis> rickibalboa: run with --trace_deopt and you'll find out quick enough if it deopts or not
13:55 < bnoordhuis> though it might deopt because of something else of course
13:55 < rickibalboa> ok thanks
13:57 < rickibalboa> bnoordhuis, what am I looking for in this trace dump? Contains a lot of info :/
13:57 < rickibalboa> I'm seeing a bit of [removed optimized code for .. ]
14:00 < bnoordhuis> rickibalboa: interpreting it with larger apps is something of a challenge
14:00 < bnoordhuis> i usually run it with isolated code
14:00 < bnoordhuis> i.e. only the bits i suspect of deopting / bailing out
14:00 < rickibalboa> Ah okay. I'll do that then
14:00 < kschzt> heh, all the CouchDB mirrors are giving 404's. setting up an npm registry
14:03 < MiracleBlue_> Nexxy: ahoy!
14:04 < Robert00001> Hmm?
14:04 < MiracleBlue_> Hrm?
14:04 < Robert00001> I'm watching a Wario Land 2 TAS
14:05 < MiracleBlue_> Oooo
14:06 < niix> jade you're ok with me for now
14:06 < MiracleBlue_> I'm sitting here pondering what to code
14:17 < mboro> is there a method in node to extract the canonical of an URL?
14:17 < niix> MiracleBlue_: write a coffee delivering robot
14:18 < MiracleBlue_> :D
14:18 < MiracleBlue_> That's a good idea
14:18 < Shinister> redis: should I use it, or just go with mongo?
14:19 < MiracleBlue_> I guess that kinda depends
14:20 < Shinister> It's going to be some simple CRUD
14:20 < Shinister> I guess sorta similar to a blog
14:22 < MiracleBlue_> I think you'd probably go mongo then :)
14:22 < Shinister> Yeah I was leaning that way
14:25 < MiracleBlue_> Shinister: http://stackoverflow.com/questions/5400163/when-to-redis-when-to-mongodb
14:26 < Shinister> tbh I need experience with mongo
14:29 < MiracleBlue_> Shinister: Same
14:29 < MiracleBlue_> I'm still brand new to node
14:30 < Robert00001> I'm been using it for a few months now
14:30 < MiracleBlue_> Nice
14:30 < MiracleBlue_> I'd been meaning to actually make something with it for ages and ages and ages
14:30 < Shinister> I've tinkered for a while, done a few small projects - none really finished
14:31 < Shinister> I've a simple idea for a little site I'm going to write this weekend
14:31 < MiracleBlue_> finally actually did something these last few days, a little tool for work
14:31 < Shinister> got a good domain for it
14:31 < MiracleBlue_> Nice
14:31 < MiracleBlue_> What kinda site?
14:32 < Shinister> it's iknowyouareyousaidyouarebutwhatami.com
14:32 < Shinister> and it'll insult you, and you have to insult it back :P
14:32 < MiracleBlue_> Hahaha
14:32 < MiracleBlue_> Genius
14:32 < Shinister> and it'll record peoples insults, and after I've moderated them it'll re-use other peoples insults
14:32 < crabtree> good idea Shinister
14:32 < Shinister> yeah it's kinda cute
14:32 < crabtree> which framework are you gonna use
14:32 < Shinister> node express mongo
14:32 < crabtree> good, good
14:32 < Shinister> jade
14:33 < Shinister> bootstrap
14:33 < crabtree> nO!
14:33 < crabtree> no!o!!
14:33 < Shinister> hm?
14:33 < crabtree> not bootstrap! please!
14:33 < Shinister> why not?
14:33 < MiracleBlue_> ??
14:33 < crabtree> so generic looking :(
14:33 < MiracleBlue_> What's wrong with bootstrap?
14:33 < crabtree> too many sites use it
14:33 < Shinister> I want minimalistic and clean
14:33 < Robert00001> Now this chat is ACTIVE
14:33 < Shinister> bootstrap is great for that
14:33 < crabtree> make your own!
14:33 < MiracleBlue_> Still better than default browser styles :P
14:34 < Shinister> crabtree: I find I often bite off more than I can chew
14:34 < crabtree> reset css and be creative!
14:34 < Shinister> which means I get lazy and none of my projects go live
14:34 < MiracleBlue_> ^ same
14:34 < crabtree> we all do Shinister
14:34 < crabtree> :P
14:34 < Shinister> this is small 
14:34 < Shinister> so keeping it simple as poss to get it out
14:34 < MiracleBlue_> Bootstrap is great for really small projects
14:35 < Shinister> exactly
14:35 < MiracleBlue_> I wouldn't use bootstrap as the basis for something heavy/important/significant
14:35 < MiracleBlue_> But it's the best for little tools that need a nice simple gui without having to put in the work to make one from scratch
14:50 < cloudbender> what is bootstrap ?
14:50 < cloudbender> nevermind, reading posts
14:50 < MiracleBlue_> heh
14:51 < cloudbender> no, i mean I want to try it
14:51 < MiracleBlue_> ?
14:51 < Shinister> :)
14:52 < cloudbender> ‌cut the crap
14:53 < MiracleBlue_> derp
14:53 < cloudbender> kids messin in the big people room.
14:54  * MiracleBlue_ is sorely confused
14:55 < jtomasrl> is it possible to start a background tent server for ... testing?
14:55 < jtomasrl> test server*
14:57 < cloudbender> OK I'll ask again, what is bootstrap ?
14:57 < MiracleBlue_> http://twitter.github.com/bootstrap/
14:57 < Shinister> it's a css 'framework' of sorts
14:58 < Shinister> it's an easy way to get some modern UI design patterns in your website
14:58 < Shinister> it does tabulated contents easily, provides modern UI elements etc
14:58 < CoverSlide> and make your website look cookie-cutter like all the other sites out there
14:58 < Shinister> the second you see the kind of UI it generates, you'll notice many websites use it
14:59 < Shinister> I find it very restictive, but for simple things it's fine
14:59 < cloudbender> thanks
15:00 < cloudbender> nice home page. is it safe to download ?
15:01 < MiracleBlue_> Yes its quite safe :)
15:01 < MiracleBlue_> Except for the zombies.
15:01 < cloudbender> brb to the store me
15:11 < njs_> hi
15:11 < njs_> I am using express
15:11 < Robert00001> Hi
15:11 < njs_> and would like to add the response time to the "access log"
15:12 < Guest40455> is that possible? I read about connect which allows to add the duration within a header in the reponse
15:12 < Guest40455> but what about the log
15:53 < Prophet> hello, anybody here?
15:53 < Robert00001> Yes
15:53 < MiracleBlue_> Hi!
15:54 < Guest67105> Hey hey :) good day people,
15:54 < MiracleBlue_> G'day :)
15:54 < RLa> we are all idle bots
15:54 < Guest67105> I'm in a pickle,
15:54 < Robert00001> IKR
15:54 < RLa> uh, almost 1k users
15:54 < Robert00001> It reached 1024 last night
15:54 < Guest67105> I am having this line: ,iconv = new Iconv('windows-1255','utf-8') making my program exit with code null
15:55 < RLa> wow
15:55 < Guest67105> Being a beginner, I'm clueless.
15:55 < Robert00001> o_0
15:55 < Guest67105> could anyone suggest a way to solve that
15:55 < Guest67105> or debug it somehow
15:56 < Robert00001> No error at all?
15:56 < Guest67105> nope.
15:56 < Robert00001> that's strange
15:56 < CoverSlide> exits with code null?
15:56 < CoverSlide> code should be an int
15:56 < Guest67105> "DEBUG: Program node --debug server.js exited with code null"
15:56 < Guest67105> how should I go about inspecting the issue
15:57 < Robert00001> Hmmm
15:57 < Guest67105> I'm pretty sure it's a problem with the encoding I'm choosing for iconv (a recoding library), but.. no error, so I don't know where to look.
15:58 < Guest67105> Windows-1255 is not a common encoding, after all, hebrew only in one place in the world
15:58 < Guest67105> hebrew is used only*
15:58 < RLa> check if other encodings work
15:59 < RLa> i think the problem might be something to do with iconv being native lib
15:59 < Guest67105> nope.
15:59 < Guest67105> so an iconv prob.
15:59 < RLa> what os you are on?
15:59 < Guest67105> I shall reinstall Iconv and report back
15:59 < Guest67105> an ubuntu-flavour : elementaryOS
16:00 < RLa> yeah, check if iconv installation goes without errors
16:00 < RLa> you might need iconv headers
16:00 < Guest67105> lol first time speaking english with anybody, hope I'm doing alright.
16:00 < RLa> yes you are
16:00 < Robert00001> gtg, I'll be back in an hour or so
16:00 < Robert00001> You are
16:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:02 < Guest67105> installs fine.
16:02 < Guest67105> The odd thing is
16:03 < Guest67105> Requiring passes with no probs, but = new Iconv() does.
16:03 < RLa> hm
16:05 < Guest67105>  var Iconv  = require('iconv').Iconv; works, then doing iconv = new icon('ISO-8859-1','utf-8') kills it
16:06 < Guest67105> :'\
16:10 < geNAZt> Guest67105: set a breakpoint on that new line and run the debugger 
16:10 < geNAZt> and then step in that to see why it is breaking
16:10 < cloudbender> geez -31c ambient me fricken nerves
16:19 < Octagonking> question
16:19 < geNAZt> answer
16:24 < Octagonking> is there a function to evaluate a string as code
16:25 < Octagonking> so I can do eval('process.st' + outinOrerr + '.write("' + string + ')')
16:29 < stagas> Octagonking: man! process[outinOrerr].write(string)
16:30 < Octagonking> TANK U
16:31 < iksik> is there any module which can help with data synchronization client(browser)<->server?
16:33 < Octagonking> is there a function to get the first letter of x and a function to get all but the first letter of x
16:33 < bnoordhuis> Octagonking: bit off-topic, please try #javascript
16:33 < iksik> Octagonking: substr
16:34 < kenperkins> morning
16:35 < clone1018> What are some good fast libraries for working with images in NodeJS? I want to do things like resize, crop, etc and node-imagemagick doesn't really work as well as it could
16:37 < clone1018> This looks good http://aheckmann.github.com/gm/
16:41 < MI6> joyent/node: bnoordhuis created branch fix-cares-econnrefused - http://git.io/VRIyFA
16:47 < Octagonking> why does STDIN data present itself as an object, not a string
16:48 < isaacbw> did you use fork
16:48 < isaacbw> nevermind
16:49 < isaacbw> you're probably seeing a buffer
16:49 < isaacbw> setEncoding('utf8'(
16:49 < isaacbw> )
16:51 < Octagonking> how can I convert STDIN buffer to a string to use string operations on it
16:51 < isaacbw> I just told you
16:51 < Octagonking> with an example
16:52 < isaacbw> it's one line
16:52 < Octagonking> huh
16:53 < isaacbw> read the docs, man
16:53 < isaacbw> http://nodejs.org/api/stream.html#stream_stream_setencoding_encoding
16:55 < Octagonking> stream is not defined
16:56 < Octagonking> isaacbw: stream is not defined
16:57 < isaacbw> that's not very much to go on. You'll have to share your code
16:57 < Octagonking> do you need a library
16:58 < isaacbw> no
17:02 < Octagonking> example usage please
17:02 < MI6> joyent/node: Ben Noordhuis master * 6aed61f : dns, cares: don't filter NOTIMP, REFUSED, SERVFAIL  Report the aforementi - http://git.io/6a6RaA
17:03 < Octagonking> isaacbw: you forgot that we need require('stream');
17:03 < isaacbw> no you don't
17:03 < Octagonking> yes you fo
17:03 < Octagonking> do*
17:03 < isaacbw> you're telling me that it's working now that you added that?
17:04 < isaacbw> you shouldn't argue with someone trying to help you
17:04 < isaacbw> just share your code or I can't do much
17:04 < Octagonking> well, it knows stream exists now but setEncoding is not a function
17:04 < isaacbw> share your code
17:04 < isaacbw> you're doing something really strange
17:05 < Octagonking> no I am not
17:05 < stagas> Octagonking: it's process.stdin.setEncoding('utf8')
17:05 < Octagonking> stagas: THANK YOU
17:05 < isaacbw> dear god
17:06 < isaacbw> were you doing stream.setEncoding
17:14 < sorensen> lol
17:14 < isaacbw> does http-proxy let you add headers to responses?
17:15 < Octagonking> I'd like something like x[y], but let y include the arguments to pass too
17:15 < tjfontaine> isaacbw: probably at the least forwarded-for
17:15 < hhuuggoo_> I have a question about using require on the client side.  It seems like the only approaches are to either use something like hem or browserify, which uses the require to combine everything into a single file, or to use something which loads modules at runtie asynchronously, are those the only 2 approaches?  Is there a way to get require on the client side while still sychronously loading the individual js files?
17:16 < isaacbw> tjfontaine, hmm, I really just want to add CORS headers. That's how I was using nginx
17:16 < isaacbw> I don't want to taint my application code
17:16 < isaacbw> cors header*
17:16 < Robert00001> back
17:17 < isaacbw> hhuuggoo_, not really. Why would you want to do anything synchronously on the browser?
17:17 < isaacbw> do you want a loading bar or something like that?
17:17 < Octagonking> -
17:17 < Octagonking> I'd like something like x[y], but let y include the arguments to pass too
17:17 < Robert00001> ?
17:18 < isaacbw> oh hey, I can just make a custom http proxy server
17:20 < Octagonking> I'd like something like x[y], but let y include the arguments to pass too
17:21 < Octagonking> I'd like something like x[y], but let y include the arguments to pass too
17:21 < TwilightSpockle> Octagonking: The reason you're not getting a response is that your request doesn't even begin to make sense.
17:21 < hhuuggoo_> @isaacbw, I don't want to do it synchronously on the browser, but I would like to be able to use require, while still embedding all my js files as in <script> tags like i do now
17:22 < isaacbw> hhuuggoo_, you don't need to require anything if you're doing that
17:22 < isaacbw> everything will be in window scope
17:23 < isaacbw> as cool as http-proxy is, it could really use some proper api docs
17:23 < Octagonking> TwilightSpockle: The ["x"] syntax is the same as .x but expects a string. I want a slightly different version which is a string version of .x(y,...)
17:23 < tjfontaine> isaacbw: use the source luke
17:23 < isaacbw> heh
17:23 < isaacbw> too early in the morning for me to start digging through source
17:24 < isaacbw> 12:30pm
17:24 < isaacbw> jesus
17:24 < Octagonking> TwilightSpockle: So I can do something like x["y(a,b,c)"] and not x["y"](a,b,c)
17:25 < isaacbw> hmm, can you combine custom logic and a routing table, if that makes sense?
17:26 < Octagonking> isaacbw: kind of
17:26 < isaacbw> sorry, I'm talking about http-proxy
17:26 < isaacbw> your question still doesn't make sense
17:26 < isaacbw> what are you trying to accomplish
17:27 < Octagonking> isaacbw: I want something like ["x"] but allow arguments to be entered too, making ["x(a,b,c"]
17:27 < Octagonking> x(a,b,c)*
17:28 < isaacbw> I know what you mean, but why
17:28 < isaacbw> the short answer is no
17:28 < Octagonking> because I'm using Node.js to create a whole IRC client
17:29 < isaacbw> I think you need to take a step back and read a bit more about javascript
17:30 < isaacbw> can I just stack proxyRequest()s? Will the one with the correct host go through?
17:30 < isaacbw> fuck it, I'll just try it
17:30 < isaacbw> you guys are no help :P
17:31 < Octagonking> isaabcw: I'm living on the edge, if I step back, I'll fall
17:32 < isaacbw> deep
17:32 < MI6> joyent/node: isaacs streams1 * f30f063 : pre-streams2 js - http://git.io/AzYNlA
17:34 < stagas> Octagonking: maybe you're looking for something like .apply but you pass arguments in an array, not a string: x[y].apply(x, [a,b,c]) is the same as x[y](a,b,c)
17:35 < Octagonking> stagas: you're right, I want an .apply that takes arguments passed in a string
17:40 < stagas> Octagonking: yeah, sounds a bit weird what you're doing, but it looks like you can do x[y].apply(x, eval('[a,b,c]'))
17:41 < Robert00001> oooh a pretty_function
17:42 < MiracleBlue_> Oooooh
17:42 < Octagonking> stagas: but then, couldn't I do just eval("x." + var)
17:43 < stagas> Octagonking: well, you could eval everything, but you kill optimization and such
17:43 < Octagonking> or x.eval(var)
17:45 < airtanah> I am looking for some early feedback on an Actor module, modeled after Akka (from scala)
17:45 < airtanah> It's build on Axon
17:45 < airtanah> https://github.com/jacobgroundwater/federation
17:45 < segomos> Octagonking: you want to pass a string to your function?
17:46 < stagas> Octagonking: I'd say you need to rethink your approach though, eval is used very rarely and only when there's no way around it
17:46 < Octagonking> stagas: thank you ever so much for keeping my anger down, unlike those in ##javascript
17:46 < janmower> airtanah: nice will check it out.
17:47 < airtanah> janmower: feel free to open an issue there to discuss anything! much appreciated
17:48 < janmower> airtanah: will do, will pass along to a few other erlang addicts
17:48 < stagas> airtanah: how do you implement behaviors?
17:48 < isaacbw> arglbargl, I can't seem to figure this out. I'm using http-proxy as a reverse proxy between two apps on different ports, and I want to add headers to *one* of them
17:49 < isaacbw> I can't figure out how to apply custom logic to a single route
17:50 < airtanah> stagas: the actors are really just message handlers, you bind functions to their message handlers. there is no formal behaviour support, but you can capture state in your wrapper object
17:51 < airtanah> there is a ways to go before it's a full-fledged akka/erlang clone
17:51 < isaacbw> ah, I guess I got it but it feels messy
17:51 < segomos> how did you do it?
17:52 < isaacbw>     if( req.headers.host == 'api.localhost' )
17:52 < isaacbw> 	res.setHeader('Access-Control-Allow-Origin', 'api.localhost');
17:52 < segomos> you did that in middleware function or in just a route
17:52 < isaacbw> and then two proxyRequests
17:53 < isaacbw> let me double check that it's working
17:53 < segomos> airtanah: that looks pretty cool
17:54 < isaacbw> hah, no it doesn't
17:55 < stagas> airtanah: I have a similar project if you want to check it out https://github.com/stagas/drama
17:55 < airtanah> segomos: thanks, I'm hoping to get some discussiong going early, before the implementation solidifies
17:55 < isaacbw> here we go: http://hastebin.com/hofayelefe.vhdl
17:56 < segomos> how are you handling cross process communication?
17:57 < airtanah> stagas: reading it now...
17:57 < segomos> isaacbw: not sure how else you would do that 
17:58 < stagas> airtanah: actors are more than message passing handlers, they designate future behavior. you can't implement futures and anything without that feature, at that point it's just a messaging system
17:58 < isaacbw> I was hoping there would be a way to combine routing and logic functions into a neat data structure, but I guess this works
17:58 < isaacbw> something a little more abstracted
17:59 < draginx> Any idea why I would be getting 302s all of  asudden in my nodejs app?
17:59 < draginx> for any request :/
18:00 < airtanah> stagas: are you still working on your project? i'm curious if i can learn from your successes/mistakes
18:02 < stagas> airtanah: no time for it, the main problem was switching context from actor-land to regular js so you need to have everything in actors in order for the pattern to work
18:02 < isaacbw> here's the whole thing for anyone who's interested: http://hastebin.com/toyiyopaho.vhdl
18:02 < isaacbw> that's everything needed to work with angular
18:02 < s5fs> isaacbw: hey, we resolved that compile issue for angstrom on beagle-xm
18:03 < isaacbw> oh cool, what was wrong
18:03 < s5fs> isaacbw: the 'fix' was to make our own bitbake recipe and cross-compile. the build env on the device is not fit for anything, apparently.
18:03 < isaacbw> haha, okay
18:03 < isaacbw> but it wasn't a runtime issue at least
18:03 < s5fs> isaacbw: yeah, we found a recipe for 0.8.x and went with that, worked fine.
18:04 < stagas> airtanah: especially futures, the receivers need to know how to handle these so they must be actors themselves so that they can pass it to another actor or resolve it, so in a real app I had to wrap everything and it just wasn't worth the effort. I suppose the gains are when you need to scale, but it's much better if these are first class like erlang
18:04 < isaacbw> the deadline is today, right?
18:04 < s5fs> isaacbw: well, that's the thing, we can build node on-device and it'll stand up and run, but it segfaults. so something in our toolchain sucks, but i'm not going to kill myself trying to figure it out.
18:04 < airtanah> stagas: right, point taken. I would say federation is just a glorified event-emitter at the moment, but that is doing me well. I actually built it to specifically address cross-host communication as its primary concern
18:04 < isaacbw> yea there's no point if you've got it working with another toolchain
18:04 < s5fs> isaacbw: yeah, sprint wraps up today. can't say i'm crazy about the way work is laying out in this gig, but we're on track for delivery. so that's very good.
18:05 < isaacbw> whatever it takes
18:05 < s5fs> isaacbw: there's no point compiling on the thing to begin with, but that's not my end of the project, so i just keep my head down and mouth mostly shut. shoring up my angstrom smarts is my current to-do, but it's a long road.
18:05 < airtanah> stagas: i envisioned this like the next layer in the IP stack, sitting above Axon. It builds upon the previous layer, but leaves room for a layer on top
18:06 < isaacbw> try not to tear your hair out too much
18:07 < s5fs> isaacbw: no doubt, i'm going bald as it is. once i master the angstrom build process i will be eligible for a full unix beard, can't wait.
18:07 < isaacbw> heh
18:07 < jtomasrl> I'm trying to use Mocha for testing my http server, this is what i have so far https://gist.github.com/4692949, but im getting "Error: timeout of 2000ms exceeded" I set "Mocha --timeout 50000" and never finishes, but if i point my browser to "localhost:7000/" works fine
18:07 < s5fs> well, or ship this product, whatever comes first ;-)
18:07 < stagas> airtanah: depends on your use case, you certainly can use it for message passing and handle these in regular non-actor code
18:09 < airtanah> stagas: i am proceeding slowly, i don't want to add a feature until the current product is serving me well
18:10 < airtanah> stagas: i think version 1 will robustify what is there now, but will lack many traditional "actor" features, such as supervision
18:12 < isaacbw> and if you're using angular, you also need something like this in your server: http://hastebin.com/ruyiharajo.lua
18:15 < stagas> airtanah: I found using akka examples or from other actor implementations and porting them is a good way to see if it's being implemented right
18:16 < draginx>  -H 'Accept: application/json' -H 'Content-Type: application/json' <-- whenever I do a cURL request I keep getting nothing in return with these headers... in my application though im calling res.json({})
18:16 < draginx> (express app obviously)
18:17 < booyaa> ?seen tallroo
18:21 < MI6> joyent/node: isaacs master * c7c1ed0 : gitignore: Ignore release tarballs and shasum files - http://git.io/H9TrCg
18:21 < isaacbw> draginx, what if you put something in the json object
18:21 < draginx> isaacbw: right i just realized that cURL is not actually sending a JSON object
18:21 < isaacbw> ah
18:23 < isaacbw> fucking piece of shit time warner
18:23 < jtomasrl_> is there a good module for making test fixtures?
18:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:27 < airtanah> stagas: i will check them out, thanks
18:31 < brianc> jtomasrl_: mocha
18:32 < jtomasrl_> mocha has fixtures?
18:32 < brianc> ummm....maybe? depends on what you mean by fixtures
18:32 < brianc> oh wait
18:32 < brianc> fixtures are like those things from rails that get added to your DB during test?
18:33 < brianc> i was confused - but now I'm not.
18:33 < brianc> no mocha doesn't have those
18:34 < CoverSlide> maybe you can do something like that with sinon
18:35 < gabrieluk> hi, I want to read a node.js book. any opinions about this one? http://www.amazon.com/Node-Cookbook-David-Mark-Clements/dp/1849517185/ref=pd_sim_b_6
18:36  * CoverSlide shakes an 8 ball
18:36 < CoverSlide> it says: No way!
18:37 < MiracleBlue_> Derp
18:38 < isaacbw> get a book about javascript
18:38 < isaacbw> and then just read the node docs and go through source of popular modules
18:39 < isaacbw> I'm starting to fall for promises
18:39 < isaacbw> farewell, callbacks
18:39 < isaacbw> everyone start offering ...Q() versions of your module functions
18:39 < isaacbw> so you can be cool like me
18:39 < gabrieluk> i know javascript, i'm studying it for 1 year
18:40 < gabrieluk> i need a book that leads javascript programmers to node
18:40 < Robert00001> I also know javascript very well
18:40 < isaacbw> then get digging
18:40 < Robert00001> and I know node.js
18:40 < PublicAutopsy> THeres this node.js for front end developers by oreillymedia
18:40 < isaacbw> once you know javascript, node is a pretty simple set of libraries
18:40 < tuhoojabotti> Yes
18:41 < isaacbw> everything you need to know: http://nodejs.org/api/
18:41 < gabrieluk> well, it is not that simple, if you are a front end dev, with animation background :/
18:41 < isaacbw> then maybe you don't know 'real' javascript
18:41 < PublicAutopsy> http://shop.oreilly.com/product/0636920023258.do
18:41 < isaacbw> do you know what closures are?
18:41 < yept> if u know javascript, just read the docs.. then read the node's libs source code
18:41 < gabrieluk> well, now you are guessing
18:42 < isaacbw> https://github.com/search?q=node&ref=commandbar
18:43 < gabrieluk> i want a book, a good one
18:43 < yept> node's console is a good one
18:43 < PublicAutopsy> i bought http://shop.oreilly.com/product/0636920024606.do
18:43 < PublicAutopsy> and it pretty much walked me through some pretty core facets of it 
18:44 < PublicAutopsy> i also bought building node applications with mongodb and backbone
18:44 < gabrieluk> nice, seems my case, from the browser to...
18:45 < PublicAutopsy> which is meh, its like a super extended tutorial 
18:45 < PublicAutopsy> that doesn't explain much but has you write a lot
18:45 < yept> study closures
18:46 < gabrieluk> are you?
18:46 < isaacbw> what
18:47 < igl> wat
18:47 < yept> learn closures
18:48 < Industrial> Can jQuery find elements with an attribute with a name that startx with x?
18:48 < Industrial> e.g. data-bind-src aswell as data-bind-value
18:49 < Industrial> (starting with data-bind-)
18:49 < isaacbw> ##javascript might be able to answer that question
18:49 < Industrial> its either use jquery or do my own loop
18:50 < yept> or #jquery
18:50 < Robert00001> the [attr^=prefix] selector
18:50 < Industrial> Robert00001, no thats for attribute value, not name, but I'll move to jquery
18:50 < gabrieluk> yept, what makes you think i don't kow closures?
18:50 < gabrieluk> kown*
18:50 < Robert00001> oh
18:50 < yept> if u know that, node is easy for u
18:51 < gabrieluk> i know that budy, as I said, i've been studying javascript for 1 year
18:52 < isaacbw> lol
18:52 < yept> so whats your problem with node?
18:52 < Robert00001> for me: 2 years
18:52 < gabrieluk> my problem with node is that i'm NOT a n=backend guy
18:52 < isaacbw> kerfuffle alert
18:52 < yept> and?
18:52 < isaacbw> kerfuffle alert
18:52 < Robert00001> ?
18:52 < yept> u dont know what? network stuff?
18:52 < gabrieluk> and i want a fucking book to guide me
18:53 < gabrieluk> not much of networking yeah
18:53 < isaacbw> gabrieluk, node is new enough that many developers dislike the current book offerings
18:53 < isaacbw> and since things are still changing, you might find a book you buy now to be out of date
18:53 < jhsto> ive never read a book about programming
18:53 < yept> gabrieluk so try to understand http, tcp first
18:53 < Industrial> i did, in school
18:53 < gabrieluk> http i know
18:54 < aandy> do you GET it?
18:54 < zomg> Books about programming languages or libraries are not always so useful
18:54 < jhsto> haha
18:54 < zomg> But programming concepts book are pretty good stuff
18:54 < Industrial> aandy, like most people get it :P
18:54 < zomg> Eg. Pragmatic Programmer and such
18:54 < gabrieluk> i know quite a few things actually, i just can't groke them togheter
18:54 < aandy> ;)
18:54 < yept> start making simple stuff
18:54 < jhsto> i like simple stuff
18:54 < gabrieluk> yes, GET POST, and REST API, all sink in
18:55 < Robert00001> http://nodejs.org/community/ will show a short list of manuals
18:55 < aandy> gabrieluk: it was a play on words, didn't mean offense ;)
18:55 < Industrial> gabriel, have you ever taken a look at a raw HTTP request going from client to server and the HTTP response for it going back? it's really insightful, and gives you a clear insight on what the server side does :)
18:55 < gabrieluk> no, probs :), i never took as an offense
18:56 < gabrieluk> raw HTTP... i;m not sure what that means
18:56 < isaacbw> RFCs bitch
18:56 < PublicAutopsy> again, gabriel, that learning node book i found to be really useful
18:56 < isaacbw> RFC FOR LYFE
18:56 < aandy> the actual communication going back and forth
18:57 < Industrial> gabriel, the bits of text all together forming up a HTTP request/response, but then in computer readable format. The real thing :)
18:57 < aandy> like, GET /\r\nX-Suck-A-Bag-of: xxx\r\n\r\n
18:58 < Industrial> aandy, not 1, 2..
18:58 < isaacbw> telnet that shit
18:58 < gabrieluk> how can i see that? Industrial
18:58 < Industrial> just google on it, youll find a guild for your OS.
18:58 < Industrial> guide*
18:58 < Industrial> noone needs guilds.
18:58 < aandy> Industrial: that's a clearly not meant to be a client side header
18:58 < aandy> ;)
18:59 < Industrial> I was mentioning the bag :P
18:59 < PublicAutopsy> So, I've been making some small node apps for about a month and a half, and i was wondering how you guys typically go aout making a larger scale application
18:59 < isaacbw> goddamn I'm so in love with myself
18:59 < yept> lol
18:59 < CoverSlide> use libraries or frameworks that help with the load
18:59  * Industrial shoves isaacbw into a mirror palace
18:59 < Industrial> (die!)
18:59 < holzp> PublicAutopsy, I don't thinkthere is a commonly agreed One True Way™ yet
19:00  * Robert00001 sees people using the me command
19:00 < Industrial> where?
19:00 < holzp> I spent a lot of time looking at bigger projects before setting on a tentative structure myself
19:00 < aandy> Industrial: so was i :D should be server header
19:00 < Industrial> haha
19:00 < CoverSlide> read other peoples' code, see how they do stuff, figure out what your problem is, and write code
19:00 < holzp> I ended up using grunt to build and going off other similar projects using it
19:01 < holzp> for directory structure, library placement, configuration etc
19:01 < PublicAutopsy> Thats what i figured, holzp, do you have any github projects you find to be well structured i could look through? 
19:01 < isaacbw> any of you guys homebrew? I'm going to get ingredients for my first batch and I can't decide what variety to make
19:01 < holzp> I looked at moment, npm, grunt and express
19:01 < isaacbw> for my first time
19:01 < holzp> it was a good cross section
19:02 < holzp> isaacbw, I did from time to time
19:02 < PublicAutopsy> awesome, yeah ill be sure to look throu
19:02 < holzp> Start with a simple pale ale
19:02 < PublicAutopsy> gh those 
19:02 < isaacbw> alright, cool
19:02 < isaacbw> I will
19:02 < holzp> that will give you a  good measure for the next batches
19:02 < isaacbw> also, connect is worth a look before express or express might look like magic
19:02 < holzp> and its hard to screw up :)
19:02 < isaacbw> :P
19:02 < isaacbw> thanks
19:02 < CoverSlide> if you want an example of a web application, look at npm-www
19:02 < aandy> isaacbw: indeed
19:03 < CoverSlide> it's really nicely structured
19:03 < Robert00001> CoverSlide, you beat me to it! :<
19:03 < CoverSlide> and doesn't depend on express, but I like its organization, and can be used with express
19:03 < PublicAutopsy> I've been using express, and ive used connect separately, i do really like express 
19:03 < isaacbw> but nothing beats getting your hands dirty and just trying to make shit work
19:04 < yept> yeah +1
19:04 < isaacbw> I liked express until I realized how in love with myself I am
19:04 < CoverSlide> i agree
19:04 < aandy> what
19:04 < PublicAutopsy> currently I've been using express and restler to handle most of what I've been doing (just making api calls, gathering data, and then rendering it mostly)
19:05 < yept> i dont like express ;x
19:05 < CoverSlide> be aware of what you're doing, don't depend on the express way for everything
19:05 < CoverSlide> if you are only using express.static, learn to use send or ecstatic instead
19:05 < aandy> sure. it's more the idea of middleware i like
19:05 < aandy> (which isn't express)
19:06 < isaacbw> express makes it feel a little cleaner though
19:06 < CoverSlide> understand the internals of what express is doing so you can break out of that mold when needed
19:06 < PublicAutopsy> kk, ill make it a point to try using raw connect more often 
19:06 < PublicAutopsy> or building it myself
19:06 < isaacbw> or at least just play with it for a few days and then use express
19:07 < PublicAutopsy> the book i read on node walks you through using connect or just raw http and then introduced express' way of doing things after, so i have some exposure to it 
19:07 < aandy> PublicAutopsy: which book is it?
19:07 < PublicAutopsy> Learning Node 
19:09 < PublicAutopsy> Are any of you paid node debs? 
19:09 < holzp> sorts?
19:09 < holzp> sorta?
19:09 < holzp> I get paid to develop, but my customers have really no idea what I am using and like it that way
19:09 < isaacbw> PublicAutopsy, debs?
19:09 < isaacbw> oh
19:09 < aandy> node-devs or node devs?
19:09 < PublicAutopsy> devs*
19:09 < isaacbw> that's a nice arrangement holzp 
19:10 < azylman> I get paid to develop node in the sense that the company I work for uses it
19:10 < azylman> lol
19:10 < isaacbw> I see a lot of clients asking for a particular technology with no idea what any of it actually means or does
19:10 < holzp> I lave a long history of Stuff That Just Works
19:10 < aandy> holzp: classic "don't wanna know how the sausage is made"
19:10 < holzp> so people leave me alone and trust me
19:10 < holzp> yeah well it took a long time to get to that point
19:11 < PublicAutopsy> I work as a front end developer currently, mostly client side JS 
19:11 < holzp> I like the idea of Node breaking that wall down
19:12 < PublicAutopsy> Yeah, thats what got me so interested in it to begin with
19:12 < Robert00001> Because of my projects, I'm a bit more of a back-end developer
19:12 < PublicAutopsy> i did some light php and rails work too, and it wasn't a struggle, but it wasn't too much fun
19:12 < yept> i migrated all the website structure of the company I work to nodejs+mongodb
19:12 < PublicAutopsy> i do enjoy the paradigm of JS a lot more 
19:13 < CoverSlide> The main reason to use node is JIFASNIF
19:13 < aandy> i've never really seen an advantage of the "shared codebase" between client/server - apart from the fact that both sides are written in javascript. anyone have some good examples of actual code reuse?
19:13 < Robert00001> although I code in coffeescript
19:13 < PublicAutopsy> Seriously, Cover, thats why
19:13 < CoverSlide> code reuse isn't really much of a benefit
19:13 < isaacbw> it's not so much code reuse as being easier to develop
19:13 < geNAZt> aandy: form validation
19:13 < isaacbw> switching between languages all the time can get annoying
19:13 < isaacbw> and disorienting
19:14 < holzp> I think code reuse is a big future thing but the patterns just arent there yet
19:14 < aandy> isaacbw: i agree, and that's how i've been seeing it thus far
19:14 < isaacbw> though easily using json for everything is useful
19:14 < CoverSlide> aside from doing things like having to wrestle with formatting dates 2 different ways, templating 2 different ways, etc.
19:14 < airtanah> aandy: i agree, in fact most of the time it causes an over-coupling of the client/sever code
19:14 < holzp> thats the problem with a lot of Node at this point in time, good ideas, but the patters are still emerging
19:14 < holzp> patterns
19:14 < CoverSlide> that's one of the pain points that i experienced as a ruby / php developer
19:14 < Robert00001> I still code in JavaScript when it comes to the front-end
19:14 < CoverSlide> but that's a small case
19:14 < CoverSlide> and .NET
19:15 < jhsto> patterns - like comma first stuff?
19:15 < PublicAutopsy> i couldn't stand .NET
19:15 < isaacbw> airtanah, if you aren't intending to create a public API, that can be a good thing
19:15 < CoverSlide> comma first is more a style
19:15 < isaacbw> comma first is blasphemy
19:15 < holzp> morelike whole scale development patters
19:15 < PublicAutopsy> i did one company project with it, total hasle 
19:15 < holzp> patterns
19:15 < holzp> how to structure apps, how to share code from client and server
19:15 < isaacbw> mm, patterns
19:15 < holzp> are web apps one pagers with all js doing the work? sould each "page" be a thing? patterns
19:15 < airtanah> isaacbw: strong coupling of code is a smell, anywhere
19:15 < holzp> design patterns
19:16 < CoverSlide> .NET Webforms is terrible, none should ever use it. however .NET MVC is fairly minimal and gets out of your way as long as you don't try to integrate webforms
19:16 < Robert00001> I noticed someone who uses ChatZilla
19:16 < isaacbw> airtanah, maybe we're meaning different things by coupling
19:17 < PublicAutopsy> Have you guys ever ported rails apps to node? I have a rather large public facing web app that i was to switch over and i was wondering how your process went 
19:17 < isaacbw> why are you going to switch
19:17 < airtanah> isaacbw: could be
19:17 < Havvy> PublicAutopsy: I've not used rails, so why would you want to switch?
19:17 < CoverSlide> if it's working in rails, the cost of switching is probably not worth it
19:18 < isaacbw> I just mean that I have a tendency to try and make my APIs big and epic and multi-purpose and flexible and it's an effort to design my API for my application
19:18 < CoverSlide> you'd probably have a better time optimizing your rails stack instead of trying to port it
19:18 < airtanah> isaacbw: i generally mean any time components depend on each others implementation, i.e. no interfaces
19:18 < isaacbw> not for some magical possible public release
19:18 < PublicAutopsy> It features a lot of real time communications, including chat functionality that currently feels a little hackery and i think that using web sockets could majorly help 
19:18 < isaacbw> ah, okay
19:18 < isaacbw> I have at least three layers of interface
19:18 < CoverSlide> you can do websockets in rails
19:18 < isaacbw> REST api, Angular service
19:19 < isaacbw> that's two
19:19 < CoverSlide> well not rails, but ruby
19:19 < airtanah> isaacbw: i have just come across too many javascript programmers who want the entire web-interface to render automatically based on their back-end models
19:19 < isaacbw> I use the angular service which abstracts my API into js objects, and then the restful api does remote stuff with other servers
19:19 < airtanah> "it's efficient"
19:19 < CoverSlide> there's also the pow gem which you can use to integrate node into your rails app
19:19 < isaacbw> ah, I see. I do client-side rendering with angular and use node for data interchange
19:19 < CoverSlide> i think
19:20 < isaacbw> so my data passes through a series of models
19:20 < isaacbw> with some caching in there as well
19:20 < airtanah> isaacbw: haven't used angular, but i've heard good things about it
19:20 < isaacbw> it's really wonderful once you wrap your head around it
19:20 < airtanah> i have used backbone, and so far i have only seen it mis-used horribly
19:20 < isaacbw> they still haven't solved the problem of search engine indexing though
19:20 < aandy> isaacbw: i'm pretty sure that's how you're suppose to use angular
19:20 < isaacbw> it is
19:20 < aandy> :)
19:20 < holzp> the pattern im sort of doing now is a strong server side json based REST-ful API, and the client side guys can do whatever they want
19:20 < isaacbw> I just mean that I don't do server-side rendering
19:20 < Industrial> isaacbw, do you also have three+ model defenitions/validations?
19:21 < Industrial> (just curious)
19:21 < airtanah> isaacbw: i will check it out
19:21 < isaacbw> holzp, I would love to have someone else doing my API so I can just focus on the front-end rendering
19:21 < isaacbw> but I'm running solo for now
19:21 < isaacbw> Industrial, I'm a bad boy and don't do much/any validations
19:21 < isaacbw> I also don't strictly follow a model model
19:21 < holzp> well I keep those rules even if I am  both guys
19:21 < isaacbw> (hrm)
19:22 < holzp> "boyd I wish the server would just do that", "go fuck yourself, me"
19:22 < Industrial> me too, strictly super models
19:22 < isaacbw> haha
19:22 < PublicAutopsy> When learning node, did any of you have what yo would say an intermediate level app that you were building that you learned a lot from? 
19:22 < isaacbw> when I request data from the API, it either serves me a cache or pulls the data from a different remote server
19:22 < airtanah> holzp isaacbw: that's what i would call de-coupling! where the client can make big changes without the server code changing
19:22 < isaacbw> I have little to no control over the data except making sure it's clean
19:22 < Industrial> well then validation doesnt matter as much I guess
19:23 < Havvy> PublicAutopsy: I built an IRC framework (though it has a few nasty behaviors I need to change)
19:23 < isaacbw> airtanah, yea... that sounds about right. I sometimes just make decisions up for stuff
19:23 < isaacbw> *definitions
19:23 < Industrial> I'm going to be building the frontend of a big app with lot of dumb corporate users on ie7 and winxp
19:23 < isaacbw> my software engineering background is lacking
19:23 < airtanah> isaacbw: arguing about definition is an internet past time
19:23 < isaacbw> I'm more of a hacker than an engineer
19:23 < airtanah> isaacbw: we shoudl start calling each other nazis soon
19:24 < Industrial> so I NEEED validation :)
19:24 < isaacbw> damn nazi
19:24 < isaacbw> ie7
19:24 < isaacbw> shit
19:24 < CoverSlide> godwin's law
19:24 < isaacbw> you should strike
19:25 < PublicAutopsy> Havvy, that sounds like fun, was it actual IRC or did you make a room system?
19:25 < Havvy> It's for IRC bots. Not a network.
19:25 < PublicAutopsy> Oh oh, even more fun
19:26 < isaacbw> you guys are gonna be so in love with me when I announce my super duper awesome project
19:26 < PublicAutopsy> I was thinking of making a reddit bot
19:26 < CoverSlide> isaacbw: pr0n?
19:26 < isaacbw> tots
19:26 < CoverSlide> <3
19:36 < gabrieluk> lol, http://xkcd.com/1168/
19:36 < isaacbw> tar -xzf
19:36 < isaacbw> e(x)tract (z)e (f)ile
19:37 < CoverSlide> what about .xz format?
19:37 < holzp> tar xzf -
19:37 < holzp> isnt there some funny business about f and stdin?
19:37 < isaacbw> dunno
19:37 < holzp> I thinkwe both blew up the bomb :(
19:37 < isaacbw> :(
19:37 < CoverSlide> you can just use tar xz, it uses stdin by default
19:38 < holzp> right
19:38 < CoverSlide> f use f if you want to give it a filename
19:38 < isaacbw> why are we using stdin
19:38 < isaacbw> no way
19:38 < holzp> but I think with f you need another - to *not& use stdin or some such
19:38 < CoverSlide> because all unix programs need to use stdin
19:38 < isaacbw> no way, you're crazy
19:38 < CoverSlide> it's the law
19:38 < isaacbw> you mean you pipe files into tar?
19:38 < CoverSlide> holzp: maybe
19:38 < isaacbw> tar -xzf <file>
19:39 < isaacbw> that's what I do
19:39 < CoverSlide> sometimes i just use /dev/stdin just to be safe
19:39 < CoverSlide> not all programs use the - conventions
19:39 < isaacbw> lol
19:39 < LeftWing> Hi folks!  I'd like to Call() a v8::Function from some Crazy Other Thread.  Is there an established pattern?
19:39 < holzp> http://www.abbeyworkshop.com/howto/unix/nix_gtar/index.html
19:39 < holzp> "The dash "-" represents standard input."
19:39 < CoverSlide> like i used swfextract for a node project
19:39 < holzp> blah
19:39 < CoverSlide> i didn't want to have to write to a file
19:40 < CoverSlide> and it didn't support using stdin
19:40 < isaacbw> -x means it's extracting
19:40 < CoverSlide> so i just piped it to /dev/sdin
19:40 < isaacbw> wtf
19:40 < isaacbw> lol
19:40 < CoverSlide> it's awesome
19:40 < CoverSlide> it didn't touch the disk at all
19:40 < isaacbw> fuckinn unix
19:41 < aandy> :)
19:41 < aandy> all hail the almighty pipe
19:41 < isaacbw> off to go buy alcohol making supplies
19:43 < LouisT> Good afternoon.
19:43 < cloudbender> ok ... comments welcome when you have time. https://gist.github.com/4693344
19:43 < Industrial> time has us! by the balls!
19:43 < cloudbender> yar time
19:45 < cloudbender> Aside from node, is there another means (on windows) for me to work outside the browser ?
19:46 < cloudbender> What I need is a command shell environment
19:46 < PublicAutopsy> node has repl
19:46 < CoverSlide> there's the d8 repl for v8
19:47 < cloudbender> I can't run node, laptop is too old
19:47 < CoverSlide> you can use rhino
19:47 < CoverSlide> or spidermonkey's cli
19:47 < aandy> yeah spidermonkey
19:47 < cloudbender> I can't find references to a windows version of spidermonkey
19:48 < CoverSlide> hmm
19:49 < cloudbender> yeah
19:49 < CoverSlide> maybe try rhino. it's java
19:49 < CoverSlide> so it should work everywhere
19:49 < cloudbender> don't waste time on it, i'll keep digging, I was just asking in general
19:49 < PublicAutopsy> i run rhino on my microwave
19:49 < CoverSlide> i remember my first time trying to do server-side js, i was making CGI scripts for rhino
19:49 < cloudbender> I am java antagonistic
19:49 < CoverSlide> fun times
19:50 < ksmth> hey guys - has anyone ever used https://github.com/zeekay/shh ?
19:50 < PublicAutopsy> oo that seems like fun
19:50 < CoverSlide> ksmth: check out https://github.com/mscdex/ssh2
19:51 < airtanah> isaacbw: http://xkcd.com/1168
19:51 < cloudbender> Java is now the property of ScoCalDerNixiVellIcle and I don;t want to be sued when I go into production.  Java bad.
19:51 < ksmth> CoverSlide is it better and why? :)
19:51 < CoverSlide> for one thing, no coffeescript
19:52 < CoverSlide> plus i know mscdex writes good code
19:52 < LeftWing> cloudbender: Oracle are not going to sue you for *using* Java.
19:52 < ksmth>  CoverSlide ah, I have nothing against coffeescript
19:52 < CoverSlide> this zeekay guy i don't know
19:52 < PublicAutopsy> yeah i wouldn't worry about getting sued for using java
19:52 < cloudbender> Not as long s I make no money, you are correct.
19:52 < CoverSlide> plus his does support password authentication
19:52 < CoverSlide> i think
19:52 < festercluck> yup
19:53 < CoverSlide> also better documentation
19:53 < ksmth> CoverSlide I'm looking into implementing a simple deployment task for grunt with either of those two libraries
19:53 < festercluck> +oauth
19:53 < CoverSlide> oh he has sftp support too
19:53 < CoverSlide> sweet
19:53 < mscdex> shh uses ssh2, but it's pinned at a very early version
19:53 < CoverSlide> oh
19:53 < festercluck> But does it support gopher?
19:54 < CoverSlide> ha i probably should hav elooked at the dependencies
19:55 < festercluck> we should implement ssh over websockets
19:56 < CoverSlide> https://github.com/blamarche/node-gopher
19:56 < festercluck> The tunneling possibilities....
19:56 < CoverSlide> someone already has
19:56 < mscdex> or you could tunnel websockets over ssh
19:56 < geNAZt> look at the cloud9 ide
19:56 < mscdex> ;-)
19:56 < geNAZt> it has some ssh over websocket things
19:56 < CoverSlide> http://liftoffsoftware.com/Products/GateOne
19:56 < ksmth> mscdex so, shh is a higher level wrapper around ssh2?
19:56 < CoverSlide> but it's closed source
19:56 < geNAZt> cloud9 ?
19:56 < ksmth> uh, but it's a really old version ...
19:57 < cloudbender> btw, I did like java, in general.
19:57 < festercluck> Oh yeah, duh. I use cloud9
19:57 < mscdex> ksmth: briefly looking at their repo, I think that was the author's goal
19:57 < mscdex> to some degree
19:58 < festercluck> Cloud9 local, screw the service
19:58 < festercluck> Though some of the plugins are nice
19:59 < PublicAutopsy> cloud9 has a desktop version?
19:59 < geNAZt> no but its open source
19:59 < PublicAutopsy> oh so you can just run a build locally
19:59 < CoverSlide> I thought it stopped working for a while
20:00 < PublicAutopsy> is it good enough to do so? i used it briefly a while back and it was really lack luster 
20:00 < PublicAutopsy> i just use sublime text 
20:00 < CoverSlide> i am curious about light table
20:01 < CoverSlide> looks nice, i just hope it supports more than clojure
20:01 < PublicAutopsy> lol 
20:01 < PublicAutopsy> it does look nice
20:02 < CoverSlide> they use node-webkit for it
20:02 < CoverSlide> but it's primarily clojure-focused
20:02 < CoverSlide> i tried it a few months ago and liked it
20:02 < festercluck> Cloud9 is great with git and multiple users on a server
20:03 < festercluck> Just you? Komodo
20:03 < PublicAutopsy> i just use sublime text, source tree, chrome and the terminal for development
20:04 < Jens> Hi @all
20:04 < festercluck> Yeah, I'm nano and ssh for php
20:04 < geNAZt> i am echo cat and lsof -_-
20:04 < geNAZt> :D
20:04 < PublicAutopsy> used to just use Vim, but i fell in love with st2
20:04 < Jens> someone here that has knowledge about writing native modules?
20:04 < ksmth> PublicAutopsy I'd be happy if ST2 wasn't so ugly
20:05 < airtanah> TextMate2 is open sourced
20:05 < PublicAutopsy> @ksmth Gotta theme it how you like 
20:05 < geNAZt> well webstorm is a damn good IDE for JS
20:05 < ksmth> PublicAutopsy no theming helps with the sidebar ;)
20:05 < PublicAutopsy> I've heard awesome stuff about web storm 
20:06 < PublicAutopsy> you don't have to use the sidebar, you can use finder instead, or even the console in sly fro file management
20:07 < ksmth> PublicAutopsy that doesn't change ST2's shortcomings in that regard. of course there are other tools, but take a look at textmate or even chocolate — that's how a sidebar should look like ;)
20:07 < grownseed> hey everybody, wondering if anybody's ever tried to fetch emails from gmail organisation-wide?
20:08 < tprice> how do i install a package for a specific node version with npm.commands.install
20:08 < grownseed> tprice: npm install mymodule@1.2.3
20:08 < CoverSlide> a specific node version?
20:09 < CoverSlide> you don't install node throuhg npm
20:09 < CoverSlide> you can install node through nave / nvm / give / n
20:09 < tprice> A pacakge that works with node version X
20:09 < grownseed> good catch CoverSlide, thought he was asking about a specific version of a module
20:10 < CoverSlide> tprice: it should detect your version and use the latest
20:10 < CoverSlide> that works with it
20:10 < CoverSlide> although i hear sometimes that can be buggy
20:10 < grownseed> the best way i've found is just to go through a module's versions and check the associated node version, then just use npm install module@version
20:11 < tprice> yeah npm install from process.version=="0.8.12" but i want another version.. say "0.6.x"
20:11 < PublicAutopsy> hows webstorm for node?
20:11 < PublicAutopsy> also does web storm take themes? 
20:11 < grownseed> PublicAutopsy: it works really well
20:11 < geNAZt> it is awesome
20:12 < PublicAutopsy> sweet, i think I'm gonna try it out then, looked powerful as hell
20:13 < grownseed> that gmail/oauth/imap organisation-wide stuff is a goddamn nightmare...
20:16 < CoverSlide> tprice: maybe try installing like `npm install whatever --node-version 0.6.0`
20:17 < PublicAutopsy> can web storm use mustache templating? or just jade 
20:17 < CoverSlide> i'm sure plugins can be found for it
20:18 < geNAZt> i use nodejs / expressjs with swig
20:18 < badlands> Hi I would like to programatically interact with a site - visit, traverse dom, submit forms etc, is node.io the right tool for the job?  
20:18 < geNAZt> which looks like html
20:18 < CoverSlide> badlands: look at phantomjs, it's non-node, but it works
20:19 < badlands> thanks
20:19 < grownseed> anybody on gmail/imap/oauth?
20:19 < tlack> badlands: there's also zombie.js which is more light weight. there are a million options
20:20 < tlack> anyone use the cluster module much? getting a very odd distribution of traffic to cluster nodes..
20:20 < badlands> great, I've started working on get and post requests using io, the bit I'm stuck on is submitting forms
20:21 < chadeubanks_> Hi everyone, Is there a way to add text to the top of an existing file?  Im using fs.appendFile but it adds the data to the bottom of the files text.
20:21 < badlands> documentation and examples are a bit slim 
20:21 < geNAZt> chadeubanks_: use streams
20:22 < chadeubanks_> geNAZt:  cool thank you
20:23 < geNAZt> chadeubanks_: something like this http://hastebin.com/hoyagokosu.js
20:23 < geNAZt> but it creates a new file
20:23 < geNAZt> since you should not read and write into the same file
20:25 < PublicAutopsy> how do i use live edit with webstorm
20:25 < geNAZt> simply open a page in chrome
20:25 < geNAZt> from your workspace
20:25 < geNAZt> and webstorms attaches to it
20:26 < geNAZt> ( after installing webstorm you must restart chrome to work with it )
20:26 < PublicAutopsy> only works on html pages though huh?
20:26 < geNAZt> "only" ?
20:26 < geNAZt> what other things you would like to do ?
20:26 < PublicAutopsy> i tried using it with mamp
20:27 < geNAZt> live editing php files ?
20:27 < PublicAutopsy> yeah, 
20:27 < PublicAutopsy> pretty much
20:27 < geNAZt> well php cant be live edited
20:27 < geNAZt> since you cant change it in runtime
20:28 < Havvy> geNAZt: Edit. Refresh. Edit. Refresh. Repeat.
20:28 < geNAZt> yes thats the way of "live editing" php
20:28 < geNAZt> or nodejs
20:29 < geNAZt> or something else that runs in an application
20:29 < PublicAutopsy> yeah thats what I've been doing, they're only php pages to import headers and footers 
20:29 < draginx> Is there any reason why you cant take an array and group by it asynchronously?
20:29 < draginx> just wondering why coalan/async doesn't have it.. it has sortBy
20:30 < geNAZt> PublicAutopsy: then why php ? if you only use it to merge files ?
20:31 < PublicAutopsy> is there another way to do it?
20:31 < geNAZt> to merge files ?
20:31 < CoverSlide> draginx: you want to sort functions?
20:31 < geNAZt> yes merge them to statics
20:31 < draginx> CoverSlide: no object keys
20:31 < PublicAutopsy> to have an external header and footer with an interchangeable body 
20:32 < geNAZt> how dynamic is the body ?
20:33 < PublicAutopsy> its 5 separate pages, all entirely differnt
20:33 < PublicAutopsy> in tho particular occasion
20:33 < PublicAutopsy> this*
20:33 < geNAZt> are the five different pages always looking the same ?
20:33 < PublicAutopsy> they will be a drupal theme eventually, but its not our job to hook that up 
20:34 < PublicAutopsy> so on my side they will always be looking the same
20:34 < geNAZt> yes but there is an cms
20:34 < geNAZt> which can make it dynamic
20:35 < PublicAutopsy> right 
20:35 < geNAZt> so its not good to make it static
20:35 < PublicAutopsy> right
20:36 < geNAZt> back to the original topic: no webstorm cant live edit php
20:36 < geNAZt> :D
20:36 < PublicAutopsy> lets use this case, if i had a static site with 3 pages that all shared a header and footer, how would i merge those without using php includes?
20:37 < PublicAutopsy> haha, k so thats settled lol
20:37 < geNAZt> well its easy
20:37 < geNAZt> i have seen a blog written in nodejs
20:37 < geNAZt> which edits the html source of itself
20:38 < geNAZt> so no database, no dynamic
20:38 < geNAZt> just text on a site
20:38 < geNAZt> and nodejs renders the whole html with the new blog post to a static html file which is much faster to deploy
20:38 < PublicAutopsy> oh yeah, i mean in general not pertaining to node, cause I've done tempting in node 
20:39 < geNAZt> php can do the same
20:39 < geNAZt> but the most software use databases even if they make no sense
20:39 < FunnyLookinHat> geNAZt, That happened as soon as MVC / HMVC was introduced and widely adopted.
20:40 < FunnyLookinHat> Everyone assumed you needed models that were tied to persistent storage relational databases.
20:40 < FunnyLookinHat> Frustrates me too ...  :)
20:40 < geNAZt> yes and its pure bullshit :D
20:41 < mansoor-s> Its a squirrel!
20:41 < MiracleBlue_> Eez not a dog, eez a ferret
20:44 < xk_id> Does anybody know how to close a "keep-alive" connection initiated using the 'request' module?
20:51 < geNAZt> xk_id: it looks like you cant
20:52 < LouisT> is there an nodejs apk for android?
20:53 < geNAZt> LouisT: i dont think so
20:53 < geNAZt> it doesnt make sense
20:54 < LouisT> why wouldn't it make sense?
20:54 < xk_id> geNAZt: do you think it remain open "forever"?
20:54 <@mbalho> LouisT: http://www.youtube.com/watch?v=zLeZXSKePhQ
20:54 < geNAZt> no
20:54 < geNAZt> after the keepalive timeout set in the server the connection is closed
20:55 < xk_id> geNAZt: so it's up to the server>
20:55 < geNAZt> yep
20:55 < xk_id> ah, that's fair enough
20:55 < geNAZt> if you use the http module from node you could destroy the socket if you are ready
20:55 < xk_id> geNAZt: btw, http://stackoverflow.com/questions/140765/how-do-i-know-when-to-close-an-http-1-1-keep-alive-connection
20:56 < xk_id> geNAZt: 'require' is built on top of 'http'... 
20:57 < geNAZt> xk_id: but it doesnt kill the request after all data is received
20:57 < geNAZt> due to keep-alive
20:57 < xk_id> I meant, that makes me hope there is a way to destroy the socket
20:58 < geNAZt> if you change the code of the request module sure there is
20:59 < xk_id> Ic
21:05 < Raynos> has anyone solved the "node_modules in git" is massive diff noise problem?
21:05 < Raynos> Can I check them in as like a git submodule or something?
21:06 < Industrial> Raynos, you don't depend on npm's uptime?
21:06 < Raynos> I check node_modules into git to version freeze
21:07 < Raynos> so thats awesome
21:07 < Raynos> also git is way faster then npm install
21:07 < geNAZt> in the package.json you also can version freeze
21:07 < Raynos> but the problem is the diff noise is killing me in pull requests
21:07 < lohkey> thats one thing composer got right, you have a composer.json and a composer.lock, the lock is for version freeze
21:07 < Raynos> then you still depend on npm
21:07 < Raynos> and then you can't git bisect other peoples bugs
21:08 < Raynos> http://www.futurealoof.com/posts/nodemodules-in-git.html
21:08 < Raynos> ^ I'm not having that argument, go read about it.
21:08 < Raynos> What I want is to remove the diff noise in github
21:08 < Raynos> Maybe I should just go bitch at github
21:13 < rump> can you set err.name in the new Error() constructor?
21:15 < xk_id> rump: yes.
21:15 < rump> howzarz!
21:16 < xk_id> >> var err = new Error("a");
21:16 < purr> xk_id: undefined
21:16 < xk_id> >> console.log(err);
21:16 < purr> xk_id: ReferenceError: err is not defined
21:16 < xk_id> >> console.log(new Error("a"));
21:16 < purr> xk_id: undefined; Console: {arguments: undefined, message: 'a', stack: (Getter/Setter), type: undefined}
21:16 < rump> that sets err.message
21:16 < rump> not err.name
21:16 < xk_id> hmm okay. 
21:17 < xk_id> It was enough in my case.
21:17 < geNAZt> >> console.log(new Error().name='test');
21:17 < purr> geNAZt: undefined; Console: 'test'
21:17 < geNAZt> >> console.log(((new Error("a")).name='test'));
21:17 < purr> geNAZt: undefined; Console: 'test'
21:17 < Robert00001> >> e = new Error();e.name = 'test';throw e
21:17 < purr> Robert00001: test: 
21:17 < Robert00001> :D
21:18 < geNAZt> :( :D
21:18 < Robert00001> >> process.version
21:18 < purr> Robert00001: ReferenceError: process is not defined
21:18 < Robert00001> olol
21:18 < Robert00001> not node then
21:19 < geNAZt> >> end
21:19 < purr> geNAZt: ReferenceError: end is not defined
21:19 < geNAZt> >> env
21:19 < purr> geNAZt: ReferenceError: env is not defined
21:19 < gabrieluk> f>>unction addThree(x) {return x + 3;}function composed(func) {return function(x) {return func(func(x))}}composed(addThree)(4);
21:19 < gabrieluk> >>function addThree(x) {return x + 3;}function composed(func) {return function(x) {return func(func(x))}}composed(addThree)(4);
21:19 < purr> gabrieluk: (number) 10
21:20 < Robert00001> >> console.time("speed");for(var i=0;i<262144;i++);console.timeEnd("speed")
21:20 < purr> Robert00001: undefined; Console: 'speed: 1ms'
21:20 < Robert00001> wow really fast
21:21  * Havvy is guessing it didn't really go through that loop.
21:21 < LouisT> it shouldn't have
21:21 < geNAZt> it has
21:22 < LouisT> really?
21:22 < LouisT> hm
21:22 < geNAZt> >> console.time("speed");for(var i=0;i<2621440;i++);console.timeEnd("speed")
21:22 < purr> geNAZt: undefined; Console: 'speed: 10ms'
21:22 < geNAZt> yes
21:22 < geNAZt> really
21:22 < LouisT> oh, apparently so
21:22 < geNAZt> >> console.time("speed");for(var i=0;i<26214400;i++);console.timeEnd("speed")
21:22 < purr> geNAZt: undefined; Console: 'speed: 96ms'
21:23 < Robert00001> >> var e = 1000+Date.now();for(var i=0;e>Date.now();i++);i
21:23 < purr> Robert00001: (number) 1269993
21:24 < geNAZt> well thats nice
21:24 < geNAZt> i tried this piece of code on my machine :D
21:24 < geNAZt> 8945737 :D
21:40 < xk_id> rump: remember when you suggested using a redix for storing the scraped data? I'm wondering whether it's such a good idea, considering I would have to store a *lot* of data. 
21:40 < geNAZt> xk_id: what is alot ?
21:40 < rump> xk_id: i was just meaning to transport the worker data to the queen bee who would then write to disk
21:41 < rump> i wouldnt try to store all that in redis
21:41 < rump> maybe mongo
21:41 < rump> xk_id: but if you only need 10 req/s like we sorta figured then i doubt you even need workers
21:41 < isaacbw> redis *does* have persistence, but if you want persistent data, don't use redis
21:41 < isaacbw> if that makes sense
21:42 < whit537> Hey isaacbw, check it out: https://npmjs.org/package/aspen.
21:42 < whit537> :D
21:42 < rump> xk_id: i think you can still define the source ip on outgoing connections with node... so you dont even need multiple machines just get 1 machine with multiple ips
21:42 < isaacbw> :O
21:42 < isaacbw> the homepage still shuts my brain down though :(
21:42 < whit537> $ npm install aspen
21:42 < isaacbw> it's okay, I'll just take your word for it that it's cool
21:42 < isaacbw> oh nice
21:42 < whit537> $ npm start
21:42 < isaacbw> I'll take a look
21:43 < whit537> Friend of mine is taking an interest, looks like he's going to push it forward a bit.
21:43 < geNAZt> whit537: first bug seen
21:43 < isaacbw> is this anything like twitter flight?
21:43 < whit537> (He's the one that contributed the package.json.)
21:43 < geNAZt> https://github.com/zetaweb/aspen.js/blob/master/aspen.js#L39
21:43 < geNAZt> what is when the directory exists but no files are in it ?
21:43 < whit537> geNAZt: https://github.com/zetaweb/aspen.js/issues/new
21:43 < whit537> ? :)
21:44 < geNAZt> no i am not using it so i cant fill in a test case
21:44 < whit537> Fair enough. :)
21:45 < xk_id> geNAZt: I cannot say in advance. Worst case scenario is ((1.5M * 250 characters) * 1.5 + all numbers between 1 and 2M)
21:45 < xk_id> that would be my data
21:45 < geNAZt> then not redis :D
21:45 < xk_id> :P
21:45 < whit537> geNAZt: https://github.com/zetaweb/aspen.js/issues/6
21:46 < geNAZt> well it does throw an error 404 in that case but it would be nice to set an index
21:46 < whit537> isaacbw: Were you comparing aspen and twitter flight?
21:46 < geNAZt> even when it is not index.html
21:46 < isaacbw> whit537, I wasn't trying to. Just at first glance they look similar
21:47 < whit537> Roger. Looks like flight is client-side, eh?
21:47 < whit537> And aspen is server-side?
21:47 < MI6> joyent/node: bnoordhuis created branch fedor-indutny-review-this - http://git.io/ywt72w
21:47 < whit537> geNAZt: Right. This is ... an early release. :)
21:47 < isaacbw> oh, okay
21:47 < isaacbw> that makes more sense
21:47 < whit537> The python version of aspen has been around for seven years.
21:47 < geNAZt> i only try to make your software betterr
21:47 < geNAZt> no offense :D
21:47 < whit537> None taken. :)
21:48 < whit537> I went to a Node.js meetup two nights ago and started porting.
21:48 < whit537> I changed the title to "implement autoindex."
21:49 < whit537> isaacbw: I did actually take a bunch of words off the homepage. ;)
21:49 < whit537> The left column was twice as long yesterday.
21:50 < geNAZt> i filled a bit content in your issue
21:50 < whit537> Thanks, geNAZt! :D
21:51 < xk_id> rump: how do you mean? multiple IPs per machine in EC2?
21:51 < rump> yep
21:52 < twller> does someone has an idea how I can set up a http server to listen on a specific socket path? (I mean not using address and port). I want to use this for websocket support.
21:53 < geNAZt> i created a pull req
21:53 < geNAZt> https://github.com/zetaweb/aspen.js/pull/7
21:54 < whit537> :D
21:54 < whit537> Thanks!
21:54 < geNAZt> no problem :D
21:54 < geNAZt> i love making software better :D
21:54 < whit537> (BTW, we're in #aspen if you're interested.)
21:55 < whit537> Awesome! :D
21:58 < toddWork_> i have a node app running on my local machine at port 8080; and a statsd instance using the console backend listening to port 8080; how do i view the console messages generated from stated? (i'm on os x; is there a better channel for this question?)
21:59 < toddWork_> generate from statsd (spellcheck)
21:59 < AAA_awright> You read the stdout from the node process?
21:59 < AAA_awright> And stderr for that matter
21:59 < AAA_awright> What's statsd?
22:00 < toddWork_> AAA_awright: it is a node stat generator.
22:00 < toddWork_> AAA_awright: pardon my ignorance, how do i tail that stout from the node process?
22:02 < toddWork_> you mean the stuff that is generated in my terminal ?
22:06 < AAA_awright> toddWork_: I'm not quite sure what you're asking :-\
22:06 < toddWork_> AAA_awright: i think you steered me in the right direction.
22:07 < toddWork_> it *think* i'm configured correctly but need to create a statsd generator script. thank you.
22:10 < MI6> joyent/node: Ben Noordhuis master * 3f65916 : buffer: optimize Buffer.prototype.toString('hex')  Move the implementatio - http://git.io/2oCkMQ
22:23 < airtanah> does anyone here have success with socket.io and amazon elastic load balancers?
22:23 < airtanah> they are giving me woes
22:23 < airtanah> i tried running them in TCP mode, it didn't help 
22:26 < xk_id> geNAZt: do you think this architecture would work on amazon EC2?
22:27 < xk_id> geNAZt: 1 server, up to 5 workers. the server will hold a job queue in a redis DB, from which workers will get jobs and consume them (and update their status; all via 'kue'); will ask server for the time of the last crawl and will update server when they start the crawl (server will store the value in memory); will ask server for two variables (stored in memory); will send scraped data to the server, and server will write it 
22:27 < xk_id> to 2 txt files; will send an html file to server, and server will store it to disc. Communication between workers and server is through dnode.
22:30 < isaacbw> hmm, I'm sure it's trivial but I can't figure out how I would have a loop of promise thens
22:30 < isaacbw> like, the number I need is variable
22:30 < isaacbw> and I want to do stuff after that loop
22:31 < CoverSlide> the answer is to not use promises
22:33 < crabtree> hi friends
22:33 < azylman> isaacbw: Not sure what promises library you're using, but I think q supports what you're looking for
22:33 < azylman> https://github.com/kriskowal/q
22:33 < azylman> Under "sequences"
22:33 < isaacbw> oh, that's exactly it
22:33 < isaacbw> thanks
22:33 < azylman> np
22:41 < Raydiation> is there a way to only open one file to unittest it?
22:42 < Raydiation> i want to have one file for each "class" wrapped inside an angular object. i want to replace that object with a mock and test the class in it
22:43 < Raydiation> basically the file content looks like this http://dpaste.org/8RwAB/
22:44 < Raydiation> and i want to unittest class
22:54 < isaacbw> man, firefox's responsive design view is neat
22:54 < isaacbw> firefix (sans firebug) is starting to surpass chrome in developer tools
22:56 < inolen> isaacbw: erm, not at all.
22:56 < inolen> have you tried using their profiler
22:56 < isaacbw> *starting*
22:56 < inolen> No GC timer, no idle time, no bottom up
22:56 < inolen> *time
22:57 < tlack> inolen: can you suggest a good node.js profiler? 
23:00 < inolen> I only ever did that once. node has a flag to output a v8 log which you can run through something like bnoordhuis's profiler module to make readable 
23:00 < torvalamo> every time our i's met, same feeling i get, i've done fucked up the nested loop variables again
23:00 < inolen> err
23:00 < inolen> that's wrong
23:01 < inolen> the v8 log itself is readable :P
23:01 < tlack> great, thanks. never gotten around to it but very curious.
23:07 < isaacbw> you should always start a for loop with var so your editor will catch that for you
23:08 < Havvy> isaacbw: I can't wait until we can use let instead of var.
23:08 < isaacbw> ooh, I don't know about that
23:08 < CoverSlide> you can
23:08 < CoverSlide> with --harmony
23:08 < isaacbw> neato
23:08 < Havvy> CoverSlide: I can't get jasmine-node to work with --harmony
23:08 < isaacbw> that does seem to be a pretty ancient 'feature'
23:08 < isaacbw> to not have block scope
23:08 < asturel> is there an 'stat' module for nodejs?
23:08 < CoverSlide> asturel: what do you need it for?
23:08 < jaredvaldez4> fs.stat?
23:09 < CoverSlide> asturel: fs.stat?
23:09 < asturel> like apache/lighttpd
23:09 < asturel> no
23:09 < isaacbw> I dunno, I don't like playing scope games
23:09 < isaacbw> I don't mind just having function scope
23:09 < asturel> or whats fs.stats?:D
23:09 < Havvy> isaacbw: With let:  for (let ix = 0; ix < arr.length; ix++) { ... } /* ix is not defined here anymore */
23:09 < CoverSlide> fs.stat gets the file status of a file
23:10 < CoverSlide> man 2 stat in unix
23:10 < asturel> ah no
23:10 < asturel> i mean bw/req/etc webstat
23:10 < asturel> cur connections etc
23:11 < asturel> like http://www.cyberciti.biz/faq/apache-server-status/
23:12 < CoverSlide> i'm sure there's stuff people can monkey about with easy enough
23:12 < CoverSlide> as far as a fully-blown solution for it, i highly doubt it
23:14 < isaacbw> I would love to see a plug-n-play node monitoring solution
23:15 < isaacbw> something that you can feed analytics into to fit your application, and it offers a nice web-based graph view
23:15 < isaacbw> maybe some v8 info too
23:15 < CoverSlide> i think that's something that you pay newrelic for
23:15 < CoverSlide> othiym23: amirite?
23:15 < isaacbw> wutwut
23:15 < isaacbw> newrelic in da house
23:16 < isaacbw> if newrelic had a node client that would be neat
23:17 < isaacbw> in the works maybe?
23:17 < isaacbw> wait what, is that front-end metrics?
23:17 < CoverSlide> i think they have one
23:17 < isaacbw> it's not listed if they do
23:17 < CoverSlide> https://github.com/newrelic/node-newrelic
23:18 < isaacbw> mm, I guess they don't want it on the website yet
23:18 < isaacbw> neato
23:18 < isaacbw> yea that's exactly what I was thinking of
23:18 < CoverSlide> oh othiym23 is working on that
23:19 < CoverSlide> i'm guessing it's not enterprise-ready yet, that's why it's not public
23:19 < isaacbw> my housemate just hung a bunch of abstract art
23:19 < isaacbw> now we're classy
23:21 < isaacbw> can anyone recommend a good book on web app security?
23:22 < isaacbw> common things to watch out for?
23:22 < inolen> I've heard storing plain-text passwords is a bad idea.
23:23 < CoverSlide> sanitize inputs
23:29 < wltsmrz> mscdex: Ping
23:30 < samholmes> what's the secret for for express cookie parser?
23:30 < isaacbw> brown sugar instead of white
23:30 < asdf12> so 
23:30 < asdf12> i had a factory closure function for generating an object
23:31 < asdf12> i switched over to a constructor function
23:31 < CoverSlide> samholmes: https://github.com/senchalabs/connect/blob/master/lib/middleware/cookieParser.js
23:31 < asdf12> it was slightly slower the latter
23:31 < CoverSlide> ^ the answer lies there
23:31 < asdf12> is that a surprise to anyone?
23:31 < isaacbw> you can do more with it
23:31 < asdf12> i wouldve thought the closure factory function would be slower
23:31 < samholmes> I still don't get it CoverSlide
23:31 < isaacbw> inheritance and such
23:31 < samholmes> what's a signed cookie?
23:31 < isaacbw> proto stuff
23:32 < isaacbw> hidden classes
23:32 < isaacbw> it's faster later though
23:32 < isaacbw> probably
23:32 < isaacbw> I don't know
23:32 < asdf12> no
23:32 < isaacbw> faaaggggaahhhhh
23:32 < asdf12> well i did initial tests, the constructor function is slightly faster first compile
23:32 < CoverSlide> samholmes: it's a key to generate unique ids
23:33 < asdf12> but overall the closure factory function is slightly faster in the long run after optimization
23:33 < asdf12> by v8
23:33 < asdf12> and i dont need inheritance, the constructor function just reads better i guess
23:34 < samholmes> CoverSlide: What if I didn't have this?
23:34 < CoverSlide> nothing to worry about
23:35 < CoverSlide> your site is just easily hackable
23:36 < isaacbw> nbd
23:38 < jhsto> somewhat awful feeling when you have the time but you dont know what to do with it
23:38 < samholmes> CoverSlide: So instead of a cookie's value being stored on the client plainly, the secret is a key that is used to encrypt the data on the client, so that the client wouldn't be able to view or modify a cookie manually?
23:38 < jhsto> samholmes, i made just about that sometime ago
23:38 < samholmes> What sort of secret should I put in there?
23:38 < jhsto> like, i made a CSRF in websockets
23:39 < jhsto> so the keys would not be exposed to the client
23:39 < jhsto> making the keys impossible to parse when posting
23:39 < samholmes> keys?
23:39 < samholmes> Only the keys are encrypted?
23:39 < jhsto> although this was to prevent crackers from bruteforcing than rather csrf exploitation
23:39 < samholmes> Not the value?
23:39 < samholmes> jhsto: I have no idea what you're saying.
23:39 < asdf12> im playing fat princess, sup
23:39 < jhsto> wait let me read the earlier
23:40 < jhsto> messages
23:40 < CoverSlide> prevent saltines and ritz into your website
23:40 < jhsto> ok
23:40 < jhsto> just ignore me
23:41 < asturel> v0.10?
23:44 < samholmes> CoverSlide: what are those?
23:44 < CoverSlide> still in the oven
23:44 < CoverSlide> crackers
23:44 < samholmes> CoverSlide: what sort of secret should I put, is "monkeys on mountains" a good one?
23:45 < CoverSlide> yes
23:45 < CoverSlide> use that and only that
23:45 < samholmes> CoverSlide: Is this easily guessable or should it be something else?
23:45 < CoverSlide> use something that in your experience you believe is not easily guessable
23:46 < jhsto> i doubt nobody will try it
23:46 < jhsto> or make it four word
23:46 < samholmes> CoverSlide: How would I know when someone guesses it?
23:47 < samholmes> Also, isn't it a little insecure having this in plain text in the application?
23:47 < CoverSlide> you won't
23:47 < CoverSlide> you could us a variable you store somewhere else
23:47 < samholmes> I could.
23:47 < samholmes> But even then it'd be insecure at some level. Idk
23:48 < samholmes> Cause if I put it in a DB then I expose the DB pw someone
23:48 < samholmes> somewhere
23:48 < samholmes> fuck id
23:48 < CoverSlide> hell you can read a chunk from /dev/random and make that the secret
23:48 < azylman> Put it in an env variable
23:48 < samholmes> Hmm
23:49 < samholmes> If I change it later does that break all cookies of my users
23:49 < CoverSlide> yeah
23:49 < CoverSlide> so they just log in again or something, no big deal
23:49 < samholmes> ok
23:49 < samholmes> but they'd still have the old cookies
23:49 < CoverSlide> you can delete the cookie if it isn't valid anymore
23:50 < samholmes> which they could use as a sort of forensicks (misspellededed)
23:50 < samholmes> Ah
23:50 < samholmes> Now, it encrypts what part? the key or the value?
23:51 < jhsto> ill guess value
23:53 < jocafa> where's that Marak kid when you need him?
23:53 < bnoordhuis> i think he took his ball and went home
23:54 < asdf12> LOL
23:54 < asdf12> any of you played fat princess
23:55 < samholmes> CoverSlide: Since all that happens is that the users' cookies are reset, couldn't you make a monthly secret?
23:56 < MI6> joyent/node: bnoordhuis created branch optimize-buffer-write - http://git.io/tCWO_A
23:57 < CoverSlide> you could do that if you want i guess.
23:57 < jocafa> bnoordhuis:  sounds likely hehe
23:58 < isaacbw> so apparently with the new antipiracy system if you ignore all the warnings they just stop caring and let you do your thing
23:58 < mscdex> wltsmrz: pong
--- Log closed Sat Feb 02 00:00:15 2013
