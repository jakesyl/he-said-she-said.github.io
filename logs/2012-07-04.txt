--- Log opened Wed Jul 04 00:00:28 2012
00:05 < Spion> bwen, s5fs: https://gist.github.com/3044268
00:05 < Spion> note that I know whats the correct way to do it. I'm just saying that its easy to make a mistake.
00:06 < bwen> Spion: sorry I didnt know you meant the node module cluster. I though you meant the concept of having a cluster of webservers... I didnt use this module yet
00:07 < Spion> the same thing applies. writing code which works fine when there is only one node server can easily break once you try to run a cluster of nodes
00:09 < dmilith> https://gist.github.com/0fb9139d793c2b9940a4
00:10 < dmilith> any ideas why it happens on bsd but not on osx?
00:12 < dmilith> 0.8.1, coffee 1.3.3
00:12 < dmilith> omg.. i got it
00:13 < zackattack> i clearly have memory leaks all over my code
00:46 < dnnsmanace> what is a good way to generate a unique random file name?
00:47 < mkowens> uuid4
00:48 < dnnsmanace> elaborate pls :)
00:54 < dnnsmanace> how to generate something like this: 0cb0923845de76bb07775ad87a9bb50af9984f41
00:55 < dnnsmanace> found it https://github.com/broofa/node-uuid
01:23 < owen1> can anyone get the pdf of this talk? http://lanyrd.com/2012/nodeconf/swpxf/
01:33 < owen1> can someone explain this slide? http://imgur.com/a/9vFGa#6  is it possible to write this on the client? is it done with browesrify?
01:40 < Owner> owen1~# if browserify is how you get request require?
01:40 < Owner> err require*
01:41 < Owner> http://imgur.com/a/9vFGa#13
01:42 < gkatsev> there's browser-request
01:43 < Owner> "There is a magical project by @substack called browserify that makes domnode possible. It lets you write code in client side JS that looks like node code"
01:56 < jfroma_> I found my problem with https, the version i am using of node.js (v0.6.19), doesnt throw an error when I do:  require("crypto").createCredentials({ ca: "stupid thing with bad line endings" } )
02:37 < tomshreds> wow 728 people idling
02:37 < tomshreds> this is beautiful
02:38 < jamesd_> were all just trying to find an error in an anonymous function declaration or some other mismatch of  {'s and ['s 
02:38  * stelcheck lol'ed
02:38 < tomshreds> haha
02:39 < myndzi> i've DONE IT!
02:40 < myndzi> don't forget process.nextTick callbacks to core libs
02:40 < myndzi> that's my most recent favorite
02:42 < myndzi> i wonder why postgres needs gigabytes of memory to load a 140mb .sql file
02:44 < Owner> tomshreds~# we are not people
02:45 < tomshreds> that explain everything
02:48 < myndzi> tell me, do you think you are not people ?
02:51 < waerloga> eliza bot!
02:52 < myndzi> haha, i couldn't remember an exact phrase, but i'm touched that somebody got the joke :)
02:52 < myndzi> i actually do have an eliza bot and every time i run it people are just like wtf
03:15 < tjholowaychuk> is there a reference to the request object from the response?
03:15 < tjholowaychuk> I found res.socket.parser.incoming but that's obviously really hacky
03:17 < timoxley> hm, trying to install a private module with npm, gets stuck on the 'preinstall private-module'
03:17 < timoxley> ugh
03:20 < timoxley> is there something I have forgotten to do to get a private repo to work? hm.
03:20 < tjholowaychuk> I found res.socket.parser.incoming but that's obviously really hacky
03:20 < owen1> Owner: so it's browerify, i assume
03:20 < tjholowaychuk> wups
03:24 < Owner> owen1~# not sure
03:35 < timoxley> oh. it just takes a really long time to auth. wtf. nvm.
04:03 < Electron> hi
04:03 < Electron> I would like to get involved in Node JS
04:03 < Electron> what programming languages do I need to work on it
04:04 < Electron> optimize it
04:10 < tim_smart> Electron: C, C++, javascript
04:24 < Electron> ok
04:24 < Electron> I know C, C++ and JavaScript
04:24 < Electron> how do I get started on it
04:24 < Electron> what can I do to help
04:25 < Electron>  tim_smart ping
04:25 < tim_smart> Electron: Take a look at the issue tracker
04:26 < Electron> ok
04:26 < Electron> how do I see it
04:26 < tim_smart> https://github.com/joyent/node/issues
04:26 < tim_smart> I think
04:26 < Electron> thank you
04:48 < octane--> i am getting "Error: read ETIMEDOUT" intermittently and have no idea why - anyone experience that before?
05:27 < cconstantine> yo
05:29 < cconstantine> I'm looking to get some testing up in my web-side coffeescript/js from a node.js/express webapp.  what have you guys had luck with?
05:31 < timoxley> cconstantine mocha http://visionmedia.github.com/mocha/
05:32 < cconstantine> reading.  thanks :)
06:30 < pecke01> cconstantine: I use mocha as well. Run it as part of my build setup on TeamCity. Works great
06:30 < cconstantine> fantastic
06:30 < cconstantine> I think I've figured out how to get my main coffeescript asset (served with snockets) to be usable ouside the browser
06:31 < cconstantine> but I'm having a hard time getting mocha to handle the coffeescript
06:32 < cconstantine> http://stackoverflow.com/questions/9940838/cannot-run-mocha-with-coffeescript
06:32 < cconstantine> got it
06:33 < cconstantine> kinda
06:39 < cconstantine> hmm, I'm unsing snockets to give me a require-like ability
06:39 < cconstantine> but when I'm not compiling through snockets I need to do a node.js require()... how do I do that only when not in a browser?
06:40 < alex4nder> cconstantine: you want to detect you're not in a browser, and do a require?
06:40 < cconstantine> yeah
06:40 < cconstantine> I can do the detect thing, but coffeescript is making a new variable for me that makes it break in the browser
06:42 < cconstantine> I guess I could do an outer script just for snockets
06:42 < cconstantine> that is just the requires
06:42 < alex4nder> cconstantine: http://coffeescript.org/#embedded
06:43 < alex4nder> do your dirty work
06:43 < cconstantine> my thing doesn't solve anything
06:43 < cconstantine> but that might
06:45 < cconstantine> that did it
06:45 < cconstantine> dirty, but it works
06:46 < alex4nder> yup
06:48 < joaojeronimo> anyone got this weird error with node v0.8.1 and express v3.0.0beta5: Error: Cannot find module 'methods' ? 
06:49 < joaojeronimo> the full error: http://pastebin.ubuntu.com/1074382/
06:49 < joaojeronimo> my app was working fine before I updated node...
06:49 < joaojeronimo> (the version I was using before was v0.6.19)
06:50 < vrlogrs> hi guys
06:50 < vrlogrs> have a noobish question ..
06:50 < vrlogrs> are all function calls treated as asynchronous calls in node.js ?
06:52 < cconstantine> vrlogrs, they frequently are by convention... but it isn't strictly required
06:52 < cconstantine> ie, functions can return values
06:52 < cconstantine> but there is no way to convert an async interface into a blocking interface
06:53 < vrlogrs> could you tell me if R5_output can be called before the if statement finishes?
06:53 < vrlogrs> http://pastebin.com/V9f4fr2c
06:54 < alex4nder> cconstantine: you can convert an async interface into a sync interface pretty easily by using node-fibers.
06:54 < alex4nder> well, it'll appear synchronous
06:55 < alex4nder> and the code can be written as such
06:55 < cconstantine> alex4nder, abomination!
06:55 < alex4nder> haha
06:56 < alex4nder> I like my code not looklike like callback cole-slaw.
06:56 < alex4nder> er looking like
06:56 < cconstantine> then why use node?
06:56 < cconstantine> vrlogrs, no idea
06:56 < vrlogrs> :S
06:57 < alex4nder> cconstantine: what does the coding style have to do with node?
06:57 < vrlogrs> cconstantine: is there something confusing?
06:57 < alex4nder> I use node because it's easy access to v8, and it has nice APIs.
06:57 < cconstantine> alex4nder,  you just tend to get lots of callbacks in node
06:57 < cconstantine> vrlogrs, I don't know what R5_output does
06:57 < alex4nder> cconstantine: with node fibers you can avoid coding like that
06:58 < vrlogrs> i just want to know if there's a chance R5_output will be called before the if-statement before it finishes
06:58 < vrlogrs> http://pastebin.com/zPGuGcyC
06:58 < cconstantine> vrlogrs, the if block will fully execute before that function
06:58 < alex4nder> yes
06:59 < cconstantine> but callbacks registered in the if block (if any) may not have run yet
06:59 < vrlogrs> oh
07:00 < vrlogrs> so, if a function like R5_finish had a blocking function in it ... there's a chance R5_output does get called before R5_finish is complete?
07:00 < alex4nder> what
07:01 < alex4nder> vrlogrs: there's a reason you don't see any of your typical locking primitives in node
07:01 < alex4nder> you're not programming with pthreads
07:02 < alex4nder> what is this code for anyway?
07:03 < vrlogrs> alex4nder: 
07:03 < vrlogrs> http://209.141.47.151/chess
07:04 < vrlogrs> been working on it for the past few weeks now
07:04 < vrlogrs> cleaning up code and making sure there are no bugs in the backend before moving on to some frontend stuff
07:05 < alex4nder> ah
07:10 < zomg> vrlogrs: why does it require websockets? :(
07:10 < vrlogrs> node.js .. wanted to avoid ajax calls
07:10 < zomg> Why not just use socket.io which falls back to long polling XHR or other options? :)
07:11 < vrlogrs> ahh .. havent looked into it yet :S
07:11 < vrlogrs> are websockets not good enough though?
07:12 < alex4nder> good enough for what?
07:13 < vrlogrs> for most browsers
07:13 < vrlogrs> i thought websockets were here to stay 
07:21 < _Tristan> Hi. Is there something wrong with my package.json file? Formidable doesn't seem to load. http://pastebin.com/MyW35uDq
07:24 < [AD]Turbo> hi there
07:32 < niftylettuce> Deliver CDN-hosted assets that are minified, mangled, optimized, and concatenated with Express CDN @ https://github.com/niftylettuce/express-cdn (there is an article on Hacker News too! look under 'newest')
07:32 < niftylettuce> automatically uploads them to S3 too for you :)
07:38 < _Tristan> I made something which is either useless or awesome with node.
07:41 < wltsmrz> What is it, _Tristan?
07:42 < _Tristan> sort of like file hosting, but without the file hosting... http://streamr.nodester.com/
07:43 < ^3rdEden> http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener says its not avaialbe on all platforms, but it doesn't mention which platforms. Any known failures?
07:43 < _Tristan> ^3rdEden: look under "availability"
07:44 < ^3rdEden> _Tristan that sections doesn't say where it doesn't work
07:45 < _Tristan> anything that isn't listed probably won't work.
07:46 < wltsmrz> Is there a reason people still include index.js only to link to some lib/* script, niftylettuce?
07:46 < _Tristan> wltsmrz: what do you think? Useless or awesome?
07:46 < wltsmrz> (I mean, instead of using the 'main' property in package.json)
07:46 < wltsmrz> One sec _Tristan!
07:47 < gildean> _Tristan: that's actually kind of fun, how does it work?
07:48 < _Tristan> when a download connection is opened, it sends a message to the uploader telling the client to submit the form, then it pipes the uploader to the downloader
07:49 < niftylettuce> wltsmrz: so in examples u can simply do require('../')
07:49 < gildean> _Tristan: what does it utilize for the file-transfer?
07:50 < _Tristan> it uses formidable for the upload
07:52 < wltsmrz> Pretty neat I suppose
07:54 < ^3rdEden> _Tristan then it pretty much works everywhere i guess ;)
07:54 < _Tristan> it should, yeah :)
08:14 < _Tristan> this thing is perfect for sending movies and copyrighted content...
08:54 < omercnet> howdy
08:55 < omercnet> I cloned a git project
08:55 < omercnet> and can't seem to be able to open the folder tree
08:55 < omercnet> can't browse the files, the little arrow hangs with this loading icon near it
08:55 < omercnet> I can use the console to open the files
08:55 < omercnet> but can't interact with the PROJECT FILES tab
08:58 < strk> npm ERR! cb() never called!
08:58 < strk> any idea about what could trigger that on "npm install" ?
09:02 < strk> npm cache clean # fixed
09:29 < flexd_> So..
09:29 < flexd_> Hi, I like node :o
09:30 < yawnt> hi, me too, i started noding when i was 4 and never stopped :'(, but we are here to help
09:30 < yawnt> you'll get out of it, i swear
09:30 < flexd_> I actually haven't broken anything in a horrible way yet, just playing with websockets :D
09:31 < flexd_> I was actually googeling for a few minutes why the node server wasnt serving out socket.io.js.. but it turns out I should not be coding that early in the morning and that it's wise to actually start the server up before you try to access anything :P
09:34 < AvianFlu> flexd_, excellent advice! :D
09:41 < flexd_> ^_^
09:45 < zackattack> >_<
09:45 < zackattack> ^_^
10:00 < gildean> made my first nodejs app and dumped it to github
10:01 < gildean> not all working yet, but mostly: https://github.com/gildean/NodeBlog
10:03 < radiodario> i'll be watching
10:03 < wltsmrz> req.body.salt?
10:04 < gildean> wltsmrz: you set your own salt when you create the user
10:04 < flexd_> gildean: cool.
10:06 < wltsmrz> Like a double password?!
10:08 < wltsmrz> Looks better than most first projects, gildean :thumbsup:
10:09 < NodeX> if one pushes a script into a browser via socket.io (making the client write it to the head) does it get automagically evaluated by the browser?
10:09 < gildean> wltsmrz: no, not really, it's just when you create a user you have to make a hash with a salt, so i decided that the salt could be posted in the form
10:09 < gildean> maybe the salt should then be saved as a file, and require that in the app
10:22 < booyaa> heh loving playing with my raspberry pi
10:22 < booyaa> got php and asp.net working. next up node.js
10:29 < Trindaz> anyone here to answer node questions?
10:29 < RushPL> guys, how would one "upgrade" Socket's read/write function to wrap it with zlib's inflate / deflate? Write is easy, but for example read event? I have little trouble doing it the correct way as I do not know the correct way. :)
10:29 < Trindaz> I'm trying to replicate a curl command in node and can't seem to get the same results
10:29 < wltsmrz> What's the curl command?
10:30 < Trindaz> curl --header "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11" http://www.mywebsite.com
10:30 < Trindaz> then in node i use http.request with code something like
10:30 < Trindaz>     var options = url.parse(location);     options.headers = {         "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11",         "Accept": "*/*"     }
10:30 < Trindaz> but I get a completely different result to when I use curl
10:31 < wltsmrz> Allow me to experiment
10:32 < Trindaz> i'd love to know how to view the actual raw http request that node sends out
10:32 < wltsmrz> Make an echo server
10:33 < Trindaz> very good idea
10:33 < gblock> Trindaz: create a proxy
10:33 < booyaa> Trindaz: what module you using? request might be able to help you
10:33 < Trindaz> http.request
10:33 < booyaa> mikeal's module
10:33 < gblock> Trindaz;: You can use nock to intercept as well.
10:33 < Trindaz> i gave up on the request module that's so common. I forget exactly why but had some problems with it a few weeks back
10:33 < gblock> Trindaz: connect middleware might be another option
10:34 < gblock> Trindaz: If connect is present
10:34 < Trindaz> well it isn't yet but I could use it if I needed it. is that really necessary though? doesn't http.request have some kind of .toString() that'll show me what request is being sent out?
10:34 < Trindaz> how annoying
10:35 < gblock> Trindaz: try nock
10:35 < Trindaz> to echo the request?
10:35 < gblock> Trindaz: nock will let you intercept
10:37 < gblock> Trindaz: we also have a mock server in our azure module tests that you could pull. It basically sets up a proxy and lets you record request / responses.
10:37 < Trindaz> thanks gblock. who's we?
10:38 < gblock> npm install azure
10:38 < gblock> Trindaz: we is the azure sdk team
10:39 < gblock> Trindaz: we publish an npm module for deploying apps to Windows Azure / accessing azure services
10:39 < Trindaz> microsoft's cloud platform?
10:39 < gblock> Trindaz: right, I work on that :-)
10:39 < Trindaz> wow MS are the last people I'd expect to see in here
10:39 < gblock> Trindaz: github.com/windowsazure/azure-sdk-for-node
10:39 < Trindaz> cool
10:39 < gblock> Trindaz: times have changed
10:39 < Trindaz> indeed they have!
10:40 < gblock> Trindaz: http://codebetter.com/glennblock/2012/06/07/windowsazure-just-got-a-lot-friendlier-to-node-js-developers/
10:40 < gblock> Trindaz: I work at Microsoft focused on node.js in Azure
10:40 < gblock> Trindaz: Anyway, if you look in our tests in source you will see we have this mock server.
10:41 < gblock> Trindaz: which sets up a proxy. You are welcome to try to use it. It's under Apache 2
10:41 < Trindaz> ok thanks gblock
10:41 < gblock> Trindaz: we're trying to rip it out into it's own module as it is generally useful
10:41 < gblock> Trindaz: sure
10:41 < Trindaz> it seems like overkill to me right now - i was hoping to get a solution in a few moments using a quick trick or two without having to install a mocking server. if I'm going to go to tall that trouble I'd probably just quickly code something myself to listen on a port and echo everything it sees
10:42 < gblock> try nock
10:42 < gblock> nock is lightweight
10:42 < gblock> the echo server is another idea of course…though with connect you could right your own middleware that sits in the middle
10:43 < gblock> Trindaz: I agree it is probably overkill for why you are doing
10:43 < gblock> Trindaz: It is really designed for integration testing / simulating the response on the server based on the request.
10:50 < zackattack> Trindaz:  did you ever solve your problem?
10:50 < Trindaz> hey yes i did thanks zackattack
10:51 < zackattack> you're welcome.  what solution did you end up using?
10:51 < Trindaz> in the end I wasn't actually replicating my curl request properly
10:51 < zackattack> oh.  what was the issue?
10:51 < Trindaz> it just so happened that the site I was sending requests to had case-sensitive URLs if you can believe it
10:52 < zackattack> ah, case-sensitive URLs
10:52 < Trindaz> so if I used the wrong case I'd get a 301 pointing me to a url that was identical except all lower case
10:52 < Trindaz> first time i've encountered that
10:52 < Trindaz> so it's all my bad for not being more thorough with the request header - i should have known right off the bat
10:53 < zackattack> don't be so hard on yourself
10:53 < zackattack> we only get better at programming through trial and error
10:53 < Trindaz> thanks zack!
10:53 < zackattack> some guru probably has a saying that you need to make a mistake N times before you stop making it 
10:54 < zackattack> yw
10:55 < Trindaz> zack - ur an outlier on the friendliness meter based on my previous experiences in here. appreciated!
10:56 < wltsmrz> Hey I resent that!
10:57 < Trindaz> ha sorry wltsmrz
11:01 < tim_smart> Trindaz: Node community is generally a lot more friendly than most programming communities
11:02 < tim_smart> Try learning C and asking questions in the C channel, you will get uber trolled.
11:02 < Trindaz> tim_smart I'd agree. I didn't meant to touch a sensitive issue if it is one.
11:02 < tim_smart> Hah it is just an observation
11:07 < zackattack> i think that if we were nicer to each other we'd have more mental bandwidth for thinking and problem solving
11:30 < bnoordhuis> zackattack: being nice is for the weak
11:31 < zackattack> what makes you say that?
11:32 < tim_smart> zackattack: Hopefully sarcasm
11:33 < zackattack> sarcasm is witty when defended
11:33 < zackattack> i attacked his claim
11:34 < wltsmrz> Zackattacked you might say
11:35 < zackattack> i feel like i'm returning to the cave
11:42 < CIA-93> node: Ben Noordhuis master * r41b129f / (765 files in 233 dirs): Merge remote-tracking branch 'origin/v0.8' (+22 more commits...) - http://git.io/BUI9ZQ
11:43 < bnoordhuis> zackattack: i was half kidding but there is such a thing as being too nice
11:43 < bnoordhuis> if people are being stupid, they should be called out for it
11:44 < tim_smart> Nothing like a bit of tough love
11:44 < tim_smart> Especially if someone comes in here asking "how do I create http server plox
11:44 < tim_smart> "
11:45 < tim_smart> You can also see a bit of rowdiness if you come in here demanding co-routines in node.
11:45 < CIA-93> node: Mathias Bynens master * r2ba9645 / (lib/punycode.js test/simple/test-punycode.js): punycode: update to v1.1.1 - http://git.io/QVIaig
11:51 < RushPL> can I report bug in documentation in here? I was scratching my head on how to sync a zlib stream until I found out that documentation is missing mention of the flush() function http://nodejs.org/api/zlib.html - it is in the source code fortunately :)
11:57 < bnoordhuis> RushPL: please use the github issue tracker
12:04 < RushPL> bnoordhuis: all right
12:07 < CIA-93> libuv: Ben Noordhuis v0.8 * rbe09be7 / src/unix/freebsd.c : unix: fix memory corruption in freebsd.c - http://git.io/LuFQqw
12:08 < CIA-93> node: Ben Noordhuis v0.8 * r4fbe7a5 / (deps/uv/src/unix/freebsd.c deps/uv/test/test-hrtime.c): deps: upgrade libuv to be09be7 - http://git.io/-WC8QA
12:11 < NodeX> is socket.io safe to listen on outside document.ready ?
12:30 < flexd_> uh, do you usually add the node_modules to your git repositories?
12:30 < flexd_> Or can you just magically do npm install or something later?
12:30 < flexd_> I have no special files, just a .js
12:31 < flexd_> Just needing to share some code with someone.
12:32 < wyksztalcioch> hi all :)
12:32 < wyksztalcioch> i've got small problem with npm
12:32 < wyksztalcioch> i instaled uglify-js module via npm, but jake doesn't see this: Error: Cannot find module 'uglify-js' at Function.Module._resolveFilename (module.js:338:15)
12:34 < wyksztalcioch> any possible solutions/causes etc.?
12:35 < wltsmrz> You talking about dependencies, flexd_?
12:36 < flexd_> wltsmrz: Sort of
12:36 < flexd_> I have socket.io, express and a few others
12:36 < flexd_> And I am wondering if those go in the repository as well, or if I can just run some command to get them all installed again without remembering all the names )
12:36 < wltsmrz> https://github.com/visionmedia/express/blob/master/package.json
12:37 < flexd_> also, yay (?) I broke something in a way that does not even cause a proper callback :D
12:37 < flexd_> to my code.
12:37 < wltsmrz> When your friend npm installs your application, npm will install the dependencies
12:37 < wltsmrz> If that's what you're meaning
12:38 < flexd_> Sort of?
12:38 < flexd_> We are going to be developing something together
12:38 < flexd_> I am creating the git repository
12:39 < flexd_> Should I commit node_modules (i.e installed dependencies) to the repository, or juts tell him what to install?
12:39 < flexd_> That is my question, not sure how to else explain it.
12:41 < wltsmrz> Ah, npm might be helpful for that, but your problem doesn't have anything to do with it necessarily
12:41 < wltsmrz> Probably just add your dependencies to the package.json and let him fork the github repository, yeah
12:41 < flexd_> k
12:42 < flexd_> and then he has to npm install whatever I call the package?
12:42 < flexd_> or just do 'npm install'
12:42 < wltsmrz> Right
12:43 < wltsmrz> (But to avoid committing node_modules, be sure to add your .gitignore)
12:44 < wltsmrz> e.g. https://github.com/visionmedia/express/blob/master/.gitignore
12:46 < flexd_> yeah i just did
13:18 < moesian> hi is it possible to do source mapping with coffeescript in node. If so are there any tutorials on how to do it?
13:19 < tim_smart> moesian: I don't think so
13:19 < tim_smart> Unless v8 has some fancy new feature I missed out on
13:20 < tim_smart> wltsmrz: Nothing wrong with committing if you like static deps
13:20 < tim_smart> *committing node_modules
13:41 < draginx> Is there a npm for testing websites? Like mechanize for nodejs?
13:42 < NodeX> testing ?
13:43 < nada> hi, someone know how can i do a mysql query in to an other mysql query result?
13:44 < nada> something like this http://stackoverflow.com/questions/10244799/timing-issue-with-mysql-query-in-nodejs
14:12 < MCHammel> i need to read metatags in mp3 and ogg-file. is there a good package for that?
14:13 < merjman> Hey Node people
14:13 < merjman> Help me out with a tiny bit of knowledge please:
14:13 < merjman> Can you have a blocking function inside a callback function without making the node block other requests?
14:13 < bnoordhuis> merjman: no
14:14 < merjman> So the blocking part doesn't execute parallel or something because it's in callback code?
14:14 < merjman> Sorry I never really understood that part about javascript
14:16 < panosru> Hello, I use NVM and I have an issue, when I try to require global installed module I get "Cannot find module" error
14:21 < myok> How many threads will node contain if running code that reads a few files in parallel?
14:22 < myok> How many threads will node contain if running code that reads a few files in parallel?
14:23 < myok> If running code in node that does calculation, I assume there will only be one thread.
14:25 < myok> If running code in node that only does calculation (array manipulation for exmaple), I assume there will only be one thread.
14:27 < myok> Only bots, I see. Is anybody here that can help with a node question?
14:28 < Drager> Anyone here that can point me to some introductions for socket.io?
14:28 < Drager> New guy here.
14:29 < deedubs> myok: there is always only one thread
14:30 < myok> what about when doing I/O? Does the system spawn more threads internally when doing file read? Otherwise, how does the file read continue while the next JS code is running? 
14:37 < sriley> internally threads are spawned for anything that is blocking, eg filesystem etc
14:39 < panosru> Hello, I use NVM and I have an issue, when I try to require global installed module I get "Cannot find module" error anyone got any idea on that?
14:48 < myok> sriley: So how would node be different than other web servers for resource consumption? Would there be n threads for HTTP streams + 1 for the event loop, while on other web servers, say rails, there would be 2*n threads?
14:49 < sriley> theres only 1 event loop thread and then other threads get created for anything blocking. so typically there will just be 1 thread in use
14:50 < sriley> so for a multi core processor you probably want to be running the cluster module or multiple instances of node
14:51 < sriley> assuming that some other resource isnt the bottleneck
14:54 < myok> does all the threads spawn on the same cpu as the event loop?
15:03 < merjman> bnoordhuis: What are those node workers for then?
15:05 < merjman> How come a blocking function within a callback causes node to freeze?
15:06 < merjman> It's parallel code and node has workers to keep everything running, right?
15:06 < bnoordhuis> merjman: read up on how single-threaded event loops work
15:20 < owen1> i work in a large org. we are use mainly java/ruby, deploy on centos and use tpkg. i want to push the usage of node. any tips/guidance about introduting node in such a place?
15:20 < merjman> bnoordhuis: Still confusing, I also read that node has an internal thread pool that is abstracted to the user but will cause certain functions to be done in parallel...
15:21 < owen1> i plan to give a few talks for people that are interested and my manager support my initiative to push node.
15:21 < owen1> but we have aps teams that knows nothing about node
15:22 < owen1> and they are the one how deploy our projects.
15:27 < merjman> "As long as you use asynchronous APIs for all IO (FS, DB, network, etc) you are safe." -> So, a blocking function within a blocking function does NOT block the node
15:27 < merjman> within a non-blocking** function I mean
15:33 < owen1> merjman: i am confused as well. i think when u make a webserver using http.createServer node uses threads (5 by default) as connection pool. but within each thread, no more threads will be created and it's all async.
15:34 < owen1> merjman: so i think most of the time only 1 thread will be used to recieve requests. but maybe if u get too many requests, more thread will accept requests?
15:38 < mmalecki> your code is always executed in one thread
15:38 < mmalecki> i/o is performed in parallel, in thread pool and whatnot
15:41 < nada> how can i add new data in multidimensional JSON array?
15:49 < merjman> <owen1>, <mmalecki> : So owen1 is right? Async threads are made for requests, code attached to a request is executed within that single thread
16:05 < clarle> Is it acceptable practice now to run node applications on port 80, and drop root privileges with process.setgid/setuid?
16:05 < TimeTurner> yes
16:05 < clarle> Awesome, thanks!
16:05 < TimeTurner> in order to solve the static asset serving issue most people just use a cdn
16:05 < TimeTurner> much easier
16:05 < TimeTurner> np
16:06 < clarle> Yeah, that was what I was thinking about doing now too.
16:06 < TimeTurner> might want to take a look at something like this: http://niftylettuce.github.com/express-cdn/
16:06 < TimeTurner> just came out and it looks useful for static assets
16:08 < clarle> Whoa, neat, have you tried it yet?
16:09 < TimeTurner> not yet. I've been using connect-assets for a while and written a module to connect to CloudFront but this new module looks more elegant for doing the same thing
16:09 < clarle> I'll check it out, thanks for the info!
16:09 < TimeTurner> np!
16:12 < clarle> TimeTurner: Wow, this looks like it's pretty new. Did the author release it at NodeConf or something?
16:12 < clarle> er, not nodeconf, the other conference
16:30 < Protected> A little noob question. In JS, apparently, I can access from within a function variables assigned outside it. Does this also apply to object instances?
16:32 < jrajav> Protected: Yes, if you're talking about a function value in an object
16:33 < jrajav> But probably not the way you're thinking
16:33 < jrajav> Closures in JS are pretty hard to wrap your head around at first
16:35 < Protected> jrajav: I just tried this: http://pastebin.com/is487BCT
16:35 < Protected> This looks like the desired behavior; Is there any reason not to rely on it?
16:36 < jrajav> Protected: Unless you defined a function scope encompassing that example, test is defined as a global variable
16:37 < jrajav> So it's pretty useless
16:37 < Protected> Is it?
16:37 < Protected> So you're telling me if all of this was happening inside a function scope, it would not work?
16:38 < jrajav> I'm not entirely sure what you want to work
16:38 < bran1> Bug #3281 is closed but causing an error on armv7 linux.  I tried to fix this in V8 to no avail.  Is anyone having this problem?
16:39 < bran1> the problem being "Binary compiled with -mfloat-abi=hard but without -DUSE_EABI_HARDFLOAT"
16:39 < alex4nder> hey
16:39 < jrajav> Protected: If it was defined in a function scope, both 'func' and 'method' would close around test
16:41 < Protected> jrajav: http://pastebin.com/Eed2FWFM
16:41 < Protected> Is this right?
16:43 < jrajav> Protected: Again, I'm still not sure what you're expecting or what you want to "work," so I'm not sure how to answer that
16:43 < jrajav> It would be more interesting if you returned the function value (in the first case) and the object value (in the second case) and THEN called the functions
16:43 < Protected> I expect test not to become undefined in any circumstance when used within obj
16:43 < jrajav> And yes, doing that, it WOULD still work
16:44 < Protected> I see
16:44 < Protected> That's what I need to do, actually
16:44 < jrajav> Protected: Think of it like this. At the moment you define a function literal, it "closes" around any variables in its current scope, guaranteeing it will have access to them whenever it is called in the future
16:44 < Protected> The idea is using an outer object with a database reference as a factory for objects that manipulate some high level concepts in the database
16:44 < jrajav> Not just their values, but the variables themselves
16:45 < Protected> I need to be able to access the outer object's connection without storing it in the inner object, because it may change
16:45 < Protected> But I understand what you're saying
16:45 < Protected> You're saying yes, it's safe to do this.
16:45 < jrajav> Protected: Yep, that will work, and is in fact the usual way to do in Javascript what other languages do with private members
16:46 < Protected> Thanks
16:46 < jrajav> Because even though the function can access variables in its closure, other functions that have that function value can't, they can only call the function
16:49 < TimeTurner> the best way to explain closure is that the memory location for the properties of the function that are returned stick around outside of the scope of the function but in a protected manner in which only the returned function can accesss them
16:50 < TimeTurner> properties of the function that are called within the returned function
16:51 < alex4nder> hmm
16:51 < alex4nder> the hardest thing for people to understand is how things inside a lexical scope after the scope has been left.
16:51 < alex4nder> and the answer is: there is no stack
16:51 < TimeTurner> yeah
16:51 < alex4nder> there is no spoon.
16:51 < TimeTurner> it's the dynamic nature of javascript
16:51 < jrajav> Yeah, it's hard because most people are used to the classical C paradigms
16:51 < jrajav> In which {} are scopes
16:51 < alex4nder> TimeTurner: s/javascript/scheme/
16:52 < alex4nder> jrajav: {}s are still scopes in JavaScript
16:52 < alex4nder> they just aren't tied directly to stack frames.
16:52 < TimeTurner> and what's weird is that I started in javascript and then I was helping a friend out in some Java stuff when I realized that it wouldn't compile because I was thinking in the dynamic mindset
16:52 < jrajav> {} isn't a scope for a loop or a conditional
16:52 < TimeTurner> you have to declare and initialize all variables that are outside of the scope you want to use them in since there's block scope for everything in java
16:53 < jrajav> Or we have different meanings of "scope"
16:53 < TimeTurner> there's only function scope in JavaScript
16:53 < jrajav> ^
16:53 < alex4nder> jrajav: no, there's one meaning of scope, but I assumed you were talking about where {} actually applies as a scope.
16:53 < jrajav> No
16:53 < TimeTurner> and to be completely honest that's the way I like it
16:53 < alex4nder> laf.
16:54 < TimeTurner> having a different scope in anything other than functions is a major headache for dynamic stuff
16:54 < alex4nder> not really
16:54  * alex4nder shrugs.
16:54 < TimeTurner> well for some things it is a pain I guess
16:54 < jrajav> They're both valid paradigms. I prefer the JS way too
16:55 < TimeTurner> JS had a strange coming into the world...built in 10 days in May 1995
16:55 < TimeTurner> but overall it's gotten way better over the years in terms of syntax and semantics
16:56 < Jakey> TimeTurner you have no idea
16:56 < Jakey> stop complaining
16:56 < Jakey> and learn the god dam language
16:56 < Jakey> througly
16:56 < alex4nder> TimeTurner: except it's an amalgamation of a handful of existing languages
16:56 < TimeTurner> Jakey: I'm not complaining
16:56 < jrajav> alex4nder: What isn't? :P
16:57 < alex4nder> jrajav: the original languages that started these paradigms? ;)
16:57 < alex4nder> shoulders of giants, etc, etc.
16:57 < Jakey> diff language have diff pros and cons otherwise why the hell should we have diff programming language in the first place
16:57 < TimeTurner> in fact I'm complementing the fact that it JS allows the dev to use many different paradigms
16:57 < alex4nder> wait
16:57 < alex4nder> NODE JS CALLBACKS WOO
16:57 < alex4nder> sick
16:58 < jrajav> alex4nder: So everything is Fortran, Smalltalk, and Lisp? :P
16:58 < TimeTurner> yeah callbacks are kind of a pain. but in JS that's how it's done
16:58 < alex4nder> TimeTurner: unless you use nodefibers and continuations.
16:58 < alex4nder> and then what?
16:58 < alex4nder> jrajav: yes
16:59  * jrajav goes off to build Smalltransp
16:59 < alex4nder> node.js is what happens when you give web developers exposure to POSIX fundamentals. 
16:59 < alex4nder> anyway
16:59 < alex4nder> it works well
17:00 < TimeTurner> yep
17:00 < TimeTurner> node-fibers looks cool
17:00 < Jakey> what is that
17:00 < alex4nder> yah, it fixes the worst parts of node
17:00 < Jakey> TimeTurner
17:00 < alex4nder> which imho is callback coleslaw
17:01 < alex4nder> without incuring the overhead of programming with threads, and paying for kernel context switches.
17:01 < TimeTurner> exactly
17:01 < Jakey> what!
17:01 < alex4nder> wut
17:01 < Jakey> tell me
17:01 < alex4nder> google
17:01 < Jakey> geeesh
17:02 < alex4nder> it adds continuations to node
17:02 < Jakey> what is that
17:02 < alex4nder> so your code doesn't look like a staircase
17:02 < alex4nder> Jakey: what is a callback?
17:03 < alex4nder> usually, it's the next thing you want to do after something else is done
17:03 < alex4nder> rather than explicitly breaking your code into separate functions, node-fibers allows you to get the next thing you want to do, from inside the function you're currently in.
17:04 < alex4nder> the .. continuation
17:04 < Jakey> hm..
17:05 < Jakey> i thought node was asychronous
17:05 < Jakey> how is that diff
17:05 < alex4nder> continuations are used to make synchronous code that is effectively asynchronous.
17:07 < alex4nder> so you can code waiting for asynchronous events, without your code looking like shit.
17:07 < Drager> Anyone here that can point me to some introductions for socket.io?
17:07 < jrajav> I'd rather have my code look like what it's actually doing :P
17:08 < jrajav> *cue assembly joke*
17:08 < alex4nder> jrajav: yah, I like making my code harder to read, in order to show what it's actually doing.
17:08 < alex4nder> Drager: read the docs that come with socket.io
17:09 < Drager> I just want to fetch some simple data, when someone creates a new thread in a forum. Push that title to the users. Is this possible in a easy way? Using Python for backend
17:09 < Jakey> alex4nder this makes zero sense
17:09 < alex4nder> Jakey: sorry dude
17:09 < alex4nder> maybe it'll make sense in the future
17:09 < Drager> alex4nder: I have read the how to on socket.io
17:09 < Jakey> too advance for me
17:09 < Drager> If that's waht you mean
17:09 < Jakey> i think :)
17:10 < alex4nder> Jakey: learn some scheme, then learn about call-with-current-continuation.. or learn about coroutines,.. or about generators,..
17:11 < Jakey> alex4nder links would be more appropraite and useful pleaes
17:12 < alex4nder> Jakey: google 
17:12 < jaha> lets say I have some upstart scripts that i need node to create and give them root privs and then copy them to the /etc/init folder, if im running the node process as a user is it possible to give the files root privs?
17:17 < TimeTurner> umm
17:17 < TimeTurner> you would probably have to do that before you drop privileges in node
17:18 < alex4nder> you probably shouldn't be doing this the way you're doing it.
17:19 < TimeTurner> actually upstart and node should have nothing to do with each other
17:19 < TimeTurner> that's a pretty risky combo in and of itself
17:20 < TimeTurner> having node control stuff like that for the machine node is running on
17:23 < jaha> TimeTurner: well im trying to use node to manage the current "state" of the software on the machine, there are some shell scripts being managed by upstart but are independant of node so id like to be able to update those scripts and their upstart scripts through node
17:26 < jaha> i played with using a git hook to copy source controlled system files to their respective places but id like to limit the amount of shell scripting im maintaining to a minimum
17:37 < Gloorian> Hello. I'm looking for a module to compress js files and uglify them.
17:37 < Gloorian> I've tried node-merge-js but it didn't work as I wanted :/
17:38 < tjholowaychuk> cat {one,two,three}.js | uglifyjs > out.js
17:40 < Gloorian> oh good one too :D
17:40 < Gloorian> didn't think about it :p
17:40 < Gloorian> How could I do a cat of all the files of a folder ?
17:40 < jrajav> Gloorian: Check out horrible.js
17:40 < tjholowaychuk> cat foo/*.js
17:41 < Gloorian> thank you :D
17:41 < tjholowaychuk> cat {foo,bar,baz}/*.js
17:41 < tjholowaychuk> etc
17:41 < Gloorian> that'll help me a lot !!!
17:41 < Gloorian> good bye and thank you again
17:41 < Gloorian> :)
17:43 < eldios> obvious question (maybe not as much as I think): is it meaningful/worth building a new product/website/community/project which consists of a few static pages and some forum like dynamic ones (with DB access obv) from scratch with Node (and submodules like express, less, stylus, etc)?
17:44 < eldios> or is it better to mix integration of say static parts directly from web server (nginx eg) and only call node when dealing with dynamic parts?
17:45 < eldios> I was thinking of that thinking about eventually thousands of simulatenous accesses
17:48 < wdent_> Anyone install smartos on mac?   Looking for best practice to move my node development to something that supports dtrace and node's ustack helpers. Thanks
17:48 < chapel> wdent_: dtrace is on osx
17:49 < TimeTurner> eldios: the latter
17:49 < wdent_> chapel yes, but doesn't support ustack helpers found in node and when I run dtrace it doesn't catch any details with regard to node
17:50 < chapel> depends on the point of the site, if static is the focus, use something like nginx, if dynamic is the main focus, then use something dynamic
17:50 < chapel> wdent_: okay, not familiar with that, sorry :(
17:50 < wdent_> chapel: thanks
17:53 < marcosmlopes> j backbone
17:53 < marcosmlopes> ops
18:23 < CIA-93> node: Maciej Małecki v0.8 * r6a11f3e / (lib/repl.js test/simple/test-repl.js): repl: fix crashes when buffering command - http://git.io/7fMRdQ
18:34 < epall> hey guys. I'm working on a native module for Node.js, and I'm having some trouble with linking. What's a good project to study that uses up-to-date Node.js bindings e.g. NODE_MODULE()?
19:10 < stagas> http://vimeo.com/44873548
19:15 < PringlesCan> Hello All… I was wondering how I can receive the complete response body from an HTTP request instead of chunking it? I'm parsing large JSON objects that come in multiple chunks. What's the best way to do this?
19:16 < SubStack> PringlesCan: you could use a streaming json parser
19:16 < SubStack> I like this one: http://github.com/dominictarr/JSONStream
19:19 < PringlesCan> SubStack, I don't benefit from a streaming parser, is there anyway to not parse the response until it's received in full? I need to store the entire response in a database… so having chunks of it seems to complicate it to me unless I'm missing osmehting?
19:19 < chapel> PringlesCan: then you would just combine the chunks and on the end event do something with it
19:20 < PringlesCan> I'm just thinking of how to concat the chunk given the scope of the res.on('data', function (chunk) {//here }); situation
19:22 < tjholowaychuk> PringlesCan something like https://github.com/senchalabs/connect/blob/master/lib/middleware/json.js
19:22 < tjholowaychuk> you can use setEncoding() and just concat the strings if you want to buffer first
19:22 < SubStack> var data = ''; res.on('data', function (buf) { data += buf }); res.on('end', function () { /* now do stuff with data */ })
19:23 < PringlesCan> thanks for the suggestions… i wasn't sure if multiple requests might get chunked together improperly… i'm still not used to non-procedural programming
19:27 < Justen> I just got the nodejs package so you can have node run the current file open, but how am I able to restart the server within Sublime Text 2? The only way I've found to do it is killing the process in the task manager
19:28 < PringlesCan> SubStack, that worked perfectly, thank you.
19:30 < tjholowaychuk> PringlesCan you'll want .setEncoding('utf8') if you have multi-byte chars
19:33 < marcosmlopes> Can someone help me? http://stackoverflow.com/questions/11334568/how-to-stream-an-webm-video-through-ffmpeg-using-node-js
19:51 < dnnsmanace> How is this symbol encoded?
19:51 < dnnsmanace> 👀
19:52 < dnnsmanace> i am trying to send an emoji icon in node and it crashes the whole thing
19:53 < dnnsmanace> unexpected token ILLEGAL
20:02 < CIA-93> node: Nathan Rajlich v0.8 * r9126dd2 / (lib/repl.js test/simple/test-repl.js): repl: fix passing an empty line inserting "undefined" into the buffer - http://git.io/qg1VAQ
20:10 < richardshaw> mm i might do something crazy like book flights to node conf in September
20:22 < lamefun2> hi
20:23 < lamefun2> how do you node.js users make string -> object dictionaries that could accept unverified input as keys?
20:23 < ljharb> lamefun2: var dictionary = {}; ?
20:23 < Spion> silly little benchmark: https://gist.github.com/3049314
20:24 < Guest91036> hello, anyone knows how to get current file position?
20:24 < Guest91036> there is no seek/tell functions in fs module
20:24 < lamefun2> ljharb: what about __proto__?
20:25 < lamefun2> or key named hasOwnProperty?
20:25 < ljharb> Object.create(null) then?
20:26 < ljharb> you might be wanting collections and whatnot, which would be part of ES6 thus not available yet
20:30 < TooTallNate> lamefun2: the trick for hashmaps is to insert some junk before the key
20:31 < TooTallNate> "nate" + key
20:31 < TooTallNate> dic["nate" + key
20:31 < TooTallNate> lamefun2: so it becomes dic["natehasOwnProperty"]
20:31 < TooTallNate> lamefun2: so it becomes dic["nate__proto__"]
20:32 < TooTallNate> Object.create(null) works well though too, but falls apart if you set __proto__
20:32 < ljharb> lamefun2: but also it's a bad idea to ever use unverified user input.
20:39 < lamefun2> ljharb: why?
20:39 < lamefun2> player name for example
20:39 < lamefun2> the only verification is length
20:39 < lamefun2> __proto__ should be a valid player name
21:04 < thanpolas> anyone wrote a QUnit to nodeUnit adapter?
22:06 < cconstantine> hey all
22:07 <@konobi> madhums: quit it
22:07 < cconstantine> I have an express server that i want to start/stop repeatedly for testing purposes.  The callback given to app.listen(port, cb)  is getting called the first time around, but the app.close(cb) isn't getting called, and when I don't give a cb to close the server fails to start back up again.  Any ideas?
22:08 < tjholowaychuk> cconstantine you can fire up multiple on ephemeral ports
22:08 < tjholowaychuk> that's what I usually do / recommend
22:08 < tjholowaychuk> cconstantine: https://github.com/visionmedia/supertest does this transparently for example
22:08 < cconstantine> :/  it's for use with mocha's -w flag
22:10 < cconstantine> tjholowaychuk, so, I'm not testing http requests, but socket.io connections wrapped in an express server
22:10 < tjholowaychuk> ah
22:10 < tjholowaychuk> well you could do similar
22:11 < cconstantine> similar?
22:12 < tjholowaychuk> if you're using --watch why even close the server?
22:13 < cconstantine> if I naively start the server before any describes the first run through because of file changes fails to connect
22:15 < cconstantine> I guess I do'nt understand what -w does
22:15 < tjholowaychuk> hmm it should work if you just leave them up
22:15 < tjholowaychuk> i dont use --watch though
22:16 < cconstantine> yeah, while it's watching the server is up (confirmed with curl)
22:22 < cconstantine> ok, giving up on -w :(
22:22 < tjholowaychuk> watchers are lame anyway
22:25 < othiym23> wdent: I was able to get SmartOS up and running under VMware without too much trouble, think that's how Joyent people run it for conference presentations and the like
22:27 < othiym23> wdent: it's a little tricky to get it running, because you run from the live image and then it creates pools and persistent images under it, and you'll need to read the Joyent docs on how to use vmadm
22:28 < othiym23> wdent: it shouldn't be that tough to make it work with VirtualBox, either, I can paste you the VM settings VMware is using if you want 'em
22:30 < machamacha> anyone know anything about firefox extension
22:32 < wdent> Thanks could you paste those settings please
23:09 < LambdaDusk> I want to work with bare mongoskin.. does anyone know a compatible form validator for that, working with express.js, too?
23:43 < CIA-93> node: Vladimir Beloborodov master * r3ea0397 / lib/readline.js : readline: Use one history item for reentered line - http://git.io/wJIyLg
--- Log closed Thu Jul 05 00:00:34 2012
