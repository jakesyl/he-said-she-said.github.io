--- Log opened Sun Sep 23 00:00:05 2012
00:10 < nykac_> anyone know of good hosting for node.js? i have serveral vps' and i'm also looking at heroku
00:15 < owen1> how to tell my html file to use the uglified version of the js file on production environment?
00:18 < danheberden> owen1: are you using express or anything?
00:19 < danheberden> cuz that makes it pretty easy to set the static directory using an environment variable
00:19 < danheberden> (or whatever means suits you)
00:32 < nykac_> how can i use package.json to tell npm to use the native bson parser with mongodb?
00:49 < huangjs> i want to serve some files with basic auth, does express.static support that?
00:55 < owen1> danheberden: not using express.
01:00 < danheberden> owen, well, how ever you are serving the static files
01:00 < danheberden> you can change the directory that, say, "/public" is or wherever you have those files.. so that, "/public" on a local dev is the non-uglified files
01:00 < danheberden> and "/public" on a production server is "/build" or something
01:01 < danheberden> so when you run your app on the prod server, do something like NODE_ENV=production node server.js
01:01 < danheberden> and in your code, check for process.env.NODE_ENV === "production" 
01:01 < danheberden> that way your html is always pointing to "/public" but the server decides what to actually serve
01:11 < owen1> danheberden: yeah. i pass NODE_ENV to start my server. so u'r saying i should not change the name of the ugly version of my js file. keep it app.js for example. when should i uglify this file? is it the job of a CI server or is it a simple way to do it since i currently not using ci.
01:20 < danheberden> owen1: well, in my projects I run the uglify process as part of the build process
01:20 < danheberden> i use `gith` to see that the repo has changed, pull the files, run the build tool (`grunt`) and that handles all of that for me
01:20 < danheberden> i don't change the name, but then, i also use require.js
01:21 < danheberden> so require.js either uses the built file or each individual file
01:21 < danheberden> check out https://github.com/tbranyen/github-viewer for an example of that
01:29 < owen1> danheberden: looking into this repo. gith is this repo? https://github.com/danheberden/gith
01:49 < deoxxa> owen1: i use npm to uglify/compile/etc things
01:49 < deoxxa> owen1: but i also use npm and a private registry for deployment
01:50 < deoxxa> owen1: i have a prepublish hook in libraries to uglify them, and a postinstall hook in applications to compile javascript slugs for browsers
02:04 < astropirate> Anyone got an idea for a project but no time to work on it? I need something to do D
02:04 < astropirate> :D
02:04 < AnonymousFunctio> Ha
02:04 < AnonymousFunctio> Yes
02:04 < AnonymousFunctio> Several
02:05 < astropirate> do tell
02:05 < AnonymousFunctio> Unfortunately, nothing I can outsource, sorry!  :-D
02:05 < astropirate> :S
02:05 < astropirate> ok
02:05 < AnonymousFunctio> I'm working on a streaming media middleware between a handful of protocols, and HTTP.
02:05 < AnonymousFunctio> Making dumb devices talk to some of the NAS media boxes
02:06 < AnonymousFunctio> That is... if I can get around to it.
02:06 < AnonymousFunctio> Too many damn websites to build in the mean time.
02:06 < AnonymousFunctio> aut0mata
02:06 < AnonymousFunctio> astropirate
02:06 < astropirate> this is really strange...
02:06 < astropirate> i usually have MANY projcts to work on
02:06 < AnonymousFunctio> You could make an IRC client that doesn't suck.
02:07 < astropirate> right now i have nothing
02:07 < AnonymousFunctio> This one I'm using now is garabage, apparently.
02:07 < AnonymousFunctio> My copy of xchat expired... it wasn't great anyway
02:07 < AnonymousFunctio> What do you use?
02:07 < astropirate> AnonymousFunctio, there is no money in that :p
02:07 < astropirate> xchat
02:07 < AnonymousFunctio> I tried to download Microsoft Comic Chat for old time's sake, but it doesn't function under Windows 7.
02:07 < astropirate> AnonymousFunctio, are you on windows?
02:07 < AnonymousFunctio> Yes
02:07 < myndzi> o snap
02:07 < myndzi> comic chat lol
02:07 < astropirate> xchat is opensource
02:07 < astropirate> there is an unofficial windows built
02:08 < astropirate> build*
02:08 < myndzi> where all messages are ctcps!
02:08 < astropirate> that is free
02:08 < thl0> astropirate: if you want, you can think about ways to solve this: https://gist.github.com/3767341
02:08 < myndzi> comic chat:irc :: word html:notepad html
02:08 < AnonymousFunctio> Lol, yes
02:08 < AnonymousFunctio> You could turn that off I thought?
02:08 < myndzi> do you think anybody who used comic chat would know how or want to? :P
02:08 < AnonymousFunctio> and it just guessed at what gestures were supposed to be there
02:08 < thl0> I was trying to bounce some ideas with others before starting to write a module that solves the stated problem
02:08 < AnonymousFunctio> Lol
02:08 < ljharb> thl0: why would you use exceptions for control in node? just have an app-wide uncaught exception handler for those rare bugs
02:09 < thl0> ljharb: doesn't work very well why testing
02:09 < myndzi> i've gone back and looked at old versions of mirc, i'm amazed at how awful they were
02:09 < astropirate> "peple still use mirc?"
02:09 < AnonymousFunctio> http://www.mermeliz.com/files/summary/comic.jpg  Think Microsoft would sue me for making a web based version of this?
02:09 < ljharb> lol people still use windows?
02:09 < myndzi> indeed
02:09 < AnonymousFunctio> mIRC is awesome!  :-D
02:09 < thl0> this is for while I'm developing. I want quick feed back of where exactly I went wrong (i.e typo etc)
02:09 < myndzi> mirc is way better than xchat
02:09 < myndzi> but if you're a console nerd then ircii it is
02:10 < ljharb> thl0: a global uncaught exception handler will give that, because error objects have a stack trace on them.
02:10 < myndzi> or whatever
02:10 < myndzi> that isn't it is it
02:10 < AnonymousFunctio> ircii!  That's probably what I used to use on an old BBS.
02:10 < astropirate> i tried ircii.... too many things to memorize
02:10 < astropirate> not for me
02:10 < myndzi> like i said.. for console nerds
02:10 < myndzi> ;)
02:10 < myndzi> for gui, mirc is tops
02:10 < astropirate> xchat!!
02:10 < thl0> ljharb: didn't work for me with async code i.e. the tests would fail before an exception is caught
02:10 < myndzi> xchat is awful, why would anybody promote it :(
02:11 < AnonymousFunctio> xchat met my needs... quirky, but worked.
02:11 < AnonymousFunctio> I don't need anything fancy.  You folks are the only ones I talk to, ha.
02:11 < ljharb> thl0: then use a test suite that doesn't end on the first failure
02:11 < thl0> ljharb: but thanks for the input, maybe I'll give it another go that way before writing a module
02:12 < thl0> ljharb: thing is though, if I wouldn't handle it app wide, shouldn't it blow up and print an error?>
02:12 < ljharb> also true
02:12 < thl0> ljharb: cause that didn't happen in cases - my callbacks just would never call me back
02:13 < ljharb> maybe you had a syntax error? you can't recover from that
02:13 < ljharb> i suggest jslint or jshint of you're having syntax issues.
02:13 < ljharb> *if
02:13 < thl0> so I think the problem lies elsewhere, ie errors in async code don't bubble immediately for some reason and at times never
02:13 < AnonymousFunctio> jslint... for whenever you want a shitty opinionated afternoon
02:13 < thl0> doesn't catch undefined variables
02:14 < thl0> ljharb: doesn't even catch the bug I showed in the gist
02:14 < ljharb> thl0: and what's the bug in your gist? that cb isn't a function?
02:14 < thl0> ljharb: exactly - syntax errors also caused this problem
02:14 < ljharb> thl0: in readAndToUpper, just check if it's a function and throw an error before calling fs.read
02:14 < ljharb> thl0: and jshint/jslint absolutely catch syntax errors.
02:15 < thl0> but I'm gonna make them and not see them right away like you right now in the gist ;)
02:15 < thl0> I misspelled data
02:15 < ljharb> oh there it is, yeah i see it
02:15 < ljharb> js[hl]int would absolutely catch that.
02:15 < ljharb> just pasted it into http://jslint.com/ - it found it.
02:15 < ljharb> always, always lint your code before running it.
02:16 < thl0> ok, but not misspelled function or variable names and those bugs I want to catch without having to manually wrap all code with try catch cause I may make a typo
02:17 < ljharb> yes, misspelled everything.
02:17 < thl0> I have it turned on in vim by default, but maybe it works differently for some reason?
02:17 < ljharb> that's what a linter is for.
02:17 < ljharb> i guarantee you a thousand times over, if you lint your code, it will catch misspelled variable or function names.
02:17 < owen1> deoxxa: looking into those terms. thanks!
02:17 < thl0> and I'm using jshint, bc jslint forces papa crockford's style on me
02:17 < ljharb> that should still catch them.
02:17 < st_luke> yea linting forcing a style sucks
02:18 < thl0> ljharb: ok, that granted, but there are bugs it can't catch, and even on those I want fast feedback
02:18 < ljharb> eh, i like the style, and i think it makes code better. but i'm all for jshint giving more options.
02:18 < ljharb> thl0: tell you what. lint your code a few times, and then tell me what bugs it still can't catch, and i'll demonstrate type checking and defensive programming.
02:18 < thl0> maybe I should come up with a better example - one that a linter wouln't catch since that is not the issue
02:18 < ljharb> try/catch is never necessary, except with JSON.parse.
02:19 < ljharb> good idea
02:19 < thl0> how about a.foo() where a has no foo function
02:19 < thl0> it woun't catch that
02:19 < ljharb> if (a && a.foo) { a.foo(); }
02:19 < ljharb> hence, defensive programming.
02:19 < AnonymousFunctio> I'd let that one bubble up and crash...
02:19 < ljharb> !g law of demeter @thl0 
02:19 < ljharb> oops, wrong room
02:19 < thl0> I don't want to litter my code with that just cause I could misspell something
02:19 < AnonymousFunctio> If you don't catch a missing function, assuming it isn't supposed to be dynamic, you're going to spend all day tracking down some problem.
02:19 < ljharb> anyways, google the law of demeter, and also, don't assume things.
02:20 < thl0> ie fs has fs.readdir, but I'm not gonna check for it 
02:20 < thl0> but I may accidentally write fs.readDir
02:20 < ljharb> thl0: that's fine, then you don't get to complain if you miscall functions on fs
02:20 < thl0> ljharb: I think you are missing the point
02:20 < ljharb> thl0: and for those cases where you can't stop yourself from breaking things, UNIT TEST
02:20 < AnonymousFunctio> You definitely want things to crash.  A misspelled function is one of those times.
02:21 < ljharb> the point is, don't rely on runtime exception handling to fix everything.
02:21 < ljharb> AnonymousFunctio: that's a fair point. if not having the function is a failure, you'd either let it crash, or you'd explicitly throw an error if the func isn't there
02:21 < thl0> the module I'm thinking off should be for bugs that you won't be able to protect against in a realistic scenario
02:21 < ljharb> that's what testing is for
02:21 < thl0> ljharb: read the gist, I was saying "during testing"
02:22 < ljharb> any decent test suite has built in exception handling
02:22 < ljharb> and will fail a test if an exception bubbles up
02:22 < thl0> still you may encounter problems that fail silently and no exception handling catches it, that's the point of the module
02:22 < ljharb> and, your final "expect", or "test.done()" or whatever, should always be after exceptions have had a chance to throw
02:22 < ljharb> i'd love to see an example
02:22 < thl0> and it doesn't always bubble (have you read the gist?)
02:23 < ljharb> yeah - that sounds like a bug in node. cause thats not how JS works - exceptions don't get "lost"
02:23 < ljharb> what version of node?
02:23 < thl0> my test still fails, but I would like to know more specifically whyu
02:23 < thl0> and that can be hard if you have a long chain of async calls
02:23 < ljharb> no, because a single error object tells you what line of code failed, with a message and stack trace
02:23 < thl0> even if you are test driven (which I am btw)
02:24 < thl0> ljharb: only if you get an error 
02:24 < thl0> but in those cases nothing prints
02:24 < ljharb> then "use strict";
02:24 < thl0> still doesn't catch everything
02:24 < ljharb> (which you should always do in testing anyways)
02:24 < ljharb> ok - what doesn't "use strict" catch?
02:25 < ljharb> `"use strict"; var data; daata = true;` throws a ReferenceError, for example
02:25 < thl0> ljharb: no longer constructive - if you want to leave your opinion as a comment on the gist, I get the feeling we are not understanding each other
02:25 < ljharb> probably not. the combination of a linter, unit tests, and strict mode in your tests should make every error not be silent. if you can provide an example that would escape those, i'd love to see it
02:26 < ljharb> you might have an amazing idea, but if you can't explain it to other JS professionals, of what use is it?
02:27 < thl0> I did, but you are not understanding the problem
02:27 < ljharb> that's the fault of the teacher, not the student.
02:27 < owen1> thl0: can u send the gist again?
02:27 < thl0> "use strict" and jshint are great, but they don't catch everything and that's what the module is for
02:27 < thl0> owen1: https://gist.github.com/3767341
02:28 < ljharb> thl0: what don't they catch?
02:28 < thl0> like I said fs.readDir
02:28 < thl0> it'll blow up only when you run the code
02:28 < ljharb> right
02:28 < ljharb> which is why you test the code with use strict. so it blows up.
02:29 < thl0> how?
02:29 < ljharb> and you can pick any of a hundred test runners that have their own try/catches in there
02:29 < thl0> how is strict gonna know if at run time that method exists?
02:29 < ljharb> everything knows at run time, cause its running.
02:29 < thl0> dude, read the gist, the error doesn't bubble so the try/catch needs to be around the async code
02:29 < ljharb> testing runs the code. so it blows up in testing, not in production. and any decent test suite will tell you what blew up and where
02:30 < ljharb> i read the gist, and i'm telling you its impossible. errors always bubble.
02:30 < thl0> yes and I don't know where it blew up since I get no printout
02:30 < ljharb> if nothing catches them, they crash the program.
02:30 < ljharb> what version of node do you have>?
02:30 < thl0> well, I encountered numerous cases (ie when using Step flow control lib) when they didn't
02:31 < ljharb> that sounds like it might be an issue with Step then. it's probably discarding errors.
02:32 < thl0> ljharb: here is an example using my lib runnel (similar to Step) where the error doesn't bubble right away, but blows up via a timer function which may be to late when you are testing
02:32 < thl0> https://github.com/thlorenz/runnel/blob/master/examples/error-handling-throw.js
02:32 < thl0> and yes I know jslint would catch that particular error, but it's just an example
02:33 < thl0> ljharb: as I said errors eventually bubble up, but at that point your test runner may have finished and you never see the stacktrace
02:33 < ljharb> i understand the example as is - but any example that would be caught by a linter means you don't have a problem. can you provide an example that wouldn't be caught by a linter?
02:33 < thl0> ljharb: will do that when I have more time
02:33 < ljharb> thl0: a decent test runner will catch uncaught exceptions and report them as failures
02:33 < ljharb> cool, let me know
02:34 < thl0> I'll write up a full working example with an error that no tool catches and that doesn't bubble properly
02:34 < thl0> I'll add it to the gist, so watch it for changes
02:34 < ljharb> awesome, will do
02:35 < thl0> if I can't find a proper example, then I guess the modules isn't necessary in the first place, which is also a fruitful outcome of the discussion of the gist
02:38 < owen1> danheberden: is gith running on your prod box?
02:38 < owen1> danheberden: and as soon as you push your code, it uglify the js?
02:39 < owen1> so the uglification only happens on production box.
02:52 < GriffenJBS> I have a 0.8.6-pre and node-gyp is complaining; where should --nodedir point?
02:53 < danheberden> owen1: yeah, as soon as i push it runs the built process
02:53 < danheberden> i use gith and deferred-exec
02:53 < danheberden> namely because i wrote them, also because i think i wrote them pretty well :)
03:05 < owen1> danheberden: i think your gith got hackernewed a week ago
03:21 < owen1> danheberden: also, can anyone make POST into your gith server?
03:26 < danheberden> owen1: as of right now, yes - i'll be landing the secret QSA option monday 
03:26 < owen1> danheberden: what does the last sentance mean? how do u secure it?
03:27 < danheberden> basically just to support something like yourserver:1234/?something=reallyHardToGuessSoThatPeopleCantPOSTToYourServer
03:27 < danheberden> and to also make sure the received headers are from github
03:43 < GriffenJBS> danheberden: that's passing your 'passkey' in the clear, unless using https
03:44 < deoxxa> public/private keys ftw!
03:49 < owen1> any good approach for securing my api? i want only approved users to be able to get/post my service.
03:55 < GriffenJBS> owen1: using https?
03:56 < deoxxa> owen1: i use public/private keys, storing the public key of each approved consumer in the service, including their public key fingerprint in the route, having them sign their request and verifying it when it comes in. same thing on the way out.
03:56 < deoxxa> but that's probably overkill in most scenarios
04:00 < owen1> deoxxa: is it simialar to ssh keys? is it something non-geeks can use?
04:00 < deoxxa> it's kind of the same principle
04:00 < deoxxa> but it's implemented differently
04:01 < deoxxa> i'd say no, a non-tech person won't be able to use it
04:01 < deoxxa> that setup is mostly for server->server communication
04:02 < ljharb> owen1: how do you have an API that nongeeks will use?
04:04 < owen1> ljharb: yeah, u'r right..
04:04 < sfurnival> issuing tokens to each user is fairly simple, and not quite as intimidating as pub/priv keys
04:06 < owen1> sfurnival:can u send a link that explain how to do that?
04:06 < owen1> or deoxxa's approach
04:09 < sfurnival> I don't know of any guides off the top of my head. The concept is fairly simply though.  Issue each user a token string that acts as their authentication.  Depending on the level of security you need this can be a static token or one they need to renew after a certain lifespan.
04:10 < sfurnival> The token would need to be included in any requests they make to your api obviously
04:11 < owen1> sfurnival: nice! so i can randomize 16 chars string on the server after the user logged in. and save this char in my db next to that user. and make sure to delete it when the user logged out or after a few hours that this user didn't hit my server.
04:13 < sfurnival> I would advise against something random, you need to avoid duplicates, but in general yes that would work.
04:15 < owen1> sfurnival: i can randomize again if the same string exist
04:15 < AAA_awright> There's nothing wrong with a random string
04:15 < AAA_awright> In fact secure cryptography relies on it
04:15 < AAA_awright> 128 bits is the minimum you need, though
04:16 < sfurnival> If you take the time to make sure its unique, sure
04:16 < AAA_awright> No, you don't need to make sure it's unique actually
04:16 < AAA_awright> 128 bits = 32 hex digits
04:17 < AAA_awright> Or 16 bytes, but normally you can't use the full range of a byte as a character
04:17 < AAA_awright> sfurnival: require('crypto').randomBytes(16).toString('base64') is good
04:17 < owen1> AAA_awright: thanks!!
04:18 < AAA_awright> er, owen1**
04:19 < sfurnival> my point was only that no two users should be given the exact same token, not the crypto implications
04:20 < AAA_awright> owen1: Actually if you do base64, use randomBytes(18), you get 12 extra bits and no additional length, or trailing = characters
04:20 < AAA_awright> sfurnival: The chances are so small that it's not worth even testing for
04:21 < gildean> AAA_awright: depends on your userbase
04:21 < gildean> 500million users and it might happen
04:21 < AAA_awright> 128 bits provide 64 bits of security, so no
04:21 < owen1> i only have 1 at the moment..
04:22 < AAA_awright> If you want to go with the golden standard of 128 bits of secuity you could do 32 or 33 bytes
04:23 < owen1> what's a common way to pass this token? in the body of a POST request or in a query string of a GET?
04:23 < AAA_awright> owen1: Does it change the state o the server?
04:23 < AAA_awright> *of the server
04:24 < owen1> AAA_awright: a post will, a get will not
04:24 < AAA_awright> So choose the appropriate method, then
04:24 < AAA_awright> or PUT if it's idempotent
04:24 < owen1> right, but isn't easy to a hacker to read it?
04:24 < AAA_awright> It doesn't make a difference
04:24 < owen1> and immitate a user and do post/get 
04:25 < AAA_awright> You should be using secure transport anyways, if it goes in the URL or the request body makes no difference
04:25 < owen1> AAA_awright: so it's not insteaf of https!
04:25 < AAA_awright> Also note that both POST and GET can place arguments in the URL or in an requet body
04:26 < AAA_awright> owen1: Are you conserned about clients logging URLs and such?
04:26 < AAA_awright> That'd be a good reason to put it in the request body
04:26 < AAA_awright> And again, GET does in fact allow a request body
04:27 < owen1> AAA_awright: ok. but if i want this to be secure, do i neeed to use https for every interaction with a logged-in user?
04:27 < AAA_awright> yes
04:29 < AAA_awright> owen1: If you're even asking that you should be reading up on the state of Web and application security
04:29 < owen1> yeah, googling for 'adding https to websites'
04:30 < AAA_awright> I mean in general... Cryptography Engineering by Bruce Schneier should be a must-read
04:30 < GriffenJBS> owen1: security is VERY easy to get wrong
04:31 < AAA_awright> Other must-reads are the HTTP RFC and the REST dissertation, both by Roy T. Fielding
04:31 < AAA_awright> owen1: Definitely. In security, if you have one bug, you may as well have a hundred. You can't afford any holes at all.
04:33 < owen1> http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246
04:33 < GriffenJBS> where can I find info on --nodedir for node-gyp?
04:33 < AAA_awright> And there's REALLY trivial things you can do that just destroys security... For instance, if you use the same key to encrypt that you do to authenticate, you lose authentication
04:34 < SomeoneWeird> <AAA_awright> owen1: Definitely. In security, if you have one bug, you may as well have a hundred. You can't afford any holes at all. < +1+1
04:34 < AAA_awright> owen1: Yeah, that's it. I have that, signed by Schneier himself, it's fantastic
04:34 < AAA_awright> Really all his works are
04:35 < owen1> http://www.ietf.org/rfc/rfc2616.txt
04:36 < AAA_awright> Despite the name, that's not about how to create cryptographic algorithms (not that book, at least), that's how to use algorithms in a way that won't compromise your security
04:36 < owen1> http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm
04:36 < AAA_awright> yes and yes
04:36 < saamyjoon> is there any way to have a file persist through nom updates for a cli app. such as a data file
04:36 < saamyjoon> npm*
04:37 < owen1> AAA_awright: not sure how readable those links. but i'll bookmark them and give it a shot.
04:49 < owen1> deoxxa: u mentioned an hour ago prepublish and postinstall hooks that helps u in uglifing your js. i did some googling and cauld'n find info about those. what exactly are those hooks do? is it post-recieve hook that running on your prod box, similar to danheberden's approach? (gith)
04:49 < ljharb> owen1: a post-receive hook on production seems like a really simple way to do it
04:56 < GriffenJBS> uglifying is security through obscurity, *unless* your using it for space savings, then don't bother, gzip does better
04:56 < owen1> ljharb: since i define the hook on github's website, how to make sure random people/bots can't hit this url?
04:56 < ljharb> owen1: github's website? why would you do that for a production machine
04:56 < ljharb> i'm confused
04:57 < ljharb> i agree tho, uglifying is just for spacesaving. there's no security from it.
04:57 < mscdex> omgzip!
04:59 < owen1> ljharb: how do u deploy your code? do u use some tool or scp?
04:59 < owen1> or rsync?
05:00 < owen1> in the ruby world we use capistrano
05:00 < ljharb> owen1: for ruby, cap, sure. but i prefer just git pushing to a production git server
05:00 < ljharb> and the git server should be a totally different repo than the actual app, which would be private on github
05:01 < owen1> ljharb: can u explain the term 'production git server'
05:01 < owen1> u have 2 seperate repos?
05:02 < ljharb> "git server" is the result of `git init --bare` for example
05:02 < ljharb> yes
05:02 < ljharb> my production git server is just a repo with a post-receive hook, and i push to it from my local app repo
05:05 < owen1> ljharb: i am confused. let's say your git repo is foo. you work inside foo dir. commit some code, push it etc. great. now u want to deploy to production. what command do you run? 
05:05 < SomeoneWeird> you add another remote for the production
05:05 < SomeoneWeird> git push production master
05:05 < owen1> that's what i thought..ok
05:05 < owen1> u use remote
05:06 < owen1> just like i use with heroku
05:08 < ashnur> :)
05:08 < ashnur> complicated stuff
05:09 < owen1> so in my case, i use gitolite (on my own server) i can create a remote that point to my host, and setup a post-recieve hook for this remote, and run whateer minify/compac commnds i want before running my node server.
05:10 < owen1> ashnur: morning
05:10 < ashnur> morning :)
05:10 < ashnur> did you got your @req in the layouts?
05:11 < owen1> ashnur: didn't have a chance to try. i was planning to create a new docpad project and try it.
05:11 < ashnur> :)
05:11 < harbhub> i need help with a trivial task
05:11 < harbhub> anyone familiar with making ajax requests using JQuery to a nodeJS server?
05:12 < ashnur> lol, not, i dropped jquery before started using nodejs
05:12 < harbhub> what do you use instead?
05:12 < harbhub> pure js?
05:12 < owen1> ashnur: but was side tracked here with awesome insights about deployment and security
05:12 < ashnur> but it still doesn't matter, the concept is not that complicated :)
05:12 < harbhub> ashnur:  lets do it then
05:12 < ashnur> harbhub, smaller libs
05:12 < harbhub> ashnur:  cool
05:13 < harbhub> http://jsfiddle.net/harbhub/XdsLg/4/
05:13 < harbhub> that is my pathetic attempt at making an ajax post to the server
05:13 < harbhub> so far i pick it up on the node server
05:13 < harbhub> and can console.log(req.headers);
05:14 < gildean> harbhub: jquery just gives you nicer shorthands for the same ajax requests you can do with plain js
05:14 < harbhub> i'm using express, so i just used   app.post('/what'), function(req,res){console.log(req.headers);};
05:14 < harbhub> lets use plain js then
05:14 < harbhub> or jquery, either way
05:14 < harbhub> i made the request and received that a post request was made to the /what
05:14 < gildean> it really doesn't matter much, jquery saves you some typing
05:14 < harbhub> ok so i'll stick to jquery for now
05:14 < harbhub> check my fiddle
05:14 < harbhub> what is wrong with it?
05:15 < ashnur> it's jquery :)
05:15 < SomeoneWeird> nothing wrong with jquery, if you know how to use it properly
05:15 < ashnur> harbhub, you said you could console.log it, then it's working, right?
05:16 < ashnur> SomeoneWeird, that's like saying that there is nothing wrong with IE6, if you know how to you is properly... i actually got this argument a lot of times a few years ago
05:16 < harbhub> http://jsfiddle.net/harbhub/XdsLg/5/
05:16 < SomeoneWeird> ashnur, what's wrong with jquery then?
05:16 < ashnur> it's like ie6
05:16 < harbhub> ashnur:  i can log the headers, but i cant log the data
05:16 < gildean> harbhub: you're using jquery yet you don't use the short form
05:16 < SomeoneWeird> in what way?
05:17 < gildean> harbhub: http://api.jquery.com/jQuery.post/
05:17 < gildean> harbhub: if you're using express, are you using the bodyparser also?
05:17 < SomeoneWeird> harbhub, app.use(express.bodyparser()); in your app config
05:17 < SomeoneWeird> then console.log(req.body.data);
05:17 < gildean> if so, the request data is in the req.body object
05:17 < SomeoneWeird> ;)
05:17 < harbhub> yes gildean
05:17 < harbhub> i have bodyParser()
05:18 < harbhub> and yes it is express  :)
05:18 < ashnur> SomeoneWeird, every way i can think of, please let this subject go, will you? I am not against it or anyone using it, i just have my own opinion, which I don't like to talk about much
05:18 < SomeoneWeird> kk
05:18 < harbhub> stil
05:18 < SomeoneWeird> not much of an argument, but alright
05:18 < harbhub> still, how do i get the input data?
05:18 < ashnur> i am not arguing
05:18 < gildean> ashnur: sounds like you really don't have any real reason
05:18 < ashnur> gildean, i don't need one
05:18 < SomeoneWeird> what gildean said
05:18 < SomeoneWeird> ashnur, yes, you do
05:19 < harbhub> can someone fiddle me the most simple express server-side code to grab the data?
05:19 < ashnur> lol, please tell me what I need, because You know best :)
05:19 < SomeoneWeird> you're saying there's something wrong with it, which means you need a reason
05:19 < gildean> jquery is just javascript, it only helps by giving you readymade eventhandlers etc. so you don't have to type them yourself
05:19 < harbhub> and the most simple client-side code to post the data?
05:20 < gildean> harbhub: on the server side, the name-field for example is usable as req.body.name
05:20 < gildean> and so forth
05:20 < harbhub> ohhh
05:20 < harbhub> req.body
05:20 < SomeoneWeird> yes
05:21 < SomeoneWeird> harbhub, http://pastebin.com/mES7GyxY
05:21 < harbhub> perfect
05:21 < harbhub> i already got it
05:21 < SomeoneWeird> :)
05:21 < harbhub> :) i'll check your paste though
05:21 < harbhub> sweet
05:21 < harbhub> hey
05:21 < harbhub> once i process the data on the server
05:21 < harbhub> can i send a callback to the client?
05:21 < harbhub> for instance
05:22 < harbhub> simple example
05:22 < SomeoneWeird> not sure, I know you can when using socketio though
05:22 < harbhub> client fills the text input with their password
05:22 < harbhub> i grab it, hash it, then send them back that "i got it and hashed it"
05:23 < SomeoneWeird> have a look at socketio
05:23 < harbhub> i.e. how do i send the client back data
05:23 < SomeoneWeird> will probably even be faster than using POST 
05:23 < gildean> harbhub: check the ajax post example in the jquery api i pasted a link to
05:24 < gildean> in it, the respose is in the callback function
05:24 < gildean> but you need to send some response from the server to the post-request
05:27 < harbhub> gildean:  right, i retrieve the data, i process it on the server-side, now i want to send something back to the client
05:28 < gildean> harbhub: yeah, you do that like any other request, with the response-object
05:28 < harbhub> yes but
05:28 < harbhub> response.what?
05:29 < gildean> if you're using templating with the express, then it's res.render(whatever) or if not, then just res.send(something)
05:29 < harbhub> i've never used response object to send a variable, i'd like to append the response-data to some div for starters
05:29 < harbhub> oh
05:29 < harbhub> res.send
05:29 < harbhub> i use ejs
05:29 < harbhub> for templating
05:30 < SomeoneWeird> use res.end
05:30 < harbhub> response.end('Hello');
05:30 < harbhub> i'll try that
05:30 < harbhub> nope
05:30 < ori-l> is there a way to recursively list an npm package's dependencies?
05:30 < harbhub> didnt do anything
05:31 < harbhub> i can show you both sides of my code
05:32 < ljharb> owen1: yes, just like heroku
05:32 < harbhub> https://gist.github.com/3768970
05:32 < harbhub> someoneweird gildean:  the response.end('Hello'); is not getting alerted on the client-side!
05:32 < harbhub> everything else is working though
05:33  * SomeoneWeird still thinks you should use socketio
05:34 < gkatsev> for some reason, taking advice from a 'SomeoneWeird' doesn't sound too confidence inducing, lol
05:34 < SomeoneWeird> -.-
05:34 < gkatsev> lol
05:34 < harbhub> lol i will
05:34 < harbhub> but i should know this first
05:35 < gkatsev> but yes, socketio
05:35 < harbhub> this seems fundamental
05:35 < harbhub> wait
05:35 < substack> just throw a mux-demux on top of shoe and you can use any abstraction you want, simultaneously
05:35 < ashnur> gkatsev :))
05:35 < substack> want callback-based rpc? no probs, d.pipe(m.createStream('dnode')).pipe(d)
05:36 < harbhub> this isnt working when i try to pass this in the data object    something: myData
05:36 < harbhub> the value for myData returns ''
05:36 < ashnur> sad
05:36 < harbhub> one sec
05:36 < harbhub> just realized
05:36 < substack> want socket.io-style evented pubsub? var ev = new EventEmitter; var s = emitStream(ev); s.pipe(m.createStream('events')).pipe(s)
05:36 < substack> and you're set
05:37 < SomeoneWeird> lol
05:37 < SomeoneWeird> he wants ajax post callbacks
05:37 < harbhub> got it working
05:37 < harbhub> yeah
05:37 < substack> if you want transforms, easy just toss an es.mapSync(function (x) { return x * 100 }) in there
05:38 < harbhub> substack:  are you a geenie?
05:38 < gkatsev> almost
05:39 < substack> harbhub: I am disappointed that not everyone realizes that they could be saving themselves so much trouble if they just used streams instead of ad-hoc brittle abstractions
05:39 < substack> if you are going to write an ad-hoc abstraction make sure it is a tiny one and put that shit on npm
05:39 < gildean> ashnur: you should give some reasons for hating everything that you don't use instead of spewing hateful comments
05:39 < gildean> try to be constructive
05:40 < ashnur> gildean, what? i did not do any of that :P
05:40 < owen1> substack: i smell a blog post coming..
05:40 < harbhub> substack:  you mean everyone should use  shoe?
05:40 < harbhub> i smell baked ziti
05:41 < ashnur> gildean, i was not hateful, i was disagreeing. why do you people always confuse the two.
05:41 < owen1> harbhub: (:
05:41 < harbhub> question
05:41 < harbhub> $(document) works
05:41 < substack> harbhub: no everybody should just use streaming apis for handling messages over long-running connections
05:41 < harbhub> why doesnt $(#someID)  work
05:41 < harbhub> ?
05:42 < substack> shoe is just 1 streaming library of many
05:42 < Sly> Ubuntu has went to shit.
05:42 < substack> you could just as well bolt a streaming api on top of engine.io
05:42 < harbhub> Sly:  HEYYyyyyYYYY
05:42 < gildean> ashnur: because you didn't explain your opinion but instead wen't for the "that's like ie6"
05:42 < Sly> About to reformat this computer as soon as I get home.
05:42 < gkatsev> Sly: are you going to switch to slackware instead? :P
05:43 < Sly> I don't know, but I'm going to something besides this shit.
05:43 < gkatsev> heh
05:43 < Sly> I did an upgrade last night, and now CTRL+ALT+T won't open the terminal..
05:43 < gkatsev> weird
05:43 < gildean> ashnur: if you want to give your opinion, please have some kind of reasoning behind it
05:43 < ashnur> gildean, i am not obliged to explain my views every time I express them, especially when I am not the on who is pushing the subject. 
05:43 < Sly> And it looks like the unity shell is opened twice, because the dropshadow for the top bar is darker than it should be..
05:43 < gkatsev> though, I never used that
05:43 < Sly> And the battery icons have been fucking up all weekend.
05:43 < ashnur> s/on /one /
05:43 < substack> owen1: I've already been writing the stream-handbook, that should be sufficient!
05:44 < gildean> ashnur: and then you wonder why it's considered hateful?
05:44 < Sly> Tried to see if anyone in #ubuntu-devel was having the same problem earlier, and of course no one answered.
05:44 < gkatsev> ashnur: no, you dont need to, but if someone asks, you should.
05:44 < gkatsev> also, people are likely to disregard such comments if they dont come with reasoning
05:45 < gildean> Sly: did you try unity --reset
05:45 < ashnur> gildean, this is not hate :) maybe you hate me for it, but i have nothing against you or anyone using jquery :)
05:45 < harbhub> hey chat group
05:45 < harbhub> why aren't we all millionaires?
05:45 < harbhub> we are the smartest people on the planet...
05:46 < gkatsev> why aren't we?
05:46 < gildean> ashnur: nah, i'd just like people to be more constructive instead of just shouting things like "don't use it, i don't like it so it's shit"
05:46 < ashnur> gkatsev, it's jquery and why I don't use it, it's a dull subject, I don't like to waste time on it. I don't want to convince anyone to follow my steps
05:46 < owen1> harbhub: because u don't need a lot of brainpower to make money
05:46 < ashnur> gildean, oh, I am constructive, but not when the subject is jquery :)
05:46 < gkatsev> lol
05:46 < Sly> gkatsev, ERROR: the reset option is now deprecated
05:46 < Sly> As I said, Ubuntu is going to shit.
05:46 < harbhub> meehhh lol
05:47 < gkatsev> Sly: gildean recommended that, and lol.
05:47 < gkatsev> Sly: what does the help say?
05:47 < harbhub> sly:  depreciated
05:47 < ashnur> gildean, let's talk about why math educations sucks, I like to reason about that :)
05:47 < gkatsev> Sly: are you using 12.10? or something?
05:47 < gildean> ashnur: what are you talking about?
05:48 < ashnur> nothing, really
05:48 < gildean> ashnur: iirc math education here is ranked nr.1 in the world
05:48 < Sly> Oops. Sorry. I saw g, I just assumed.
05:48 < Sly> And yes, 12.10.
05:48 < gkatsev> ah, hm...
05:48 < gkatsev> well, it's beta or something anyway
05:48 < Sly> Of course it is..
05:49 < Sly> But that shouldn't have anything to do with keybinds.
05:49 < gkatsev> yeah, idk why that is
05:49 < Sly> If they can't even keep keybinds during an upgrade, then fuck it.
05:49 < Sly> I'll change to someone who can keep their shit running properly. Ya know?
05:49 < Sly> They need to stop pulling everything into their code base that people want in it. Shit's turning it into bloatware.
05:50 < Sly> There were 3 updates to Compiz last week. I had 3 Compiz updates for the entirety of being on 12.04, and I used 12.04 since alpha.
05:50 < Sly> I mean.. It's just ridiculous.
05:51 < Sly> If it's not broke, stop trying to fix it.
05:51 < substack> software that pretty much doesn't change is my favorite
05:51 < Sly> ffs.
05:51 < ashnur> gildean, where is that? and please, I said math education sucks, in general, and it's because the system is flawed, which is because the general consensus about what mathematics is about is also flawed.
05:51 < ashnur> doesn't matter where you live, it's still the same shitty math
05:52 < gkatsev> yeah, physics was pretty similar to how math is still taught and then Feyman and co. changed it, so, it's much better now.
05:53 < gildean> ashnur: finland
05:53 < ashnur> physics has much advantage, having an experimental side where you can check if it makes sense or not
05:53 < substack> I've been using vim since 2004 and xmonad since 2007 and I've never had to update my config files once I set them up.
05:53 < gkatsev> yeah, definitely, but it was still taught the same was as math was until feyman.
05:53 < gildean> but i'm not a mathematician, so i only had 12 years of math in school
05:53 < harbhub> how do i console.log the url of the server?
05:53 < substack> I've never even paid attention to what versions of those I'm running.
05:53 < ashnur> math lacks this, and we treat it like an art, you are allowed to do whatever you want if you follow the rules of your peers
05:54 < substack> math has a lot of problems that are trivial to verify but hard to derive
05:54 < ashnur> gildean, there is a youtube channel, by a user njwildberger, he has some really cool videos
05:54 < substack> all NP hard problems for instance
05:54 < harbhub> help me lol
05:54 < harbhub> i want to console log the server address
05:54 < harbhub> simple task
05:54 < harbhub> __dirname could work
05:55 < substack> harbhub: console.dir(server.address())
05:55 < harbhub> but i want something that i could console.log() from anywhere
05:55 < ashnur> gkatsev, I am not familiar with the history of physics education, so I believe you :D
05:55 < harbhub> does that depend on the current file/directory i'm in?
05:55 < ashnur> not just because of this :D
05:55 < harbhub> or will that record the server address from anywhere in the app?
05:55 < ljharb> harbhub: it's javascript. youre never in a file or directory. you're in a function.
05:56 < harbhub> what
05:56 < ashnur> lol
05:56 < harbhub> lol
05:56 < harbhub> i like the harb
05:56 < harbhub> part of your name
05:56 < harbhub> :)
05:56 < gkatsev> in soviet russia, the function is in you.
05:56 < TehShrike> Well, there's http://nodejs.org/api/globals.html#globals_dirname
05:56 < harbhub> ljharb are you me>?
05:56 < ljharb> i was here first :-p
05:56 < harbhub> tehshrike that depends on the location of the file
05:57 < TehShrike> Indeed
05:57 < harbhub> if the file isnt root then that doesnt work
05:57 < harbhub> i'm not in the root, so what do i use?
05:57 < owen1> Sly: i switched from ubuntu to debian and i never looked back
05:57 < TehShrike> harbhub: use to find what?
05:57 < TehShrike> The current working directory when the script was launched?
05:57 < gkatsev> you can try Mint. It's based on ubuntu, but instead, they fork everything, lol.
05:58 < harbhub> tehstrike yes
05:58 < TehShrike> harbhub: like this? http://nodejs.org/api/process.html#process_process_cwd
05:58 < gkatsev> specifically, they've been forking stuff like gnome 2
05:58 < Sly> owen1, I kind-of like the way Unity has its menu integrated into the top bar.
05:58 < Sly> It reminds me of OSX..
05:58 < Sly> And since I'm on an AMD system, I can't run OSX.
05:58 < Sly> So Unity is the next best thing.
05:58 < gildean> mint with cinnamon looks nice
05:58 < gildean> and you can use ubuntu ppa's with mint
05:58 < gkatsev> I hate that. It means I can't do x-mouse/sloppy focus for apps
05:58 < Sly> I would never mix and match like that.
05:59 < harbhub> tehsrike:  what process command would grab the server/root address?
05:59 < Sly> Especially seeing how unstable Ubuntu is becoming.
05:59 < gkatsev> gildean: what's the cinnamon part?
05:59 < harbhub> i want to end up with something like   http://example.com
05:59 < gildean> Sly: i mean more like third party ppa's like the one from chris lea
05:59 < owen1> Sly: i prefer xfce or no DE + awesome window manager
05:59 < gkatsev> xmonad
05:59 < gildean> gkatsev: it's a desktop enviroment
06:00 < harbhub> tehshrike:  how do i make it show the address of the server?
06:00 < TehShrike> harbhub: http://nodejs.org/api/http.html#http_request_url
06:00 < Sly> owen1, I'd rather throw my computer in a pond than use awesome or some other type of window manager that has those static panel layouts.
06:00 < gkatsev> gildean: hm... I'll check it out. I know that mint was working on Mate (gnome 2 fork)
06:00 < gildean> gkatsev: they have both
06:01 < ashnur> arch with nwm? :D
06:01 < owen1> Sly: i'll do the same if u'll give me gnome/kde/unity
06:01 < gkatsev> gildean: ok, didn't hear about cinnamon
06:01 < harbhub> tehshrike so basically i have to make another request to the server to get the server's url?
06:01 < TehShrike> harbhub: huh?
06:01 < TehShrike> What is the context of this?
06:01 < harbhub> tehshrike:  the context is this
06:01 < Sly> I may actually switch to Mint, gildean. I haven't used it in a while.
06:01 < harbhub> i have a server
06:01 < TehShrike> harbhub: Your script could be handling requests from many different domains
06:01 < gkatsev> gildean: oh, it's another gnome 2 fork?
06:01 < Sly> Last time I used it was when it first came out, and was *super* bland.
06:01 < gildean> gkatsev: it looks nice, but might be somewhat incomplete, i've only tried it for a bit
06:02 < harbhub> tehshrike
06:02 < harbhub> exactly
06:02 < harbhub> that is the problem
06:02 < Sly> gkatsev, http://en.wikipedia.org/wiki/Cinnamon_(user_interface)
06:02 < TehShrike> harbhub: you have to look at the request to see what domain name the client was using to contact your server
06:02 < gkatsev> also, nemo is their nautilus fork
06:02 < harbhub> i want to check the the url sending the request
06:02 < gildean> gkatsev: http://cinnamon.linuxmint.com/
06:02 < harbhub> is from a specified domain
06:02 < harbhub> before i handle it
06:02 < harbhub> dude i got that part
06:02 < harbhub> i need MY server address
06:02 < Sly> lol, gildean. Beat you to it with a Wiki link. :P
06:02 < harbhub> lol
06:02 < harbhub> other than using __dirname
06:02 < harbhub> how do i get MY server address
06:02 < TehShrike> harbhub: its IP address?
06:02 < harbhub> sure
06:02 < gkatsev> gildean: ah, yeah, ok. It isn't a direct fork like mate is. Just tries to aim to be similar to it
06:03 < harbhub> how do i get that
06:03 < Sly> harbhub, are you talking internal or external IP?
06:03 < gkatsev> it's a fork of gnome shell. Cool.
06:03 < TehShrike> Or are you trying to find a list of domains that DNS servers have associated with your IP address?  Because that's probably not very possible
06:03 < harbhub> external
06:03 < harbhub> like
06:03 < harbhub> www.mydomain.com
06:03 < gkatsev> I might check it out. Personally, I'm not a big fan of gnome-shell/gnome3
06:03 < harbhub> lets say that is my server
06:03 < Sly> If you're talking the IP that is exposed to your external network, you'll need to use some outside source to get the IP address and then parse it appropriately.
06:03 < harbhub> the node app is hosting that
06:03 < ljharb> harbhub: to find the external address of a server, you have to hit something like whatismyip.org
06:03 < gildean> TehShrike: it is, with the dns core module
06:04 < harbhub> ahhh
06:04 < harbhub> this should be so simple
06:04 < harbhub> guys
06:04 < harbhub> my app has a server
06:04 < harbhub> the client is sending requests from anywhere
06:04 < Sly> gkatsev, I'm not a fan of GNOME3 either. That's why I stopped using Fedora.
06:04 < harbhub> i grab the request url, fine got that
06:04 < TehShrike> gildean: huh, I didn't know about dns.reverse, that's cool!
06:04 < harbhub> i grab my server url
06:04 < harbhub> how?
06:04 < harbhub> simply put, how do i console.log() my server's url
06:04 < ljharb> harbhub: it's not simple, because your server doesn't know its own external ip address.
06:05 < ljharb> you do not do it simply.
06:05 < gkatsev> Sly: yeah, I actually dont mind unity, though, I think the defaults need to be different.
06:05 < harbhub> so
06:05 < harbhub> you are saying then
06:05 < gildean> TehShrike: yeah, i just wrote a small app to fo whois, i might put it up to github today and deploy it to nodester
06:05 < harbhub> that i have to make another request
06:05 < ljharb> harbhub: why do you think you need the server's external address?
06:05 < harbhub> to myself
06:05 < gildean> *to do
06:05 < harbhub> then grab that url
06:05 < Sly> gkatsev, it wouldn't be so bad if they would just leave the damned thing alone.
06:05 < ljharb> harbhub: no, not to yourself, FROM yourself to somewhere else that will tell you what your IP is.
06:05 < harbhub> since it comes from the server
06:05 < TehShrike> gildean: sweet, I'll watch for that
06:05 < harbhub> hmm
06:05 < harbhub> ljharb
06:05 < harbhub> so i need two servers
06:05 < Sly> Unity works fine the way it is. They need to stop adding shit to it, and focus on working on the main system.
06:05 < ljharb> harbhub: or something like whatismyip.org
06:05 < Sly> Even nautilus crashes for me.
06:05 < Sly> Pidgin crashes for me.
06:05 < gildean> TehShrike: i'll post a link here when i'm done
06:06 < ljharb> harbhub: but answer: why do you think you need that address?
06:06 < Sly> CTRL+ALT+T won't open Terminal..
06:06 < ashnur> Sly, try nwm :)
06:06 < harbhub> ljharb
06:06 < Sly> But CTRL+ALT+E will open my editor.
06:06 < harbhub> i want people to ONLY be able to post stuff
06:06 < Sly> It's pretty retarded, tbqh.
06:06 < harbhub> from my domain
06:06 < harbhub> so
06:06 < harbhub> i check where the post request comes from
06:06 < harbhub> if it matches my domain
06:06 < harbhub> then bam
06:06 < ljharb> harbhub: you can't do that, because "where the post comes from" can be easily spoofed.
06:06 < harbhub> i can do it trivially by just checking my actual domain
06:06 < ljharb> harbhub: go google "CSRF token" and you'll see an actual solution
06:07 < harbhub> ljharb:  really?
06:07 < ljharb> really.
06:07 < ljharb> because the post isn't coming from your server. it's coming from anybody's web browser. so, you have NO CONTROL over where they're posting from.
06:08 < harbhub> lol wow
06:08 < harbhub> i feel smart since
06:08 < harbhub> i was pre-emptively thinking about defending an attack
06:08 < harbhub> that i didnt know exists
06:08 < harbhub> but thought about it could happen
06:09 < harbhub> and actually it is real
06:09 < harbhub> i also feel ignorant
06:09 < harbhub> :)
06:09 < TehShrike> >_<
06:09 < harbhub> i can't beat the CSRF token
06:09 < ljharb> a) it is real, b) the solution is CSRF, c) build your app before you worry about things like that.
06:09 < harbhub> o.0
06:09 < TehShrike> I'm going to put on my furry slippers now.
06:09 < harbhub> lol
06:09 < harbhub> you guys are awesome
06:10 < harbhub> ljharb:  you da man
06:10 < harbhub> so many awesome people are programmers
06:10 < TehShrike> heehee
06:11 < TehShrike> There are some programmers who are pretty awesome people
06:11 < Sly> God. I'm ready to get back to my flash drive so I can reformat this shit.
06:12 < Sly> I keep trying to open terminal with the hotkey and it pisses me off every time it doesn't work.
06:12 < gkatsev> re-add the hotkey?
06:12 < Sly> The worst part about it.. My custom hotkey for the editor works.
06:12 < harbhub> guys, anyone using mongodb here?
06:12 < Sly> Can't readd it. It's a default hotkey.
06:12 < Sly> You can't remove default hotkeys, since the Ubuntu devs are fucking idiots.
06:12 < gkatsev> oh, hm...
06:12 < Sly> -_-;
06:13 < Sly> "Let's forcefully make these hotkeys regardless of whether people want them or not."
06:13 < substack> THAT WILL SHOW THEM
06:13 < Sly> ikr?
06:13 < harbhub> anyone using MongoDB?
06:13 < substack> Sly: you could use a window manager that basically doesn't change instead
06:14 < gildean> harbhub: i've used it in some projects, yes
06:14 < substack> tiling window managers woo
06:14 < Sly> substack, I thought about going with Fluxbox.. but I enjoy having a more graphical interface.
06:14 < owen1> harbhub: i use mongo
06:14 < Sly> I used to use Fluxbox religiously.
06:14 < harbhub> ok
06:14 < harbhub> do you use mongoose?
06:14 < harbhub> as the wrapper?
06:14 < substack> fluxbox is far too graphical for my tastes
06:14 < harbhub> gildean owen1:  do you use a wrapper for node?
06:14 < Sly> I'm not big on the tiling managers.
06:14 < owen1> harbhub: no. the native driver from 10gen
06:14 < harbhub> such as mongoose
06:14 < Sly> They're too limited for my tastes.
06:15 < harbhub> owen1:  that works in node?
06:15 < harbhub> not sure which you mean
06:15 < gildean> harbhub: i've used mongojs, it's nice and plain
06:15 < owen1> https://github.com/mongodb/node-mongodb-native
06:15 < substack> I like having black rectangles that I can type into and rearrange with key combinations and nothing else
06:15 < owen1> substack: +1
06:15 < harbhub> ok so guys
06:15 < Sly> substack, I would too.. if all I used my computer for was developing.
06:15 < harbhub> how come when i type mongo into the terminal
06:15 < harbhub> is says it connects to test
06:16 < owen1> lenovo x120e + debian + awesomeWM + dvorak
06:16 < harbhub> i made a collection called test
06:16 < gkatsev> unity/compiz has hotkeys for moving windows into grids, which is pretty close to it.
06:16 < harbhub> maybe it is trying that?
06:16 < ashnur> substack, have you tried nwm? 
06:16 < gildean> harbhub: if you don't specify a collection, it automatically opens a test collection
06:16 < owen1> ashnur: i heard about it but didn't try it yet
06:16 < harbhub> https://gist.github.com/3769057
06:16 < TehShrike> Or have you tried... Xiki? http://youtu.be/bUR_eUVcABg
06:16 < harbhub> gildean: oh
06:17 < harbhub> gildean:  so then how the heck do i use a db in my app?
06:17 < ashnur> i am afraid if people will not start using it, it will die out :(
06:17 < harbhub> the mongodb can only run one collection?
06:17 < gkatsev> nwm is mixu's node wm, right?
06:17 < harbhub> test is a collection, right?
06:17 < ashnur> gkatsev, right
06:17 < gildean> harbhub: you open up a connection to the db and then specify collections you want to use
06:17 < harbhub> hmm
06:18 < harbhub> so i shouldnt be alarmed that it starts with test
06:18 < owen1> harbhub: https://github.com/oren/weighmyplate/blob/master/server.js   - example of opening connection to mongodb
06:18 < Sly> Oh.
06:18 < Sly> Awesome.
06:18 < Sly> First line in the Linux Mint's latest blog..
06:18 < Sly> Important info:
06:18 < Sly> Boot hangs on systems with b43 wireless cards
06:18  * Sly slits wrists.
06:18 < Sly> I have a BCM4312.
06:18 < Sly> -_-;
06:19 < owen1> Sly: i have nightmares with this card
06:19 < owen1> so many lost hours
06:19 < gkatsev> Sly: haha
06:19 < Sly> Mine has never given me any problems, owen1.
06:19 < gildean> Sly: yeah, b43 binary drivers suck balls
06:19 < substack> Sly: is that the node one? was a bit involved when I looked at the directions for it
06:19 < harbhub> owen1:  so basically
06:19 < harbhub> you are checking if MONGO_HOST exists
06:19 < harbhub> and if so
06:20 < harbhub> you set the process.env to MONGO_HOST
06:20 < harbhub> otherwise
06:20 < harbhub> you set the process.env to localhost
06:20 < harbhub> ?
06:20 < Zoney> no
06:20 < owen1> harbhub: u can just hardcode those
06:20 < owen1> harbhub: make it work first
06:20 < Sly> substack, not sure. I haven't looked deep into the B43 cards.
06:21 < harbhub> but you are requiring mongodb
06:21 < harbhub> that isnt any wrapper!?
06:21 < TehShrike> harbhub: fyi, you should be able to get by with about a third as many newlines :-x
06:21 < owen1> harbhub: https://github.com/mongodb/node-mongodb-native
06:22 < harbhub> oh so require('mongodb') is calling the node-mongodb-native
06:22 < harbhub> ?
06:22 < owen1> harbhub: yes. it's a driver. the offical one from 10gen
06:22 < harbhub> got it
06:22 < owen1> harbhub: start by copy paste the example they give and slowly add more stuff if needid.
06:22 < owen1> needed
06:22 < harbhub> why did you set userCollections to null
06:22 < harbhub> couldnt you just say var userCollections;
06:23 < harbhub> and get the same result as var userCollections = null;
06:23 < harbhub> ?
06:23 < owen1> harbhub: maybe..
06:23 < harbhub> lol
06:23 < owen1> harbhub: if i don't set it, wouldn't it be undefined?
06:23 < harbhub> yep
06:23 < harbhub> but does that matter?
06:24 < ljharb> harbhub: undefined and null are two different values.
06:24 < owen1> harbhub: from some reason i prefer null over undefined. maybe it's stupid.
06:24 < harbhub> fair enough
06:24 < harbhub> you guys are awesome
06:24 < owen1> it's a good question to ask here or on #javascript
06:24 < harbhub> yep
06:25 < harbhub> i figured when i asked it was a better js question
06:25 < gkatsev> generally, null is for explicit lack of value while undefined is implicit lack of value
06:25 < gkatsev> or, at least, that's what a lot of people do.
06:25 < harbhub> cool
06:25 < harbhub> whoa!
06:25 < harbhub> mapleTree
06:26 < harbhub> i like how your router is set up
06:26 < Sly> owen1, I usually prefer null because it's less typing.
06:26 < Sly> #forthelulz
06:26 < harbhub> teach me your waysssss
06:26 < owen1> gkatsev: right. there are 3 situation of undefine: not assigning a value to a variable, forgetting to pass an argument to a function and accessing a key in a hash that doesn't exist.
06:26 < owen1> harbhub: yeah. i use mapleTree for router
06:27 < owen1> it's a fast routing module
06:27 < harbhub> yeah i can tell
06:27 < owen1> i try to not use frameworks as express if i can avoid it
06:27 < gkatsev> owen1: also, void op. :P
06:27 < harbhub> since all routes get a separate file
06:27 < owen1> harbhub: https://github.com/oren/node-website-template  - template for my web apps
06:28 < ljharb> owen1: technically all 3 of those are the same
06:28 < Sly> Speaking of routers. Finally got DD-WRT on a router the other day. ;D
06:28 < owen1> harbhub: i try to follow isaacs's approach. he is building the new version of npm website
06:28 < Sly> Didn't have time to hack on it before I had to leave for this trip, though. :(
06:40 < deoxxa> owen1: https://npmjs.org/doc/scripts.html
06:42 < Sly> deoxxa, <3
06:42 < deoxxa> oh you, Sly
06:42 < deoxxa> making me blush
06:42 < Sly> You silly Aussie. <3
06:43 < deoxxa> 'scarn on
06:43 < deoxxa> http://www.youtube.com/watch?v=p0cf0bDYqe0 welcome to australia
06:44 < Sly> Can't watch it right now. In the hotel room, and my grandfather is passed out.
06:44 < deoxxa> sounds like you had either a very fun or a very disturbing night
06:44 < Sly> ROFL
06:45 < Sly> It's been a fucking disaster of a week. Been drag racing since Thursday.
06:45 < Sly> And our car didn't work.. at all. Inconsistent numbers, driver errors, and just all around stupid mistakes.
06:45 < Sly> Basically spent like $3,000 for nothing.
06:46 < owen1> deoxxa: i lost the context. what is the link related to?
06:46 < deoxxa> owen1: postinstall/prepublish scripts
06:46 < deoxxa> Sly: :<
06:46 < owen1> deoxxa: oh. i'll take a look. awesome.
06:46 < Sly> deoxxa, what is "scarn"? My friend from Oz doesn't even know what it is, and it's bugging me to find out.
06:47 < deoxxa> lol, "'scarn on" -> "what's going on" in extreme bogan mode
06:49 < owen1> deoxxa: "Run BEFORE the package is published."  how is that related to deploy? what does publish means? whan u run the 'deploy' command for that package?
06:49 < harbhub> guys
06:49 < harbhub> i am trying to do something simple
06:50 < harbhub> i am connected to my mongodb using the native
06:50 < owen1> harbhub: why native? (:
06:50 < harbhub> how do i add to a collection
06:50 < harbhub> then console.log it
06:50 < harbhub> why not?
06:50 < owen1> harbhub: look at my models folder
06:50 < owen1> harbhub: just kidding
06:51 < owen1> harbhub: https://github.com/oren/weighmyplate/blob/master/models/user.js
06:51 < Sly> Thanks, deoxxa. It was driving me nuts. xD
06:51 < harbhub> lol owen
06:51 < harbhub> im not on your level, yet
06:52 < owen1> harbhub: https://github.com/oren/weighmyplate/blob/master/db/seed.js?#L93
06:52 < harbhub> findOne
06:52 < harbhub> worked
06:53 < Sly> Oh man. They're bringing back the "Beyond Scared Straight" show.
06:53 < Sly> Also.. YAY! deoxxa made it through the netsplit. :D
06:53 < harbhub> owen1
06:54 < harbhub> you are brilliant can i tell ya?
06:54 < owen1> harbhub: harbhub 
06:54 < harbhub> are all those foods added by default?
06:54 < harbhub> or can you have the client save a new food
06:54 < harbhub> and it gets written in there?
06:54 < AAA_awright> owen1: https://github.com/oren/node-website-template is yours?
06:55 < owen1> harbhub: i have a makefile. so i run make db-seed and it will add all that food
06:55 < Sly> deoxxa, "Torry: bogan ... hes qld or nsw ?"
06:55 < harbhub> owen1:  what do you do for a living?
06:55 < owen1> (it's a nutrition calculator i am building for myself because everything else sucks)
06:55 < owen1> AAA_awright: yes
06:55 < harbhub> haha
06:55 < owen1> harbhub: writing code
06:55 < harbhub> really?
06:55 < AAA_awright> owen1: I wouldn't check dependencies into Git, that's a bad idea for a number of reasons... try https://github.com/Acubed/git-node
06:57 < owen1> AAA_awright: ok. i'll take them out. thanks
06:58 < AAA_awright> owen1: Well, you have to replace taking them out with something...
06:58 < AAA_awright> I'm suggesting Git submodules
06:58 < harbhub> git submodules are complex
06:58 < AAA_awright> And totally worth it
06:58 < harbhub> probably easy once you get the hang of them, though
06:59 < harbhub> yep i imagine
06:59 < harbhub> you are also smart
06:59 < owen1> AAA_awright: why not rm the folder and using npm install?
06:59 < harbhub> so many smart people here
06:59 < AAA_awright> harbhub: Hence my project, https://github.com/Acubed/git-node
07:00 < harbhub> cool project
07:02 < AAA_awright> harbhub: with git-node I just rm'd node_modules and ran `git node update` and that seemed to work well enough
07:03 < AAA_awright> Might have to browse through to find the exact commit that you want for some of the modules
07:03 < AAA_awright> er, owen1 ^
07:03 < harbhub> beauty of git:  it is distributed
07:03 < AAA_awright> YES
07:03 < harbhub> i'm not scared/worried of the module disappearing
07:03 < harbhub> also
07:03 < harbhub> i require the exact version
07:03 < harbhub> in my package.json
07:04 < harbhub> it isn't going anywhere
07:04 < harbhub> my app has it downloaded
07:04 < harbhub> o.0
07:04 < harbhub> linus torvalds:  if you can hear me, you are awesome
07:04 < AAA_awright> What's cool about this is you can specify versions you're compatible with to update dependencies, but as long as you're doing git clone, you know exactly what tree you're checking out
07:05 < harbhub> o.0
07:06 < harbhub> hey does anyone use express sessions?
07:06 < harbhub> why does everyone use keyboard cat as the secret
07:06 < harbhub> does that mean something?
07:06 < owen1> can i use nvm on my production box?
07:07 < gildean> harbhub: you can set an exact version in package.json with "somemodule": "=versionnumber"
07:07 < substack> or just "somemodule" : "versionnumber"
07:09 < gildean> then if you need to install some exact version from npm, you can do nmp install somemodule@versionnumber
07:09 < owen1> i want to run 2 sites on the same machine. is bouncy (https://github.com/substack/bouncy#readme) a good alternative for nginx?
07:09 < substack> it's not as fast
07:09 < substack> but whatevs
07:10 < gildean> imo having it all in nodejs is so much nicer, it's worth the tradeoff
07:10 < gildean> tho' i've used node-http-proxy, but i'm guessing there isn't much difference between the performance of that or bouncy
07:11 < substack> http-proxy is a bit faster
07:11 < gildean> substack: have you done some benchmarks?
07:11 < ashnur> i've used bouncy with docpad, and sometimes bouncy just dies, not sure why :-S, still have to debug it 
07:12 < owen1> ashnur: docpad! yeaaaaaaaaaaa
07:12 < gildean> substack: i mean, do you have some benchmark results public somewhere?
07:16 < owen1> if anyone know the nginx.conf i need for serving my 2 websites on 2 differnt ports, please gist it..
07:16 < owen1> bouncy was so easy
07:17 < gildean> owen1: then why not use it?
07:17 < gildean> or node-http-proxy, if it's faster as substack says
07:17 < gildean> and i believe him
07:18 < owen1> gildean: i thought nginx is the fastest
07:18 < gildean> it prolly is
07:18 < gildean> but how much traffic is there on your site?
07:18 < gildean> or your server that is
07:18 < owen1> tiny. but it's on my home server, so i want it to be as fast as possible.
07:19 < owen1> i'll try node-http-proxy
07:19 < gildean> owen1: you won't even notice a difference unlees there's very heavy traffic
07:19 < gildean> *unless
07:20 < owen1> gildean: between bouncy and node-http-proxy? or compare to nginx?
07:20 < gildean> between any of those
07:20 < owen1> gildean: ok. i'll stick to bouncy 
07:21 < gildean> if it's your home server, the bottleneck is prolly going to be bandwith and not the server itself
07:22 < gildean> unless you're on fiber
07:22 < owen1> i wish
07:44 < owen1> 'sudo bouncy routes.json 80' =>  sudo: bouncy: command not found
07:45 < nkuttler> owen1: install it?
07:46 < nkuttler> owen1: if you installed it with npm it's probably not on your PATH
07:48 < owen1> nkuttler: 'which bouncy' => ~/nvm/v0.8.9/bin/bouncy
07:49 < owen1> 'which node' => ~/nvm/v0.8.9/bin/node
07:49 < nkuttler> owen1: sudo which bouncy
07:49 < owen1> nkuttler: nothing
07:49 < nkuttler> man sudo i gues.. no idea how it handles env vars. or just use the full path, probably *much* better
07:51 < tuhoojabotti> sudo nvm?
07:51 < owen1> tuhoojabotti: command not found
07:51 < tuhoojabotti> well yeah
07:53 < owen1> i see #!/usr/bin/env node in the first line of bouncy. it assume my node is in /user/bin/env
07:54 < owen1> i'll change it to nvm folder
08:02 < nathan7> owen1: /usr/bin/env is a program that finds it in your PATH
08:07 < owen1> nathan7: what do u sugggest i should do? when i replace it with ~/nvm/v0.8.9/bin/node it's working
08:08 < SomeoneWeird> export PATH=~/nvm/v.0.8.9/bin:$PATH
08:08 < SomeoneWeird> export PATH=~/nvm/v0.8.9/bin:$PATH
08:08 < SomeoneWeird> :)
08:09 < nathan7> owen1: ~ isn't valid in hashbang lines
08:09 < nathan7> owen1: ~ is interpolated by your shell into /home/owen or whatever
08:09 < owen1> nathan7: true. i gave it the full path
08:09 < nathan7> owen1: I'd add shit to your PATH in your bashrc instead of sticking those paths in your hashbang lines
08:13 < owen1> nathan7: what kind of shit should i add?
08:13 < nathan7> owen1: What SomeoneWeird said
08:13 < owen1> nathan7: oh.
08:13 < owen1> SomeoneWeird: thanks!
08:13 < SomeoneWeird> :)
08:13 < owen1> missed that
08:28 < owen1> i sourced my new .bashrc, i see the path when i echo $PATH but /home/owen/nvm/v0.8.9/bin/bouncy routes.json 80 =>  /usr/bin/env: node: No such file or directory
08:28 < owen1> sudo  /home/owen/nvm/v0.8.9/bin/bouncy routes.json 80 
08:35 < nathan7> owen1: sudo drops your environment
08:35 < nathan7> owen1: for security reasons
08:37 < owen1> nathan7: oh. any other suggestions?
08:37 < owen1> am i the only one using bouncy?
08:37 < nathan7> I was
08:38 < nathan7> but I'm switching to my-little-proxy
08:38 < nathan7> which uses node-http-proxy which is battle-tested and all
08:38 < gildean> nathan7: why not use node-http-proxy alone?
08:38 < gildean> it's very simple as well
08:38 < nathan7> gildean: because the API is large and the docs are bad
08:38 < nathan7> mylittleproxy provides all I need
08:38 < gildean> oh?
08:39 < owen1> nathan7: i'll try the little one
08:39 < gildean> i found the readme had all i needed for the proxy to work
08:39 < owen1> since bouncy didn't work ):
08:39 < gildean> it's easy to terminate https on the proxy and then use http inside the localhost in that one
08:39 < nathan7> bouncy is being very broken for me oddly enough
08:41 < TehShrike> Oh hey, my-little-proxy looks awesome
08:42 < nathan7> my little proxy / my little proxy / I used to wonder what node could be / my little proxy / until you shared all its magic with me
08:42 < TehShrike> lol
08:55 < nathan7> okay
08:55 < nathan7> MLP seems somewhat broken
09:01 < owen1> nathan7: i can't run it. i get: can't find module http-proxy
09:02 < nathan7> owen1: wut
09:02 < nathan7> owen1: you did npm install?
09:03 < owen1> nathan7: there is no npm for the proxy
09:03 < owen1> oh. http-proxy? no
09:04 < owen1> so clone the little one and npm install -g of http-proxy?
09:04 < nathan7> owen1: go to the git dir
09:04 < nathan7> owen1: and do npm install
09:04 < nathan7> owen1: to get all the dependencies
09:04 < nathan7> owen1: and sure there is
09:04 < owen1> oh
09:04 < nathan7> owen1: npm install git://github.com/FrozenFire/my-little-proxy.git
09:04 < nathan7> (that's my non-broken fork)
09:05 < nathan7> it breaks because of a typo (notfound vs notFound) in jesusabdullah's repo
09:06 < nathan7> oh
09:06 < nathan7> he fixed it
09:11 < owen1> nathan7: not found is not defined
09:11 < nathan7> owen1: yes
09:11 < nathan7> owen1: it is fixed now
09:14 < SomeoneWeird> lol
09:17 < owen1> nathan7: works! i have it www.mysite.com  can i use regex so it will also get mysite.com and www.mysite.com ?
09:18 < nathan7> owen1: .host('www.mysite.com')
09:18 < nathan7> owen1: you can also do .host('*.mysite.com')
09:19 < Gottox> win 24
09:20 < owen1> nathan7: * did't solve it. maybe *mysite.com
09:29 < mikrowelt> o/
10:00 < FMEG08126> hey i want i learn node.js so from which hjavascript book should i start from
10:00 < FMEG08126> i know little javascript
10:02 < FMEG08126> is JavaScript: The Good Parts stuiable for beginners
10:02 < FMEG08126> in javascript
10:03 < gildean> it's a good js book for anyone
10:03 < RLa> yes
10:03 < RLa> also get Eloquent JavaScript
10:03 < gildean> but if you want something simple and to the point in node, imo this is a good start: http://www.nodebeginner.org/
10:04 < gildean> also i found the way crockford does lectures enjoyable
10:04 < FMEG08126> <gildean> but i know very little javascript, is this fine with the http://www.nodebeginner.org/
10:04 < gildean> see here: http://www.yuiblog.com/crockford/
10:05 < FMEG08126> <gildean> but i know very little javascript, is this fine with the http://www.nodebeginner.org/
10:05 < gildean> no need to spam
10:05 < FMEG08126> sorry
10:05 < FMEG08126> just got pressed up key
10:05 < FMEG08126> sorry
10:06 < gildean> np
10:06 < FMEG08126> tell me
10:06 < gildean> check out the lectures from crockford, here's also his style guide: http://javascript.crockford.com/code.html
10:06 < TehShrike> I learned a lot from JS: The Good Parts, and Eloquent JS.  I also found JavaScript Patterns to be useful
10:06 < gildean> then check the node beginner book, then just start doing things
10:07 < gildean> imo you learn best by doing
10:07 < gildean> but that might be just me
10:07 < TehShrike> Definitely, doing is necessary
10:08 < FMEG08126> is The Good Parts for beginners like me who has little knowlege of javascript
10:08 < TehShrike> But sometimes I don't know what I'm supposed to be doing
10:08 < TehShrike> And then books and blog posts can be good :-)
10:08 < TehShrike> FMEG08126: it worked well as a JavaScript introduction for me.  Not a good intro-to-programming book, I suppose.
10:08 < gildean> FMEG08126: yes, but as i said, check the lectures first and you'll learn about the history of javascript and all kinds of points
10:09 < gildean> TehShrike: the mindset for programming is really hard to teach, or to learn from books imo
10:10 < gildean> it's bit like, something has to snap in your brain for you to start thinking like a programmer
10:10 < TehShrike> Indeed.  I don't know if I've ever seen it transmitted well, though at times I will read something that I think embodies it well.
10:10 < FMEG08126> i m a programmer
10:11 < TehShrike> It's a pretty broad set of ideas to teach in just one book, let alone in the opening chapters of a book that teaches you a language
10:11 < gildean> FMEG08126: then you'll have no problems, listen to the lectures by crockford, they're entertaining and teaches you about javascript
10:13 < FMEG08126_> which lecture are you talking about gildean
10:14 < gildean> crockford on javascript
10:14 < gildean> as i said about five times already
10:14 < FMEG08126_> i know
10:14 < FMEG08126_> but screen is full mess
10:14 < FMEG08126_> just one more link me
10:14 < FMEG08126_> http://javascript.crockford.com/code.html
10:14 < gildean> go to youtube and search crockford on javascript
10:15 < FMEG08126_> is this right
10:15 < gildean> that's a good style guide imo
10:16 < TehShrike> Another thing to read! http://inimino.org/~inimino/blog/javascript_semicolons
10:17 < FMEG08126_> http://www.youtube.com/results?search_query=crockford+on+javascript        this is good
10:17 < FMEG08126_> awesome
10:18 < FMEG08126_> is mastering javascript is essential to learn node
10:18 < FMEG08126_> or an average javascript will do
10:19 < TehShrike> If you're using node, you're using JavaScript
10:19 < TehShrike> Personally I just aim to keep getting better at a language as long as I'm using it
10:21 < FMEG08126_> means after learning basic of javascript i can learn node
10:21 < gildean> yes
10:21 < FMEG08126_> and its framework express.js
10:21 < gildean> or you can even learn javascript while learning node
10:21 < FMEG08126_> you can even learn javascript while learning node   -- how
10:22 < gildean> by doin it, it's just javascript
10:22 < gildean> node is not a language of it's own, it's something between an engine, a framework, a library and a mindset
10:22 < gildean> but the language is javascript
10:23 < FMEG08126_> ok
10:24 < TehShrike> Man, I really want to try out some LispyScript
10:25 < FMEG08126_> and what is coffeescript
10:25 < FMEG08126_> similar to javascript?
10:25 < FMEG08126_> or different
10:26 < gildean> coffeescript is compiled to javascript
10:26 < TehShrike> FMEG08126_: it is a syntax that you can write, which you turn into JavaScript before you run it
10:26 < Gottox> it's very similiar to js, but with a optimised (or like some ones say perverted) syntax.
10:27 < gildean> but debugging coffeescript without understanding javascript will be extremely hard
10:27 < TehShrike> I read something recently that called coffeescript optimized for writing, but poorer for reading
10:27 < TehShrike> I haven't written it myself
10:28 < TehShrike> I think I'm going to try using this for a bit, though http://lispyscript.com/
10:29 < mal_> Hello all
10:30 < mal_> Don't suppose anyone has a shortcut for firing a module's callback on next tick?
10:30 < gildean> process.nextTick(callback) ?
10:31 < mal_> Sorry, I meant a C module's callback
10:31 < mal_> I know I can do it by grabbing the js function and wrapping the callback and args in another function
10:31 < FMEG08126_> is the knowlege of c and c++ is essential in node
10:32 < mal_> Just wondered if there was a better way
10:32 < TehShrike> FMEG08126_: no
10:33 < FMEG08126_> ok gotta go
10:35 < TehShrike> Anyone here used this sort of tail-call optimization for recursion? https://gist.github.com/1697037
10:35 < FMEG08126_> i will start by http://www.nodebeginner.org/ to get the feel of node.js and then start with javascript and all the links provided by gildean and youtube 
10:38 < FMEG08126_> bye
11:12 < Danielss89> Hi.. 
11:14 < Danielss89> So.. I have a main file, which i run with "node server.js".. and in this file, i include my own "modules". In top of my server file i connect to mysql: http://ds.gl/f97202.png <-- how can i use this "mysql" variable in the modules i include, so that i don't have to do the connection in each file?
11:18 < TehShrike> You could make a module of your own that handles the connecting, and returns the connected database object, and then have all your modules require that one module
11:18 < TehShrike> You could pass your connected mysql object in to all of the other modules you create, I suppose
11:20 < Danielss89> TehShrike: ok, so theres no "easy" way like making it global or something
11:21 < TehShrike> Well, putting your connection handling in a single tiny module sounds pretty easy to me
11:21 < Danielss89> ok.. thats what i do then :)
11:21 < Danielss89> thx
11:31 < Amfy> some embarrassing question, but how to use if(blabla == blabla2 OR test=test2), since I always get a error at the OR-part.
11:33 < BennyLava`> lolwat
11:33 < FMEG08126> plese recommend a good javascript book for learning javascript
11:34 < BennyLava`> Amfy, FMEG08126: http://eloquentjavascript.net/
11:34 < Amfy> BennyLava` oh, it is also available in German, nice.
11:35 < FMEG08126> any other
11:35 < nkuttler> FMEG08126: http://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides/dp/0596805527/
11:35 < FMEG08126> i m complete beginner
11:35 < FMEG08126> in javascript
11:36 < FMEG08126> but i know programming in other language
11:36 < FMEG08126> like ruby and python
11:40 < TehShrike> Amfy: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Logical_Operators
11:40 < Danielss89> Hmm why do i get a "warn  - error raised: Error: listen EADDRINUSE" on this. http://ds.gl/d68d39.png i have another similar script, but it runs on another port.
11:40 < Amfy> TehShrike thanks! :)
11:40 < Danielss89> I'm pretty sure theres nothing else on that port :S and i've tried 4-5 different ports..
11:41 < TehShrike> Danielss89: pretty sure the max port is 65535
11:41 < grange> Hello guys. Does anyone knows good resources about node.js architecture in general? I need to write about it for my master thesis, but I can't find any detailed resources 
11:41 < Danielss89> TehShrike: i get the same with lower ports
11:42 < Danielss89> tried 2312, 3241, 8584, 9239
11:42 < Danielss89> so on
11:42 < TehShrike> grange: architectures built with it, or the architecture of node.js itself?
11:42 < grange> everything I can get acutally, TehStrike
11:42 < grange> I wrote about the google v8 engine and now want to write about node
11:42 < TehShrike> Danielss89: I'm not sure.  I ran into the same thing on Windows the other day when trying to get node-inspector to work.
11:42 < grange> then express and socket.io, because these are the frameworks I used for my project
11:42 < Danielss89> TehShrike: did you get it to work?
11:43 < TehShrike> Danielss89: nope, I still don't know what was up with that
11:43 < Danielss89> weird :S
11:43 < TehShrike> What OS are you on?
11:43 < Danielss89> debian
11:47 < Danielss89> TehShrike: ok found the errore!
11:47 < TehShrike> Danielss89: :-o what was it?
11:47 < Danielss89> TehShrike: i included socket.io before creating the server
11:48 < TehShrike> grange: this may interest you http://2012.nodeconf.com/theatre/ryan_dahl.html
11:50 < grange> thank you TehStrike. Acutally it is quite hard to find facts which are official enough to cite ;)
11:51 < TehShrike> Hopefully Ryan Dahl counts!
11:51 < grange> I think so. Need to transcript, but it's a start :)
11:56 < christian_> any socket.io experts in the building?
11:57 < grange> by far not an expert, but try. otherwise try in #socket.io ;)
11:57 < SomeoneWeird> ask and you might find 
11:57 < SomeoneWeird> :)
11:57 < christian_> :)
12:04 < christian_> i'm using socket.io's origin settings to allow my heroku rails app to communicate with my very basic nodejitsu socket.io server. It works with 'io.set( 'origins', 'my-app-name.herokuapp.com:*' );', but only in Safari, not in Firefox... I did some research and apparently I need to put the nodejitsu app under SSL for this to work.  I've taken a shot at start an https server in my node app, and it starts, but now I get 'Origin not
12:04 < christian_> ...from my client...
12:04 < christian_> phew
12:05 < christian_> if anyone was familiar with this,  I would be very grateful for any advice!
12:06 < grange> aren't you missing something? don't understand what your problem is 
12:06 < harrydog> does anyone know how i can find out what version node i'm running? (from the command line)
12:06 < grange> node -v
12:07 < christian_> grange: I might be setting up the SSL server wrong in the node app, but I still set 'io.set( 'origins', 'my-app-name.herokuapp.com:*' );' as normal, so I thought that should prevent the origin error...
12:07 < grange> All I know about is that origin and target need to use the same protocol
12:08 < christian_> my client server is under ssl too
12:08 < harrydog> thanks, i installed node using brew on osx, and it installed 0.5.11, i tried updating  brew, then node, but it said everything up to date. Any idea how i can update node?
12:08 < christian_> https:// at least
12:09 < grange> did you try to pass secure:true on the client side? sorry, I'm not familiar with this kind of problem :(
12:10 < grange> but that fixed my problem: io.connect('hostname', {port:myPort, secure: true});
12:12 < christian_> grange - thanks, yeah I did try that, but I might go back and try it again actually
12:12 < SoulRaven> hello
12:13 < grange> what helped me out was firebug/dev tools on firefox/chrome to see which url socket.io is trying to connect to
12:13 < SoulRaven> how i read from a buffer a specific portion from buffer, using start/end, or offset si end
12:13 < SoulRaven> slice demage the originial buffer
12:14 < SoulRaven> and toString i don't know that is the best for that
12:15 < SoulRaven> and readInt16BE has no stop parameter
12:15 < christian_> grange: i've got firebug, i'll take a look - it worked fine when I just started 'var io = require('socket.io').listen(parseInt(port));' in my node app (i.e. no createServer call) - am I right to be trying to start an SSL server in my node app?
12:17 < grange> you mean it worked well without trying to start an ssl server?
12:17 < christian_> yes (but only in safari, not firefox, hence why i'm trying to do all this crap)
12:18 < SoulRaven> anyone?
12:18 < grange> hm... could you show some code and the corresponding errors?
12:18 < TehShrike> grange: http://www.readwriteweb.com/hack/2011/07/nodejs-creator-ryan-dahls-keyn.php
12:18 < grange> maybe someone can help you then 
12:19 < christian_> ok, will do, i'm going to try a few things then come back if still no luck
12:25 < grange> thanks TehShrike, but that's only about the windows implementation. I thought of something general, which explains the I/O driven architecture and stuff like that
12:27 < TehShrike> He seems to be talking about a lot of general stuff
12:27 < TehShrike> A lot of the general stuff is coming up as he talks about what has to be different between Windows and *nix
12:28 < grange> I just read the pdf from the talk but that's not what I was looking for. Don't want to go into detail too much, just want to write an introduction about the basic concepts of node. But I just found a paper on IEEE, maybe that's good enough. Thank you! 
12:36 < grange> yeah TehShrike: that's good :) http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf
12:37 < TehShrike> Indeed!
12:50 < lwicks> Dear all, I have been writing Node.js for only about 2 weeks and today I used it to live tweet all the results from the adidas Junior European Judo Championships! So great! Thanks community for Node.js :-)
12:52 < SomeoneWeird> nice lwicks :)
13:24 < Iszak_Laptop> What do people generally use for validation?
13:25 < SomeoneWeird> node-validator
13:28 < Iszak_Laptop> SomeoneWeird thanks, saw that didn't know if it was popular or not.
13:28 < Iszak_Laptop> what about if I'm using express.js
13:29 < SomeoneWeird> there's not really much else you CAN use :)
13:30 < Iszak_Laptop> SomeoneWeird no good.. won't run on 0.8
13:30 < Iszak_Laptop> well, it may but it isn't configured to.
13:30 < SomeoneWeird> pfft
13:30 < SomeoneWeird> why won't it?
13:31 < Iszak_Laptop> hmm, odd, okay got it installed.
13:31 < Iszak_Laptop> misconfigured packages.json
13:32 < SomeoneWeird> :)
13:32 < deoxxa> i use programming to do validation
13:32 < deoxxa> programming is an awesome library
13:32 < deoxxa> it's built into everything
13:32 < deoxxa> the configuration is just a bit tricky sometimes
13:33 < SomeoneWeird> i can't find it
13:33 < SomeoneWeird> is it on github
13:33 < deoxxa> it is!
13:33 < SomeoneWeird> hmm
13:33 < deoxxa> every single library on github depends on it
13:33 < deoxxa> didn't you know?!
13:33 < SomeoneWeird> oh wow
13:33 < SomeoneWeird> must be popular
13:33 < BennyLava> who let this terrible comedian out?
13:33  * SomeoneWeird shoots BennyLava 
13:34 < deoxxa> BennyLava: like a knife
13:34 < deoxxa> BennyLava: you have cut me
13:34  * deoxxa ;-;
13:34 < BennyLava> Indeed.
13:34 < Iszak_Laptop> SomeoneWeird++ thanks, exactly what I wanted.
13:34 < Iszak_Laptop> although it feels a bit dirty putting my validation in my service layer.
13:34 < SomeoneWeird> well don't put it client side :p
13:34 < Iszak_Laptop> it's not client side.
13:35 < russfrank> should be both
13:35 < deoxxa> +1 russfrank
13:35 < SomeoneWeird> well, sure
13:36 < SomeoneWeird> but better just serverside than just clientside
13:36 < BennyLava> really?!
13:36 < Iszak_Laptop> I don't need it client side.
13:36 < BennyLava> this is new
13:36 < BennyLava> news*
13:50 < Iszak_Laptop> Anyone recommend a npm module which is a wrapper for git? e.g. gift/bit?
16:10 < cody--1> hey
16:10 < cody--1> hi
16:20 < jul_> Hi everbody! Any idea on how to interpret javascript from a webpage I just dowloaded? 
16:21 < jul_> The page content is loaded with Ajax once loaded.
16:30 < SoulRaven> how i slice a buffer, with offset and end, or start and end , without using toString
16:30 < SoulRaven> there is another solution?
16:32 < SoulRaven> anyone?
16:32 < gabrieluk> Soul, have you checked http://nodejs.org/api/buffer.html
16:32 < gabrieluk> ?
16:32 < efbeka> ^^
16:33 < SoulRaven> yes, and the only one is toString
16:33 < SoulRaven> but i don't know that is the best aproch
16:33 < gabrieluk> this should be a nice read https://docs.nodejitsu.com/articles/advanced/buffers/how-to-use-buffers
16:33 < thanpolas> a tip for an event library that allows for event listeners to cancel 'defaultaction' ? (by returning false?)
16:35 < gabrieluk> to be honest Soul, i'm not sure if there's another aproach really. the only thing i see there is also toString
16:35 < gabrieluk> idk the answer, sry. maybe someone else
16:35 < gabrieluk> i didn't get that far yet ^^
16:36 < SoulRaven> readInt16BE is something nice, but don't have a end parameter
16:36 < SoulRaven> :(
16:36 < vrlogrs> hello world
16:36 < gabrieluk> but, soul, is this a node thing or a js thing? cause you could ask here ##javascript also
16:37 < SoulRaven> is a node think, because i want to read some chunks from the buffer
16:37 < ACK> for what part, knowlege of C and C++ is required in node.js
16:38 < gabrieluk> to write node modules
16:38 < ACK> and what is binding in node.js
16:38 < ACK> modules is similar to gems in ruby right
16:39 < gabrieluk> not really, i think
16:39 < gabrieluk> gems would be like packages, npm ones
16:39 < gabrieluk> i think
16:39 < gabrieluk> node modules is a higher thing
16:39 < ACK> and what is binding in node.js
16:41 < gabrieluk> it mentions "binding" http://syskall.com/how-to-write-your-own-native-nodejs-extension
16:42 < ACK> is it necessary to learn to c and c++ for learning node
16:42 < gabrieluk> no, javascript
16:42 < gabrieluk> only
16:43 < ACK> i want to develop apps with or without framework and using existing npm modules, this will require c or c++
16:44 < gabrieluk> no
16:49 < raz>  /topic http://www.youtube.com/watch?v=jcqG5c33MDw#t=0m11s
16:58 < wilornel> hey guys, is there a function in which the 2 arguments are: 1- A function to be executed, 2- a function to be executed when the first one is finished
17:04 < wilornel> guys
17:18 < mdedetrich> I seem to be hero derping incredibly
17:18 < mdedetrich> but I can't seem to get this timer library to work
17:18 < mdedetrich> https://github.com/minodisk/timers
17:18 < mdedetrich> I have a Timer = require 'timers'
17:20 < mdedetrich> but Timer just appears to be an object
17:20 < mdedetrich> and not a prototype
17:20 < mdedetrich> so I can't do timer = new Timer(...)
17:22 < mdedetrich> and Timer = require('timers').Timer doesn't even work
17:23 < mdedetrich> hmm wait
17:23 < mdedetrich> I know why
17:23 < mdedetrich> maybe
17:23 < mdedetrich> is there an official timers node.js package?
17:29 < superjoe> mdedetrich, what's wrong with setTimeout and setInterval?
17:30 < mdedetrich> superjoe: I need separate instance timers, not global ones
17:31 < mscdex> why?
17:31 < superjoe> myInstanceTimer = setInterval(fn, ms);
17:31 < mscdex> ^
17:33 < mdedetrich> well that library also handles repeating only x times
17:33 < mdedetrich> which is another thing I need
17:37 < Qalqi> i am trying to develop production level nodejs site
17:37 < Qalqi> should  i gp ahead?
17:37 < aMoniker> yes, go ahead
17:38 < mdedetrich> superjoe: it appears
17:38 < mdedetrich> that its impossible
17:38 < mdedetrich> to import that library
17:39 < superjoe> mdedetrich, I wouldn't spend too much time on it. it would take about 5 lines of code to do what you're trying to do
17:42 < cjm> nodeup is live http://nodeup.com
18:15 < hortinstein> exit
18:15 < hortinstein> quit
18:32 < cryptopsy> is the node api doc available on git or svn ?
18:33 < wltsmrz> ttps://github.com/joyent/node/tree/master/doc/api
18:33 < cryptopsy> tnx
18:35 < cryptopsy> is the one in html available on git or svn?
18:38 < superjoe> cryptopsy, you probably have to run ./configure and make doc or something
18:43 < cryptopsy> tnx
18:44 < cryptopsy> the docs will be placed in tools/doc instead of doc/
18:44 < cryptopsy> oops nvm
18:45 < cryptopsy> in out/doc
18:45 < superjoe> makes sense
18:45 < cryptopsy> node server doesn't get placed in out folder though
18:45 < cryptopsy> so it doesn't make sense to me
19:00 <@Nexxy> there's a snake in my boot.
19:02 < mbalho> someones poisoned the watering hole!
19:02 < sinclair_> anyone running linux here?
19:03 < wltsmrz> Yes, sinclair_
19:04 < sinclair_> wltsmrz: ubuntu?
19:04 < wltsmrz> ebian
19:04 < wltsmrz> Debian *
19:04 < sinclair_> any reason Debian over Ubuntu?
19:06 < gluxon> sinclair_: Ubuntu is a debian-based distrobution. It's more popular due to having support and maintenance from Canonical.
19:07 < thealphanerd> gluxon: but it also uses the debian unstable branch
19:07 < thealphanerd> many would argue that debian is more secure
19:07 < gluxon> thealphanerd: I didn't say it was more stable or secure ;)
19:07 < mscdex> many would argue that openbsd is more secure
19:07 < mscdex> :-D
19:08 < thealphanerd> hahah
19:08 < gluxon> Guys, if we're going that route, many would argue Windows (microsoft dipheads) is more secure.
19:08 < thealphanerd> LOL
19:09 < thealphanerd> "In basic terms this means Ubuntu LTS being based upon the Debian Testing branch and even with Ubuntus attempts to stabilize and polish there testing packages after there pulled, does not equal the immense development and maturity of Debian stable and the packages thereof. Debian stable truly is the Golden Standard for rock solid stability."
19:09 < thealphanerd> http://askubuntu.com/questions/15314/debian-stable-vs-ubuntu-lts-for-server
19:09 < sinclair_> gluxon: well, one could argue that, a operating system under rampant attack, that still holds up, "is" more secure for that reason alone
19:09 < thealphanerd> ubuntu will be faster
19:09 < sinclair_> gluxon: i "like" Windows
19:09 < thealphanerd> but debian will be more stable
19:10 < gluxon> sinclair_: I do too. I like Macs as well. I just hate Microsoft and Apple for their ridiculously unfair business practices.
19:10 < gluxon> And media crap (native HTML5 anyone?)
19:10 < sinclair_> gluxon: such as?
19:11 < ljharb> you mean how apple has been one of the biggest drivers towards html5 adoption?
19:11 < gluxon> sinclair_: Using Windows to monopolize IE -> http://en.wikipedia.org/wiki/United_States_v._Microsoft
19:11 < ljharb> gluxon: that was over 10 years ago
19:11 < sinclair_> gluxon: that was years ago tho
19:11 < gluxon> Ok, restriction of essential API's for web browsers on Windows 8 for ARM?
19:12 < sinclair_> gluxon: such as?
19:12 < gluxon> sinclair_: http://blog.mozilla.org/blog/2012/05/09/windows-on-arm-users-need-browser-choice-too/
19:12 < ljharb> i'm not familiar with that, but i'd imagine that's to ensure the user experience on the underpowered ARM devices microsoft is targeting
19:13 < sinclair_> ljharb: with apple, they threw out flash on mobile devices
19:13 < gluxon> ljharb: Maybe, but the overall restriction is not worth it.
19:13 < ljharb> as they should have. flash sucked and i'm glad it's almost dead.
19:13 < gluxon> ljharb: It look (to me) as an excuse.
19:13 < sinclair_> ljharb: not the point, users should have the option
19:13 < gluxon> sinclair_: Yeah, they *should* have done that..
19:13 < mscdex> but we need flash as a polyfill for websockets on old browsers!
19:13 < ljharb> usually the difference between "excuse" and "reason" is if you're upset or not.
19:13 < ljharb> sinclair_: why should they have the option to choose something that sucks?
19:14 < sinclair_> ljharb: because, its a option
19:14 < ljharb> it's up to each platform to decide what options it supports. period.
19:14 < sinclair_> ljharb: and options are generally a good thing
19:14 < gluxon> ljharb: Perhaps it is, but do you really think crippling web browsers on Windows 8 for ARM is a good thing?
19:14 < gluxon> ljharb: Look at the trial 10 years ago. Microsoft tried to claim that IE without Windows makes Windows slower. It's essentially the same ploy now with Windows 8.
19:14 < ljharb> gluxon: i don't really have an opinion because i think windows isn't worth using, but i would say, if it means that windows 8 mobile devices perform better? absolutely.
19:15 < sinclair_> gluxon: its not monopolistic imo
19:15 < ljharb> sinclair_: i totally agree that options are generally good. but you have to draw a line somewhere, and flash has long been a hell of a lot below the quality line on any platform.
19:16 < ljharb> sinclair_: nobody's suggesting that any platform support shockwave, for example :-)
19:16 < gluxon> sinclair_: Which part?
19:16 < gluxon> sinclair_: Limiting Windows 8 ARM to IE?
19:16 < sinclair_> gluxon: limiting HTML5 support on ARM
19:16 < gluxon> sinclair_: That's not what I said....
19:16 < sinclair_> gluxon: it has a desktop, and i expect that software vendors will produce browsers up for the job
19:17 < gluxon> sinclair_: Here, read the article from Mozilla -> http://blog.mozilla.org/blog/2012/05/09/windows-on-arm-users-need-browser-choice-too/
19:17 < gluxon> sinclair_: It explains it better than I can, but simply, other web browsers can't run on ARM without being severely crippled.
19:17 < sinclair_> ill have a read
19:18 < gluxon> And no consumer would use a crippled web browser that can't perform functions.
19:19 < gluxon> ljharb: It doesn't at all make sense that Windows 8 would run better when other browsers are restricted. It also doesn't matter that you personally think Windows isn't worth using, because the adoption rate for Windows 8 is going to be very high.
19:19 < sinclair_> gluxon: the market will demand those features
19:19 < ljharb> gluxon: you're right on the last point. as to the first point, sure it does - it used to be very easy on iphone to do something wrong as an app dev and cripple the device's speed and battery life, including via javascript in a browser. that's why you couldn't use other browsers.
19:20 < gluxon> ljharb: Ok, that's a valid point. But the solution really isn't banning essential API's, is it?
19:21 < gluxon> sinclair_: My point was that Microsoft still has some pretty nasty business practices...
19:21 < ljharb> gluxon: that's the solution that apple went with, and i'd say it was an effective one
19:22 < sinclair_> gluxon: perhaps, you're right. But not as bad as they were. it remains to be seen how win8 changes the scene.
19:23 < sinclair_> *seen
19:23 < sinclair_> wait, no, scene :)
19:23 < gluxon> :P
19:23 < sinclair_> its late :)
19:24 < gluxon> ljharb, sinclair_: That's right, but my point is that Windows 8 will soon be a desktop dominated operating system. If Microsoft gets away with restricting other competing applications, it will continue to do that, and we will probably see IE with 90% market share again.
19:25 < gluxon> I don't see Android with those restriction, and it is pretty equal to the iPhone in market share.
19:26 < gluxon> Actually, I think it's doing better than iPhone in terms of market share. :)
19:26 < ljharb> gluxon: on ARM. desktops aren't often ARM yet.
19:27 < ljharb> gluxon: android's doing better in terms of market share, but not in terms of app usage, engagement, web usage, or purchasing behavior, all of which are far more important.
19:27 < gluxon> ljharb: In a few years, I see desktops using ARM processors as well.
19:27 < ljharb> gluxon: then your argument is invalid until "in a few years"
19:28 < gluxon> ljharb: But then you can't prevent something that has already happened..
19:28 < mscdex> there already are ARM desktops... "nettops" ;-)
19:28 < gluxon> That's like saying AID's isn't a problem until you get it..
19:29 < ljharb> let's not have logical fallacies here. you can't compare a fatal/debilitating disease to not being able to run the *web browser* you want.
19:29 < ljharb> if it's that big of a problem, you have the CHOICE to not use windows. see? problem solved! :-)
19:29 < gluxon> ljharb: But again, even if you don't use Windows, others are.
19:30 < gluxon> ljharb: Practically all of Linux's problems are related to its market share. (lack of quality games, driver support)
19:30 < ljharb> and others have the choice not to use windows too.
19:31 < gluxon> ljharb: Ok, let's say worst comes to worst.
19:31 < gluxon> 10 years later, all desktops are running ARM. Windows 8 is dominate.
19:31 < gluxon> Or whatever Windows is at.
19:32 < ljharb> if that actually happened i HIGHLY doubt that these browser restrictions would survive such an incredible reversal in tech trends.
19:32 < jeromegn> I've been using Express and Connect for a long tim, but today sometimes went awfully wrong and I'm not able to track what's wrong. None of my POST requests aren't getting through. I've peppered my app, express and connect with `console.log`s and this is where the trail ends: https://github.com/senchalabs/connect/blob/master/lib/middleware/urlencoded.js#L61 neither the event "data" or "end" is triggered on `req`. Not sure what's wrong. Any ideas?
19:32 < ljharb> jeromegn: can you provide a fiddle with a sample post request from the client?
19:33 < gluxon> ljharb: Hold off our discussion for a short time? ^^^^
19:33 < ljharb> gluxon: no need. i can do more than one thing at once.
19:34 <@Nexxy> I can vouch for ljharb 
19:34 < gluxon> ljharb: So to be clear, your argument is that the browser restriction is a good thing?
19:34 <@Nexxy> I've seen him whine on twitter *and* IRC at the same time.
19:34 < ljharb> lol thank you nexxy for vouching for my ability to multitask :-)
19:34 < jeromegn> ljharb: I can provide a gist with a few lines of code, but it's very straightforward: https://gist.github.com/ffe296774f4bdf5e1854
19:34 < gluxon> :)
19:35 < ljharb> gluxon: my argument is that based on similar things other companies have done, it very well might be a good thing, and the downside (at this time) is highly minimal since there's few to no ARM desktops
19:35 <@Nexxy> I have 3 ARM desktops
19:36 < jeromegn> ljharb: I tried with cocoa-rest-client too (just a GUI for cURL I think) and I still get the same issues. It never ever gets to the actual route it's posting to
19:36 < gluxon> ljharb: So at this time, it is indeed a good thing since whenever ARM desktops become more popular, people and the media will revolt?
19:36 <@Nexxy> gluxon, do you have lots of routes that get next()'d through?
19:36 < ljharb> jeromegn: ok, can you post a gist of your express routing code on the server?
19:37 < gluxon> Nexxy: Uh... what? :-/
19:38 <@Nexxy> gluxon, are you passing your requests through many routes?
19:38 < gluxon> Nexxy: You're talking to the wrong person. jeromegn is the one who asked the question about routes.
19:39 <@Nexxy> oh
19:39 <@Nexxy> sorry
19:39 < ljharb> gluxon: i indeed suspect that by the time ARM desktops become more popular, MS will have relaxed its browsing restrictions. just like apple did before the ipad came out.
19:39 < jeromegn> Nexxy: I use a few middlewares yes. cookie parser, body parser, etc.
19:39 < gluxon> Nexxy: No problem. :)
19:39 < gluxon> ljharb: .. wait, when did Apple relax browser restrictions on iPad?
19:39 < wltsmrz> Can you give us a paste, jeromegn?
19:39 < ljharb> there's chrome, firefox, opera mini
19:40 < ljharb> since before the ipad was released.
19:40 < gluxon> ljharb: No, that's not what happened.
19:40 < gluxon> ljharb: There's no Firefox, just F
19:40 < jeromegn> ljharb: Which part would you like to see? the request never gets to the router since I'm using the Express.bodyParser() before app.router in my middlewares chain.
19:40 < gluxon> *just Firefox Home.
19:40 < ljharb> gluxon: ok fair enough, but the point is that there's choice in browser chrome and feature set, and nobody cares about the rendering engine.
19:40 < gluxon> ljharb: And Chrome isn't Chrome. It's practically a skinned version of Safari. It's not running Webkit or V8.
19:41 < wltsmrz> Where your route handlers are defined, jeromegn
19:41 < gluxon> ljharb: And Opera got around the browser restriction by having scripting being processed on a proxy server, which makes it lag and not display advanced content as well.
19:42 < gluxon> ljharb: Well, arguably, the rendering engine is the heart of web browser.
19:42 < jeromegn> wltsmrz: I'm running my app with DEBUG="express:*" and it does say that the route has been defined. So I'm assuming that's right.
19:42 < gluxon> *of a web browser
19:42 < jeromegn> for instance: express:router defined post /connexion +0ms
19:42 < ljharb> gluxon: yet nobody's complaining about browser choice on iOS, because it's not a desktop OS
19:43 < gluxon> ljharb: But Windows 8 for ARM will be a desktop OS..
19:43 < gluxon> Microsoft Surface is practically a shapeshifting tablet and laptop.
19:45 < gluxon> ljharb: Let's agree to have a handshake after this debate, ok? :D
19:45 < jeromegn> wltsmrz Nexxy ljharb: I just put the code in a public repo. It's basically a e-democracy thing for citizens to participate more in politics… anyway, here's where my middleware is at: https://github.com/jeromegn/politiq/blob/master/config/server.coffee#L162 (pardon my console logs and pardon my coffee script)
19:45 < jeromegn> can't wait to get rid of all those console.log after this debugging session...
19:45 < jeromegn> :P
19:46 <@Nexxy> oooh, e-democracy
19:46 <@Nexxy> > coffeescript
19:46  * Nexxy sad pands
19:46 <@Nexxy> panda*
19:46 < ljharb> agree :-(
19:46 <@Nexxy> I can't read coffeescript
19:46 <@Nexxy> it hurts my eyes
19:47 < ljharb> yeah once there's coffeescript involved i'm out
19:47 < wltsmrz> Sadly that's my instinctive reaction as well
19:47 < wltsmrz> But I'm reading :)
19:48 < jeromegn> dang… sorry about that ;)
19:49 < wltsmrz> This is all of your routes?
19:49 < wltsmrz> All I see are .use handlers
19:49 < jeromegn> wltsmrz: in https://github.com/jeromegn/politiq/tree/master/app/resources
19:49 < wltsmrz> Surely Express >=3.0 didn't deprecate HTTP verbs
19:49 < jeromegn> this is the file that starts the whole thing: https://github.com/jeromegn/politiq/blob/master/server.js
19:49 < wltsmrz> Oh
19:50 < jeromegn> using Up
19:52 < jeromegn> wltsmrz: FYI, the resources are loaded in this order: 'citizens.coffee', 'news.coffee', 'site.coffee'
19:53 < jeromegn> I'm at a loss here. Been debugging this for 2 hours...
19:53 < diegoviola> what do you guys think of the points that brixen said with his talk here? http://blip.tv/jsconf/jsconf2012-brian-ford-6091521
19:53 < diegoviola> Brian Ford
19:53 < wltsmrz> Where do the console.logs fail, jeromegn?
19:54 < wltsmrz> In the server.coffee file
19:54 < mllie> Hello
19:54 < jetienne> jeromegn: oh you irc ? glad to meet you here
19:55 < jeromegn> wltsmrz: `next` is never called in the body parser. https://github.com/jeromegn/politiq/blob/master/config/server.coffee#L167
19:55 < jeromegn> wltsmrz: this is the last javascript evaluated in the body parser middleware: https://github.com/senchalabs/connect/blob/master/lib/middleware/urlencoded.js#L61
19:55 < jeromegn> jetienne: hey there
19:57 < mllie> how do I do to be able to save sockets to an array with an ID as key, and then I want to be able to reach this array even when several node-instances started?
19:57 < konr_trab> How can I generate a unique objectid, like mongo's? I think it's unified format with a specific length or something
19:58 < jeromegn> wltsmrz: any leads?
20:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:07 < jeromegn> :(
20:07 < wltsmrz> Poke around the urlencoded.js file I suppose, jeromegn. Log to see if any data is received, try calling next() immediately, etc..
20:07 < wltsmrz> Beyond that I don't really have any suggestions. Good luck with your project though, looks interesting.
20:07 < wltsmrz> And wish it was in JavaScript so I could know for certain what was happening there.
20:07 < jeromegn> wltsmrz: def no data received. I'll try calling next(), thanks.
20:07 < wltsmrz> My assumption is that server.use Express.bodyParser() didn't work 
20:15 < SoulRaven> anyone deals with buffers and binary data?
20:17 < wltsmrz> Yes, SoulRaven 
20:18 < SoulRaven> wltsmrz, please help me with something, i nead to read some data from a binary protocol
20:18 < wltsmrz> new Buffer(data, 'binary')
20:18 < SoulRaven> and i use for the moment, only buffer = new Buffer(data); buffer.toString(0, 10);
20:18 < SoulRaven> or something
20:19 < wltsmrz> new Buffer(data, 'binary') | data.toString('binary')
20:19 < SoulRaven> there is any solution for this, to read chuncks from a binary buffer
20:20 < SoulRaven> the stream is ometning like this: http://pastebin.com/pmkCXQFu
20:20 < SoulRaven> is from a protocol of AVL devices
20:20 < wltsmrz> http://nodejs.org/api/buffer.html#buffer_buf_slice_start_end
20:21 <@konobi> SoulRaven: node-ctype can be pretty handy
20:29 < jeromegn> wltsmrz: same thing with JSON data… probably is not due to url encoder then.
20:38 < jeromegn> Nexxy: you asked me if I had a lot of middle wares, you think my issue could be that req has already fired "data" and "end" before it gets to the bodyParser?
20:38 < mllie> how do I do to be able to save sockets to an array with an ID as key, and then I want to be able to reach this array even when several node-instances started?
20:40 < wltsmrz> You can communicate between forked node processes, mllie
20:41 < wltsmrz> http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options
20:41 < Guest_1448> I have multiple json config files and want to .use() and .save() them individually with nconf
20:41 < Guest_1448> but I don't see a way to load/save them separately?
20:41 < Guest_1448> i don't even know how save() works with multiple file stores
20:43 < jeromegn> wltsmrz Nexxy ljharb: ended up being that the middleware was too far down the chain...
20:43 < mllie> wltsmrz: and that is how you scale node? create forked node processes?
20:43 < ljharb> ah
20:44 < jeromegn> anyhow, I will consider converting it to JavaScript
20:45 < jeromegn> since this project is going to be public, I assume more people know JS than CS and so it'll be less obscur / more accessible
20:45 < wltsmrz> I see, jeromegn. Hope that can be fixed. And as you noticed coffeescript can be pretty alienating.
20:45 < jeromegn> indeed
20:45 < wltsmrz> Yes, mllie. http://nodejs.org/api/cluster.html uses fork()
20:45 < jeromegn> I guess I could convert it now
20:46 < jeromegn> better earlier than later in this case, since the codebase is still pretty small.
20:46 < Guest_1448> ........
20:46 < mllie> wltsmrz: but if I have to use several processes then?
20:46 < wltsmrz> Cluster API is for managing multiple processes.
20:47 < ori-l> mllie: you can also use something like zeromq to write a distributed application
20:50 <@Nexxy> jeromegn, that's what I was getting at
20:50 <@Nexxy> glad you figured it out :)
20:50 < Guest_1448> answer me :(
20:50 < jeromegn> glad I remembered, i could've searched for a while there
20:51 <@Nexxy> Guest_1448, chances are that if someone who knew the answer to your question were here... they'd answer you.
20:51 < jeromegn> Nexxy: it's curious though, I wouldn't expect that to happen, i would expect it to buffer the data received and send it to any listeners later on
20:51 < Guest_1448> Nexxy: maybe he's just being lazy
20:52 <@Nexxy> Guest_1448, the point is that typing lots of dots or begging for answers doesn't get you anywhere
20:52 <@Nexxy> :P
20:52 < TehShrike> Guest_1448: if you know the project contributor's name, just ping them here!
20:52 < TehShrike> Nexxy is right, it's unlikely that his name is a series of periods
20:52 <@Nexxy> Guest_1448, nconf is a nodejitsu thing, try #nodejitsu?
20:53 < mllie> ori-l: ah, that's true. Right now I'm using socket.io and I've looked into using a redisstore for that
20:53 < Guest_1448> Nexxy: it's a normal nodejs module
20:53 <@Nexxy> written by the folks @ nodejitsu
20:53 <@Nexxy> who have a great support team
20:53 <@Nexxy> almost always available in #nodejitsu 
20:53 <@Nexxy> :)
20:53 < Guest_1448> oh
20:53 < Nuck> People use nconf?
20:53 < Nuck> This is news to me
20:54 < ljharb> https://github.com/flatiron/nconf has 243 stars
20:54 < Guest_1448> what else is there?
20:54 < Guest_1448> I want a more portable json store helper for this app
20:54 < Nuck> require(NODE_ENV+'.json')
20:54 < Guest_1448> nconf is more global and that's why it isn't working great for me atm
20:55 < Nuck> Well, ./NODE_ENV.json
20:55 < Guest_1448> Nuck: that becomes messy when you are saving/setting stuff
20:55 < Guest_1448> nconf is a nice helpr
20:55 < Guest_1448> er
20:55 < mllie> ori-l: but I still don't get how to be able to pair each socket client together with an ID and then send messages to a specific socket client using the ID
20:57 < wltsmrz> You could have an object containing websocket (assuming) connections indexed by ID, mllie
20:58 < Nuck> I dislike nconf as it doesn't match my programming ideals
20:58 < mllie> wltsmrz: that is what I thought of, but how would that be able to reach through every instance?
20:58 < mllie> wltsmrz: if I need several instances :)
20:59 < wltsmrz> Do you recall that I suggested child_process.fork()?
20:59 < mllie> wltsmrz: yes
20:59 < wltsmrz> What if your parent managed that object and the children communicated to that object
21:00 < mllie> wltsmrz: ah, true story
21:01 < mllie> wltsmrz: the problem could be if the server crashes and then everything is lost
21:01 < EhevuTov> question: anyone know of a good stream filter that I could use .pipe with? I'd like to do something like process.stdin.pipe(filterstream(/pattern/g)).pipe(stdout)
21:01 < wltsmrz> If the server crashes those connections will be closed anyway
21:02 < mllie> wltsmrz: or well, if everything that is sent between client and client saved to a database that could be recreated
21:02 < mllie> wltsmrz: and the connections could be recreated with the same IDs as well
21:03 < mscdex> EhevuTov: not sure a filter like that would work 100% of the time
21:03 < mllie> wltsmrz: how do you do with sessions and authentication? lets say if the client-script i loaded from an CDN
21:04 < EhevuTov> mscdex, hrm, I'm new to node streams. Basically, I have a CSV file stream and I'm wanting to filter out certain lines, and pass certain ones on to a socket.io stream
21:05 < wltsmrz> You could use bcrypt & express sessions for the simplest solution, mllie
21:05 < mscdex> EhevuTov: you need to parse by newline
21:05 < EhevuTov> like, stream all lines and on /mscdex/g pass it through to a socket.io socket
21:05 < wltsmrz> I'm not sure what tha thas to do with your CDN client script though
21:05 < wltsmrz> You only want to serve the client script to authenticated users?
21:05 < mscdex> EhevuTov: 'data' events in node and in most node modules are just chunks and you cannot assume it contains just one line or anything
21:06 < EhevuTov> mscdex, correct, and I'm using the core readline interface and it works, but I'm not sure how to make it a stream. I'm overcomplicating and just need a good tutorial or some example code :-)
21:06 < Guest_1448> Nexxy: you're right :D they have 10x better support than you guys. /jk
21:06 < mscdex> EhevuTov: there are some line-oriented stream modules out there
21:06 < chovy> should i be adding ./node_modules to my git repository, or just ignore that directory.
21:07 < mscdex> EhevuTov: otherwise it's really not too difficult to DIY
21:07 < EhevuTov> right, I know it's not difficult, but I just don't know how to do it :-(
21:07 < Guest_1448> chovy: if you have module names/versions defined in package.json, that should be good enough 
21:08 < mscdex> EhevuTov: just buffer data until data.indexOf('\n') > -1, do something with buffered_data + data.substr(0, data.indexOf('\n')) then replace buffered_data with data.substr(data.indexOf('\n') + 1)
21:08 < mscdex> EhevuTov: then repeat for every chunk :-)
21:08 < chovy> Guest_1448: ok
21:09 < mllie> wltsmrz: and that express sessions does work even though the client script just initiates an socket connection to the node-server?
21:11 < t4nk768> Hi
21:11 < wltsmrz> If you want to couple Express sessions with your websocket handlers you'll probably need to do some cookie parsing
21:11 < t4nk768> Can anyone suggest a library for splitting files into smaller pieces
21:12 < wltsmrz> I had a solution for that some time ago using 'ws' module and connect-redis for sessions
21:12 < wltsmrz> I don't think you need a library for that do you t4nk768?
21:12 < t4nk768> can you tell me how to do it
21:12 < wltsmrz> Text files?
21:12 < wltsmrz> How split?
21:12 < t4nk768> ah no
21:13 < t4nk768> like a 200 mb audio file
21:13 < t4nk768> text file splitting i think can be done through fs right
21:13 < wltsmrz> http://nodejs.org/api/buffer.html
21:14 < wltsmrz> No, string manipulation is afforded by javascript language
21:15 < t4nk768> unfortunately i am looking for multimedia file splitting 
21:15 <@konobi> there's a baudio npm module for working with audio streams, iirc
21:15 < t4nk768> kk
21:15 < gluxon> wltsmrz: I don't think loading a 200MB file into a buffer is the best approach.
21:16 <@konobi> oh, it's write stream only
21:16 <@konobi> t4nk768: check npm
21:16 < t4nk768> i found some
21:16 < t4nk768> which are like more than an year old and no longer working
21:18 < wltsmrz> I ignored the file size, but yeah
21:18 < wltsmrz> That is a big one
21:18 < t4nk768> yeah
21:20 < benDos> Is there a way I can proxy node-irc within node?  I'd like to be able to reload my bot without reconnecting all the time?
21:20 < mllie> wltsmrz: Ah, ok I see
21:20 < gluxon> benDos: Can you clarify?
21:21 < gluxon> Oh, like, rehash?
21:21 < mllie> wltsmrz: ws = websockets module?
21:21 < wltsmrz> 'ws' is the module name
21:21 < wltsmrz> It is a websockets implementation
21:21 < benDos> Hmm, actually nvm i think i got it
21:22 < mllie> wltsmrz: did you generate an sessionkey on connect on the server and sent back to the client?
21:24 < wltsmrz> You could use Express sessions to attach whatever stuff you need to the session. Then you could parse the session ID cookie from somewhere within your websocket handler. Then you could query Redis using that ID (if you were using connect-redis). 
21:24 < wltsmrz> That was the weird loosely-coupled way I figured.
21:24 < wltsmrz> It seems like there should be a better way though.
21:25 < mllie> wltsmrz: yeah!
21:25 < siksia> anyone know how i could get the list of names in an irc channel using node irc?
21:30 < wltsmrz> Try sending the raw IRC command with client.send('NAMES', '#channel'); siksia
21:31 < wltsmrz> And you can listen for 'names' event
21:31 < wltsmrz> http://node-irc.readthedocs.org/en/latest/API.html#'names'
21:31 < siksia> wltsmrz, i'll give a shot, thanks
21:40 < benDos> When I call "net.connect({path:"./path/to/pipe"})" I keep dieing with ENOENT
21:40 < benDos> Any suggestions?
21:41 < superjoe> benDos, ./path/to/ doesn't exist?
21:41 < benDos> It does
21:41 < superjoe> benDos, or rather, ./path/to/pipe doesn't exist
21:41 < jmoyers> anyone have a favorite tool for generating documentation that is github readme compatible? meaning, take jsdoc style blocks and generate a readme.md with a nice table of contents etc?
21:41 < superjoe> benDos, make sure there is a server running on that socket
21:42 < jmoyers> i was thinking about writing a quick tool that took https://github.com/visionmedia/dox output to generate a readme, but not if something exists...
21:42 < benDos> Well I'm trying to create the socket, the docs made it seem like connect aliased createConnection?
21:42 < etcetera> anyone know of a good socket.io client for C#?
21:43 < superjoe> benDos, yes, connect aliases createConnection. it does not, however, alias createServer
21:43 < benDos> Ooooh ok
21:43 < benDos> I thought the createconnection handle setting up the pipe
21:43 < benDos> thanks
21:44 < superjoe> np
21:44 < benDos> Yup that works now :)
21:44 < superjoe> cool
21:48 < gluxon> etcetera: Unfortunately, not many people here know a lot about C#. You may have better luck in ##csharp or elsewhere.
21:50 < diegoviola> what do you guys think of this? http://brixen.io//2012/4/9/is_node_js_better
21:51 < diegoviola> i don't mean to troll, i'm just curious
21:51 < diegoviola> i have seen his talk and all, which was nice
21:52 < diegoviola> jsconf talk
21:54 < gluxon> diegoviola: Seems interesting, I'm reading it now.
21:57 < superjoe> this article doesn't have much meat to it
21:57 < superjoe> my take from it is: some ruby fanboy wants to diss node.js but sound like he's actually given it some thought
21:58 < sinclair_> C# > nodejs
21:59 < sinclair_> at least for writing large maintainable applications
21:59 < gluxon> superjoe: You really didn't read the entire thing, did you?
21:59 < superjoe> gluxon, read intro, skimmed, read the conclusion
21:59 < superjoe> lots of anecdotes
21:59 < gluxon> superjoe: That's not nearly enough to understand it :P
21:59 < diegoviola> rubinius is awesome
22:00 < superjoe> I'll admit that I am tainted by my annoyance at the lack of a tl;dr
22:00 < diegoviola> stdlib written in same language, JIT compiler, LLVM, no GIL, real threading, etc...
22:02 < superjoe> but seriously, any article that is worth reading can be summarized
22:03 < mmalecki> sinclair_: because you're not supposed to write large applications in node
22:04 < mmalecki> many small interacting actors are what node is good at
22:05 < sinclair_> mmalecki: i see
22:05 < gluxon> mmalecki: Just curious, why aren't you suppose to write large applications in Node.js?
22:05 < sinclair_> mmalecki: so, node is modular then?
22:05 < gluxon> I thought the Asynchronous approach was what give it an advantage in that area?
22:06 < sinclair_> mmalecki: for each new "function" a new instance of node is run?
22:06 < mmalecki> well, "not supposed to" is probably a bad word here. but small, interacting network agents is what it's really good at.
22:06 < mmalecki> sinclair_: yeah
22:06 < mmalecki> nodejitsu stack consists of 6 services, for example
22:06 < sinclair_> mmalecki: all over http?
22:06 < mmalecki> yeah
22:06 < sinclair_> mmalecki: on different ports?
22:06 < sinclair_> or, can they share the same port
22:06 < mmalecki> and on different hosts
22:07 < sinclair_> mmalecki: hmmm
22:07 < diegoviola> what is this that people complain about node being single threaded, etC?
22:07 < diegoviola> *etc
22:07 < sinclair_> mmalecki: where is the logical seperation, one for a website (serving content) one running socket.io, another handling forwarding uploads to a CDN, this kinda thing?
22:08 < sinclair_> or something else
22:08 < superjoe> diegoviola, it's single-threaded, event driven
22:08 < superjoe> like twisted or eventmachine
22:08 < mmalecki> sinclair_: yeah, similar to that. load balancers, api.nodejitsu.com, build server, etc...
22:08 < mmalecki> oh, with build server it's 7, actually :)
22:08 < diegoviola> superjoe: does celluloid uses this model too?
22:08 < mmalecki> services for monitoring too
22:08 < superjoe> never heard of it
22:08 < diegoviola> http://celluloid.io
22:09 < diegoviola> oh "multithreaded"
22:09 < diegoviola> nvm
22:09 < sinclair_> mmalecki: a standard website needs only 1 instance then, a very large js script, or is that to be refactored too?
22:09 < mmalecki> yeah, for "standard website", like blog, I'd only run one instance
22:10 < mmalecki> cause like, that's just one concern to satisfy - showing users the content
22:10 < sinclair_> mmalecki: websites can and do get complex, is it correct to assume that scaling (application wise) could mean splitting node into different instances, running the same site, on port 80?
22:10 < sinclair_> mmalecki: can multiple instances share the same port?
22:10 < mmalecki> with cluster, yes
22:11 < mmalecki> I actually did a talk on this topic
22:11 < sinclair_> mmalecki: is cluster a package?
22:11 < mmalecki> well, kinda related to that topic
22:11 < mmalecki> it's a core module
22:11 < mmalecki> here  7 files changed, 6 insertions(+), 58 deletions(-)
22:11 < mmalecki> er
22:11 < mmalecki> http://strapping-turtles-to-rockets.jit.su/#slide-0
22:11 < sinclair_> so, how does one route amoung different instances?
22:11 < mmalecki> make sure to go full screen, otherwise layout breaks
22:11 < superjoe> sinclair_, cluster does load balancing
22:11 < mmalecki> sinclair_: load balancer. cluster module does a simple round robin load balancing
22:12 < sinclair_> mmalecki: so, i can imagine node as being lots of little console applications
22:12 < sinclair_> mmalecki: i like this idea
22:12 < superjoe> why console?
22:13 < sinclair_> well, whatever they are
22:13 < superjoe> they're usually http servers
22:13  * sinclair_ is not a node developer
22:14 < sinclair_> mmalecki: you have single handedly been the most en lighting individual on this channel with that insight btw
22:15 < mmalecki> haha, thanks :)
22:16 < evitable> if you're gonna write like that, dnode seems like it could be awful helpful :)
22:17 < mmalecki> I prefer streaming new-line delimeted JSON over http, but dnode is good too
22:23 < substack> mmalecki: req.pipe(dnode()).pipe(res) totally works and is a newline-terminated json exchange
22:23 < substack> http full duplex yay
22:23 < mmalecki> substack: sweet, when did that change?
22:23 < mmalecki> been a while since I left my cave
22:24 < substack> the pipe api in 1.0.0 made it simpler
22:24 < substack> before you could pass a stream param but you'd need to merge the req and res with duplexer
22:37 < benDos> Can I emitevents over a socket?
22:40 < rknLA> any of you have experience with / preferences of railway or locomotive?  i'm a rails developer interested in getting more into node, but i like my crutches
22:40 < joeandaverde> NODE.JS!
22:40 < superjoe> benDos, yes, you might try using JSON
22:40 < benDos> superjoe, I'm sorry I may have phrased that weird
22:41 < benDos> I want to proxy events from one process through a unix socket to another process
22:41 < superjoe> benDos, you'll have to serialize and deserialize the event
22:42 < benDos> Oh i gotcha
22:43 < superjoe> benDos, this code snippet might help get you started: https://gist.github.com/3773308
22:43 < superjoe> there's probably a module out there for this alreday
22:43 < benDos> I figured there was too but searching for modules is pretty shit since i can only search by keyword as far as i know
22:44 < benDos> That example is kinda gross, isn't this the kind of thing node is supposed to do out of the box?
22:45 < superjoe> node.js is surprisingly low-level at times
22:47 < superjoe> benDos, the good news is that the async nature of node.js makes it possible to completely abstract messy things
22:48 < superjoe> no leaks
22:50 < benDos> Yeah I get it, I come from lots of C
22:50 < benDos> I was just hoping there was some nice way to pipe one eventemiter to another
22:52 < superjoe> what's the difference between stream.destroySoon() and stream.end() ?
22:54 < deoxxa> benDos: there's a bunch of stuff for doing just that
22:54 < deoxxa> benDos: socket.io is the most popular, but it's a bit overkill for server<->server comms
22:54 < deoxxa> benDos: you might want to look at dnode
22:55 < deoxxa> benDos: also +1 for c programmers. represent!
22:57 < superjoe> it's weird when people say "I am a Javascript developer" or "I am a C programmer"
22:57 < superjoe> sentences that make more sense include: "I know C" and "I know Javascript"
22:57 < superjoe> it's like multiple inheritance vs aggregation
22:58 < jarr0dsz> hi everyone having a great time with node.js today and tried some examples and red about the techniques
22:58 < jarr0dsz> quite amazing what you can do with node and sockets.io i wondered if you guys know any very cool examples of those 2? like very nice apps build with it
22:58 < superjoe> jarr0dsz, http://groovebasin.com/
22:58 < benDos> deoxxa, thanks i'm playing with superjoe first suggestions of jsonizing events then putting them over the unix socket
22:58 < benDos> Seems to be workingish
22:58 < jarr0dsz> juts curious, and im looking specific for an example that replaces the jquery .load ajax method
22:59 < deoxxa> benDos: that's pretty much dnode
22:59 < jarr0dsz> superjoe: nice what is it? mp3 player?
22:59 < superjoe> jarr0dsz, it's an mpd client
22:59 < jarr0dsz> never heard of that ;p what does it do?
23:00 < superjoe> it's kind of like a sonos competitor
23:00 < superjoe> you can stream or hook up speakers to the server directly
23:01 < superjoe> jarr0dsz, https://github.com/superjoe30/groovebasin
23:01 < superjoe> if you wanna peruse the code
23:01 < substack> benDos: http://github.com/substack/emit-stream
23:02 < substack> var ev = new EventEmitter; emitStream(ev).pipe(net.connect(5000))
23:02 < benDos> Dude substack thanks
23:02 < substack> then on the other end net.createConnection(function (stream) { var ev = emitStream(stream); ... }).listen(5000)
23:02 < benDos> I was trying to use node-irc with reloadable backends
23:02 < benDos> That'll make my life way easier
23:03 < benDos> The way i was doing it with raw sockets required me parsing node-irc's events by hand instead of using the event listeners
23:03 < substack> benDos: also check out https://github.com/dominictarr/mux-demux
23:03 < substack> you can pack multiple streams into a single stream with this
23:03 < benDos> Does it use sctp?
23:03 < benDos> Cause that'd be sexy.
23:04 < substack> it's just a json protocol I think
23:04 < benDos> Oh well, still useful
23:04 < benDos> thanks
23:04 < substack> reading about sctp
23:04 < substack> domonictarr must know
23:05 < benDos> Heh :p
23:05 < substack> dominictarr I mean >_<
23:05 < benDos> I've writter mux-demux like stuff before on top of tcp and udp
23:05 < benDos> But not having to do it again myself is net
23:05 < benDos> neat*
23:05 < benDos> written* bleh
23:07 < jerrysv> Nexxy: ping?
23:08 < jarr0dsz> you can do really cool stuff with node. are there any cool showcases, examples of it more that are a must see?
23:08 < jarr0dsz> a 2d platform game like mario ;) is there something build with node like that?
23:08 < jarr0dsz> with parallex scrolling perhaps :) wrote something like that a few years back in basic language, wayyy many years back
23:09 < substack> jarr0dsz: the difficulty of those is pushed entirely to the frontend
23:13 < dominictarr> benDos, the thing that mux-demux still needs is a better parser for handling binary streams.
23:13 < dominictarr> basically, you need to go from array of strings -> buffer
23:14 < benDos> Then dnode is more of what i want for events over streams/pipes?
23:14 < substack> dnode is rpc, not events
23:14 < dominictarr> benDos, you want to use a variety of methods.
23:14 < benDos> I know I'm not the first person who wanted to pass events over some stream or pipe..
23:14 < substack> emitStream does that
23:15 < benDos> Ok cool
23:15 < benDos> thanks again guys
23:15 < dominictarr> you usally have some stuff like that is like events but some that are like rpc and maybe some data replication.
23:15 < dominictarr> also checkout http://npm.im/scuttlebutt
23:16 < dominictarr> that gives you reliable events, 
23:16 < substack> state synchronization streams!
23:16 < substack> also events yep
23:16 < dominictarr> so you can still receive events that where emitted when the emitter was disconnected.
23:16 < dominictarr> it's all about using the right sort of hammer on the right sort of nail.
23:27 < aMoniker> promises are fun
23:30 < jerrysv> jarr0dsz: examples of cool node projects? https://twitter.com/jerrysievert/status/249637003115782144 - the touch screens above the taps
23:36 < Qalqi> i am developing   production  level site in node
23:36 < Qalqi> is node stable for production level?
23:37 < superjoe> Qalqi, yes
23:38 < substack> what is "production level"
23:38 < Qalqi> superjoe: my paranoid friends advise me not to
23:38 < substack> that seems like a political classification, not a technical one
23:38 < Qalqi> substack:  handling real traffic
23:38 < substack> "real traffic"
23:38 < substack> as opposed to fake traffic?
23:39 < Qalqi> we are discussing semantics here
23:39 < superjoe> Qalqi, use some metrics or give more specific requirements about this system you are building.
23:39 < aMoniker> Qalqi: your friends are dicks. start building stuff.
23:40 < Qalqi> aMoniker: thats wat i thought
23:40 < substack> Qalqi: semantics are important when you start throwing around squishly ill defined terms like "production level" and "real traffic"
23:40 < substack> what does that even mean
23:41 < substack> because you are asking people about their emotions
23:41 < substack> instead of asking for hard facts
23:41 < chilts> Qalqi: there are plenty of examples of massive sites using Node.js ... would be worth getting a list of these to show your colleagues
23:41 < chilts> LinkedIn, Yahoo!, Voxer ... all kinds of large companies
23:41  * chilts keeps meaning to start a list of these :)
23:42 < jerrysv> i've added node to the stack in a couple of fairly large companies, no problems other than any bad code that would be a problem in any other environment
23:42 < Qalqi> hm
23:43 < Qalqi> i actually like js. so preferref nodejs over other
23:43 < jerrysv> well, as long as you think that several millions hits/day is considered "fairly large"
23:43 < Qalqi> but may be i should also consider which technology suit my app well
23:43 < superjoe> Qalqi, what's the app?
23:43 <@Nexxy> hey jerrysv
23:43 < substack> jerrysv: sweet beer control system
23:44 < jerrysv> Nexxy: !!! you should come to bailey's and see the most awesome nodejs install ever :)
23:44 < substack>  is that a permanent installation?
23:44 <@Nexxy> haha
23:44 <@Nexxy> sweet
23:44 < substack> I'll be in town for krt next month, totally checking it out
23:44 < jerrysv> substack: thanks! yeah, it's here for good now - we spent 8 hours on it, painting, the new beer lines, everything
23:44 < jerrysv> substack: let me know when you're here, i'm happy to buy you a beer :)
23:44 < Qalqi> people post stuff and I need to count number of clicks on each post and maintain sort of trending and popular posts
23:45 < jerrysv> Qalqi: redis?
23:45 < chilts> yeah, redis will also help you out loads here
23:45 < Qalqi> i wrote the code using sequelize already
23:45 < substack> now portland has a node-powered karaoke bar AND a node-powered beer ordering system
23:45 < substack> node city
23:45 < Qalqi> i am familiar wth redis though
23:45 < jerrysv> substack: node awesome is more like it
23:45 < kuja> substack: hah, awesome
23:46 < jerrysv> substack: we're trying to outdo oakland
23:46 < substack> oakland just has people right now, little in the way of hardware
23:46 < jerrysv> substack: may end up at krt this year, depends on if i end up working soon - that may happen soon
23:46 <@Nexxy> jerrysv are you there now?
23:46 < jerrysv> Nexxy: yes!
23:47 < jerrysv> Nexxy: i feel it is best for me to pop in here every day for the foreseeable future "just in case"
23:47 < jerrysv> you never know when a raspberry pi is going to come crashing down and need a reboot
23:48 < jerrysv> substack: oakland also has beer revolution, and beer city just across the bay
23:49 < jerrysv> er, city beer
23:49 < substack> beermergency
23:49 <@Nexxy> yeah
23:54 <@Nexxy> jerrysv, heading over now
23:54 < jerrysv> Nexxy: yay!
23:58 < sadasant> ping
23:58 < jerrysv> pong
23:58 < sadasant> ^^
--- Log closed Mon Sep 24 00:00:10 2012
