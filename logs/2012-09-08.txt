--- Log opened Sat Sep 08 00:00:04 2012
--- Day changed Sat Sep 08 2012
00:00 < WarheadsSE> Def a circle-jerk problem
00:00 < wolfeidau> tanepiper: aha thanks again
00:00 < wolfeidau> tanepiper: Will give it a go
00:00 < lowtax> something.blog.com/how_to_use_apache_ab_on_a_real_os
00:01 < larz> lowtax: Haha nice.
00:01 < innociv> lol
00:01 < lowtax> need more apple hate in the developer community...they are doing some really bad things, that we will end up paying for
00:02 < lowtax> or already are
00:02 < tanepiper> cool story bro, get Zack to write a story about it and put it on the front page
00:03 < larz> lowtax: Okay we get it.
00:04 < TooTallNate> WarheadsSE: this one uses the pi flags https://github.com/downloads/TooTallNate/node/node-v0.8.9-pre-arm-armv6j-vfp-hard
00:04 < lowtax> larz, not yet you dont...
00:04 < TooTallNate> freshly compiled
00:04 < lowtax> probably asleep
00:04 < TooTallNate> god I love cross-compiling so much more than waiting 2 hours :D
00:04 < larz> lowtax: Huh?
00:04 < lowtax> larz, i dont think you get it yet, maybe in a few more years
00:04 < lowtax> when it hits like a ton of bricks
00:04 < WarheadsSE> lol TooTallNate wait til you hit the oshit bugs in pure cross-compile
00:05 < larz> lowtax: Been you Linux for the past 7 years mate.
00:05 < lowtax> you would not be so dismissive otherwise
00:05 < TooTallNate> oshit?
00:05  * WarheadsSE uses distcc for cc parts
00:05 < larz> using not you.
00:05 < lowtax> larz, grasshopper
00:05 < WarheadsSE> Yeah, non-traceable random crap causing bugs/behavior/crashes that can't be duplicated on a native compile
00:05 < WarheadsSE> thankfully its fairly** rare 
00:06 < larz> lowtax: I'm only 19 but okay sure, now stop trolling please.
00:06 < TooTallNate> WarheadsSE: so your ssl errors went away with my binary?
00:06 < WarheadsSE> gone
00:06 < TooTallNate> nice :)
00:06 < lowtax> larz, im not trolling...you are trolling me by forcing me to respond to your snide remarks
00:06 < WarheadsSE> Im looking at my setup TooTallNate 
00:06 < WarheadsSE> v8 : https://github.com/archlinuxarm/PKGBUILDs/blob/master/community/v8/PKGBUILD
00:06 < WarheadsSE> nodejs : https://github.com/archlinuxarm/PKGBUILDs/blob/master/community/nodejs/PKGBUILD
00:07 < lowtax> to defend my h onor
00:08 < larz> lowtax: What are you even talking about? I just said "Okay we get it." this isn't a channel to bash some OS, so there's no reason to waste time talking about it continuously.
00:08 < TooTallNate> WarheadsSE: the problem is that v0.8.8 and older attempt to use the x64 config on arm for openssl
00:09 < TooTallNate> that was fixed in the v0.8 branch
00:09 < TooTallNate> but there hasn't been a v0.8.9 release yet
00:09 < TooTallNate> hence my "pi" branch exists for now
00:09 < WarheadsSE> x64 config..
00:09 < TooTallNate> haha
00:09 < TooTallNate> yup
00:09 < WarheadsSE> hmm
00:10 < TooTallNate> WarheadsSE: see https://github.com/joyent/node/compare/f8fd9aca8bd01fa7226e1abe75a5bcf903f287ab%5E...7142b260c6c299fc9697e6554620be47a6f622a9
00:11 < TechnoCat> can i use websockets on the same domain with different ports?
00:11 < nkuttler> TechnoCat: sure
00:11 < WarheadsSE> cute TooTallNate 
00:11 < TechnoCat> sorry, i guess i wasn't specific
00:12 < TechnoCat> like can i go to http://example.com and socket communicate with http://example.com:720
00:12 < WarheadsSE> so its a gyp config proglem :)
00:12 < TooTallNate> WarheadsSE: so i'm guessing that explains the openssl weirdness you've been seeing
00:12 < TooTallNate> WarheadsSE: basically yes
00:12 < WarheadsSE> Yeah, it does explain it rather exactly.
00:12 < nkuttler> TechnoCat: well websocket isn't http, but yeah
00:13 < WarheadsSE> now to fix the issues with newer* versions of ssl, so I can go back to the system libs :p
00:14 < WarheadsSE> being from Arch and all ;)
00:16 < TooTallNate> WarheadsSE: maybe you can prep us with fixes for openssl 1.0.1 for when we update the bundled one :)
00:18 < lowtax> larz, this is probably the best place to have a discussion with the foremost developers about the state of the industry, but ok, i get your point
00:18 < lowtax> ill try in #java
00:18 < TehShrike|Work> O_0
00:19 < TehShrike|Work> What was the discussion now?
00:19 < lowtax> about apple has to go
00:19 < lowtax> boycott that trash
00:19 < TehShrike|Work> Ah, that is a flamebait topic :-)
00:19 < TehShrike|Work> See, the trick is
00:19 < lowtax> i can take the heat, there are fackts
00:19 < TehShrike|Work> You can't open with a line like that
00:19 < lowtax> ...facts
00:19 < TehShrike|Work> You have to open with something that sets it up
00:19 < TehShrike|Work> Like "man, aren't patents evil?"
00:19 < lowtax> lol
00:20 < TehShrike|Work> And then everyone else goes "fuck yeah, fuck those fucking patents"
00:20 < WarheadsSE> heh, yeah .. its the 1.0.1c issue w/ the neon check
00:20 < lowtax> i try to type facts and i mix it with fuck and get fackts
00:20 < TehShrike|Work> And then you say something like "I get really sad about Apple using patents so aggressively" and then the other devs all go ":-( inorite?"
00:20 < lowtax> TehShrike|Work, those devs need saving
00:21 < lowtax> ahuradur osx enables me
00:21 < lowtax> pfft
00:21 < TehShrike|Work> And then somebody else says "I wish somebody else put out mobile hardware and software as good as Apple so that we wouldn't be so tied to them"
00:21 < TehShrike|Work> And most of the crowd would nod
00:21 < TehShrike|Work> And there you go
00:21 < TehShrike|Work> Discussion done
00:22 < TehShrike|Work> Just don't lead with the flamebait conclusions and you're fine ;-P
00:22 < TehShrike|Work> Come back tomorrow for the second in my series of lectures about the internet, "when it is acceptable to compare things to Hitler"
00:24 < WarheadsSE> TooTallNate: I'll get back to you on that one.
00:24 < TooTallNate> WarheadsSE: thanks, i'm curious
00:25 < draginx> so is CoffeeScript looked down upon in the ndejs community
00:25 < maxogden> javascript is embraced by node core and many module developers
00:26 < archonic> Yeah, is there any cool little hacks about CoffeeScript or is it mostly just sugar / aesthetics?
00:26 < archonic> The guy who makes it, Jeremy Ashkenas (?) seems like a really smart guy
00:26 < TehShrike|Work> maxogden: I don't think I've told you this before, but I admire your beard
00:26 < larz> archonic, Think it's just aesthetics to make it seem "better", though the compiled JS is optimised.
00:27 < larz> TehShrike|Work, +10
00:27 < TehShrike|Work> I don't look down on CoffeeScript.  If I used it I would probably appreciate much of its syntax.  However, I'm interested in developing with the JavaScript community, not the CoffeeScript community, so I write JavaScript.
00:27 < pyrotechnick> that's like me saying
00:28 < draginx> larz: That's what I like about CS
00:28 < draginx> even the JS is highly optimized, but I mean.. kind of ugly too
00:28 < TehShrike|Work> The CoffeeScript community is a subset of the JavaScript community.  I do not find the JS syntax so oppressive as to be willing to make my code less readable to the large majority of the community
00:29 < TehShrike|Work> I appreciate the idea and the project, though
00:29 < TehShrike|Work> I'm glad that people experiment with syntax and are willing to change things up
00:29 < larz> draginx, Yeah kind of hard to debug currently as well though CS 2 supposedly just received source mapping so it should be easier to debug now.
00:29 < draginx> nice
00:30 < ralphholzmann> can anyone recommend a logging module ?
00:30 < larz> ralphholzmann, Anything specific you need? 
00:30 < ralphholzmann> nothing really, but it'd be nice if it could move logs when they get to big
00:31 < ralphholzmann> my app has two node processes
00:31 < TehShrike|Work> maxogden: does your blog not have an RSS feed? :-x
00:31 < larz> ralphholzmann, If you want something simple but useful you can use TJ's https://github.com/visionmedia/log.js 
00:31 < ralphholzmann> tj has a soln for everything =)
00:31 < ralphholzmann> thanks larz 
00:32 < larz> ralphholzmann That he does, that he does. If you need a module, most likely he has that shit already created. Haha
00:32 < TehShrike|Work> Someone has to compete with substack!
00:32 < larz> At least TJ's are actually useful though.
00:32 < TehShrike|Work> lol
00:32 < ralphholzmann> haha
00:33 < TehShrike|Work> I dunno, dnode/shoe and browserify are pretty nuts
00:34 < TehShrike|Work> Not to mention most of the others of the hundreds of modules that he's made :-P
00:34 < larz> Yeah some of his stuff is incredible, but his recent creations are a bit "wut", I can't find it now but he made a module that consisted of 3 lines, it was a simple algorithm to find the LCD for a set of ints.
00:35 < TehShrike|Work> Well, that's what happens when you write hundreds of modules
00:35 < TehShrike|Work> Some of them are small
00:35 < substack> if people complain that your modules are too small you're doing it right
00:35 < larz> A 3 line module shouldn't be a module. It would be slower and in the end take more lines to require and use the function.
00:36 < substack> larz: wrong
00:36 < substack> larz: you can't npm install a snippet
00:36 < substack> and you make your code shittier when you do that
00:36 < TehShrike|Work> Sorry, I really can't say anything bad about small modules
00:36 < substack> and you opt out of future bug fixes
00:36 < substack> and you opt out of tests
00:36 < substack> and you opt out of good documentation
00:36 < TehShrike|Work> npm install code-i-can-trust
00:36 < larz> substack, I'm not going to argue. 
00:36 < lowtax> npm install virus
00:37 < substack> the code itself is only a part of the overall value that modules provide
00:37 < TehShrike|Work> "This virus has been in production for a year now, I know it will work like I expect!"
00:37 < substack> tests, documentation, discoverability, upgrades
00:37 < lowtax> TehShrike|Work, you are wise
00:37 < TehShrike|Work> There was a really good G+ post/comment thread about how large a module should be
00:37 < TehShrike|Work> I found it to be a good read, I wonder if I can pull it up...
00:37 < substack> looking up an article on wikipedia about some obscure algorithm and transliterating the pseudocode to javascript is tedius
00:38 < substack> also modules tend to grow over time as edge cases are discovered and fixed
00:38 < substack> best to start small
00:38 < substack> to compensate for future growth
00:39 < TehShrike|Work> Ah yes https://plus.google.com/114198465647271367011/posts/AowKp99k496
00:39 < larz> substack I do have to agree with the tedious part.
00:39 < lowtax> when should you make a module
00:39 < substack> lowtax: when you want to make one
00:40 < larz> It would actually be cool to implement multiple algorithms in the LCD module. 
00:40 < substack> when you have some reusable morsel of functionality
00:40 < lowtax> :3
00:40 < substack> larz: why? that sounds pointless
00:41 < substack> just to make it needlessly bigger?
00:41 < lowtax> hmm
00:41 < TehShrike|Work> larz: as humbly as I can, I would ask, why not break things up into the smallest modules possible?
00:42 < TehShrike|Work> I can think of things that could be annoyances - I have to create all those package.json files, or whatever
00:42 < lowtax> |DO NOT MAKE ME QUESTION MY PROGRAMMING STYLE
00:42 < TehShrike|Work> But conceptually, what thing is it that niggles at your mind about tiny modules?
00:42 < larz> IMO, I wouldn't want an application that has 100's of dependencies, because they each only implement one function.
00:42 < TehShrike|Work> So managing large numbers of dependencies?
00:43 < substack> npm can do that for you
00:43 < tanepiper> small code === better
00:43 < substack> larz: if you have 100s of dependencies your app is probably too big
00:43 < substack> tiny modules build on other tiny modules
00:43 < kuja> well, ideally modules tend to provide a high level API which usually results in more than 3 lines of code.
00:43 < tanepiper> tinynodes
00:43 < substack> to make tiny powerful higher-level abstractions
00:43 < kuja> sure, there will be cases where a module will probably provide a single function
00:43 < lowtax> many small codes = mess
00:43 < ang3lfir3> tanepiper, that is not exclusively true.... only if said smaller code is comprehendable and maintainable 
00:44 < lowtax> nah you go to main file
00:44 < tanepiper> ang3lfir3: well of course
00:44 < ang3lfir3> tanepiper, well you made a blanket statement ... with no qualifiers .... 
00:44 < ang3lfir3> i've seen some really clever ... tiny ass code ... that i wouldn't wish on my worst enemy 
00:45 < TehShrike|Work> I feel more comfortable maintaining small modules than I do large ones
00:45 < tanepiper> code doesn't need to be small in the sense of stupid variable names that don't mean anything
00:45 < substack> smallness is the ideal to which all code should strive
00:45 < TehShrike|Work> Though as ang3lfir3 notes, it greatly depends on the quality of the code as well
00:45 < maxogden> TehShrike|Work: maxogden.com/rss
00:45 < larz> substack If each function I needed to use in an application required use of a different module 100 wouldn't be that much.
00:45 < TehShrike|Work> maxogden: much thanks.
00:45 < tanepiper> but small in that if you have more than 100 lines of code in one file, your probably doing it wrong
00:46 < substack> larz: if you need hundreds of functions you're probably solving too many problems in the same application
00:46 < ang3lfir3> the size of a module should simply be dependant on the size of the logical grouping of functionality that it contains... which hopefully is pretty logical .... 
00:46 < substack> split the big application up into lots of tiny applications
00:46 < substack> they can talk to each other over the network
00:46 < larz> Or your creating a high scale website's that aren't as simple as a little start up website or whatever.
00:46 < lowtax> using namespace std::cout;
00:46 < substack> nodes
00:46 < tanepiper> nodejs caches requires, so for example i require all my express route functions in seperate files
00:46 < TehShrike|Work> maxogden: consider <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss" /> :-x
00:46 < tanepiper> just have one main server + router file
00:46 < TooTallNate> is there a spec for rss feeds?
00:47 < TooTallNate> i still need to implement one on mine
00:47 < TehShrike|Work> Of course there are specs! :-)
00:47 < TehShrike|Work> I think the last time I implemented an RSS feed myself I just looked at Wikipedia :-P
00:47 < ang3lfir3> in other words ... like so many things in CS and good code .... "it depends"
00:47 < substack> larz: code need not necessarily be bloated and terrible in order to solve ambitious or complicated problems
00:47 < tanepiper> code should be readable by the next person when your hit by a bus
00:48 < lowtax> without comments
00:48 < lowtax> fuck comments
00:48 < substack> comments are overrated
00:48 < tanepiper> ^^
00:48 < substack> and overused
00:48 < TehShrike|Work> I try to write as few comments as possible :-x
00:48 < lowtax> however
00:48 < lowtax> HOWEVER
00:48 < lowtax> sometimes when you look at your own code 2 years later
00:48 < lowtax> having learned so much
00:48 < ang3lfir3> comments are a sign of you having bad code 
00:48 < TehShrike|Work> Most of my comments are usually in the vein of "I did it this way because of the issue described in this SO question: [link]"
00:48 < lowtax> you were a damned moron without comments
00:49 < substack> you should make the few comments you put in code really count
00:49 < substack> everything else is noise
00:49 < ang3lfir3> TehShrike|Work, those are decent comments as they explain nuiance 
00:49 < tanepiper> lowtax: like reading radium's code?
00:49 < lowtax> tanepiper, wat
00:49 < nkuttler> right, because nobody needs api docs 
00:50 < lowtax> well if you code libs
00:50 < lowtax> document and unit test
00:50 < lowtax> if you code applications.....
00:50 < lowtax> hack the planet?
00:50 < nkuttler> good luck with that..
00:50 < ang3lfir3> nkuttler, api docs and code comments should be considered seperate things
00:51 < tanepiper> ++ document autogenerators are the worst
00:51 < purr> Let it be known that tanepiper loves document autogenerators are the worst.
00:51 < lowtax> nope, fuck it all, hack the planet
00:51 < nkuttler> anyway, no point in discussing this
00:51 < TehShrike|Work> lol
00:51 < TehShrike|Work> ++ butts
00:51 < purr> Let it be known that TehShrike|Work loves butts.
00:51 < TehShrike|Work> Huh.
00:51 < TehShrike|Work> Well I guess now it's official.
00:51 < maxogden> TehShrike|Work: cool, added that tag to my blog header, thanks
00:51 < lowtax>  /callvote ban purr
00:51 < TehShrike|Work> I never knew how to say it before.
00:52 < tanepiper> ++ big butts and I cannot lie
00:52 < purr> Let it be known that tanepiper loves big butts and I cannot lie.
00:52 < lowtax> fail
00:52 < lowtax> lts make it flood out
00:52 < zomg> ++i
00:52 < larz> --i
00:52 < CIA-116> node: Bert Belder openssl-asm * r8e6bff9 / deps/openssl/openssl/crypto/bn/asm/x86_64-win32-masm.asm : openssl: add optimized bignum x64 asm code for windows - http://git.io/fsfOlw
00:52 < CIA-116> node: Bert Belder openssl-asm * rda71123 / (6 files in 4 dirs): openssl: use optimized asm code on x86 and x64 - http://git.io/dp6C1A
00:52 < CIA-116> node: Bert Belder openssl-asm * ra008f11 / (52 files in 42 dirs): openssl: add generated asm code - http://git.io/fChFCA
00:53 < TehShrike|Work> maxogden: sweet! Linking to RSS feeds with <a href="/rss"> is so old-fashioned now :-)
01:07 < zzarcon_> Hi all
01:07 < ang3lfir3> who is all ?
01:08 < zzarcon_> xd
01:08 < zzarcon_> Anyone knows the error anyone knows the error
01:08 < zzarcon_> anyone knows the error ECONNREFUSED
01:09 < larz> zzarcon_, Become friends with: http://pubs.opengroup.org/onlinepubs/000095399/basedefs/errno.h.html ECONNREFUSED means connection refused.
01:09 < ang3lfir3> and here i was thinking http://www.google.com/search?sourceid=chrome&client=ubuntu&channel=cs&ie=UTF-8&q=ECONNREFUSED
01:11 < zzarcon_> thanks very much
01:11 < larz> Yeah mine was more general (: Yours seems to have a couple Node.js specific ones so zzarcon_ may benefit more from it.
01:11 < zzarcon_> i see this now
01:12 < larz> You're welcome
01:12 < ang3lfir3> larz, yeah but I was just trying to be a jerk ... you were trying to be helpful :p 
01:12 < Sly> zzarcon_, AvianFlu already told you in #nodejitsu that it's not your code causing ECONNREFUSED.
01:12 < Sly> You should probably pay attention to what he says.
01:12 < larz> ang3lfir3, haha I see 
01:13 < zzarcon_> An appreciation; the error does not appear in all machines
01:14 < Sly> That's because he temporarily fixed it.
01:14 < Sly> Again, you should probably read what he says.
01:14 < zzarcon_> in my pc works fine, but in the pc of 2 friends not work...
01:14 < Sly> Again, you should read what he says/said.
01:14 < larz> Sly What did he say?
01:14 < Sly> larz, it's the balancer causing the problem.
01:15 < Sly> zzarcon_ just refused to read what he said, apparently.
01:15 < Sly> And the topic even says that the balancer is having issues right now.
01:15 < Sly> They're working on a patch for it.
01:15 < larz> Ah okay cool. 
01:17 < zzarcon_> Sly: Okei, I'm really sorry
01:18 < Sly> zzarcon_, no reason to apologize. It just frustrates me when people don't read the response to their own problems.
01:19 < ang3lfir3> I love the british .... "save the economy with beer at lunch" .... thats my kind of thinking
01:19 < zzarcon_> Sly: Oh yess, I read the answer, but i don't understand, mi English is bad..
01:19 < Sly> rofl, ang3lfir3.
01:19 < zzarcon_> Sly: thanks for your time
01:19 < Sly> zzarcon_, Nodejitsu is having problems with their load balancers right now. If you read the topic in #nodejitsu, you'll see that it tells you why you would be getting an ECONNREFUSED error.
01:20 < Sly> zzarcon_, AvianFlu was telling you that it was fixed, and that it's not your code. He didn't tell you what he did to fix it, because I'm assuming that he assumed you read the channel topic.
01:21 < ang3lfir3> thats why i miss working in the finance industry..... you ALWAYS have beer at lunch .... its insane not too
01:21 < ang3lfir3> working in insurance .... not so much 
01:22 < CIA-116> node: Bert Belder openssl-asm * r28a0c3f / (deps/openssl/asm-gen.sh deps/openssl/openssl.gyp): Fix OS X (hopefully) - http://git.io/oRKZ0g
01:22 < CIA-116> node: Bert Belder openssl-asm * r740bc8d / (78 files in 63 dirs): Regenerate asm - http://git.io/nhqWdA
01:24 < ang3lfir3> ok so I don't have to scan the room.... how many of you are using Macs ?
01:25 < lowtax> hi
01:25 < ang3lfir3> ohhh good less than I expected  :p .... 
01:26 < ang3lfir3> lo
01:26 < larz> ang3lfir3, Lol
01:27 < ang3lfir3> so who is working on some thing awesome!
01:29 < ctult> I totally don't get how 'this' works.  Could anyone please explain?  Or give me a link?
01:29 < timeturner> ctult: ##javascript
01:29 < substack> ctult: it's just an implicit parameter used by the object system to hold the instance value
01:29 < CIA-116> node: Bert Belder openssl-asm * r9ba7841 / (deps/openssl/asm-gen.sh deps/openssl/asm-gen.sh): Set +x on asm-gen - http://git.io/DF84sQ
01:30 < substack> it's quite simply the thing before the dot or the [] in a function call
01:30 < substack> obj.foo() // inside foo(), `this` is obj
01:30 < ang3lfir3> substack, that is not always true
01:30 < substack> obj['foo']() // same as above
01:30 < substack> yes if you .call() .apply() or .bind() you can set the `this` value explictly
01:30 < substack> *explicitly
01:31 < ang3lfir3> also depends on scope
01:31 < substack> when?
01:31 < substack> and when you just foo() without a ref on the left side `this` is the global object
01:31 < ang3lfir3> 'this' inside a function call inside foo() may not be the "this" you think it is
01:32 < CIA-116> node: Bert Belder openssl-asm * re910992 / (6 files in 4 dirs): openssl: use optimized asm code on x86 and x64 - http://git.io/To9Qpw
01:32 < CIA-116> node: Bert Belder openssl-asm * r755ec1e / (78 files in 63 dirs): openssl: add generated asm code - http://git.io/oR83ow
01:32 < ang3lfir3> that is what usually screws people up
01:32 < substack> ang3lfir3: but that's not a special rule different from that description
01:32 < ang3lfir3> why i know most people love to hate .... douglas C did a decent job explaining the pain... 
01:32 < substack> so it doesn't "depend on scope"
01:33 < ang3lfir3> ok ... that might have been a tad naive of me 
01:34 < substack> `this` is rather consistent and adding more syntax will only make it worse
01:34 < substack> the problem: too many rules for how `this` gets set, solution: add more rules that influence the value of `this`
01:35 < larz> de
01:35 < ctult> timeturner: I'm not a newb, I just need to know exactly how it works.
01:36 < substack> >> 1+2
01:36 < purr> substack: (number) 3
01:36 < substack> oh sweet
01:36 < substack> >> (function () { return this })() === global
01:36 < purr> substack: ReferenceError: global is not defined
01:36 < ctult> Thank you substack, I needed to know about how to set what this is.
01:36 < substack> ctult: caveat: `this` can only be an object
01:36 < substack> or a function
01:37 < substack> can't be a number or a string for some reason
01:37 < ctult> I know that.
01:37 < substack> >> (function () { return this }).call(4)
01:37 < purr> substack: (object) 4
01:37 < substack> oh maybe it can
01:37 < substack> >> (function () { return this }).call(4) === 4
01:37 < purr> substack: (boolean) false
01:37 < substack> aha
01:37 < substack> right it's one of those Number() objects
01:37 < ctult> >> (function () { return this}).call([1,2,3])
01:37 < purr> ctult: (object) [1, 2, 3]
01:38 < ctult> YES
01:38 < substack> >> (function () { return this })()
01:38 < purr> substack: (object) {}
01:38 < substack> >> Object.getOwnPropertyNames((function () { return this })())
01:38 < purr> substack: (object) ['TypeError', 'decodeURI', 'numbers_that_add_and_multiply_to', 'print', 'parseFloat', 'Number', 'URIError', 'encodeURIComponent', 'RangeError', 'ReferenceError', 'RegExp', 'Array', 'isNaN', 'console', 'Sol', 'Date', 'Infinity', 'Boolean', 'constant_multiply', 'Error', 'NaN', 'alert', 'version', 'String', 'Function', 'Math', 'undefined', 'encodeURI', 'obfuscate…
01:38 < substack> :o
01:38 < TehShrike|Work> `this` is the object on which the current function is acting as a method
01:38 < TehShrike|Work> Did I say that right?
01:39 < substack> TehShrike|Work: sounds about right
01:39 < mscdex> >> while(true);
01:39 < purr> mscdex: Timeout Error: Execution time exceeded 2 seconds
01:39 < mscdex> aw only 2 seconds
01:39 < ctult> trololol
01:39 < ctult> >> while (true) {this}
01:39 < purr> ctult: Timeout Error: Execution time exceeded 2 seconds
01:39 < substack> >> (function () { return this })().process
01:39 < purr> substack: undefined
01:39 < TehShrike|Work> "this" and function scoping were very confusing to me before I decided to actually bother to learn about them >_<
01:39 < ctult> >> window
01:39 < purr> ctult: ReferenceError: window is not defined
01:39 < ctult> k just making sure
01:40 < mscdex> >> process
01:40 < purr> mscdex: ReferenceError: process is not defined
01:40 < mscdex> >> console
01:40 < purr> mscdex: (object) {log: (function) log, time: (function) time, timeEnd: (function) timeEnd}
01:40 < mscdex> >> global
01:40 < purr> mscdex: ReferenceError: global is not defined
01:40 < mscdex> >> module
01:40 < purr> mscdex: ReferenceError: module is not defined
01:42 < CIA-116> node: Bert Belder openssl-asm * r9ee1f15 / (6 files in 4 dirs): openssl: use optimized asm code on x86 and x64 - http://git.io/nwOGag
01:42 < CIA-116> node: Bert Belder openssl-asm * rb9b1fe7 / (78 files in 63 dirs): openssl: add generated asm code - http://git.io/mqyl9w
01:42 < ctult> >> var a = (function (w, p) {w.call(p)}); a([1,2,3], function(){return 1;})
01:42 < purr> ctult: TypeError: Object 1,2,3 has no method 'call'
01:42 < ctult> oops wrong way
01:42 < ctult> >> var a = (function (p, w) {w.call(p)}); a([1,2,3], function(){return 1;})
01:42 < purr> ctult: undefined
01:42  * ctult loves my varible names
01:43 < TehShrike|Work> >> eval(I="'eval(I='+JSON.stringify(I)+')'")
01:43 < purr> TehShrike|Work: (string) "eval(I=\"'eval(I='+JSON.stringify(I)+')'\")"
01:43 < TehShrike|Work> ooooh
01:43 < ctult> >> var a = (function (p, w) {w.call(p)}); a([1,2,3], function(){return this;})
01:43 < purr> ctult: undefined
01:44 < TehShrike|Work> >> console.log(eval(I="'eval(I='+JSON.stringify(I)+')'"))
01:44 < purr> TehShrike|Work: undefined; Console: "eval(I=\"'eval(I='+JSON.stringify(I)+')'\")"
01:44  * TehShrike|Work shrugs
01:44 < ctult> >> var a = (function (p, w) {w.call(p)}); a([1,2,3], function(){console.log(this);})
01:44 < purr> ctult: undefined; Console: [1, 2, 3]
01:44 < ctult> kewl
01:45 < ctult> That gives me an idea on how to sandbox natives without anything hacky.
01:46 < samholmes> dnode is awesome
01:46 < TehShrike|Work> heehee
01:47 < samholmes> but how can I manage multiple client connections on the server for pushing?
01:47 < ctult> var b = Blocks.create('Array'); b.prototype.a = function(){return this}; B([2,4]).a(); //How does that code style look?
01:47 < samholmes> Like, say I'm doing a chat room, I guess I would need a subscribing kind of thing?
01:47 < samholmes> What's pub/sub?
01:48 < ctult> samholmes: look at radio.js
01:49 < substack> samholmes: you could build that with programming
01:49 < TehShrike|Work> lol substack
01:49 < TehShrike|Work> Be kind :-P
01:50 < jocafa> programmingS, substack. plural.
01:50 < TehShrike|Work> You're both wrong!  You would build it with codes!
01:50 < samholmes> substack: I could cache it all myself you mean, and design my own dnode module that provides pub/sub?
01:50 < jocafa> i don't have enough codes to do it :(
01:50 < ctult> No you sandbox natives.
01:50 < substack> samholmes: var clients = {} outside of the dnode handler I mean
01:51 < substack> managing subscriptions is well-handled by event emitters though
01:51 < samholmes> substack: That's sort of what I'm doing with one project (first project using dnode/shoe). But this doesn't allow me to send data to a partial set of these clients, mr substack.
01:52 < substack> samholmes: one easy thing would be to have a separate shoe() for each room
01:52 < samholmes> I see pub/sub as almost synonymous to an evented system. Sub is a listenter; pub is a despatch or trigger of an event.
01:52 < substack> samholmes: have you messed with mux-demux?
01:52 < substack> sounds pretty ideal for what you're building
01:52 < substack> works awesomely with shoe or any other streaming lib
01:52 < samholmes> substack: I haven't, yet.
01:53 < substack> with mux-demux you can pack and unpack multiple streams into a single stream
01:53 < substack> so you could have a different stream for each room
01:53 < samholmes> a separate shoe for each room/channel/event would be costly, no?
01:53 < substack> if it is costly you could use mux-demux for that
01:53 < substack> with mux-demux you could even have a stream dedicated to dnode if you want more rpc-style pieces
01:54 < samholmes> by dominictarr?
01:54 < substack> yep
01:54 < samholmes> what's a multiplexer.
01:54 < samholmes> xP
01:55 < TehShrike|Work> What's a plexer, and how can there be multiples of it? 8-|
01:55 < samholmes> Where's the dummy tut on mux-demux? :P
01:55 < samholmes> TehShrike|Work: exactly!
01:55 < samholmes> wth is going on?! o.O
01:55 < substack> samholmes: working on it for stream-handbook
01:55 < substack> not finished though
01:56 < TehShrike|Work> I'm really looking forward to the continuation of that btw substack
01:56 < samholmes> substack: Ah. That handbook is preeeeeettttyyy awesome btw. Helped me out a lot with dnode/shoe. ;)
01:56 < samholmes> TehShrike|Work: likewise
01:56 < wolfeidau> +1 substack win
01:56 < samholmes> Yes, we're all excited.
01:57 < TehShrike|Work> Streams are such an essential part of node.js, and I still haven't gotten comfortable with them yet
01:57 < samholmes> So publish it and charge 1 BTC for it. Become a multiplexer, where plexer stands for some large unit of money. :D
01:57 < dougb> with jade, how can i set a "data-*" attribute in HTML?
01:57 < samholmes> TehShrike|Work: Good to know that I'm not alone on that.
01:57 < samholmes> I notice that dnode is almost like using modules across connected nodes.
01:58 < samholmes> remote.exportedFunction = ...
01:58 < samholmes> exports.exportedFunction = ...
01:58 < samholmes> An interesting API would be a network based require function that allows you to require in resources on a network and use them as if they were local.
02:00 < samholmes> Then you could expose a streaming API to clients and you'd have an evented IO without any extra work!
02:00 < samholmes> remote.require('twitter-stream').on('tweet', function(){ });
02:01 < samholmes> Or is this an unnecessary abstraction?
02:02 < TehShrike|Work> That would just be a few lines of code on the client to create the require() equivalent, and variously-named "module" objects exposed via the remote object on the server, right?
02:03 < samholmes> TehShrike|Work: Well, on the server we'd want a way to just be able to write a standard module (nothing special) then expose it remotely.
02:03 < mhr> Hi guys, I'm not sure if this is the right place to ask npm related questions, but I'm having a problem.  I have a windows 7 pc, it's 64-bit, so that's the background information.  if I type "npm install" on my console, which shows a list of my installed packages, it does something different: http://pastebin.com/3ukviN7u
02:04 < mhr> Can you help?
02:04 < TehShrike|Work> Does that package.json file exist?
02:06 < mhr> well, I checked, and it didn't, so I just created one without anything in it because I didn't know what it would normally be filled with, but that failed too, so I just deleted it.  I've installed and repaired and reinstalled node.js multiple times, and the problem hasn't gone away
02:07 < TehShrike|Work> All right, so, what do you expect the npm install command to do?
02:08 < TehShrike|Work> Because it pretty much expects you to have a module with a valid package.json file
02:08 < TehShrike|Work> And then it does stuff with it
02:08 < mhr> isn't there some sort of global package.json file or something?
02:08 < mscdex> no
02:09 < mhr> okay, so npm install shouldn't do anything globally, so it isn't a "problem" after all
02:09 < mhr> nvm then
02:09 < lowtax> nvm ftw
02:09 < mscdex> the only time `npm install` does something globally is when you specify '-g'
02:10 < mscdex> and that should be used sparingly
02:10 < lowtax> can you get away with NEVER?
02:10 < mhr> hmm, I meant "npm install" can be a command all on its own
02:10 < mhr> or is that what you mean and I'm misunderstanding you
02:10 < larz> Working on a module, and something went wrong and it accidentally set 240 pushes to Git.. 
02:10 < mscdex> mhr: if you want to see what's installed in the current directory, then use `npm ls`, to see what's installed globally use `npm ls -g`
02:11 < larz> Github*
02:11 < mscdex> mhr: `npm install` is for installing packages and dependencies
02:11 < mhr> I'm a fool, why did I think npm install was for viewing dependencies...?  wow.
02:15 < cleos_frey> Hey all, I published my first package: it's a wrapper for Growl with no dependencies (besides Growl >1.3)
02:15 < cleos_frey> you can check it out here https://github.com/theabraham/growly and any crticisms welcome
02:18 < samholmes> what's another word for next and previous?
02:18 < samholmes> like the combination of the two?
02:18 < standoo> samholmes: ?
02:18 < samholmes> includeNextAndPrevious
02:18 < cleos_frey> samholmes: direction?
02:18 < samholmes> is a variable I'm going to name
02:19 < samholmes> Pagenation (only they're not pages)
02:19 < samholmes> direction is good. But hmmm
02:19 < larz> cleos_frey, Nice! I'd test it but no Mac. I like how your calling it over net.
02:19 < cleos_frey> larz: hey thanks! It uses GNTP which apparently works with Growl on windows and linux
02:20 < cleos_frey> larz: haven't tested it outside my mac though...
02:21 < larz> cleos_frey, Yeah I'm pretty sure it'll work on other systems that use GNTP. 
02:21 < TehShrike|Work> samholmes: adjacent [thing]s?
02:22 < mscdex> samholmes: navigate?
02:22 < cleos_frey> samholmes: what about 'next' variable being a boolean, and if it's false that implies 'previous'?
02:22 < samholmes> Alright. Thanks for the suggestions I think I chose one
02:24 < samholmes> How can I parse true and false values in a query string to be true or false?
02:24 < samholmes> Sense they are always strings, then I can't simple test them
02:25 < samholmes> 'false' is true
02:25 < samholmes> Boolean('false') is also true
02:25 < jcrew> === "false"
02:26 < samholmes> jcrew: I want the values to be boolean. So I can just do if(value) or if (!value)
02:26 < samholmes> I could just do value = ~~value; and then always use integers
02:26 < TehShrike|Work> Well, it's up to you - I usually check to make sure the string is !== 'false', and then if it matches the regex [0-9\.]+ then I make sure that parseFloat(that_string) is also falsey
02:26 < jcrew> if you want to convert you can just do:  qs = (qs === "true")?true:false;
02:27 < jcrew> you can also do what TehShrike|Work is suggesting and use a regex to make it make it work in one line under multiple conditions
02:27 < TehShrike|Work> If you want 0 to be false, that's usually what I do
02:27 < samholmes> I see
02:28 < samholmes> thx. :)
02:28 < jcrew> straight numbers work better, because if it's 0 then it will return false in a comparison (even if it's a string)
02:38 < larz> Someone wanna help? https://gist.github.com/3671417 For some reason this causes it to push to the server hundreds of times, I can't tell why.
02:41 < TehShrike|Work> I'm watching a video of myself playing table tennis
02:41 < TehShrike|Work> And it occurs to me
02:41 < TehShrike|Work> That I do actually look kinda funny
02:44 < mscdex> larz: i don't see anything wrong there, maybe the problem lies elsewhere?
02:45 < mscdex> larz: well, i take that back. you are using strange arguments with JSON.stringify...
02:45 < larz> mscdex, that's what I thought, but when I comment out exec for console.log it only gets called the two times.
02:46 < larz> No those are normal https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
02:47 < larz> It has to be from somewhere else because it's also writing out the file hundreds of times as well. I'm gonna post the whole update function.
02:47 < mscdex> good idea
02:47 < larz> Okay it's up
02:49 < larz> the getCommit function just returns the diff and subject from the last commit FYI.
02:49 < mscdex> larz: why is your `err` parameter in getCommit() callback the _last_ one?
02:49 < mscdex> :S
02:50 < larz> odd, I didn't notice till now (: I'm kinda frantically doing it right now, cause I just pushed to Github like 400 times.. 
02:51 < mscdex> heh
02:52 < larz> Any idea of what could be going on? Here's the full repo https://github.com/larzconwell/auto_npm
02:56 < samholmes> What is mux-demux really?
02:57 < samholmes> Any videos on this?
03:01 < samholmes> found one
03:03 < samholmes> so what does mux-remux have to do with pub/sub?
03:05 < larz> samholmes, What is mux-remux
03:05 < samholmes> larz: you mean mux-demux?
03:06 < samholmes> larz: http://adubvideo.net/informative/mux-demux-remux-huh
03:07 < larz> Ah well this is cool!
03:08 < samholmes> larz: I don't see how. :\
03:08 < samholmes> You just turn multiple-streams into one. What application is that for?
03:10 < larz> He used DVD's and Blurays  as examples, which seems like the only example I can think of.
03:11 < samholmes> How is it useful in node/
03:11 < samholmes> ?
03:11 < mscdex> isaacs: i've been getting a lot of 'socket hang up' errors when attempting to browse package details on the npmjs site every now and again
03:11 < samholmes> I guess it'd be useful when load-balancing?
03:12 < mscdex> isaacs: sometimes it takes 5 or so refreshes to get the package details to show up
03:12 < larz> samholmes, Where did you hear this was used for things like that?
03:12 < larz> mscdex, Yeah I've been getting that as well.
03:12 < samholmes> larz: mux-demux module was recommended when I mentioned pub/sub
03:12 < mscdex> :S
03:13 < larz> samholmes, This https://github.com/jortworx/mux-demux ?
03:14 < samholmes> no it's the one by dominictarr, larz.
03:14 < larz> mscdex, Oh nevermind that was a forked one, I just found the dominictarr one haha
03:15 < mscdex> ?
03:15 < larz> Oops, samholmes not mscdex 
03:15 < larz> sorry
03:15 < mscdex> :-)
03:15 < samholmes> I see
03:16 < larz> samholmes, This looks like a weird use, after reading the really low level article about writing VOB data.
03:16 < samholmes> Why is dnode called dnode? What's the d for?
03:16 < samholmes> Y U NO CALL IT TURTLE?
03:17 < samholmes> larz: Oh I see. You can use mux-demux to turn multiple shoe socket connections into on.
03:17 < larz> samholmes, D is distributed I think.
03:17 < samholmes> I see
03:17 < samholmes> I still vote for turtle.
03:17 < samholmes> It's cuter.
03:17 < samholmes> haha
03:17 < larz> Haha
03:18 < larz> Talk to substack about that :D
03:18 < samholmes> Well, idk if it's plausible to change the name now, ya think?
03:18 < larz> Yeah I was joking haha
03:19 < samholmes> I could fork it and re-name..but I'd need to add something to it to make it different. Maybe just a different API.
03:19 < samholmes> slightly different*
03:19 < samholmes> meh no point.
03:24 < samholmes> substack: Has the API changed since this http://substack.net/posts/9bac3e/Roll-your-own-PubSub-with-DNode ?
03:24 < samholmes> for dnode that is?
03:31 < CIA-116> node: Bert Belder openssl-1.0.1c-wip * r09e1d72 / (462 files in 66 dirs): openssl: upgrade to 1.0.1c - http://git.io/eDrqzg
03:31 < CIA-116> node: Bert Belder openssl-1.0.1c-wip * r3bb11e0 / (26 files in 7 dirs): Reapply floating patches - http://git.io/qVpiPA
03:34 < samholmes> How costly are websockets or sockjs/shoe connections?
03:35 < samholmes> Or more specifically, how costly is a message back and forth from client to server?
03:35 < samholmes> I was thinking of approaching my application design using RPC heavily.
03:36 < samholmes> If a user does an action, that action might use RPC to let the server know of that action, and then RPC going the other way reflecting that action back to the user/client.
03:37 < samholmes> The reason I wouldn't use callbacks in this one case, is because these actions will be non-specific to that one user. In other words, other users might be making that action, and so those will be reflected to the user as well.
03:39 < samholmes> So, my question is: How much more would it cost having two RPCs (one from client-to-server and the other server-to-client) vs having a one RPC with a callback? (talking dnode/shoe specifically)
03:47 < larz> Anyway I can mock Git calls?
03:48 < TehShrike|Work> "Hey, funny-lookin'!"
03:48 < TehShrike|Work> "Yeah, I mean you!"
03:48 < TehShrike|Work> "Quit gawkin around and make the code better!"
03:48 < TehShrike|Work> (Sorry, I don't know anything useful about your question)
04:04 < AnonymousFunctio> Hey, strange question, but is it me or is this snippet from the documentation on modules just plain wrong:  A module prefixed with './' is relative to the file calling require(). That is, circle.js must be in the same directory as foo.js for require('./circle') to find it.
04:04 < AnonymousFunctio> This is on http://nodejs.org/api/modules.html#modules_file_modules under File Modules
04:04 < AnonymousFunctio> require() only seems to care about the current working directory, which has nothing to do with the file calling require().
04:04 < AnonymousFunctio> If I try to execute my Node application from any directory other than itself, require() statements fail because they cannot find files.  All of my files are referenced from ./something
04:05 < AnonymousFunctio> (Unless of course they are a built-in module, or an NPM something)
04:06 < Sly> AnonymousFunctio, require() actually goes through `module.paths`.
04:07 < Sly> That is for things such as modules you've installed with NPM.
04:07 < AnonymousFunctio> Sly: Is that the replacement for require.paths?
04:08 < Sly> > require.paths
04:08 < Sly> Error: require.paths is removed. Use node_modules folders, or the NODE_PATH environment variable instead.
04:08 < AnonymousFunctio> I just need to include some JS that isn't a module, and isn't installed with NPM, and never will be.
04:09 < AnonymousFunctio> I don't care to use node_modules... these aren't node modules.  Is there any way to get require to follow what the documentation says, rather than the CWD?
04:09 < AnonymousFunctio> Can I add arbitrary paths to module.paths?
04:09 < TehShrike|Work> The things that you load with require() are called modules
04:09 < AnonymousFunctio> Call them what you will... I don't want to mix them up with all of the stuff installed with NPM.
04:09 < Sly> AnonymousFunctio, it would be better if we could see how your file structure is setup and how you are using require() in your files.
04:10 < TehShrike|Work> AnonymousFunctio: sure, npm doesn't have to do anything to do with you loading modules in your file system
04:10 < Sly> AnonymousFunctio, node_modules isn't *just* for NPM. It can be anything node related. That's just where NPM installs to, because it's Node's standard.
04:11 < AnonymousFunctio> Right now I have just a small handful of classes (4) in the root directory of my application, and I would like to include them from that main application.
04:11 < Sly> But again, I'd need to see your file structure and such to really help you.. because `require('./file')` should work.
04:11 < AnonymousFunctio> So, something like main.js, classA.js, classB.js, classC.js, all in / of the project
04:11 < Sly> Okay.
04:11 < TehShrike|Work> require('./that_other_file.js') is how I roll until I feel like breaking out the package.json files
04:12 < AnonymousFunctio> require(./classA.js) does work.... but only if my current working directory is that directory the app is in when running it
04:12 < AnonymousFunctio> Suppose everything is in /home/myproject... if I"m off in /var/log and I do a node /home/myproject/main.js, the application fails.
04:12 < AnonymousFunctio> The classes I'm including cannot be found because they are not in the CWD
04:12 < Sly> What Node version are you using? node -v
04:13 < AnonymousFunctio> I've had this problem with node 6 and 8
04:13 < AnonymousFunctio> let me get the specific version, 1 sec
04:13 < AnonymousFunctio> 8.6 right now
04:13 < AnonymousFunctio> This has always been an issue for me
04:13 < AnonymousFunctio> If it matters, this is on Windows
04:13 < AnonymousFunctio> It probably happens on my Linux boxes as well, let me check
04:14 < Sly> You're using it on Windows through MinGW?
04:15 < AnonymousFunctio> No, just the regular x64 build of Node for Windows
04:15 < Sly> How are your paths /var/log, then?
04:15 < AnonymousFunctio> Builds from nodejs.org
04:15 < AnonymousFunctio> They aren't, that was an example, sorry.
04:15 < Sly> Oh. Okay. I was lost for a second there.
04:15 < AnonymousFunctio> C:\something\myproject
04:15 < Sly> It's okay. I follow you now.
04:16 < Sly> It must be something to do with Windows?
04:16 < AnonymousFunctio> ok, cool
04:16 < Sly>  12:14 AM  sly@atlantis:/var/log$ node /home/sly/dev/Node/csv/test/*.js
04:16 < Sly> Parsing layout..
04:16 < Sly> Runs fine for me.
04:16 < AnonymousFunctio> Hmmm
04:16 < AnonymousFunctio> Booting up a VM now, let me take a look
04:16 < AnonymousFunctio> oh joy, fsck
04:16 < AnonymousFunctio> Ha, that one didn't get shut down correctly, one second
04:17 < Sly> Try updating Node from 0.8.6 to 0.8.8? Maybe there was a bugfix in that amount of time.
04:18 < TehShrike|Work> I run node on Windows, but I don't think I've ever tried running things from a directory other than where the file was located
04:18 < TehShrike|Work> However, all of their dependencies always load just fine
04:19 < mscdex> AnonymousFunctio: try __dirname + '/foo.js' instead of './foo.js'
04:19 <@Nexxy> or use path.resolve
04:19 < mscdex> nexxy to the rescue!
04:19 <@Nexxy> :P
04:20 < Sly> He shouldn't have to do that in order to get it to require. If it requires fine on Linux using require('./...'), it should work on Windows the same way.
04:20 < AnonymousFunctio> Ha, sorry guys!  I'm a freakin' idiot....
04:20 < AnonymousFunctio> require DOES work now...
04:20 <@Nexxy> you should do it anyway :P
04:20 < mscdex> :-)
04:20 < Sly> Still, shouldn't *have* to do it.
04:21 < Sly> should != have, we all know that.
04:21 < Sly> xD
04:21 < AnonymousFunctio> It used to fail, I got an error message almost identical to it.... thought it was the same issue
04:21 <@Nexxy> oh ok
04:21 < AnonymousFunctio> Looks like they fixed it somewhere between 0.6 and 0.8
04:21 < mscdex> dun dun dunnnn
04:21 < AnonymousFunctio> The same error pops up when I try to read my config file...
04:21 < AnonymousFunctio> I used to use require for that, and now I don't
04:21 < AnonymousFunctio> hence, my confusion and stupidity
04:21 < AnonymousFunctio> In any case, mscdex's suggestion works great.  :-D  Thanks!
04:22 < AnonymousFunctio> is __dirname always relative to the running file then?
04:22 <@Nexxy> it is
04:22 < AnonymousFunctio> cool
04:23 <@Nexxy> path.resolve(__dirname, 'whatever', 'somefile.js')
04:24 < ANONFUNCdamnwifi> Damn WiFi.... got booted
04:25 < ANONFUNCdamnwifi> Anyway, not sure if my message made it, but if you find yourselves in Chicago, I owe you a beer.
04:27 <@Nexxy> if I ended up in Chicago I would be much more lost than found.
04:27 < whomp> hi, i'm fluent in ruby, php, js, c, etc., but i have no experience with node.js. what's the best way for me to start learning the language?
04:28 < AnonymousFunctio> Nexxy: Ha, fair enough.
04:28 <@Nexxy> whomp I think that depends on your learning style
04:28 < AnonymousFunctio> whomp: Build something with it.  That's probably how you picked up your other experiences, yes?
04:28 < whomp> i like to find the best book on amazon and go through it. however, i can't find a clear "best book"
04:29 < whomp> i like to build stuff, but i can't just guess how the language works. i have to start with something
04:30 <@Nexxy> I usually start by pulling apart something I'm interested in
04:30 < AnonymousFunctio> whomp: Node is just JavaScript.  If you already know JavaScript, you already know the language.  From there, I recommend starting with the base modules built-in.  The web server example on the home page is actually a pretty good one.
04:30 < AnonymousFunctio> From there, it is easy to branch out.
04:31 < whomp> cool, thanks for the help
04:31 < whomp> one more thing, are there any especially good hosting companies for a new node.js project?
04:32 <@Nexxy> whomp, all of the node API is pretty well documented
04:32 <@Nexxy> whomp, nodejitsu
04:32 <@Nexxy> is the best
04:32 < whomp> awesome, i'll check it out. thanks guys :D
04:32 <@Nexxy> :)
04:33 < AnonymousFunctio> Nexxy: What's that site you all were linking to the other day?  Closure hell or something?
04:33 <@Nexxy> callbackhell
04:33 < Nuck> callback hell FTW
04:33 < AnonymousFunctio> Yeah, that's it
04:33 < AnonymousFunctio> Decent reading there.
04:33 < Nuck> It's my favorite Node.js pattern
04:34 < AnonymousFunctio> Why am I still on my roof?  It's freezing up here... and what happened to summer?
04:34 < AnonymousFunctio> Weather Underground says it's 70.... but with this wind, you'd think it was 30.
04:35 <@Nexxy> I wish I could get on my roof
04:35 < AnonymousFunctio> Why can't you?
04:35 <@Nexxy> I live in an apartment
04:35 < AnonymousFunctio> Ah
04:35 < AnonymousFunctio> Same here, but we've got a small patio up here.
04:36 < AnonymousFunctio> My apartment is right under it, so I get a little bit of WiFi signal up here.
04:36 <@Nexxy> neat
04:36 < AnonymousFunctio> Great view of the city... but I think they're taking away the tables and chairs next week for the winter.
04:36 < AnonymousFunctio> I've been coding up here all summer... most folks don't come up here late at night, so it's a good place to get some stuff done.
04:36 <@Nexxy> blueadept you should identify with services before you join channels :P
04:38 <@Nexxy> fancy
04:38 <@Nexxy> mde still exists!
04:38 < AnonymousFunctio> brb, moving downstairs
04:42  * AnonymousFunctio has returned
04:49 < Robdgreat> I see what you did there
04:52 < mde> Heya, Nexy. :)
04:54 <@Nexxy> hai ^-^
05:13 <@Nexxy> sure is quiet for a Friday night
05:13 < fritzy> PARTY TIME
05:17 < jerrysv> wow, ninja makes building node fun
05:18 < Nuck> Damn, prepareStackTrace is not fun to override — the Node.js REPL breaks if you don't return a string which contains the type of error
05:19 < Nuck> Apparently the REPL uses a regex to test if it's a SyntaxError
05:20 < Nuck> Well, guess I'm writing this blind
05:59 < Nuck> Finished JSON Stack Traces :D This should make error logging easy enough
06:00 < Nuck> And once I have it set to log out to MongoDB, I can query deep into it, find errors by file or even range of lines within a file
06:14 < AAA_awright> Hmm, I wonder how effective that is
06:14 < AAA_awright> Usually the only unhandled exceptions I have are the ones I intentionally throw to kill the process
06:28 < Nuck> AAA_awright: I've got my own Error system which subclasses Error and handles stack trace and everything.  It uses a pared-down version of our Artuous Tagging System, and will be JSONifiable so we can log to MongoDB :B
06:29 < AAA_awright> And also what about errors in callbacks?
06:30 < Nuck> in callbacks I use `if (err) return new Logger.err(Dafuq.Error('things',['tags','go','here']));`
06:30 < Nuck> Roughly
06:31 < Nuck> Logger is our central logging system, it can log events, errors, or anything we want.  Dafuq is our error system.
06:32 < AAA_awright> )
06:32 < AAA_awright> * :)
06:33 < Nuck> AAA_awright: So I never throw, at any point in my code (except when it might cause corruption of server state).  unhandledException catches everything else, logs it with Logger, and then kills the process.
06:34 < Nuck> Central JSON logs FTW.
06:34 < Nuck> The thought that we can query for fatal errors, HTTP errors, or even authentication errors makes it insanely awesome.  Hell, we can query for recent signups
07:11 < TehShrike|Work> Any bluegrass fans in the house?
07:37 < shalefish> how do you convert a javascript object to a string?
07:37 < shalefish> {a: "apple", b: "bear"} -> '{a: "apple", b: "bear"}'
07:38 < shalefish> sorry im new to javascript so any help would be apperciated
07:41 < billy> shalefish: JSON.stringify()
07:55 < TehShrike|Work> shalefish: billy's answer is the most obvious. What sort of string do you imagine an object turning into?
07:55 < TehShrike|Work> Some sort of JSON representation seems most obvious
07:55 < TehShrike|Work> But perhaps you imagine a more robust serialization?
07:58 < shalefish> thanks billy!
07:59 < shalefish> it worked
08:01 < TehShrike|Work> :-)
10:15 < jacobrask> Does anyone know of a module I can use in Browserify with transparent XHR/file system operations?
11:25 < Industrial> I'm trying ot get remote debugging working on a ubuntu 12.04 VPS. I have started the debugger with --debug-brk=8881 and added 8881 in the firewall. I think it has something to do with domain name resolving. if I take the small script from the node site (https://gist.github.com/e3fb6e2837d071403548) and run it on 127.0.0.1:8881 then it's not approachable by eg telnet.
11:26 < Industrial> if I run it on my <outwardfacingip>:8881 then it is.
11:26 < Industrial> I'm guessing that the script's debugger I'm trying to approach on port 1 needs to run on the outward facing ip, but I don't know how :\
11:27 < Industrial> port 8881*
11:33 < Industrial> *crickets*
11:35 < margle> does anyone here use appfog?
11:49 < AAA_awright> Industrial: As far as I'm aware, --debug-brk doesn't take any arguments
11:49 < AAA_awright> *value
11:50 < Industrial> AAA_awright: try it, though :). Couldnt get --debugger --debugger_port 8881 to work ..
11:51 < Industrial> I've changed the port in the firewall to 5858 now, the default. The problem I'm having persists. Can't get telnet (not webstorm debugging interface) to connect.
11:52 < AAA_awright> try opening a port with netcat and see if that works, If not, you have a problem outside the scope of Node.js
11:53 < Industrial> AAA_awright: if I take the example from the nodejs homepage and change 127.0.0.1 to the box's ip, it works.
11:53 < Industrial> (on that port)
11:54 < AAA_awright> On what port?
11:54 < Industrial> 5858
11:54 < AAA_awright> Alright, now try opening a port, with netcat, on 8881
11:54 < AAA_awright> Also, then what's wrong with port 5858?
11:54 < AAA_awright> Don't change it if you don't have to :p
11:54 < Industrial> yeah, i changed back already
11:54 < Industrial> :x
12:21 < mmalecki> I just found something awesome https://github.com/myhere/vim-nodejs-complete.git
12:21 < mmalecki> er, https://github.com/myhere/vim-nodejs-complete
12:23 < mmalecki> except it doesn't work >.<
12:24 < mmalecki> oh wait, it's just me being a noob
12:24 < mmalecki> wow, works. cool
12:58 < Industrial> AAA_awright: this seems to be my case: http://serverfault.com/questions/271824/node-js-is-not-accessible-from-external-ips-on-ubuntu however the script I'm trying to run is the debugger, and I don't know how to get that to listen on 0.0.0.0 instead of 127.0.0.1
13:05 < Industrial> wonder if I could just make a nodejs server that listens on 0.0.0.0:5858 nd forward it to 127.0.0.1:5859 with --debug-brk=5859
13:05 < Industrial> (the irony)
13:07 < deoxxa> Industrial: ssh tunnel, mang
13:38 < Industrial> deoxxa: sorry, but that leaves me with another half-a-day worth of searches to get THAT working. I guess I just can't do remote debugging with NodeJS.
14:12 < lowtax> lol
14:12 < lowtax> http://www.reddit.com/r/node.js
14:16 < simenbrekken> I haven't worked with binary buffers since 0.4.x something, can someone tell me the best way to accumulate binary data (a JPG image in this case) in a buffer, preferably using pipe. And yes I know I should be using streams all over but S3 doesn't support transfer-encoding: chunked so I'll have to buffer it.
14:19 < deoxxa> lol lowtax
14:41 < SirFunk> Is there some way to get assert to not kill my app to just display an error?
14:42 < lowtax> console.log ?
14:42 < lowtax> http://nodejs.org/docs/v0.3.1/api/assert.html
14:43 < lowtax> http://nodejs.org/api/stdio.html
14:44 < lowtax> http://nodemanual.org/0.8.6/nodejs_ref_guide/assert.html
14:44 < SirFunk> i get AssertionError: "" == "foobar" thrown as an error and the app exists at that point.. instead of continuing
14:45 < lowtax> ive never used asserts
14:45 < SirFunk> "If an assert method is false, the entire Node.js app crashes" ahh.. i guess that is by design then
14:45 < lowtax> but if( "" !== "foobar") console.log("%s !== %s", "", "foobar");
14:46 < lowtax> or however you want to do it
14:46 < SirFunk> yeah
14:47 < larz> SirFunk, I think you can do https://gist.github.com/3675580
14:50 < larz> Nope that doesn't work.
14:52 < SirFunk> i just used an if.. that's fine in my case
14:53 < USvER> Hi, i'm try to make TRUE  events. And wanna ask: is this a good solution to use setTimeout(/*function*/,0)
14:56 < lowtax> http://visionmedia.github.com/mocha/
14:58 < USvER> Sombody?
15:01 < mmalecki> USvER: what do you want to achieve?
15:01 < mmalecki> unwind the stack?
15:01 < mmalecki> er, lol
15:01 < mmalecki> I mean
15:02 < lowtax> https://github.com/visionmedia/nshell
15:02 < mmalecki> I'm hangover >.<
15:07 < USvER> mmalecki, hi
15:08 < USvER> mmalecki, i want to make EVENT driven sort of middleware
15:09 < USvER> mmalecki, when you emit some event that emit another event etc etc
15:09 < USvER> mmalecki, and all this chain of event dont block the app... like nodejs events do.
15:11 < USvER> mmalecki, i nead TRUE events... wich is setTimeout(/*function*/,0) will do... but i dont know is this a good choice?
15:20 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:25 < lowtax> http://lodash.com/
15:33 < RLa> lowtax, any idea why underscore includes templating?
15:39 < lowtax> RLa, ive never used underscore and never will
15:42 < mmalecki> ircretary: tell USvER to use process.nextTick - it'll execute the function in the next event loop tick. however, if the function blocks, it'll still block
15:42 < ircretary> mmalecki: I'll be sure to tell usver
15:44 < lowtax> https://github.com/visionmedia/burl/blob/master/bin/burl
15:53 < CIA-116> libuv: Bert Belder trythis * r27b11ab / src/unix/tcp.c : unix: mark accept idle handle as internal - http://git.io/EMtW_Q
15:57 < leo2007> how to redirect stdout and stderr?
16:00 < larz> leo2007, From the CLI?
16:01 < leo2007> larz: in node, I am using swank-js and all console.log messages are not redirected to emacs.
16:01 < larz> Oh nevermind I'm not sure how to do that.
16:05 < ralphholzmann> is there any way to pipe process.stdout to a file?
16:06 < ralphholzmann> pretty much this SO question
16:06 < ralphholzmann> http://stackoverflow.com/questions/9776858/how-do-i-get-a-basic-setup-of-piping-stdout-to-a-file-in-nodejs
16:11 < CIA-116> libuv: Bert Belder master * r27b11ab / src/unix/tcp.c : unix: mark accept idle handle as internal - http://git.io/EMtW_Q
16:12 < OSInet> hello. I have  a problem with NPM: I replicated the registry locally, and check it with the CouchDB console without problem. However when I go "npm install -g http://localhost:5684/registry somecomponent", npm fails with a 401 on http://localhost:5684/registry/somecomponent, although I can access this URL without a problem in a browser, with CURL, GET, wget, or just a plain telnet localhost 5684 and a manual HTTP request. Any suggestions ?
16:14 < maxogden> OSInet: set the couch logs to _debug and look in the logs
16:14 < OSInet> FWIW, I've been following the instructions from https://blog.caurea.org/2012/01/31/local-npm-registry-mirror.html
16:15 < OSInet> maxogden: ok, will look into that
16:16 < nathan7> OSInet: ?
16:16 < nathan7> OSInet: you're doing npm --registry http://localhost:5684/registry install -g somecomponent, right?
16:16 < nathan7> not the thing you gave
16:17 < nathan7> because that would try to install a package from http://localhost:5684/registry instead of using it as registry
16:20 < OSInet> indeed
16:20 < OSInet> sorry for the typo
16:23 < OSInet> oh wow, after restarting couchdb to change the log level, this now works: although there still are 401 in the npm log, the downloads actually work. weird
16:25 < OSInet> and it also works now when I set the registry in ~/.npmrc, which had also been failing since yesterday. I'd never had guessed restarting couchdb was needed. Thanks for your help
16:25 < benDos> I'm using readline, but if I redirect stdin from a file I get  " stdin must be initialized before calling setRawMode"  google is telling me that should work now.  Any suggestions?
16:30 < nkuttler> hrm, any recommendation for an orm that supports class/instance methods and can synchronous queries? using an external queue sounds like a crutch..
16:30 < nkuttler> oh, relational..
16:31 < yawnt> synchronous queries?
16:31 < yawnt> o,o
16:31 < nkuttler> well, serial
16:31 < nkuttler> and not just for a small chain of queries but on the model/schema/table level
16:32 < yawnt> could you give an example?
16:32 < yawnt> not sure if i understand what you mean
16:32 < benDos> nkuttler, anything with transactions
16:35 < vrlogrs> hi guys
16:35 < nkuttler> benDos: i might have to go down to the sql level then i guess
16:35 < benDos> nkuttler, there are plenty of nosql databases with transactions
16:35 < vrlogrs> wondering if there's a nice and easy way to do a ping/pong between node.js and client-side javascript
16:35 < vrlogrs> that's using sockets
16:35 < benDos> websockets...?
16:35 < vrlogrs> cause the date/time thing is just stupid
16:36 < benDos> nkuttler, redis i'm fairly certain does transactions
16:36 < vrlogrs> - my opinion
16:36 < nkuttler> benDos: or maybe i need to wrap my head around nosql
16:36 < vrlogrs> benDos: yah
16:36 < benDos> nkuttler, the redis docs are super easymode
16:36 < lowtax> vrlogrs, ive done that
16:36 < nkuttler> my data just looks so relational
16:36 < nkuttler> benDos: will have a look, thanks
16:36 < vrlogrs> lowtax: how?
16:36 < benDos> nkuttler, what do you mean it looks relational?
16:36 < lowtax> socket.io
16:36 < benDos> Data doesn't really look one thing or another, it's more the queries
16:36 < vrlogrs> im using sockets.io
16:37 < vrlogrs> i want to measure a ping
16:37 < benDos> And for that, there are things like solr if you can't be bothered to use a SQL but want SQL like queries
16:37 < lowtax> oh yuou want time delay?
16:37 < vrlogrs> yah
16:37 < lowtax> ok so just send unix time to one or the other
16:37 < vrlogrs> date/time thing is just stupid
16:37 < lowtax> timestamps are stupid?
16:37 < vrlogrs> with the UTC and stuff
16:38 < lowtax> you can do a full ping also, just have client respond to ping
16:38 < vrlogrs> i cant get them to work properly ..
16:38 < lowtax> and then calculate time on server
16:38 < benDos> if you are measuring round trip times with time stamps over the network you are probably doing it wrong
16:38 < vrlogrs> i calculated UTC() on server, sent that to client, which created its own UTC and compared the two
16:38 < vrlogrs> im getting horrible inaccuracies
16:38 < benDos> vrlogrs, that will 100% be incorrect
16:38 < benDos> Or as close to 100% as makes any difference
16:39 < vrlogrs> ok benDos , so how would i do it?
16:39 < benDos> From javascript, this isn't a good way to do it
16:39 < lowtax> var dateUtil = new Date(); var epochTime = parseInt(dateUtil.getTime()/1000);
16:39 < benDos> Any requests you hit end up being http or ws
16:40 < benDos> you may have some luck with ws but that's the application to application latency not actual round trip time
16:40 < benDos> ws being websockets ^
16:40 < vrlogrs> yah
16:40 < vrlogrs> so, will lowtax's way work?
16:40 < vrlogrs> no, right?
16:40 < lowtax> hmm i use seconds though
16:40 < lowtax> if you use ms
16:41 < benDos> vrlogrs, i don't see how you can make a client response to a ping
16:41 < benDos> Especially with all the NAT deployed everything
16:41 < lowtax> ...
16:41 < vrlogrs> i just want to measure the time it takes for a message to be sent from server to client
16:41 < vrlogrs> that's it
16:41 < lowtax> socket.emit({ type: 'pong', data: 'responding to ping' });
16:42 < lowtax> from server to client, then just hae the server send its epoch time (ms), subtract that from clients and have client send back latency
16:42 < lowtax> if you need it server side
16:42 < vrlogrs> i just need the ping client-side
16:42 < _ritch> is there a way to 'catch' an error in a domain.on('error') event so process doesn't emit 'uncaughtException'?
16:42 < lowtax> vrlogrs, it is pretty trivial
16:42 < benDos> vrlogrs, does it matter how accurate you are?  Or just how the latency changes over time?
16:43 < vrlogrs> here: http://www.funnode.com/chess
16:43 < vrlogrs> i just need a simple ping at the bottom
16:43 < vrlogrs> so people know how much they might 'lag'
16:44 < benDos> I think what you then want is response time, and then yes you can approximate that with js hitting the server for a request, then calculating the time between when you sent and when you received the response
16:44 < vrlogrs> accuracy doesnt matter much benDos .. just in-the-ballpark mught suffice
16:45 < vrlogrs> lowtax: ok, ill try it
16:45 < gildean> send a message from the server like "ping", have the client automatically answer to any message "ping" with "pong", mark both the sending time and the time you recieve the answer on the server and compare those two
16:47 < vrlogrs> ok, ill try it out .. thanks for the help guys
16:47 < benDos> So why does readline seem to keep having issues with redirected input?
16:48 < benDos> On the latest version readline.close does not get called when the redirected input file hits EOF
16:57 < larz> I'm making this module 'auto_npm' and it automatically publishes your NPM package when you make a commit and some other cool things.
16:58 < larz> but it's not publishing for me, i'd like to know if it works for anyone else. (:
17:00 < larz> I think it's some problem with stdin when it's printing other output or something, not something I could easily write tests for.
17:05 < vrlogrs> awesome -- fixed the ping
17:05 < vrlogrs> thanks guys
17:07 < lowtax> vrlogrs, i see that :)
17:07 < lowtax> told you it was easy
17:09 < vrlogrs> thanks lowtax
17:09 < vrlogrs> i can move on to coding other games now :)
17:10 < lowtax> you do a full ping and have the server send back the difference dont you
17:10 < lowtax> only way
17:10 < vrlogrs> im just gonna stick with this
17:10 < vrlogrs> it's what i wanted anyways
17:12 < lowtax> ah clientside, just as good
17:14 < vrlogrs> ~80 ms -- makes alot more sense now
17:18 < TimTim`> is there a way to make node files act more like "normal" javascript in the sense that every file can operate in the global scope (easily accessible to each other) and doesn't have to be a module?
17:18 < TimTim`> or should i just concatenate the files into one
17:18 < gildean> why not a module?
17:19 < nathan7> thomaschaaf: what?
17:19 < nathan7> err
17:19 < nathan7> TimTim`*
17:19 < nathan7> TimTim`: why would you want to do that?
17:19 < TimTim`> with modules if i want to pass some data from another module over, i have to make the module export a function and pass it through there right?
17:19 < nathan7> TimTim`: it encourages shitty tangles of code
17:19 < nathan7> yes, clear separation
17:19 < TimTim`> or some object
17:19 < nathan7> Yes.
17:20 < nathan7> global variables are to be used sparingly
17:20 < thomaschaaf> Hello I am getting the error that process.dlopen is not available
17:20 < TimTim`> it just seems like doing all that is a bit overkill
17:21 < nathan7> Write everything in one big, messy file
17:21 < nathan7> so everything is consistently bad code
17:21 < gildean> TimTim`: yeah, you can just require the module, and in the module export single functions with exports.functionName
17:21 < TimTim`> no my goal is not to do that
17:21 < TimTim`> i know this gildean
17:22 < TimTim`> when my code is organized hierarchically into a few dozen files and each file uses some common set of objects, it gets tiresome constantly either requiring the same thing or passing the shared objects through to each module.exports function
17:22 < mscdex> thomaschaaf: probably a bad binary addon
17:22 < gildean> then pass the objects to the whole module?
17:23 < nathan7> think well about what needs that object
17:23 < thomaschaaf> mscdex: hmm how would I fix that? recompile?
17:23 < mscdex> thomaschaaf: something is wrong code-wise
17:23 < mscdex> thomaschaaf: do you have the source somewhere?
17:24 < thomaschaaf> :( can get it to work on my mac but not a debian machine same code, same node version
17:24 < TimTim`> my idea was possibly writing everything as "normal" and then just concatenating everything into a single file to be run in production, while the development files remain separate and easy to manage
17:24 < nathan7> I think you're doing something wrong in your design
17:24 < TimTim`> i think so too
17:24 < TimTim`> which is why i'm asking
17:24 < TimTim`> i must be missing something
17:25 < TimTim`> lemme try to give an example
17:26 < cas> Hi, Does anyone has a tip for me what mvc's I need to try? I tried tower.js, but I only get errors with cake and doesn't seem to render correctly
17:28 < TimTim`> suppose i have my own set of utility functions in its own module that multiple modules will use, i would have to require that file at the top of every other module right?  and also suppose i have an instance of a redis client (e.g., redis = new (require('/home/user/node_modules/redis')).createClient()) that i want every other module to have access to, i'd have to make every module using that 
17:28 < TimTim`> into a function that accepts the redis client as a parameter, right?
17:29 < TimTim`> i'd prefer not to have so much repetition
17:29 < TimTim`> what am i missing :|
17:32 < snez> Basics of the Unix Philosophy: http://www.faqs.org/docs/artu/ch01s06.html
17:33 < TimTim`> that's fine and dandy snez but i'd like to know how to better approach the scenario i just described
17:33 < TimTim`> in node :)
17:35  * snez suddenly starts paying attention to the chatroom
17:36 < larz> cas You could try GeddyJS.
17:37 < larz> TimTim`, That's the only real way to achieve what you want. 
17:37 < TimTim`> :|
17:38 < larz> Let's say you create a module that connects all that into a single place. You'd still have to require that module so it's basically the same thing but added another set of complexity
17:39 < TimTim`> that's gonna be a lot of ugly code, i think
17:41 < larz> Yep, some things are just going to be ugly. In Go, it's common to just re-implement the function or whatever locally so you don't have to continuously import packages. But that makes it easy to leave an implementation behind another.
17:42 < TimTim`> if i write a quick program that concatenates everything in the right order (similar to how it would operate on a web page with a few scripts in a row) i think it would allow me to keep the code looking better and keep it easy to manage
17:43 < TimTim`> of course no one would care about the single generated file
17:44 < larz> What are you making?
17:44 < TimTim`> a pretty flexible api for a frontend dbms
17:45 < TimTim`> ^ long story short
17:46 < larz> Oh.
17:46 < cas> larz: checking it out, looks good thanks
17:47 < larz> cas, Welcome, It currently only supports Mongo as a DB unless you create your own adapter but we're in the process of creating a module to use that will include a bunch of different DB stores. 
17:48 < larz> cas, Also note that no-one else in the Node community likes GeddyJS so if you get into problems it's probably best to consult it's Github directly. 
17:48 < larz> cas, Also it doesn't use those silly Connect middlewares.
17:48 < lowtax> bake me a cake
17:49 < larz> lowtax, Okay it's in the oven.
17:51 < jtomasrl> is it possible to accept only https connections only when requested some path and not all of them?
17:53 < mscdex> jtomasrl: you can set up two servers and redirect from http -> https for that path
17:53 < cas> larz: hehe, thanks, connect is not my favorite but seems like to status quo. furthermore I do look MongoDB, and I looks clean in it's depedencies (e.g. no jQuery). 
17:55 < larz> cas, Yeah it definitely is.
18:02 < kuja> I'm trying to write a test for a function that accepts a stream arguments and attaches listeners to 'data' and 'end' events. What's the way to go about creating a readable stream for that purpose?
18:02 < jtomasrl> mscdex: :P
18:05 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:31 < hortinstein> i have an array as part of a document in couchdb
18:31 < hortinstein> how do i add to it with nano?
18:57 < sayd> i reinstalled node via mac homebrew and now my npm ls -g shows blank. how do i get those back or do i have to reinstall everything?
18:59 < sayd> npm root -g shows /usr/local/share/npm/lib/node_modules, but i think my old modules lived in /usr/local/lib/node_modules. which one is preferred? and is it better to move my old libs to the new dir, or change what npm root -g resolves to somehow?
19:15 < sayd> having trouble with npm. i added prefix = /usr/local/lib/node_modules in my ~/.npmrc but still seeing blank when i npm ls -g
19:17 < sayd> is there a script to relink everything? it seems what i need to do
19:20 < sayd> well, seems like link is not what i wanted. that just symlinks in my local dir. i want to get my globally installed modules back!
19:21 < sayd> npm install --link -g for all modules in node prefix -g. is there a command for that?
19:22 < Bonuspunkt> copy or move and npm rebuild?
19:23 < Bonuspunkt> wild guess
19:23 < Bonuspunkt> i have no idea :)
19:24 < sayd> hmm, never used build or rebuild
19:27 < sayd> i dont really want to install a pacakge, just let npm know that it still has packages globally 
19:32 < AntelopeSalad> general js question but probably better suited here -- does v8 and other popular js engines automatically convert certain patterns into more efficient patterns if it can? (ie. convert recursion to iteration)
19:33 < AntelopeSalad> i'm getting results on a jsperf that don't really make sense with the theory behind it
19:34 < jerrysv> AntelopeSalad: http://lanyrd.com/2012/jsconf-us/sqxbg/
19:34 < jerrysv> AntelopeSalad: that's the jsconf video of v8 optimization - worth a watch to see how v8 really optimizes behind the scenes
19:34 < jerrysv> (it was possibly my favorite technical talk at the conference)
19:34 < AntelopeSalad> thanks, but i'm seeing the same results in other browsers -- i guess something like this could be done in every engine?
19:35 < sayd> well this certainly didnt do it: for f (*) npm install --link -g -- $f
19:35 < sayd> (zsh), tried to install everything in lib/node_modules/lib
19:35 < jerrysv> AntelopeSalad: completely depends on the implementation per browser
19:36 < AntelopeSalad> jerrysv: the thing i'm wondering about is this test case: http://jsperf.com/sicp-factorials-linear-recursion-vs-iteration
19:36 < AntelopeSalad> so long story short... i'm going through the sicp books and just finished the pattern differences between linear recursion and iteration -- so i tried to apply both ways in JS , but i would have expected the recursion bench to be a lot slower based on the pattern but they are both the same almost
19:37 < jerrysv> Infinity ±0.00%
19:37 < jerrysv> AntelopeSalad: your iteration testcase gives me: 
19:38 < jerrysv> AntelopeSalad: v8 is very smart about what it unrolls, don't remember if it eliminates recursion in simple cases or not (this is a very simple case)
19:38 < AntelopeSalad> so you think it's only slightly slower because it's internally doing a "retard is using recursion, switch to iteration" check on each pass?
19:39 < jerrysv> doubtful
19:40 < jerrysv> AntelopeSalad: now i'm gettin recursion as much slower, which makes sense
19:40 < jerrysv> iteration *should* be faster, and it is for me in chrome
19:40 < AntelopeSalad> which browser are you testing with? i tried with opera and chrome
19:40 < AntelopeSalad> it is faster for me too but only slightly
19:41 < jerrysv> chrome it is faster by 32%, safari ends up with "Infinity"
19:41 < AntelopeSalad> i didn't go crazy with testing, i just fiddled it with chrome and put it up as is
19:42 < AntelopeSalad> kind of interesting because before your results were appending to the chrome bar it was much less than 32%
19:42 < AntelopeSalad> *appended
19:42 < jerrysv> i'd expect, just by looking at it, that iteration would be faster - recursive function calls === big stack
19:42 < jerrysv> and running in chrome tells me that i am right
19:42 < AntelopeSalad> yeah totally, if i understand what i'm trying to read in sicp... the recursion pattern looks like a huge callback nest
19:43 < jerrysv> you are correct
19:43 < jerrysv> you can also hit the max stack size, which would not be good :)
19:43 < AntelopeSalad> i haven't gotten that far in the book, but i'm sure they'll bring that up eventually
19:44 < AntelopeSalad> thanks
19:54 < tbourdon> Hi, there... I'm fiddling a bit with node and I'm attempting to call the querystring.stringify function but I keep getting an error.
19:54 < tbourdon> var queryParams = querystring.stringify(
19:54 < tbourdon>                   ^
19:54 < tbourdon> ReferenceError: querystring is not defined
20:00 < kennethkoontz> tbourdon: What is the value of querystring?
20:01 < tbourdon> 'OPERATION-NAME':'findItemsByKeywords'
20:02 < kennethkoontz> JSON.stringify(querystring)
20:02 < tbourdon> Thanks I'll try.
20:05 < CIA-116> node: Ben Noordhuis v0.8 * r9a3521c / (lib/http.js test/simple/test-http-1.0-keep-alive.js): http: respect HTTP/1.0 TE header - http://git.io/rX_RRg
20:06 < kennethkoontz> tbourdon: Oh i'm sorry, actually did you require query string? 
20:06 < kennethkoontz> var querystring = require('querystring');
20:08 < qballer>  will exec cb fire if the process is still runing?
20:19 < astropirate> qballer, what?
20:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:06 < oeustice> hello. having trouble installing tower.js on my mac. opened https://github.com/isaacs/npm/issues/2792. probably should have asked here first. any ideas? much thanks.
21:10 < bnoordhuis> oeustice: did you look at what's in npm-debug.log?
21:10 < oeustice> i did. not much that looked helpful, but i will post the tail...
21:12 < oeustice> posted as comment to above issue
21:12 < jmar777> any recommendations for a client-side syntax highlighter?
21:13 < bnoordhuis> oeustice: so what happens if you try that git clone command manually?
21:15 < oeustice> bnoordhuid: git: command not found. looks like my update to mountain lion may have broken me. http://www.hongkiat.com/blog/mountain-lion-git-fix/
21:15 < oeustice> i'll attempt the Xcode fix and let you know
21:15 < bnoordhuis> oeustice: cool, good luck :)
21:16 < oeustice> much thanks for the assist!  :D 
22:05 < cleos_frey> Hey, can anyone else get pcap to work with node? (npm install pcap)
22:05 < cleos_frey> I'm having a hell of a time trying to get it to work on OSX
22:20 < mansoor-s> How should one go about testing server applications?
22:20 < mansoor-s> i know thats a very broad question...
22:20 < mansoor-s> but should I be using a library like request
22:20 < mansoor-s> to test my server?
22:21 < wolfeidau> cleos_frey: Have you run the rest perms package so you can acccess BPF from a user?
22:33 < CIA-116> node: Nathan Rajlich v0.8 * rfb383a0 / (lib/util.js test/simple/test-util-inspect.js): util: make util.inspect() work when "hasOwnProperty" is overwritten - http://git.io/200bIQ
22:39 < chesles> hey guys - i'm getting an 'Illegal instruction' error compiling node on RaspberryPI following these steps: http://elsmorian.com/post/23474168753/node-js-on-raspberry-pi
22:40 < zomg> Get a real computer
22:40 < zomg> j/k, I'm sure someone knows about those but that someone is not me ;)
22:41 < chesles> zomg thanks :P
22:42 < chesles> seems like somebody on here had a node fork for pi, but i can't remember who it was
22:42 < zomg> Yeah I've seen people talk about node on pi here before
22:42 < cronopio> Im not sure but what about trying to do a cross compiling using other machine
22:42 < cronopio> zomg chesles yeah TooTallNate knows about nodejs and pi
22:43 < TooTallNate> chesles: ya try my "pi" branch, v0.8 branch has some problems
22:44 < TooTallNate> chesles: https://github.com/TooTallNate/node/compare/joyent:v0.8...TooTallNate:pi
22:44 < chesles> excellent, thanks!
22:45 < TooTallNate> chesles: also: http://n8.io/cross-compiling-nodejs-v0.8
22:46 < cronopio> TooTallNate: very nice! :D thanks!
22:46 < TooTallNate> chesles: and finally some precompiled binaries https://github.com/TooTallNate/node/downloads
22:47 < chesles> TooTallNate: you are the man
22:48 < TooTallNate> :)
22:50 < chesles> TooTallNate: I wish some of this had come up with I googled 'node.js raspberry pi' :P
22:54  * wolfeidau bookmarks TooTallNates node pi project
22:56 < wolfeidau> chesles: Blog about your successes with it so it does!
22:57 < chesles> good idea, will do :)
22:58 < thomasd> hay before i google it I would like to know if there is an application like node that's written in rino.js so it can be entirely self sufficant 
22:58 < thomasd> i want to write some cross-platform scripts
22:58 < thomasd> for file parsing and management
23:00 < thomasd> *tumbleweed*]
23:00 < fb55> thomasd: you can access the whole java environment from rhino, so there should be nothing that isn't as bloated & portable as java code
23:01 < mmalecki> node itself is cross-platform, why care about rhino?
23:01 < thomasd> i know but i want to make some javascript files that i can put on a flash drive and run on any computer
23:01 < fb55> mmalecki crapphones?
23:03 < mmalecki> fb55: I highly doubt it :)
23:03 < mmalecki> but hey, does rhino run on those?
23:03 < thomasd> could i just use a python script to detect system and have an array of node executable's for eacy system
23:07 < fb55> rhino is okay-ish. has some weird performance issues, but it's much nicer than java. maybe a browserify port should be made to make node apps compatible ("javaify")
23:08 < substack> isn't the rhino approach fundamentally incompatible with how node works?
23:08 < substack> synchronous io everywhere
23:09 < fb55> substack you can do async stuff, as java supports threads
23:09 < substack> not really
23:09 < substack> not without the thread safety dance
23:10 < fb55> substack: you only need to implement all methods again :P
23:10 < substack> and probably reasoning about multiple instruction pointers in each thread going to town manipulating state
23:10 < substack> threads are such a clusterfuck
23:11 < chesles> doesn't java have a non-blocking io api someplace?
23:11 < fb55> substack: but libuv has to take care of this, too
23:11 < substack> why not just build a c++ module to be a java bridge instead of using rhino?
23:11 < substack> sounds like much less work
23:11 < Domenic> libuv only rarely uses threads
23:13 < fb55> substack: the idea was to run node apps on rhino, to make them portable & bloated
23:16 < fb55> wasn't there some weird java framework that said to be faster than node and had some async apis?
23:16 < hillct> Good evening all. What's the state of support for multiple http headers of the same name for example I have a n http response where I need to specify multiple instances of some header'X-special-header' such that my response includes "X-special-header: firstValue' and 'X-special-header: secondValue' and for the sake of this scenario, these headers can not be combined in the way that duplicate X-* headers were, in some versions of node (not
23:16 < hillct> clear which versions that applies for either). In this case, I need to be able to specify a set of duplicate headers, and have them be delivered in the HTTP response, as distinct headers with their distinct values. Is there currently a way to make this possible? If so, in which version of Node is it possible?
23:17 < hillct> this issue https://github.com/joyent/node/issues/2750 assesses discusses some of the same problem but doesn't seem to yield a resolution
23:18 < substack> hillct: you can pass an array to setHEader()
23:19 < hillct> substack: really? Must have missed that in the docs. As of what version of Node is that possible?
23:19 < substack> res.setHeader('x-special-header', [ 'first', 'second' ])
23:20 < hillct> substack: I'll certainly implement using that approach, thanks, but what ersion dependency does that introduce for my code?
23:22 < hillct> er Version dependency
23:24 < CircleDot> I have nodejs 0.6.18 for ubuntu x64 from bitnami http://bitnami.org/stack/nodejs . I am trying to upgrade to node version 0.8.8
23:26 < CircleDot> after trying to use n to install v0.8.8 , I get error:  ./tools/gyp_node: not found 
23:28 < CircleDot> node is currently installed at /opt/bitnami/nodejs/bin
23:29 < CircleDot> how do I upgrade to the 0.8.8 version?
23:32 < larz> CircleDot, If I were you I'd check out Chris Lea's Node PPA, https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager Go down to the Ubuntu section.
23:33 < larz> I could never get Node working correctly without using the PPA, from source and things like N I could never requires packages from REPL.
23:34 < CircleDot> ok
23:47 < hp_> Is there a nodemon like tool that looks for changes in more than just coffee and js?
23:48 <@Nexxy> hp_ fs.watch
23:49 <@Nexxy> you.can watch all the things
23:49 < hp_> @Nexxy, yeah, but nodemon *uses* that, and a little bit more.
23:49 < hp_> Making it the best tool out there.
23:49 < cleos_frey> just wondering is anyone able to get node_pcap working (with `npm install pcap`?) doesn't work for me on mac (and sorry for asking this again, I logged off before)
23:50 <@Nexxy> wouldn't it depend on pcap libs?
23:51 < cleos_frey> Nexxy: I have pcap installed for sure, but it still doesn't work
23:51 <@Nexxy> hmm, sudo?
23:51 < cleos_frey> Nexxy: let me try that
23:51 <@Nexxy> gl!
23:52 < larz> hp_ You should contribute to nodemon and add support for watching other file types. Or do what Nexxy said and just use fs.watch to manage file watching then you can do anything you want on changes.
23:52 < mansoor-s> node-gyp requires python to build modules?
23:52 <@Nexxy> the infinite is possible
23:52 < larz> mansoor-s, node-gyp is writting in Python yes.
23:52 < mansoor-s> oh..
23:52 < mansoor-s> why not write it in node?
23:52 < larz> mansoor-s, https://github.com/TooTallNate/node-gyp
23:53 < mansoor-s> too much work
23:53 < mansoor-s> ?
23:53 < hp_> @larz: I was thinking of your latter option, but I was fearing that opting for that would be redundant.  Anyways, thanks.
23:53 < hp_> @larz: I mean your former. Not your latter.
23:53 < cleos_frey> Nexxy: still doesn't work, here's were it stops when running the waf file "Checking for library pcap                : not found"
23:53 < cleos_frey> Nexxy: but I have pcap.h in my /usr/include 
23:53 < mansoor-s> larz, :p joke
23:53 < larz> mansoor-s, I'm not sure why haha kind of weird though.
23:53 <@Nexxy> maybe there is some prefix hackery required
23:54 < TimTim`> hey can someone show me an example of the best way to listen to two ports for both http and https? right now i just have var get = {}, post = {}, etc. and loop through both, assigning their keys to two different express servers
23:54 <@Nexxy> I am not good with osx
23:54 < TimTim`> i saw a better way a while back but i forgot it -_-
23:55 < cleos_frey> Nexxy: haha, fair enough I'll play around some
23:55 <@Nexxy> good luck!
23:55 < cleos_frey> Nexxy: but do you have any problems when you use npm install pcap? the project seems abandoned (lots of issues, and no updates)
23:56 < mansoor-s> Since  node-bcrypt  can't be built on windows, is there an alternative to it?
23:56 <@Nexxy> I haven't.actually done that myself
23:56 < cleos_frey> just want don't want to go on a wild goose chase
23:56 < TehShrike> mmm
23:56 < TehShrike> wild geese
23:56 <@Nexxy> so much fiestier than their domestic counterparts
23:56 < cleos_frey> TehShrike: just chasing one goose!
23:57 < TehShrike> Tasty!
23:57 < larz> cleos_frey, How did you install libpcap?
23:57 <@Nexxy> timtim` look at bouncy or something
23:57 < cleos_frey> larz: port install libpcap
23:57 < cleos_frey> larz: but I also think it comes with osx
23:58 < larz> Do you know if port refreshes the caches for includes?
23:58 <@Nexxy> I use it to proxy both http and https to my apps
23:58 < cleos_frey> larz: not sure...
23:58 < TimTim`> i guess i'll just leave it how it is since it works lol -_-
23:58 < larz> try doing sudo ldconfig then attempt to reinstall
23:58 < larz> cleos_frey, ^^
23:59 < TimTim`> i'm always trying to minimize code/simplify things lol
23:59 < TimTim`> figure out better ways, etc.
23:59 <@Nexxy> prematurely optimizing?
23:59 < TimTim`> probably lmao
23:59 <@Nexxy> :P
23:59 < cleos_frey> larz: I dont have ldconfig, Im a mac-fag!
23:59 < larz> Oh wow..
23:59 < cleos_frey> larz: Im looking for an alternative
--- Log closed Sun Sep 09 00:00:33 2012
