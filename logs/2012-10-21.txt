--- Log opened Sun Oct 21 00:00:45 2012
00:09 < s5fs> jesusabdullah: excellent pidgeon analogy!
00:18 < jesusabdullah> s5fs: haha, thanks XD
00:42 < mscdex> anyone know if the node dublin talks were recorded/uploaded?
00:56 < jesusabdullah> is dublin done?
00:57 < deoxxa> nope, pretty sure dublin is still a place
00:58 < jesusabdullah> is NODEdublin done?
00:58 < jesusabdullah> AND YOU KNOW WHAT I MEAN
00:58 < deoxxa> WELL SORRRRRRRRY
00:59 < deoxxa> srsly though, no idea
01:00 < jrajav> Dublin isn't done
01:00 < jrajav> Yet
01:00 < jrajav> Muwa
01:00 < jrajav> Muwaha
01:00 < jrajav> MUWAHAHAHA
01:00 < ArxPoetica> ha
01:07 < Orbitrix> so
01:07 < Orbitrix> dart
01:07 < Orbitrix> anyone using node.dart?
01:09 < jrajav> *crickets chirping*
01:11 < Aria> node.dart, eh?
01:12 < Orbitrix> it might not exist yet lol.  i just assumed it does/will
01:13 < Orbitrix> i love node to death, and it certainly performs better than anything i've been able to pull of with python 
01:13 < Orbitrix> but i have a love/hate relationship w/ javascript
01:13 < Orbitrix> i guess i need to hop on the CoffeeScript bandwaggon now that sourcemaps are making debugging reasonable
01:15 < jrajav> node.dart doesn't make a lot of sense; dart already has an IO library
01:16 < jrajav> And a server side VM
01:16 < jrajav> http://www.dartlang.org/articles/io/#writing-web-servers gl hf
01:17 < Orbitrix> ah very good, thats the info i needed
01:23 < Orbitrix> i'm honestly more interested in learning Go than Dart
01:23 < Orbitrix> i just wonder how successful dart will be still, i just dont like javascript syntax when it comes down to it
01:23 < Orbitrix> u can get used to it no problem but why settle
01:24 < Orbitrix> if node.js didnt benchmark so well i wouldnt be idling here :P
01:26 < Orbitrix> altho i guess i havent looked at dart's stuff since this most recent release
01:26 < Orbitrix> i imagine being made by the v8 team is going to mean it'll end up at least as fast, if not faster than node.js eventually
01:27 < Orbitrix> if it gains traction...
01:28 < Aria> Heh. And vice versa for me: Dart doesn't look like the flexible, hacker language that JS is.
01:32 < mscdex> node.js rules!
01:32 < niggler> screw node.js
01:36 < Orbitrix> lol
01:41 < garbagecollectio> do people built object oriented node applications
01:41 < marshall> no
01:41 < marshall> that's php
01:41 < garbagecollectio> why
01:41 < marshall> nodejs was made for chat applications
01:41 < marshall> it doesnt need oop for that
01:42 < marshall> JUST JOEKING EVERYBODY ITS FRIDAY
01:42 < niggler> saturday
01:42 < Orbitrix> LOL
01:42 < Orbitrix> this room
01:42 < marshall> yes, you can do oop in node.js
01:42 < Orbitrix> so much more fun than #python
01:42 < Orbitrix> i hate that channel
01:42 < marshall> it's a little weird though
01:42 < niggler> you can also poop in js
01:42 < marshall> first you oop
01:43 < Orbitrix> then u poop?
01:43 < marshall> you betcha!
01:43 < jrajav> poop is a noop in js
01:43 < jrajav> but not in oop
01:43 < garbagecollectio> node.js doesn't do anything
01:43 < marshall> ok, lets sort this guy out, then continue carrying on
01:43 < jrajav> That's the strangest troll I've heard today
01:43 < jrajav> And I've heard a lot
01:44 < niggler> garbagecollectio is here to clean up the poop
01:44 < garbagecollectio> yes
01:44 < garbagecollectio> i mean why do they have streaming
01:44 < garbagecollectio> why is streaming for all data
01:44 < niggler> it was a typo
01:45 < niggler> it was supposed to be 'steaming'
01:45 < garbagecollectio> filesystem or get
01:45 < nrmnL> is there such a thing as a global event? if not can i pass a single event emitter object around and bind to it?
01:46 < marshall> okokok, garbage, look here http://howtonode.org/prototypical-inheritance
01:46 < garbagecollectio> i k os about prototype
01:46 < garbagecollectio> I'm asking about streaming
01:46 < niggler> and event shittiers
01:46 < marshall> javascript doesnt have object classes and stuff like other languages
01:46 < marshall> event reshitters
01:47 < marshall> shitter.on('shit', world.shatter);
01:47 < garbagecollectio> yeah what is that about
01:47 < garbagecollectio> emit.on
01:47 < garbagecollectio> what the hell is all that
01:47 < garbagecollectio> what is the streaming
01:47 < garbagecollectio> why is the streaming
01:47 < marshall> wellll a stream is an event emitter
01:47 < mscdex> because buffering is not a good default
01:48 < marshall> that emits events like 'data' and 'end'
01:48 < garbagecollectio> so if i use like http.get
01:49 < garbagecollectio> it fires the get method
01:49 < garbagecollectio> probably opens up a socket
01:49 < garbagecollectio> data comes back
01:49 < marshall> so if you're streaming a file from a file, you might listen for the 'data' event like so: stream.on('data', function(line){ // do stuff with the line from the file })
01:49 < garbagecollectio> i understand that
01:49 < garbagecollectio> I'm wondering how that part works
01:49 < marshall> oh fuck i dont know
01:49 < garbagecollectio> how does it know when it ends?
01:50 < marshall> im not a goddamn alchemist
01:50 < garbagecollectio> common how does it know when it ends
01:50 < mscdex> garbagecollectio: there's an EOF if it's a file and a TCP RST/FIN for network connections
01:50 < marshall> who is common?
01:50 < garbagecollectio> mscdex, RST packet?
01:50 < garbagecollectio> at the end
01:50 < marshall> yeah, pokedex has the right idea
01:50 < garbagecollectio> of a transmission?
01:51 < mscdex> when the other end disconnects
01:51 < mscdex> a FIN is usually sent
01:51 < mscdex> that's what triggers 'end' for tcp connections
01:51 < garbagecollectio> I see
01:51 < garbagecollectio> so it checks if a FIN is present in the data headers?
01:52 < garbagecollectio> i mean how is node detecting these things
01:52 < garbagecollectio> node.v8
01:52 < mscdex> well, that's done at a lower level, but more or less yeah
01:52 < mscdex> garbagecollectio: the OS tells node
01:52 < garbagecollectio> the OS tells V8
01:52 < mscdex> not v8
01:52 < niggler> garbagecollectio: it might help to review TCP
01:52 < mscdex> v8 is just the compiler/interpreter
01:52 < garbagecollectio> lol niggler
01:53 < garbagecollectio> is node compiled or intepreted
01:54 < mscdex> V8 does compilation to machine code
01:54 < mscdex> and can make changes on the fly
01:54 < garbagecollectio> so how does the javascript
01:54 < garbagecollectio> receive the FIN packet
01:54 < garbagecollectio> or like 
01:54 < garbagecollectio> how does it talk to the OS
01:55 < mscdex> "javascript" doesn't. system and library calls are used
01:55 < garbagecollectio> then how does it eventually get to the .end callback
01:56 < mscdex> os -> "polling" mechanism -> node -> your javascript program
01:56 < mscdex> when the OS receives the TCP FIN packet it notifies the "pollers" which notifies node which notifies you
01:57 < garbagecollectio> how does the polling mechanism talk to node
01:57 < mscdex> through an API
01:57 < garbagecollectio> and how does node turn that into a callback
01:57 < niggler> you have a secretary garbagecollectio ?
01:58 < garbagecollectio> yes why
01:58 < niggler> someone calls and they reach her
01:58 < niggler> and she directs the call to you
01:58 < garbagecollectio> but these are different languages ands hit
01:58 < niggler> different genders / socioeconomic status
01:58 < niggler> same concept
01:59 < garbagecollectio> there iss one weird shit in my headphones
01:59 < mscdex> garbagecollectio: when node receives an event while polling, it sends that same event up to javascript, where it emits the proper event. if it was a regular data packet, then 'data' is emitted. if it was TCP FIN, then 'end'
01:59 < nlf> oh javascript, why do you hate bit math so much
01:59 < niggler> what are you trying to do nlf 
01:59 < nlf> varint encoding and decoding
01:59 < nlf> got it working
01:59 < garbagecollectio> my headphones are playing music
02:00 < nlf> just realized that bit shifting doesn't work on very large numbers
02:00 < niggler> 32 bit
02:00 < nlf> so, wrapped it in a function and called it a day
02:00 < nlf> num * Math.pow(2, bits)
02:00 < nlf> f it
02:00 < niggler> heh yeah ran into a similar problem nlf 
02:00 < garbagecollectio> mscdex how you emit TCP events?
02:01 < deltab> nlf: why not num << bits ?
02:01 < nlf> deltab: because it doesn't work on numbers over 32 bits
02:01 < niggler> >>> 1 << 32
02:01 < purr> niggler: (number) 1
02:01 < deltab> and the Math.pow approach does?
02:01 < niggler> >>> 1 << 31
02:01 < purr> niggler: (number) -2147483648
02:01 < nlf> yup
02:02 < deltab> until you reach the limits of the float representation
02:02 < nlf> >>> 1 * Math.pow(2, 31)
02:02 < purr> nlf: (number) 2147483648
02:02 < nlf> tada
02:02 < niggler> funny story: the RNG that osx uses was designed around that constraint
02:03 < deltab> nlf: so how large can these varints get?
02:03 < nlf> big?
02:03 < garbagecollectio> how does Node emit TCP events
02:03 < nlf> i'm not sure what the max is
02:03 < nlf> i think 128 bit
02:03 < garbagecollectio> as in how does it translate the packet type to emit
02:03 < deltab> floats can't store that many bits
02:04 < Orbitrix> i bet ur mom can
02:04 < Orbitrix> (loljk)
02:04 < niggler> that's so disturbing Orbitrix 
02:04 < niggler> i was just typing that
02:04 < Orbitrix> rofl
02:05 < garbagecollectio> how does it translate packet to node
02:05 < garbagecollectio> node translate packet type to emit event
02:06 < Orbitrix> good question
02:08 < garbagecollectio> no one knows
02:08 < Orbitrix> i'd say its more the sort of thing a c or C++ chatroom might help with
02:08 < Orbitrix> its a little low level to ask here
02:08 < Orbitrix> i'm sure it uses some C library or api from v8
02:08 < deltab> nlf: 52 bits is your lot
02:09 < garbagecollectio> what do you think about comp sic interviews asking low level suestions for javascript developers and stuff
02:09 < niggler> what exactly are you asking garbagecollectio ?  how to parse a packet?
02:09 < nlf> 999999999999999 works fine
02:09 < garbagecollectio> niggler, does node parse the packet ?
02:09 < nlf> >>> Math.pow(2, 52)
02:09 < purr> nlf: (number) 4503599627370496
02:09 < garbagecollectio> each time upon coming in?
02:09 < niggler> it peeks at headers but it shouldn't be parsing the packet
02:10 < niggler> the OS tcp stack handles most of the logistics
02:10 < garbagecollectio> so every time a packet is sent
02:10 < garbagecollectio> back to node
02:10 < garbagecollectio> it is parsing it
02:10 < garbagecollectio> a simple if packet = fin
02:10 < deltab> >> var n = Math.pow(2, 53); print(n == n + 1);
02:10 < purr> deltab: undefined; Console: true
02:10 < garbagecollectio> then starts the .end event?
02:11 < niggler> you don't have to parse the whole packet
02:11 < niggler> FIN is a flacg
02:11 < niggler> like SYN and ACK
02:11 < garbagecollectio> right
02:11 < niggler> these are in the header of the packet
02:11 < garbagecollectio> so its detecting for SYN ACK and FIN
02:11 < garbagecollectio> is that what u safe saying
02:12 < garbagecollectio> inside node
02:12 < niggler> most of the logistics happen at the OS or network library level
02:15 < chovy> i got an error that req.session was undefined. how can that be?
02:16 < o_Owl> I'm just about to install node.js for the first time. Is there anything I should be knowing before going down this rabbit hole?
02:17 < niggler> o_Owl: empty your bladder -- it may take a while
02:17 < o_Owl> hehe, really :\
02:17 < o_Owl> I was reading about the nvm - is it a good way to go or should I just install it straight up from a binary (running osx)
02:18 < airtanah_> NVM is awesome on osx
02:19 < airtanah_> IMHO
02:20 < deltab> nlf: see the problem?
02:22 < niggler> screw nvm
02:22 < nlf> deltab: yes, but for my purposes 52 bit will be just fine
02:25 < deltab> ah okay then
02:35 < chovy> i want to add the ability to vote up/down...but I need to limit to one vote per user...what's the best way to handle this?
02:37 < chovy> i'm not sure what i would store.
02:38 < chovy> item.votes.push(user) works, but I don't know if they voted up or down.
02:38 < chovy> maybe i just push(user) for an upvote and pop(user) for a downvote
02:39 < niggler> chovy: you just keep track of who up voted who
02:39 < niggler> err who up voted what
02:40 < chovy> maybe item.vote_for.push(user) and item.vote_against.push(user)
02:40 < niggler> so like {"chovy":1, "niggler":-1)
02:40 < niggler> and then it becomes as simple as votes['user
02:40 < niggler> err votes['user'] = +1 or -1
02:40 < chovy> i am using mongoose though.
02:41 < deoxxa> https://github.com/deoxxa/steez#multi-target-pipe << can someone take a look at this and tell me if it makes sense?
02:41 < chovy> so what would my votes attribute look like?
02:41 < niggler> where did you say ayou were using mongoose
02:41 < chovy> i didn't
02:52 < chovy> i think I can store two attributes ina  document in mongoose. 
02:52 < chovy> like you are saying niggler 
02:58 < jden> anyone going to empirejs?
02:59 < Aria> I wish I was. I'm just over the border in MA, but can't make it.
02:59 < substack> jden: I'll be there
02:59 < substack> in ireland right now
03:00 <@mbalho> ill be at empire
03:00 <@mbalho> got into nyc a few hours ago
03:04 < jden> @substack how was/is Dublin?
03:04 < substack> jden: fun times
03:05 < jden> more nodecopter shenanigans I see
03:05 < jden> also, you totally inspired me to finally learn tmux. i'm still getting the hang of it, but it is incredibly awesome.
03:58 < Chazlings> trying to run this in terminal: curl http://npmjs.org/install.sh | sh
03:58 < Chazlings> and get this
03:58 < Chazlings> sh: line 1: syntax error near unexpected token `newline'
03:58 < Chazlings> sh: line 1: `<html>Moved: <a href="https://npmjs.org/install.sh">https://npmjs.org/install.sh</a>'
03:59 < airtanah> try it with https
03:59 < Chazlings> nice
03:59 < Chazlings> thanks
03:59 < Chazlings> got this now
03:59 < Chazlings> You are using an outdated and unsupported version of
03:59 < Chazlings> node (v0.2.4).  Please update node and try again.
03:59 < Chazlings> sorry. new to node
04:00 < Aria> Hehe. Indeed. That's really old.
04:00 < Aria> Current is 0.8.12
04:00 < Chazlings> right
04:00 < airtanah> i like nvm https://github.com/creationix/nvm
04:00 < Aria> (and current comes with npm)
04:02 < Chazlings> ok I have that installed (I think)
04:02 < Chazlings> gives me a list of commands when I run nvm -v
04:04 < airtanah> nvm install 0.8.12
04:04 < Chazlings> did that and got this
04:04 < Chazlings> nvm install 0.8.12
04:04 < Chazlings> mkdir: /bin/node-v0.8.12-darwin-x64: Permission denied
04:04 < Chazlings> Binary download failed, trying source.
04:04 < Chazlings> Additional options while compiling: 
04:04 < Chazlings> mkdir: /src: Permission denied
04:04 < Chazlings> nvm: install v0.8.12 failed!
04:04 < airtanah> what OS are you using?
04:05 < Chazlings> OSX 10.7.4
04:05 < Chazlings> xcode out of date?
04:05 < airtanah> where did you install the nvm directory?
04:05 < airtanah> i just keep it in ~/.nvm 
04:06 < Chazlings> right
04:06 < Chazlings> I did that
04:06 < airtanah> try 'source ~/.nvm/nvm.sh'
04:06 < airtanah> then see if it installs again
04:06 < airtanah> you should have permission to write to your home dir
04:07 < Chazlings> -bash: /Volumes/charlie/Users/chuck/.nvm/nvm.sh: No such file or directory
04:07 < airtanah> try cloning it again 'git clone git://github.com/creationix/nvm.git ~/.nvm'
04:09 < Chazlings> $ git clone git://github.com/creationix/nvm.git ~/.nvm
04:09 < Chazlings> Cloning into '/Volumes/charlie/Users/chuck/.nvm'...
04:09 < Chazlings> remote: Counting objects: 463, done.
04:09 < Chazlings> remote: Compressing objects: 100% (282/282), done.
04:09 < Chazlings> remote: Total 463 (delta 239), reused 384 (delta 170)
04:09 < Chazlings> Receiving objects: 100% (463/463), 63.45 KiB, done.
04:09 < Chazlings> Resolving deltas: 100% (239/239), done.
04:09 < Chazlings> chuck at Charlies-MBP-2 in ~
04:09 < Chazlings> $ nvm install 0.8.12
04:09 < Chazlings> mkdir: /bin/node-v0.8.12-darwin-x64: Permission denied
04:09 < Chazlings> Binary download failed, trying source.
04:09 < Chazlings> Additional options while compiling: 
04:09 < Chazlings> mkdir: /src: Permission denied
04:09 < Chazlings> nvm: install v0.8.12 failed!
04:10 < airtanah> after you clone it, run 'source ~/.nvm/nvm.sh' again to pick up the right nvm
04:10 < airtanah> i think it's still using the other nvm
04:14 < Chazlings> so weird
04:14 < Chazlings> I don't have nvm in my home folder but I get a ..not an empty directory when I try and run git clone
04:14 < Chazlings> nvm uninstall?
04:16 < airtanah> ls -l ~/.nvm 
04:16 < airtanah> . files are hidden usually
04:17 < airtanah> or 'ls -al ~/'
04:22  * mscdex shakes a fist at nvm
04:24 < niggler> fuck nvm
04:25 < Chazlings> still failing after I removed.. recloned and sourced it
04:27 < hemanth> meow
04:29 < hemanth> it would have been nice if phantom could emulate different browsers 
04:44 < jesusabdullah> hemanth: PROTIP testling
04:46 < bawigga> I'm using zsh, and for some reason after I do a npm install -g jshint, and then try to run jshint, i get a command not found
04:46 < bawigga> guessing its some sort of path issue?
04:47 < Aria> Yes, likely.
04:49 < bawigga> here's my NODE_PATH
04:49 < bawigga> ~/node_modules:/usr/local/lib/node_modules:/usr/local/bin/:/usr/local/lib/jsctags:${NODE_PATH}
04:50 < airtanah> what does 'which npm' give you?
04:50 < bawigga>  /usr/local/bin/npm
04:50 < Chazlings> airtanah: /Volumes/charlie/Users/chuck/local/bin/npm
04:50 < deltab> bawigga: there may be a 'hash' command you can use to reset the command lookup hashtable
04:51 < deltab> bash has one at least
04:51 < airtanah> Chazlings: is it working?
04:51 < Chazlings> nope
04:51 < Chazlings> I ran this to try and update it:
04:51 < Chazlings> npm update npm
04:51 < Chazlings> npm info it worked if it ends with ok
04:51 < Chazlings> npm info using npm@0.2.12-1
04:51 < Chazlings> npm info using node@v0.2.4
04:51 < Chazlings> npm ERR! npm@latest Error: undefined log message
04:51 < Chazlings> npm ERR! npm@latest     at log (/Volumes/charlie/Users/chuck/local/lib/node/.npm/npm/0.2.12-1/package/lib/utils/log.js:110:11)
04:51 < Chazlings> npm ERR! npm@latest     at Function.verbose (/Volumes/charlie/Users/chuck/local/lib/node/.npm/npm/0.2.12-1/package/lib/utils/log.js:56:39)
04:51 < Chazlings> npm ERR! npm@latest     at /Volumes/charlie/Users/chuck/local/lib/node/.npm/npm/0.2.12-1/package/lib/outdated.js:71:13
04:51 < Chazlings> npm ERR! npm@latest     at /Volumes/charlie/Users/chuck/local/lib/node/.npm/npm/0.2.12-1/package/lib/utils/registry/get.js:55:5
04:51 < Chazlings> npm ERR! npm@latest     at IncomingMessage.<anonymous> (/Volumes/charlie/Users/chuck/local/lib/node/.npm/npm/0.2.12-1/package/lib/utils/registry/request.js:144:14)
04:51 < Chazlings> npm ERR! npm@latest     at IncomingMessage.emit (events:41:20)
04:51 < Chazlings> npm ERR! npm@latest     at HTTPParser.onMessageComplete (http:107:23)
04:51 < Chazlings> npm ERR! npm@latest     at Client.onData [as ondata] (http:848:27)
04:51 < Orbitrix> this is an example of what pastebin or gist is for
04:52 < Orbitrix> lol
04:52 < airtanah> haha
04:52 < Chazlings> sorry
04:52 < Chazlings> https://gist.github.com/8f63de7b523fa0582acf
04:54 < bawigga> deltab: node dice
04:54 < bawigga> hah: no* dice
04:55 < airtanah> Chazlings let's find out where you got node installed... 
04:55 < airtanah> 'find / -name node -type f 2>/dev/null'
04:56 < airtanah> gist that sucka =]
04:56 < bawigga> got it: knew it was something stupid
04:57 < bawigga> needed to add /usr/local/share/npm/bin to my path
04:57 < toothrot> `npm info using node@v0.2.4`
04:57 < toothrot> heh
04:57 < toothrot> seems a little old
04:58 < toothrot> Chazlings, ^
05:01 < Chazlings> airtanah: https://gist.github.com/5eac93106ff882ae4a61
05:01 < Chazlings> thanks for helping BTW. really appreciate it
05:01 < airtanah> Chazlings so you have node installed via homebrew
05:01 < airtanah> try 'brew doctor'
05:02 < airtanah> it's pretty good at sorting out messed up systems
05:03 < Chazlings> https://gist.github.com/1b93d3cc998eaaf38602
05:06 < airtanah> honestly... feels like it should work, maybe you have a rogue npm
05:06 < airtanah> try 'find / -name npm -type f 2>/dev/null'
05:14 < Chazlings> https://gist.github.com/92791ec95c4053e90bd4
05:15 < airtanah> lol npm, not node
05:16 < airtanah> -name npm
05:16 < Chazlings> oops
05:16 < Chazlings> sorry still running
05:16 < Chazlings> that was from another terminal window
05:16 < Chazlings> old one
05:16 < Chazlings> disregard that one
05:26 < chovy> anyone using mongoose?
05:27 < chovy> i have an item object, that people can "like".
05:27 < chovy> i keep track of how many "likes" the item has, and also what items a person likes in the user object. If I delete an item, I need to cascade these deletes down into the user object.
05:28 < chovy> do I have to find all users and delete that item out of their list? This could be a very expensive operation.
05:29 < chovy> or should i just leave the "liked" item in the user.likes list even if it's been deleted.
05:30 < chovy> or if i delete an item, does the user.likes list get updated automatically.
05:30 < chovy> if it references an item id.
05:35 < Chazlings> airtanah: so the find command on the node version shows a few more installs
05:35 < Chazlings> https://gist.github.com/4b44d760b2a7510ea0e6
06:05 < airtanah> Chazlings, i gotta take off - but you may wanna try narrowing it down to just one install of node/npm
06:05 < airtanah> good luck!
06:06 < Chazlings> right on
06:06 < Chazlings> thanks man
06:27 < chovy> i'm really diggin' node.js
06:27 < chovy> makes backend fun again
06:32 < Orbitrix> i agree its fun to dive right into, super crazy fast to prototype in, lots of cool stuff with websockets, great performance.... having the same language as the client improves productivity drasticly
06:32 < Orbitrix> but i just dont see the javascript syntax scalling well for large projects that need to be maintainable for years, or decades even
06:32 < Orbitrix> i know ppl here love it, and sure its great for hackin stuff together
06:33 < Orbitrix> but it becomes a nightmare after your codebase gets large enough, idk.. just my opinion tho
06:37 < RLa> Orbitrix, why you think so
06:37 < RLa> i think modules are very easy to create in js, that's what makes it scaling to large projects
06:37 < Orbitrix> massive amounts of callbacks turn into a sloppy way to structure code, and no optional type system makes it hard to know whats going on if ur reading other peoples code
06:38 < Orbitrix> i lement the "many ways todo the same thing" nature of it too
06:38 < Orbitrix> i prefer "one right way todo everything"
06:38 < Orbitrix> ala python
06:40 < Orbitrix> nodes great tho dont get me wrong.  CoffeeScript and TypeScript exist for a reason though
06:40 < Orbitrix> javascript suxxxx for maintainability
06:41 < Orbitrix> if ur really developing "enterprise" solutions in a profesional setting
06:41 < Orbitrix> and with Source Maps being better supported in browsers, there's going to be very little excuse for people not to be using something like CoffeeScript very soon
06:43 < Zoney> can one easily compile the coffeescript code automatically?
06:43 < Orbitrix> absolutely, i use a SublimeText plugin that does it for me on save
06:43 < Orbitrix> u can set it up to be done serverside as well
06:43 < RLa> coffeescript gives you nice syntax but not types, it's typescript that gives types
06:43 < RLa> or rather type checking
06:43 < Orbitrix> true, true
06:44 < Zoney> i'd want to do it server side
06:46 < goku22> how can we convert tcp to http
06:46 < RLa> goku22, you want tcp over http?
06:46 < RLa> otherwise it's layer below
06:46 < goku22> i have a web app which is built on http
06:46 < goku22> but now i want to use multiple threads
06:47 < goku22> a server is running on one of the threads
06:47 < goku22> using child process 
06:47 < goku22> the nodejs example shows using net module
06:48 < goku22> so if the child gets a tcp server object
06:48 < goku22> is there a way to get http properties out of it
06:48 < goku22> i am not sure if i am saying this right 
06:48 < RLa> hm, why you want multiple threads?
06:49 < goku22> yeah basically i am running multiple process in one app
06:49 < RLa> cluster module won't help?
06:49 < goku22> no
06:49 < goku22> i looked into it but its not really suitable
06:49 < goku22> i want to open multiple ports
06:50 < goku22> wait
06:50 < goku22> yes
06:50 < goku22> a server should always be running on one port
06:50 < goku22> another port is used for sending requests
06:51 < RLa> hm, you need multiple processes because of high cpu tasks?
06:52 < Zoney> does anyone here know when a node app would just end? no error, no process.exit(), no nothing...just end
06:52 < Zoney> when it shouldn't
06:52 < goku22> multiple ports
06:52 < RLa> i think you can easily listen on multiple ports in the same app as well
06:53 < RLa> Zoney, i think when no more stuff in the even queue
06:53 < goku22> without forking ?
06:53 < RLa> goku22, yes
06:54 < Zoney> it's an engine.io app...should run forever
06:55 < goku22> thanks for the pointer looking into it @RLa
06:56 < RLa> goku22, just create multiple http.Server instances with same or different callback as you like and make them listen on different ports
06:56 < RLa> i'm not seeing why it should not work
06:57 < goku22> i was thinking of a different approach.. will try this one
06:58 < RLa> i would go into multi-proc madness only if you need to utilize more cpu
07:02 < goku22> yeah I think I will turn to that if the process needs it 
07:13 < chovy> Orbitrix: yeah, i'm wondering the same thing. without large classes that you can do in PHP.
07:16 < chovy> i'm thinking maybe using node.js for our mobile site
07:16 < Orbitrix> nice, yea
07:39 < owen1> are there videos from node dublin?
07:55 < chovy> how do i get the requested url with express?
07:56 < chovy> i tried req.host + req.path, but I'm missing port and protocal.
07:56 < chovy> isn't there something easier?
08:10 < jwulf> anyone know how to access a subscription in a template function in Meteor 0.5.0?
08:24 < Hotroot> I understand how to pipe output, but how would I get a back and forth between node and a CLI program?
08:25 < jwulf> Hotroot, stdin and stdout in a callback 
08:26 < jwulf> if you are starting the CLI program inside node using spawn
08:27 < sshaginyan> hey guys how do I get a stream of html from a website? without using libraries
08:28 < sshaginyan> So fs.open('google.com', 'r', function(err, fd)) ?
08:28 < sshaginyan> something like this?
08:28 < jwulf> sshaginyan, http.get
08:28 < Hotroot> I would assume you need something in the Net module at least
08:29 < jwulf> http://nodejs.org/api/http.html#http_http_get_options_callback
08:30 < jwulf> if you're scraping google.com search results
08:30 < jwulf> the last time i looked at them (around june) they were populated post-html load via ajax
08:31 < Hotroot> I find this strange
08:31 < Hotroot> "var spawn = require('child_process').spawn,     child = spawn('bad_command');"
08:32 < Hotroot> Is it 'require' ing a property of child_process?
08:33 < Hotroot> Oh, nevermind, I see, it's shorthand
08:34 < jwulf> yes, it's assigning a single function from the required file
08:34 < jwulf> to the variable spawn
08:48 < chovy> how can i stop automatic output escapeing
08:48 < chovy> in ejs
08:48 < chovy> for example "chovy's list" becomes "chovy&apos;s list"
08:55 < Orbitrix> first you have to puncture your own dickshaft and/or cervix w/ a rusty screwdriver and offer blood to the ejs gods
08:55 < Orbitrix> then its simple really
08:55 < aMoniker> or just use <%- instead of <%= iirc
08:55 < Orbitrix> exactly
08:55 < aMoniker> blood optional
09:13 < chovy> heh
09:14 < chovy> does the screwdriver *have* to be rusty?
09:14 < chovy> all these damn social networking buttons are causing my site to not load for another 10 seconds.
09:15 < FooBarWidget> I think viewing/searching logs is too painful and still sucks so I'm trying to improve it. does anybody else think that logging is too painful? please share your experiences
09:16 < chovy> FooBarWidget: tails | grep 'foo'
09:16 < chovy> tail -f ./app.log | grep 'foo'
09:16 < FooBarWidget> yeah and I think that sucks
09:16 < FooBarWidget> I have to login to the server, cd to the right folder, which always involves too much typing
09:16 < FooBarWidget> and I have to have consoles open
09:16 < FooBarWidget> I don't want to think about it and have it accessible directly
09:17 < chovy> FooBarWidget: accessible from where?
09:17 < FooBarWidget> anywhere
09:17 < FooBarWidget> my laptop
09:17 < FooBarWidget> or my phone, if I don't have my laptop with me
09:17 < FooBarWidget> or whatever involves the least number of steps while still being secure
09:18 < FooBarWidget> ideally I just want to click on a little button on the top of my screen and have it show me the most important recent logs, immediately
09:19 < chovy> well, one thing you can do is provide a web interface to your log files
09:19 < chovy> which shows the last 10 minutes
09:19 < FooBarWidget> I know. I'm trying to write such a tool, you see
09:19 < FooBarWidget> but I want to know whether other people also think it's too painful as it is
09:19 < FooBarWidget> and how they want to improve it
09:19 < FooBarWidget> and what they think is painful right now
09:20 < FooBarWidget> are you contend with the current state of things?
09:20 < chovy> well, i'm a sole developer on this project, so I'm already using command line and tailing log in another screen shell...but at work, we do the web-based thing
09:20 < chovy> all the non-techies can still tail the log file via web
09:20 < chovy> it just reloads the page every 30 seconds or at least provides a reload button.
09:21 < FooBarWidget> what web interface software do you use?
09:21 < chovy> it's just a custom one
09:21 < chovy> php script that outputs the log file and greps for CRITICAL or something.
09:21 < culturelabs> hello world
09:21 < chovy> we have a few stacks you can tail, critical, warning, and everythign else.
09:21 < chovy> QA normally just looks at critical.
09:22 < FooBarWidget> why don't you use something like graylog2, log stash, loggly or spunk?
09:22 < chovy> i didn't build it
09:22 < chovy> it was just a quick hack from the looks of it
09:23 < chovy> you can pick which servers you want to tail too.
09:23 < chovy> and which environment: ie, dev, stage, test, prod
09:24 < FooBarWidget> what also bothers me is that whenever I'm developing an app locally I have to open a terminal and tail -f the log file. would be great if there's some permanent console on my dev machine that monitors all app log files for me
09:25 < chovy> there is dmsg
09:25 < FooBarWidget> dmsg can monitor app log files?
09:25 < chovy> i don't know
09:25 < chovy> i think its lower level
09:27 < chovy> wow, in safari the social icons load in less than 1 sec, on firefox, they take about 10 seconds
09:28 < FooBarWidget> and it's not cache or something?
09:33 < SoulRaven> hello
09:33 < FooBarWidget> hi
09:34 < SoulRaven> i have a question regarding https://github.com/felixge/node-mysql/blob/master/Readme.md and Server disconnects topic
09:35 < SoulRaven> i am wonder how connection.on('error' is triggered if the error is emitted only when there is no callback waiting
09:36 < chovy> FooBarWidget: nope. ff is always slower
09:38 < SoulRaven> or connection.on('error') is trigered also when error.fatal is set?
11:55 < SoulRaven> connection.on('error', function (err) for node-mysql module
11:55 < SoulRaven> ahere is emitted?
11:56 < SoulRaven> because i have try to trrow an error, but error is not emmited at all
12:01 < nathan7> SoulRaven: if you throw() one, that goes through exception handling
12:02 < msch> is the old api ref for 0.6 still online somewhere on nodejs.org?
12:09 < SoulRaven> nathan7: i want to check from time to time the status of the connection
12:10 < SoulRaven> and also when connection drop to change a global state, to know if is connected or not
12:10 < SoulRaven> and on('error' is the best for this
14:04 < msch> hi, hey do i start the node repl in my source.
14:05 < Aria> To do what?
14:11 < astropirate> what who where when?
14:22 < temich> hello. is there anyone who can help me with my npm registry account access?
14:28 < astropirate> temich, 
14:28 < astropirate> yes
14:28 < astropirate> send me your information, name address date of birth
14:28 < astropirate> social securty
14:28 < astropirate> and bank information
14:43 < INFTG> does anyone here use the vanilla.js framework?
14:46 < SoulRaven> any solution for returning nested object or array in node-mysql
14:46 < SoulRaven> for multiple join of tables
14:46 < SoulRaven> ?
14:47 < INFTG> nope, not yet
14:47 < INFTG> nut rauch is working on it
14:47 < INFTG> but*
14:47 < nathan7> INFTG: We all do, dear.
14:47 < SoulRaven> is verry important stuff:)
14:49 < INFTG> what is node domains?
14:49 < INFTG> is it like apache vhosts?
14:51 < SoulRaven> any ideea how i can do nested obj or arr from what is returning node-mysql
14:51 < SoulRaven> ?
14:51 < SoulRaven> anyone has do this?
14:55 < gildean> INFTG: no, it's more about confining the running code
14:55 < zezikaro> Hi, i'm having a lot of problems when refactoring
14:55 < zezikaro> All of my paths are relative, like require("./../../foo")
14:55 < zezikaro> is there a way to so require(project_dir "/foo")
14:55 < zezikaro> ?
14:56 < SoulRaven> zezikaro: way you don't use package.json file to define your path to modules
14:57 < SoulRaven> and the require modules easy
14:57 < zezikaro> SoulRaven How about config though?
14:57 < zezikaro> config locations
14:57 < SoulRaven> http://package.json.nodejitsu.com/
14:58 < izhak> Hi, guys, I need a streaming interface made out of an http.ClientRequest's response, is it possible?
15:00 <@mbalho> izhak: it already is a stream http://nodejs.org/api/stream.html and also you should probably just use https://npmjs.org/package/request
15:00 < zezikaro> SoulRaven this won't help much
15:00 < zezikaro> I meant for file locations etc
15:00 < zezikaro> unless i misunderstand
15:02 < izhak> mbalho: I need to issue an http request, and read a response via streaming interface
15:02 <@mbalho> izhak: yea i know, check out the links i sent you :)
15:03 < izhak> mbalho: ok, give me a second:)
15:05 < izhak> mbalho: Cool :) Thanks)
15:11 <@Nexxy> mbalho, \o/
15:12 < zezikaro> hi does anyone know how to access javascript config files with require() without relational paths?
15:12 < zezikaro> ie is there avariable require(project_directory + "/config/main.json")
15:12 <@Nexxy> zezikaro, path.resolve
15:12 <@Nexxy> also see __dirname
15:12 < zezikaro> rather than what i do atm require("./../../../../../../../config/main.json")
15:12 < zezikaro> dirname is the current directory
15:13 < zezikaro> which gives the same problems
15:13 <@Nexxy> if you have that much directory traversal you should probably consider restructuring your app
15:13 < zezikaro> ./ === __dirname, wasn't it
15:13 < Aria> Indeed. Restructure your app.
15:13 < zezikaro> it was an example
15:13 < zezikaro> relative paths are bad anyway
15:13 <@Nexxy> __dirname and path
15:13 < Aria> Dependencies should, generally, be acyclic -- things refer to submodules, not upward.
15:13 < Aria> So inject your config:
15:14 < Aria> in the calling module, require('submodule').config(require('config/main.json'))
15:14 < SoulRaven> any plans for node-mysql to have ORM proprietes?
15:14 < Aria> SoulRaven: No, that's something another layer should do.
15:14 <@Nexxy> SoulRaven, that would be a task for a separate module
15:15 < Aria> zezikaro: As tempting as having things like 'the project root' be environmental is, just easy to conjure out of thin air, it's actually much better (For testing, later code re-use, etc) to inject those things -- have the calling module tell it explicitly.
15:15 < SoulRaven> i undestand, because i need the data pe bune returned in ORM structure, and i don't know how to do this using node-mysql
15:16 < Aria> What's "an orm structure"?
15:16 < zezikaro> Aria How is that possible?
15:16 < SoulRaven> Object-Relational-Mapper
15:16 < zezikaro> I have 'models' which connect to a webservice
15:16 < zezikaro> but they need to know the config for the webservice
15:16 < zezikaro> which is at root dir /config
15:17 < SoulRaven> Aria: think of  one-hasMany, manyHasMany, ManyHasOne
15:17 < Aria> zezikaro: Add a 'config' method to your submodule. You can even make it chainable, "return exports" in it. Make it take the json a a parameter.
15:17 < zezikaro> sorry, but submodule?
15:17 < zezikaro> what is the submodule you refer to in this?
15:17 < Aria> zezikaro: the thing further down the directory tree? That's some sort of module.
15:17 <@Nexxy> a module's module is a submodule
15:18 < airtanah_> zezikaro Aria is right, DI is good practice
15:19 < zezikaro> Should I show my code instead maybe?
15:19 < zezikaro> because i think this is backwards
15:20 < zezikaro> yeah i'll do that
15:20 < zezikaro> i'll finish this off then ask at that stage
15:20 < zezikaro> keeping with relative paths for now
15:20 < zezikaro> thanks for the help
15:21 < izhak> mbalho: It seems that's not the exact thing I need. I have a csv parser which accepts a stream as it's constructor's argument. Like this csv.createCsvStreamReader(process.openStdin()); So a need to path some stream made out of an http response to it. Can you suggest how I do it please?
15:21 < timeturn> is it normal practice to hash or serialize socket.io messages?
15:21 < timeturn> for security
15:21 < Aria> zezikaro: https://gist.github.com/3927254
15:22 <@Nexxy> izhak, request supports streaming responses
15:22 < Aria> izhak: csv.createCsvStreamReader(req) doesn't work?
15:22 < Aria> er, response, not req.
15:23 < Aria> Sorry, was thinking server-side.
15:23 < Aria> timeturn: Security of what?
15:23 < izhak> Nexxy: Aria: Yes, I'm talking about an http request made from node server
15:23 < zezikaro> Aria are these singletons?
15:23 <@Nexxy> request(...).pipe(csv.createCsvStreamReader(...))
15:24 < zezikaro> so if i import and config in one place, will that change apply to everywhere?
15:24 < timeturn> security to ensure messages haven't been tampered with
15:24 < timeturn> on top of validations
15:24 < airtanah_> timeturn how about SSL
15:24 < Aria> zezikaro: Depends on how you set up your modules, but yes, the way I just demonstrated is global -- you pass the config in to each module that needs it. It's the same just by virtue of being the same object each time.
15:24 < izhak> Nexxy: no no:). I'm issuing an http request and getting csv from it, so i need to pass it somehow to csv modules stream reader
15:24 < timeturn> yeah on top of ssl
15:25 <@Nexxy> izhak, one of us isn't understanding the other
15:25 < Aria> timeturn: Ah, sign, not hash. No, that's uncommon. What attacks are you trying to prevent?
15:25 < Aria> timeturn: What's the threat model?
15:25 < airtanah_> timeturn if your SSL is setup properly, your messages cannot be tampered with
15:25 <@Nexxy> izhak, if you are receiving csv from a response, you should be able to pipe it to your stream reader
15:25 < timeturn> yeah that's what I was thinking
15:25 < zezikaro> Aria hmm okay thanks
15:26 < timeturn> ssl should be enough yeah
15:26 < Aria> izhak: If the csv module accepts a readable stream directly, csv.createCsvStreamReader(response); if it's a writable stream, then response.pipe(csv.createCsvStreamReader())
15:26 < timeturn> thanks guys
15:26 < zezikaro> Aria that wasn't my initial question tbh, but it does actually allow me to elimiate my problem completely
15:26 < zezikaro> which is nice
15:26 < zezikaro> :)
15:26 < zezikaro> thanks
15:26 < airtanah_> timeturn just make sure to use a proper certificate - i.e. not self-signed
15:26 < Aria> zezikaro: Hehe, yeah. The short answer to your question is "don't, that way lies madness"
15:26 < Aria> timeturn: Or if you do use self-signed, cache the fingerprint like SSH does.
15:27 < Aria> timeturn: A good practice for thinking about security questions is to think of a threat model. Don't defend against 'some attack somehow', think about how it'd be exploited, and whether it's worth defending those cases. 
15:28 < airtanah_> also even good crypto algorithms have issues, it's best not to try DIY encryption
15:28 < Aria> timeturn: And think of the standard few obvious threats: brute force guessing of something, man in the middle, replay attack, and blind injection attack. That covers most network-level stuff.
15:28 < izhak> Aria, are you talking about native ClientRequest's reponse?
15:29 < airtanah_> we thought one-time pad is invulnerable, but WEP screwed it up
15:29 < izhak> Aria, csv.createCsvStreamReader(response); <- this doesn't seem to work..
15:29 < Aria> izhak: Yeah, the http module's response object. The one the callback gives you.
15:29 < Aria> izhak: Can you gist a few lines of context?
15:30 < izhak> Aria:  yeah just a second
15:31 <@mbalho> izhak: require('csv')().fromStream(require('request')('http://mycsv.com'))
15:31 <@mbalho> izhak: you should read the request readme that i linked to you 
15:32 < izhak> Here it is: https://gist.github.com/3927282
15:32 < izhak> mbalho: oh thanks, let me try it.
15:33 < syskk> chovy: you're also chovy on stackoverflow? answered ur question :o
15:34 <@Nexxy> what kind laptop I should buy.
15:35 <@Nexxy> is an MBA suitable as a primary device?
15:35 <@mbalho> izhak: m.http.request returns a stream, you shouldnt pass a callback to m.htt.request
15:35 < Aria> Ah, indeed. I was thinking of the lower level API.
15:44 < izhak> mbalho: Can you pls look at this https://gist.github.com/3927301 , what am i doing wrong?
15:44 < timeturn> Nexxy: definitely go for the MB air. It's awesome.
15:45 <@Nexxy> timeturn, I'm kind of trying to decide between 13" MBA and MBP
15:45 <@mbalho> izhak: that looks correct to me
15:46 < Aria> Nexxy: I'm on a 13" macbook air. It's my only computer. It's excellent.
15:46 < timeturn> 13" MBA. I have a MBP and honestly it's too heavy to code with in my lap. I basically have to use it on a desk.
15:46 < syskk> im on a 13 MBA.. very happy
15:46 < izhak> mbalho: In neither case it works.. (commented also).. Maybe that csv lib is not understood correct by me.
15:46 < syskk> good weight, fast enough
15:47 < Aria> Nexxy: If there was a 13" retina display, I'd be all over it. Since there's not, this is what I use.
15:47 <@Nexxy> yeah I was looking @ retina models but
15:47 < timeturn> 13" MBA is definitely the way to go
15:47 <@Nexxy> I can't really justify another grand just for more pixel density
15:47 < Aria> Nexxy: Having an SSD is really what matters to me. All other performance concerns pale in comparison for me.
15:47 < timeturn> yeah I'm waiting for a retina display as well
15:47 <@Nexxy> Aria, thanks, good input :)
15:48 <@mbalho> require('csv')().fromStream(require('request')('http://mycsv.com')).on('data', function(line){ console.log(line) })
15:48 <@mbalho> izhak: do that o/
15:48 < timeturn> but it's going to cost more too
15:48 <@mbalho> izhak: you have to npm install csv and npm install request first though
15:48 < Aria> Nexxy: I have a high-end non-retina 15" pro at work. The air at home is often faster because of the SSD.
15:51 <@Nexxy> Aria, yeah good call on the SSD
15:51 <@Nexxy> definitely will end up with one either way
15:51 < Aria> And the air is light enough that I never don't take it with me.
16:02 < owen1> are there videos of nodedublin?
16:04 <@mbalho> yes
16:06 < owen1> mbalho: can u share the link?
16:06 <@mbalho> they arent online. videos take time to post process
16:07 < owen1> mbalho: yeah - https://twitter.com/NodeDublin/status/259621925100335104
16:07 < owen1> the topics looks amazing. here is the slides from isaacs's - http://blog.izs.me/post/33829864983
16:08 < izhak> mbalho: excellent, thank you!
16:15 < sinclair> anyone here using TypeScript yet?
16:15 < airtanah_> do i have to re-write all my code to use TypeScript?
16:16 < sinclair> airtanah_: no
16:16 < sinclair> airtanah_: you can write a declaration file that act's as a .h file to your existing code
16:17 < airtanah_> i do miss typechecking when using js
16:17 < sinclair> TS is kinda awesome
16:18 < qbit> is there a way to make node's gyp take CFLAGS like vars from env? 
16:19 < qbit> without adding it to binding.gyp? 
16:19 < TooTallNate> qbit: you mean you want to define flags in your gyp file? or you want to specify them on the command line?
16:19 < qbit> i want to add them from the command line 
16:20 < qbit> like .. export CPPFLAGS=bllablablablabl; npm install noe-expat
16:20 < TooTallNate> qbit: ok, then you can just do `CFLAGS+="-blah" CXXFLAGS+="-blah" npm install node-expat`
16:20 < qbit> hm
16:21 < qbit> TooTallNate: it doesn't seem to pick it up
16:22 < TooTallNate> kref.o.d.raw -blah -c -o Release/obj.targ
16:22 < TooTallNate> works for me
16:22 < TooTallNate> qbit: what OS?
16:23 < qbit> openbsd
16:23 < TooTallNate> hmm, i would think it should still work
16:24 < TooTallNate> qbit: if you copy and paste the command I posted above, what happens?
16:24 < TooTallNate> it error for me saying -blah isn't an option
16:24 < TooTallNate> so you should get that too
16:25 < qbit> hm
16:25 < qbit> look like it actually is adding it 
16:25 < qbit> just not in all the places i would think it is needed :P 
16:25 < qbit> node -o Release/obj.target/node_expat.node -Wl,--start-group Release/obj.target/node_expat/node-expat.o Release/obj.target/deps/libexpat/libexpat.node -Wl,--end-group -lz -lv8 -L/usr/lib -lssl -lcrypto
16:26 < qbit> ^ should have -L/usr/local/lib as well
16:26 < qbit> g++ '-D_LARGEFILE_SOURCE' '-D_FILE_OFFSET_BITS=64' -I/home/qbit/.node-gyp/0.8.11/src -I/home/qbit/.node-gyp/0.8.11/deps/uv/include -I/home/qbit/.node-gyp/0.8.11/deps/v8/include -I../deps/libexpat -I../deps/libexpat/lib  -I/usr/include -fPIC -Wall -pthread -m64 -O2 -fno-strict-aliasing -fno-tree-vrp -fno-tree-sink -fno-rtti -fno-exceptions -MMD -MF ./Release/.deps/Release/obj.target/node_expat/node-expat.o.d.raw -L/usr/local/lib -c -o Release/obj.target/node_expat/node
16:26 < qbit> ^^ that one picked it up
16:27 < qbit> TooTallNate: is there a NODEFLAGS :P ?
16:27 < TooTallNate> qbit: for that you want LDFLAGS I think
16:28 < TooTallNate> that's the linker phase
16:28 < qbit> wewhew! that did it 
16:28 < qbit> awesome 
16:28 < qbit> thanks
16:28 < TooTallNate> qbit: sweet :)
16:33 < antidau> TooTallNate: hi, i have some issues again
16:33 < TooTallNate> antidau: sup?
16:34 < Industrial> How do I check for file adds/deletes? fs.watch(dir, ...) ?
16:34 < antidau> TooTallNate: this error has popped up again: node: ../src/node_object_wrap.h:60: static T* node::ObjectWrap::Unwrap(v8::Handle<v8::Object>) [with T = node::Buffer]: Assertion `!handle.IsEmpty()' failed.
16:35 < qbit> anyone have node running with v8 > 3.11 ? 
16:35 < TooTallNate> antidau: in general, that's gonna happen if you pass something other than a Buffer to a function that requires a Buffer
16:35 < TooTallNate> antidau: but have you narrowed it down to where that's happening?
16:37 < antidau> TooTallNate: it's either inside the function to get pcm data from despotify or in the callback function that is called by it.
16:37 < antidau> TooTallNate: i call it in a loop and it crashes after the 5th time or so
16:38 < antidau> TooTallNate: code is at https://github.com/antidau/node-despotify/blob/master/despotify.js
16:38 < nathan7> antidau: <3
16:40 < antidau> nathan7: ?
16:40 < nathan7> antidau: You're building cool stuff
16:41 < antidau> nathan7: thanks
16:41 < nathan7> it'd be awesome if we could hook into libspotify itself though
16:41 < nathan7> libdespotify is somewhat limited
16:41 < nathan7> and I played with the despotify CLI client and it kept crashing
16:41 < TooTallNate> antidau: if I were to guess, I'd say it's in your callback
16:42 < nathan7> oh hey
16:42 < nathan7> leidseplein
16:42 < nathan7> ->
16:42 < TooTallNate> antidau: like don't you want to deref on this line? https://github.com/antidau/node-despotify/blob/master/despotify.js#L11
16:42 < antidau> nathan7: yeah, i got some random crashes too
16:44 < nathan7> My hope is that libspotify sucks less
16:44 < nathan7> And I'd be able to hook into the palaylist stuff tand things
16:44 < nathan7> *playlist
16:45 < TooTallNate> i think the fact that you can get the raw PCM data from them is pretty crazy
16:45 < TooTallNate> what's stopping you from just dumping their entire library?
16:46 < antidau> TooTallNate: i built a wrapper around ffi to get rid of all the refs and derefs, but it seems that i didnt convert this file completely as there is one two lines earlier
16:47 < nathan7> TooTallNate: Not much
16:48 < nathan7> TooTallNate: Mostly time
16:48 < nathan7> TooTallNate: And the fact that you can download it all at much higher quality
16:48 < mscdex> compile it with emscripten! ;-D
16:48 < TooTallNate> antidau: its hard to narrow it down just by looking at the code, but my advice is to add lots of logging…
16:48 < nathan7> mscdex: ?
16:48 < TooTallNate> nathan7: oh, do you only get the raw data in real time?
16:48 < nathan7> TooTallNate: And a bit of buffer presumably
16:49 < TooTallNate> right, right, makes sense
16:49 < bogomips> hello, someone use redis on node, i've a litte dubt...
16:49 < mscdex> nathan7: emscripten lets you compiles C to LLVM to JavaScript hehe
16:49 < nathan7> TooTallNate: I share my spotify account with a classmate so that we can listen to music on his iPod Touch
16:49 < nathan7> TooTallNate: as soon as I start listening to music on my phone it stops for him
16:49 < nathan7> TooTallNate: and vice versa
16:50 < TooTallNate> nathan7: ya, that's one of spotify's limitations
16:50 < nathan7> TooTallNate: approximately within one buffer-size of each other
16:50 < TooTallNate> oh, haha, nice detective work
16:50 < nathan7> so you can only have one stream going
16:50 < nathan7> *but*
16:51 < nathan7> He tried despotify with his account and it seems to work on free accounts
16:51 < nathan7> So the only thing stopping you is probably your lack of IP addresses and perhaps a captcha
16:52 < itzmjauz_> nathan7: nah it automatically started a 48 premium trial.
16:52 < itzmjauz_> nathan7: 48 premium = 48 hours.
16:52 < nathan7> itzmjauz_: Oh, damn.
16:52 < nathan7> itzmjauz_: So it doesn't work anymore now?
16:52 < nathan7> Then again
16:52 < nathan7> You could just make accounts programatically
16:53 < itzmjauz_> itzmjauz_: Haven't tried yet.
16:53 < nathan7> and stream 48 hours of music per account
16:54 < antidau> TooTallNate: it's my callback, but i haven't yet figured out why
16:55 < TooTallNate> yet ;)
16:55 < TooTallNate> antidau: i have faith :)
16:55 < nathan7> Hook up gdb to it
16:56 < TooTallNate> ya that could help
17:00 < antidau> TooTallNate: i figured it out
17:01 < TooTallNate> antidau: i'm curious :)
17:03 < TooTallNate> antidau: it's probably something that I can make throw in the future, which would make debugging easier
17:03 < TooTallNate> antidau: i just need to know what/where it was :)
17:04 < antidau> TooTallNate: ok it's really weird
17:04 < antidau> console.log(foooooo.baar);
17:04 < antidau> fooooooo is undefined
17:04 < TooTallNate> uhhhhh wut?
17:06 < antidau> TooTallNate: if you throw errors in a callback, it crashes
17:07 < TooTallNate> antidau: well it should throw an uncaught exception, but if you're getting that assertion error then that's bad
17:07 < antidau> TooTallNate: throw new Error(''); inside the callback produces the exact same message
17:10 < TooTallNate> antidau: ok i'll do some testing, thanks
17:11 < ben_hall> hi, I'm looking to extract various helper classes in my projects via a npm - is it better to publish onto the registry with a prefix (to get around potential name clashes) or just point my package.json to my github master?
17:12 < nathan7> ben_hall: if it's privateish then point at github
17:13 < ben_hall> nathan7: Thanks, just wanted to check to see what everyone else did :)
17:14 < TooTallNate> antidau: you're using the latest version of ffi right? v1.2.0?
17:15 < antidau> TooTallNate: yeah, just checked again
17:15 < flybyme> is anyone having problems installing Calipso on node v0.8.x?
17:15 < TooTallNate> antidau: damn… i can't seem to reproduce: https://gist.github.com/3927661
17:15 < TooTallNate> (that test depends on the node-ffi test bindings)
17:24 < antidau> TooTallNate: can't reproduce with your test either
17:25 < TooTallNate> antidau: if you run into it again, it'd be nice to get a gdb stack trace from it
17:26 < antidau> TooTallNate: I'll have to admit, i have never used gdb before. how do i generate one?
17:27 < TooTallNate> antidau: basically: `gdb --args node script.js`, wait for crash, then type "bt full" and post the results online
17:30 < antidau> TooTallNate: http://fpaste.org/BRtZ/
17:32 < zezikaro> Hi does anyone know how to attach a debugger to nodejs?
17:32 < TooTallNate> antidau: can you try recompiling node-ffi with --debug?
17:32 < zezikaro> i find that I can attach one in webstorm when I fire the application from webstorm; but i'd like to attach webstorm to 'npm test'
17:32 < zezikaro> where npm test runs mocha
17:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:34 < flybyme> I cant seem to install node-expat on node v0.8.10 any help?
17:35 < TooTallNate> flybyme: need more info than that
17:36 < flybyme> this is the error log from npm https://gist.github.com/3927712
17:37 < antidau> TooTallNate: http://fpaste.org/nCGZ/
17:39 < flybyme> node-expat@1.4.5 does not build but node-expat@2.0.0  does
17:39 < TooTallNate> antidau: hmmm, strange.. and what's thee assert error again?
17:40 < flybyme> someone needs to update the npm
17:40 < TooTallNate> flybyme: sounds like someone needs to update their package.json ;)
17:40 < antidau> TooTallNate: node: ../src/node_object_wrap.h:60: static T* node::ObjectWrap::Unwrap(v8::Handle<v8::Object>) [with T = node::Buffer]: Assertion `!handle.IsEmpty()' failed.
17:43 < TooTallNate> antidau: i mean that's really bizarre… for some reason new Buffer() is returning a bad handle
17:43 < TooTallNate> i'm not sure what would cause that
17:43 < TooTallNate> maybe you're running out of memory?
17:43 < TooTallNate> do you have an "uncaughtException" listener?
17:44 < antidau> TooTallNate: 150MB memory free, no listener
17:45 < TooTallNate> what version of node?
17:45 < antidau> TooTallNate: v0.8.9
18:10 < tankpilot> hi all. does nvm install node-waf?
18:11 < tankpilot> ?
18:14 < othiym23> tankpilot: node-waf is part of the core Node distro, not of npm (which is also part of the node core distro for Node > 0.6)
18:15 < tankpilot> othiym23: I wrote "nvm" not npm
18:16 < `3rdEden> What could be a potential cause of 100% CPU when piping to a stream ._.?
18:23 < ksmth> hey guys - has anyone tried grunt?
18:23 < ksmth> well, anyone in here, that is. ;) 
18:26 < othiym23> tankpilot: you right, answer remains the same ;)
18:26 < othiym23> node-waf and node-gyp are part of the core node command set
18:27 < othiym23> oops node-gyp gets bundled with binary addons, not node itself
18:38 < owen1> i am inspired by issacs's talk (http://blog.izs.me/post/33829864983/escaping-captivity-social-apes-making-software-in-the) and looking for anarchy-related videos. any ideas?
18:46 < Aartsie> what is a great nodejs editor on mac ?
18:47 < Sly> I would suggest TextMate, but I'm also not a Mac user.. and it's also a paid app.
18:49 < othiym23> Aartsie: I use MacVim, a lot of people like Sublime Text 2 (but others hate its configuration format)
18:49 < Sly> Oh yeah, that's right. I forgot Sublime worked on Mac.
18:51 < Aria> TextMate 2 is GPL.
18:57 < flybyme> has anyone used calipso?
18:58 < garbagegod> IMO ST2 is the best text editor for OSX
18:58 < `3rdEden> The best editor is vi
18:58 < garbagegod> I'm a vim guy though
18:58 < tilleps> does vi have autocomplete?
18:58 < garbagegod> ST2 has a 'classic' mode I believe with VI mode
18:58 < `3rdEden> tilleps: yes
18:58 < TheFuzzball> Is there a way to get the MAC address of the computer making a request of the HTTP server?
18:59 < TheFuzzball> I can get the remote IP with req.connection.remoteAddress, but there's nothing in the Net documentation for MAC address.
19:00 < tilleps> neat, autocomplete in vi: ctrl p 
19:00 < garbagegod> I didn't even know about that 
19:01 < garbagegod> http://www.operatorchan.org/k/src/134791715663.jpg
19:29 < SoulRaven>  anyone knows any ORM good module for mysql?
19:29 < SoulRaven> i want something that is easy to use and stable
19:29 < SoulRaven> i have try node-mysql, but has not any ORM fetaure, and is hard to work when i have tables with relationship between them
19:34 < Aria> What's the actual task at hand?
19:34 < Aria> ORM isn't always the right answer.
19:35 < Aria> There's sorm, though, and SenseOrm, and rdx, and orm, and norm and .. really, search 'orm' in npm
19:35 < SoulRaven> i have multiple tables that are related and i want to get all the date at once, for populating a pool with that data, for future reading from that pool, to prevent async behaivor of mysql query
19:36 < SoulRaven> so the best option is to have a nested tree like respons from the mysql query, like any other MVC framework
19:36 < Aria> There's no such thing. It's always multiple queries to MySQL.
19:37 < SoulRaven> i am working on a AVL data parser, and for this i need a little spacial demands
19:37 < Aria> AVL?
19:37 < Aria> (Also, why avoid asynchronicity?)
19:38 < SoulRaven> because i have many paralel connection in the same time, and each connection must be decoded, buffered, sync and ther save in DB
19:38 < SoulRaven> so if i have a pool, for cheking the connection, i avoid calling the DB and wait for the respons each time
19:40 < ack006> hi all, i posted to nodejs google group but my post doesn't show up (it does in 'recently posted to' sidebar). is this group moderated or something?
19:40 < Aria> Is it caching, or is there a reason to prefetch?
19:40 < Aria> (It doesn't sound like that's a reason to avoid asynchronicity, just to avoid needless queries)
19:40 < SoulRaven> both
19:41 < Aria> I'm just not seeing the reason to avoid asynchronicity.
19:41 < SoulRaven> if i have a pool with all the data i need, is easy to check that pool
19:41 < Aria> Sure, if you can store it all.
19:41 < Aria> ('course, then, why not just store a big json file and load it?)
19:41 < Aria> (no database needed!)
19:42 < SoulRaven> the AVL devices, send data in timestamp order, and if i use async solution, the data will be not synced when i will ty to calculate the odometer and put in order in DB
19:43 < SoulRaven> so i have to paid check the devices from a pool, confirm the data to device, and after that wait for incoming data
19:43 < Aria> Why not? Async does not imply out of order. You just have to control for order.
19:44 < SoulRaven> if i use the pool, is more easy to me, and also more speedy
19:45 < SoulRaven> also async will be used when i have to save the data in DB after all the cooking, reverse geocoding, odometer calcualtion, sensor interprtation, alerts, etc
19:46 < SoulRaven> but if i have a pool, with the confirmation data and posibile alerts and sensor active from DB, the cheking will be more fast and easy to do
19:46 < SoulRaven> the app is intented to be in production for 200+ AVL devices in the same time
19:48 < domo__> hello
19:48 < Aria> That doesn't seem like a large pool.
19:48 < SoulRaven> for startes yes, is not
19:48 < domo__> is it possible to have http.createServer listen on a unix socket?
19:48 < domo__> if so, how can I connect to it using http request?
19:49 < SoulRaven> but still, way i will not make as fast as posibile now
19:49 < abbey> what is this?
19:49 < SoulRaven> and the pool, is fastest, is from memory
20:00 < jtomasrl> why when using findAndModify (mongodb) the whole document get replaced? how can i change only some values?
20:42 < Stephen> Identify uocitp
20:43 < Stephen> Fuck
20:45 < stephen> Anyone home?
20:47 < stephen> Blah cool stuff with API blag
20:51 < nmartin> is there a post commit hook available for github/npmjs.org so that when I commit code to github It will trigger some sort of push from github -> npmjs.org, keeping my app in npm up to date?
20:55 < MI6> joyent/libuv: Ben Noordhuis master * 775064a : linux: use /proc/cpuinfo for CPU frequency  Obtain the CPU frequency from - http://git.io/8PQGAg
20:59 < nmartin> MI6: Yes, just like that :)
21:00 < Sonderblade> what node orm is best?
21:01 < deoxxa> no orm
21:03 < owen1> Sonderblade: https://github.com/mongodb/node-mongodb-native
21:03 < Sonderblade> node-orm has very lacking documentation
21:03 < owen1> Sonderblade: if u stuck feel free to ask here
21:05 < Sonderblade> owen1: well i cant even figure out how to define fk's with it
21:06 < Sonderblade> jugglingdb appears much better documented
21:06 < stephen> Mongodb-native is likely your best bet. Takes a little reading, but lacks nothing
21:06 < stephen> Jugglingdb? New to me.
21:07 < Sonderblade> except im not using mongodb
21:09 < deoxxa> Sonderblade: protip - learn SQL and do this stuff yourself
21:09 < deoxxa> i mean how often do you really need to create/destroy your entire database structure anyway
21:10 < deoxxa> why do you need something that will try to figure out what the optimal schema is (when it will get it wrong anyway)
21:10 < Sonderblade> that's not what an orm does
21:10 < deoxxa> it's what you're saying it does
21:10 < deoxxa> "define fk's with it"
21:11 < deoxxa> you don't need to "define" foriegn keys except at table creation time
21:11 < deoxxa> sooooo
21:11  * deoxxa waits
21:12 < Sonderblade> you seem to be trolling so i will stop
21:12 < deoxxa> ah that's right
21:12 < deoxxa> having a differing opinion to someone is called "trolling" now
21:13 < stephen> ORMs save datalayer writing time
21:14 < deoxxa> at the start, yes
21:14 < deoxxa> then once you need to pull the thing out due to woeful performance, you waste days/weeks on it
21:14 < stephen> But sacrifice DB to app overhead
21:14 < MI6> joyent/node: Ben Noordhuis master * d0227b0 : Merge remote-tracking branch 'origin/v0.8'  Conflicts: 	deps/openssl/open (+6 more commits) - http://git.io/6h8anQ
21:15 < stephen> Its give and take. Earnestly some things index better in document/is based dbs
21:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:17 < stephen> Cmon though, the lure of 1language, all layers. Its a big thing.
21:26 < stephen> And quiet...
21:26 < stephen> Has anyone here used node-extension?
21:29 < jtomasrl> how can i find an object inside an array with an specific value on a mongodb collection
21:32 < deoxxa> jtomasrl: 1) #mongodb is -> over there, 2) db.collection.find({field: "value"}) where "field" is ["value", "something", "else"]
21:34 < stephen> HTTP://www.mongodb.org/ they have great docs
21:39 < Aria> Et voila. https://github.com/aredridel/require-reload
21:40 < Aria> I think that's just clever enough a hack to be able to work on an express app and only rarely restart the server.
21:42 < Aria> And on that note, I've finally forgiven express 3 for moving layouts and partials into being purely an artifact of the view layer.
21:46 < stephen> .. so you are now updating the underlying file instead of binding?
21:46 < stephen> Aria, am I getting this right?
21:47 < Aria> In the require-reload?
21:47 < stephen> Yeah
21:47 < stephen> Er, is that how you are using it
21:47 < Aria> It uncaches the module from require, then reloads it, then copies properties from the new copy onto the old one, so that things that had a reference to the old one get the new reference.
21:47 <@Nexxy> Aria, mmalecki mbalho et al., mba obtained. thanks for your recommendations :)
21:48 <@Nexxy> now how do I pgup/pgdn
21:48 <@Nexxy> lol
21:48 < Aria> Nexxy: function-up and down
21:48 <@Nexxy> ohh ty
21:48 <@Nexxy> also alt and cmd are totally swapped
21:48 <@Nexxy> :@
21:48 < Aria> Yep.
21:48 <@Nexxy> that will take some getting used to
21:48 <@Nexxy> lol
21:49 < Aria> stephen: And it wraps functions so that if the referenced function changes, it calls the new one. Which is the bit that makes it good enough for express.
21:49 < stephen> oic, you have binding methods running in partials and layouts on load.
21:49 < stephen> This forces the data to update each time
21:49 < stephen> Good work around
21:50 <@Nexxy> Aria, is there a better terminal app?
21:50 < Aria> Nexxy: I prefer iTerm2.
21:51 < Aria> (I use it full-screen, with two split panes)
21:51 <@Nexxy> yeah I have the std term full screen but I don't know how to turn it back now
21:51 < stephen> What flavor you running?
21:51 < Aria> Nexxy: Upper right of the screen, the menu bar will drop down. The blue thing brings it back from full screen.
21:52 <@Nexxy> weee
21:52 <@Nexxy> thank you <3
21:52 < Aria> Sure thing.
21:52 < stephen> Lol... went Mac, eh?
21:52 <@Nexxy> yeah
21:52 <@Nexxy> I'm tired of my laptop not working on the projector @ conferences
21:52 <@Nexxy> throws my whole game off
21:53 < stephen> Apple laptops are amazing
21:53 <@Nexxy> also I fried my old laptop
21:53 <@Nexxy> at nodedublin
21:53 <@Nexxy> along with my galaxy s2 :<
21:53 < stephen> !!!
21:53 <@Nexxy> (and the power outlets in my hotel room)
21:53 < stephen> I have a awesome LG optimus
21:54 < stephen> 400x240 and 768mhz of overclocked irc owning power
21:54 <@Nexxy> lol
21:55 < stephen> God I want a real Droid
21:55 < stephen> At least it has a Firefox build now
21:55 <@Nexxy> I want an android device that has more than a 4 hour batter life
21:56 <@Nexxy> it's ridiculous.
21:56 <@Nexxy> battery*
21:56 < stephen> You know, mine can run all day since installing Cyanogenmod
21:57 < stephen> That or Hydrorom, both are amazing
21:57 < mscdex> Nexxy, \o/
21:58 < stephen> No, a user named mscdex can't cheer an apple convert, can they
21:58 < stephen> I mean, you're VS toolchain baby
21:59 < mscdex> who said anything about Apple?
22:00 < mscdex> i use a Pre3! :-D
22:00 <@Nexxy> mscdex, \o/
22:00 < s5fs> Nexxy: hai
22:00 < s5fs> wb
22:01 <@Nexxy> s5fs, thanks!
22:01 <@Nexxy> how are you?
22:02 < s5fs> i'm well! went to an ubuntu release party yesterday, got you a sticker haha!
22:02 <@Nexxy> o snap!
22:02 <@Nexxy> I got some stickers for you too!
22:02 < mscdex> i want some node.js stickers
22:02 <@Nexxy> me too
22:02 < mscdex> "node.js rules!" stickers to be precise
22:02 <@Nexxy> lol you should make them
22:03 <@Nexxy> stickermule or something
22:03 <@Nexxy> I would buy one
22:03 < s5fs> but make sure it's "roolz"
22:03 < mscdex> nah, "roolz" is a bit much
22:03 <@Nexxy> nodes JS
22:03 <@Nexxy> s5fs, I've somehow converted to mac since you last saw me
22:03 < stephen> Women love Node.js because it calls back after the event.
22:03 < s5fs> say what?
22:04 <@Nexxy> srsly
22:04 < s5fs> Nexxy: thats weak yo
22:04 <@Nexxy> but but
22:04 < s5fs> no buts!
22:04 <@Nexxy> it's so shiny
22:04 < stephen> Its *nix... can't hate anymore
22:04 < s5fs> confoooorm
22:04 <@Nexxy> and light
22:04 < mscdex> it's *nix with serious issues
22:04 <@Nexxy> I can still put linux on it
22:05 < s5fs> i know they make good hardware, no question. i just dont care for the non-free and i dont want my dollars to fund dick companies.
22:05 < stephen> Bad, whateva. Did you get some slightly tight jeans with it?
22:05 < s5fs> Nexxy: yes but linux on mac sucks, lots of funny bugs
22:05 <@Nexxy> s5fs, but everything is so nice
22:05 < stephen> Try replacing a drive
22:05 < s5fs> Nexxy: just gotta stay inside the box and it's all good
22:05 <@Nexxy> I bought a warranty for that
22:06 <@Nexxy> well all of my stuff is in teh clouds anyway
22:06 < s5fs> Nexxy: everyone at my office runs mac but me and the embedded guy. i'm good with that.
22:06 < nlf> s5fs: that's what she said
22:06 <@Nexxy> yeah I do feel like a sell out
22:06 < stephen> Don't smoke around it. They'll void the warranty
22:06 <@Nexxy> oh, woops.
22:06 < s5fs> Nexxy: it's okay, everyone flirts with mac for a while
22:06 < stephen> Only if its extreme
22:06 < nlf> i like my mac
22:07 < nlf> i was hesitant at first
22:07 <@Nexxy> I didn't get any tight jeans but I did get a locally produced messenger bag
22:07 < nlf> but really, if i've got a terminal and a browser, i can work
22:07 < s5fs> Nexxy: black star?
22:07 <@Nexxy> one sec...
22:07 < nlf> and the retina display is nice
22:07 < stephen> Natural scrolling my ass... but the mouse IS awesome
22:08 < ben_hall> Hey, does anyone have an example of custom streams and using pause/resume? 
22:08 < tubbo`home> is it possible to load npm modules from a github repo?
22:08 < tubbo`home> instead of the npm registry that is
22:08 < stephen> Yeah, my last drug screen
22:08 < s5fs> Nexxy: but that's still cool, hell of an upgrade from the dell eh? i'm wanting to upgrade soon too, prob 6mo window. just waiting for something better to come along.
22:09 < ben_hall> tubbo`home: Yes, just put the tar ball url where the version number goes - https://github.com/user/repo/tarball/master
22:09  * stephen is hoping to get hired over at match.com tomorrow 
22:09 < stephen> Awaiting offer letter
22:10 < stephen> Almost a month out of work
22:10 < mscdex_> tubbo`home: yes, just specify a url to a tarball
22:10 < stephen> Note: freelancer.com will work, but at McDonald's rates
22:10 < mscdex_> tubbo`home: `npm install https://github/user/repo/tarball/master` to install from the master branch
22:13 < tubbo`home> thanks mscdex 
22:15 <@Nexxy> s5fs, we should get together when you have a chance
22:15 < s5fs> Nexxy: aisha leaves town tuesday for 10days or something so i'll be looking for things to do
22:16 < s5fs> 6 days she says haha! i suck at that stuff
22:17 < mscdex> anyone here re-use models on client and server with backbone?
22:17 <@Nexxy> s5fs, I have to do another talk in 2 days and I have no clue what to demo
22:17 < nlf> mscdex: http://blog.andyet.com/2011/feb/15/re-using-backbonejs-models-on-the-server-with-node/
22:18 < s5fs> Nexxy: lets build something
22:19 < stephen> I found this awesome p2p browser app... only needs an author server, but it uses flash
22:19 < s5fs> boo flash
22:20 < s5fs> customer bought a watchguard firewall appliance, ui is flash-based. weak.
22:21 < stephen> Rtmfp
22:21 < stephen> That's the protocol
22:22 < stephen> Flash based configuration best be a tftp server
22:22 < stephen> I'd claim false advert, that name has a different meaning on routers
22:24 < stephen> Ok, so, how do we use node to play middleman for a udp bridge?
22:25 < stephen> I always loved how VNC could do that
22:26 < MI6> joyent/node: Ben Noordhuis v0.8 * 844a005 : crypto: fix DH use-after-free and memory leak  Fix a use-after-free bug a (+2 more commits) - http://git.io/xhfNEQ
22:29 < gkatsev> MI6? So, are the main commiters 001-008?
22:30 < bnoordhuis> gkatsev: yes. i'm 007, i get the hot chicks
22:31 < gkatsev> hehe
22:31 < gkatsev> did you see the chart comparing the various bonds by kills, drinks, and conquests?
22:32 < stephen> Lmfao
22:32 < stephen> Current Bond does harder stunts
22:32 < gkatsev> http://www.slashfilm.com/infographic-which-james-bond-had-the-most-kills-conquests-and-martinis/
22:32 < stephen> But Connery makes the panties drop
22:33 < gkatsev> stephen: well, according to that, George Lazenby had the most conquests :)
22:34 < gkatsev> oh, that's average per film
22:37 < mscdex> nlf: i've seen that, but i was more curious about how others are dealing with using the model on the server side to save to a database and how to do validation rules specific to the server
22:37 < stephen> Thanks gkatsev
22:37 < gkatsev> stephen: so, yeah, connery could very well have gotten the most in total.
22:39 < stephen> mscdex: base partial which binds on a json configuration file?
22:39 < stephen> Why query the DB if its server specific
22:39 < mscdex> stephen: eh?
22:39 < mscdex> stephen: client -> server -> database
22:40 < mscdex> so the client persists to the server and the server persists to the database
22:40 < stephen> I'd bind that for a dollar
22:40 < mscdex> ?
22:41 < stephen> :-) I missed nlf, pay me no mind
22:42 < stephen> But if you want the model handling persists, its an inverse factory pattern.
22:42 < mscdex> well i'm just basing this on how backbone does things
22:43 < stephen> I like models that know how to save themselves
22:43 < mscdex> right, that's what this is doing
22:48 < stephen> Hmm... completely same model for both, eh?  Backbone handles the destination differences? Or we're looking for a solution?
22:51 < stephen> The idea of a model detecting its context seems awkward
23:09 < _ritch> is it possible to use domains to do callback counting / determine when all IO (and timers, etc) are complete in a domain?
23:14 < kenperkins> anyone have an example of a well factored mysql project with nodejs?
23:27 < mscdex> kenperkins: what do you mean?
--- Log closed Mon Oct 22 00:00:51 2012
