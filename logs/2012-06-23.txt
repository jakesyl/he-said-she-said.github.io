--- Log opened Sat Jun 23 00:00:05 2012
00:00 <@Nexxy> other_guy, fantabulous~! \o/
00:00 <@Nexxy> other_guy, and yourself?
00:01 < other_guy> awesome :-)  That sounds like some potential excitement might have become real excitment :-)
00:01 <@Nexxy> almost! not quite yet
00:03 < other_guy> Nexxy, well I'm sure the suspense is killing you :-)
00:04 <@Nexxy> yeah it's pretty rough
00:04 <@Nexxy> especially with various false alarms
00:04 < other_guy> Sorry :-(  But hey, the false alarms are going to seem like nothing once the real thing happens ;-)
00:05 <@Nexxy> yeahhhhhh
00:05 <@isaacs> Nexxy: excitement?
00:05 <@Nexxy> isaacs, baby due in >1 week
00:05 <@isaacs> congratulations!
00:05 <@Nexxy> <1week
00:05 <@Nexxy> derp
00:05 < other_guy> meh, math :-)
00:05 <@Nexxy> thanks!!
00:06 <@isaacs> nice.  i'll keep an eye on the twitters :)
00:06 <@Nexxy> isaacs, I'm sure I will be tweeting loudly
00:06 <@isaacs> :D
00:07 < nwillems> Btw I realised that having a link lying around for python2 would probably break some other stuff. Instead a changed the node-waf python script to use python2: #!/usr/bin/env python2, it fixes it :-)
00:07 <@Nexxy> he's going to be the first ever with a javascript-based baby monitor!
00:07 < nwillems> And congratulations.
00:08 <@Nexxy> nwillems, thank you
00:17 < ragekitten> Can anyone link me to something about best practices if you need to perform some big computations on the backend? 
00:17 < ragekitten> Just running python scripts with cron atm
00:17 < ragekitten> which doesn't really seem like the best idea 
00:20 < nolybab> ragekitten, what type of infrastructure are you running your jobs on?
00:22 < nolybab> also, can the calculations be carried out in parallel?
00:24 < other_guy> ragekitten are they just long running CPU bound jobs?
00:27 < hichaelmart> isaacs: bnoordhuis: w/ regards to https://github.com/joyent/node/pull/3512 - what's the best way to proceed?
00:29 < hichaelmart> isaacs: bnoordhuis: would love to see it included for consistency - but happy to keep working on it if you think there's a "right" way
00:31 < bnoordhuis> hichaelmart: the streams api is due to be reworked, i think that's what isaacs wants to wait for
00:32 < hichaelmart> bnoordhuis: so should the docs be updated until then?
00:32 < hichaelmart> specifically: http://nodejs.org/api/stream.html#stream_stream_setencoding_encoding
00:34 < hichaelmart> bnoordhuis: any idea how many readable streams in core *don't* support setEncoding?
00:34 < hichaelmart> bnoordhuis: besides Zlib?
00:36 < bnoordhuis> hichaelmart: i think net.Stream and fs.Stream both support it
00:36 < bnoordhuis> and i can't think of any other core streams right now :)
00:36 < hichaelmart> bnoordhuis: I've just checked - ZLib is the only one that doesn't support it :-)
00:37 < bnoordhuis> hichaelmart: your patch gets an 'evil but consistent' vote from me
00:37 < hichaelmart> fs, http, net, readline and tls all support it
00:38 < hichaelmart> bnoordhuis: yeah, fair enough - I'm not trying to push to get the patch in if it's dangerous in any way - I just want the consistency
00:38 < bnoordhuis> hichaelmart: i can't think of any way it could be dangerous, i just don't like the concept of .setEncoding :)
00:40 < austinbv> so I am staring my first node project
00:40 < austinbv> where is all the info about how to set up package.json
00:40 < austinbv> I have been reading a lot of the express docs
00:41 < austinbv> but I would really like to have my local npm bins run without qualifying the path
00:42 < hichaelmart> hmmm, freenode disconnect
00:44 < TehShrike> isaacs: I don't know if you've heard this yet, but whether you have or not, I would be highly interested in hearing your response to it, especially in the context of the node.js community http://youtu.be/LH_e8NfNV-c
00:45 < hichaelmart> bnoordhuis: sorry, disconnected - did I miss any comments you had on your preferred method of getting strings from streams?
00:47 < bnoordhuis> hichaelmart: no, all i said was that i can't think of any way the patch could be dangerous, it's just that i don't like the concept of .setEncoding
00:47 < bnoordhuis> but that much was probably clear :)
00:47 < hichaelmart> bnoordhuis: yeah, sorry - but I was wondering what your preferred method would be to get strings from streams? A string decoding pipe or something like that?
00:48 < other_guy> TehShrike, what specifically?
00:49 < TehShrike> other_guy: what part of the video?
00:49 < pstein> Quick Q. How do people handle crunching big numbers? I'm doing python scripts through cron, but I was wondering if there's a better way
00:49 < hichaelmart> bnoordhuis: would be relatively easy to write a StringStream and then do: var stream = fs.openReadStream('myfile').pipe(stringStream)
00:49 < bnoordhuis> hichaelmart: yes, that's the approach i'd take. the idea behind streams is that they're composable
00:49 < other_guy> TehShrike, yes
00:50 < TehShrike> other_guy: I was thinking specifically the part about the ball-of-glue/modules.  Though honestly, I'd appreciate hearing isaacs' response to the speech as a whole, too.
00:50 < hichaelmart> bnoordhuis: yeah - I like it too - it is more verbose though
00:50 < hichaelmart> bnoordhuis: not so newbie friendly in other words
00:52 < bnoordhuis> hichaelmart: that doesn't bother me
00:54 < AlbireoX`Laptop> Hi, how could I make Mongoose return Models from Model.find as opposed to normal objects?
00:55 < ragekitten> AlbireoX: Why? 
00:56 < AlbireoX`Laptop> ragekitten: So I can operate on the objects returned
00:56 < AlbireoX`Laptop> (I come from the Java world, if this isn't standard practice then i won't do it
00:59 < ragekitten> AlbireoX: So, you want to play with the actual 'Model' object? You aren't just trying to update some fields and save? 
01:05 < austinbv> how do you get anything in node_modules/.bin to run like a normal bin in your project directory
01:05 < bnoordhuis> austinbv: export PATH=$PATH:path/to/node_modules/.bin
01:06 < chapel> bah bnoordhuis
01:06 < chapel> I was just typing that
01:06 < chapel> well
01:06 < austinbv> bnoordhuis: there has to be a better way
01:06 < chapel> actually
01:06 < bnoordhuis> i win again! :)
01:06 < chapel> PATH=$PATH:./node_modules/.bin
01:06 < chapel> :)
01:06 < chapel> I win
01:06 < chapel> it will look in the relative folder you are in
01:06 < chapel> if there is a node_modules/.bin
01:07 < bnoordhuis> austinbv: you can install it globally with npm install -g, then add the global npm_modules/bin directory to your path
01:07 < austinbv> yeah
01:07 < austinbv> I got that one
01:07 < austinbv> so you probably hear this a lot but rubygems adds that stuff to your path automatically that's why I thought node must
01:07 < austinbv> might*
01:08 < chapel> austinbv: well the local .bin is an npm thing
01:10 < austinbv> chapel: right
01:21 < vrlogrs> hi guys
01:21 < vrlogrs> i have a noobish question ..
01:21 < chapel> ask it :)
01:22 < vrlogrs> if im including a js file using the require() function .. how can i use the variables from that js file?
01:22 < chapel> exports.variable = variable
01:22 < vrlogrs> i tried referencing it ... var engine = require("blah.js"); engine.avar <- didnt work
01:22 < vrlogrs> oh
01:22 < vrlogrs> right, exports
01:22 < vrlogrs> keep forgetting that
01:22 < vrlogrs> thanks chapel
01:23 < chapel> np
01:23 < chapel> you also have module.exports
01:23 < owen1> how to send data in a post request using the request package?
01:24 < Sly> owen1: var req = http.request(); req.write(data); req.end();
01:24 < Sly> Or: var req = http.request(); req.end(data);
01:26 < other_guy> Sly, do you know of any http client wrappers out there that are more curl-like in how they function.  There's a lot of redundancy in the base http module if you're not going to maintain constantly open connections.
01:26  * Jacky prays to the Node gods.
01:26 < sfoster> anyone know offhand how to log response body when using http-proxy? I have req.on('data'), …) works fine for post data, but resp.on('data', …) is never fired
01:28 < Sly> other_guy, there are a few curl modules in NPM if I'm not mistaken.
01:29 <@konobi> has anyone worked out a way to slipstream node addons into the normal build process?
01:30 <@konobi> bnoordhuis: ?
01:31 < bnoordhuis> konobi: there's _third_party_main.js
01:31 < bnoordhuis> or do you mean building a native add-on into node itself?
01:32 <@konobi> yup
01:33 < bnoordhuis> konobi: we don't really support that, you'll have to hack the build script
01:33 <@konobi> bnoordhuis: yar, would be a handy feature though (mainly for highly platform specific addons like dtrace, kstat, win32, etc)
01:36 < bnoordhuis> konobi: we take pull requests :)
01:36 <@konobi> bnoordhuis: =0P
01:36 <@konobi> isaacs: make it so!
01:37 < Sly> Speaking of pull requests.. I fixed the issue you opened, bnoordhuis.
01:39 < bnoordhuis> Sly: yes, i saw that. you probably know what question is coming: can you add a test? :)
01:39 < Sly> You know, I was thinking about the best way to do that..
01:40 < Sly> Because if I add it into test-repl, what do I do when it gets hung? .break it?
01:40 <@konobi> bnoordhuis: anyways... i'll have a look
01:40 < bnoordhuis> konobi: let me know if you want help / pointers
01:41 < bnoordhuis> Sly: i think we have tests that test for that
01:41 < owen1> Sly: are you talking about the built-in http module?
01:41 < Sly> owen1, yes.
01:42 < Masyl> Knock knock… does anyone know how easy/hard it would be to create a "ssl server" module, for which the dream would be hook able like a normal net connection ?
01:42 < owen1> Sly: don't u need to pass a callback as the argument for request()?
01:42 < Masyl> er.. …for which the stream would…  (damn auto-correct)
01:42 < Sly> Yes, owen1. You need to fill out the .request() method as you usually would. I didn't insert an object with everything, because I figured that would be implied.
01:43 < bnoordhuis> Masyl: hookable in what sense?
01:44 < Masyl> bnoordhuis: readable and writable like a stream
01:44 < owen1> Sly: got it. thanks
01:45 < Masyl> I've exposed my apps cli through telnet with the "net" module… but telnet sucks. My ideal scenario is to have it accessible via ssh without having to give full bah access
01:45 < Sly> Ben, working on that test right now.
01:45 < bnoordhuis> Masyl: the tls module takes care of that
01:45 < bnoordhuis> Sly: good :)
01:45 < npx> So, I'm writing a single-page application with backbone.js and node.js and I've got things to a point where I want to add authentication, but I'm not sure what approach to take. I'd like the API to be usable with other clients... any suggestions?
01:45 < Masyl> tis ? how ?
01:45 < Masyl> er.. tls
01:46 < bnoordhuis> Masyl: tls.CryptoStream is a readable + writable stream
01:46 < bnoordhuis> it just sits on top of a net.Socket really
01:46 < Masyl> ok… and is it ssh friendly ?  same auth mechanism ? Or is there more to it ?
01:47 < Sly> Ben, you want the test merged with the other commit or separate?
01:47 < bnoordhuis> Sly: in the same commit, please. with a nice commit log to boot :)
01:48 < bnoordhuis> Masyl: ah no, ssh and tls are not the same thing
01:48 < bnoordhuis> Masyl: you can probably build something on top of require('crypto'), all the required primitives are there
01:48 < Masyl> bnoordhuis: that's what I figured. 
01:48 < bnoordhuis> but there's probably a couple of ssh modules out there already
01:49 < Masyl> The only primitive thing I'm sure of is my poor understanding of the ssh protocol! lol
01:49 < Sly> Test added, Ben.
01:49 < Masyl> I know substack attempted something, but his module is unfinished and abandonned
01:50 < SubStack> ssh is very hard
01:51 < Masyl> Sure looks hard to me indeed. 
01:51 < Masyl> Substack: are there pieces missing from node? 
01:51 < Masyl> (to achieve an ssh server)
01:52 < Masyl> Are we talking about 200hrs of hard labor? more? less?
01:53 < SubStack> it's better now than when I attempted
01:54 < Masyl> Yeah, looking at your commits it felt like you had hit a bump and fell back on some other solution.
01:54 <@konobi> just change the default shell for the user to your app
01:54 < Masyl> I don't have the crypto skills myself, but I wonder if something like a project/bounty on kick-starter could motive some developer with skills
01:55 < bnoordhuis> Masyl: i think cloud9 is/was working on a ssh module for node
01:55 < bnoordhuis> creationix: ^
01:55 <@konobi> Masyl: any reason you couldn't do what i suggested?
01:55 < Masyl> konobi: Changing the default shell isn't a trick you can pull when your app is deployed on a cloud
01:56 <@konobi> sure it is
01:56 <@konobi> you can change it per-user
01:57 < Masyl> I'm developing a content server… so a single machine could have dozens of instances. Also… I still want to have access to the default shell…. our admins wouldn't appreciate loosing their ssh for a content server
01:57 < Masyl> I doubt I could have that deployed on nodejitsu or the likes
01:58 < Masyl> It's already hard enough to have simple socket io ports… thinking with the os ssh settings sounds impossible
01:58 <@konobi> in fact you can do it per-ssh-key
01:59 <@konobi> that's how gitosis/gitolite works
01:59 < Masyl> mmm
01:59 < Masyl> Ok… but is it the kind of setup I could really do during an npm install ? Or call in a child process?
02:00 <@konobi> add command="..." to the key line in authorized keys
02:02 < Masyl> So let me get this straight in my little brain… the client still connects to the standard port, but my app creates a different user that has my app as it's default shell ? 
02:02 < austinbv> so I just wrote a little script so you dont have to qualify local binaries for zsh
02:03 < austinbv> enjoy if you want it https://gist.github.com/2976264
02:03 < austinbv> now instead of typing ./node_modules/.bin/express, express is just added to $PATH
02:04 < Masyl> konobi:  And instead of having my app open a "net" server, its simply a standard cli on the process stdio ? 
02:05 <@konobi> yup
02:05 < jesusabdullah> Masyl: What are you looking to deploy?
02:05 < Sly> Why make the guy explain it again? Scroll up.
02:05 < jesusabdullah> Because I don't see it
02:06 <@konobi> jesusabdullah: irclogs =0)
02:06 < jesusabdullah> Alright fine I won't tell you if it will work with nodejitsu or not
02:06 < jesusabdullah> I'll just take my free advice and go elsewhere!
02:06 < Masyl> jesusabdullah: Here's some more details, I'm building a content server with a fancy api this api is accessible through telnet, rest, socket.io… and I wish it would also be accessible through ssh (telnet sucks)
02:06 < jesusabdullah> okay
02:07 < jesusabdullah> Masyl: You'd be best off using an iaas anyway, it will give you much more control over the machine
02:07 < jesusabdullah> Masyl: We use http for proxying so that makes all the telnet/raw-tcp stuff, well, not really possible
02:07 < jesusabdullah> Masyl: rest, streaming http and websockets will all work
02:08 < Masyl> Nope… I reaaaally don't want control over any machine. I'm building the project so that it's deployable on most cloud services (including heroku and other PaaS)
02:08 <@konobi> Masyl: so it's the same unix "user" but your command will get executed based on key (so you could make command="./app.js <user>" and interpret the command line arg)
02:08 < jesusabdullah> You'll find Heroku has similar restrictions
02:08 < jesusabdullah> except we can do websockets. Last I checked theirs were still a no-go
02:09 < Masyl> I know… we already had big problems with socket.io on heroku.
02:09 < Masyl> yup… heroku still hasn't socketio
02:09 < jesusabdullah> I'm pushing for more exploration of tcp-enabled services, vpns, that kinda thing, but it would be quite a ways down the pipeline so to speak
02:10 < CIA-75> libuv: Ben Noordhuis master * r61f0487 / include/uv.h : Update uv_getaddrinfo() documentation. - http://git.io/jNToNQ
02:10 < CIA-75> libuv: Ben Noordhuis master * re21cdf1 / src/unix/core.c : unix: malloc only once in uv_getaddrinfo() - http://git.io/Fa-C4g
02:10 < Masyl> Well… one reason I aim to have all those possible transports is that each hosting scenario has different capabilities. I want to cover as much of them as possible
02:11 < Masyl> jesusabdullah: you work at Nodejitsu ?
02:12 < Masyl> (ok.. got you github)
02:14 < Masyl> jesusabdullah: By the way… good job on the pricing scheme and the whole post. We had a discussion today at the office and your offer sounded fair to us. As soon as your official open for business we will start deploying our next projects on nodejitsu
02:15 < Masyl> jesusabdullah: Heroku is fun, but a lot of our ideas endup requiring socket.io … so you simply win!
02:15 < Masyl> But nowhere in your doc you mention wether the billing is by "full month" or if it's by the hour like on heroku ?
02:16 < jesusabdullah> Masyl: I believe it's full month?
02:16 < jesusabdullah> Masyl: What sections did you read? A lot of those questions are answered in the pricing faq
02:17 < jesusabdullah> Masyl: http://nodejitsu.com/#/paas/faq
02:17 < Masyl> I might have read in criss-cross while we discussed at the office
02:17 < jesusabdullah> Masyl: There's also the "pricing" section above that, and we have a blog post at http://blog.jit.su as well
02:18 < jesusabdullah> http://nodejitsu.com/#/paas/pricing Yeah, per month
02:19 < Masyl> Funny… I had a bet running with a friend that you would be getting some "metered resources" pricing scheme like google app-engine does. I wasn't expecting something so similar to other PaaS. 
02:20 < jesusabdullah> :)
02:20 < jesusabdullah> We like to keep things simple
02:23 < Masyl> Heroku does something quite fancy when the app fall in low-usage. They automatically decommission unused dynos after a while and we don't have to pay until they are needed. Will you eventually do something like that 
02:53 < echosystm> does anyone know of a node web framework that is on par with rails? i need ORM, REST, some kind of asset handling and (ideally) some kind of security a-la devise/can-can
02:54 < Aria> Node tends to more minimal approaches; we have all of that -- but not in a single giant blob that makes you do it its way.
02:54 < ANASLEX> Minus, of course, node itself
02:54 < ANASLEX> ;-)
02:54 < echosystm> ok then what is the common approach to achieving the above?
02:55 < echosystm> i mean in the rails world almost everyone uses devise + can-can
02:55 < echosystm> what would be the node equivalent, if any?
02:56 < SomeoneWeird> have a look at express
02:56 < echosystm> ok
02:56 < Masyl> echosystm: node is still too young to have those "batteries included" frameworks. Most of us start with express and we glue various modules to it.
02:56 < AlbireoX`Laptop> echosystm: I'm using Express, Mongoose, and Jade
02:57 < AlbireoX`Laptop> oh and connect-assets is nice
02:58 < Masyl> echosystm: Ho, and since a lot of new modules come up, you should expect to review your stack about every three months. Each project we have done up to now has had a slightly different setup.
02:59 < vrlogrs> hey guys ..
02:59 < vrlogrs> another weird question
02:59 < vrlogrs> im http://pastebin.com/jrWzNETr
03:00 < vrlogrs> maybe im not understanding the way the async calls work here 
03:00 < Aria> Nice. Power outage in Somervill!
03:00 < vrlogrs> but, im getting line 57 to output before line 52
03:00 < vrlogrs> could somebody please explain why and/or let me know how i can run it in order
03:01 < echosystm> vrlogrs: you do not understand async
03:01 < vrlogrs> i was afraid of that :(
03:01 < echosystm> the mysql request will go into the run loop and the script will continue to execute, hence why console.log gets called
03:01 < Aria> vrlogrs: If you request two things be done, and the second one gets done first, you'll have to hold it until you're ready. Or not request it until you're ready.
03:01 < Masyl> lol… yes, your doing a very common mistake… easy to fix, harder to explain over chat
03:01 < vrlogrs> how can i fix the mysql queries so that they run in sync
03:02 < vrlogrs> not async
03:02 < vrlogrs> the order has to be there
03:02 < echosystm> vrlogrs: "line 52" actually happens after the entire R5_login function completes
03:02 < SomeoneWeird> you can't
03:02 < myndzi> flow control library
03:02 < myndzi> or callbacks or whatever
03:02 < Masyl> Async is good.. don't abandon it yet
03:02 < myndzi> unless you're talking about simultaneous queries from separate sources
03:02 < myndzi> but if you just want an ordered transaction, it's not hard
03:02 < vrlogrs> yah, just want a ordered transaction
03:03 < Masyl> vrlogrs: I'm making you an example right now
03:03 < myndzi> i've been using this impossible-to-google module: https://github.com/DanielBaulig/first
03:03 < vrlogrs> thanks Masyl
03:03 < myndzi> it's nice and small
03:03 < myndzi> set this to a variable and pass it as the callback to each query in order
03:04 < echosystm> vrlogrs: you need to provide a "callback" parameter to your R5_whatever function that gets called once all the async stuff has happened. you cannot "return me;", thats not how event loops work
03:05 < vrlogrs> i was hoping i wouldnt need any more modules myndzi ...
03:05 < vrlogrs> echosystm: how would i do that? 
03:05 < myndzi> i know the feeling
03:05 < Aria> vrlogrs: The node ecosystem is made up of tons of tiny modules.
03:05 < vrlogrs> kinda seems backwards
03:05 < myndzi> but it's that, roll your own, or nest a big tree
03:06 < vrlogrs> ok .. can someone tell me if there's another way of doing mysql queries?
03:06 < vrlogrs> from what ive done in which a function is used as a callback
03:06 < echosystm> vrlogrs: wait for Masyl to write up his example for you :)
03:06 < vrlogrs> can i just wait for the query to finish
03:06 < vrlogrs> ok .. ill wait for Masyl
03:06 < myndzi> that's what the callback is for
03:06 < echosystm> im out, good luck
03:06 < vrlogrs> thanks echosystm
03:07 < myndzi> you can also use mysql-queues
03:07 < myndzi> which will queue the queries and execute them in order for you
03:07 < vrlogrs> but can i wait for the queries? before going on with the rest of the code?
03:07 < Aria> vrlogrs: That's the core of async programming. Things that you wait for get a callback. There is no 'halt and wait' in Node.
03:07 < myndzi> yes. that's what the flow control thing is about
03:08 < myndzi> it lets you write async stuff in a fairly straightforward manner
03:08 < myndzi> for when you want a straightforward sequence
03:08 < myndzi> every async call goes off and does its own thing while your program plows straight ahead
03:08 < vrlogrs> ok .. then, tell me .. 
03:08 < Aria> vrlogrs: So you need to break your code up into pieces, and assemble them with some flow control. Things like the seq or async module,  which let you say "first do this" or "first do these", then do this, then do that, at a higher level than most languages do.
03:08 < myndzi> some undefined amount of time later it finishes
03:09 < myndzi> when it finishes it will call your callback parameter, typically a function passed as the last parameter to the async call
03:09 < myndzi> and that callback will continue what you were doing
03:09 < vrlogrs> if i just cut out lines 57-63 and put them inside line 48 .. will that fix the problem?
03:10 < ekristen> hi
03:10 < myndzi> yeah, that would probably work
03:10 < myndzi> but the more you do it the more of a mess everything becomes
03:10 < myndzi> thus the suggestions previously
03:10 < vrlogrs> hmm
03:11 < vrlogrs> ok, 1 more thing then ..
03:11 < vrlogrs> where does the return statement from the nexted callback functions go?
03:11 < vrlogrs> because the parent function may have exited, right?
03:11 < vrlogrs> or does it wait?
03:11 < myndzi> you don't return anything
03:11 < ekristen> I understand that node is async by design, but I really need to have a function that can be called that pulls a value out of a file and returns it for use in my node.js app, but this async is throwing me for a loop, can anyone help?
03:12 < vrlogrs> the are the variables in the parent function accessible by the callback functions?
03:12 < myndzi> yes
03:12 < vrlogrs> oh ok ..
03:13 < myndzi> as long as the callbacks are declared inline there
03:13 < Masyl> http://pastebin.com/PgnngEve
03:13 < myndzi> that is, "under" and i"inside" the scope of where the variables are
03:13 < Masyl> Here's your code with annotation (read them in "order")
03:13 < vrlogrs> in that case, if the parent is returning a variable .. will the parent function wait for the callback functions before it returns?
03:13 < myndzi> no
03:13 < myndzi> you can't "return" a value from an async call
03:13 < myndzi> you pass it with the callback
03:14 < vrlogrs> but if the callback function modifies the parent's variable?
03:14 < myndzi> the result of your query will exist inside the callback function
03:14 < myndzi> that's probably not a great way to go about it
03:14 < myndzi> but you can return the variable and then alter it
03:14 < myndzi> of course, you'll have plenty of problems because the variable won't be altered until the query completes
03:14 < vrlogrs> right
03:15 < vrlogrs> :(
03:15 < myndzi> instead of { .... var foo = query .... do something with foo }
03:15 < myndzi> you need to write
03:15 < myndzi> { ... query(callback) } callback(foo) { ...do something with foo }
03:15 < myndzi> that's how you stop and wait between the two parts
03:15 < Masyl> vrlogrs: control flow libraries can be of a great help… but you should first grasp the basics, otherwise these libraries will only feel like "magic" and not logic.
03:16 < vrlogrs> Masyl: were you able to write an example?
03:16 < myndzi> 20:19.46 < Masyl> http://pastebin.com/PgnngEve
03:16 < Masyl>  http://pastebin.com/PgnngEve
03:16 < ekristen> I'm trying to do a simple http server, when a request is made it opens a file, pulls a value out using a regex and returns it to the user
03:17 < vrlogrs> oh sry, missed it
03:17 < Masyl> I haven't changed your code… but I added narration. I'm also pointing where you could put your last operations.
03:18 < vrlogrs> but Masyl -- how can i get the var "me" back to the parent function so that it can return?
03:19 < vrlogrs> by your suggestion, if i move the last bit of code into #5, "me" can't be returned, right?
03:19 < ekristen> http://pastebin.com/ZsXfPQx7 <-- I'm obviously doing something wrong, can someone point it out to help me? I am trying to pull a value from a file, and return it 
03:20 < vrlogrs> i guess i can globablize "me" and that would work
03:20 < Masyl> vrlogrs : I understand your problem now…. your "R5_login" function should also have a callback
03:20 < vrlogrs> what do you mean Masyl?
03:21 < Masyl> Here's a golden rule: If your building a function that does async calls, your function must also be async an return it's value through a callback.
03:21 < ekristen> Masyl: can you provide an example of how to do this?
03:21 < Masyl> So your function declaration would look like this:   function R5_login (cn, nm, ss, callback) {
03:22 < Masyl> and instead of doing a "return value;"  you do  "callback(null, value);"
03:23 < vrlogrs> not sure i understand what the purpose of the callback would be?
03:23 < ekristen> Masyl: http://pastebin.com/ZsXfPQx7 I think this is my problem, would you mind taking a look?
03:25 < Masyl> ekristen / vrlogrs : Look at this for comparison: http://pastebin.com/8LP1Tb4m
03:26 < Masyl> Oups… forgot one last detail
03:28 < Masyl> Here you go: http://pastebin.com/QkhiEHfB
03:29 < Masyl> Here's a few articles:
03:29 < Masyl> http://shinetech.com/thoughts/articles/139-asynchronous-code-design-with-nodejs-
03:29 < vrlogrs> but, where exactly is "callback(null, profileId);" going?
03:29 < vrlogrs> the profileid goes where?
03:30 < Masyl> Look at the bottom… when getProfileId is being called, we give it an anonymous function … this anonymous function will receive the callback and the arguments you sent it
03:31 < hichaelmart> bnoordhuis: I went ahead and create a StringStream module, so one doesn't have to deal with setEncoding() yukkiness: https://github.com/mhart/StringStream
03:31 < hichaelmart> *created
03:31 < vrlogrs> interesting..
03:32 < ekristen> Masyl: I get "TypeError: undefined is not a function"
03:32 < bnoordhuis> hichaelmart: very good! :)
03:32 < Masyl> Mmm.. let me check
03:32 < ekristen> I got it
03:32 < ekristen> res.end(profileId) instead of res.end(getProfileId())
03:32 < ekristen> make sense
03:34 < ekristen> Masyl: thanks!
03:35 < Masyl> good!
03:35 < ekristen> I think I am catching on
03:35 < Masyl> vrlogrs… makes more sense now ?
03:36 < vrlogrs> it is Masyl ... from what i understand though, ill have to pass the callback function through the 3 queries?
03:37 < vrlogrs> oh, nvm
03:37 < vrlogrs> i think i got it .. let me  try
03:40 < CIA-75> node: Ben Noordhuis master * rc40875e / lib/repl.js : repl: fix buffer clearing after npm command - http://git.io/XiVaBg
03:42 < Masyl> vrlogrs: yes.. at every call you do deeper in async, will require a callback up the chain.
03:42 < Masyl> vrlogrs: But since it's usually the same "callback(err, data)" call it get very easy to do
03:45 < vrlogrs> ok, what about the cases where im returning false Masyl -- i should be doing callback(false) instead right?
03:46 < vrlogrs> and do i need a return statement after the callback call?
03:47 < vrlogrs> or does callback() imply the end of that function?
03:47 < Masyl> Nope… you usually have three choices: Raise the error on the first line:   if (err) throw err;    #2  Return the error on the first line    if (err) callback(err);      or do some fancier handling/logging inside your function
03:48 < wsirc_3737861> hey does anyone know a clean way to exclude properties from a mongoose document toJSON?
03:48 < vrlogrs> so, callback() is basically a return statement?
03:48 < Masyl> Usually callbacks don't return anything.   Some fancier api allow you some return value, but its specific to each apis
03:48 < wsirc_3737861> hey does anyone know a clean way to exclude properties from a mongoose document toJSON (for example to avoid sending passwordHash to the client)?
03:48 < wsirc_3737861> hey does anyone know a clean way to exclude properties from a mongoose document toJSON (for example to avoid sending passwordHash to the client)?
03:48 < vrlogrs> or can code after the callback still get called?
03:48 < wsirc_3737861> hey does anyone know a clean way to exclude properties from a mongoose document toJSON (for example to avoid sending passwordHash to the client)?
03:48 < Masyl> Yes… callbacks take the place of "return value;" 
03:49 < vrlogrs> great, thanks alot Masyl
03:49 < vrlogrs> been ALOT of help .. also myndzi
03:49 < vrlogrs> thanks
03:50 < Masyl> By the way vrlogrs, what are you building with node ?
03:51 < vrlogrs> i made tictactoe first: http://209.141.47.151/tictactoe
03:51 < vrlogrs> now working on chess
03:51 < vrlogrs> might have it done this weekend
03:52 < vrlogrs> i only have facebook login right now -- too lazy to add twitter/oauth/etc
03:52 < vrlogrs> but, everything seems to be working fine with TTT
03:52 < vrlogrs> chess is a slightly larger challenge :S
03:52 < Franz__> its fine vrr
03:53 < Masyl> Good… you should put this up on Github
03:53 < Franz__> its opensource vrlogrs?
03:53 < vrlogrs> not yet ..
03:53 < vrlogrs> maybe some day ;)
03:53 < Masyl> why not open source it right away ?
03:53 < vrlogrs> actually, ive never open/close sourced anything .. 
03:53 < vrlogrs> not really sure what the point of it is .
03:54 < vrlogrs> i just like coding
03:54 < vrlogrs> :)
03:54 < Franz__> share with us ^^
03:54 < Masyl> hehe…  well you can see it as "coding with friends".
03:54 < vrlogrs> lol .. tell you what, if i get this site up and running, ill make it open source
03:55 < Masyl> (I've been coding for 18 years, and I've been having way more fun since I write most of what I do as open source)
03:55 < vrlogrs> i have another site that might interest some: http://vrlogrs.com/chats
03:55 < Franz__> a simple tictactoe 
03:55 < Masyl> no no no… start open source right away… this will open you to get more help (like today)
03:55 < vrlogrs> oh ..
03:55 < Franz__> i imagined no problems but its a decision who you have decide
03:55 < Franz__> ^^
03:56 < Masyl> on Github your code is easier to discuss and show
03:56 < Franz__> no problem
03:56 < Masyl> Github is MADE for half-baked stuff that is "in progress 
03:56 < vrlogrs> Franz__: you can test it out
03:56 < vrlogrs> im online .. 
03:56 < Franz__> i am searching examples for study only
03:56 < Franz__> learn node.js... socket.io
03:56 < Franz__> ...
03:56 < vrlogrs> Masyl: but what if somebody "burrows" my code and starts up their site with my code?
03:56 < Franz__> websockets
03:57 < Franz__> somebody can help with a bug here?
03:57 < Franz__> i have   this.title = new GUI.TextInput({'parent':this.container,
03:57 < Franz__>                                    'position':[20, 290],
03:57 < Franz__>                                    'size':[200, 34],
03:57 < Franz__>                                    'text':'10000',
03:57 < Franz__>                                    'font':ui.getFont('alias')});
03:58 < Octane> anyone here really good w/ knockout?
03:58 < Franz__> this.create=function(){
03:58 < Franz__>         if(!this.title.getText().length){
03:58 < Masyl> vrlogrs: I'll be blunt… the fact is that the code you write today will never be that amazing. Its a struggle just to get noticed.  
03:58 < Franz__> but i receive a error: this.title.gettext is not a function
03:58 < TehShrike> Masyl++
03:58 < Masyl> The value or money is not in the code itself,  but rather in the business you build around it… how you exploit it.
03:59 < TehShrike> Or the usefulness of your code
03:59 < TehShrike> People will put up with shitty code if it's useful
03:59 < Masyl> loll… yes
03:59 < TehShrike> But it has to be uniquely useful
04:00 < TehShrike> Anyone want to peer-review my possibly-shitty tool I made for building tables in the proprietary app I write for my day job?
04:00 < Masyl> vrlogrs: when I was younger I had the same fear of having my "code stollen"… but today, I'm ecstatic if just a single person uses a library I created
04:00 < TehShrike> ^^^^^^
04:01 < TehShrike> Getting your code stolen is good for your career, or at the very least, your ego
04:01 <@Nexxy> SPOILER ALERT: I've been stealing all of your codes
04:01 < TehShrike> (they're often related)
04:01 < Masyl> TehShrike : sure
04:01 < TehShrike> http://hastebin.com/xukasedoba.js
04:02 < TehShrike> Be gentle.  I've only been doing Javascript for a few months.
04:03 < Masyl> Haaargh… rendering html with dom manipulation. 
04:03 < TehShrike> Yup.
04:03 < Masyl> Why are you not using a tempting language ?
04:03 < TehShrike> It's for an IE6 variant on barcode scanners running some horrible variant of Windows CE >_<
04:04 <@Nexxy> TehShrike, you... you used alert() instead of console.log
04:04 <@Nexxy> that's pretty awful
04:04 <@Nexxy> everything else looks neat
04:04 < TehShrike> hahaha... awful... did you see my last line? ;-P
04:05 < TehShrike> But you're right, we generally test in Chrome, there's no reason for that to be an alert.
04:05 <@Nexxy> the }; ?
04:06 < TehShrike> lol, no, the fact that we're testing on IE6 on Windows CE
04:06 < Masyl> console.log is quite fine.
04:06 <@Nexxy> TehShrike, my only real question is why you aren't making it a jQuery plugin
04:07 < TehShrike> Nexxy: I haven't made a JQ plugin before - as I understand it, that involves adding a new function that would be called with $.whatever(), right?
04:07 <@Nexxy> ya basically
04:08 < TehShrike> Sure, it would probably make sense to map HANDYTABLE.createTable to something like that
04:08 <@Nexxy> pretty much all you do is wrap it in a $.fn.pluginName = function() {
04:09 < TehShrike> Yeah, I should do that
04:09 <@Nexxy> you may end up with some 'this' context weirdness but otherwise it will be pretty straightforward
04:09 < Masyl> As a better convention, instead of "this.jquery_object"  you could call it this.$root  (root because its the root element  and "$" because it's a query object)
04:10 < Masyl> Always differentiatie "dom" objects from query objects by prefixing query objects with "$"
04:10 < TehShrike> ooh.  That would make life a bit better, I was unhappy that I couldn't just add functions to jquery objects in my early development.
04:10 < TehShrike> What's the doc page I should read to learn about the $root stuffs?
04:11 <@Nexxy> TehShrike, $root is arbitrary
04:11 < TehShrike> ah, gotcha
04:11 <@Nexxy> Masyl, is just suggesting prepending $ to objects you know are jQuery objects
04:11 < TehShrike> I can dig that convention
04:11 < Masyl> yup
04:11 <@Nexxy> and root just makes sense as it is the root of your plugin's functionality
04:11 < TehShrike> I've been pretty inconsistent so far in this app
04:11 <@Nexxy> I do the same thing just to keep track of stuff
04:11 < TehShrike> I've got variables named jq, this_jquery, jquery_object, and other stupid things like that
04:12 < Masyl> Is your software packaged as an app or it's a web site ?
04:12 < TehShrike> yeeees?
04:12 < Masyl> er… App or Web ?
04:13 < TehShrike> We'll roll it out to customers on their own servers, for the most part, but we will probably also compile it as a PhoneGap app at some point (yay camera integration)
04:13 < TehShrike> It will be a webapp running on their servers, but they will access it almost entirely with mobile devices in an app-like manner
04:14 < Masyl> Well… my biggest advice would be to stop building UIs this way and use a proper tempting engine and some MVC abstraction like backbone.js or some other.
04:15 < TehShrike> The biggest reason that I didn't jump in with a solid MVC engine was because this app will be used on some seriously painful versions of IE from many years ago
04:15 < Masyl> At our agency we haven't built UI's like this for a long time… and whenever we have to fix something built like that it's always painfull
04:15 < TehShrike> Not even IE6, but some variants on it
04:16 < TehShrike> So I'm keeping the JS close to basic stuff :-(
04:16 < TehShrike> I don't want to have to debug major frameworks.  If something in jQuery doesn't work on this browser, we code around it.
04:16 < Masyl> Have you tried running any template engine on this ?  some are very lean
04:16 < TehShrike> It's a sad situation, but it could be worse.
04:16 < TehShrike> To be honest, I have not.
04:17 < TehShrike> I threw together my own light MVC framework.
04:17 < Masyl> All the engine that rely on mingling js and html like with "els" are very efficient and should work fine on CE
04:18 < Masyl> Building your own MVC for Win CE makes sense… but building whole UIs with jQuery get very tiresome, bug-prone and a hell to maintain
04:19 < TehShrike> Yeah... I'm trying to hide most of it behind tools like this one so that the other devs don't have to be touching the DOM in their own code all the time
04:20 < TehShrike> Another dev wrote code that created this table by hand, and I was like 8-| gotta keep this from happening on every screen...
04:20 < Masyl> I built a tempting language myself… but its probably too heavy for CE …  your could try this: https://github.com/visionmedia/ejs
04:21 < Masyl> Its very light and small enough to fix if you find bugs
04:21 < TehShrike> This is the oldest/shittiest device we're writing for, as far as I know: http://www.motorola.com/Business/US-EN/Business+Product+and+Services/RFID/RFID+Readers/MC9090-G_RFID_US-EN
04:21 < Masyl> Is your backend in node ?
04:21 < TehShrike> No. PHP. :'(
04:22 < Masyl> ouch
04:22 < TehShrike> The statelessness is actually getting kind of painful
04:22 < jesusabdullah> TehShrike: At least it's http right?
04:22 < TehShrike> What with handling one scan per second per device
04:22 < TehShrike> jesusabdullah: aye
04:22 <@konobi> TehShrike: just get a new one from sparkfun
04:23 <@konobi> http://www.juliangautier.com/2011/02/controlling-big-mean-deviceswith.html
04:23 < TehShrike> Do they have existing awesome scanners?
04:23 <@konobi> =0)
04:23 <@konobi> yup, they have RFID stuff
04:23 < TehShrike> But what do they have for scanning hardware?
04:23 <@Nexxy> between sparkfun and allelectronics
04:23 < TehShrike> Everyone in the industry is using 800-1500 dollar scanners that survive for decades
04:23 <@Nexxy> just about everything
04:24 < TehShrike> People run over these devices in cars and they keep on scanning
04:24 < TehShrike> It's disgusting
04:24 < TehShrike> I'm just glad I'm not writing native code for these devices
04:24  * konobi is playing with his arduino atm
04:25  * TehShrike is interested to see if he can actually get a Raspberry Pi
04:25  * jocafa chews on his RPi
04:28 <@konobi> hopefully mine'll get shipped within the week
04:47 < vrlogrs> hey guys ..
04:47 < vrlogrs> http://pastebin.com/vf709c1C
04:47 < Masyl> ?
04:47 < vrlogrs> if im in this function .. and the first if statement is true, and callback() gets called, can line 10 still be called?
04:48 < vrlogrs> cause, it got called :S
04:48 < vrlogrs> i thought the callback was like a return statement ..
04:48 < vrlogrs> do i need to put return after all callbacks?
04:49 < Masyl> if you don't want your function to continue do this  "return callback(null, value)"
04:49 < Masyl> This is a sort of convention and should always work
04:49 < vrlogrs> oh ok
04:49 < vrlogrs> great, thanks again Masyl
05:10 < mattrobenolt> Anyone doing something like Nock for UDP instead of HTTP?
05:27 < LuckyAlgorithm> Anyone interested in trying to help me get this project from GitHub to work: NodeJS-Mongo-MQ  ??
05:27 < LuckyAlgorithm> I set everything up..
05:27 < LuckyAlgorithm> But I can't get it to work.. I've been debugging, but can't seem to get the thing to run
05:28 < LuckyAlgorithm> Everythings installed, Redis, Mongo, all the modules.. it starts up.. but doesn't work..
05:28 < LuckyAlgorithm> I wonder if it's a problem with my MongoDB setup... or that I don't know how to interface with the project.
05:29 < qubit[01]> that*
05:30 < LuckyAlgorithm> Thanks.
05:30 < LuckyAlgorithm> That's helpful. :)
05:30 < qubit[01]> you are welcome.
05:31 < qubit[01]> anyway, are there any errors ?
05:33 < LuckyAlgorithm> Yes
05:36 < LuckyAlgorithm> ypeError: Cannot call method 'findOne' of null
05:36 < LuckyAlgorithm>    at c:\wamp\www\NodeJS-Mongo-MQ\sockets\index.js:39:24
05:37 < LuckyAlgorithm> Could I implore you to look at it?
05:37 < LuckyAlgorithm> I could paste it into a pastebin or gist?
05:37 < LuckyAlgorithm> the whole output
05:38 < qubit[01]> yes that, are you sure that mongo is running ?
05:38 < LuckyAlgorithm> yes
05:38 < LuckyAlgorithm> http://pastebin.com/UAdsm3HN
05:38 < qubit[01]> poliice and theives!
05:39 < LuckyAlgorithm> In fact, at first I had to change the collection on Mongo to be a Capped Collection...
05:39 < LuckyAlgorithm> I made it past that.. and then this.
05:39 < qubit[01]> your mongo driver is not getting iniitalized 
05:40 < qubit[01]> wamp!
05:40 < qubit[01]> fapfap
05:40 < LuckyAlgorithm> It's just the directory I'm running it from
05:40 < LuckyAlgorithm> It's not wamp.
05:40 < LuckyAlgorithm> it's Node + MongoDB + Redis
05:41 < LuckyAlgorithm> Any idea why it's not getting initialized?
05:41 < LuckyAlgorithm> I'm able to connect to my MongoDB
05:41 < qubit[01]> can you paste the file thats causing the error ?
05:41 < LuckyAlgorithm> And, like i said, I fixed up an error that was being thrown by the program once I declared the Mongo collection as capped
05:41 < LuckyAlgorithm> Sure.
05:42 < LuckyAlgorithm> I just added it to the same link
05:43 < LuckyAlgorithm> Wait, no i didn't
05:43 < LuckyAlgorithm> I thought it saved, 1 sec
05:43 < qubit[01]> yeah i dont see it
05:43 < LuckyAlgorithm> ok : http://pastebin.com/9zDe4Q9X
05:44 < LuckyAlgorithm> I commented where it's being thrown from, near the bottom
05:45 < LuckyAlgorithm> And that function, readAndSend, is a the top of the pasted file
05:45 < LuckyAlgorithm> and the 'collection' is null
05:45 < LuckyAlgorithm> and me no know why
05:45 < LuckyAlgorithm> i created a capped collection called "messages" in Mongo
05:47 < qubit[01]> ahh i see
05:47 < LuckyAlgorithm> awesome
05:47 < qubit[01]> you've used collection in a figurative loop
05:47 < LuckyAlgorithm> gimme, gimme, gimme.
05:47 < LuckyAlgorithm> Umm... what does that mean?
05:48 < qubit[01]> the loop exists only on your mind - without your attention it does not exist
05:48 < LuckyAlgorithm> ( i didn't write ths code bw )
05:48 < LuckyAlgorithm> btw
05:48 < LuckyAlgorithm> Where is the loop?
05:50 < LuckyAlgorithm> cursor.intervalEach() ?
05:51 < LuckyAlgorithm> ??
05:51 < LuckyAlgorithm> qubit, penny for your thoughts...
06:45 < ding> Anyone use cluster? Trying to remove a handler for 'death' that respawns new workers. I've tried redefining cluster.on('death', function(worker) {}), but it doesn't overwrite the previous handler.
07:17 < _lleo> ding; as with any event handler you have to use removeListener then add a new one this .on() or .addListener() btw, on === addListener just shorter
07:18 < _lleo> to remove a listener you have to refer to the exact function object
07:31 < lpin> hello guys, i have a change account setting page in my app
07:31 < lpin> that page can be reached from many other pages
07:31 < lpin> i want the user to be redirected to the page he came from after the operation is complete
07:32 < lpin> i thought about saving the referrer in the session
07:32 < lpin> and redirect to that saved variable
07:33 < lpin> but that way the session variable is kept indefinitely
07:33 < lpin> cause i can't clear it when the redirect is complete
07:33 < lpin> maybe the user want to do that operation again...
07:34 < lpin> can you think a better way?
07:36 <@Nexxy> lpin, use a get variable like normal people
07:36 <@Nexxy> http://your.appthingy.com/redirected_url?dest=where+they+should+go+next
07:38 < lpin> mmm ok
07:39 <@Nexxy> :)
07:40 < lpin> what about security?
07:41 <@Nexxy> do it.
07:42 < lpin> ofc :) but i have to check dest param
07:43 <@Nexxy> definitely
07:43 < lpin> well i'm the one that generates dest param so those links should be safe enought
07:43 < lpin> Thank you Nexxy
07:44 <@Nexxy> lpin, of course
07:44 <@Nexxy> lpin, just make sure you are sanitizing the params
07:44 <@Nexxy> and of course only redirecting to local destinations
07:45 < lpin> by local you mean internal routes
07:45 <@Nexxy> like for example; someone could be like...
07:45 < lpin> so that param should not start with http:// or something
07:46 <@Nexxy> http://your.appthingy.com/redirected_url?dest=http://someothersite.com/?some=evil&parameters=here
07:46 < lpin> exactly
07:51 < lpin> one last thing Nexxy, what kind of sanitization would you use on that param? just check if it is a list of allowed values?
07:54 < TonkaTruck> Do most of you use macports or brew for you dev nodejs?  
07:54 < TonkaTruck> or neither?
07:54 < lpin> i use macport  on my macbook
07:55 < lpin> it includes npm wich is not present in brew if i'm not wrong
07:55 <@Nexxy> lpin, basically I would whitelist possible values
07:55 <@Nexxy> lpin, since chances are you will only be redirecting to a handful of locations anyway
07:55 < TonkaTruck> lpin: Funny you mention that because I just installed the nodejs package on macports and it doesn't seem to include npm
07:56 < TonkaTruck> I had to install it separately - yet on the npm site it said it was now part of nodejs
07:56 <@Nexxy> lpin, then redirect anything that falls outside of the whitelist to a 500 page or something of the like
07:56 < TonkaTruck> I must've read wrong.
07:56 <@Nexxy> TonkaTruck, it does come with npm if you're installing a recent version
07:56 < lpin> ok Nexxy there are 2-3 possible values
07:56 <@Nexxy> well there you go
07:57 <@Nexxy> you can always add to the list as you expand features
07:57 <@Nexxy> and with little risk of additional attack surface
07:57 <@Nexxy> afk though, gl :)
07:57 < lpin> yeah i won't stress you anymore
07:57 < lpin> :P
07:57 < lpin> thanks again
07:57 <@Nexxy> no worries!
07:58 <@Nexxy> any time
07:59 < lpin> TonkaTruck i'm pretty sure i installed npm with macport along with node.js port
08:17 < TonkaTruck> lpin: Thanks.  Now that I look both current nodejs and nodejs-devel macports have the --without-npm option so I'm assuming I installed it without knowing.
08:18 < TonkaTruck> macports npm is at version 1.1.24
08:30 < marlun> How do I handle dependencies in browserify.js if I don't want to use xxx-browserify npm modules (since they don't exist for all my depenendencies). Backbone.js/jQuery does exist but lets say it didn't. How do I tell browserify it's a dependency for the rest of the code and i need it loaded?
08:30 <@Nexxy> by requiring it in your scripts
08:32 < marlun> Nexxy: Hmm, maybe I thought to much about it and made it harder then it is :)
08:32 <@Nexxy> sounds like it!
08:32 <@Nexxy> SubStack made things amazingly easy for us with browserify
08:41 < marlun> Nexxy: When doing $ = require('./vendor/jquery') $ becomes an object but jQuery(...) does however work.
08:42 <@Nexxy> are you using jQuery server-side?
08:43 < marlun> No
08:43 < SubStack> marlun: jquery isn't packaged as a commonjs module
08:44 < SubStack> do this to make it one:
08:44 < SubStack> echo ';module.exports=jQuery' >> jquery.js
08:48 < marlun> SubStack: Ah, thanks! Worked great now. So all jquery-browserify does is package it as a commonjs module for you?
08:49 < SubStack> marlun: yep
08:53 < marlun> Good to know. I've used Stitch.js before and it worked great but I wanted to try browserify too since I've moved away from coffeescript (even though it works fine without coffeescript). Now I'm just going to try to figure out how to serve underscore templates with browserify too :)
08:54 < SubStack> marlun: check out https://github.com/substack/exportify
08:55 < SubStack> it puts `module.exports=...` around regular files so you can require() them and get back a string
09:05 < marlun> SubStack: I read this too: http://stephan83.github.com/04-08-2012/client-side-templates.html
09:07 < marlun> SubStack: If using exportify I would have to do _.template(template, {...}) when rendering but with the code in that URL browserify seem to serve me a compiled template and all I need to do is template({...})?
09:22 < lpin> Nexxy are you still there? can i bother a little more? :P
09:22 < lpin> got a complication withe the redirect scheme we discussed before
09:22 < lpin> http://name.myapp.com/login?dest=redirect_url
09:22 < lpin> if login have errors  i redirect to login itself
09:23 < lpin> so i lose my param :|
09:23 < djazz> the data event on stdout don't get called until the process exits, is that a bug? http://pastebin.com/yWAGKZ0k
09:23 < djazz> trying to connect to my NXT over bluetooth
09:24 < SubStack> marlun: I don't know how underscore templates work but if you can give a string to a render function you can do that with expority
09:24 < djazz> and i need to know when it has connected
09:24 <@Nexxy> lpin, you could solve that w/ XHR logins
09:25 <@Nexxy> or with slightly more complicated routing
09:25 < SubStack> marlun: oh yeah you can .register() your template extensions too, that could work
09:26 <@Nexxy> lpin, (also; I'm always here)
09:27 <@Nexxy> and everywhere else.
09:27 < lpin> yeah, ajax login/signup could solve that but i don't want to change everything now :)
09:28 < lpin> if the errors pop i should keep the param and pass it again to the login route
09:29 <@Nexxy> ya
09:29 < lpin> fact is that i have many middlewares
09:29 < circlicious> theres a node lib that allowsyou to just require('lib') in your code and execute a function while it also provides with a binary to achieve the same goal. why is executing the binary slower than doing it in the node code itself?
09:29 < lpin> and i should keep it in each one
09:29 < lpin> kinda boring
09:29 <@Nexxy> lpin, can't you just make a chain of them and add the auth to the top?
09:31 < marlun> SubStack: Will try the register way for since it seems nicest to use, getting a Error: Cannot find module: "./templates/test" now though... do I have to supply the extension now when it's not a .js file? It's a .html file and I've added a "bundle.register('.html', function(body) {"
09:31 < lpin> i think i need an exmple ::>
09:31 < lpin> searching for it
09:32 <@Nexxy> lpin, like app.get('restricted/route', [ authMe, xssCheck, otherMiddlewares ], function(req, res, next) { // do stuff... });
09:32 < lpin> yeah i have that scheme
09:32 < circlicious> hey anyonme ? :) wanna explain me :)
09:33 <@Nexxy> circlicious, I'm not even sure what you're asking
09:34 < circlicious> Nexxy: let me try again
09:34 < lpin> something like this app.get('login', checkuser, chepass, auth);
09:34 < lpin> but if checks fails i redirerect to login itself
09:35 < circlicious> there's a node lib that provides you a nice interface to achieve something. so var lib = require('lib'); lib.achieveGoal(); while the library (sorry, i should say module) also ships with a bin file, that you can execute with child_exec.spawn/exec to achieve the same goal.the bin way is slower than doing it in your code, why so ?
09:35 < circlicious> it's like 2x slower
09:36 <@Nexxy> I Dunno LOL ¯\(°_o)/¯
09:37 < circlicious> Nexxy: well, is it a commong thing that executing a bin is going to be slower than doing the same thing by requiring the code and calling the functions to do the same job ? maybe because bin executes another process ?
09:37 < circlicious> just trying to understand :/
09:38 <@Nexxy> well if you're using child_process to spawn it there is of course the additional overhead of setting up another v8 instance
09:38 <@Nexxy> beyond that I'm not familiar enough with the process to have much useful to tell you :P
09:45 < lpin> my authMe actually happen at the end of the chain
09:45 < lpin> ouch :V
09:46 <@Nexxy> you should fix that :P
09:48 < lpin> i can't those that comes first are obviosly prerequites
09:48 < lpin> prerequisites*
09:49 <@Nexxy> at any rate, you should be passing the entire request object through your chain
09:49 <@Nexxy> so you shouldn't lose the destination
09:49 < lpin> nice idea :)
09:50 <@Nexxy> I'm full of 'em
09:50 < lpin> i'm sure about that
09:50 <@Nexxy> oh, good :P
09:50 < lpin> anyway still thinking about using old bad session variable
09:50 < lpin> :D
09:51 <@Nexxy> whatever floats your boat!
09:51 < lpin> solve me a lot of problems at the cost of a permanent variable in the sessione
09:51 < lpin> not that bad
09:51 < lpin> :P
09:51 <@Nexxy> and potential redirect loops!
09:54 < magge> hello, im trying to traverse a directory recursively, but i have some dirs with norwegian letters in them, and i get ENOENT when trying to stat these... do i need to do some decoding between fs.readdir() and fs.stat() ?
09:58 < blakmatrix> magge: are you using path resolve and path.join to create your paths?
09:59 < magge> blakmatrix: no, i'm just doing> path + '/' + entry
10:00 < blakmatrix> try using path.resolve(path.join(path, entry))
10:00 < blakmatrix> whelp
10:00 < blakmatrix> have the var path be something else heh
10:00 < blakmatrix> and require('path') if yo uhaven't already
10:03 < marlun> SubStack: Got it working, had to add an addEntry call after the register call instead of just sending the entry point as a paramter to browserify().
10:04 < SubStack> right, the order of operations is significant in a lot of cases still
10:15 < marlun> SubStack: It's still very nice and simple when you know how to do it. :) Will take a look at the browserify code later to learn some.
10:23 < SubStack> the code is pretty shit
10:23 < SubStack> a lot of things are going to disappear in future releases too
10:32 < magge> blakmatrix: sorry, was disturbed, i will try that our, thanks for the tip!!
10:43 < djazz> the data event on stdout don't get called until the process exits, bug? http://pastebin.com/yWAGKZ0k
10:43 < djazz> with child_process.spawn
10:47 < djazz> Hmm, it seems to work on my laptop, but not on my RPi
10:48 < djazz> ARM bug?
10:51 < djazz> oh, nvm..
10:51 < djazz> i thought it worked on laptop, didnt
10:51 < djazz> data event still gets fired right before exit event
11:04 < mAritz> djazz: can you boil it down to something that doesn't use rfcomm, so others can test your code on their machines easily? because for all i know from that pastebin this might be a problem with rfcomm. (though, i have had problems with child process stdout and have heard it's a bit of a clusterfuck)
11:48 < Akaskero> hi
11:48 < Akaskero> Front end web dev struggling with node install.
11:49 < Akaskero> Got node from GIT
11:49 < Akaskero> Tried running .configure
11:49 < Akaskero> need Python
11:49 < Akaskero> Got python, tried running ./configure
11:49 < Akaskero> And get $ /usr/bin/env python2.7: no such file or dir
11:52 < Akaskero> I think I need to add python into my environment vars
12:02 < deoxxa> Akaskero: platform?
12:10 < RLa> can someone test jade 0.26.2, it doesn't work for me
12:10 < RLa> SyntaxError: Unexpected identifier for any input
12:10 < RLa> 0.26.1 is fine
12:52 < jonas_lund> hi
12:52 < jonas_lund> anyone has a nice insight/article covering node-mysql connection handling, esp on running apps, keeping connections alive.. etc?
12:53 < wingie> what is the mime type for array data?
12:57 < djazz> yay, running RPi on 4xAA (5V, 500mA output) from my charger
12:57 < djazz> keyboard, mouse, ethernet and bluetooth - all working
12:58 < djazz> work channel sry
12:58 < djazz> ^_^'
13:01 < mmalecki> djazz: nice anyway :)
13:01 < djazz> got NXT <-> bluetooth <-> nodejs working
13:01 < djazz> will run this on the RPi
13:02 < djazz> will get smaller than my NetbookBot version, replacing the netbook with the raspberry pi
13:02 < mmalecki> netbookbot?
13:02 < mmalecki> this is getting really interesting
13:03 < djazz> https://plus.google.com/100598160817214911030/posts/7QULJTntKG1
13:03 < djazz> https://plus.google.com/photos/113878221242502678865/albums/5707058981040292657/5708739946850513714
13:04 < djazz> @mmalecki
13:04 < deoxxa> damn that's cool
13:04 < deoxxa> is that an original AAO?
13:04 < djazz> yes
13:04 < deoxxa> i had one of them, it was a joy to use
13:04 < deoxxa> :D
13:04 < djazz> the 8 GB SSD version
13:04 < djazz> upgraded it to 1.5 Gb RAM
13:05 < djazz> I should have recorded a video of the robot in action..
13:05 < mmalecki> ircretary: tell tmpvar to check out https://plus.google.com/100598160817214911030/posts/7QULJTntKG1, if you haven't seen it yet
13:05 < ircretary> mmalecki: I'll be sure to tell tmpvar
13:05 < deoxxa> yeah, i had the 80GB HDD one, but i swapped it out for a 320GB drive and also upped my ram to 1.5GB
13:05 < mmalecki> djazz: now that's awesome
13:06 < tuhoojabotti> cool bot
13:06 < djazz> check out the other pics in the gallery
13:06 < tuhoojabotti> I want to make one too. :P
13:06 < djazz> it use skype for the video+sound transmission
13:07 < deoxxa> i have a heap of these 3G router things sitting around at work - they have 256MB ram and a CF card for storage - i should set up a bunch of them with arduinos, wheels and webcams
13:07 < bindi> hey, I built node.js v8 and did "npm install socket.io" - where can I find socket.io.js now?
13:08 < deoxxa> http://www.calyptech.com/products/ifwt-03/ << this thing :3
13:08 < bindi> remembered the "find" command
13:08 < bindi> /tmp/build/node/node_modules/socket.io/lib/socket.io.js
13:09 < bindi> I went by the install guide on github wiki, is it good that the modules are stored on /tmp?
13:10 < bindi> ahh it was npm that installed them there
13:15 < bindi> Error: Cannot find module './lib/socket.io'
13:16 < bindi> gah this whole    thing is a moess
13:16 < bindi> mess
13:18 < bindi> got it working now :|
13:38 < TehShrike> SubStack: please forgive my ignorance, but could you tell me when someone should consider SockJS versus Socket.IO?
13:38 < TehShrike> If I understand correctly, they seem to perform functions that are at least similar
13:39 < SubStack> TehShrike: sockjs does a single thing
13:40 < SubStack> it just gives you a stream
13:40 < SubStack> socket.io gives you an event emitter api
13:40 < SubStack> with first-order callback arguments supported
13:40 < SubStack> if you need precisely that go with socket.io
13:40 < SubStack> well and socket.io has a bunch of stuff that's very hard to turn off
13:40 < SubStack> logging, reconnection logic
13:41 < TehShrike> aah, ok
13:41 < tuhoojabotti> how do you make your own streams?
13:41 < SubStack> anyways socket.io is dead to me now
13:41 < TehShrike> oooh?
13:41 < tuhoojabotti> the api doc isn't very informative about that
13:41 < TehShrike> Too heavy for you?
13:41 < SubStack> TehShrike: yes and way too much work when it changes
13:41 < TehShrike> I haven't used it yet, but lots of people seem to be using it
13:41 < TehShrike> hmm
13:41 < SubStack> I'm using shoe from now on: http://github.com/substack/shoe
13:42 < SubStack> it's a very thin wrapper on top of sockjs to give it consistent streaming
13:43 < SubStack> and you can just do require('shoe') with browserify too
13:43 < SubStack> it returns a readable/writable stream
13:55 < TehShrike> How do you usually use it?  Do you send JSON back and forth?
13:57 < SubStack> TehShrike: I just wrote it and so far I only use it with dnode https://github.com/substack/dnode#dnode-in-the-browser
13:58 < deoxxa> SubStack: socket.io does a pretty good job of operating in the presence of crappy corporate firewalls and such - how does socks perform in that regard?
13:58 < SubStack> but the plan is to use a multiplexer to put dnode rpc streams on the same stream as other kinds of streams
13:58 < TehShrike> ah yeah... dnode would make a lot of sense
13:58 < SubStack> deoxxa: socket.io has plenty of problems on that front too I assure you
13:59 < deoxxa> oh i know, i've hit a bunch of them (specifically on my boss's laptop... MORE TOOLBARS!!1!11)
13:59 < deoxxa> but in general, it copes quite well so long as it's not encumbered on the client side
14:03 < einaros> SubStack / deoxxa: for what it's worth, guillermo does have a few nice things coming to fix socket.io
14:03 < deoxxa> is one of the fixes "turn off the braindead default logging"?
14:04 < deoxxa> because seriously, wat
14:04 < einaros> deoxxa: if it isn't: pullreq
14:09 < SubStack> deoxxa: I know right?
14:09 < SubStack> and it hard to turn off properly without the whole thing blowing up
14:10 < SubStack> and the options are poorly documented and scattered
14:12 < mmalecki> deoxxa++
14:12 < mmalecki> I personally hate socket.io for stupid fallbacks and the API
14:12 < mmalecki> well, hate may be too much
14:12 < mmalecki> but I dislike it
14:13 < SubStack> mmalecki: have you seen http://github.com/substack/shoe yet?
14:13 < mmalecki> SubStack: no, taking a look
14:14 < mmalecki> SubStack: that's nice
14:18 < SubStack> oh beh https://github.com/substack/shoe/issues/1
14:18 < SubStack> fuck websockets
14:18 < SubStack> streams 4 life
14:20 < mmalecki> I mean, I kinda like websockets
14:21 < mmalecki> that actually gives me an idea.
14:24 < mmalecki> SubStack: I'll get you one sweet API :)
14:25 < SubStack> mmalecki: there's already streams
14:25 < mmalecki> yes!
14:25 < mmalecki> stream-like API for websockets
14:25 < mmalecki> on the client
14:27 < SubStack> mmalecki: that's what shoe is
14:27 < SubStack> look at it again
14:27 < mmalecki> SubStack: yeah, but it uses SockJS
14:27 < SubStack> so?
14:27 < SubStack> sockjs is just the websocket api with fallbacks
14:28 < SubStack> even though the websocket api is stupid
14:28 < mmalecki> isn't it a reimplementation?
14:28 < mmalecki> that's what it sounds like
14:28 < Nibelung> Got someone on another channel asking why it's "node.js" and not "nodejs". Anyone got a reasoning for that? (sounds silly yes.)
14:28 < SubStack> no it uses the actual one or falls back
14:32 < mmalecki> einaros: btw, why didn't you go with stream API for ws
14:32 < mmalecki> ?
14:33 < mmalecki> einaros: if you want a refactor, I can totally do a pull request for you
14:33 < mmalecki> I think many people would feel better
14:45 < dr0id> didn't realize this small app is gonna take more than a few hours
14:53 < Naeblis> In my express app, I'm currently fetching and parsing JSON from a single data.json file. How can I automate the app to look into api.domain.com/me of every user to fetch the JSON?
14:56 < benvie> help help node-migrator-bot is stealing everything
14:57 < benvie> man who let that guy out
15:09 < djazz> possible to use the websocket module "ws" together with a http server?
15:09 < djazz> on same port
15:11 < djazz> nvm, found it
15:26 < creationix> djazz: raspberry pi, node, and netbooks, now you're speaking my language
15:26 < djazz> :D
15:26 < djazz> it uses websockets for the remote interface too
15:26 < creationix> I had the original EEEpc 701 4G surf
15:27 < creationix> currently I'm playing with a raspberry pi
15:27 < creationix> if you use archlinux, node is in the repo pre-compiled
15:27 < djazz> i know
15:27 < djazz> i tried arch, but use debian wheezy atm
15:27 < djazz> compiling node take almost 2 hours ^^
15:28 < dominictarr> eee pc was cool, I wrote thousands of lines of code on that, looking at 23 lines at a time.
15:31 < creationix> djazz: speaking of, my new SD card just arrived in the mail!
15:32 < creationix> no more 2Mb/sec
15:32 < creationix> now I get 20!
15:32 < djazz> creationix: i will get some new SD cards too
15:32 < djazz> I only have one, that used to be in my netbook in the "Storage expansion" slot
15:33 < creationix> I recommend the TS32GSDHC10E
15:33 < creationix> 32Gb, ~20Mb/sec and hardware error-correction
15:33 < creationix> it's certified for the Raspberry PI
15:34 < creationix> with my standard 2Gb SD card, I've found that I/O was the bottleneck building, not the CPU
15:34 < djazz> aha
15:34 < djazz> what class did that have?
15:36 < creationix> class 10
15:36 < creationix> I'm getting 14Mb/second right now DDind the image
15:36 < creationix> (or is that MB, I never remember the difference)
15:39 < creationix> djazz: sorry, the old one was standard SD
15:39 < creationix> which would be about class 2
15:39 < djazz> yeah, i have class 2 too
15:43 < creationix> djazz: btw, have you seen my luvit project?  It's like node, but in lua.  Which means it uses a lot less ram for small projects
15:43 < creationix> it's nowhere as mature as node.js though
15:44 < djazz> creationix: haven't
15:45 < xat-> creationix: nice
15:51 < mattrobenolt> Anyone know what the deal with node-migrator-bot is?
15:51 < mmalecki> mattrobenolt: blakmatrix wrote it to migrate from `sys` to `util`
15:52 < mattrobenolt> mmalecki: Is that all it does? It does it check over other things? I just noticed that it forked a bunch of my repos, haha
15:53 < mattrobenolt> mmalecki: Nevermind, I found a blog post about it. :)
15:53 < mmalecki> mattrobenolt: it *could* do more :)
15:53 < mmalecki> https://github.com/blakmatrix/node-migrator-bot/issues
15:56 < marlun> Whats the recommended way of handling dependencies in modules you require with browserify? For example Backbone.js requires underscore and jquery. I know about browserify-jquery/backbone but would prefer not to use them at first? Should I read them and use bundle.prepend() to add them before the rest of the code? 
15:57 < stan_man_can> I've been trying to figure out node.js and just realized something, if the rest of my app is served by PHP, and I have one page that I need to allow the server to push to the browser, does that one PAGE need to be fully handled by node?
15:58 < mattrobenolt> mmalecki: Any idea on how long it is taking/did take to run over all repos in npm?
15:58 < stan_man_can> so that it can create the initial connection?
15:58 < deoxxa> https://github.com/blakmatrix/node-migrator-bot/pull/6 rofl
15:59 < RLa> stan_man_can, i think it does not have to be full page
15:59 < RLa> think of a communication channel
15:59 < RLa> ajax longpoll/websocket
15:59 < vexii> deoxxa: thats one awsome bot xD
16:00 < stan_man_can> RLa: you know what? I _just_ woke up, and this was the first thing that popped into my head after morning nooky, and now I'm embarassed
16:00 < RLa> heh
16:00 < stan_man_can> I think I just used you guys as my rubber duck
16:00 < mAritz> is there any way to stop a redis client that can't connect to stop from trying to connect? (without killing the entire process.)  client.end() does that but then i get a connect ENOENT in net.js...
16:00 < stan_man_can> ( http://c2.com/cgi/wiki?RubberDucking )
16:00 < vexii> marlun: dont you just require youre modules like normal?
16:01 < deoxxa> stan_man_can: we've got a couple of sites like that at work - feel safe in the knowledge that you can serve the actual html however you like and just let the javascript connect to your backend :)
16:02 < SubStack> marlun: if you just use the ones built with browserify then everything will just work
16:02 < SubStack> npm handles all the dependencies
16:02 < farhad2161> hi, i am using socket.io but after about 2 hour it take 80% cpu usage,why? http://pastebin.com/3Be3ycae
16:02 < SubStack> and browserify traces the depedency graph by looking at the require()s
16:04 < stan_man_can> deoxxa: Yeah that actually makes a lot of sense I really don't know why I thought otherwise :$
16:04 < deoxxa> heh
16:04 < Fabryz> meh finally finished also the prototype for grabbing all images from twitter with certain params http://tweemages.nodejitsu.com/
16:05 < natasha> looking for a node developer with the potential to move into the CTO position for a new startup. please PM me if interested. thank you.
16:07 < marlun> SubStack: But that will only work as long as they are available as an npm module, and I guess I only have the choice to use the same version as the module is using. 
16:08 < SubStack> marlun: if you find something that's not on npm you can publish it yourself
16:08 < SubStack> or vendor them and state the dependencies explicitly with require()s
16:08 < mAritz> SubStack: any idea how to stop a node_redis client from re-connecting once the connection fails?
16:08 < farhad2161> and here is fu : http://pastebin.com/rxR4QG6q
16:08 < SubStack> mAritz: I haven't messed with redis
16:09 < mAritz> whaaa? i thought you were an all-knowing node.js wizard! i'm disappointed! :P
16:09 < marlun> SubStack: What do you mean with "vendor them"?
16:09 < mattrobenolt> farhad2161: Which part is taking 80% CPU? 80% of the server? Or the browser running the client?
16:10 < farhad2161> mattrobenolt: in my server,node take 80 % cpu usage
16:10 < farhad2161> mattrobenolt: we should close sockets in our code?
16:10 < mattrobenolt> farhad2161: While the app is not doing anything? Or is it in production under load?
16:10 < mattrobenolt> farhad2161: I honestly don't know, I'm not a Socket.IO expert by any means. Just trying to get more information for others.
16:11 < farhad2161> mattrobenolt: it is in production with max 150 online user
16:11 < SubStack> marlun: download them into your project and then mess with them
16:12 < farhad2161> an Socket.io expert please help me
16:12 < farhad2161> *a
16:12 < mattrobenolt> farhad2161: Where's the socket.io code? The pastebin you posted doesn't have anything with socket.io.
16:12 < farhad2161> mattrobenolt: http://pastebin.com/3Be3ycae
16:12 < circlicious> why cant noide run on more than 1 core?
16:13 < mattrobenolt> circlicious: Cluster.
16:13 < mattrobenolt> It's built in.
16:13 < farhad2161> //Handle Client Request io.sockets.on('connection', function (socket)  
16:13 < SubStack> circlicious: just spin up more processes or use cluster
16:14 < mAritz> hah, found it. to stop node_redis from retrying a failed connection endlessly pass max_attempts: 10 in the options to createClient. (obviously you can set any numer, 10 just being an example)
16:14 < deoxxa> natasha: no juicy buzzwords to entice us?
16:14 < circlicious> heh, i dont want to use more, neither i am good enought o learn about clusters and use them i guess. i am just wndering why is it like that?
16:15 < SubStack> circlicious: because giving each request its own thread automatically doesn't scale very well
16:15 < mattrobenolt> circlicious: MOST programming languages work like that. You typically don't get multiprocessing or threading for that matter for free.
16:15 < SubStack> it's very memory hungry
16:15 < natasha> deoxxa: would potential equity be a nice buzzword to entice you?
16:16 < circlicious> ok
16:16 < SubStack> anyways node is low level so you've got to hack this stuff up yourself
16:16 < SubStack> natasha: "potential" equity hahahahaha
16:16 < mattrobenolt> You would need to write code to create a new process/thread, which Node gives you the ability to fork off a process with cluster.
16:16 < deoxxa> natasha: lol'd
16:16 < natasha> wanted to give you a good laugh ;)
16:17 < SubStack> natasha: I think people in this channel would be more enticed by buzzwords like "autonomy" and "freedom to work on open source"
16:17 < dr0id> o ruby
16:17 < SubStack> without putting up with a bunch of bullshit from people who don't know how open source works
16:18 < dr0id> I don't know how open source works, who can teach me?
16:18 < SubStack> dr0id: it's very simple, you `npm publish` and `git push` tiny modules to github
16:18 < natasha> substack: i will definitely utilize those keywords in my next attempt haha thank you...
16:18 < SubStack> dozens of them
16:19 < dr0id> :)
16:19 < SubStack> natasha: most people who recruit technical talent are completely clueless about what matters to good developers
16:20 < AllStruck> good developers mostly care about candy no?
16:20 < SubStack> natasha: another protip: let people work remotely and your candidate pool will be so much bigger
16:20 < SubStack> I know a lot of devs who wouldn't even consider a gig where they had to transport themselves to a physical place every day for no reason
16:21 < natasha> substack: that much I definitely gathered, the position is remote
16:21 < SubStack> see, you should have opened with that part!
16:22 < tuhoojabotti> How do I see what events Node still has?
16:22 < tuhoojabotti> As to why it's not exiting
16:22 < tuhoojabotti> oh right, stdin
16:23 < natasha> substack: live and learn, will definitely apply your help when i try again in a couple of hours haha
16:23 < natasha> substack: thank you for your help though -- it is appreciated 
16:25 < Bennit> Hi
16:25 < natasha> Hello
16:25 < Bennit> Is there a dedicated channel for jade in node.js?
16:26 < creationix> Bennit: don't know about jade, but there is an express channel
16:26 < Bennit> if not: http://pastebin.com/m60Qxji6 # this is layout.jade
16:26 < Bennit> oh
16:26 < Bennit> express is indeed used
16:27 < Bennit> i'll go to express with the Q
16:27 < Bennit> thanks
16:27 < creationix> Bennit: this channel is fine too, just depends on where people are to help
16:27 < creationix> I don't know express or jade very well, so I'm no good
16:29 < Bennit> posted it in #express, so I'll wait there for an answer first :)
16:37 < AllStruck> Bennit: there are hundreds fewer people in express, I would try asking here too
16:38 < AllStruck> in #express *
16:38 < Bennit> it's solved, thanks though
16:38 < Bennit> single&double quote mixup _._
16:38 < AllStruck> I see cool
16:40 < mattrobenolt> And main contributors to nock floating around?
16:50 < marlun> SubStack: Not sure if you have insight into the backbone-browserify module but I'm still getting an error inside backbone where $ is undefined, even though I've required both jquery-browserify and backbone-browserify.
16:51 <@maxogden> wait...backbone already runs in the browser
16:51 <@maxogden> why would you need to browserify it
16:53 < marlun> maxogden: I had problem with its dependency on jquery and underscore so instead of modifying the backbone code with require() code I could use the backbone-browserify module.
16:54 <@maxogden> oh so youre just using npm to manage browser deps
16:56 < SubStack> marlun: when you require('jquery-browserify') it returns an object
16:56 < SubStack> it doesn't pollute your namespace forever like in ruby or the browser
16:57 < SubStack> put this at the top of backbone: var $ = require('jquery-browserify')
16:58 <@maxogden> SubStack: my friend tim root, who does all the comics for stumptown coffee, is wearing red chucks right now and i just showed him your shoe illustration ahha
16:58 <@maxogden> SubStack: http://timroot.tumblr.com/
16:58 <@maxogden> SubStack: there is something about comics and red chucks...
16:59 < marlun> SubStack: Then I'm back at modifing the dependency files which I was supposed to get away from if using the xxx-browserify modules? :) 
16:59 < SubStack> haha
17:01 < Sorella> marlun, you can, probably, just write a filter that does that for you.
17:02 < Sorella> It's difficult to enforce modularity on stuff that wasn't designed with modularity in mind =/
17:03 < CIA-75> node: isaacs v0.6 * r8a946c2 / (4 files): benchmark: Backport improvements made in master - http://git.io/BxC98A
17:04 < marlun> Sorella: a filter for browserify?
17:04 < Codedninja> Anyone has a socket.io server and client all on server side? I wanna make server communicate between each other
17:05 < deoxxa> Codedninja: socket.io-client sucks - hard
17:05 < Codedninja> Really? Why so?
17:07 < deoxxa> Codedninja: it's very rarely tested outside of a browser, and in my experience has been broken when running under node more often than it's been working
17:08 < Codedninja> Hm.. Any other ideas then?
17:09 < deoxxa> depends on what you want to do, exactly
17:09 < Codedninja> I want to do a map reduce kinda of thing across server
17:09 < Codedninja> servers*
17:09 < deoxxa> you'll probably like dnode then
17:09 < deoxxa> https://github.com/substack/dnode
17:10 <@maxogden> https://github.com/substack/shoe
17:10 < deoxxa> i can imagine that + https://github.com/caolan/async would be pretty neat
17:13 < Sorella> marlun, yep: https://github.com/substack/node-browserify/blob/master/doc/methods.markdown#bfilterfn
17:14 < Sorella> (Also, that's awesome for doing macro expansion at compile time :3)
17:15 < mattrobenolt> What's the best way to assert equallity between the values of two buffers?
17:16 <@maxogden> string em
17:16 < SubStack> mattrobenolt: http://search.npmjs.org/#/buffer-equal
17:17 < mattrobenolt> SubStack: Ahh, I see. You just have to compare each bit manually.
17:17 < mattrobenolt> Err, byte.
17:17 < SubStack> well you compare the length and the types first
17:17 < SubStack> anyways just use that module it has tests
17:17 < mattrobenolt> Right, right.
17:18 < rlidwka> I need a cache module that handles overlapping requests automatically... can you advise something?
17:18 < mattrobenolt> SubStack++
17:22 < mattrobenolt> Can anyone see anythign glaring wrong with this? https://gist.github.com/2979084 I'm using it so I can test some UDP stuff.
17:23 < mattrobenolt> Code's ugly, just making sure it makes sense.
17:35 < marlun> I'm not sure, the way Stitch.js gets around this problem seems easier. Just give it an array of dependencies and they get added to the bundle. Maybe I'm just trying to use browserify for something it's not actually made for. I don't actually want to use any npm modules right now :) I just want the commonjs require in my browser code and the bundling of all the small js files including templates.
17:36 < SubStack> marlun: it sounds like you want both modules written in commonjs style and ones not written that way
17:36 < SubStack> which is easy, just cat file1.js file2.js <(browserify entry.js) > bundle.js
17:40 < TehShrike> Oh man, leftover sandwiches are awesome
17:43 < marlun> SubStack: I'm sorry but I don't understand the "cat file1.js file2.js <(browserify entry.js)" part?
17:44 < SubStack> marlun: that just puts your files like jquery and backbone in front of your browserify code
17:44 < SubStack> in the final bundle
17:48 < Sorella> ugh, cat for bundling libraries!
17:48  * Sorella used to put a semicolon at the end of each file just to be sure, but that's a terrible way of doing such stuff.
17:53 < marlun> I still don't get it, the concat of jquery etc and putting it before the browserify code do you mean I should do that manually or is that something browserify can do for me?
17:54 < SubStack> you can do that with cat
17:54 < SubStack> why should browserify do that for you?
17:54 < SubStack> use cat
17:54 < Codedninja> Substack: With dnode, can I do the following? "Server gives client an url then client does a request then gives it back to server"
17:55 < SubStack> um yes?
17:56 < Codedninja> Is there an example?
17:56 < SubStack> of precisely the thing that you just mentioned? no
17:56 < SubStack> just use callbacks
17:56 < SubStack> everything works
17:56 < deoxxa> i like this new angry SubStack. has more flavour.
17:56 < SubStack> just don't use return values, use callbacks instead
17:56 < Codedninja> Not what I want but server starting the first function
17:57 < SubStack> Codedninja: 'starting' as in the server calls the client to start a transaction?
17:57 < SubStack> just do d.on('remote', fn) on the "server" code
17:57 < Codedninja> Yes
17:57 < SubStack> there's no difference at all
17:59 < SubStack> they are just readable/writable streams
17:59 < SubStack> there is no difference between clients and servers, that's just a convention we adopt for convenience
18:01 < austinbv> where on the express page do they talk about the structure generator
18:03 < Codedninja> Alright, one more thing. Just by skimming the readme, can you "emit" to certain clients?
18:07 <@maxogden> SubStack: https://github.com/maxogden/domnode/tree/master/videostreaming-demo
18:07 <@maxogden> SubStack: uses shoe
18:07 <@maxogden> SubStack: is hella slow though, figuring out how to make the video streaming part faster
18:09 < SubStack> cloning
18:09 <@maxogden> you gotta use canary or chromium
18:09 <@maxogden> for the broadcast part
18:10 < SubStack> getUserMedia not supported in this browser
18:11 <@maxogden> firefox has it i think
18:13 <@maxogden> ahh firefox 14, 13 is stable
18:13 <@maxogden> SubStack: but basically im doing getUserMedia -> <video> -> <canvas> -> websocket
18:13 <@maxogden> SubStack: cause thats what you have to do to get a stream of image data
18:14 <@maxogden> SubStack: https://github.com/maxogden/domnode-usermedia does that part
18:14 <@maxogden> SubStack: but it would be cool to figure out a delta algorithm for transmitting the images
18:15 < SubStack> browser-side compression?
18:16 <@maxogden> yea
18:17 < SubStack> maxogden: maybe this? http://badassjs.com/post/17218459521/webm-and-webp-hand-ported-to-javascript-for-all
18:17 <@maxogden> SubStack: http://badankles.com/?p=209 seems to not use compression but gets 30fps
18:18 < SubStack> oh it's only a webm decoder, not an encoder
18:18 <@maxogden> thats fine, you have to use canary right now to broadcast anyway
18:18 <@maxogden> and it supports webp serialization of canvases
18:18 < SubStack> is the viewing or the uploading the slow part?
18:19 <@maxogden> not sure
18:19 <@maxogden> SubStack: did you get it to run?
18:19 < SubStack> trying in firefox one sec
18:20 < SubStack> not supported there either
18:20 < SubStack> in the version I'm running at least
18:21 <@maxogden> ya you need ff 14 or chrome 22
18:22 <@isaacs> SubStack: are you using 'resolve' anywhere?
18:22 <@isaacs> SubStack: i wanna pull this into read-installed so that it is aware fo parent dirs and symlinks and the like
18:22 <@isaacs> SubStack: but it looks like there's no async version
18:22 < SubStack> isaacs: browserify uses it
18:22 < SubStack> and subdeps
18:23 < SubStack> isaacs: correct, I never got around to that part
18:23 <@isaacs> also, i think it can maybe be simplified a little bit.
18:23 < austinbv> I am trying to include hamljs in my node project, it's added to my package.json, npm linked and installed, but when I require hamljs I get a cannot find module error
18:24 < austinbv> do you have to do anything special to require in node after adding to package.js
18:24 <@isaacs> SubStack: for instance, exports.core should be Object.keys(process.binding('natives'))
18:24 < austinbv> express just worked :/
18:24 <@isaacs> SubStack: er, .reduce(function (acc, x) { acc[x] = true; return acc }, {});
18:25 < SubStack> oh that is handy
18:25 < SubStack> except I'm also using resolve in the browser I think
18:25 < austinbv> isaacs: have you ever thought of adding the ability for npm to add local npm binaries to $path?
18:25 < SubStack> I should just change browserify to dump into process.binding('natives')
18:26 <@isaacs> austinbv: no, but you can add node_modules/.bin to your PATH
18:26 <@isaacs> austinbv: it wouldn't work, since you can have lots of conflicting stuff installed in various local places.  that's sort of the point
18:27 <@isaacs> austinbv: if you think you need this for a {"scripts":{"test":"blahh"}} thing, then you're wrong: it'll be in the PATH already
18:27 <@isaacs> austinbv: when runing `npm test` that is
18:28 < austinbv> right
18:28 < austinbv> no just convience I added to my zshell https://gist.github.com/2976264
18:28 <@isaacs> SubStack: would you have a use for an async resolve?
18:30 <@isaacs> austinbv: you can just do `export PATH=node_modules/.bin:$PATH` in your shell's init script
18:30 <@isaacs> austinbv: paths can be relative there
18:30 <@isaacs> at least, in bash and zshrc
18:30 <@isaacs> and execvp
18:31 <@maxogden> SubStack: it seems that the capture is the slow part
18:31 < tbranyen> timeupdate is slow yeah
18:31 < tbranyen> maxogden: is that what you're using to transfer from video to canvas?
18:32 < austinbv> isaacs: I was getting warnings when I has a relative path
18:32 <@isaacs> austinbv: oh, ok
18:33 <@isaacs> austinbv: i usually just make it a package.json 'scripts' member, or install whatever it is globally to use it on the cli
18:33 <@isaacs> austinbv: most often via `npm link`
18:33 < austinbv> right
18:33 <@maxogden> tbranyen: what is timeupdate
18:33 < austinbv> isaacs: that would work too
18:34 < TehShrike> isaacs: I don't know if you've heard this yet, but whether you have or not, I would be highly interested in hearing your response to it, especially the part about ball-of-glue/modules in the context of the node.js community http://youtu.be/LH_e8NfNV-c
18:34 < tbranyen> maxogden: event on the video object
18:34 < austinbv> isaacs: I am a ruby programmer and we try really hard to not install global gems mabye I am carrying that over from there
18:34 < tbranyen> maxogden: are you using setInterval or something else?
18:34 <@maxogden> tbranyen: oh no i am doing setinterval at 33ms (30fps)
18:34 < tbranyen> ah
18:34 <@isaacs> TehShrike: yes, i'm familiar with the ball-of-mud paper.
18:34 < austinbv> I am trying to include hamljs in my node project, it's added to my package.json, npm linked and installed, but when I require hamljs I get a cannot find module error
18:35 <@isaacs> TehShrike: small modules is node's answer to that.
18:35 < austinbv> npm ls shows the package
18:35 <@isaacs> austinbv: it's a good thing to avoid, for sure
18:35 < austinbv> isaacs: yeah
18:35 <@isaacs> TehShrike: by keeping modules small, you keep the balls of mud relatively isolated.
18:36 <@isaacs> TehShrike: and there's much more motivation to document and test them.
18:36 <@isaacs> TehShrike: the thought of writing/maintaining documentation and tests for a 10,000 line piece of code is rather daunting.
18:37 <@isaacs> TehShrike: but for a 100 loc module?  Not so bad.
18:37 <@maxogden> tbranyen: it takes ~140ms to do canvas2dcontext.drawImage and canvas.toDataURL
18:37 <@isaacs> so, write small modules with clearly defined interfaces, tests, and docs.  then assemble.
18:37 <@isaacs> it's a little harder up front, but much easier later on
18:38 < tbranyen> maxogden: man that sucks, not like a webworker can help with that either
18:38 <@isaacs> austinbv: gist, pls.  code, error, packaeg.json, `npm ls` output
18:39 < TehShrike> That fellow seemed to think that most software code sucks, even the ball-of-glue holding many modules together (though I don't remember him elaborating much on that topic)
18:39 < austinbv> isaacs: https://gist.github.com/2979374
18:39 <@isaacs> TehShrike: well, yes, almost all code is terrible.
18:39 <@isaacs> TehShrike: the fact that anything works at all is amazing
18:40 <@isaacs> TehShrike: that's why we must continually fight to minimize the code:functionality ratio.
18:40 < milani> can we use libuv's uv_dlopen to load all shared libraries even those like libpng?
18:40 <@isaacs> TehShrike: often that involves a net reduction in functionality, in order to reduce the code weight by a greater factor
18:40 <@maxogden> tbranyen: i can get it down to ~100ms if i drop the toDataURL quality to 0.1 https://developer.mozilla.org/en/DOM/HTMLCanvasElement
18:40 < TehShrike> mm, that is a good metric
18:40 < milani> that are not compiled for .node
18:40 <@maxogden> tbranyen: but that is still 3x too slow
18:41 <@isaacs> TehShrike: the thing is, it's not just the ratio.  the absolute amount of functionality and code in any one place is *also* hazardous.
18:41 <@isaacs> TehShrike: small modules that do few things, predictably, with standard interfaces.  the Unix philosophy was on to something.
18:42 < perezd> anyone in here working with SVG?
18:42 <@isaacs> austinbv: and the error code?
18:43 < [CSI]Octane> i am getting a bunch of 502 bad gateway errors in Safari on my app but it works just fine on any other browser. Any ideas?
18:43 < austinbv> isaacs: added the error output to the gist
18:43 < staar2> helllo
18:44 < staar2> is there any alternative mobile UI frameworks like jQuery mobile, but for older mobiles like 600MHz and android 2.3
18:44 <@isaacs> austinbv: maybe hamljs is busted?  try `npm cache clean ; npm install hamljs` to re-fetch it?
18:44 < austinbv> isaacs: tried that
18:45 <@isaacs> austinbv: aha: npm WARN excluding symbolic link index.js -> lib/haml.js
18:45 <@isaacs> austinbv: the hamljs package is broken.  tell tj to fix it and re-publish it
18:45 < austinbv> I can probably submit a pull
18:45 < austinbv> good to learn
18:45 <@isaacs> austinbv: it looks like it's already fixed in the repo
18:45 <@isaacs> just needs to be re-published maybe?
18:45 < austinbv> ah
18:46 <@isaacs> austinbv: oh, what node version are you using?
18:46 < austinbv> ah old
18:46 < austinbv> wonder how that happened
18:47 < austinbv> wait no not old 0.6.19
18:47 <@isaacs> austinbv: so, hamljs 0.6.0 still has the issue
18:47 <@isaacs> austinbv: yeah, tj needs to republish.
18:47 < innociv> Are there bugs in node.js itself that would make it eat up 100% of cpu?...
18:47 <@isaacs> hamljs is broken right now
18:47 <@isaacs> innociv: well, if you think that your ability to write an infinite loop is a bug, then yes ;)
18:48 <@isaacs> innociv: i mean, `while (true);` will use a lot of cpu and do nothing
18:48 < innociv> I don't have any infinite loops in my code afaik.
18:48 <@isaacs> afauk
18:48 < innociv> It's something that only happens every few days, or few weeks really.
18:49 <@isaacs> innociv: can you gcore it?  what system is it running on?
18:49 < innociv> System? An Amazon EC2.
18:49 <@isaacs> innociv: if it's on smartos, we can look at what the stack and state is at that point in mdb with a core file.
18:49 <@isaacs> oh, good luck, then
18:49 <@isaacs> linux, i take it?
18:49 < innociv> Oh. Ubuntu
18:50 <@isaacs> i think ubuntu has gcore.  so you can use that to take a core dump, and then look at the stack.
18:50 <@isaacs> but that won't tell you mcuh if it's wedged in JS-land
18:50 < innociv> Yeah, there is no stack with that?
18:50 <@isaacs> innociv: no, there's stack
18:50 < innociv> I'm not sure that'll be very useful..
18:50 <@isaacs> it's just got a lot of V8 gobledegook in it
18:50 <@isaacs> innociv: try it :)
18:50 < austinbv> jade seems pretty similar to hamljs
18:52 < ding> Anyone use cluster? Trying to remove/cancel a 'death' handler that starts replacement workers. I've tried redefining the function but it doesn't seem to replace the previous one.
18:52 < innociv> Okay thanks
18:55 < CIA-75> node: Mathias Bynens v0.8 * r839bf02 / (7 files in 4 dirs): docs: Switch to the asynchronous Google Analytics snippet - http://git.io/M_f-Ew
18:59 < austinbv> how do you serve your static assests like clientside js and css files?
19:01 < Octane_> has anyone here gotten a 502 error with node running through an nginx proxy?
19:03 < AAA_awright> Octane_: It means there's no web server on the other side to handle the request.
19:04 < Octane_> AAA_awright thanks
19:05 < Octane_> AAA_awright other side being my node, correct?
19:05 < AAA_awright> So either your program isn't running, it isn't listening for incoming HTTP requests, or Nginx is opening a connection with to the wrong address/port
19:05 < Octane_> got it thank you. ill keep debugging
19:15 < wingy> isn't there a good generator that creates documentation from markdown?
19:17 < austinbv> express has no documentation on their generator
19:18 < AAA_awright> wingy: I just hand-wrote my own, it's not terribly hard, and probably took less time than figuring out someone else's implementation
19:19 < AAA_awright> wingy: How about Node.js itself
19:19 < wingy> AAA_awright: what do you mean>
19:19 < wingy> i need  a generator
19:19 < wingy> since i dont want to write html
19:19 < AAA_awright> wingy: How do you think Node.js generates its documentation...
19:20 < wingy> have no idea
19:20 < AAA_awright> Check in the doc/ directory
19:21 < wingy> how are they generating it?
19:21 < wingy> dont tell me by hand
19:22 < AAA_awright> wingy: by Makefile, look for "doc:" in ./Makefile
19:22 < AAA_awright> Which in turn depends on the node binary and the output directories, etc
19:23 < wingy> ble .. doesn't seem to be for others
19:36 < austinbv> is it convention to put commas on the second line in json?
19:56 < saschagehlich> hey
19:57 < saschagehlich> is there a way to force HTTP.Client to use a specific network interface?
20:00 < hish> hi is there anybody use mojito ? 
20:02 < wingy> "Whenever possible, prototype in an interpreted language before coding C."
20:02 < wingy> from the art of unix programming
20:07 < magge> i have some directory names with norwegian letters in them, when i read them with fs.readdir and try to do fs.stat on on it i get ENOENT. this is on linux. and it works for dirs without crazy letters. has anyone else expereniced this?
20:11 < magge> heres the code where i experience the problem: http://pastie.org/4139378
20:22 < wingy> is there a way to programatilly watch a folder recursibely for changes in your node scripts?
20:23 < saschagehlich> is there a way to force HTTP.Client to use a specific network interface?
20:23 < saschagehlich> wingy: https://github.com/mikeal/watch can do that for you
20:28 < bnoordhuis> saschagehlich: re network interface, yes in 0.7 / 0.8
20:28 < bnoordhuis> not in v0.6 though
20:29 < wingy> saschagehlich: seems very unmaintained
20:29 < saschagehlich> what's the "stability" status of 0.7, bnoordhuis?
20:29 < wingy> but it works at least .. with some delay
20:29 < bnoordhuis> saschagehlich: the stability is that 0.7 is finished and will be called 0.8 starting monday
20:29 < saschagehlich> bnoordhuis: are there docs for 0.7 / 0.8 yet?
20:30 < bnoordhuis> saschagehlich: sure, check nodejs.org
20:30 < bnoordhuis> magge: it's a character encoding/decoding issue
20:31 < bnoordhuis> magge: if the path is encoded in e.g. iso-8859-15, you'll run into trouble because node only understands utf-8 and ascii
20:32 < bnoordhuis> be glad you don't work on windows, it's even worse there with its code page mess
20:32 < magge> bnoordhuis: ok... but isnt the utf-8 string from readdir compatible with a later stat as they both live in the utf-8 world ?
20:34 < bnoordhuis> magge: the problem is that the path name gets mangled in readdir. when you try to stat it, you're stat'ing the wrong path
20:34 < saschagehlich> bnoordhuis: i only find 0.6.19 docs there
20:35 < bnoordhuis> magge: e.g. "foo\xc9bar" gets decoded to "foo\xc3\xc9bar"
20:35 < bnoordhuis> saschagehlich: try this: http://nodejs.org/docs/v0.7.12/api/
20:35 < saschagehlich> bnoordhuis: great, thank you
20:36 < magge> bnoordhuis: ok, i see. so basicaly i'd have to make sure my file entries are utf-8 encoded for this to work?
20:36 < bnoordhuis> magge: yeah. it's a shortcoming in node's fs api
20:36 < hish> I need a native nodejs module to login using facebook ? 
20:38 < magge> bnoordhuis: ok, thanks for clarifying.
20:38 < saschagehlich> hish: is that a rhetorical question or a request?
20:38 < simonadameit> does JSON.parse also accept a buffer or will i have to convert to a string first?
20:39 < hish> saschagehlich: a reqest 
20:39 < bnoordhuis> simonadameit: the buffer gets implicitly converted to a string
20:39 < AAA_awright> wingy: Also consider just using HTML tags for markup. It's universal, easy to write, and easy to read.
20:39 < bnoordhuis> simonadameit: which may not always work as you expect so it's best to do the conversion explicitly
20:40 < simonadameit> ok, i guess i will have to do that
20:40 < AAA_awright> wingy: The file Node.js uses is tools/doctool/doctool.js
20:40 < simonadameit> i want to ensure encoding utf8 also
20:41 < hish> saschagehlich: I spend more than hour search about nodejs module that not using express framework  to connect to facebook  
20:41 < saschagehlich> hish: so why are you not using express?
20:41 < hish> saschagehlich: no I am not 
20:42 < saschagehlich> mikeal: ping! when will you implement the `localAddress` option for request?
20:42 < hish> saschagehlich: I am using mojito 
20:43 < owen1> I try to POST to this url - https://browserid.org/verify. using row node i get: getaddrinfo ENOENT and using the request package i get: Content-Type expected to be one of: application/x-www-form-urlencoded, application/json. any clues? http://pastebin.com/iKC0WcXi
21:46 < simonadameit> i want to call a function in node that i received over stdin, now what would be an appropriate context to apply the function?
21:47 < simonadameit> as i understand, each module has its own global object is that right?
21:48 < benatkin> simonadameit: function name or function source?
21:48 < benatkin> simonadameit: either way node.js has your back :) http://nodejs.org/api/vm.html
21:48 < scruz> hi
21:49 < benatkin> hi
21:49 < scruz> i'm receiving a message from amqp and sending it out to the console
21:49 < scruz> i saw it's a Buffer instance
21:49 < scruz> so i tried calling myBuf.toString()
21:50 < simonadameit> benatkin: function name
21:50 < scruz> and the output is now '[object Object]', not Buffer<hexvalue>
21:50 < simonadameit> benatkin: or even path to function
21:50 < scruz> any fix?
21:52 < benatkin> simonadameit: hmm, well I'd grab the source and use the vm api to isolate it
21:52 < simonadameit> hm
21:52 < scruz> i'm viewing the node docs for Buffer.toString().
21:53 < scruz> it should return a string, but it's not.
21:53 < benatkin> scruz: '[object Object]' is a string, right?
21:53 < benatkin> scruz: seems like that might be what's in your buffer
21:53 < simonadameit> benatkin: what i want to do is more like "implement a repl / shell"  to which there are two main entry points, "eval code" and "call function"
21:54 < scruz> actually, no
21:54 < simonadameit> benatkin: so i need a stable context object for that
21:54 < scruz> i'm sending plain text from python to node via amqp
21:54 < scruz> it gives '[object Object]' for all inputs, anyway, no matter the content
21:54 < benatkin> scruz: I'm saying that I have my doubts that the buffer has the expected content
21:55 < scruz> it does have the expected content
21:55 < benatkin> scruz: how do you know? what does buf.length return?
21:55 < scruz> if i remove the call to toString(), i see the character codes for the individual characters
21:55 < simonadameit> benatkin: that vm thing is great, it will have everything i need, thanks! :)
21:56 < benatkin> scruz: hmm
21:56 < scruz> like i entered 'node' at the python end, and it printed out Buffer<64 65 xx zz> on the node end
21:56 < benatkin> simonadameit: you picked a good platform for this. clojure would also be good.
21:57 < simonadameit> benatkin: hehe, well i dont like the jvm
21:57 < benatkin> scruz: hmm, well toString does have a hex representation
21:58 < benatkin> er, the string [object Object] does
21:58 < simonadameit> benatkin: so if you must know, actually im not building a repl per se, but a "port" which does erlang <-> node communitation, so you can eval and call node from erlang :)
21:59 < simonadameit> i will push it on github if i have something worth sharing
22:00 < benatkin> scruz: that doesn't appear to be it, though
22:00 < simonadameit> though beware its my first javascript gg
22:00 < scruz> i know amqp uses binary for the underlying communication
22:01 < scruz> just wondering why i can't seem to convert to utf8 plain text in node :)
22:01 < benatkin> scruz: new buffer.Buffer('6465', 'hex').toString() returns 'de'
22:03 < benatkin> scruz: how long is your buffer, anyway. what's buf.length return?
22:04 < scruz> a few, please
22:05 < scruz> oops
22:05 < scruz> it returns undefined
22:08 < nwillems> Hello. this might be more of a JS question but. When working with Redis, I would like to use SETNX, and if the given key is taken, try another one. As I see this, it could result in DEEP nesting of function calls, is there a smart way?(If the problem has a name, I'm very willing to google that instead)
22:08 < scruz> my bad
22:08 < scruz> i need sleep
22:08 < scruz> found the issue :D
22:09 <@maxogden> nwillems: any js can become deeply nested, the solution is to name your functions and make them modular and try to not nest more than 2 or 3 times
22:09 <@maxogden> nwillems: and use things like streams and event emitters to manage flow control
22:09 < scruz> benatkin: thanks
22:09 < scruz> i knew i should have been sleeping an hour ago
22:09 < scruz> ok. sleepy time.
22:11 < nwillems> maxogden: So I should use an event emitter - that emits FAIL when the key is taken, and when it finally succeeds emits end or some other appropriate value?
22:13 < thanpolas> nwill, have the func, recursivelly call itself with a new key every time it finds the key is taken, have a var one scope above that keeps a recursion count and after x retries, exit / throw an error
22:15 < nwillems> thanpolas: Even being a functional solution, it seems a bit dirty :-)
22:16 < thanpolas> nwill you can convert that principle and apply it to your style of coding
22:16 < thanpolas> if the goal is to find the next available key... or i understood you wrong
22:18 <@maxogden> nwillems: make a function called setKey that takes a key and a callback
22:19 <@maxogden> nwillems: call the callback with an error or with the new key when it is successful
22:19 <@maxogden> nwillems: then implement the setkey function by doing the algorithm you described above, breaking it down into small named functions when you can
22:19 <@maxogden> nwillems: pretty soon you'll have a new node module taht you can publish to npm :)
22:20 < nwillems> thanpolas: You understood me right, the goal is to find next available key. And yes, to have some stop-condition is indeed a good idea.
22:21 < nwillems> maxogden: the callback thingy seems like a good idea. One thing I haven't yet understood, everyone "just" publishes modules to npm all the time, or how?
22:22 < thanpolas> grunt helps automate the process of publushing, but yes, everyone "just" publishes
22:25 < simonadameit> is JSON.parse(..) in any way dependent on the context?
22:25 < simonadameit> or does it have any side effects?
22:25 < thanpolas> shouldn't be
22:25 < simonadameit> good :)
22:25 < simonadameit> thx
22:27 < nwillems> thanpolas: So npm could contain all sorts of allready build applications(like wiki, SCM, CMS..), or is there some codex to only stuff useable modules in there?
22:28 <@maxogden> there are like 11,000 modules on npm so there is a little bit of everything :)
23:17 < mattrobenolt> Anyone have any good tips for writing tests, for a mocking library?
23:19 < SubStack> mattrobenolt: I like node-tap: https://github.com/isaacs/node-tap
23:19 < SubStack> for testing
23:19 < mattrobenolt> SubStack: Right, I know how to generally write tests.
23:20 < SubStack> why do you want to mock?
23:20 < mattrobenolt> I'm working on a library for mocking UDP, and I can't wrap my head around how to actually write tests to make sure that things are being mocked properly.
23:20 < mattrobenolt> SubStack: It's not complex by any means: https://gist.github.com/2979084
23:23 < impiratCOM> THE BEST SITE EVER! -->  http://impirat.com
23:23 < impiratCOM> P.S. don't forget to add my link to your site if you have it. It will be very nice for me! (use words "Ñîçäàíèå è ïðîäâèæåíèå ñàéòîâ â Ìîñêâå")
23:31 <@maxogden> SubStack: if im in a module's folder and i do `browserify -r modulename -o bundle.js` why does bundle have require.define("/index.js" instead of require.define("modulename"
23:31 <@maxogden> SubStack: oh wait lemme upgrade and try again before you read that
23:32 <@maxogden> SubStack: ok yeah same behavior on newest browserify
23:36 <@isaacs> ircretary: tell tjholowaychuk to re-publish hamljs without the symlink'd index.js
23:36 < ircretary> isaacs: I'll be sure to tell tjholowaychuk
23:36 <@isaacs> ircretary: thanks
23:36 < ircretary> isaacs: You're welcome :)
23:38 < austinbv> Is it idomatic node to put ,'s on the next line of lists?
23:38 <@isaacs> austinbv: it's idiomatic JavaScript to put ,
23:38 <@isaacs> ,'s in between items in list
23:38 <@isaacs> austinbv: but it's a matter of style and taste.
23:39 <@isaacs> austinbv: different people do it differently.  some of us even use radically different styles for each project we do :)
23:39 < austinbv> I have never seen item1\n, item2 until I started looking at node
23:39 < tbranyen> austinbv: because node hippies adopted it
23:40 < austinbv> is it supposed to be more readable?
23:40 < tbranyen> it was around before node, but it didn't see widestream adoption
23:40 < mattrobenolt> austinbv: It's more to prevent trailing commas.
23:40 < mattrobenolt> Which, is ironic, because that's less relevant in Node, since V8 doesn't care.
23:40 < mattrobenolt> I don't know if there is any other real reason?
23:41 < owen1> how come the res argument of the callback that is called on http.reuest is not listening to the 'end' event in the example? http://nodejs.org/api/http.html#http_http_request_options_callback
23:41 < owen1> also, what's the chunk size? is it always the same in node?
23:42  * isaacs <-- node hippie
23:42 <@isaacs> mattrobenolt: it's not to prevent trailing commas.
23:42 <@isaacs> mattrobenolt: it's to prevent missing commas.
23:42 < SubStack> maxogden: it's a bug I haven't fixed yet
23:42 < mattrobenolt> isaacs: How so?
23:42 <@isaacs> mattrobenolt: [[1,2], [3,4]] very != [[1,2] [3,4]]
23:43 < SubStack> maxogden: it's because of retargetting
23:43 < SubStack> I need to set the targets when you do -r
23:43 < SubStack> but first I need to write a failing test
23:43 <@isaacs> mattrobenolt: commas at the ends of lines are easier to miss than commas at the beginning, and so they are easier to not notice the absence of
23:43 <@isaacs> mattrobenolt: i have some gist with like a gillion idiotic comments on it
23:44 < austinbv> isaacs: would love to see that
23:44 <@isaacs> mattrobenolt: most of them of hte "UR DOIN IT WRONG CUZ JSLINT" variety
23:44 < mattrobenolt> isaacs: I've always gotten hung up when coping and pasting lines from a list or object with a comma at the end, to end up forgetting the last one and then IE yelling.
23:44 < austinbv> man mocha kicks jasmines ass for async atm
23:44 <@isaacs> mattrobenolt: yeah, that too.
23:44 < mattrobenolt> So it made sense to put the comma at the beginning of the line instead to prevent that from happening.
23:44 <@isaacs> mattrobenolt: but that's an easy error to notice.
23:44 < mattrobenolt> Which, now in Node, I don't have to worry. I guess I've never come across the issue of MISSING commas.
23:45 < mattrobenolt> I always have an extra at the end.
23:45 <@Nexxy> Node.js is badass rockstar comma-first tech
23:45 <@isaacs> real coders use 16-space indentation.
23:45 <@isaacs> any less is pansy hipster bullshit.
23:46 <@isaacs> and max 75-char column width.
23:46 <@Nexxy> you beat me to it lol
23:46 <@isaacs> if you need more than 3 indents, then you probably hate america.
23:46 <@isaacs> and are a terrorist
23:46 < chrisdickinson> mattrobenolt: also, V8 does care about extra commas.
23:46 <@isaacs> chrisdickinson: not a single trailing comma, though
23:46 < mattrobenolt> chrisdickinson: Not in a list.
23:46 <@isaacs> chrisdickinson: it follows the spec wrt elision
23:47 < SubStack> maxogden: ok failing test written
23:47 < chrisdickinson> hm!
23:47 <@maxogden> sweet!
23:47 < mattrobenolt> Unless I'm going crazy today, which could be the case.
23:47  * chrisdickinson learned something new.
23:47 <@isaacs> > x = [1,2,3,,]
23:47 <@isaacs> [ 1, 2, 3,  ]
23:47 <@isaacs> > x[3]
23:47 <@isaacs> undefined
23:47 <@isaacs> > x.length
23:47 <@isaacs> 4
23:47 < chrisdickinson> i was thinking of the lovely [,,,,] case.
23:48 <@isaacs> chrisdickinson: yeah, that's fine.  just a lot of undefined's
23:48 < mattrobenolt> Oh yeah, haha, if I did that, shoot me.
23:48 < mattrobenolt> And what isaacs said.
23:48 <@isaacs> it's not an error, but i str something about it being less efficient because V8 goes into a slow path to deal with non-sparse lists.
23:48 <@isaacs> but that is probably outdated information
23:48 < chrisdickinson> still kind of irks me that `forEach` and friends skip undefined members.
23:49 <@isaacs> chrisdickinson: they don't skip undefined values, they skip holes.
23:49 <@isaacs> chrisdickinson: which are different, because JS sucks.
23:49 <@isaacs> > x = [undefined, , 5]
23:49 <@isaacs> [ undefined, , 5 ]
23:49 <@isaacs> > x.forEach(console.error)
23:49 <@isaacs> undefined 0 [ undefined, , 5 ]
23:49 <@isaacs> 5 2 [ undefined, , 5 ]
23:49 <@isaacs> skips the hole, but not the undefined
23:49 < chrisdickinson> would've been a nice ah
23:49 < chrisdickinson> ....
23:49 < chrisdickinson> s/woud've been a nice //g.
23:50 <@isaacs> i prefer my arrays to be unholey
23:50 < chrisdickinson> (was going to say "would've been a nice 'I need to do this 10 times' shorthand.")
23:50 < mattrobenolt> isaacs: So wait, there's a difference between undefined and a "hole"?
23:50 < mattrobenolt> wtf
23:50 <@isaacs> mattrobenolt: INORITE?
23:51 < mattrobenolt> What is the value of the hole then?
23:51 <@isaacs> > new Array(3).forEach(console.log)
23:51 <@isaacs> undefined
23:51 <@isaacs> > a = new Array(3); a[1] = undefined; a.forEach(console.log)
23:51 <@Nexxy> a deleted element?
23:51 <@isaacs> undefined 1 [ , undefined,  ]
23:51 < chrisdickinson> (`Number.prototype.times = function(fn) { return new Array(+this).forEach(fn) }`, but that's not possible due to forEach ignoring holes.)
23:51 <@isaacs> Nexxy: yeah, so, the the thing is that they skip over !(this.hasOwnProperty(n))
23:52 <@isaacs> it's the same as like x = {y: undefined} vs x = {y:1}; delete x.y; x
23:52 < mattrobenolt> I'm glad I don't know a massive amount about Javascript as a language. I feel like I'd get angry.
23:52 <@isaacs> the whole null/undefined/unset thing really is not very well done in JS, imo
23:53 <@isaacs> mattrobenolt: you should read through the spe
23:53 <@isaacs> *spec
23:53 <@maxogden> STREAM ALL THE BROWSER APIS! https://github.com/maxogden/domnode
23:54 < mattrobenolt> isaacs: It may cause me to never write Javascript again.
23:54 < chrisdickinson> maxogden: saw that! based on that, i was working on making dom nodes writable/readable streams.
23:54 < mattrobenolt> chrisdickinson probably reads through it nightly.
23:54 <@isaacs> mattrobenolt: thankfully, that's not an option :)
23:54 <@isaacs> mattrobenolt: js is inescapable
23:55 < mattrobenolt> isaacs: Oh, I can escape it. My day job is mostly Python. I CHOOSE to write Javascript.
23:55 <@maxogden> chrisdickinson: that was part of it but i have since expanded the scope
23:55 <@maxogden> chrisdickinson: you should write a module that does that though so i can list it in maxogden/domnode
23:55 < chrisdickinson> maxogden: something along the lines of `$('input').createReadStream().pipe($('pre#target').createWriteStream())`
23:55 <@maxogden> chrisdickinson: sweeeet
23:56 <@maxogden> chrisdickinson: formstream.js
23:56 < chrisdickinson> i like your version of xhr streams better, though
23:56 <@isaacs> mattrobenolt: well, it's inescapable if you want to use the web.  eventually you'll need to talk to a web browser.
23:56 < chrisdickinson> mine basically creates a stream that "waits" for all of the params to be completed.
23:56 <@maxogden> inputs could stream keyboard events to somewhere
23:56 <@maxogden> so you could pipe that to a validation stream
23:56 <@maxogden> etc
23:57 < SubStack> maxogden: npm install -g browserify@1.13.2
23:57 <@maxogden> SubStack: yayayaya
23:57 < chrisdickinson> so autocomplete works like so: `$('input').pipe(template_stream('/path/to/ac/?q={param}', 'param').pipe(request.get(undefined)).pipe(output_template).pipe($('#output'))`
23:58 <@maxogden> hah
23:58 <@maxogden> yea
23:58 <@maxogden> man i want that
23:58 <@maxogden> my chin is a beardstream
23:58 < chrisdickinson> haha
23:58 <@maxogden> ok LOGGIN OFF
23:58 < mattrobenolt> Programming is counter to everything else. The more I learn, the harder it gets.
23:58 <@maxogden> to venture out into portland before it starts raining again
23:59 < SubStack> maxogden: did that patch fix your bug? [y/n]
23:59 < SubStack> wow browserify has exactly 100 tests
23:59 < SubStack> total ............................................... 100/100
--- Log closed Sun Jun 24 00:00:15 2012
