--- Log opened Tue Sep 25 00:00:16 2012
00:01 < aandy> AviMarcus: use skype?
00:01 < aandy> to call your number i mean
00:01 < AviMarcus> aandy, I can call my number with anything, but it would be SIP not the PSTN system in canada
00:02 < AviMarcus> ah what the hell, might as well try skype too
00:03 < AviMarcus> cute, skype passed along my username as the caller ID name.
00:04 < aandy> if you can find a company with shitty customer support you might be lucky to get a "uuuuh, i'll have to check that, i'll call you back at this number in a bit" :)
00:04 < aandy> my isp/tv provider does that all the time
00:04 < AviMarcus> LOL
00:06 < aandy> how do you check if it's toll free btw? have someone call you, then ask them to check their bill in a month?
00:08 < AviMarcus> no it's a TF number, it just might not connect
00:08 < aandy> ah, okay
00:09 < aandy> JonathanMH: btw, could you try to set the secret in the express session, and *not* in the passport.session? i think that might be it
00:10 < aandy> oh you did, sorry
00:10  * JonathanMH sings "You can find me in the phone book, Just call my toll free number"
00:10  * JonathanMH sings Jesus he knows me, and he knooooows I'm riiight
00:10 < aandy> yeah i'll get right on that
00:11 < JonathanMH> sorry, genesis outburst. aandy I
00:11 < JonathanMH> I'm right now trying to console log a couple of things that are called, to see if there are undefined thingies
00:13 < aandy> specifically see which request is causing "loading forever"
00:15 < JonathanMH> yeah, I don't know how right now, but first I gotta watch Sin City with my girlfriend
00:15 < JonathanMH> she fell asleep last time
00:15 < JonathanMH> thanks so far aandy and good night :)
00:20 < aandy> hehe, you too
00:25 < garthk> Unit testing question re node modules: is there some way to have my tests be able to require('mymodule') without dropping a symlink in node_modules?
00:25 < garthk> Crap. Even a symlink won't work.
00:33 < garthk> Hang on. How come isaacs can require('../') in his test files, but it doesn't work for my module? require('../') gives me Error: Cannot find module '../'
00:37 < garthk> The docs (http://nodejs.org/api/modules.html) hinted that it'd work better if my entry pointâ€¦ AHA! I need lib/ on my entry point.
00:38 < aandy> if (user === 'isaacs') { work = true }
00:41 < janmower> hey are any npm/couchdb hackers around?
00:42 < janmower> i'm having problems keeping my local npm registry synchronized with isaacs.iriscouch
00:43 < draginx`> Anyone here successfully got wkhtml to work? :/
00:43 < draginx`> or some sort of HTML to PDF program in nodejs to work?
00:44 < janmower> i've noticed that isaacs.iriscouch now is on couchdb 1.2.0.  Should i upgrade my couchdb and resync?
00:48 < janmower> hey does joyent still hold office hours?
00:48 < janmower> any joyent people here to answer?
00:50 < bingomanatee> has anyone ever set up a system for switching between more than one version of node on the same machine?
00:50 < chilts> there is both nvm and n
00:50 < chilts> and another one I can't remember
00:50 < janmower> bingomanatee: look at nave
00:50 < BennyLava> nave
00:51 < bingomanatee> thankx.
00:51 < chilts> that's the one
00:51 < chilts> it's all dependent on what you like about each of them, so take a look at all three
00:51 < chilts> I'm glad there aren't any more than three :)
00:52 < ChrisPartridge> draginx`: using wkhtml here
00:52 < draginx`> ChrisPartridge: how do I write from a straight string?
00:52 < draginx`> I don't want to save a file, etc.
00:53 < ChrisPartridge> draginx`: spawn and instance, and pipe to stdin
00:54 < draginx`> hmm
00:57 < TehShrike1> mikeal: thanks for your blog post today, it was very good
00:57 < draginx`> ChrisPartridge: wkhtmltopdf [ undefined, '-' ] it keeps saying this :/
00:57 < q__> What am I doing wrong here http://pastebin.com/PJ7Mx42T , tiny example
00:57 < draginx`> var pdf = wkhtml.spawn('pdf');  pdf.stdin.end(html, 'utf-8');
00:58 < draginx`> and html = just  asimple '<b>hello world!</b>'; just to test
01:00 < plato> q__ you are misusing the callback. when you do callback(obj) async thinks thats an error
01:00 < plato> see https://github.com/caolan/async#forEach
01:01 < plato> callback(err) - A callback which is called after all the iterator functions have finished, or an error has occurred.
01:01 < plato> you are twice calling it with errors, and once when it completes... i think
01:02 < q__> so is there a collect type of function ? checking
01:02 < q__> ok I was totally misusing it
01:02 < q__> some examples for that site would be nice :)
01:02 < q__> lib*
01:04 < plato> q__: http://pastebin.com/DjXNjpNg
01:04 < q__> ok thx
01:04 < plato> q__: i made a small example for waterfall and series here: https://github.com/therealplato/node-async-demo/blob/master/dbasync.js
01:05 < q__> ok these loook good
01:05 < q__> thanks!
01:05 < plato> np, gl hf
01:07 < draginx`> ChrisPartridge: any ideas?
01:15 < ChrisPartridge> draginx`: Give me a few moments, and I'll grab you an example
01:16 < draginx`> thanks :D
01:18 < bingomanatee> If you want an express response to handle ALL traffic what route would you define?
01:18 < draginx`> ChrisPartridge: https://github.com/mhemesath/node-wkhtml/blob/master/examples/writeFile.js I tried using this example but no go
01:20 < draginx`> ChrisPartridge: I'll be back in like 30 min :S
01:23 < TooTallNate> bingomanatee: just call "app.use(middleware)"
01:23 < bingomanatee> thx
01:26 < TehShrike1> isaacs: I just laughed quite heartily at this, thank you. https://twitter.com/npmjs/status/250364277402243072
01:29 < plato> bingomanatee: app.all('*', function(req,res,next){do.shit(); next(); });
01:30 < bingomanatee> thanks
01:30 < deoxxa> wait
01:30 < deoxxa> no
01:30 < deoxxa> wrong
01:30 < deoxxa> app.use(function(req, res, next) { do.shit(); next(); })
01:30 < plato> mine or yours?
01:30 < plato> mine is right
01:30 < deoxxa> plato: your example is bad and you should feel bad
01:30 < plato> maybe yours is right too
01:31 < deoxxa> yours incurs an extra route lookup and is conceptually incorrect
01:31 < plato> mine will only be called if you hit the router
01:31 < TehShrike1> Maybe you're all right, and it's just a matter of perspective!
01:31 < deoxxa> my perspective is correct!
01:31 < TehShrike1> Oh no wait, this is programming, not philosophy
01:31 < TehShrike1> MY PERSPECTIVE IS LOUDEST!
01:32 < deoxxa> cue loudbot
01:32 < plato> deoxxa: if you have any links to express coding philosophy i'll gladly take a look
01:32 < deoxxa> http://expressjs.com/guide.html
01:32 < plato> my method is the one tjhollawaychuk recommends when ppl ask 'how do i do something on every request'
01:32 < plato> in #express
01:32 < plato> so nya nya!
01:32 < plato> idfk
01:32 < ChrisPartridge> pfft, what would tj know about express ;)
01:33 < deoxxa> hm, i've never seen him say that ._.
01:33 < tonymilne> plato deoxxa is correct. ;) it's a piece of middleware, just like bodyParser, etc.
01:33 < deoxxa> maybe there's a special case in there for app.all("*")
01:34 < tonymilne> true, maybe.
01:34 < deoxxa> because i can't imagine why that would be recommended otherwise
01:34 < tonymilne> http://stackoverflow.com/questions/7263626/node-js-how-to-do-something-on-all-http-requests-in-express
01:34 < tonymilne> best summarises it.
01:36 < plato> thx guys
01:44 < other_guy> isaacs, I'm trying to test Node.js performance on a Medium High-CPU Joyent SmartMachine running SmartOS, and I'm getting abysmal performance.
01:45 < other_guy> Running the benchmark/http.sh I'm getting ~780 #/sec
01:45 < other_guy> which is a full order or magnitude lower than what I get at ProfitBricks on a machine that's half as expensive
01:46 < other_guy> I'm assuming there's a tuning problem I'm facing in SmartOS?
02:01 < CIA-118> node: Bert Belder openssl-exports * r3750344 / (6 files in 4 dirs): openssl: clean up configuration files - http://git.io/Lc3Tqg
02:01 < CIA-118> node: Bert Belder openssl-exports * rf7faacf / (node.gyp deps/openssl/export/win32/openssl.def): windows: make node.exe export openssl symbols - http://git.io/vaDDfg
02:07 < ChrisPartridge> draginx: https://gist.github.com/3779554
02:07 < harbhub> niggler: hey
02:08 < draginx> ChrisPartridge: i got it! ty tho.. its a little slow though :/
02:08 < draginx> unless thats just homebrew's installation messing up
02:08 < draginx> oh u did it a tad differently
02:08 < draginx> ill try ur way thanks! :)
02:08 < ChrisPartridge> draginx: Pretty quick over here
02:21 < draginx> ChrisPartridge: its actually slower lol :S I have way more HTML to put in there hmm
02:23 < ChrisPartridge> draginx: define slower
02:27 < CIA-118> node: Bert Belder openssl-exports * r7f76fa8 / (src/node_main.cc deps/openssl/export/unix/openssl.h): symbol hack test - http://git.io/_arvIw
02:28 < larzconwell> Anyone have a good resource for building native modules? Not sure how to get started building with gyp and all the v8 overhead.
02:28 < draginx> ChrisPartridge: takes longer to display onto the browser (using express)
02:30 < ChrisPartridge> draginx: piping to res ?
02:30 < draginx> yup
02:31 < ChrisPartridge> just piping to res, or to multiple destinations?
02:36 < CIA-118> node: Bert Belder openssl-exports * rc293ffe / (src/node_main.cc deps/openssl/export/unix/openssl.h): symbol hack test - http://git.io/4hcOCw
02:42 < draginx> ChrisPartridge: just res
02:44 < ChrisPartridge> draginx: Where is the source/html coming from?
02:45 < draginx> ChrisPartridge: from a variable right before the pipe
02:45 < draginx> inside an app.get block
02:52 < ChrisPartridge> draginx: How slow is it? I see around 2-3 seconds for larger documents
02:52 < draginx> it takes like at least 10 seconds
02:52 < draginx> but last time it just failed :P
02:53 < ChrisPartridge> What version of wk?
02:54 < draginx> http://pastie.org/private/vgpy9jwdsbxwxcamwyurw here's the html
02:55 < draginx> wkhtmltopdf 0.10.0 rc2
02:56 < CIA-118> node: Bert Belder openssl-exports * r81fc6ca / (node.gyp deps/openssl/export/unix/openssl.sym): symbol hack test - http://git.io/dA2sVA
02:59 < ChrisPartridge> draginx: I'm processing that in 0.14s
02:59 < draginx> same versin? :(
02:59 < ChrisPartridge> 0.11.0 rc2
02:59 < draginx> o what
02:59 < ChrisPartridge> although, I never noticed a speed diference between 0.10 and 0.11
02:59 < draginx> i mean homebrew is out of date then :/
03:00 < ChrisPartridge> draginx: Try grab the static binary and test against that
03:00 < garthk> Heh. TAP_COV=1 tap ./test deletes my package.json file. (Mac, homebrew, node 0.8.9)
03:03 < draginx> o wait it was 0.11.0rc2 :/
03:03 < draginx> ill try the binary
03:08 < ChrisPartridge> draginx: If you run that html through wk using my example, with express out of the equation - how quick isit?
03:08 < draginx> ChrisPartridge: not sure tbh
03:08 < ChrisPartridge> draginx: Give it a shot, might be something else causing the delay
03:08 < Nuck> For a CLI application, how should I implement a search engine?
03:09 < Nuck> I have an XML (or .dat file?) data source
03:09 < Nuck> (Damn perl programmers don't hand me SHIT)
03:10 < terinjokes> konobi: having some issues with a typedef and assigning a char[]
03:13 < terinjokes> attempting to use node-ctype, http://pastie.org/4795098 /cc konobi 
03:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:44 <@xyxne> I was writing comma first before it was cool
03:45 < etcetera> zomg, cannot for the life of me find a good websockets client for .net
03:46 < niggler> what's the 'z' for?
03:46 < mscdex> etcetera: stick to node! :-D
03:55 < Nuck> Hey, there any lightweight serverless search system I can use for Node.js?
04:05 < etcetera> mscdex: just finding it hilarious that it's easier to use an obj-c library for socketio than to find one written in C#
04:09 < chilts> Nuck: AWS ElasticSearch?
04:09 < chilts> oopse, CloudSearch I mean :)
04:09 < chilts> http://aws.amazon.com/cloudsearch/
04:19 < Nuck> chilts: I said "serverless" and "local"
04:20 < chilts> well, you didn't say local, I can see your line :)
04:20 < chilts> but ok, I suppose you mean something else
04:20 < chilts> Sphinx?
04:21 < chilts> Xapian?
04:27 < Nuck> Sphinx is server-based
04:27 < Nuck> Never heard of Xapian, but let's see...
04:27 < chilts> so, why don't you want something that is "server-based" as you call it?
04:27 < Nuck> Could work, it's C++
04:28 < Nuck> chilts: Needs to be embedded, I want to distribute this as a package in Node.js
04:28 < chilts> righto
04:28 < Nuck> So people can just `npm install anidb -g` and have an awesome thing
04:28 < chilts> well, I know one of the main developers, so let me know if you do anything interesting adn I'll ping him with the details :)
04:29 < Nuck> I actually just had an epiphany
04:29 < Nuck> Turntable.fm uses some instant search on the clientside on JS
04:29 < Nuck> I might be able to find what lib they use :D
04:36 < Nuck> Huh
04:36 < Nuck> Does NPM just filter?
04:37 < Nuck> Holy shit
04:37 < Nuck> This is so simple, It Can't Possibly Workâ„¢.
04:39 < ChrisPartridge> draginx: Get it running quicker?
04:41 < mrmowgli> Anyone point me to a good resource for using ajax w/ express and Jade? Either point it at a route and client side render it or point it at a route and render just html snippets?
04:43 < draginx> ChrisPartridge: nope :(
04:43 < draginx> i tried res.sendfile() or res.download
04:43 < draginx> but that didnt work
04:47 < ChrisPartridge> draginx: Weird, did you try isolate the wkhtml code to see if it is wkhtml taking a long time?
04:47 < draginx> no
04:47 < draginx> let me do that
04:48 < draginx>  Î» pro: wkhtmltopdf test.html test.pdf
04:48 < draginx> Qt internal error: qt_menu.nib could not be loaded. The .nib file should be placed in QtGui.framework/Versions/Current/Resources/  or in the resources directory of your application bundle.
04:48 < draginx> interesting
05:02 < draginx> well fixed that but still slow
05:04 < ChrisPartridge> draginx: still taking ~10 seconds with just my example code from earlier?
05:04 < draginx> yeeeup
05:04 < draginx> hmm
05:05 < ChrisPartridge> Weird dude, I'm running windows here and debian in production - both under a second 
05:25 < fivetanley> Anybody on that's familiar with fs.lstat() ?
05:26 < jmoyers> fivetanley vaguely
05:27 < fivetanley> jmoyers: just wondering if you know what unit the 'size' attribute on the returned object is in
05:27 < fivetanley> bytes, probably?
05:28 < jmoyers> yes its bytes
05:28 < fivetanley> thanks jmoyers! much appreciated
05:32 < cellvia> has anyone here tried to use cicada substacks tiny CI server
05:34 < substack> I am using it for things presently
05:38 <@Nexxy> lol
05:42 < fent> I want to rename my username on npm but I've already published a bunch of modules. Can I do this? Or will I have to `npm owner add` and then `npm owner rm`?
05:49 < cellvia> fent is a great username
05:50 < fent> cellvia: username on npm is neat. want to switch to fent since that's what i go by on github
05:53 < ChrisPartridge> fent: pretty sure you will need to owner/add/rm - or maybe you can bug isaacs if you have a lot of packages
06:03 < Zoney> darn, the "edit this page on github" link in docs.nodejitsu is a 404
06:04 < jesusabdullah> Zoney: what is it linking you?
06:04 < jesusabdullah> Zoney: can you copy-paste me the link to that?
06:05 < jesusabdullah> Zoney: go here: https://github.com/nodejitsu/docs
06:05 < Zoney> sure, here's one:
06:05 < Zoney> https://github.com/nodejitsu/docs/edit/master/articles/getting-started/how-to-use-util-inspect/article.md
06:06 < jesusabdullah> Zoney: I see what's going on. Interesting.
06:06 < jesusabdullah> Zoney: I'll try to address that tomorrow
06:06 < Zoney> now i forget which page i was gonna edit :)
06:06 < Zoney> oh well
06:07 < jesusabdullah> Zoney: if you remember, replace "article.md" in the url with "content.md"
06:07 < jesusabdullah> Zoney: and it should work
06:07 < Zoney> ok, thanks
06:07 < jesusabdullah> You're welcome, apologies for the inconvenience
06:08 < Zoney> no problem :)
06:09 < Zoney> just fyi, content.md didn;t work either
06:09 < Zoney> https://github.com/nodejitsu/docs/edit/master/articles/getting-started/npm/what-is-the-file-package-json/content.md
06:10 < jesusabdullah> https://github.com/nodejitsu/docs/edit/master/pages/articles/getting-started/npm/what-is-the-file-package-json/content.md
06:10 < jesusabdullah> Oh, I see, also pages/articles
06:10 < jesusabdullah> weak
06:11 < Zoney> ahh i see
06:11 < Zoney> i have to learn git better to edit :)
07:36 < [AD]Turbo> hi there
07:40 < natsume> hello
07:40 < natsume> i have a question which is why we compile the android source with arm-linux-androideabi toolchain but we compile the linux kernel with arm-linux-gnueabi ?
07:41 < natsume> sorry i go wrong
08:02 < AnthonyCat> How many socket.ios can I have open at one time?
08:02 < `3rdEden> one hundred kazillion!
08:03 < `3rdEden> (depends on your server)
08:04 < AnthonyCat> Would it be easy to have like 200?
08:13 < ctp6360_> AnthonyCat: 200 is fine mate
08:18 < djazz> is it possible to, in a node http server, have it to interpret for example ".njs" files and run them, like PHP runs .php files in apache?
08:18 < djazz> the stdout gets sent to the browser
08:18 < djazz> child_process?
08:19 < AnthonyCat> djazz: One way would be to start node child processes, yes.
08:19 < astropirate> does apache really start a new php process? :O
08:19 < astropirate> for every request?
08:19 < astropirate> that cant be...
08:21 < ashnur> it's a bit more complicated
08:21 < ashnur> but basically, yes
08:21 < `3rdEden> depends on your apache version and settings..
08:22 < [Arne]> ulimit is probably the first thing you hit, unless your cpu is hit
08:23 < djazz> hm
08:23 < djazz> require is sync, right?
08:24 < AnthonyCat> djazz: yeah, I think so
09:06 < djazz> AnthonyCat: hmm, maybe i can use the VM module
09:06 < djazz> it dont create a new process
09:06 < djazz> hm, but its sync it seems
09:08 < SomeoneWeird> what are you trying todo djazz ?
09:09 < djazz> SomeoneWeird: a http server with nodescripts similar to how php scripts are used
09:09 < djazz> server runs code, generates page
09:11 < astropirate> djazz, why are you trying to do that
09:11 < djazz> astropirate: experimenting?
09:11 < astropirate> i see
09:11 < djazz> i dont want to put all that code in the server's code
09:12 < djazz> i want to be able to change the code without restarting server
09:12 < astropirate> djazz, looked at this https://github.com/TooTallNate/node-cgi ?
09:13 < astropirate> djazz, there ar emodules that will let you do that.. with node code
09:14 < djazz> astropirate: i wanna learn and make it myself ;d
09:14 < SomeoneWeird> fs.watch
09:14 < djazz> im not using express or such
09:14 < djazz> SomeoneWeird: hm, yeah...
09:14 < djazz> thats smart
09:32 < mynick>  Testing message /dev/tcp
09:34 < mynick>  Testing message /dev/tcp
09:45 < mynick>  Testing message /dev/tcp
09:47 < braoru> can he do something against that .. http://www.youtube.com/watch?v=1e1zzna-dNw its completely wrong, a shame and its not good for node.js image ./ 
09:48 < sinclair> braoru: there are a lot of weird things about node
09:48 < sinclair> braoru: its far from perfect
09:48 < braoru> yeah but this video is sad /
09:48 < braoru> I know
09:48 < braoru> node as his own failure and bad point
09:48 < braoru> like every project and technologies ..
09:49 < braoru> but this video is the second hit on youtube when you type node.js
09:49 < sinclair> braoru: the javascript is slow argument is dumb nowadays imo
09:49 < braoru> I know :)
09:49 < Matt_P> whats the recommended layout for node projects ? any links appreciated
09:49 < sinclair> braoru: javascript "is" slow, but its a wrangler of optimal native modules
09:49 < sinclair> braoru: its an acceptable trade
09:50 < Matt_P> http://stackoverflow.com/questions/5178334/folder-structure-for-a-nodejs-project << thatl do , thanks anyway
09:50 < braoru> sinclair, yes I don't think node.js is perfect .. but it's liek for linux there is people behind any project and it's a question of respect for other work ..
09:53 < sinclair> braoru: he has a point about dropping things like nginx in front of node (bad), and a good point about going against the CGI spec
09:53 < braoru> ok
09:54 < sinclair> braoru: i would have also brought up how node is single threaded, and pushes async back on the operating system
09:54 < sinclair> braoru: which in itself is fine, but OS's all handle this differently, (not going to be such a bad thing if there is dedicated PAAS platforms and services out there to handle it)
09:55 < sinclair> braoru: oh, and the issue about javascript
09:55  * sinclair still doesn't think JS is all that suitable as a server side scripting language, but he is old school, and a dogged C# developer
09:56 < sinclair> braoru: to be fair, i like re-imagining things, and node seems to be doing it very well
09:56 < braoru> so a good point would be to have 2 tech as server side ?
09:56 < BennyLava> The language is barely relevant. What matters is the tools available, and the ecosystem.
09:57 < sinclair> BennyLava: under that logic, C# MVC and SignalR for the win right, Visual Studio is by far the best development tool around, 
09:57 < eliOcs> join expressjs
09:57  * BennyLava shrugs
09:57 < sinclair> BennyLava: the .NET ecosystem is improving
09:58 < BennyLava> Yes, and?
09:58 < sinclair> and...that is all
09:59 < sinclair> braoru: im really undecided about whether or not nodejs is a good idea or not
10:00 < Matt_P> If I told you it wasn't would you stop talking about it?
10:00 < sinclair> Matt_P: maybe
10:00 < Matt_P> It's not.
10:01 < Matt_P> EOF
10:01 < sinclair> Matt_P: noted
10:01 < braoru> ok
10:29 < noxoc> Has anyone used Backbone and NodeJS together? Not sure if I should have a look at backbone or rather stay with express for a while
10:32 <@konobi> noxoc: http://addyosmani.github.com/backbone-fundamentals/#stack1
10:37 < noxoc> konobi: thanks! :) 
10:48 < xico> anyone uses the module passport, or is there a channel for it?
10:49 < BennyLava> does anyone use*
10:50 < shoshy> hey, i keep getting "FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory" while running a job via node.js on amazon EC2 , large / extra large instance (high memory). The job process a file , with 100K points (not much) , for lower number of points , it works very fast (tested on 10K, around 1 minute) and my job works... so wanted to know how can i debug it better.. and find 
10:50 < shoshy> out where is the problem.
10:52 <@konobi> shoshy: using a stream?
10:52 < shoshy> here's a quick look of how it looked using "top" :  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  ---> 1327 ec2-user  20   0 2811m 2.1g 5384 R 100.5 12.4  19:47.00 node, Mem:  17494216k total,   273672k used, 17220544k free,     8900k buffers
10:52 < shoshy> konobi: to read the points? nope: readFile
10:52 <@konobi> there's your problem =0)
10:53 < shoshy> its a small file..
10:53 < shoshy> 7MB
10:53 <@konobi> doesn't matter... think in streams =0)
10:54 < shoshy> if that is the problem, i want to die
10:54 < shoshy> :)
10:54 < shoshy> going to find out..
10:54 <@konobi> your alternative is to use the heap snapshot/profiling feature of webkit-devtools-agent
10:54 <@konobi> npm-able of course
10:54 < shoshy> so your saying i should replace it with " fs.createReadStream"
10:55 < SomeoneWeird> yes
10:56 < shoshy> konobi: i use that via node-inspector?
10:56 <@konobi> nope, you can use it directly
10:56 <@konobi> https://github.com/c4milo/node-webkit-agent
10:56 < shoshy> hmm... cool... im new to node.js , .. need to find out  how to profile it...
10:56 <@konobi> for examples
10:56 < shoshy> thanks!
10:57 < shoshy> konobi: so just to verify, fs.createReadStream will solve my problem?
10:58 <@konobi> shoshy: can't be sure... but working with one peice of data at a time won't hurt
10:58 < shoshy> konobi: ok, thanks, bbl , testing..
11:05 < shoshy> konobi: from what im reading and trying to make sense of it, my file is actually a json obj.. looking like: [[1,2],[3,4],....[5,5]] , readFile automatically parsed it , but if i use createReadStream i'll need to parse it by my own, no?
11:14 < rounce^work> yus
11:17 < shoshy> rounce^work: you were answering me?
11:17 < rounce^work> yep
11:17 < shoshy> so basically , i would be better just saving the file as: [1,2] \n [3,4] \n , etc..
11:18 < shoshy> and then reading is via ReadStream (or createReadStream ? ) one line at a time , while pushing to an array
11:18 < shoshy> is this right?
11:18 < mks_> quit
11:19 < rounce^work> if you find that makes more sense for you
11:20 < shoshy> rounce^work: well, that's why i ask, because from what i understand using streams to read a file that contains a JSON object, won't help me. 
11:20 < shoshy> unlike readFile where it loads it automatically..
11:21 < shoshy> but i might getting it wrong
11:37 < Matt_P> so am i always forced to use "var self = this;"
11:37 < Matt_P> ?
11:38 < Ralt> no
11:38 < Ralt> you can `bind` sometimes
11:44 < mmalecki> I wouldn't recommend bind
11:44 < Matt_P> why?
11:44 < mmalecki> what's wrong with `var self = this;`
11:44 < mmalecki> Matt_P: performance reasons
11:44 < Matt_P> mess
11:45 < Matt_P> and damn
11:45 < Matt_P> ok
11:45 < Matt_P> thanks mmalecki 
11:46 < Ralt> mmalecki: implicit bind is good too
11:47 < Ralt> like `arr.forEach( fn, this );`
11:48 < mmalecki> yeah, but I haven't seen it used in a while
11:48 < mmalecki> I just prefer being explicit with `self` var tbh
11:49 < rounce^work> shoshy: 
11:50 < shoshy> yea?
11:51 < rounce^work> the data event will emit a buffer
11:53 < shoshy> right, but my point is that it doesn't read the file line at a line... or if the line is bigger than the buffer
11:53 < shoshy> you won't be able to do JSON.parse(data)
11:53 < shoshy> because it won't contain all of it. 
11:53 < shoshy> you can concat it
11:53 < shoshy> (using the data event)
11:53 < rounce^work> just keep appending to a string
11:54 < rounce^work> then parse that when you're done
11:54 < shoshy> right... that goes back to the 1st implementation i had which was
11:54 < shoshy> why is that any different than readFile ?
11:55 < rounce^work> because you don't read the file all at once?
11:55 < rounce^work> you could read it in sections
11:56 < rounce^work> trimming characters at the end so you end up with valid strings
11:56 < shoshy> ok... not sure how much different it'll make with the 7MB file
11:56 < shoshy> but ... hopefull it'll solve the out of memory error
11:57 < shoshy> testing..
11:58 < pINGO__> test
11:58 < pINGO__> 1,2,3
12:02 < cellvia> https://github.com/dominictarr/JSONStream
12:02 < cellvia> maybe interesting to you
12:03 < shoshy> cellvia: thank you very much , if everything goes wrong i'll use that or https://github.com/nickewing/line-reader 
12:06 < cellvia> np, dunno exactly what youre trying to do jus thought might be relevant from what i saw
12:08 < shoshy> cellvia: i got a FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory, while running a job..
12:08 < shoshy> tested both on ec2 large, extra large instance
12:09 < shoshy> on a ~7MB file  , 100K points. And the total memory it took was ("top" command dump):  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND 1327 ec2-user  20   0 2811m 2.1g 5384 R 100.5 12.4  19:47.00 node 
12:09 < shoshy> on 10K it worked with out a problem. i was using readFile
12:10 < shoshy> and konobi suggested switching to streams might be the solution
12:11 < shoshy> thats the story
12:11 < cellvia> oh, yeah, makes sense... i havent worked with them myself but thats a huge file to be buffering and serving like that
12:12 < shoshy> 7MB? 
12:12 < cellvia> https://github.com/substack/stream-handbook
12:12 < shoshy> cool link
12:12 < cellvia> go right to "why you should use streams"
12:13 < cellvia> explains your exact situation
12:13 < cellvia> the 7mb doesnt seem large but due prob to "backpressure" which he explains, it causea lot of stress and excess memory consumption
12:15 < shoshy> i'll read it for sure..
12:16 < cellvia> id love for this doc to be more complete w/ blurbs on each of the libraries out there to deal w/ streams, mentioned it to the author but im sure he pretty busy
12:17 < shoshy> i would love the node.js documentation to be better (on their main site)
12:17 < mon> url module : why pathname (instead of pathName)?
12:17 < mon> ... just noticing
12:19 < phrearch> hi
12:19 < phrearch> if i want to use {{foo}} inside a handlebars template, how would i escape it?
12:24 < SomeoneWeird> phrearch, suppose you could do something like {<div>}</div>foo}}
12:24 < SomeoneWeird> *>{
12:25 < shoshy> cellvia: i've read most of it, but regarding the backpressure he write very little, if that is the cause for the readFile vs. createReadStream
12:25 < cellvia> it depends on your situation, do you have many people downloading
12:25 < shoshy> also, i have to note, that i'm not sending the file back or anytihng a like, i'm just reading it to an rray
12:26 < cellvia> or is it being accessed many times
12:26 < cellvia> so its not being served as a download
12:26 < shoshy> the file is accessed once, read into an rray
12:26 < shoshy> array
12:26 < cellvia> then maybe not backpressure
12:26 < shoshy> and proccessed
12:27 < shoshy> that's why im skeptic about the readFile change , as 7MB is nothing for a file to be read into memory (i assume)
12:27 < cellvia> depends if you are initiating that multiple times and how you are doing it
12:27 < cellvia> but jus try dropping in one of the examples
12:27 < cellvia> see if it solves the problem
12:28 < shoshy> right, im already running it for 15 minutes
12:28 < shoshy> on m1.large
12:31 < efbeka> is it correct this
12:31 < efbeka> use a duplex stream to give a single interface 
12:32 < efbeka> for 2 other streams
12:32 < Magalhas> Hi everyone. I'm having problems trying to install npm modules that rely on node-gyp on Windows (trying normal command line and Cygwin). The error is .node-gyp\0.8.9\tools\gyp\gyp': [Errno 2] No such file or directory  --> in fact there's no tools folder in there. Can anyone help me out please?
12:33 < Magalhas> Using latest stable version of node and npm
12:33 < cellvia> did you install node gyp globally
12:33 < cellvia> also do you haev python installed
12:34 < cellvia> i had issues and had to install python 2.7   and some kind of visual basic 2010 express as well as some windows sdk before i got gyp to work on windows... it was a pain in the ass
12:34 < Magalhas> Yes, got python and gcc in environment variables. And yes I've ran npm install -g node-gyp
12:35 < Magalhas> I'm using Python 2.7 also
12:35 < Magalhas> What VB 2010 Express stuff did you need?
12:35 < cellvia> Visual Studio 2010 Express
12:36 < cellvia> Visual Studio 2010 C++ Express
12:36 < cellvia> there we go
12:36 < cellvia> http://www.microsoft.com/download/en/details.aspx?displayLang=en&id=8279
12:36 < cellvia> that also
12:36 < cellvia> then you will have to use npm again to install gyp
12:36 < cellvia> AFTER
12:36 < cellvia> those 2
12:37 < Magalhas> Thank you
12:37 < Magalhas> I'll try that out
12:37 < Magalhas> Should I see the tools folder inside gyp folder
12:37 < Magalhas> After all the steps?
12:37 < cellvia> i dunno, never had to look there
12:37 < cellvia> im geussing its not building completely because of the missing dependencies
12:38 < cellvia> https://github.com/TooTallNate/node-gyp/issues/54
12:38 < cellvia> this is where i got most of my info
12:38 < cellvia> "You also need to install the Windows 7 SDK and open up a Windows 7 64-bit SDK Command Prompt window to compile inside of."
12:39 < Magalhas> Thank you a lot for that link
12:39 < cellvia> gl
12:39 < Magalhas> Going to try it out =)
12:41 < shoshy> running for 26Minutes already...
12:41 < retro|cz> hello
12:41 < CIA-107> node: Adam Blackburn v0.8 * rd5e9895 / doc/api/_toc.markdown : doc: put API table of contents in alphabetical order - http://git.io/sjgMjA
12:42 < retro|cz> One little question. I run simple hello world node.js http server. Why request is proceeded twice?
12:42 < SomeoneWeird> retrostyle|13, pastebin your code
12:43 < retro|cz> exammple https://gist.github.com/e1a4ea427da8866e9218
12:43 < retro|cz> example https://gist.github.com/e1a4ea427da8866e9218
12:43 < retro|cz> with two browser hits
12:43 < SomeoneWeird> ah
12:43 < SomeoneWeird> probably because it might be trying to load favicon too
12:43 < retro|cz> SomeoneWeird, ohh
12:43 < retro|cz> thanks
12:44 < retro|cz> that might be my problem
12:44 < SomeoneWeird> have a look at express, unless you need a really small http server
12:44 < SomeoneWeird> (even then express isn't big)
12:44 < CIA-107> node: Shigeki Ohtsu master * ra1ba29d / test/simple/test-http-client-timeout-agent.js : test: fix failing due to too early timeout - http://git.io/E3xvww
12:45 < qballer> Hey guys, I wanted to know if someone can point me to easy to fix intro bugs.
12:46 < retro|cz> SomeoneWeird, I'll try some curl command to achieve only one request.
12:46 < SomeoneWeird> yeah
12:46 < bnoordhuis> qballer: you mean node core bugs?
12:46 < retro|cz> SomeoneWeird, yes, it works
12:46 < retro|cz> SomeoneWeird, thanks for a nice point
12:46 < bnoordhuis> (as if node core has bugs, the impertinence!)
12:47 < qballer> Yep bnoordhuis, I have a couple of days off and it's a great time to do node core intro sprint
12:48 < RLa> god damn, why ftp does not support pipelining
12:48 < RLa> braindead protocol
12:48 < BennyLava> why does*
12:48 < RLa> oh it does?
12:48 < bnoordhuis> qballer: well, we always need better docs. that'll get you karma points easily :)
12:48 < BennyLava> no, I'm correcting your English.
12:48 < RLa> oh
12:49 < qballer> Yea but I'm more into writing code, I will probably be readying, writing and correcting code 
12:49 < qballer> and docs
12:49 < bnoordhuis> qballer: search the issue tracker for domains bug, there are a few and they shouldn't be that hard to fix
12:49 < bnoordhuis> *domains bugs
12:49 < bnoordhuis> qballer: i.e. https://github.com/joyent/node/issues?labels=domains&page=1&state=open
12:50 < qballer> but usually when you start to get to know a new code base it's a lot of work 
12:50 < qballer> thanks bnoordhuis 
12:51 < qballer> I think there should be a tag for intro bugs and maybe a small year long fellowship programs. Most people will not stick around but there will be a drizzle. thanks for the assistance  bnoordhuis 
12:56 < efbeka> Helppppppppppp
12:56 < efbeka> someone?
12:56 < SomeoneWeird> hi
12:57 < shoshy> still got FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
12:57 < efbeka> no ure weird
12:57 < shoshy> after ~34 minutes 
12:57 < shoshy> it took ~3GB of ram
12:57 < shoshy> ~4GB were free..
12:58 < efbeka> SomeoneWeird: is it ok to use a duplex stream to give a single interface for 2 other streams
12:58 < efbeka> ?
12:58 < SomeoneWeird> no idea
12:58 < SomeoneWeird> lol
13:00 < efbeka> noooo
13:00 < efbeka> someone tell me please
13:01 < swair> nodejs-compat-symlinks isn't getting installed on centos 5. 
13:01 < swair> nodejs-devel-0.6.18-1.el5.centos.x86_64 from nodejs-stable has depsolving problems
13:01 < swair>  --> Missing Dependency: nodejs = 0.6.18-1.el5.centos is needed by package nodejs-devel-0.6.18-1.el5.centos.x86_64 (nodejs-stable)
13:02 < swair> apparently node 0.6.18 is not there in the rpm repo http://nodejs.tchol.org/repocfg/el/nodejs-stable-release.noarch.rpm
13:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:14 < [Arne]> swair: I recenlty switch to the binary distribution because of that on CentOS / RH
13:15 < [Arne]> binaries for linux x86/x64 from http://nodejs.org/download/ extract in /opt and symlink'd the bin's into /usr/local/bin
13:37 < shoshy> cellvia?
13:38 < shoshy> konobi?
13:38 < shoshy> it didn't work..
13:38 < shoshy> crashed despite loaded using stream
13:38 < shoshy> (crashed after ~34 minutes)
13:39 < shoshy> using instance - extra large high speed memory ... 
13:39 < cellvia> youll need to paste a gist or something, dont have enough to go off of... fo rnow i must sleep though, email me cellvia @ yahoo   if you get a gist up peece
13:39 < shoshy> thank cellvia, good night :)
13:39 < shoshy> good person.
14:00 < JonathanMH> I can't seem to find documentation for the express.session stuff on expressjs.com, is there a secret documentation I don't know about or am I looking for it the wrong place?
14:29 < JMHNilbog> Hi, everyone. Wondering about the 'right' way to change/set permissions on a file created/accessed through createWriteStream.
14:30 < JMHNilbog> I've got a bunyan logger runningâ€¦bunyan file logs are created via a call to createWriteStream.
14:31 < JMHNilbog> The node docs say that the default permissions for write streams are 0666, but I'm seeing 0644, and bunyan doesn't appear to be causing that.
14:31 < JMHNilbog> Ideas?
14:33 < rio{> windows?
14:33 < risto_> could anyone tell where the socket client goes wrong http://pastebin.com/q37HRtqR
14:33 < risto_> the writing part does not work correctly i think
14:33 < rio{> JMHNilbog what system are you using?
14:34 < JMHNilbog> THis is on a Mac, Mountain Lion.
14:35 < JMHNilbog> As soon as the bunyan logger is created, the mode value of the create reads as 438
14:35 < JMHNilbog> but it must be switching from 0666 to 0644 somewhere down the line.
14:36 < JMHNilbog> It's hacky, but I don't mind forcing a write and chmodding the file on disk once I know it exists if I have to.
14:37 < JMHNilbog> It's startup code for something that isn't speed critical.
14:37 < rio{> What happens if you set the mode option yourself?
14:37 < niggler> what group are you running as?
14:38 < JMHNilbog> Ashamed to say I haven't tested that. Let me check.
14:38 < JMHNilbog> I've had the 'special' user _www run it and my own user account
14:39 < JMHNilbog> Looking to leave it as 0666 so I can avoid the &@&*^ thing getting angry when it can't write when run by a different user.
14:39 < JMHNilbog> brb, testing createWriteStream directly.
14:39 < rio{> If it doesn't work you might just have to change your umask
14:44 < JMHNilbog> aha.
14:45 < JMHNilbog> Running as myself, createWriteStream is creating files with 0644 permissions no matter what I do.
14:46 < JMHNilbog> So it's almost certainly just the _www and my own umask to blame.
14:56 < JMHNilbog> I don't want to fuss with umask, since since is a tool that will be running on various machines with various levels of access. What't the proper way to detect a write stream has written something to disk? It don't see an event for that. Maybe I should just create the darn file myself with the permissions I want before letting the logger create the write stream.
15:10 < CIA-107> node: isaacs v0.8.10-release * rc2879c9 / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/0H89Rw
15:20 < risto_> !
15:20 < risto_> !help
15:23 < tuhoojabotti> how do I handle stream errors?
15:23 < tuhoojabotti> I added 'error' listener to the streams, but it still doesn't handle the errors.
15:24 < tuhoojabotti> or maybe it does
15:24 < tuhoojabotti> okay it receives the error, but it still tells me it's "unhandled"
15:25 < tuhoojabotti> isn't it enough to listen for stream#error event?
15:27 < bradleymeck> bnoordhuis: for the pipe issue the problem is sending pipes after the child process is created, does that make sense why stdio doesnt fix it?
15:28 < bnoordhuis> bradleymeck: no. you should still be able to send over handles
15:28 < bradleymeck> bnoordhuis: but i cant just create a handle, i have to grab it from fs or net, no in memory way ala pipe(2)
15:29 < bradleymeck> unless there is something i dont know about
15:29 < bnoordhuis> bradleymeck: ah, like that. that's by design, more or less. why do you want to do that?
15:32 < bradleymeck> bnoordhuis its been a while sense ive needed it, but it was to pass around buffers without serializing them over a multiplexer, can do it now, but just design wise was troublesome compared to sending handles
15:33 < theblackbox> hello all, I think I'm getting very confused as to the correct use of socket.ioâ€¦ what I would like to do is to define a couple of custom events on the server that tally on the client and invoke the backbone.sync method I override. The problem is (and I've gone through a few backbone specific modules before deciding to get my fingers dirty directtly), that I do not understand how I should include socket.io client sideâ€¦ it seems as thoug
15:33 < theblackbox> something piggybacks on my server instance and provides the includes for me in the modules I've looked into. But I couldn't get my head round that.
15:35 < janmower> has anyone had problems keeping a npm server synced with isaacs.iriscouch?
15:35 < theblackbox> if anyone has any pointers or knows of a good guide to read I would appreciate it
15:37 < theblackbox> essentially question boils down to - where do examples get io for var socket = io.connect('http://localhost/');
15:38 < theblackbox> simple yet very confusing
15:38 < CIA-107> node: isaacs v0.8.10-release * r83d39c8 / (556 files in 108 dirs): npm: upgrade to 1.1.62 - http://git.io/3d994g
15:38 < CIA-107> node: Fedor Indutny v0.8.10-release * r7651228 / lib/tls.js : tls: use slab allocator - http://git.io/9LIgHw
15:38 < CIA-107> node: isaacs v0.8.10-release * r420b8dc / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/npOZbw
15:40 < tuhoojabotti> What else do I need to do than listen to 'error' events?
15:40 < BennyLava> listen /carefully/
15:41 < tuhoojabotti> BennyLava: It runs my error handler, but still gives me Unyhandled 'error' event.
15:41 < tuhoojabotti> Unhandled*
15:41 < CIA-107> node: isaacs v0.8.10-release * r48598c7 / (AUTHORS ChangeLog src/node_version.h): wip (+9 more commits...) - http://git.io/0LF0jA
15:42 < tonylukasavage> Does anyone have a handy list of common default nodejs install locations on Win/Lin/OSX? Doesn't need to be exhaustive, I'll be using it as a fallback in case its not on the PATH for some reason.
15:43 < chrisjaure> theblackbox: socket.io serves up the client code, all you need to do is include the script tag like in the example
15:43 < mscdex> tonylukasavage: you can get the path to node.exe from a script, does that help?
15:43 < theblackbox> but does this depend on express or something else?
15:44 < chrisjaure> no
15:44 < theblackbox> =
15:44 < theblackbox> =/
15:44 < SomeoneWeird> tonylukasavage, `which node` on nix and maybe osx
15:45 < tonylukasavage> mscdex: well, I'm relying on PATH in most cases to have node available, I just want a few places to check if that fails, I don't want to search the whole computer
15:45 < tonylukasavage> SomeoneWeird: that will only work if its on the path
15:45 < theblackbox> hmmm, del it isn't giving me the client codeâ€¦ unless it's doing something blatantly obvious I should definitely have checked by nowâ€¦.
15:45 < tonylukasavage> SomeoneWeird: I'm doing that now asa my first pass
15:45 < LowValueTarget> When running a node app i get a seg fault.... attempting to reinstall
15:46 < LowValueTarget> anything else I should do/
15:46 < tonylukasavage> I was hoping for a list that includes: "/usr/local/bin/node", "/opt/local/bin/node", etc... and whatever the windows locations are as well
15:46 < CoverSlide> LowValueTarget:  what platform? did you compile it yourself or use one of the releases?
15:46 < CIA-107> node: isaacs v0.8.10-release * r8451e5e / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/NzJ1bQ
15:47 < LowValueTarget> CoverSlide: Linux SERVER 2.6.32-40-server #87-Ubuntu SMP Tue Mar 6 02:10:02 UTC 2012 x86_64 GNU/Linux
15:48 < LowValueTarget> I compiled
15:48 < CoverSlide> oh wow, 2.6
15:48 < LowValueTarget> was working fine till a few days ago
15:48 < CoverSlide> what version
15:48 < LowValueTarget> 0.8.9
15:48 < CoverSlide> hmm
15:48 < LowValueTarget> cloning MASTER and will recompile
15:48 < SomeoneWeird> 2.6, could be why
15:49 < LowValueTarget> Ubuntu Server 10.04 LTS
15:49 < CoverSlide> I wouldn't work off of master, maybe use a tagged release
15:49 < CoverSlide> and to a make test afterwards
15:49 < CoverSlide> s/t/do/
15:50 < LowValueTarget> sure
15:50 < LowValueTarget> standby
15:52 < CoverSlide> we don't get many segfaults, that's pretty bad, it would probably be good to figure out why it segfaulted
15:53 < CIA-107> node: isaacs v0.8.10-release * rd9fc7b6 / (AUTHORS ChangeLog src/node_version.h): wip (+8 more commits...) - http://git.io/adR32Q
15:53 < LowValueTarget> Yeah CoverSlide, never had a seg fault before
15:54 < CIA-107> node: isaacs v0.8.10-release * r8cb3c2e / (AUTHORS ChangeLog src/node_version.h): wip - http://git.io/HPGPCw
15:54 < LowValueTarget> I am loading GeoIP DBs 
15:54 < LowValueTarget> could be related
15:54 < LowValueTarget> my other node apps on the same server work fine
15:55 < CoverSlide> hmm
15:55 < tosh__> Hello, I have a question about Npm.  I use Node, with haibu in a standalone server.  But when i launch an app with a coffee script with an user (not root), the process needs to access /root/.npm and it's fail.
15:55 < tosh__> An idea about that? thank's
15:55 < CoverSlide> I think the GeoIP library might be what's causing the segfault
15:56 < mscdex> why not try out the pure js geoip module?
15:56 < LowValueTarget> Effing MaxMind
15:56 < LowValueTarget> that's what i'm thinking as well
15:56 < mscdex> it's supposedly faster
15:57 < LowValueTarget> link mscdex?
15:57 < mscdex> let me see if i can find it
15:57  * astropirate needs business cards
15:57 < astropirate> :S
15:58 < astropirate> where can I aquire good business cards
15:58 < mscdex> LowValueTarget: https://github.com/benlowry/node-geoip-native
15:58 < astropirate> this is the wrog channel
15:58 < astropirate> sorry all!
15:58 < LowValueTarget> orly
15:58 < astropirate> :p
15:58 < LowValueTarget> eeenteresting
15:58 < LowValueTarget> thanks mscdex
15:59 < LowValueTarget> time to refactor
15:59 < LowValueTarget> pfft
15:59 < niggler> does node support 'let'?
15:59 < CoverSlide> niggler: you have to set the --harmony flag
15:59 < niggler> i assume chrome wont support it?
16:00 < astropirate> niggler, if you enable the flags i think it will
16:00 < niggler> but that's something I wont be able to control (if others are using vanilla chrome)
16:01 < nykac_> hey, anyone know how to authorize to a database with node-mongodb-native?
16:07 < owen1> how do u guys provision new servers? bash script that install node + clone my project?
16:08 < Fike`znc> owen1: use something like nodejitsu if you're provisioning loads of servers
16:08 < Fike`znc> or heroku
16:08 < owen1> let's say my production crashes and i want to create new machine. what approach should i take?
16:08 < owen1> Fike`znc: it's not load of server.
16:09 < owen1> Fike`znc: it's a few apps. some in node, some in ruby.
16:09 < owen1> i want to make sure if one crashes, i can set up a replacement quick.
16:09 < Fike`znc> owen1: then use nodejitsu/heroku
16:09 < Fike`znc> basic plan
16:09 < owen1> i thought of a bash script
16:09 < Fike`znc> that wouldn't be very efficient
16:09 < owen1> with stuff like: install node with nvm, install git, clone the repo, run npm install etc
16:10 < owen1> Fike`znc: why?
16:10 < Fike`znc> â€¦or just use nodejitsu/heroku, configure your environment and provision new servers as you need them
16:10 < LowValueTarget> mscdex: Do you know of a native geoip library that supports city lookup
16:10 < owen1> Fike`znc: i can't use them. i have a team that provides me with vms.
16:11 < Fike`znc> owen1: use python and create a script rather than bash then if thats the way you'd like to do it
16:11 < Fike`znc> but owen1 if they have access to the hypervisor then they can make their own template with node installed
16:11 < Fike`znc> which would save time
16:11 < CoverSlide> LowValueTarget: have you looked at https://github.com/bluesmoon/node-geoip
16:12 < owen1> Fike`znc: got it. did u ever used chef/puppet?
16:12 < Fike`znc> no
16:12 < owen1> Fike`znc: it's similar to your suggestion. insteaf of pytohn it uses ruby
16:12 < owen1> which my team already know
16:13 < Fudgly> owen1: if you use python or ruby to do what you're doing, you'd have to make it connect via SSH to another server and make sure commands are executed successfully
16:13 < Fudgly> in python it's relatively simple
16:13 < Fudgly> there's a library, can't remember the name
16:14 < owen1> Fudgly: i can ssh to the server, and run the ruby script
16:14 < LowValueTarget> thats what im using CoverSlide
16:14 < LowValueTarget> thats what's seg faulting
16:15 < CoverSlide> hmm that's odd
16:15 < mscdex> yeah that is odd since it's not a binding
16:15 < CoverSlide> you're using geoip-lite?
16:16 < CoverSlide> and not https://github.com/kuno/GeoIP ?
16:18 < infamos> nooo I can't swtich between channels in osx on irssi
16:18 < Fudgly> infamos: /window
16:18 < Fudgly> Current Version: Textual 2.1.1 Release Canidate 1 (Git Reference: 2.1.1-rc1-310-gac481a1-appstore) (Flavor: Turtle Soup)
16:18 < Fudgly> :3
16:18 < CoverSlide> alt # works fine for me
16:18 < CoverSlide> although I don't remember if I modified key bindings
16:18 < mscdex> why is it that right-clicking on the GitHub logo disables the context menu and instead pops up something about GitHub logos.... ?
16:18 < LowValueTarget> CoverSlide: yes
16:18 < mscdex> ;\
16:18 < LowValueTarget> standby
16:18 < LowValueTarget> i can share some code
16:19 < Fudgly> mscdex: I find it annoying too
16:19 < infamos> fudgly: thanks.. /window # seems to dot he trick
16:19 < LowValueTarget> CoverSlide: you ok with reading coffee?
16:19 < Fudgly> i usually right click and open a new tab
16:19 < mscdex> ^
16:19 < CoverSlide> yeah that's fine
16:19 < Fudgly> mscdex: I'll tweet github =D
16:19 < mscdex> cool, because i don't have twitter :-D
16:21 < LowValueTarget> First node app, but readable CoverSlide
16:21 < LowValueTarget> http://pastebin.com/rMNAHjVq
16:22 < mon> is twitter down?
16:23 < draginx> I'm currently using wkhtmltopdf.. anyone know why I have to cmt + tab to the exec process in order to finish it in Mac OSX?
16:23 < mscdex> cmt?
16:23 < draginx> cmd8*
16:23 < draginx> command* :P
16:24 < mscdex> heh
16:24 < mscdex> what does command + tab even do?
16:25 < mscdex> i don't use macs :S
16:25 < draginx> mscdex: its like alt tab for windows
16:27 < mscdex> hmm, if you set up a script to capture keycodes, what does it send when you do that ?
16:29 < CoverSlide> LowValueTarget: unless you renamed the module in your node_modules file, then you are using the kuno/GeoIP library, which seems to be the cause of the segfaulting. If you were using the one I recommended, your require statement would be require 'geoip-lite'
16:29 < q_> I must be dense, why is this never returning http://pastebin.com/RRqJxgxt ?  
16:29 < q_> the final callback never gets called
16:31 < CoverSlide> q_: haven't used the async module in a while, but don't you have to call the callback argument after each item is done?
16:31 < q_> CoverSlide, thats what I thought ... and that is true for map(), but apparently thats only called if there is an error with forEach
16:31 < q_> oh wait
16:32 < q_> maybe I just call callback() with nothing
16:32 < q_> testing
16:33 < q_> yes thats it, if anything is passed to callback(), its considered an error
16:33 < q_> thanks Connorhd 
16:33 < q_> CoverSlide, 
16:34 < ack> howq to tagging funtionlity to node app
16:35 < owen1> what a common way to test my api? can i use simple asserts with mikael's request?
16:35 < yawnt> owen1: check out api-easy
16:35 < yawnt> https://github.com/flatiron/api-easy
16:37 < owen1> yawnt: interesting. thanks for sharking
16:37 < owen1> sharing
16:37 < yawnt> np
16:38 < CoverSlide> )\ thanks for sharking!!   /(
16:39 < bentkus> http://tinyurl.com/c98xzqs - require('liquid') doesn't work, though I have installed it
16:39 < bentkus> I seriously don't understand what is happening
16:39 < tuhoojabotti> does a stream pause when it emits an error?
16:41 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:48 < aklt> bentkus: try "cd node_modules/liquid" start node and do a "require('.')", does that work?
16:49 < CoverSlide> bentkus: yeah that liquid module is screwed up. should be trivial to fix. I would alert the author or send a pull request
16:50 < CoverSlide> any reason why you need liquid? there's lots of other, more mature template frameworks out there
16:52 < mxc> anyone ever get pdf.js working under node?  or, some other way to extract text from a pdf?
16:53 < niggler> is it not working mxcx?
16:53 < niggler> *mxc
16:54 < mxc> i'm a bit new to node, but even loading the main module seems to fail:
16:54 < mxc> > var pdf = require("../pdf.js/src/pdf.js");
16:54 < mxc> undefined
16:54 < mxc> > pdf
16:54 < mxc> {}
16:56 < bentkus> CoverSlide: damn it
16:56 < bentkus> i just tried out 3 templating engines
16:56 < bentkus> all 3 were screwed up
16:56 < CoverSlide> handlebars is pretty mature
16:57 < superjoe> CoverSlide, mature, sure, but it is also screwed up
17:00 < mscdex> mxc: pdf.js (the mozilla project) isn't node-compatible i don't think
17:00 < mscdex> it doesn't use exports and the like
17:01 < mxc> i've seen that.. was hoping that the small bit that does the parsing and text extraction would be
17:01 < mxc> so if a library doesn't use exports, whats the preferred way to use it?
17:02 < mscdex> mxc: you pretty much have to modify the code to use exports
17:02 < bentkus> what good liquid like templating engines can you guys recommend?
17:02 < niggler> mxc: fix it and submit a patch :)
17:03 < mxc> fair enoughâ€¦  any good alternatives for extracting text?  can you include a binary in your package and execute it as a child process in nodejitsu?
17:03 < ack> howq to tagging funtionlity to node app
17:05 < djazz> oh, fork is slow xD
17:05 < djazz> and it's stdout dont have a pipe, like spawn()
17:05 < djazz> :S
17:06 < CoverSlide> yeah fork uses shared stdout
17:06 < bentkus> i knew it, I should have saved the bookmark to that one templating engine
17:06 < bentkus> json-template doesn't work either
17:06 < draginx> Anyone here have experience with wkhtmltopdf?
17:06 < bentkus> dafuq dafuq dafuq dafuq
17:06 < CoverSlide> just go with ejs
17:07 < CoverSlide> it's simplest
17:07 < CoverSlide> or just use underscore, it comes with its own templating
17:07 < bentkus> too much
17:07 < bentkus> i need something liquid like
17:07 < bentkus> i don't even need for loops
17:07 < CoverSlide> well moustache is simple
17:08 < CoverSlide> or is it mustache
17:08 < kuja> Let's say I have a function that writes some data to a file.. and if the dirname of the file does not exist it tries to recursively create it. What is the best design to test this behavior without interacting with the file system?
17:10 < djazz> why do i have to use process.exit() when using fork?
17:10 < tonylukasavage> so on posix systems I'm checking these locations for node, if checking on the PATH fails:
17:11 < bentkus> CoverSlide: mu2 sucks too
17:11 < tonylukasavage>  /usr/local/bin/node
17:11 < tonylukasavage>  /opt/local/bin/node
17:11 < gildean> i was a bit bored, so i made my first node module: https://npmjs.org/package/dns-middleware
17:11 < CoverSlide> well liquid apparently sucks as well, don't use a template engine, use +
17:11 < tonylukasavage>  $HOME/local/bin/node
17:11 < gildean> not very useful, but i wanted to make one package to publish on npm
17:11 < tonylukasavage> can anyone think of other common paths that node gets installed to?
17:12 < CoverSlide> tonylukasavage: why do you ask?
17:12 < bentkus> maybe not
17:12 < CoverSlide> you can put node anywhere
17:12 < CoverSlide> I keep a symlink in $HOME/bin to whatever node version I am using currently
17:13 < q_> how can I remove something from npm
17:13 < CoverSlide> and modifly the symlink with a bash script
17:13 < bradleymeck> is there a way to settimeout to infinity for a connection that came in as http so it was set to 180
17:13 < CoverSlide> npm unpublish ?
17:13 < jocafa> who here was needing protobuf stuff again?
17:13 < tonylukasavage> CoverSlide: I know you can put it anywhere, I'm trying to find it on a user's system as best i can. I use the PATH first, then I check those 3 locations
17:13 < tonylukasavage> CoverSlide: trying to establish if there's other common install locations 
17:13 < CoverSlide> maybe /opt/bin
17:13 < CoverSlide> /opt/local/bin
17:14 < tonylukasavage> CoverSlide: I know its impossible to cover all installs, but I figure if people are installing node to custom locations, they can probably figure out getting it on the PATH themselves
17:14 < tonylukasavage> i have /opt/local/bin
17:15 < tonylukasavage> CoverSlide: I'll add /opt/bin
17:17 < tonylukasavage> adding /usr/bin/node as well
17:17 < CoverSlide> basically you should cover the standard FSH
17:18 < CoverSlide> er FHS
17:20 < terinjokes> konobi: i did. eventually, figure out my ctypes issue, wasn't very obvious
17:24 < shoshy> hey, i'm still trying to figure out why my job gets "FATAL ERROR: JS Allocation failed - process out of memory", its not serving any clients, its making a calculation on 100K points (via array). complexity ~O(N^2) . I've ran node with node --trace-gc --max-old-space-size=8192 file.js and got "Limited new space size due to high promotion rate: 1 MB" just before it blow out with the "FATAL ERROR: 
17:24 < shoshy> JS Allocation failed - process out of memory". Is that the heap size limit of node.js? or what... 
17:25 < shoshy> (ive understood there's a 1GB heapsize limit... )
17:28 < tnorris> shoshy: what version of node you using?
17:30 < shoshy> tnorris: 0.8.9
17:30 < tnorris> shoshy: any way you could share what's in file.js? i'd like to reproduce your problem.
17:32 < tuhoojabotti> After my stream emits an error it is not called again, why?
17:32 < shoshy> tnorris: very problematic, its a big file, basically a dbscan algorithm
17:33 < tnorris> shoshy: is the algorithm running over the 100k array really that large?
17:33 < tonylukasavage> CoverSlide: forgive my ignorance, FHS?
17:34 < shoshy> tnorris: ~500+ lines
17:34 < larryapplegate> I am an IOS programmer wanting to replace a parse.com server with Node.
17:35 <@konobi> shoshy: did you take incremental heapsnapshots to work out where the memory growth is coming from?
17:35 < jalcine> sounds silly
17:36 < larryapplegate> Anyone out there wanting to learn a bit of IOS in exchange with helping a Node newbie?
17:36 < aandy> i am lrrr, ruler of the planet omicron persei 8
17:36 < shoshy> konobi: i tried using nodetime to help , but for some reason it didn't help, couldn't take heap snapshots with it and couldnt make the webkit agent working... 
17:37 < aandy> larryapplegate: i doubt that's needed. there are plenty of people here who'd help you either way. what's your question? :)
17:37 < shoshy> what does http://pastebin.com/1RBhFttt means?
17:38 < bradleymeck> we really should bother the webkit ppl more to make webkit agents code not tied to webkit itself
17:38 < larryapplegate> I want to work closely with someone on both ends of a test project, client on IOS server on Node.
17:38 < shoshy> this is part of the output i got when i ran "node --trace-gc --max-old-space-size=8192 file.js"
17:39 <@konobi> shoshy: when it's running, you need to send it a signal to enable debugging, iirc
17:40 < shoshy> konobi: like they wrote; " kill -SIGUSR2 <the process id of your nodejs app>"
17:40 < zackiv31> anyone know if there is a retry delay in the HTTP spec that requires a client to resubmit a request after x seconds without getting a response?
17:40 <@konobi> shoshy: yup
17:42 < djazz> aha, node.js as scripting language (like php) http://djazz.mine.nu:7000/test/script.njs
17:43 < djazz> see server source at http://djazz.mine.nu:7000/source/server.js
17:43 < bradleymeck> zackiv31: there is not
17:43 < shoshy> hold on, ill retry
17:43 < context> djazz: scary
17:43 < djazz> scary?
17:43 < djazz> :D
17:43 < djazz> forking is slow...
17:43 < context> why are you forking period
17:44 < djazz> hm?
17:44 < shoshy> konobi: im using an ec2 instance, how do i go it afterwards? (via the browser), just to make sure im doing it right, using v0.8.9
17:44 < CoverSlide> yeah forking shouldn't happen per connection
17:45 < CoverSlide> node.js fork is basically calling a new process
17:45 < djazz> i know
17:45 <@konobi> shoshy: ssh port forwarding
17:45 < djazz> im thinking if i can use VM instead
17:45 < CoverSlide> it's a horribly inefficient way of doing things
17:45 < zackiv31> bradley: do u know if browsers implement it? I have a long POST to a node app, and after a certain amount of time, i'm seeing the request come in again... a problem with node or with the browser?
17:45 < CoverSlide> might as well just use cgi
17:46 < djazz> cgi?
17:46 < christkv> hey questions I've downloaded the 64 bit node version for windows but process.platform says win32. Trying to build dll's for the mongo driver but no luck so far for 64 bit
17:46 < bradleymeck> zackiv31: some browsers may do it
17:46 < christkv> anyone run into the same issue
17:46 < CoverSlide> yeah, what people used back when perl was the only scripting language, where the webserver would call a new process for each request
17:46 < bradleymeck> zackiv31: also if you are not logging the url, some browsers will ping other resources
17:46 < christkv> I thought it's supposed to say win64
17:46 < CoverSlide> very bad and outdated model
17:47 < zackiv31> FF and Chrome are completely resubmitting the POST after what I'm guessing is 60 seconds without a response
17:47 <@konobi> shoshy: https://npmjs.org/package/rampant might be a better alternative... i remember it took some wrangling to get working
17:48 < shoshy> konobi: ok, second... checking it out
17:48 < tjmehta> hey, anyone know how to make express serve up a static dir (/static) as the root dir (/)
17:49 < tobo> tjmehta app.use(express.static(__dirname + '/public'))
17:49 <@konobi> tjmehta: add a route for GET('/') and inside change req.path, then call next()
17:50 < niggler> wow github is homosexual
17:50 <@konobi> oh yeah... express.static should work... duh
17:51 < tjmehta> tobo, will that set "http://example.com/" to point to an index.html located in /static?
17:51 < tobo> tjmehta yeah, then you can GET /foo == ./public/foo etc
17:51 < chovy> Do i have to move everything to require('crypto').randomBytes callback function to get a random token?
17:52 < shoshy> konobi: it require mac only... and i can't run it from ec2.. it must be local probably
17:52 <@konobi> well, the browser stuff needs to be local
17:53 <@konobi> you can always tunnel the backend traffic
17:53 <@konobi> the remote debugger protocol runs on a specific port... you just need to ssh forward it to make it available locally for your browser
17:54 < tjmehta> thanks tobo and konobi ill try it out
17:55 < shoshy> konobi: yea, its not simple for me, im kinda new to node.js, nix, etc.. 
17:55 < shoshy> :/
17:57 <@konobi> shoshy: perfect opportunity to learn =0)
17:57 < shoshy> konobi: trying my best
18:02 < bradleymeck> Anyone have better solution for preventing a TCP connection from ECONNRESET besides actually sending heartbeats from the server to the client?
18:04 < bradleymeck> s/have/have a
18:04 < shoshy> konobi: could you give me hints what i need to do to make it work? i've added "GatewayPorts yes" to /etc/ssh/sshd_config , what's next? (i've googled several "related" ssh forwarding.. ). ive even saw http://ariejan.net/2010/07/29/how-to-enable-ssh-forwarding-on-mac-os-x-snow-leopard but, its for mac... as well
18:06 < nsm> shoshy: have you added rules in the EC2 console to allow external access
18:07 < shoshy> nsm: in the "Security Group" , right?
18:07 < shoshy> to add TCP port 1337
18:07 < chovy> how big does a security token for a password reset need to be? is 8 characters large enough?
18:07 < JangoF> say
18:07 <@konobi> shoshy: -L and -R
18:08 < nsm> shoshy: port 1337? i'm sorry i don't know your entire problem (lost in scrollback)
18:08 < shoshy> nsm: i'm trying to run some profiler.. my code is on an ec2 instance
18:09 < shoshy> i got FATAL ERROR: JS Allocation failed - process out of memory, this is the output http://pastebin.com/1RBhFttt
18:09 < bradleymeck> chovy: depends on your requirements, if your users are copy paste friendly id just do a ton
18:10 < chovy> bradleymeck: it's going to be emailed.
18:10 < chovy> but i've seen unique identifiers like bit.ly/qewrc that use like 5 characters. Just wondering if that is safe enough for a 2-day one-time url.
18:11 < shoshy> konobi: i saw the http://superuser.com/questions/303400/forwarding-specific-ports-through-ssh-reverse-tunnels, (-L and -R) but not sure if im doing things right...  
18:11 < nsm> shoshy: code link?
18:11 < shoshy> nsm: code is pretty big, ~500+ lines...
18:11 < bradleymeck> chovy if you are resetting and just sending them a random string for them to fix by logging in again, sure, anything small enough to prevent collision
18:12 < bradleymeck> dont let them input their new password on the site if they can randomly stumble to the url, ever
18:12 < shoshy> nsm: it uses stream to read into array 100K points (7MB txt file) and does calculation on them
18:13 < chovy> bradleymeck: yeah, they would have to send reset, then brute force the url. I don't know how long that would take for 8 characters vs. 32.
18:14 < bradleymeck> chovy: even if they brute force, do not let them enter the password when they hit that url, just send them a new randomly generated password. if you send them the randomly generated one brute force wont accomplish anything except the user getting an email
18:14 < nsm> shoshy: well the code might show signs of aleak, otherwise completely out of my league :)
18:14 < chovy> bradleymeck: ok.
18:14 < chovy> good point.
18:15 < chovy> so then i need to make this password a temporary one that requires them to change it when they login.
18:16 < chovy> maybe i don't even need this one-time url step.
18:16 < bradleymeck> chovy: if you want them to, i generally just let them keep the randomly generated one
18:17 < JangoF> hmm
18:17 < chovy> ok
18:17 < JangoF> freenode is crashing :(
18:21 <@konobi> shoshy: time to gist your code
18:23 < shoshy> konobi: can't do that.. im sorry. I'd love to honestly, i want to die here... with this error
18:23 < koara> i'm forwarding http reponses with `http.request(options, function(fres) { fres.pipe(res); });`, but that doesn't seem to forward statusCode
18:23 < shoshy> and im pretty sure its not a leak or something from my code , rather than the heap limit of node
18:23 < koara> it always sends 200, even if fres.statusCode was 500
18:24 <@konobi> shoshy: -L 1337:127.0.0.1:1337
18:24 <@konobi> tht will setup port 1337 on your local machine to forward traffic to the "localhost" port 1337 on the machine that you ssh to
18:24 < shoshy> konobi: thanks, but what else i need to set up? , as in ssh config files... 
18:25 <@konobi> nothing
18:25 < shoshy> wait... im using windows here, ec2 is linux. 
18:25 <@konobi> just `ssh -L ... user@host`
18:26 <@konobi> ugh... windows
18:26 <@konobi> there are commandline versions available for win32
18:26 < shoshy> im using puttry to login
18:26 < shoshy> hmmm..
18:26 < s5fs> konobi: putty is the standard for windows (if one exists)
18:26 < shoshy> *putty
18:27 <@konobi> s5fs: sure
18:27 <@konobi> i haven't used windows in years, so i have no idea what putty looks like these days
18:28 < s5fs> konobi: looks the same
18:28 <@konobi> s5fs: then why not take shoshy through the process
18:29 < s5fs> konobi: i'm not on windows either, haha!
18:29 < bradleymeck> konobi: pretty much the same as days of old except it requires a separate keystore process to do good things
18:30 < s5fs> shoshy: this looks pretty close to what I think you wanna do, http://oldsite.precedence.co.uk/nc/putty.html
18:31 < shoshy> s5fs: ok, thank you...ill read it and try tunnel it
18:32 < shoshy> could  you guys please just explain, for knowledge sake, ive tried reading about it more, about the heap limit of node.js
18:32 < shoshy> is that really 1GB?
18:32 <@mbalho> shoshy: not anymore and Buffers are stored outside the heap so it doesnt matter unless you write bad programs
18:33 < shoshy> mbalho: ok.. so an array with size of 100,000 were each cell is ~158 bytes shouldn't be problematic (of course its being manipulated)
18:34 < shoshy> *where
18:35 < chovy> bradleymeck: ok, so they have to click the one-time link to actually generate a new one, otherwise anyone could reset a password.
18:35 < bradleymeck> chovy: yup
18:36 < shoshy> thanks a lot guys , im off ..tomorrow new day. Thanks, bye for now
18:36 < s5fs> shoshy: best of luck!
18:38 < jarr0dsz> hey guys im trying to tackle a certain problem for a while now and tried 2 solutions each at the far most scope of how to do it
18:39 < jarr0dsz> would like to ask some thoughts on what you guys think about it.. basically im building a game in another language ( not node.js) and this app is a game with say 3 rounds
18:39 < jarr0dsz> start, round1, score. there is a background deamon that sends websocket data to a client channel wich triggers a jquery reload div contents event
18:40 < jarr0dsz> so this worked very nice for 1 big issue.. if a user would reload its page at the same time the deamon would send the websocket data it would not be delievered and the game roudn would be stuck ( no reload )
18:41 < jarr0dsz> so ive tried to tackle it 2 sides... 1) using just the deamon to send data to client as discussed above and 2 ) have all the reload times in the client with some queue method that i call in my app that generates jquery countdown timers
18:41 < jarr0dsz> both have there + and -'s building the queue and inserting it in the client html is very complex because you have to calculate times, special events etc
18:42 < jarr0dsz> any thoughts on above?  i have no basically decided the client way is to go and node.js + websockets.io will be used to make sure that the client gets the queue data in its page ( using a node.js push notification server )
18:43 < bradleymeck> jarr0dsz: why not just have it send acks that the data was recieved (jsonrpc or something) and send saved state when you make a new connection (such as on refresh)?
18:43 < jarr0dsz> bradleymeck: yes in now calling the queue method in my app every second with a gruwsome ajax .load wich is to be replaced with the node.js server
18:44 < jarr0dsz> i tend to feel that the client queue thing is quite complex and sucks quite a lot in testing you have to run the game everytime, it feels to complex although it seems the most logic way
18:45 < jarr0dsz>   server -> client -> js event and check with ack if the data is recieved I have tried that too but don't see how to make that solid
18:46 < ofaqfsaf> hi
18:46 < astropirate> Hello!
18:47 < ofaqfsaf> http://pastebin.com/raw.php?i=0JazMQfE
18:47 < ofaqfsaf> may you check please
18:48 < gildean> jarr0dsz: make the client send back a message with the open websocket when the data arrivers, and have a timout on the servers end
18:48 < astropirate> ECONNREFUSED
18:48 < gildean> *timeout even
18:48 < zackiv31> whats the best way to determine whether a request is for JSON or just for text? I would like to use the same express handler for both
18:48 < ljharb> ofaqfsaf: do you have a mysql server running?
18:48 < astropirate> ofaqfsaf, it cant connect. is the server you are connecting to on? is the port open?
18:48 < ljharb> zackiv31: there's three conventional ways
18:48 < jarr0dsz> gildean: and that would be solid at all times? what if the browser just reloads...
18:48 < tobo> zackiv31 http://expressjs.com/api.html#res.format
18:49 < zackiv31> I see an accept header, accept: 'application/json, text/javascript, */*; q=0.01', 'x-requested-with': 'XMLHttpRequest',
18:49 < gildean> jarr0dsz: then there would be a timout for that particular message
18:49 < ljharb> zackiv31: the accept header, _format param, or a file extension
18:49 < ljharb> zackiv31: there you go, application/json. just text would be text/plain
18:49 < jarr0dsz> gildean: so you would suggest to not using calculation of timeslots in client but rather stick with the deamon sending a websocket datastream to the client?
18:49 < gildean> jarr0dsz: mark the messages with an id, then send back a response with the same id
18:49 < zackiv31> ljharb: ty, res.format looks perfect
18:49 < gildean> jarr0dsz: yeah, it's lighter and less overhead
18:50 < s5fs> jarr0dsz: I'm doing radio protocol work currently, and we use a running sequence number to keep track of packets. truly nothing fancy.
18:50 < jarr0dsz> gildean: and how would you implement such thing? using node.js ? or just sockets.io inside client to send data stream
18:50 < ofaqfsaf> yes mysql server is running :(
18:50 < drewh> hey cool folks, I'm having some issues installing an npm package "punch" on my Ubuntu system I'm pretty noobish with node could someone help me trouble shoot?
18:50 < gildean> jarr0dsz: well if you already have a websocket connetion open, then just send messages trough it
18:51 < jarr0dsz> gildean: after timeout, the message would be resend, to where (?) you need some endpoint to handle
18:51 < s5fs> jarr0dsz: ensure state is managed by the server, the client should reflect state and initiate state changes on the server. state probably shouldn't be reflected on the client unless you get an ack from the server (if that makes sense)
18:51 < jarr0dsz> ok have to look into that then
18:51 < jarr0dsz> the client side was a nice try but it feels to complicated its hardly testable
18:51 < gildean> jarr0dsz: mark all the clients the message is sent, if one or more of them don't respond, try again, if not even then, drop the connections
18:53 < chovy> bradleymeck: how long do you let them use the one-time url for?
18:53 < chovy> i was thinking 2 days
18:53 < bradleymeck> sounds fine
18:53 < ofaqfsaf> http://pastebin.com/raw.php?i=0JazMQfE :/ ?
18:53 < ofaqfsaf> mysql server is alive
18:54 < CoverSlide> are you sure that mysql is listening and not in skip-networking mode?
18:55 < mateodelnorte> anybody gotten dnode to work with express 3 on node 0.8.x?
18:56 < claudio> Hi, I need an advise here. Do you think that to develop a "two windows" console application (like the half top part of the screen contains a scrolling log file and the second half a command line, readline enabled) I need ncurses, or is there a simpler approach? (even more low level)
18:56 < mateodelnorte> it's not happy with the result of http.createServer() as a listen() parameter: https://github.com/substack/dnode/blob/master/index.js#L111
18:56 < tobo> mateodelnorte it looks like you should pass .listen({ port: n }) etc
18:56 < tobo> or something
18:56 < tobo> whatever parseArgs() is doing
18:58 < CoverSlide> mateodelnorte: https://github.com/substack/dnode#dnode-in-the-browser <-- it looks like this is how you use it with an http server
18:58 < bradleymeck> claudio: ncurses is easier than other ways
18:58 < CoverSlide> it used to use socket.io for the server, but it looks like that dependency has been removed
18:59 < CoverSlide> and requires shoe now
18:59 < claudio> bradleymeck, it possibly is, yes... 
18:59 < jarr0dsz> so maybe stupid question from a newbie but you can place your node application anywhere right since node runs its own server
19:00 < jarr0dsz> so it would be wise to place it in a non public location
19:00 < bradleymeck> jarr0dsz: correct, dont put it in a public location
19:00 < mateodelnorte> @CoverSlide: thx. I'll check out using sockjs and that example
19:01 < jarr0dsz> and can you hook node.js behind nginx for example? any best practice on what port to run a node.js server in production servers
19:02 < jarr0dsz> already have several ports to be used like ejabberd, port 80 for http traffic, and some other deamons eating up ports
19:02 < gildean> jarr0dsz: it's quite normal to have some kind of proxy in front of the various node servers
19:03 < jarr0dsz> yes a proxy indeed that was what i meant, im using unicorn under nginx for a rails app great i digg some info on that
19:03 < gildean> and run the node servers on whatever ports you want to
19:03 < gildean> and are available
19:03 <@konobi> as to which one, depends on what you want to achieve with your node app
19:04 < harbhub> tell me your secrets.  ask me your questions.
19:04 < jarr0dsz> found a good writeup on stack it could be nicely behind nginx just like the rails app
19:05 < jarr0dsz> konobi: isent putting node behind nginx a good way? nginx isent causing any limitations isent it
19:05 <@konobi> jarr0dsz: for example, websockets won't work behind nginx
19:05 < jarr0dsz> ah. dident knew that thx.. yes  ill be needing sockets.io support
19:05 < jarr0dsz> no way to work around that? woudl be nice not having the need for another server addition
19:06 <@konobi> well socket.io doesn't nessecarily mean websockets
19:06 < gildean> jarr0dsz: then i might suggest using node-http-server, see a gist i made here: https://gist.github.com/3774377
19:06 < jarr0dsz> konobi: it seems http://www.letseehere.com/reverse-proxy-web-sockets it can be done
19:06 <@konobi> but if you want websocket support you'll need to try the tcp_proxy module patch or switch to something like haproxy
19:06 < gildean> that's a functioning proxy-server with routing
19:07 < jarr0dsz> i would not want a setup and then later detect it has all kind of limitations
19:08 < jarr0dsz> gildean: your solution is quite more simple than the one in the blogpost
19:08 < jarr0dsz> i mean in a good way it requires less work and no nginx recompile. im actually running nginx on centos repo package a custom compile would break easy update
19:09 < gildean> jarr0dsz: yeah, i like simple :D
19:09 < jarr0dsz> gildean: can you run it also on lower ports like this? like 81,82,83? or is that considered no good practice
19:09 < jarr0dsz> sorry really newbie on node and related stuff
19:09 < gildean> jarr0dsz: you could, but i prefer ports over 1024
19:09 < gildean> as you can run the processes on those ports without roots
19:10 < jarr0dsz> gildean: beside the configurements that has to be done to nginx to make it work, what advantages has your solution over nginx? or has nginx advantages over using your gist solution?
19:10 < gildean> nginx is faster i think
19:11 < koara> i'm forwarding http reponses with `http.request(options, function(fres) { fres.pipe(res); });`, but that doesn't seem to forward statusCode
19:11 < koara> it always sends 200, even if fres.statusCode was 500
19:11 < gildean> other than that, node-http-proxy has worked great for me
19:11 < koara> any idea how to forward the response verbatim, including the status code?
19:11 < tasslehoff> I use the following code to serve a zipfile from an embedded system: https://gist.github.com/3783802. Packing to /tmp (ram) for speed, but some directories are just to big. Any way I can do this without an intermediate file, and without sacrificing (much) speed?
19:11 < CoverSlide> koara: res.statusCode = fres.statusCode
19:11 < gildean> i'm pretty sure some of the authors of http-proxy hang around here and can tell more about it
19:12 < CoverSlide> or #nodejitsu
19:12 < koara> CoverSlide: thanks, that seems simple enough :)
19:12 < koara> i couldn't find much info about what pipe actually does -- how about other headers?
19:13 < CoverSlide> piping http responses just pipe the body. the headers, status code, etc are separate
19:13 < koara> ah ok
19:13 < koara> in fact, i couldn't even find documentation on what fields the `response` var contains
19:13 < koara> had to reverse engineer it by printing to log...
19:14 < koara> is this documented anywhere?
19:14 < jarr0dsz> gildean: great thx i stick with it for now than also, can always lateron move to nginx optional
19:14 < CoverSlide> no, that seems to be how we all did it
19:16 < jarr0dsz> gildean: i now have this as server.js http://pastie.org/private/wjzplnmb9clyq0w8sjmia wich is mostly not written by me ;)
19:16 < jarr0dsz> its a push notification that checks if an files content is changed then updates client over websocket
19:17 < jarr0dsz> im completly confused by node sockets coding syntax methods and stuff this is gonna be a hard one to get into
19:17 < jarr0dsz> not even an idea where to start :(
19:17 <@Nexxy> at the beginning
19:18 < jarr0dsz> ok that would be sending data from server to client saying "reload page" im using faye and a gem called private_pub wich adds security around a listener channel on the client
19:19 < jarr0dsz> but if i would rewrite all this no idea where to start with this lets dish faye and start from scratch then
19:19 < Gottox>  /win 23
19:19 <@Nexxy> lol
19:19 < CoverSlide> jarr0dsz: for one thing, you probably don't want a new watcher for the same file for every connection
19:20 < jarr0dsz> i really have to write down the new flow before going insane ;p CoverSlide no im not using that code it was an example i dont think ill need push notification now ill need some sort of send + ack system
19:23  * tasslehoff thinks perhaps node-zipstream is The Way
19:23 < WarheadsSE> isaacs: just confirming, 0.8.10 not _official yet
19:24 < WarheadsSE> or am i quite wrong
19:24 < gildean> jarr0dsz: i've used the ws-module, it has some examples here: https://github.com/einaros/ws/tree/master/examples
19:24 < aandy> tasslehoff: it is. that's the "best" i've used for streams, although i was not so pleased with it the other way around (extracting realtime)
19:24 < aandy> but for your case i would definately use it
19:25 < jarr0dsz> gildean: that looks nice i setup a demo of that locally
19:25 < tasslehoff> aandy: great. seems fairly straightforward, though I wish I could just add a folder and keep the hierarchy :)
19:25 < jarr0dsz> i was typing my application flow in pastie but its acting up again lot lately
19:26 < aandy> tasslehoff: right. keeping time/attributes is even more of an issue, but hieracy is ok. just mkdir when the parsed object is a folder, and write it to a file when it's a file
19:27 < jarr0dsz> something like this is my current setup: http://pastebin.com/VP2sDkXX
19:27 < jarr0dsz> could you guys advise me on the way to go based on that? theres so many options implementations of sockets, streams that its quite undoable without a clear goal to work towards
19:28 < jarr0dsz> i have problems defining the technical need on what to build to achieve the wanted results
19:29 < jarr0dsz> from you'r suggestions and what ive read, i would need to first get node.js running and a way to communicate from the background deamon to node, to send a datastream to to a certain client
19:29 < jarr0dsz> since the app is multi user that would also require some session user id handlement stuff to add even more complexity ;p
19:35 < shoshy> @konobi: i'm back for a sec, i've used a profiler to create a v8.log , does thi help? 
19:35 < shoshy> *this
19:36 < sinclair> hey guys, how well how backbonejs work on node?
19:37 < drewh> How do I check what version of node.js I'm running?
19:37 < shoshy> node --version
19:37 < drewh> thanks shoshy
19:37 < shoshy> np
19:37 < aandy> yikes, i'm on 0.6.18 how the hell did that happen
19:38 < aandy> ah, legacy bin, d'oh
19:38 < drewh> so I'm trying to download an npm library i.e. "sudo npm install -g punch" and it's throwing an error and seems to not be installing 
19:39 < drewh> I'm running Ubuntu
19:39 < shoshy> drewh: what error? 
19:39 < shoshy> anyone here can help with v8.log file? of a job that exploded memory (or node.js that exploded the job :) )
19:40 <@konobi> shoshy: using the heap profiler is much better
19:40 < drewh> http://pastebin.com/t3LdK2EM shoshy
19:40 < aandy> is there a way to check the path of a required lib? say, if you have it in multiple $PATH places
19:40 < shoshy> konobi: i would have hoped you'd be happy! i used this profiler: https://github.com/bnoordhuis/node-profiler
19:41 < shoshy> and it shows the heap dumps... and everything :)
19:41 < drewh> I'm really unfamiliar with node, so this is super frustrating 
19:41 <@konobi> shoshy: sure... but the webkit one is just visually much easier to deal with
19:41 < sinclair> drewh: i gave up windows to run node...for no reason really, as node runs fine on windows
19:42 < s5fs> sinclair: I think you made the right choice if for no other reason than ease of support
19:42 < shoshy> drewh: you need python installed (v2.7) and node-gyp for that nm.
19:42 < sinclair> s5fs: im running linux nowadays
19:42 < drewh> okay, I thought I had python, let me check
19:42 <@konobi> shoshy: all you need is google chrome canary... click on a link and make sure you have the node process on your ec2 instance running with the agent and having sent USR2 along with ssh forwarding
19:43 < sinclair> s5fs: i have such mixed feelings about node
19:43 < drewh> shoshy: I'm python 2.7, how can I get/check for node-gyp?
19:43 < sinclair> s5fs: despite that, i have been reading up and will look at adopting it
19:43 < TooTallNate> drewh: node-gyp comes with npm, just run `npm install xxx`
19:43 < tasslehoff> aandy: mkdir when it's a folder? that I did not understand.
19:43 < s5fs> sinclair: haha, tell me more, i'm about to embark on my first pro node gig
19:43 <@konobi> TooTallNate: actually it's split out now, iirc
19:44 < sinclair> s5fs: nice :)
19:44 < sinclair> s5fs: why are you using node?
19:44 < TooTallNate> konobi: well it has its own repo, but it comes bundled in npm's node_modules
19:44 <@konobi> TooTallNate: but it's npm installable
19:44 < sinclair> s5fs: over something else, what made node the dandidate?
19:44 < sinclair> *candidate
19:44 < TooTallNate> konobi: indeed :)
19:44 < s5fs> sinclair: this is for an embedded device, so we'll be using it to manage the web ui (static content and websockets) and i'm also evaluating it for traditional network service development as well
19:45 <@konobi> oh... huh... i had to install it to get something working a while back, iirc
19:45 < s5fs> sinclair: in our case, we chose node.js because of socket.io and our desire to drop lighttpd
19:45 < s5fs> sinclair: please be mindful that we're still designing on paper here, first sprint should be starting soon
19:45 < sinclair> s5fs: you say this is for an embedded device
19:45 < s5fs> sinclair: indeed
19:46 < TooTallNate> konobi: must have been an older npm or something, now when npm sees a "binding.gyp" file in the package root, it will just run "node-gyp rebuild" for you
19:46 < sinclair> so, it connects to socket.io / a socket?
19:46 < TooTallNate> you don't even need to specify a "script.preinstall" in the package.json
19:46 <@konobi> yeah, maybe that's it
19:47 < s5fs> sinclair: the embedded device would host the web server and client webpage, it runs linux and will be accessible via ipv4. so, think about a linksys router type of deal, it's got an OS of some sort and a web interface (and therefore a web server) and a bunch of other crap
19:47 < sinclair> s5fs: i have been trying to weigh socket.io against signal r, so far, signalr is still on top. Especially as it has client libs for everything
19:47 <@konobi> sinclair: you could always read up on why folks are using it at nodesummit
19:47 < drewh> so I've got python and node-gyp in, I try to install punch and it errors out, part of the error is this: Failed at the pty.js@0.1.2 install script.
19:47 < sinclair> s5fs: ahhh
19:47 < sinclair> s5fs: node for the win :)
19:47 < drewh> pty.js seems to fail often...
19:47 < s5fs> sinclair: signalr doesn't work here, i'm the only .net dude and i mainly run linux so.. haha!
19:48 < s5fs> sinclair: additionally, the customer dictated the majority of the stack
19:48 < sinclair> s5fs: thats one commited customer :|
19:48 < TooTallNate> drewh: first, delete /home/drew/.node-gyp
19:48 < drewh> k
19:48 < sinclair> s5fs: i dont think ive ever had a customer dictate a technology stack to me 
19:48 < TooTallNate> drewh: you probably ran npm install with sudo and the permissions got all screwed
19:49 <@konobi> s5fs: sounds like a smile plug job
19:49 < s5fs> sinclair: they designed the hardware, we're doing the software side
19:49 < drewh> TooTallNate: I did
19:49 < aandy> tasslehoff: in the extraction example
19:49 < sinclair> s5fs: node will be really nice for this i think
19:49 <@konobi> s5fs: huh... that sounds rather interesting
19:49 < TooTallNate> drewh: so run npm install again
19:49 < TooTallNate> without sudo
19:49 < aandy> i'm not sure you can add dirs when creating a zip
19:49 < sinclair> s5fs: side note, .net guy here also
19:49 <@konobi> s5fs: under nda i assume though
19:50 < garrettwilkin> Just got the email about NodeStack and i registered
19:50 < garrettwilkin> anyone know any more about it?
19:50 < drewh> should I delete /home/drew/.npm TooTallNate?
19:50 < TooTallNate> drewh: no that's fine
19:50 < drewh> ok
19:50 < shoshy> konobi: right.. got canary, the node process on ec2 runs the agent and as i said before sending kill USR 2, about ssh forwarding i tried with putty , did forward 1337 local host and destination localhost like you said
19:51 < s5fs> konobi: yeah, unfortunately so. this is a new contract with a new customer, so it's going to take some time to build the relationship up, then i can begin to talk about the project more freely
19:51 < shoshy> then i tried loging to http://c4milo.github.com/node-webkit-agent/21.0.1180.57/inspector.html?host=localhost:1337&page=0
19:51 < shoshy> but it gives me an empty console with no code..
19:51 < s5fs> sinclair: yeah, your reference to signalr kinda dropped the .net hint, haha!
19:51 < drewh> TooTallNate: it gave me this error: npm ERR! Please try running this command again as root/Administrator.
19:51 < TooTallNate> drewh: what are you trying to install?
19:52 < drewh> punch
19:52 < drewh> npm install -g punch
19:52 <@konobi> shoshy: send the signal before forwardsing (since it won't be listening on that port before then)
19:52 < drewh> should I not use the -g?
19:52 < shoshy> konobi: i did
19:52 <@konobi> shoshy: also, do you get output from your script when you send the signal?
19:52 < s5fs> Any bluetooth libraries for node yet? 
19:52 < tommydudebreaux> hi everyone. I need to exclude a module with browserify.  I remember substack mentioning that you could wrap in parens and it would be excluded in bundle.  anyone aware of this?
19:52 < aandy> tasslehoff: i would actually recommend a controvertial approach that i've used before for zip: spawn the zip util and communicate by pipes that way
19:53 < tasslehoff> aandy: ah ok. it`s only the creation I need to do.
19:53 < sinclair> s5fs: 90% of the projects i work on, or ever likely to work on, SignalR would suit, i've been searching for a niche with node. In all tho, ive decided to completely blast on with node, figured id just spend forever justifying and not getting anything done with it otherwise.
19:53 < shoshy> konobi: nope, its bussy with calculations (its inside some loops i assume)
19:53 < aandy> yes, but it seems dirs are not supported at all on creation
19:53 < tasslehoff> aandy: that was a response to your previous comment, I just saw the latest one :)
19:53 < sinclair> s5fs: node is a cool tech afterall
19:54 < TooTallNate> drewh: i guess just use sudo
19:54 < aandy> https://github.com/janjongboom/node-native-zip it's still spawning, but then you don't have to write your own wrapper ;)
19:54 < s5fs> sinclair: i'm actively trying to move away from the web and get back down to the hardware, which is nearly impossible
19:54 < TooTallNate> drewh: but you should look into chowning your /usr/local dir, it will save a lot of headaches
19:55 < sinclair> s5fs: as in embedded hardware?
19:55 < s5fs> sinclair: node is very cool tech, i started out doing little doodle-around projects with an arduino and saw node as an easy way to bridge the gap between serial and the web
19:55 < drewh> chowning it to my user account?
19:55 < s5fs> sinclair: ideally, yes. i'm doing lots of java network programming now and wanna drop down into c++.
19:55 < sinclair> s5fs: oh nice:) you can get node running on arduino?
19:56 < drewh> @#(* it's still not working. How can I remove EVERYTHING and start over from scratch?
19:56 < tasslehoff> aandy: thanks.
19:56 < s5fs> sinclair: no, i ran node on a regular computer and talked to the arduino over usb using a ghetto serial protocol i made, haha
19:56 < claudio> ghetto serial protocol rulez.
19:57 < sinclair> s5fs: ah right
19:57 < sinclair> s5fs: the closest ive ever been to hardware level development was mode 13h back in the 90's 
19:57 <@konobi> shoshy: ah... you might want to have it not run stuff until you're ready
19:59 < s5fs> claudio: yeah, ghetto proto is where it's at, always does exactly what i need!
20:00 < s5fs> sinclair: have you played with the .net gadgeteer?
20:00 < sinclair> s5fs: nope, what's it all about?
20:01 < s5fs> sinclair: like a fool i bought a lego mindstorm nxt kit and was using the microsoft robotics dev studio to drive it around the house, haha! fun, but not worth the money.
20:01 < s5fs> sinclair: http://netmf.com/gadgeteer/  little device that runs .net micro framework, kinda like an arduino but for the clr crowd
20:02 < sinclair> s5fs: oh, is it a small  .net runtime for embedded devices?
20:02 < s5fs> sinclair: it's hardware running the .net micro, which is for embedded devices.. so yah
20:02 < sinclair> s5fs: looks kinda cool
20:02 < s5fs> it looks totally funky!
20:04 < Bonuspunk> whats the price for the current dev boards/kits?
20:09 < s5fs> Bonuspunk: for the gadgeteer stuff? i'm not certain, check out netmf.com/gadgeteer if you want more info. only looks like a couple options exist.
20:09 < s5fs> Bonuspunk: we're doing stuff with beagleboards and gumstix at my shop, not gadgeteer devices
20:10 < Bonuspunk> i purchased a .net mf board 3-4 years ago, and it was 400 bucks or so
20:10  * konobi sticks to rpi and arduino
20:11 < s5fs> konobi: still too hard to get rpi hardware in a reasonable timeline but i hope that gets resolved
20:11 <@konobi> s5fs: nope... 1 week these days
20:12 < s5fs> konobi: yeah, i was seeing 2-3wks a couple weeks ago, but these were often single unit purchases. if i want 25 or more i'm not sure what that purchasing process looks like.
20:13 < cyberd0m> Hihi, maybe someone can help me with mongodb. I'm simply trying to connect to it. It works from the shell (i.e. mongo localhost/test) but I can't connect from the node terminal. I try: require('mongodb').connect('mongodb://localhost/test', function(x) { console.log(x); }); It tells me: [Error: failed to connect to [localhost:27017]]
20:13 <@konobi> s5fs: depends on the supplier too
20:13 < s5fs> konobi: i fully intend to pick up a few rpis for myself though, i'm not paying gumstix prices, haha
20:13 < s5fs> konobi: agreed. i was going by the two linked on the rpi site, so rsi and farnsworth iirc
20:13 <@konobi> newark says "100 available to ship today"
20:14 < s5fs> konobi: that's good! hopefully i can use them for a future project
20:15 < cyberd0m> (I have npm install mongodb.. it's the 1.1.7)
20:15 <@konobi> i've played with openelec, basic gpio stuff and getting node compiled
20:15 <@konobi> that's about it so far
20:15 < s5fs> konobi: nice! i'm looking at the rpi for home automation as well
20:15 < larryapplegate> We are looking for a Node.js Intern to work closely with IOS developer (me).
20:15 < drewh> chjj: Npm is telling me to contact you
20:16 < drewh> chjj: did you make pty.js
20:17 < draginx> Whats a good uploader module?
20:17 < draginx> i remember there being an oen source one from a company that specialiced in uploading videos and encoding O_o
20:19 < bradleymeck> draginx: formidable
20:20 < draginx> that was it! ty :)
20:24 < draginx> can formidable tell the client how much % has been uploaded?
20:25 < aandy> draginx: yes
20:25 < aandy> there's a progress event emitted for that
20:25 < draginx> aandy: do you have a tutorial/snippet somewhere? O_o
20:25 < draginx> right but how would that pas onto the client..?
20:25 < aandy> that's up to you. personally I use websockets
20:26 < aandy> you could have the client polling a /status page aswel, that's up to you, depending on your setup, or what you need
20:26 < draginx> Yeah trying to avoid websockets as of right now :)
20:26 < draginx> hmm
20:26 < draginx> I might just do it on the client side then
20:28 < aandy> i just have something like form.on('progress', function(rec, exp) { io.sockets.emit('progress', { progress: { expected: exp, received: rec, pct: 100*(rec/exp) } })
20:28 < WarheadsSE> konobi: hmm, pi?
20:28 < aandy> draginx: so you'd use an ajax approach instead, or?
20:28 < draginx> yeah
20:28 < aandy> in that case, i'd store the progress in a memcache
20:29 < aandy> and then query it client side 
20:29 < aandy> alternatively, if you don't use the other features of formidable, there's nginx which has an excellent module for that (and an endpoint you can query for status)
20:30 < aandy> http://wiki.nginx.org/HttpUploadProgressModule
20:34 < amzul> hi, i am getting error trying to install monogjs (npm install mongojs) i am getting sh: 1: node: Permission denied
20:34 < amzul> npm ERR! bson@0.1.3 install: `node install.js`. what can be the issue? where i should look? BTW i am running ubuntu server and i am root 
20:50 <@isaacs> WarheadsSE: no, not official until there's an email and a tweet
20:50 < WarheadsSE> ok .. 
20:51 < WarheadsSE> I'll just not tweet then ;) but sneak people might find an update ..
20:55 < WarheadsSE> but then, I suupose isaacs that is what I get for watching github commits & references in G+ :P
20:56 < jocafa> where's that rpflo kid when you need him?
20:56 < WarheadsSE> eh?
20:56 < ezeki> lhi
20:56 < ezeki> hi
20:56 < mscdex> yo
20:56 < ezeki> http://jok.fm
20:57 < ezeki> visit guys
20:57 < ezeki> it;s build on node
20:58 < mscdex> on an unrelated note, i'm quite surprised there isn't something analogous to WinSCP on Linux
20:58 < mscdex> makes me sad
20:58 < WarheadsSE> mscdex: us sshfs & what ever manager you want
20:59 < mscdex> WarheadsSE: i have a lot of connections to manage is the problem
20:59 < Nuck> Does Request handle gzipped responses automagically?
20:59 < Nuck> mscdex: Filezilla
20:59 < tnorris> is there anyway to reuse a `crypto.createHash()` object? the instantiation is really eating my performance.
21:00 < WarheadsSE> ah, yes, what Nuck said mscdex 
21:00 < mscdex> hmmm i'll give that a try
21:00 < mscdex> i trie gftp earlier, but it sucks so bad and is a dead project
21:00 < Nuck> mscdex: Filezilla is well-maintained IIRC
21:01 < Nuck> I personally use sshfs (and Cyberduck, since Mac), but Filezilla is damn good too
21:14 < sinclair> i cannot read the gedit terminal windows, i can't change the size of the text, and i cannot connect gedit to FTP
21:14 < sinclair> is there something else ?
21:14 < sinclair> these plugins don't work
21:15 < s5fs> sinclair: what are you trying to do?
21:15 < sinclair> trying to find a good notepad++ like editor for ubuntu
21:16 < s5fs> sinclair: i use netbeans for java stuffs and gvim for everything else
21:16 < niggler> fuck java
21:16 < niggler> sinclair: use vim
21:16 < s5fs> niggler: yeah, fuck steady employment!
21:16 < sinclair> s5fs: does gvim have FTP?
21:16 < niggler> hey!  you just need to start your own business
21:17 < niggler> sinclair: :help netrw
21:17  * WarheadsSE keeps seeing gEverything
21:17 < s5fs> niggler: haha, where do you think the java requirement came from, the java-fairy?
21:17 < sinclair> s5fs: i tried gvim, it was better than vi
21:17 < s5fs> niggler: customers determine requirements, i just build to spec
21:17 < nkuttler> but does it run on linux?
21:17 < niggler> s5fs: you need to go into finance
21:17 < Nuck> nkuttler: Can it run Crysis?
21:18 < niggler> you get to hack in C and assembly
21:18 < s5fs> niggler: i've spent a few years doing erp implementations and customizations, that's finance enough for my liking
21:18 < Nuck> Anyways, is it possible and sane to use jsdom to parse an XML file on the serverside?
21:18 < niggler> oh i meant hedge fund, not bank
21:18 < gildean> sinclair: sublime text 2
21:18 < Nuck> I second Sublime Text 2, personally
21:18 < s5fs> sinclair: oh yeah, gildean is right, sublime text 2 is very good
21:18 < BennyLava> sublime text 2 ++
21:18 < sinclair> alright, thanks, ill check it out
21:19 < Nuck> Even though I'm using giving Chocolat a try right now, I'm forever in love with ST2
21:19 < gildean> sinclair: also, on ubuntu there's no need for the application to have ftp support, it only needs gvfs support
21:19 < niggler> but in vim you can do it directly 
21:20 < gildean> as in, open nautilus, press ctrl+l and on the address-bar type: ssh://server.address (or ftp://server.address)
21:20 < Nuck> Yes, but vim is a pain in the ass
21:20 < niggler> netrw is actually pretty slick for most basic operations
21:20 < niggler> meh you get used to it
21:20 < niggler> esp on headless machines
21:20 < gildean> after opening the server connection, you can just edit files off the temp-mount
21:20 < Nuck> I'm used to vim, doesn't mean I like it
21:20 < Nuck> (though I do use vim bindings occasionally in ST2)
21:21 < nkuttler> i don't like vim either, i love it
21:21 < nkuttler> though i don't like emotion-speak too much when it comes to tools
21:22 < Nuck> I would love to have hot lustful sex with Sublime Text 2
21:22 < niggler> that is a really disturbing thought Nuck 
21:22 < Nuck> Isn't it though?
21:23 < larzconwell> Does anyone up here use Windows? If so do you know if fs.rename and fs.renameSync works correctly on it? 
21:23 < Nuck> As far as I know, there's no major issues on Windows
21:24 < niggler> fuck windows
21:24 < Nuck> That too, niggler 
21:24 < sinclair> niggler: calm down
21:24 < tommydudebreaux> browserify..  anyone an expert with it?
21:26 < larzconwell> Nuck,  Thanks. In a module I have a try..catch that tries fs.renameSync and falls back to a copy function and on Windows it seems to use the copy. So just wondering if there's any known issues with it.
21:26 < niggler> sinclair: windows 8 is godawful
21:27 < s5fs> niggler: i'm still interested to see win8 on a tablet tho
21:27 < niggler> sure s5fs but the desktop version destroyed most of the patterns that they had since windows 95
21:28 < sinclair> niggler: its not even released yet
21:29 < s5fs> niggler: agreed, the gesture-centric navigation doesn't make much sense on a traditional workstation
21:29 < niggler> sinclair: the desktop version is available on bizspark
21:29 < sinclair> niggler: win8 is just another operating system, you can also switch off metro if you don't want it
21:29 < s5fs> sinclair: rtm is out
21:30 < s5fs> sinclair: i dunno man, dropping metro won't re-enable a classic windows desktop will it? it's certainly an interesting release but i doubt it'll hit the enterprise desktop market, but server 8 looks cool
21:30 < s5fs> vm live migration w/o a shared storage backend is a nice feature
21:30 < sinclair> s5fs: http://www.youtube.com/watch?v=0CAuvlmPbJE
21:31 < sinclair> s5fs: and yes, this guy is a node troll
21:31 < tnorris> the values in `new Buffer(1024 * 1024)` seems like random data. where are those values coming from?
21:31 < WarheadsSE> sinclair: oh god, its that guy.
21:32 < sinclair> WarheadsSE: yeah, i know, but he does know how to disable metro
21:32 < s5fs> sinclair: ah, so win7 start menu is available in win8 too. thats very good.
21:33 < s5fs> sinclair: any idea if that's available via gpo? seems like it should be.
21:33 < sinclair> s5fs: i can't imagine ever trying to be productive in metro :D
21:33 < Nuck> haha BlackWaterOps
21:33 < Nuck> I forgot about him :')
21:33 < sinclair> node people should be openly critical about node where appropriate 
21:33 < sinclair> it makes node better afterall
21:34 < Nuck> It's true, but BlackWaterOps didn't even know what he was saying
21:34 < s5fs> Nuck: that's more common than not
21:34 < Nuck> He just went on about how we don't support the standard means of connecting into a webserver
21:35 < sinclair> Nuck: some of what he was saying was bs, or side stepping issues, the stuff about nginx over node for example
21:35 < Nuck> Of course we don't, we ARE a web server, and for good reason
21:35 < larzconwell> tnorris,  I think the Buffer values have to do something with https://en.wikipedia.org/wiki/Octet_(computing) http://nodejs.org/api/buffer.html#buffer_new_buffer_size
21:35 < Nuck> We're far lower-level than PHP when it comes to HTTP servers
21:35 < larzconwell> tnorris,  I could be completely wrong though. 
21:36 < Nuck> Y'know, I could see BlackWaterOps writing Perl code
21:36 < Nuck> He seems like the 1995-style neckbeard
21:36 < sinclair> Nuck: there are still things about node i seriously question, like the JavaScript part
21:36 < tnorris> larzconwell: it's a start. what I'm wondering if since a buffer just points to memory, if it will show what was in memory at that location previously.
21:36 < s5fs> lets not disparage perl now, gang
21:36 < Nuck> sinclair: Luajit works too
21:36 < s5fs> it needs all the help it can get
21:36 < WarheadsSE> Nuck: I write a lot of perl code.
21:36 < Nuck> To be fair, Perl DID make the best regex system in any language
21:36 <@konobi> sinclair: either use it, don't, or start submitting tickets for improvement... but you're starting to get troll-ish
21:36 < Nuck> But I must say Perl is still completely cracked :P
21:36 < sinclair> Nuck: i could write a pretty good node.csharp 
21:37 < WarheadsSE> and its far more capable than many people give it ;)
21:37 < Nuck> sinclair: haha
21:37 < Nuck> sinclair: Do it! It's already been done for Lua, with Luajit
21:37 < Nuck> IIRC
21:37 < sinclair> Nuck: a node.csharp with .NET 4.5 async await programming model
21:37 < tnorris> larzconwell: the reason I think that is because if I run `(new Buffer(1024, 'utf8')).toString()` a bunch from cli, it will show large chunks of '\u0000' and other places it will show values.
21:37 < sinclair> Nuck: its funny, theres a .NET proj underway to use the IronJS bindings to do a .NET node clone
21:38 < s5fs> sinclair: link?
21:38 < larzconwell> tnorris,  Hmm, that sounds interesting to test. 
21:38 < txdv> and what would node.csharp do?
21:39 < tnorris> larzconwell: yeah, I'm about to run a script that will grab 100MB chunks and look for strings. just to see if anything interesting pops up.
21:39 < txdv> sinclair: it uses the c# beginasync and endasync model, which sucks performancewise
21:39 < s5fs> imagine, all the type-checking of javascript with the expressiveness of c#!
21:39 < larzconwell> tnorris,  Let me know what you find! 
21:40 < txdv> I am developing LibuvSharp, which is a binding for libuv, which powers the node network api
21:40 < sinclair> s5fs: http://newcome.wordpress.com/2010/05/08/node-net-node-js-implemented-in-javascript-on-the-net-runtime/
21:41 < sinclair> s5fs: C# dynamics ftw
21:41 < txdv> xD
21:41 < txdv> C# is so cool because of type checking! but C# dynamics ftw
21:41 < txdv> fuck logic
21:42 < sinclair> txdv: ive been able to do some really neat things with dynamics,marshaling data to dynamic languages being just one
21:42 < txdv> sinclair: that node-net implementation sucks, because it is using beginasync and locking
21:42 < sinclair> i wish i could mix dynamics and expression trees
21:42 < txdv> which means it is slow
21:43 < sinclair> txdv: context switching issues?
21:43 < sinclair> txdv: i don't know the details of the proj tbh
21:44 < txdv> git clone ... && grep lock -r ./ revealed that it is shitty
21:44 < zackiv31> is there a node.js module that has rm -rf "somefiles*" ?
21:44 < zackiv31> I don't think rimraf supports it
21:44 < txdv> shelljs?
21:44 < s5fs> txdv: i'd expect it to be using locking as it's attempting to emulate a single-threaded process, yes?
21:44 < txdv> yeah
21:45 < s5fs> seems like they missed the point in some respects
21:45 < txdv> LibuvSharp doesn't have this problem, it exposes the functionality of libuv to csharp
21:46 <@konobi> you guys know there's a #libuv channel where you can chat away to your hears delight on this topic?
21:46 < txdv> yes we know
21:46 < txdv> but it is more fun to talk in here
21:47 <@konobi> txdv: until folks see it as trollsy
21:47 < txdv> You are an operator, I have to agree with everything you say
21:47 < txdv> I am already sitting around there, but nobody is talking about why they want libuv for c#
21:48 <@konobi> i don't mind the conversation, but it gets like this very often lately and there's no point or objective to it
21:48 < txdv> They just think, this new thing called node is so awesome i want it to have in language <x>, without actually thinking about what they really want, then they come to this channel and spam it
21:49 < eNvented> the first person to click this link http://lichess.org/vawrr25a will play a chess game against me
21:49 < s5fs> konobi: i think the challenge is keeping polyglots focused on just a single language.
21:49 < sinclair> eNvented: move
21:50 < eNvented> i did
21:50 < sinclair> eNvented: im white
21:50 < s5fs> konobi: i would also argue that the point is to build community. i've spent most of my time talking with sinclair about .net stuff and now we have a rapport, which may come in handy once i'm doing more node-centric work.
21:50 <@konobi> s5fs: if there was a tie in to node somehow, that'd be fine... but you may as well be talking about carpentry
21:50 < WarheadsSE> s5fs: was you referring to pi w/ konobi earlier?
21:51 < eNvented> sinclair, wtf? youre black
21:51 <@konobi> rpi
21:51 < s5fs> WarheadsSE: yes
21:51 < sinclair> eNvented: i hope you didn't write this :P
21:51 < eNvented> whatever
21:51 < eNvented> wait a sec
21:51 < sinclair> haha
21:51 < sinclair> eNvented: game on mate
21:52 <@konobi> s5fs: true... but there's also back-channeling too
21:52 < eNvented> sinclair, privmsgd u with another link
21:53 < sinclair> eNvented: nice :)
21:53 < s5fs> konobi: understood, and i do see your point and when you tell us to get back on-topic i'm happy to oblige. that being said, i tend to prefer any convo versus no convo, as long as it's polite
21:53 < WarheadsSE> well, anyways, questions is waht will you end up using, OS choice wise, but hey
21:53 <@konobi> s5fs: =0)
21:54 < s5fs> WarheadsSE: ubuntu or openembedded, still tbd
21:54 < s5fs> WarheadsSE: that's on a gumstix or beagle tho, not a rpi
21:54 < WarheadsSE> ah, theres Arch too :p
21:54 <@konobi> oh yay... my silent hill siren alarm went off for the first time (for reals)
21:54 < tnorris> larzconwell: so I'm outputting the binary contents of a new Buffer into a hex editor, and I'm seeing a few things. i'm sure someone that understands node Buffers could answer, but looks like it's grabbing random memory and returning it's contents.
21:55 <@konobi> i use arch on other embedded stuff
21:55 <@konobi> works pretty sweet
21:57 < s5fs> i'll take a look, i use ubuntu as my daily driver, but don't really have much preference
21:57 < WarheadsSE> depends on where your base is I suppose.
21:58 < larzconwell> tnorris,  I'm looking at the buffer source files in Node core, seems all greek to me.
21:59 < tnorris> larzconwell: heh, yeah. my cpp skills suck.
21:59 <@konobi> how are you outputting them?
21:59 <@konobi> the contents that is
21:59 < tnorris> konobi: `node -e 'console.log((new Buffer(1024 * 10, "ascii")).toString())' > /tmp/node_buffer.out`
22:00 < larzconwell> tnorris,  Same haha
22:00 < tnorris> guess I should change `console.log` to `process.stdout.write`
22:00 <@konobi> well yeah... you need to fill the buffer with something
22:01 < tnorris> konobi: but my question is where is the random data coming from?
22:01 <@konobi> tnorris: malloc
22:01 < larzconwell> konobi,  Thanks that's what I was thinking of! 
22:01 < larzconwell> konobi,  was searching around in src/node_buffer for it
22:01 < tnorris> so it just grabs a chunk of memory and returns the contents of it, if nothing has been written?
22:02 < txdv> JA
22:02 <@konobi> it's not random... it's just that something could have previously been written to that space and not nulled out
22:02 < tnorris> ah, ok. that answers my question.
22:02 < tnorris> would that logic be in the `libuv` library?
22:03 < tnorris>  /logic/source code/
22:03 <@konobi> tnorris: libc
22:04 < larzconwell> konobi,  I think he means where's malloc is being called in Node for the buffers.
22:04 < tnorris> yeah, in node_ buffer.cc there's the line `#include <stdlib.h> // malloc, free`, but I don't see it being called.
22:05 <@konobi> i don't have the source directly in front of me currently
22:05 < tnorris> konobi: well, thanks for the insight. at least now I know what to look for.
22:07 < tnorris> ls
22:07 < mscdex> dir
22:07 < tnorris> damn.... meant for bash
22:07 < mscdex> :-p
22:28 < Hotroot> Anyone else really confused by the new version of Express? It used to be so simple =/
22:28 < tobo> Hotroot things are confusing when they change, that's natural
22:28 < tobo> most software is like that, you get used to something, it changes, and then it's confusing again
22:29 < Hotroot> Problem with software being new I guess
22:29 < Hotroot> Just sucks, I had the basics down =/
22:32 < WarheadsSE> never stop learning
22:33 < Hotroot> Yeah
22:33 < Hotroot> Didn't there used to be an uninstall binary in node's folder?
22:34 < Hotroot> Trying to upgrade and I can't find how to remove the old version
22:35 < chilts> Hotroot: you could use nvm, n or nave so that you can install multiple versions of Node
22:36 < chilts> if you do, they'll be first in your $PATH so will not use your current install
22:36 < chilts> might help
22:36 < Hotroot> I want the old version gone
22:36 < Hotroot> I think node just updated while I was on the page 0.o
22:36 < danheberden> you can also install nave in one line: `sudo sh -c "$(curl -s 'https://raw.github.com/danheberden/nave-installer/master/nave-installer.sh')"`
22:37 < Hotroot> All I want is node gone
22:37 < Hotroot> I swear it came with an uninstall script or executable before
22:38  * chilts installs v0.8.10 :)
22:38 < Hotroot> So is there really no simple way to remove it?
22:38 <@konobi> how did you install it?
22:38 < Hotroot> Source, ran makefiles
22:38 < WarheadsSE> Arch Linux ARM already has it in the repos for all 3 architectures
22:39 < LowValueTarget> CoverSlide: Yo.... got sidetracked from my project earlier... ended up upgrading the geoip module
22:39 < danheberden> WarheadsSE: awesome
22:39 < LowValueTarget> all good in the hood
22:40 < WarheadsSE> I cheat danheberden .. I watch git.
22:40 < Hotroot> That was it. sudo make uninstall
22:40 < Hotroot> I thought it had it built in, was right
22:40 < danheberden> WarheadsSE: that ain't cheating, that's bad-assery
22:43 < WarheadsSE> hmm, about 3 hours ago id say
22:43 < WarheadsSE> idk, have to heck the commit time :p
22:43 < WarheadsSE> (mine, not his)
22:45 < othiym23> any node-tap experts around?
22:45 < othiym23> trying to figure out how to use t.on.end / this.tearDown properly
22:46 < othiym23> substack / isaacs: either of you around?
22:50 < othiym23> github search, y u so useless
23:03 < herzogharker> substack: hey, i'm using node-charm to make a little roguelike (and node-charm is awesome. thanks). but i'm in an unfortunate feedback loop as i'm having charm both read from stdin and write to stdout, meaning my code is interpreting characters drawn onto the screen as input from the user
23:03 < herzogharker> i'm wondering if you have any thoughts on how to approach that
23:18 < herzogharker> substack: well, at least for now i've set a lock on the key-handling event for when the screen redraws
23:18 < herzogharker> that'll fix it for now
23:20 < Parlance> so I'm in the middle of processing an http response, and I want to do something asynchronous, like send data on a socket and wait for a response message, and then keep processing my response
23:20 < Parlance> how exactly would I do that?
23:20 < Parlance> wouldn't it be way less stupid if you could put labels in your function and use those as a target of a callback instead of an entirely different function?
23:23 < Parlance> let's talk about like the simplest possible scenario
23:23 < Parlance> I'm processing an http response for a static file
23:24 < Parlance> if I want to use fs.readFile the callback I can specify gives me an error parameter and the data
23:24 < Parlance> so how the hell do I get back to my http response and give it the content?
23:24 < mscdex> Parlance: can you gist an example of what you're trying?
23:25 < Parlance> I have an http server object with an event listener for receiving an http request
23:25 < Parlance> I want to read a file and write that back to the response, like a web server
23:25 < Parlance> I'm using readFileSync because it's the only way it makes sense
23:26 < Parlance> how would I do it using readFile exactly?
23:29 < Parlance> oh
23:29 < Parlance> I have to write the function inline
23:29 < Parlance> that's
23:29 < Parlance> great
23:29 < txdv> Parlance: http://elegantcode.com/2011/04/06/taking-baby-steps-with-node-js-pumping-data-between-streams/
23:29 < txdv> there are already utility tools for doing what you want to do
23:30 < txdv> You've got to pump it up!
23:32 < mscdex> Parlance: yes, use pipes where you can
23:32 < mscdex> Parlance: something like: res.writeHead(200, {'Connection': 'close'}); fs.createReadStream('somefile').pipe(res);
23:35 < Parlance> does decodeURIComponent or url.parse automatically remove paths that contain double dots for security?
23:35 < Parlance> if someone gives my web server http://whatever/../../systemdir/whatever.dat and I use url.parse on that path am I going to leave that security hole open?
23:36 < deoxxa> Parlance: welcome to the fun and exciting world of "it's up to you, buddy"
23:37 < Parlance> that's retarded
23:37 < deoxxa> Parlance: yeah? why?
23:37 < Parlance> there's probably like 5 million web servers out there where they didn't handle that
23:37 < Parlance> node.js is going to set the world wide web back to the stone ages
23:37 < deoxxa> lol
23:37 < Parlance> in the 1990s where you could do stuff like that
23:37 < deoxxa> you're great
23:37 < deoxxa> can i keep you
23:38 < Parlance> the more I look at node.js the more I realize that nobody in their right mind would use it for anything more than fucking around
23:38 < deoxxa> Parlance: say more things!
23:38 < deoxxa> Parlance: talk about how it can't do a good fibonacci server
23:38 < danheberden> hahaha
23:38 < Parlance> if you were happily using node.js successfully why are you even here?
23:39 < shalotelli> deoxxa: LOL
23:39 < danheberden> to help grumpy people that aren't using it happily
23:39 < deoxxa> Parlance: when you've calmed down a bit, feel free to ask a less loaded question and i'll be happy to help you out :)
23:39 < niggler> lol Parlance 
23:40 < txdv> Parlance: you just don't understand the concept of the event loop
23:41 < danheberden> so... i feel really weird about using the sync methods in `fs`. Am i alone in this? Or is it like "dude, live easy and use 'em".
23:41 < larzconwell> Parlance,  Usually a web server handles if a file path should be available to a client. decodeURIComponent ensures no "illegal" characters are in the path like spaces, ampersands, ect. url.parse extracts useful info from a string for a URI construct.
23:41 < txdv> if you would really understand how it works then the concept which node.js uses would appear to be the sainest one when dealing with a lot of connections at once
23:42 < txdv> danheberden: use them for app initialization, avoid them otherwise
23:42 < danheberden> txdv, that sounds completely reasonable
23:43 < larzconwell> danheberden,  I feel the opposite. I feel using the async  `fs` functions are dangerous
23:43 < BennyLava> lolwat
23:43 < danheberden> larzconwell: in respect to the server running? or people creating race conditions
23:44 < txdv> is sendfile still around in the node api?
23:44 < ChrisPartridge> that was express/connect wasn't it?
23:46 < larzconwell> danheberden,  With any File IO. Specifically if later a file created asynchronously is needed for something. 
23:47 <@konobi> txdv: i don't think it is anymore
23:47 < txdv> and I was wondering why that code didn't work on my binding
23:47 < danheberden> larzconwell: do you feel that could be handled in js though? like a deferred file approach? e.g. `var saved = saveFile('file.wat')` returns a promise and `saved.done(function(){ /* do something with saved file /*});`
23:47 <@konobi> it's in 0.8.8 though
23:47 < danheberden> s/could/should/
23:48 < larzconwell> Yeah that actually makes sense.
23:48 < danheberden> that's how i'm making it in my app, but i think the initialization part makes sense  - similar to requiring files
23:48 <@mbalho> danheberden: if you put sync calls in your event loop youre gonna have a bad time
23:48 <@konobi> txdv: it may be undocumented though
23:49 < danheberden> mbalho: cool; i had thought that or felt like that - but wanted to keep inline with best practice in the community
23:49 < larzconwell> Yep that's how I do it most of the time. Sync for init and async otherwise.
23:49 < danheberden> bitchin'
23:52 <@konobi> daleharvey: promises were thrown out a long time ago
23:52 < daleharvey> that sucks, but eh? :)
23:53 < danheberden> konobi: was that meant at me?
23:55 < killfill> hi
23:56 < killfill> isaacs: you there? https://github.com/isaacs/st/blob/master/st.js#L83  <-- what is that _extend call?.. i get method not found.. :S
23:56 <@konobi> danheberden: um... yes
23:56 < yani> hi everyone, I have the following redis call client.smembers('usernames', function(err, usernames) { console.dir( usernames ) } ); my problem is that usernames array has many null values - have you had such problem?
23:56 < danheberden> konobi: i've been using the jQ deferreds implementation - wookiehangover ported it over to underscore (underscore.deferred)
23:57 < killfill> yani: maybe becouse there are errors in 'err'
23:57 < yani> @killfill good point, let me check the err
23:58 < yani> unfortunately, it's null :/
23:59 < danheberden> killfill: this is _extend: https://github.com/joyent/node/blob/master/lib/util.js#L550
23:59 < danheberden> older version of node perhaps?
--- Log closed Wed Sep 26 00:00:22 2012
