--- Log opened Wed Jul 11 00:00:50 2012
00:00 < othiym23> bradleymeck: there's always Travis
00:01 < othiym23> or do you mean built binaries?
00:02 < dsirijus> ok, so i have a 2 hours per facebook application till deadline in the morning
00:04 < dsirijus> time to crank up Queen
00:04 < othiym23> oh yeah, time to finish listening to that Asia record from yesterday
00:04 < othiym23> time for some NERD ROCK
00:05 < bradleymeck> othiym23: i mean built binaries
00:05 < othiym23> after taking a break to listen to isaacs dshaw_ and visnup talk for about 30 hours
00:05 < dsirijus> no nerd rock gets you 48 hours straight coding
00:05 < dsirijus> :{
00:05 < dsirijus> freddie does
00:06 < othiym23> bradleymeck: not a bad idea, but it sounds like it'd be a lot of work for... somebody
00:06 <@isaacs> bradleymeck: yes, do that.
00:06 <@isaacs> bradleymeck: a build service for node would be great, too
00:06 < bradleymeck> isaacs we plan on it if we get the bandwidth
00:07 < dsirijus> anyone knows of html->jade and css->jade converters?
00:07 < dsirijus> that would save me quite some time tonight
00:08 < dsirijus> it might even buy me time to get stoned before production deployment :D
00:08 < CIA-93> node: isaacs v0.8 * rbf561c5 / doc/blog/release/v0.6.20.md : Blog post for v0.6.20 - http://git.io/BRu2Iw
00:08 < insin> https://github.com/donpark/html2jade
00:10 < dsirijus> insin, :*
00:15 < dshaw_> othiym23: You have mikeal to thank that we didn't go twice as long. ;-)
00:16 < othiym23> dshaw_: yeah, if I'd been there I would have just goaded everyone into going into depth on how awesome Matt Ranney's talk was
00:17 < othiym23> mikeal's spiritual genius is getting people to shut up
00:18 < dshaw_> othiym23: lol
00:18 < othiym23> although my favorite part of Matt Ranney's talk was that he spent the first couple minutes talking about how important dealing with backpressure is, and then didn't actually define it
00:21 < dshaw_> http://instagram.com/p/MoTLUfs0Zz/ BackpressureTM
00:22 < othiym23> pretty sure that was the last time he mentioned backpressure by name in the presentation
00:23 < othiym23> that presentation left me psyched at how far Voxer is pushing Node, though
00:23 < othiym23> easily the most valuable thing on both days, although maybe not as fun as Nexxy or rwldrn's
00:41 < cliffano> is registry.npmjs.org down? i'm getting 503 from australia
00:43 <@maxogden> up for me
00:44 < cliffano> maxogden: thanks. must be a regional issue
00:45 < num1> Is there anyway to make a promise in node? As in, you try to grab the result of calling a function, and you block until it returns but the rest of the code continues while that continuation blocks.
00:46 < num1> I can get close by using process.nextTick(callback), but that has the unfortunate side-effect of losing the stacktrace
00:47 < num1> a slightly related question is, does anybody know how hard it is to increase the maximum stack depth? Is it as simple as changing a constant in v8 and recompiling? 
00:49 < SubStack> num1: you can just use callbacks
00:49 < bnoordhuis> num1: node --stack-size=<kb>
00:49 < AAA_awright> You shouldn't have to rely on --stack-size though
00:50 < num1> bnoordhuis, o wow that's really easy, thanks
00:51 < AAA_awright> num1: For the former question you're going to have to tell us what you're trying to get done
00:51 < bnoordhuis> num1: maybe you have to use --max-stack-size=<bytes> though
00:52 < num1> I'm iterating over a list and trying to call a function on each element of the list. The function does stuff like I/O though, so they take callbacks for when they're finished.
00:52 < num1> The idea is that the function runs on each element until it succeeds, it'll return an error of that element didn't work out, and I'd like to call the function again on the next element when that happens
00:52 < num1> the most natural way to do this is to use recursion
00:53 < AAA_awright> list as in an Array?
00:53 < num1> but that fails if the list is too long
00:53 < num1> sorry you're right, an Array
00:53 < num1> a shitty reason so increase the stack size, I know
00:53 < num1> to* increase
00:54 < AAA_awright> It's similar to other control flow problems, waiting for multiple I/O calls to all return, etc
00:54 < AAA_awright> You can use something like:
00:55 <@konobi> isaacs: ping
00:57 < AAA_awright> num1: function handleNextItem(){ var item = items.shift(); runSomething(item, function(result){ process.nextTick(handleNextItem); }); }
00:57 < num1> AAA_awright, yeah process.nextTick seems to be the way to go. I've love not to lose my stacktrace though
00:58 < AAA_awright> It doesn't really make much sense, actually
00:58 < num1> the question or the solution?
00:58 < AAA_awright> What's more important is that you don't lose the variable scope, and you can always analyze that with a debugger
00:59 < AAA_awright> I mean, you do lose the stack trace, but that's a good thing, you don't lose the variable scopes
00:59 < num1> I've lost you, why is that a good thing?
01:00 < AAA_awright> Uh, I mean, it turns out the stack doesn't really matter much
01:00 < num1> definitely, I'll still be in the same closure so the code will be correct
01:01 < num1> haha don't tell me I have to give up the stack too! I've already given up types, blocking operations, and maturity
01:01 < num1> how do you debug without knowing what codepath sent you to where you are?
01:03 < AAA_awright> num1: If you open up a V8 debugger the stack and the scope variables are different things you can examine. The scope variables are what's important, i.e. seeing the global variables, closure scopes, and the local scope
01:03 < cliffano> does registry.npmjs.org has a mirror ?
01:05 < num1> AAA_awright, fair enough, I guess I'll have to get used to it. Thanks!
01:06 < drudge> isaacs: any plans to use Developer ID and sign the Mac installer?
01:09 < dsirijus> ""Error: Cannot find module './routes'""
01:09 < dsirijus> huh?
01:09 < bnoordhuis> drudge: why?
01:10 < drudge> bnoordhuis: Gatekeeper on Mountain Lion
01:10 < bnoordhuis> oh
01:12 < dsirijus> someone, please?
01:12 < dsirijus> i have express installed globally, and here's the package.json for which i've done npm install http://pastie.org/4234856
01:13 < dsirijus> and app.js if it matters http://pastie.org/4234864
01:18 < bradleymeck> and there is a routes.js in the folder with your app.js?
01:18 < dsirijus> no
01:19 < dsirijus> bradleymeck, there's routes/ambassadors.js and routes/video.js
01:20 < dsirijus> var routes = require('./routes');
01:20 < dsirijus> there is that directory, yes, but no file routes.js
01:21 < drudge> if it is a directory it is looking for an index.js
01:21 < drudge> inside of that directory
01:21 < dsirijus> oh
01:22 < drudge> dsirijus: http://nodejs.org/api/modules.html#modules_folders_as_modules
01:23 < dsirijus> also, is there any particular reason that i have node_modules within node_modules/express?
01:23 < dsirijus> looks silly
01:24 < gf3> tjholowaychuk: Yao! I'm in Victoria for the week
01:24 < gf3> tjholowaychuk: Working and apartment hunting
01:25 < tjholowaychuk> gf3 nice! where are you checking out for apartments?
01:25 < tjholowaychuk> not sure what the market is like anymore
01:26 < gf3> tjholowaychuk: Well I think for the first few months I'm just going to find something off craigslist until I can put a downpayment on something more permanent
01:26 < brianloveswords> gf3: WUT, you're leaving TO?
01:26 < gf3> brianloveswords: I are!
01:26 < tjholowaychuk> gf3 I have some friends looking too I'll let you know if they find anything good
01:27 < brianloveswords> gf3: are you still gonna be there in Sept?
01:27 < gf3> tjholowaychuk: Oh yeah? That'd be awesome, roommates++
01:27 < gf3> brianloveswords: I move out to BC in September
01:27 < gf3> brianloveswords: Are you going to Throne of JS?
01:27 < brianloveswords> BLARGH I'm going to be in TO sept 9-16
01:27 < brianloveswords> I'm not gonna be at Throne :(
01:27 < gf3> brianloveswords: I may just have to may a NY trip in August sometime
01:27 < gf3> FUUUUUU-
01:28 < brianloveswords> YES YES YES August trip
01:28 < brianloveswords> wookiehangover is also planning august trip.
01:28 < gf3> LET IT BE SO
01:28 < gf3> I will try and coordinate
01:28 < brianloveswords> EXCELLET
01:29 < gf3> MOST SPLENDID
01:29 < gf3> brianloveswords: I'm (virtually) all healed up from last time, so I'm ready for next time
01:30 < brianloveswords> gf3 I'll get someone to work up our obituaries.
01:30 < gf3> brianloveswords: LOLOL
01:30 < gf3> brianloveswords: Isn't Paul going to be in NY sometime soon/around then?
01:30 < brianloveswords> I dunno, I doubt it -- he's here this week.
01:30 < gf3> Ahh
01:31 < brianloveswords> But we could probably convince him
01:53 < CIA-93> node: Ben Noordhuis v0.8 * rb40f813 / (common.gypi configure): build: fix spurious mksnapshot crashes for good - http://git.io/5GAg3Q
02:20 < deoxxa> so i need to build a user-facing admin interface for a service at work
02:20 < deoxxa> i've already put together a nice "restful" (read: json over http with sane verbs) api because it's used by some scripts
02:21 < deoxxa> i get the impression backbone would work well for this - can anyone with experience working with backbone give me some perspective on this?
02:21 < deoxxa> pros/cons would be great
02:22 < othiym23> is there any reason I shouldn't use cheerio for quick and dirty HTML parsing?
02:33 <@maxogden> othiym23: ooh i hadnt seen that
02:33 <@maxogden> othiym23: looks cool
03:04 < othiym23> I'm going to claim the maxogden seal of approval for my 30 seconds of casual googling ;)
03:05 < othiym23> cheerio is probably super-inefficient, but for what I'm doing, I don't care
03:06 <@maxogden> it looks better than jsdom
03:06 < othiym23> having built-in jQuery-like querying gives me exactly what I want, too
03:07 < othiym23> and its depdencies feel(?) lighter-weight than jsdom's
03:08 < othiym23> can I just say it's a pure pleasure to be writing a simple little server after all this time spent writing gnarly metaprogrammy instrumentation code?
03:08 < othiym23> everything happens so fast!
03:51 < ziroday> Hi there! Quick question: why does var app = require('express').createServer(); work but var app = require('express'); app.createServer(); not work?
03:59 < rtinker> ziroday: you're assigning the Express object to `app` in the second example, not the server you've just created
04:00 < ziroday> rtinker, ah, gotcha. Thanks :)
04:01 < rtinker> ziroday: np :)
04:20 < renier> hey, anyone on windows can tell me where the .npmrc file is located?
04:27 <@konobi> `npm get userconfig`
04:29 < zloyded> hiall
04:33 < prettyrobots> Where is logs go?
04:35 < seans887> hey i have a general node server question: what are the common causes of a node server hanging (not shutting down, just not responding) and what can i do to debug it?
04:36 < seans887> i'm using forever to run my app which i thought would help me out, but in this case the app isn't being restarted because it's not failing, it just hangs until its manually restarted
04:37 < ccowan> is there a callback somewhere that's not getting called
04:37 < prettyrobots> What ccowan said.
04:37 < prettyrobots> Where did the logs go?
04:37 < prettyrobots> IRC logs?
04:39 < seans887> i suppose that's possible... i will have to take a look
04:40 < seans887> i've had a few issues with it in the past and i thought i resolved them by releasing my mysql connection back to the db connection pool im using
04:40 < seans887> but it seems to have cropped up again
04:40 < ccowan> that will do it too
04:41 < seans887> it may be i just have missed a spot releasing the db again
04:41 < bradleymeck> seans887: that or ulimits are most likely culprits
04:41 < ccowan> seans887: search all your source for the aquire and release… in my code it's utils.pool.mysql.acquire and utils.pool.mysql.release
04:42 < ccowan> there should be an matching release for every acquire in each file
04:42 < seans887> ccowan: thanks, i'll get on that now
04:42 < ccowan> so I would run something like grep -r utils.pool.mysql .
04:42 < prettyrobots> Where are IRC logs? 
04:43 < ccowan> not sure
04:43 < bradleymeck> prettyrobots: http://piscisaureus.no.de/node.js/latest ?
04:43 < bradleymeck> its not realtime though
04:44 < prettyrobots> bradleymeck: Thank you.
04:44 < prettyrobots> bradleymeck: Seems pretty darn close to real time.
04:51 <@konobi> isaacs: ping?
04:52 <@maxogden> i can hand deliver a message to his house if you want
04:53 < austinbv> so I am trying to figure out how to write async functions correctly
04:54 < austinbv> can someone tell me whats wrong with the callback here https://gist.github.com/3088101
04:54 <@maxogden> sleep has nothing to do with async
04:54 <@maxogden> fyi
04:55 < Benvie> sleep is async
04:55 <@maxogden> that will just peg your CPU
04:55 < Benvie> when you go to bed
04:55 <@maxogden> pegging CPUS is bad programming not async programming :)
04:55 < Benvie> you handle things later
04:55 <@maxogden> Benvie: hehe
04:55 <@konobi> maxogden: heh... nah... i have a PoC lighweight npm register server working, just wondering if he had some shortcuts for some things
04:57 <@konobi> maxogden: actually, know if there's a way of specifying the npm cache folder on the command line?
04:57 < austinbv> so sleep is suppoesd to just block
04:57 < austinbv> so say it was waiting on a io
04:57 < austinbv> sleep is used to mimic that
04:57 < Benvie> the problem is when you dream
04:58 < austinbv> maxogden: I know it's not good I want to make an async function that has a block in it with out any api's like nodes process
04:58 < austinbv> is that possibel
04:58 <@konobi> maxogden: ah, nvm... worked it out
04:59 <@konobi> austinbv: you can only go async
05:00 < austinbv> I how do you make a blocking action go work async?
05:00 < austinbv> that's what I am trying to figure out
05:01 <@konobi> austinbv: try using child_process and shelling out to the shell "sleep" function
05:01 < austinbv> nope I wrote a sleep function at the top of the file
05:02 < austinbv> say you have a long running function that and you are in the browser how do you stay async
05:02 <@konobi> javascript doesn't work that way
05:02 < austinbv> What do you mean?
05:03 < austinbv> So you cannot roll your own async functions without using an interface like process
05:05 <@konobi> austinbv: XY
05:05 < austinbv> ?
05:05 <@konobi> it's an XY problem
05:06 < austinbv> what should I be asking about
05:07 < austinbv> I don't have an end goal or a project I am just trying to learn the fundementals of how async works (in js mostly)
05:07 < austinbv> and why tacking a callback to the end of a function is what people call async
05:09 <@konobi> austinbv: that's not the only way... but with IO, there's a delay between when something gets called and when it returns... when the thing returns, the callback gets called with the data
05:11 < austinbv> So if you are writing a function that has a takes a random amount of time to complete how do you get the next function to run and then the callback to run when the action completes
05:11 < Benvie> you poll at an extremely high rate
05:11 < austinbv> try two https://gist.github.com/3088101
05:11 < Benvie> asuring your never miss the result
05:11 <@konobi> austinbv: fs.readFile("/some/path", function(data){ ... });
05:12 < austinbv> I have been reading things like the node source to figure this out
05:12 < Benvie> indeed, polling is the key
05:12 <@konobi> Benvie: oh behave...
05:13 < Benvie> it never fails
05:13 < austinbv> konobi: right but in the readFile it calls callback() some how
05:13 < Benvie> and it's really good at event loops
05:13 < austinbv> but returns earlier
05:13 <@konobi> austinbv: yup
05:13 <@konobi> why block if you can do more work?
05:13 < austinbv> I agree
05:13 < austinbv> I just want to know how you don't block
05:13 < Benvie> because it's easier to program that way
05:13 < Benvie> =D
05:14 <@konobi> austinbv: stop using a while loop... sorted
05:14 < Benvie> cpu cycles and efficiency be damned, I can get a margarita while my program is busy doing nothing
05:14 < austinbv> well I chose a while loob because it's blocking
05:14 <@konobi> austinbv: wrong type of blocking
05:14 < austinbv> ah
05:14 < Benvie> spin cycle
05:14 < Benvie> vs. sleep
05:14 <@konobi> a while loop still uses up CPU time
05:15 < Benvie> sleep is peaceful, spin cycle makes fire
05:15 <@konobi> specifically crotch fire
05:15 < austinbv> isn't that what blocking is? somethign that holds the cpu
05:16 < Benvie> I did that thought too. function execSync(cmd){ exec(cmd + ' >& copy done'); while (!fs.existsSync('done')); }
05:17 < Benvie> not the best way to do that =D but...it does it
05:17 <@konobi> austinbv: look at IO latencies
05:17 < austinbv> huh that's kinda cool I didnt know there were different types of blocking
05:17 < Benvie> it's basically the difference between
05:17 < austinbv> ok konobi, sorry if I am sounding totally dumb Just want to learn how this async stuff actually works
05:18 < Benvie> waiting because you know you just need to give it time, and burning the cpu up continuusly to catch it immediattely upon microsecond of completion
05:18 < Benvie> one eats 100% of given cpu core's time, one doesn't use any
05:19 < austinbv> sorry chrome kernel panic'd me
05:19 < Benvie> anything that's looping is smoke which indicates fire
05:19 < Benvie> callback means someone tells you it's done
05:19 < austinbv> Benvie: right
05:19 < Benvie> I'd rather sit on my ass and wait for a call than run ona  treadmill to power the phone
05:20 <@konobi> cpu < L1 cache < l2 cache < DRAM < fs cache < disk spindles < network
05:21 < austinbv> konobi: makes sense
05:21 < austinbv> so how do you write an async function?
05:21 < Benvie> each of thsoe jumps is multiple magnitutdes also
05:22 < Benvie> an async is a normal function
05:22 < Benvie> what makes it async is that it's provided to something that will call it later
05:22 < Lorentz> you're missing... L3!
05:22 < Benvie> you give a function that can be eventually called at any point in time
05:23 < Benvie> the burden is moreso on the api around it, and the rest of your code's ability to wait
05:23 <@konobi> you're calling a function... and saying "call this when it's done"
05:23 < Benvie> the function itself is the easy part
05:23 < Benvie> function ADD(a, b, done) { done(a + b) }
05:23 < Benvie> that could be async
05:24 < Benvie> cause it'd work if you do
05:24 < Benvie> function ADD(a, b, done) { InThirtyySeconds.... done(a + b) }
05:24 < Benvie> same result
05:25 < austinbv> so if you had ADD(a, b, done) { InThirtyySeconds.... done(a + b) }; ADD(a, b, done) { InOneSecond.... done(a + b) }
05:26 < austinbv> er whatever not quite real js but I hope it's clear
05:26 < Benvie> the syntax gets convoluted but I think the concept is right
05:26 < Benvie> yeah
05:26 < austinbv> how would you have the second call finish first?
05:27 < Benvie> in async completion order is rarely guaramteed
05:27 < Benvie> amd usually expected to not be reliable
05:27 < Benvie> tjoml pf a wen[age, the images come in almost random order as the page loads
05:27 < Benvie> er
05:27 < Benvie> think of a webpage
05:27 < austinbv> right but in that case ADD(a, b, done); // takes 30 sec ADD(a, b, done) // takes one sec 
05:27 < austinbv> the first call will still finish first
05:27 < Benvie> if you fired of 30 requests over the network, yuo'd get basically a random completion order
05:28 < austinbv> right
05:28 < Benvie> yeah
05:28 < Benvie> in that case, assuming you knew it was simply doing a mock 30 second wait, you could optimize around it
05:28 < Benvie> and then screw it all up
05:28 < Benvie> but the idea is that in reality that thirty seconds is random because it's based on external factors like networks and disk IO
05:28 < Zavior> for a fairly new javascript and node user, does anyone have any specific tutorials I should look at? I prefer the ones where I can follow along and build a small app
05:29 < gkatsev> Zavior: check out eloquentjavascript.net
05:29 < austinbv> peepcodes were ok
05:29 < Benvie> but yes
05:29 < Benvie> actually you make a good point
05:29 < Benvie> there's two types of callbacks, and this distinction is often glossed over
05:29 < gkatsev> Zavior: it's a book about js with interactive exercises. There's a dead-tree format too, if you want (also to support the author)
05:30 < Benvie> [1, 2, 3].map(function(s){ return s * 5 })
05:30 < Benvie> that is a callback but it happens both in a deterministic order, and synchronously
05:30 < Zavior> gkatsev: looks more js generic and less node specific I suppose?
05:30 < austinbv> ok Benvie 
05:30 < gkatsev> Zavior: yep, it's just about js. But that's ok.
05:30 < gkatsev> Zavior: learning node takes 2 seconds, really.
05:30 < Benvie> a callback is a very general term that describes passing any function as the parameter to another
05:31 < gkatsev> Zavior: the main part is learning the language.
05:31 < Benvie> and people forget to be explicit
05:31 < Zavior> ahh ok thanks
05:31 < Benvie> that there's two very separate categories of callbacks
05:31 < Benvie> one is used for unctional composition type prgoramming, like array map
05:31 < Benvie> and one is used to handle asynchronous events with unknown timespans
05:31 < Benvie> function composition type programming
05:32 < austinbv> so what does each look like?
05:32 < Benvie> the functions themselves can usually be used in either case, but the surrounding scope is different
05:32 < Benvie> in array.map, by the time the next line of code executes, the map is done
05:33 < austinbv> right
05:33 < seans887> zavior: http://nodetuts.com/ has good stuff, and http://howtonode.org is awesome
05:33 < Benvie> for the msot people you expect data transofmrations to be synchronous
05:33 < Benvie> and you expect data gathering to be asynchronous
05:34 < Benvie> you should generally know what from what you're using, but that';s a general rule that works for most things
05:34 < austinbv> so how would you scope the datagathering to be asynchronous?
05:34 < Benvie> anything network related is going to be async
05:34 < Benvie> if it has to hit a network or a disk it's going to be async
05:34 < Benvie> or you shouldn't be using it if it's sync
05:34 < ihdev> I am handling a form using nodejs and express - how do I avoid the page opening a new tab when I handle the post and just staying on the same page?
05:34 < austinbv> where you want to write something asynchronous makes sense but how it's written does not
05:34 < Benvie> you're write
05:35 < Benvie> there'
05:35 < Benvie> well
05:35 < Benvie> basically the only clues would be gleaned by reading code written correctly by someone else
05:35 < austinbv> ihdev: router code?
05:35 < Benvie> like if you saw a chunk of code that had array.map
05:35 < Benvie> you'd see code on the next line, not in a callback, relying on the that transofmration
05:35 < austinbv> that's what I have been trying to do looking at like FS in node vs fs.*Sync
05:36 < Benvie> so you'd know either that was synchronously executed, or that the programming wrote buggy code
05:36 < ihdev> austinbv: if if use app.post('/', function(req, res) I am using a res.redirect which works but it opens / in a new tab
05:36 < Benvie> if all the execution thereafter is contained inside callbacks then it's a safe bet the code is async
05:36 < deoxxa> ihdev: you can't 302 on anything but a GET
05:37 < Benvie> and if it's not then the coide would work anyway
05:37 < prettyrobots> Benvie: Saw your Windows.h in ffi today. Amazing.
05:37 < Benvie> =D took a bit of work
05:37 < Zavior> thanks seans887 
05:37 < ihdev> deoxxa: ahh i see. solutions? ajax?
05:37 < seans887> Zavior: np
05:37 < prettyrobots> Benvie: You don't say.
05:37 < deoxxa> ihdev: there's a way to do it... let me take a look
05:38 < prettyrobots> Also, I like your collection of Windows utilities. The registry bit is probably going to be useful to me.
05:38 < ihdev> deoxxa: thanks 
05:38 < austinbv> I redirect after a post
05:38 < Benvie> yeah I need to finish that off
05:38 < ihdev> austinbv: how? basically have a form on my home page and I want to grab the values without leaving the page
05:38 < deoxxa> austinbv: but you can't redirect to another POST request
05:38 < Benvie> the windows registry bindings work but they really need an adapter or something built on top of them
05:38 < prettyrobots> Benvie: The Windows stuff?
05:38 < Benvie> like the code I did for the clipboard
05:39 < deoxxa> oh ihdev that's what you mean?
05:39 < ihdev> mhmm
05:39 < prettyrobots> Benvie: Adaptor. Okay, I'll look at the clipboard. 
05:39 < deoxxa> then yes, ajax that sucker up
05:39 < Benvie> it's one thing to have the raw bindings but another to have them really be usable at all
05:39 < Benvie> basically it's like
05:39 < Benvie> most operations require you to allocate the memory beforehand, execute the function, coerce it to the right data type, then finally get it
05:40 < prettyrobots> I didn't even see the associations.js and that is what I was looking for. Super.
05:40 < Benvie> so it's just a pain to use it and not JS way of doing things at all
05:40 < deoxxa> btw austinbv you should be sending 303 instead of 302 if it's a POST you're redirecting from
05:41 < austinbv> I just use redirect_to or what ever it is
05:41 < prettyrobots> https://github.com/Benvie/node-clipboard
05:42 < prettyrobots> Benvie: That is where you created a JS friendly API?
05:44 < Benvie> yeah
05:44 < Benvie> using ffi
05:44 < Benvie> it's similar to doing c++ bindings
05:44 < Benvie> less verbose
05:45 < Benvie> that one I did to make a cross-platform API so there's two levels
05:45 < Benvie> though I never did the other platforms
05:45 < deoxxa> tch tch
05:45 < deoxxa> not good enough
05:45 < Benvie> someone could have stepped up!
05:45 < Benvie> the windows clipboard is actually one of those things that is way harder to do
05:45 < deoxxa> i've been meaning to give ffi a go for a while now
05:46 < prettyrobots> Benvie: Would it make sense, if it got working, to split out a project that is just the Windows Registry?
05:46 < Benvie> yeah
05:46 < Benvie> I planned to
05:46 < prettyrobots> Because `regedit` is availalbe on NPM.
05:46 < austinbv> there is this line all over the node source process.binding(..
05:46 < Benvie> that's absolutely a full project scope
05:46 < austinbv> where is binding defined on process?
05:46 < Benvie> process.binding
05:46 < Benvie> is a function
05:46 < Benvie> oh where
05:46 < austinbv> where is it defined
05:46 < Benvie> it's added via c++
05:46 < Benvie> I think
05:46 < Benvie> yeah
05:47 < austinbv> yeah that's where I am digging
05:47 < Benvie> it's the source of the code that is embedded in the binary
05:47 < prettyrobots> Benvie: I'd create a `package.json` for `regedit` and reserve the space on NPM with a 0.0.0 pre-release. But that's just me.
05:47 < Benvie> the actualy js code source is embedded as a resource during compilation using a v8 api that llows for that
05:47 < Benvie> hmm I should do that, I misread what you said at first
05:48 < Benvie> that it was taken =D
05:48 < Benvie> I'll do that now and put my bindings up
05:48 < Benvie> even on their own there way more than exists elsewhere
05:50 < prettyrobots> Benvie: Definately. Good start and it will help people find it. 
05:50 < Benvie> but what about winreg
05:50 < Benvie> winreg or regedit =O =O
05:50 < prettyrobots> Erg.
05:50 < prettyrobots> Snag both. Sleep on it. Release the other one in the morning.
05:50 < Benvie> I have the module named O and the module named Windows
05:51 < Benvie> I'm already set =D
05:51 <@konobi> maxogden: and done... https://github.com/konobi/npmmini
05:52 < Benvie> I am working on a thing
05:52 < Benvie> npm gui
05:52 < deoxxa> </beardyman>
05:53 < deoxxa> oops?
05:54 < prettyrobots> Benvie: I kind of like regedit. It's the command I associate with the registry. I know what winreg means, but I've not seen it as often.
05:54 < Benvie> yeah I had decided on that before my internet died
05:55 < Benvie> winreg is for people who aren't my audience for this
05:55 < Benvie> which si me
05:55 < prettyrobots> Benvie: :)
05:58 < deoxxa> i want a git-backed npm registry
05:59 < prettyrobots> So, calling `process.exit` is generally a bad thing I take it.
05:59 < bradleymeck> prettyrobots: unless you think the world may end / the process could be in a bad state yes
06:00 < deoxxa> prettyrobots: it's perfectly reasonable if you want to exit with a specific return code
06:00 < deoxxa> but... be careful when you exit
06:00 < prettyrobots> bradleymeck: I'm writing a command line utility and I want to … what deoxxa said.
06:00 < Benvie> you know
06:00 < Benvie> do you know what it was like to buy the ltter c in 1989?
06:00 < Benvie> c.com?
06:01 < prettyrobots> Just difficult because I think I'm seeing it leave stdout before it flushes.
06:01 < Benvie> it's like that now
06:01 < deoxxa> Benvie: i know right
06:02 < Benvie> so I got O, so I could have a module with a tagline that works in O face
06:02 < Benvie> and Objects
06:02 < deoxxa> kind of feels like domain squatting though
06:02 < Benvie> yeah but
06:02 < deoxxa> well, i mean, it is
06:02 < Benvie> it's a real module
06:02 < Benvie> specifically about the topic
06:03 < prettyrobots> I take a module name then use my guilt over squatting to push me into action.
06:03 < Benvie> the only difference is I made it for the name, instead of naming the module something after
06:03 < Benvie> but it turned out really awesome
06:03 < deoxxa> i kind of feel like the very generic stuff like "zip" or "yaml" etc should be some kind of metapackage
06:04 < prettyrobots> There's an LPU effect with NPM. All the names are going and gone because people are publishing libraries that are a single function.
06:04 < Benvie> but what should O be
06:04 < deoxxa> that's a hard question
06:04 < Benvie> object
06:04 < prettyrobots> Oprah.
06:04 < prettyrobots> Oxygen.
06:04 < bradleymeck> deoxxa / prettyrobots, just set a variable and process.on
06:04 < bradleymeck> 9
06:05 < bradleymeck> process.on('exit', function() { process.exit(variablehere) } )
06:05 < prettyrobots> bradleymeck: Nice.
06:05 < Benvie> I have no guilt over winreg though
06:05 < Benvie> this is just late in coming
06:05 < deoxxa> bradleymeck: that works too, i guess
06:05 < prettyrobots> Benvie: I had timezone for a long time and I'm really happy with how it turned out.
06:06 < prettyrobots> bradleymeck: Okay. So… What if I'm deep in callbacks and I need to abend?
06:06 < prettyrobots> Should I register an uncaught exception handler?
06:07 < Benvie> wow
06:07 < Benvie> I installed new OS
06:07 < prettyrobots> (What's a good way to panic and flush stdout.)
06:07 < Benvie> and now I don't remember how I identified with npm originally
06:07 < bradleymeck> prettyrobots: but even with name saturation namespaces and standards appear! flatiron-* for example. prettyrobots, just throw if you want to abort a callstack (that should only happen on doomsday ideally)?
06:07 < Benvie> how do you even...do that
06:07 < deoxxa> npm login
06:07 < deoxxa> or something
06:07 < deoxxa> yeah login
06:08 < Benvie> yeah
06:08 < Benvie> so is npm slow or is it eating my computer as we speak
06:08 < prettyrobots> bradleymeck: Command line program. Get bad input and I want to exit 1, but anything Node.js puts me in a callback reading stdin. Don't want a callstack.
06:08 < prettyrobots> Sorry, if I sound like I'm being a baby about it.
06:08 < prettyrobots> I guess a callstack is okay.
06:08 < deoxxa> Benvie: the first search operation takes roughly forever
06:08 < Benvie> short answer: shit's fucked
06:08 < bradleymeck> if you want to kill the process just cause an uncaught exception, dont handle it, exit with the saved variable wherever it is
06:09 < bradleymeck> if the CLI gets big like some of `jitsu` you see pain doing it other ways (like it currently is)
06:10 < Benvie> I make sure all my errors are on purpose, and failled with curses. So that one day someone actually going over logs will find my hidden messages
06:10 < Benvie> and think some sort of being beyond space and time left them
06:10 < Benvie> for him, specifically to read
06:14 < prettyrobots> bradleymeck: Yeah. I need to work with exceptions. process.exit is a janky way. I know how to propagate them correclty. This was a little utility at a time, but it's time to grow up.
06:15 < bradleymeck> if you dont want to exit, just handle the exception and take not that its time to exit after saving wanted exit code
06:15 < Benvie> oh yeah 
06:16 < Benvie> https://github.com/milani/appjs is super awesome btw
06:16 < prettyrobots> bradleymeck: Yes. Showing me the on('exit', function () { process.exit(intendedExit) }) is what I needed to see. Thank you. 
06:16 < prettyrobots> Just direct the program to peter out.
06:17 < prettyrobots> Take note. Maybe babble to stdout. Peter out.
06:17 < prettyrobots> stderr
06:19 < brianloveswords> blargh, does anyone know of a module that provides a crc32 algorithm that actually works?
06:21 < Benvie> no wonder i hear so many retarded ideas coming out of people in ##javascript
06:21 < Benvie> this helps explains some of it http://www.webperformancetoday.com/2012/07/10/internet-explorer-8-default-web-performance-test/
06:21 < bradleymeck> Benvie: yes it is, i need to find a windows machine to test it on though
06:22 < Benvie> why?
06:22 < Benvie> it works on all platforms
06:22 < Benvie> we provide binaries for linux 32bit and 64bit, windows 32bit, and binaries for mac that work on both
06:22 < bradleymeck> my question is how many ppl who complain about "performance" just don't minify, only big sites should hit perf problems
06:22 < Benvie> it's just that npm can't install it
06:22 < Benvie> well
06:23 < bradleymeck> Benvie: i just wonder if all the stuff im using works and what needs to detect os when shelling out
06:23 < Benvie> don't install it through npm
06:23 < Benvie> http://dists.appjs.org//0.0.13
06:23 < phillyDesignr> hey can someone show me how to write a non-blocking for loop - im confused as all hell
06:23 < Benvie> or better yet http://dists.appjs.org//0.0.14
06:24 < Benvie> if we have binaries for your platform yet
06:24 <@konobi> what the devil is cef?
06:24 < Benvie> it's just...hard to distribute chromium that integrates with node, as source
06:24 < Benvie> it doesn't really work
06:24 < Benvie> chromium embedded
06:25 <@konobi> is that a seperate project?
06:25 < prettyrobots> @konobi: Google sez: Central Fund of Canada Unlimited. Hope that helps.
06:25 < Benvie> it's chromium designed for embedding without extraneous features
06:25 < prettyrobots> Are there string streams somewhere?
06:25 < Benvie> but is full featured web renderer and context
06:25 < prettyrobots> If I want to create a stream that's really just a wrapper around a string.
06:26 < Benvie> originally it was another project
06:26 < Benvie> but then chrome actually made something called the content api
06:27 < deoxxa> Benvie: oh oh oh
06:27 < Benvie> and reorganized the whole source tree around enabling embedders
06:27 < deoxxa> Benvie: appjs doesn't work for me
06:27 < Benvie> why for?
06:27 < deoxxa> not sure, it just never shows a window
06:28 < deoxxa> lemme download the latest binary
06:28 < Benvie> yeah
06:28 < Benvie> massive updates in last few days
06:28 < _eddyb_> appjs seems nice
06:28 < _eddyb_> but why not node-webkit?
06:28 < Benvie> because node-webkit isn't actually worked on
06:28 < Benvie> it'd be great if it were
06:29  * deoxxa downloading
06:29 < _eddyb_> a model where you have direct interaction between node.js and the rendering engine, that's what we need
06:29 < _eddyb_> Benvie: :((
06:29 < Benvie> I actually fixed that issue today deoxxa on windows
06:29 < Benvie> it was because fucking
06:29 < Benvie> mime wasn't being copied to the dist node_modules
06:29 < deoxxa> weird
06:29 < Benvie> yeah
06:29 < Benvie> eddyb, I am on the case
06:29 < Benvie> actually that happens basically even with norm
06:29 < Benvie> err
06:30 < Benvie> https://github.com/milani/appjs/raw/master/examples/node-in-browser.png
06:30 < Benvie> still in progress but
06:30 < Benvie> the goal is in sight
06:30 < deoxxa> i'd really love it if i could press a button in chrome and get a node.js instance that was bound to the current tab
06:30 < deoxxa> where the javascript context was shared
06:30 < Benvie> ^ link
06:30 < deoxxa> yeah, looking at that now
06:30 < deoxxa> how do i get that
06:30 < deoxxa> like, right now
06:31 < Benvie> well
06:31 < Benvie> it's not fully functional
06:31 < Benvie> but if you go into examples directory int he dist
06:31 < deoxxa> boo
06:31 < _eddyb_> well, app.js is better than a local express server, hopefully I can write a small compatibility layer to get both a web app and a standalone one
06:31 < Benvie> look for bridge directory
06:31 < Benvie> wrap.js int hat folder
06:31 < Benvie> and simply run that
06:31 < deoxxa> still got nothing here
06:31 < _eddyb_> Benvie: o_O
06:32 < deoxxa> [0711/163148:ERROR:cef_context.cc(430)] No data resource available for id 4544
06:32 < Benvie> what platform?
06:32 < deoxxa> os x snow leopard 32 bit
06:32 < deoxxa> node 0.8.1
06:32 < Benvie> I know milani is looking at mac and linux right now as we speak
06:32 < Benvie> we did like
06:32 < Benvie> a ton of stuff the last few days
06:32 < _eddyb_> Benvie: is that the goal of appjs? complete interaction? coz it would be really awesome :D
06:33 < deoxxa> oh, it contains a node binary
06:33 < deoxxa> that's odd
06:33 <@konobi> huh, wonder how it fits in with awesomium
06:33 < Nuck> Hey, I'm looking for a lib I found months ago, it was a protocol layer that provided framing for JSON messages over a long-standing TCP connection
06:33 < Nuck> Anybody know a lib like this?
06:33 < rvagg1> dnode & upnode?
06:34 < Nuck> Nah, it was just framing around JSON over a TCP socket
06:34 < Nuck> dnode is WebSockets and more than just JSON with framing
06:34 < rvagg1> mm, you want raw TCP?
06:35 < Nuck> Yeah, it's all for backend communications
06:35 < Nuck> I just need to throw around JSON messages
06:35 < SubStack> dnode doesn't even have websockets baked in anymore
06:35 < deoxxa> Nuck: you could use carrier and just core net stuff
06:35 < SubStack> nssocket?
06:35 < _eddyb_> Nuck: like WebSocket? socket.io provides JSON comunication
06:35 < rvagg1> dnoce is good for backend communication
06:35 < rvagg1> dnoce=dnode
06:35 < SubStack> dnode is all pipes now
06:35 < _eddyb_> Nuck: along with callbacks and other stuff
06:35 < deoxxa> pipe all the things
06:36 < Nuck> hmm
06:36 < _eddyb_> wait, is this communication between local processes?
06:36 < Nuck> Nah
06:36 < _eddyb_> coz then TCP would be overkill
06:36 < Nuck> Duh
06:36 < _eddyb_> Nuck: server <-> clients?
06:36 <@konobi> noobs... shush
06:37 < SubStack> Nuck: you're possibly thinking of https://github.com/nodejitsu/nssocket
06:37 < Nuck> It's server <-> server
06:38 < _eddyb_> Nuck: oh. so not socket.io, look for other suggestions
06:39 < jesusabdullah> this one's easy
06:39 < jesusabdullah> You take the tcp socket
06:39 < jesusabdullah> Slice up your messages over newlines
06:39 < jesusabdullah> de-json, process in order
06:40 < jesusabdullah> easy-peasy
06:40 < Nuck> Actually
06:40 < _eddyb_> jesusabdullah: that's bad
06:40 < jesusabdullah> OR, just pipe dnode onto either end
06:40 < Nuck> This nssocket thing might be perfect
06:40 < jesusabdullah> and be done with it
06:40 < _eddyb_> Nuck: nssocket definitely looks good
06:40 < jesusabdullah> or use nssocket, which was basically written to solve that problem
06:40 < Nuck> Thanks for that SubStack! Wasn't what I was looking for, but actually solves what I was planning to build on top!
06:52 <@konobi> anyone around who does lots of npm installs in an automated/CI way?
06:53 < bradleymeck> konobi: sup
06:53 <@konobi> bradleymeck: was hoping to get someone else interested in https://github.com/konobi/npmmini
06:54 <@konobi> features, etc.
06:57 <@konobi> bradleymeck: hopefully that makes sense
06:57 < bradleymeck> konobi: interesting, so this seems like more for a multi-tenant setup than what I am used to but if there was a way to move the location of the server's cache / rsync em across multiple machines it would be nice
06:57 < bradleymeck> anything that speeds up fin c++ modules
06:58 <@konobi> well, it's just npm cache for network latency reduction
06:58 <@konobi> (also helps a little with freezing versions)
06:59 <@konobi> yeah... it's just the same cache 
06:59 <@konobi> in ~/.npm
06:59 < `3rdEden> I lolled http://i.imgur.com/Yyg1f.gif
07:10 < cliffano> how often does garbage collection run in a node.js program? i have a loop that downloads a file off the net, creates an array of objects (roughly 100mb), then execute the next one..  obviously this hits 512mb (i'm on 32bit machine) easily, resulting in out of memory issue.. i avoided this by calling delete on the object that holds the array.. is this acceptable? any other way?
07:11 < bradleymeck> cliffano depends, you can watch it with --trace-gc
07:11 < bradleymeck> if memory gets low it should run
07:18 <@konobi> node-inspector may also be able to tell you stuff via heap snapshots to know where objects might be getting held
07:23 < cliffano> bradleymeck: thanks :) .. will trace-gc it
07:36 < [AD]Turbo> hola
07:37 <@konobi> https://fbcdn-sphotos-a.akamaihd.net/hphotos-ak-ash3/524236_10151100521496613_396114722_n.jpg
07:38 < _Tristan1> Hi. Is there any way to pause execution of node, as in when making synchronous functions?
07:39 < _Tristan1> I want to take an existing async function (readline's question) and make it synchronous
07:44 < bradleymeck> _Tristan1, no that is explicitly prevented from happening
07:45 < _Tristan1> that's too bad
07:45 < bradleymeck> it prevent the preemption problems threads cause
07:45 < bradleymeck> prevents*
07:45 < _Tristan1> I'm sure there's a good reason... it's still irritating for this specific application
07:49 < TrahDivad_> Has somebody already done TDD with mongoose? How should I be testing the models?
07:51 < ljharb> "tdd" and "testing" aren't necessarily the same
07:52 < ljharb> i'd say just write data to a test database through the models, verify it with the direct mongo client, and read it through the models
07:54 < TrahDivad_> ljharb: I'll remember that. But to be more precise, I wanted to test that a certain mongoose validation method was defined for a model, 'required' for example. I'm currently testing it by trying to add an object without that field into the database and expecting an error. Or should I be introspecting the model's schema looking for the validation method?
07:55 < ljharb> no, you should be doing the former.
07:55 < ljharb> you don't and shouldn't care how it's implemented.
08:00 < flexd> Hm, perhaps I am a bit slow today (or rather, it's a bit too early in the morning). But are there any places I can read about nodejs (express) and redis usage?
08:00 < flexd> More specifically redis and what's the best practices for designing databases/structure there.
08:03 < flexd> I could probably use a SQL database to hold this information too, but what would be the fun in that?
08:14 < |eddyb|> https://github.com/aikar/traceur interesting, but old
08:18 <@konobi> isaacs: heh
08:22 < chrisbuchholz> I have linked in a node module, and if i npm ls, it is listed, but running my module, it says the linked on module is not to be found. What can be up?
08:25 < radiodario> paste the require you're using
08:25 < radiodario> are you putting any kind of path or just the module name?
09:00 < strk> does anyone have an example of mocha teardown function ?
09:02 <@konobi> is.it.the.right.thing.to.use()
09:02  * konobi ducks
09:04  * TimeTurner sees a tap fan
09:06 < strk> found the example, nevermind: https://github.com/visionmedia/mocha/blob/master/lib/interfaces/tdd.js
09:07 <@konobi> TimeTurner: KISS
09:12 < TimeTurner> I like the 'should' keyword a lot though
09:12 < TimeTurner> helps maintain focus on what is being written
09:12  * strk doesn't (and is avoiding it so far)
09:13 < TimeTurner> but you're using mocha
09:13 < TimeTurner> that's like a prime theme around it
09:14 < TimeTurner> but yeah that's why it offers options I guess
09:14 < TimeTurner> different styles suit different developers
09:19 <@konobi> TimeTurner: well, there's a deeper thing to it too... ensuring you are actually testing what you are testing (and that that's consistently reliable)
10:22 < Nuck> I'm using NSSocket now, and I can't figure out how to force TLS on this
10:22 < Nuck> Like, I'm wiresharking and it's DEFINITELY not using TLS when I tell it to
10:23 < Nuck> Oh right, nobody's on at 3:30 AM
10:24  * Nuck goes to sleep
10:57 < Garo_> In node 0.4.x, I could replace console.log implementation with my own implementation by setting global.console = { /* my own implementation */, but that doesn't seems to be supported any more in node 0.8.x. Does somebody know if this is still somehow possible?
10:58 < Garo_> My goal is to redirect all console.* messages (console.log, consoleinfo, console.error etc) to a custom log processing facility (scribe in our case)
11:07 < radiodario> i think you have to create a logger Garo_ 
11:08 < radiodario> have you checked out https://github.com/Applifier/node-scribe
11:08 < Garo_> radiodario: yes. that's our project
11:08 < Garo_> radiodario: my project, to be precise
11:08 < Garo_> and it doesn't work anymore on new node versions :(
11:08 < radiodario> LOL
11:08 < radiodario> hahahaha
11:08 < radiodario> what are the chances
11:09 < Garo_> actually not that slim. it's not the first time I ask too difficult questions only to be given back a link to a post which I've written before
11:10 < TrahDivad_> I remember seeing an interactive package.json example on a website where you got a description for each field on mouse-over. Do you guys have a link to that?
11:10 < TrahDivad_> I can't find it through Google anymore
11:14 < zomg> TrahDivad_: it's on nodejitsu's site
11:14 < zomg> somewhere
11:14 < TrahDivad_> thanks!
11:14 < zomg> http://package.json.jit.su/ here it is
12:07 < s0urce> hi
12:08 < s0urce> any1 knows where i get user/pass for root after mongodb installtion via npm?
12:09 < deoxxa> s0urce: npm doesn't install mongodb
12:10 < deoxxa> s0urce: npm installs a mongodb driver
12:10 < deoxxa> s0urce: you have to install mongodb yourself, and by default there's no username/password to connect to it
12:11 < s0urce> oh, k, ty -.-
12:20 < Garo_> radiodario: forgot to thank you for trying to help me
12:20 < Garo_> radiodario: I've now fixed the node-scribe package to support current node versions :)
12:24 < radiodario> awesome so how do you alter the global object
12:24 < radiodario> "trying"
12:24 < radiodario> hahaha
12:24 < radiodario> true
12:29 < tuhoojabotti> wat
12:29 < tuhoojabotti> Don't mess with globals :(
12:30 < iplat> hmm
12:30 < iplat> is there special way of debugging node with gdb because the repl seems to get in my way...
12:32 < hkjels> anyone used `replace` in stylus? I am not able to make it work, it seems to replace the entire string either way
12:33 < Garo_> radiodario: ryan had changed how the console object was configured inside src/node.js in pursuit of better startup performance
12:33 < radiodario> cool
12:33 < Garo_> in 0.4.x: global.console = NativeModule.require('console');
12:33 < radiodario> 99 percento of the time a simple google search helps peoples queries, so that's what i try
12:34 < Garo_> and currently the code is: global.__defineGetter__('console', function() { return NativeModule.require('console'); });
12:34 < Garo_> radiodario: yes, I do that also when people ask questions and I have some idle time to burn. It's nice to be able to help somebody :)
12:35 < Garo_> radiodario: so there's no __defineSetter__ anywhere, and thus the old way didn't work. But luckily I could just redo this on my code: global.__defineGetter__('console', function() { return myownconsoleimplementation; });
12:36 < radiodario> clever
12:40 < CIA-93> node: Philipp Hagemeister v0.8 * r1d99441 / tools/doc/generate.js : tools: fix shebang in tools/doc/generate.js - http://git.io/2tahUA
13:42 < sabermonk> hi, i am spawing multiple child process from a parent process, i want to share certain global variable across all child processes , how can i do that?
13:45 < Aikar> why does everyone not idle
13:45 < deoxxa> ...most people in here do idle
13:45 < Aikar> some eddy guy linked my traceur lib, i guess i really need to put at top "dont use this, itll probally break your crap"
13:46 < deoxxa> oh, eddyb?
13:46 < Aikar> ive ran into issues where traceur doesnt translate normal JS to the same normal JS
13:46 < Aikar> yes
13:46 < system32> Need good resources to understand how sockets work behind the scene
13:47 < Aikar> system32: on the kernel level? o.o
13:48 < system32> yes
14:05 < _6a68> I'm just getting into node programming, and I'm curious why promises were abandoned for callbacks
14:05 < _6a68> googling hasn't turned up an official explanation (if one exists)
14:06 < _6a68> does anyone have info or refs they could share?
14:08 < micheil> callbacks were simpler.
14:08 < micheil> promises meant a new syntax to explain, and no one could decide on how a promise should look
14:08 < micheil> we didn't have things like Promises/A from Common JS
14:16 < _6a68> micheil: thanks for the response. sounds like the change was made a while ago?
14:16 < micheil> yeah, years ago.
14:17 < micheil> back in something like 0.0.9
14:17 < _6a68> I've used promises a *lot* on the client, so it was surprising to see straight-up continuation passing style used instead
14:18 < AAA_awright> A callback provides better, uh, code semantics (for lack of a better term). A callback is guarenteed to be called exactly once, whereas events may be called any number of times.
14:19 < _6a68> AAA_awright: the thing is, I'm used to using promises (well, dojo-style Deferreds) to coordinate more complex situations
14:19 < AAA_awright> Promises results in some odd logic resulting from which event gets called under what conditions
14:19 < _6a68> like, many callbacks waiting on one thing to fire, or one thing shouldnt fire until many callbacks
14:20 < _6a68> and I noticed a proliferation of async node-focused libraries that accomplish similar goals
14:20 < _6a68> but those libraries seem kinda unaware of promises/deferreds to begin with
14:20 < _6a68> ...which is what led me to jump in here and ask about it a little
14:20 < AAA_awright> I've tried and abandoned those libraries, they don't contribute anything except an additional code dependency
14:21 < _6a68> AAA_awright: yeah, I personally thought it seemed like people just writing code to think through asynchronicity
14:21 < _6a68> which is fine, but not something I'd personally use--lot of overengineering going on
14:21 < _6a68> but explosions of little libraries sometimes point to a bigger community need or framework gap
14:23 < AAA_awright> Or it's just procedural-taught people who can't wrap their heads around proper event-based programming
14:23 < AAA_awright> (I dunno)
14:23 < _6a68> AAA_awright: yeah, it definitely takes some getting used to :-)
14:23 < AAA_awright> I don't think it's very different than that person who tries to implement Java singletons in Javascript
14:24 < TimeTurner> what is the difference between namespacing and "rooms" in socket.io?
14:24 < _6a68> but I mean, it seems like either code becomes a horrid mountain of callback spaghetti, or you use promises as lightweight anonymous callback sequencing
14:24 < AAA_awright> http://www.myfacewhen.net/uploads/2024-extreme-facepalm.jpg
14:24 < _6a68> AAA_awright: I guess my question is, if the community explicitly doesn't use promises, is that just to ease things for newbs?
14:24 < AAA_awright> The cool thing about Javascript is you can go:
14:25 < _6a68> or like, don't sufficiently large node apps wind up using or reimplementing those features anyway? it seems maybe inevitable
14:25 < AAA_awright> fs.readFile('whatever.txt', fileRead);
14:25 < AAA_awright> function fileRead(err, contents){ db.saveWhatever(fileSaved); }
14:25 < AAA_awright> function fileSaved(...){...}
14:26 < micheil> _6a68: you may be interested in the promised-io project
14:26 < AAA_awright> And presto, no waterfall code
14:26 < _6a68> AAA_awright: yeah, totally
14:26 < _6a68> but, you still wind up with hairy code if you want to either sequence many-one or one-many callbacks
14:26 < micheil> _6a68: so, promised-io is using pretty much dojo Deferred's (their written by the same person, as of dojo 1.8)
14:26 < _6a68> or if you want to cache the result of a callback firing
14:26 < _6a68> micheil: thanks for that ref, I saw that name in the pile of async libraries :-)
14:27 < TimeTurner> https://github.com/caolan/async/ solves this problem quite well
14:27 < micheil> AAA_awright: actually, as one of the earlier people using node, I have to say I prefer promised-io + promises vs caolan's async
14:27 < _6a68> TimeTurner: yeah, saw that one too. it seems a bit overworked for my taste, but I haven't looked closely at it
14:27 < micheil> or other flow control mechanisms
14:27 < _6a68> micheil: I guess what I'm wondering is whether there's community consensus or idioms around flow control
14:28 < _6a68> seems like perhaps not
14:28 < _6a68> it just seemed weird to me that you wouldn't use promises/deferreds right off the bat
14:28 < TrahDivad_> I know that mongoDB can have other types than ObjectId for _id, but I have the impression that mongoose does not expect that. Is that true?
14:28 < micheil> AAA_awright: you can't argue your example is not better written as: fs.readFile('whatever.txt').then(db.saveWhatever).then(saved)
14:28 < TimeTurner> the community consensus is callbacks but the code looks really bad if you don't modularize/separate out functions
14:28 < micheil> (granted, that's psuedo code, so maybe terse and errornous)
14:28 < AAA_awright> micheil: Sure I can... there's a few situations where you might split the call path depending on some situation, and then re-join the possible call paths back together
14:29 < AAA_awright> I have one piece of code I just wrote that goes something like this:
14:29 < micheil> (this is having used both, my personal preference is now for promises)
14:29 < _6a68> TimeTurner: that's, depressingly, how it seemed to me, too, after reading a few libraries
14:30 < wankdanker> can anyone suggest a redis client library that does JSON.parse/stringify automatically? 
14:30 < AAA_awright> try { xyz(); fs.readFile('blah', readFile); } catch(e){ readFile(e); }
14:30 < AAA_awright> This works if you can guarentee that, if fs.readFile throws an error, it will not call readFile
14:30 < _6a68> I think that, like object inheritance and encapsulation, everybody comes up with their own pet flow control tools in javascript
14:31 < _6a68> & I don't want this to devolve into an argument about whose pet approach is objectively superior (not that it is)
14:31 < micheil> AAA_awright: yeah, I'd rather avoid stuff like that.
14:31 < _6a68> it just seems...funny? to me that such a concept isn't furnished by node itself
14:31 < micheil> so, yeah, promises were removed because the syntax, implementation, and coding-style couldn't satisfy everyone's wishes
14:32 < AAA_awright> micheil: Javascript really is an event-oriented language that revolves around callbacks, I think by accident or design it's very well designed for the callback model. I was using Node.js right around when we abandoned callbacks and before then I implemented Mozilla's JS engine for handling events in servers (game servers, specifically, no HTTP)
14:32 < micheil> so, we went with callbacks, like what you get in the browser
14:32 < micheil> AAA_awright: yes, promises are still callbacks
14:32 < _6a68> micheil: yeah, if Node had tried to standardize object inheritance I'm sure it would have been the same thing
14:32 < micheil> AAA_awright: you forget, I was there at the exact same time.
14:32 < _6a68> infinite argument ending in some kind of stalemate/sore feelings
14:33 < micheil> bbiam
14:33 < AAA_awright> micheil: Yeah, which is why I said so
14:33 < _6a68> AAA_awright: promises/deferreds are a tool for sequencing callback firing, at least that's how I think of them
14:33 < AAA_awright> Sequencing?
14:33 < _6a68> like, a beautifully lightweight analogue of event routing, without the noise of registering and firing and decoding event strings
14:34 < _6a68> AAA_awright: yeah, like say I have a bunch of code that requires some other code to have been loaded
14:34 < _6a68> in a browser context where pieces are loaded asynchronously and in unpredictable order
14:34 < _6a68> so, you have this one-many sequence where, once the base library loads, it fires all the waiting dependent callbacks
14:34 < _6a68> and you can go the other way, where you don't want to take action until a set of files has loaded
14:35 < _6a68> that's the first example that comes to mind, you see what I mean
14:35 < _6a68> anyway, I learned to think in dojo-style deferreds, and it just kind of mutates your brain after a while
14:35 < _6a68> micheil, AAA_awright, thanks for the quick node history lesson :)
14:48 < micheil> _6a68: yeah, definitely look at promised-io, we're using it with node at State, as well as using Dojo + Deferred's on the client side.
14:49 < upb> anyway to get node debug server to listen on 0.0.0.0 instead of 127.0.0.1 ?
14:52 < vicapow> hey allo
14:52 < vicapow> he all*
14:54 < bnoordhuis> upb: no, 127.0.0.1 is hard-coded into v8
14:54 < vicapow> so I'm trying to profile an app for memory leaks using memwatch and I'm noticing some very strange behavior.
14:54 < bnoordhuis> upb: use port forwarding
14:55 < vicapow> memwatch says I'm only using 2.18mb of memory but if I look at the process in activity monitor it says my node process is using up 728mb
14:56 < bnoordhuis> vicapow: google for rss vs. virtual memory
14:56 < vicapow> bnoordhuis: will do
14:57 < _6a68> micheil: awesome! looking at it right now, actually :-)
14:57 < bnoordhuis> vicapow: the tl;dr is that node/v8 reserved 728 mb but only used up 2.18 mb so far
14:58 < vicapow> well, weirdly, the process still continues to eat up more and more of "real" memory but memwatch still keeps saying its only 2.18
15:05 < upb> bnoordhuis: okay
15:10 < tuhoojabotti> How to catch ^C on Windows with 0.8.x
15:10 < tuhoojabotti> Because stdin keypress is not emitted anymore
15:12 < tuhoojabotti> rl.on('SIGINT')?
15:17 < teadict> node sucks
15:17 < teadict> nahhh just kidding
15:17 < tuhoojabotti> yeah
15:17 < tuhoojabotti> on windows. :P
15:18 < teadict> Oh-oh! 
15:20 < prettyrobots> tuhoojabotti: I'm making a bunch of stuff so it will work on Windows.
15:20 < prettyrobots> Porting, I guess. 
15:20 < tuhoojabotti> ?
15:20 < teadict> prettyrobots: Make it work badly, so they don't start creating stuff for Windows
15:20 < teadict> >:-D
15:20 < tuhoojabotti> :D
15:20 < prettyrobots> It's not so bad, but I wonder why I do it. Widnows is fading aawy.
15:21 < teadict> prettyrobots: Because you respect others
15:21 < prettyrobots> teadict: I know.
15:21  * teadict knows how to lift spirits
15:21 < prettyrobots> teadict: Yeah. Nice of you to say.
15:23 < teadict> prettyrobots: Nobody will use it though.
15:23  * teadict knows how to crash dem spirits too!
15:23 < prettyrobots> teadict: You really think so? Because Windows?
15:23 < tuhoojabotti> carrots!
15:23 < tuhoojabotti> om nom
15:24 < teadict> prettyrobots: Well, I do think so, but not just because Windows... More like because node is not made in a way Windows developers feel comfy with
15:24 < prettyrobots> No. IDE.
15:24 < teadict> prettyrobots: Have you seen ever seen a Haskell/Erlang/Scheme developer using Windows as platform?
15:24 < teadict> prettyrobots: And node is inspired by that kind of languages
15:24 < prettyrobots> And by developer, you Integrated Development Environment Operator.
15:25 < prettyrobots> I mean: No IDE.
15:25 < teadict> I don't follow
15:25 < teadict> Why you talk about IDEs?
15:26 < prettyrobots> Because in Windows land, it's mostly about an IDE that can Wizard you through the process.
15:26 < prettyrobots> So, that is one point. Node.js is not really an IDE language.
15:27 < teadict> Well, yes, maybe an abstraction layer such as an IDE could erase what I said about comfyness of languages
15:27 < teadict> It's true
15:27 < teadict> But IDEs can develop
15:27 < prettyrobots> Well, but Node.js is not going to behave in an IDE the same way that VisualBasic behaves.
15:27 < teadict> No fucking way...
15:27 < teadict> But Windows developers don't care if it doesn't 
15:28 < prettyrobots> You can make an IDE that noders like, but it will won't be the kind of IDE that Microsoft would make.
15:28 < teadict> As long as they can keep dealing with their IDEs
15:28 < prettyrobots> teadict: Um, well, they really expect a tool that can rearrange the code, and that's hard to do with JavaScript.
15:28 < teadict> Most likely Microsoft will make an IDE with node support or an extension for current IDEs that Windows tdevelopers like
15:28 < teadict> prettyrobots: If you want auto refactoring, don't choose JS
15:29 < prettyrobots> teadict: Yes. Exactly.
15:29 < teadict> There's still chances for node in Windows, don't worry
15:29 < teadict> If the impact is big enough, they'll use it
15:30 < teadict> Or maybe node is the One that will kill Windows for good
15:30 < teadict> IT IS THE CHOSEN ONE
15:30 < prettyrobots> Oh, well, Windows is another platform where Node.js can run, yes.
15:30 < prettyrobots> Windows is doing really poorly as it is. Very, very poorly.
15:30 < toothrot> in what way?
15:31 < prettyrobots> Someone else will say it better than me.
15:32 < vicapow> bnoordhuis: so my process i was telling you about that seemed to be eating up more and more memory just crashed. "Abort trap: 6"
15:32 < toothrot> sure, there are lots of problems, but it still runs on the large majority of computers
15:33 < prettyrobots> Found it.
15:33 < prettyrobots> http://www.asymco.com/2012/07/04/the-building-and-dismantling-of-the-windows-advantage/
15:36 < toothrot> pretty amazing lead they had
15:36 < toothrot> i wonder what a "windows unit" there is... since they are now lumping in iphones
15:38 < radiodario> microsoft seem to like node.js a lot
15:38 < teadict> radiodario: It has no choice
15:38 < toothrot> that graph is going to look worse for them after 8 i'll bet
15:39 < toothrot> but who knows
15:43 < edsu> can someone help me figure out why my npm package installs but is not requirable? http://search.npmjs.org/#/wikichanges
15:44 < edsu> i figure there's something wrong w/ the package.json ?
15:45 < prettyrobots> edsu: It works if I renamed wikichanges.js to index.js.
15:46 < prettyrobots> You can also add a `"main"` attribute to your package.json. Go read about package.json.
15:46 < prettyrobots> http://npmjs.org/doc/json.html
15:47 < vicapow> can anyone help me guess why this test program is crashing because its running out of memory? https://gist.github.com/3091278
15:47 < edsu> prettyrobots: thankyou :)
15:53 < edsu> prettyrobots: should i be able to say main: "wikichanges" as well?
15:53 < prettyrobots> edsu: I'd say "wikichanges.js"
15:54 < prettyrobots> Curious to know if it works without the .js.
15:54 < edsu> it didn't seem to work
15:54  * edsu tries w/ .js
15:54 < edsu> worked :)
15:54 < edsu> prettyrobots++
15:55 < edsu> i guess index is the norm for npm packages eh?
15:55 < prettyrobots> Huh. Worked for me without the suffix.
15:55 < edsu> npm v1.1.4 here
15:55 < prettyrobots> edsu: I'm using index.js a lot because my project size about that size.
15:56 < prettyrobots> https://github.com/bigeasy/cadence
15:56 < prettyrobots> I mean, it's one file.
15:56 < edsu> weird, now it's working for me too ... :-)
15:56 < creationix> prettyrobots, you know that main in package.json can point to any file
15:56  * edsu shrugs
15:56 < prettyrobots> Some people like to break their projects up a lot more.
15:56 < creationix> no need for index.js
15:56 < prettyrobots> creationix: Yes. We're covering all the optoins.
15:57 < prettyrobots> edsu: I'd leave the extension. I was just curious.
15:58 < prettyrobots> edsu: As creationix said, "main" can point to any file, so some poeple will create a `lib` directory and reference a file in there.
15:58 < edsu> thanks
15:59 < prettyrobots> I like to have one main libraray, and extras in in the root so you can say require('timezone'), then require('timezone/rfc822') to get more stuff.
16:00 < creationix> I usually put my main file in the root
16:00 < creationix> and extras in there as well
16:00 < creationix> I rarely have a lib folder
16:01 < creationix> if you need a lib folder, the library is too big
16:01 < creationix> (I usually write libraries, not applications)
16:07 < context> creationix: that hardly makes sense
16:08 < deedubs> lol
16:08 < context> creationix: so you're saying mongoose, express, and just about every library up there a large number of people use are all too big cause htey have a lib dir ?
16:09 < context> creationix: or that properly splitting your code into maintainable pieces (even if those files have 30-100 lines of code each) is wrong ?
16:09 < prettyrobots> context: creationix is saying exactly both those things. 
16:09 < creationix> context, I'm saying that if you *need* a folder hierarchy, then it's probably too many files.
16:10 < creationix> if you want to create a lib folder, that's fine
16:10 < prettyrobots> Also, use goto and name your variables a, b, c d.
16:10 < context> prettyrobots: kk he is saying those things.
16:10 < creationix> In the early days I wrote all my libraries with lib folders because that was what I was used to with ruby gems
16:10 < context> creationix: you're delusional
16:10 < creationix> context, hardly
16:10 < prettyrobots> Hah!
16:11 < context> in this situation is there a real difference between need and want?
16:11 < creationix> context, I've been writing node modules both large and small for longer than about anyone
16:11 < prettyrobots> context: Where do you get delusional?
16:11 < context> i mean express and mongoose and EVERY other library could be slammed into one single file
16:11 < creationix> no, I'm not saying a single file
16:11 < context> everyone knows how to cmd+f in their code editors
16:11 < creationix> multiple files is good
16:11 < tjholowaychuk> context one module per function ;)
16:11 < blueskies7> Hey all, so i've been hacking with node on OSX for a while. Tried to set it up on our Windows 7 box to do some native testing. When I download and run the MSI, it just opens Notepad. Doens't run the executable. Any thoughts?
16:11 < tjholowaychuk> haha
16:11 < tjholowaychuk> jk
16:11 < prettyrobots> There are a lot of people, like SubStack, that would publish a library as many modules.
16:12 < context> tjholowaychuk: and if your module is > 10 lines, split it up :p
16:12 < creationix> I think a file should stay under 1000 lines, preferably under ~300
16:12 < creationix> the real cutoff is functionality, not number of lines
16:12 < prettyrobots> context: There are many libraries that fit incely in one module, in one file.
16:12 < creationix> keep related things together
16:13 < prettyrobots> context: Some things are much larger, like a framework, that makes sense in one module, and split into many litlte modules.
16:13 < prettyrobots> Er, many little files.
16:14 < prettyrobots> But creationix implemented msgpack in 471 lines.
16:14 < creationix> context, the nice thing about node's module system is it's trivial to have lots of modules
16:14 < prettyrobots> That's one file.
16:14 < creationix> you don't even have to publish to npm
16:14 < creationix> just put them in node_modules
16:14 < creationix> or use relative requires
16:15 < creationix> my latest library is c9/vfs
16:15 < creationix> it's several thousand lines total
16:15 < creationix> about 10 npm modules
16:15 < creationix> a few files each
16:15 < creationix> the largest file is ~1000 lines
16:15 < prettyrobots> creationix: Because whether you publish them in on NPM module or not, you're still going to require.
16:15 < creationix> the smaller ones are around 100 lines
16:16 < tjholowaychuk> the smallest one i have
16:16 < tjholowaychuk> is
16:16 < tjholowaychuk> module.exports = new Emitter;
16:16 < creationix> prettyrobots, right, the point is to seperate concerns
16:16 < creationix> interface oriented programming
16:16 < creationix> tjholowaychuk, :)
16:16 < context> i dont like the idea of needing 10 require()'s for a single lib
16:16 < creationix> then don't
16:17 < tjholowaychuk> require('array-map')([1,2,3], fn)
16:17 < prettyrobots> Delusional.
16:17 < creationix> context, also you can have meta packages that bundle commonly used modules together under a single require
16:17 < prettyrobots> Gawd.
16:19 < prettyrobots> creationix: Which, is all that a monolothic NPM module would do anyway. 6 of one, half-dozen the other.
16:19 < prettyrobots> creationix: Meaning, either approach is valid. Matter of taste. Of course, my way is better. Etc. Etc.
16:20 < creationix> I'm just sharing my experience that if you feel you *need* a lib folder, you're usually better off breaking it up
16:20 < creationix> that is all
16:20 < creationix> and that's "usually"
16:20 < creationix> there are obviously exceptions
16:20 < creationix> (a lib folder within a single library)
16:20 < prettyrobots> creationix: Im
16:21 < prettyrobots> creationix: I'm not disagreeing. I don't know if that is apparent.
16:21 < prettyrobots> edsu: Hope you're on your way.
16:22 < prettyrobots> I'm actaually agreeing, but IRC is combaty.
16:22 < prettyrobots> combatty.
16:23 < AAA_awright> creationix: Having a lib/ directory allows you to single out the code from non-code resources like the README and such
16:23 < AAA_awright> I typically symlink to lib/ for that reason
16:23 < creationix> AAA_awright, right, but what would go in that lib that's not better off as it's own shared module?
16:24 < creationix> if it's a dependency, it shouldn't be bundled (unless it's really specefic to that library)
16:24 < ccowan> What about libraries that are specific to your project
16:24 < ccowan> or module
16:24 < AAA_awright> Even if it's a single file
16:24 < creationix> I usually just put them at the root
16:24 < AAA_awright> Unless you want to check in a symlink index.js -> myLibrary.js
16:24 < creationix> I never use index.js
16:24 < AAA_awright> Not using index.js breaks require() >_<
16:24 < creationix> confuses me in my editor when working on 5 libraries all with index.js files
16:25 < creationix> AAA_awright, no, the main field in package.json works
16:25 < creationix> I use package.json
16:25 < AAA_awright> Well you don't edit index.js, you make it a symlink
16:25 < creationix> symlinks don't work on windows
16:25 < creationix> and npm complains about them
16:25 < AAA_awright> Using package.json for that purpose breaks semantics
16:25 < blueskies7> Hey all, so i've been hacking with node on OSX for a while. Tried to set it up on our Windows 7 box to do some native testing. When I download and run the MSI, it just opens Notepad. Doens't run the executable. Any thoughts?
16:26 < prettyrobots> blueskies7: The MSI opens in Nodepad?
16:26 < blueskies7> prettyrobots: yeah
16:27 < prettyrobots> blueskies7: Ouch.
16:27 < blueskies7> prettyrobots: windows 7, no extra bells and whistles. fresh OS install
16:27 < prettyrobots> Sorry. I had no problems installing 8.1.
16:28 < blueskies7> prettyrobots: so what happened when you clicked the .msi?
16:29 < AAA_awright> ... And what should it matter if npm can't handle symlinks? That's its own fault, not Node.js
16:29 < prettyrobots> blueskies7: On Windows 7. I double-click, I get a security warning. I say run.
16:29 < prettyrobots> I'm looking at the installer.
16:29 < prettyrobots> That's 8.2.
16:29 < blueskies7> prettyrobots: god...that's awful.
16:29 < prettyrobots> 3,924 k 
16:30 < prettyrobots> Well, a good security warning. An are you sure? sort of thing.
16:30 < prettyrobots> Not a BAD SECURITY WARNING.
16:30 < prettyrobots> Anyway, that's the installer size. Maybe you only got part of it.
16:31 < prettyrobots> Works on my machine, as the HN kids like to say.
16:32 < creationix> AAA_awright, to me npm is part of node now
16:33 < creationix> package.json is the node way to declare module entry points and dependencies
16:33 < creationix> node's own require reads package.json even without using npm
16:33 < AAA_awright> We need to stop thinking that way, that'll be the death of Node.js if there is one
16:33 < creationix> why, what's wrong with package.json?
16:33 < AAA_awright> For describing an application, nothing
16:34 < prettyrobots> AAA_awright: You're way off base.
16:34 < prettyrobots> Waaaaaaaaay.
16:34 < creationix> AAA_awright, no, I'm curious, why do you not like package.json
16:34 < AAA_awright> For Node.js's own internal use, it's extending it with semantics that doesn't apply to modules
16:34 < creationix> what is a "module"?
16:35 < creationix> and how does package.json not fit with it's semantics
16:35 < AAA_awright> What part of package.json? I'm fine with it as it is, I'm not fine with Node.js adding its own module semantics to it
16:36 < prettyrobots> http://nodejs.org/api/modules.html#modules_all_together
16:37 < prettyrobots> http://wiki.commonjs.org/wiki/Packages/1.1#Package_Descriptor_File
16:37 < prettyrobots> No semantics where harmed in the making of this module loader.
16:37 < mc> random question, just looking for input: can anyone think of a reason that i should *not* do live re-loading of a config file in a process?
16:38 < AAA_awright> prettyrobots: That was added in response to Node.js, not the other way around
16:38 < prettyrobots> Node.js FTW!
16:39 < AAA_awright> And even if so, the CommonJS spec too, violates its own internal constistency
16:39 < creationix> what's wrong with having node specific metadata for a node library?
16:39 < prettyrobots> A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines.
16:40 < AviMarcus> mc, just if you do, make sure if it can't parse the file that it doesn't go nuts. Like maybe throw an error but keep the old config.
16:40 < creationix> to me package.json is library/module/package level metadata
16:40 < creationix> like where is the entry point, what are it's dependencies
16:40 < AAA_awright> I'm not sure exactly what you mean by that because there's an important distinction between modules, packages, libraries, and executables
16:40 < creationix> right, so in node a library, module, and package are all the same thing
16:40 < mc> AviMarcus: right, that makes sense
16:40 < creationix> it's a simple system
16:40 < EricBlade> anyone know if there's a routine already built in somewhere that will convert a number of seconds or milliseconds into an hour:min:sec string ?
16:41 < creationix> AAA_awright, so you problem is you don't like merging all those together?
16:41 < AAA_awright> The domain of the require() function is a module filename, or something that can resolve to a filename
16:41 < prettyrobots> mc: What AviMarcus said. You're describing what many daemons do when you give them a HUP.
16:41 < AviMarcus> mc were you asking about automatically reloading btw?
16:42 < prettyrobots> EricBlade: None built in. Very, very easy to write your own.
16:42 < Draggor> Is there a suggested/preferred csv reader?
16:42 < Draggor> I'm just looking for simplicity
16:42 < AviMarcus> yea, one sec.. 
16:42 < mc> AviMarcus: what i'm doing is deleting the config file from the require cache, then re-requiring it
16:42 < creationix> AAA_awright, and package.json is part of require.resolve
16:42 < AviMarcus> Draggor, "csv" is the package name
16:42 < creationix> it's no more magical than index.js
16:42 < AviMarcus> ah: https://github.com/wdavidw/node-csv-parser
16:42 < mc> it's working, i just want to make sure i'm not doing something totally crazy that's going to cause headaches later
16:43 < AAA_awright> creationix: In some cases they share properties, Node.js modules are handled as both libraries and executables, though preference is given to their library functionality
16:43 < creationix> yes, the global vs local stuff is a little confusing
16:43 < creationix> install executables globally so they are in your path, and libraries locally so they are available to require
16:43 < AAA_awright> So if you share properties like that then there's no issue, the issue comes in when you start crossing semantics with the same function
16:44 < creationix> well you don't require executables
16:44 < AAA_awright> You /can/
16:44 < creationix> and "main"and "bin" are separate in package.json
16:44 < EricBlade> prettyrobots: sure, i have one hiding around here somewhere, just wanted to make sure i wasn't duplicating effort
16:44 < creationix> well that wouldn't be requireing the executable
16:44 < creationix> that would be requireing the library the executable uses
16:44 < AAA_awright> And it makes sense with the architecture of Javascript
16:45 < prettyrobots> EricBlade: There are libraries. I'd write it out though.
16:46 < creationix> AAA_awright, what makes sense with the architecture of JavaScript?
16:46 < AAA_awright> Because of how Functions are Objects and such
16:46 < creationix> oh right
16:47 < AAA_awright> What I mean about sharing properties... To require() a module, Node.js executes the file as the body of a function, and anything that gets assigned to the named arguments becomes a library
16:47 < creationix> $("foo") vs $.get(...)
16:47 < AAA_awright> Generally people don't require() executable CLI programs so there's no issue here
16:47 < creationix> right, declaring functions is a runtime event in most scripting languages
16:48 < creationix> (though js function declarations that hoist their value muddy this a bit)
16:48 < AAA_awright> Not even that it's runtime, it's that you have to assign the function to a variable, instead of a name
16:48 < creationix> you mean the exports.Foo = Foo stuff?
16:48 < AAA_awright> Yeah
16:48 < creationix> well, that's just because of how scoping works
16:48 < creationix> and makes it explicit about what gets exported
16:49 < creationix> in luvit I just return the exports from the function
16:49 < creationix> that means cyclic dependencies are harder, but otherwise it's really nice
16:50 < creationix> I kinda wish node supported "return foo" instead of  "module.exports = foo"
16:50 < creationix> it could keep "exports.Foo = Foo" for people who need cycles
16:50 < tjholowaychuk> you can
16:50 < tjholowaychuk> but it wont parse as valid js
16:51 < tjholowaychuk> if you're doing static analysis etc
16:51 < creationix> right, return can only exist in a function
16:51 < creationix> in lua a file is a function
16:51 < AAA_awright> The point is we have a really clear idea what a module is, and how you can extract a library from it, and there's no confusion over it
16:51 < AAA_awright> When you use require() a file is a function
16:52 < creationix> AAA_awright, so you're saying that we shouldn't use require for both modules and just loading files?
16:53 < AAA_awright> tjholowaychuk: I'm not sure if the ECMAScript standard has anything to say about it but at least in Node.js all evaluated code is inside a function with a scope, return is a valid statement anywhere.
16:54 < tjholowaychuk> AAA_awright yeah i know
16:54 < tjholowaychuk> i've used it but I removed it since it choked on static analysis
16:54 < creationix> yep
16:54 < tjholowaychuk> and code coverage tools etc
16:54 < AAA_awright> Someone's doing something wrong and I doubt it's Node.js
16:55 < creationix> don't you love how the limitations of tools affect how we write code
16:55 < tjholowaychuk> well they're expecting valid js, seems reasonable
16:56 < creationix> at least they don't blow up if you forget an optional semicolon
16:56 < creationix> oh wait...
16:56 < mc> haha
16:57 < AAA_awright> Yeah, in ECMA-262 "return" is a valid statement anywhere you can have a statement
16:58 < prettyrobots> Where do we like to put code snippets?
16:59 < creationix> prettyrobots, gist.github.com
17:00 < prettyrobots> EricBlade: https://twitter.com/bigeasy/status/223099404075270144
17:01 < prettyrobots> Here's a question:
17:02 < prettyrobots> Anyone know of, working on, recommend a library that builds pipelines that is close to working with bash.
17:02 < prettyrobots> Maybe, event-stream based, but more sugary.
17:02 < prettyrobots> pipeline(a, b, c);
17:05 < james12>  npm ERR! System Linux 2.6.16-xenU npm ERR! command "nodejs" "/usr/bin/npm" "install" "mysql@2.0.0-alpha3" npm ERR! cwd /var/www/html/....... npm ERR! node -v v0.6.18 npm ERR! npm -v 1.1.19 npm ERR! syscall connect npm ERR! code ETIMEDOUT npm ERR! message connect ETIMEDOUT npm ERR! errno {} 
17:05 < james12> i am getting this erro
17:05 < james12> error*
17:05 < prettyrobots> Someone just created nosh.
17:06 < james12> while updating NPM
17:06 < prettyrobots> http://search.npmjs.org/#/nosh
17:06 < EricBlade> prettyrobots: regex seems a bit overkill.. and according to jsperf, about 70% slower than doing it with regular string ops :)
17:06 < james12> any ideas
17:07 < james12> what is wrong
17:07 < prettyrobots> EricBlade: Can you do it with regular string ops and still fit it in a Tweet?
17:07 < EricBlade> prettyrobots: hmm.  haven't considered that ;D
17:08 < prettyrobots> EricBlade: That was the project goal that led me to choose the regular expression.
17:08 < EricBlade> size of code is irrelevant to me, though, i'm all about speed, since it's running on mobile hardware
17:09 < james12> getting NPM error while trying to install packages...."npm ERR! code ETIMEDOUT npm ERR"..can anyone shed somelight into this
17:09 < untrusted_code> running code inside a vm with vm.runInNewContext blocks, but doesn't wait for asynchronous code inside the vm to finish. are there events i can listen for to know that the vm is done?
17:10 < prettyrobots> EricBlade: Okay. I just wanted to show you that it was trivial and that you didn't need to worry about duplicating effort.
17:11 < EricBlade> prettyrobots: appreciated :)
17:15 < CIA-93> node: isaacs v0.6 * r952e513 / (ChangeLog src/node_version.h): 2012.07.10 Version 0.6.20 (maintenance) - http://git.io/75L3Nw
17:15 < CIA-93> node: isaacs v0.6 * rb6e916d / src/node_version.h : Now working on 0.6.21 - http://git.io/AZSOnQ
17:18 < EricBlade> hmm.  forgive the noob question, but .. is it normal for readFileSync to return .. an object?
17:21 < Daegalus> EricBlade: i believe yes. Since it reads it synchronously, it just returns with what it reads.
17:22 < EricBlade> i would've expected a string or a buffer.
17:22 < EricBlade> oh, i guess a buffer is an object
17:22 < jetienne> EricBlade: yes
17:22 < Daegalus> well, technically, everything in javascript is an object, even functions.
17:22 < EricBlade> i thought normally if i tried to log a buffer, it would say type Buffer, though
17:24 < prettyrobots> EricBlade: If you want a string, give it an encoding.
17:29 < nlogax> I have an app with a plugin API, would like to piggyback onto Node's module loader. How can I add a path to the set of paths Node will look in?
17:29 < nlogax> Only found the obsolete require.paths :)
17:30 < jergason> nlogax: Why not just use npm?
17:32 < nlogax> jergason: That will already work, but I also want to support putting modules in a "plugins" directory, or whatever
17:32 < untrusted_code> are there events i can listen for when running vm.runInNewContext to know that the vm has exited?
17:33 < EricBlade> ok , so, say i'm using an older version of node that does not use the interprocess communication channels that were introduced recently.  i need to get a virtually unlimited amount of data to/from a child node process.  is there a better way than using files?
17:34 < EricBlade> i don't really know exactly how much data is coming back from the pipe, so using stdout with exec doesn't exactly work, since once it hits the buffer size, the pipe gets broken
17:34 < TimeTurner> >
17:36 < jergason> EricBlade: which version of node?
17:36 < EricBlade> 0.4
17:37 < bradleymeck> EricBlade, node-fork module?
17:38 < bradleymeck> or just use spawn and watch stdout and stderr
17:40 < EricBlade> bradleymeck: unless we're talking about an external fork module, fork isn't available in 0.4.   with spawn, is there a 2-way communication?  i was under the impression if i wanted to get the output back, i needed to use exec .. or is that just a buffered version
17:40 < bradleymeck> its in npm EricBlade , has fallback as long as you dont need sendHandle
17:40 < bradleymeck> EricBlade: also you can just pipe data from the resulting child object from spawn
17:41 < bradleymeck> so either would work
17:44 < jmwhittaker> when using mode.exports = function(){} how do I call a function internally?
17:47 < bradleymeck> jmwhittaker, you can var fname = module.exports = fn; or just module.exports()
17:47 < seebees> not a big deal, but  http://nodejs.org/api/ lists 0.8.1 as the version…
17:48 < bradleymeck> seebees its been noted
17:49 < jmwhittaker> bradleymeck: aha thx
17:52 < edsu> prettyrobots: yes thnx :)
17:58 < TimeTurner> does anyone use namespaces in their socket.io code?
18:01 < nickhs> Hey there! What would be the best way to go around writing an event emitter every time an array changes?
18:01 < alex4nder> nickhs: like a native Array?
18:01 < nickhs> alex4nder: aye
18:01 < thm> hi. I tried to build the sqlite3 module, but when using it, I get an undefined symbol error for v8::ObjectTemplate::SetAccessor(..) - how can I fix this?
18:01 < alex4nder> nickhs: well there's an easy way, and a hard way.
18:02 < TimeTurner> you could emit an event everytime you do something to it in the callback
18:02 < TimeTurner> or you could watch the array and compare it to the previous version of the array
18:02 < alex4nder> ...
18:02 < nickhs> alex4nder: from my understanding the best way would be to wrap it in an object
18:02 < nickhs> TimeTurner: err...?
18:02 < TimeTurner> just emit an event everytime you invoke a method which changes the array
18:02 < TimeTurner> or do you not know when the array will change?
18:03 < nickhs> TimeTurner: that would defeat the purpose of the event emitter. I was hoping to not have to worry about that.
18:04 < TimeTurner> that's how events are performed. whenever you want to notify the listeners of a particular event that something has happened you have to explicitly emit an event before/during/or after it happens
18:04 < nickhs> TimeTurner: ah gotcha. Then what would be the advantage of using an event emitter over just calling a function every time a change happens?
18:05 < TimeTurner> well with the event your code is clearly separated and it works kind of like a publish/subscribe system
18:05 < jcrew> just override it in the array prototype to emit
18:05 < TimeTurner> or that
18:05 < nickhs> jcrew: how would I  do that?
18:05 < jcrew> http://stackoverflow.com/questions/560829/calling-base-method-using-javascript-prototype
18:06 < TimeTurner> but augmenting array.prototype isn't that clean
18:06 < nickhs> jcrew: cheers
18:06 < TimeTurner> because it would happen for every single array you create
18:06 < nickhs> TimeTurner: oh dear.
18:06 < nickhs> there is no way to make a 'special' array type with emitter added?
18:06 < jcrew> there is
18:07 < jcrew> just inherit Array and then extend it
18:07 < TimeTurner> an array constructor
18:07 < alex4nder> laf
18:07 < TimeTurner> yes
18:07 < jcrew> :)
18:07 < nickhs> jcrew: do you have sample code by any chance?
18:07 < alex4nder> I'm interested in how you plan on doing an index getter/setter?
18:07 < jcrew> no, the link above has plenty
18:08 < TimeTurner> var a = new Array(); a.prototype.emit = myEventEmitter; I think
18:08 < TimeTurner> don't use new Array a lot so...
18:08 < jcrew> http://dean.edwards.name/weblog/2006/11/hooray/
18:08 < alex4nder> wut
18:08 < nickhs> jcrew: cheers
18:08 < TimeTurner> yep
18:22 < nickhs> So if I understand you right, this should work? http://jsfiddle.net/pSJQY/
18:24 < bradleymeck> nickhs: nope, .prototype only applies to functions and it only gets added when you use `new`
18:25 < nickhs> crud
18:25 < bradleymeck> nickhs: do not try to extend any builtin except Object, bad things happen
18:27 < nickhs> bradleymeck: oof okay.
18:27 < TimeTurner> http://venodesigns.net/2011/04/16/emitting-custom-events-in-node-js/
18:27 < TimeTurner> you need something like this
18:34 < TimeTurner> nickhs: https://gist.github.com/f6545c91082bbacaaed2
18:34 < rcrowley> Do I need to do anything special to get Node's HTTPS client to check certificate revocation lists?  I'm specifying the CA to use already.
18:34 < TimeTurner> there is probably a better way to do it but I haven't dealt with EventEmitter directly a lot yet
18:35 < thm> how can it be that sqlite3, after successful rebuild, still misses a symbol?
18:40 < thm> it seems the headers in ~/.node-gyp are different from the system-wide installed...
18:41 < TooTallNate> thm: node-gyp downloads the headers for your specific version of node
18:41 < TooTallNate> thm: can you gist whatever problem you're seeing?
18:41 < AAA_awright> Anyone know of a sane HTML parser?
18:41 < AAA_awright> I mean, something with a sane API?
18:42 < AAA_awright> something that doesn't still require('sys') >_<
18:42 < thm> TooTallNate: I build sqlite3, and when trying to use it, I get an undefined symbol. c++filt tells me it is v8::ObjectTemplate::SetAccessor(...)
18:43 < TooTallNate> thm: what platform?
18:43 < thm> TooTallNate: opensuse 11.4, x86_64
18:43 < TooTallNate> thm: and what version of node?
18:44 < AAA_awright> rcrowley: In practice almost no one actually checks the CRLs, not even web browsers
18:44 < AAA_awright> A better practice is have quick expiration times on your certificates
18:44 < rcrowley> That
18:44 < thm> TooTallNate: nodejs-0.6.19, libv8-3-3.12.5.0
18:44 < rcrowley> s fair, AAA_awright.
18:45 < TooTallNate> thm: oh, you're using a linked v8?
18:46 < TooTallNate> thm: i'd recommend recompiling node from source and using that version, linking against a shared v8 isn't recommended
18:48 < thm> hm. that would mean I cannot use rpm packages anymore.
18:48 < thm> TooTallNate: you are the author of node-gyp, right? can I convince it to use v8 headers as installed in /usr/include?
18:49 < TooTallNate> thm: perhaps by messing with some env variables, but not it's not supported
18:49 < AAA_awright> ...I link against shared v8
18:50 < Draggor> AviMarcus: Thaks for the suggestion, worked wonderfully
18:51 < AAA_awright> Which leads to strange things like: node: '0.8.1-pre',  v8: '3.10.8.19'
18:54 < thm> TooTallNate: ok, seems symlinking ~/.node-gyp/0.6.19/deps/v8/include to /usr/include does the trick.
18:55 < TooTallNate> thm: well there you go :p
18:56 < thm> but in fact, at least linux distributions will insist on shared libraries.
18:56 < AviMarcus> Draggor, yw
18:59 < motiooon_> why is if I read a file of 5mb with fs.readFile(all_photos[i], function(err, result){ })     my CPU  goes trough the roof to 100%
19:00 < mc> for how long?
19:00 < motiooon_> undetermined
19:00 < motiooon_> the cooler on my laptop starts to make noise
19:01 < mc> huh
19:01 < mc> not sure, i can load up a 20mb file in a matter of a couple seconds
19:01 < mc> you might consider using a read stream rather than reading the whole file
19:01 < motiooon_> how would I do that ?
19:02 < motiooon_> isn't a buffer/ stream by default when reading a file ?
19:02 < mc> readFile reads the entire file into a buffer and returns it in a callback
19:03 < mc> createReadStream instead creates a readable stream that you can pull data from
19:04 < motiooon_> ok
19:04 < motiooon_> how would I know what part of a code would underperform in node ?
19:05 < motiooon_> maybe it's not the file read and maybe it's something else pin the code 
19:07 < mikeal> isaacs: did the move from path.existsSync to fs.existsSync change any implementation details?
19:08 < mikeywaites> hey anyone familiar with the node-mysql module? not sure what im doing wrong here but cant seem to get it running http://dpaste.com/769530/
19:08 < kylefarris> in socket.io is the heartbeat an actual even that can utilized?
19:13 < kylefarris> like, can I do something like: io.socket.on('heartbeat', function { // do stuff }); ?
19:13 < prettyrobots> creationix: Thanks for the answer on the listserv. Helps.
19:14 < creationix> prettyrobots, which one?
19:14 < prettyrobots> creationix: Inherit Versus Pipe
19:14 < creationix> ahh yes, I was bit by that recently
19:15 < creationix> it's only part of the answer, but it's a start
19:16 <@isaacs> mikeal: no, the function just moved.
19:16 < cocacola> hi
19:16 <@isaacs> that's it
19:17 < lohkey> fucking tits, we up on github and shit
19:17 < clarle> Have a dumb package.json question.
19:17 < clarle> I have express 3.0.0beta4 as a dependency, how do I signify that in package.json?
19:18 < tjholowaychuk> clarle "express": "3.0.0beta4"
19:18 < clarle> tjholowaychuk: Hm, maybe my npm is broken. It's just skipping over it for me.
19:18 < cocacola> when writing node.js module in C++ can you have an object that isn't a v8 type in a class?
19:18 < bradleymeck> cocacola: look into ObjectWrap and if needed InternalFields
19:19 < clarle> Ah, nevermind, horrible package.json syntax error, thanks tjholowaychuk!
19:25 < EhevuTov> clarle, you might want to prefix that with a '>=' so that you will use express 3.0 from there on out if you really want 3.x
19:26 < tjholowaychuk> nevaaa
19:26 < tjholowaychuk> >= should almost be removed
19:26 < EhevuTov> really?
19:26 < EhevuTov> I'm confuse then
19:27 < tjholowaychuk> better to manually do 3.0.0 later and make sure your tests all pass etc
19:27 < timoxley> EhevuTov it's pretty dangerous to move across major version numbers automatically
19:27 < EhevuTov> oh because of the beta?
19:27 < EhevuTov> >= 3.x moves over to 4.x?
19:28 < timoxley> while 3 > 4 == true
19:28 < tjholowaychuk> i remember ryan saying something about versions being lame because api changes are failures and i definitely agree with that, maybe in an ideal world we'd just do dependencies: ['express', 'foo', 'bar']
19:28 < EhevuTov> I would of thought it would just stay within 3.(0-n)
19:28 < timoxley> oops
19:28 < timoxley> other way
19:28 < tjholowaychuk> or if the modules are small enough just write a new one if the api changes
19:28 < tjholowaychuk> who knows
19:28 < timoxley> EhevuTov for that you want ~3.0 or 3.x
19:28 < tjholowaychuk> surprises are no fun, but semver is kinda pointless in the sense that it encourages breaking
19:29 < tjholowaychuk> instead of smaller incremental changes
19:29 < tjholowaychuk> that may or may not break but that's why you pin
19:29 < timoxley> EhevuTov npm help server
19:29 < EhevuTov> npm help computer
19:29 < EhevuTov> stop all the downloadin
19:29 < timoxley> semver*
19:30 < timoxley> coding through to 5:30 in the morning = typos.
19:32 < seans887> i have an async db problem: when sending multiple queries to my db in parallel, i sometimes need to know the result of the first query that is received. how can i be sure the subsequent requests are aware of the first one?
19:33 < context> uhh
19:33 < jesusabdullah> seans887: use callbacks!
19:33 < context> you cant send the second query to the db in parallel if it depends on the first
19:33 < context> otherwise look at something like Step
19:34 < seans887> well i guess its not so much that it depends upon it, more like since they are sent in parallel, i don't know which one gets there first
19:34 < jesusabdullah> seans887: firstQuery(function (err, res) { if (err) { throw err; } secondQuery(f(res), cb); thirdQuery(g(res), cb); });
19:34 < context> seans887: look at Step
19:34 < context> seans887: https://github.com/creationix/step
19:34 < EhevuTov> timoxley, thanks for the 'npm help server' tip! I didn't even know that existed
19:35 < seans887> ok thanks context, jesusabdullah
19:37 < EhevuTov> timoxley, yeah, that wasn't a typo. That's what mac os x defaults to spellcheck. I hate that sometimes
19:37 < timoxley> seans887 async better than step imo
19:37 < timoxley> seans887 https://github.com/caolan/async/
19:37 < ku> are there any advantages to using node.js over twisted other than V8 performance?
19:38 < jesusabdullah> seans887: context: I'm with timoxley on this one
19:38 < jesusabdullah> ku: An api that doesn't suck
19:38 < timoxley> ku javascript
19:38 < tjholowaychuk> ku lots of callbacks
19:38 < ku> and other than JavaScript
19:38 < EhevuTov> ku, well isn't the javascript language more suited for events
19:38 < jesusabdullah> guys
19:38 < seans887> thx
19:38 < jesusabdullah> guys
19:38 < jesusabdullah> I got this
19:38 < ku> tjholowaychuk, Twisted has lots of callbacks and so does Twisted
19:39 < jesusabdullah> everyone settle down
19:39 < creationix> ku, most python libraries use sync io and break twisted
19:39 < jesusabdullah> First of all, the event loop in twisted is explicit. It's implicit in node.
19:39 < ku> you can use something like gevent to monkeypatch
19:39 < ku> creationix, ^
19:39 < creationix> threads are too expensive
19:39 < ku> creationix, not with gevent's greenlets
19:39 < jesusabdullah> Second, twisted has a fuckton of olden-days "maybe python should look like java" baggage that node doesn't
19:39 < tjholowaychuk> greenlets are nice
19:39 < ku> they're actually almost as cheap as processes in erl
19:39 < creationix> with 100,000 concurrent clients?
19:40 < creationix> but yeah, that's a lot better than real pthreads or something
19:40 < jesusabdullah> finally, javascript allows inline callbacks, which python **basically** doesn't (lambdas don't count)
19:40 < jesusabdullah> which makes it a better fit for this stuff, means you don't need a "deferred" abstraction
19:40 < Tobsn> wasnt erlang the winner in the latest bench of which language can handle most concurrent requests?
19:40 < creationix> jesusabdullah, javascript doesn't have "should look like java" baggage?!
19:40 < tjholowaychuk> ku what's the default stack size for greenlets?
19:40 < ku> tjholowaychuk, not sure
19:40 < jesusabdullah> creationix: Different "should look like java" baggage
19:40 < Tobsn> erlang or lisp
19:40 < creationix> heck, even the name itself is corrupted with such baggage
19:40 < jesusabdullah> creationix: The more superficial, and therefore more tolerable, kind
19:40 < Tobsn> nah it was erlang
19:41 < ku> jesusabdullah, JavaScript is corrupted with Java
19:41 < Tobsn> hehe JAVAscript
19:41 < ku> JS had to “look like Java” only less so, [it had to] be Java’s dumb kid brother or boy-hostage sidekick. Plus, I had to be done in ten days or something worse than JS would have happened
19:41 < ku> —Brendan Eich
19:42 < ku> even Brendan Eich, the creator of JavaScript, said so
19:42 < timoxley> ku "looking like java" is about all they have in common though
19:42 < Tobsn> most non Java* devs still refer to javascript and java as "java" no matter which one it is
19:42 < TimeTurner> for 10 days it turned out better than Java
19:42 < ku> also, JavaScript has some annoying type coercion
19:42 < tjholowaychuk> that it does
19:42 < tjholowaychuk> most things are nice though
19:42 < jesusabdullah> the baggage isn't anything as superficial as Math.whatever, what I'm talking about is insisting on baroque "Factories" and other incredibly overweight, unweildy abstractions, that are only really necessary in a language like java
19:42 < tjholowaychuk> nice-ish
19:43 < jesusabdullah> That's twisted's biggest problem, right there
19:43 < ku> how about gevent?
19:43 < Tobsn> https://www.destroyallsoftware.com/talks/wat
19:43 < ku> it's supposed to allow linear programming in an async style
19:43 < Tobsn> WAT? is the best explanation of how funny javascript is
19:43 < jesusabdullah> I've heard good things about gevent, but you asked about twisted
19:43 < ku> or, more precisely, async in a procedural style
19:43 < ku> jesusabdullah, I'm asking about gevent now
19:44 < jesusabdullah> ku, I gotta be honest, it sounds like you're a python fanboi trying to roll up ins and get people riled up
19:44 < ku> jesusabdullah, no
19:44 < jesusabdullah> ku: nobody here's going to shit on python, or if they do they'll admit that it's at a personal and language level
19:44 < jesusabdullah> the technologies are mature
19:45 < jesusabdullah> I mean, maybe I'm off-base here
19:45 < jesusabdullah> and if I am I apologize for jumping to conclusions!
19:46 < ku> jesusabdullah, I understand what you mean
19:46 < ku> but Node seems like an attempt to start over because other techs are already clogged
19:46 < jayarjo> hello everbody
19:46 < ku> I don't personally like Ruby, for example, but it does allow closures and blocks
19:46 < TimeTurner> it is an attempt to start over and a good one at that
19:47 < EhevuTov> Node is a framework, not a language
19:47 < ku> which are more or less anonymous functions
19:47 < ku> EhevuTov, I didn't say it was
19:47 < jesusabdullah> ku: That's not an unreasonable assessment. Node started with the lessons learned from the last 20 years, and insisted on a lightweight core, and that's worked out pretty well so far
19:48 < bradleymeck> jesusabdullah: that was before we needed to integrate with skynet
19:48 < jesusabdullah> Surprisingly well, even
19:48 < TimeTurner> Node has done an excellent job at solving the age-old problems server-side frameworks were having
19:48 < jesusabdullah> bradleymeck: Right! Or, like, integrating with skynet in the 90s wasn't as fun as it is now
19:48 < ku> How hard is it to use Node.js' V8 extensions directly from C?
19:48 < TimeTurner> reinventing the wheel in some aspects is better when there is no reall wheel to begin with
19:48 < ku> basically to use Node.js' standard lib in C
19:49 < tjholowaychuk> ku there's libuv
19:49 < ku> or C++
19:49 < tjholowaychuk> joyent/libuv
19:49 < gildean> there was a good link posted about language performance earlier
19:49 < ku> tjholowaychuk, that's only an abstraction from libev and its windows equivalent
19:49 < tjholowaychuk> yeah
19:49 < ku> I'm looking for a more high-level solution
19:49 < tjholowaychuk> there's libpth as well
19:49 < ku> with support for ssl, tcp, etc.
19:49 < gildean> might have been over at webtech or somewhere
19:49 < tjholowaychuk> similar but light-weight threads
19:50 < tjholowaychuk> sync instead of callback madness
19:50 < gildean> let me see if i can find it
19:50 < tjholowaychuk> but the stacks dont grow
19:50 < tjholowaychuk> so it kinda sucks
19:50 < ku> also, how does node.js address multicore computing?
19:50 < EhevuTov> ku, there's a core module called 'cluster'
19:50 < jayarjo> guys, sorry to bug into your discussion with silly question, but - is it possible to package a phyton script as an installable dependency for node module?
19:50 < bradleymeck> gildean: when my performance needs actually matter more than my disk/network is when i start to feel like im having success (need being the key word)
19:50 < gildean> http://raid6.com.au/~onlyjob/posts/arena/
19:50 < bradleymeck> ku require('cluster') or spawning workers
19:51 < ku> How slower would an irc daemon in node.js be compared to one in C or C++?
19:51 < bradleymeck> jayarjo you could put w/e in npm, but its not recommended
19:51 < EhevuTov> ku, the time it took to write it, or the runtime
19:51 < ku> the overhead/runtime
19:51 < tjholowaychuk> ku the thing im using for irc uses node
19:51 < tjholowaychuk> and it's fine
19:51 < jayarjo> bradleymeck, w/e?
19:52 < bradleymeck> whatever
19:52 < ku> tjholowaychuk, you're using a node irc server?
19:52 < Swaagie_> why compare languages that are not at the same level of abstraction
19:52 < ku> I've seen one out there, but it seems bloated
19:52 < tjholowaychuk> ku yeah
19:52 < tjholowaychuk> well client
19:52 < ku> tjholowaychuk, oh, but a daemon is a different story
19:52 < EhevuTov> Swaagie, ^
19:52 < ku> there's ircd.js, but it seems impossible to extend
19:52 < bradleymeck> ku, probably 10-20x runtime when doing cpu tasks i would bet, but network is still going to be the bottleneck that kills you first on modern machines
19:53 < jayarjo> bradleymeck, like if I put there "curl -s https://pagekite.net/pk/ |sudo bash", that will actually work?
19:53 < ku> bradleymeck, IRC is largely memory and network-bound, very little CPU
19:54 < bradleymeck> ku i know, most network apps that are not compute based are similar
19:54 < bradleymeck> ku daemons are just processes, and irc has soo many extensions, id just pick up an existing one unless you want to write a ton of code
19:54 < bradleymeck> jayarjo: yes, but it will probably barf on `sudo` since it drops you to a non-root user
19:55 < bradleymeck> install deps inside your folder, not outside
19:55 < ku> even the best ircds like charybdis are very confusingly coded, bradleymeck 
19:55 < bradleymeck> ku, but tested and have lots of the stuff, so unless you want to go write your own...
19:56 < ku> bradleymeck, do you have any better ideas for a useful application to code? something real-time
19:56 < bradleymeck> ku how complex do you want it?
19:57 < ku> bradleymeck, not too much, like something that takes a few hours to code
19:57 < ku> and that will give me actual results
19:57 < ku> I am experienced with javascript and python, but not node.js
19:57 < ku> also, something that would be suitable as a hosted solution
19:57 < ku> bradleymeck, ^
19:57 < ku> s/solution/service
19:58 < bradleymeck> ah hosted, so that changes
19:58 < jayarjo> bradleymeck, tnx
19:58 < EhevuTov> ku, if you want to compare apples and oranges, why not startup a simple web server in node and one in ngnix and run 'ab' tests against them
19:58 < ku> bradleymeck, isn't node.js mostly oriented towards hosted? even IRC
19:58 < bradleymeck> ku i mostly use it to write tools like ssh multiplexers and elastic load balancers
19:58 < Swaagie_> might as well compare a turing machine to html5 while we are at it 8)
19:58 < bradleymeck> but im in a special situation
19:59 < EhevuTov> Swaagie, ^
19:59 < ku> Swaagie_, no, those are different interfaces
19:59 < ku> what I compared was the same interface with different implementations
20:00 < bradleymeck> ku, what about a log server with queryability via web?
20:00 < bradleymeck> its not too huge, but useful
20:02 < ku> bradleymeck, for logging what?
20:02 < prettyrobots> Anyone interested in a little module that helps you figure out a shebang line when you're running in Windows?
20:02 < ku> prettyrobots, explain?
20:05 < mxweas> I've seen some people writing a function that wraps decodeURIComponent in try/catch. The function is called and returns the same as decodeURIComponent. There's basically no reason for it.
20:06 < mxweas> connect has some comments that say it's so V8 can deoptimize just decodeURIComponent. Can anyone elaborate on this a little?
20:06 < num1> quick jsdom question, is there anyway I can hook into the resource fetches? I'd like jsdom to process an entire document, but for me to keep track of all network requests, and potentially blacklist requests that shouldn't go through
20:08 < mxweas> you can use jsdom with your own readable stream. Just make your own stream instead of passing the url to jsdom for it to do it.
20:09 < bradleymeck> mxweas: http://t.co/hEdlzz9V
20:09 < bradleymeck> 28:34 or so
20:10 < num1> let's say I'm working with really crazy code, and getting the urls isn't a matter of parsing out anything that looks like http://[...]. Also many of those urls won't get called during load, and I'd like to know about the ones that do. Scripts and iframes
20:10 < mxweas> num1: 'Since the web has some absolutely horrible javascript on it, as of jsdom 0.2.0 jsdom.env will not process external resources (scripts, images, etc).'
20:11 < num1> I'm already using jsdom.jsdom, that's not a problem
20:11 < mxweas> ah!
20:11 < mxweas> sec
20:11 < num1> also it definitely will process them, just not by default
20:12 < num1> brb, sorry
20:13 < mxweas> num1: g2g, yvonne is here lol
20:13 < mxweas> not sure, grep for any emits in their source
20:13 < bradleymeck> mxweas: did that video explain why?
20:13 < mxweas> bradleymeck: thanks!
20:13 < mxweas> sort of
20:13 < mxweas> gotta watch more later
20:17 < Raynos> ./configure no longer tells me what I need to install for node.js to run
20:17 < tuhoojabotti> anyone know a lib for unescaping html like &amp;
20:18 < tuhoojabotti> or a snipper
20:18 < tuhoojabotti> snippet*
20:18 < EhevuTov> tuhoojabotti, doesn't javascript have a built-in decoder for that?
20:18 < tuhoojabotti> EhevuTov: Which one?
20:18 < EhevuTov> like, string.decode() or something?
20:18 < tuhoojabotti> hmm
20:19 < tuhoojabotti> no such function?
20:20 < tuhoojabotti> EhevuTov: There's unescape, but that's for urls or something
20:23 < EhevuTov> tuhoojabotti, so something like decodeURI() won't work?
20:23 < tuhoojabotti> I'm not talking about URIs
20:23 < EhevuTov> I don't think it has to really be a URI
20:23 < tuhoojabotti> Anyway, it doesn't work.
20:24 < insin> what do you reckon's the most reliable way to track a particular hashtag with ntwitter? Streaming API statuses/filter or polling the REST API's search?
20:24 < tuhoojabotti> stream 8)
20:35 < Layke> I had node previously compiled from sources. I now just installed from repo.
20:35 < Layke> It's at /usr/bin/node 
20:35 < Layke> How can I replace this version, so that it is used when using "node something" instead?
20:36 < num1> you want to remove the one you compiled from source?
20:37 < Layke> Yeah would I just remove it from my bashrc?
20:37 < num1> you could just delete it (make uninstall also works I'm pretty sure)
20:37 < num1> it's in your bashrc?
20:37 < num1> you made an alias?
20:37 < Layke> I can't rememeber. It was like a year ago. I assume that was probably what I did.
20:37 < Layke> I'll have to check
20:37 < num1> if that's what you did then yeah that's the easiest answer
20:38 < num1> try running `whereis node`
20:38 < num1> actually nevermind, I don't know how that interacts with aliases
20:38 < Layke> node: /usr/bin/node /etc/node /usr/local/bin/node /usr/local/lib/node 
20:38 < Layke> :) I can figure it out from here I think
20:38 < Layke> Cheers.
20:38 < num1> haha glhf
20:38 < mc> if you installed from a repo initially, then installed a compiled version, just remove the one you installed from the repo
20:39 < Layke> Nah other way around
20:39 < Layke> I compiled. Have 0.5.0beta or something
20:39 < mc> which are you wanting to continue using? the one from the repo?
20:39 < Layke> Barely works with any modules.
20:39 < Layke> So I installed from repo now.
20:39 < mc> do you still have the source tree from the one you compiled?
20:40 < Layke> Nah looks like I deleted it
20:42 < Layke> So... it looks like $PATH contains /usr/bin
20:42 < Layke> Which obviously contains node. So I think I can just add the repo path before that.. and it should work.. unless I'm not misktane
20:43 < num1> if you don't want to use the old node
20:43 < num1> might as well just delete it
20:43 < Layke> I'm not sure how?
20:43 < num1> rm?
20:43 < Layke> rm -rf node from /usr/bin ?
20:43 < num1> /usr/bin/node should just be a file
20:43 < yawnt> prettyrobots: oh you're online.. you're welcome
20:43 < num1> you'll leave some bits hanging around in /usr/lib
20:43 < yawnt> if you need anything tweet me @yawnt
20:43 < yawnt> prettyrobots: ^
20:44 < num1> and wherever else it installed itself, but I don't know a way of getting rid of those without having the source tree you used to install it
20:44 < num1> mucking around with the path to get around one old binary seems a little heavyhanded
20:45 < Layke> Found the old source tree. Looked like I extracted it somewhere I normally wouldn't
20:45 < Layke> sudo make uninstall removed it fine.
20:45 < num1> sweet
20:53 < prettyrobots> yawnt: Contributor link: Where's you on GitHub?
20:53 <@konobi> does milani hang out on here?
20:53 < yawnt> /yawnt prettyrobots 
20:53 < yawnt> thanks :)
20:53 < prettyrobots> https://github.com/yawnt
20:53 < prettyrobots> Okay.
20:55 < prettyrobots> yawnt: Hmm… You got a name?
20:55 < prettyrobots> yawnt: Or a pseudonym?
20:55 < yawnt> prettyrobots: leave just yawnt
20:55 < yawnt> people usually know me by my handle
20:55 < yawnt> even irl
20:58 < Raynos> Just installed node on a new box
20:58 < Raynos> node: error while loading shared libraries: libm.so.2: cannot open shared object file: No such file or directory
20:58 < Raynos> It hates me :(
20:58 < prettyrobots> yawnt: https://github.com/bigeasy/arguable#contributors
20:59 < yawnt> thank you :)
21:08 < jfroma> hi
21:08 < jfroma> any idea why i get this when installing ws on windows: http://bit.ly/MiWjll (node v0.6.19)
21:16 < TooTallNate> so what does getting an EPERM error on fs.symlink() on windows imply?
21:16 < EhevuTov> you can do symlinks in windwos?
21:16 < jesusabdullah> I thought windows couldn't do a symlinks
21:17 < jesusabdullah> Or, at least, that their answer to symlinks is bizarre and not quite semantically the same
21:17 < TooTallNate> from what I understand, it should work now
21:17 < jesusabdullah> You know how it is
21:17 < EhevuTov> I'd think it would throw a different error though
21:17 < jesusabdullah> Yeah
21:17 < TooTallNate> isaacs: ^?
21:17 < jesusabdullah> EPERM could be something like, "you can't write to THAT folder"
21:17 < EhevuTov> you're getting a permissions error
21:18 < TooTallNate> sure, but the dir is writable
21:18  * jesusabdullah states the obvious
21:18 < jesusabdullah> is it...executable?
21:18 < TooTallNate> windows doesn't have that concept
21:18 < jesusabdullah> orite, winders
21:18 < jesusabdullah> fuckin' windows 98!
21:18 < jesusabdullah> GET BILL GATES IN HERE
21:19 < jesusabdullah> willwhite: I thought you said windows 98 would be faster and with better access to the internet!
21:19 < yawnt> windiws 98
21:19 < yawnt> best os evah
21:19 < yawnt> it even had plug n play
21:19 < EhevuTov> 98 SE wasn't bad
21:19 < jesusabdullah> No, it didn't make you want to punch babies
21:20 < smartPudding> millenium was the best ! :)
21:20 < jesusabdullah> incorrect
21:20 < jesusabdullah> as far as nostalgia goes, I got some for windows xp
21:20 < jesusabdullah> it was like a slightly more polished windows 2000
21:20 < yawnt> wat
21:20 < yawnt> milleniun was terrible
21:20 < jesusabdullah> also, dos 6
21:20 < yawnt> like the worst os i have ever had the to use
21:20 < smartPudding> yawnt: kidding :)
21:21 < yawnt> oh
21:21 < yawnt> :(
21:21 < yawnt> i must be really tired
21:21 < yawnt> not catching sarcasm and jokes
21:21 < TooTallNate> lol, tab away for a second and that quickly eroded :p
21:22 < EhevuTov> TooTallNate, is your problem reproducible?
21:22 < TooTallNate> so from the change log, it looks like maybe junctions are directory-only...
21:22 < EhevuTov> like, if you create a new file in a different folder, etc
21:22 < pawn> What's a good socket.io crash course
21:22 < pawn> ?
21:22 < EhevuTov> pawn, the socket.io site is nice for that
21:23 < EhevuTov> pawn, there's also a socket.io channel too
21:24 < pawn> COol.
21:24 < pawn> Any others besides the official site and channel?
21:25 < EhevuTov> TooTallNate, I wonder if this is still an issue: https://github.com/joyent/node/issues/2681
21:28 < Layke> Anyone use phantomjs? I'm trying to start..
21:28 < Layke> http://code.google.com/p/phantomjs/wiki/QuickStart#DOM_Manipulation 
21:28 < Layke> Example provides this: var page = require('webpage').create(); 
21:28 < Layke> Error: Cannot find module 'webpage' 
21:30 < cbb> hello everyone
21:30 < alejandromg> Layke: running that with "phantomjs" not "node"?
21:31 < Layke> O no. I was running it from node.
21:31 < Layke> I didn't realise that 
21:44  * prettyrobots gerg
21:45 < smartPudding> Hi, any not too large project looking for contributors ?
21:52 < tuhoojabotti> How does one debug child processes?
21:53 < bnoordhuis> tuhoojabotti: node or general child processes?
21:53 < tuhoojabotti> node
21:53 < tuhoojabotti> with node-inspector for instance
21:54 < bnoordhuis> oh, that i don't know
21:54 < bnoordhuis> you can attach the built-in debugger to existing processes though
21:55 < tuhoojabotti> How?
21:58 < prettyrobots> tuhoojabotti: I recall seeing instructions on attaching to an existing process in the node-inspector README.
21:58 < tuhoojabotti> Okay, I'll check it out later.
21:58 < prettyrobots> PID, etc.
22:06 < EhevuTov> ku, did you write this: http://blog.bearstech.com/2012/07/nodejs-is-a-toy.html
22:07 < ku> EhevuTov, no, why?
22:08 < EhevuTov> you were asking similar questions that the article mentions :-)
22:10 < Layke> I'm about to do some phantomjs scraping. Can I use nodejs modules from within it? I want to output some domElements innerHTML to a file in csv?
22:11 < ku> EhevuTov, haha :P
22:19 < myndzi> iirc phantomjs is just node bindings to a python script
22:19 < myndzi> there's also casperjs which makes things a little easier on you
22:20 < myndzi> i've got to be able to access the basic data though
22:20 < myndzi> you've*
22:28 <@isaacs> TooTallNate: an EPERM from fs.symlink probably means that you're not specifying the type of symlink.
22:28 <@isaacs> TooTallNate: the third arg needs to be one of 'file', 'dir', or 'junction'
22:28 <@isaacs> TooTallNate: note that you need special permissions to create file and dir symlinks, and that junctions have to be absolute.
22:29 < TooTallNate> isaacs: ya, i'm trying to go the junction route (what's the difference?)
22:30 <@isaacs> TooTallNate: Windows Moon Magic.
22:30 <@isaacs> TooTallNate: Junctions have it.
22:31 < EhevuTov> I wonder if it's similar to soft and hard links
22:31 < jesusabdullah> lulz
22:31 < jesusabdullah> "windows moon magic"
22:31 < jesusabdullah> I think of windows as a "bizarro world"
22:31 < TooTallNate> isaacs: so now the junction is getting created, but apparently pointing to something that doesn't exist
22:31 < jesusabdullah> where things are strangely and arbitrarily different from the "normal world" or "universe A" (posix style)
22:31 < TooTallNate> isaacs: fs.readlink() reports the path that I passed in, but with a trailing \
22:32 <@isaacs> TooTallNate: you can only create junctions to folders.
22:32 < pawn> Anyone here heard of nowjs?
22:32 <@isaacs> piscisaureus_: I SUMMON THEE!
22:32 < TooTallNate> daaammmnnnnnnn
22:32 < jesusabdullah> pawn: ohohohoho
22:32 < pawn> I just stumbled upon a video on YT about nowjs.
22:32 < pawn> jesusabdullah: ?
22:32 < EhevuTov> pawn, heard of it. forget what it is
22:32 <@piscisaureus_> wut
22:32 < pawn> EhevuTov: ?
22:32 < TooTallNate> well that basically screws me :)
22:32 < jesusabdullah> pawn: Look at dnode instead.
22:32 < pawn> jesusabdullah: Has it expired?
22:33 <@isaacs> piscisaureus_: TooTallNate had some questions about junctions and symbolic links on Microsoft Moon Magic OS
22:33 <@isaacs> (aka windows)
22:33 <@piscisaureus_> oh that
22:33 <@piscisaureus_> make junctions
22:33 < TooTallNate> well, isaacs pretty much summed it up there
22:33 <@isaacs> piscisaureus_: but it looks like we figured out the issue :)
22:33 < pawn> jesusabdullah: has nowjs expired as a technology, and dnode takes it's place?
22:33 < jesusabdullah> pawn: out-of-date, not a good idea in the first place, much better, maintained competitors out there
22:33 <@isaacs> you can't junction to files, or relatively
22:33 <@piscisaureus_> (only local, only absolute paths, only dirs)
22:33 <@piscisaureus_> yes
22:33 < jesusabdullah> pawn: Naw, dnode was before, but dnode was better. It "won", so to speak.
22:33 < TooTallNate> i guess we're copying on windows then...
22:33 < jesusabdullah> There isn
22:33 < jesusabdullah> blegh
22:34 <@piscisaureus_> TooTallNate: hardlink? L-p
22:34 < jesusabdullah> there isn't an alternative type of symlink you can make?
22:34 < pawn> jesusabdullah: I see. Thank you for that, cause I'm really excited in the syncing approach to RT.
22:34 <@isaacs> piscisaureus_: while we're on the subject: ownership and modes of Junctions and Symlinks - does Windows have these?
22:34 <@piscisaureus_> yes
22:34 <@isaacs> piscisaureus_: or are they just identical to the target?
22:34 <@piscisaureus_> well
22:34 < jesusabdullah> pawn: You want to think of it more like events, not as much as an automatically updating state
22:34 < TooTallNate> piscisaureus_: but that requires admin rights, no?
22:34 <@isaacs> piscisaureus_: ie, OS X style, or other-unix-style?
22:34 < jesusabdullah> pawn: also look at hook.io. It has a nice model for this sort of thing
22:34 < pawn> jesusabdullah: The term is RPC?
22:34 <@piscisaureus_> isaacs: well, windows doesn't have ownership modes in a unix-compatible way
22:35 <@piscisaureus_> isaacs: but yes, it tracks permissions for symlinks
22:35 < crabdude> aheckmann: In mongoose, using update to increment a value (since $increment is deprecated) doesn't update the instance's value so you have to query for it again to get an updated instance. Is there a better way to do that?
22:35 <@isaacs> piscisaureus_: right.  what does fs.chown() do on windows?
22:35 <@piscisaureus_> isaacs: insult you back
22:35 <@isaacs> sweet.
22:35 < jesusabdullah> pawn: You mentioned automagic state synchronization, I'm saying notifications of change are better. dnode implements an async RPC protocol, and hook.io gives you namespaced event propogation on top of dnode.
22:36 <@isaacs> piscisaureus_: and i'm guessing that when you do fs.chmod() on a symlink in Moon Magic OS, it is like lchmod() and not like fs.chmod() on unix?
22:36 < pawn> Now. I saw nowjs as a alternative to socket.io. Is or could dnode be considered a alternative to socket.io?
22:36 < EhevuTov> I honestly don't like some of the func names in fs, but I don't know what else to do
22:36 <@piscisaureus_> isaacs: oh, it's a no-op actually
22:36 <@isaacs> piscisaureus_: awesome.
22:36 <@isaacs> piscisaureus_: what about chmod?
22:36 <@piscisaureus_> isaacs: that's almost a no-op
22:36 <@isaacs> does it change the target mode or the symlink mode?
22:36 < pawn> jesusabdullah: that's too much terminology that I'm not familiar with.
22:36 < myndzi> hey guys, i have some memory leakage going on and i'm at a bit of a loss as to how to run it down. got any links / resources?
22:36 < jesusabdullah> pawn: No. nowjs depends on socket.io. dnode used to depend on socket.io but is now a stream interface only.
22:36 <@piscisaureus_> isaacs: it sets the readonly bit when you take away write permissions from everyone
22:36 <@isaacs> piscisaureus_: right, but for the symlink or for the target?
22:37 < myndzi> automagic state synchronization? which module is this?
22:37 < pawn> jesusabdullah: Ah, I see. I didn't know that nowjs was USING socket.io.
22:37 <@piscisaureus_> isaacs: chmod does it for the target I think
22:37 <@piscisaureus_> hmm
22:37 <@piscisaureus_> yeah
22:37 <@isaacs> piscisaureus_: fs.chmod(someSymlinkPath, 0600, cb)
22:37 <@piscisaureus_> yea
22:37 <@piscisaureus_> sets the target
22:37 <@isaacs> k
22:37 < jesusabdullah> myndzi: Not as good as it sounds, actually kind of not that good of a module
22:37 <@isaacs> so, we should make lchmod work the same on windows as on os x, and make lchmod and lchown no-op everywhere else.
22:37 <@piscisaureus_> isaacs: symlinks have their own owner, attributes and ACSs
22:37 <@piscisaureus_> *ACLs
22:38 <@piscisaureus_> yeah\
22:38 <@isaacs> piscisaureus_: kewl.
22:38 <@isaacs> same as os x
22:38 < jesusabdullah> w8
22:38 <@isaacs> but linux/bsd/sunos are different
22:38 <@isaacs> piscisaureus_: Fruity OS is the only unix that does that
22:38 <@piscisaureus_> they have no modeflags for links, I know
22:38 < pawn> jesusabdullah: notifications of change is better, what is this exactly?
22:38 <@piscisaureus_> Fruity OS?
22:39 <@piscisaureus_> You mean OS X Cave Flee?
22:39 <@isaacs> piscisaureus_: so, how hard would it be ot add lchmod for windows?
22:39 < jesusabdullah> pawn: state.on('change', function (data) { /* React to the change in state */ });
22:39 <@piscisaureus_> isaacs: shrug, easy I suppose
22:39 <@isaacs> piscisaureus_: Fruit OS X Big CAt
22:39 < jesusabdullah> pawn: Or, stream.on('data', function (data) { /* React to a chunk of data coming in on a stream */ });
22:39 < bnoordhuis> piscisaureus_: os x def leppard!
22:39 < pawn> jesusabdullah: how is this different form socket.io's socket.on method?
22:39 < jesusabdullah> pawn: It's not, fundamentally.
22:39 <@isaacs> piscisaureus_: k.  needs libuv change?  or can we do this from node?
22:40 <@piscisaureus_> isaacs: needs libuv change
22:40 < jesusabdullah> pawn: But think about it on a multi-agent scale, not just between two units
22:40 <@isaacs> piscisaureus_: kewl.  i'll post issue.  thansk.
22:40 <@piscisaureus_> isaacs: I wonder how lchmod is implemented actually. i don't think it is
22:40 < jesusabdullah> so, like, in hook.io, suppose there are hooks (servers) a, b and c
22:40 <@isaacs> piscisaureus_: think we should move lchmod into libuv in general?  right now, we do fs.open(x, O_SYMLINK) and then fchmod
22:40 < pawn> jesusabdullah: hmm, not sure what you mean by multi-agent vs two units?
22:40 <@isaacs> piscisaureus_: on Fruity Cat
22:41 <@piscisaureus_> ah
22:41 < EhevuTov> I don't think so either. i checked the other day. One of them isn't
22:41 <@piscisaureus_> I think O_SYMLINK is not defined on windows, but it would be possible to add that
22:41 <@isaacs> piscisaureus_: but Linux and Smart don't have O_SYMLINK
22:41 < jesusabdullah> pawn: So, like, hook.io does this whole thing so that if server a emits some event, say, "some::event", all the other hooks will see "a::some::event"
22:41 <@piscisaureus_> atleast if you open it with O_RD
22:41 < jesusabdullah> pawn: whereas with regular sockets, or socket.io, it's strictly client-server
22:41 <@piscisaureus_> isaacs: windows doesn't either, but windows supports it conceptually
22:41 <@piscisaureus_> isaacs: FILE_FLAG_OPEN_REPARSE_POINT :-0
22:41 < jesusabdullah> pawn: note, in the hook.io example which hooks are client and which hooks are server don't even really matter
22:42 <@isaacs> piscisaureus_: sure,  Moon Magic OS renames everything to be longer and sometimes better.
22:42 < jesusabdullah> pawn: and *that*, is better than, say, automatically doing hook.on("a::variable::changed", changeVariable); and then not exposing the original event
22:43 < pawn> I see.
22:43 < jesusabdullah> pawn: Because, often, you're interested in the change, not the current state, so you'd end up polling your app's synchronized state and, like
22:43 < jesusabdullah> that's backwards
22:44 < jesusabdullah> pawn: Meanwhile, with dnode you can do something like, remote.something(args, function (err, res) { /* Oh hey, remote procedure call */ });
22:44 < pawn> So, the difference is that you're emitting events that update everyone who's listening (multi-agent/client), vs emitting an event on one agent.
22:44 < jesusabdullah> pawn: Right
22:44 < pawn> I see
22:44 < jesusabdullah> I need to do some dnode mad science, it's been a while
22:45 < jesusabdullah> and the new api is delish
22:45 < pawn> jesusabdullah: so dnode has the RPC (like nowjs), but also this multi-agent event emitting thing.
22:45 < EhevuTov> I wonder how other cross-platform frameworks solve this issue of having some platforms with certain features that the other platforms can't handle. Cause you end up with writing conditionals for specific platforms and that breaks the elegance of the portable code(similar to ifdef hell)
22:45 < jesusabdullah> no. dnode only implements the rpc, but better than nowjs does. hook.io implements the multi-event event emitting thing.
22:46 < jesusabdullah> hook.io also uses dnode under the hood to expose callbacks so you don't have to implement a call/response protocol
22:46 < jesusabdullah> So you can do something like
22:46 < jesusabdullah> hook.on('**::ping', function (data, cb) { cb(null, "pong
22:46 < jesusabdullah> "); });
22:47 < ccowan> Question for everyone using a VM based provider. Currently we have 2 web servers, 2 DB servers, a Redis Server and Search Server. Do you you split all your different types of services? I'm wondering why I'm doing this instead of just buying 2 bigger servers and puttnig everything on one  machine (the second being a backup machine)
22:47 < jesusabdullah> and then hook.emit('ping', function (err, res) { console.log(result); });
22:47 < jesusabdullah> ccowan: scaling, brah
22:48 < ccowan> our business is pretty small and is growing slowly
22:48 < jamescarr_> ccowan, what biz?
22:48 < ccowan> http://www.plus3network.com
22:49 < ccowan> The biggest bottle neck is the DB
22:49 < pawn> jesusabdullah: how is dnode's RPC better than now's; or have you already explained that to me?
22:51 < pawn> jesusabdullah: also, let me get this straight...hook.io uses dnode under the hood, but adds this mult-agent event emitting layer; dnode itself doesn't do this?
22:52 < deltab> ccowan: having a dedicated server means cached data can be kept in RAM without being evicted for another service
22:53 < Phoenixz> ../deps/uv/src/unix/stream.c:732: uv__stream_io: Assertion `!!(events & EV_READ) ^ !!(events & EV_WRITE)' failed.  Does this message ring any bells? Its killing my node.js server every 5 mins! :(
22:53 < Phoenixz> Node.js v0.8
22:53 < ccowan> Is that true when you get enough ram
22:53 < Phoenixz> v0.8.0
22:53 < deltab> ccowan: how large is your database vs. the ram?
22:53 < EhevuTov> Phoenixz, why not upgrade to 0.8.2? Just curious about why it breaks?
22:54 < ccowan> lets say our Redis fits within 2GB our database Fits in 1G and we run it on a 8G slice
22:54 < ccowan> then hyou shouldn't have data being evicted
22:54  * deltab nods
22:54 < jesusabdullah> pawn: Correct. Also, in the case of dnode's RPC, it was just extremely well-thought out and has a fuckton of testing both on paper and in the real-world, with two years of solid development.
22:54 < bnoordhuis> Phoenixz: upgrade to v0.8.2
22:54 < Phoenixz> EhevuTov: I installed 0.8 just a little while ago :) Did not know 0.8.2 was already out there.. Will upgrade, BUT.... will it fix my problem? :)
22:54 < bnoordhuis> Phoenixz: i think i fixed that one, yes
22:54 < jesusabdullah> It's just not a contest. The nowjs guys ditched nowjs some time ago to focus on Bridge. It's a dead project now.
22:55 < Phoenixz> bnoordhuis: This specific issue has been resolved there? in that case: 3x Hurray for node!
22:55 < bnoordhuis> Phoenixz: and if not, please open a bug report :)
22:55 < deltab> ccowan: can you load test different setups to find out?
22:55 < pawn> jesusabdullah: Open source NowJs version is said to support 10,000 connections. Dnode can do better than this?
22:56 < pawn> jesusabdullah: And you're not just saying this because you're an official advocate of dnode or similar?
22:56 < Phoenixz> bnoordhuis: Will do, its rather.. hard.. just kills off the process, no questions asked..
22:56 < prettyrobots> jesusabdullah: Makes dime for every one of those connections, yes.
22:56 < ccowan> deltab: I think I can run the whole thing on a 4GB server (that's what our beta server runs)
22:57 < bnoordhuis> Phoenixz: if it still happens, compile a debug build (make BUILDTYPE=Debug), run it from gdb (gdb --args out/Debug/node app.js) and when it crashes, inspect the output of `bt full`
22:57 < bnoordhuis> Phoenixz: but like i said, i'm fairly sure it got fixed :)
22:59 < jesusabdullah> pawn: Probably.
22:59 < jesusabdullah> pawn: But what's the last time you had 10,000 connections?
22:59 < deltab> ccowan: what happens if you have a sudden spike in demand?
22:59 < jesusabdullah> pawn: It certainly has some pretty new, empirically tested memory footprint fixes
23:00 < ccowan> That's the trick right? Balancing having too much capacity vs. maintaining too much capacity
23:02 < ccowan> I think the best choice for us would be to move to a service like Heroku
23:02 < ccowan> but we have some legacy stuff we neeed to finish rewriting
23:03 < pawn> jesusabdullah: If the nowjs guys ditched nowjs for bridge, then how does bridge man-up to dnode?
23:05 < Phoenixz> bnoordhuis: I got the node.js github git, git co v0.8.2, ./configure, then make, then I got this error: "terminate called without an active exception"
23:05 < Phoenixz> rings a bell?
23:05 < pawn> jesusabdullah: Oh, and are you affiliated with dnode? :D
23:05 < bnoordhuis> Phoenixz: let me guess, x86_64 centos or rhel with gcc 4.4.6?
23:06 < jesusabdullah> pawn: No, I'm just well-versed.
23:06 < ccowan> The thing is I want to get out of the business of maintaining systems and servers
23:06 < jesusabdullah> pawn: Research bridge yourself. No comment.
23:08 < Phoenixz> bnoordhuis: wauw... yes :)
23:08 < Phoenixz> bnoordhuis: either you are very good or this is some sort of coincidence? :D
23:08 < pawn> jesusabdullah: I'm looking into it right now actually. :P But, what would be the major downside to bridge, in your opinion, if I could ask you?
23:08 < Phoenixz> Centos 6 something x86_64
23:09 < bnoordhuis> Phoenixz: i have psychic powers. also, it's a compiler bug that's been popping up lately :)
23:09 < bnoordhuis> Phoenixz: what happens when you compile with `make CFLAGS+=-fno-strict-aliasing CXXFLAGS+=-fno-strict-aliasing`?
23:10 < livinded> is there a problem building node on cent 6.2? I'm actually about to build a vm to deploy a node project and was planning on using it
23:10 < bnoordhuis> livinded: you may run into a compiler bug but you can work around it
23:10 < Phoenixz> bnoordhuis: Compiling.. this may take a minute...
23:11 < bnoordhuis> Phoenixz: btw, you can add -j <cores>
23:11 < livinded> bnoordhuis: cool thanks
23:11 < Phoenixz> bnoordhuis: cool, knew the -j trick but forgot all about that.. I don't compile very often..
23:11 < livinded> really don't need any more roadblocks right now
23:11 < jarr0dsz> hi everyone, is this channel a bit active?
23:11 < livinded> 80+ hour weeks are no bueno
23:11 < jarr0dsz> im looking at node.js and other realtime technlogoys but im totally confused hope some of you experts can share some light
23:12 < jarr0dsz> looked at faye.. it can send data to clients from server to client channels.. nice.. but the problem is i need data to be recieved as soon as it "available" so the client should poll for it every x seconds?
23:12 < jarr0dsz> long polling, ajax push? im not sure on all the terms im digging docs on comet but i can;t find the answer
23:13 < zutto> jarr0dsz: http://socket.io/
23:13 < jarr0dsz> zutto: yes also looked at socket.io try to understand the technology i exactly need
23:13 < jarr0dsz> faye doesent seem to listen client-side to the server it just "recieved" data send to it..
23:13 < jarr0dsz> so if a browser reloads, the data is lost
23:14 < jarr0dsz> reloaded at the time the data was send that is
23:14 < jarr0dsz> what technology do in need to prevent this? just socket.io?
23:14 < livinded> jarr0dsz: if you're using websockets you want a single page app
23:14 < livinded> page reloads == bad with web sockets
23:14 < Phoenixz> bnoordhuis: http://pastebin.com/kQXDV5bP  fails again
23:14 < jarr0dsz> problem is i have some social media app user profiles people browse...
23:14 < jarr0dsz> they can signup for a channel that starts at time X
23:15 < jarr0dsz> so i want to change there url to position Y at time X
23:15 < bnoordhuis> Phoenixz: can you try `make CFLAGS+=-fno-tree-vrp CXXFLAGS+=-fno-tree-vrp`?
23:15 < livinded> jarr0dsz: that's what pushState is for
23:15 < jarr0dsz> currently  im having : resque + faye ( resque is a background worker that at time X sends a datastream over websocket to a certain client subscribed channel )
23:16 < jarr0dsz> so thats what i have implmeented now but if a user reloads at the moment the data is sends its broken, so what in hell do i need to have a solid implementation? im so confused
23:16 < jarr0dsz> pushstate?
23:16 < Phoenixz> bnoordhuis: one sec
23:16 < prettyrobots> NPM Question: Easy way to run a different test script on Windows than on Other?
23:16 < jarr0dsz> if data is recieved by the client say john doe it then reloads the page with ajax, you see a very flaggy bad implementation
23:17 < livinded> jarr0dsz: why are you reloading a page with ajax?
23:17 < zutto> wondering the same.. :|
23:17 < livinded> that's like...backwards
23:17 < zutto> last time i built something with websockets, clients never had to reload the page ;|
23:17 < livinded> history.pushState bro, prepare for your mind to be blown
23:18 < livinded> zutto: my boss forced me to tear down websockets on our app after a minute of non-use
23:18 < ccowan> deltab: My answer to the spike is to scale up the server. If we are on a 4 GB or 8GB and we have 10x head room. We really would only need to scale up for anything over 10x.
23:18 < jarr0dsz> yes i thought you realtime guys perhaps knew a solution
23:18 < zutto> eww :|
23:18 < livinded> no matter how much I tried to convince him he wouldn't listen
23:18 < jarr0dsz> livinded: thats a bad solution for now
23:18 < Phoenixz> bnoordhuis: so far so good.....
23:19 < livinded> jarr0dsz: why is that a bad solution?
23:19 < jarr0dsz> livinded: i need the user to go to a certain location on time X like
23:19 < livinded> jarr0dsz: ya, you can do that
23:19 < jarr0dsz> livinded: the ajax reload of the page i just change browser url when i recieve data from server on the client channel
23:19 < jarr0dsz> it works buts its not solid
23:19 < livinded> jarr0dsz: you don't need a page reload
23:19 < jarr0dsz> livinded: i know i could replace the contents of a #div right
23:20 < jarr0dsz> but thats not the real problem, the real problem is the user reloads
23:20 < livinded> the user SHOULDN'T reload
23:20 < jarr0dsz> livinded: thats not possible im my app they browse all the time
23:20 < livinded> and with pushstate it doesn't matter because the url is updated so you keep any state
23:20 < jarr0dsz> just see it like some sort of facebook
23:21 < jarr0dsz> where you can join a certain group at a certain time
23:21 < jarr0dsz> if the time is there you get "thrown inside the group"
23:21 < jesusabdullah> pawn: Closed source?
23:21 < jarr0dsz> thats basically the behaviour im looking for
23:21 < livinded> jarr0dsz: I think you're fundamentally midunderstanding how to properly build what you want to
23:21 < jarr0dsz> livinded: if you have another idea them in open to hear it but having a single page non reload app is not an option, what are the alternatives?
23:22 < jarr0dsz> or do i look at the page reload thing alll wrong?
23:22 < deltab> jarr0dsz: so the problem is that you send the page without the content, instead loading that through ajax only?
23:22 < livinded> you're looking at the page reload all wrong
23:22 < livinded> send your data back via ajax/websockets and update accordingly
23:22 < pawn> jesusabdullah: Ah, that's right. :P
23:22 < livinded> use pushState to change the url in the address bar
23:23 < livinded> if they end up reloading the url is still correct and you can send them the page they are supposed to see
23:23 < bnoordhuis> Phoenixz: compiles and runs?
23:23 < jarr0dsz> livinded: i can think this idea but don't see it as implementation in current solution really..
23:23 < Phoenixz> bnoordhuis: http://pastebin.com/SPzxaz9h nope :(
23:23 < livinded> jarr0dsz: that's the proper way to do what you want
23:23 < pawn> When it comes to RPC, or should I say RMI, how is scope sent with the remote function call?
23:24 < jarr0dsz> wait i just pastie it to be more detail its hard to explain exactly
23:24 < jarr0dsz> livinded: okay may i pastie my current setup and could you please tell me on what parts your idea is applicable?
23:24 < livinded> jarr0dsz: sure
23:24 < bnoordhuis> Phoenixz: let's try the principle of exclusion: what happens when you compile with -O2?
23:24 < bnoordhuis> Phoenixz: btw, is this v0.8 or v0.8.2?
23:25 < bnoordhuis> i.e. HEAD of the v0.8 branch or the v0.8.2 tag
23:25 < bnoordhuis> i think you mentioned v0.8.2, right? please try HEAD
23:25 < bnoordhuis> (i landed some changes to the build system yesterday)
23:26 < cliffano> what's a good way to find out / visualize object references in a node program? e.g. i have a large object which uses up lots of memory, even after i 'delete theobj;
23:26 < Phoenixz> bnoordhuis: This is 0.8.2
23:27 < Phoenixz> V0.8.2
23:27 < cliffano> it's still there, and no memory is freed (i used --trace-gc to monitor) ..
23:27 < Phoenixz> bnoordhuis: I did git clone node, cd node, git co v0.8.2
23:27 < bnoordhuis> Phoenixz: okay, please try v0.8 - there's a decent chance it'll work out of the box
23:27 < Phoenixz> bnoordhuis: will do one sec..
23:28 < jarr0dsz> livinded: just 3 small steps in short how i have it now
23:28 < jarr0dsz> http://pastie.org/4240663
23:28 < jarr0dsz> i meantime they can reload browse, etc thats current setup
23:28 < jarr0dsz> im not exactly sure where you comments should fit in this setup
23:28 < EhevuTov> I'm appreciating this debug session in public. Learning.
23:28 < FireFly> cliffano, `delete` only removes a property.
23:28 < FireFly> cliffano, you probably have a reference to the object somewhere else
23:29 < livinded> jarr0dsz: ya, do what I said and use web sockets
23:29 < zutto> ^
23:29 < cliffano> FireFly: yup, that's what i suspect as well. hence i'm curious if there's a way to find out what those references are, and if there's a visualization tool for it :)
23:29 < pawn> Hmm. I'm guessing that functions themselves are never sent between the client and server in dnode; instead the callback on the client is called with the data that the server's callback invocation provided with it's arguments, correct?
23:29 < livinded> shit will kind of just work well
23:29 < jarr0dsz> livinded: i thought faye was using websockets, thats part of the confusion
23:30 < livinded> and socket.io makes it super easy
23:30 < zutto> jarr0dsz: and instead of using faye, you should use socket.io
23:30 < jarr0dsz> okay i see so i replace faye and use sockets.io to handle the communication
23:30 < livinded> jarr0dsz: key point is single page app
23:30 < livinded> stop doing what you're doing, it's bad
23:30 < jarr0dsz> ok so this will only work in a single page app?
23:31 < zutto> it doesnt have to be single page app
23:31 < Phoenixz> bnoordhuis: http://pastebin.com/YQtGiqsZ Again failure.. What should I try now?
23:31 < zutto> but with sockets, you have no reason to reload page
23:31 < livinded> jarr0dsz: no, but it's bad idea to use web sockets on a non-single page app
23:31 < livinded> puts more load on the server and is slower
23:31 < livinded> reloads wont break shit, but you don't need them and it will perform better without them
23:31 < bnoordhuis> Phoenixz: try CFLAGS+=-O2 CXXFLAGS+=-O2
23:32 < jarr0dsz> okay i understand that but its basically a webapp + this realtime thing on top of it
23:32 < livinded> just make sure you use pushState to update the url so reloads work
23:32 < jarr0dsz> i understand most of you build something with node and sockets as is, thats the app a single page a game app
23:32 < jarr0dsz> im just write it down and look into it sockets + pushstate
23:32 < jarr0dsz> and see what brings that its a bit confusing all this websocket stuff ;p
23:32 < livinded> web sockets are super easy
23:32 < jarr0dsz> what exactly does faye do then? it sends data to a certain channel on the client
23:32 < livinded> and socket.io makes it so a retarded 7 year old can build a real-time app
23:33 < jarr0dsz> what does sockets.io add to that?
23:33 < zutto> jarr0dsz: socket.io gives you alot more control and and flexibility
23:33 < jarr0dsz> so i dont need a comet server or ape for example? sockets.io is enough
23:34 < livinded> jarr0dsz: just stop asking questions, go prototype, and come back and yell at me if it doesn't work
23:34 < livinded> yes, socket.io will take care of everything for you
23:34 < jarr0dsz> yeah your right ;) thx alot i should have enough to get something going on
23:34 < jarr0dsz> i think i come back tomorrow and throw a big thankyou;p
23:34 < Phoenixz> bnoordhuis: one sec, trying
23:34 < jarr0dsz> hope so this is a bugger in my app so far hope this solves it thankx
23:37 < Phoenixz> bnoordhuis: make seems to work now :) thanks!
23:37 < bnoordhuis> Phoenixz: sweet :)
23:37 < bnoordhuis> guess i'll just make -O2 the default in v0.8.3
23:40 < EhevuTov_> bnoordhuis, are we going to see you next year at NodeConf?
23:40 < livinded> zutto: but ya, I built this awesome app and the guy maintaining the code base now is mutilating it
23:40 < livinded> first production real time app and it's turning into a mess :(
23:41 < Phoenixz> bnoordhuis: Thanks for the help in any case!
23:41 < Phoenixz> bnoordhuis: by the way.. you dutch?
23:41 < Phoenixz> because of the name..
23:42 < bnoordhuis> Phoenixz: yep, i'm from holland
23:42 < bnoordhuis> EhevuTov_: maybe. i confess i don't really like flying
23:42 < bnoordhuis> at least, not long flights
23:43 < jarr0dsz> livinded: im coding in rails and see there is juggernaut wich supports node.js + websockets i assume that would give me the same possibility's right?
23:43 < livinded> jarr0dsz: you don't need it! Just use socket.io
23:44 < EhevuTov_> bnoordhuis, true. That would be a long flight for you. I don't blame you
23:44 < jarr0dsz> its this baby its supports a lot of technlogy's as a wrapper https://github.com/maccman/juggernaut
23:44 < zutto> livinded: :< you should always check the updates people do on your code.. and approve them if they're not useless
23:44 < jarr0dsz> livinded: yes ofcourse but that does not integrate securely in my app ( i think ) ?
23:44 < jarr0dsz> only logged in users for example should be able to do stuff with sockets.io you could change the js and do anything
23:44 < livinded> jarr0dsz: all that's required to integrate socket.io is require a single js file
23:44 < pawn> The dnode's README on github explains how to use dnode on the browser using browserify. But, I don't use browserify in my application. How do I use dnode client-side (or should I say in the browser) without browserify or any other fancy module?
23:44 < livinded> so do auth on the socket server
23:45 < EhevuTov_> livinded, jarr0dsz might want to use engine.io instead. It upgrades connections, instead of downgrading only, and is a drop in replacement for socket.io
23:45 < livinded> make sure the person is using a valid sesion
23:45 < livinded> EhevuTov_: isn't socket.io moving to that? They were talking about that on the last nodeup
23:45 < EhevuTov_> livinded, is it an underlying layer then? I thought it was a complete dropin
23:45 < jarr0dsz> livinded: EhevuTov_ you mean https://github.com/LearnBoost/engine.io
23:46 < livinded> EhevuTov_: no idea yet. Just head about it on nodeup and haven't looked at the code yet
23:46 < EhevuTov_> jarr0dsz, yes, that's what I'm talking about
23:46 < livinded> been a little busy reverse engineering and writing exploits lately
23:46 < livinded> zutto: I'm leaving the company. The project got transfered to someone else. He just doesn't know node at all
23:46 < jarr0dsz> i assume i only need the single JS but having a full rails api would be great to have it implemented so say I would not include just the single sockets.io but use juggernaut would that work too?
23:47 < EhevuTov_> livinded, true. gotta keep those 0 day PoCs going :-)
23:47 < livinded> EhevuTov_: prepping for DEFCON, quit my job so I could focus full time on the contest I'm running
23:47 < jarr0dsz> it supports http://pastie.org/4240747
23:47 < EhevuTov_> livinded, holy cow. good luck. may I ask what you're running?
23:47 < livinded> BroCTF
23:47 < Phoenixz> bnoordhuis: Me too :) cool.. By the way.. another strange thing.. did then sudo make install, then it seemed to start to compile again and fail again... weird.. one sec, compiling again with that option..
23:47 < livinded> http://www.broctf.org
23:48 < jarr0dsz> websocket ( websocket.io? )
23:48 < bnoordhuis> Phoenixz: heh, someone just filed a bug report about that
23:48 < bnoordhuis> as in, in the last 10 minutes: https://github.com/joyent/node/issues/3691
23:48 < jarr0dsz> what is that broctf.org? emai conversation?
23:49 < EhevuTov_> bnoordhuis, I'll probably be watching that religiously. I'm very interested in debugging. I need to increase my debug foo
23:49 < livinded> jarr0dsz: just go prototype
23:49 < jarr0dsz> I assume the sockets.io just implements the WebSocket protocol right
23:49 < livinded> you can throw away whatever you build if you don't like it
23:49 < jarr0dsz> livinded: yes yes i do i do ;) i already started a new project to get some code going on
23:49 < EhevuTov_> aw, it's just a make bug
23:50 < bnoordhuis> EhevuTov_: yeah, nothing spectacular. :) but take a look in the bug tracker, there's enough low hanging fruit in there
23:50 < Phoenixz> bnoordhuis: about the make install?
23:50 < bnoordhuis> Phoenixz: yes
23:50 < livinded> jarr0dsz: broctf is a hacking contest I'm running at DEFCON
23:51 < EhevuTov_> bnoordhuis, yeah, I've been watching you and pisc in libuv as well. Trying to learn as much from you guys as possible. I'd like to eventually start helping with FreeBSD problems
23:51 < Phoenixz> bnoordhuis: sweeet... and then? :D I kind of NEED the 0.8.2 because 0.8.0 keeps crashing under my feet here.. :S
23:52 < Phoenixz> I would be a great debugger, I alwasy find this kind of stuff :P
23:52 < livinded> EhevuTov_: ya, once defcon is over I need to dive into libuv. I'm working on building proper sandboxing support into node and need to get into the binding layer to add some features
23:52 < EhevuTov_> bnoordhuis, actually, it would be nice if there was a 'low-hanging fruit' tab in the github Issues
23:52 < bnoordhuis> EhevuTov_: if you want a nice freebsd problem -> https://github.com/joyent/node/issues/3623
23:53 < bnoordhuis> Phoenixz: what happens when you revert fecebe1?
23:53 < EhevuTov_> bnoordhuis, oh nice, thank you
23:53 < bnoordhuis> Phoenixz: i.e. `git show fecebe1 | git apply -R`
23:54 < kuhrt> Has anyone tried Ace? https://github.com/maccman/ace
23:54 < kuhrt> it's an alternative to express
23:55 < Phoenixz> bnoordhuis: and then sudo make install?
23:56 < bnoordhuis> Phoenixz: yes
23:56 < bnoordhuis> Phoenixz: but do a regular make first
23:56 < bnoordhuis> Phoenixz: i.e. make CFLAGS+=-O2 etc.
23:56 < Phoenixz> bnoordhuis: regular make WITH the O2 flags :)
23:56 < Phoenixz> ok
23:59 < Phoenixz> bnoordhuis: aaaand starts compiling again.. :) I am NOT making you happy today..
--- Log closed Thu Jul 12 00:00:07 2012
