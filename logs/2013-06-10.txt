--- Log opened Mon Jun 10 00:00:41 2013
--- Day changed Mon Jun 10 2013
00:00 < ckknight> I need to add RazorJS to my template benchmark suite
00:01 < ckknight> sinclair|net: alright, I have a ticket for it now: https://github.com/ckknight/gorillascript/issues/89
00:01 < sinclair|net> ckknight: yeah, would be cool to run a benchmark on these templating things
00:01 < ckknight> please do: https://github.com/ckknight/template-bench
00:02 < ckknight> I tried to be comprehensive about it
00:02 < sinclair|net> ckknight: to be fair tho, templating engines don't necessarily need to be all that quick, you can compile once, cache output and that basically solves most performance issues
00:02 < ckknight> and actual cover complex things like partials, inheritance, etc.
00:02 < ckknight> sinclair|net: mine doesn't benchmark the prepare time, just the render time.
00:02 < ckknight> and yes, that solves most performance issues
00:03 < ckknight> but when you have one template rendering 70,000 / s vs 63 / s <cough>Parrot</cough>, there's a difference.
00:03 < sinclair|net> ckknight: what other templating frameworks support code blocks ?
00:03 < sinclair|net> *cough* php *cough*
00:03 < ckknight> sinclair|net: most of the ones that don't prevent logic (i.e. mustache-like) provide some support for code blocks.
00:03 < ljharb> EJS
00:04 < sinclair|net> ljharb: ejs sucks
00:04 < ljharb> altho, usually it's best to minimize logic in templates, even if you're allowed to have it
00:04 < ljharb> lol, ok
00:04 < ljharb> logic in templates sucks too :-p
00:04 < ckknight> EJS is about 200% slower than EGS
00:05 < sinclair|net> ljharb: now, why would i want to have logic for rendering templates outside the template ?
00:05 < ckknight> well, unless you have partials. EGS sucks at that right now, but I'm working on it.
00:05 < ckknight> sinclair|net: for things that are commonly used, writing helpers can be handy.
00:05 < ljharb> um, because templates are fed into rendering logic?
00:05 < ljharb> templates don't render, they supply the content to a renderer.
00:06 < sinclair|net> ljharb: ? that's just not true at all
00:06 < ckknight> actually it's a little true
00:06 < ljharb> HTML is a template. the browser renders it.
00:06 < ckknight> data is requested from a renderer, providing a template
00:06 < sinclair|net> ljharb: html is a markup 
00:07 < ckknight> the template is parsed, compiled, etc., but what you have at the end isn't a template per-se, but rather a way to render text given data.
00:07 < ljharb> we're using a bunch of ill-defined terms here.
00:07 < ckknight> usually in the form of a function
00:07 < ckknight> ljharb: too true
00:23 < SexyGirlG> my skype am a hot girl add em guys  : rose.mourad
00:24 < ckknight> oh good
00:24 < ckknight> was about to ping the ops
00:26 < Stereo> ckknight: maybe she just wanted some help to install npm
00:26 < VapidWorx> lol
00:27 < eliezerb> lol
00:27 < ckknight> it's important to note that she wasn't a hot girl, her skype am.
00:53 < someprimetime> can someone help me figure out range querying with mongoose? #mongodb is a little quiet
01:02 < VapidWorx> I might be making this too complicated can anyone give insight with Angular/Express.  I'm submitting data via a textarea in form onClick to a Post.  I just want the response sent to a different textarea in same page.
02:19  * mscdex shakes a fist at gyp
02:19 < mscdex> Y U NO PASS ACTION PARAMS RIGHT
02:21 < Hounddog> H NO LIKE YU
02:27 < sorbo_> is it possible to flash an error message inside a modal? the only examples I've seen are in partials, which re-render when you flash the error
02:27 < sorbo_> (using express.js--I asked in #express but no dice)
02:28 < ssafejava_> sorbo_: modal is just composed using standard HTML, so put the flash there
02:29 < sorbo_> ssafejava_: the flash bit works, I"m just not quite clear on how to handle the re-rendering, since it currently renders the contents of the modal in its own page, not as a modal open within another page
02:29 < sorbo_> s/I"m/I'm/
02:31 < ssafejava_> oh hmm. Not familiar with your setup but you'll have to probably ajax the new HTML in and replace the DOM element with client js
02:33 < sorbo_> ssafejava_: oh man, good call. I'll set up the ajax request and sub out. thanks!
03:01 < niggler> what's the advantage of using jade over something like EJS?
03:03 < Zolmeister> niggler: it looks pretier
03:03 < niggler> its about as pretty as a bark-stripped tree
03:03 < Zolmeister> prettier*
03:25 < sinclair|net> niggler: i wrote you a song bro
03:25 < sinclair|net> niggler: https://s3-ap-southeast-2.amazonaws.com/sinclair-media/music/sinclair_shreds_volume_2.mp3
03:26 < niggler> quicktime player is asking for permission
03:26 < sinclair|net> niggler: don't use quicktime?
03:26 < niggler> are you familiar with the great yngwie malmsteen?
03:26 < sinclair|net> who?
03:26 < niggler> or steve vai
03:26 < sinclair|net> the singer?
03:27 < niggler> oh man https://www.youtube.com/watch?v=Kmmb9uFwlTg @ sinclair|net 
03:28 < niggler> though https://www.youtube.com/watch?v=U_Jb8UUR0o8 appears to be a bit faster
03:28 < sinclair|net> niggler: meh
03:29 < sinclair|net> niggler: playing fast is just guitar masturbation 
03:29 < sinclair|net> https://s3-ap-southeast-2.amazonaws.com/sinclair-media/music/sinclair_plays_the_blues.mp3 
03:29 < niggler> https://www.youtube.com/watch?v=1vgh2dmnBPA is the studio version
03:30 < niggler> who's playing drums?
03:30 < sinclair|net> me
03:30 < niggler> and guitar?
03:30 < sinclair|net> me
03:30 < sinclair|net> https://s3-ap-southeast-2.amazonaws.com/sinclair-media/music/sinclair_is_not_a_hipster.mp3
03:31 < niggler> you need to get on the bass
03:31 < sinclair|net> i played that too
03:32 < sinclair|net> niggler: i know no nodejs developers in real life, i know less musicians 
03:32 < niggler> this is what you need to start doing: https://www.youtube.com/watch?v=Cb9C1u8HsR8
03:32 < niggler> opeth certainly has one of the more interesting live shows
03:32 < sinclair|net> niggler: i dont go for cheese rock tho
03:33 < niggler> ah that's cuz you aren't a drummer at heart :P
03:34 < sinclair|net> niggler: heard this before ? https://www.youtube.com/watch?v=3WtdCxlkFRU
03:34 < niggler> lol slayer intro'd for a megadeth concert
03:34 < niggler> though they played … i think it was angel of death
03:35 < sinclair|net> niggler: i went to a megadeth / slayer gig
03:35 < niggler> https://www.youtube.com/watch?v=K6_zsJ8KPP0 there we go
03:35 < sinclair|net> slayerdeth
03:35 < niggler> might have been the same one I'm thinking of
03:35 < sinclair|net> that was a few years ago
03:35 < sinclair|net> niggler: a few years ago in ... New Zealand
03:36  * sinclair|net is from New Zealand
03:36 < ChrisPartridge> the land of sheep
03:36 < niggler> they played in the meadowlands 3 years ago maybe
03:36 < sinclair|net> ChrisPartridge: amoung other things
03:37 < niggler> it was 20th anniversary of rust in peace iirc
03:37  * sinclair|net notes New Zealand also has cows
03:37 < niggler> sinclair|net its all about the lamb
03:37 < niggler> apparently the only halal lamb you can get in the US comes from australia
03:38 < niggler> the colorado lamb is not halal fwiw
03:38 < sinclair|net> new zealand is pretty much well known for its quality meat exports, note so much for its quality programmers 
03:39 < niggler> also sinclair|net http://sokra.github.io/source-map-visualization/#typescript
03:40 < sinclair|net> niggler: kinda nice, i need that to work spanning hundreds of source files
03:40 < sinclair|net> niggler: ive been writing me own stuff :)
03:40 < niggler> this was some mozilla stuff
03:40 < niggler> https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/
03:40 < niggler> somehow mozilla seems behind in javascript stuff even though their CTO was the creator of JS
03:41 < vrlogrs> hey guys ..
03:41 < vrlogrs> have a weird question ..
03:41 < arnorhs> vrlogrs: hey
03:41 < sinclair|net> niggler: source maps are only part of the picture, im trying to get a cohesive project tooling up and running
03:41 < vrlogrs> let's say, im using a module .. 
03:41 < niggler> you should go to your doctor vrlogrs 
03:41 < vrlogrs> lol niggler
03:41 < niggler> sinclair|net intellisense and  VS2012 doesn't cut it?
03:41 < sinclair|net> niggler: not for where i intend to code
03:41 < niggler> vrlogrs continue
03:42 < jason811> Howdy all, I have a nodejs process that, over time, starts to slow down. It's a simple app but after 4-5 of uptime requests start timing out. Currently debugging with nodetime but don't see any obvious issues. Any pointers? Known issues?
03:42 < sinclair|net> niggler: and in general, no, it doesn't cut it
03:42 < vrlogrs> and i want to have that module call a function that's defined in the parent -- is that possible? :S
03:42 < jason811> *4-5 days
03:42 < niggler> define "parent" vrlogrs 
03:42 < sinclair|net> niggler: trying to build TS on nodejs using visual studio is a nightmare
03:42 < niggler> you can pass a callback
03:42 < vrlogrs> i was hoping to avoid a callback .. 
03:43 < vrlogrs> is there a way i can have the parent define the function?
03:43 < sinclair|net> niggler: you know i wrote this right ? https://npmjs.org/package/typescript.api
03:43 < niggler> the parent defines the function and passes it as an argument to the module
03:43 < vrlogrs> by parent, i mean the script that calls it as a module
03:43 < niggler> then the module calls the function you passed
03:43 < niggler> as an example vrlogrs put this in foo.js: module.exports = function(cb) { return cb(3); };
03:43 < vrlogrs> there's no other way huh?
03:43 < niggler> something dumb
03:44 < niggler> then you can require('./foo')(function(x) { console.log(x); });
03:44 < arnorhs> or maybe your module returns an object that you can bind events on.. or callback handlers
03:44 < vrlogrs> here's the problem ..
03:44 < niggler> was sinclair already taken on github sinclair|net ?
03:44 < vrlogrs> i have 3 functions in the module that will call the same parent function ... 
03:45 < sinclair|net> niggler: yes
03:45 < vrlogrs> and these 3 functions, use timeout and interval
03:45 < vrlogrs> they also clear these timeouts/intervals
03:45 < vrlogrs> so, i have a feeling all these references to the same callback function might get messy
03:45 < niggler> sinclair|net use "Apache-2.0" in package.json
03:45 < sinclair|net> niggler: ill update it
03:46 < niggler> the license field is pretty dumb
03:46 < niggler> https://npmjs.org/package/typescript.api
03:46 < niggler> the link is just to opensource.org/licenses/whatever
03:46 < sinclair|net> ah right, well, its the same license that typescript uses
03:47 < sinclair|net> ill change it when i update next time
03:47 < niggler> you also need to say "Copyright 2013 Sinclair" 
03:47 < niggler> in your source files
03:47 < sinclair|net> niggler: why?
03:47 < niggler> http://www.apache.org/licenses/LICENSE-2.0
03:47 < niggler> look at the appendix
03:48 < niggler> To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets "[]" replaced with your own identifying information. (Don't include the brackets!)
03:48 < niggler> and the short-form starts with
03:48 < niggler>    Copyright [yyyy] [name of copyright owner]
03:48 < sinclair|net> well, if it makes people happy
03:48 < vrlogrs> http://pastebin.com/m6BV58JD --- in this case, will the callback reference from foo be properly deleted?
03:48 < niggler> someone needs to make a mustache template
03:48 < vrlogrs> or will this add up
03:49 < sinclair|net> niggler: sadly, noone is downloading my module
03:49 < sinclair|net> except 17 people (whoever they are)
03:49 < vrlogrs> to a memory issue
03:49 < sinclair|net> niggler: i like to think people find it as useful as i find it
03:49 < niggler> sinclair|net there's a very strong chance you may be the most active user of typescript
03:50 < sinclair|net> niggler: plus, its the only TS 0.9 compiler up on npm that doesn't wrap the tsc compiler directly
03:50 < niggler> and I'm not sure if that's a testament to your mental stamina or microsoft's inability to attract developers
03:50 < sinclair|net> niggler: well, no one who uses TS has a bad thing to say about it
03:51 < sinclair|net> niggler: its highly underrated, and under used
03:51 < niggler> id use it if there were actual macros
03:52 < niggler> passing javascript source through CPP seems too lulzy 
03:52 < sinclair|net> niggler: i don't think TS needs macros
03:53 < sinclair|net> niggler: it goes against the point of TS, that the compiler can validate your code
03:53 < niggler> oh no i didn't mean that TS or any language needed macros; merely saying that I'd consider an alternative language if they had proper macros
03:53 < niggler> no macros aren't about validating code
03:53 < sinclair|net> macros in what sense?
03:53 < niggler> c macros
03:53 < niggler> #define
03:53 < niggler> #ifdef
03:53 < niggler> #undef
03:53 < niggler> etc
03:54 < sinclair|net> yes, ok, used for what tho, different compilation environments?
03:54 < niggler> so you can use general if statements and whatnot, but the code ends up getting bloated
03:54 < niggler> and i haven't found a dead code elimination tool i've been happy with
03:57 < nightfly> If clojure script actually becomes a respectable thing the macro support will be wonderful
03:58 < niggler> lol clojure script
03:59 < Havvy> !sweetjs
03:59 < Havvy> :(
03:59 < Havvy> SweetJS has macros.
03:59 < niggler> there are all kinds of cute things Havvy 
03:59 < niggler> but sometimes you just want make and c macros
03:59 < niggler> and shell scripts and the ilk
03:59 < niggler> and by sometimes, i mean most of the time
04:00 < sinclair|net> Havvy: how goes the TS?
04:00 < nightfly> I'm really disappointed that hardly anyone in the clojure/cljs community doesn't care that cljs isn't self hosting and requires a large and derpy toolchain to compile and run. At least regular Clojure at leasts tried to be an actual lisp a bit.
04:01 < Havvy> sinclair|net: Haven't done anything yet.
04:01 < nightfly> *tries
04:01 < niggler> nightfly the alternative language "bubble" is going to pop soon
04:01 < jason81_> Howdy all, I have a node server that is essentially acting as a relay. It accepts incoming http posts and forwards (over udp) to another node process on the same server. Over time, the inbound http post is timing out. (after 4-5 days). Any ideas on debugging this?
04:01 < Havvy> I've been working on this instead: https://gist.github.com/Havvy/5736915
04:01 < niggler> jason81_ you have a leak anywhere?
04:03 < jason81_> niggler: I've been doing some debugging with nodetime but nothing is standing out. The code is pretty straight forward. the only thing i can think of is an array that gets cleared out periodically using foo = [] and a udp buffer is allocated on send. i assume the udp buffer is getting gc'd
04:04 < niggler> jason81_ does ab or siege support arbitrary payloads?
04:05 < niggler> i wonder if you can use one of those to just hit your server at a higher rate than you would normally expect and see if you can elicit the problem
04:07 < jason81_> niggler: i can look into that. I do have a simulator for the inbound data and was unable to reproduce. 
04:07 < niggler> alternatively, use TCP instead of UDP
04:08 < jason81_> niggler: i would think udp would be better, less overhead.
04:09 < niggler> do you know if the problem is coming from the source or the sink?
04:11 < jason81_> niggler: i believe the source, once i restart the relay process everything works just fine. 
04:11 < niggler> does the recipient send a heartbeat or do you have any synchronization protocol?
04:12 < niggler> holy crap no one has taken npm `malloc`
04:12 < sinclair|net> niggler: npm has some crazy ordering
04:13 < jason81_> niggler: nope, this is simply fire and forget. real-time data where reliability is not required. The relay must however be available to accept inbound data from the message bus.
04:13 < sinclair|net> if i search for typescript, my module doesn't even appear
04:13 < niggler> jason81_ then how do you know there are failures?
04:13 < sinclair|net> niggler: however, modules that have less downloads, and do not even have the keywords typescript appear before my module
04:13 < niggler> *how do you know the failure is at the source?
04:14 < niggler> sinclair|net you are on page 2
04:14 < niggler> typescript is unsurprisingly popular
04:14 < niggler> https://npmjs.org/package/typescript
04:14 < niggler> https://npmjs.org/package/grunt-typescript also not a surprise
04:14 < sinclair|net> yeah, but scroll down
04:14 < jason81_> niggler: just to be clear:    inbound http post --->   node relay  --> udp --> node app 2
04:15 < sinclair|net> niggler: see tscv
04:16 < niggler> right jason81_ so when you say inbound requests are timing out, are you saying that the initial POST request is timing out?
04:16 < sinclair|net> niggler: its had less downloads overall, and no keywords associated with it, yet its ranked higher
04:16 < jason81_> niggler: yes, or response time is slowing down considerably.
04:17 < sinclair|net> niggler: not that i care, but i can't understand why npm is ordering that way
04:18 < niggler> so jason81_ did you use wireshark or something and see that messages aren't being fired?
04:18 < niggler> if its a udp buffer problem you should be able to increase the size
04:21 < sinclair|net> niggler: yeah, i don't get that at all
04:21 < niggler> sinclair|net you need to get more people to download
04:22 < sinclair|net> niggler: its not based on downloads tho
04:22 < sinclair|net> niggler: if it were, then i would be ranked above https://npmjs.org/package/tscv
04:22 < niggler> and/or put typescript as the first word in your description
04:22 < niggler> in your description, typescript is the third to last word
04:22 < sinclair|net> niggler: does it use keywords, or text search?
04:22 < niggler> that's a question for isaacs
04:23 < niggler> but that's the only major difference that comes to mind
04:24 < sinclair|net> i don't really care, but i did write the thing so make it more practical to use ts in a node context, 
04:26 < yalamber> Hello, I am having problem with mysql module in nodejs while handling reconnection after server closes connection here is my gist https://gist.github.com/yalamber/4e5c6cd5fdacb4cda923
04:32 < niggler> are there shared memory primitives in nodejs core or libuv?
04:32 < niggler> or do you have to write your own in a module
04:33 < ljharb> what do you mean by that?
04:33 < niggler> this is obviously OS-specific
04:34 < niggler> stuff like shmat/shmdt
04:34 < niggler> does libuv / nodejs expose any of that stuff in a meaningful way (even if its just a light wrapper around the sys call)
04:36 < Bascka> Does anybody if node_pcap is still working?
04:36 < Bascka> *Does anybody know
04:38 < astropirate> What are people's thoughts on monolithic vs minimalistic web frameworks. (we aren't talking  about extendability here)
04:41 < niggler> astropirate you have examples in the node universe?
04:42 < nightfly> Don't prefer frameworks, prefer legos
04:42 < astropirate> niggler, well... something like Express would be considered minimalistic I don't think we have a monolithic one yet
04:42 < astropirate> I could be wrong though
04:43 < niggler> meteor?
04:43 < astropirate> meteor is a minimalistic one
04:43 < niggler> nightfly legos have become poop
04:43 < astropirate> you glue other libs and frameworks to it
04:43 < niggler> which, as i found out recently, stands for "piece with one purpose"
04:43 < niggler> *only one purpose
04:46 < astropirate> nightfly, so, you really like express for web stuff then?
04:48 < niggler> what's wrong with the http primitive of nodejs?
04:48 < niggler> or connect
04:48 < ljharb> "primitive"?
04:48 < ljharb> it's a bundled module, not a primitive
04:51 < niggler> it is the basis for pretty much every framework
04:51 < astropirate> whats wrong with it? nothing
04:51 < astropirate> you want features though
04:51 < niggler> hence it's a primitive
04:51 < astropirate> and dont want to rewrite it every single time
04:54 < niggler> so there's connect
04:54 < niggler> then there's stuff like express and meteor
04:54 < niggler> then there's php
04:54 < niggler> not sure where ruby on rails sits, but its probably between express and php
04:55 < nightfly> Ruby on rails does more than php tries to do
05:01 < shesek> ruby on rails and express are frameworks, how can they be compared to a programming language?
05:01 < shesek> this makes no sense
05:01 < niggler> php is far more than just $var 
05:02 < niggler> there's a whole library of stuff, like mysql integration, that's considered part of php
05:02 < niggler> whereas with node, most of those features are provided by user-contributed modules
05:03 < sdwrage> user contributed libraries = win :)
05:03 < sdwrage> if only life emulated such a collaborative environment ;)
05:03 < niggler> then you have the current mess we have with npm
05:03 < sdwrage> nigger, if you consider it a mess :)
05:03 < sdwrage> depends on your definition of mess
05:04 < sdwrage> niggler*
05:04 < sdwrage> stupid autocorrect :(
05:04 < niggler> autocorrect lol
05:04 < sdwrage> niggler, just about to disable it lol
05:04 < niggler> http://wordsmith.org/words/niggler.html
05:04 < sdwrage> more trouble than it's worth :P
05:05 < niggler> now I'm curious why that word was in your autocomplete list
05:05 < sdwrage> niggler isnt
05:05 < sdwrage> I don't know why the other is 0_o
05:05 < niggler> here's an example problem sdwrage 
05:05 < sdwrage> I'm not racist in the least
05:06 < sdwrage> x.x
05:06 < niggler> how do you connect to sqlite 
05:06  * niggler pets sdwrage 
05:06 < sdwrage> via what? js?
05:06 < niggler> in your node app
05:06 < sdwrage> hold
05:06 < niggler> you want to read data from an sqlite db
05:07 < sdwrage> okay well how abstract do you want it to be?
05:07 < sdwrage> do you want it "rails-y"
05:07 < sdwrage> ?
05:07 < niggler> i want it "node-y"
05:07 < sdwrage> do you want relationships
05:08 < sdwrage> by rails-y I don't mean rails of course
05:08 < niggler> no i assumed you meant in that style
05:08 < sdwrage> I meant ORM or active record like
05:08 < niggler> so if i wanted that, the top thing is called "jugglingdb"
05:08 < niggler> incidentally, it appears to have more activity than the eponymous "sqlite3" module
05:09 < niggler> then there's something called sqlite which also claims to be sqlite3 bindings
05:09 < niggler> and persist 
05:09 < niggler> i mean, the list goes on and on, and while it is fine for some stuff to say "just try them and see what you like"
05:10 < sdwrage> http://bookshelfjs.org/
05:10 < sdwrage> look at that ;3
05:10 < sdwrage> niggler, btw, I don't really want it to be more like one tech over another
05:10 < sdwrage> more, really, I state cognitive semblance over another frameworks solution :)
05:10 < niggler> lol there we go
05:10 < sdwrage> niggler, in one sentence, what are you looking for? :)
05:10 < niggler> well in this case, i'm just looking for something that works :)
05:11 < sdwrage> well, what works is very relative :)
05:11 < niggler> sure
05:11 < sdwrage> for a simple blog, a flat file db is what works
05:11 < niggler> sqlite deals with flat files
05:11 < sdwrage> sure does, but what is your app?
05:11 < sdwrage> :)
05:11 < sdwrage> in one sentence
05:12 < niggler> i just threw that out there as an example
05:12 < niggler> i want to interact with existing sqlite3 databases
05:12 < niggler> that come from my iPhone data backups
05:12 < sdwrage> then an sqlite3 db library is what you need. hold on
05:12 < sdwrage> what language are you using?
05:13 < niggler> we are talking about nodejs, right?
05:13 < WallE> Hello How to store Session in Node.js ??
05:13 < sdwrage> niggler, are you trying to build an API in node.js?
05:13 < niggler> an app
05:13 < sdwrage> or are you trying to access something from iPhone to a node.js driven api?
05:14 < niggler> i have the sqlite dbs already extracted
05:14 < niggler> and i just need to dig into them
05:14 < sdwrage> from? objective-c?
05:14 < sdwrage> from what?
05:14 < niggler> from nodejs
05:14 < niggler> I've settled on using nodejs, lets say
05:14 < niggler> so now i look for a way to access the data
05:14 < sdwrage> okay. http://bookshelfjs.org/ handles that as far as I know
05:14 < sdwrage> hold on
05:14 < sdwrage> let me verify
05:14 < sdwrage> so I don't sound like an ofe :P
05:15 < niggler> ok tell me how i discover that from npm
05:15 < sdwrage> niggler, https://npmjs.org/package/bookshelf
05:15 < niggler> how do i decide on that over jugglingdb
05:15 < niggler> http://eirikb.github.io/nipster/#sqlite
05:15 < WallE> How to get Session .... PLease Guide Me
05:15 < sdwrage> there are a lot of options 
05:15 < niggler> why choose bookshelf over sqlite3 or over jugglingdb
05:15 < sdwrage> no real set better than the other scale
05:16 < niggler> part of why i bring this up is because apparently the devs behind sqlite3 have been lazy
05:16 < sdwrage> choose what suites you :)
05:16 < sdwrage> well sqlite3 is used in many langs
05:16 < sdwrage> not just js
05:16 < sdwrage> ruby uses it as a primary db when starting a project
05:16 < niggler> but you have now many different partially-tested libraries as opposed to one standard and battle-tested library
05:17 < WallE> How to get Session .... PLease Guide Me
05:17 < niggler> now sqlite3 is probably a bad example, seeing as how it isn't exactly the most important thing to support
05:17 < niggler> WallE what do you want to do?
05:17 < sinclair|net> for those who are mongo mad, this is a important watch https://www.youtube.com/watch?v=b2F-DItXtZs
05:18 < sdwrage> niggler, welcome to the world of open source :) it's all about how well received it is and how many rely on it
05:18 < WallE> niggler i want to get Session (like we do in Servlet and JSP) .... In Node.js
05:18 < sdwrage> if you develop better in A than B, develop in A :)
05:18 < niggler> is it more efficient use of time and energy to have 500 partial implementations or one complete implementation?
05:19 < sdwrage> WallE, hold on? :P
05:19 < niggler> we'll spend days arguing this sdwrage lol
05:19 < sdwrage> niggler, I am not trying to argue :)
05:19 < sdwrage> if you found the solution, hooray :)
05:20 < WallE> Guys please tell
05:20 < niggler> what specifically are you trying to do WallE
05:20 < sdwrage> niggler, did I do something to irritate you?
05:21 < niggler> no sdwrage I'm not satisfied with that state of open source
05:21 < WallE> niggler want to store customers data
05:21 < sdwrage> niggler, I would say, rely on the number of libraries that depend on it
05:21 < sdwrage> that is as far as I can go with it :X
05:22 < sdwrage> hope I didn't irritate you in any way with my responses
05:22 < niggler> nono lol
05:22 < sdwrage> I was only trying to be helpful :|
05:22 < niggler> i realize what I'm asking for is a bit different from the open source traditions
05:23 < WallE> Guys HELP ME
05:23 < niggler> its easier for lots of people to independently build something similar
05:23 < niggler> walle do you want to store them in a database?
05:23 < sdwrage> niggler, I would say if a lot of people are building something similar they are on the "right track" :)
05:23 < WallE> Nope ... I want to store them in session
05:24 < niggler> the question is whether or not they ever will "converge" so to speak
05:24 < sdwrage> WallE, https://npmjs.org/package/session
05:24 < sdwrage> niggler, some will. 
05:24 < sdwrage> niggler, this is how design patterns emerged
05:24 < niggler> connectjs has some session stuff as well
05:24 < sdwrage> many like minded people having the same idea :)
05:24 < WallE> Until and unless they want delievery i'll be storing in session rather DB
05:25 < sdwrage> https://npmjs.org/package/session
05:25 < niggler> http://www.senchalabs.org/connect/session.html
05:25 < niggler> here's a good example sdwrage 
05:25 < sdwrage> or that :)
05:25 < niggler> which one to recommend?
05:25 < niggler> one is the obvious answer based on the name
05:25 < sdwrage> whichever lol I just did a basic search :P
05:25 < niggler> but it has such little traction
05:26 < sdwrage> the answer? whichever is easiest to implement an extend down the road :)
05:26 < niggler> lol connect doesn't even show up in the search
05:26 < niggler> wtf
05:26 < WallE> It' s really difficult in Node.js 
05:27 < sdwrage> WallE, how do you choose what sandwich shop to go to?
05:27 < sdwrage> :P
05:27 < sdwrage> lol
05:27 < astropirate> ohh god can't wait for this bug to be fixed http://code.google.com/p/v8/issues/detail?id=2560&q=label%3AHarmony&colspec=ID%20Type%20Status%20Priority%20Owner%20Summary%20HW%20OS%20Area%20Stars
05:28 < sdwrage> there are a lot of choices. You have to try them until you find one that suits your needs :)
05:28 < niggler> sometimes you need a tip
05:28 < niggler> some advice
05:29 < niggler> go somewhere, don't go elsewhere
05:29 < niggler> zagat rating, as it were
05:29 < sdwrage> niggler, of course :) maybe you want to write an NPM rating service? :P
05:29 < niggler> zagat isn't really that great, but if they say it sucks there's a very good chance the place is terrible
05:29 < niggler> I've been thinking about this for a long time sdwrage but I'm not sure how best to do it
05:29 < niggler> http://eirikb.github.io/nipster/#session is pretty cute
05:29 < niggler> but then you realize that github stars and forks isn't really any indication of use
05:30 < niggler> because if something gets picked up by /r/javascript or hn or dailyjs then there'll be lots of perceived activity and very little actual use
05:30 < sdwrage> https://github.com/kcbanner/connect-mongo
05:30 < sdwrage> dang! 
05:30 < sdwrage> 79 forkes
05:30 < sdwrage> forks
05:31 < sdwrage> lol
05:31 < niggler> last activity 20 days ago
05:31 < niggler> *19 days ago
05:31 < sdwrage> niggler, reddit = win
05:31 < niggler> no i don't mean it condescendingly sdwrage 
05:31 < niggler> i think forks and stars are more an indication of advertising than actual use
05:32 < sdwrage> 19 days isn't too bad
05:33 < sdwrage> niggler, I wouldn't trust me :P, I have had a few shots of vodka XD
05:33 < marklubi> I'm having an issue with a memory leak that appears to be an issue with the latest version of node and I'm wondering if I can get one of you to confirm the issue, or if there's just something that I'm doing wrong
05:33 < niggler> its 1:30 AM here, same effect :P
05:33 < niggler> marklubi are you familiar with `n`?
05:33 < niggler> https://npmjs.org/package/n
05:33 < niggler> you can roll back to an older version of node 
05:34 < niggler> if you think it's something with a particular version
05:34 < sdwrage> npm?
05:34 < niggler> npm install -g n
05:34 < niggler> then n <version>
05:35 < marklubi> I've switched back to what we're using in production and I don't have an issue with 0.6.10 (in the process of getting up to speed with the latest)
05:35 < niggler> try a 0.8 version
05:36 < niggler> 0.8.24 i think is the latest version in that series
05:36 < sdwrage> isn't the npm version of rpm called nvm?
05:36 < marklubi> I can certainly try a 0.8 version, but I was wondering if anyone else can repo the problem in the latest
05:36 < niggler> there are multiple tools sdwrage 
05:36 < sdwrage> rvm rather
05:36 < sdwrage> x.x
05:36 < sdwrage> fail on my part
05:36 < niggler> nvm
05:36 < niggler> https://npmjs.org/package/nvm https://npmjs.org/package/n
05:36 < marklubi> I've put together a super simple version that causes the memory leak if someone else can take a look at it https://github.com/marklubi/node-net-memoryleak
05:36 < niggler> n had more than 16K downloads in the past month lol
05:36 < sdwrage> yeah I meant the node version of rvm = nvm :P
05:37 < niggler> what OS marklubi ?
05:38 < sdwrage> niggler, can you tell I am a previous rails dev? :P
05:38 < sdwrage> lmao
05:38 < marklubi> issue occurs on both OSX and CentOS 6.0
05:38 < niggler> tis ok
05:38 < niggler> we've all made mistakes earlier in life sdwrage
05:38 < sdwrage> niggler, especially when intoxicated :P lol
05:40 < niggler> marklubi what do you see?
05:42 < WallE> I'm trying to download Node.js API library.... I only find Online API
05:42 < WallE> Sorry Documentation
05:42 < marklubi> with the example I put together, the memory usage increases continuously until I stop the rapid_connections.js script. doesn't increase any further after stopping the script, doesn't decrease with GC
05:45 < niggler> did you try using socket.end instead of destroy marklubi 
05:45 < sdwrage> night all :)
05:45 < sdwrage> night niggler :)
05:46 < niggler> join us again sdwrage 
05:46 < niggler> lol
05:46 < marklubi> makes no difference
05:47 < marklubi> found the issue when we rolled it out to our staging environment. the load balancer's status checks alone cause the memory usage to continually grow
05:49 < timoxley> ianstormtaylor that magic comes from the to-function module https://github.com/component/to-function/blob/master/test/index.js#L16
05:50 < niggler> and you are saying this wasn't leaking in 0.6?
05:51 < marklubi> not leaking with 0.6.10
05:56 < niggler> hmm 0.8.24 is showing the same thing fwiw
05:59 < marklubi> running our production script, you can see the leaks on 0.10.10 http://cl.ly/image/2L2j1I45132u vs where we rolled back (at 23:00) on a different server with 0.6.10 http://cl.ly/image/0m2T2W232401
05:59 < niggler> can you try on 0.8.24?
06:00 < marklubi> sure, give me a few minutes to install it.  didn't know about `n` before tonight
06:07 < marklubi> with 0.8.24 the memory use will decrease after 30 seconds or so of stopping the rapid_connections.js script
06:07 < marklubi> on OSX
06:10 < marklubi> also, with 0.8.24, after you run the rapid_connections.js script for a while, the memory usage of the server doesn't increase as rapidly
06:11 < marklubi> * increase as rapidly as compared to 0.10.10
06:31 < volitek> I've managed to write a for loop that loops from 0 to 9 and magically skips 1 and 2... What's going on? Code: http://pastebin.com/UwPbNJzM Output: http://pastebin.com/t9VrMthh
06:35 < Stumbler> volitek, your index variable i is set as global. are you using i anywhere else in your program?
06:37 < Stumbler> possibly in your evaluate function call?
06:38 < volitek> the evaluate is from a library, so I don't know.. how do I make it non-global?
06:38 < Stumbler> for (var i=0; i<newGameState.handState.players.length; i++) {   <-- use the var keyword in the for definition
06:38 < volitek> ah, thanks!
06:38 < Stumbler> np
06:43 < ljharb> volitek: or, use forEach - iterators are so much better than loops
07:28 < timoxley> volitek you probably want to put a var in front of your var i = 0
07:28 < timoxley> at the start of the for loop: for (i=0;
07:29 < ljharb> or better, avoid loops, and use iterators.
07:29 < abraxas> does anyone know of a simple wordpress-like engine written in node.js?
07:29 < abraxas> ideally markdown driven
07:30 < timoxley> abraxas AFAIK there's nothing with the fancy backend, but if you want a blog engine with markdown
07:30 < timoxley> abraxas https://npmjs.org/search?q=blog+markdown
07:30 < ckknight> ljharb: iterators have their downsides compared to simple loops
07:30 < timoxley> lots of options
07:31 < ljharb> ckknight: such as? don't say performance, cause then i win
07:31 < abraxas> timoxley: what is this npmjs search magic you speak of? (will have a look, thanks)
07:31 < ckknight> performance, break/continue/return support.
07:31 < ljharb> ckknight: some/every. performance is irrelevant when talking about code quality.
07:31 < ckknight> performance is relevant in performance-intense situations
07:32 < abraxas> timoxley: was kinda hoping there was one that really stands out in quality, etc, that all the cool kids are using..
07:32 < ljharb> ckknight: especially with Array#find and Array#findIndex in ES6…
07:32 < ssafejava_> why even have this conversation? there are places for both
07:32 < ljharb> ckknight: i'm not saying perf never matters
07:32 < ljharb> ckknight: i'm saying that, one should never code for perf until something is built, works, and is profiled. and then if you need a loop, great, loop it up
07:32 < ljharb> ckknight: but for the 99.999% use case, for loops aren't going to clear anyone's bottleneck.
07:33 < ckknight> or you could just use a loop first, know what you're doing, and be happy
07:33 < ckknight> ljharb: it's not that high of a percentage.
07:33 < ssafejava_> ljharb: I don't think you really need to say that, especially not to ckknight... we're not all new coders here
07:33 < ljharb> "know what you're doing" is very subjective.
07:33 < timoxley> ljharb +1
07:33 < ckknight> I've had iterators be the bottleneck.
07:33 < ckknight> ljharb: okay, use a standard pattern that you know to be performant.
07:33 < ljharb> ckknight: awesome - if you're one of the few coders who's ever actually determined where their bottlenecks are, and it's iterators, that's exactly the time for loops
07:34 < ckknight> very well then, we're agreed
07:34 < ljharb> right - but "know to be performant" isn't an absolute category. it depends on context.
07:34 < ljharb> and the vast majority of the time, "readable and maintable" is far more important than "fast"
07:34 < timoxley> abraxas perhaps check https://github.com/substack/glog
07:34 < ckknight> that's true, I just think iterators are an overrated solution. Sometimes they're super-handy, sometimes less so.
07:34 < ljharb> also, engines will optimize what we use :-) so by not using iterators, you're just dooming them to never be fast
07:35 < ljharb> ckknight: there's certainly use cases for loops. but that, imo should never be the default.
07:35 < ckknight> ljharb: I use a compile-to-JS language normally, so all the standard iteration functions are first-class syntax, so it's a slightly different situation
07:35 < ckknight> trying to write a reduce manually is an unreadable mess
07:35 < ljharb> that's an entirely different situation
07:35 < abraxas> timoxley: oh that looks nice
07:35 < ckknight> but having something do it for you (whether using .reduce or a syntax nicety) is great
07:35 < ljharb> if you're writing fairy whispers, then what JS it produces isn't really your concern (altho it should be)
07:36 < ljharb> i'm talking about in actual JS, when writing JS - anything else is a "whatever language you're using that compiles to JS" discussion, not a JS discussion.
07:37 < ckknight> ljharb: okay, sticking to just the .forEach method and not talking about .map or .some or whatever, then it's still very easy to iterate over using a normal for loop, and you still have the ability to break/return/continue
07:37 < ljharb> ckknight: right - when you need to break, you use some/every, end of story
07:37 < ljharb> when you need to return - show me an example and i'll show you a cleaner one using iterators
07:37 < ckknight> ljharb: what if you need to either break or return?
07:37 < ljharb> break is some/every
07:38 < ljharb> return is satisfied by ES6's find and findIndex
07:38 < ckknight> I mean both within the same iteration
07:38 < ckknight> ah
07:38 < ckknight> okay
07:38 < ljharb> and for "continue", that's a filter first, and whatever else second.
07:38 < ckknight> well, how about break label;?
07:38 < timoxley> ckknight bad pattern
07:38 < ljharb> GOTO? please don't tell me you encourage that.
07:38 < ljharb> that's just bad code begging to be rewritten.
07:38 < ckknight> ljharb: nah, I'm against goto except in generated code.
07:38 < ckknight> I'm just trying to poke holes in your argument
07:38 < nathan7> Hey timoxley, 'sup?
07:39 < ljharb> ckknight: lol fair enough
07:39 < ljharb> ckknight: 
07:39 < ckknight> I really wish JavaScript had goto for generated code
07:39 < ljharb> ckknight: "generated code" is always awful imo, fwiw.
07:39 < ljharb> it does.
07:39 < timoxley> nathan7 hi
07:39 < ljharb> you can break to a label from a while loop.
07:39 < ckknight> ljharb: I respectfully disagree
07:39 < ljharb> it's just awful.
07:39 < ckknight> yeah, I know, that's what I do
07:39 < [AD]Turbo> hola
07:39 < ckknight> a giant switch statement in a while (true)
07:39 < ckknight> it's atrocious
07:40 < ssafejava_> lol that's monstrous.
07:40 < ljharb> switch statements are always atrocious.
07:40 < ckknight> there's not a better way to implement `yield`
07:40 < ljharb> any code with "switch" is bad code.
07:40 < ckknight> ljharb: that I disagree with
07:40 < ckknight> ljharb: sometimes it makes good sense
07:40 < ljharb> switch statements are always more readable as a hash lookup or an if/else.
07:40 < ljharb> always.
07:41 < ljharb> and as for "yield", JS doesn't have it yet. if you're trying to implement it, maybe you should design your code not to use continuation-passing style
07:41 < timoxley> ljharb plus there's no chance of "forgot to break" bugs
07:41 < ckknight> always? when you need to put your hash lookup outside of the code that is otherwise executing?
07:41 < ckknight> ljharb: no.
07:41 < ljharb> ckknight: closures.
07:41 < ljharb> the perf gain of a switch is negligible, and it's less readable, and also can potentially suffer from fallthrough bugs.
07:41 < ckknight> that's still executing code outside of the context of where you want to execute it
07:42 < ckknight> actually switches are only really performant when dealing with constant integer cases
07:42 < ljharb> ckknight: can you show me an example? we're slinging around a lot of pronouns here.
07:42 < ckknight> outside of that, they should be avoided
07:42 < ljharb> i'd love to see a switch where it's more readable as a switch. to date i've never seen one.
07:42 < ljharb> (in JS at least, ruby's case/when is nice)
07:43 < ckknight> ljharb: how is that not a double standard
07:43 < ckknight> lemme find a good use case.
07:43 < ljharb> each language has its own standard :-)
07:43 < ljharb> please, i'm honestly curious / open to the challenge
07:44 < ckknight> this is a pretty good example, not the best: https://gist.github.com/ckknight/e331a698741549f5e0dd
07:45 < ckknight> to do the same thing, I'd need to cache the length in a variable, minimally
07:45 < ljharb> ckknight: that's not JS
07:45 < ljharb> can you show me in a real language? :-p
07:45 < ckknight> scroll down
07:45 < ckknight> I provided JS
07:45 < ljharb> ah, k
07:45 < ljharb> looking
07:45 < ckknight> I'm trying to be respectful and show you JS
07:45 < ljharb> thank you!
07:46 < ckknight> and fuck you for calling my language not a real language
07:46 < ckknight> I'm done
07:46 < Purefan> :O
07:46 < ckknight> I was trying to have a real discussion, but you continually berate my work
07:47 < ljharb> ckknight: dude, relax
07:48 < ljharb> ckknight: actually from what i've seen of gorillascript, it's the least awful transpiled JS lang i've seen. so kudos to you
07:48 < ckknight> I don't need you to insult my work and then condescend to me
07:48 < ckknight> alright, I appreciate that
07:48 < ljharb> i'm honestly not trying to
07:48 < ckknight> that is what I'm trying to aim for
07:48 < ckknight> the least shitty solution
07:48 < ljharb> but if no engine natively executes it, it's not a "real" language. so that's not an insult.
07:48 < ssafejava_> for dubious definitions of "real"
07:48 < ljharb> so i just posted a comment on that gist
07:48 < ljharb> lol fair enough
07:48 < ckknight> so JS wasn't real until someone added a JITter?
07:49 < ckknight> and Ruby isn't real either
07:49 < ckknight> since it still is interpreted
07:49 < ljharb> i didn't say not interpreted
07:49 < ckknight> in the Matz implementation, that is
07:49 < ljharb> natively interpreted.
07:49 < ckknight> native?
07:49 < ssafejava_> what does that even mean?
07:49 < ljharb> make a native gorilla VM and "real" will apply
07:49 < ckknight> C's not a real language
07:49 < ljharb> ckknight: as for that gist, style variances not withstanding, my solution is basically the same number of lines, and avoids a switch
07:49 < ckknight> it has to turn into machine code first
07:50 < ckknight> before something can run it
07:50 < ljharb> ckknight: compiled, vs interpreted. that's different.
07:50 < ckknight> mine is compiled
07:50 < ljharb> compiled to JS?
07:50 < ckknight> it just happens to turn into a different kind of code than machine code
07:50 < ljharb> right.
07:50 < ckknight> it turns into a bytecode like .NET or the JVM
07:50 < ckknight> it's just called JavaScript
07:50 < ljharb> that's where i'm (arbitrarily) drawing the line
07:50 < ljharb> obv you can draw it elsewhere
07:50 < ckknight> why's that? because JavaScript is readable?
07:50 < ssafejava_> ljharb: Essentially the difference I see between the switch & an if-else is a general reduction of characters. nothing wrong with that, some people would find that a lot more readable
07:51 < ljharb> and i'm honestly not impugning you for where you draw it. but that's where i draw it.
07:51 < Purefan> Here's a relevant discussion on SO http://stackoverflow.com/questions/3265357/compiled-vs-interpreted-languages
07:51 < ljharb> ssafejava_: switch statements have fallthrough. someone can accidentally screw it up.
07:51 < ckknight> ljharb: but I'm asking your reasoning for .NET bytecode vs. JavaScript-as-internet-bytecode
07:51 < ljharb> ssafejava_: in ruby, their case/when does not have that, which is why it's awesome.
07:51 < ssafejava_> Yeah of course and that's why I'd avoid them in most cases, but there are cases when programmers who do not need their hands held will want to use one
07:52 < ljharb> ckknight: so, that's a longer discussion - based on the assumption that JS is bytecode, that's where my opinion of GS being the least awful one i've seen, by a long shot, comes from.
07:52 < ljharb> ckknight: but, i don't consider it bytecode. so, i don't like any transpiled language.
07:53 < ckknight> from your reasoning, C# isn't a real language because I could just code in MSIL?
07:53 < ljharb> ssafejava_:  right - i'm not advocating it be stripped from the lang. i'm advocating it as a red flag, a code smell, something that should not be the default, and that warrants deeper investigationb.
07:53 < ljharb> ckknight: i'm ill-equpped to debate about proprietary languages that have only recently not required purchasing MS software.
07:53 < ckknight> okay
07:54 < ssafejava_> ljharb: well sure. I think the issue people are taking with your assertion is the use of "always". As in, "always atrocious", your words. Absolutes, sith, etc..
07:54 < ljharb> ssafejava_: lol, fair enough. since there are no absolutes, i'm using terms like "always" to mean "always unless you have a really good reason that you can defend well" - but that's not as persuasive.
07:54 < ssafejava_> I'd say it's more persuasive, because it reads less like a knee-jerk
07:55 < ljharb> i'll totally admit that i'm phrasing things as absolute that aren't entirely absolute.
07:55 < ljharb> BUT the things i claim are absolute tend to be safer defaults than anything else :-)
07:56 < ckknight> at what point did Objective-C become a real language?
07:56 < ljharb> ckknight: i don't know enough about obj-C to debate it - but it's kind of like java - compiled to bytecode which is executed natively.
07:56 < ckknight> that's not always been true
07:56 < ljharb> combined compiled-then-interpreted langs are trickier to classify
07:57 < ljharb> java, obj-c on iphone, etc
07:57 < ljharb> you're right, it wasn't always true
07:58 < ljharb> at any rate, i honestly didn't mean to tramp on your ego. GS is one of the best efforts in the space i've seen in awhile. but, i still believe that the concept of "write not-JS and compile it to JS" is flawed.
07:58 < ckknight> Alright, I disagree with that for the same reason I prefer C over assembly
07:59 < ljharb> my argument is that you don't control the browser.
07:59 < ckknight> I never claimed to
07:59 < ljharb> when you compile C, you are selecting the platforms to which you link your code.
07:59 < ljharb> ie, you "control" the interpreter of the assembly
07:59 < ckknight> perhaps Java is a better example
07:59 < ljharb> but you never control the interpreter in the browser.
08:00 < ljharb> if you're running on the JVM, compile all you want. java is awful but the jvm is great, and that's pretty undisputable :-)
08:00 < ckknight> I don't control the VM for Java, yet I can write Java or Scala or Clojure
08:00 < ckknight> yes, Java is awful we can all agree :P
08:00 < ljharb> java is hard to classify for this reason, because you compile to bytecode, which is then interpreted.
08:00 < ckknight> well, sometimes but not always
08:00 < ckknight> :P
08:00 < ljharb> but, you can't really handwrite the bytecode
08:01 < ckknight> ljharb: well, I've done it, but that's beside the point
08:01 < ckknight> ljharb: if only you knew of .NET, the MSIL argument is superb.
08:02 < ckknight> ljharb: MSIL is basically an ASM-like language for the CLR, a pain to write in but doable. No sane person would use it over C# or VB or F# or whatever
08:02 < ckknight> but you could
08:02 < ljharb> hm, interesting
08:02 < ckknight> and so I see JavaScript in the same light, but more powerful
08:02 < ckknight> you can write in JavaScript
08:02 < ckknight> but it has its flaws
08:02 < ckknight> and you can shoot yourself in the foot easily
08:02 < ckknight> what does `x + y` mean?
08:02 < ckknight> who knows!
08:03 < ljharb> if you don't know, you shouldn't be touching that code :-p
08:03 < Purefan> lol
08:03 < ljharb> but you're describing any dynamically or loosely typed language.
08:03 < ljharb> that's not specific to JS.
08:04 < ckknight> true, I'm atrociously against weak typing.
08:04 < ckknight> not dynamic typing
08:04 < ljharb> so that's an entirely different argument
08:04 < ljharb> the language has weak typing. anything that pretends it doesn't is a poor abstraction.
08:04 < ckknight> my argument is that JavaScript can be bytecode for the internet
08:04 < ljharb> there's lots of people that agree with you. but i disagree.
08:05 < ckknight> and that some things are far clearer when you have a compile-to-JS solution
08:05 < ljharb> such as?
08:05 < ckknight> ljharb: such as dealing with spread parameters
08:05 < ljharb> certainly "pretending you have classical inheritance" is easier when you can write in something else. but that's a poor design.
08:05 < ljharb> ckknight: that will be in ES6
08:05 < ckknight> oh? your browser supports ES6?
08:05 < ckknight> nope.
08:05 < ljharb> also, just use an object. in ruby it's an "options hash"
08:05 < ckknight> how about all your clients' browsers?
08:06 < ljharb> it's pretty simple to work around.
08:06 < ckknight> String interpolation is often a lot clearer than repeated manual concatenation
08:06 < ljharb> in fact, an options object gives you named optional args - a spread/rest param doesn't.
08:06 < ljharb> i agree with that - how is that related?
08:06 < ckknight> I'm giving you an example of how a compile-to-JS solution can be clearer than raw JS
08:06 < ljharb> :-) any time you're manually working with strings, you're probably doing something wrong 
08:07 < ssafejava_> ljharb: the entire reason I am interested in compile-to-JS languages is the avoidance of callback hell... there's a lot to be said for that. simulated static typing, default parameters, etc. are all niceties but not vital, but I find yield and things like promisefor() invaluable
08:07 < ljharb> ssafejava_: http://callbackhell.com - name your vars, and/or use promises. problem solved.
08:07 < ckknight> yeah, the avoidance of callback hell can make code far clearer
08:07 < ssafejava_> and of course yield is coming in ES6 but you know. still not there
08:07 < ssafejava_> ljharb: the problem is not solved, please don't trivialize real problems like that. 
08:07 < ljharb> yield is just continuation-passing style. it's not the right way to structure JS code.
08:08 < ssafejava_> you're opinionated, aren't you? idk if it's really worth the hassle of having a discussion
08:08 < ljharb> i am opinionated, yes.
08:08 < ckknight> yield is just a half-duplex communication system
08:09 < ljharb> if you're not interested in an opposing opinion, you're welcome to enjoy your bubble world :-) imo it's always worth a discussiob.
08:09 < ljharb> *discussion
08:10 < ljharb> ckknight: i guess other than the minor argument of "convenience when writing" i've never heard a good arg for using a "compile to JS" language
08:10 < ckknight> ljharb: how about variable immutability checking?
08:10 < ckknight> Making sure you don't overwrite something you declared wouldn't change
08:10 < ljharb> and when you use one, you drastically reduce the number of programmers that can read your code.
08:10 < ckknight> or worse, a global by misspelling something
08:10 < ljharb> ckknight: ES6 has const. otherwise, you use a linter.
08:10 < ckknight> you can't use ES6
08:10 < ckknight> stop talking about it
08:10 < ljharb> ok
08:10 < ljharb> jshint always catches that. if you're not using it, you're making a mistake anyways.
08:10 < ckknight> you'd need an ES6-to-ES3/5 compiler
08:11 < ljharb> yeah, traceur does that, but i don't like compilers ;-) so i'll stop mentioning it.
08:11 < ckknight> ljharb: it doesn't catch the case where I meant for a variable binding to be immutable.
08:11 < ljharb> make a function that returns a value.
08:11 < ljharb> or use ES5 property configs if you like
08:11 < ckknight> you're saying that for every immutable variable I have (90% of my variables), I should turn them all into functions?
08:11 < ssafejava_> ljharb: ewwwww
08:11 < ljharb> you have that many vars that are both immutable, and easy to override?
08:12 < ckknight> no, in GS, if they're immutable, they can't be overridden
08:12 < ckknight> but what if I tried by accident? JS vanilla would never stop me
08:12 < ckknight> and a linter would never catch it
08:12 < ljharb> sure, can you show me an example?
08:12 < ckknight> let x = 5
08:12 < ckknight> that's immutable
08:12 < ssafejava_> ljharb: Is there a way to indicate to jshint that a var should be a const, even when the browser doesn't have support?
08:12 < jesusabdullah> ljharb: bubbleworld, eh?
08:12 < ljharb> "let" isn't in all browsers
08:12 < ckknight> if I tried to reassign it, it would be an error
08:13 < ckknight> ljharb: this is GorillaScript.
08:13 < ljharb> ah
08:13 < ckknight> imagine normal `let` like ES6 `const`
08:13 < ckknight> immutable-by-default
08:13 < ljharb> ssafejava_: nope, altho that'd be a cool PR
08:13 < jesusabdullah> The only place I've seen let used consistently, is in gnome shell code.
08:13 < ljharb> ckknight: ok, so how does GS ensure it's immutable
08:13 < jesusabdullah> gnome shell could be REALLY COOL if they made tweaking the ux less shitty
08:13 < jesusabdullah> writing metacity themes: Hell on Earth
08:13 < ckknight> ljharb: all lower scopes are checked and cannot use any assignments on immutable variables.
08:13 < ljharb> ckknight: in ES5, you can use a getter/setter, and a "writable" config, but in ES3 you can't
08:13 < Vermicelli> gnome shell? Are we talking node.js here?
08:14 < jesusabdullah> Vermicelli: I talk about what I want!
08:14 < ljharb> ckknight: right - you're using a tool to enforce it
08:14 < jesusabdullah> Vermicelli: it's javascript, close enough
08:14 < ckknight> ljharb: and storing what would normally be a local binding on an object would be far less efficient than simply using a `var`
08:14 < jesusabdullah> Vermicelli: considered using browserify with it <_<
08:14 < ssafejava_> node.js has just become the javascript discussion forum for people who want to stay the hell away from ##javascript
08:14 < timoxley> ckknight lol, that's the worst logo I've ever seen, but I like it. never change it.
08:14 < timoxley> ckknight http://ckknight.github.io/gorillascript/
08:14 < ckknight> timoxley: :D
08:14 < ckknight> I drew a gorilla in the GIMP
08:15 < ckknight> I like it
08:15 < Vermicelli> I don't use Linux anymore
08:15 < ckknight> shows I have better things to do than draw gorillas
08:15 < ljharb> lol
08:15 < ckknight> like code using gorilla-based euphemisms
08:15 < ckknight> I think I insult humans a few times in the example docs
08:15 < ssafejava_> ckknight: flip it and make his ear a lambda
08:15 < jesusabdullah> linux is good for you, it's low in saturated fats
08:16 < ckknight> admittedly, humans are disgusting creatures
08:16 < ckknight> ssafejava_: nah, I think it looks better facing toward the content of the page
08:16 < ljharb> ckknight: i'll repeat, i really like the way you're approaching it. but since there's linters and unit tests, i just don't think the benefits outweigh the complexity.
08:16 < Vermicelli> ckknight do u use it in production?
08:16 < ssafejava_> hahaha sure, if you want to overthink your gorilla logo
08:16 < ckknight> Vermicelli: yes
08:16 < ssafejava_> :p
08:16 < ckknight> ljharb: you still haven't provided a real solution for immutable variable checking.
08:17 < ckknight> linters don't cover it
08:17 < ckknight> you'd need an outside tool
08:17 < ljharb> ckknight: in ES5, you can easily cover it. in ES3, there's not one. and compiling to JS in ES3 doesn't prevent external code from changing it.
08:17 < ckknight> or to tweak the linter and add extra code to your JS
08:17 < ckknight> ljharb: external code can't change it if it's encapsulated.
08:17 < ckknight> that's part of the JavaScript security design
08:17 < ljharb> so if you're just talking about making it harder for the dev to screw up, that's where unit tests, and code review, comes in.
08:18 < Vermicelli> looks cool,though but can't understand the need. CoffeeScript is already decent enough, No?
08:18 < jesusabdullah> Back in my day we screwed up all the time AND WE LIKED IT
08:18 < jesusabdullah> except CS sucks
08:18 < ckknight> Vermicelli: no, I have serious issues with it that I can go into if desired.
08:18 < ningu> hehe
08:18 < Vermicelli> as in?
08:18 < ningu> yeah CS would be great if it didn't suck :P
08:18 < ssafejava_> rut roh, here it comes
08:18 < jesusabdullah> well
08:18 < ljharb> CS is awful
08:19 < ssafejava_> i use CS almost strictly for files that go to non-programmers, because object syntax is easier. that's about as useful as it gets
08:19 < jesusabdullah> honestly, I don't mind coffeescript in terms of it existing. What I *do* mind is when code examples are written in coffeescript instead of javascript because fuck having to translate
08:19 < ckknight> I agree that those are important, but if a dev doesn't have to worry about the redefinition of their variables, then that is one thing they can put out of their minds, like garbage collection
08:19 < Purefan> Im always amazed when I hear some one uses CS for production, not that it happens often though :P
08:19 < ljharb> variable shadowing, it conflates best practice macros with ruby styling… pretty much like everything that guy writes, it's half awesome and half voodoo magic.
08:19 < jesusabdullah> yeah but coffeescript isn't on MDN
08:19 < jesusabdullah> If I'm teaching noobs how to code and I want to be like, "see npm has everywhat you need"
08:19 < ckknight> yeah, the variable shadowing in CS is terrible
08:19 < jesusabdullah> and I link them to some bullshit code that looks nothing like what I've been telling them to write
08:19 < ljharb> also the fake inheritance BS
08:19 < ckknight> if I have a log = Math.log at the top of my code and then a log = console.log somewhere in the middle, the program could die
08:19 < jesusabdullah> DOES NOT HELP
08:20 < ljharb> JS does not have inheritance. it has behavior delegation. things that make it pretend like it's java are awful.
08:20 < ckknight> that CoffeeScript's classes use .__super__ is unsettling to me
08:20 < ckknight> there is just no point to that
08:20 < jesusabdullah> that coffeescript HAS classes is unsettling to me
08:20 < ljharb> exactly.
08:20 < ljharb> http://davidwalsh.name/javascript-objects <- read that if you haven't. it's brilliant.
08:20 < ckknight> eh, classes can sometimes be handy to structure code, but I don't use them often
08:20 < ningu> ljharb: so are you saying that you shouldn't do inheritance in general or just not in JS?
08:20 < ckknight> { extends proto } ftw
08:20 < ckknight> ningu: prototype-based inheritance
08:21 < ljharb> ningu: i'm saying that the way everyone thinks of "inheritance" does not ever work in JS. read the article :-)
08:21 < ningu> ok :)
08:21 < ningu> ljharb: but it's not clear to me if you also think "... *and* it should never work that way if I had my way"
08:21 < ssafejava_> sometimes it's nice to have a ref to _super, e.g. if I have a chain of _.extends in Backbone, I might not want to lose parent behavior while, say, overriding initialize
08:21 < ljharb> ningu: fwiw, personally i find that avoiding inheritance makes for better programs. but it has its uses. it's just that JS's inheritance is so opposite what everything else has, that people mess it up often.
08:21 < nathan7> jesusabdullah: disagree
08:22 < Purefan> I just went through that actually, my "classes" were polluting the global scope, moved to Object.create and it helped, will try to stay away from "new" in JS
08:22 < ljharb> backbone is just like CS is just like underscore. half awesome, half bullshit voodoo magic.
08:22 < ckknight> ssafejava_: wouldn't you hook it and still call the function you hooked rather than calling into some magic super method?
08:22 < nathan7> jesusabdullah: it's just a fancy syntax for a pattern we already use
08:22 < nathan7> jesusabdullah: patterns are bug reports against your language
08:22 < ljharb> nathan7: doesn't mean it's a good pattern.
08:22 < Purefan> but with CS I feel like I need to learn a new syntax, to do something in the same language I already 'know'
08:22 < nathan7> ljharb: classes are to be used sparingly
08:23 < ljharb> lol that i agree with. patterns suck.
08:23 < jesusabdullah> nathan7: you mean, re: classes?
08:23 < nathan7> jesusabdullah: yes
08:23 < ckknight> nathan7: I'd argue that classes without inheritance can often be handy, but with inheritance should be looked upon skeptically
08:23 < jesusabdullah> nathan7: I mean, I find that an acceptable position
08:23 < ljharb> and yes, classes should be used sparingly in every language. just especially so in JS, since prototypical classes are opposite classical classes.
08:23 < ssafejava_> I could easily do something like var MyView = ExtendedBackboneView.extend({ initialize: function(){ Backbone.View.initialize.apply(this, arguments); // code... });, but if I ever change what `ExtendedBackboneView` extends (say, I put another superclass in there), I have to change all the code
08:23 < jesusabdullah> nathan7: versus the position that CS code examples in a js library's docs are a good thing
08:23 < nathan7> jesusabdullah: Yeah, that's shitty
08:23 < nathan7> I've been playing with Coco, I've prototyped a few published libs in it
08:24 < ljharb> in JS, when the father breaks his leg, the child's leg becomes broken. it's the reverse of "normal" inheritance.
08:24 < nathan7> but I've always translated it to plain JS once I got past the prototyping stage
08:24 < nathan7> ljharb: ..?
08:24 < nathan7> ljharb: You don't inherit upwards in classical inheritance
08:24 < ljharb> exactly.
08:24 < ljharb> nathan7: http://davidwalsh.name/javascript-objects
08:24 < ckknight> ljharb: actually, in classical inheritance, the father never existed, the concept of what a father is and the concept of what a child is as well as an instance of the latter concept exist, but no father need ever exist
08:24 < ssafejava_> ckknight: so instead, I always do ExtendedClass.super.initialize.apply(this, arguments), in case whatever ExtendedClass extends changes.
08:25 < ckknight> ssafejava_: if a class ever changed what it extended, I would never use that library.
08:25 < ljharb> ckknight: for classes, yes - my analogy applies to any inheritance tree, but not to a class by itself.
08:25 < ssafejava_> ckknight: hah I mean in my own code. if I reorganize, I'd like to have to change as little inside child classes as possible
08:25 < nathan7> ljharb: I'm missing your point
08:25 < Aktau> Hey guys, I just started with node, it's pretty cool. I had some js experience but I'm looking for the right way to do things. I'm making a small module that I can register a shutdown handler with that catches UNIX signals et cetera, and of course it's supposed to be a singleton: https://gist.github.com/5747261
08:26 < Aktau> At first I didn't understand why my routine wasn't called
08:26 < ljharb> nathan7: in classical inheritance, behavior goes right and down. in JS, it goes left and up. it's a reversed direction.
08:26 < Aktau> But then I realized "this" wasn't what I thought it was
08:26 < Aktau> So I used .bind(this)
08:26 < ckknight> ssafejava_: ah, I get it. Without a proper `super` call expression, it's a pain.
08:26 < Aktau> But it feels really ugly
08:26 < Aktau> Is this idiomatic?
08:26 < ljharb> nathan7: i'm just saying that most people who try to do inheritance in JS think about it like it's classical. and they end up designing crappy systems.
08:26 < nathan7> Aktau: It's not
08:26 < ckknight> Aktau: it is ugly, but it's fine
08:26 < nathan7> ljharb: Yes, it's delegation but not inheritance
08:26 < ssafejava_> ckknight: Exactly. It's a nitpick but it's a good enough reason for me to have `super` around. it doesn't hurt anything imo
08:27 < nathan7> I'm worried about what TC39 is doing with the super shit
08:27 < ljharb> nathan7: exactly. and once one knows that, one can use inheritance in JS and make great code. but that's such a rare occasion that "avoiding inheritance" is general good advice.
08:27 < Aktau> ckknight: ugly but fine reassures me quite a bit :). Are there good alternatives to my approach?
08:27 < ckknight> ssafejava_: when defining "classes" in JS, I always use an IIFE where the first parameter is the superclass
08:27 < ckknight> Aktau: lemme read your code
08:27 < ckknight> nathan7: me too
08:27 < ckknight> I wish that TC39 would just not put classes into JS
08:27 < nathan7> hm
08:27 < Aktau> ckknight: ok, fits on half a page and I hope it's not much of an eyesoar, go easy on me, I'm just starting with node :)
08:28 < ckknight> it conflates the headspace of the language
08:28 < nathan7> If it's pure sugar, I am okay with it
08:28 < ljharb> the ES6 class keyword is one of the worst things to happen to the language in awhile. it will make everything more confusing.
08:28 < ckknight> Aktau: change Daemon.prototype.register.call(this); => this.register()
08:28 < nathan7> super cannot be done as pure sugar
08:28 < ckknight> ljharb: oh yes
08:28 < ljharb> the syntactic sugar it defines is great. the word choice is awfu.
08:28 < ckknight> yeah, super has to be context-aware
08:28 < ljharb> *awful
08:28 < Industrial> ckknight: classes won't be their own types?
08:28 < ckknight> Industrial: what's a type?
08:28 < ljharb> Industrial: the ES6 class keyword changes nothing. it's just sugar.
08:28 < nathan7> Yeah, constructor would be nicer maybe
08:29 < Industrial> Number, Boolean, Function
08:29 < Industrial> :P
08:29 < nathan7> constructor Blah {} vs class Blah {}
08:29 < Aktau> ckknight: awesome, that was a holdover from me using inherits at the end of the file
08:29 < ssafejava_> Aktau: Re: the process.on() lines, 40-43, yeah, that's pretty much how you do it, unless you want to do `process.on('SIGINT', function(){ self.shutdown() });`
08:29 < nathan7> Industrial: Function.
08:29 < ckknight> Aktau: I would cache this.shutdown.bind(this), but aside from that, looks fine.
08:29 < nathan7> Industrial: class { constructor() { /* blah */ } } is the same as function() { /* blah */ }
08:29 < Aktau> ssafejava_: good to know :)
08:29 < Industrial> whats the point in doing that, why not just say it's something else that's not to be used as a function directly (but rather instantiated)?
08:30 < ckknight> nathan7: does it do anything for [[Construct]] vs [[Call]]?
08:30 < nathan7> Industrial: a constructor is a function in JS. deal with it.
08:30 < Aktau> ckknight: caching, duly noted and wil do, no need to waste resources, however tiny
08:30 < nathan7> ckknight: hm, maybe
08:30 < ckknight> Aktau: it's a minor thing, but something to catch early and get in the habit of
08:30 < Industrial> nathan7: I'm saying if you have the power to ah whatever nvm work to do.
08:30 < nathan7> ckknight: I figure there'd be a use strict, so undefined this is not replaced with global
08:30 < nathan7> Industrial: it'll break code
08:31 < nathan7> Industrial: adding a new typeof is not going to happen
08:31 < Industrial> l2update?
08:31 < Aktau> ckknight: thanks for pointing it out, already changed it and feels better now
08:31 < Industrial> (dont dont update)
08:31 < robmozart> how would you modify a positive number to be the same number only negative, and vice versa? look for a minus sign or lack of one?
08:31 < nathan7> Industrial: constructables are functions
08:31 < Industrial> or dont't*
08:31 < ckknight> nathan7: that still doesn't help in the case that you might not assign a property to the instance
08:31 < nathan7> robmozart: -Math.abs(x)
08:31 < robmozart> nathan7: thanks
08:31 < ckknight> Industrial: it's just the way Brendan Eich designed JS
08:32 < ssafejava_> Aktau: Also, you could just catch the 'exit' event, unless you have different behaviors for different signals
08:32 < ckknight> I wish `new` never was needed
08:32 < hipsters_> yes but brendan is also homophobic, you can't say he makes the best decisions 
08:32 < ckknight> he is?
08:32 < ckknight> ick
08:32 < Aktau> ssafejava_: I might in the future, the catchall is just because I'm starting to write it
08:32 < nathan7> He donated for the anti-gay-marriage proposition
08:32 < hipsters_> yes, he gave money against prop 8 or whatever it was in cali
08:32 < ckknight> and I never said he made the best decisions for JS, hipsters_
08:32 < nathan7> Yeah, prop 8
08:32 < nathan7> tbh, I think JS came out pretty well
08:32 < ssafejava_> nathan7: could've been a helluva lot worse given the time constraints
08:32 < jesusabdullah> I mean, reasonably well
08:32 < ckknight> yeah, it's LISP dressed up as C
08:33 < hipsters_> it could've been worse, it was done in a really short time
08:33 < ckknight> because closures are great
08:33 < nathan7> scheme dressed up as Java
08:33 < ckknight> nathan7: hehe, yeah
08:33 < ssafejava_> we sure as hell wouldn't have been able to get this far with a lesser language
08:33 < nathan7> and I <3 it
08:33 < ckknight> but scheme gets macros :'(
08:33 < ssafejava_> ckknight: macros would be the best thing ever for JS
08:33 < nathan7> Yeah, that one's a shame
08:34 < jesusabdullah> If I ever write an operating system it will be called macrOS
08:34 < ckknight> ssafejava_: I <3 macros in GS. ;-)
08:34 < nathan7> Replace CoffeeScript.. with a reader macro
08:34 < ningu> I don't know
08:34 < ckknight> I actually need to nail down the public API for those
08:34 < ningu> macros are awesome but they make code hard to read
08:34 < ckknight> nathan7: hehe
08:34 < ckknight> ningu: yeah, they really can
08:34 < ckknight> and they're really tough in a non-homoiconic language
08:34 < ssafejava_> ckknight: Right, I remember you mentioning macros a while back but I don't see any mention in the docs
08:35 < ckknight> ssafejava_: sadly they don't have a documented public API because it looks pretty terrible at times
08:35 < ningu> homoiconic?
08:35 < ssafejava_> yeah I can imagine it gets nutty
08:35 < nathan7> ningu: code is data is code
08:35 < ckknight> ningu: basically, code and data tokens are equivalent
08:35 < ckknight> in LISP, (1 2 3) is a list in memory, (+ 1 2 3) is a list in memory that I can evaluate to 6
08:35 < nathan7> ningu: in lisp, '(+ 1 2 3) is a data structure, which can be evaluated
08:36 < ningu> what does the single quote do?
08:36 < ckknight> turns it into (quote (+ 1 2 3))
08:36 < ningu> I learned a tiny bit of lisp but the single quote was always hard for me to totally grok
08:36 < ckknight> and quote is a macro that gives the literal version of its argument
08:36 < ckknight> ' is a reader macro, technically
08:37 < ckknight> there's also ` ,
08:37 < ckknight> some others
08:37 < nathan7> toSource q=
08:37 < hipsters_> i really like lisp but each time i try to get deeply into it i feel like it is making fun of me for not immediately understanding :(
08:37 < nathan7> I've been playing with writing a Scheme
08:37 < ckknight> wrt Brendan Eich and homophobia: http://www.smbc-comics.com/index.php?db=comics&id=3001#comic
08:38 < ckknight> nathan7: LISPs are fun to do. GS is very LISPy on its backend, it just happens to not require shift-9 and shift-0 as much
08:38 < hipsters_> hahah ckknight
08:39 < ckknight> very much a "mutton done up as lamb" kind of deal
08:39 < ljharb> NICE TRY TIME VOYAGER
08:40 < nathan7> ckknight: mhm
08:40 < Stumbler> hrrrm,  never done anything with printers before, about to learn all about it, any tips?
08:40 < nathan7> Printers as in 3D printers or what?
08:40 < ckknight> Stumbler: are you a time traveler, too?
08:40 < ssafejava_> Stumbler: abandon hope
08:40 < Stumbler> just regular office printer jobs
08:40 < ckknight> I think that's a yes.
08:41 < ckknight> Stumbler: I've never done printing in JS, but I've always used cups outside of it
08:41 < nathan7> 2D printers are from hell
08:41 < Stumbler> *nod* familliar with its cousin sips
08:42 < Stumbler> and, to answer your question ckknight... yes, I am in fact a time traveler!
08:42 < zomg> John Titor, is it really you?
08:42 < ckknight> passing out from a night of drinking whiskey is not time traveling.
08:43 < Stumbler> I'm not too good with the backwards thing yet though, and I can only go forward at normal speed :\
08:43 < ssafejava_> ckknight: damn you yes it is
08:43 < ckknight> Stumbler: yeah, I'm stuck at 1 second / second as well
08:43 < ckknight> though since I've grown older it's felt like it's going faster
08:43 < Stumbler> In fact, sometimes I think I'm on a delay
08:44 < Stumbler> that's probably just the whisky though
08:44 < ckknight> Stumbler: the human consciousness actually buffers its inputs at around 0.1 seconds
08:44 < Stumbler> oh, is that all?  All this time I thought I just had a bad isp
08:45 < ckknight> since we receive data at different rates, our brain makes it mesh up well by doing the buffering, but also making us oblivious that it's happening
08:46 < Stumbler> yah, I'd venture to say that it would be impossible to detect without tools in the first place.
08:47 < Stumbler> lol, wait, I just got that John Titor reference. XD
08:48 < ckknight> lulz
08:48 < jesusabdullah> ljharb: The <center> ?
08:49 < ckknight> I doubt we'll ever have backward time travel
08:49 < ckknight> I can pretty much guarantee we'll find a way to forward time travel, though
08:49 < Stumbler> I wonder if signals can be transmitted backwards though.  
08:49 < jesusabdullah> ckknight: three words: Self-Consistency Principle.
08:49 < jesusabdullah> also I'm travelling through time RIGHT NOW
08:50 < jesusabdullah> at 1s/s
08:50 < ckknight> Stumbler: given all our current science, it's unlikely, since we appear to be only observing half of the dimension of time (i.e. forward time)
08:50 < SomeoneWeird> <Stumbler> lol, wait, I just got that John Titor reference. XD < lol
08:50 < ckknight> jesusabdullah: both Stumbler and I already said that 5 minutes ago :P
08:51 < Stumbler> Have you seen the latest news on time obscurity based information security technology?
08:51 < jesusabdullah> Too bad.
08:51 < ckknight> Stumbler: no
08:51 < Stumbler> I don't understand a lick of it, but from what I read it's supposed to be able to trap information in pockets of time.
08:51 < jesusabdullah> also: process.prevTick
08:52 < ckknight> lol, jesusabdullah
08:52 < ckknight> it'd be so crazy to be able to send messages from the future into the past (in node.js)
08:52 < ckknight> or more specifically, receiving messages from the future
08:52 < Stumbler> http://www.nature.com/news/temporal-cloak-erases-data-from-history-1.13141
08:53 < Stumbler> I agree, and I think it would be even more plausible to be able to transmit signals backwards than matter.
08:54 < ckknight> yeah, I agree that it does seem more plausible to be able to transmit anti-photons or something like that through anti-time, but it still seems either at least terribly complex or simply infeasible.
08:56 < Stumbler> *shrug*  It's all science fiction to me, I think its a really fun concept to bend your mind around from time to time, but honestly, I'll tinker with it when I can download a lib from npm. :D
08:56 < ckknight> I need to start writing my science fiction novel
08:58 < Stumbler> I think software cultivating is a much more immediate possibility.  With the advances that have been made in quantum computing and all.  Brute forcing, or evolving algorithms like the produce industry refines strains of apple trees.
08:59 < ckknight> Stumbler: I still don't think that quantum computing can solve NP problems in P time, though.
09:00 < Stumbler> Either way, there are problems that can be solved in that way.   lots of them, enough to build an industry on.
09:01 < ckknight> definitely
09:01 < ckknight> though I think it's kind of at the stage that we were at in the 50s or so
09:02 < ckknight> mainframes existing, tightly controlled, no laymen would ever really interact with them
09:02 < Stumbler> Absolutely, and I know that, but there's still nothing stopping us from designing the software that would one day run on the equipment.   Who knows- we might even get to test it out when we're old men :D
09:02 < Vermicelli> Anyone here uses nginx in combination with node here?
09:03 < ningu> Vermicelli: most of us
09:03 < ningu> but few of us use vermicelli in combination with node
09:03 < booyaa|foo> lol
09:03 < Purefan> lol
09:03 < ckknight> when Vermicelli speaks, he makes me hungry
09:03 < ckknight> this has happened twice now
09:03 < ningu> hehe
09:03 < Purefan> lol
09:03 < Stumbler> XD
09:04 < jesusabdullah> I like pasta!!
09:04 < Hounddog> is there anything in express or such that would prevent the application to be called through an iframe?
09:04 < Hounddog> am thinking cross domain
09:04 < jesusabdullah> Vermicelli: Sort of. I've ran node and I've ran nginx separately, and using nginx to proxy to async servers such as node is relatively straightforward...and yet no, I haven't done it (yet).
09:04 < ssafejava_> Vermicelli: I have a few times
09:05 < ckknight> Hounddog: nope, nothing outside of standard HTTP stuff
09:05 < jesusabdullah> Vermicelli: It used to be that nginx didn't support websockets. I'm pretty sure it does now.
09:05 < Vermicelli> Anyone can suggest if it gives any performance benefits to serve static files with nginx?
09:05 < ningu> jesusabdullah: yes, as of 1.4.x
09:05 < Hounddog> ckknight: am trying to create a facebook app and getting an error that it cannot find / ... http://www.snipboards.com/dsffdsfs same error like this
09:06 < ssafejava_> Vermicelli: I find nginx is better tuned for that but I haven't benched it
09:06 < ckknight> Hounddog: and you're getting logs in your express?
09:06 < Hounddog> just a sec
09:07 < Aktau> It does now and I'm using it for that
09:07 < Vermicelli> Ohk, i read that in couple of blog posts 
09:07 < Vermicelli> but wanted to know if it does in reality
09:07 < Aktau> It also handles SSL and then passes the data on to node, works beautifully
09:07 < ningu> Vermicelli: it might be hard to measure, since there are a lot of variables
09:07 < Purefan> totally unrelated to the channel but I have benched NginX vs Apache for a PHP script, the only benefit I found was with over 1500 simultaneous connections: NginX would queue connections to FPM so it would make you wait but it would never hang, Apache did hang on more than one scenario
09:07 < ningu> Vermicelli: but I suspect nginx will win
09:08 < Aktau> Started using nginx about a month ago, I think I fell in love
09:08 < Hounddog> ckknight: i see that the / is comming by pos
09:08 < ssafejava_> Vermicelli: SSL or load balancing would be the reason to use it, otherwise I don't think it's worth the added complexity
09:08 < Hounddog> let me check something
09:08 < Aktau> Stellar performance, easy to configure and extremely low resource usage. What a win
09:08 < ckknight> Aktau: like you've been watching shadows on a cave wall
09:08 < ningu> yeah, I find nginx much easier to deal with than apache
09:09 < ningu> less to tweak, mostly just works
09:09 < Aktau> ckknight: I know about Plato's thought experiments, but I don't understand that reference :)
09:09 < ningu> some day I will have to pronounce it out loud as n-ginks just to confuse everyone
09:10 < Purefan> ningu: as long as it doesnt come out as "n-jinx" ;P
09:10 < ckknight> Aktau: I was suggesting that your eyes are open at what you thought wasn't even a possibility
09:10 < ckknight> ningu: isn't it "engine-x"?
09:10 < Hounddog> ckknight: i found the error... fcebook is sending a post instead of a get request
09:10 < ningu> ckknight: but are there more caves to come out of? like, just running directly on node? :P
09:10 < Purefan> damn FB!
09:10 < ckknight> Hounddog: alright, glad I could point you to figuring it out
09:10 < Vermicelli> so is it not a good approach to use it for serving static files?
09:10 < ningu> ckknight: sure, I'm just being strange
09:11 < Vermicelli> Won't it take some load off the node server?
09:11 < ckknight> ningu: yeah, could be, I think Plato discusses that
09:11 < Aktau> ckknight: very true. I wasl always a bit afraid of nginx despite hearing about its' supposed advantages. When I desisted and tried it, it was a bit magical. Not sure I'll be using apache much more
09:11 < Hounddog> ckknight: just why the hell do they do a post request to do a get...
09:11 < Hounddog> anyway
09:11 < ningu> Aktau: imo apache is only useful for legacy setups, cgi and the like
09:12 < ckknight> Aktau: yeah, at my last job we ended up switching everything to nginx (for our Python stack)
09:12 < ckknight> we had a .NET stack as well that obviously ran on IIS
09:12 < ningu> does .net actually have to run on IIS?
09:12 < ckknight> it's the best way
09:12 < ckknight> and really, IIS 7+ isn't half bad
09:12 < ckknight> 6 and below, ick
09:12 < ningu> I just fear lots of xml and/or gui config
09:12 < Aktau> Yea, had to use it once a long time ago, I guess it scarred me a bit
09:12 < ckknight> gui config
09:13 < ckknight> thankfully I never had to deal with that BS
09:13 < ckknight> the configuration of IIS, that is
09:13 < ckknight> I did do a bunch of .NET work
09:13 < ningu> I like config files in a simple DSL and <100 lines long :)
09:13 < ckknight> I like JSON
09:13 < ningu> not always possible, obviously
09:13 < ningu> oh, sure, JSON can work well
09:13 < ckknight> yeah
09:14 < ningu> I use JSON config for all of my node apps
09:14 < ckknight> ningu: you have to have the system to support all the use cases you'd want with having just data in JSON rather than code
09:14 < ckknight> or have it be simple enough
09:14 < ckknight> ningu: as well you should :)
09:14 < ningu> but for nginx config I don't think JSON would be as nice
09:14 < ssafejava_> JSON config is the best, I use an npm project called `opt` for some great command-line configuration and you're rolling
09:14 < ckknight> I use optimist mostly nowadays
09:15 < ningu> http://imgur.com/VdHbciF
09:15 < ssafejava_> hmm that one's new to me. i usually just copy/paste my 'opt' code nowadays... but the project's a little weird, for some reason it contains a request router (?)
09:15 < ckknight> ssafejava_: check out optimist.
09:15 < ssafejava_> so I can see why other projects are more popular.
09:15 < ckknight> it's tiny, short and suite
09:15 < ckknight> I was using 'cli' before
09:16 < ckknight> but it's pretty bloaty
09:16 < ckknight> oh goodness
09:16 < ckknight> I used 'suite' instead of 'sweet'
09:16 < ckknight> it's late
09:16 < ckknight> and I forgot the oxford comma
09:16 < ckknight> what am I coming to
09:16 < ssafejava_> hahaha
09:16 < Stumbler> *passes the coffee*
09:17 < gildean> imo it's easier to just edit the json by hand and then just require() it
09:17 < ssafejava_> optimist is nice. looks like it does the same thing as opt. I really like having `usage` config just in case
09:17 < ssafejava_> i usually forget what my code is doing after a week
09:17 < ckknight> gildean: referring to what?
09:17 < ckknight> gildean: oh, instead of command-line args?
09:17 < ckknight> I think it depends on the use case.
09:17 < ssafejava_> yeah then you're kind of stuck if you want to script your tools.
09:18 < gildean> ckknight: true, but in most cases you just want to set the configs once and then just use it
09:18 < ssafejava_> gildean: Yeah. I use both. json for most configuration, command-line for things that might change run to run
09:18 < ckknight> gildean: I'd still say it depends on the use case. For web apps, yeah, probably.
09:18 < gildean> you as in a passive sense
09:19 < ssafejava_> e.g. with `cluster` it's nice to be able to do `node server.js -c 4` for 4 cores
09:19 < ssafejava_> but then to be able to do `node server.js --standalone` if I want to hook it up to a debugger nicely
09:20 < gildean> sure, but if your app only takes in like one commandline argument, i tend to just read the process.argv
09:20 < ckknight> gildean: it's easy for apps to grow beyond that point
09:20 < ssafejava_> yuuup
09:24 < ljharb> jesusabdullah: http://stackoverflow.com/a/1732454/632724
09:24 < ningu> no one liked my goose
09:24 < donCams> .u
09:25 < jesusabdullah> ljharb: oh snap I'd forgotten about that!
09:25 < jesusabdullah> ljharb: in my case I wanted to parse nginx logs given the format string in the nginx.conf
10:02 < Stumbler> ugggghhhhh  <- said as teenagery as possible.   This installation is taking too long!  I hafta use the bathroom! I'm bored! Are we there yet!
10:15 < zenetik> hi, what's wrong with this code ? nodejs dns module bug ? https://gist.github.com/eviltik/5747723
10:17 < Tox> zenetik: the output is ok, you have to understand what async programming means.
10:17 < Purefan> Tox: beat me to it
10:17 < ningu> hehe
10:17 < ningu> me too
10:18 < Trangar> https://en.wikipedia.org/wiki/Asynchrony
10:18 < Purefan> http://www.sebastianseilund.com/nodejs-async-in-practice
10:18 < zenetik> i'm not agree
10:18 < zenetik> it's only append with dns
10:18 < Tox> no
10:19 < Trangar> zenetik, do you know what asynchronious means?
10:19 < ckknight> asynchronous*
10:19 < Trangar> ^  what he said
10:19 < Trangar> I can english very well
10:19 < Tox> it does apply to some asynchronous calls :)
10:19 < Purefan> lol!
10:20 < ckknight> asynchronish
10:20 < Trangar> asyncrigubefohergiubefs
10:20 < Tox> armishchronous
10:20 < Purefan> amishchronous!! lol!!
10:20 < ningu> athunkronous
10:21 < Tox> did you bite you tongue?
10:21 < Tox> +r
10:21 < ningu> chmod +r tongue
10:22 < Tox> (sometimes I do love this channel)
10:22 < ningu> zenetik: basically, the callbacks do not happen until long after your console.log()
10:23 < ningu> zenetik: that's what async execution means in node
10:23 < zenetik> bla bla
10:23 < zenetik> i know what async is
10:23 < Purefan> :?
10:23 < ningu> zenetik: you do not
10:23 < ningu> if you did, you wouldn't be asking this question
10:23 < zenetik> i made a mistake: my question is not the good one
10:23 < Purefan> I second Ningu on that... this is classical async
10:24 < zenetik> i was thinking that calling async or step was itself blocking the rest of the code
10:24 < zenetik> noob mistake
10:24 < Gottox> It would be easier to understand if async.js would call its callbacks via nextTick.
10:24 < Gottox> this would be more consistent, imho.
10:26 < zenetik> so
10:26 < zenetik> let's continue with stupid question
10:27 < Gottox> :D
10:27 < zenetik> got var foo = function() { return 'bar';}
10:27 < zenetik> how add async stuff in foo function without having to call foo(callback)
10:27 < ningu> zenetik: you can't
10:28 < zenetik> ok so i drink to much yesterday and today it's not a coding day
10:32 < zenetik> fuck myself so stupid today shit shit shit mpfff
10:32 < zenetik> #@!#!@
10:32 < ningu> ok then
10:53 < eins78> is there a common way to add http headers with the 'st'(https://github.com/isaacs/st) module? should i use a filter? seems like the only way to manipulate how a file is served, but i am not sure if it it the right way at all or if i am missing something.
10:54 < ssafejava> eins78: Just use the standard http module response.setHeader
10:54 < ssafejava> eins78: http://nodejs.org/api/http.html#http_response_setheader_name_value
10:55 < eins78> this would be my last resort, but since i am already using a module to serve static files…
11:20 < Multiply> Is there a lightweight process manager, built with node? Currently, I have a pool of say, 50 ports, each may run a specific node process or other program on that port. Some programs user serveral processes. I'd love to be able to simply spawn a process, maybe even in a "screen" with the process name and port as the title. And still be able to start and stop it, from node (ie. sending ctrl+c?)
11:21 < Multiply> use serveral*
11:23 < ningu> Multiply: you mean something like forever?
11:27 < Multiply> ningu, kinda yeah. What I have is multiple projects, where I listen for file changes to their project.json files, and in those, I define which domain they should run from. When a change is made, that requires the server to restart, it should unload it, and start it back up again, gracefully. Ie. by issuing ctrl+c.
11:28 < Multiply> Basically for proxying from port 80, out to serveral internal ports.
11:28 < ningu> Multiply: well you can do forever restart... but there's another module that does it without any downtime
11:28 < ningu> fugue, or up
11:28 < ningu> apparently
11:29 < Multiply> Remember, it not just for node processes.
11:29 < Multiply> it's *
11:29 < ningu> well you didn't say that
11:29 < Multiply> I did. :P
11:29 < ningu> oh, yeah, you did
11:30 < ningu> well, jesus works for anything, not just node processes
11:30 < ningu> forever does not
11:30 < ningu> dunno about the others
11:30 < ningu> jesus is also designed to be more scalable than forever for large numbers of apps
11:30 < ningu> but it does not have zero downtime reload
11:30 < ningu> I haven't looked at fugue or up
11:31 < accc> hi
11:32 < Multiply> ningu, this way I still have to provide a port, tho.
11:32 < ningu> eh?
11:32 < Multiply> But it's closer than anything so far.
11:32 < ningu> which way?
11:33 < Multiply> It's not really important, I suppose. I'll do the port management on my own, in a seperate node process.
11:33 < ningu> not sure what you're talking about. 
11:33 < Multiply> I don't want to care about which ports the processes are assigned.
11:34 < ningu> oh, I see.
11:34 < Multiply> I just want to know that directory A with hostname B, is proxied to from 80 to port C
11:34 < ningu> well especially if they are not all node apps, there isn't going to be some prefab thing to handle that afaik, but like you said you can make a port manager
11:34 < ningu> sure, but what's wrong with just making a json file with the mappings, or do you want them to be dynamic?
11:35 < Multiply> I just want them dynamic. Especially if I just prototype a new project, or a showcase. Or a gist.
11:35 < Multiply> Some projects only last a few minutes.
11:35 < Multiply> Only thing I define is the domain to proxy from, and a project name.
11:38 < Multiply> I guess what I could do, is make jesus (or another simple keep-running app) start the process. And if I change, or remove the project, it'll stop the jesus process.
11:38 < Multiply> And new projects are assigne the first available port. Removed projects, get their ports added to the end of the available pool.
11:38 < Multiply> assigned*
11:38 < ningu> sure
11:39 < ningu> you could just do it within (a fork of) jesus
11:39 < ningu> since it's a server running in teh background at all times
11:41 < Multiply> I'll finish the watching part first. Then I get to think a little bit about the rest. :)
11:41 < Multiply> Thanks.
11:41 < ningu> sure. :)
11:51 < sawbon3s> Top of the morning to you guys
12:02 < Industrial> Anyone use mocha? Say I want an instacne var available for all tests below a certain level (prototype constructor function test, so all moethod tests need this instance to operate on). How do i actually pass the instance to each test?
12:02 < Industrial> I only see beforeEach used with things like calling a database to perform setup, not actually passing a var to each test.
12:11 < Industrial> I guess
12:11 < gyovanni> hello here.
12:12 < Industrial> var instance;beforeEach(function(){instance=something;});afterEach(function(){instance=null;});
12:12 < gyovanni> lame question, how was called that npm packages, which prints nodejs logs through http..
12:12 < Industrial> gyovanni: npmjs.org nodetoolbox.org
12:12 < Industrial> search for log or http
12:12 < Industrial> its bound to be there :P
12:12 < gyovanni> nodetolbox doesnt work for me
12:13 < Gottox> it's .com
12:13 < gyovanni> and second question, is some of you commin to jsconf?
12:13 < Industrial> try using a search engine to find that search engine
12:13 < Industrial> seewhatididthere
12:13 < Industrial> herdyoulikesearchengines
12:14 < Gottox> anyway, seems down to me.
12:19 < gyovanni> oh
12:19 < gyovanni> so it was log.io I think!
12:24 < gaf> hey, does anyone have used https://github.com/kmalakoff/knockback for the frontend of a node app? trying to understand if is worthy learning...don't like that bit of cs though.. tsc :/
12:24 < zomg> Knockout is quite convenient in my experience if you're doing a lot of client side interaction
12:24 < gaf> mm, yes, i perceived that
12:25 < zomg> Before deciding on what to learn I would recommend taking a look at AngularJS as well though
12:25 < gaf> i'm quite about to learn knockout anyway
12:26 < gaf> yes, i was reading about angular a bit also, but "they say" it goes too much logic in the html, i'm not sure, i guess i would have to use it to know
12:26 < gaf> is a js cocktail of frmeworks :P
12:27 < zomg> Angular doesn't really do logic in markup
12:27 < zomg> It does data-binding in markup
12:27 < gaf> but thn, that is what ko does also, right?
12:27 < zomg> I guess there's also some view logic such as repeating an element to show a list of items, or showing/hiding an element based on some other value
12:27 < zomg> Yeah pretty much
12:28 < zomg> I personally find Angular somewhat more convenient but it probably has a bit more of a learning curve vs Knockout
12:28 < gaf> i really want to make small apps
12:28 < gaf> focus more on node, really
12:30 < gaf> zomg, and how angular would differ from ko?
12:31 < gaf> zomg, looking at this example, what you think could be a best fit? http://www.kitchenpc.com/
12:31 < medice> i think i'll stick with backbone
12:32 < gaf> is really just fetching recipies. and the ingredients lists updates when the recipies are selected or not
12:33 < gaf> that was made with yui
12:33 < jstream> I'm writing an irc bot using the node.js library and occasionally I get strings from the irc server that look like this: "\u0001ACTION 1ups Kraen\u0001"
12:34 < jstream> how do I get rid of those "\ u 0 0 0 1
12:35 < gaf> medice, what about https://github.com/kmalakoff/knockback ? seems a good mix :P
12:38 < zomg> gaf: well the main differences from my pov with angular and ko is that angular databinding works with pretty much any type, with ko you need to use the special observables
12:38 < zomg> gaf: plus angular provides some other features not in ko, and angular apps are easy to test with the bundled tooling
12:39 < medice> dunno.. had a quick glance at knockback too but it's so young and mixes the namespaces so ugly
12:41 < gaf> i guess i ust test drive all of them
12:41 < medice> and i think i might prefer not to define too much in dom
12:41 < gaf> must*
12:42 < gaf> me too, i would rather not much things on the dom. but that, might be a use case matter
12:42 < medice> sure
12:43 < zomg> Comparing to backbone in general I find the DOM binding is pretty good
12:43 < zomg> it makes it pretty damn easy if you ever need to shuffle around the elements or modify the DOM in any way really
12:43 < zomg> with Backbone (or other non-DOM-binding ones) you'd need to go to the JS code and sort out the selectors etc.
12:44 < zomg> but in angular I just move the binding attribute
12:47 < gaf> zomg, and to learn angular, is there a good support? i feel a bit odd trying to dig in backbone
12:48 < Agatka> just curious, can anyone explain why all three of `[] == []`, `[] < []`, `[] > []` return false, but `[] <= []` returns true?
12:48 < gaf> i mean, do mamma google spoon feed us :P
12:48 < gaf> ?
12:49 < BadDesign> Is anyone using MongoDb here?
12:49 < medice> Agatka: seems like a feature
12:49 < gaf> no, no one
12:49 < gaf> mongodb is not popular at all over these lands
12:49 < zomg> gaf: the angular docs are decent, their irc channel seems somewhat active as well so you can get questions answered
12:49 < ningu> personally I use mangodb
12:49 < Agatka> gaf: are you asking about angular or backbone?
12:49 < BadDesign> How do I remove all the documents from a collection and after that insert some document? call insert from the remove callback doesn't work
12:50 < BadDesign> *calling
12:50 < gaf> Agatka, just wondering what to learn
12:50 < AAA_awright> Agatka: The behavior of using inequality operators on objects like Arrays should be considered undefined, but the specifics are defined in the ECMAScript specification
12:50 < Agatka> BadDesign: there's no reason why that shouldn't work, unless you're not understanding the docs
12:50 < BadDesign> This doesn't work: collection.remove({w:1}, function(err, removedDocs) { assert.equal(null, err); collection.insert(init, { w: 1 }, function(err, result) { assert.equal(null, err);  }); });
12:50 < Agatka> AAA_awright: Ah okay. Do you know any resources on it? The inequality operators don't seem to follow any pattern no matter how illogical, unlike the usual type coercion done on other types
12:51 < phrearch> hey
12:51 < Agatka> BadDesign: what is the value of `init`
12:51 < AAA_awright> Agatka: Like I said, the ECMAScript specification http://ecma-international.org/ecma-262/5.1/
12:51 < phrearch> im trying to update a mongoose document, but somehow the value isnt saved. http://paste.kde.org/767978/
12:51 < BadDesign> Agatka: a JS object
12:51 < phrearch> new subdocs or delete (with splice) works fine though
12:51 < BadDesign> Agatka: JSON specifically
12:53 < BadDesign> Agatka: Call the script the second time it doesn't want to remove....
12:54 < AAA_awright> Agatka: Specifically section 11.8.5 the Abstract Relational Comparison Algorithm http://ecma-international.org/ecma-262/5.1/#sec-11.8.5
12:54 < Agatka> yes I see. I don't see objects/arrays really mentioned by name
12:57 < Agatka> BadDesign: I think you mean to call collection.remove() with only one argument. I don't see any options hash in the api
13:06 < aendrew> Anyone ever used nodegod? https://npmjs.org/package/nodegod -- how stable is it? It hasn't been updated in ~4 mo., is there anything similar to it that's more widely used within the Node community?
13:07 < gdbz> aendrew: http://mmonit.com/
13:11 < aendrew> gdbz: Hadn't seen that (Though had heard of Monit). Thanks!
13:33 < gaf> zomg, what if i wanted the frontend of my app for mobile devices, would still be suitable using angular?
13:34 < ningu> keep it to right angles on mobile
13:34 < gaf> ningu, what do you mean?
13:35 < ningu> all the way from 0 to 360 angularity might be too much for a phone
13:35 < gaf> i want to focus my node apps to mobiles and tablets, but not sure what to learn for the front end?
13:36 < ningu> gaf: to be serious for a sec, what you really want to worry about is client side rendering
13:36 < ningu> that can be pretty slow, in either angular or knockout
13:36 < ningu> i.e. template rendering
13:37 < gaf> yup, template rendering. i hear you folks with handlebars
13:37 < ningu> but you don't have to do it all in the browser anyway
13:37 < gaf> i made a node app with jade, but that renders on the server
13:38 < gaf> very simple
13:38 < ningu> well, angular just uses regular html but with custom tags
13:38 < ningu> it's effectively a templating system of sorts
13:38 < gaf> i see
13:39 < ningu> the more you make angular do the more you'll have to worry about performance, but it's a tradeoff since it lets you do more, obviously
13:39 < ningu> you can also render server side but just use angular for data bindings
13:41 < gaf> ok, i will read more about the subject
13:41 < gaf> i definetely want to focus on mobile, and simplicity
13:45 < SargoDarya> hey guys. I'm trying to do some load/bandwidth tests with socket.io-client and try to simulate lots of sockets. I'm aiming for about 5000 socket client connections but for some reason my console says this: Connections (Open: 211 / Connecting: 4789 / Failed: 0 / Errors: 0)
13:46 < SargoDarya> So it seems my local machine can only maintain 211 concurrent socket connections
13:46 < SargoDarya> any idea if I can increase that number somehow?
13:46 < bmatusiak_> i do
13:46 < bmatusiak_> add a IP and bind to that
13:46 < bmatusiak_> too
13:47 < nathan7> SargoDarya: require('http').globalAgent.maxSockets = Infinity
13:47 < nathan7> SargoDarya: does that help?
13:47 < nathan7> SargoDarya: (separately for https if you're using that)
13:48 < SargoDarya> Well, I don't think it's a serverside problem as we have about 150k concurrent users on our production system.
13:48 < bmatusiak_> nathan7 good call,  but you think adding another ip would also be more stable?
13:49 < aendrew> So, gdbz suggested mmonit, which costs €129. Anyone know of something similar and/or cheaper, or has had good experience with nodegod?
13:49 < nathan7> bmatusiak_: changes fuckall
13:49 < nathan7> mmonit?
13:49 < nathan7> The heck does that do?
13:49 < bmatusiak_> o its a process monionitor
13:49 < gdbz> aendrew: It's free?
13:49 < ningu> mmonit != monit
13:49 < bmatusiak_> for keeping processes up 
13:49 < ningu> apparently
13:50 < bmatusiak_> ningu ahh i c 
13:50 < ningu> don't ask about mmmonit, you can't afford it
13:51 < aendrew> Mmm, mmm, mmmmmmmmmonit. @gdbz: Is it? Doesn't seem like it… http://mmonit.com/shop/
13:51 < gdbz> aendrew: you want MONIT not mmonit :) 
13:51 < gdbz> https://amon.cx/
13:51 < gdbz> also a monitoring tool
13:52 < gdbz> aendrew: http://mmonit.com/monit/
13:52 < bmatusiak_> http://packages.debian.org/search?keywords=monit
13:52 < aendrew> gdbz: OH! Okay. That's helpful.
13:54 < aendrew> Cool, this is all a good start. Thanks everyone!
14:04 < redondo> On socket.io: how I block the client until a determined message arrives=
14:04 < redondo> ?
14:05 < bmatusiak_> authorization
14:05 < bmatusiak_> mabe
14:05 < bmatusiak_> another way is to have a setup message
14:05 < redondo> bmatusiak_, that sounds better.
14:06 < bmatusiak_> https://gist.github.com/bmatusiak/9e103da4148d589dcafe
14:06 < bmatusiak_> there you go
14:07 < bmatusiak_> redondo : !
14:08 < redondo> bmatusiak_, thanks. That will block the client until "onDoSomething"?
14:08 < bmatusiak_> that will block onDoSomething untill your call setup
14:09 < redondo> I'll try it, thanks
14:30 < jas-> Anyone super familiar with the connect session store functionality?
14:31 < bmatusiak_> why whats the question behind that?
14:32 < bmatusiak_> jas- !
14:32 < spion> what do you usually do when you're writing tests for a node-module that executes different code depending on available optionalDependencies?
14:32 < spion> my first idea is allow to fake the absence of the dependency using a global variable
14:32 < bmatusiak_> write a folder check
14:32 < jas-> bmatusiak_: I recently posted a new issue @https://github.com/senchalabs/connect/issues/819 and am attempting to expose the session.regen() functionality to the custom session store
14:34 < bmatusiak_> jas- you should gist your custom store
14:34 < jas-> bmatusiak_: https://github.com/jas-/myTFH-node/blob/master/libs/sessions.js
14:36 < jas-> bmatusiak_: It uses stored procedures to transparently encrypt/decrypt session data (https://github.com/jas-/myTFH-node/blob/master/database/sp-sessions.sql)
14:37 < jas-> bmatusiak_: Everything works unless I try to use the connect.js session.regen() function. The cookie and server side session awareness gets lost and I am not quite certain how I should over come this
14:38 < bmatusiak_> jas- 1 sec im reading on this
14:39 < jas-> bmatusiak_: No worries, I have tried using the req.session.regenerate() as well as the req.session.reload() to update the server side cookie with the newly generated cookie to no avail
14:39 < bmatusiak_> jas- https://github.com/senchalabs/connect/blob/master/lib/middleware/session/store.js#L39
14:40 < bmatusiak_> it looks like the store deletes the session on regen
14:41 < jas-> bmatusiak_: So it will essentially wipe any existing session data? Hmmm, I thought a regeneration of a session ID would copy any existing session data to the newly generated id
14:41 < bmatusiak_> it resets destroys the session and recreates it
14:41 < bmatusiak_> so different session id and data with in it
14:42 < jas-> bmatusiak_: Well looks like this is a problem in regards to handling session fixation & session replay attacks where existing authentication credentials exist
14:43 < jas-> bmatusiak_: I should have picked up on that line of code before asking here, thanks!
14:43 < bmatusiak_> np
14:44 < bmatusiak_> i would let the session live untill it life-time ends jas-
14:44 < bmatusiak_> over write the property instead
14:45 < bmatusiak_> like session.login = {id:userID}     then  session.login = false
14:46 < jas-> bmatusiak_: That defeats the purpose of defending against session replay & session fixation attacks... each authenticated page should be changing the session id while preserving any existing session data
14:47 < bmatusiak_> ahh i c
14:47 < bmatusiak_> i know what you need
14:47 < bmatusiak_> ill gist it
14:48 < jas-> bmatusiak_: https://www.owasp.org/index.php/Session_hijacking_attack & https://www.owasp.org/index.php/Session_fixation
14:51 < bmatusiak_> jas- https://gist.github.com/bmatusiak/6ee026b1c345768fef4b
14:51 < jas-> bmatusiak_: I think the best solution would be to modify the line you linked to first generate a new id, copy the existing session data then destroy the old id
14:51 < bmatusiak_> thats what i just did in the gist lol
14:52 < jas-> bmatusiak_: Well thanks for that, I will go ahead and plug it in and try it out... thanks!
14:52 < spion> bmatusiak_, how does a folder check help with testing optionalDependencies?
14:53 < spion> by testing I mean unit testing, and I mean simulating the absence of the optional dependency
14:53 < bmatusiak_> theres a plugin for that but i dont recal what it is
14:54 < bmatusiak_> or where i seen it
14:54 < bmatusiak_> srry
14:55 < bmatusiak_> i always just ran test if the dependencie was there if not skip :/
14:56 < bmatusiak_> i did this once for a windows test
15:11 < kelt> hi... I'm wondering if I have a file called blog.js and it has app.model.Blog = Backbone.Model.extend({ ...});  where app is a global variable initalized in another file... my question is this... I'm trying to do a mocha test for blog.js ... how can I get it to stop giving me an error:  ReferenceError: app is not defined ?
15:11 < niggler> kelt #documentcloud
15:11 < kelt> is there a way to do like require('blog.js', [ global app var?] ); 
15:12 < kelt> niggler: it's not really a backbone problem... it's the fact that app is a global variable and I don't know how to require this blog.js 
15:13 < niggler> I'm not familiar with backbone, but i would imagine the structure is such that blog.js exports a function you can call
15:13 < niggler> and you would call that function
15:14 < niggler> *pass the app variable to the function
15:16 < kelt> niggler: let's say it was just a blog.js with this: app.model.Blog = {};
15:16 < niggler> if blog.js only had that line, it would complain that app wasn't defined if you required it
15:16 < niggler> regardless of whether it's in mocha
15:16 < kelt> when I do var blog = require('../reader/models/blog.js'); it gives me an error ReferenceError: app is not defined
15:16 < kelt> niggler: yes... 
15:16 < kelt> niggler: so how do I pass it the app variable?
15:16 < niggler> so ostensibly you would wrap that in a function
15:17 < kelt> niggler: I would have to refactor blog.js?
15:17 < niggler> module.exports = function(app) { app.model.Blog = {}; }
15:17 < niggler> for example
15:17 < niggler> that's in blog.js
15:17 < niggler> then you do var blog = require(...)
15:17 < niggler> and then blog(app)
15:18 < kelt> niggler: this application is not a nodejs app by the way... it is just a bunch of javascript code for a web browser... and I'm wanting to try and test it
15:18 < niggler> oh so it probably expects to be called sequentially
15:18 < niggler> the require semantics don't work the same way
15:18 < niggler> you could hack it together with vm.runInThisContext iirc
15:18 < kelt> niggler: yes... in the index.html it has a bunch of <script src=app.js> and <script src=blog.js> ...
15:19 < niggler> ah ok
15:19 < kelt> niggler: so I'm just trying to test that it works... lol
15:20 < niggler> you alternatively could eval the code
15:20 < niggler> lastly you could just cat the code
15:21 < Nnubes256> Doing an eval() in a website script is extremely unsafe
15:22 < Nnubes256> Anyone could modify the eval() statement for put arbitrary code in the server
15:22 < slide> Anyone know if less.js has a channel?
15:23 < niggler> Nnubes256 you have a set of scripts that expect to be invoked as if they are in the browser.  Without modifying the code, how would you run it in node?
15:23 < Nnubes256> Anyone could modify the code, as you say
15:24 < kelt> niggler: so if I want to refactor the code ... so that it is testable... I need blog.js to create a module?
15:24 < niggler> you either need to make it follow the nodejs module style (so you can use require) OR you can just eval
15:24 < kelt> niggler: like, I don't know how to get Backbone into blog.js ... when I call require('blog.js') in my test... it complains about Backbone not being defined too...
15:25 < niggler> right kelt that's because you are trying to use nodejs require with scripts that were designed for the browser scoping rules
15:25 < niggler> so you either have to modify it or run it in a way that does obey those rules
15:26 < niggler> the latter is 'eval', which was my point Nnubes256 
15:32 < kelt> niggler: I'm trying to find docs on a best practice... 
15:32 < niggler> are you free to modify the code?
15:32 < Kosch> re
15:33 < nathan7> kelt: best practice? browserify or component, use require() in the browser too
15:33 < niggler> does jquery or underscore use browserify or component?
15:34 < kelt> niggler: yeah, I can refactor the code
15:34 < nathan7> niggler: they'll work with them
15:34 < nathan7> niggler: they do the module system magic dance
15:35 < Kosch> How can I avoid that forever starts same script in a separate process multiple times? For example in case of runlevel script.
15:36 < niggler> ooh when did they add that nathan7 ?
15:36 < nathan7> niggler: forever ago
15:37 < nathan7> niggler: it's at the bottom
15:37 < niggler> ah yeah i see it now
15:40 < jas-> bmatusiak_: Sorry, what is the URL for that gist again?
15:42 < bmatusiak_> https://gist.github.com/bmatusiak/6ee026b1c345768fef4b
15:42 < bmatusiak_> jas- !
15:43 < jas-> bmatusiak_: Thanks!
15:52 < Wouter> Hello
15:56 < Wouter> I'm having a little problem. I need to access a small node.js app (work in progress) from anywhere on the internet, however I can only access it locally with localhost:port or in the same network local_ip:port but not my global_ip_on_the_web:port. How can I solve this? I'm on Ubuntu 12.04
15:57 < hipsterslapfight> unblock your ports
15:57 < zomg> Wouter: by "same network" I assume you are on a local network and thus behind a NAT?
15:57 < Wouter> How? (I'm rather new to ubuntu or linux)
15:57 < Wouter> Yes zomg
15:57 < zomg> Have you set up port forwarding?
15:58 < Wouter> Erm, no? How do I do that?
15:58 < zomg> That would depend on what type of router you have
15:58 < jas-> Wouter: Check for host based firewall, as well as non-routable IP address space & port forwarding (as zomg suggested). 
15:59 < Wouter> Ok, thanks for the advice, will note that down to check later, got to go
16:06 < FunnyLookinHat> Anyone here have a good example for structuring code when building a REST api with something like express?  I'm trying to keep the amount of requests scripted / handled per file to a minimum
16:06 < FunnyLookinHat> And yes - I've googled all of the basic results :)
16:06 < rhalff> any of you have mysql node experience?
16:07 < niggler> rhalff mscdex might be awake
16:07 < rhalff> trying to do a conversion to mongodb, but the mysql just hangs in my callback
16:07 < niggler> what module are you using rhalff 
16:08 < rhalff> niggler, mysql which is node-mysql
16:09 < rhalff> niggler, what is the favorite paste bin of nodejs?
16:09 < niggler> hastebin.com rhalff 
16:11 < rhalff> niggler, uh, jikes, how to remove from hastebin?
16:11 < rhalff> yet again I've pasted my credentials :D
16:11 < niggler> it disappears after some time
16:11 < niggler> i think nowadays its 1 day
16:11 < niggler> it used to be 30 days
16:11 < niggler> rhalff just don't post the url anywhere
16:11 < rhalff> niggler, http://hastebin.com/xiviyohume.js
16:12 < rhalff> it hangs when I run the script.
16:12 < gildean> rhalff: at that point you have to consider the credentials compromised and change them
16:12 < rhalff> the database is big, but even with just 100 results it hangs at the last entry
16:12 < niggler> that's true in general regarding the internet gildean 
16:13 < niggler> rhalff where does it hang?
16:13 < niggler> does it save 99 entries?
16:14 < rhalff> finished is never reached
16:14 < rhalff> even if I put limit 100 in the sql
16:14 < niggler> on the mongo side, do you see all the results saved?
16:15 < rhalff> limit 2 also hangs, displays 2 and hangs.
16:15 < rhalff> hmz
16:15 < niggler> poem.save should be async
16:17 < rhalff> niggler, maybe my drop collections doesn't work, because when I do limit 2, mongo tells me there are 802 docs in the database.
16:18 < rhalff> it almost seems like promises, they always fail somewhere also and if you don't catch them they are hidden.
16:18 < gabrielstuff> hey guys
16:19 < gabrielstuff> little question, I have an app with web socket (not socket.io) and I'd like to implement some kind of auth protocole.
16:19 < gabrielstuff> something like
16:19 < gabrielstuff> client connect
16:19 < gabrielstuff> send a token
16:19 < gabrielstuff> if token know
16:19 < context> socket.io / sockjs have ways of doing that dont they
16:19 < gabrielstuff> (not socket.io) 
16:19 < gabrielstuff> :)
16:19 < gabrielstuff> as said
16:19 < gabrielstuff> the client is in C++
16:19 < gabrielstuff> and socket.io c++ was kind of really buggy
16:19 < context> then you just need to keep track of the state for each connection
16:20 < gabrielstuff> keep track ?
16:20 < gabrielstuff> what do you mean ?
16:21 < context> you need to keep track of whether the connection is authenticated or ot
16:21 < context> not
16:21 < context> or instead of implementing your own maybe fix socket.io's c++ client and send a pull request
16:21 < gabrielstuff> hehe :)
16:21 < gabrielstuff> yes
16:21 < gabrielstuff> thing is
16:21 < gabrielstuff> socke.io fix is for later
16:22 < gabrielstuff> short time frame project
16:22 < gabrielstuff> already fix a lot
16:22 < gabrielstuff> in websocket C++ lib
16:22 < gabrielstuff> so, to get back on this, how should I know the difference between each connection ?
16:22 < gabrielstuff> I have a client array
16:23 < gabrielstuff> of client that contain socket
16:23 < gabrielstuff> and other stuff
16:23 < gabrielstuff> but I do not see any way to differentiate 
16:23 < context> in that object you need to keep track of the auth token if/when sent
16:23 < context> or whatever you want to store in there
16:23 < context> if no auth token, not authenticated yet
16:26 < marklubi_> niggler:  did you find out any more regarding the net.Server memory leak that we were chatting about last night?
16:26 < niggler> ill look into it later tonight marklubi_ 
16:27 < marklubi_> ok, thanks
16:30 < rhalff> does node understand exit, or maybe process.exit() ? just for debugging.
16:31 < rhalff> it's just one script, I know I can use breakpoints (which I actually never use, but should... :-))
16:31 < sinclair|net> niggler: ever done anything with phantomjs?
16:32 < niggler> not directly sinclair|net (I've used casperjs which sits atop phantoms)
16:32 < sinclair|net> niggler: what did you use it for?
16:33 < sinclair|net> niggler: im somewhat new the whole headless browser concept, seems to open up a lot of interesting options for stuff, 
16:34 < niggler> well i wanted to test some javascript stuff
16:34 < niggler> then i found node
16:34 < niggler> and its far easier to use node to test pure JS stuff than casperjs
16:34 < sinclair|net> niggler: soo, you don't think its worthwhile using phantom for anything else?
16:35 < niggler> i see the merits, but i generally found that stuff that works in node also works in chrome (within reason)
16:35 < niggler> obv fs.readFile fails
16:35 < niggler> but the only browser i cared about testing was IE
16:35 < sinclair|net> niggler: umm, 
16:36 < niggler> and you can't use phantomjs for testing IE
16:36 < NotMyself> so my team is evaluating project tracking software, so far the list is Pivotal, Trello, AgileZen and YouTrack anyone have suggestions or other options we might checkout… focus on lean/agile not a lot of ceramony.
16:36 < sinclair|net> niggler: i was thinking it might be possible to use the rendering capabilities to do fancy things on behalf of a front end user
16:36 < niggler> you could take screenshots 
16:37 < sinclair|net> niggler: um
16:37 < niggler> NotMyself have you considered a flat file?
16:37 < NotMyself> niggler: sadly we need something a little more company facing
16:37 < sinclair|net> niggler: afaik, phantomjs gives you access to a dom too right?
16:37 < niggler> yeah sinclair|net 
16:37 < niggler> i think there's a dedicated channel for it
16:39 < niggler> NotMyself lol there's a 60% chance you will be so frustrated with what you choose that you'll consider writing your own
16:39 < NotMyself> niggler: there is a sad truth in that statement...
16:41 < niggler> trello is free iirc
16:41 < niggler> so you might as well start there
16:41 < rhalff> niggler, even this hangs: require('mongoose').connect( 'mongodb://127.0.0.1/gedicht_nu' );
16:42 < niggler> so rhalff lol its mongoose that's failing
16:42 < niggler> what is the mongo server saying?
16:42 < rhalff> niggler, uh, nothing, the db is there, and localhost or 127.0.0.1 doesn't matter either
16:43 < niggler> is it reporting that a connection was attempted?
16:43 < niggler> are you running mongos?
16:43 < rhalff> niggler, reporting nothing just hangs.
16:44 < niggler> lol this may be a configuration issue with your mongo setup
16:44 < niggler> i know enough mongo to know to avoid it :P
16:44 < rhalff> niggler, ok, thanks anyway
16:44 < niggler> check out #mongo or whatever their irc channel is
16:44 < jaCen915> i think its mongodb
16:45 < niggler> jaCen915, our resident mongodb expert, can help you out rhalff 
16:45 < jaCen915> haha
16:45 < rhalff> can somebody confirm that that one liner hangs ?
16:45 < jaCen915> rhalff: #mongodb
16:46 < russfrank> rhalff: what were you expecting it to do
16:46 < rhalff> pff, strip everything from core so you can redirect to other channels huh :-) ok, understood.
16:46 < russfrank> its just gonna connect and wait for you to do something
16:46 < rhalff> russfrank, well not to hang at least. give me some error
16:46 < russfrank> are you not runnig a server?
16:47 < wc-> NotMyself: pivotal is pretty cool if you have a decent sized team, multiple ongoing projects, etc
16:47 < russfrank> why would you expect it to error
16:47 < russfrank> it probs does some kinda lazy connect thing
16:47 < rhalff> russfrank, yeah I can just connect to it with `mongo`, but even if it doesn't exist it shouldn't hang
16:47 < wc-> personally i use trello but im just a 1 man operation and i can do what i need to do via the trello boards
16:49 < russfrank> rhalff: once you open the connection its probably keeping node from exiting
16:50 < rhalff> russfrank, maybe it's because how node works, but it is still weird.
16:50 < brostachio> what's a good framework to use with express to enforce basic mvc. I have a pretty large (line number) but relatively small (thick client, thin server) application
16:51 < rhalff> it wants to keep the connection open I guess, so it can serve along during it's long lifetime.
16:51 < niggler> brostachio do you actually want mvc or something like mvvm or mvp or mva 
16:51 < rhalff> but all you see is something hangs and this is just a short script
16:51 < brostachio> niggler, mv* would be fine, just want to enfoce some seperation of logic and data
16:52 < russfrank> rhalff: its because of the event loop nature of node
16:52 < niggler> brostachio i think the flavor of the month is angular
16:52 < brostachio> most of the data gets pushed into JSON so there's not much V going on
16:52 < russfrank> for example this one liner also doesnt exit:   process.stdin.resume()
16:52 < brostachio> cool, i'll check it out. ty
16:52 < rhalff> russfrank, hmz, how about idle ticks, so at least I know I'm not giving it any.
16:54 < niggler> they also have an active support group
16:58 < rhalff> for me idle ticks would probably be embarrasing.. :p for others it could be shut off.
16:58 < rhalff> on('idle', notifyMarketing)
17:10 < rhalff> ah, I never disconnect from mongoose only from mysql
17:13 < moscownights> geve all
17:13 < moscownights> i decided server side js is not scary and I should learn more about npm
17:14 < moscownights> small steps though, Ive started with trying to implement socketio on project im working on, client side only, for now
17:14 < moscownights> i had it working, was communicating with flask using gevent-socketio
17:15 < moscownights> and now I have changed something somewhere, and socketio isnt working anymore, I am getting the following error: "failed to require "socketio" from "root".
17:16 < moscownights> ive googled the error but most results seem to be about fixing problems server side
17:16 < moscownights> well, I feel stupid now, the Sherlock in me thinks it must be something I did on the flask side of the app as well
17:16 < moscownights> hehe
17:16 < moscownights> thanks all, imma see what i fuxed up
17:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:19 < rhalff> what is flask?
17:19 < rhalff> oh, python microframework
17:21 < FunnyLookinHat> Anyone here have a good example for structuring code when building a REST api with something like express?  I'm trying to keep the amount of requests scripted / handled per file to a minimum - ideally one route per file
17:21 < rhalff> moscownights, anyway, if you have require errors you just have path issues.
17:24 < rhalff> FunnyLookinHat, the one thing I need is one model standard for all javascript, and one validation library for all, just change names everybody and get done with it.
17:24 < FunnyLookinHat> rhalff, I hear ya
17:25 < rhalff> FunnyLookinHat, yeah and it's simple, they all look a-like anyway. 
17:25 < FunnyLookinHat> Unfortunately JS doesn't have any major structure in itself, so it doesn't lend well to any particular design theory :)
17:26 < rhalff> FunnyLookinHat, not only js, just any language all need to solve the same problem
17:26 < FunnyLookinHat> heh
17:26 < rhalff> already solved long ago.
17:26 < kelt> hi... I'm trying to npm install jQuery and I get this error with cssstyle (I'm in windows...)
17:27  * _re Does Node.js really follows NON-BLOCKING ?
17:27  * tuhoojabotti blocks
17:27 <@mbalho> _re: http://nikhilm.github.io/uvbook/
17:28 < Anduck> hi!
17:29 < Anduck> i've got sub sql queries...
17:29 < shanse> cool
17:29 < Anduck> looks like that when i do for (i in results) { console.log(i);
17:29  * _re I was working on Node.js stumbled upon a block of  Code where it Followed Synchronous Behaviour
17:29 < Anduck> it just prints all the i's the query returned and uses the last i for the code after console.log
17:29 < rhalff> who could standarize validation, w3c maybe?
17:30 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:30 < Anduck> so i think this've got something to do with the async nature... so wat to do
17:30 < _re> Node.js dont follow Asynchronous ALL THE TIME
17:30 < jcrugzz> _re: depends how the code is written
17:31 < Anduck> well i've got for (i in results) { 
17:31 < _re> I have never used Synchrounous behaviour in the Code
17:31 < Anduck> and in the loop, i've got more queries
17:31 < Anduck> and it seems to run those inside-loop queries only with the last result of the before-loop query
17:31 < _re> Still it gets blocked
17:31 < _6a68> rhalff: OWASP has some good best practices docs around validation and web app security
17:33 < ljharb> Anduck: use Object.keys(results).forEach instead. a for..in loop will iterate over the object prototype
17:33 < Anduck> ok, uhh.. i'll try that, thx
17:33 < ljharb> Anduck: also, using an iterator will avoid the scoping issues you mentioned.
17:33 < Anduck> hmm ok
17:33 < ljharb> Object.keys(results).forEach(function (key) { results[key] })
17:34 < rhalff> _6a68, my point is that all model implementations look alike, and validations for many types have already been solved years ago. I like regexp, i'm not even that good at it, but I recognize the problems for many validations where already solved.
17:34 < Anduck> well i made for (var i=0; i<AllResults.length; i++) { and using AllResults[i] in the next queries
17:34 < Anduck> whats shitting this code? 
17:34 < Anduck>  ijust want to know
17:35 < Anduck> shouldnt it call all those inside-loop queries with each i
17:35 < rhalff> _6a68, and if you decided to create a language _6a68bly, you could just get all those validations and model standards as a head start.
17:35 < ljharb> Anduck: then do allResults.forEach(function (result) {})
17:35 < Anduck> ok
17:36 < ljharb> Anduck: part of your problem is that javascript has function scope, not block scope.
17:36 < Anduck> huh.. ok
17:36 < ljharb> Anduck: but in general, using iterators will be cleaner and more expressive.
17:36 < ljharb> and since you're making a function, you won't run into that scoping issue as often.
17:36 < Anduck> could you give me an example of iterator or is the iterator forEach(function (result) {}) ?
17:36 < ljharb> forEach is a method on arrays
17:36 < ljharb> [1, 2, 3].forEach(function (value, index, array) { });
17:37 < ljharb> that will run that function for each item in the array, as you'd expect.
17:37 < Anduck> so... how should i use iterator?
17:37 < Anduck> yeah
17:37 < ljharb> i just told you
17:37 < ljharb> try [1, 2, 3].forEach(function (value, index, array) { console.log(value); });
17:39 < Anduck> ok i'll try it
17:41 < Anduck> yay
17:41 < Anduck> seems to work so far, ljharb. thanks
17:42  * rhalff validate your validations, I dare the world to come up with more than a thousand, without going niche.
17:43 < _6a68> wheeeeee!
17:43 < rhalff> .split()
17:43 < _6a68> rhalff: personally I'd not try to begin by enumerating all possible validations and models. however, I tend to build products, not frameworks/libraries. 
17:44 < _6a68> rhalff: I'd say prototyping a solution would be the way to get your particular ball rolling :-)
17:44 < _6a68> well, "a" way to get going.
17:44 < _6a68> not necessarily the right/best/only way.
17:44 < rhalff> _6a68, I just wanna make the world go forward, I guess that's why I'm unemployed :p
17:46 < _6a68> rhalff: heh. most hackers want what you want. getting there is the hard part.
17:47 < rhalff> _6a68, I know enough, I just can't translate it into money
17:49 < rhalff> You can drop me anyware, in any situation, i could probably solve it, but it doesn't mean I wanna do that job.
17:51 < ssanders> I am streaming MJPEG frames from a source camera to many clients, is there a way in node 0.10 to tell when one of the clients is slow and I can drop frames, without resorting to pull/poll?
17:52 < _6a68> rhalff: heh. mozilla's hiring, fwiw ;-)
17:53 < rhalff> _6a68, what is the coverage of mozilla at the moment vs webkit/khtml
17:54 < _6a68> coverage?
17:54 < rhalff> _6a68, I'm dutch, maybe my wording is incorrect.
17:54 < _6a68> sure, no worries. you mean, like, market share?
17:54 < rhalff> yeah
17:54 < Mr_Mas___> :)
17:54 < Mr_Mas___> im also dutch :)
17:54 < _6a68> the numbers vary wildly depending on who is making the claims
17:55 < Havvy> _6a68: Hundreds of millions of users?
17:55 < _6a68> the important thing (for me personally) is that there is exactly one open-source user-centric mainstream browser
17:55 < _6a68> the others are all controlled by corporate interests.
17:55 < rhalff> _6a68, but safari/apple is webkit and android, or am I mistaking
17:55 < _6a68> apple doesn't allow firefox on its platform, which is why there's no FF on iOS
17:55 < _6a68> google -> android, safari -> iOS.
17:56 < Havvy> Android browser, Safari, and Chrome are Webkit
17:56 < _6a68> google just forked webkit provoking much consternation
17:56 < Havvy> Though Chrome forked Webkit to be Blink
17:56 < _6a68> yeah, webkit-dev sure got noisy that week
17:56 < _6a68> rhalff: but anyway, I hack on web stuff, not the FF internals
17:56 < Havvy> And Opera decided to become Webkit.
17:56 < rhalff> _6a68, me neither.... :-)
17:56 < _6a68> rhalff: and you could too! we use py and node. take heart, you can find rewarding work :-)
17:57 < rhalff> _6a68, beam me up scotty
17:58 < _6a68> heh
17:58 < rhalff> nevermind
17:58 < brostachio> can i use express to say- if the user goes to any directory in myapp.com/appOne use this router and if they go to any directory in myapp.com/appTwo use this other router adn so on and so forth?
17:59 < rhalff> brocken, ofcourse and much more also
17:59 < brostachio> rhalff, i'm having trouble figuring out how to get there
18:00 < brostachio> i know i can do app.all('/appOne*') but not sure what to do from there
18:00 < kelt> ah, gawd... I guess I'll just shell into my ubuntu box for all my npm stuff... can't even get jQuery on npm in windows... what kind of crap is that? lol...
18:02 < rhalff> brostachio, you are referring to myapp.com/ that's virtual route or something?
18:03  * rhalff can't believe 1010 are idleing.
18:04 < Havvy> Entirely easy.
18:05 < rhalff> Havvy, you ain't Havvy you're my brother :p
18:05 < Havvy> No, I'm not your brother.
18:05 < rhalff> Havvy, why not
18:06 < Havvy> Because I have one brother, and he'd have absolutely no reason to join this channel.
18:06 < Havvy> And he uses a different nick than you do.
18:06 < Havvy> Also, your in the wrong country.
18:06 < rhalff> Havvy, ok, good explaination /spellcheck/
18:07 < Havvy> you're*
18:08 < rhalff> brother has a two fold definition you took one, I meant the other.
18:21 < rhalff> for me mozilla is to low profile at the moment, but that's just my perception.
18:23 < _6a68> rhalff: things become high profile by building great stuff and spreading the word. it doesn't just happen, you make it happen.
18:23 < _6a68> :-)
18:26 < eighty4> Really noob npm question. Playing around with creating a new npm package and just tried to drop my folder into node_modules and doing a require on the name of the folder. But that didn't work. What would I need to do?
18:26 < moscownights> m
18:26 < rhalff> _6a68, I don't have enough friends or connections to spread the word .
18:26 < moscownights> g
18:26 <@mbalho> eighty4: you need: node_modules/foldername with package.json with {"name": "foldername", "version": "something"}
18:26 <@mbalho> eighty4: and index.js
18:27 <@mbalho> eighty4: or just do npm init in the new folder to have npm make the package.json for you
18:28 < eighty4> mbalho: yeah have all that, except for index.js :) it was named folder.js
18:28 < eighty4> mbalho great! that did it. Thanks
18:30 < fryck> I found this post very interesting http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product/
18:30 < fryck> but i not understand all what author said
18:31 < fryck> He deals with use Backbone on client & server side using Node.js
18:31 < fryck> and express
18:32 < _6a68> fryck do you have a question about it?
18:32 < rhalff> fryck, question is?>
18:32 < _6a68> heh
18:32 < fryck> Yes, i not really understand (in details) what is rendering client side and server side
18:33 < fryck> (sorry for my bad english, i'll try to be explicit) :)
18:33 < fryck> I know that Backbone is full client side framework, using Router and DOM manipulation
18:33 < rhalff> fryck is not a spambot *confrimative* :-D
18:33 < _6a68> fryck: instead of waiting for the browser(client) to download, parse JS and then render HTML, you pre-render on the server and send down generated HTML 
18:34 < _6a68> fryck: after rendering the first view on the server, you can let the client-side framework take over
18:34 < fryck> So we pre-render content in Node.js thanks to express for example
18:35 < _6a68> fryck: you could pre-render using any server-side JS, rhino on JVM or node.js using v8 for a C stack. 
18:35 < eighty4> Looking at some package.json files I see a couple doing this: "main": "colors". Reading up on package.json it only say it's possible but not really if it's preferable. Any drawbacks on doing it?
18:35 < fryck> _6a68: ok it is more clear
18:35 < _6a68> fryck: I don't think it has anything in particular to do with node or express, those pieces are orthogonal
18:35 < _6a68> :-)
18:37 < fryck> The dev team of Air BnB developed a framework called "Rendr" which allow you to use backbone in both client & server side
18:37 < fryck> it's good idea, i think
18:39 < rhalff> fryck, you mean frontbone?
18:40 < fryck> rhalff: Yes :)
18:40 < fryck> https://github.com/airbnb/rendr
18:41 < rhalff> backbone is about making available the core features of a native device to our javascript api.  So not sure what client side backbone wants to expose. window?
18:41 < fryck> Router
18:42 < fryck> History
18:42 < rhalff> window.history
18:42 < fryck> View
18:42 < rhalff> Router > do some standards
18:42 < fryck> yes
18:42 < rhalff> View > do some standards
18:43 < bigx> hi, i'll give a workshop about node.js, and i'm wondering if the node_module folder is multiplatform (especially when a dep is a native extension)?
18:43 < rhalff> maybe browser vendors have routines to handle routes, not sure, but could be possible.
18:43 < fryck> The MVC pattern of Backbone is powerful
18:43 < bigx> i.e. can I put a node_module from a linux platform to a windows one without any trouble?
18:44 < bigx> (there's no internet where the workshop takes place)
18:44 < jesusabdullah> bigx: most of the time.
18:44 < bigx> and i don't have time to setup my own npm registry
18:45 < fryck> rhalff: Take a look at http://fr.slideshare.net/spikebrehm/introducing-rendr-run-your-backbonejs-apps-on-the-client-and-server
18:45 < jesusabdullah> bigx: compiled modules are incompatible, pure js modules will work just fine as copypasta
18:45 < wc-> rendr is great!
18:45 <@tjfontaine> you cna put that module there, but if windows tries to require() it you'll have angry responses
18:45 < fryck> wc-: +1
18:45 < wc-> i wish there was a bit more documentation
18:45 < rhalff> I think I am mistaken backbone for something else
18:45 < wc-> but its great so far
18:45 < fryck> wc-: But it's immature :)
18:45 < wc-> yes
18:45 < wc-> i wont hold the lack of docs against it
18:45 < fryck> wc-: I try to understand a bit more the source code
18:45 < bigx> thx jesusabdullah, so something like mongo driver won't work, isn't it?
18:46 < wc-> ya thats what i had to do
18:46 < jesusabdullah> bigx: yeah sounds right
18:46 < wc-> the example rendr app's data / api stuff is what got me confused for a while though
18:46 < bigx> darn
18:46 < fryck> wc-: Because i think is a really good way for the futur development with Node
18:46 < wc-> ya
18:46 < wc-> if something like meteor had rendr's server side rendering though
18:47 < wc-> then that would be a powerful combo
18:47 < fryck> Yes
18:47 < rhalff> So what is that library called, if I want to call native functions from within javascript and accesss the device capablities, I thought it was backbone.
18:47 < wc-> but take out meteor's packaging system and put npm back in :)
18:47 < wc-> and then you have derby
18:47 < fryck> But if you read the post http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product/
18:47 < fryck> the team had already tested the metero framework
18:48 < wc-> ya meteor falls short in a lot of places
18:48 < jesusabdullah> rhalff: no that's, uhh
18:48 < jesusabdullah> rhalff: which one? It's not backbone
18:48 < rhalff> jesusabdullah, it was, but they changed names [-) refused to join. :p
18:49 < fryck> " said that rendering on the server and client was a core principle of Meteor, but it turns out it just has a hacky plugin that uses PhantomJS to boot up a headless WebKit instance on the server, and is labled as “Don’t Use” in the documentation"
18:49 < fryck> about Meteor
18:49 < sinclair|net> fryck: i wouldn't read too much into that
18:49 < wc-> the phantomjs hack works decently well
18:49 < wc-> but its a hack
18:49 < fryck> ya
18:50 < wc-> anyone here located in 1871 in chicago by any chance?
18:50 < sinclair|net> wc-: yup, here
18:50 < sinclair|net> sup bro
18:50 < wc-> i just finished my written app
18:50 < wc-> for the developer / designer role
18:50 < wc-> hopefully gonna do the video part later today
18:52 < wc-> my goal is to focus on my new startup there, meet some cool / smart people, and just be in an entrepreneurial environment 
18:52 < wc-> sinclair|net: is there an irc channel for 1871 or anything?
18:53 < rhalff> I wanna offer myself as a coding b*h $1500 per month.
18:53 < sinclair|net> wc-: got my own projects to worry about
18:54 < fryck> wc-: what is your startup ? :)
18:54 < wc-> lawyermatch.me
18:54 < wc-> the idea is not new but the implementation / UX will be
18:55 < rhalff> civil.war
18:55 < wc-> sinclair|net: sorry i wasnt trying to distract you, just wondering if there is any 1871-specific irc room or server i could hop on
18:56 < fryck> what is 1871 ? ^^^
18:56 < rhalff> wc-, you could go to #1871-specific, i even highly recommend it.
18:56 < _6a68> fryck: you don't necessarily need to use front-end libraries on the server. you can render HTML initially using python or whatever, and just share templates with the front-end stuff
18:56 < wc-> already there ;)
18:57 < _6a68> fryck: so long as you actually load your client-side JS correctly, and put the right classnames on nodes, that works just as well, though you wind up duplicating code across languages
18:57 < wc-> fryck: its a chicago coop for digital startups
18:57 < wc-> sry ill stop the off-topic convo now
18:57 < _6a68> the real question is whether the duplication is more or less work than trying to, say, force a client-side thing to work on the server (and all the funky bugs that will turn up)
18:58 < rhalff> >>> [ '_6a68', 'wc-' ].reject()
18:58 < purr> rhalff: TypeError: Object _6a68,wc- has no method 'reject'
18:58 < olalonde> how to tell npm to use my github credentials when trying to fetch a private repo?
18:58 < jesusabdullah> olalonde: I believe you'll get prompted by git
18:59 < jesusabdullah> olalonde: alternately, have your ssh keys set up and ready to rock and it'll Just Work
18:59 < fryck> _6a68: i think is good idea to use same namespace require module in client & server side and share/sync model too
18:59 < olalonde> I wish, but it's not working. I don't own the private repo but im a collaborator. It's just giving me a 404 error
18:59 < _6a68> fryck: that's one way to do it, but it really depends on what you're building
19:00 < fryck> a single page application
19:00 < shlevy_> Is there a programmatic way to reuse the code npm uses to resolve dependencies?
19:00 < olalonde> npm http 404 https://github.com/someuser/track.git
19:00 < olalonde> npm ERR! fetch failed https://github.com/someuser/track.git
19:00 < olalonde> npm ERR! Error: 404 Not Found
19:01 < olalonde> shlevy_: require.resolve()
19:01 < shlevy_> olalonde: Thanks!
19:01 <@tjfontaine> olalonde: git clone it and then npm install /path/to/clone
19:02 < olalonde> right.
19:02 < olalonde> ill still put the link in the dependencies in case it works one day
19:02 < rhalff> MIGHTTTTTTTTT
19:02 <@tjfontaine> but if you're a collaborator, git+ssh://github.com/foo/bar.git should work fine
19:02 < shlevy_> olalonde: Ah sorry, I don't mean the lookup of installed packages, I mean how npm install decides which versions of dependencies to install
19:03 < rhalff> anybody, live near FL: http://www.youtube.com/watch?v=C648sopLG1I
19:03 < olalonde> shlevy_: ahh . maybe semver module?
19:03 < shlevy_> olalonde: Currently using that actually :) Doesn't cover git or http deps
19:03 < olalonde> shlevy_: https://github.com/isaacs/semver/
19:03 < olalonde> ahh ok nvm :)
19:04 < phynrd> not sure if there is a better channel for this, but I really like quickserve because while building simple html5 apps I can run a quick server on any folder.  Is there a solution like that that can also run PHP?
19:04 < shlevy_> I can just extend my ad-hoc dependency manager
19:04 < olalonde> you can actually use npm programmatically but im not sure if its well documented
19:04 < shlevy_> Just would be nice to do reuse
19:04 < olalonde> npm = require('npm')
19:05 < olalonde> https://github.com/isaacs/npm#using-npm-programmatically
19:05 < shlevy_> Thanks
19:06 < moscownights> hey, back, still getting an error while trying to use socketio client side
19:06 < moscownights> I found a commit though who claims to fix that error, since Im new to nodejs I have no idea how to actually build socketsio with the fix
19:06 < olalonde> shlevy_: im curious. what are you writing a dependency manager for?
19:06 < moscownights> there is a Makefile
19:07 < moscownights> and some commands in it
19:07 < moscownights> among others build
19:07 < shlevy_> olalonde: https://bitbucket.org/shlevy/npm2nix
19:07 < moscownights> what command do I use to create a new js file from it?
19:07 < shlevy_> generates something like https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/node-packages-generated.nix from a list of packages
19:07 < shlevy_> Currently broken for packages that have git/http deps :)
19:08 < olalonde> shlevy_: cool. not sure  i understand whats a nix expression or what it does, but it looks cool haha
19:08 < shlevy_> :) nix is a package manager, nix expressions are the language for it
19:09 < olalonde> ah got it
19:10 < jarofghosts> hey has anyone here had issues with couchdb seemingly multiplying requests?
19:20 < moscownights> so, I have cloned a repo which (among others) contains package.json, components.json and a Makefile
19:21 < moscownights> howd i go about and build a js script from this? 
19:22 < Trudko> /j Tower.js
19:22 < Trudko>  /j Tower.js
19:23 < Trudko> ops
19:26 < ozette> moscownights, build a js script? maybe you want to do a npm install and a make, no readme included?
19:28 < jarofghosts> has anyone here had any issue with couchdb throwing a 409 on document update for seemingly no reason?
19:28 <@mbalho> theres usually a reason
19:28 < Purefan> Im too set in my mysql ways to try couchdb in production :S
19:28 < jarofghosts> its confusing, i pass it the proper _rev
19:28 < jarofghosts> and it updates successfully
19:28 < jarofghosts> but i still get a 409
19:28 < Purefan> see, you're already talking martian for all I know :P
19:29 < jarofghosts> bleep blorp
19:30 < moscownights> ozette: I cloned this repo https://github.com/cayasso/socket.io-client 
19:30 < moscownights> and now I would like to 'build' the new socket.io-client.js file using the edited components.json from this fork
19:31 < jarofghosts> im only asking here because if i curl the database it works
19:31 < jarofghosts> but when i use node (ive tried 2 different couchdb modules as well as just http requests) it fails
19:32 < jarofghosts> and its only on the second PUT
19:32 < jarofghosts> so i post to create, i put to update, and then when i put to update the second time i get a 409 but it DOES update
19:33 < Purefan> really wish I could help jar... but im more experienced in folding bedsheets than couches
19:33 < jarofghosts> D:
19:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:04 < Stumbler> before I pull my hair out in circles here, anyone know if there is an easy way to acquire a filename if all I have is an fs.Stat object?
20:07 < SrPx> What is the command to add a dependency to package.json using the current version available?
20:09 < blakearnold> * i think
20:09 < brostachio> I'm having a super noob question, but i can't seem to get my routing working when i do res.redirect(newUrl) it works, but location doesn't do anything for me
20:09 < brostachio> https://gist.github.com/anonymous/5751820
20:10 < brostachio> the link that gets console logged works for me, but the location switch is failing for some reason
20:11 < blakearnold> res.redirect(newUrl)
20:11 < brostachio> blakearnold, redirect works. however i don't want the url to change
20:11 < stonecobra> brostachio, res.location just sets the header, you still need to send() something
20:12 < brostachio> stonecobra, how would i send back whatever is at my generated url? it could be any sort of asset
20:13 < stonecobra> brostachio, res.location only sets a header in a response, but you have not sent any response at all yet.  Just add an empty res.send() directly after
20:15 < brostachio> oh i see, ty vm
20:17 < SargoDarya> hey guys, question again regarding socket.io. Is it somehow possible to get the raw socket?
20:17 < SargoDarya> I just want it for logging
20:29 < nodenoob> hello, how do you handle complex forms? i'm trying to validate this http://jsbin.com/imafec/8/edit
20:29 < nodenoob> i just started and already feels messy
20:31 < rossk> nodenoob, what are you using to validate? and/or client side or server side or both?
20:31 < nodenoob> rossk: only server side
20:31 < nodenoob> a la rails
20:32 < nodenoob> i'm manually validating it atm
20:32 < rossk> node backend, yes?
20:32 < nodenoob> yes
20:32 < nodenoob> express framework only
20:33 < rossk> mhmmm
20:34 < rossk> well we like to make our forms all post json
20:34 < rossk> and then serverside we use json-schema to validate
20:34 < rossk> as a first pass
20:35 < nodenoob> so map the form to an object and post it as json as first step?
20:35 < _6a68> putting names on the inputs might make your life less insane. as might putting stuff in fieldsets inside the big form.
20:36 < nodenoob> _6a68: sure that was only an example to show a fairly complex form
20:36 < nodenoob> consider that in the real case the number of simple item is > 10
20:36 < nodenoob> :|
20:38 < Trudko> Guys cant find info about how to change cofffee script for pure js in Towerjs although I read that they planned long time ago to do just that.
20:38 < nodenoob> putting names on the inputs or organizing them in the array style doesn't help me with validation :)
20:39 < _6a68> nodenoob: https://npmjs.org/package/validator ?
20:43 < nodenoob> _6a68: i know that module and can help a little, but i still have to manually use it on each field, and in the end i have a mess
20:44 < nodenoob> anyway ty
20:45 < gamerdrome_> hi
20:45 < gamerdrome_> I dont suppose anyone here has tried using engine.io with firefox?
20:46 < gamerdrome_> I'm getting a weird thing with engine.io where, only with firefox, it connects to a websocket and other times doesnt, seemingly at random
20:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:47 < _6a68> nodenoob: there's an express validator, too. I'm not sure how it becomes a mess, I'm happy to try to help.
20:47 < diamonds> anyone seen this http://hastebin.com/kikuqaxoxo
20:47 < diamonds> debian package will not create
20:49 < nodenoob> gamerdrome_: try to ask in #socket.io
20:50 < Trudko> Seems like Towerjs is still prefering coffee
20:50 < gamerdrome_> nodenoob: thanks! I'll give that a go!
20:51 < diamonds> oh sorry it's in there as a comment if you don't c/p the whole thing at once
20:59 < Precea> Hi, I have a question about nodejs (no way :D). I would like to known if the 0.11.4 can be use in production because I need this fix https://github.com/joyent/libuv/commit/b3ab332 and for now we used 0.10.06
21:01 < Trudko> Guys I was looking around some full stack frameworks and i found towerjs and compoundjs but it seems that there is not huge community around it. I worry about using it for a project.
21:04 < wc-> Trudko: have you checked out http://todomvc.com/
21:04 < Trudko> ou thx I forgot about that site
21:04 < wc-> if you are looking at tower then maybe check out derby or meteor
21:04 < daslicht> meteor is lovely
21:04 < wc-> i went with a nodejs / express api + a node frontend serving up an app powered by rendr
21:05 < daslicht> http://www.discovermeteor.com
21:05 < wc-> but i did a project w/ meteor and enjoyed it a lot
21:05 < daslicht> i love reactive programing 
21:11 < ckknight> asynchrony is tough when you have to convert a function that you presumed would always be able to be synchronous into something asynchronous
21:23 < Trudko> wc well i want some full web framewrok where I can use express and javascript I prefrer  it now over coffee. 
21:23 < Trudko> Sailsjs seems nice
21:23 < Trudko> few more people in channel....
21:23 < oti8> is there a mongoose.js irc?
21:23 <@mbalho> you should try rails its pretty good at being a web framework :)
21:23 < ckknight> oti8: yeah
21:23 < ckknight> mbalho: you do remember you're in #node.js?
21:24 < oti8> ckknight: what is it?
21:24 <@mbalho> ckknight: exactly
21:24 < ckknight> oti8: shoot, I misread what you said, I thought you said 'iirc', not 'irc'
21:25 < Trudko> mbalho: you mean ruby on rails?
21:25 <@mbalho> Trudko: yep it has coffeescript built in
21:26 < Trudko> mbalho: i did try that. 
21:26 < Trudko> i have done project in it. But i have few tasks for other nodejs based project now.
21:26 < Trudko> and client seems to insist on node evethough not sure if that was good choice , because client doesnt really have much experience with it...
21:27 < Trudko> client - sort of friend 
21:27 < Determinist> hey, any of you guys using Mocha? if so, did you manage to make the --grep option filter the test files you wanna use?
21:41 < doomlaptop> has anyone here done tests using mocha-sauce?
21:41 < Industrial> doomlaptop: 404 github
21:42 < doomlaptop> this: https://github.com/pbakaus/mocha-sauce
21:42 < doomlaptop> i fail to understand how it is supposed to work
21:42 < doomlaptop> it seems like i'm supposed to create and html that includes a file from node_modules ?!
21:42 < doomlaptop> that folder is never even exposed to client-side
21:43 < Industrial> Say I have a lot of IO heavy tests. In my case I want to test a server that I can register paths and handlers which will be called when something changes on that path on disk.
21:44 < Industrial> I'll be creating directories in random directories, but I'm not sure at what level to abstract (or even mock).
21:45 < Industrial> Should I create a server running on a random port (seaport connected) and a /tmp/<uuid> for each test? or each interface method? or one server for everything (in which case how do I ensure a clean slate with each new test)
21:46 < Industrial> I guess it comes down to at what level I place the before/afterEach
21:47 < Industrial> https://gist.github.com/Industrial/15491b6038058cf4c6bd
22:02 < Multiply> I keep getting "Unexpected end of input" when reading a file, right after it has been changed. How do I avoid this?
22:03 < Multiply> I'm using chokidar to watch files, and fs to read it.
22:08 < mandric> anyone know of a basic polling app that support "anonymous" votes?
22:09 < mandric> looking for a good way to vote on things with a small group
22:40 < Davey> What are my options for background tasks in node?
22:42 < nightfly> ChildProcess
22:43 < Leximet33> quit
22:45 < rhalff> before you call yourself a hipster, thy californiansL http://www.youtube.com/watch?v=ZRAr354usf8
22:45 < rhalff> "People Are Strange", including me
22:48 < faLUCE> hello. I want to write a simple web application with node js. Is there a public host service where I can publish it for free?
22:48 < bnoordhuis> faLUCE: there are several. nodejitsu, heroku, etc.
22:48 < rhalff> faLUCE, http://www.heroku.com
22:49 < faLUCE> what about nodester?
22:49 < rhalff> bnoordhuis, you sound dutch, maybe we should start our EU own ? :p
22:51 < rhalff> heroku seems amazon and ruby basd anyway
22:52 < rhalff> your slug is ready>
22:52 < rhalff> *tries to force some discussion*
22:54 < wc-> sinclair|net: 1871 app submitted, someday i will look back on that video part of the application and laugh my ass off
22:54 < rhalff> Let's do something EU and if you are not from EU, let's do something Asian Australic.
22:55 < sinclair|net> wc-: what?
22:55  * rhalff longs for Aisa :D
22:55 < wc-> you said earlier you were located in 1871
22:55 < heath> https://github.com/visionmedia/express/issues/139 :: anyone know why tj wanted to remove promises here?
23:00 < rhalff> heath, because computed promisses are the same as promised by humans. If you lie very well they (you) will never notice :p
23:02 < rud> grrr can't you emit to a socket.io socket after retrieving it from io.sockets.clients() ?!
23:02 < rud> this drives me insane!
23:04 < rhalff> rud, never used socket.io, but maybe it is because of the chain of events?
23:05 < rud> rhalff: no, it is, unfortunately not an async issue
23:08 < rhalff> rud, you have some isolated code to show (something I never have have handy when one asks :p)
23:12 < heath> after performing this command: echo '{"name":"foo", "version":"0.0.1"}' > package.json && npm install express
23:13 < heath> nevermind, nvm
23:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:17 < heath> so yeah, anyway, after installing express, i'd like to use the local instance within node_modules/express/bin/express
23:18 < heath> i'm wondering if anyone is aware of a module which changes your path after switching to your application's directory
23:18 < heath> oh, that's not how it should be done
23:18 < heath> nvm
23:18 < heath> :)
23:19 < heath> oh wait, yeah it is, since others will be needing express as well when they do npm install :)
23:19 < heath> jeebz
23:20 <@xyxne> heath, could you just use a package.json scripts entry?
23:20 < heath> not sure what you mean by that
23:20 < heath> "NOTE: INSTALL SCRIPTS ARE AN ANTIPATTERN"
23:20 < heath> thinking i'll write a simple bash script
23:21 <@xyxne> heath, maybe I'm not understanding what you want to do
23:23 < heath> i want to install express for the project i'm working on and then type `express  --things` where express is referencing the instance of express which is local to the project
23:23 < heath> i.e., the instance of express located in node_modules/express/
23:27 < paultman> Hello from Washington, DC
23:27 < gnarf> paultman: hello from the 37,000 ft
23:28 < tjkrusinski> heath, having trouble understanding your goal
23:29 < paultman> Ok, my app had gotten to the point where console.log just isn't cutting it.  I need a testing framework... there are lots out there like mocha, qunit, jsunit, etc.  can anyone recommend one?  Id like something basic, asserts, maybe support for mocked up data...?
23:30 < tjkrusinski> mocha is a great testing framework
23:30 < tjkrusinski> I use it on all my projects
23:30 < tjkrusinski> and then I use chai for assertions
23:30 < heath> installing express with nvm was the eventual solution
23:30 < paultman> tjkrusinski: yeah, i have been hearing alot about mocha lately
23:30 < heath> thanks for taking the time to consider it though tjkrusinski
23:31 < paultman> tjkrusinski: you use them together?  mocha and chai?
23:31 < tjkrusinski> chai has should, expect and traditional assert style assertions
23:31 < tjkrusinski> http://chaijs.com
23:32 < paultman> ok, I'm mainly looking to test my client side code
23:35 < paultman> gnarf:  I imagine you're in denver?
23:35 < tjkrusinski> mocha can do front end code too, its a lot of work to build the test suite but it works
23:37 < clarkbox> what the latest and greatest way to log http requests (i am using express). i want to get as close to the apache access.log format as possible. i have found a few middle-wares, but the latest one i found hasn't had any dev for over a year. whats do you use?
23:37 < paultman> tjkrusinski: yeah, i'm sold on mocha, looks like it's got recent updates and lots of docs
23:47 < gnarf> paultman: mocha chai / sinon is what I use, but really all that matters is which you think looks best to your test writing style
23:50 < samholmes> Basic question: When deploying an update to an running app (website), how can I prevent breaking current routines?
23:50 < samholmes> that is, I would be restarting the apps process
--- Log closed Tue Jun 11 00:00:31 2013
