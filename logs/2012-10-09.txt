--- Log opened Tue Oct 09 00:00:05 2012
--- Day changed Tue Oct 09 2012
00:00 < dragon> s/why/how/
00:00 < dragon> I wouldn't be bringing this up if I knew the answer to why. :)
00:03 < EhevuTov> dragon, I'm unable to help in my limited knowledge about node.cluster, but this is interesting to me
00:03 < dragon> It's all good EhevuTov. We're all here to learn!
00:04 < eluttner> Hi, I need to create a service to fetch a url every 1 minute, is it ok to use the set interval?
00:04 < EhevuTov> I always learn when I watch #node.js :-) What is so interesting, is that I get to learn a bit about system programming while programming in JS 0.o
00:04 < EhevuTov> eluttner, I'd think that'd be ideal, but I could be wrong
00:05 < eluttner> EhevuTov what would be your idea? I would like to hear more ideas/opinions before coding
00:06 < EhevuTov> eluttner, I'd use https://github.com/mikeal/request and use setInterval
00:07 < EhevuTov> eluttner, will you be making a lot of requests? Like, a requesting service with a lot of concurrent users?
00:08 < EhevuTov> eluttner, if so, there's an example in that request module of streaming the return value of your request. That's what I'd start out with
00:08 < eluttner> yes, I would like to request data from stock market
00:08 < dragon> EhevuTov: setInterval is alright, as long as you're listening for errors, such as connection failing repeatedly.
00:08 < eluttner> thanks, I will check it
00:09 < dragon> It's preferred to get push notifications instead of polling, however. Try google's feedburner. (that's the one with pubsub, right?)
00:09 < EhevuTov> it's true, push/evented/unsolicited notifications is usually better than polling
00:10 < EhevuTov> unless you're monitoring something critical, where the very thing you're trying to monitor is the thing that is also doing the emitting (such as a monitoring a router for network failure)
00:10 < EhevuTov> if that is the case, then you want to also poll every once in a while
00:11 < eluttner> ok, but how would push work when I have to make the request?
00:12 < EhevuTov> eluttner, it is up to your service. It may or may not allow pushing. SInce it's market data, I doubt it will have push
00:12 < EhevuTov> ?since it's akin to streaming, actually
00:12 < eluttner> ok, yes, my idea is to pool the server, and push the data into a mq
00:12 < ben_alman> ok isaacs let me try
00:12 < eluttner> it is not streaming... it is to get data from yahoo, so it is not that critical
00:13 < ben_alman> isaacs: you said ln -s node_modules gruntjs, do you mean the other way around?
00:13 < niggler> lol eluttner 
00:13 < EhevuTov> eluttner, yeah, start off with that request module and start getting simple JSON or XML or whatever resources using request, and then start playing around
00:13 < niggler> the yahoo data is 15 minutes delayed to begin with
00:14 < ben_alman> isaacs: i'm in ~/Dropbox/Projects/Repos/node_modules/grunt and doing "npm install" and immediately get an error
00:14 < ben_alman> i must be missing something basic
00:14 < eluttner> niggler, yes, that is true.. it is for a school work, so it is not so critical application
00:15 < ben_alman> how do i get my per-repo node_modules installed?
00:15 < EhevuTov> ben_alman, not saying I know what your issue is, but I've heard of people having issues with npm and dropbox (I'm thinking it's a symbolic link thing?) Not sure though
00:15 < ben_alman> EhevuTov: that's not it
00:15 < eluttner> EhevuTov, thanks a lot for your help
00:15 < ben_alman> i actually have my dropbox sync disabled atm
00:15 < EhevuTov> ben_alman, k, just thought I'd throw it out :-)
00:15 < ben_alman> np thx
00:15 < EhevuTov> eluttner, np. Have fun!
00:19 < tprice> Im using a path like such './lib/pipes/crypto' in linux, will this path work the same under windows?
00:21 < EhevuTov> tprice, yeah i'm pretty sure. There are some operations that don't work in Windows though
00:21 < EhevuTov> tprice, like symbolic links or something. Forget off hand
00:23 < EhevuTov> tprice, basically what I've found, is that using the API will works on all platforms with a few small exceptions if the host OS does not inherently offer the operation and there's no workaround
00:24 < tprice> EhevuTov> so I dont have to path.join or what have you on each static path?
00:25 < tprice> what about something like process.env.HOME + "/mydir"
00:29 <@isaacs> ben_alman: "an error" <- please make that much more specific, ie with a gist of the actual error.
00:29 < ben_alman> module.js:340 Error: Cannot find module 'npmlog'
00:29 <@isaacs> ben_alman: npm -v?
00:29 < ben_alman> i can give you the entire stack dump, but that's it
00:29 < ben_alman> sec
00:29 <@isaacs> ben_alman: how did you install npm?
00:30 <@isaacs> because npmlog is defintely included along with npm
00:30 < ben_alman> with nave
00:30 < ben_alman> hmmn
00:30 < ben_alman> maybe i killed it
00:30 < ben_alman> i had some really weird behavior when using npm link a few times
00:31 < ben_alman> i think i killed my npm actually
00:31 <@isaacs> ben_alman: well, don't do that :)a
00:31 < ben_alman> what's the best way to reinstall npm
00:31 <@isaacs> ben_alman: killing isn't nice.  npm loves you!
00:31 < ben_alman> if i nave uninstall and then reinstall it tries to re-download it :(
00:31 <@isaacs> ben_alman: the best way?  install node.
00:31 < ben_alman> um
00:31 <@isaacs> ben_alman: cd path/to/node; make install
00:31 < ben_alman> k
00:31 <@isaacs> ben_alman: or one o the many other ways.
00:32 <@isaacs> ben_alman: nave use 0.8.11
00:32 <@isaacs> ben_alman: nave usemain 0.8.11
00:32 < ben_alman> Already installed: 0.8.11
00:32 < ben_alman> doing a make install
00:32 < ben_alman> nave doesn't really have the most robust recovery options
00:32 <@isaacs> ben_alman: https://gist.github.com/3855823
00:33 < ben_alman> ok that worked
00:33 <@isaacs> ben_alman: nave uninstall 0.8.11
00:33 <@isaacs> ben_alman: then nave use 0.8.11
00:33 < ben_alman> if i do that it will try to redownload it
00:33 < ben_alman> i think i filed an issue about that
00:33 <@isaacs> ben_alman: what version of nave?  it should be crazy fast if you have the latest version.
00:33 < ben_alman> hmmn
00:33 <@isaacs> ben_alman: npm ls -g nave
00:33 <@isaacs> ben_alman: anyway, not important.
00:33 < ben_alman> empty
00:34 < ben_alman> i have nave installed another way, i'll have to get the latest
00:34 <@isaacs> ok
00:34 <@isaacs> yeah, do that
00:34 < ben_alman> using npm to install nave is a little chicken-and-egg
00:34 < ben_alman> :)
00:36 < CoverSlide> makes me think of people who compile gcc
00:37 < niggler> is it faster to do dispatch via switch statement or object?
00:37 < ben_alman> niggler: you probably won't notice the difference
00:38 < CoverSlide> if it's thousands of cases long, maybe
00:38 < ben_alman> perhaps
00:38 < niggler> so long story short: spreadsheet calculator
00:38 < ben_alman> ok new nave is so much bette, thanks isaacs 
00:38 < niggler> hundreds of functions
00:39 < niggler> i could do some magic and just populate an object or do a bigass switch
00:39 < CoverSlide> niggler: set up a jsperf
00:40 < niggler> jsperf?
00:40 < ben_alman> jsperf.com
00:40 < niggler> ooh this looks useful: http://benchmarkjs.com/
00:42 < dragon> isaacs: Changing the port in cluster's listening event's payload to the actual port is relatively straight forward. I've tested the change, and I don't think there are any side effects. Shall I open a pull request?
00:43 < James123> hey guys
00:43 < James123> i have a question
00:43 < James123> node fs.writefile isn't working
00:43 < niggler> lol James123 that's so specific
00:43 < CoverSlide> that's not a question
00:43 < James123> it creates the file
00:43 < James123> but it doesn't write anything to it
00:43 < James123> node 8.11
00:43 < James123> win 64
00:44 < dragon> James123: could you type the question in one line, please?
00:44 < dragon> Flooding a chatroom is impolite.
00:44 < CoverSlide> yes
00:44 < CoverSlide> i
00:44 < CoverSlide> agree
00:44 < niggler> flooding
00:44 < niggler> a
00:44 < James123> :(
00:44 < James123> sry guys
00:45 < dragon> James123: could you show us the code that has the issue? Post the snippet to gist.github.com if possible.
00:45 < niggler> or jsfiddle.net
00:45 < chilts> James123: also, you need to back up your claim with some code? it obviously _does_ work, just not in your circumstance and possibly due to how you are using it
00:46 < James123> fs.writeFile('hello.html', "texthere")
00:46 < James123> it doesn't work when i test that by itself
00:46 < James123> which removes the possibility that my app is causing the problem
00:47 < chilts> worked when I did it in the repl
00:47 < niggler> platform?
00:47 < dragon> James123: worksforme
00:47 < chilts> I have a file called 'hello.html' with the contents 'texthere'
00:47 < dragon> ^ Same. It works perfectly, in fact.
00:48 < chilts> James123: can you add a callback function to your line and check what error it is giving you
00:48 < James123> hum
00:48 < chilts> might be something really simple
00:48 < chilts> in fact, run this example and look at the output : http://nodejs.org/docs/latest/api/fs.html#fs_fs_writefile_filename_data_encoding_callback
00:49 <@isaacs> dragon: sounds good.  sure.  pull req away!
00:50 < James123> it works from the repl
00:50 < EhevuTov> tprice, i'd always use the path commands, like path.join if I could because of OS differences
00:50 < EhevuTov> tprice, just let the API take care of it so you don't have to know the details(and then potentially make bugs)
00:50 < James123> it doesn't execute the callback func. but it does create the file
00:51 <@isaacs> James123: https://gist.github.com/3855896#comments
00:52 <@isaacs> James123: er, https://gist.github.com/3855896
00:52 < James123> sync works. its definitly my app crashing after fs creates the file and before it wrotes 
00:52 < James123> my b
00:52 <@isaacs> James123: please gist the code you're running.  we can't debug descriptions :)
00:52 <@isaacs> James123: that's a sign that your app is doing too many things :)
00:53 < James123> i'm glad it wasn't node
00:53 <@isaacs> James123: a *lot* of stuff depends on writeFile andreadFile working
00:53 <@isaacs> James123: it'd be pretty weird for those to break and no one notice.
00:54 < ben_alman> ok isaacs so i did an npm install inside each subdir
00:54 < ben_alman> i'm guessing i shouldn't have done that?
00:55 < ben_alman> because it downloaded and installed libs instead of using the local ones
00:56 < ben_alman> where do i run "npm install" from to get other npm dependencies? yes, i have some local ones in this directory, but not nearly all of them
00:58 < gabrieluk> there's no local one. i think. npm always install the libs you need in each project folder. if you install it with -g, will make the package command line available, not that if you do -g will be available everywhere
00:58 < gabrieluk> disclamer, i'm a noob soooo :D
00:59 < gabrieluk> more or less  noob, i've installing some stuff and have some small apps
01:00 < CoverSlide> ben is a cowboy
01:00 < ben_alman> isaacs: it sounds like this would be a super awesome tutorial somewhere. because i'm just not quite getting it
01:01 < EhevuTov> *pew* *pew*
01:01 < ben_alman> i generally understand, but i don't know how i'm going to npm install everything i need without some kind of "master" package.json
01:01 <@isaacs> ben_alman: ok.  stop a sec.
01:01 < ben_alman> heh ok
01:01 <@isaacs> ben_alman: the things that you need to "npm install"
01:01 <@isaacs> ben_alman: are they here in this folder?
01:01 <@isaacs> ben_alman: ie, are they grunt-blah things?
01:02 <@isaacs> ben_alman: the point here is that you CAN just put stuff in a node_modules folder
01:02 <@isaacs> ben_alman: and node will find it when you do require()
01:02 < ben_alman> many of the grunt-* things depend on other grunt-* things, but they all depend on other things as well
01:02 < ben_alman> like glob
01:02 <@isaacs> ben_alman: ok.  either install them in those places, or check them out into this folder.
01:02 <@isaacs> ben_alman: or install them into this folder.
01:02 <@isaacs> cd ..
01:02 <@isaacs> npm install glob
01:02 <@isaacs> boom, now everyone's using the same glob
01:02 < ben_alman> wait
01:03 < ben_alman> i want these all to use the grunt-* things i have locally
01:03 <@isaacs> and you've got glob in ~/Dropbox/Repos/gruntjs/node_modules/glob
01:03 <@isaacs> sure.
01:03 < ben_alman> but the rest can all be fetched from npm
01:03 <@isaacs> ok
01:03 <@isaacs> so fetch them from npm
01:03 < ben_alman> where?
01:03 <@isaacs> wherever you want them
01:03 < ben_alman> the list is split up across all the grunt-* things
01:03 < ben_alman> do i need to extract that into some kind of master list?
01:03 <@isaacs> i don't think you need a master list.
01:04 <@isaacs> i don't have any master lists.
01:04 < ben_alman> hmmn
01:04 < ben_alman> so ok one sec
01:04 < ben_alman> say grunt requires glob and nopt and also grunt-init
01:04 <@isaacs> k
01:04 <@isaacs> npm install glob nopt
01:04 < ben_alman> wait
01:04 < Raynos> Looking for a node based CLI tool. that is `watch folder then run this file`
01:04 < Raynos> well actually just need a watch folder then run this command
01:04 <@isaacs> Raynos: supervisor?
01:05 < ben_alman> how can i tell npm to use the local grunt-* stuff for libs already there and then fetch everything else automatically?
01:05 < Raynos> isaacs: Might actaully work.
01:05 <@isaacs> ben_alman: you don't
01:05 < ben_alman> i'd have to construct a list of all non-grunt-* things from all 35 interconnected repos
01:05 < CoverSlide> i thought supervisor is more like "watch file and restart"
01:05 <@isaacs> ben_alman: just install whatever you need.
01:05 < ben_alman> well, i need all the other things
01:05 <@isaacs> ben_alman: k.  install all the other things :)
01:05 <@isaacs> i mean, how many things?  a thousand?
01:05 <@isaacs> a dozen?
01:06 <@isaacs> just as you find that you need something, :sh and install it
01:06 < ben_alman> hmmn
01:06 < ben_alman> wait
01:06 < niggler> isaacs: is there a native bit twiddling module?
01:06 <@isaacs> niggler: there's JavaScript :0
01:06 <@isaacs> niggler: JS has & | ~ etc.
01:06 < Daegalus> I know I am late to the party, but ben_alman, why dont you just get the gruntjs on NPM?
01:06 < niggler> lets say i wanted to generate new nan values
01:06 < ben_alman> Daegalus: i'm the author of grunt
01:07 < ben_alman> i'm trying to develop it :)
01:07 <@isaacs> ben_alman: or you could just do what i do with npm, and bundle your deps, and install them from folders when you make changes and want to test them.
01:07 <@isaacs> like, really, it's not that bad.
01:07 < niggler> so the way id do that in C is by casting the quiet_nan to uint64_t and twiddling as per IEEE754 and then casting back
01:07 < Daegalus> ben_alman: ah, my bad, carry on. I guess I didnt here the full situation.
01:07 < ben_alman> heh
01:08 < ben_alman> isaacs: what do you mean bundle them
01:08 < Raynos> isaacs: https://gist.github.com/fd33bc2e913370bd6ce7
01:08 < ben_alman> commit them with the project?
01:08 < Raynos> supervisor doesn't play nice when the program exists cleanly
01:09 < guybrush_> ben_alman: best way to understand whats bundling is looking at npm i think https://github.com/isaacs/npm/blob/master/package.json#L73
01:10 < anarchist> is there a way to display the standard output of the "ls" command on a web page? what would be an easy way to do that
01:10 < anarchist> right now it's saying that stdout isn't a variable, but it shows me the result of the ls in the console
01:11 < anarchist> or ReferenceError: stdout is not defined or what have you
01:11 < Daegalus> anarchist: spawn a child process and get its stdout?
01:12 < Daegalus> http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback just make the callback take all 3 callback variables and you should get yoru stdout
01:13 < anarchist> this is what i'm using http://pastebin.com/VwS33np6
01:13 < anarchist> does that code have a callback?
01:14 < Daegalus> it does, hmm, let me run it and see whas up
01:14 <@isaacs> ben_alman: yes
01:15 < Daegalus> OH thats cause your res.send is outside the callback for the function call. anarchist scoping issue
01:15 < ben_alman> this is a project that gets installed via npm
01:15 <@isaacs> Raynos: oh, you don't want to keep it running, i see
01:15 < ben_alman> you recommend bundling deps with projects that are installed via npm?
01:15 < Daegalus> anarchist: move the res.send inside the callback for the ls -la exec
01:15 < anarchist> ahh, okay thanks
01:15 < anarchist> okay kinda makes sense now why the console.log one was working
01:15 <@isaacs> ben_alman: sometimes, sure.
01:15 < anarchist> well, supernoobs will be supernoobs
01:15 < ben_alman> seems confusing
01:16 <@isaacs> ben_alman: if it's a deployed app type thing like npm or grunt, why not?
01:16 <@isaacs> it's not like someone's going to do require('grunt') are they?
01:16 < ben_alman> they will in a future version, sure
01:16 < ben_alman> i'm moving in that direction
01:16 <@isaacs> i'd recommend you avoid that :)
01:16 <@isaacs> ben_alman: keep the bin and the lib separate.
01:16 < Daegalus> anarchist: eh, happens, ive made plenty of my own mistakes with callbacks and scoping in JS, especially in all the weird scoping issues
01:16 <@isaacs> ben_alman: like, separate modules entirely.  the bin uses the libs, but the libs stand alone.
01:16 < ben_alman> the bin is just a wrapper that calls the local lib
01:16 <@isaacs> ben_alman: sure.
01:16 <@isaacs> ben_alman: then bundle the bin with the libs it uses.
01:16 < ben_alman> they just happen to be in the same project atm
01:17 < ben_alman> we're going to separate them eventually
01:17 < ben_alman> but back to the original suggestion
01:17 < ben_alman> if i npm install glob or nopt
01:17 < ben_alman> what happens when multiple grunt-* libs use different versions of the same named lib
01:18 < ben_alman> i've got a few cases of that, unfortunately
01:18 < Daegalus> ben_alman: specific a version in your package.json, so that they all use the same version?
01:18 < ben_alman> Daegalus: for now, some of them have to use different versions based on the requirements
01:19 < Daegalus> I think if each lib has its own version, it will always default ot the one that is inits node_modules folder
01:19 < ben_alman> isaacs: it would be nice if each grunt-* project could have all the deps it needs, that aren't already available locally, installed in its own node_modules folder
01:19 < other_guy> isaacs are there any decent debugger tools for node.js
01:19 < other_guy> ?
01:19 < saudude_> can anyone help me figure out what's wrong with this Cakefile? https://gist.github.com/3855932
01:19 < saudude_> i just want to watch files + run my test suite, but nothing happens on filec hange
01:20 < Daegalus> ben_alman: i think if each lib, has its own package.json, then your primary project, has the libs in its json, it should go Node_modules/grunt-*/node_modules
01:20 < Daegalus> i could be wrong though
01:20 < ben_alman> ...
01:20 < other_guy> hell that's an open question
01:21 < other_guy> are there any decent debugging tool options for node.js?
01:21 < Daegalus> then in the imports you can explicit manual pathing to it require("./node_modules/BLAH")
01:21 < ben_alman> Daegalus: this is making no sense
01:21 < Daegalus> i dunno, hopefully someone much better than me can tell you if thats a horrible way to go about it or not
01:22 < ben_alman> yeah, isaacs wrote npm. he's trying to help me
01:23 < dragon> isaacs: https://github.com/joyent/node/pull/4104
01:24 < Daegalus> ben_alman: install express and look at its structure. you get yourproject/node_modules/express/node_modules/[all express deps] and express uses solely those in its own node_modules, if it doesn't find it, i think it starts going up the folder structure to find them
01:24 < ben_alman> Daegalus: i think you're missing the point
01:24 < ben_alman> i'm not trying to create the project
01:24 < ben_alman> i'm trying to develop it
01:25 < ben_alman> i'm trying to come up with a workflow for myself and others who wish to contribute; i want that workflow to be as streamlined as possible
01:25 < ben_alman> right now, afaict it's super non-streamlined
01:25 < ben_alman> i'm having tons of trouble with it
01:26 < anarchist> is there a simple way to make this stdout-put more pretty-print and less ugly?
01:26 < anarchist> is res.send wrong for that?
01:26 < anarchist> or is that just because it doesn't have any html tags to begin with
01:28 < Daegalus> ben_alman: if your grunt modules have their own package.json, adn then your primary gruntjs project has those modules as dependencies. you get Gruntjs depending on the submodules form its package.json, then each submodule will install its own package.json. So you will get gruntjs/node_modules/glob gruntjs/node_modules/grunt-sass/node_modules/glob-v0.9 gruntjs/node_modules/grunt-less/node_modules/glob-v0.8
01:28 < ben_alman> it's like.. i think i have to "npm install" in each sub-project, then delete any installed libs that match one of the grunt- libs i want to work on
02:00 < dragon> How do you run unit tests on nodejs source?
02:00 < dragon> `make test` runs them all.
02:12 < Raynos> Recommend me a rock solid recursive file watcher!
02:18 < nmartin> can someone help me understand this snippet: https://github.com/chatham/node-cloudstack (scroll down to the readme). Specifically, the config.nnn - is this some common npm package for dealing with key=value configuration items?
02:18 < nmartin> or is that more likey pseudo code for "store these vars in a config somewhere"
02:19 < ChrisPartridge> nmartin: Can't see what you are referring to, wrong link?
02:19 < blazes816> nmartin: it's just showing you how it would work if you had all that info in a config obj
02:20 < blazes816> you could replace them with strings or something
02:20 < nmartin> i gotcha, i figured that was it, but didnt know if node had some builtin for externally stored config type data
02:21 < nmartin> ChrisPartridge: the Readme.md on that page
02:21 < mclenithan> hey everyone! I just deployed my first node.js app!!! http://mighty-wildwood-9046.herokuapp.com/tasks
02:21 < mclenithan> super lame but I am super proud... deserves some scotch
02:22 < blazes816> mclenithan: added
02:23 < mclenithan> first app code here: https://github.com/mclenithan/first
02:23 < ChrisPartridge> nmartin: ah, following now - if you want to load it from a config file, just use a .json file and require it, otherwise do as blazes816 said and just use strings
02:24 < nmartin> json will work well enough thanks
02:24 < ChrisPartridge> mclenithan: Cancel button doesn't work on new task view ;-)
02:24 < mclenithan> your not believing hard enough :)
02:24 < blazes816> mclenithan: this is buggy, i want it to not have any bugs, and also work faster
02:25 < tehlulz> hey guys
02:25 < mclenithan> alright I am on it
02:25 < blazes816> good man
02:25 < tehlulz> Hey Nexxy!
02:25 < tehlulz> long time no see :)
02:26 < ChrisPartridge> mclenithan: no ajax love?
02:27 < mclenithan> ChrisPartridge: i figured I should learn how to work mongo first with node... might be a little off with that assumption
02:30 < saudude_> hey guys. how do you write command-line tests around a .js framework that's supposed to be used in browser?
02:30 < saudude_> or do you? is there a better way to test?
02:30 < gkatsev> saudude_: well, the functions that don't require the dom, you can just use in node. otherwise, you want something like jsdom or phantom which allow you to get a DOM
02:32 < saudude_> gkatsev: hm. what i'm writing is based around the web-audio api, which the most current browsers haven't even finished implementing. i doubt jsdom or the likes would have implementations for it
02:32 < gkatsev> ah, then yeah, phantom, possibly
02:32 < ChrisPartridge> yeah pretty sure phantom uses a relatively new version of webkit
02:33 < gkatsev> also, maybe appjs? lol
02:35 < saudude_> i'll give phantom a go. but i can fall back on normal in-browser jasmine testing for this i guess right?
02:35 < gkatsev> you could
02:35 < saudude_> i feel like that might be more reliable and/or take less time to get it set up
02:36 < aMoniker> phantom is pretty easy to set up
02:36 < saudude_> for jasmine testing?
02:36 < ChrisPartridge> yeah um, I don't think phantom supports video/audio actually
02:36 < saudude_> do any of you have it installed?
02:36 < saudude_> could you try running something with var x = new webkitAudioContext();
02:36 < saudude_> ?
02:37 < ChrisPartridge> sure, one moment
02:38 < saudude_> ChrisPartridge: thanks :)
02:38 < gkatsev> you could also use appjs, which literally comes with chrome
02:38 < ChrisPartridge> ReferenceError: Can't find variable: webkitAudioContext
02:38 < gkatsev> um... wouldn't it be all caps?
02:39 < gkatsev> I guess not
02:39 < saudude_> no that was correct capitalization
02:39 < gkatsev> yeah
02:39 < gkatsev> and Benvie did some magic to make the node context be the same as browser context inside appjs
02:40 < samholmes> Does dnode/shoe have issues on mobile devices, like iTouch?
02:40 < saudude_> i think ill just run normal jasmine tests
02:40 < samholmes> the end event keeps firing for my dnode object.
02:43 < astropirate_> Hello friends
02:46 < samholmes> Well, I'm guessing that the shoe stream is just piping into the dnode stream, so this is really a shoe issue, or more specifically a sockjs issue.
02:46 < samholmes> sockjs/shoe should work on iOS 4 right?
02:46 < samholmes> I have an older iTouch which is running iOS 4
02:47 < gkatsev> they should, do they not?
02:47 < samholmes> gkatsev: I'm not sure if it's something I'm doing or if it's the libs themselves.
02:48 < gkatsev> at least, I would think they should. Since they supposedly have fallbacks to whatever technology is available
02:48 < gkatsev> samholmes: try weinre maybe?
02:48 < samholmes> gkatsev: I'm building a mobile web app, and when I load it on my desktop, it works fine. But, when I load it on my iTouch the d.on('end') callback is triggered, and I get the console.log that I have in there.
02:48 < gkatsev> weinre to help with debugging
02:48 < samholmes> gkatsev: I've used debug.phonegap.com
02:48 < gkatsev> ok
02:48 < samholmes> but, it doesn't work so well.
02:48 < gkatsev> yeah, there are problems
02:49 < samholmes> Like, I can't get the error messages on load, and there are no resources in the resource tab in the phonegap hosted weinre.
02:49 < gkatsev> try locally hosted?
02:49 < samholmes> gkatsev: I recall, weinre doesn't run on windows. :\
02:49 < samholmes> Let me double check
02:49 < gkatsev> hm...
02:50 < gkatsev> it should
02:50 < gkatsev> it's even in npm now
02:51 < samholmes> weinre is?
02:51 < samholmes> how do I install via npm?
02:51 < gkatsev> npm install weinre
02:51 < gkatsev> http://debug.phonegap.com/client/#anonymous
02:51 < gkatsev> oops
02:51 < gkatsev> https://npmjs.org/package/weinre
02:51 < gkatsev> but last I tried, it didn't quite work for me, though, I may have been doing something wrong.
02:52 < samholmes> wouldn't it be npm install weinre -g?
02:53 < gkatsev> I'm not sure it's set-up for that
02:55 < Raynos> Trying to implement live-reload. Got a deadlock.
02:56 < Raynos> when files changes it refreshes the browser. But files change in batch so when the browser reloads only half the files reloaded
03:00 < ChrisPartridge> Raynos: just sending request to the app to refresh?
03:00 < ChrisPartridge> via ajax/websocket or something?
03:01 < Raynos> ChrisPatridge: that would work if the JS that is loaded to accept request didnt 404
03:01 < Raynos> ChrisPatridge: it needs to refresh, and on refresh the live reload JS client file needs to exist and not be a 404
03:01 < Raynos> I'm using a delay to give the file system time to breath
03:01 < Raynos> works pretty well
03:02 < ChrisPartridge> Raynos: why is it 404ing though? generating/minifying/etc the source?
03:23 < mnutt> does anyone have any thoughts on the best way to serve a limited number of large-ish static files? currently I'm doing it by loading the files in Buffers and then calling request.end(buffer) for each request
03:23 < mnutt> (while the files are static, they get served based off dynamic data so I can't just put nginx in front)
03:24 < ChrisPartridge> mnutt: can you stream the output from whatever is generating the files?
03:24 < ChrisPartridge> otherwise, stream from the filesystem to the res object
03:24 < samholmes> gkatsev: this weinre shit is rediculous.
03:24 < astropirate_> ChrisPartridge, when y ou use streams, what benifits does it offer? does it use less memory?
03:25 < gkatsev> samholmes: how so?
03:25 < mnutt> ChrisPartridge: I can do that, but won't it just generate a lot more disk reads than my current in-memory solution?
03:25 < samholmes> gkatsev: I can't seem to get it to work
03:25 < gkatsev> ah, then it wasn't just me
03:26 < mscdex> node.js rules!
03:26 < astropirate_> mscdex, dont lie to me
03:26 < ChrisPartridge> astropirate_: pretty much, check out substacks page on streams
03:26 < mscdex> i never!
03:27 < ChrisPartridge> mnutt: i think there is a buffer stream floating around somewhere
03:27 < deoxxa> mnutt: fs.createReadStream("/path/to/file").pipe(res)
03:27 < ChrisPartridge> mnutt: if it needs to be generated, pipe the output from the generating process/module to the response AND the buffer stream, otherwise pipe from the buffer stream
03:29 < mnutt> ChrisPartridge: they're files on disk, maybe 30 of them so they fit in memory, I'm just trying to figure out the most efficient way to get them to the client.  I'll try benchmarking pipe, thanks.
03:32 < samholmes> bbl
03:34 < Raynos> ChrisPatridge: the file system detects removal of file. Sends refresh command to browser, system is generating new source. browser hits route, 404. system saves new source to file.
03:35 < ChrisPartridge> Raynos: Race condition, don't have a callback on your generating code?
03:35 < mnutt> Ok, I think I might have been on the wrong track here.  My node processes are able to do 250 req/s serving 1MB files. (they do 260 req/s when serving 5KB files, so that's in line with what I would expect)  But earlier today I had my node processes completely fall over while serving 20 req/s.  Could it be due to really slow clients downloading slowly and holding open too many connections?
03:35 < ChrisPartridge> mnutt: Yup
03:35 < Raynos> ChrisPatridge: they are two command line tools. `make run` compiles the source `make reload` starts a live-reload server listening on files
03:36 < ChrisPartridge> mnutt: if you use streams, it will essentially sends little bits of data as the client needs it
03:36 < ChrisPartridge> Raynos: use cp.exec/spawn and capture the callback, then send the refresh
03:37 < Raynos> ChrisPatridge: that requires these two programs to know about each other directly.
03:37 < Raynos> but i guess it could work
03:37 < mnutt> ChrisPartridge: thanks, that makes sense.  Am I correct in thinking this has something to do with backpressure?
03:37 < ChrisPartridge> Raynos: well it doesn't need to know about what it does, just that its done its job, otherwise your dealing with a race condition
03:37 < ChrisPartridge> mnutt: correcto!
03:37 < ChrisPartridge> mnutt: https://github.com/substack/stream-handbook 
03:38 < mnutt> ChrisPartridge: off to go read up on that.  thanks for your help.
03:38 < ChrisPartridge> mnutt: If i was you, i would be creating a module that stores a map/hash of your buffered files, each file has a buffer stream created. If a client requests a file, pipe from the buffer stream, if you need to generate a file, pipe from the process/module to the buffer stream 
03:39 < ChrisPartridge> That way, the only time your hitting disk is when you load the app, or regenerate a file
03:40 < mnutt> ChrisPartridge: cool, thanks.  streams can't be re-used, right? once you pipe them, they emit 'end' and have to be recreated?
03:42 < ChrisPartridge> mnutt: Yeah, might want to store the buffers and create the buffer stream on each request
03:42 < mnutt> ok, great
03:51 < mclenithan> what was used to make the webchat.freenode.net site?
03:52 < mclenithan> i see heavy javascript but i am curious what is the backend
03:53 < _cheney> qwebirc.org
03:53 < mclenithan> thanks!
03:53 < _cheney> welcome
04:16 < rknLA> is there a zombie-like library for doing curl-style testing?  like for testing RESTful APIs?
04:16 < rknLA> (even if it's just curl thinly veiled)
04:18 < rknLA> or... i guess you can just use http?
04:18 < SomeoneWeird> curl-style?
04:19 < rknLA> sorry, poorly defined.. i just want to test endpoints from a non-browser perspective.
04:19 < rknLA> for example, `curl http://localhost:3000/resources.json`
04:19 < SomeoneWeird> have a look at restler
04:20 < SomeoneWeird> require('restler').get(url).on('complete', function(response) { /* response */ });
04:20 < rknLA> restler appears to be a php project... ?
04:21 < SomeoneWeird> https://github.com/danwrong/restler
04:21 < rknLA> ah, just found that.
04:21 < ChrisPartridge> You could also look at "request" or "superagent ", essentially http clients
04:22 < SomeoneWeird> there's quite a few, restler is the easiest imo
04:26 < mscdex> you could also use the built-in http client :-D
04:33 < ChrisPartridge> mscdex: don't be silly ;)
04:37 < ashnur> -server freenode morning
04:42 < pixie79> hi add, i have a problem with the following gist https://gist.github.com/3856643 - referance drbd is a json object, and ref is the accessor used to access it, however if i call drbd.ref if tried to access drbd.ref instead of drbd.drbd0.performance.ns any ideas how i get it to do the later please ?
05:06 < rknLA> hmmm... so how to i actually use restler with mocha?
05:07 < rknLA> like, do i have to tell mocha to spin up a test server?
05:07 < rknLA> and then where does that live?
05:09 < ChrisPartridge> rknLA: make your app a module, and then when you are setting up for your tests, just require it, spin it up and start running your tests
05:36 <@Nexxy> SFO ~ worst airport in the world. confirm/deny.
05:37 < pyrotechnick> no nexxy
05:37 < Zoney> deny
05:37 < pyrotechnick> here in australia in the middle of nowhere near melbourne
05:37 < pyrotechnick> there's a place called avalon
05:37 < pyrotechnick> it's a tin shed
05:37 < pyrotechnick> and a dirt runway
05:37 < pyrotechnick> deny
05:37 < Zoney> and they land 747s on it
05:37 < pyrotechnick> yep
05:37 <@Nexxy> do they make you run aroudn to 3 different fucking gates for no reason?
05:37 < pyrotechnick> true story
05:37 < pyrotechnick> yes
05:38 < pyrotechnick> and the bus to Melbourne costs you $100 and YOUR SOUL
05:38 <@Nexxy> I have no soul
05:38 < pyrotechnick> then you have to walk
05:38 < pyrotechnick> whatever resides in your 11th dimension
05:39 < pyrotechnick> that's what it costs you
05:39 <@Nexxy> rainbows?
05:39 <@Nexxy> I'm keeping those.
05:39 < pyrotechnick> more or less
05:39 < pyrotechnick> what does everyone listen to when they node
05:39 < Zoney> nothing
05:39 < pyrotechnick> besides substacks genetic algorithms
05:40 <@Nexxy> harpsichords
05:40 <@Nexxy> and white noise
05:40 < pyrotechnick> mmm
05:40 < pyrotechnick> you tried binaural nexxy?
05:40 <@Nexxy> meh
05:40 < pyrotechnick> or solfeggio stuff
05:40 <@Nexxy> just made me feel dizzy
05:40 < Zoney> i have, fail
05:41 < pyrotechnick> i dunno about declaring a blanket fail
05:41 < pyrotechnick> its hacking the matrix man
05:41 < pyrotechnick> shit's how they built the pyramids don't you know
05:42  * Zoney turns on a 14 minute binaural "tune" to help sleep
05:42 < pyrotechnick> hold up Zoney
05:42 < Zoney> if i'm not asleep in 14 minutes i'll demand my money back
05:42 < pyrotechnick> ill find you this list
05:43 < pyrotechnick> http://www.bibliotecapleyades.net/ciencia/ciencia_cambio06a.htm
05:43 < Zoney> what do i do with this info?
05:43 < pyrotechnick> try different frequencies out until you find your sleepy one
05:44 < Zoney> how? i don't see anything to try the frequencies
05:44 < Zoney> maybe this thing i'm listening to is making me too sleep
05:44 < Zoney> y
05:46 < pyrotechnick> nah this is just a list
05:46 < pyrotechnick> youtube them
05:47 < pyrotechnick> there's some apps you can mix them into your favourite music with etc but generally you can find something decent
05:49 < sinclairzx> anyone doing anything in TypeScript?
05:49 < pyrotechnick> dude you have #typescript
05:49 < sinclairzx> thought id ask in here, as i have question
05:50 < sinclairzx> involving node
05:50 < pyrotechnick> i guarantee people will be in there if they wanna talk about it
05:50 < sinclairzx> just wondering if anyone tried to plug the typescript compiler into node?
05:50 < sinclairzx> as a module
05:51 < sinclairzx> in theory, i should be able to compile TS from within node
05:51 < Zoney> then sleepy tune i'm listening to hasn't put me to sleep yet
05:51 < nathan7> pyrotechnick: genetic algorithms making music?
05:52 < pyrotechnick> substack does it
05:52 < pyrotechnick> check his gists and projects
05:52 < sinclairzx> http://stackoverflow.com/questions/12729779/use-typescript-compiler-from-node
05:53 < sinclairzx> what's kinda useful
05:53 < sinclairzx> *that's
05:53 < pyrotechnick> #typescript
05:54 < Lorentz> more like #Node.ts
05:54 < pyrotechnick> that's like catholic muslims
05:54 < pyrotechnick> not going to happen
05:55 < sinclairzx> Lorentz: could be worse, could be coffeescript
05:55 < pyrotechnick> glass houses
05:56 < pyrotechnick> throwing rocks etc.
05:56 < pyrotechnick> discuss.
05:56 < nathan7> pyrotechnick: haven't seen it, will look at it
05:56 < harrisonm> Aw, nigglerbot's not around
05:57 < pyrotechnick> nathan7: there's a bunch of stuff about it on the tubes too
05:57 < pyrotechnick> but that goes for (.*)
05:57 < mdedetrich> hmm
05:57 < mdedetrich> it appears that jquery seems to have broken something
05:57 < mdedetrich> absolutely lovely
05:57 < pyrotechnick> you seem genuinely surprised
05:58 < mdedetrich> no, I'm genuinely pissed off
05:58 < pyrotechnick> #jquery
05:58 < pyrotechnick> have at it.
05:59 < sinclairzx> pyrotechnick: http://linqjs.codeplex.com/ <-- thoughts?
05:59 < Daegalus> dart -> discuss!
05:59 < mdedetrich> Daegalus: won't get anywhere
05:59 < sinclairzx> linqjs looks kinda nice
05:59 < sinclairzx> anyone use it?
06:00 < mdedetrich> if anyone should replace what language should be used on browsers
06:00 < Daegalus> http://lispyscript.com/ <--- discuss.
06:00 < mdedetrich> they should implement a bytecode
06:00 < mdedetrich> and not a  language
06:00 < pyrotechnick> mdedetrich: they already have a VM
06:00 < pyrotechnick> it's called JS
06:00 < Daegalus> mdedetrich: there was a long writeup on why they didnt go with a bytecode.
06:00 < mdedetrich> pyrotechnick: ok let me rephrase that
06:00 < mdedetrich> a lower level VM
06:00 < mdedetrich> thats easier for other languages to target
06:00 < sinclairzx> mdedetrich: it will be a long long time before anyone would agree on a Runtime for the browser
06:01 < pyrotechnick> NaCl
06:01 < mdedetrich> yup, but any other idea is stupid
06:01 < Daegalus> http://www.dartlang.org/articles/why-not-bytecode/
06:01 < sinclairzx> mdedetrich: they already exist mind you, Flash and Silverlight run on bytecode
06:01 < mdedetrich> hence why we are still running JS
06:01 < pyrotechnick> :S
06:01 < sinclairzx> mdedetrich: what makes Dart any better
06:01 < mdedetrich> I see no point in using dart
06:01 < pyrotechnick> it was actually designed
06:01 < mdedetrich> and no other browser
06:01 < mdedetrich> is going to pick it up
06:02 < pyrotechnick> and it addresses concurrency
06:02 < Daegalus> I personally prefer Dart on the backend
06:02 < mdedetrich> Daegalus: I'm reading that article
06:02 < mdedetrich> it makes idiotic assumptions
06:02 < Daegalus> like?
06:02 < mdedetrich> JVM is a virtual machine that is like 20 years old, and they forced backwards compatiability
06:03 < mdedetrich> its a REALLY stupid example
06:03 < mdedetrich> as to why a VM is a bad idea
06:03 < pyrotechnick> short of going back in time, we're going to have JS 3-5.something forever
06:03 < pyrotechnick> deal with it.
06:03 < mdedetrich> yeah but JS 3-5 isn't being implemented in browsers
06:03 < Daegalus> i personally like dart, but i dont treat it like a JS replacement.
06:03 < mdedetrich> even though ECMAScript 3 came out ages ago
06:04 < sinclairzx> *cough* TS * *cough* :D
06:04 < pyrotechnick> that's because they're not specifications they're recommendations
06:04 < pyrotechnick> people forget that. all of the time.
06:04 < pyrotechnick> if you can do a better job. start a company and develop a web browser
06:05 < sinclairzx> pyrotechnick: chromium ?
06:05 < pyrotechnick> no from scratch
06:05 < sinclairzx> pyrotechnick: fork it?
06:05 < pyrotechnick> no
06:05 < pyrotechnick> self-host it in your own language
06:05 < mdedetrich> pyrotechnick: thats not really good advice
06:06 < pyrotechnick> yes it is
06:06 < mdedetrich> pyrotechnick: your browser may support something
06:06 < mdedetrich> no other browser will
06:06 < mdedetrich> in fact
06:06 < mdedetrich> that advice is terrible
06:06 < pyrotechnick> all browsers have always done that and they always will
06:06 < mdedetrich> yeah, and Microsoft took your advice
06:06 < pyrotechnick> no
06:06 < mdedetrich> and it got them nowhere
06:06 < pyrotechnick> that's a logical fallacy anyway
06:06 < mdedetrich> I'm just saying that advice
06:07 < mdedetrich> of making your own browser
06:07 < pyrotechnick> don't look to MS for guidance
06:07 < mdedetrich> is really bad
06:07 < pyrotechnick> unless you're making a gaming platform
06:07 < mdedetrich> no other browser will implement YOUR vm unless they have a reason to
06:07 < mdedetrich> and there will not be a reason
06:07 < mdedetrich> before pigs start flying
06:07 < pyrotechnick> self-defeatis
06:07 < sinclairzx> pyrotechnick: don't look to MS for guidance ?
06:07 < pyrotechnick> never
06:07 < mdedetrich> I would call it realism
06:07 < pyrotechnick> ever
06:07 < pyrotechnick> ha!
06:08 < sinclairzx> pyrotechnick: meh, thoughts on http://linqjs.codeplex.com/ ?
06:08 < pyrotechnick> linq is fine but keep it in c#/.net
06:08 < mdedetrich> its why we are still stuck with an outdated JS that is 20 years old
06:08 < sinclairzx> pyrotechnick: PHP has doctrine, its kinda the same thing
06:08 < Daegalus> http://lispyscript.com/ <-- i think this is awesome. Lisp style JS
06:08 < pyrotechnick> keyword: kinda
06:09 < diverdude> Is it possible to write c++ plugins for node.js?
06:09 < pyrotechnick> secondary keyword: php
06:09 < pyrotechnick> if you're looking to PHP for guidance
06:09 < pyrotechnick> you're doing it wrong.
06:09 < pyrotechnick> forever. always.
06:09 < sinclairzx> pyrotechnick: my point is, the style is not unique to C#
06:09 < Daegalus> diverdude: yes, but then you need to make Dart Wrappers and such for it
06:09 < Daegalus> err Node wrappers*
06:09 < sinclairzx> pyrotechnick: i think it looks kinda nice
06:09 < ChrisPartridge> Daegalus: hah
06:10 < diverdude> Daegalus: ok..is that difficult? and is it documented?
06:10 < ChrisPartridge> diverdude: there's a few good guides out there
06:10 < Daegalus> ChrisPartridge: the typo or hte lispy js?
06:10 < sinclairzx> pyrotechnick: lol http://phplinq.codeplex.com/
06:11 < pyrotechnick> man just block *.codeplex.com
06:11 < pyrotechnick> and save yourself the trouble
06:11 < ChrisPartridge> Daegalus: typo
06:11 < diverdude> ChrisPartridge: thats nice. I need to control a special camera, so i figured - why not write it as a node.js plugin so that i can interface it from any platform
06:11 < diverdude> via javascript
06:11 < sinclairzx> pyrotechnick: just because it isn't github?
06:11 < Daegalus> ChrisPartridge: hehe ya, im wokring on OpenGL dart bindings, so Ive been writing Dart wrappers :P
06:12 < pyrotechnick> sinclairzx: did i at all insinuate that?
06:12 < sinclairzx> pyrotechnick:yes
06:12 < pyrotechnick> incorrect.
06:12 < ChrisPartridge> Daegalus: working on opengl is hard enough, and you have to throw dart into the mix.. :)
06:12 < sinclairzx> sorry, a bit preemptive. i figured you had an issue with "any" codeplex hosted project
06:13 < pyrotechnick> anything MS gets their filthy mitts on turns to grey-goo
06:13 < sinclairzx> whatever
06:13 < mdedetrich> yay, lets all blindly hate MS
06:13 < mdedetrich> because its *fashionable*
06:13 < Daegalus> I think when it comes to programming, im a Masochist. Not to mention I am horrible at C/C++ so I gotta write the binding part in Dartified C (all the handle managing and propogating of eceptions and such) soooo ya
06:13 < pyrotechnick> why don't you ask the kids
06:13 < mdedetrich> and makes you sound cool
06:14 < Daegalus> its taking a while ChrisPartridge 
06:14 < mdedetrich> ask the kids what pyrotechnick 
06:14 < pyrotechnick> at tianamen square, was fashion the reason, why they were there?
06:14 < Daegalus> VS and C# is awesome, plus I like me some Mono and MonoGame :D
06:15 < mdedetrich> Scala is a much better language than C# in my opinion
06:15 < pyrotechnick> if you look at this image
06:15 < pyrotechnick> http://secretaryclinton.files.wordpress.com/2011/06/tiananmen-square-1989.jpg
06:15 < mdedetrich> pyrotechnick: I don't see how that is relevant
06:15 < pyrotechnick> and the tanks are your hero
06:15 < pyrotechnick> then you have an issue
06:15 < mdedetrich> unless you are saying that microsoft tried to occupy a country
06:15 < Daegalus> mdedetrich: agreed. but I find the CLR a bettern VM than the JVM. plus I am super tired of how the Java Standard Library and library system in general works.
06:16 < pyrotechnick> those who do not learn from history are destined to repeat it
06:16 < sinclairzx> pyrotechnick: nodejs, ruby, PHP (liberal democrats)    ---vs=--   .NET, Java (nazi conservatives) ?
06:16 < mdedetrich> pyrotechnick: and now you are just babbling on about nothing...
06:16 < Daegalus> f that, CLOJURE! :P
06:17 < mdedetrich> Daegalus: eh, Scala does a decent job of hiding the crappiness in the JVM
06:17 < mdedetrich> it also runs on more platforms
06:17 < pyrotechnick> i'm just sitting in my car and waiting for my girl
06:17 < ChrisPartridge> Daegalus: Yeah, i know what you mean - I'd never touched C++ until I started playing with node.. starting to grow on me now though (when its needed)
06:17 < Daegalus> mdedetrich: oh definitely. Scala is great. I like Groovy too
06:18 < mdedetrich> Im not a huge fan of groovy
06:18 < sinclairzx> mdedetrich: what do you think about plugging TS into nodejs as a module, and scripting node directly on TS (removing the compilation step)
06:18 < Daegalus> eh, its ok, is a nice change of pace, and it was OK'd at work, so its a nice change of pace from pure Java
06:19 < mdedetrich> sinclairzx: in general, or for web frameworks?
06:19 < sinclairzx> mdedetrich: the TS compiler can be compiled to JS afterall, and should run as a module
06:19 < mdedetrich> sinclairzx: I currently code a web framework where it treats CS the exact same way as JS
06:19 < Daegalus> ChrisPartridge: ya, I took some classes in school in C, but besides knowing the how to write basic stuff in it, all the fancy hardcore stuff is a bit rough
06:19 < mdedetrich> even with require and whatnot
06:20 < sinclairzx> mdedetrich: i suppose so yeah, the good part would be that existing JS would work in TS, so you would have options
06:20 < Daegalus> mdedetrich: Actually its suprising, I hate Ruby, primarily for its syntax, yet I like Groovy, which tries to imitate Ruby syntax. Then there is Grails :P
06:20 < mdedetrich> eh I dislike Ruby, but not for syntactical reasons
06:20 < sinclairzx> you could completely ignore TS, but you would need a initial boot step compiling the modules. i guess you could cache them
06:20 < mdedetrich> although it does do some of the stupid stuff perl does
06:20 < sinclairzx> mdedetrich: i think its a nice idea
06:21 < mdedetrich> in terms of making a syntax for every idelogy
06:21 < Daegalus> well, synctactical is the minor hate. but mostly one thing that bugs me is they had to rename every operation that has a similar name in other languages. it was annoying digging through their docs just to figure out wtf is going on
06:21 < sinclairzx> mdedetrich: you could also do the same with coffeescript
06:21 < mdedetrich> sinclairzx: well I'm doing it right now
06:21 < diverdude> ChrisPartridge: so everytime a request is made to the server, and the module is loaded....the c++ plugin is actually started right? And every time the request ends the c++ plugin is terminated. is that correct?
06:21 < sinclairzx> mdedetrich: oh?
06:22 < sinclairzx> mdedetrich: you have node compile CoffeeScript, and script in CS?
06:22 < mdedetrich> sinclairzx: in the web framework I use
06:22 < mdedetrich> entire codebase is in CS
06:22 < sinclairzx> mdedetrich: nice :)
06:22 < timeturner> how does v8 garbage collect?
06:22 < mdedetrich> timeturner: by using  a truck
06:23 < timeturner> very funny
06:23 < mdedetrich> not really
06:23 < Daegalus> I need to write my own language and then just translate it to JS or Dart, then i can have my ideal language for myself
06:23 < sinclairzx> mdedetrich: im not really fond of CoffeeScript, but im not really from the right background to appreciate it
06:23 < mdedetrich> sinclairzx: I'm just saying, what you are doing is possible
06:23 < mdedetrich> even my app is in coffee (app.coffee)
06:23 < sinclairzx> yeah, nice
06:23 < Daegalus> i like CS, and i dont get why so many people hate coffee
06:24 < timeturner> create function that authenticates user and loads information from database
06:24 < timeturner> that would be a line of code in my language
06:24 < pyrotechnick> Daegalus: FUD
06:24 < timeturner> AIL
06:24 < Daegalus> pyrotechnick: ?
06:24 < sinclairzx> mdedetrich: i like having options actually, having TS and CS as options would be nice
06:24 < timeturner> Artificial Intelligence Language
06:25 < pyrotechnick> Daegalus: http://deoxy.org/8circuit.htm
06:25 < mdedetrich> sinclairzx: well you can add a plugin to that framework if you want
06:25 < mdedetrich> sinclairzx: socket stream is what I'm using
06:25 < pyrotechnick> new concepts literally give some people headaches
06:25 < mdedetrich> sinclairzx: https://github.com/socketstream/ss-coffee
06:25 < mdedetrich> sinclairzx: just need to make a TS version of that
06:25 < mdedetrich> and you are good to go
06:25 < saudude_> do you think writers of popular javascript libraries would be interested to hear/contribute to your similar library if your library was built to serve a slightly different purpose? or target a different user base?
06:26 < pyrotechnick> saudude_: BUILD IT AND THEY WILL COME
06:26 < mscdex> ./configure && make install && they will come!
06:26 < saudude_> lol ^
06:26 < pyrotechnick> LOL
06:27 < pyrotechnick> it was more like a kekekekekek but still
06:27 < saudude_> i'm laughing out loud in the library at that joke. i'm a fckin nerd -_-
06:27 < pyrotechnick> mscdex: you've made my day
06:27 < mdedetrich> I think we all are here
06:27 < Daegalus> saudude_: i think that was evident when you wen tto the library, log before you laughed
06:27 < pyrotechnick> libraries still exist?
06:27 < saudude_> Daegalus: oooh ouch. 
06:27 < saudude_> i'm a college kid breh
06:27 < saudude_> ; )
06:27 < pyrotechnick> i thought all libraries had transcended into cyberspace by now
06:27 < Daegalus> saudude_: me too, and i never said it was a bad thing :P
06:28 < saudude_> hahaha
06:28 < saudude_> Daegalus: what year are ou?
06:28 < pyrotechnick> post-libraryism
06:28 < ChrisPartridge> diverdude: check this out http://marcorogers.com/nodeconf-2011/node_addons_presentation.html
06:28 < saudude_> Daegalus: (if i may)
06:29 < Daegalus> saudude_: absolutely no clue, somewhere at super-mega-senior. Im almost done, got 2-3 classes left, but im working full time at Electronic Arts, so I take like 1 class a semester, maybe 2
06:29 < saudude_> oh that's sweet
06:29 < mscdex> i remember in days of yore when i could telnet into my local library branch and search the catalog from home
06:29 < mscdex> over a modem and through a BBS!
06:29 < mdedetrich> time to get some food
06:29 < mdedetrich> adios amigos
06:29 < Daegalus> mscdex: you can still do that, at least at my library
06:30 < saudude_> also @ my original question - see i'm working on this library that i think certain people would choose over the other similar libraries out there
06:30 < alucardX> morning
06:30 < mscdex> well, my branch has a fancy website to do all that now
06:30 < mscdex> i don't think the telnet service is available anymore
06:30 < saudude_> but i think that my project could benefit greatly from the advice of smarter people
06:30 < Daegalus> mscdex: well they updated, its now a Rest api that you can hit
06:30 < mscdex> nice
06:31 < Daegalus> saudude_: just do it, and let it loose. Just ask questions here. If people hated similar projects, DerbyJS, MeteorJs, and Flatiron wouldnt exist
06:32 < Daegalus> Wed have Flat Derby Meteor Iron JS
06:32 < saudude_> so when i share this, what's a good way to get people involved?
06:33 < Daegalus> post here, post on node.js sites, twitter #nodejs, facebook, google+ #nodejs, etc
06:33 < saudude_> github's like the WWW. you can put a repo but there's no guarantees anyone will ever see it
06:33 < Daegalus> put it on NPM so people can easily install it
06:35 < saudude_> ok, thanks
06:35 < saudude_> man twitter seems to be _the_ resource for this stuff
06:35 < saudude_> i'm just recently getting into the open source web dev world, and twitter is such a big part of it
06:35 < Daegalus> ya, even though the internet hive mind is hatin on twitter atm
06:37 < saudude_> yea
06:39 < saudude_> alright i'm off. thanks for the thoughts!
07:14 < adambreen_> Hi all, would someone mind helping me with a (probably simple/stupid) question?
07:14 < adambreen_> I'm trying to write a binary file from a buffer, as per https://gist.github.com/3857083
07:15 < adambreen_> nb. using node 0.8.x
07:16 < pixie79> hi add, i have a problem with the following gist https://gist.github.com/3856643 - referance drbd is a json object, and ref is the accessor used to access it, however if i call drbd.ref if tried to access drbd.ref instead of drbd.drbd0.performance.ns any ideas how i get it to do the later please ?
07:16 < pixie79> hi all even :)
07:19 < adambreen_> @pixie79: happy to help - not clear what you're trying to achieve?  what is the expected result?
07:20 < chovy> are callbacks supposed to return?
07:20 < chovy> i'm confused on when to return in a callback.
07:20 < chovy> if ever
07:21 < adambreen_> @chovy: can you post a gist of what you're trying to do?  probably, you don't need a return
07:21 < syskk> is there a node builtin / library that implements object comparison  for equality? http://stackoverflow.com/questions/1068834/object-comparison-in-javascript
07:23 < syskk> _.isEqual is guess
07:23 < adambreen_> @syskk - yep that works
07:24 < chovy> adambreen_: https://gist.github.com/15c303e6d593e7c649a6 -- i don't know if i need return in checkPermission()
07:24 < chovy> ie: return checkPermssion() or just checkPermission()
07:24 < Interactive> Hello All.
07:25 < Interactive> I'm looking for a bit of help with node I/O streams.
07:25 < adambreen_> @chovy - this is Express, I assume?
07:25 < chovy> yea
07:25 < chovy> it's middleware
07:25 < chovy> if all goes well, it calls next()
07:26 < chovy> but checkPermission() is getting called twice, which makes me think I need to put return infront of it
07:26 < adambreen_> @chovy: you want      return next()  then
07:26 < chovy> if i do return next()
07:27 < chovy> do I need return checkPermission()?
07:27 < chovy> i can also do this, which works if ( !owner ) { } else { }
07:27 < adambreen_> @chovy: why are you implementing checkPermission as middleware?
07:28 < chovy> here's where i'm using it:
07:28 < chovy> app.delete('/api/items/:itemid', mid.globals, auth.restrict, auth.permission.item, routes.api.items.delete);
07:28 < chovy> so if auth.permission.item fails, it just outputs an error.
07:29 < adambreen_> @chovy: ok
07:29 < chovy> it never gets to route
07:29 < pixie79> adambreen_: i am trying to get the string from ref to be used as the referance for pulling the correct data out of the JSON drbd object
07:30 < adambreen_> @chovy: can you gist the whole auth.permission.item function then?
07:31 < chovy> adambreen_: here is what i have that works. https://gist.github.com/b7c47f87edcccfb91aad
07:32 < chovy> let me update that with checkPermission
07:32 < chovy> https://gist.github.com/b7c47f87edcccfb91aad
07:33 < [AD]Turbo> hola
07:34 < adambreen_> @chovy - ok, so I think the answer to your question is "no" - you don't need to return checkPermission.  You're following the Express continuation-passing-style convention, so you should just return next() in your checkPermission function.
07:35 < adambreen_> @chovy: have you tried that?
07:35 < chovy> no
07:35 < chovy> but this works, i'm just not sure if i'm doing it right.
07:35 < chovy> should i return res.render() ?
07:35 < chovy> or no return
07:36 < adambreen_> @chovy - yep you're doing it right
07:37 < chovy> it's working the same with return next() or just next()
07:38 < chovy> and return res.render() works, but i don't understand where i'm return to, and what that actually returns.
07:40 < Interactive> Hello All, I'm trying to find a way to download files from a server (couchdb attachment).
07:41 < Interactive> What I have (https.get, fs.createWriteStream) does download but sometimes ( >50%) the file is 0kb
07:43 < Interactive> Codepaste: http://codepaste.net/wjemoe
07:43 < Interactive> I could use some help, don't know what I'm doing wrong :-(
07:44 < chovy> Interactive: looks reasonable
07:44 < chovy> your chunks are empty or something?
07:45 < Interactive> chunk.length is always > 0
07:46 < Interactive> I do a console.log(fileName + " writing " + chunk.length); in the data listener and it is always the right amount (7253).
07:46 < chovy> where are you doing that?
07:46 < chovy> on('data') ?
07:46 < Interactive> Yup.
07:47 < Interactive> response.addListener('data', function (chunk) { console.log(fileName + " writing " + chunk.length); downloadfile.write(chunk); });
07:49 < chovy> i can't find documentation for fs.writeStream
07:50 < chovy> perhaps The 'data' event emits either a Buffer (by default) or a string if setEncoding() was used. 
07:50 < Interactive> http://nodejs.org/api/fs.html#fs_fs_writestream
07:51 < Interactive> I've tried with and without setEncoding, no difference;
07:51 < chovy> stream.setEncoding('utf8')?
07:51 < Interactive> stream.setEncoding('binary')
07:52 < Interactive> I'm downloading images (jpg and png)
07:52 < chovy> stream.write(string, 'utf8')
07:53 < chovy> stream.write(string, 'binary')
07:53 < chovy> i'm not exactly sure, just a guess
07:55 < Interactive> I've tried both, same results.
07:57 < Interactive> Hmm, just tried something else. I'm downloading these images for a pdf (using pdfkit.org). When I don't use them (pdf.image) the size is always correct.
07:57 < Interactive> So either the pdf.image is executed to early or it delete's the content of the file.
07:58 < chovy> what is pdf.image?
07:58 < Interactive> It's part of pdfkit. 
07:58 < Interactive> It put's an image on the pdf page.
07:59 < Interactive> http://pdfkit.org/docs/images.html
07:59 < chovy> that might be the problem.
07:59 < chovy> your code is download the image to use in the pdf?
07:59 < Interactive> Yes.
08:00 < chovy> can you paste the pdf generation part, that calls this code you showed us?
08:00 < pixie79> i am now getting -> [object Object].drbdinfo.version instead of the value of the object any ideas ?, I am calling console.log(drbd + "." + ref)
08:00 < Interactive> The pdf creations is (should be) started after everything is downloaded.
08:01 < Interactive> In the "end" listener I emit an event ('attachmentDownloaded').
08:02 < Interactive> The listener for event 'attachmentDownloaded' counts the number of downloads completed and when everything is downloaded the pdf creation is started.
08:04 < Interactive> http://codepaste.net/qkzb5m
08:05 < [AD]Turbo> running "npm outdated" I got some packages listed (as outdated), but npm update does not update them :( why?
08:07 < Industrial> because there are no newer versions?
08:08 < Industrial> but if they are written for e.g. node 0.4 ..
08:10 < [AD]Turbo> but "npm outdated" reports me 4 packages
08:10 < [AD]Turbo> so those 4 modules are outdated (actualy they are)
08:10 < [AD]Turbo> but they are not updated with npm updare
08:13 < chovy> Interactive: sorry man. i'm not sure
08:14 < Interactive> @chovy, thanks for looking at it :-)
08:14 < Interactive> At least now I know there is no single 'stupid' error in the code :-)
08:33 < pixie79> i seem to have an understanding issue, - i am still getting [object Object] when i try to call a value from my json object -> https://gist.github.com/3856643 - is there anyone that can give me a clue please
08:35 < medikoo> Does anyone one do fs.chmod has any effect on Windows? It's available there but when invoked doesn't do anything to file, is this just noop in that case?
08:35 < medikoo> and if it is, why it is available, and not hidden (as lchmod is) ?
08:40 < chovy> wht does ~ mean in package.json version number?
08:40 < chovy> underscore: "~1.4.2"
08:40 < chovy> for dependency
08:41 < Interactive> chovy: I suspect it means "aproximatly"
08:41 < chovy> k
08:42 < xico> Hi, anyone with keen knowledge on node.js modules, the way they're cached, and the module object?
08:42 < vectorshelve> any good tutorials for complete beginners on node.js right from explaining what it really is ?
08:45 < chovy> vectorshelve: there is some good stuff at howtonode
08:45 < Interactive> pixie79: What are you trying to do?
08:45 < vectorshelve> chovy: thanks
08:45 < chovy> vectorshelve: depends on what you want to do, build a web app, build some kind of realtime app
08:45 < medikoo> chovy: it means: >= 1.4.2 and < 1.5
08:45 < chovy> if you're looking to build a web app, like you would with rails or php. i would look at express, mongoose.
08:45 < chovy> medikoo: ok, thanks
08:46 < Interactive> medikoo: Could it be that fs.chmod on windows depends on the filesystem?
08:47 < vectorshelve> chovy: firstly I wanna to know what  node.js is in depth and then start with sample app
08:47 < Interactive> For as far as I know fat doesn't have a chmod but I don't know about exfat or ntfs
08:47 < vectorshelve> chovy: could you help with the right material
08:47 < medikoo> Interactive: good point, it might be, but it would be good to know for sure
08:48 < Interactive> medikoo: true
08:48 < xico> Is it possible to use   "require.main" to access modules exported in the main module?
08:48 < xico> Or to use modules required by the main module?
08:49 < Interactive> vectorshelve: have you tried looking at youtube? For Example: http://www.youtube.com/watch?v=F6k8lTrAE2g
08:49 < astropirate_> xico, you cant use a module required by another module unless they export that module
08:50 < vectorshelve> Interactive: youtube.. I cant access now from office :) Will look at it.. for now any readable stuff ?
08:50 < xico> astropirate_: Imagine I export the module.
08:50 < pixie79> Interactive: i am trying to get the result of the variable stored under the json path drbd.drbd0.performance.ns, I am making this into a module so that i can use it to call other compontents of the JSON as well later if i want to for example drbd1.xxx.x
08:51 < Interactive> vectorshelve: maybe this: http://www.ibm.com/developerworks/opensource/library/os-nodejs/index.html
08:51 < xico> astropirate_: Imagine I perform require.main in some random module and I get access to the main module (where the application was started at)
08:51 < xico> Would I have access to that module's export object?
08:51 < astropirate_> there is such a thing as module.main? o_O
08:52 < astropirate_> xico, could you make a very small pastie of what you mean
08:52 < astropirate_> i'm confused
08:52 < xico> Alright.
08:53 < Interactive> pixie79: Is drdb an object or a json string?
08:53 < chovy> vectorshelve: http://radar.oreilly.com/2011/07/what-is-node.html
08:53 < pixie79> if i do console.log(drbd.drbd0.performance.ns) we are fine but console.log(drbd +.+ ref) fails
08:53 < pixie79> Interactive: it should be a json string
08:54 < pixie79> but at the moment if i call it how i am i get [object Object].drbd0.performance.ns
08:54 < pixie79> where ref = drbd0.performance.ns
08:54 < Interactive> pixie79: If it is a json string, how about first parsing it to an object ?
08:55 < calvinfo> xico: seems it's possible from a quick test, but also seems like a convoluted way to require modules
08:55 < pixie79> Interactive: you mean tmp = JSON.parse(drbd) then do tmp +.+ ref  ?
08:55 < Interactive> pixie79: almost :-)
08:55 < xico> calvinfo: It would mean easier access to modules you need in all your application
08:55 < Interactive> pixie79: tmp = JSON.parse(drbd) then do a tmp.ref
08:56 < xico> calvinfo: This way you could use core modules without needing to know the path to your main module. Just by using require.main 
08:56 < calvinfo> xico: for that I use symlinking or commit directly to node_modules if it's a specialized app
08:56 < xico> Hum
08:56 < xico> calvinfo: What do you mean by symlinking?
08:56 < xico> and commit directly
08:57 < calvinfo> xico: symlinking only will work on mac or linux, but you basically commit a link in your node_modules folder to the module source folder
08:57 < pixie79> Interactive: nope - SyntaxError: Unexpected token o, undefined:1, [object Object]
08:58 < calvinfo> so when you require('foo'), node will look for it in the node_modules folder, and then it will follow the link
08:58 < vectorshelve> chovy: thanks
08:58 < Interactive> pixie79: I'm looking at the gist again, it seems the the second argument to resultFor is the path you want to take in the first object.
08:58 < xico> calvinfo: What does that mean: "it will follow the link"?
08:59 < Interactive> pixie79: (don't know if I use the correct terms).
08:59 < pixie79> Interactive: yes correct
09:00 < Interactive> pixie79: I don't know of a nice trick to do that right now.
09:00 < Interactive> pixie79: What I do know is that drdb + . + ref would never work :-)
09:00 < xico> calvinfo: The meaning of what I'm asking, would be about also having access to my own modules. Not just node_modules :D I have some utilities that are read only. If I could access them directly without having to provide the path to require them, it would be a beauty
09:01 < Interactive> pixie79: have you tried   tmp = JSON.parse(drbd); tmp[ref]
09:01 < calvinfo> xico: the way we deal with that is by having a modules folder, and then symlinking them to the node_modules folders which need them, then committing those symlinks
09:02 < calvinfo> xico: but it won't work in windows since last I checked it doesn't have a version of symlinking
09:02 < pixie79> Interactive: JSON.parse fails with undefined
09:02 < xico> calvinfo: I'm checking it and it seems like it is already supported in windows by providing an extra argument
09:03 < calvinfo> xico: nice, I haven't checked windows in awhile so I could be incorrect on that one
09:03 < pixie79> in theory it should already be an object
09:03 < xico> calvinfo: I kind of understood what you said. I'm just having trouble with the concepts of symlinking and commiting symlinks. Only because I never used it :)
09:03 < Interactive> pixie79: is drdb defined?
09:03 < pixie79> yes
09:04 < pixie79> i can do console.log(drbd.drbd0.performance.ns) ok
09:04 < pixie79> inside this function
09:04 < calvinfo> xico: good deal :) it takes little while to understand, but I'm sure you'll get the hang of it
09:04 < pixie79> i just cant seem to do that when using drbd0.performance.ns as a string referance
09:06 < Interactive> pixie79: does JSON.parse("{\"first\":1}"); work?
09:08 < strk> how do I require('../../package.json') from a file in a module ? I mean, how do I find a module's root dir ?
09:08 < pixie79> Interactive: yes
09:09 < Interactive> pixie79: I'm a bit out of ideas, but maybe this can help you (it seems similar): http://stackoverflow.com/questions/6898288/reference-javascript-object-from-string
09:10 < jetienne> i look for a 'you got 5min to publish a npm package' tutorial.. . anybody got recent link
09:12 < pixie79> Interactive: ok - thanks for trying
09:13 < xico> astropirate_: Sorry for earlier for leaving you hanging. calvinfo actually had an quick answer for me and I just started asking him stuff :) Thanks for the interest anyway ;)
09:13 < astropirate_> xico, no worries
09:22 < jetienne> q. is there a way to automatically bump the version in the package.json ?
09:33 < Sven_vB> about async.map, and the callback that it gives to my iterator. should the iterator invoke that callback plain, or should i schedule the call for later?
09:46 < pixie79> Interactive: well i have got a bit further - and i definetly have an object - infact it looks like it have ended up with an object of objects which will be tricky to transverse
10:07 < Interactive> pixie79: good to hear you got a bit further. How is an object of objects more difficult to transverse
10:39 < shi> xin chao' :D
10:39 < shi> i can't install tower.js
10:39 < shi> pls help me. 
10:40 < shi> i get error " make post-install
10:50 < sinclairzx> its quite nice to run the TS compiler within nodejs
10:50 < sinclairzx> saves a compiler step
10:52 < SomeoneWeird> ts?
10:52 < sinclairzx> TypeScript
10:52 < sinclairzx> you can bind TS to node really easily, and get all the TS goodness without the compile
10:53 < sinclairzx> SomeoneWeird: the compilers written in JS afterall
10:53 < sinclairzx> SomeoneWeird: so runs in node, im using it to compile TS scripts on the fly. i believe there are other libs that handle the same thing for coffeescript
10:53 < SomeoneWeird> heh, nice
10:55 < sinclairzx> SomeoneWeird: yeah, its quite nice :) more so that i can just roll regular old JS in TS and its fine
10:55 < sinclairzx> its nice to have the syntax candy of TS 
10:57 < sinclairzx> SomeoneWeird: here's a good reference http://stackoverflow.com/questions/12717309/does-typescript-provide-an-explicit-public-api-for-nodejs-module-access
11:05 < mk23> hi 2 all
11:12 < jcoglan> morning all
11:12 < jcoglan> question about crypto: I'm using crypto.createCipheriv('aes-256-cbc', key, iv)
11:13 < jcoglan> actually nvm
11:17 < syskk> lol
11:25 < pixie79> well, i got a bit further and i managed to access all the data in my JSON store, but i am now trying to use async.parallel to bring them all togeather so that i can return the result to the calling script however, it seems to only be replying with the first result, then setting the string to undefined and returning that, if i leave in line 38 i can see i have all the correct results though - any ideas ? https://github.com/pixie79/npm-drbd-metrics/blo
11:29 < jcoglan> (I made a stupid bits/bytes mistake, I am bad at computers)
11:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:48 < sinclairzx> http://jeromeetienne.github.com/chatandfight/#three.js <-- nodejs realtime server
11:51 < o_Owl> well
11:51 < o_Owl> Join me already then!
11:52 < sinclairzx> i did
11:54 < sinclairzx> http://visualcore.com/webgl/cubicdub/
11:59 < Topcat> hey I'm trying to get node on my raspberry pi, should I ask here or in their irc 
12:17 < Tobsn> quick js function to remove false variables from an obj?
12:18 <@mbalho> map(Object.keys(obj)) etc etc
12:19 <@mbalho> or use underscore
12:19 < mscdex> or filter()
12:19 < Tobsn> hmm
12:19 < mscdex> or a for loop over Object.keys(obj) for speed
12:19 < mscdex> ;-)
12:20 < Tobsn> ;)
12:20 < Tobsn> hmm maybe i can loop over it and pop
12:31 < vidi> Topcat I have node running on raspberry with arch linux. 
12:34 < Topcat> vidi: i think it's sorted, I had the date wrong so make wouldn't do its thing
12:35 < Topcat> I ran make after 20 minutes it has booted me off ssh is that normal? software caused abort apparently
12:38 < Tobsn> wait
12:38 < Tobsn> does filter() work with objects?
12:46 < pixie79> any ideas why i get -> drbd0.performance.ns: 0 1349786664812
12:46 < pixie79> [Function]
12:46 < pixie79> when using async.parallel instead of the full collection of output ?
12:47 < pixie79> code -> https://gist.github.com/3858598
12:50 < jcoglan> can the hashing function used by crypto.pbkdf2 be changed?
12:50 < jcoglan> and why is it asynchronous?
12:52 < gavri> how do I make sure that when grunt runs my vow task, it runs it with NODE_ENV=test?
13:01 < christophsturm> is there a way to see how busy the node reactor is, or to detect when the reactor is blocked?
13:10 <@mbalho> christophsturm: intense cpu usage is how you kill node, i/o is non blocking
13:11 < christophsturm> do you know the answer to my question?
13:12 <@mbalho> christophsturm: i just answered it, look at your cpu usage
13:15 < christophsturm> well there must be some way to measure how long the reactor was blocked and complain when thats the case
13:19 <@mbalho> christophsturm: there might be a module that does that, there are 2 ways, one is dtrace probes the other is manual js benchmarking instrumentation
13:24 < pixie79> i now have tidied up my gist -> https://gist.github.com/3858598 but it still only get the first result from async.parallel and then [Function] any ideas ?
13:26 <@mbalho> pixie79: line 16 should be return res(err, result)
13:26 <@mbalho> pixie79: in node most callbacks always take an error as the first argument
13:27 < pixie79> mbalho: i get 'err' is not defined when i do that though ?
13:27 < RLa> and please call it cb or callback
13:28 < RLa> res is used a lot in socket handlers and confuses
13:28 < RLa> if there is no error, use null in place of that
13:28 <@mbalho> pixie79: i usually do cb(false, whatever)
13:28 < pixie79> ok
13:29 < RLa> and when you have error, use new Error("message") not just string
13:29 <@mbalho> pixie79: your code is all synchronous though so you dont really need callbacks
13:31 < pixie79> i dont ?
13:32 <@mbalho> pixie79: the whole resultfor method returns right away, callbacks just complicate things since you can just say var x = resultFor(blahblah) and it returns immediately
13:32 <@mbalho> pixie79: callbacks are for async stuff like I/O which doesnt return immediately
13:35 < pixie79> arh ok - i think i am still getting mixed up on what is sync / async
13:35 < RLa> or rather, for i/o functions that return immediately but use callbacks to do the actual work
13:36 <@mbalho> pixie79: i/o is async, cpu isn't :)
13:37 < pixie79> ok
13:37 < RLa> to understand it best would be to look at the event loop
13:38 < RLa> sync is code that runs in the same event, async is code that creates new events
13:39 < RLa> nextTick, setTimeout etc. are non-io that can also create new events
13:39 <@mbalho> pixie79: if whatever you are working with is in RAM already then manipulating it can be done synchronously (aka blocking)
13:40 <@mbalho> pixie79: but say you wanted to resize an image, first you need to load the image from the internet or your hard drive into memory and then you can do the synchronous resize step
13:40 <@mbalho> pixie79: but the image load step is i/o so it should be done with a callback because it might take a while because i/o is slow
13:41 < RLa> yes, you ask it to retrieve image and once it arrives, the node will call your callback with the image data
13:42 < RLa> the function that asks to retrieve the images return immediately, so you cannot wait or block on that io operation
13:44 < RLa> if you need multiple images, such code can turn into callback spaghetty, that's why we need libs like async to manage it better
13:46 < pixie79> arh ok - it is starting to make more sense thanks - i think that is where i was getting confused as the data i am working on is from a file but it now in memory
13:56 < mscdex> callback spahetti in a meat sauce
13:56 < mscdex> s/spahetti/spaghetti
13:57 < mscdex> >> coffee === undefined
13:57 < purr> mscdex: ReferenceError: coffee is not defined
14:00 < victusfate> good morning
14:01 < holzp> good morning to you
14:01 < victusfate> anyone else experience intermittent socket hang ups? we've seen it from browser clients as well to our api so I don't expect it to be nodejs related but it's worth asking
14:01 < victusfate> we're running 8.11 atm
14:01 < holzp> anything proxying them?
14:01 < nathan7> 0.8.11, presumably
14:02 < victusfate> we had aws elb to nginx
14:02 < victusfate> but now it's just nginx
14:02 < victusfate> just saw another one from our upload server to s3
14:02 < victusfate> Oct  9 13:59:44 ip-10-158-25-144 development-upload-Uploads[21347]: {"action":"Error Details","error":{"message":"socket hang up","stack":["Error: socket hang up","    at createHangUpError (http.js:1263:15)","    at CleartextStream.socketCloseListener (http.js:1314:23)","    at CleartextStream.EventEmitter.emit (events.js:123:20)","    at SecurePair.destroy (tls.js:938:22)","    at process.startup.processNextTick.process._tickCa
14:03 < holzp> it this a socket.io deal?
14:04 < victusfate> one sec, going to make sure our dev ops guy disabled elb on the upload server
14:09 < victusfate> my bad uploads just watches s3 for uploads and lets our api server know to process the file as necessary. no proxy there
14:09 < victusfate> so it's a light server just watching s3
14:11 < joeyjoe> has anyone ever seen net.Socket.remoteAddress being set to "-" for a valid TCP connection?
14:12 < analphabet> joeyjoe: no
14:12 < joeyjoe> I just had a process die on dns.reverse(socket.remoteAddress, ...). dns.revers it threw "Error: getHostByAddr ENOTIMP", and it seems that the cause was remoteAddress being set to "-" instead of an IP address.
14:13 < joeyjoe> it's easy to catch the exception, i'm just more puzzled as to how that could happen in the first place
14:13 < joeyjoe> .... to the source!...
14:15 < joeyjoe> ahh actually, it turns out it probably wasn't "-" (that was output by my logger). it was a falsey/nully object
14:22 < victusfate> @nathan7 and @holzp thanks for the response. Will keep on poking around until I get more info.
14:24 < joeyjoe> hmmm.. looking at the node src, i think the only way this could have happened is if uv_tcp_getpeername() fails
14:25 < holzp> I got so sick of dealing with socket.io wierdness with proxies I went back to polling
14:25 < holzp> will try sio again whtn nginx supports
14:26 < Gekz> Hochmeister: what does it do with proxies?
14:32 < pixie79> are the any issues with optparse? optparse.js:225 var tokens = args.concat([]); TypeError: Cannot call method 'concat' of undefined - or have i missed something potentiall in the implementation
14:34 < pixie79> i am currently doing -> https://github.com/pixie79/npm-drbd-metrics/blob/master/bin/drbd.js
14:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:44 < MI6> joyent/node: Ben Noordhuis master * 0ad0058 : https: fix renegotation attack protection  Listen for the 'clientError' e (+3 more commits) - http://git.io/HuU6Dg
15:02 < MI6> joyent/libuv: Hiroaki Nakamura master * 2684f87 : windows: don't set CRT debug mode on MinGW (+2 more commits) - http://git.io/NHM8FA
15:19 < sual> Forgive me if this sounds dumb but I'm new to server-client deal, trying to add some basic multiplayer functionality to my game (turn based so it doesnt have to be fast).  I want it to work across all mobile browsers and even EI8,  my question is,  Does node.js support these browsers and is socket.io in anyway related to nodejs?
15:20 < rektide> sual: A) node.js supports all browsers. b) socket.io is a library that runs no node.js for writing real-time communication web applications.
15:21 < sual> rektide:  Which would you recommend learning for a newbie to sockets?
15:21 < gildean> sual: nodejs in those situations is usually used to create the server, tho' you can create clients or whatever you can imagine
15:23 < gildean> sual: plain websockets aren't well supported yet in mobile browsers, but socket.io uses fallbacks
15:32 < MI6> joyent/libuv: Hiroaki Nakamura master * acea302 : unix, windows: add thread barrier support - http://git.io/OSGvww
15:35 < jocafa> "DMG, we trust in thee. Hexadecimal, it's enough for me. We burn LSDJ.gb…"
15:38 < xico> Hellooooooo
15:38 < xico> I'm having trouble with Express Sessions.I'm storing functions in there, but they are removed on page reload. 
15:38 < xico> Why is that?
15:39 < milani> xico, check cookie to see if you save the right session id
15:40 < xico> I have other objects in there
15:40 < xico> besides the functions milani
15:40 < xico> milani: All objects stay the same except for functions
15:41 < milani> xico, save an object which contains functions u need.
15:44 < xico> milani, That's what I'm doing. I save 4 functions and 2 strings inside an object and I store it in session
15:44 < xico> milani: When I reload the page I console.log the session object
15:44 < xico> and the functions are gone
15:44 < xico> except for the strings
15:44 < milani> interesting.
15:45 < xico> Were they supposed to stick in there?
15:50 < aaronfay> Hello, quick question about npm: is there a way to "install" a module in-place (similar to python setup.py develop) so the file(s) will be installed, but you can still hack on them?
15:50 < xico> aaronfay: define "in-place"
15:51 < RWOverdijk> I want to install node.js. I'm running on debian, and I used the make install method. Now a coworker was freaking out over it. I want to know why make install would be a bad thing.
15:52 < aaronfay> xico: I'm working on a module that has scripts (as per "bin" in package.json), I'd like to have it "installed" but still work on the files
15:53 < aaronfay> xico: with python's setuptools, if you `python setup.py develop` python will install the module 'in-place' meaning the library references your working copy instead of the global site packages
15:54 < xico> aaronfay: What command are you using with npm to install your modules?
15:54 < aaronfay> xico: I'm not yet :)
15:54 < aaronfay> xico: probably npm install .
15:55 < xico> aaronfay: npm install, installs locally
15:55 < xico> aaronfay: Right in the folder your terminal is
15:55 < xico> creates a folder called "node_models"
15:55 < Daegalus> npm install -g installs globally
15:55 < aaronfay> xico: yeah, I get that
15:56 < xico> And you will have direct access to the modules you're installing
15:56 < aaronfay> xico: I want the script available from another folder without referencing the path
15:56 < aaronfay> xico: it's an executable
15:56 < creationix> aaronfay, node_modules
15:56 < xico> aaronfay: Node autmatically searches for the modules inside "node_modules"
15:57 < xico> aaronfay: Even if "node_modules" is a couple of directories back
15:57 < creationix> require('foo') looks in ./node_modules, ../node_modules, ../../node_modules, ..., /node_modules
15:57 < Daegalus> aaronfay: then install it into global, it always searches global.
15:57 < chrisjaure> aaronfay: if you're developing a module locally, you probably want npm link
15:57 < creationix> no, require('foo') does not look into $PREFIX/lib/node_modules
15:57 < creationix> which is there global installs go
15:57 < creationix> only executables installed to $PREFIX/bin get that in their path
15:58 < aaronfay> I want the script in the "bin" folder available as if it were `npm instal -g` without globally installing it
15:58 < aaronfay> I still want to hack on the files
15:58 < tomshreds> hai
15:58 < aaronfay> My question really is, I suppose, can it be done
15:58 < aaronfay> ... with npm
15:59 < creationix> aaronfay, just add the bin folder to your path or symlink to it from somewhere in your path
15:59 < aaronfay> Thanks tim, I'll do that
15:59 < creationix> $PROJECT/bin/myscript.js can require files in $PROJECT/node_modules
15:59 < Daegalus> aaronfay: https://npmjs.org/doc/link.html
16:00 < xico> Is it possible to store Functions in the session object?
16:00 < xico> (Express question)
16:03 < aaronfay> Daegalus: npm link looks to do exactly what I want, ty
16:17 < strk> To listen to a unix socket, supply a filename instead of port and hostname. 
16:17 < strk> how does node.js distinguishes between a filename and an hostname ?!
16:20 < generalissimo> strk: flux capacitors and moxy
16:21 < strk> ah, got it, it's inverted args
16:29 < tomshreds> Hi guys, is there anybody who knows connect very well?
16:30 < context> tomshreds: its generally easier to just ask.
16:30 < tomshreds> I asked yesterday but nobody were able to help, but I'll re-ask.
16:31 < tomshreds> What would prevent connect (sessions) to save sessions after a request? I'm having a bug where I set sessions and on the next request they do not exist anymore.
16:31 < context> how are you storing sessions
16:31 < context> see that thats actually working
16:31 < tomshreds> I'm trying the very basic example like this: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js#L17
16:34 < tomshreds> If somebody can find what causes the bug I think I take a plane and go hug him/her
16:34 < generalissimo> tomshreds: make a gist of your actual code
16:35 < tomshreds> This is my code:
16:35 < tomshreds> https://github.com/Brainpad/ThinAir/blob/master/libs/server.js#L17
16:35 < xangelo> that's not storing sessions anywhere
16:35 < tomshreds> Ah and I tried also with a memory store: https://gist.github.com/3859805
16:35 < tomshreds> uh?
16:35 < xangelo> or rather, you're not reading the sessions back
16:35 < tomshreds> Oh please please, tell me I'm dumb and that is a simple bug to fix lol
16:36 < tomshreds> Any example of how I could do so?
16:36 < xangelo> http://www.senchalabs.org/connect/session.html 
16:36 < tomshreds> That's where I took the example.
16:36 < xangelo> talks about reading the session back
16:36 < xangelo> under req.session
16:36 < jchannon> I've got this in my Sublime Text 2 project file for a build system but its not starting up node inspector. Any ideas?
16:37 < jchannon> "build_systems": 	[ 		{ 			"name": "NodeF1Build", 			"cmd": ["nodemon", "--debug", "$project_path/app.js", "&", "node-inspector"],   			"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",   			"selector": "source.js" 		}  	]
16:37 < tomshreds> Yes that is the exact same place I took the example, that's what I do in server.js there: https://github.com/Brainpad/ThinAir/blob/master/libs/server.js#L15
16:37 < xangelo> all your code seems to be doing is setting the session over and over
16:38 < tomshreds> Could you explain to me what's the difference between my code and the example? (Besides the example code incrementing a variable over and over again?)
16:39 < tomshreds> xangelo: if you're talking about where I set sessions:
16:39 < tomshreds> I https://gist.github.com/3854726
16:39 < tomshreds> That's one example.
16:39 < tomshreds> I thought at first it would be because of the redirects
16:40 < Lucky--> question is there a server side modular loader framework that serves the bundle doown ?
16:44 < xangelo> tomshreds: just following your code: when a user connects to your server it looks like it's setting the user session data right away. then later on you're setting session data. but when a new connection is established it overwrites your session data
16:44 < xangelo> so basically, its setting some session data on connection, you change it, a new connection is made and your session data is over-written
16:45 < tomshreds> server.js is the first thing being called in my code, then when a login request is received, it sets the session's data and the request is redirected.
16:45 < tomshreds> hum
16:45 < jchannon> no ST2 users about?
16:45 < tomshreds> I'm trying to figure this out
16:45 < tomshreds> when you say "a new connection is made" what do you mean?
16:45 < xangelo> tomshreds: any request
16:46 < tomshreds> So basically it just does NOT save the data anywhere, right? So how could I? Thanks for the help, very appreciated by the way
16:48 < generalissimo> tomshreds: ummmm
16:48 < generalissimo> you're not saving the session?
16:48 < generalissimo> you're just setting some props on it
16:48 < generalissimo> in the example you posted
16:49 < jchannon> graeme_f: you there?
16:49 < tomshreds> yeah but HOW to save it? that's the question :) thx
16:49 < graeme_f> jchannon: yessir
16:49 < generalissimo> there's a save method on the session object
16:49 < jchannon> do you use Sublime Text 2?
16:49 < niggler> any reason why gyp is in npm as node-gyp and not just gyp?
16:49 < generalissimo> it's on the connect session docs page
16:49 < graeme_f> jchannon: no, I use WebStorm mostly
16:49 < jchannon> graeme_f: DOH!
16:50 < milani> niggler, because it is nodejs flavored gyp
16:50 < tomshreds> So I should call it, right after having setted the data?
16:50 < niggler> fair enoug milani but nothing is commandeering 'gyp' right now
16:50 < TooTallNate> niggler: mostly cause it's a program, and not a module
16:50 < niggler> and wouldnt it be far more confusing for something else to occupy that
16:51 < generalissimo> tomshreds: i'm guessing yes
16:51 < milani> niggler, there is a gyp by google which people use
16:51 < generalissimo> i usually use express and an auth middleware, so i'm just making educated guesses
16:51 < milani> it will be confusing having two gyp:D
16:51 < tomshreds> generalissimo: ok, yeah I used to use connect with express, and in my souvenirs there weren't any save to call for sessions in express.
16:52 < jchannon> graeme_f: Seems to be a popular choice. Maybe I should have bitten the bullet
16:52 < graeme_f> jchannon: i haven't really used much else so can't offer you a comparison :)
16:52 < tomshreds> generalissimo: I tried calling req.session.save() and it doesn't work anyways
16:53 < drey_> window 10
16:53 < holzp> hm, is ther a way in node-redis to update only certain elements of a stored hash?
16:53 < jchannon> graeme_f: as an IDE does is it somehow offer full intellisense
16:53 < graeme_f> jchannon: it has a good go
16:54 < rio{> As I understand it you can do request(uri, options, callback) even tho docs states that request(options|uri, callback) correct?
16:56 < jchannon> graeme_f: hmmmm
16:56 < holzp> ugh, i'm gonna look at this code in a year and hate myself
17:08 < tomshreds> Anyone played with https://github.com/masylum/connect-mongodb lately? It seems to be not working anymore.
17:08 < s5fs> holzp: that's how i feel about all code i write
17:11 < holzp> i flushdb my redis database, and yet node-redis always returns true when checking .exists(key)
17:12 < russfrank> rio{: dunno if you can do that
17:17 < JackSmith> hey guys can i ask you a question?
17:17 < holzp> sure
17:19 < JackSmith> k
17:19 < JackSmith> do you guys know when libuv if at all will be rewritten?
17:19 < JackSmith> i was watching a talk and it talks about how libeio in libuv will be rewritten entirely
17:19 < JackSmith> and libev also
17:19 < JackSmith> any thoughts?
17:20 < rauchg> JackSmith
17:20 < rauchg> do they mention why in the talk ?
17:20 <@ryah> JackSmith: does it matter?
17:20 <@ryah> JackSmith: i dont think the interface will change for users
17:21 < JackSmith> http://www.youtube.com/watch?v=nGn60vDSxQ4
17:21 < JackSmith> I guess it doesn't :P
17:21 < chovy> anyone deploy with git? I'm curious how you do npm install in post-receive hook
17:21 <@ryah> it's basically internal plumbing
17:21 < JackSmith> i was just wondering
17:21 <@ryah> JackSmith: bnoordhuis is doing that work - you should ask him
17:22 <@ryah> i beleive it's already underway
17:22 <@ryah> but even for me - a user of pure libuv - it doesn't interest me much since libeio and libev are statically compiled into libuv
17:22 <@ryah> it's just internal changes
17:23 < JackSmith> i will
17:23 < JackSmith> thanks
17:23 <@ryah> at some point bnoordhuis may be able to release the dependency on libc entirely - which would be a nice change
17:23 <@ryah> and will affect users
17:23 <@ryah> JackSmith: #libuv is the libuv channel
17:23 < holzp> no idea
17:46 < niggler> anyone running osx10.7.5
17:47 < othiym23> niggler: y
17:47 < othiym23> do all my dev on it
17:48 < niggler> tic managed to clobber my terminfo
17:48 < niggler> i need a copy of /usr/share/terminfo 
17:48 < othiym23> hold on
17:50 < othiym23> niggler: https://www.dropbox.com/s/5j9f020vh3f8i60/terminfo.tar.bz2
17:50 < niggler> gracias othiym23 
17:50 < othiym23> np
17:56 < niggler> whew finally
18:07 < niggler> othiym23: one more question -- can you run $ declare | grep CLICOLOR
18:07 < niggler> im trying to hunt for where CLICOLOR=1 is getting set on one of my boxes because its not getting set on the other and the standard places dont give any hints
18:12 < othiym23> niggler: I run a homebrew-built zsh, is that still going to be helpful to you?
18:13 < niggler> yeah that's fine othiym23 
18:13 < othiym23> niggler: returns nothing in either zsh or bash
18:13 < niggler> hmm and in bash when you run ls does it show colors?
18:14 < othiym23> niggler: nope
18:14 < niggler> oh ok cool
18:14 < othiym23> niggler: /etc/profile /usr/local/etc/profile /etc/bashrc /usr/local/etc/bashrc -- you checked all those places?
18:15 < superjoe> ryah, removing the dependency on libc altogether sounds interesting. what would that mean for an end-user? speed improvements? 
18:15 < niggler> yeah othiym23 :/ im sure i have some mysterious file somewhere
18:15 < superjoe> ability to deploy node.js in more lean environments?
18:15 < niggler> but i just wanted to be sure that color wasnt the default behavior
18:15 < othiym23> superjoe: it would mostly mean conceptual neatness, a lot more maintenance overhead, and one less point of difference between Node and go ;)
18:16 < superjoe> othiym23, why more maintenance?
18:16 < niggler> ryah are you planning on a fallback?
18:16 < niggler> superjoe: glibc has … issues
18:16 < othiym23> superjoe: because libc is where the kernel calling conventions for each supported platform live
18:16 < superjoe> othiym23, ahh, you meant *less* maintenance overhead
18:16 < othiym23> no, I mean more
18:17 < txdv> aaaaaa
18:17 < othiym23> because you're now responsible for knowing how to make kernel calls on N platforms instead of just POSIX and Windows
18:17 < necros> hi
18:17 < necros> somebody knows if vows executes the .run(callback) always?
18:17 < superjoe> othiym23, hmm, removing that dependency seems questionable
18:18 < othiym23> having completely static, self-sufficient binaries is neat and more deploy-friendly, but it's a pain in the ass in other ways
18:18 < txdv> great
18:18 < superjoe> gotcha. thanks for the explanation
18:19 < othiym23> it might make libuv more attractive for embedded applications / tiny runtimes like luvit, though
18:27 < qubit[01]> anyone know of a XLS to CSV converter for node ?  perhaps using open office ?
18:28 < niggler> qubit[01]: lol im working on one
18:28 < niggler> at this point you are better off using xlrt or php-excel
18:28 < niggler> you dont need openoffice to do it
18:28 < qubit[01]> hmm
18:28 < qubit[01]> are you gnovy ?
18:29 < qubit[01]> *is your name gnovy ?
18:29 < niggler> im entrepreniggler
18:29 < niggler> but it was truncated to niggler
18:29 < niggler> lol
18:29 < qubit[01]> nice
18:29 < niggler> no im not gnovy
18:29 < niggler> ive used xlrt on python and it works very well
18:30 < niggler> php-excel claims to be more complete but i dont have much experience with it
18:31 < qubit[01]> xlrd ?
18:31 < niggler> yeah heh
18:31 < niggler> xlrd/xlwt
18:31 < niggler> http://www.python-excel.org/
18:31 < qubit[01]> ahh gotcha
18:31 < qubit[01]> sweet
18:32 < niggler> combined the two :P
18:33 < niggler> othiym23: doesn't v8 depend on libstdc++?
18:38 < vicapow> hey guys, any devs here in the easy bay?
18:38 < othiym23> niggler: probably
18:38 < othiym23> vicapow: nope, I'm in the hard bay
18:39 < othiym23> the hard streets of the financial district
18:39 < niggler> lol "financial district"
18:39 < vicapow> othiym23: cool.
18:39 < othiym23> niggler: fortunately you don't have to have v8 to have libuv, altho I forget that sometimes
18:39 < vicapow> i just moved to the easy bay from the east cost but i know no one!
18:39 < niggler> libstdc++ is another thing that should die
18:40 < niggler> along with STL
18:40 < othiym23> so basically you're saying you're not super fond of C++, niggler
18:40 < vicapow> trying to figure out how i can make some new friends, since i work remotely
18:40 < niggler> I like the subset of C++ that works in C
18:40 < othiym23> vicapow: you should put gather.at on your phone and follow maxogden and substack
18:41 < othiym23> they're busy traveling all over the world right now, but I know they like to hack it up in coffee shops in the Beast on occasion
18:41 < niggler> nah lemme amend that -- I dislike how people abuse STL
18:41 < vicapow> othiym23: actually, i did. even before i moved here. but i think they're all in Europe right now
18:41 < othiym23> yeah, they're peripatetic code samurai
18:52 < s5fs> vicapow: SIGs
18:55 < vicapow> s5fs: SIGs?
18:56 < s5fs> vicapow: special interest groups, user groups, etc. i used to hang with the baypiggies (python) down at google campus, met lots of ppl.
18:57 < vicapow> from easy bay, the valley is about an hour drive ;(
18:57 < vicapow> I have gone to a few meet ups in the city, though. those were cool
18:58 < vicapow> couldn't find a lot of up coming node.js meet ups in the city or on the easy bay, however
18:58 < s5fs> vicapow: logistics aside, that's how i made new friends when i moved to oakland
18:58 < vicapow> s5fs: then i may just have to suck it up and make the trip i guess
18:58 < s5fs> vicapow: node is still pretty small, i hung out with the piggies b/c they were sharp folks, i wasn't even working in python that much, haha
18:59 < vicapow> s5fs: good point
18:59 < s5fs> vicapow: meh, any group is a good start, the closer the better. meet some folks, most likely the ones you think are cool will also be into other things you like, and they may know of better meetups to attend
19:00 < s5fs> vicapow: wish i was back in sf, i'd buy you a beer haha! now i'm in portland, smaller market here.
19:01 < vicapow> s5fs: how do you like portland?
19:01 < analphabet> #offtopic
19:02 < aandy> this isn't twitter
19:02 < aandy> #yolo
19:02 < zenithar> hi
19:07 <@isaacs> vicapow: I'm an Oaklander.  So is mikeal and mbalho
19:07 <@isaacs> vicapow: and substack
19:07 <@isaacs> vicapow is not here.  oh well.
19:08 <@isaacs> ircretary: tell vicapow  You're an oaklander?
19:08 < ircretary> isaacs: I'll be sure to tell vicapow
19:11 < niggler> wtf is yolo
19:11 < othiym23> you only live once yolo, as Drake memorably said
19:12 < othiym23> or maybe that was Big Sean
19:12 < othiym23> http://www.youtube.com/watch?v=BYDKK95cpfM
19:19 < dominicbarnes> hey there, I'm having a slight issue with HTTPS ClientRequest, and I'm not sure what I could do differently to fix it
19:19 < holzp> I wound up stunnling http just to avoid putting it in my app direct
19:20 < dominicbarnes> issuing a GET request via the core HTTPS module is much slower than I am expecting, about half the speed of just opening up the same URL in my browser
19:20 < dominicbarnes> using CURL on the CLI gets the same result, which makes me think that connection pooling is what's helping Chrome move along so quickly
19:20 < dominicbarnes> but I thought node used connection pooling via Connection: keep-alive by default
19:21 < dominicbarnes> unless I'm wrong, can someone correct me on this?
19:27 < niggler> i thought curl reused connections by default
19:28 < niggler> sorry that's the library
19:28 < niggler> dominicbarnes: when you curl -D do you see that header?
19:32 < Chorvus> Hello, is there any way I can refernce to my `/app_root/libs/db.js` as simple as "var db = require( 'db' );", in a deeper path like `/app_root/models/user.js`?
19:39 < Chorvus> I mean, am I forced to use `node_modules` for my private application-wide modules or I can take another route? I'd like to use node_modules exclusively for npm because it's more convinent to use with version control. Any suggestions are welcome :)
19:39 < dominicbarnes> niggler: if I curl without any additional headers, I see no connection: keep-alive
19:39 < RLa> Chorvus, you need ../ unless it's in node_modules
19:39 < dominicbarnes> but, when I add -H "connection: keep-alive" the server responds as expected (with that header)
19:48 < EhevuTov> ben_alman, did you get your issue resolved on how you wanted to use local modules?
19:48 < ben_alman> still working on it
19:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:49 < EhevuTov> ben_alman, I had a scenario where I wanted to require local (non-npm'ed) modules without having to do a './' in the require. It looks like you can do like a rename in package.json, but not sure
19:50 < EhevuTov> ben_alman, do you have your project on a pub github? I'd like to see what you do when you get it done
19:50 < ben_alman> https://github.com/gruntjs
19:51 < ben_alman> it'll be a little while before i get it all sorted
19:52 < EhevuTov> ok, thank you
19:54 < coolblade> Hi guys, is there any good plugin to do a/b testing?
19:56 < jmoyers> coolblade npm search ab testing
19:56 < jmoyers> turns up like 30 modules
19:56 < rmill> but are there any _good_ ones? :D
19:58 < coolblade> was hoping there was like 1 or 2 that is popular, i did a little digging around but its hard because google only returns performance testing results
20:01 < Almindor> does anyone know when passport/node sets the "user" property for a request for authnetication purposes?
20:02 < generalissimo> Almindor: i'd scour the passport source for something that looks like connect middleware
20:03 < Almindor> I'll have to I gues
20:03 < chilts> Almindor: it'll be in the passport.session() middleware
20:03 < chilts> there is also passport.initialize() middleware before that, but I suspect the user will be set in the above
20:03 < Almindor> it's not being set even if the login callback is succesfull and I have no idea why, I need to find out how it decides it "passes" on subsequent requests
20:04 < chilts> are you serialising and deserialising the user properly?
20:04 < Almindor> I logged that, it seems to be giving the ID fine
20:04 < chilts> passport.serializeUser() and passport.deserializeUser()
20:04 < chilts> right
20:04 < Almindor> I get the session document in mongo (it's using mongoose store)
20:05 < chilts> and you're passing a 'user' data structure to done() inside deserializeUser()?
20:05 < Almindor> it's probably something stupid, this used to work before then the front-end webpage was not used for a long time (we're serving mainly mobile phone requests and they authenticate differently) and now it's just kicking me off from subsequent requests even if I see login success and the user/password passes
20:06 < Almindor> yep
20:06 < Almindor> now that you mention it
20:06 < Almindor> I didn't get deserialized called
20:06 < Almindor> only serialize
20:06 < chilts> yeah, that's a bit strange I guess
20:06 < Almindor> but I see them being set on passport at the same time so that's not it..
20:08 < Almindor> yeah I see only serialize being called
20:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:12 < Almindor> well
20:13 < Almindor> I see no "passport" in the session
20:13 < Almindor> if I log in initialize
20:17 < Almindor> it's always going to "inizialize new session" section, I think that's wrong
20:22 < s5fs> vicapow: i like portland, but i was raised here so i'm somewhat biased. i'm not as active in user groups here as i was in the bay, i think that's more due to age than anything else.
20:23 < aandy> anyone know if blogspot or tumblr supports pubsubhubhub (push)?
20:33 < nmartin> i feel stupid asking this:  In node + express, how do I pass a library reference to an app router that's in another file?  in my main app.js I create a reference to a library, and all my route functions need to call different methods on this library - the lib itself is stateless, so should I just include it in EVERY route?  Each time I create it, I have to read a config file and set some config variables, so that seems "heavy"
20:33 < nmartin> just declare it global in app.js?
20:34 < nathan7> nmartin: pass it to things
20:34 < nathan7> nmartin: or attach it to the app
20:34 < spencer-at-play> in my routes.js, i did something like this: exports.getTrack = function(redis) {
20:34 < spencer-at-play> 	return function(req, res, next) { /* code */ }};
20:34 < nathan7> nmartin: and pass the app around
20:35 < spencer-at-play> then i can use my external ref to redis within any of those calls
20:35 < aandy> nmartin: what nathan7  said. pass it around rather than going global
20:35 < nmartin> i see, so pass it as a parameter to an anonymous function
20:35 < aandy> to the routes that needs it, yes
20:36 < aandy> it's a "middleware" approach
20:36 < nmartin> cool, that gets me back on track
20:36 < nmartin> yeah, thats what im currently wrapping my head around: middleware
20:37 < aandy> or attach to the module itself on load (but might be "better" to use the middle'ish approach if you include the module in (more) files
20:37 < aandy> like my_module = require('module')(db_var);
20:37 < aandy> or lib_var ;)
20:42 < nmartin> aandy: like my_module = require('module')(db_var); < is this passing db_var to the 'modules' init function?
20:42 < jeromegn> I made a package, would love any kind of feedback on it: http://documentup.com/jeromegn/monastery
20:42 < nmartin> as a parameter
20:43 < aandy> nmartin: yeah, say you have an init function or wrapper like return new MyInit(lib_ref);
20:45 < EuroNerd> My current mongodb install doesn't seem to work and I'm considering reinstalling it. Would that wipe out my current databases?    [And yes, I tried asking on #mongodb, but nobody's alive there.]
20:49 < aandy> nmartin: here's an example: http://pastebin.com/WrigFgu3
20:51 < spencer-at-play> EuroNerd you should be able to reinstall - mongo data is stored in a separate directory from the binary (something like / data)
20:51 < EuroNerd> ok, thanks
20:52 < nmartin> aandy: so, here: req.db = img_db; you just attached img_db to the request object? is db an actual property of request, or totally arbitrary?
20:53 < nmartin> can i willy nilly do req.mylib = somelib?
20:53 < aandy> i attach it to the requests that needs it yes. for the sake of my paste it is arbitrary. it's just a property that the route needs
20:53 < aandy> could be anything
20:53 < nmartin> cool
20:53 < aandy> in this example my db model
20:54 < aandy> but could be any shared resources you'd want to use
20:54 < nmartin> thats exactly what I needed  - SO i can piggyback stuff onto node's/express'/connect's http server request object
20:54 < aandy> right, then it's middleware you want
20:56 < nmartin> yeah, all my route need parts of the request object and add stuff tot he response object, so that should work fine.  I'll also read up on writing and using middleware properly
20:59 < Almindor> I think I found the problem
20:59 < Almindor> if I drop the session document from mongodb after it's created (with empty user info) because of a hit on the login page, it works
21:00 < Almindor> so basically if the "first" session event is a real login (not the login page view) it works
21:00 < Almindor> if there's an existing session in the DB it doesn't seem to get updated with user id
21:00 < Almindor> any ideas where to look?
21:01 < aandy> nmartin: good idea. let me know if there's anything else :)
21:03 < nmartin> thanks, im sure there will be :)
21:03 < nmartin> anyone here written a quicken web connect module is CS? 
21:03 < nmartin> I may be the first on that one
21:05 < nlf> the law of github would state that once you've written it, at least one other will emerge
21:05 < aandy> haha
21:06 < aandy> on incidently, the law of npm would state that the obvious name for it is already taken by a dummy package not updated in 3 years
21:07 < dogmatic69> aandy: you can 'claim' it
21:09 < superjoe> dogmatic69, is this process documented?
21:10 < dogmatic69> yes, I read it the other day. Cant find it now
21:10 < nlf> essentially it amounts to contacting the owner of that package and begging them to tell isaac you can take it over
21:10 < nlf> or contacting isaac and begging him to let you have it
21:11 < dogmatic69> basically, but do step one, a few times. then step two.
21:11 < superjoe> works4me
21:11 < other_guy> isaacs, is there a way to get at the HTTP header/body parser to get at it from user land?
21:12 < superjoe> other_guy, that's rude. just ask your question into the channel.
21:12 < aandy> goodguy other_guy: ask pm in pubchan
21:12 < aandy> :D
21:12 < other_guy> superjoe, I ask isaacs questions all the time because for low-level stuff he's a good goto guy.
21:13 < aandy> no, you're assuming no one else knows the answer, and rather than making direct contact, you fill up his hilight :)
21:13 < jmoyers> other_guy https://github.com/joyent/node/blob/master/lib/http.js
21:14 < jmoyers> its a process binding
21:14 < other_guy> anyway, the point of the question is to feed the chunks from a 'multipart/mixed' into the http parser and get back the processed result.
21:14 < nlf> other_guy: i actually had the same question the other day, but no one was around to answer
21:15 < other_guy> jmoyers, taking a look
21:15 < saudude_> hey guys. is it a bad idea to store values (not functions) on an objects prototype? the value i have in mind must be the same value on all of the objects
21:15 < jmoyers> i dont know what the 'policy' is on reaching in and pulling out implementation details
21:15 < jmoyers> but i'd imagine there are no stability guarantees
21:16 < niggler> nothing stops you from doing it
21:16 < vicapow> saudude_: that's what i'd do
21:16 < niggler> >>> String.prototype.foo = "bar"; "abc".foo
21:16 < purr> niggler: (string) 'bar'
21:16 < other_guy> jmoyers, yeah that'd be my concern, but frankly there's nothing stopping weird arrangements of multipart/mixed results from borking my parser
21:16 < saudude_> ok :)
21:16 < other_guy> and I'm frankly sick of worrying about it, or build ever more special cases, so I wanted to use the Node parser as a general case.
21:17 < vicapow> saudude_: not that that means much :P
21:17 < other_guy> nlf, did you get it to work?
21:17 < nlf> other_guy: no, but i didn't try for long either
21:18 < nlf> https://github.com/substack/node-parsley
21:18 < nlf> that's what i was planning to use
21:18 < nlf> based on the idea that substack typically knows what he's doing
21:19 < jmoyers> he wrote that because there weren't hooks for a particular operation for a transparent proxy, i think
21:20 < nlf> yup
21:20 < nlf> but it parses http requests, which is exactly what i wanted it to do
21:24 < other_guy> nlf, hmm
21:24 < tracker1> Hey.. I'm wanting to process a fairly large XML file in Node... does anyone have an example that I can follow that reads a stream, and selects a segment at a time?  <root><sub><node>....</node><node>...</node>...</sub></root>  as an example... mainly want to get each <node /> segment as a string, so that I can process it individually, without huge memory use.
21:25 < deoxxa> tracker1: use a sax parser
21:25 < tracker1> deoxxa, is there a native one you can recommend?  (trying to avoid compiled modules)
21:26 < othiym23> tracker1: github.com/isaacs/sax-js
21:26 < deoxxa> https://npmjs.org/package/sax yeah
21:27 < tracker1> othiym23, deoxxa looking into it now, thanks...
21:27 < othiym23> doesn't do everything, but it gives you a stream
21:28 < other_guy> nlf, console.log(http.parsers.constructor.toString());
21:28 < other_guy> weirdly I can't get a new instance of parser
21:28 < tracker1> othiym23, yeah.. mainly wanting to grab a node segment at a time... so that I can process each one at a time... taking an xml feed, then migrating it to a format an existing importer can use.... may be 100+mb though...
21:28 < othiym23> tracker1: it should do what you want, although maybe not in the way you described
21:29 < chovy> is there anyway to run 'npm install' on a directory, when you're not actually in that directory?
21:29 < chovy> i'm trying to setup a post-recieve hook in git that runs npm install.
21:29 < othiym23> i.e. you'll need some way of correlating opentag / text / cdata / closetag events to get each node
21:29 < nlf> other_guy: interesting
21:31 < saudude_> is there a way to inherit a prototype without instantiating any classes?
21:31 < other_guy> nlf, ah… it's an instance of FreeList
21:31 < other_guy> of course
21:31 < othiym23> saudude_: aside from util.inherits?
21:31 < mhodgson> tracker1: Totally off-topic, but are you the same tracker1 that runs Roughneck BBS?
21:32 < othiym23> saudude_: or copying the properties off a prototype onto another prototype by hand?
21:32 < saudude_> othiym23: oops, wrong chatroom. this is a regular javascript question, not a node question
21:32 < saudude_> othiym23: the latter, i suppose
21:32 < tracker1> mhodgson, yeah, that's me.. :)
21:32 < othiym23> saudude_: it's all just JavaScript, dude ;)
21:33 < othiym23> saudude_: look at the source for util.inherits; it has a couple of wrinkles, but it's pretty approachable code
21:33 < mhodgson> tracker1: Small world! I was "coolio" in the BBS scene
21:33 < tracker1> saudude_, myInstance.prototype = SourceObject.prototype
21:33 < othiym23> there's also the npm inherits module
21:33 < saudude_> tracker1: is that kosher?
21:33 < tracker1> mhodgson, cool...  wish I had more time to put into the BBS...
21:33 < tracker1> saudude_, should do what you're wanting to do.
21:33 < othiym23> tracker1: gotta be careful about whether you intend to share extensions of the parent prototype with the descendant after the inheritance
21:34 < othiym23> so it's a judgment call as to whether you want to copy the whole prototype or clone its properties onto the descendant
21:34 < tracker1> othiym23, true... best to use an instance of the SourceObject... but he wasn't wanting to do that.
21:34 < othiym23> generally safer to do cloning, as the opens the possibility of doing poor person's multiple inheritance
21:35 < tracker1> mhodgson, do you still telnet out at all?
21:36 < saudude_> othiym23: node's util.inherits is plenty easy to read. I'll go with that solution, thanks!
21:36 < kuja> There
21:36 < kuja> There's also Object.create
21:37 < kuja> (in case you might be trying to use your code outside node, although I think Object.create() is ES5)
21:38 < othiym23> kuja: it is
21:38 < saudude_> speaking of ES
21:38 < saudude_> you guys seen that slideshow on ES6?
21:39 < EyePulp> jcoglan: you around?
21:39 < kuja> not me, got a link?
21:44 < Almindor> why would session store call "set" properly and then call it again with same data except without the passport section in it?
21:45 < mhodgson> tracker1: Not in a year or so
21:47 < tracker1> mhodgson, miss it now and then... what are you up to these days?  besides playing with Node
21:49 < Sergey_> Hello all, I have a problem compiling node addon. I use the library that internally uses boost::asio and build returns me the following output: In file included from /usr/local/boost_1_51_0/boost/asio/detail/impl/throw_error.ipp:21:0 .... /usr/local/boost_1_51_0/boost/system/system_error.hpp:70:16: error: exception handling disabled, use -fexceptions to enable . However using -fexceptions flag in my binding.gyp does not help, I sti
21:50 < context> I sti.... irc has message limits. maybe you should pastie the log, and then explain it on irc
21:50 < niggler> always use something like pastebin
21:50 < TooTallNate> Sergey_: try this https://github.com/TooTallNate/node-gyp/issues/17#issuecomment-3917672
21:51 < saudude_> kuja: http://brendaneich.github.com/Strange-Loop-2012/?utm_source=feedburner&utm_medium=twitter&utm_campaign=Feed%3A+hnycombinator+%28HN+-+hnycombinator%29#/
21:51 < saudude_> kuja: sorry, a little late on the reply :P
21:51 < kuja> no worries
21:51 < kuja> thanks for the link
21:51 < deoxxa> lol @ throwing exceptions inside library code
21:57 < Sergey_> TooTallNate: Thanks a lot. It worked!
22:01 < niggler> recommend an IDE
22:01 < dogmatic69> netbeans
22:01 < niggler> im switching to windows for the next month
22:02 < niggler> blah fucking turbotax and lacerte only run on windows
22:02 < othiym23> niggler: my IDE is vim -> https://github.com/othiym23/.vim
22:02 < othiym23> IDEs and JS don't get along super great, is what I'm saying
22:03 < niggler> im trying to move away from vim
22:03 < othiym23> niggler: why?
22:03 < othiym23> you could take a look at Sublime Text 2 if you want something a little less barebones
22:03 < nlf> to move *away* from vim?
22:04 < othiym23> I've tried to love IntelliJ's JS support, but I have failed
22:04 < nlf> most people i know eventually start trying to move to vim
22:04 < othiym23> we have irreconcilable differences
22:04 < niggler> one major niggle with vim is the lack of an integrated shell session
22:04 < niggler> akin to emacs' eshell
22:05 < niggler> and in C / assembly development i couldnt really give a shit
22:05 < othiym23> niggler: if you're missing Emacs-like minor modes, why not use Emacs?
22:05 < niggler> but now i find myself switching back and forth, and for various reasons using tmux / screen isnt palatable
22:05 < niggler> im not *missing* emacs at all
22:05 < niggler> emacs has its own complains
22:05 < niggler> *issues
22:06 < othiym23> well, if you're moving to Windows anyway, if you got VS Pro, you could play around with TypeScript
22:06 < othiym23> which is certainly no worse than using CoffeeScript, and maybe better in some ways
22:06 < othiym23> sounds like you have an inconsistent set of requirements for your dev env ;)
22:07 < niggler> i like vi
22:07 < niggler> but the javascript work flow doesnt map as well as i would like
22:07 < niggler> or maybe im doing it wrong by testing so much
22:07 < othiym23> niggler: I have a MacVim window open, and a terminal window open
22:08 < othiym23> I have all of my testing stuff plugged into a Makefile
22:08 < niggler> then you have to switch back and forth
22:08 < othiym23> yeah
22:08 < othiym23> but my whole test suite runs in under 15 seconds so it's really not a big deal for me
22:08 < tracker1> The best video I've seen for a JS workflow "http://wekeroad.com/2012/07/04/try-it-quiet"  sublime text and a couple console windows
22:08 < othiym23> cmd-tab up arrow enter takes me basically no time
22:09 < othiym23> no offense if you love them, but I find ZenTest-style auto-watcher scripts way more of a pain in the ass than they're worth
22:09 < tracker1> coffee-script is great for testing.. not sure how much I like it outside that (though multi-line string literals are really nice.
22:09 < niggler> actually othiym23 that's interesting
22:09 < niggler> i also have a makefile
22:10 < niggler> is there a way in vim to farm out a command and have the output dumped to a buffer?
22:10 < niggler> the standard !blah occupies the main macvim window
22:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:12 < othiym23> niggler: yeah, :help make
22:12 < Agm114K2A> Hi
22:12 < othiym23> there are even some built-in bindings
22:12 < othiym23> you can choose whether the output goes to a fresh buffer, a Quickfix window, or whatever that bizarre ex-buffer thing is with configuration
22:14 < othiym23> niggler: http://vim.wikia.com/wiki/Automatically_open_the_quickfix_window_on_:make
22:16 < othiym23> I have a big screen and a laptop, so I keep vim on the main screen and have a terminal running on the laptop screen, and since both are using Solarized it makes me feel like I'm living in some badass alternate future where window managers have been exterminated
22:17 < niggler> hmm those dont seem to work
22:22 < jesusabdullah> substack: I wish you sold the duplex streams shirt instead of the html5 one XD
22:23 < jesusabdullah> substack: also might as well make a stream || die() band tee
22:33 < saudude_> anybody know how to specify a footer in a grunt file?
22:36 < Chorvus> Should I .gitignore node_modules for the development branch (with private module exceptions) or 'npm submodule' everything non-private and install manually?
22:41 < ChrisPartridge> Chorvus: ignore them and ensure your dependencies are in package.json, then just npm install when you deploy
22:44 < superjoe> +1
22:55 < Danielss89> Anyone using bridge?
22:56 < Danielss89> is it to be used instead of node.js or is it just for communication?
22:58 < othiym23> Danielss89: never used it, but as an RPC mechanism, it looks like something that would run on top of Node.js rather than something that would replace it
23:04 < llrcombs> hey, I'm getting some errors when I try to install node-airplay via npm on Slackware
23:05 < llrcombs> building mdns seems to be failing with some weird messages, which is strange, since `npm install mdns` works fine
23:06 < Oddman> could be a version issue
23:06 < llrcombs> I did think this line was odd: "> mdns@0.0.3orlando-1.0 install /mnt/user/node/insteon/node_modules/airplay/node_modules/mdns"
23:06 < llrcombs> pastebinning the whole out now
23:07 < llrcombs> ack
23:07 < llrcombs> getting a message that I can't post more than 64kb
23:07 < llrcombs> it's a long log
23:07 < llrcombs> most of the lines are pretty repetitive, so I'll snip
23:07 < llrcombs> http://pastie.org/5026845
23:08 < llrcombs> the whole 0.0.3orlando-1.0...
23:08 < mscdex> what gcc version?
23:08 < llrcombs> when I just run npm install mdns, I get "> mdns@0.0.7 install /mnt/user/node/insteon/node_modules/mdns"
23:08 < llrcombs> gcc (GCC) 4.2.4
23:10 < othiym23> llrcombs: looks like airplay has a dep on mdns 0.0.3orlando-1.0 in its package.json
23:10 < mscdex> it's probably because the mdns dependency for node-airplay is pointing to the master branch of mdns
23:11 < othiym23> and that older version has issues with Slackware and / or gcc 4.2.x
23:11 < othiym23> ah, or what mscdex said
23:12 < mscdex> the last commit for node-airplay was 11 months ago, so it's possible at that time mdns' master branch was the best choice
23:12 < mscdex> and apparently now that master branch is breaking things :-)
23:13 < MI6> joyent/libuv: Ben Noordhuis master * 4affbe7 : unix: remove unnecessary pthread_join ESRCH check  ESRCH means the thread - http://git.io/fhyoiA
23:13 < mscdex> llrcombs: i would create a gh issue for node-airplay about this
23:15 < VinSpee> architecture question: We have an api (built on express, returning json), and I want to build out the front end
23:15 < VinSpee> how separate do I keep those things?
23:16 < VinSpee> do I use express's routes to handle the difference between a get and a (get) page view?
23:18 < ChrisPartridge> VinSpee: determine what the user whats based on whether it was a ajax request, or the requested content type?
23:18 < ChrisPartridge> s/whats/wants
23:18 < othiym23> if you're versioning your API, then the API calls are in the version's namespace, and you can just route the page renders to another hierarchy
23:18 < othiym23> and yeah, you can do content-type discrimination / Active Resource-style checking on a per-handler basis
23:19 < VinSpee> is it a "best practice" to have the "api calls" in a /api dir?
23:19 < othiym23> in general, I like the idea of having API calls sequestered beneath a version namespace, though
23:19 < ChrisPartridge> For my latest app, I have an API and a front end app, using CORS - much cleaner separation
23:19 < othiym23> or a /v1/ / /1/ /1.0/ at the beginning of the API URLs
23:19 < othiym23> ChrisPartridge: either way, it's a namespace
23:20 < othiym23> it doesn't strike me that either is much "cleaner" than the other
23:21 < VinSpee> cool that makes sense. thanks othiym23 and ChrisPartridge!
23:21 < VinSpee> has anyone used http://yeoman.io yet?
23:23 < ChrisPartridge> othiym23: imo it is much cleaner, as your API is completely separate from the front end application, only pain is CORS which requires an OPTIONS request before each actual request
23:25 < othiym23> CORS / XDM aren't that big a pain, it's true, but in my experience, it's more convenient in the long term to have everything on a single domain
23:25 < othiym23> ymmv
23:26 < othiym23> especially if you're planning on heading a mobile / responsive / single-page app direction with your UX anyway
23:28 < othiym23> and there's nothing to stop you from using both a versioned namespace and a separate subdomain, which a bunch of OAuthy "RESTful" APIs do right now -> api.foo.com/v1/NotReallyRest.do?action=create
23:29 < drunk-skunk> I've been looking at Threads a gogo recently, and I just can't find an answer to this question: does each worker thread share the same state as the parent? When you pass data along to a worker, is that data copied, or is it just by reference?
23:31 < othiym23> god, every time I look at HN, the discussion on the link to felixge's jsconf presentation has somehow gotten exponentially stupider
23:31 < othiym23> shouldn't have looked at @PLT_Hulk's feed today
23:31 < ChrisPartridge> othiym23: I sent this message to my boss this morning "this is what I wear when I read HN comments now: http://imgur.com/Q4P0S"
23:32 < othiym23> ChrisPartridge: actual lol
23:32 < ChrisPartridge> I used to enjoy HN, now it's just a big dick measuring contest in every comment thread :(
23:34 < othiym23> yeah, somehow it turned into /. in the last three months or so
23:35 < othiym23> not in some theoretical good way, either
23:35 < cyprox> Hello
23:35 < othiym23> maybe it's just because I've been immersed in JS 24/7 for about a year and a half now, but their commentary on V8 / Node / JavaScript in general just seems especially, totally awful
23:36 < cyprox> what is the best way to initialize a DB in Node and make it accessible across the app
23:36 < cyprox> ?
23:37 < ChrisPartridge> cyprox: I use a singleton style approach
23:45 < othiym23> cyprox: take a look at flatiron's broadway or Cloud9's architect
23:46 < othiym23> if you've ever used a dependency injection framework like Spring, those will make sense
23:46 < cyprox> @othiym23 link? 
23:46 < othiym23> I used to use singleton / module-style exports.* APIs, but building up the DALs incrementally makes a lot more sense
23:46 < othiym23> cyprox: github.com/flatiron/broadway github.com/c9/architect
23:49 < cyprox> @othiym23 thank you :) I'll take a look.
--- Log closed Wed Oct 10 00:00:43 2012
