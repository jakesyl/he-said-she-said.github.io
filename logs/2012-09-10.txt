--- Log opened Mon Sep 10 00:00:08 2012
--- Day changed Mon Sep 10 2012
00:00 < zzarcon> ohh yes
00:00 < zzarcon> one moment
00:00 < ag4ve> also, have you grepped for that error in socket.io
00:01 < zzarcon> not
00:02 < zzarcon> idk if the error really is socket.io
00:03 < zzarcon> events.js:66         throw arguments[1]; // Unhandled 'error' event                        ^ Error: connect ETIMEDOUT     at errnoException (net.js:768:11)     at Object.afterConnect [as oncomplete] (net.js:759:19)
00:03 < zzarcon> this is the complete erro
00:03 < zzarcon> error
00:04 < ag4ve> it ain't hard to 'grep --color -r <error> node_modules' and see what pops out
00:05 < ag4ve> but, i'm guessing it's calling an event that you aren't listening for
00:06 < ag4ve> but, since you said it's intermittent, maybe you are listening for it and the connection is dropping .... are you handling connection loss event?
00:07 < zzarcon> mmm
00:07 < zzarcon> disconnect event?
00:07 < zzarcon> or what event?
00:11 < mscdex> bewest: i sent a PR upstream, but until then you can try it with `npm install https://github.com/mscdex/node-sqlite-fts/tarball/master`
00:23 < ChrisPartridge> zzarcon: not trying to communicate with a disconnected client? example code from your app?
00:32 < zzarcon> ChrisPartridge: mmm i think not, all the code is here
00:32 < zzarcon> http://socialchessapp.jit.su/
00:48 < ChrisPartridge> zzarcon: link doesnt help if I can't see the code, do you have a stack trace with the error?
01:12 < alextucker> Anyone ever built Mocha before?
01:12 < alextucker> Having issues using make
01:13 < alextucker> Keep getting require issues with 'ms' in the compiled js
01:16 < mansoor-s> Anyone able to get bycrpt to build under windows?
01:17 < ChrisPartridge> mansoor-s: got node-gyp installed/configured?
01:18 < mansoor-s> ChrisPartridge, no
01:18 < ChrisPartridge> mansoor-s: https://github.com/TooTallNate/node-gyp
01:18 < mansoor-s> ohh I need visual studio?
01:18 < mansoor-s> :(
01:18 < ChrisPartridge> mansoor-s: Yes, unfortunately :-(
01:19 < mansoor-s> man windows dev sucks :p
01:19 < ChrisPartridge> mansoor-s: You can use the express version
01:19 < mansoor-s> express version?
01:19 < ChrisPartridge> mansoor-s: http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express
01:19 < mansoor-s> ehhh 2 gig download plus 10 million .net updates
01:20 < mansoor-s> thansk ChrisPartridge 
01:20 < ChrisPartridge> mansoor-s: I dont think its 2gig
01:20 < mansoor-s> ChrisPartridge, i'm not running "genuin" windows. just installed the 30 day trial thing
01:20 < mansoor-s> to get my module to work under windows
01:20 < mansoor-s> but meh
01:21 < ChrisPartridge> mansoor-s: Just be thankful your not stuck on windows due to legacy apps ;)
01:21 < mansoor-s> ChrisPartridge, you have no idea how thankful I am :D
01:22 < mscdex> bcrypt should compile on windows
01:22 < etcetera> anyone using backbone.js models on the server?
01:22 < mscdex> etcetera: possibly in the not-so-distant future
01:22 < etcetera> having trouble figuring out why I would ever use the string based getter/accessotr pattern.
01:22 < etcetera> mscdex: ah, nice.
01:23 < mansoor-s> you will take linux from my cold dead hands
01:23 < wmage> hey, is there a node library similar to Underscore, but that would put methods directly on prototypes of related classes? I really dislike using `_` in my code.
01:23 < mscdex> etcetera: i haven't looked into it too much though, but i do know there you can sync models using socket.io
01:23 < mscdex> wmage: message with built-in prototypes is bad
01:23 < mscdex> s/message/messing
01:23 < Benvie> wmage, maybe try `npm install O`
01:23 < Benvie> not sure if it's what you want
01:24 < etcetera> mscdex: don't plan on using it exclusively for web apps.
01:24 < etcetera> I plan on utilizing backbone models for a REST api.
01:24 < wmage> mscdex: Yes that's what the cool kids say, but I think that beautiful code is more important
01:24 < mscdex> etcetera: oh, if you're not also using backbone on the client side, i might go with some other setup....
01:24 < wmage> Benvie: thanks for the link, will take a look
01:25 < zipp_> etcetera: I used backbone models with Mongoose in the backend and socket.io in the middle instead of REST. If you hate rest, like I do, I'd offer that you give that a shot :) Worked pretty well for me
01:25 < mscdex> wmage: better hope your changes don't collide with someone else's ;-)
01:25 < Benvie> https://github.com/Benvie/O
01:25 < mscdex> or cause unexpected behavior
01:28 < etcetera> mscdex: an alternative like?
01:29 < mscdex> etcetera: dunno offhand, but i've seen them on npm before. there's also plenty of ORMs that include model stuff too, just need to search around
01:30 < Benvie> oh also es5-ext as well
01:30 < Benvie> https://github.com/medikoo/es5-ext
01:30 < etcetera> mscdex: not a big fan of the existing node orms.
01:31 < zipp> etcetera: I sort of like mongoose, but had to write my own for redis because mongo likes to take a crap every now and again, and redis has been rock solid for me
01:32 < etcetera> zipp: my thoughts exactly.
01:32 < etcetera> the node ecosystem has fallen in love with mongoose but I don't see an inherent benefit from using Mongo on node vs anywhere else.
01:32 < etcetera> other than, "it speaks javascript" which is a poor determinism for viability.
01:33 < zipp> Of course, and in terms of features, redis' pub/sub and queueing ability have made it not only useful as a datastore, but as a transport as well
01:33 < zipp> Which has been a huge sell for me, instead of having to run rabbit mq / using amazon's pub/sub or some other hacked together bs
01:34 < etcetera> https://github.com/robconery/massive-js
01:34 < etcetera> always love rob conery's work.
01:34 < zipp> Ahh, I saw this project a while back. Definitely good stuff
01:38 < etcetera> is it a bad idea to module exports app everywhere?
01:39 < etcetera> and subsequently keep a reference to it in each of your modules?
01:41 < zipp> It sounds monolithic
01:44 < etcetera> zipp: https://github.com/alexeypro/crud-bones
01:44 < ChrisPartridge> etcetera: i tried it once, better off exporting your routes and then wiring them up in app/server
01:44 < etcetera> this I thought was particularly interesting: https://github.com/alexeypro/crud-bones/blob/master/src/api-rest.js
01:45 < etcetera> ChrisPartridge: I'm not sure how javascript memory management works, or whether that's efficient once you scale out beyond one core...but damn that seems scary.
01:53 < ag4ve> zzarcon: sorry, i missed your dm. if you're catching the event than maybe it's doing what it's supposed to and you should handle the disconnect with a connect or something?
02:01 < etcetera> anyone else using backbone.js and node for server side models?
02:02 < mansoor-s> no
02:02 < mansoor-s> its illegal in 143 countries
02:02 < mansoor-s> don't do it
02:02 < mansoor-s> its not worth it
02:02 < etcetera> mansoor-s: why?
02:02 < mansoor-s> the elders of the internet deemed it as such
02:03 <@konobi> mansoor-s: now now, behave
02:04 < mansoor-s> the elders will hear of this
02:04 < ag4ve> you'd still need a router, but if you give a squid a backbone, it shouldn't be too hard for him to route around
02:06 < ag4ve> s/squid/jellyfish/
02:06  * ag4ve can't even think enough to make a bad joke :(
02:44 <@konobi> isaacs: ping?
02:45 <@konobi> carolyns: ping?
03:21 < jtomasrl> is it correct to perform a db.open everytime i want to do something with the db? (using mongodb driver)
03:23 < jtomasrl> or db.connect
03:28 < ChrisPartridge> jtomasrl: pretty sure connections to mongo are persistent
03:30 < mdedetrich>  how would you go about creating a file in memory and serving it (or can only files on the filesystem be served?)
03:30 < mscdex> woohoo, a bcrypt package that bundles yaSSL :-D
03:30 < chilts> mdedetrich: you'd put the contents you want into a Buffer
03:30 < mscdex> ^
03:30 < chilts> and serve that at the appropriate time :)
03:30 < mdedetrich> chilts: quick tut on this (just starting on node.js)
03:31 < mscdex> mdedetrich: var data = new Buffer('hello world'); res.write(data);
03:31 < chilts> new Buffer('my string');
03:31 < chilts> yeah, what he said :)
03:31 < mdedetrich> cheers, thanks
03:32 < substack> http://www.youtube.com/watch?v=4iFBC-xbE9I#t=15m47s
03:32 < chilts> if you are using a string to the buffer, you probably also want to specify the encoding too
03:32 < chilts> mdedetrich: also, read this : http://nodejs.org/docs/latest/api/buffer.html :)
03:32 < chilts> have fun!
03:33 < mdedetrich> default encoding is utf8, so thats fine
03:33 < chilts> sweet
03:33 < chilts> I like being explicit about it
03:33 < jtomasrl> ChrisPartridge: so i could save a db.connect in a global and use it later?
03:38 < mscdex> substack: lol
03:39 < mdedetrich> JS doesn't know what a file is and so can do nothing to assist with this requirement. You can force an HTML file to download rather than display by setting the Content-Disposition to attachment using a server side language.
03:39 < mdedetrich> how can I do this in node.js (I want the server to force the download of a .html file)
03:39 < substack> mdedetrich: res.setHeader('content-disposition', 'whatevs')
03:40 < mdedetrich> substack: ah thanks
03:41 < ChrisPartridge> substack: moving to ruby? ;)
03:41 < mdedetrich> cool bananas
03:41 < substack> ChrisPartridge: everybody knows it's more readable and you avoid the callback spaghetti!
03:42 < substack> and all you need to do is know the ins and outs of event reactors and inline reactor machinery into your libs
03:43 < ChrisPartridge> I love his explanation of the fibres, even confuses himself
03:43 < WarheadsSE> and, of course, deal with a whole exclusive ecosystem of exclusivity.
04:09 < timeturner> anyone have experience with sending multiple arguments to a function via async.parallel
04:18 < Rojuinex> Has anyone done any work with OFX?
04:18 < ChrisPartridge> timeturner: curry the functions being passed to async.parallel ?
04:21 < timeturner> ChrisPartridge: can you post an example gist?
04:21 < timeturner> Haven't worked with currying before
04:22 < ChrisPartridge> Rojuinex: there is a package called "banking" in npm, might help
04:22 < Rojuinex> Ooo!  Thanks!
04:29 < ChrisPartridge> timeturner: https://gist.github.com/3688880
04:30 < gkatsev> mmm curry
04:30 < ChrisPartridge> I know, I'm hungry now 
04:33 < dr0id> sup nodesters
04:36 < mscdex> node.js rules!
04:37 < dr0id> sometimes
04:37 < timeturner> ah yeah
04:37 < timeturner> curry
04:38 < dr0id> drugs?
04:39 < dr0id> http://dev.hasenj.org/post/31042963934/nodejs-hate
04:39 < dr0id> http://i.imgur.com/PNPn3.gif
04:41 < benatkin> mscdex: to me it's just node. I see why it's node.js *everywhere* official for trademark purposes though!
04:41 < dr0id> Why did I waste my time with it? Hype (and Hacker News).
04:41 < dr0id> same with me!
04:43 < ChrisPartridge> timeturner: make sense ? :)
04:45 < benatkin> dr0id: that article's a hoot
04:45 < dr0id> heh
04:45 < benatkin> "Node.JS fails that test. It didn’t make me productive at all."
04:47 < nohu> wait, is that blog broken or ...?
04:47 < benatkin> shows a lack of understanding about what node.js is about
04:47 < nohu> ah, nvm
04:47 < ChrisPartridge> nohu: nope, but the author is
04:47 < nohu> haha, it didn't load the CSS for some time
04:49 < Rojuinex> trying to install the banking package and I get this error.  Not sure I understand what's going on:  
04:49 < Rojuinex> gyp ERR! stack Error: "pre" versions of node cannot be installed, use the --nodedir flag instead
04:50 < mscdex> Rojuinex: you have an unstable version installed
04:50 < mscdex> Rojuinex: what does `node -v` say?
04:50 < Rojuinex> I used the git command
04:50 < Rojuinex> it says 0.9.2-pre
04:51 < mscdex> yeah, that'll pull from master which is unstable
04:51 < Rojuinex> oh
04:51 < Rojuinex> what's the best way to get node on ubuntu then?
04:51 < dr0id> apt-get install nodejs
04:51 < mscdex> ^ not that 
04:51 < dr0id> or install from source, but not github master
04:52 < mscdex> 3 ways: install from the main source, install from the binary tarball, or use an unofficial ubuntu ppa
04:52 < dr0id> actually, do apt-get install nodejs nodejs-dev to not mess up later with some packages like socket.io :/
04:52 < mscdex> the nodejs packages in ubuntu are grossly outdated
04:53 < substack> npm install -g nave
04:54 < substack> of course, you need to already have node and npm
04:54 < substack> vicious circle
04:55 < ChrisPartridge> ouroboros!
04:55 < Rojuinex> : /
04:56 < Rojuinex> ls
05:02 < WillMarshall> Hey! I have a Node.js server that shuts down silently whenever it's accessed
05:03 < WillMarshall> I'm unable to work out why this has started happening. It worked fine last week and nothing has changed since then
05:03 < WillMarshall> There's no stack trace or error, it just turns off whenever I hit localhost:3333
05:03 < WillMarshall> Any ideas how to approach working out what is wrong here?
05:07 < ag4ve> WillMarshall: what happens if you put a console.log(whatever) in your app, do you see it?
05:16 < Rojuinex> trying to install the banking package and I get this error http://pastebin.com/c9XjWC5C
05:20 < deltab> 407 silly sh,-c,node-gyp rebuild,/home/caleb/sandbox/node/node_modules/banking/node_modules/xml2json/node_modules/node-expat spawning
05:20 < deltab> 408 info node-expat@1.6.1 Failed to exec install script
05:28 < Rojuinex> O.o
05:37 < tasslehoff> I need a sync-way to get the size of a directory. Tried installing exec-sync, but I get a "Could not load the bindings file" when I require it.
05:38 < chilts> tasslehoff: not sure there is one ... async, probably yes ... sync, probably no
05:40 < chilts> or use a system command : du -sch dirname
05:40 < chilts> with http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
05:40 < chilts> that's async
05:40 < tasslehoff> chilts: thanks. it's du I've been trying to use with execSync 
05:41 < mbalho> tasslehoff: why do you need a sync one
05:44 < tasslehoff> mbalho: I don
05:44 < tasslehoff> sorry
05:45 < mbalho> donatello? like the ninja turtle?
05:45 < tasslehoff> he was always my favourite
05:45 < tasslehoff> I don't know the event loop well enough yet, and have just one thing missing before I have my website feature-complete. Thought to do it in sync at first
05:45 < mbalho> protip never use sync code in a server event loop
05:46 < tasslehoff> mbalho: I know, but I think I can get away with it for a few days, since this is an embedded system where only one session is allowed at a time.
05:46 < mbalho> lol
05:47 < tasslehoff> not sure if you're lauging with me or of me ;)
05:49 < tasslehoff> hm. I guess I can do this async if I do it when the server starts, instead of when the page where I need to show it is loaded.
06:06 < Rojuinex> anyone know anything about the baking package?
06:18 < gabrieluk> if i want to push a node app to github and from there to my linode server; what should i be doing?
06:43 < tasslehoff> how do I go about solving something like this http://pastebin.com/baKbYPzU ?
06:45 < owen1> any idaes for domain name for a nutrition calculator site?
06:49 < timeturner> nutricalc
06:52 < owen1> timeturner: taken
06:52 < owen1> timeturner: do u like yunobig or yusobig
06:52 < owen1> Y U NO BIG
06:53 < owen1> (big=muscular in that case) but Y U SO BIG (big=fat)
07:12 < mprem> not using sudo with node, can't install modules locally or with -g, is there an authorative guide on how to use node/npm without sudo
07:14 < nkuttler> mprem: do you get an error?
07:14 < mprem> Error: EACCES, open '/home/username/.npm/64a534c1-express.lock
07:15 < mprem> Please try running this command again as root/Administrator.
07:15 < Rojuinex> trying to install the banking package for node using npm and I get this error "/node-expat.cc:6:19: fatal error: expat.h: No such file or directory"  any help?
07:16 < nkuttler> mprem: sounds like a previous sudo run messed up your permissions in ~/.npm/
07:16 < Industrial> Made a small function to readFile all templates in a directory recursively into an object; https://gist.github.com/8ed027b84dc54c625a1a
07:16 < mprem> nkuttler: thx will rm that and reinstall
07:16 < nkuttler> mprem: or just chown..
07:17 < Industrial> I'm now trying to reimplement this using kriskowal/q https://gist.github.com/4d398071828ca77d6db7
07:17 < Industrial> I get stuck there already :| after getTemplates { '0': [TypeError: Cannot call method 'apply' of undefined] }
07:33 < mprem> nkuttler: getting another error, google doesn't show much for it
07:33 < mprem> { [Error: EACCES, mkdir '/home/username/tmp/npm-6715'] errno: 3, code: 'EACCES', path: '/home/username/tmp/npm-6715' }
07:34 < mprem> seems like a permission issue, but no idea how to solve it, any suggestions
07:34 < onre> permission denied.
07:34 < dr0id> umm.. sudo ?
07:35 < mprem> that is the point, don't want to do sudo
07:35 < mprem> been struggling with these since yesterday
07:36 < mprem> i dont understant why node/npm need sudo?
07:36 < nkuttler> mprem: it doesn't
07:36 < onre> check if the node process has write permission to the directory
07:36 < onre> where you're trying to create your subdir
07:36 < nkuttler> mprem: it's really the same error as before, just a different location
07:36 < mprem> it is in my home dir
07:36 < nkuttler> and the fix is the same
07:36 < bcave> hello
07:37 < bcave> quick question, i just had a look at https://github.com/joyent/node/wiki/Modules#wiki-tcp-ftp and wondering which one of those ftp clients are most used. which ftp client do you use (i need to upload and delete files from nodejs)
07:38  * mprem slaps his head
07:38 < mprem> nkuttler: lol thanks
07:40 < bcave> oh, and the file I am uploading is not written to the nodejs host filesystem. its an object in the node app
07:45 < mprem> nkuttler: thx, finally installed a module, in hindsight it seems so obvious, the earlier install using sudo was the issue
07:57 < timeturner> is there a way to track down a bug that causes a function to not return
07:57 < timeturner> some debugging methof
07:57 < timeturner> method*
08:04 < tydeas> Morning, I am facing an issue when trying to user debug. http://pastebin.com/yeuqzY9V
08:04 < tydeas> I have pasted the issue 
08:04 < tydeas> Actually can not connect to 5858, firewall is turned off
08:05 < zomg> Another person working on bf3 stuff for node? =)
08:05 < zomg> or is that some other battlefield thing
08:05 < zomg> no clue about that error though
08:17 < AAA_awright> tydeas: The node debugger only listens on 127.0.0.1, also that looks like you might need to re-compile Node.js maybe? Have you tried that?
08:29 < Industrial> I'm trying to play with kriskowal's Q library after having read http://documentup.com/kriskowal/q. I'm not sure where I go wrong on this. Also, the error isn't a stack trace? https://gist.github.com/85a794d0824084be2fe1
08:32 < Industrial> oh, fat fingered that one, my bad.
08:52 < simong> Has anyone setup passportjs with just a trustedcookie in a cluster rather than full session systems like reddis ?
09:12 < jhernandez> hi all!
09:12 < jhernandez> I have a simple question
09:13 < jhernandez> when you're building your own module, what is the default path where the .node file should be put?
09:14 < jhernandez> while using some modules, I realized that sometimes the path is set to build/Release/file.node, and sometimes is under build/Release/lib.target/file.node
09:16 < jhernandez> my question is. What is the right path where the resulted module should be put?
09:16 < jhernandez> thanks in advance!
09:18 < bcave> how do I convert an object in node to a stream?
09:18 < bcave> ReadableStream
09:57 < Industrial> I'm trying to understand Q/promises. https://gist.github.com/049443291af4e88b816e
09:58 < Industrial> I made a function that turns a directory structure into an object structure, for loading templates or something. It's recursive and parralel.
09:58 < Industrial> but though I define and run the promise one I wrote later before defining the callback based one, the callback one runs faster and always prints out first.
09:58 < nathan7> jesus, coffeescript
10:00 < Industrial> wonder if I'm supposed to chop up the Q one into smaller promise parts or something :X, like that, looking at the bottom one, it doesn't really make the code any simpler.
11:11 < DaMorpheuS> QTA: I'm recently busy starting up a software development project for a some web based software (my old self should say java) but now I'm reading about node.js. so my question is "Why node.js?"
11:13 < adrianlang> Because you like JavaScript, because you have to do heavy IO.
11:13 < adrianlang> Because you like low footprints.
11:16 < DaMorpheuS> am i not restricted when I'm using node js
11:16 < DaMorpheuS> because of the event driven nature of the framework
11:17 < BennyLava> Restricted?
11:17 < BennyLava> You're restricted to AWESOMENESS, yes.
11:17 < BennyLava> I'm sorry.
11:19 < DaMorpheuS> lol so am I this is not a joke question I'm realy looking in to this and I hoped that there were some people here that give me some answers 
11:19 < mscdex> bcave: node-ftp, but i'm the author so i'm biased ;-)
11:19 < DaMorpheuS> maybe is there a good book/faq I can read that you guys/girls know?
11:21 < mscdex> DaMorpheuS: you might look here: http://nodeguide.com/convincing_the_boss.html
11:30 < DaMorpheuS> mscdex: this is a good start yes :) liked the part about node.js + nosql :)
11:31 < DaMorpheuS> mscdex: the plan is to use nosql (but not to be nerdy or hype) ;)
11:32 < dr0id> yes please use nosql
11:33 < mscdex> DaMorpheuS: i should probably add that the author of that site is also the author of the `mysql` node module ;-)
11:33 < DaMorpheuS> lol 
11:35 < DaMorpheuS> mscdex: so this is a pool of all programmers or what? (first time here) :)
11:36 < Axsuul> I think you should have a good reason to use nosql first
11:37 < Axsuul> if you really really need it to be schemaless for example
11:42 < DaMorpheuS> I need nosql because I don't want my app to be restricted on a predefined datamodel. Because my idea I need large amount of data to be put in the database. and the output can change every day so if I create a datamodel around this my tool has boundries I don;t want to have. With nosql the boundries are not in the database anymore but are in you code is much easier to change.
11:43 < DaMorpheuS> further more I luike the fact that I can view versions of every field in the database
11:43 < Axsuul> DaMorpheuS: alright, just be aware that if you go with mongodb about all the issues surrounding it
11:45 < DaMorpheuS> Axsuul: I'm just in the architect fase so everything can still change but still the fact above make me very interested in the nosql idea. ofcourse there will be downsides to this so i have to make a list of pro en cons to see what is the best idea. Maybe I combine the 2 options so part normal part nosql
11:46 < guor> why use nosql if you can just use sql?
11:46 < DaMorpheuS> read above!
11:47 < guor> I see...
11:47 < DaMorpheuS> Axsuul: do you have experience with riak?
11:47 < Axsuul> DaMorpheuS: nope sorry, but I hear good things about it
11:48 < DaMorpheuS> yeah I'm looking in to that as well I know mongodb is more used nosql db but the riak concept was really appealing
12:05 < bcave> mscdex =)) i went with that one
12:06 < bcave> mscdex: i have a question though.if I have an object in memory, how would i write that to the ftp server?
12:10 < mscdex> bcave: right now it only accepts streams, so probably the quick and easiest way would be to use something like mikeal's BufferedStream (`npm install morestreams`), use that in ftp.put(), then write to that stream and .end() it
12:13 < mscdex> bcave: i'll probably add the option to write a Buffer also shortly
12:13 < bcave> oh awesome. 
12:14 < bcave> i saw that, going to have to figure out how to implement it. think i did come across morestreams while searching
12:24 < DaMorpheuS> mscdex: Axsuul : thanks for the answers so far!!! I will be back ;)
12:26 < Aldus> weird n00b question. For my chat app I am tempted by using JS arrays / objects instead of database tables for data I don't want to store (i.e. chat messages). Does this mean I'm going to use RAM memory instead of HD memory? (and avoiding heavy sql queries)
12:27 < mscdex> Aldus: yes, JS arrays and objects are in-memory
12:28 < Aldus> mscdex, great, so as long as I put old / useless data in the garbage (to avoid occupying too much RAM) this is an acceptable approach? 
12:29 < mscdex> bcave: maybe, something you could do to prevent from using too much memory is to only store the last x messages that are sent to newly connected users
12:30 < mscdex> er wrong person :-)
12:30 < Aldus> ;)
12:30 < mscdex> Aldus: ^
12:31 < bcave> haha. I came write mscdex 
12:31 < bcave> *right
12:40 < mscdex> bcave: ok, try node-ftp master: `npm install https://github.com/mscdex/node-ftp/tarball/master`
12:40 < mscdex> bcave: just pass in a Buffer instead of a stream to put/append
12:41 < asdf12> so in node.js there is no such thing as binary data? it's just always represented textually
12:41 < asdf12> if yes, how is the textual representation usually formatted, escaped, encoded?
12:41 < drudge_> This is pretty rad http://chocolatapp.com/blog/
12:44 < RLa> why good looking text editors are only for mac :/
12:45 < mscdex> asdf12: no, there is a node class called Buffer, which is best for holding binary data
12:45 < zomg> RLa: because good looking and text editing is not usually something people care about that much
12:45 < zomg> vim > *
12:45 < zomg> and vim can look nice if you give it a nice looking theme too
12:45 < mscdex> asdf12: there are binary strings, but it's a bit of a hack and uses up more space
12:46 < mscdex> asdf12: also there are some things you can do with Buffers that you cannot with binary strings
12:46 < asdf12> im new to this Buffer stuff, so why is there no option when reading a file like fs.readFile, for a 'Buffer' option
12:46 < mscdex> asdf12: there is, it's usually the default unless you specify an encoding to transform the Buffer into a string
12:47 < asdf12> i thought the default was utf8
12:47 < mscdex> not when the function is ordinarily returning binary data
12:48 < bcave> im doing something wrong here... 
12:48 < nathan7> zomg: vim + JS scripting would make me happy
12:49 < mscdex> asdf12: the rule of thumb is if you're passing in or receiving Buffers and not specifying an encoding anywhere, you should always be dealing with Buffers
12:50 < BitScout> Hm, any idea on the following? I'm trying to handle mor HTTP requests, my function that does calculations and sends the response (it gets req+res) is in a process.nextTick(function(){...
12:50 < BitScout> but since I added nextTick around it I get ECONNRESET (socket hang up)
12:51 < mscdex> BitScout: got the code posted somewhere?
12:51 < BitScout> hmm
12:51 < spion_> oh wow, apparently pgsql 9.2 has v8 js support. http://code.google.com/p/plv8js/wiki/PLV8
12:51 < BitScout> mscdex, one sec
12:54 < BitScout> mscdex, res.on('data', function (chunk) {
12:54 < BitScout>     console.log('BODY: ' + chunk);
12:54 < BitScout>   });
12:54 < BitScout> argh
12:55 < BitScout> mscdex, pastebin.com/a7h4Gzta
12:55 < bcave> http://pastie.org/4695500
12:56 < BitScout> the WebService log shows in the order A D B C, just as expected.
12:57 < BitScout> But somehow the nextTick seems to make the client think the request has been given up
12:58 < mscdex> probably need to show more of the involved code to know what's going on
12:58 < mscdex> bcave: try out the master branch and just pass in the Buffer instead of a stream
12:58 < BitScout> mscdex, hm, not sure if I can do that...
12:59 < wiherek> hi
12:59 < mscdex> BitScout: well the problem isn't in the code you posted :-)
12:59 < BitScout> mscdex, I'll meditate some more about my code ;-)
12:59 < BitScout> oh and thanks!
12:59 < asdf12> quick async question, all the async flow stuff do not allow for additional arguments to be passed in to each 'step' right?
12:59 < bcave> mscdex: i have just installed the master branch
13:00 < bcave> by buffer, i should just pass the pdf object?
13:00 < asdf12> the only thing it passes in is a callback?
13:00 < mscdex> asdf12: you can curry
13:00 < asdf12> what is that? an async function?
13:00 < nathan7>  currying is giving a function an argument
13:00 < nathan7> if I have f(a,b,c)
13:01 < mscdex> bcave: if it's a Buffer, yes. if it's a string, just use `new Buffer(mydata)`
13:01 < nathan7> and I curry it with (1,2) you have a function that has 1 and 2 for a and b
13:01 < nathan7> and it takes one argument, c
13:02 < mscdex> asdf12: example: https://gist.github.com/3688880
13:02 < nathan7> say you have a function that adds two numbers together, function add(a,b){ return a+b; }
13:02 < nathan7> you can do addTwo=add.curry(2)
13:02 < mscdex> asdf12: that one is using the `async` npm module
13:02 < nathan7> (assuming you have a Function.prototype.curry - you probably shouldn't do that, but for the sake of the example)
13:04 < bcave> mscdex: its uploading the pdf, but the doc is being corrupted.
13:05 < bcave> for example, if I use it in an express app, then I do....
13:05 < RLa> nathan7, asdf12 there is bind which can be used for currying
13:05 < RLa> addTwo = add.bind(null, 2)
13:05 < nathan7> Yeah
13:05 < RLa> it should be standard feature in es5
13:05 < nathan7> For more complex functions, however, that fucks with `this`
13:06 < nathan7> but that's nearly unavoidable
13:06 < nathan7> JS would rock more if `this` was less confusing
13:06 < mscdex> bcave: are you sure the entire document is in that one Buffer?
13:06 < CIA-116> libuv: Ben Noordhuis v0.8 * r33bcb63 / gyp_uv : build: make gyp_uv understand '-f ninja' - http://git.io/OqSraQ
13:06 < CIA-116> libuv: Ben Noordhuis v0.8 * r12c25e1 / src/unix/stream.c : unix: fix EMFILE busy loop - http://git.io/8eQbJw
13:08 < Protected> Hey there. Two beginner questions, not necessarily node-specific: How do I test if a variable is a number, and how do I test if it's an instance of a certain object?
13:09 < mscdex> Protected: `typeof myvar === 'number'` and `myvar instanceof MyObj`
13:09 < asdf12> ok so
13:09 < mscdex> some people frown on instanceof though
13:09 < asdf12> is currying just a way of using a closure?
13:10 < bcave> ah
13:10 < mscdex> asdf12: yes more or less
13:10 < bcave> mscdex: i think my buffer is smaller than the object
13:10 < Protected> Thank you, mscdex
13:10 < Protected> Why do people frown on instanceof?
13:11 < bcave> no wait... I don't think it is. the PDF (if i send it via an http response) is 26k. when I upload it with FTP, it gets uploaded as a 36k file
13:11 < bcave> http://pastebin.com/fANsdeiE
13:11 < mscdex> Protected: it may not always behave like you expect
13:12 < bcave> sorry, that was old code.  line 7. conn.put(new Buffer(out), 'test.pdf', .....)
13:14 < asdf12> anyone use node-postgres, 'pg' module? how do i insert a bytea type :[
13:15 < mscdex> bcave: try `new Buffer(out, 'binary')` instead
13:16 < Protected> Ok, mscdex, I see what you mean, but I only need it for variables that are strictly objects, so it will be fine
13:18 < mscdex> Protected: also if you're checking against core types, there's Array.isArray(), Buffer.isBuffer(), and the utils core module has other methods for checking other types (i.e. utils.isDate(), utils.isRegExp(), utils.IsError())
13:19 < mscdex> s/IsError/isError
13:22 < wiherek> Hi. I cant seem to change the properties of the object. Heres my fiddle: http://jsfiddle.net/t2fnv/2/
13:31 < wiherek> Hi. I cant seem to change the properties of the object. Heres my fiddle: http://jsfiddle.net/t2fnv/2/ What is wrong with the code?
13:32 < pc-world> I've built a script which I run via "node scriptname.js" - when does it exit? e.g., does it wait for all asynchronous requests to finish?
13:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:38 < mscdex> pc-world: it exits automatically when there is nothing left to do, nothing to wait on
13:40 < pc-world> mscdex: thanks!
13:40 < pc-world> I've also found this explanation http://stackoverflow.com/a/8636001 - I guess built-in functions make use of that event queue
13:41 < mscdex> wiherek: does it work when you set the property directly inside of your "reqWelcomeMessage" callback?
13:41 < mscdex> wiherek: removing the buildUser() call?
13:43 < wiherek> tried.
13:43 < wiherek> the weird thing is that
13:43 < wiherek> when I try to console.log user.timezone, it still doesnt work.
13:44 < wiherek> but timezone gets printed when i console.log(user)
13:45 < wiherek> yea, ok.
13:46 < bcave> mscdex: thanks, needed the binary mode
13:46 < wiherek> that was a database object
13:46 < wiherek> the schema wasnt defined
13:59 < spion_> everyone and their grandmother are writing package managers and build tools based on nodejs
13:59 < chrisjaure> is that a bad thing?
14:00 < spion_> not really, I'm just overwhelmed
14:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:08 < bradleymeck> spion: grunt and npm are more than enough generally
14:09 < RLa> uh oh, is github down?
14:09 < brianc1> yeah
14:09 < RLa> just when you need it most
14:12 < chrisjaure> bradleymeck: unless you're talking about client-side, in which case i think it's awesome everyone is trying to copy npm
14:12 < pandeiro> anyone using underscore-cli? is there a way i can 'extract' an object key w/o generating an exception if the key doesn't exist
14:13 < bradleymeck> chrisjaure: just use npm for that even, its got deps management, look into cloud 9's repos for some serious stuff
14:13 < strk> can't http module do DEL calls ?
14:13 < strk> I get      Error: socket hang up at createHangUpError (http.js:1253:15)
14:15 < bradleymeck> strk it can, but you should be sending DELETE not DEL
14:15 < chrisjaure> bradleymeck: and maybe npm will win again, but in the front-end space, it seems like the early package manager wars of nodejs right now with bower, component, ender, etc.
14:15 < bradleymeck> chrisjaure: maybe, but until some consensus is made about just hot to load modules front-end wise i doubt one will rise
14:16  * WarheadsSE has no problems with github
14:16 < brianc> https://status.github.com/
14:17 < strk> bradleymeck: thanks!
14:17 < WarheadsSE> brianc: cute. Seeing no impact on any of the repos I use
14:21 < WarheadsSE> and.. there it goes
14:29 < Glenjamin> Hey guys, i'm trying to run npm rebuild on a system with no internet access
14:29 < Glenjamin> but it tries to download node's source code
14:29 < Glenjamin> is there a location I can put this so it just works?
14:30 < qballer> how do I know from the CLI to which DB am I connected ?
14:31 < CIA-116> libuv: Ben Noordhuis emfile_trick * rfc0609d / src/unix/stream.c : Merge branch 'v0.8' - http://git.io/WWV_Bg
14:31 < CIA-116> libuv: Ben Noordhuis emfile_trick * rde8fc7b / (3 files in 2 dirs): unix: reimplement accept() EMFILE trick - http://git.io/FP9vXw
14:32 < astropirate> github is taking a massive dump right now
14:32 < stagas> astropirate: yeah
14:35 < bradleymeck> Glenjamin: its probably trying to download node-gyp's info
14:37 < bradleymeck> npm_config_nodedir=$(dirname $(dirname $(command -v node))) npm rebuild # Glenjamin this may work, 50-50?
14:50 < BitScout> mscdex, btw. in a second attempt it worked somehow...
14:58 < Glenjamin> bradleymeck: running node-gyp rebuild directly gives info downloading: http://nodejs.org/dist/v0.6.19/node-v0.6.19.tar.gz 
14:59 < bradleymeck> Glenjamin: yes because it cannot find the headers for node since nodedir was not set properly
14:59 < Glenjamin> ah, i see
15:00 < Glenjamin> the command you gave me ended up with /usr, but seemed to have no effect
15:00 < Glenjamin> but the headers exist in /usr/include/node
15:01 < Glenjamin> in fact, node-gyp list gives 0.6.19
15:03 <@isaacs> stagas: yo
15:03 <@isaacs> stagas: sorry, didn't realize that conv was happening in #libuv.  not really a lowlevel node issue.
15:05 < stagas> isaacs: yeah well I'm not seeing the ignore ignore happening, maybe npm matches with windows paths and .gitignore uses forward slashes
15:05 <@isaacs> stagas: what versino of npm, and could you please provide me with a reproducible example?
15:05 <@isaacs> stagas: because this definitely ought to work, on windows and on unix.
15:06 <@isaacs> stagas: but yes, i think you probably need to put / slashes in your ignore files for it to work properly.
15:08 < stagas> isaacs: 1.1.59
15:08 <@isaacs> stagas: kewl
15:08 <@isaacs> so that's very recent, then
15:08 <@isaacs> stagas: can you gist your stuff?  if you use the example i just gisted, then does that work for you?
15:13 < stagas> isaacs: strange I can't reproduce it
15:13 <@isaacs> stagas: there are a few filenames that are *never* ignored, and some that are *always* ignored.
15:14 <@isaacs> stagas: npm will stubbornly refuse to ignore README files, and will stubbornly refuse to include .*.swp or .DS_Store files
15:15 < Aldus> socket.io question: seems like whenever an user connects, his sockets join a room. io.sockets.manager.roomClients[socketid] is:  { '': true }. Why?
15:17 < stagas> isaacs: does it always ignore node_modules also?
15:18 <@isaacs> stagas: it ignores any node_modules/* folders that are not included in the bundledDependencies array
15:19 <@isaacs> stagas: https://gist.github.com/3691455#L89
15:19 <@isaacs> stagas: i'd give you a nicer link to the repo itself, but github is having some problems.
15:19 <@Nexxy> THE SKY IS FALLING
15:24 < TehShrike> isaacs: your RSS feed is turning up old blog posts, but with messed up HTML
15:28 < Glenjamin> does anyone know how to manually generate the appropriate .node-gyp directory? I'm trying to rebuild modules on a box with no internet access
15:29 <@isaacs> TehShrike: whereat?
15:29 <@isaacs> TehShrike: on the node blog?
15:29 < TehShrike> No, your personal one
15:30 < TehShrike> http://blog.izs.me/rss
15:30 <@isaacs> oh
15:30 < bradleymeck> Glenjamin: npm_config_nodedir=$NODE_PREFIX npm … or node-gype --nodedir $NODE_PREFIX , where $NODE_PREFIX points to a valid node installation that has node-gyp compatibility, we use it on a build server and it works fine
15:31 <@isaacs> TehShrike: indeed
15:34 <@isaacs> TehShrike: looks like a bug with tumblr
15:34 <@isaacs> TehShrike: this is why rss feeds should always use CDATA instead of trying to escape html.
15:34 <@isaacs> it never works out properly.
15:35 < Glenjamin> bradleymeck: sorry to keep bugging, but what would a valid node installation look like? i'm now getting errors about tools/gyp_addon being missing
15:36 < TehShrike> CDATA makes me sad, but for a fully formatted document, it seems inevitable
15:36 < zackiv31> anyone know the upload limit of a vanilla node/express install?
15:36 < brianc> zackiv31: there is no limit
15:36 < TehShrike> Glenjamin: what are you doing that causes the errors to appear?
15:37 < Glenjamin> "npm rebuild"
15:37 < brianc> zackiv31: more than likely if you're getting a limit kicked in it's on some front end proxy like nginx or haproxy or something and those are configurable
15:37 < Glenjamin> or well, "npm rebuild" => attempts to fetch source code and fails due to no internet
15:37 < zackiv31> errr, logs are kicking out: Error: Request Entity Too Large  ... I have nothing in front of it
15:37 < stagas> isaacs: I couldn't make it to include a node_modules that was nested in a dir that was a different package by itself, so I published it as a module and pull it from deps as usual
15:38 < Glenjamin> --nodedir causes it to expect things to exist, but those things don't seem to be on this system
15:38 <@isaacs> stagas: use "bundledDependencies" in package.json
15:38 <@isaacs> stagas: node_modules folders are for housing packages.
15:39 <@isaacs> stagas: in the package.json that is next to the node_modules folder, add "bundledDependencies":["foo"] to include node_modules/foo
15:39 < stagas> isaacs: yes, I had a package that was in another location, with its own node_modules folder
15:39 < brianc> zackiv31: http://stackoverflow.com/questions/11607776/how-to-response-to-client-or-browser-when-post-file-size-excess-the-limit-in-nod
15:41 < stagas> isaacs: so if npm doesn't read every package.json in the way to see if it's a root module path, then it can't see bundled deps for that one
15:41 <@isaacs> stagas: but it does
15:41 <@isaacs> stagas: every time it sees a package.json and a node_modules sitting next to each other, it assumes that tehy're related.
15:41 <@isaacs> and it does what the package.json tells it to do
15:42 <@isaacs> wrt bundling and such
15:42 <@isaacs> not what the parent package says to do
15:42 < stagas> isaacs: then bundled deps on the nested dir didn't work for me
15:42 <@isaacs> stagas: code.
15:42 <@isaacs> stagas: i need to see the code.
15:42 < bradleymeck> Glenjamin: then the node install would look to be too old to have gyp compat stuff bundled with it, its going to be a normal lib/ bin/ include/ structure and it should have node-gyp globally installed there if its older as i understand
15:43 < Glenjamin> bradleymeck: the node install is a product of a custom rpm, so i suspect we're missing some files
15:44 < stagas> isaacs: the prev commit was the broken one https://github.com/stagas/frequire I'll see if I can reproduce it to something simpler, but I think it didn't care for the nested package.json
15:44 < tanepiper> Anyone around using mongoose?
15:44 < Glenjamin> bradleymeck: i see now, looking at the source for install.js in node-gyp, there's a section about legacy files
15:44 < stagas> isaacs: https://github.com/stagas/frequire/tree/6976adb8d55e7f748aa2aed24aa1b7048b42d9c4/shims/node
15:45 <@isaacs> stagas: there's no node_modules folder there
15:46 <@isaacs> stagas: did you want npm to include a shims/node/node_modules/buffer-browserify  in the package?
15:46 < stagas> isaacs: yes it's ignored, I was about to up it with the unignore, and then I saw npm was ignoring it
15:46 < qballer> Hey guys is there an event in node for when node shutsdown ?
15:46 <@isaacs> stagas: if so, add "bundledDependencies":["buffer-browserify"] in https://github.com/stagas/frequire/blob/6976adb8d55e7f748aa2aed24aa1b7048b42d9c4/shims/node/package.json
15:47 <@isaacs> qballer: process.on('exit', function (code, signal){...})
15:47 < stagas> isaacs: did that
15:47 < qballer> thanks isaacs 
15:47 <@isaacs> stagas: show me
15:48 < stagas> isaacs: it's gone it didn't work
15:48 <@isaacs> stagas: show me it not working :)
15:48 < stagas> isaacs: ok! :)
15:51 <@isaacs> stagas: ah, nodE_modules folders that aren't in the root, or descendents of the root, are indeed skipped
15:51 <@isaacs> got it
15:52 < theCole> isaacs: are you sticking around Dublin after node Dublin or leaving shortly after?
15:52 < theCole> trying to decide on doing to Dublin for the conference or doing to Doha to do some work with Al Jazeera
15:52 < theCole> going*
15:53 <@isaacs> theCole: leaving pretty soon after.
16:00 < stagas> isaacs: https://github.com/stagas/brokenignore
16:04 <@isaacs> stagas: fixed.
16:04 <@isaacs> stagas: will be in npm 1.1.61
16:04 <@isaacs> stagas: node 0.8.9
16:04 < stagas> isaacs: that was fast
16:05 <@isaacs> stagas: when i see it break, it's easier to fix :)
16:06 <@isaacs> stagas: https://gist.github.com/3691770
16:06 < zackiv31> anyone had success with uploading a 100mb+ file in node? I've set my limits using express.limit()... but my app just hangs with 100% cpu when I try to upload ~100mb files
16:06 < zackiv31> by uploading, i mean "accepting"
16:12 < brianc> zackiv31: yeah I upload much larger files all the time
16:12 < brianc> zackiv31: transferly.com - send any size file you want...app is at about 30 megs of ram
16:12 < CIA-116> node: isaacs v0.8 * r54a4c63 / (662 files in 117 dirs): npm: Upgrade to 1.1.61 - http://git.io/XNVapQ
16:15  * zackiv31 will be right back
16:29 < tnorris> unexpected behavior: running `cp.spawn('tail', ['-0f', '/path/to/file.log'])` and producing output. but if I delete the log file node still receives data, and the log file isn't re-created. any ideas why this is happening?
16:34 < lperrin> tnorris: I think that the inode isn't removed until all processes have released it
16:34 < lperrin> so node can still use it, even if it doesn't exist in the filesystem anymore
16:36 < lperrin> usually text editors check the inode of files (with stat) regularly
16:36 < lperrin> that might be why you expected node to complain
16:36 < WarheadsSE> who all, besides TooTallNate was working on the ARM stuffs?
16:44 < tnorris> lperrin: thanks. it has the unexpected benefit of performing 30% better.
16:44 < tnorris> my only guess is because it's no longer writing to disk.
16:44 < TehShrike1> Can anyone recommend a good JavaScript syntax definition for Sublime Text 2?
17:08 < nlf> is there a way to convert a string into an http response object?
17:08 < nlf> i don't want to be parsing this thing myself
17:08 < nlf> makes no sense
17:08 < TehShrike|Work> ...what sort of string?
17:09 < nlf> it's an http response
17:09 < TehShrike|Work> Those aren't strings
17:09 < TooTallNate> nlf: where are you getting this string from?
17:09 < nlf> i'm making a riak library, and when doing a query for links it returns a multipart/mixed response
17:09 < nlf> so i'm taking that response, splitting it into the individual responses, and i need to parse those into http response objects
17:10 < nlf> currently they're strings
17:10 < TooTallNate> nlf: not so much "http response objects", but something more dedicated to multipart would work better
17:10 < nlf> headers and all included
17:11 < nlf> my plan was to keep it simple and just pass back an array of response objects
17:12 < TooTallNate> i actually had something a log time ago :D but i wouldn't recommend using it
17:12 < nlf> it's a rather annoying thing to parse
17:13 < TooTallNate> nlf: perhaps try https://github.com/chjj/parted
17:14 < gildean> nlf: why not move tha data as json instead?
17:14 < gildean> would make the parsing a lot easier
17:14 < nlf> gildean: because it's coming from riak
17:14 < nlf> i have no control over what it sends me
17:14 < zackiv31> brianc: do you use express with your app? how have you set the file size limit? I'm just doing app.use(express.limit('100mb'));   app.use(express.bodyParser());  ... but once I get close to 100 megs it just hangs
17:14 < nlf> when you linkwalk, you're given a multipart/mixed response
17:15 < nlf> TooTallNate: i'll give that one a shot
17:15 < milani> TooTallNate, Do u think porting appjs to iOS worth it?
17:16 < WarheadsSE> ohai, hes there
17:17 < stagas> nlf: also see http://eirikb.github.com/nipster/#multipart
17:17 < WarheadsSE> TooTallNate: https://github.com/archlinuxarm/PKGBUILDs/issues/242#issuecomment-8426407
17:17 < WarheadsSE> that your future problem with nodejs & openssl 1.0.1c+ :)
17:23 < TooTallNate> WarheadsSE: so is that a build or runtime env variable?
17:24 < TooTallNate> milani: it would be in high demand I imagine but the problem is that node only work on jailbroken devices
17:40 < milani> TooTallNate, there is phonegap out there which does the same. I just wanted to ask if there is an extra value to have appjs which runs as nodejs module
17:41 < milani> TooTallNate, yeah and there is no chance to get apps built in this way to store.
17:42 < TooTallNate> milani: right phone gap utilizes a WebView though, and apple's javascript engine. V8 is a whole different beast, and the main reason you couldn't get into the app store
17:43 < milani> TooTallNate, hmmm yeah beside there is no way to get chromium compiled for iOS.
17:43 < bradleymeck> TooTallNate: just wait for Win8 no-jit mode
17:43 < milani> TooTallNate, google chrome for iOS is only  safari + chrome UI :D
17:43 < bradleymeck> milani: and that lil ui tweek makes it soo much more usable
17:48 < matbee> Here's my situation. I have a folder structure: /websites/:ID:/... -- and I want to route any requests which contain a certain query parameter www.domain.com/?q=ppp to route to /websites/ppp/ and serve any relevant files
17:48 < matbee> Is this easily done iwht Express?
17:48 < matbee> Also, if the file is an HTML file, I modify it before returning it.
17:50 < jcrew> matbee: it's easy, are you reverse proxying behind apache or anything?
17:50 < matbee> jcrew, actually no, straight node
17:55 < matbee> I just feel like it'll get wonky when someone requests www.domain.com/path/to/file?q=ppp and it has to map to /websites/ppp/path/to/file
17:57 < WarheadsSE> TooTallNate: it's a runtime
17:58 < jcrew> matbee: it probably will, why not just have them do /ppp/path/to/file ?
17:59 < matbee> Well, lets say we scrap the q=ppp and define it by domain only... is that easier?
18:00 < jcrew> i haven't done multi domain with express, i'd imagine it's fairly easy
18:08 < matbee> Is there any easy way for Express to intercept all requests for an HTML page? No matter the path?
18:09 < Sapr0> app.all('/*', router.function) ?
18:14 < diversario> matbee, that would intercept all paths, though, if you have actual HTML pages with extensions you could use '*.html' as a path mask
18:18 < matbee> strange, '/*.html' or '*.html' doesn't work.
18:18 < diversario> matbee, try '*.htm'
18:18 < diversario> without the slash
18:18 < mmalecki> middleware?
18:19 < diversario> I'd just add a function somewhere in end of .use calls and run regexp test on req.url
18:20 < gootdude> anyone using felixge/node-mysql with amazon rds?
18:21 < gootdude> or really use that mysql library at all, having weird issue where queries just stop working, have debug on and nothing of use is outputted, simple reboot of node instance works fine
18:21 < gootdude> I'm using reconnection code properly, and it seems to be sending those packets, but nothing for the queries, seems to happen only after a few hours
18:21 < drspin> hi all -- this is going to be my first node service in production and I'm thinking of using forever to keep it well... going forever. any words of wisdom? Thanks!
18:21 < diversario> like, .use(function(req, res, next){if(/\.htm^/.test(req.url)){/*handle it*/} next(); })
18:22 < matbee> hmm
18:22 < matbee> I didn't realize use could do that
18:22 < matbee> ....excelleeennnt
18:22 < diversario> matbee, yeah, middleware are just funcs
18:22 < diversario> drspin, using forever in production on my project, works pretty well for me
18:23 < mmalecki> drspin: whole nodejitsu cloud is kept up with forever, never failed :)
18:23 < drspin> diversario, mmalecki -- thanks. 
18:24 < tnorris> what's the syntax to default utf8 on a tcp data event?
18:24 < tnorris> (instead of a Buffer)
18:24 < mbalho> tnorris: you will always get a buffer, i'd recommend reading this http://nodejs.org/api/all.html
18:25 < mscdex> tnorris: socket.setEncoding('utf8')
18:26 < tnorris> ok. i'm trying to send the received data to forked children processes, but I have to to a data.toString() first. which is killing my performance.
18:26 < tnorris> any ideas how to get that performance back?
18:27 < fritzy> tnorris: use a cheaper serializer?
18:30 < tnorris> fritzy: what do you mean "cheaper"?
18:31 < mbalho> tnorris: use a single process
18:31 < fritzy> there's another option
18:31 < fritzy> tnorris: cheaper meaning... try msgpack instead of json, for example
18:31 < mmalecki> tnorris: that might be unrelated to the serializer
18:32 < mmalecki> i/o between forked processes is blocking
18:32 < tnorris> fritzy: i'm piping a log file through node to be parsed, so it's just strings. don't know how it could be much cheaper than that.
18:33 < tnorris> mmalecki: are you sure? i've been doing load tests, and each process is running on it's own logical core.
18:34 < mmalecki> tnorris: I mean, the process of passing data between children is blocking
18:34 < mmalecki> unlike, say, network traffic
18:35 < diversario> mmalecki, I'm also doing multiprocess parsing (almost like log files), in my case I read the file in the master process and .send() to child processes
18:35 < diversario> performance is good, at least for my purposes.
18:36 < tnorris> mmalecki: ugh, you're right. just running .toString() isn't hurting me much. it's sending the data to another process.
18:36 < mmalecki> diversario: yup, the .send() thing is synchronous
18:36 < diversario> mmalecki, well, that sucks
18:37 < tnorris> well poop. any way to help that performance?
18:37 < diversario> sordina, you're saying that having a TCP server per child would be more performant?
18:37 < diversario> oops, i meant mmalecki 
18:37 < tnorris> I can stream data in at about 1 GB/s, but then sending the data off to another process is slowing me down to about 138 MB/s.
18:37 < mmalecki> diversario: I'd try with a UNIX socket server
18:38 < mmalecki> make the children create a socket at '/tmp/' + process.pid + '.sock'
18:38 < diversario> mmm, ok, i have to try that, then. Same net#createServer, right?
18:38 < mmalecki> actually, I might write a module to do that, as a work around
18:38 < mmalecki> yeah
18:38 < diversario> nice
18:38 < mmalecki> just .listen('/tmp/' + process.pid + '.sock')
18:38 < diversario> mmhm
18:40 < diversario> Right, it's sync because it's an stdio, duh!
18:40 < mmalecki> yeah
18:40 < mmalecki> actually, I'll look into a fix too
18:40 < mmalecki> haven't done a core patch in ages
18:41 < diversario> wouldn't that require API change there, too? Since the interface is sync, no callback there.
18:41 < mmalecki> well, do you really care to know if child received the message?
18:42 < diversario> sometimes yes, although I have my CPs respond back with a confirmation. Right now you have the guaranteed order of messages, though. Not sure if that matters much, however.
18:43 < diversario> actually, it doesn't since messages can be marked with seq_id or smth like that
18:43 < diversario> maybe keep old interface and have a switch for async mode?
18:48 < WarheadsSE> if you are sending via a unix socket, isnt it always ordered FIFO anyways
18:53 < diversario> WarheadsSE, so that should be taken care of by the application code
18:59 < jocafa> does mocha emit an event when all tests are finished?
18:59 < tjholowaychuk> jocafa "end"
19:00 < jocafa> so in a browser, i could do:  mocha.run().on('end'...?
19:00 < tjholowaychuk> or just mocha.run(callback)
19:01 < jocafa> does that just run the callback at the end then?
19:02 < jocafa> nm, found it in the src
19:04 < Venemo> hey guys
19:04 < dmilith> how to spawn node process as deamon?
19:07 < WarheadsSE> diversario: eh? I am saying sending from a->b over a unix socket, i was pretty certain is fifo, thus, you bits will be recevied in order.
19:09 < mscdex> dmilith: lots of different ways to do that, there's 'forever', upstart, sysvinit, etc
19:09 < dmilith> but in unix process, daemon process has parent pid 1
19:10 < dmilith> after running nodemon (which I use) it's not 1
19:10 < dmilith> but anyway.. I'd like to spawn node somescript.js as daemon
19:10 < dmilith> without external software
19:10 < dmilith> that's impossible right?
19:11 < mmalecki> nope
19:12 < Kreol[Ukr]> Hi all. does node have some function to include file like php? without export.<function_name>
19:13 < BennyLava> ..
19:13 < TehShrike|Work> Kreol[Ukr]: you mean, require()?
19:13 < BennyLava> like php, trololol
19:13 < Kreol[Ukr]> <TehShrike|Work> yes
19:14 < BennyLava> Node.js isn't anything like PHP, and that's a good thing. PHP's include is a horrible way to handle things.
19:14 < Kreol[Ukr]> if i want too use some function that defined in another file i need to export it
19:14 < tnorris> bugger, n00b problem. trying to connect to a socket file using net.connect, and I'm getting the following `Error: connect ENOENT`
19:14 < WarheadsSE> but I think Kreol[Ukr] wants to direct include, not pull a module.
19:14 < TehShrike|Work> Kreol[Ukr]: yes, the way to share code is to turn it into a module
19:14 < TehShrike|Work> Kreol[Ukr]: http://nodejs.org/api/modules.html
19:14 < BennyLava> WarheadsSE: yes, and that's a horrible idea.
19:14 < BennyLava> It's one of 235 million reasons PHP sucks donkey balls.
19:15 < WarheadsSE> BennyLava: :) I've writeen in aenough languages, I've seen some incredibly horrible ideas.
19:15 < frewsxcv> op me
19:21 < Kreol[Ukr]> Hm. So it'll be more good if i'll use export.something every time? (i'm new in node.js so... and can't find some good sites where i can watch how to right coding in node.js  maybe it's because i find it in Russian but not at English )
19:22 < TehShrike|Work> Kreol[Ukr]: it's good practice to have each module do one thing - often, just exporting a single function that can be used by other code
19:22 < dominictarr> Kreol[Ukr], you can do module.exprorts = function () {...}
19:22 < dominictarr> Kreol[Ukr], you can do module.exports = function () {...}
19:24 < tnorris> mmalecki: here are my results piping a 1 GB file: running data.toString() - 1.3 sec; sending to another node process on socket - 2.2 sec; sending to forked child process; 5.1 sec.
19:24 < tnorris> so, yeah. definitely faster to run many processes and pipe to their sockets.
19:25 < tnorris> only thing that sucks is that it's not near as easy to create a launch script for that scenario.
19:25 < ag4ve> if i want to pass in json as a function: function (qSearch, parm, cb) { var pNum = parm.pNum || this.pNum;
19:26 < WarheadsSE> tnorris que? Shouldn't be all that complicated, just adding a simple layer to setup on client threads
19:26 < ag4ve> this fails if i call it with parm as null. how do i fix this?
19:27 < WarheadsSE> trinary operation ag4ve ?
19:27 < WarheadsSE> since (null).pNum = barf, instead of just null
19:27 < Kreol[Ukr]> hm. ok. can anybody recommend some site where will be good describe how to right write on node.js ?
19:27 < WarheadsSE> http://www.nodebeginner.org/ should help
19:28 < ag4ve> so, var pNum = parm.pNum ? parm.pNum : this.pNum; ?
19:28 < Kreol[Ukr]> o. ok. thanks
19:28 < WarheadsSE> ag4ve: give that a shot, but I think it might be more appropriate to just verify parm not isnull
19:28 < WarheadsSE> Kreol[Ukr]: i beleive it even has russion
19:29 < WarheadsSE> *russian
19:29 < tnorris> WarheadsSE: so it shouldn't be difficult to manage multiple processes with a single Upstart script?
19:30 < WarheadsSE> If you master handles starting it's children, no
19:30 < Kreol[Ukr]> yes i see it on russian. (anyway layout the same :-))
19:30  * WarheadsSE uses Arch
19:30  * ag4ve wants perl's equal-or so, pNum = parm.pNum // this.pNum .... oh well :)
19:30 < WarheadsSE> ag4ve: true, this isnt perl :p
19:30 < WarheadsSE> even perl would silently bark at you
19:31 < WarheadsSE> Although in perl, you could do pNum = (parm) ? parm.pNum : this.pNum
19:31 < WarheadsSE> idkif that will work in node.. 
19:31 < ag4ve> or, actually this.pNum //= parm.pNum ... but i'll quit with the meta code
19:32 < WarheadsSE> well either way, its best to be sure the object exists before trying to access it's property
19:32 < WarheadsSE> jumping around it because it works is well, horrible hackish
19:37 < mscdex> you can use the ternary operator in javascript just fine
19:38 < TehShrike|Work> Well, maybe HE can't, but *I* can!
19:38 < TehShrike|Work> ;-P
19:39 < Venemo> can you recommend me a nice IDE for using with node.js?
19:40 < WarheadsSE> c9.io (install it one your vm :)) .. Komodo by activestate $$, someone else mentioned a nice one once...
19:41 < TehShrike|Work> I just started using Sublime Text 2.  I'm just getting started with it today, but lots of people seem to be pretty big fans of it
19:42 < stagas> TehShrike|Work: be sure to install the package control extension
19:49 < TehShrike|Work> That's the first thing I did, though I haven't installed any packages with it yet :-)
20:03 < tnorris> mmalecki: so you think it'd be possible to have child_process .send be non-blocking?
20:10 < diversario> Venemo, WebStorm has very good node support, but it's paid (but there's a sale ATM, like $30 for a license)
20:12 < Venemo> I'm looking for a FOSS one, if any
20:12 < nmartin> anyone pretty familiar with getting a library interfaced with ffi in node?  I need an ffi interface to the PAM library to authenticate against the local machine
20:12 < nmartin> I have it running using child_process at the moment
20:13 < nmartin> but would like to interface via FFI
20:13 < Venemo> right now I'm pretty much fine with gedit or any simple editor, but I miss the autocomplete feature from them a bit.
20:13 < CIA-116> libuv: Ben Noordhuis master * r86cb520 / src/unix/stream.c : unix: fix EMFILE busy loop - http://git.io/NztG7w
20:13 < CIA-116> libuv: Ben Noordhuis master * r4f5c8da / (3 files in 2 dirs): unix: reimplement accept() EMFILE trick - http://git.io/thMeQA
20:15 < wingy> substack: what is your service called for using different browsers?
20:15 < ag4ve> i'm using mongoose, and i'm failing url validation where the part of the model looks like: text_url    : { type: Url }, with an error: Validator "url is invalid" failed for path data.text_url
20:16 < wailupe2k> ok question for anyone. I'm running into an interesting issue…. when registering a call back in node.js is that callback scoped to the current request / response context? I'm seeing some odd issues with high load actually getting data all mixed up between different requests….. 
20:16 < ag4ve> i'm console.log(JSON.stringify(data)) and getting: text_url: \"http://www.google.com\"
20:17 < ag4ve> how is this failing?
20:17 < RLa> Venemo, latest eclipse web dev tools more-less work too
20:17 < RLa> only nullpointer errors periodically
20:17 < Venemo> RLa, hehehe
20:17 < RLa> also check out emacs+js2 mode
20:18 < RLa> no autocomplete but gets indentation right
20:18 < Venemo> :)
20:18 < wailupe2k> For example Req A does 10 async db calls which each register a callback and increment a counter,, then req B does the same thing,,, but when looking at the output A's callbacks pulled B's events …. 
20:19 < RLa> what db driver?
20:19 < nmartin> i just jumpe in here, but vim has a very good javascript plugin to do "proper" javascript indentation
20:20 < BennyLava> what is proper javascript indentation?
20:20 < BennyLava> this concept is new to me
20:21 < BennyLava> please elaborate
20:21 < nmartin> BennyLava: :) - let me find the plugin, hang on
20:21 < BennyLava> no no
20:21 < BennyLava> I'm just wondering what proper javascript indentation is
20:22 < Venemo> BennyLava, I think it's a personal preference :) whatever works for you.
20:22 < nmartin> ah - well, I don't know who sets the statndard for proper indentation, but this plugin doesn't BREAK javascript trying to do c style indentation
20:22 < BennyLava> I know Venemo, I was just testing him
20:22 < nmartin> http://www.vim.org/scripts/script.php?script_id=1840
20:22 < nmartin> :)
20:23 < nmartin> I do proper javascript indentation :)
20:23 < BennyLava> Cool story bro
20:23 < BennyLava> put it on your cv
20:23 < nmartin> heh
20:24 < Venemo> :)
20:28 < mmalecki> tnorris: I think so, yeah
20:29 < mmalecki> tnorris: also, that benchmark indeed is interesting
20:31 < tnorris> mmalecki: thanks. i'm surprised how much data node can pipe through.
20:31 < tnorris> if I can find an efficient way to pass sets of data to other processes for parsing, i'll be in good shape.
20:31 < mmalecki> tnorris: also, why do you .toString()?
20:31 < tnorris> mmalecki: to turn the Buffer to a utf8 string. you can't send raw Buffer's to child processes.
20:32 < mmalecki> ah. you can pipe raw Buffer tho
20:32 < tnorris> or, at least I haven't had any luck doing so.
20:33 < zackiv31> anyone know of a module that wraps the native "unzip" command and returnst he list of files extracted?
20:33 < brianc> does node have a memory leak in the gzip module?
20:33 < dominictarr> tnorris, whaaa? that doesn't make sense, can you post your code?
20:33 < dominictarr> (using raw Buffers)
20:33 < zackiv31> does gunzip support *.zip files?
20:33 < substack> wingy: http://browserling.com
20:33 < brianc> has anyone heard of that?
20:33 < tnorris> dominictarr: sure, one sec.
20:33 < wingy> substack: yeah thx
20:34 < brianc> some guy told me "careful when using node, I heard it has a memory leak in the gzip compression"
20:35 < substack> this guy said that a friend of his knew a programmer who complained about performance issues in a library so he doesn't use it
20:35 < substack> true story
20:35 < Venemo> there is one thing about nodejs that I'm still not getting. if I want to use node for web app development and want to run multiple node-based web apps on the same server (all of them on port 80, but perhaps listening to different hostnames), how would I be able to do that?
20:35 < brianc> I didn't think he was right
20:35 < brianc> I just didn't want to get into a flame war with him
20:35 < tnorris> Venemo: I use nginx as a simple load balancer to pass results to many node instance.s
20:36 < brianc> but I wanted to see if there was any truth to his dirty rumor
20:36 < Venemo> tnorris, how does that work?
20:36 < mmalecki> dominictarr: process.send doesn't work with Buffers
20:36 < brianc> I'll take your answer as a kindly "go with your gut on that one, fool"
20:37 < tnorris> Venemo: here's an example nginx config that I use: https://github.com/trevnorris/norrd/blob/master/conf/nginx.conf
20:38 < tnorris> Venemo: just look at the http {} clause
20:39 < Venemo> tnorris, is this similar to port forwarding or something?
20:40 < tnorris> Venemo: yeah, pretty much. I use socket files, but you can run on ports too.
20:40 < Venemo> tnorris, and how well does this stuff perform?
20:40 < djazz> node.js + lego mindstorms = remote controlled robot http://djazz.mine.nu/lab/rpi/remote/ http://i.imgur.com/WGXzz.jpg
20:40 < djazz> :)
20:40 < Venemo> tnorris, I mean, how much overhead does the forwarding adds to the thing?
20:40 < tnorris> Venemo: I usually disable logging, ignore all favicon.ico requests, and a few other perf tuning things. but I can handle 20k/sec.
20:41 < tnorris> way more than your server's internet pipe will probably allow.
20:41 < Venemo> tnorris, that sounds awesome!
20:42 < wailupe2k> Zeromq Node.js Bindings Question here. I have a request / reply pattern that takes a web request through node and submits N number of requests through a dealer socket to a python powered majordomo queue that passes the req's to backend workers,,,, issue is that I seem to be mixing up the callbacks on the node.js frontend during high load….. so if req A comes in and runs 10 req's through the dealer socket at the same time as req B rolls through they se
20:42 < wailupe2k> to be mixing up responses,,,,, really confusing because each dealer context has its own identity derived form a rand num….. anyone have any advice on this?? 
20:42 < tnorris> dominictarr: sorry for the delay. pastebin is hammered, so I used gist:
20:42 < tnorris> https://gist.github.com/3693696
20:42 < tnorris> pay attention to line 31.
20:42 < elbuo> how can i access a function inside a module.exports?
20:43 < WarheadsSE> var thathing = require('thatmodule')
20:43 < garrettwilkin> djazz: AWESOME
20:43 < WarheadsSE> even require('thatmodule').thing
20:43 < tnorris> Venemo: yeah, works great for me. run it on an EC2 server and can scale up, running more node processes, as needed.
20:43 < garrettwilkin> so you are running Node on the Raspberry Pi?
20:43 < garrettwilkin> that is smart.. didn't think of that
20:44 < djazz> garrettwilkin: well, it too 5 hours to compile node 0.8.8
20:44 < garrettwilkin> well… 
20:44 < garrettwilkin> maybe you could post the disk image for us!
20:44 < djazz> garrettwilkin: the node.js program just passes on the websocket data to the robots
20:45 < djazz> lol
20:45 < djazz> a binary is enough
20:45 < djazz> OR GET ARCH
20:45 < djazz> (i use Raspbian)
20:45 < garrettwilkin> uh no comprende
20:45 < tnorris> mmalecki: and thanks for incorporating my vows.epsilon. been hugely useful.
20:45 < garrettwilkin> is there a github for this?
20:46 < djazz> garrettwilkin: not yet, its fresh from the oven
20:46 < djazz> lol robot fell
20:46 < garrettwilkin> djazz: how do you interface with the windstorm?
20:46 < WarheadsSE> lol @ djazz that was loud
20:46 < garrettwilkin> haha
20:46 < djazz> WarheadsSE: loud?
20:46 < djazz> garrettwilkin: bluetooth
20:46 < WarheadsSE> " djazz | OR GET ARCH "
20:46 < garrettwilkin> djazz: seemed like I couldn't control it when i attempted to
20:46 < djazz> google "mindstorms" and node
20:46 < djazz> bluetooth
20:46 < mmalecki> tnorris: oh, it's yours. pleasure :)
20:46 < WarheadsSE> fixed the armvX < 7 issue btw.
20:47 < garrettwilkin> ok
20:47 < owen1> what's the prefered way to send an email with noed? node-email?
20:47 < djazz> garrettwilkin: source: http://pastebin.com/u/djazz
20:47 < djazz> node.js code: http://pastebin.com/dy9cxerZ
20:48 < tnorris> dominictarr: i've added the parser.js file to https://gist.github.com/3693696. if you try running it without .toString(), at least for me, it hangs and uses a lot of memory.
20:48 < dominictarr> tnorris, instead of calling stdout.on('data', function (d) { child.write(d) })
20:48 < garrettwilkin> DANG!!!
20:48 < dominictarr> use stdout.pipe(child)
20:48 < garrettwilkin> dropped the ball
20:49 < garrettwilkin> someone else took over right as i got it all lined up!
20:49 < garrettwilkin> lol
20:49 < WarheadsSE> garrettwilkin: ? this.ball.drop() ?
20:49 < WarheadsSE> heh.
20:49 < djazz> garrettwilkin: i tried to help you! someone grabbed the claw too hard
20:49 < dominictarr> tnorris, hmm, you are doing something quite weird.
20:49 < djazz> rainbowDash.drop()
20:49 < tnorris> dominictarr: don't doubt it. it's my first time using a lot of this API.
20:50 < dominictarr> tnorris, look into streams.
20:50 < garrettwilkin> oh that was probably me
20:50 < garrettwilkin> lol
20:50 < garrettwilkin> this is awesome!
20:50 < dominictarr> streams are what you want to use for stuff like this.
20:51 < garrettwilkin> djazz: that is friggin awesome man
20:51 < garrettwilkin> you rock
20:51 < dominictarr> tnorris, you arn't actually writing to stdin on the child. you are actually sending it to the message interface.
20:51 < djazz> wohoo
20:51 < djazz> :D
20:51 < garrettwilkin> gotta let me know when you put the source up
20:51 < dominictarr> I think that uses JSON, and buffers don't JSON nicely
20:51 < djazz> garrettwilkin: see pastebin
20:52 < djazz> garrettwilkin: if/when i put it up it will be here https://github.com/daniel-j/
20:52 < garrettwilkin> djazz: oh sweet.  you must have posted while i was playing with the bot
20:52 < djazz> :D
20:52 < dominictarr> use pipe and child.stdin (and then process.stdin inside the child) then you will be able to use buffers.
20:52 < garrettwilkin> djazz: do you know about #robotjs
20:52 < garrettwilkin> ?
20:52 < djazz> hm?
20:52 < tnorris> dominictarr: ok, so you think it would perform better if I wrote directly to the child's stdin?
20:52 < garrettwilkin> not many people in there but you should post this
20:53 < djazz> ok
20:53 < garrettwilkin> rwaldron and voodootikigod started it
20:58 < dominictarr> tnorris, yeah, most probably. 
20:58 < tnorris> dominictarr: ok, writing a test case now.
20:59 < dominictarr> it looks like you are trying to tail lines from a file and then send them to child processes an a round robin pattern
20:59 < dominictarr> is that correct?
20:59 < dominictarr> is each message a line?
21:00 < dominictarr> is it json or anything, or just text?
21:00 < tnorris> dominictarr: yeah, that's it. i'm reading an nginx log file.
21:02 < matbee> Question... does App.use(func(req,res)) have any idea whether its triggeredby get/post/put/delete?4
21:03 < mscdex> matbee: you can look at req.method
21:06 < upstream> Anyone here using MongoSkin?
21:06 < upstream> https://github.com/kissjs/node-mongoskin
21:07 < upstream> I'm having trouble using the `group` method: https://github.com/kissjs/node-mongoskin#groupkeys-condition-initial-reduce-command-callback
21:12 < WarheadsSE> djazz: we'll be moving to full hf on the rpi soon anyways
21:13 < djazz> full hf? for node?
21:15 < WarheadsSE> arch will be moving to complete hardfloat
21:15 < WarheadsSE> its basically some annoying packages that are stuck atm.
21:15 < djazz> aha
21:15 < WarheadsSE> like fricking java.
21:15 < djazz> xd
21:17 < state> slightly off topic, but does anyone know of a mirror for the connect documentation?
21:17 < state> http://www.senchalabs.org/connect
21:17 < state> wont load
21:17 < yawnt> https://github.com/senchalabs/connect/tree/gh-pages
21:17 < yawnt> state: ^
21:17 < yawnt> which is basically
21:17 < yawnt> http://www.senchalabs.org/connect/
21:18 < state> thanks!
21:18 < yawnt> wops sorry
21:18 < yawnt> http://senchalabs.github.com/connect
21:18 < yawnt> there
21:18 < state> that 404s for me too
21:18 < state> i guess i can just dl the docs from github thought
21:18 < state> that works
21:22 < dominictarr> tnorris, you might need to enforce that the chunks that each child reads are still lines.
21:22 < mansoor-s> I am trying to build bcrypt on windows 7 64bit  i get this error:  http://pastie.org/4698184
21:22 < mansoor-s> any advice?
21:23 < dominictarr> I have a module for that though: https://github.com/dominictarr/event-stream#split-matcher
21:24 < tnorris> dominictarr: nice. first i'll need to figure out how to pipe to stdin on a spawned process.
21:24 < CIA-116> node: Ben Noordhuis openssl-asm * rc34087d / (deps/openssl/asm/Makefile deps/openssl/asm-gen.sh): openssl: regenerate asm code with a Makefile - http://git.io/NWd4FQ
21:24 < CIA-116> node: Ben Noordhuis openssl-asm * r9aff820 / (50 files in 42 dirs): openssl: regenerate asm code - http://git.io/ltFgrg
21:24 < dominictarr> tnorris, stream.pipe(cp.stdin)
21:24 < dominictarr> where cp = require('child_process').spawn(...)
21:26 < tnorris> dominictarr: in the following, isn't the second code block doing that too: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
21:26 < tnorris> it has `grep.stdin.write(data)`. i'd assume that is doing essentially the same thing.
21:27 < dominictarr> tnorris, pipe has some extra logic about error paths, and it disconnects the stream when it ends.
21:28 < dominictarr> also, I don't think it gaurentees that the chunks are lines.
21:28 < dominictarr> that could depend on any number of things in the os, and buffers that the data travels through.
21:36 < tnorris> dominictarr: point taken.
21:54 < jocafa> unit testing js when require.js is involved is painful
21:54 < ag4ve> how do i get json data as a js data object from the web? i can console.log(JSON.parser(req.body)) i've tried req.body.toString() which console.logs as an object, but if i try to access an element, it's all undefined ...?
21:55 < EyePulp> JSON.parse, not parser
22:09 < styol> For emailing capabilities, is Nodemailer recommended or should I consider some other options?
22:10 < ag4ve> just to be clear about what i'm doing: http://pastebin.me/9c7119338e0214b998a648072207355c
22:10 < ag4ve> i mistyped above, i am using JSON.parse and i'm not gettin anywhere
22:11 < spion> okay, yeoman was the last drop. seriously people, does one really need all those scaffolding tools? how many projects do you start anyway? I've created 3 in the past month. why is "init" the favorite command? No, I don't find it hard to initialize my directory structure. I do it once every 2 weeks. Thats a liberal estimate.
22:11 < spion> scaffolding is useless.
22:11 < spion> stop reimplementing it for the bagillionth time
22:12 < pyrotechnick> spion: so is arguing your point
22:12 < dominictarr> spion, you arn't writing enough modules! you should have a new module every few days at least!
22:12 < pyrotechnick> it is you that needs to change, not the world
22:13 < BennyLava> s/that/who/
22:13 < spion> maybe its not useless. maybe someone somewhere considering building yet another similar project will read what I typed and stop to think
22:13 < spion> (I know, I'm being an optimist about that)
22:13 < pyrotechnick> doubtful
22:13 < pyrotechnick> it will most likely encourage them
22:13 < pyrotechnick> i love it when i'm told i will fail
22:14 < pyrotechnick> it invigorates me
22:14 < spion> no, they wont fail
22:14 < spion> the "workflow tool" will work. thats for sure
22:14 < pyrotechnick> ag4ve: did you work it out?
22:15 < spion> for the 4 people that have exactly the same workflow as the tool supports.
22:15 < ag4ve> pyrotechnick: nope
22:15 < spion> for those 4 million that have slightly different workflows, no
22:15 < ag4ve> still either getting undefined or an exception
22:15 < pyrotechnick> you've got an object key as the JSON with a value of ''
22:15 < pyrotechnick> it's all wrong
22:16 < ag4ve> pyrotechnick: my paste is?
22:16 < pyrotechnick> see the output
22:16 < pyrotechnick> it's an object
22:16 < pyrotechnick> with a single key
22:16 < pyrotechnick> and the key is the JSON
22:16 < pyrotechnick> and the value is ''
22:16 < pyrotechnick> fix that
22:17 < spion> http://yeoman.io - look at what it does. it does 10 things. completely contrary to node's (actually unix in general) concept that one module/binary/tool should do one thing only and do it well
22:17 < ag4ve> i didn't follow that
22:18 < pyrotechnick> ag4ve: i think your request is wrong but there isn't enough to go off here…
22:19 < ag4ve> pyrotechnick: when i console.log(JSON.stringify(that.req.body)) i get the output i put in.
22:19 < spion> scaffold, autowatch coffeescript, lnit, compress images (but with specific tools), build process, package management, phantomjs unit testing. Those are 5 things it does, 3 of them the way I do them, 3 that aren't done that way. because it does so many things the chances it doesn't do some of the things "my way" are bigger than if it did one thing.
22:19 < ag4ve> but, i can't convert it to an object
22:19 < pyrotechnick> it's being escaped when logged
22:20 < spion> people should stop making kitchen sinks.
22:20  * spion shuts up.
22:20  * jocafa looks at his makefile that handles most of that
22:21 < ag4ve> pyrotechnick: so, by me being able to console.log the output, that means i'm getting the data and should be able to JSON.parse it, right?
22:22 < ag4ve> so, why isn't JSON.parse (or my object) doing what i expect?
22:22 < pyrotechnick> yes but you're being tricked by the console.log escaping 
22:22 < pyrotechnick> try like 
22:22 < pyrotechnick> json = JSON.stringify 
22:22 < pyrotechnick> object = JSON.parse json
22:22 < pyrotechnick> you know what i mean?
22:22 < pyrotechnick> avoid logging/pasting
22:23 < pyrotechnick> your request could still be wrong i don't know
22:23 < john3909> Is there a problem with v0.9.2 and debugging? When I use the following "node-inspector & node --debug-brk test.js" with the default Ubuntu 12.04 repo nodejs (v0.6.12), debugger works correctly, but when I use v0.9.2, program executes to completion. The same occurs in Webstorm. Breakpoints are ignored.
22:23 < ag4ve> you mean the http part or the node part?
22:24 < ag4ve> i'll get it out of the way, here's the request: curl http://127.0.0.1:3000/fr -i -X POST -d '{desc: "this is a test", summary: "test", addr: "110 something ave", page: "1", text_url: "www.google.com", pdf_url: "www.adobe.com/index.html", action: "lazy", symbol: "nra", web_ag: "something", agency: "pow", pub_date: "sometime between now and then"}'
22:24 < scttnlsn> what's the best way to return different types of errors with node?  error codes set on the error object?  use custom error objects and instanceof?
22:24 < pyrotechnick> that's invalid JSON
22:24 < pyrotechnick> keys must be quoted
22:24 < ag4ve> oops
22:25 < pyrotechnick> stupid spec
22:26 < ag4ve> one of these days, i'll remember that - i always get it wrong. i remember values need to be quoted but forget that all strings need quoting.
22:26 < spion> ag4ve: thats not really valid json
22:26 < spion> oh
22:26 < spion> yeah.
22:27 < spion> that.
22:27 < spion> you got it
22:27 < pyrotechnick> i got it
22:27 < spion> serves me right for ranting :)
22:27 < pyrotechnick> but really this is mr crockfords fault
22:27 < spion> its not that bad. less optional stuff = faster to parser
22:28 < spion> parse*
22:28 < spion> (also easier)
22:28 < pyrotechnick> if you care _that_ much about speed you're doing it wrong
22:28 < spion> Its also easier to get right.
22:29 < spion> the key is a string token, not a special may-be-string but unqoted-identifier too
22:29 < pyrotechnick> :s
22:30 < pyrotechnick> go use XML
22:30  * spion sees XML and runs away
22:31 < pyrotechnick> ag4ve: that fix it?
22:31 < ag4ve> meh, i corrected the json (i think) and i'm still dead: http://pastebin.me/9c7119338e0214b998a6480722074ba8
22:32 < pyrotechnick> nothing changed
22:32 < pyrotechnick> thats ok
22:32 < pyrotechnick> now can you dump just req.body for me
22:32 < ag4ve> i kept the console.log because i know it does between the two
22:32 < pyrotechnick> without the stringify
22:33 < aandy> hi, i've been searching through the Net api and node's c++ source code, but can't seem to find the initial connect() timeout. Is it set by the OS? If so, any way to change this (e.g. through ENV)?
22:33 < ag4ve> how would you like it dumped?
22:33 < pyrotechnick> fs.writeFileSync just to be sure
22:33 < pyrotechnick> that way it's not some console/escaping trick
22:34 < pyrotechnick> spion: WOW YEOMAN'S BAD
22:34 < pyrotechnick> it wraps bower...
22:34 < mbalho> aandy: http://nodejs.org/api/all.html#all_socket_settimeout_timeout_callback
22:36 < tnorris> dominictarr: think I might have it. getting throughput speeds of 450 MB/sec. between spawned children.
22:36 < tnorris> think I can get faster still, but looking better.
22:37 < aandy> mbalho: yes, but that's inactivity, not just for the initial connection. i suppose i could use timeout and then add keepalive, but that's not really the behavior i was looking for. my current OS gives up after 240 seconds, that's what i'm trying to identify. But thanks, mbalho 
22:37 < pyrotechnick> spion: #yeoman
22:37 < pyrotechnick> HAVE AT IT
22:38 < mbalho> aandy: oh gotcha, maybe isaacs knows
22:38 < ag4ve> pyrotechnick: when i: fs.writeFileSync("asdfgh.txt", that.req.body); i get: [object Object]%
22:38 < pyrotechnick> good
22:38 < pyrotechnick> now put the JSON.stringify in
22:38 < pyrotechnick> i wanted to check it was parsing the body
22:38 < pyrotechnick> you're using connect?
22:39 < ag4ve> write json.stringify(input) out?
22:39 < duko> good afternoon #node.js
22:39 < pyrotechnick> yep
22:39 < pyrotechnick> hey duko
22:39 < pyrotechnick> no JSON.stringify req.body
22:39 < pyrotechnick> sorry
22:39 < pyrotechnick> pm me
22:39 < dominictarr> tnorris, do you _need_ faster than .5 Gb/s?
22:40 < tnorris> dominictarr: no idea, but at this rate it's like why stop?
22:40 < ag4ve> pyrotechnick: looks like the same thing i'm getting on the console: {"{\"desc\": \"this is a test\", \"summary\": \"test\", \"addr\": \"110 something ave\", \"page\": \"1\", \"text_url\": \"www.google.com\", \"pdf_url\": \"www.adobe.com/index.html\", \"action\": \"lazy\", \"symbol\": \"nra\", \"web_ag\": \"something\", \"agency\": \"pow\", \"pub_date\": \"sometime between now and then\"}":""}% 
22:41 < dominictarr> at this rate of improvement?
22:41 < tnorris> maximum throughput doing nothing is ~800 MB/sec. and just want to see how close I can get to that.
22:41 < ag4ve> ... though, why am i getting an object inside an object? .... i'm betting input[0].desc has a chance...
22:43 < pyrotechnick> you getting my pms ag4ve?
22:43 < spion> pyrotechnick: I reconsidered. I will simply not use it / ignore it.
22:44 < pyrotechnick> oooooooooooooooooooooooooooooooooooooh yeoman is adobe….
22:44 < spion> i don't think that telling them "you're wrong and your concept of multi-tool is bad" will work.
22:44 < pyrotechnick> http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/authors/bio/a/andy-matthews-bio.jpg.adimg.mw.160.png
22:44 < tnorris> dominictarr: actually, pausing all other processes using IO, I can get about 1 GB/sec.
22:44 < pyrotechnick> yeoman's target audience
22:44 < spion> it might work here for people that aren't quite sure. but telling it to people who already made something, nope.
22:44 < tnorris> so at this rate it's just about pushing the limits.
22:45 < styol> I know this is an extremely abstract question, but any random ideas why JSON.parse might not properly parse a valid JSON string? It must have something to do with the double JSON encoding or the "mattk\u0019s iPhone" -- http://pastie.org/private/ovgtmnpgocua7yr75t0uq
22:45 < dominictarr> tnorris, how many child processes?
22:45 < tnorris> dominictarr: 4
22:46 < spion> styol: why so many escapes?
22:46 < pyrotechnick> styol: if you format that better you'll see why
22:46 < dominictarr> tnorris, I remember a tweet that felixge pulled 1gb across the atlantic in one second using 100 concurrent tcp connections.
22:46 < styol> spion: that is a good question that I should probably find out first
22:46 < dominictarr> or was it 10 seconds? I forget.
22:46 < styol> pyrotechnick: I've used jsonlint.com to validate / format it but will try it manually
22:47 < styol> right yeah i should figure out the double encode first, works on a variety of other strings but it is non-optimal none the less
22:48 < spion> styol: btw it complains at mattk↓s iPhone
22:49 < tnorris> dominictarr: interesting (off to search for said tweet)
22:49 < spion> that apostrophe seems not quite right.
22:50 < deltab> should be \u2019 not \u0019
22:50 < styol> spion: is that what that character was? ah, yes when you remove that out into it's own it doesn't validate.. strange thing is it does in another scenario.. baffling
22:51 < spion> I have no idea why that character is forbidden though
22:52 < spion> styol: the original JSON is valid. the JSON within apparently isn't
22:53 < deltab> strings can contain "any-Unicode-character-except-"-or-\-or-control-character"
22:53 < spion> so... \u0019 (end of medium) is a control character and therefore forbidden
22:54 < styol> spion: yeah it has to be that character.. i have a commented out parse before the process that stringifies it again and i commented it out because it hangs on parsing
22:54 < deltab> unencoded, yeah
22:54 < deltab> and from context it should be \u2019
22:54 < styol> hrm so I need to prevent certain characters from finding their way into the string?
22:54 < styol> i believe it was provided directly from a request made by an iPhone app
22:54 < deltab> something's corrupting the data upstream
22:55 < spion> but, if u0019 was actually needed, the original json should look like this, \\u0019
22:55  * upstream is sorry
22:55 < john3909> Definitely something wrong with V0.9.2 (8e0c830cd) debugging as breakpoints don't work. I reverted back to V0.8.9 (54a4c639e) and breakpoints are working.
22:57 < spion> lol @ upstream
22:59 < CIA-116> node: isaacs no-unwanted-destruction * r231a712 / lib/stream.js : stream.pipe: Don't call destroy() unless it's a function - http://git.io/TnV2iA
23:04 < styol> spion / deltab: the most confusing part is that the original string that is being double encoded does not contain a character in between mattk and s
23:04 < CIA-116> node: isaacs v0.8 * r41e1b17 / lib/stream.js : stream.pipe: Don't call destroy() unless it's a function - http://git.io/UyKVGA
23:04 < jocafa> hrm. maybe i should have `make test` dump out a file if all tests pass so i can prevent it from running when there have been no changes to anything
23:05 < styol> spion / deltab: http://pastie.org/pastes/4698660/text?key=nyjtj9si3h5nrykwoto7gg
23:06 < styol> i confirmed with the user actually as well and am not seeing a character there on device for the device name
23:14 < aandy> mbalho: The consequence of coding through an all nighter: use timeout, remove timeout on connect. Shouldn't take half an hour to figure out, haha
23:23 < bingomanatee> hi node guys
23:23 < pyrotechnick> O HAI DER DAVE
23:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
--- Log closed Tue Sep 11 00:00:57 2012
