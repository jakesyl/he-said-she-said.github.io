--- Log opened Thu May 02 00:00:26 2013
00:00 < davesque> anyone have an answer for my question?
00:02 < niggler> lol grunt
00:02 < davesque> ?
00:02 < Iheartjs> beg: http://nodejs.org/api/process.html#process_signal_events
00:02 < niggler> beg that's not a shutdown
00:03 < niggler> davesque is that possible without grunt
00:03 < mscdex> beg: process.on('SIGINT', function() { /* do something or not */ });
00:04 < davesque> i don't understand your comment
00:05 < davesque> i'm looking for a simple way to get a debugging console when running tests with grunt and jasmine, anyone know how to do this?
00:05 < niggler> you said you were using grunt-contrib-jasmine
00:05 < davesque> niggler: yes, that's correct
00:05 < davesque> niggler: of course i'm using grunt
00:05 < niggler> what do you mean by debugging console in this case?  are you hoping to run a test and have it drop into a repl?
00:06 < beg> mscdex, i don't want it to close. I already use that and it closes
00:06 < davesque> niggler: yeah, that's what i need
00:06 < niggler> mscdex is there an equivalent to SIG_IGN in nodejs
00:06 < mscdex> beg: what platform and node version?
00:07 < niggler> is the repl part of the test davesque ?  if so, you should just create a child proces
00:07 < beg> Arch - linux, v0.10.5
00:07 < niggler> lol arch (where's isaacbw)
00:08 < davesque> niggler: no, i'm just looking what a way to set a breakpoint and get a console at any point in my test code...for troubleshooting failing tests
00:08 < davesque> niggler: for a way to set...
00:08 < mscdex> niggler: SIGIGN is essentially the same as `process.on(signal, function(){});`
00:09 < mscdex> beg: it works for me on Linux
00:09 < mscdex> beg: with v0.10.5
00:09 < Iheartjs> beg: where is the signal coming from?
00:09 < beg> So you can press ctrl+c, and it will not close?
00:09 < mscdex> beg: correct
00:09 < niggler> davesque you need to run node debug <script>
00:09 < niggler> and then in script, put a debugger; statement
00:11 <@isaacbw> niggler: archlinux 4 lyfe
00:11 < beg> mscdex, okey. wierd
00:12 < niggler> beg: weird
00:12 < beg> niggler: wierd
00:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:13 < mscdex> beg: https://gist.github.com/mscdex/1679f48e3eeec54929d1
00:13 <@isaacbw> beg: weird
00:13 < niggler> wierd is a weird misspelling of weird, but is wierd a wierd misspelling of weird
00:13 <@isaacbw> wierd is wierder than weird
00:13 < mscdex> *weirder
00:13 < Iheartjs> beg: where is the signal coming from...you hitting ctrl+c?  are you sure you're getting a SIGINT and not say SIGTERM or something?
00:14 < niggler> mscdex but based on what isaacbw is saying, its possible for something to be weirder but not wierder
00:15 < niggler> be careful about sigkill
00:15 < mscdex> beg: if that example still doesn't work for you, try doing `stty -a` and post the output
00:16 < beg> I am getting sigint, the signal is comming from me pressing ctrl+c in the terminal.
00:16 < niggler> beg is it in a pipeline?
00:17 < beg> I do not understand that niggler. I added, process.stdin.resume(); and now it does not shutdown, and requires me to press down ctrl+d aswell
00:19 < beg> I'll just give up on this feature. Thanks anyways gys
00:21 <@isaacbw> beg: but your question was answered...
00:22 < beg> isaacbw, yes but I encountered more issues, my cluster kept getting the sigint and shutdown prematurely
00:36 < st_luke> isaacs: do you know who maintains this? http://logs.nodejs.org/channels
00:44 < urthen> someone point me where i'm missing something: installed nodeunit with 'npm install -g nodeunit', but the nodeunit executable is not found, even in a new terminal window. thoughts?
00:46 < urthen> running sudo make install in node_modules/nodeunit added the executable, though I thought this would be automagically done by npm...
00:48 < runvnc> hello
00:52 < niggler> holy crap ghost raised more than 75K pounds
00:52 < niggler> urthen ?
00:52 < urthen> yes?
00:53 < niggler>  /usr/local/bin/nodeunit -> /usr/local/lib/node_modules/nodeunit/bin/nodeunit
00:53 < niggler> i just tried $ sudo npm install -g nodeunit and it installs
00:53 < niggler> what OS/node version?
00:54 < urthen> OSX 10.7.5, Node 0.8.8
00:54 <@isaacbw> urthen: clearly your path isn't set up correctly
00:54 < niggler> urthen did you see a line like the one i posted?
00:54 < urthen> probably not, but it's working now, so not going to investigate that much more.
00:54 < urthen> niggler: yeah
00:54 < niggler> did you try manually running it?
00:55 < niggler> and can you echo $NODE_PATH?  
00:55 < runvnc> I'm trying to start a coffeescript program with child_process.exec with forever and for some reason it keeps saying cannot find modules like winston and express
00:55 < urthen> hrm, $NODE_PATH is empty... odd
00:55 < niggler> runvnc did you npm install?
00:55 < runvnc> but only when i do it with child_process.exec that happens
00:55 < niggler> urthen I set it in my .bash_profile
00:56 < runvnc> yeah its installed and works except not when I run the forever command from child_process.exec
00:56 < runvnc> when I do it that way it says it cant find the modules
00:56 < niggler> why are you running forever in a child process?
00:56 < niggler> its probably also an env issue
00:56 < runvnc> I have this agent program that runs on ec2 instance
00:56 < runvnc> s
00:56 < runvnc> to start install and services and stuff
00:57 < runvnc> wow
00:57 < runvnc> thanks niggler
00:57 < runvnc> yeah actually I forgot to pass my options with cwd to this command
00:58 < runvnc> Iol
00:59 < Jester831>  what do you guys recommend for authentication for compoundjs? I'd like to add on additional stored user metadata
01:01 < runvnc> wow its still doing it
01:14 < glacialheart> ##leveldb
01:43 <@mbalho> did github go down?
01:43 < abraxas> yes
01:44 < abraxas> https://status.github.com/messages
01:44 < ChrisPartridge> its gonnne
01:44 < abraxas> well, that's it for my working day :P
01:46 <@mbalho> kewl its back
01:46 <@mbalho> haha someone messed up
01:48 < zenodub> hiya
01:48 < zenodub> what's the best way to do SASS or something similar in node?
01:52 < ChrisPartridge> zenodub: npm search sass?
01:57 < zenodub> hmm seems less might be better b/c it's node
01:57 < zenodub> reading reading reading
01:59 < ChrisPartridge> zenodub: or you could try stylus - there are plenty of options
02:02 < leichtgewicht> stylus is next on my list. 
02:08 < zenodub> neat thanks!
02:18 < styol> runvnc: also, just to let you know, most of the same functionality is available when including forever in your module via var forever = require('forever'). Some of the methods are not documented, but just refer to console.log(forever);
02:24 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:25 <@isaacs> ircretary: tell st_luke The log bot is piscisaureus's minion.  But I can do stuff with it, too.
02:25 < ircretary> isaacs: I'll be sure to tell st_luke
02:27 < ningu> hey, so is taco conf this year going to be at all node or js-themed or purely tacos? :)
02:28 <@mbalho> pure tacos
02:28 <@mbalho> though there will be a flying drone
02:28 < ningu> oh?
02:28 < ningu> will node folks at least be attending?
02:29 <@mbalho> yea
02:29 < ningu> just wondering if it would be a reasonable way to meet people
02:29 < ChrisPartridge> flying drone delivering tacos?
02:29 <@mbalho> nodeconf is probably better but tacoconf will have at least 5 noders i would say
02:29 < ningu> yeah, I can't make nodeconf, too expensive
02:33 <@mbalho> you could try emailing mikeal and asking nicely since it isnt sold out
02:33 < ningu> that could work
02:45 <@isaacs> ningu: I'll be attending
03:30 < owen1> is it safe to write to a file from multiple processes? (fs.appendFile)
03:34 < Stephen> owen1: I would say no, but it really depends on what you're looking for the result to be, and your timing skillz
03:34 < Stephen> But, no. IO is blocking
03:35 < BuntyI> Please help I want to execute code on nodejss program in defined sequence but it is not happening http://pastie.org/7748964
03:35 < BuntyI> Please help I want to execute code on nodejss program in defined sequence but it is not happening http://pastie.org/7748964
03:38 < BuntyI> no one have idea :(
03:41 < ljharb> BuntyI: in node, most things are async, not sync. on line 22, the data hasn't arrived yet.
03:43 < BuntyI> ljharb  yes but I want to fetch data first how to acheive that
03:43 < BuntyI> ljharb:  yes but I want to fetch data first how to acheive that
03:43 < ljharb> please only say things once
03:43 < BuntyI> sorry I thought i have to place colon in front of name which i forget
03:44 < ljharb> BuntyI: the only place in your code where you have the data is lines 14-18. so the rest of your app has to go in there - usually, you'd call another function
03:45 < BuntyI> ljharb: i am using Soda for testing automation and inside that looping that cells data for asserting some stuff, so what is happenign is soda scripts are called just before the cellsdata arrived
03:46 < ljharb> i know nothing about that. all i know is that the data comes in asynchronously, after your entire file of code has finished executing.
03:50 < BuntyI> ljharb: thanks for the hint I am able to run the program by moving it inside that code but don't we have any other way or always we have to nest the sequence ?
03:52 < ljharb> when it's nested like that, that's what people call "callback hell"
03:53 < ljharb> But, callback hell is easily avoidable. Check out http://callbackhell.com , and look into Promises ( https://gist.github.com/domenic/3889970 )
03:55 < BuntyI> ljharb: thanks for guidance :)
03:59 < owen1> Stephen: fs.appendFile is not blocking afak. 
04:00 < Stephen> owen1: Really? Hmm
04:00 < Stephen> Good for log appending then
04:01 < owen1> Stephen: the question what will happends if 2 processes will try to append to a file at the same time
04:02 < Stephen> Well, either the filesystem would lock the file
04:02 < Stephen> or it would corrupt it
04:02 < Stephen> possibly corrupt it
04:02 < Stephen> I know 1 process can open a file without closing many, many times
04:03 < Stephen> There was a fairly famous optimization for node back in the day that dealt with it specifically
04:03 < owen1> interesting
04:03 < Stephen> Why do you want to open 1 file with 2 processes?
04:03 < owen1> Stephen: good question. let me think (:
04:04 < Stephen> Better to spawn a 3rd process to cache the writes
04:04 < ljharb> you can send events between processes right?
04:04 < owen1> i guess i am over engineering my problem
04:04 < Stephen> And just write streams between the processes
04:04 < chilts> I think the filesystem makes appending to a file atomic so that two processes don't stomp on each other
04:04 < Stephen> Yeah
04:04 < chilts> so yeah, doing a line-by-line append would be ok :)
04:04 < owen1> ljharb: with dnode?
04:04 < Stephen> One would hope
04:04 < Stephen> dnode?
04:04 < ljharb> i dunno
04:04 < Stephen> Nah, too much
04:05 < Stephen> Just plain ol' Streams2
04:05 < owen1> Stephen: sending information between 2 node processes
04:05 < Stephen> Actually, in this case Streams original may do you better
04:05 < owen1> backoff for a minute. why are we talking about events between 2 processes?
04:06 < Stephen> dunno
04:06 < ChrisPartridge> owen1: they are suggesting starting a 3rd process, which handles the write stream for the file
04:07 < Stephen> Yes
04:07 < Stephen> http://stackoverflow.com/questions/10213501/node-js-communicating-between-two-different-processes
04:07 < owen1> oh. so we're creating a client/server design?
04:07 < Stephen> You could
04:07 < Stephen> We need to know more about the file you are writing
04:07 < owen1> the clients uses tcp or somethnig like that to access the server?
04:07 < Stephen> They could
04:08 < Stephen> Or it could be 2 processes on the same server
04:08 < Stephen> which do you need?
04:08 < Stephen> Or both?
04:08 < owen1> let me think about it for a minute.
04:16 < owen1> i guess i don't really need 2 processes to access the same file. what i need is to learn more about RabbitMQ. i want only 1 node process to subscribe to a RabbitMQ queue at any given time.
04:18 < Stephen> Ok, then you'd just need to modify the broadcaster to only allow 1
04:18 < owen1> Stephen: i'll read about that. is this a RabbitMQ feature?
04:24 < Stephen> owen1: Doesn't look like it's implicitly there
04:24 < Stephen> However
04:24 < Stephen> One must know the name of the queue for the client to subscribe to the queue
04:25 < Stephen> So that could be used as a key to set them up individually
04:25 < Stephen> unless you are worried about brute-force subscriptions or somethin g
04:26 < owen1> sure. i know it's name. i just don't know if it's possible to tell a consumer not to consume unless the others are dead
04:26 < owen1> i guess i can use dnode to communicate between each node consumer?
04:27 < owen1> or redis?
04:28 < Stephen> Wait
04:28 < Stephen> here it is
04:28 < Stephen> http://www.rabbitmq.com/access-control.html
04:28 < Stephen> It's done by user access rights
04:28 < shayanjm> I've been trying to grasp Node by scouring a bunch of different tutorials and documentation, but one big gap I've noticed is that I haven't been able to properly determine a set of "best practices"
04:28 < owen1> Stephen: i don't want 2 subscribers to write append to the file, unless u think it's safe
04:28 < shayanjm> i.e: How to implement unit testing properly, nuances with full stack development in node, etc.
04:28 < Stephen> redis is a cache, so no
04:28 < Stephen> dnode could do it
04:28 < shayanjm> if anyone can point me in the right direction for something along those lines that would be great
04:29 < Stephen> shayanjm: Look up substack's work
04:29 < Stephen> shayanjm: And PhantomJS
04:29 < owen1> shayanjm: i use tape. it's substack's favorite test library
04:29 < Stephen> Yes it is
04:30 < owen1> Stephen: but i don't understand how to test more than one file
04:30 < substack> working on 0.10 fixes right now
04:30 < substack> very tricky
04:30 < owen1> unless i have to right a little runner
04:30 < substack> owen1: it ships with a bin
04:30 < substack> tap test/*.js works
04:30 < owen1> oh
04:30 < substack> s/tap/tape/
04:30 < substack> also you can just use tap's runner
04:30 < shayanjm> fantastic. One other question I had is kind of general. Essentially having to do with file organization (which I could probably figure out just by going through substack's repos)
04:30 < owen1> i didn't know tap has a runner
04:30 < substack> I usually use the tap runner
04:31 < shayanjm> best practices regarding more complex platforms & MVC architectures in Node. Is there a best practices sort of thing for code organization/file organization?
04:31 < substack> or use node to test individual files as I'm debugging
04:31 < substack> shayanjm: split things up into separate modules as much as possible
04:31 < substack> is the best practice
04:31 < Stephen> shayanjm: Try not to get too many levels deep
04:31 < substack> yep
04:31 < substack> and put the modules on npm if you can
04:32 < shayanjm> Perfect, thanks so much guys. It's weird flipping back and forth from Rails to Node. Rails feels way more rigid
04:32 < Stephen> shayanjm: Require does a recursive lookup for the file, and it could get ugly
04:32 < shayanjm> I'm a bit scared of publishing modules on npm. Code I'm writing is probably shitty as hell
04:32 < Stephen> Hah
04:32 < Stephen> Have you met substack?
04:32 < Stephen> ;-)
04:32 < Stephen> j/k
04:32 < owen1> shayanjm: i did the same journey. think of small things that work together when u'r in node
04:32 < substack> shayanjm: so the thing is you can't worry about that if you want to publish quality modules
04:32 < substack> quality is a product of quantity
04:32 < Stephen> But seriously, his Adidas sporting turtles scare me
04:32 < shayanjm> That's fair.
04:33 < substack> npm is where modules live
04:33 < shayanjm> One final question. It was brought up in an interview earlier that Node might not be quite "built out" as say - Rails is for handling large sets of data in a directory format for a web platform
04:33 < substack> crappy or no
04:33 < substack> I have so many crappy modules on npm you have no idea
04:33 < shayanjm> but probably better for concurrency type things i.e p2p platforms 
04:34 < shayanjm> What're your thoughts? I'd personally rather build the whole thing under one framework than have to waffle between two different stacks
04:34 < substack> shayanjm: the scope of node and rails are really different
04:34 < substack> node is just a runtime platform like event machine or twisted or poe
04:34 < deoxxa> poe always makes me think of the ghosts in the legend of zelda: ocarina of time
04:34 < owen1> Stephen: do u think that virtual host in rabbit is all i need and it replaces the need for doing that myself using dnode? just making sure i undersand you.
04:35 < shayanjm> Sure sure. I think I worded it really badly substack... Okay, say: my node stack would be something like MongoDB + CompoundJS + Express for simplicity's sake
04:36 < shayanjm> Rails would be Rails + MongoDB so the data structures are the same/similar. I basically want to take a bunch of information and be able to display it, while having a search functionality
04:37 < shayanjm> If we took this to scale at 10k+ entries (severe hypothetical. These are "professional" profiles so probably won't hit that number, but for argument's sake) - which would hold up better?
04:37 < substack> I don't think about things as "stacks"
04:37 < substack> IRONIC, NO?
04:37 < shayanjm> you're blowing my mind man.
04:37 < substack> I just make my little http.createServer()
04:37  * owen1 would like to see sample website that demo no frameworks approach
04:37 < substack> and then I think ok what do I need
04:37 < substack> and I add the things I need piece by piece from npm
04:37 < substack> owen1: http://github.com/substack/browserify-website
04:38 < owen1> substack: but there are not examples of how to build a site without express besides npm website!
04:38 < substack> https://github.com/substack/substack.net
04:38 < shayanjm> Sure, so this would be super basic. CompoundJS so that we're sort - of comparing apples to apples (MVC to MVC). 
04:38 < owen1> people don't know how to replace the routing, templating, and all the middlewares that are only available to express/connect
04:38 < substack> I don't even know why people think they need those.
04:38 < shayanjm> Essentially what I'm trying to get at is: would I run into a pagination issue in the future if I hit scale?
04:38 < owen1> middleware for auth, security, etc
04:39 < substack> you don't need middleware, you need a function that takes a req object and a callback
04:40 < substack> people think they need all these complicated things
04:40 < substack> but they just don't
04:41 < owen1> substack: your site doesn't use templates or router and u only have one route.
04:42 < substack> yep
04:42 < substack> well that's not true
04:42 < substack> all the blog stuff has routes
04:42 < substack> if you go to substack.net/blaharticletitle you get the article
04:42 < substack> it's all pushstate right now but I'll hack together a simple fetch thing
04:43 < substack> that won't be very big
04:43 < shayanjm> it's official. This channel is awesome. I'm lurking from now on.
04:43 < avo_> so I put readline in a function and I'm basically creating/closing it anytime I need user input, is that good or terrible?
04:43 < shayanjm> substack: your github repos are godsends. 
04:44 < shayanjm> Thanks again everyone for the help. substack & Stephen 
04:44 < ChrisPartridge> shayanjm: wait til you see his uber leet graphics
04:45 < avo_> as opposed to say leaving it open and pausing it or something?
04:45 < owen1> substack: thanks, i'll clone your project and play with it. the community needs examples for writing stuff website without middlewares
04:46 < substack> cool!
04:46 < substack> I still need to implement the server-side stuff
04:46 < substack> it's a pretty inefficient first-pass
04:46 < substack> just haven't bothered to make it efficient yet
04:47 < owen1> i'll write a blog post when i'll understand what's going on there
04:47 < substack> and the auth is all handled by glog
04:47 < substack> using stupid simple auth.json file
04:47 < owen1> substack: also, people don't understand what's wrong with connect/middleware. you guys have to do a better job of articulating it.
04:47 < owen1> is it continuation passing  style?
04:48 < substack> the biggest problem is it's not composable enough
04:48 < substack> buffering POSTs and patching in stuff like req.body into all requests for instance
04:48 < substack> really bad idea
04:49 < substack> so in express what you do is only use express.bodyParser() on the routes where you need to parse bodies
04:49 < substack> but at that point
04:49 < substack> why not just call a function instead?
04:49 < owen1> substack: the last 1 minute, was it regarding this codebase? https://github.com/substack/substack.net/blob/master/server.js
04:49 < owen1> or http://github.com/substack/browserify-website
04:50 < owen1> just making sure
04:50 < substack> the last 1 minute?
04:50 < substack> both those websites are glog blogs and have really similar arch
04:50 < owen1> awesome
04:50 < substack> there's more going on with the substack.net repo though
04:51 < ningu> substack: express.bodyParser *is* just a function, isn't it?
04:51 < substack> ningu: it is!
04:51 < substack> ALSO
04:51 < ningu> you could just put it at the beginning of your routes
04:51 < ningu> or add some syntactic sugar to do it automatically
04:51 < substack> ningu: but why is that even in express at that point?
04:52 < ningu> well, it's commonly needed functionality. I don't really care whether it's in its own module or not -- I suppose it may as well be -- but it would work the same from express either way.
04:52 < ningu> I think connect is quite composable if you do it right, but it's not always very convenient to do it right.
04:52 < substack> and you can just do this anyways: http://www.reddit.com/r/node/comments/1b4ro1/why_programming_in_node_isnt_like_anything_youve/c93ukfu
04:53 < substack> I don't want to have to buy into a whole ideology just to get a piece of code that will parse form data
04:54 < ningu> well, sure. that doesn't seem very controversial to me.
04:54 < substack> but that's what express is
04:54 < ningu> it isn't really an ideology, though. it's just an api, which happens to be different from what has become the normal node api.
04:54 < substack> a kitchen sink of handy yet separable functions
04:55 < ningu> substack: so do you object to the fact that they're packaged together, or do you object to the req, res, next api?
04:55 < substack> I want the freedom to organize the code however I please
04:55 < substack> ningu: both can introduce unnecessary coupling
04:55 < ningu> you can't make things composable unless there is some level of commonality
04:55 < substack> I'm bugged more by how they're packaged together
04:56 < ningu> eventemitters, streams, etc. also have an api, it's just lighter
04:56 < substack> (req,res) is already everywhere because that's what core gives you
04:56 < ningu> splitting off the different connect middlewares seems like a decent idea to me
04:57 < ningu> I wonder if you could make a low-level middleware and wrap it in the connect api, so you could use it either way
04:57 < ningu> but not sure what the lower level version would look like
04:57 < substack> npm is an embodiment of the dizziness of freedom that kierkegaard wrote about
04:58 < ningu> or its analogue, the paradox of consumer choice
04:59 < ningu> but not the fog of war, that's different
04:59 < substack> slightly different
04:59 < owen1> basicaly what i need at the moment is a clean example of sites that don't use express. hopefully https://github.com/substack/substack.net is the answer. 
05:00 < owen1> substack: we need a simiar guide that u did for streams, but for websites with no frameworks. just node + some modules
05:01 < owen1> with clear explanation of why connect/middleware are not the approach that node devs should go to
05:01 < substack> the problem is that the answer is fundamentally "it depends"
05:01 < substack> the dialectic is "it depends" vs "just use express"
05:01 < chapel> I think the gist of it is, there is no one way to do it
05:01 < chapel> :)
05:01 < chapel> if you don't use express, then you use what you need, as you need it, and not before
05:02 < ningu> owen1: I don't think it's an all or nothing thing. there are plenty of cases where express is just fine.
05:02 < chapel> and you can almost guarantee that a module exists to do what you want, if not, make it yourself
05:02 < ningu> you should think before you do anything
05:02 < ningu> and if you don't you bear the consequences :P
05:02 < substack> I think the biggest thing is just to get in the habit of understanding what you actually need, piece by piece
05:03 < substack> and then you go and hunt down a tiny thing that does exactly what you need
05:03 < substack> or you write it if it doesn't exist
05:03 < chapel> substack: yep
05:04 < substack> you need to install this algorithm into your brain
05:04 < ningu> for some small projects I could spend days finding different equivalent ways to do it and it's easier to just pick one because the consequences are so minor
05:04 < chapel> I do spend a lot of time thinking and considering different options
05:04 < substack> this is not a satisfying answer to many people at first glance
05:04 < ningu> if it's something I want to be sure is on a solid footing I will put more effort in
05:04 < substack> it's like why so many people are religious
05:04 < chapel> instead of just writing code, but then again, I usually know the module in and out and know if I want to use it or not
05:04 < substack> they just want the big lump of ideas with the good marketing
05:05 < ningu> or, I will separate out the components so I can do one sloppily at first but still be able to fix it later
05:05 < substack> they don't want to take the difficult journey to investigate each piece in isolation
05:05 < ningu> sometimes I need a prototype before I fully grasp what i need
05:05 < substack> but it's a much better long-term strategy I think
05:05 < chapel> ningu: I don't think substack recommends against prototypes or thinking through doing
05:05 < myndzi> < chapel> and you can almost guarantee that a module exists to do what you want, if not, make it yourself <- the problem i've come to have with that is, i can also almost guarantee that i'll run into some obscure bug in that module or it will turn out to make something i have to do very difficult
05:06 < myndzi> my brother gives me shit because i wind up just rolling my own a lot, but at least i know how it works
05:06 < substack> it's just methodological reductionism
05:06 < chapel> myndzi: depends on the use case, use smaller modules then
05:06 < myndzi> there are lots of modules, but there are also lots of not that complete modules
05:06 < chapel> if its so small, there isn't an api, and less area to break
05:06 < substack> which is the same philosophy that powers science
05:06 < ningu> in most cases I've been able to figure out what's going on with a module by reading the code
05:07 < ningu> which is only practical if the modules are small
05:07 < ningu> and then I submit a bug report or pull request or whatever
05:07 < myndzi> well yeah. i wind up diving into code i don't know anything about and submitting a change
05:07 < myndzi> but it becomes a waste of my time
05:07 < ningu> it's better if everyone together contributes to something
05:07 < myndzi> if i spend as long trying to make an existing piece of code work as it would for me to do my own
05:07 < ningu> ends up being more solid
05:07 < myndzi> i agree, and that's why i try to give back when i find and fix problems
05:08 < myndzi> it doesn't eliminate the fundamental irritant though
05:08 < myndzi> what's the latest one... custom scrollbar things
05:08 < ningu> well, I'm still convinced that it's much easier to deal with incomplete or buggy modules than to write my own in most cases
05:08 < myndzi> i hit this script called mCustomScrollbar which was kind of a beast of a jquery module but looked to do what i wanted right
05:08 < ningu> that is, if the module actually has the right feature set for what I want
05:08 < myndzi> but then i tried to modify it to let me position the scrollbar and some other things and uhhh yeah right
05:08 < myndzi> then i found antiscroll, which is very nice
05:08 < myndzi> but in the end, similar difficulties in different areas
05:09 < myndzi> final solution was like 50 LOC
05:09 < myndzi> because it wasn't a terribly difficult problem, just an annoying one
05:09 < myndzi> they're not very pretty LOC so it's not likely to see a release, but they provide what i needed
05:09 < myndzi> :\
05:09 < myndzi> i seem to run into that to often
05:10 < myndzi> i would think it's me doing stupid stuff
05:10 < myndzi> but on reflection the tasks i want don't seem all that stupid
05:10 < myndzi> like being able to manage cookies and headers easily in a headless browser thing a couple years ago while also having the set of features i needed to operate with
05:11 < myndzi> seems like it should be readily available but cookies are a hassle in all of em and forget trying to get a handle on the headers themselves
05:11 < ningu> it's better than trying to read dutch
05:11 < myndzi> i hear phantom has made some progress and am about to use casper on a project, but still all you can really do is save and load from a file
05:12 < myndzi> reading other people's code isn't much better than reading dutch most of the time for me :P
05:12 < ningu> breede gevlochten armband aan den pols om dezen te beschermen tegen den stoot, dien de pijl bij 't afschieten veroorzaakt
05:12 < myndzi> at least dutch i can go paste into google translate ;)
05:12 < myndzi> (actually i had a mirc script to do it at one point, hah)
05:12 < ningu> hehe
05:12 < ningu> yeah, google translate is pretty good at dutch
05:12 < ningu> it's a funny language
05:13 < myndzi> anyway, this isn't supposed to be a rant, just a caveat
05:13 < myndzi> i've really come to like node a lot, and when you have a nice module it's REALLY nice
05:13 < myndzi> i just can't quite get on board with the "there's probably a module you can use" mentality yet
05:14 < myndzi> since it's been for me "there's probably a module you think you can use but will have a problem with later"
05:15 < chapel> myndzi: well you seem to ignored the "if not, make it yourself"
05:15 < myndzi> no, more like emphasized
05:15 < chapel> just because modules exist, doesn't mean that you have to or should use them
05:15 < chapel> for reasons you listed
05:16 < myndzi> the point is more like, the quantity of modules is deceiving
05:16 < chapel> but to say they don't exist usually is false
05:16 < myndzi> it's not a very good argument for node in general
05:16 < myndzi> but tends to get used like it
05:16 < chapel> I think its a great argument
05:17 < myndzi> with a big caveat ;)
05:17 < chapel> the fact it is so easy to 1. use modules 2. switch up modules 3. publish modules is a huge boon
05:17 < chapel> myndzi: the caveat is the same for any 3rd party code
05:17 < myndzi> indeed
05:17 < myndzi> but there is more hrm... mature? 3rd party code in other languages
05:18 < chapel> myndzi: lol, does that mean they don't have the same issues you fight with?
05:18 < chapel> I haven't found a 3rd party codebase I didn't find an issue with
05:18 < myndzi> no, but it means that if i want to find a library to do something patently obvious that it's more likely i can trust it to not cause me problems
05:19 < chapel> myndzi: well if you follow what substack recommends, small modules won't bite you in the ass
05:19 < chapel> its when you try to use something that is large
05:20 < chapel> or does more than you really need
05:20 < myndzi> you don't have to convince me of anything, it isn't that kind of a conversation :P
05:20 < myndzi> i particularly avoid that sort of thing
05:20 < chapel> no worries, Im just talking :)
05:20 < myndzi> but then, larger projects are often .. larger, to to speak
05:20 < myndzi> more complex and more contributors
05:20 < myndzi> so it's the good with the bad
05:21 < mscdex> node.js rules!
05:21 < chapel> I think that "maturity" is premature optimization of sorts
05:22 < myndzi> lolwut
05:22 < myndzi> i think premature optimization is a premature declaration of sorts ;D
05:22 < chapel> if something solves your problems better, but isn't as mature, but you choose the more mature tool because it is more secure (in your mind)
05:23 < myndzi> programming is making choices
05:23 < chapel> thats essentially optimizing for a problem you don't have yet
05:23 < myndzi> the goal is not to have any problems in the first place
05:23 < Umren> chapel, and you will never have
05:23 < chapel> not talking node vs rails, or express vs no framework
05:23 < myndzi> not to write a site that's full of bugs and holes and fix them when you run into them
05:23 < chapel> just in general, the whole maturity thing just isn't a great thing to judge something on
05:23 < myndzi> "premature optimization" is a nice go-to line and a good reminder not to overdo it, but it's no excuse for writing shit code or making bad choices
05:24 < myndzi> by maturity, all i mean is that the code has been around longer
05:24 < chapel> myndzi: the secret to programming is that you will never fix all the bugs
05:24 < myndzi> it's had more time for people to find the problems and fix them
05:24 < myndzi> i'm not talking about frameworks or libraries, just code that's old and active
05:24 < chapel> of course, you shouldn't write shit code, and just write stuff that doesn't work
05:25 < chapel> but just because something isn't mature enough (by whatever metric you provide) doesn't mean it isn't good, or doesn't solve problems
05:25 < chapel> myndzi: old code has more cruft too
05:25 < chapel> and more technical debt
05:25 < myndzi> sure, but it all depends on your purpose
05:25 < chapel> and things you don't really understand why they are there
05:25 < chapel> but you can't remove them
05:25 < myndzi> choosing the "newer" code or whatever is no less "premature optimization" than going with the old and known
05:26 < myndzi> it's just a choice
05:26 < myndzi> one that you have to make if you want to <use something>
05:26 < myndzi> but by phrasing it that way you imply that one is better than the other by definition :P
05:27 < chapel> when you say something is more mature, you are priming that it is better as well
05:27 < myndzi> that's not what the word means to me, heh
05:27 < myndzi> so i guess you can call it a difference of interpretation
05:28 < chapel> we aren't truly objective beings, so we generally interpret things differently :P
05:28 < myndzi> language is the process of standardizing interpretation :)
05:29 < chapel> unfortunately, there are a lot of variations and subjective things about it
05:29 < myndzi> indeed
05:29 < myndzi> "eventual consistency"
05:29 < myndzi> :P
05:29 < myndzi> provided you have patient and rational participants
05:29 < myndzi> haha
05:29 < chapel> eternal inconsistency 
05:30 < chapel> I think having differing points of views is important, and a positive thing
05:30 < chapel> its only bad if both or one party cannot be influenced by the other
05:30 < chapel> sharing knowledge is important
05:30  * chapel likes to learn, even if it means what I thought I knew is wrong
05:35 < kingkarl85> Hi all, does anyone know how to actively "Refuse a connection" with nodejs? specifically over tls?
05:36 < deoxxa> kingkarl85: don't open a port
05:36 < kingkarl85> i have a server listening on the port - i want to be able say refuse per ip address
05:36 < deoxxa> configure your firewall
05:36 < kingkarl85> like if they connected too many times in a time frame
05:37 < deoxxa> iptables does that
05:37 < kingkarl85> i would like to do it without a firewall
05:37 < deoxxa> kingkarl85: well your application doesn't know about the connection until it's established
05:37 < deoxxa> kingkarl85: you could just .end() it straight away
05:37 < kingkarl85> what i am really wantint to do is make a socket proxy and if the destination refuses me i want to transparrently sent through the error
05:38 < kingkarl85> deoxxa: that is what i cam currently doing now
05:38 < kingkarl85> i have a bottle neck in my application on ssl
05:38 < deoxxa> well, iptables is really good at doing what you're talking about
05:38 < deoxxa> that's how i'd implement it
05:38 < kingkarl85> so i have a tls socket listening then opening a net.create() then piping the communication
05:39 < kingkarl85> deoxxa: can iptables have my certificate in it?
05:39 < deoxxa> doesn't need to
05:39 < deoxxa> it doesn't care about the content of the connection
05:40 < kingkarl85> i want to have multiple ssl servers proxying into my one server that handles all the communications
05:40 < kingkarl85> eg - one server for all communication then two ssl servers that are transparent proxy's
05:40 < deoxxa> sounds complicated
05:40 < deoxxa> complicated is bad
05:40 < kingkarl85> the code so far is simple
05:41 < kingkarl85> my bottle neck is in the ssl
05:41 < jamescarr> kingkarl85: just put your ssl certs in nginx or haproxy and be done with it
05:41 < jamescarr> problem solved, easy peasy
05:41 < deoxxa> might not be http
05:41 < deoxxa> anyway, iptables
05:41 < deoxxa> use iptables
05:41 < kingkarl85> it is http but i want to support websockets
05:41 < kingkarl85> so socket comms would be good
05:41 < deoxxa> firewalls are really good at rejecting connections based on things like frequency
05:42 < deoxxa> just sayin'
05:42 < kingkarl85> i want to also reject if the destination is offline
05:42 < kingkarl85> thanks deoxxa
05:42 < myndzi> you don't know the destination until you accept the connection from the source?
05:42 < kingkarl85> i will look at iptables for that kind of blocking
05:42 < myndzi> or is it a fixed destination?
05:42 < kingkarl85> fixed destination
05:42 < myndzi> is it under your control?
05:43 < kingkarl85> yep
05:43 < myndzi> why not just keep a socket open to it and send heartbeats
05:43 < myndzi> if you don't get the heartbeats/time out, close the listening socket
05:43 < kingkarl85> myndzi: that is a really good idea!
05:43 < qard> Umm…doesn't haproxy support websockets?
05:43 < deoxxa> as does nginx
05:43 < kingkarl85> i don't know
05:44 < myndzi> it was also suggested before he mentioned websockets
05:44 < qard> Is nginx support done now?
05:44 < qard> Haven't checked on it lately.
05:44 < deoxxa> yep
05:44 < deoxxa> landed in the latest stable
05:44 < qard> neat
05:44 < kingkarl85> oh sweet
05:44 < kingkarl85> that will save me a lot of work!
05:44 < deoxxa> http://nginx.org/en/docs/http/websocket.html
05:45 < jamescarr> qard: 1.3
05:45 < jamescarr> er 1.4
05:45 < kingkarl85> i already have a proof of concept running - was basic code to implement. but nginx will be fare more feature rich and do the load balancing for me to!
05:46 < kingkarl85> thanks all!
05:46 < qard> I knew nginx had the beginnings of support. Last I looked at it, it wasn't stable yet though.
05:46 < jamescarr> ya
05:46 < jamescarr> most people resort to using stunnel
05:53 < qard> Anyone have any clever ideas on how to maintain a net.Socket session such that when they lose connection and reconnect, stuff getting piped to the previous session will get piped to the new session?
05:53 < jamescarr> a queue
05:53 < jamescarr> with acknowledgements
05:54 < qard> I'm trying to pipe into and out of a net.Socket to other streams, but when the connection is lost, the old pipe stops receiving the data it's expecting.
05:59 < kingkarl85> qard: i guess you would need to implement some kind of session on the stream.
06:00 < kingkarl85> so first packet = "resume xxx" or something like that
06:02 < Havvy> http://www.irc-wiki.org/Policy_on_Trolling  (I thought Isaacs's policy on trolling would be nice to put onto the IRC Wiki. Oh, did you know there's an IRC Wiki?)
06:05 < qard> I like trolls. Their tears are delicious.
06:07 < qard> Maybe it'd be possible to automate the resume based on their IP, or whatever identifying info that might be available?
06:08 < qard> It'd kind of prefer to be able to somehow use the same socket object, if possible.
06:08 < kingkarl85> qard: ip would be unreliable as there may be a few running in the same plave
06:09 < kingkarl85> once the connection is gone you will loose the scope :(
06:11 < qard> Hmmm…I'll think more about it tomorrow. It's late and my head hurts from trying to wrap my mind around this challenge...
06:43 < arnorhs> has anybody built an IRC client (UI/terminal) in node? i know there are irc modules.. just wondering if there's something more substantial out there
06:44 < M2Ys4U> I've built a client with a web front-end if that counts...
06:44 < M2Ys4U> https://kiwiirc.com :)
06:46 < arnorhs> M2Ys4U: cool, will check it out
06:46 < arnorhs> M2Ys4U: are you using it now?
06:46 < niggler> arnorhs there may be one in node-ncurses
06:47 < arnorhs> niggler: ah, right
06:48 < niggler> arnorhs https://github.com/mscdex/node-ncurses/blob/master/examples/irc.client.js
06:48 < arnorhs> M2Ys4U: this link is not working for me https://kiwiirc.co/
06:48 < kingkarl85> it worked for me
06:49 < arnorhs> oh wait.. i missed the m when I copy/pasted
06:49 < kingkarl85> kiwiirc looks good!
06:49 < M2Ys4U> you're missing the m off the end
06:49 < M2Ys4U> lol :)
06:51 < arnorhs_> oh, looks like this works pretty well
06:54 <@MI6> joyent/node: Miroslav Bajtoš v0.10 * a32a243 : debugger: breakpoints in scripts not loaded yet - http://git.io/o4Kk-g
06:56 < arnorhs> I might just switch to this as my default irc client
06:56 < arnorhs> M2Ys4U: is there a way to jump tabs w/o the mouse?
06:56 < MoniqueL> GoodMorning!
06:57 < MoniqueL> at least.. for me it is...
06:57 < arnorhs> MoniqueL: morning
06:59 < MoniqueL> morning arnorhs ;)
07:04 < enzo> Hello
07:05 < enzo> I have a strange thing, I try to install globayy grunt, so I do: npm install -g grunt, it installs grunt v0.3.17, and https://npmjs.org/package/grunt indicates v0.4.1, where is my error ?
07:07 < M2Ys4U> arnorhs: not yet, we're looking at putting in keyboard shortcuts soon though
07:08 < arnorhs> M2Ys4U: cool, yeah, that would be nice
07:08 < arnorhs> multi-server support would be good for me as well.. since I hang out here, but also on irnet
07:09 < arnorhs> *ircnet
07:09 < M2Ys4U> all the back-end support for that is done
07:10 < M2Ys4U> we're just tweaking the front-end stuff now
07:10 < Guest62805> I an trying executing a script... I get following error 
07:10 < Guest62805> Assertion failed: (r == sizeof msg || (r == -1 && errno != EAGAIN && errno != EWOULDBLOCK)), function uv__signal_handler, file ../deps/uv/src/unix/signal.c, line 163.
07:12 < Guest62805> Assertion failed: (r == sizeof msg || (r == -1 && errno != EAGAIN && errno != EWOULDBLOCK)), function uv__signal_handler, file ../deps/uv/src/unix/signal.c, line 163....did anyone see this issue when running command on multiple sub folders?
07:12 < bnoordhuis> Guest62805: what version of node and what does your script look like?
07:12 < Guest62805> var exec = require('child_process').exec;   var fs = require('fs'); var commitStatsPerPackage = function (currentFile){      exec("cd " + currentFile + " && git log --pretty='%s' --since='100 day' . | wc -l", function (error, stdout, stderr)  {          console.log(currentFile + " " + stdout) ;          traverseFileSystem(currentFile);       }); };  var traverseFileSystem = function (currentPath) {     var files = fs.readdirSync(c
07:13 < Guest62805> This is how my sctip looks like
07:13 < bnoordhuis> Guest62805: first rule of irc, don't paste gobs of code, gist or pastebin-ify them
07:13 < Guest62805> and I am using 0.10.5
07:13 < enzo> oh, indeed I've nodejs 0.6 and grunt 0.4 uses nodejs >= 0.8, pity npm was silent on this
07:13 < Guest62805> ok sorry
07:14 < bnoordhuis> no problem, just a friendly reminder. in some channels, that would get you auto-banned
07:14 < bnoordhuis> Guest62805: can you open an issue at https://github.com/joyent/node/issues ?
07:14 < Guest62805> sure..thanks
07:15 < bnoordhuis> please include the output of uname -a
07:15 < Guest62805> ok
07:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
07:24 < DiegoMax> hello, noob here
07:24 < Oddman> hi noob
07:24 < DiegoMax> im trying to find documentation about something, and im failing
07:24 < Oddman> I don't know of any documentation about something
07:24 < greelgorke> try google?
07:24 < DiegoMax> there is this JSON class, and im using its parse() method
07:24 < DiegoMax> i did already greelgorke
07:24 < Oddman> perhaps you could be a bit more specific?
07:25 <@MI6> joyent/libuv: Ben Noordhuis master * ebdeaed : Merge remote-tracking branch 'origin/v0.10' (+9 more commits) - http://git.io/BBDeaw
07:25 < DiegoMax> where can i find a documentation place that tells me the possible return values, exceptions, etc ?
07:25 < DiegoMax> everything seems to point to that w3 page which is a joke
07:25 < prishabh> lol
07:25 < DiegoMax> all i want to know is how this class will react in the event of a parsing error, etc
07:25 < gildean> DiegoMax: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse
07:26 < DiegoMax> so that i can properly trap errors
07:26 < DiegoMax> ok, so thats the place
07:26 < DiegoMax> thanks gildean
07:26 < gildean> DiegoMax: it either returns an object or it totally fails
07:26 < prishabh> use try/catch
07:26 < DiegoMax> yah, but i was expecting to find a place that would tell me what type of exception it would throw, etc
07:27 < DiegoMax> "If the string to parse is not valid JSON, a SyntaxError exception is thrown."
07:27 < gildean> create a function to separate the try/catch from your main functions, something like: function validJson(data) { try { return JSON.parse(data); } catch (e) { return false; } }
07:27 < DiegoMax> exactly what i was looking for
07:28 < greelgorke> mdn link was the 3rd result on google...
07:28 < DiegoMax> well greelgorke, using what search query ?
07:28 < greelgorke> JSON.parse
07:28 < DiegoMax> well not for me, clearly from argentina the results are different
07:29 < DiegoMax> my 3rd result is this
07:29 < DiegoMax> http://msdn.microsoft.com/es-es/library/ie/cc836466(v=vs.94).aspx
07:29 < gildean> for me the mdn link is the second one
07:29 < gildean> google knows i like mdn
07:29 < DiegoMax> in any case, is it such a huge problem that i have asked this in here ?
07:30 < gildean> for me the first link is from json.org, the second is from mdn
07:30 < DiegoMax> for me mdn is not even on the first page
07:30 < greelgorke> DiegoMax, well you're just lucky someone answered ;)
07:31 < DiegoMax> ok
07:31 < DiegoMax> i will ask some more then
07:31 < DiegoMax> lets see if i keep being lucky :D
07:32 < DiegoMax> im writing a small tcp server, its really an API for mobile apps
07:32 < kevireillyy> DiegoMax: if you expect the string to always be either a string of json or an already converted object, you may want to return data in the catch
07:32 < DiegoMax> my question is more like: "whats the proper way to organize your classes/files"
07:33 < DiegoMax> im new to node, but not new to software development
07:33 < DiegoMax> so right now, i have my main app.js file
07:33 < gildean> DiegoMax: there are no classes in javascript, at least not before es6
07:33 < DiegoMax> ok
07:33 < gildean> also there is no one "proper" way to do it
07:33 < DiegoMax> i meant objects with properties
07:33 < arnorhs> DiegoMax: that was a fine question, maybe stated in a bit too many lines.. ignore the hate
07:34 < kevireillyy> utilizing module.exports and require(); is a neat too to have to separate groups of functionality into modules of sorts
07:34 < DiegoMax> here comes my question
07:34 < [AD]Turbo> hola
07:34 < DiegoMax> im writing all my protocol parsing routines inside protocol-parser.js
07:34 < DiegoMax> and im exporting all of its methods
07:35 < DiegoMax> but im not sure if keeping all the DB logics on the main file is a good apprach ?
07:35 < DiegoMax> usimg orm2 btw
07:35 < peterfile> +1 for modlue.exports & prototypes
07:35 < DiegoMax> **using
07:35 < gildean> DiegoMax: i'd separate those in a module of their own too
07:35 < DiegoMax> ok
07:35 < arnorhs> DiegoMax: probably not.. why not throw them in a different jsÞ
07:36 < DiegoMax> so a good approach would be to only have the basic network stuff on the main file ?
07:36 < DiegoMax> im just too used to frameworks telling where to put stuff :p
07:36 < DiegoMax> my bad
07:37 < gildean> DiegoMax: or even less than that, i'm assuming you're using express for your app?
07:37 < DiegoMax> no
07:37 < greelgorke> DiegoMax a good approach is to separate concerns. try to pack every bit of code which is doing one single thing in own module
07:37 < DiegoMax> im not planning to use express
07:37 < gildean> ok, just core net-module?
07:37 <@isaacbw> DiegoMax: you can put your files wherever you want
07:37 < DiegoMax> yes, just plain core net
07:37 < gildean> i forgot you said tcp and not http
07:37 <@isaacbw> pick a directory structure that maes you happy
07:37 <@isaacbw> *makes
07:37 < DiegoMax> the reason to move to node
07:38 < DiegoMax> is because both PHP and Rails failed really hard regarding resource usage
07:38 < DiegoMax> so i want to use the least possible overhead
07:38 <@isaacbw> well, node isn't analogous to rails, really
07:38 <@isaacbw> there are a few rails-style frameworks built on top of node
07:38 < DiegoMax> well in my case i plan to rewrite in node what i already wrote in PHP and rails
07:38 < DiegoMax> (just the API part)
07:38 < gildean> yeah, php and rails aren't really meant for making raw network servers
07:38 < DiegoMax> for the web part i will keep rails
07:39 < DiegoMax> but yah, node looks like the perfect tool for the job
07:39 < DiegoMax> and i did some ab testings with a simple login method, simulating 10000 requests.... and omg
07:40 < DiegoMax> 100 requests on my current platform take more resources
07:40 < arnorhs> DiegoMax: sounds like you have a match made in heaven
07:40 <@isaacbw> rails does a lot more than node.js
07:40 < DiegoMax> i know isaacbw
07:40 < DiegoMax> i know very well that i used the wrong tool for the job
07:40 < DiegoMax> im fixing the problem though
07:40 < DiegoMax> which is why im here :p
07:41 < DiegoMax> but instead of rewriting what i already have (REST API) in node
07:41 < bnoordhuis> isaacbw: burn a lot more cpu cycles, mostly
07:41 < gildean> but even using plain ruby for the server would be a lot more problematic and would use much more resources
07:41 < DiegoMax> i decided to go a little bit lower and just do plain sockets and a custom protocol
07:42 < greelgorke> DiegoMax why not http? 
07:42 < DiegoMax> well i honestly see no reason to use HTTP
07:42 < DiegoMax> all the consumers of this api are mobile apps
07:42 < greelgorke> mobile apps are good at http aswell :D
07:43 < DiegoMax> yah, but why not a good old socket ?
07:43 < peterfile> are you going to write your own custom frontend clients to ingest your custom protocol?
07:43 < DiegoMax> peterfile, yes
07:43 < DiegoMax> we have control of the clients and the api
07:43 < peterfile> sounds like a lot of work, imo... why not use something like socket.io?
07:43 < DiegoMax> we are a company in south america dealing with taxi bookings via mobile apps
07:44 < DiegoMax> its just a completely private api
07:44 < DiegoMax> for our own apps
07:44 < gildean> DiegoMax: have you looked at websockets? they already handle a lot of the boilerplate for you and are very performant
07:44 < DiegoMax> well websockets are meant for the web ?
07:44 < gildean> DiegoMax: not necessarily
07:44 < DiegoMax> in both android and iOS i can really easily open a socket
07:44 < DiegoMax> and send and receive data
07:44 < DiegoMax> that looks simpler to me
07:45 < gildean> that is true too, i just have a feeling that both android and ios also support websockets natively
07:45 < peterfile> i used websockets to connect ios clients with a node server - easy and very efficient
07:45 < DiegoMax> hmm
07:45 < greelgorke> there is nothing wrong with plain tcp. rest is kinda common for an service api. it might be needless effort to implement and maturize own protocol for a service, that's all
07:45 < DiegoMax> well
07:45 < DiegoMax> this is my situation
07:46 < DiegoMax> we have around 4000 taxi drivers at any given time
07:46 < DiegoMax> running an app inside the car
07:46 < DiegoMax> every 30 seconds or so, they hammer the api to update their location
07:46 < DiegoMax> you can imagine that nginx is having a hard time to keep it up, even with loads of hardware, ram and resources
07:46 < DiegoMax> its a lot of hammering
07:46 < DiegoMax> at the current rate, i know i will have a problem whenever (if) i reach 10k drivers
07:47 < DiegoMax> so my idea is to keep an open socket driver <> server
07:47 < DiegoMax> and the driver app should instead just write some bytes to the sockets
07:47 < DiegoMax> whenver it moves
07:47 < greelgorke> yoou may be get a problem
07:47 < DiegoMax> which one ?
07:47 < greelgorke> yre you using cellphone network for comunication?
07:48 < DiegoMax> yes, i know what you mean
07:48 < greelgorke> are*
07:48 < kevireillyy> retaining a socket is actually pretty hard to scale
07:48 < DiegoMax> well our advantage is that we only do the driver app for android
07:48 < greelgorke> every time a taxi moves to anoother cell connection is lost and you need a new socket
07:48 < rendar> whats mean "retaning" for a socket?
07:48 < DiegoMax> and in android we managed to be able to do it
07:49 < DiegoMax> and are you sure that moving to a different cell tower will kill the socket ?
07:49 < deoxxa> greelgorke: false
07:49 < kevireillyy> rendar: i just meant like having 10k active connections
07:49 < greelgorke> DiegoMax it depends
07:49 < rendar> kevireillyy: i see
07:49 < DiegoMax> and if it timesout, whats the problem with reconnecting ?
07:49 < deoxxa> greelgorke: i work with mobile networks - it's unlikely your pdp context will drop on moving to another cell on the same network
07:49 < DiegoMax> my point is, anything will be better than the current hammering scheme
07:50 < DiegoMax> and will node have a problem to keep a pool of 10k sockets ?
07:51 < kevireillyy> from what i've read at least, that is where things start to get dicey, especially when it comes to broadcasting to all of them
07:51 < DiegoMax> hmmmm
07:51 < greelgorke> deoxxa it might be ok. but you will have connectivity problems, 
07:51 < DiegoMax> greelgorke, just for the records
07:51 < DiegoMax> mobile networks suck
07:51 < DiegoMax> we already do have problems with HTTP
07:51 < DiegoMax> so im expecting network issues everywhere
07:51 < DiegoMax> thats kind of something we take for granted
07:52 < DiegoMax> and if u think they suck in the US, come to south america, you wont believe it
07:53 < greelgorke> DiegoMax i belive it. i don't know how they are in US i'm from Europe :)
07:53 < DiegoMax> oh ok
07:53 < DiegoMax> :p
07:54 < kevireillyy> DiegoMax: regardless of the design choice you make, you may want to consider detaching yourself from the notion of a single server handling everything and build it so that you can horizontally scale
07:54 < DiegoMax> yes
07:54 < DiegoMax> thats another thing i need to fix
07:54 < DiegoMax> you are completely right about that
07:54 < greelgorke> mobile network is unreliable, so i'm not sure it makes sence to retain a connection. but i agree that using plain tcp may reduce payload and with that package loss may be less effect on latency
07:54 < peterfile> so how do you maintain state across multiple servers?
07:54 < DiegoMax> well
07:55 < peterfile> this is one advantage of HTTP, is that it is generally stateless
07:55 < DiegoMax> greelgorke, but take for example
07:55 < kevireillyy> peterfile: persistent data storage
07:55 < DiegoMax> push notifications
07:55 < DiegoMax> thats just an open socket 24/7, and it seems to work very well
07:56 < DiegoMax> peterfile, our api implements token based authentication, so recovering the state is trivial
07:56 < DiegoMax> no matter the server
07:57 < DiegoMax> and another thing that im worried about
07:57 < DiegoMax> right now, an average taxi driver uses 200MB of data a month to use our service
07:57 < greelgorke> i guess you'll have to prototype the setting :)
07:57 < DiegoMax> i made some raw numbers, and i think that by using a custom protocol and sockets, i can easy go to 25 MB
07:58 < kevireillyy> DiegoMax: that seems like a lot but maybe not.. what sort of data are they looking for or receiving?
07:58 < DiegoMax> well. the most "expensive" one
07:58 < DiegoMax> is the "cars near me" method
07:58 < DiegoMax> its a big array showing all the cars surrounding you
07:58 < greelgorke> yes. if message size is an issue than a raw-byte protocol best one
07:58 < DiegoMax> json encoded, msgpack packed
07:58 < DiegoMax> even then, there are better ways to transport that
07:59 < kevireillyy> DiegoMax: shortened keys? perhaps even storing a majority of the referenced cars locally to device storage so that requests can simply reference an ID or something
07:59 < DiegoMax> hm
07:59 < kevireillyy> or an id and location i guess would be more accurate, but what does a single car payload look like?
08:00 < DiegoMax> let me show you
08:01 < DiegoMax> http://pastie.org/private/d9gxjz9maiquyzv9zkjzma
08:01 < DiegoMax> thats the unencoded payload
08:01 < kevireillyy> DiegoMax: yeah, at minimum make all the keys less verbose, that will save some
08:01 < DiegoMax> i use msgpack right now for the network transport, which is very efficient
08:01 < DiegoMax> msgpack does that kevireillyy
08:01 < kevireillyy> ahh ok.. im not familiar with that one actually, heard of it but not used
08:02 < kevireillyy> you might also be interested in bson
08:02  * DiegoMax googles
08:03 < DiegoMax> hmm binary json
08:03 < kevireillyy> actually, im tripping.. the one i was remembering is msgpack ;) just haven't used it yet
08:03 < DiegoMax> :D
08:03 < DiegoMax> msgpack is great
08:03 < kevireillyy> are you sure it truncate's keys? wouldn't you have to account for that on the client also
08:04 < DiegoMax> yeah, we do
08:04 < DiegoMax> if the Accept header is application/msgpack
08:04 < DiegoMax> then the client knows what to do, and the server sets all keys as numbers
08:04 < Omid> my linux is old ( like a bilion years ) and my glibc and python are old, how can I install multiple glibc and install node with the new one?!
08:04 < DiegoMax> we have a set of hardcoded constants and thats it
08:04 < kevireillyy> DiegoMax: sexy
08:05 < DiegoMax> also
08:05 < DiegoMax> i saw some weeks ago that UBER which is a company in the US that does the same we do, but at a way bigger scale
08:05 < DiegoMax> moved their API to node
08:05 < GreenDog> wow, a billion year old linux distro
08:05 < DiegoMax> im sure they faced our same problems
08:07 < DiegoMax> another question
08:07 < kevireillyy> DiegoMax: but so, that is cool as shit first of all, second of all yeah it seems like you could save a lot of data by caching this driver information and referring to it differently
08:07 < DiegoMax> i heard that proxying the node app via nginx is not a good idea if you deal with sockets ?
08:07 < DiegoMax> is that true ?
08:07 < kevireillyy> DiegoMax: because in a single work shift the same person must get the same data hundreds of times
08:07 < ningu> DiegoMax: yeah, nginx doesn't support proxying websockets yet
08:08 < ningu> you can still use XHR long polling and such
08:08 < DiegoMax> kevireillyy, yes
08:08 < ningu> the dev version of nginx supports it afaik
08:08 < DiegoMax> kevireillyy there is a lot of place for improvement
08:08 < DiegoMax> and we are hiring
08:08 < DiegoMax> wanna come to south america ?
08:08 < ningu> you can use bouncy instead, or haproxy (I think)
08:08 < kevireillyy> DiegoMax: hah, yeah, sure
08:08 < ningu> where in south america?
08:08 < DiegoMax> argentina
08:08 < DiegoMax> we operate in 6 countries, but our development branch is in buenos aires
08:08 < ningu> that reminds me, someone asked me yesterday if there were raccoons in south america -- I had no idea
08:09 < ningu> they have them in mexico
08:10 < DiegoMax> kevireilly we have some clientside optiization though
08:10 < DiegoMax> as in, the client app will never ask for new cars unless it moved more than 300 meters
08:10 < DiegoMax> and such stuff
08:10 < DiegoMax> but for example, right now, 5 AM
08:10 < kevireilly> DiegoMax: ah that is cool indeed
08:10 < DiegoMax> its really the most quiet time
08:10 < DiegoMax> and i have 350 connections to nginx at any given time
08:11 < DiegoMax> in rush hour that number goes easily to 6000
08:11 < kevireilly> and those are periodic checkins yeah
08:11 < DiegoMax> hammering, literally
08:11 < DiegoMax> which is the most expensive thing for a webserver
08:11 < kevireilly> triggered both automatically and manually?
08:11 < DiegoMax> as im sure you know
08:11 < DiegoMax> yes, both
08:11 < ningu> DiegoMax: not sure what you are doing, exactly, but a lot of people recommend avoiding nginx and just using node directly if you want to scale
08:12 < DiegoMax> well yes thats an option
08:12 < GreenDog> i found transfering large files in node difficult
08:12 < DiegoMax> but my idea, in order to test the waters
08:12 < kevireilly> GreenDog: using streams?
08:12 < DiegoMax> was to start by rewriting just the /status API method in node
08:12 < DiegoMax> then i could just proxy any request to /status in nginx to node
08:12 < DiegoMax> and see how it worked
08:12 < GreenDog> just standard express sendfile
08:12 < DiegoMax> and if something went wrong i could just remove the proxy :p
08:13 < peterfile> you mean, remove the proxy and use full-blown node? :P
08:13 < DiegoMax> haha
08:13 < DiegoMax> thats the goal, indeed
08:13 < DiegoMax> i have the feeling that i will like this
08:13 < DiegoMax> honestly, from all the options i considered
08:14 < DiegoMax> node and golang seem to be the only ones viable for this job
08:14 < DiegoMax> or well
08:14 < DiegoMax> writing a plain C service
08:14 < DiegoMax> but im not that masochist
08:14 < deoxxa> the C one would likely be slower
08:14 < DiegoMax> u think ?
08:15 < kevireilly> at minimum slower to write ;)
08:15 < DiegoMax> yah
08:15 < peterfile> haha
08:15 < deoxxa> well, unless you spend a ton of time working out all the edge cases etc
08:15 < DiegoMax> man
08:15 < DiegoMax> you will call me crazy
08:15 < DiegoMax> but i seriously considered at one time
08:15 < DiegoMax> to put a mac os server and write the whole thing in Objective C
08:15 < deoxxa> i can understand where you're coming from with that
08:15 < DiegoMax> i could resolve this with the Cocoa APi in seconds
08:15 < DiegoMax> no joke
08:16 < deoxxa> obj-c is kind of cool for event-based stuff
08:16 < DiegoMax> exactly!
08:16 < deoxxa> but node >>>>>>>>>>>>> obj-c
08:16 < deoxxa> haha
08:16 < peterfile> what about performance?
08:16 < DiegoMax> yah but /me is an old mac developer
08:16 < rendar> well also with C++ would be cool, with the correct library/framework :)
08:17 < peterfile> and speaking of options, i've been reading some buzz about vert.x
08:17 < peterfile> is it any good?
08:17 < peterfile> worth looking into? or stay with node
08:18 < peterfile> seems like unless you're tied to a java shop, there isn't much good reason to not use node
08:18 < DiegoMax> 2 years ago when i started writing this api, i remember i wanted to do it in node, but back then it was in the very early stages
08:18 < DiegoMax> i regret now i didnt do that
08:18 < greelgorke_worki> vert.x is based on jvm, which is own kind of beast. i'm not sure about the ecosystem of vert.x. 
08:19 < greelgorke_worki> GreenDog what kind of problem have you?
08:20 < GreenDog> hmm?
08:20 < DiegoMax> large files... ?
08:20 < GreenDog> òh
08:20 < DiegoMax> :D
08:20 < GreenDog> seemed to block
08:21 < kevireilly> yeah check out a raw http server and streams, its non-blocking
08:21 < GreenDog> ok
08:21 < ningu> GreenDog: you can use the express response object as a stream
08:21 < ningu> foo.pipe(res);
08:22 < DiegoMax> question, somebody said at 10k sockets things start to get dicey.... why is that ?
08:22 < greelgorke_worki> sendfile seems to stream
08:22 < DiegoMax> where is the bottleneck ?
08:22 < GreenDog> hmm
08:22 < GreenDog> in sendfile
08:23 < peterfile> 10k connections? what about http://blog.caustik.com/2012/04/10/node-js-w250k-concurrent-connections/
08:24 < DiegoMax> interesting
08:24 < DiegoMax> thats more than i will ever have
08:24 < greelgorke_worki> GreenDog seems to block? how does it look like? does it not respond to other connections?
08:24 < GreenDog> correct
08:24 < GreenDog> i didn't play with it much
08:24 < peterfile> seems like node will handle many connections - i guess it depends on what exactly goes on in your application logic that determines your limit
08:24 < greelgorke_worki> i guess you'll need to post your code :)
08:25 < kevireilly> i think the 10k thing i was referring to was related to socket.io -- lemme see if i can find it
08:25 < DiegoMax> in my case, the most expensive thing if i move to node is going to happen on the geospatial DB
08:25 < peterfile> ah
08:25 < DiegoMax> (postgresql + postgis)
08:25 < GreenDog> next time i try it i'll posgt code :)
08:25 < kevireilly> what are you usinh for geospatial?
08:26 < DiegoMax> postgis
08:27 < kevireilly> DiegoMax: is it for location based search?
08:27 < DiegoMax> yes
08:27 < DiegoMax> you can query the db like
08:27 < DiegoMax> "give me all the cars inside this circle"
08:27 < kevireilly> DiegoMax: i've not used postgis, but something else to potentially check out is apache solr
08:28 < ningu> hmm, solr for geospatial?
08:28 < ningu> solr is quite nice in general, though
08:28 < ningu> there's also elastic search
08:28 < kevireilly> yeah its had it for a awhile, cant remember which version included it natively
08:28 < DiegoMax> yah i dont think solr is for geo
08:29 < Codeir> why is #javascript such a terrible place?
08:29 < kevireilly> ive been using it for location based search for about 2 years now
08:29 < kevireilly> i want to say it became native in version 2.3 but i cant recall
08:29 < DiegoMax> hm
08:29 < DiegoMax> well its not on the features list though
08:29 < ningu> Codeir: dunno never been there, what's terrible about it?
08:29 < ningu> in case anyone cares, there are no raccoons in argentina :P
08:30 < DiegoMax> lol no
08:30 < Codeir> mostly ill informed, angry people jumping down your throat ;)
08:30 < ningu> DiegoMax: so I wouldn't want to move there.. obviously ;)
08:30 < DiegoMax> anything on the argentinian forest will kill you though
08:30 < ningu> hehe
08:30 < ningu> does it kill the cows too?
08:30 < DiegoMax> yah
08:31 < gildean> GreenDog: with express the static middleware also uses streams, while iirc the .sendFile just buffers the file and sends that
08:31 < DiegoMax> ohhh, another question
08:31 < DiegoMax> can you explain me what exactly is the definition of "middleware" ?
08:31 < ningu> Codeir: I dunno, I think of your random js programmer as sort of like your random php programmer
08:31 < gildean> i might be mistaken about the sendfile, but i'm pretty sure the static middleware uses streams
08:31 < ningu> DiegoMax: it's just a function that runs in the middle of a chain
08:31 < DiegoMax> okay
08:31 < Codeir> ningu: thats saying a lot ;)
08:32 < DiegoMax> and i guess the magic and the reason why it deserved its own term is because more often than not you dont even know its there ?
08:32 < kevireilly> DiegoMax: i have the link but their site is down for maintenance which they cant spell apparently http://wiki.apache.org/solr/SpatialSearch
08:32 < DiegoMax> maintance lol
08:32 < ningu> DiegoMax: well, you can often forget about it, whether you know it's there or not
08:33 < kevireilly> DiegoMax: http://webcache.googleusercontent.com/search?q=cache:ebYE5WwIxfkJ:wiki.apache.org/solr/SpatialSearch+&cd=1&hl=en&ct=clnk&gl=us
08:33 < greelgorke_worki> gildean https://github.com/visionmedia/express/blob/master/lib/response.js#L339
08:33 < greelgorke_worki> endfile is using same module as static
08:33 < ningu> and the idea is to have discrete pieces of middleware that you can enable or disable as you like
08:33 < greelgorke_worki> sendfile*
08:33 < DiegoMax> i see kevireilly
08:33 < ningu> it's just a simple rationalization of the control flow for handling an http request
08:34 < DiegoMax> kevireilly, i think its ok for basic stuff, but postgis looks way more advanced
08:34 < greelgorke_worki> this one namely https://npmjs.org/package/send
08:34 < DiegoMax> take a look at this for example
08:34 < DiegoMax> http://postgis.refractions.net/documentation/manual-svn/ST_DWithin.html
08:34 < DiegoMax> it even takes into consideration the earth's sphericity
08:34 < DiegoMax> which is important, or you will get an error factor of around 1KM in the best case scenario
08:34 < greelgorke_worki> but it uses pre 0.10. streams, that might be a problem, but i don't know for sure :D
08:35 < kevireilly> DiegoMax: pretty nutty... common sql it looks like even
08:35 < DiegoMax> and it is FAST
08:35 < DiegoMax> i dont know bout the apache one
08:35 < DiegoMax> but postgis can rival even oracle's gis extensions
08:35 < DiegoMax> which is a lot to say
08:36 < ningu> based on its name, I would think solr would be better at calculating orbits
08:36 < kevireilly> ill have to check it out.. its been awhile since ive evaluated option
08:36 < kevireilly> *options
08:36 < kevireilly> ningu: lulz
08:36 < DiegoMax> i really moved from mysql because of postgis
08:36 < DiegoMax> and im happy i did though
08:37 < DiegoMax> i was all my life really lazy to test postgresql
08:37 < ningu> I never found a good reason to use mysql
08:37 < kevireilly> you can do location based search in mysql also but it is slow as balls dragging through molases
08:37 < DiegoMax> there are not
08:37 < peterfile> lol
08:37 < DiegoMax> kevireilly, you can, yes, but its a really basic implementation
08:37 < peterfile> but guise, php + mysql is the best ever! :P
08:37 < DiegoMax> they dont have a geography type for example
08:38 < kevireilly> DiegoMax: definitely not native to mysql, just crazy query based is what i've seen
08:38 < kevireilly> where you're like... yeah 15 lines of sql.. this should be performant
08:38 < DiegoMax> oh btw
08:38 < DiegoMax> i have another question :D
08:38 < DiegoMax> i have been reading a lot about the best deployment options for node
08:39 < DiegoMax> but there are really a lot of different ways it seems, and everybody says theirs is the best one
08:39 < DiegoMax> im thinking that at least on my case (ubuntu server)
08:39 < DiegoMax> using upstart + monit would be the best approach ?
08:39 < Codeir> you refering to OS/stack/watcher/what?
08:39 < DiegoMax> no, im referring to whats the best way to keep the process running
08:39 < DiegoMax> and monitor it
08:39 < ningu> upstart is reasonable, but why use monit instead of a node-based one?
08:39 < peterfile> forever?
08:40 < DiegoMax> i dont know
08:40 < ningu> I guess it doesn't matter
08:40 < DiegoMax> you are the node guys
08:40 < Codeir> forever works well
08:40 < DiegoMax> im the noob
08:40 < DiegoMax> you tell me! :D
08:40 < arnorhs_> forever is really good
08:40 < Codeir> I think we're telling you to use forever
08:40 < DiegoMax> ok
08:40 < arnorhs_> lets you list the processes, kill individual ones etc
08:40 < kevireilly> forever is pretty tasty, but i have seen the same upstart + monit recommendations for ubuntu.. a lot.. when i was looking it was like there was no other option
08:41 < dresende> there's also mon and mongroup
08:41 < arnorhs> wtf is that nickname.. sorry about that, two skype clients
08:41 < Codeir> so I learned about monads today. I never knew I've been using them this whole time.
08:41 < arnorhs> nm
08:41 < DiegoMax> i saw yesterday this introductory video by node's author
08:41 < greelgorke_worki> we're using upstart and up, 
08:42 < DiegoMax> which took place at a PHP event
08:42 < jesusabdullah> nice
08:42 < DiegoMax> i was wondering if i am the only one who thinks he should have choosen a different event to have that presentation ?
08:42 < kevireilly> greelgorke_worki: how do you like up? i had that as part of a stack for a lil bit
08:43 < Codeir> cool/not cool, https://github.com/joshgalvin/moctx ? Going to abstract a level up next for building UI textures for webgl next
08:43 < DiegoMax> as in, the guy was demonstrating some pretty awesome technology, and the attenders were all crazy about the demo chat server
08:43 < kevireilly> greelgorke_worki: it doesn't support ssl though so i gave in pretty quickly to forever haha.. plus im not sure about the http-proxy approach versus, well, a real proxy
08:44 < greelgorke_worki> kevireilly so far so good. we used forever+fleet before, but had many issues with fleet. we needed a way to easy deploy on different machines, so up helped me there
08:44 < DiegoMax> anyway guys, thanks a lot for all the help and brainstorming
08:45 < greelgorke_worki> kevireilly ssl is no problem for us, because we have nginx in front, that proxies for us
08:45 < DiegoMax> expect me here more often :D
08:45  * DiegoMax waves
08:45 < greelgorke_worki> and we use the proxy of up only on a single maschine
08:45  * arnorhs waves
08:45 < greelgorke_worki> machine*
08:45 < kevireilly> greelgorke_worki: ah yes, fleet was part of the same deployment ;) also having issues. how did up help you with deployment though, isn't it mostly just about keeping a process running / zero downtime reloads?
08:45 < greelgorke_worki> exactly
08:46 < kevireilly> how do you deploy the actual code though?
08:46 < greelgorke_worki> i wrote an http endpoint, that is secured for internal use only. all that does is it recieves commands, initates git pushes and tells up to reload workers
08:46 < greelgorke_worki> deployment is a simple git pull
08:46 < kevireilly> coolio
08:47 < kevireilly> public repo?
08:47 < greelgorke_worki> i was working on packaging this stuff up, but it's not ready yet
08:47 < greelgorke_worki> was rewriting it, because the first version was pretty much tied up to the app needs
08:47 < kevireilly> ah i see
08:48 < greelgorke_worki> here the work so far https://github.com/greelgorke/rizeup
08:48 < greelgorke_worki> in fact rizeup will be more a app management lib, that can do more than deployment
08:48 < greelgorke_worki> but is still in an early stage
08:49 < greelgorke_worki> i'm a bit distracted by other stuff atm :D
08:50 < kevireilly> pretty cool, me still reading :)
08:51 < kevireilly> greelgorke_worki: but the git repo that is pulled is public yah? that is one of the general issues i still need to figure out a work around for when deploying with git
08:51 < kevireilly> is a private repo
08:52 < greelgorke_worki> our app is in a private repo
08:52 < kevireilly> how or where are you handling authentication?
08:52 < greelgorke_worki> https://github.com/greelgorke/rizeup/blob/master/manager.js#L41
08:53 < greelgorke_worki> it's configurable
08:54 < greelgorke_worki> the user of the lib can provide async commands and sync procs procs, 
08:55 < kevireilly> ah
08:55 < greelgorke_worki> one sync proc can parse content of the req.header or url or even body and check against a static permisions list
08:56 < greelgorke_worki> i thought about allowing do async stuff in a proc (authentication is the main usecase for procs) but i think for a management interface there should be a very limited list of users
08:57 < greelgorke_worki> there is another tool, amino, that alows you to do development for serverclusters, but they use redis pubsub. that was not what i wanted/needed
08:58 < greelgorke_worki> kevireilly the commands/deploy and command/rollback are pretty much the same as in our app
08:59 < Sven_vB> are long stack traces in vanilla Node yet?
08:59 < kevireilly> greelgorke_worki: im still trying to figure out where the credentials are being provided
08:59 < kevireilly> or rather how
09:01 < greelgorke_worki> oh atm it's design to use a convention: https://github.com/greelgorke/rizeup/blob/master/manager.js#L8
09:01 < greelgorke_worki> here it asumes a module approot/rizeup, wich is a one function module
09:02 < kevireilly> ah gotcha
09:02 < greelgorke_worki> in line 15 it's executed with the use  function
09:02 < greelgorke_worki> there you can just call use several times
09:02 < greelgorke_worki> if you provide a single function, it's used as a proc
09:02 < greelgorke_worki> this proc can be your auth function
09:03 < greelgorke_worki> there are some edges to cut, it is in an early stage
09:03 < kevireilly> pretty delicious
09:03 < xcm> anybody have a good candidate for MySQL ORM/
09:04 < greelgorke_worki> xcm we are using sequelize.js
09:04 < greelgorke_worki> it's neat
09:05 < xcm> greelgorke_worki: yes, i have some experience with that, but i want some more object-oriented 
09:05 < xcm> some thing active-record alike
09:05 < greelgorke_worki> it is active record like
09:06 < greelgorke_worki> what do you mean with "more object-oriented"?
09:06 < kevireilly> who was just asking about a stack trace? damn my scrollback
09:06 < xcm> not really, i am looking some one with auto-migration & dynamic finder like as active_record
09:07 < greelgorke_worki> http://www.sequelizejs.com/documentation#migrations-functions migrations
09:07 < greelgorke_worki> the findeer is very dynamic
09:08 < greelgorke_worki> but hey, you wanted a candidate. i'm done then ;)
09:08 < xcm> Oh…, seems these db manipulation statements are new 
09:09 < greelgorke_worki> jsut chekc the doc
09:09 < greelgorke_worki> arf *just check
09:09 < xcm> thanks a lot :)
09:09 < kevireilly> Sven_vB: how long of a stack trace?
09:10 < greelgorke_worki> xcm and by the may active record is a pattern, active_record is an implementation of it :)
09:10 < kevireilly> >> var foo = function(callback) { return callback(new Error('stack!')); }; foo(function(err){ console.log(err.stack); });
09:10 < purr> kevireilly: undefined; Console: 'Error: stack!\n    at foo (irc:1:49)\n    at irc:1:74\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.exports.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket…
09:10 < greelgorke_worki> *by the way
09:11  * greelgorke_worki should get back to work now
09:26 < MoniqueL> I have a question about the nvm ?
09:27 < MoniqueL> I source it
09:27 < MoniqueL> i ment I source .bashrc
09:28 < MoniqueL> wait
09:28 < MoniqueL> brb
09:28 < MoniqueL> sorry
09:28 < MoniqueL> and ask for      nvm in the terminal... but he dous not know the command.
09:30 < MoniqueL> I dont know anymore... 
09:30 < MoniqueL> someone has a answer?
09:32 < atomless> MoniqueL: did you follow install guide here? https://github.com/creationix/nvm
09:32 < MoniqueL> yes..
09:35 < MoniqueL> can I remove it and do it again?
09:38 < peterfile> yes? delete installed files/dirs and start over?
09:40 < atomless> do you have xcode installed?
09:42 < juliana> Good morning. i've got a problem with architecture of my application using express and mysql. I have created a function to handle route. This function should get data from mysql. So ive made callback which render page and pass it to function which queries mysql and if everything is ok  cb function is called. But my question is what should i do if  i need to make 2-4 queries for single page? the only way is to do it as a chain of callbacks?
09:52 < MoniqueL>  peterfile I'm going to look foor these files and delete them.  atomless I dont think so that I installed that. what is it?
09:53 < xcm> Hi, all - i am looking for a nodejs position that can work from remote 
09:53 < xcm> any help?
09:54 < atomless> MoniqueL: there's a note at the top of the page on github that says nvm requires that you have a c++ compiler installed and xcode (if you're on a mac) has that included
09:54 < atomless> https://github.com/creationix/nvm
09:55 < ExxKA> xcm, you mean a job?
09:55 < MoniqueL> this one. yes I did.
09:55 < MoniqueL>  at first
09:55 < xcm> ExxKa: correct, but not fulltime
09:55 < xcm> i got only 20hours per week
09:55 < ExxKA> xcm, take a look at stack overflow
10:05 < adamquadmon> hi guys
10:11 < Omid> ExxKA: hi
10:11 < ExxKA> Hey Omid
10:11 < Omid> ExxKA: I finally found the solution
10:11 < Omid> ExxKA: no need to update fedora 4 :D
10:12 < ExxKA> Cool, what was the problem?
10:12 < ExxKA> sorry, what was the solution, i mean :)
10:16 < Omid> ExxKA: :D i couldn't install node-v0.8.23 because of my old glibc yesterday
10:16 < Omid> ExxKA: today i found that it's possible to have multiple glibc
10:17 < Omid> ExxKA: of course, still getting some errors that don't look to be because of old fedora
10:17 < ExxKA> Nice
10:17 < ExxKA> Why are you still on fedora 4?
10:18 < Omid> why I get this error while compiling nodejs? make[1]: *** [/opt/node-v0.8.23/out/Release/mksnapshot] Error 3
10:18 < Omid> ExxKA: it's a long story that i have said many times in here, but i should change the os, i just have to develop the node app
10:18 < ExxKA> Hehehe ok
10:19 < ExxKA> If you are on old hardware, take a look at Lubuntu and Zenwalk
10:19 < zomg> Omid: I think you will need to pastebin some more output than that
10:19 < zomg> Error 3 might actually be a gcc error but not sure
10:19 < ExxKA> I have used Zenwalk on a p4 800mhz desktop, and it runs like a breezy :)
10:22 < Omid> zomg: log for configure or for make?
10:22 < zomg> Since it's make that's throwing the error, start with that =)
10:24 < Omid> zomg: http://pastebin.ca/2371483
10:25 < Omid> zomg: of course it must be a long long list but when I remaked, i just got that error
10:25 < zomg> Yeah that seems to me it could be the problem line
10:25 < zomg> on line 3
10:25 < shmoon> hey guys
10:25 < zomg> hard to say how to fix it though :P
10:25 < shmoon> anyone used this thing called browservefy with browserify ?
10:26 < shmoon> am i getting its usage right that i have to do $ browservefy path/to/main.js PORT ?
10:26 < shmoon> this means i can use 1 bundle at a time ? and also it has to be a different port fif my node app is running on 3000 my bundle URL in script tag needs to have localhost:8080/...
10:27 < shmoon> mbalho: i wonder if you are around as you recommened this tool to me :)
10:27 < Omid> zomg: it seems that a file is missing, do u have any idea what that file is?
10:28 < Omid> zomg: and it seems that the file is a lock for multi-thread tasks :-/
10:31 < zomg> I would think it gets generated by one of the commands
10:35 < number80> hello
10:36 < number80> i'm having an issue with zombie.js/cucumber.js
10:36 < ExxKA> either or?
10:36 < number80> ExxKA: using both
10:37 < number80> i'm wrote two features for testing a web app using a zombie instance create in World 
10:38 < number80> the first one is ok, the second fails in the first zombie callback, a console.log shows me that the zombie instance has become undefined
10:39 < ExxKA> can you create a gist?
10:39 < Omid> zomg: solved ;) LINK
10:39 < number80> ExxKA: yup
10:39 < ExxKA> with the source code, and the error
10:43 < number80> ExxKA: http://paste.fedoraproject.org/9976/74913751/
10:43 < number80> it fails line 73 
10:44 < number80> error message: TypeError: Cannot call method 'fill' of undefined
10:46 <@MI6> joyent/libuv: Bert Belder v0.10 * c8d39cc : ChangeLog: fix minor errors - http://git.io/MxRXTQ
10:49 < Omid> how can I install node-gyp and force it to use /opt/newmake/make  instead of make?!
10:55 < ExxKA> number80, I think I am using a different version of Zombie, but anyway, in line 73 this is the page I believe, and not the same context in line 72.  Try just this.fill
11:00 <@MI6> joyent/libuv: isaacs refs/tags/v0.10.5 * 751c127 : 2013.04.24, Version 0.10.5 (Stable) - http://git.io/E-Ghug
11:00 <@MI6> joyent/libuv: Bert Belder refs/tags/v0.10.3 * 5716386 : 2013.02.04, Version 0.10.3 (Stable) - http://git.io/F0EqmQ
11:02 <@isaacbw> Omid: 1) why 2) symlink
11:03 <@isaacbw> 3) you're just going to make a huge mess
11:06 < Omid> isaacbw: many people use this computer and they need the old version of make, and i'm the only one who needs the newer version
11:09 < ningu> so set your PATH differently for your account
11:10 <@MI6> joyent/libuv: isaacs refs/tags/v0.10.5 * 1c18137 : 2013.04.24, Version 0.10.5 (Stable) - http://git.io/oVgU3w
11:10 <@MI6> joyent/libuv: Bert Belder refs/tags/v0.10.3 * 50c57ab : 2013.02.04, Version 0.10.3 (Stable) - http://git.io/M8571A
11:15 < Omid> ningu: how?
11:15 <@MI6> joyent/libuv: isaacs refs/tags/v0.10.5 * 637ecf8 : 2013.04.24, Version 0.10.5 (Stable) - http://git.io/HEhqhw
11:16 <@MI6> joyent/libuv: Bert Belder v0.10 * f6fb1df : ChangeLog: fix incorrect release date - http://git.io/JvY4nA
11:31 < number80> ExxKA: ok
11:46 < marlun> I've got an iife in one of my js files but when we run it we get an error "object is not a function" the iife looks like: (function() { ... }()) Any tips on why thats not working? 
11:46 < NuZZ_> hue
11:47 < agu10^_> my node server is suddently not working anymore
11:47 < agu10^_> i run forever start server.js
11:47 < agu10^_> and nothing
11:47 < agu10^_> it doesn't answer in the port
11:47 < NuZZ_> thats incredibly vague
11:47 < NuZZ_> try throwing console.log() all over the place to see where it fails
11:48 < NuZZ_> and then pastebin the code 
11:48 < agu10^_> Error: listen EADDRINUSE
11:48 < NuZZ_> well thar ya go
11:48 < NuZZ_> whats OS?
11:49 < agu10^_> i killed it. ubuntu
11:49 < SomeoneWeird> have you got skype running?
11:49 < agu10^_> now my server is running, but it doesn't respond in port 8080
11:49 < agu10^_> wtf is happening?
11:49 < agu10^_> no, i don't
11:49 < NuZZ_> uh
11:49 < NuZZ_> try using htop
11:49 < agu10^_> why is my server not responding?
11:49 < agu10^_> no, i'm now running node server.js
11:49 < NuZZ_> then search for processes, make sure you dont have it up and errored
11:50 < agu10^_> what do you mean??
11:50 < NuZZ_> you could have another node process running on that port
11:50 < SomeoneWeird> sudo killall node
11:50 < NuZZ_> just type ps aux and look for "node" or grep for it
11:50 < SomeoneWeird> then run again
11:50 < agu10^_> i did that
11:51 < agu10^_> and run it again: node server.js
11:51 < NuZZ_> good, okay it not that
11:51 < agu10^_> it says listening on 8080
11:51 < NuZZ_> yeah?
11:51 < agu10^_> but in the browser it doesn't respond
11:51 < SomeoneWeird> what error?
11:51 < agu10^_> Oops! Google Chrome could not connect to 54.235.108.222:8080
11:51 < NuZZ_> what host r u listening on
11:51 < SomeoneWeird> firewall?
11:51 < SomeoneWeird> yeah, check the host
11:52 < agu10^_> ... i don't have a firewall i think
11:52 < agu10^_> what do you mean?
11:52 < NuZZ_> iptables is on ubuntu right?
11:52 < SomeoneWeird> are you behind a router?
11:52 < SomeoneWeird> iptables is on everything
11:52 < SomeoneWeird> but disabled by default
11:52 < NuZZ_> disabled by default on ubuntu? ok
11:52 < SomeoneWeird> not disabled, just no rules
11:52 < agu10^_> i'm not
11:53 < agu10^_> how do i remove all iptables rules?
11:53 < standoo> hello
11:53 < SomeoneWeird> sudo iptables --list -v
11:53 < SomeoneWeird> see if there are any
11:53 < standoo> agu10^_: what platform are you running it on?
11:53 < SomeoneWeird> are you making sure it's listening on the correct ip?
11:53 < NuZZ_> additionally, try listening on 0.0.0.0 as the host
11:53 < SomeoneWeird> ^
11:53 < agu10^_> there are a couple rules listed, standoo 
11:53 < agu10^_> SomeoneWeird, yes
11:53 < SomeoneWeird> try 0.0.0.0
11:54 < agu10^_> it used to work
11:54 < agu10^_> not it doesn't
11:54 < agu10^_> so the script is fine.
11:54 < SomeoneWeird> hm?
11:55 < agu10^_> it seems my server is working
11:55 < SargoDarya> Woa, just noticed you're on Btc too SomeoneWeird
11:55 < agu10^_> but i think iptables is blocking it
11:55 < agu10^_> how do i stop that stupid iptables?
11:55 < NuZZ_> so are you running it on a remote server, or on the machine ur currently using?
11:55 < NuZZ_> a vm? what
11:55 < agu10^_> remote
11:56 < SomeoneWeird> SargoDarya, lol
11:56 < NuZZ_> so production scenario, okay. 
11:56 < SargoDarya> funny thing.
11:56 < standoo> agu10^_: "iptables are not stupid"
11:56 < standoo> agu10^_:  :) haha
11:56 < agu10^_> how do i turn it off??
11:56 < NuZZ_> Ubuntu includes its own firewall, known as ufw
11:56 < NuZZ_> so uh
11:57 < NuZZ_> is that shit on?
11:57 < agu10^_> some software i installed wanted to turn iptables on
11:57 < agu10^_> and it screwed my server
11:57 < SomeoneWeird> ufw is a frontend to iptables
11:57 < NuZZ_> oh ok
11:57 < NuZZ_> ive never ubuntu'ed before, i use centos
11:57 < agu10^_> i think this is the problem
11:57 < agu10^_> i don't know how to turn iptables off now
11:57 < SomeoneWeird>  /etc/init.d/iptables stop
11:58 < agu10^_> SomeoneWeird, that won't work
11:58 < agu10^_> it will restart when i login again
11:58 < agu10^_> or when i boot
11:58 < NuZZ_> chkconfig iptables off
11:58 < agu10^_> i want to stop it forever!
11:58 < SomeoneWeird> agu10^_, i still doubt it's your firewall
11:58 < NuZZ_> ^ that will stop it when booting
11:58 < SomeoneWeird> and you don't WANT to stop it 
11:58 < NuZZ_> ^ true
11:58 < NuZZ_> iptables is your friend
11:58 < agu10^_> ubuntu@potentialstudio:/var/www/node/potentialstudio$ chkconfig iptables off
11:58 < agu10^_> /sbin/insserv: No such file or directory
11:59 < agu10^_> NuZZ_, i want to stop it filtering
11:59 < NuZZ_> you really should block all ports except ones you explicitly allow
11:59 < agu10^_> NuZZ_, no, i shouldn't
11:59 < agu10^_> i want freedom
11:59 < agu10^_> i have another firewall anyways
12:01 < NuZZ_> regardless, turn it off then see if your shit works
12:01 < agu10^_> NuZZ_, how do i turn it ofF????
12:01 < agu10^_> that's what i'm asking
12:01 < NuZZ_> we told ya
12:01 < agu10^_> no, i want to disable it
12:02 < agu10^_> you just told me how to close it till i reboot
12:02 < NuZZ_> ... we are debugging
12:02 < PinkRunner> Hi, somewhat new to node.js but have it up and running and mostly doing what I want.  Say I fire up two or more browsers on the same machine to hit the server.  Is there any way in node.js to identify the client/browser?  (There is no login/username)  For example, one test scenario might be that the server is busy or slow so one browser would see that delay, but another browser hitting it at the same time shouldn't see that same lag.
12:02 < agu10^_> i am not debugging
12:02 < NuZZ_> you dont need to fiddle with that shit till after
12:02 < agu10^_> i know iptables is screwing it
12:02 < agu10^_> uh
12:02 < NuZZ_> how do you know if you didnt turn it off?
12:03 < agu10^_> i stopped it and now my server works
12:03 < agu10^_> happy?
12:03 < agu10^_> now how do i DISABLE it?
12:03 < agu10^_> or its rules
12:03 < NuZZ_> actually yeah, but you dont have to be a nigger about it demanding shit
12:03 < NuZZ_> google it
12:03 < agu10^_> NuZZ_, well you keep answering the wrong question
12:03 < agu10^_> am i not supposed to get angry?
12:03 <@isaacbw> wow, nginx is tiny
12:03 < marlun> Is an iife really not allowed in node.js files? 
12:03 < NuZZ_> google it concerning ubuntu
12:04 < agu10^_> i am asking the correct question yet you keep answering something else
12:04 < NuZZ_> i dont use ubuntu, so I think you should answer it on your own via google
12:04 < agu10^_> ok thanks
12:04 < agu10^_> i'm asking in #ubuntu
12:05 < NuZZ_> lol
12:05 < NuZZ_> a simple google would suffice but okay
12:06 < NuZZ_> http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform
12:06 < NuZZ_> mfw 80k for a blogging platform
12:06 < NuZZ_> 80k POUNDS
12:06 < standoo> 80k for a blogging platform?
12:06 < NuZZ_> its in nodejs
12:06 < standoo> what's platform?
12:06 < NuZZ_> thats what they call it. i guess, like wordpress?
12:07 < NuZZ_> the dude basically says "we are making it just a blogging platform, thats it" as if having more would degrade its value
12:08 < standoo> i'm making a platform too..
12:09 < NuZZ_> I dont even know what a platform is
12:09 < standoo> hmmm
12:09 < NuZZ_> I guess, wordpress delivers you a full directory structure
12:09 < standoo> haha
12:09 < NuZZ_> theme folder, etc, content folder
12:09 < NuZZ_> is that a platform?
12:09 < standoo> platform = a place for an app
12:09 < NuZZ_> you mean its for hosting?
12:09 < NuZZ_> like wordpress.org
12:09 < Omid> NuZZ_: yes, also a few functions, libraries and helpers
12:09 < standoo> sometimes
12:10 < NuZZ_> heh these words man
12:10 < standoo> i'm bulding a nodejs application platform
12:10 < NuZZ_> I DONT EVEN KNOW
12:10 < standoo> do you know what that means?
12:10 < NuZZ_> wat that means
12:10 < NuZZ_> haha
12:10 < standoo> haha
12:10 < standoo> platform = a place to put something
12:11 < NuZZ_> I'm actually building my own blogging ... file structure and node module thinger ... because lel, it's a blog.
12:11 < standoo> NuZZ_: that's cool
12:11 < NuZZ_> its not that cool
12:11 < standoo> want to host on my platform?
12:12 < NuZZ_> but it's amusing
12:12 < NuZZ_> ima kill you
12:12 < standoo> why amusing?
12:12 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * 9b801d5 : darwin: rename darwin-getproctitle.m (+1 more commits) - http://git.io/CdTizw
12:12 < NuZZ_> I am amused by making things from scratch is all
12:13 < NuZZ_> I doubt anyone would contrib to my repos though
12:13 < standoo> NuZZ_: is it for personal use?
12:14 < NuZZ_> yeah, but I would want anyone to be able to use code from it
12:15 < NuZZ_> ie. im making a blog to host a portfolio and perhaps even convert a big high traffic site of mine as node's performance could ease server load. especially with better database structures (it's wordpress)
12:16 < NuZZ_> but if you are curious, I'm making it so that there is no admin page persay, it's a clientside JS app on top of the site that pulls from APIs. you edit articles inline, use a fixed position toolbar etc. 
12:16 < NuZZ_> seems like it would be legit
12:16 < NuZZ_> similar to that ghost shit they want money for
12:23 < standoo> NuZZ_: do you plan to sell it? :)
12:23 < NuZZ_> nope. just open source it and move on with life
12:24 < NuZZ_> would be kewl to have a userbase though
12:25 < NuZZ_> I'm sure there's already enough blogging platforms out there though
12:25 < NuZZ_> and that ghost shit looks pretty much like it will be the number one node blog ... platform
12:27 < foobar321> Hi I have question about --nodedir option for npm. What was the reason to change behavior to download header files remotely?
12:37 < Omid> after installation from source code, how can I remove the installation files?!
12:39 < zamnuts> Omid, npm packages or nodejs itself?
12:42 < greelgorke> Omid rm -rf folder/where/you/cloned/or/unpacked/node ?
12:42  * greelgorke still amused about rm -fr aka the french remove
12:42 < Omid> greelgorke: node package
12:42 < greelgorke> ?
12:42 < Omid> greelgorke: i installed it from source code, but there are some stuff like configure and... there
12:43 < Omid> greelgorke: i want them to be removed
12:43 < greelgorke> you downloaded node.tar.gz unpacked it and make-installed it?
12:44 < Omid> greelgorke: yes
12:44 < greelgorke> then rm the tar.gz and the folder, that was produced by the unpack, thats it
12:44 < Omid> greelgorke: ./configure && install && make install
12:44 < Omid> greelgorke: so where is it installed then?!
12:46 < greelgorke> do you want to uninstall node?
12:48 < greelgorke> type "which node"  
12:48 < greelgorke> there is the binary
12:49 < zamnuts> Omid, why do you want to remove the installation directory? you won't be able to make uninstall
12:50 < Omid> zamnuts: i don't want to remove the installation directory, i want to remove installation files
12:51 < greelgorke> to uninstall, right?
12:51 < Omid> greelgorke: no to make the installation directory clean
12:52 < zamnuts> Omid, there are 3 types of files: the compiled and installed files for nodejs to the target installation directories, the src used to make nodejs and the files uesd during the compilation of nodejs, which do you want to remove?
12:52 < Omid> greelgorke: zamnuts on the other hand, anybody can get to this directory, reinstall the node (byu running these installation files), and remove all my configs
12:52 < Omid> zamnuts: the ones that i don't need anymore
12:53 < zamnuts> Omid, you need them all if you're actively running nodejs
12:53 < r04r> Omid: if you want to keep the possibility of easily uninstalling later you need them all
12:53 < Omid> zamnuts: for example configure is needed?!
12:53 < Omid> zamnuts: for example 'configure' is needed?!
12:53 < zamnuts> Omid, yes, as r04r pointed out, if you want to `make uninstall` you should keep the original files
12:53 < r04r> Omid: can you clarify why you care?
12:54 < zamnuts> the cumulative file size is <20-30 megabytes, why delete it? storage is cheap.
12:54 < Omid> r04r: because the folder is messier than it is supposed to be.
12:54 < zamnuts> Omid, you won't use that folder again unless you go to uninstall nodejs
12:55 < r04r> Omid: it looks pretty much like every source folder i've ever seen
12:55 < Omid> zamnuts: ok i am convinced... but still don't know what is this 'configure' for
12:56 < Omid> r04r: not for mine
12:56 < Omid> r04r: sources usually remove installation footprints
12:56 < r04r> Omid: the configure script is used for setting up your compilation scripts
12:56 < Omid> r04r: exactly!
12:56 < Omid> r04r: and there is not going to be any more compilation
12:57 <@isaacbw> configure scripts are important
12:57 < Omid> r04r: so why i should keep it there?
12:57 < r04r> Omid: if you feel the dire need to clean up your source directory you can prune it by figuring out what exactly is needed for `make uninstall`, but I don't think anyone has bothered to do that. Because literally it has zero impact on anything.
12:57 < r04r> Omid: why not?
12:57 < zamnuts> can't one just `make clean`?
12:57 < zamnuts> i don't remember if make clean is implemented in the nodejs makefile
12:58 < r04r> and it still wouldn't remove the oh-so-hated configuration file
12:58 < Omid> r04r: because i have to give this computer to the stupid customer, and she is really curious to run every script that she  finds beautiful
12:58 < r04r> configure file*
12:58 < standoo> hello
12:58 < standoo> i'm building a nodejs application platform
12:58 < Omid> zamnuts: tried... it uninstalls
12:59 < r04r> Omid: move the source directory to some location she cannot access
12:59 < standoo> would like to know if are there any features anyone is looking forward to?
12:59 < zamnuts> Omid, you're wasting your cycles, and everyone elses cycles by contimplating the removal of the "not needed" files, our suggestion is to maintain it if you want to reasily remove nodejs in the future, or just delete all of it.
12:59 < Mag-en00b> node throws RangeError when reading Buffer out of range. is that documented somewhere? i cannot find anything related to error handling regarding Buffers in node
12:59 < zamnuts> s/contimplating/contemplating
13:00 < r04r> zamnuts/$/\//
13:00 < Mag-en00b> it seems quite fragile to just use that name to intercept the exception. am i forced to test, before reading, whether my read will be out of bounds or not?
13:01 < zamnuts> r04r, won't a / prefix send the message to freenode? not what i want
13:02 < test> try
13:06 < deoxxa1> Mag-en00b: that's generally the way it's done, yes
13:07 < deoxxa1> Mag-en00b: an exception is "something bad that shouldn't really happen has happened"
13:07 < deoxxa1> Mag-en00b: not "hey you should know about this recoverable condition"
13:07 < r04r> zamnuts: $ matches the end, doesn't it? I meant to add a slash as suffix :)
13:08 < zamnuts> r04r, brain fart, ^ matches the beginning, sorry it is 6am, i'm just warming up for the day
13:09 < Mag-en00b> deoxxa1: war area of opinions
13:10 < deoxxa1> Mag-en00b: well exceptions could be used that way, but they're slow, so why bother?
13:10 < r04r> zamnuts: ;)
13:10 < Mag-en00b> "receive a packet from network", "parse it", "encounter error in data", "ignore it, wait for next packet"
13:10 < zamnuts> Mag-en00b, shouldn't it send NACK back?
13:10 < Mag-en00b> wouldn't mind using exceptions, they're perfect for that kind of situation. now since i have to check before reading, i'll add more code lines
13:10 < deoxxa1> i dunno, exceptions aren't really for flow control
13:10 < greelgorke> implicitly in docs :D "A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap"
13:11 < greelgorke> sounds like a C array
13:11 < Gottox> greelgorke: that's basicly what it is.
13:11 < Mag-en00b> deoxxa1: they are, for seperating exception handling from the code itself
13:12 < Mag-en00b> but yeah, i got my answer. will just write some wrapper to check for reading before reading and on exception i assume it to be something grave
13:13 < deoxxa1> Mag-en00b: but is "bad data coming across the network" really exceptional? sounds like something you should be expecting. "the hard drive has exploded and the scsi bus is angry" is an exception, imo
13:13 < greelgorke> javascript utilizes exceptions only with "something unpredicted happend"-semantcis. there is no such construct like checked exceptions  
13:14 < Mag-en00b> deoxxa1: indeed. that's why i would like to handle the exception case. one bad bit of data doesn't mean everything following it will be bad as well. if i don't know how my code will terminate (because the library throws undocumented exceptions) then how am i supposed to recover
13:14 < Mag-en00b> greelgorke: javascript itself doesn't /use/ exceptions. the people who use javascript use them. and it's up to them what kind of situation they think deserves throwing an exception
13:16 < Omid> r04r: optimal node installation only needs: bin  include  lib  share
13:16 < deoxxa1> Mag-en00b: well, like i said, exceptions are pretty slow (they involve unwinding the stack, etc), so it's probably not an awesome idea to use them for flow control
13:18 < greelgorke> there is no concept of checked exception in js. checked execpetions are meaned to singal userland exceptions. unchecked exeptions aka errors are for the runtime to tell you that some state is terribly wrong. if you access an undefeind property, then it's an error. you have to check yourself for such states.
13:19 < deoxxa1> ^^ this
13:20 < greelgorke> but i agree on the doc issue. since Buffer or C-like arrays are not there in js, it should be mentioned on the docs, that there are index bounds and you cant get out of them
13:20 < r04r> Omid: how are you planning to uninstall?
13:20 < greelgorke> js arrays are very gentle about bounds, bcause they don't really have any 
13:21 < Omid> r04r: make uninstall
13:21 < r04r> Omid: where is your makefile et all?
13:22 < Omid> r04r: you are right though ;)
13:24 < Omid> there is an install.py file in tools/ folder, do you know what is that for?
13:24 < Omid> [sorry i'm digging]
13:24 < r04r> Omid: Personally I am running a Node installation using only the directories you mentioned, but it's located within an user's home folder, so when I plan on uninstalling I'll just rm -rf that entire user
13:24 < Omid> [the node of course]
13:24 < r04r> But am not familliar with that script
13:25 < Omid> r04r: that's tough, really, that user has rightzzz
13:25 < greelgorke> Omid why you can't just forbid read&write%exec access to the whole directory?
13:26 < greelgorke> and anyway, if the user destroys your installation than it's a support request. set up your sla right and earn money for dumb users :)
13:27 < Omid> greelgorke: i am now satisfied that i have to keep them
13:28 < greelgorke> i think you can remove the whole folder after installation. when you want to uninstall it you could just install a new first and uninstall it. anyone knows if this could work?
13:28 < bnoordhuis> Omid: tools/install.py installs/uninstalls node
13:28 < greelgorke> haven't tested it :D
13:28 < bnoordhuis> Omid: make install/uninstall just shells out to it
13:29 < r04r> greelgorke: may cause issues if the touched files differ between versions, I think?
13:29 < Omid> bnoordhuis: hi, thanks ;)
13:30 < Omid> bnoordhuis: the old fedora 4 rocks now :D
13:30 < bnoordhuis> yeah? i'm amazed
13:30 < bnoordhuis> any plans of upgrading in the future? i'd be nervous working on something that old
13:30 < Omid> bnoordhuis: so am i
13:31 < greelgorke> is anyone aware of a JSON.isParseable implementation? could be usefull :D 
13:33 < Omid> bnoordhuis: i figured out the glibc problem
13:34 < Omid> bnoordhuis: and now i have updated node to 0.8.23 and am able to upgrade it to any other version
13:35 < Mag-en00b> okie dokie new Error() is 18 times slower than new Object(). but yes, still, they are only generated in an error situation which needs to be handled differently. so ofcourse not for flow control, but for just that; error handling
13:38 < Omid> i think my new node-v0.8.23 installation cannot find the /usr/local/lib/node_modules what can cause the problem?!
13:38 <@isaacbw> greelgorke: just wrap it in try catch
13:40 < Omid> in fact it doesn't have an npm
13:42 < greelgorke> isaacbw right, but this feels so wrong to me :D
13:42 <@isaacbw> why?
13:44 < greelgorke> this is even a better question. i think because it's an unchecked exception, but i think there should be a way of checking the conditions first, just like with array bounds
13:44 < bnoordhuis> greelgorke: no way to do that atomically
13:44 < greelgorke> but yeah, you have to parse the whole string to be ael to say if it's parseable anyway, so the try-catch is better in most cases
13:45 < bnoordhuis> oh wait, is this about loading modules or parsing json?
13:45 <@isaacbw> greelgorke: to figure out if it's parsable, you will have to try to parse it
13:45 <@isaacbw> so first checking if it's parsable then parsing it again would be an unecessary doubling of the work
13:45 <@isaacbw> *unnecessary
13:46 < greelgorke> that's what i said, isaacbw, that's a pitty, we cant forseen the future :D
13:47 < greelgorke> bnoordhuis neither of both. it's more about of parsing input
13:47 < deoxxa1> isaacbw: potentially there's less work involved in determining if it's parseable - specifically you wouldn't have to allocate any new strings or objects or whatever
13:48 <@isaacbw> memory isn't really the same thing as work
13:48 < deoxxa1> well it is if there's work involved in memory
13:48 < deoxxa1> (which there is)
13:48 < deoxxa1> (but this is getting very academic)
13:49 < greelgorke> deoxxa1 yes that's a point. in some rare cases you don't want to get the js object, just want to make sure the fromat is valid json
13:49 < greelgorke> format*
13:50 < chiel> for express, what template engine is recommended that has support for partials? i gave mustache a try but the partials there are messed up. i tried swig as well, but it extends templates rather than allowing for partials... any suggestions? i would like to just write html, not some fancy whitespace-sensitive markup :)
13:50 < deoxxa1> isaacbw: consider the case where you just want to check whether or not a 20gb json file is valid
13:50 < james`> is node simply server side javascript so for e.g to learn it you would simply learn javascript and use it on a node supported server
13:50 < bnoordhuis> james`: yes
13:51 < james`> ok cheers
13:51 < deoxxa1> james`: there are some node-specific APIs however - just as with a browser there are going to be specific APIs for things like accessing the DOM, setting the window title, etc
13:51 <@isaacbw> deoxxa1: allocating space in the heap is pretty cheap time-wise. Checking the json file before parsing it would essentially be doubling your time while saving some space
13:52 < deoxxa1> isaacbw: s/20gb/200gb/
13:52 < deoxxa1> isaacbw: i don't have any boxes with terabytes of ram, unfortunately :(
13:52 <@isaacbw> I don't think you could parse a 200gb json file with v8 anyway :P
13:52 < deoxxa1> correct!
13:52 < greelgorke> chiel try ejs or jade, they are best supported in express
13:52 <@isaacbw> oh I see, so you're *only* checking if it's valid without the intent of ever actually parsing it
13:52 < deoxxa1> which is why there is a case for validating the syntax without parsing it
13:52 < deepy> isaacbw: try it and see!
13:53 <@isaacbw> *parsing and storing in memory
13:54 <@isaacbw> deepy: I gurantee it would fail
13:54 < greelgorke>  *only* checking if it's valid that's it, yes
13:54 < Nahra> Hello. When running `npm install --production groovebasin`, I get http://sprunge.us/eiOT. What did I miss?
13:54 < deepy> isaacbw: even if you have enough RAM?
13:55 <@isaacbw> v8 doesn't work well with a fat heap
13:57 < chiel> greelgorke: jade is a lot like haml right? is ejs just regular html?
13:58 <@isaacbw> I don't get why people are so scared of html
13:58 < greelgorke> chiel yes and yes
13:58 < g0z> never heard of this html fear
13:58 < g0z> now css ...
14:00 < NuZZ_> I guess html templating + jquery-esque injection of dynamic data is somewhat legit, but it's not really the norm so perhaps thats why its not the defacto
14:00 < chiel> i just like writing regular html, regular css and regular javascript :p
14:00 <@isaacbw> well, working with raw dom is a nightmare
14:00 < chiel> i mainly use css preprocessors for modularisation... but i still want to write normal css for the most part
14:00 < chiel> yeah that's true
14:00 < greelgorke> isaccbw because many people give a shit about clean structure and mess around? because browsers are so forgivable and then you spend years with searching the missing closing tag? :D
14:00 < NuZZ_> wow I said a stupid sentence just then but u get me
14:00 < chiel> some small lib for dom manipulation and events is fine
14:01 < chiel> but i mean i don't like coffeescript etc
14:01 < greelgorke> chiel if you want just stay plain, then use ejs
14:02 < NuZZ_> heh chiel, im crazy. I roll with coffeescript client and server, stylus. coffee and stylus get auto compiled on change and merged and minfied automatically. it's... pleasing.
14:04 < NuZZ_> im also partial to that ECT templater. seems very fast while also allowing you to fiddle around in an asthetically pleasing way. maybe I like that because I used to be a phpfag
14:06 < chiel> NuZZ_: i suppose, but it adds another layer of complexity, which i'm not really a fan of. to my mind, if you know the quirks of javascript it really isn't that hard to work around them.
14:07 < chiel> greelgorke: alright cool, i'll have a look at that
14:08 < NuZZ_> chield I feel you. I could work with plain css, js, etc. but I'm just a min-maxer and try to hipster my way into doing things in a way I percieve to be more efficient (even if it ends up taking me a nice chunk of time to develop the code to automate it all)
14:09 < NuZZ_> javascript alone really isnt that bad
14:09 < NuZZ_> css, eh, stylus, sass, scss, less make, I think, a big difference though, at least for big stylesheets
14:10 < chiel> NuZZ_: yeah, i do use less/sass, mainly for the modularisation
14:11 < chiel> but with stylus etc, it feels like people are afraid of punctuation nowadays, or something.
14:11 < NuZZ_> i think stylus beats sass and the others as you can go with full punctuation or none at all
14:12 < NuZZ_> tis cool
14:20 < greelgorke> NuZZ_ chiel have seen https://github.com/visionmedia/rework already? 
14:21 < NuZZ_> nope
14:28 < NuZZ_> dont think i can percieve what makes it better than stylus
14:28 < NuZZ_> dont really need a lot of the complex functionality of the both of them
14:30 < NuZZ_> but im sure thats just from a lack of understanding
14:30 < Voting> So, I want to start using https://github.com/epeli/underscore.string and I'm dumb  about npm - I really mostly just want to have sprintf capability mostly on the client side. Should I follow the "Node.js installation" instructions? Will I end up with having it available BOTH on the client and the server? 
14:32 < NuZZ_> while i dont use underscore I believe it has a client library you can use which should add this functionality. may be trickier if you ONLY want the .string functions
14:32 < greelgorke> NuZZ_ i dunno, just wanted to point you to this new thing. hrere tjs tells about rework vs stylus https://github.com/visionmedia/rework/issues/8
14:33 < NuZZ_> yeah i read that 
14:34 < Voting> So, I want to start using https://github.com/epeli/underscore.string and I'm dumb  about npm - I really mostly just want to have sprintf capability mostly on the client side. Should I follow the "Node.js installation" instructions? Will I end up with having it available BOTH on the client and the server? >>> ANYONE REALLY UNDERSTAND NPM? <<<<
14:34 < NuZZ_> seems like it's doing OTF compiling or something
14:34 < NuZZ_> with no cache
14:34 < bouh> bouh
14:35 < greelgorke> Voting you need some banfs
14:35 < greelgorke> bangs*
14:35 < Voting> greelgorke: bangs?
14:35 < greelgorke> !!!!
14:35 < NuZZ_> voting, you dont need to use npm to copy paste code into a file and add a <script> tag
14:35 < Voting> NuZZ_: but I'm not saying I DON'T want the code on the server side also...
14:36 < greelgorke> then go on with npm
14:36 < NuZZ_> you want it on both?
14:36 < NuZZ_> yeah just npm install underscore
14:36 < NuZZ_> i guess thats its name
14:36 < Voting> NuZZ_: ideally, both sides.
14:36 < NuZZ_> like i said, pretty damn sure it has a client .js file u can include in ur html
14:37  * greelgorke would just copy/steal the sprintf and put it in a file instead of including the whole lib
14:37 < LoppEar> Voting: i use browserify to get such things on both client and server but use npm for install / require.
14:37 < Voting> NuZZ_: greelgorke - I think I'd LIKE the entire lib. LoppEar... browserify? Hmmm... googleing...
14:38 < NuZZ_>  <script src="../../lib/underscore.string.js"></script>
14:38 < LoppEar> Voting: but the end result is that yes you have to get that code into a script that's included in your HTML one way or another.
14:38 < NuZZ_> https://github.com/epeli/underscore.string/blob/master/test/test_underscore/index.html
14:38 < NuZZ_> look at that test
14:38 < NuZZ_> u just include that underscore.string file
14:38 < Voting> LoppEar: NuZZ_ reading... thx!
14:39 < NuZZ_> yeah be sure to check the "test" folder in a lot of repos
14:39 < NuZZ_> good way to see examples
14:39 < greelgorke> sometimes there are examples folder....
14:39 < NuZZ_> either or
14:40 < Voting> greelgorke, NuZZ_ thanks!!!
14:40 < NuZZ_> np
14:47 < safani> Hello all
14:47 < safani> Is there a way to manipulate the dom using node.js
14:48 < deoxxa> safani: what DOM
14:48 <@isaacbw> safani: jsdom
14:50 < greelgorke> what's DOM ? :P
14:50 <@isaacbw> http://www.w3.org/DOM/
14:50 < greelgorke> i'm joking...
14:51 <@isaacbw> :/
14:51 < nathan7> dom dee dee dom
14:51 < greelgorke> could someone look at https://github.com/greelgorke/stream-build and give feedback?
14:52 < therealkoopa> Lorentz: I created an issue in browserify-shim, but it may not be an issue with browserify-shim: https://github.com/thlorenz/browserify-shim/issues/14
14:52 < therealkoopa> Lorentz: Hoping you have some ideas on it.
14:55 < greelgorke> whyyyyy, why amazon, why it's a SOAP api? ;_;
14:55 < zaleb> soap :')
14:55 < deoxxa> greelgorke: XML is so much fun though!
14:56 < greelgorke> narr, it's so much fun, that you have generators for soap stubs in java-land
14:56 < greelgorke> do we have some in node?
14:57 < deoxxa> not that i know of
14:57 < greelgorke> we have some soap package
14:57 < greelgorke> https://npmjs.org/search?q=soap
14:57 < NuZZ_> you must all assimilate into the JSON master race
14:57  * deoxxa just spent two days implementing saml, xml-c14n and xml-dsig
14:58 < g0z> we finally switched to json
14:58 < Lorentz> therealkoopa: ?
14:58 < greelgorke> soap wsdl is cool..... for code generatore
14:58 < therealkoopa> Lorentz: Haha, I guess you're not thlorenz
14:59 < Lorentz> I'm not, no
14:59 < therealkoopa> Lorentz: My apologies.
14:59 < Lorentz> 'salright, happens, haha
15:04 < greelgorke> sign, any recomendations on twitter client supporting streaming api?
15:10 < greelgorke> hmm i guess i just go on with request
15:29 < james`> when working with large sets of data in a database and completely staying away from the web - would node be typically faster than php
15:31 < EyePulp> james: it's a little broad of a question.  I think you need to be more specific.
15:32 < james`> say for e.g you have a database of 10 million records, and you're looping that database and then checking if each record exists in a file, if it does writing it to a new file
15:32 < james`> is that an okay example
15:32 <@isaacbw> the scripting language won't be a limiting factor there
15:33 < EyePulp> james`: Not really.  
15:33 < genazt> hiho
15:33 < james`> ah okay
15:33 < james`> where does it come into playing a difference?
15:33 <@isaacbw> usability
15:33 <@isaacbw> and the event loop and asynchronous io stdlibs
15:34 < EyePulp> james`: I think both solutions could be made efficient.  I think Node would about a million times more fun, and would more easily run in parallel if you didn't have dependencies from one record to the next
15:34 <@isaacbw> but mostly javascript is just a lot more fun than php ;P
15:34 < james`> ahh okay
15:35 < james`> i thought one would have a massive performance edge
15:35 < EyePulp> Not sure what the method for getting parallel operations running in php is.
15:35 <@isaacbw> james`: it depends on what you're doing
15:35 < EyePulp> james`: as with any solution, you can use good tools to bad things.
15:35 <@isaacbw> if you're just running db io in a loop, it won't matter much
15:35 < genazt> first of all you enter a new state with js on servers
15:35 < EyePulp> *to do
15:35 < genazt> php has an very old state, so many blocking librarys are written 
15:36 < james`> it's also xml parsing, writing /reading a file, etc
15:36 < genazt> which doesnt run well with parallel
15:36 <@isaacbw> your mind expands to new spiritual planes of understanding
15:36  * EyePulp is a few words short of a sentence today.
15:36 <@isaacbw> james`: again, your OS, network, and database will be the limiting factors there
15:36 < james`> alright
15:37 < genazt> most of all network applications the first limit ou reach is the network limit :D
15:37  * EyePulp likes that this channel doesn't engage in speculative chest-thumping about node's capabilities.
15:37 < pachet> millions of concurrent connections
15:37 <@isaacbw> ^^
15:37 < genazt> currently paused connections :D
15:37 < pachet> sh
15:38 < pachet> you're undermining the marketing
15:38 < genazt> i know :D
15:38 <@isaacbw> better than millions of inactive threads
15:38 <@isaacbw> which won't happen
15:38 < genazt> php can handle 1 million request/s
15:38 < genazt> (on a 16 * 4,8 ghz box with 64 gb ram)
15:38 < genazt> :D
15:39 <@isaacbw> doing what
15:39 < genazt> echo "helloe world";
15:39 < genazt> :D
15:39 <@isaacbw> :D
15:39 <@isaacbw> sammich so yummy
15:40 < genazt> well php is good in his use case :D
15:40 < genazt> but his use case smallers :D
15:40 <@isaacbw> it's "not bad"
15:42 <@isaacbw> I don't think php is ever good
15:42 < safani> why
15:43 <@isaacbw> because it's yucky
15:44 < mkozjak> what modules would you recommend for logging and logrotating? (thousands of files once per day) or should i just go manual and use 'filesystem'?
15:46 < genazt> well i have written a heavy logger which also supports file writing
15:46 < genazt> and logrotation
15:47 < genazt> do i have the possibility to inject / change a function body ?
15:48 < devoidfury> genazt: you can replace a function with a wrapper
15:48 < genazt> yes but does that also work on a dynamic basis ?
15:49 < genazt> say i have a function x in module z
15:50 < genazt> can i, from another module, overwrite function x on module z ?
15:50 < genazt> and build a wrapper for it ?
15:50 < devoidfury> yes
15:50 < genazt> how ?
15:50 <@isaacbw> but be careful doing that
15:50 < genazt> well its only for my modules
15:50 < genazt> i will build parameter injection with that :D
15:51 < devoidfury> genazt: I'm doing that with a debugger for express, check this for an example: https://github.com/devoidfury/express-debug/blob/master/lib/panels/profile/inject.js
15:52 < devoidfury> genazt: the key there is the hijack function
15:52 < mkozjak> should i use fs.createWriteStream over fs.write for the application that writes to the file all the time and is supposed to rotate that files daily?
15:53 < genazt> mkozjak, yes
15:54 < genazt> devoidfury, thanks for the link :D
15:54 < mkozjak> genazt: do you maybe have some examples of how your log rotation works?
15:55 < genazt> mkozjak, https://gist.github.com/geNAZt/5503194
15:55 < genazt> but this is only the filewriter plugin for my logger
15:56 < genazt> and its still not meant for production since it checks to often
15:57 < mkozjak> ok
15:57 < genazt> but thats one integer change :D
15:57 < genazt> change 10 to like 100 and it should be fine
15:59 < genazt> also winston has support for logrotation
15:59 < brainproxy> do the Q devs hang out in here or is there a preferred channel for js/promises dev talk
15:59 < genazt> https://github.com/flatiron/winston
16:09 < davesque> niggler: i figured out the answer to my question yesterday..
16:09 < niggler> cool what was it?
16:10 < davesque> niggler: when you run jasmine with grunt-contrib-jasmine, it creates a spec runner template with the default name of _SpecRunner.html...i just served that file through an ad-hoc web server and opened it in chrome :P...
16:10 < niggler> ah
16:10 < niggler> nice
16:10 < davesque> niggler: pretty simple...so simple i hadn't thought of it
16:11 < foofoobar> Interesting new benchmarks: http://www.techempower.com/benchmarks/#section=data-r4
16:11 < niggler> davesque but the node debug stuff is pretty cool
16:11 < niggler> its like gdb
16:12 < NuZZ_> http://www.techempower.com/benchmarks/#section=data-r4
16:12 < davesque> niggler: i should check that out.  for now at least i'm making progress again.  it turned out the code i was testing was fine, but the test case was bad :)
16:13 < niggler> why are there two nodejs items foofoobar 
16:13 < NuZZ_> foofoobar, i see u browsin hackernews
16:13 < foofoobar> niggler, have a look right, there are different attributes
16:13 < foofoobar> like different framework/database/etc
16:13 < foofoobar> NuZZ_, right ;)
16:13 < NuZZ_> node actually does pretty well
16:14 < foofoobar> I thought go and nodejs are on the same level. But these new results are astonishing 
16:14 < foofoobar> yeah node does good
16:14 < niggler> node does well
16:14 < NuZZ_> itbut not great
16:14 < NuZZ_> seems vertx slaps it around in most benchmarks
16:15 < NuZZ_> im just thinking about event based workflows, i dont really know how most of the others work :p
16:15 < niggler> whats onion
16:15 < NuZZ_> because that has inherent benefits
16:16 < NuZZ_> i looked it up, looks cool but it scares me to be coding in C. doesnt sound very fun
16:16 < niggler> onion is smoking everyone in latench
16:16 < niggler> *latency
16:16 < NuZZ_> https://github.com/davidmoreno/onion/
16:16 < foofoobar> niggler, C platform
16:16 < NuZZ_> yeah i mean, C is god-mode really
16:17 < foofoobar> fast run speed, slow dev speed
16:17 < NuZZ_> pretty much
16:17 < niggler> how do you see the code
16:17 < niggler> *for each benchmark
16:17 < NuZZ_> but it would make sense to learn this so when you need to make a performant app you can use onion
16:17 < genazt> well you also can use go
16:17 < NuZZ_> even if it's just a json api
16:18 < foofoobar> niggler, there is a git repo where you can view all source codes
16:18 < NuZZ_> i wonder if that asm.js stuff will be useful for node.js benchmarks
16:18 < NuZZ_> the so called bytecode for the web
16:18 < niggler> asm.js: the itanium of the web
16:18 < NuZZ_> its 2am i may not be retrieving memories correctly
16:19 < niggler> foofoobar link?
16:19 < foofoobar> I already wrote some apps in go for the web. It works good, but it's still very young and because there are not that many 3rd party libs you have to write a lot on your own
16:19 < NuZZ_> i c
16:19 < foofoobar> niggler, the blog post: http://www.techempower.com/blog/2013/05/02/frameworks-round-4/ and the github: https://github.com/TechEmpower/FrameworkBenchmarks
16:19 < NuZZ_> im going to abandon ship, nn
16:21 < niggler> is node-mysql the standard thing?
16:21 < r1chard> I really like the idea of asm.ks
16:21 < r1chard> asm.js
16:21 < niggler> how does it compare to node-mariasql
16:21 < niggler> (https://github.com/felixge/faster-than-c)
16:21 < r1chard> But it won't pick up.
16:22 <@isaacbw> niggler: it seems to be the popular choice
16:22 < niggler> isaacbw performance-wise
16:22 < r1chard> Hmm or it might.
16:22 < genazt> is node-mysql 2 not faster then node-mariasql ?
16:22 < niggler> i dunno genazt hence my question
16:22 <@isaacbw> would the driver really have much flexibility in speed assuming nothing ridiculous was happening?
16:23 <@isaacbw> it's basically just wrapping the protocol with javascript
16:23 < genazt> well no :D node-mysql is the first async driver for mysql
16:24 < genazt> then mariadb kicked in with the async c driver and the bindings to node
16:24 <@isaacbw> reeaaallly
16:24 < genazt> but the talk about faster-than-c shows that the node-mysql with a new parser could beat that
16:24 < mscdex> first async? come on... i had a child_process-based mysql driver first :-P
16:24 < safani> hey i'm trying to manipulate the dom as i normally would with node
16:24 < genazt> child_process based wtf :D
16:24 < safani> like with jquery
16:24 < mscdex> yeah :-D
16:24  * niggler high-fives mscde
16:25 < safani> is there a way to not use jquery
16:25 < genazt> safani, node doesnt have a dom
16:25 < niggler> safani I'm told vanillajs has some cool stuff
16:25 < safani> right i see, so how wouldi do things like drag and drop and code for that in node
16:25 < genazt> node is server sided js
16:25 < deoxxa> safani: i think you're confused about what node is
16:25 < genazt> no drag and drop or something
16:25 <@isaacbw> safani: you wouldn't
16:25 < mscdex> niggler: genazt: https://github.com/mscdex/node-poormansmysql
16:25 < pachet> drag and drop your routes
16:25 < pachet> onto your router
16:26 <@isaacbw> jsdom allows you to manipulate a dom-ish structure in node, but it has no concept of front-end or rendering
16:26 < safani> so your saying i work with front end separately
16:26 < pachet> drag and drop your performance onto your benchmarks
16:26 < mscdex> ha, my first commit on that project was almost 3 years ago today
16:26 < mscdex> time to celebrate!
16:26 < pachet> last commit, 3 years ago tomorrow
16:26 < genazt> mscdex, nice module you have there for 1980 :D:D
16:27 < mscdex> it actually worked pretty well since the command line client had xml output
16:27 < safani> isaacbw i am testing derbyjs out which updates the client and provides views etc... why wouldn't i be able to update the dom
16:27 < genazt> yes but what about spawn times and so ?
16:27 < safani> derby is doing this
16:27 < niggler> is nodejs hindered by poor multicore scaling?  I wonder what would happen if the cores were limited
16:28 <@isaacbw> safani: node.js is just a way of running javascript applications from the command line
16:28 <@isaacbw> it isn't a browser
16:28 < mscdex> genazt: i wasn't concerned so much about that at that point, since there was no mysql driver for node at that time. i was happy just to have *something* :-)
16:28 <@isaacbw> niggler: you could just start up another process
16:28 < niggler> I'm wondering if these guys did that
16:28 < genazt> mscdex, which version had node back then ?
16:28 < devoidfury> safani: you'd need to do that in the client-side script, which isn't done with node, it's done client-side in whatever engine they're using
16:29 < pachet> niggler: doubtful, but the src is all there
16:29 < mscdex> but anyway regarding speed, mysql2 can outperform mariasql. but there are some things that mysql2 does not handle properly, like escaping and parameter parsing
16:29 < genazt> or bignumbers :D
16:29 < mscdex> genazt: the readme says 0.1.92+
16:30 < mscdex> very old node version :-D
16:31 < genazt> y
16:31 < mscdex> genazt: true. the faster performance is nice about mysql2, but I prefer the API and "everything is a string except nulls" feature of mariasql
16:32 < genazt> if i browse npm modules i see much "old" modules which are meant for node version 0.1.x
16:32 < niggler> genazt keep a list
16:32 < Willox> mscdex, what's so good about 'evertying is a string except nulls'?
16:32 < mscdex> genazt: the real old modules you won't find on npm ;-) because they existed before npm was around
16:32 < genazt> you can decide in which you would cast it
16:33 < genazt> well the first thing i found was old gd modules
16:33 < Willox> Any specific cases?
16:33 < niggler> Willox you don't have to deal with date issues 
16:33 < genazt> Willox, number above 31bit
16:33 < mscdex> Willox: lots of reasons. type casting headaches go away, v8 can perform more optimizations, etc
16:33 < Willox> Ok
16:33 < Willox> high bit ints and dates make sense
16:34 < mscdex> it also mirrors PHP's mysql driver behavior, so people coming over from PHP will find the same behavior comforting
16:34 < Willox> Everything I use does it the same way as this, too
16:34 < genazt> well php msysql drivers have auto casting
16:34 < genazt> which is bad :D
16:34 < Willox> mysql_ doesn't
16:35 < mscdex> genazt: i'm referring to the original binding
16:35 < mscdex> the one that is now "deprecated"
16:35 < genazt> y
16:39 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:42 < niggler> what are the performance characteristics of cluster?
16:45 < paulkon> is there a way for the server to emit an event and pass in a callback to the client for the client to invoke?
16:45 < paulkon> basically the server requesting something of the client
16:45 < bnoordhuis> niggler: slighty less than linear, usually
16:45 < paulkon> via socket.io
16:45 < bnoordhuis> *slightly
16:49 <@MI6> joyent/node: isaacs v0.10 * 0e21d7b : doc: link joyent logo in website footer - http://git.io/59qq7A
16:51 < pachet> bnoordhuis: is cluster just sugar over cp.fork
16:52 < bnoordhuis> pachet: yes
16:52 < bnoordhuis> it's pure js, no magic involved - you just need some knowledge of node's internals
16:52  * bnoordhuis is off to dinner
16:52 < pachet> seeya
16:53 < sinclair-work> hi all
17:09 < niggler> dumb git question: is there a way to pull all branches at once?
17:13 < owen1> i asked it a while ago but not sure what was the conclusion. is it safe to append stuff to a file using fs.appendFile from 2 processes?
17:13 < owen1> (at the same time)
17:14 < niggler> owen1 best to avoid it
17:14 < mscdex> owen1: you can always use something like flock() to avoid race conditions
17:14 < owen1> niggler: it might corrupt the file?
17:14 <@isaacbw> niggler: you can list them pretty easily
17:15 < mscdex> i think for appending though you are probably safe
17:15 < mscdex> i dunno though
17:15 < mscdex> owen1: here's flock() if you want it: https://github.com/baudehlo/node-fs-ext
17:15 < owen1> is flock part of node
17:15 < mscdex> :-)
17:16 < owen1> thanks
17:20 < pachet> we're all part of node
17:20 < pachet> group hug
17:20 < pachet> hey dont touch me there
17:20 < cdepauw> why does git use submodules?
17:21 < cdepauw> if a git repo cloned inside another cloned git repo is ignored by the parent repo
17:21 < cdepauw> why cant the child repo continue to work like a repo that is not a child of another repo?
17:24 < niggler> cdepauw a submodule is a few lines in metadata
17:28 < cdepauw> niggler what is your point?
17:29 < cdepauw> my point is that this aspect of git is unnecessarily unintuitive
17:30 < niggler> the submodule points to a specific commit
17:30 < niggler> i think newer versions of git do have true "HEAD" submodules
17:31 < niggler> but the point cdepauw is that it was meant to point to a specific snapshot and not the entire repo
17:32 <@isaacbw> cdepauw: luckily it's a part of git that you don't really need
17:32 < niggler> submodules do have their uses
17:33 <@isaacbw> they can be helpful, but it's pretty easy to steer clear if you want to
17:33 < pepijndevos> If I do sock.on("close", server.close), will that try to call server.close with a boolean? :(
17:37 < subsilico> i've been reading about config files
17:37 < subsilico> it seems there is very little consensus on what the right way to handle config files is
17:37 < mscdex> json files!
17:38 < devoidfury> subsilico: i prefer straight js, then you can add a tiny bit of logic and comments
17:39 < subsilico> and require?
17:39 < subsilico> or eval?
17:39 < devoidfury> subsilico: require
17:40 < RLa> can someone recommend a free mysql service, not for production
17:40 < subsilico> so none of the myriad of config libs?
17:41 < mscdex> subsilico: you can require() json files too
17:41 < AAA_awright> Most of your logic should be in libraries, the actual application file itself shouldn't be very large
17:41 < subsilico> but do i really want to be writing json?
17:41 < niggler> RLa why not do it locally?
17:41 < devoidfury> subsilico: it's up to you, just personal preference really
17:41 < niggler> or use a free AWS/azure acct
17:42 < AAA_awright> The "tiny bit of logic" you refer to can go in the application file, and other stuff like private keys and passwords can go into external files and JSON files
17:42 < mscdex> subsilico: it's portable, so there's that ;-)
17:42 < subsilico> isn't js portable?
17:43 < AAA_awright> ECMAScript is, VERY portable
17:43 < RLa> niggler, i can do it but i teach some people programming and i really do not want to get into details of installing mysql on windows machine
17:43 < mscdex> not if you're trying to interpret it in PHP
17:43 < mscdex> or some other non-js language
17:43 < AAA_awright> Node.js code... The developers have made themselves clear they have no intention of cross-platform support
17:43 < RLa> niggler, saas with free tier (like 5MB) would be perfect
17:43 < nathan7> AAA_awright: Interoperability comes at a cost. Operability cost.
17:43 < devoidfury> config = { env1: {}, env2: {} }; module.exports = config[env]; is about all the logic I use in those conf files
17:43 < subsilico> i see what you are saying, mscdex
17:44 < AAA_awright> nathan7: I haven't seen any examples of this
17:44 < niggler> RLa https://aws.amazon.com/free/ or http://www.windowsazure.com/en-us/pricing/free-trial/ or http://www.microsoft.com/bizspark/azure/
17:44 < nathan7> AAA_awright: There is enough cruft in node that's there to not break old APIs
17:44 < AAA_awright> nathan7: On the contrary, it often makes things cheaper
17:45 < AAA_awright> If you're conserned about breaking APIs then release Node.js 2.0.0
17:45 < RLa> niggler, thanks
17:45 < AAA_awright> It's not that hard a problem to solve
17:45 < nathan7> No, the point is that there is a lot of backwards-compat
17:45 < AAA_awright> nathan7: Like?
17:46 < nathan7> AAA_awright: https://github.com/joyent/node/tree/master/lib have a read [=
17:46 < AAA_awright> nathan7: That doesn't help me any
17:47 < subsilico> haha, yeah, that looks like an RTFS
17:48 < RLa> niggler, aws rds looks perfect
17:48 < RLa> free 750hrs per month
17:49 < subsilico> jslint or jshint better for node js?
17:49 < niggler> jshint
17:49 < subsilico> ok
17:49 < subsilico> i was thinking jslint was being overly anal
17:50 < nathan7> it is
17:50 < niggler> jshint also gives finer control over complaints
17:52 < niggler> like with switch statements, you can tell jshint that you expect a case to fall through to the next case (but iirc you can't tell jslint)
17:56 < subsilico> well then, i just tried jshint and after telling it i was using node, it behaved
17:56 < subsilico> must less painful than jslint
17:57  * mscdex shakes a fist at jslint
17:58 < luchobeto_> hi, I have a question, I'm using node_redis and I want to store the result of llen in a local variable.
17:58 < luchobeto_> I can print the value using console.log but when I return the result I just obtain the true value, any ideas?
18:02 < stagas> luchobeto_: gist?
18:03 < luchobeto_> stagas sorry, I don't understand, I'm a noob in node.js ;P
18:04 < beg> So I today tought of something, am I getting better at programming or is nodejs just very easy to use?
18:04 < mscdex> beg: both!
18:05 < beg> mscdex, I have to agree that nodejs has helped me very much in understanding how classes, libraries etc. works, with the "for-dummies" documentation. 
18:06 < stagas> luchobeto_: we need to see some code to help you with your question, use gist.github.com or something
18:06 < ironfroggy> in a package's devDependencies, can i point to a local copy of a package somehow?
18:06 < mikeal> anyone in here using engine.io?
18:06 < subsilico> beg: js is the new basic. :)
18:07 < nathan7> a shame `3rd-Eden isn't around
18:07 < mscdex> mikeal: yeah
18:07 < mikeal> mscdex: do you know if the send() -> ondata is insured to be one-to-one
18:07 < stagas> ironfroggy: bundledDependencies I believe
18:07 < mikeal> or does it sometimes get chunked
18:08 < mikeal> or compacted together
18:08 < mikeal> my preliminary testing shows that it is
18:08 < ironfroggy> stagas: i'm not trying to include them when i publish or anything
18:08 < ironfroggy> i'm just trying to get npm to install them
18:09 < ironfroggy> from a local path, not from the npm registry or a public available git repo
18:09 < mikeal> but i'm sure that in my testing its all websockets and no fallback
18:09 < luchobeto_> stagas here: https://gist.github.com/luchobeto18/5504104
18:10 < owen1> i have a job i want to make exactly at 08:00, 08:05, 08:10, etc. is cron my best option?
18:10 < subsilico> on unix, yeah
18:11 < subsilico> if by exact you mean, within a few seconds
18:11 < ironfroggy> what i'm really getting at is i'm creating a package but i want to test that it actually installs right because i've never made one before for npm
18:11 < stagas> luchobeto_: you need to use a callback, you can't return from async functions
18:11 < owen1> subsilico: yeah. i guess i can also use setInterval, and just read the Date.now to decide what time slot i am in.
18:12 < mscdex> mikeal: hrmmm, i think for the most part it is 1:1, but i'm not sure about websockets if you have a very large message/websocket frame
18:12 < mscdex> if it splits that and then joins them at the other end
18:12 < ironfroggy> owen1: there are scheduling libraries around for that. like https://github.com/ncb000gt/node-cron
18:12 < stagas> ironfroggy: I think you need to use symlinks for that
18:13 < ironfroggy> stagas: not sure i follow how that helps?
18:13 < luchobeto_> stagas do you have any tutorial to do that?, because I need the value stored in that variable
18:13 < stagas> ironfroggy: oh you want to test how it installs
18:13 < stagas> ironfroggy: well, dunno :)
18:14 < stagas> luchobeto_: google node.js callbacks
18:15 < owen1> ironfroggy: so it's almost identical to cron syntax, but instead of using cron, i use node process?
18:17 < subsilico> with that package you could create a new job signature for each time slice so each one would know exactly which slice it was in
18:17 < mikeal> mscdex: i just maxxed out node's buffer allocation and wrote it twice
18:18 < mikeal> and it can in two writes of the exact same length, so it seems to be consistent 
18:18 < mscdex> ah ok
18:20 < owen1> subsilico: cool
18:20 < luchobeto_> stagas thanks, I'm reading it 
18:20 < ironfroggy> owen1: looks like it. havent used it before, just suggesting.
18:21 < owen1> subsilico: have u used it?
18:23 < beg> I want your opinion, how long(ms) does a blocking method have to run to be considered a cpu intensive task?
18:24 < beg> 2ms?
18:30 < subsilico> owen1: no i haven't but i bet it works fine
18:31 < owen1> subsilico: not sure if setInterval can't do that as well though
18:31 < subsilico> honestly, without knowing what you are doing its hard to say if it make more sense to use the lib or just regular cron
18:31 < ironfroggy> i realied i can just give npm install a local path, so i'm doing that, but it just hangs forever, even with -V givinjg no output, no indiciation what its doing or if its broken on something. never completes.
18:33 < owen1> every jumps of 5 minutes (8:00, 8:05, 8:10...) i need to read something from different queue (deferred_0, deferred_5, defrred_10 etc)
18:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:33 < owen1> subsilico: ^
18:35 < timoxley> owen1 just use cron or do something like, check see if there's work to do every n milliseconds 
18:36 < owen1> timoxley: so cron as offose to setTimeout or https://github.com/ncb000gt/node-cron
18:37 < samholmes> events.js:71
18:37 < samholmes>         throw arguments[1]; // Unhandled 'error' event
18:37 < samholmes>                        ^
18:37 < samholmes> Error: EACCES, open '/Users/holmes/..../.…
18:37 < samholmes> Wha's goin on?
18:39 < timoxley> owen1 I don't trust setTimeout/Interval to actually execute anything near the time they're supposed to
18:41 < timoxley> owen1 probably find if you don't need it to be too accurate, but you'll want to do some maths anyway to allow for process restarts and such
18:41 < timoxley> s/find/fine/
18:42 < subsilico> its sorta odd that you have a queue for each time
18:42 < subsilico> it seems more reasonable that you'd have one queue
18:43 < subsilico> but again i can't tell
18:43 < zeromodu_> dang, got contacted by a NASA recruiter.
18:43 < dwierenga> can someone give me a concrete example of how to use async.auto? i'm looking at the README for it and i'm confused by the comments i.e. "// async code to get some data" doesn't tell me anything about what that async call looks like in the get_data chunk, or how to *get* the data.
18:44 < dwierenga> example i'm looking at is https://github.com/caolan/async#auto
18:45 < timoxley> dwierenga you probably don't need it, but it allows you to specify complex dependencies between async operations 
18:46 < timoxley> dwierenga code is usually clearer if you break things up into multiple phases or encapsulate the tasks in another async call
18:46 < dwierenga> timoxley: right. that's what i'm trying to grok.  my use case is "read a directory, read all the foo* files, load them to a DB, read all the bar* files, load them to a DB, send an email"
18:47 < timoxley> dwierenga which items in that can run in parallel?
18:47 < timoxley> looks like a series to me
18:47 < timoxley> oh I guess, reading all the files
18:47 < dwierenga> timoxley: all the files can be read at the same time
18:47 < dwierenga> i just need to guarantee the DB loading order
18:48 < dwierenga> and then when everything is done send an email
18:48 < timoxley> dwierenga yeah so jam them into a async.parallel and wrap the whole process in an async.series/waterfall
18:49 < dwierenga> timoxley: all the examples of how to do that essentially contain ".. and then do the async calls in the usual fashion"
18:49 < dwierenga> and i'm confused as to what the "usual fashion" is
18:50 < timoxley> dwierenga I guess, regular doStuff(function(err, result) {}) style?
18:51 < timoxley> dwierenga not exactly sure what you're asking. the "usual style" will depend on the thing you're using
18:52 < dwierenga> well, for example, in the "make_folder" part of the example, can you show me what the call to fs.mkdir would look like?
18:53 < timoxley> make_dir: function(done) { fs.mkdir('things', done) }
18:54 < dwierenga> timoxley: aha! thank you :D
18:54 < timoxley> dwierenga each async task is a function… the first param to that function will be a callback that you call when your async operation is complete
18:55 < timoxley> dwierenga but yeah, I'd stay clear of "auto". use combinations of parallel/waterfall/series instead
18:55 < Raynos> Does anyone have a good way to send a 500 request to a css stylesheet request and have it display an error to the browser in development
18:56 < keyosk> You're serving CSS with node?
18:56 < Raynos> you can return a javascript file request with a simple "throw Error" script to make error displays in browser easier (sending a 500 to javascript file request is useless)
18:56 < dwierenga> timoxley: "auto" seemed clearer to me than the others since the hash keys actually made a little sense to me
18:56 < Raynos> yeah I'm serving CSS in node
18:56 < ironfroggy> body:before{ content: "OH NO!"; }
18:56 < timoxley> Raynos why not hide everything and set body background content to  "broken" or something
18:56 < Raynos> ironfoggy: WINNING
18:56 < timoxley> yes
18:56 < keyosk> dwierenga : You can use the hash keys with most of the async functions.
18:57 < dwierenga> keyosk: good to know, but none of the documentation tells me *HOW* other than ".. in the usual fashion"
18:57 < timoxley> dwierenga yep, most of them can take an array or a hash… just depends on how you want to consume the final results
18:58 < keyosk> All my my parallel make use of hash, it's just cleaner this way.
18:58 < timoxley> dwierenga use the tests suite https://github.com/caolan/async/blob/master/test/test-async.js
18:58 < jocafa> ironfroggy:  that's… actually pretty clever
18:58 < jocafa> i like it
19:00 < Raynos> ironfroggy: payload = "body:before{ content: " + JSON.stringify(JSON.stringify(err)) + "; }"
19:00 < Raynos> works like a charm!
19:00 < timoxley> this should be a thing.
19:00 < keyosk> That's about the damn'dst trick I've ever seen
19:00 < keyosk> There's gotta be an easier way for you to get that error ;)
19:01 < Raynos> I use res.end("(" + function (err) { throw new Error(err) } + "(" + JSON.stringify(err.message) + "))") for JS as well
19:02 < dwierenga> timoxley: thanks, the test suite at least has some concrete examples of use
19:02 < ironfroggy> wait actually
19:02 < ironfroggy> Raynos: why are you serving CSS from node?!
19:02 < Raynos> because I transpile less dynamically on the fly
19:03 < master5o1> console.error vs throw
19:03 < keyosk> I was wondering when that was going to get brought up
19:03 < jocafa> nifty keen: https://gist.github.com/jocafa/466756bcfd9bf1758f9f
19:03 < ironfroggy> Raynos: suggestion: have a build step!
19:03 < Raynos> thats for production
19:03 < Raynos> for development
19:03 < Raynos> its easier to do it in the HTTP handler
19:03 < ironfroggy> you can automate builds on file changes
19:03 < Raynos> so that I always get the latest shit when I refresh
19:04 < Raynos> automate builds on file changes suffers the few second delay between build done & hitting f5
19:04 < ironfroggy> sure i get it
19:04 < Raynos> your page gets out of sync with the compiled stuff
19:04 < keyosk> Why do you dev with the minified css?
19:04 < Raynos> I prefer the watch build thing too
19:04 < keyosk> Why not just dev with the full css that's not being cached, hit f5 = latest copy
19:04 < ironfroggy> why not just serve up original less for development? thats what i do
19:04 < Raynos> but i started to hit f5 multiple times and then I realized "tooling fail"
19:05 < Raynos> keyosk: thats what I do
19:05 < Raynos> except I transpile less
19:05 < ironfroggy> Raynos: ok, new idea. socket.io connection that triggers hte browser refresh for you after the build is done
19:05 < ironfroggy> dont even hit f5 yourself!
19:05 < keyosk> That's just silly
19:05 < ironfroggy> probably
19:05 < Raynos> ironfoggy: https://github.com/Raynos/live-reload
19:05 < Raynos> done that part already. the next part is injecting new css without refreshing the page
19:06 < ironfroggy> thats a nice idea
19:06 < keyosk> I take it back, it's not just silly, it's a thing. :P
19:06 < ironfroggy> its a lot easier to hot reload css than javascript, at least
19:07 < nbari> hi all
19:08 < nbari> I need some help with this script: http://jsfiddle.net/ZqjwC/
19:08 < nbari> based on some ID's I query a redis DB and later try to fill an array
19:08 < keyosk> You'
19:08 < nbari> but the problem that I am having is that all the time I get empty results
19:08 < keyosk> You're calling callback, but where is it?
19:09 < nbari> sorry here is the update: http://jsfiddle.net/ZqjwC/1/
19:09 < klumsy> so is it possible to submit a form on a webpage via a URL link?
19:09 < keyosk> Moreover, the bottom, callback(false, metadata) will be empty, because it's firing before the foreach completes
19:09 < nbari> mmmmm I see
19:10 < keyosk> You'd need to count the assets id first okay?
19:10 < nbari> well in fact that's what is happeing
19:10 < ironfroggy> klumsy: only for forms with method=GET rather than POST
19:10 < nbari> I know I have 2 assets but how to call the 'callback' when I have all the info ready to be dispatched?
19:10 < perlitch> hey guys is there a way to wrap console.log where it will still report where the wrapped function was called (and not the location of the wrapped function's definition) in the console?
19:10 < keyosk> On each db complete increment a count
19:11 < keyosk> Once the count == length of ids
19:11 < keyosk> You've hit the last db complete
19:11 < keyosk> Then call the callback with the data
19:12 < keyosk> So right where you say metadata[key] = JSON.parse( do something like. jobsDone ++ if jobsDone == assetIDS_length callback(false, metadata)
19:12 < keyosk> Something like that..
19:12 < nbari> instead of using the assetsID.sforeach maybe the for (var i = 0; i < assetsIDs.length; ip++) could be better ?
19:12 < pepijndevos> Can you do an async sort?
19:12 < keyosk> I mean he could do async.. but this is such a simple task
19:13 < keyosk> Nbari you still need to increment in the callback of the database, not in the for/foreach loop
19:13 < nbari> ok
19:13 < keyosk> You could fire off both DB calls at the same time, but the second one might complete before the first one
19:13 < keyosk> In this case you need to be counting on the db calls' return, not the CALL of the db call
19:14 < pepijndevos> keyosk: I do IO in the compare function
19:14 < ironfroggy> pepijndevos: maybe you can gather that data ahead of time, and sort when its all complete
19:14 < nbari> sorry guys, can you please help edit the fiddle so I can better undestand
19:15 < keyosk> Hang on
19:15 < nbari> many thanks
19:16 < keyosk> http://jsfiddle.net/ZqjwC/2/
19:16 < keyosk> I haven't tested but you should understand the modification i've done
19:16 < keyosk> Does it make sense?
19:16 < nbari> yes many thanks
19:16 < nbari> I need to get custom to the 'loop'
19:17 < keyosk> Let me know how that works
19:17 < nbari> sure let me try
19:17 < keyosk> Keep in mind if that json parse fails i'm not accounting for that... so don't KEEP this code as final :P
19:17 < keyosk> Maybe move that under the try catch.
19:19 < keyosk> pepijndevos: My recommendation would be what ironfroggy suggested, you're going to block otherwise
19:19 < mscdex> has anyone noticed issues with http(s) Agents when upgrading from node 0.8 to 0.10?
19:20 < keyosk> I've noticed an issue with http Agents in 0.8 :/
19:20 < nbari> keyosk: many thanks it is working, I own you a beer 
19:20 < keyosk> nbari: My pleasure, just make sure not to forget about what I said about that not being final with the potenial for a fail on json parse, your callback will never get called
19:21 < mscdex> keyosk: like?
19:21 < keyosk> Haha don't get me started :/
19:21 < nbari> I end using this: http://jsfiddle.net/ZqjwC/3/
19:21 < mscdex> erm... ok
19:22 < keyosk> mscdex: I basically can't get them to stay keep-alive long enough :/
19:22 < keyosk> nbari: My only complaint would be regarding your decision to envoke the callback if you have an error with one of hte ids
19:23 < keyosk> Is it really, I must have them ALL or only have one?
19:23 < keyosk> Err, have them 'all' or 'none' .. potentially, if it's the first one in error.
19:24 < keyosk> I just mean, perhaps you should metdata[key] = -1 or something if it's an error :/ And let the rest of the queries finish
19:24 < nbari> ok
19:25 < keyosk> Something like this : http://jsfiddle.net/ZqjwC/4/
19:26 < nbari> oh ok got it 
19:26 < nbari> counter -1 
19:26 < keyosk> Err, not a counter
19:26 < keyosk> Just a 'flag'
19:26 < keyosk> When you examine your returned meta data later, if you see a -1 it's just an indicator that object failed to come from db
19:27 < subsilico> anyone know what the max GET / url len the https module accepts?
19:27 < keyosk> The main goal of that last edit was just to ensure that if there was 1 failure, it didn't mess up all your data.
19:27 < keyosk> If you're over 2,000 characters, switch to POST
19:27 < subsilico> ok
19:27 < subsilico> thanks
19:28 < keyosk> np
19:28 < subsilico> i can control the len, i just wanted to know what i had to work with
19:28 < keyosk> It's fairly non standard
19:28 < keyosk> You might find some webservers configured to chop at 500~
19:28 < subsilico> yeah
19:28 < keyosk> Some might let > 4000 through..
19:29 < keyosk> If you're fully in control of the end point try testing with variable strings and seeing where the webserver is chopping
19:29 < keyosk> If you're hitting multiple servers.. find a common ground, ie 2k
19:29 < subsilico> i don't want to deal with the headache of handling posts securely
19:30 < subsilico> i am controlling both the client and server
19:30 < keyosk> I don't get that? Why is a post more insecure then a get?
19:30 < subsilico> someone could crapflood the post and i'd have to handle it correctly
19:30 < keyosk> Post max length
19:30 < subsilico> its a minor issue
19:30 < keyosk> Someone could crap flood your get for that matter
19:31 < subsilico> oh? i thought the module would autotruncate for me?
19:32 < keyosk> Aikar: you around?
19:33 < mscdex> keyosk: subsilico: the length of the GET request is a browser thing
19:34 < mscdex> particularly with IE
19:34 < mscdex> there is no limit with node
19:34 < keyosk> mscdex: I could configure any number of webservers to stop at a given length, we don't know if the server he was using was node :/
19:34 < slicky> there's always a limit :D
19:34 < keyosk> I was assuming his client was node.
19:35 < keyosk> For instance mscdex : http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestline
19:35 < keyosk> Apache has tuning for this.
19:35 < keyosk> Nginx has it...
19:37 < pepijndevos> 0_o where is the atime, ctime and mtime of a file stored? I delete the file, write it again, and it stays the same
19:37 < keyosk> What OS are you in? :/
19:37 < mscdex> keyosk: right
19:38 < mscdex> i was referring to the client
19:38 < pepijndevos> keyosk: linux
19:38 < keyosk> Which flavor? :P
19:38 < pepijndevos> keyosk: ubuntu
19:38 < keyosk> Hmm okay.
19:38 < mscdex> pepijndevos: are you performing another stat() call afterwards?
19:43 < subsilico> my server is node
19:43 < subsilico> and my client is qt
19:47 < werle> juliangruber: https://github.com/juliangruber/comma/pull/5 fixes #1
19:47 < pepijndevos> mscdex: another stat call?
19:47 < mscdex> pepijndevos: are you not using stat() to get the times for your file?
19:48 < pepijndevos> I'm essentially using this http://stackoverflow.com/questions/10559685/using-node-js-how-do-you-get-a-list-of-files-in-chronological-order
19:48 < mscdex> ok
19:49 < mscdex> pepijndevos: which code block are you using from that answer?
19:50 < pepijndevos> mscdex: but the result is not in the expected order after recreatig a file
19:50 < pepijndevos> mscdex: the expensive and sync one
19:50 < pepijndevos> first
19:51 < keyosk> Does anyone have any experience decrypting a piece of data encrypted with public/private key RSA in node?
19:51 < keyosk> If so : how resource intensive is it, would I expect blocking if I were doing it multiple times per second?
19:51 < mscdex> keyosk: yeah
19:51 < mscdex> keyosk: it's always blocking
19:51 < keyosk> mscdex: What's the verdict?
19:51 < keyosk> :/
19:52 < mscdex> keyosk: there is no non-blocking crypto API currently
19:53 < AAA_awright> What do you mean? All the crypto stuff is CPU
19:53 < Heaplink> When will there ever be
19:53 < pepijndevos> Maybe stat is not my problem... :/ something is weird though. "touch" is supposed to update these things right?
19:54 < mscdex> AAA_awright: running them in a separate thread
19:54 < AAA_awright> Just spawn another Node.js process?
19:54 < Aikar> keyosk: sup man
19:54 < AAA_awright> That's the correct way to scale Node.js
19:54 < Aikar> odd place to message me at
19:54 < Aikar> I was like "why do i have a hilight in node...."
19:55 < mscdex> AAA_awright: not for something like crypto though IMHO
19:55 < keyosk> Hahaha.
19:55 < AAA_awright> mscdex: How's it any different than any other computation?
19:55 < keyosk> I saw your name in the list and I figured i'd bug you.
19:55 < AAA_awright> It's not I/O so it's not "blocking"
19:56  * CornishPasty blocks AAA_awright 
19:58 < keyosk> I want this error message to die. { [Error: ETIMEDOUT] code: 'ETIMEDOUT' }
19:59 < keyosk> I am so sick of having requests time out ~_~
19:59 < keyosk> Something like 10-15 per minute... /sigh
19:59 <@Nexxy> you could always just handle the error
20:00 < keyosk> Make the user wait another 3 seconds and recurse the request?
20:01 < keyosk> Moreover, the API being called executes in will under 1 second. Which is extra confusing
20:01 < keyosk> And the client and server are on the same private LAN :/
20:03 <@Nexxy> then why are you waiting 3 seconds in the first place?
20:04 < keyosk> The implementation is currently hidden from my users, they have no idea this is being tested. So i'm trying a 3 second timeout to see how many are taking atleast this long.. and it seems to be a few.
20:04 <@Nexxy> tricky
20:04 < keyosk> I could set it to be a 1 second timeout, and re-attempt the request 2 extra times before saying 'it timed out'
20:05 < keyosk> It's a load test with actual clients, except they don't know they're being tested :D
20:06 < mscdex> dun dun dunnnn
20:06 < keyosk> It's either that.. or I really put the code visible and in the wild, and then they actually notice the effect of those timeouts :/
20:26 < werle> juliangruber: should be good now
20:26 < werle> juliangruber: I updated the README too
20:36 < Aikar> keyosk|lunch: FYI I havent touched node in a while, im really out of the loop on things now heh :(
20:36 < Aikar> between work (PHP), Minecraft (Java), and Personal Fitness (Ingress ;)), no time to mess with node atm :(
20:40 < AWinterman> I feel like somebody should reimplement d3 in terms of streams. That would make a lot of things clearer, maybe
20:51 < ericelliott> stream all the things!
21:00 < mscdex> ericelliott.pipe(irc);
21:04 < drspin> hi there. thinking of using cloud9's architect - https://github.com/c9/architect to partition my app. any experience with it? thoughts?
21:06 < ericelliott> mscdex: Can I use mariasql to connect to a mysql db?
21:06 < dypsilon> Hi everyone, I'm about to write a daemon using node.js, could you recommend me some usefull packages? The task is to traverse a rest api on a regular basis and generate a static website.
21:07 < foobar_> FuturesJS 
21:07 < foobar_> is a good one i guess
21:09 < drspin> dypsilon: I use request when I make rest calls.  https://github.com/mikeal/request
21:10 < foobar_> what's the most popular full stack framework nowadays?
21:10 < ericelliott> request++
21:10 < foobar_> towerjs development seems like dead 
21:11 < EyePulp> dypsilon: request
21:11 < ericelliott> full stack?
21:12 < AAA_awright> drspin: HTTP is already a RESTful protocol, you don't "make rest calls" as such
21:12 < foobar_> yeah consider RoR or Symfony as full stack frameworks
21:13 < drspin> AAA_awright: true. request makes things slightly easier, especially following redirects.
21:13 < dypsilon> foobar_, drspin, ericelliott, EyePulp thanks everyone
21:13 < werle> dominictarr: any caveats about browserify and Buffer?
21:13 < ericelliott> if I was going to slurp some APIs now and then and inject the results into a bunch of HTML templates and cache the results, I'd probably use request, express, and handlebars to generate the cached HTML, and serve it up with express static server.
21:14 < dominictarr> werle: you want to use typedarrays in the browser
21:14 < dominictarr> I don't know much about that, though.
21:14 < dypsilon> ericelliott, so you would use express only to server static content or for something else?
21:14 < werle> dominictarr: so I should just shelf the idea of trying to rewrite Buffer or using browserify with it
21:15 < dominictarr> you can use buffer in browserify
21:15 < ericelliott> dypsilon: that depends on the project
21:15 < dypsilon> foobar_, I think node has no such thinkg as a full stack framework because node community is centered around small libraries, not giant frameworks.
21:15 < werle> dominictarr: sweet
21:15 < dominictarr> see buffer-browserify
21:15 < mscdex> ericelliott: yes
21:15 < werle> https://github.com/toots/buffer-browserify
21:15 < werle> yeah
21:15 < werle> I saw that
21:15 < werle> but I wanted to make sure
21:16 < dypsilon> werle, according to substack you can use Buffer with browserify but it's clumsy
21:16 < AAA_awright> I don't know why Node.js doesn't use UInt8Array
21:16 < werle> dypsilon: hmm
21:16 < foobar_> yeah dypsilon that looks like the case :)
21:17 < dypsilon> foobar_, personally I enjoy hapi lately.
21:17 < qard> Has anyone made a library that allows you to place a stream between two other streams to allow the source or destination stream to be hot-swapped with a different stream?
21:18 < dypsilon> foobar_, you could also look at flatiron and express
21:18 < qard> I need to detach one stream and attach a different one.
21:19 < werle> dypsilon: when does Buffer become clumsy in the browser?
21:20 < beg> I have an issue, myfoot() = 'hurts';  help
21:20 < foobar_> express is good but it's not full stack. 
21:21 < dypsilon> werle, as soon as you require it somewhere. http://vimeo.com/62988591
21:21 < werle> dypsilon: thanks for sharing
21:21 < dypsilon> werle, you are welcome
21:21 < FunnyLookinHat> foobar_, What would you say is full stack?  I'm always looking for suggestions :)
21:22 < FunnyLookinHat> I'm not aware of anything within Node.JS that is...
21:22 < dypsilon> I'm not aware of anything within entire programming community that is full stack
21:22 < FunnyLookinHat> heh -good pt.
21:23 < FunnyLookinHat> One thing I like about Node / NPM is how packages fit specific needs and you pick & choose only what you need.
21:23 < dypsilon> unix kernel, may be
21:23 < FunnyLookinHat> But I wouldn't be opposed to trying something out that was.
21:23 < Heaplink> Just like Sublime Text 2
21:26 < dukedave> Is there anything wrong in principal with this design:    https://gist.github.com/dukedave/5505590
21:26 < luchobeto_> stagas I have read about callbacks and I have changed my code but itś giving me an undefined response, could you checked please? https://gist.github.com/luchobeto18/5505585
21:27 < luchobeto_> *check it
21:27 < tim_smart> isaacs: Have you tested the performance impact of writev yet?
21:28 < tim_smart> Interested to see if Fedor's patches have improved write performance
21:29 < tim_smart> (Question for anyone who has tested/benched this really)
21:30 < foobar_> FunnyLookinHat express is an excellent core but you still have to do a lot of plugging. i would expect a fullstack framework to have done that plugging for me so that it's more error prone and i save up dev time cost. 
21:31 < FunnyLookinHat> foobar_, True 
21:31 < sinclair> hi everyone
21:31 < pachet> FunnyLookinHat: mixing and matching is what all true warriors strive for
21:32 < foobar_> :)
21:33 <@isaacs> tim_smart: yes, it has a noticeable benefit for http chunked encoding responses
21:33  * tim_smart is happy
21:35 < dypsilon> foobar_, mix and match or go write php! AAARR!
21:35 < FunnyLookinHat> pachet, heh ...  well yeah, you get your "stack" that you go to for starters and then add as necessary, etc.
21:35 < dypsilon> foobar_, kidding, well you could always look at meteor, but meh
21:35 < tim_smart> isaacs: https://github.com/joyent/node/blob/master/lib/_http_outgoing.js#L502 <- This isn't using cork. Should probably tinker and see if it makes a difference.
21:35 < foobar_> Arrr :D
21:36 < foobar_> meteor looks like the future
21:36 < sinclair> anyone seen that green head up in the title bar in Chrome on nodecasts.net and know what it is?
21:36 < dypsilon> meteor looks more like a mistake to me
21:36 < foobar_> but it's not working on windoze
21:37 <@isaacs> tim_smart: oh, huh.  i thought it was.
21:37 < beg> is there a javascript equivalent of http://nodejs.org/api/util.html#util_util_format_format ?
21:37 < beg> native 
21:37 <@isaacs> tim_smart: oh, i see, it's using cork for the normal chunked section, but not there.
21:37 < kenperkins> so if you try to tls.connect to a non-existant address how do you capture that? stream.on('error') doesn't seem right
21:37 <@isaacs> tim_smart: yeah, it'd be good to remove that magic number there.
21:38 < TimTim`> -_-
21:38 < purr> TimTim`: ಠ_ಠ is an IRC client/IRC client framework.
21:38 < TimTim`> ಠ_ಠ
21:38 < TimTim`> lol
21:39 < foobar_> :D
21:41 < tim_smart> kenperkins: var tls = require('tls'); var s = tls.connect('123.123.123.123'); s.on('error', ...); Works for me
21:41 < Havvy> isaacs: Did you see http://www.irc-wiki.org/Policy_on_Trolling yet?
21:41 < kenperkins> tim_smart: hmm, trying again
21:41 < kenperkins> didn't work for me yesterday on the plane, maybe because wifi was off?
21:42 < tim_smart> kenperkins: It should catch the error
21:42 <@isaacs> Havvy: i hadn't!  that's awesome!
21:43 <@isaacs> Havvy: are you connected to this at all?  "If an op bans you, another op is definitely not going to unban you unless they agree it’s a good idea." is kind of awkward with the ambiguous "they" reference
21:43 < Havvy> Yes. And yeah, it is ambigous.
21:43 <@isaacs> Havvy: Woudl be better to s/they agree/the op who banned you agrees/
21:43 < s5fs> isaacs: "Most so-called trolls are immature boys", isn't that sexist?
21:43 <@isaacs> s5fs: no more so than the data.
21:44 < s5fs> won't somebody please think of the immature children?
21:44 <@isaacs> s5fs: show me a female troll, and i'll change the post.  most trolling is the result of testosterone poisoning during male puberty.  girls have other things at that age.
21:44 < Havvy> I've seen female trolling at a more insidious level.
21:45 <@isaacs> yeah, not usually on irc
21:45 < s5fs> isaacs: i'm just thinking gender should be removed
21:45 <@isaacs> and it's not like i'm trying to make this more popular, so if i can help exclude females from the world of trolling, then so much the better.
21:45 < s5fs> trolls can identify with any gender, you know?
21:45 < Havvy> isaacs: Yes. On IRC. Specifically, I've had girls (under 18yo) send fake logs of other members sending them porn.
21:45 <@isaacs> if i could also exclude males from the world of trolling, I would.
21:45 < bnoordhuis> there are no women on irc. they're either guys or fbi agents (when they're pretending to be < 18 years)
21:46 < Da_Wi> hello. I have a question to a specific module. it's db-mysql. If I make a select on data and want to get a string i get ->'string'<-, where the resulting string contains a ->'<- in front. How to get the real string without the apostrophe?
21:46 < s5fs> bnoordhuis: haha!!
21:46 <@isaacs> and, in fact, calling out the fact that they're acting like little boys kinda helps do that.
21:46 < s5fs> I beleive calling them "little children" is probably good enough
21:46 < pachet> s5fs: are you trolling or srs
21:47 <@isaacs> just to clarify, i don't think that all mentions of gender are inherently sexist.  we ARE biological creatures, and gender is a huge part of that experience for most humans.
21:47 <@isaacs> i think it's bad when you start presuming that one gender or the other is more inherently worthy or smart or valuable.
21:47 < s5fs> isaacs: i agree, just thought I'd pitch in my $0.02 cuz.. well, it's better than writing docs atm
21:47 <@isaacbw> "can't focus, rant on irc"
21:48 < s5fs> isaacs: but you kind of are with your statement that "most are little boys"..
21:48 < Havvy> Change made a few minutes ago on that wiki page, FYI.
21:48 < s5fs> haha abso
21:48 <@isaacs> but it's not like i'm disparaging all men.  just calling out the fact that, in my experience with trolls and online communities over the last 20 years or so, 100% of trolls have been male.
21:48 < Havvy> 99% ;)
21:48 <@isaacs> Havvy: you've met 1 female troll and 99 male trolls?
21:48 <@isaacs> Havvy: it's 100% until there's at least a single specimen.
21:48 < dypsilon> how do you know they were male
21:49 < Havvy> Yes, I've seen female trolls.
21:49 <@isaacs> well, all the ones that i came to know whether they were male or female.
21:49 < s5fs> isaacs: does it really matter? removing the 'little boys' part would do nothing but improve the document imho.
21:49 < s5fs> isaacs: anyways, thanks for listening :) i defer to you, very cool to see your policy posted.
21:49 <@isaacs> s5fs: CC-By gives you remix rights.
21:49 <@isaacs> s5fs: feel free to change it if you'd like.
21:49 < thomblake> isaacs: I disagree. Virtually all mentions of gender are sexist.  Well, genderist at least.  Recognizing that the distinction is worth noting is pretty much the main problem.
21:49 < Havvy> The IRC-Wiki has an inclusionist policy. ;)
21:50 <@isaacs> also, in context, it's already qualified with a "most"
21:51 <@isaacs> so while i am here telling you that 100% of the trolls i've known on irc were male, and most were young, i'm only claiming in general that this is evidence that *most* trolls are immature boys.
21:51 <@isaacs> and in fact, i'm claiming that most of them are not actually ban-worthy.  they're just kids who are having a bit of trouble acting politely.
21:52 < merpnderp> Are the node.js mysql drivers not so fast? http://www.techempower.com/benchmarks/#section=data-r4
21:53 < tim_smart> merpnderp: mariasql is pretty fast
21:54 <@isaacs> i thought felixge's mysql thing was pretty good,too
21:54 <@isaacs> i haven't done much with it
21:54 < Havvy> Isn't mariasql just a fork of mysql?
21:54 < merpnderp> tim_smart: The fastest results on that page use mysql. Wondering why the huge difference between node+mongo and node+mysql 
21:55 < Havvy> merpnderp: mongo vs. mysql  ;)
21:55 < merpnderp> Havvy: except the fastest results on that page use mysql.
21:55 < Havvy> mysql has had years and year and years to optimize.
21:56 < bnoordhuis> merpnderp: the page is a little light on details unless i missed it. it doesn't mention what version of node it used, what v8 flags if any, what mysql driver(s) and so on
21:57 <@isaacs> Yeah, i have a hard time taking giant comparative benchmarks like this very seriously.
21:57 < merpnderp> bnoordhuis: https://github.com/TechEmpower/FrameworkBenchmarks
21:57 <@isaacs> it's a ton of work to figure out if they're even worth looking at.
21:57 <@isaacs> i'd rather spend that time just comparing node to node, and making it continually improve.
21:57 <@isaacs> i mean, we *know* where node's crazy slow.  no sense worrying about anyone else.
21:58 < bnoordhuis> merpnderp: mysql-libmysqlclient
21:58 < kenperkins> isaacs: you wfh or out of an office?
21:58 < merpnderp> isaacs: I agree. Take these things with a grain of salt. Just curious why the results for so divergent for mongo and mysql.
21:58 <@isaacs> kenperkins: today?  wfh
21:58 < bnoordhuis> isn't that the the one to the native bindings? that uses the thread pool?
21:58 < Havvy> isaacbw: Which parts are crazy slow?
21:58  * kenperkins just in town for 2 days, missed the talk tuesday night
21:58 < kenperkins> had a nice chat at rackspace office with pquerna last night
21:59 <@isaacs> Havvy: There is significant overhead around buffer creation
21:59 < bnoordhuis> merpnderp: someone should probably send a PR that uses felixge's node-mysql
22:00 < Havvy> Oh. Yeah. That sucks.
22:00 <@isaacs> Havvy: that's probably the most difficult one to crack at the moment.  and really, "getting a char* into javascript" has bascially been Node's toughest problem since day `1
22:00 <@isaacs> Havvy: the GC hooks we use are expensive to set up.  but the alternative is much more complicated.
22:00 < Havvy> MutableString host object?
22:01 <@isaacs> Havvy: if you've gota few weeks, hang out in #libuv and chat with trevnorris and indutny and bnoordhuis and me about it.
22:01 < AAA_awright> isaacs: UInt8Array?
22:01 <@isaacs> ok, let's not revisit the whole "we should use ArrayBuffers instead" discussion.
22:01 <@isaacs> Chrome has the same problems we do (worse, actually)
22:01 < Havvy> I'm *really* not that good a programmer.
22:01 <@isaacs> :)
22:01 < AAA_awright> Does it not solve the problem?
22:02 <@isaacs> Havvy: that's a safe thing to remember.  not being a good programmer keeps you from writing complex programs.
22:02 <@isaacs> AAA_awright: no, it does not.
22:02 < AAA_awright> You ask "How do we import a UInt8 array into ECMAScript", there you go
22:02 < pachet> merpnderp: their setup code is dubious
22:02 < pachet> of course i'm biased
22:02 <@isaacs> AAA_awright: speed.
22:02 < merpnderp> bnoordhuis: I use mongoose so that I have free time to write more node. I don't even have a mysql install lying around and haven't used it in so long I'd have to look up how to optimize for my system.
22:02 <@isaacs> AAA_awright: it's not fast enough.
22:02 < AAA_awright> So fix that?
22:02 <@isaacs> AAA_awright: i'll get right on tit.
22:02 < AAA_awright> Prevailing wisdom is don't care how fast V8 runs, it'll change next release
22:03 <@isaacs> AAA_awright: that's easy for you to say :)
22:03 < bnoordhuis> merpnderp: okay. anyway, the benchmark looks a little dodgy
22:03 < AAA_awright> *release anyways
22:03 < Havvy> I've got better reasons to not write complex code than not being at the level of being able to hack on libuv.
22:03 < merpnderp> bnoordhuis: I should have just assumed that in the first place. These things are always written by someone with an ax to grind or not enough time to do it right.
22:03 < AAA_awright> I thought the whole point of *Array is that it runs faster, but idk
22:04 <@isaacs> AAA_awright: if you're running a node program, it's better to just use it for what it's good for (I/O heavy applications) and trust that since computation is a small part of your app, it'll always be fast enough
22:04 <@isaacs> AAA_awright: but, when working on node core itself, we have to care about these things so that you have that luxury
22:05 <@isaacs> AAA_awright: a native C http server sending "hello world", with libuv and http_parser, can outpace node by around an order of magnitude.
22:05 < merpnderp> isaacs: I don't know. V8 looks pretty dang fast: http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=all&lang=v8&lang2=java&data=u64
22:05 < AAA_awright> I'd kind of like having the luxury of building cross-platform applications
22:05 <@isaacs> merpnderp: i'm not saying that V8 is slow.
22:05 < AAA_awright> Personally
22:05 <@isaacs> AAA_awright: sure, that too :)
22:05 <@isaacs> AAA_awright: and really, that just means that we have to be faster than python and ruby
22:06 < chilts> certainly trust that the computation is a small part, but make sure you don't put too much computation into your program (without handing it off elsewhere) :)
22:06 < merpnderp> isaacs: ~50% the speed of Java or mono? That's fast.
22:06 < chilts> btw: I love the cluster module!!!
22:06 <@isaacs> AAA_awright: but i'd like to eventually be more on par with Java.  we are for some things (especially startup time) but if you dump a giantass pile of CPU work on the JVM, it'll crank faster than just about anything.
22:07 < pachet> chilts: yeah its pretty cool
22:07 < pachet> i have a bunch of projects that are trying to do the same thing
22:07 < pachet> less gracefully
22:07 < sinclair-work> hi patchet
22:07 <@isaacs> AAA_awright: so, if your app is "parse the same 200b http request coming repeatedly on this single socket, and write responses in a tight loop", sure, it'll be faster on the JVM
22:07 <@isaacs> AAA_awright: but like, no one's app actually works like that, so who cares?
22:07 <@isaacs> anyway, i gotta go back to crypto refactoring :)
22:07 < merpnderp> the debian shootout has V8 as 11 times faster than Python3.
22:07 < trevnorris> AAA_awright: not sure if this discussion is still going on, but typed arrays will never, and can never, be even as fast as Buffers.
22:08 < sinclair-work> can someone here familar with publishing npm packages help me out a bit
22:08 <@isaacs> sinclair-work: yo
22:08 < pachet> sinclair-work: hi
22:08  * isaacs will procrastinate a little longer...
22:08 <@isaacs> :)
22:08 < pachet> like a bear in the honey jar
22:08 < sinclair-work> hi isaacs 
22:08 < sinclair-work> can i pm?
22:09 <@isaacs> sinclair-work: if you must
22:09 < chilts> if you have a problem publishing to NPM, it might be worth asking everyone, or at least tell us what the problem is
22:09 <@isaacs> sinclair-work: but if it's a general question, i'ts best to ask in-room
22:09 < chilts> it's public anyway, right?
22:09 < AAA_awright> trevnorris: I haven't seen the evidence to suggest that, and in any event, it's not impossible to build one's own UInt8Array implementation
22:09 < trevnorris> AAA_awright: we currently are. the typed array spec still isn't implemented in v8.
22:09 <@isaacs> AAA_awright: if you set out to build a less featureful, faster, UInt8Array implementation, you'd have Buffers
22:10 <@isaacs> AAA_awright: unless you were willing to give up automatic memory management
22:10 <@isaacs> AAA_awright: then you'd have what trevnorris is building now :)
22:10 < trevnorris> :)
22:11 < AAA_awright> >> new Uint8Array(); @trevnorris
22:11 < purr> trevnorris: ReferenceError: Uint8Array is not defined
22:11 < AAA_awright> Someone upgrade purr
22:12 < AAA_awright> trevnorris: idk what you saw but last time I built V8 it was in there
22:12 < leonvv> Hey guys, I keep getting error messages when including node.h, it is included with the node install right ?
22:12 < trevnorris> AAA_awright: no. d8, chrome and node all have implementation outside v8.
22:13 < trevnorris> AAA_awright: check the source: https://github.com/joyent/node/blob/master/deps/v8/include/v8.h
22:13 < AAA_awright> Last I checked it out, I was using SVN
22:14 < trevnorris> ...
22:14 < AAA_awright> I know, idiotic, right
22:14 < trevnorris> no. i mean. the repo is still in svn. =P
22:14 < bnoordhuis> AAA_awright: the thing with typed arrays is that they use copy semantics rather than view semantics
22:14 < trevnorris> just most people I know use the git fork.
22:15 < AAA_awright> bnoordhuis: If you're only reading values that's not a problem
22:15 < bnoordhuis> i should say 'mostly use copy semantics'
22:15 < bnoordhuis> yeah, but it is if you're slicing data a lot
22:15 < AAA_awright> That's still a form of reading
22:15 <@isaacs> AAA_awright: it's a form of reading that is badly affected by copy semantics.
22:15 < bnoordhuis> trevnorris: btw, v8 is gaining native typed arrays in HEAD of trunk
22:16 <@isaacs> AAA_awright: slicing is only a "form of reading" if you have view semantics rather than copy semantics.
22:16 < trevnorris> bnoordhuis: awesome. that's a bunch of code we can rip out of core.
22:16 <@isaacs> AAA_awright: if you have copy semantics, then slice = allocation, reading, and writing
22:16 < bnoordhuis> yep
22:16 < bnoordhuis> it's behind a flag now though, --harmony_typed_arrays
22:16 <@isaacs> oh, man, the Encode function in node.cc is so fucked
22:16 < AAA_awright> And aside, Is isaacs actually present in the channel, because my client says he isn't
22:17 <@isaacs> AAA_awright: i'm here.
22:17 < AAA_awright> And I can't tab complete
22:17 < trevnorris> isaacs: so you noticed that too? ;-)
22:17 <@isaacs> AAA_awright: can you see me?
22:17 < AAA_awright> isaacs: I mean, the channel could be -n
22:17 < AAA_awright> And you're sending without joining
22:17 < boogyman> it's _n
22:17 < AAA_awright> Which would mean you can't see what I'ms aying so
22:17 <@isaacs> AAA_awright: nah, i'm in here
22:17 < boogyman> +n*
22:17 < AAA_awright> Unless you're logged in as another user too
22:17 < M2Ys4U> AAA_awright: try sending NAMES #node.js
22:17 < boogyman> isaacs and isaacbw 
22:17 <@isaacs> ircretary: where is isaacs
22:18 < ircretary> isaacs: isaacs was last seen at 2013-05-02T22:17:51.165Z, in #Node.js saying where is isaacs
22:18 < AAA_awright> Oh I'm looking at the wrong channel mode
22:18 < M2Ys4U> sometimes I get stuck with a ghost userlist too
22:18 < AAA_awright> Huh my client must have missed a JOIN message somewhere
22:19 < pachet> hey dawg, herd u like isaacs
22:19 < trevnorris> bnoordhuis: funny. v8 native array buffers are ~10% slower than d8's implementation.
22:19 < AAA_awright> isaacs: So there's no reason a neatly optmized program, which V8 usually does pretty well, can't determine that an array.slice() doesn't need to be copy, but merely copy-on-write
22:19 <@isaacs> AAA_awright: no reason except time and work, sure.
22:19 < jesusabdullah> no reason except who cares anyway ;)
22:20 < AAA_awright> If that's a legitimate excuse then why optimize anything
22:20 < AAA_awright> Are we trying for high performance or not?
22:20 < jesusabdullah> AAA_awright: because sometimes, you do care (tm)
22:20 <@isaacs> AAA_awright: you optimize the things that are the biggest win and have the least costly to optimize
22:20 <@isaacs> AAA_awright: if ALL you are about is performance, write c
22:20 < sinclair-work> isisaacs: sorry mate, i've gone and written this thing, https://github.com/sinclairzx81/typescript.api/ and i am wondering what i need to do to publish it to npm
22:20 < bnoordhuis> trevnorris: well, it's all very fresh still
22:20 < sinclair-work> er, isaacs
22:21 <@isaacs> sinclair-work: npm help developers
22:21 <@isaacs> sinclair-work: npm init <-- creates a package.json file for you by asking a few questions
22:21 <@isaacs> sinclair-work: npm adduser <-- creates a user account on the registry
22:21 < bnoordhuis> AAA_awright: v8 doesn't do aliasing analysis. nor is that decidable in the general case
22:21 <@isaacs> sinclair-work: npm publish <-- publishes your thing
22:21 < sinclair-work> isaacs: how does it know what to publish tho?
22:22 <@isaacs> sinclair-work: you don't need anyone's permission
22:22 <@isaacs> sinclair-work: because the package.json file.
22:22 < sinclair-work> isaacs: the thing is, i don't want to publish typescript files, only whats in the node_modules directory
22:22 <@isaacs> sinclair-work: also, you can use a .npmignore to tell it to skip certain files.
22:22 <@isaacs> sinclair-work: the node_modules folder is your deps, not your program.
22:22 < pachet> typically its the other way around
22:22 < pachet> ^
22:23 < AAA_awright> bnoordhuis: How does that uniquely impact Uint8Array but not Buffer
22:23 < sinclair-work> isaacs: so, i need to add all the files im publishing to the deps element in the package.json?
22:23 <@isaacs> sinclair-work: oh.... i see what's going on here.
22:23 <@isaacs> sinclair-work: you wriote a thing in ./node_modules/typescript.api/ in your repo
22:23 <@isaacs> and THAT's the thing you want to publish?
22:24 <@isaacs> sinclair-work: typically you'd build your stuff into lib/* or something
22:24 < trevnorris> AAA_awright: the new buffer implementation i'm working on is 4x's faster than ArrayBuffer, and 13x's faster than Uint8Array.
22:24 <@isaacs> sinclair-work: and specify the entry point with the "main" field.
22:24 <@isaacs> sinclair-work: so when i do require('typescript-api') i get ./lib/main.js or whatever you set it to
22:24 <@isaacs> sinclair-work: and that thing can load other stuff interlaly via relative links.
22:24 <@mbalho> trevnorris: is it gonna be the same api as the current Buffer/
22:24 < sinclair-work> isaacs: yeah
22:25 < sinclair-work> isaacs: its not a problem to throw things in the lib directory
22:25 <@mbalho> trevnorris: i was just having a discussion with leveldb folks about how to write portable binary JS code that works in node + works in the browser too
22:25 <@isaacs> sinclair-work: check out how some other modules are built.  like https://github.com/isaacs/redsess or https://github.com/substack/mmmify
22:25 < bnoordhuis> AAA_awright: because it means arraybuffer.slice() will always be expensive
22:25 < trevnorris> mbalho: on the js side, it's exactly the same api. cc side has a few small changes.
22:25 <@mbalho> trevnorris: ah cool
22:25 <@isaacs> sinclair-work: the important thing is:  "main" field in package.json (or just call it "index.js" which is the default anyway)
22:26 < bnoordhuis> AAA_awright: at best, v8 may be able to determine that an arraybuffer doesn't outlive the scope it's used in
22:26 < sinclair-work> isaacs: ok, let me digest all the things you said
22:26 < bnoordhuis> but frankly, it doesn't do a lot of escape analysis so i wouldn't hope for much
22:27 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:27 < AAA_awright> bnoordhuis: If it's not decidable in the general that's only because Uint8Array is more versatile, that doesn't mean you can't optimize it in all the cases that you use Buffer to read data
22:27 < AAA_awright> That you would *otherwise use Buffer for reading data
22:27 < bnoordhuis> i'm not sure i get your point
22:29 < AAA_awright> What uniquely impacts Uint8Array such that it can't be optimized, in all the cases that you would otherwise use Buffer
22:30 < AAA_awright> (for reading data, even slicing it and reading it)
22:30 < AAA_awright> There's this nifty technique called copy-on-write, I mean
22:30 < bnoordhuis> which is hellishly expensive actually
22:31 < AAA_awright> How so?
22:31 < bnoordhuis> both when implemented on the os level or as a gc write barrier
22:31 < keyosk> Aikar: I know. I wasn't even bugging you to ask about node :P
22:31 < bnoordhuis> on the os level: COW means making the page read-only, catch the page fault and make the copy
22:31 < AAA_awright> If you never write to a copy of an array, you don't make a copy, done
22:32 < AAA_awright> (write to either array, I should say)
22:32 < trevnorris> AAA_awright: 2 simple reasons why Uint8Array can never be faster: must always zero fill and sets several read only properties.
22:32 < trevnorris> or even come close.
22:32 < bnoordhuis> also, it only works on the page level, that's usually 4 or 8 kb. not that useful for smallish data
22:32 < bnoordhuis> on the write barrier level: it means checking all writes and having a fallback path that makes the copy
22:32 < bnoordhuis> fallback path/bailout
22:33 < bnoordhuis> oh, i forgot about the zero fill thing - yeah, that too. memset is not free
22:34 < AAA_awright> trevnorris: ES doesn't have undefined memory, like any modern language... If you want that speed, you use C
22:34 < AAA_awright> trevnorris: As for read only properties, since when did that have to be slow?
22:35 < AAA_awright> And do you have any objections to the observation that Uint8Array doesn't necessarially need to copy data always?
22:37 < trevnorris> AAA_awright: how couldn't it? it's in the spec that data must be copied. the only way to take a "slice" it to generate a "view" over the backing ArrayBuffer.
22:38 < AAA_awright> trevnorris: Copy-on-write?
22:38 < AAA_awright> trevnorris: And there's other methods to generate references instead of copies
22:38 < AAA_awright> If it's a reference you want use those methods
22:39 < trevnorris> AAA_awright: ok. we're loosing the original discussion. typed arrays can not and will never be faster than node's Buffers.
22:39 < AAA_awright> That's begging the question >_<
22:39 < AAA_awright> Why?
22:39 < bnoordhuis> AAA_awright: COW is not magic pixie dust that makes performance problems go away
22:40 < bnoordhuis> (as explained above)
22:40 < trevnorris> AAA_awright: I care way way more about instantiation than operations on the data. just to clear that confusion.
22:41 < trevnorris> AAA_awright: and instantiation cannot be faster. and the zero fill is easily the most basic reason why.
22:42 < trevnorris> AAA_awright: and it is incredibly expensive to set read only properties: https://gist.github.com/trevnorris/5506030
22:43 < AAA_awright> bnoordhuis: It's more than Buffer offers, if you want to make a copy of a Buffer
22:43 < AAA_awright> Not an uncommon use case
22:44 < bnoordhuis> AAA_awright: i'm not sure i'm following. if your argument is 'you can copy typed arrays', there is Buffer#copy()
22:44 < AAA_awright> trevnorris: Usually you use getters for that
22:45 < bnoordhuis> doesn't matter. they're also slow. same for properties set from c++ with attributes=ReadOnly
22:45 < bnoordhuis> v8 doesn't handle read-only properties well, for various reasons
22:45 < leonvv> Does node.h come with the node.js ? I can't seem to find it
22:46 < leonvv> node.js install *
22:46 < bnoordhuis> leonvv: it's not installed but node-gyp will download it for you
22:46 < AAA_awright> bnoordhuis: My point, no one claimed copy-on-write is magic pixie dust, but nonetheless that's an effective way of avoiding making copies that need not be made. And that's assuming there's no way to slice such an array without making a copy, which there is
22:46 < leonvv> When will it do that ? When you run node-gyp configure ?
22:46 <@TooTallNate> leonvv: yes
22:46 < leonvv> Thanks !
22:47 < trevnorris> AAA_awright: ok. i'll make you a deal. when I can instantiate an Uint8Array as fast as I can a Buffer, I'll rethink the implementation.
22:47 < bnoordhuis> AAA_awright: i've explained it a few times now. if you still don't get it, there's not much point in going on
22:48 < AAA_awright> bnoordhuis: You haven't pointed to anything... Here's the specification http://www.khronos.org/registry/typedarray/specs/latest/ what part of that intrinsically prohibits Uint8Array from being as performant as Buffer?
22:49 < bnoordhuis> groan
22:49 < AAA_awright> My assertion is that in all cases that one uses Buffer for reading data, you can use a Uint8Array for the same use, they do literally the exact same thing so the performance should also be the same other things being equal, yes?
22:49 < AAA_awright> So if there's a reason performance is not equal I'd suggest that it's a deliberate lack of effort
22:49 < bnoordhuis> only iff you never ever touch the data again after the initial read
22:50 < bnoordhuis> and iff you have some way to fill it without it doing the zero-fill thing first
22:50 < trevnorris> AAA_awright: by whom? we're not going to spend time improving v8's code.
22:50 < bnoordhuis> but like trevnorris said, but your money where your mouth is
22:50 < bnoordhuis> if you're convinced things can be faster, show it. talk is cheap
22:50 < AAA_awright> I'd have to get quite a return out of it before I invest my time into it
22:51 < bnoordhuis> well, you sure don't mind talking about it at length
22:51 < AAA_awright> Talk is cheap?
22:51 < EyePulp> He's getting a return on that though.  Watching people get mad. =)
22:51 < jesusabdullah> didn't you just talk a whole bunch of smack about how effort is a bad excuse for not optimizing?
22:51 < jesusabdullah> JUST SAYING
22:51 < AAA_awright> EyePulp: It's an honest question!
22:51 < s5fs> ^^^
22:52 < jesusabdullah> also bnoordhuis how are you?
22:52 < EyePulp> AAA_awright: It's safe to ignore 90% of what I say.
22:52 < mscdex> tim_smart: yes it is fast :-)
22:52 < bnoordhuis> jesusabdullah: i'm fine, thanks :)
22:52 < mscdex> Havvy: mariasql is a binding to libmariadbclient which is binary compatible with libmysqlclient, but has async counterparts to the ordinary library functions
22:52 < sinclair-work> yay, i just published my first npm module
22:53  * sinclair-work is proud
22:53 <@mbalho> sinclair-work: WOOT!
22:53 < boogyman> congrats
22:53 < AAA_awright> jesusabdullah: Everyone here has defended both sides :p My argument isn't that Uint8Array should be performant, it's that (1) It should be used regardless of performance, and (2) there's no reason it can't be *as* performant as Buffer
22:53 < sinclair-work> npm install typescript.api
22:53 < boogyman> now get working on the 5th ;)
22:53 < sinclair-work> ^ nice !
22:53 < trevnorris> AAA_awright: (!) like hell. performance is key. (2) i'll believe it when I see it.
22:53 < trevnorris>  /!/1
22:54 < AAA_awright> trevnorris: If performance is absolute then we should be writing C
22:54 <@mbalho> also !
22:54 < trevnorris> heh
22:54 < bnoordhuis> AAA_awright: (1) is not an argument, it's an opinion
22:54 <@mbalho> actually the first rule of node is that slowness is a bug
22:54 <@mbalho> to quoteth sir isaac
22:54 < AAA_awright> bnoordhuis: Per se perhaps, my rationalle is backed by economic arguments
22:55 < AAA_awright> It's a decent API with good semantics
22:55 < bnoordhuis> not very well however
22:55 < bnoordhuis> but show me the numbers and we'll talk again
22:55 < AAA_awright> And most importantly, cross-platform
22:56 <@mbalho> i would personally like to see more code that runs in browsers with arraybuffers/typed arrays and in node with buffers that works in both environments
22:56 <@mbalho> cause abstracting the two into one unifying api is not obvious
22:56 < AAA_awright> bnoordhuis: Is that about argument (2)? What numbers would be appropriate for (1)?
22:57 < bnoordhuis> now you're just trolling
22:57 < AAA_awright> trevnorris: Seriously though, at what point do we say we need a decent API more than marginally better performance?
22:58 < bnoordhuis> that one is easy: never
22:58 <@mbalho> yea perf will always be more important to node, and always has been
22:58 < AAA_awright> bnoordhuis: So program everything in C? That's the logical conclusion of your argument, which obviously you don't hold
22:58 < bnoordhuis> fortran rather
22:58 < trevnorris> lol
22:58 < mscdex> fortran.js
22:58 < AAA_awright> ... What are you doing in this channel, bnoordhuis
22:59 < AAA_awright> Seriously
22:59 <@mbalho> AAA_awright: quit trolling
22:59 < keyosk> I'm sorry, I think you meant fortran.asm :/
22:59 < mscdex> fortran.pas
22:59 < AAA_awright> mbalho: Seriously
22:59 < trevnorris> what about fortran.asm.js? isn't there a new standard for that or something?
22:59 <@mbalho> AAA_awright: yes, you are being incendiary
22:59 < AAA_awright> What is bnoordhuis doing in this channel telling us we should program everything in fortran
22:59 < mscdex> fortran.bas
22:59 <@mbalho> AAA_awright: npm install humor-detector
22:59 < AAA_awright> Not us, but at least his own preference
23:00 < AAA_awright> mbalho: "Seriously" I'm asking for a *serious* response to my question
23:00 < trevnorris> which one? you've asked so many now.
23:00 < AAA_awright> trevnorris: Seriously though, at what point do we say we need a decent API more than marginally better performance?
23:00 <@mbalho> AAA_awright: you got an answer already
23:01 < AAA_awright> Which was?
23:01 <@mbalho> AAA_awright: "perf will always be more important to node, and always has been"
23:01 < AAA_awright> "Never" is obviously not correct, otherwise bnoordhuis wouldn't be in this channel
23:01 < AAA_awright> There's some amount of saying "Hey ECMAScript is a pretty cool language to use"
23:01 < trevnorris> you're right. is there an admin that can kick bnoordhuis?
23:02 < boogyman> AAA_awright: do you enjoy being a debby downer?
23:02 < mscdex> node.js rules!
23:02 <@mbalho> yea what is that guy doing in node.js its not like he contributes anything
23:02 < AAA_awright> Despite a small but tolerable performance hit, even if less than most scripting languages, it still exists
23:02 <@mbalho> oh wait
23:02 < bnoordhuis> trevnorris: i could kick myself if it makes you feel better :)
23:02 <@mbalho> AAA_awright: you could start an alternative to node.js that focuses on API
23:02 < trevnorris> lmao
23:02 < s5fs> noduh.js
23:03 <@mbalho> yesde.js
23:03 < AAA_awright> trevnorris: You want to answer my question or what? At what point do we say we need a decent API more than marginally better performance?
23:03 <@mbalho> taking the 'no' out of node
23:03 < s5fs> shoulde.js
23:03 < trevnorris> AAA_awright: ok. i'll try to give you an answer w/ a straight face.
23:03 < no9> mbalho that!
23:03 < AAA_awright> At some point we hit dimishing marginal returns and the marginal cost exceeds marginal benefit
23:03 < AAA_awright> Where is that?
23:04 < trevnorris> AAA_awright: first "decent API" is subjective, and I think most the community would say the current Buffer api is very good.
23:04 < trevnorris> AAA_awright: second, difference in performance from typed arrays to Buffers is currently an order of magnitude, so it's not on the table despite how good you think the API is.
23:04 < AAA_awright> It works for many purposes, sure, but specically I'm talking about cross-platform support
23:05 < mscdex> my strings don't work on Windows!
23:05 < bnoordhuis> AAA_awright: what's stopping you from converting buffers to typed arrays? it works, if you're willing to take the performance hit
23:05 < AAA_awright> bnoordhuis: Likewise, what's stopping Node.js from recompiling Arrays to Buffers prior to runtime?
23:06 < trevnorris> really can't tell if this a serious conversation anymore.
23:06 < bnoordhuis> i'm guessing no :)
23:06 < s5fs> AAA_awright: a passionate contributor willing to do the work, maybe?
23:06 < AAA_awright> If Buffers can do everything that Arrays do, surely you can use Arrays all the time and compile to Buffers where there's common functionality
23:07 < keyosk> A^3 seems to be very serious about his side of the conversation :/
23:07 < jaredhanson> ANN: parcel - for managing software packages on a file server : https://github.com/sifteo/parcel
23:07 < AAA_awright> If correct, this proves my point (2)
23:08 < s5fs> check and mate!
23:08 < nathan7> So, where can we download de.js?
23:08 < AAA_awright> trevnorris: Do I look un-serious?
23:08 < AAA_awright> That's a legitimate thought experiment
23:09 < bnoordhuis> i like AAA_awright's suggestion that we should use source transformations
23:09 < bnoordhuis> especially if that lets me write everything in clojurescript from now on
23:09 < AAA_awright> If Uint8Array really cannot be as performant as Buffer, then it should be impossible to recompile Uint8Array to Buffer
23:10 < AAA_awright> But common sense shows this is not the case, so it must be the case that, if you use only the functionality of Uint8Array that is common with Buffer, it must be the case it can be as performant as Buffer
23:10 < DiegoMax> i have a question, but it is more about JS than node, can i still ask here ?
23:10 < trevnorris> AAA_awright: my last honest point on this: I know because I've spent +100 hours optimizing buffers. we know they're faster, so we're not going to waste time elsewhere. if the community wants to put in the effort, they're welcome to.
23:10 < trevnorris> DiegoMax: ##js might be better.
23:10 < keyosk> DiegoMax: What's the question?
23:10 <@MI6> joyent/node: Sam Roberts v0.10 * 41cbdc5 : doc: document return values of EventEmitter methods - http://git.io/GrmFUw
23:10 < AAA_awright> trevnorris: Not that I don't trust your assertions but I'm trying to figure out WHY
23:10 < DiegoMax> i know how you can use prototype to add methods/properties to existing objects
23:11 < DiegoMax> as in Array.prototype.mymethod = function whatever()
23:11 < DiegoMax> the question is
23:11 < DiegoMax> if i do that, im adding the new method to the case Array object, what if i only want to add the method to a single array instance ?
23:11 < DiegoMax> is that possible ?
23:11 < AAA_awright> So not mocking such questions would be much appreciated
23:11 < trevnorris> AAA_awright: ok, instantiation time is probably the most important. would you agree?
23:11 < keyosk> No, you'd be munging the whole array space that way
23:12 < AAA_awright> trevnorris: Perhaps I'm not familiar with this term, what do you mean exactly?
23:12 < bnoordhuis> DiegoMax: var a = []; a.f = function() { ... }
23:12 < DiegoMax> yah, i understand that, but i cant figure out the syntax to only extend a single instance
23:12 < DiegoMax> oh.... that simple ?
23:12 < DiegoMax> thanks :D
23:12 < bnoordhuis> np :)
23:12 < trevnorris> AAA_awright: time to do "new Buffer()" vs "new Uint8Array()"
23:13 < AAA_awright> I'd say initialization
23:13 < AAA_awright> Alright
23:13 < AAA_awright> trevnorris: Normally you're filling it with data so the initial value shouldn't even matter?
23:14 < trevnorris> AAA_awright: except the spec states it _must_ be zero filled. which adds time.
23:14 < trevnorris> AAA_awright: and we've discussed it'd be helpful if v8 had a lower level instantiator for ArrayBuffer that wouldn't zero fill, but alas. won't happen.
23:15 < AAA_awright> Which is a wise choice, we don't really have undefined values in ES. But that doesn't mean you have to write with zeros, only to right away write another value over it.
23:15 < trevnorris> AAA_awright: memset(0) is part of the instantiation function for ArrayBuffer. so they're no programatic way around it.
23:16 < AAA_awright> But we're speaking in the normative here, need that necessarially be true?
23:16 <@MI6> joyent/node: Sam Roberts master * f8d8122 : event: make setMaxListeners() return this (+6 more commits) - http://git.io/0hCNQg
23:16 < trevnorris> you'd have to talk to the v8 team about that. we can't control it. so as long as they do, they'll always be slower.
23:17 < AAA_awright> I can imagine a V8 that doesn't zero-fill values that are right away going to be filled with another value
23:17 < AAA_awright> trevnorris: So why don't you contribute this performance improvement to V8 instead of to Buffer?
23:17 < trevnorris> well, again that's the v8 teams choice. and currently doesn't do that.
23:17 < AAA_awright> It is an open source project, after all
23:18 < trevnorris> AAA_awright: Buffers are highly specialized. I mean very highly specialized. I've spent the last 2 months optimizing them for such.
23:18 < trevnorris> AAA_awright: and there are non-standard parts in there v8 won't accept.
23:19 < AAA_awright> Like?
23:20 < trevnorris> AAA_awright: i've implemented an internal user controlled memory allocation. so the developer is responsible to .dispose() the memory when done.
23:20 < trevnorris> AAA_awright: it's amazingly faster than instantiating a full Buffer, and I can convert it to a Buffer anytime w/ small overhead.
23:24 < trevnorris> AAA_awright: on the cc api side, we also give the ability to pass a custom callback to reclaim external memory.
23:29 < trevnorris> AAA_awright: ArrayBuffer doesn't give a view into the data. so you have to wrap it in Uint8Array. that requires two instantiations. so loosely could say you're doubling the time.
23:29 < AAA_awright> I don't see how that's much different than a Union
23:30 < trevnorris> eh?
23:31 < AAA_awright> trevnorris: Doubling the time with respect to what?
23:32 < Madwill> anybody know how we can deploy to nodejitsu with an html page
23:32 < Madwill> it says deploy successfull but i can't access the result
23:33 < Madwill> not sure what was sent or how i should use it
23:33 < Madwill> local html connecting to only app.js does not work and entering straight subdomain.jit.su gives error
23:34 < ningu> "local html connecting to only app.js" => this makes no sense to me
23:35 < Madwill> sorry but i think i'm findint it
23:35 < Madwill> it meant local js and remote node
23:36 < ningu> Madwill: huh? what server are you running your node.js app on? and what is local?
23:36 < ningu> local js = client-side js running in the browser?
23:37 < Madwill> i wanted to show a demo to my boss using node.js socket.io but we have no node.js server yet so i signed up for a nodeJitsu free acount but can't deploy correctly on it
23:37 < ningu> yes, I understood that much :)
23:39 < Madwill> can't really get past jitsu install as none of my apps are node.js app apparently
23:39 < Madwill> i'll ask in nodejistsu
23:39 < ningu> well, nodejitsu is for node apps
23:39 < keyosk> Your first try at a node.js app should be locally hosted ;) You're just going to confuse yourself.
23:39 < Madwill> it is
23:39 < ningu> right, run it locally and test it before you deploy it
23:39 < Madwill> and it works
23:40 < Madwill> i've got chat/whiteboard and some webrtc chrome only video stream
23:40 < Madwill> but to show it tomorrow i need it to be somewhere public
23:41 < ningu> ok, maybe you said it before I came in, but you haven't said what error you're getting
23:43 < Madwill> i get a very clear sorry zen_test is not a node.js app
23:43 < ningu> do you have package.json?
23:43 < Madwill> i do
23:44 < ChrisPartridge> Madwill: you will need to deploy a node app that serves the html page
23:45 < ChrisPartridge> oops (i was scrolled up in buffer)
23:45 < Madwill> ok
23:45 < sinclair-work> crazy question, is it possible to do a synchronous web request in nodejs?
23:46 < keyosk> That is a pretty crazy question... I suppose you could set a global flag 'makingRequest' and not let any function run if that is true...
23:46 < ningu> Madwill: the install command is only for the starter apps
23:46 < Madwill> hehe node is all about getting rid of the "s" word
23:47 < ningu> Madwill: what you want is "jitsu deploy" from the directory of your app
23:47 < Madwill> ok i did, that works
23:47 < sinclair-work> keyosk: umm?
23:47 < sinclair-work> keyosk: that could be possible
23:47 < keyosk> Yep.
23:48 < keyosk> Bigger question is, why in the world do you need to do that :? ?
23:48 < sinclair-work> keyosk: just something i am working on
23:48 < sinclair-work> keyosk: and before you ask, i really do need a synchronous request
23:48 < keyosk> (No you don't :P)
23:48 < sinclair-work> really truly i do
23:49 < ningu> why can't you just do what you need afterwards in the callback?
23:49 < keyosk> You just need to rethink the order of what you're trying to do, and make it a callback of the request's completion
23:49 < sinclair-work> the request is being made from require()
23:49 < sinclair-work> and require() is synchronous 
23:49 < ningu> sinclair-work: you should google ways to do async initialization, there are a few techniques
23:50 < ningu> but the short answer is, you won't be able to do that in require()
23:51 < sinclair-work> well, is the actual answer that 'synchronous web requests are not possible in node' ?
23:51 < keyosk> The real problem is, you need a way for this web request to activate the next 'step' in your program's initialization
23:51 < ningu> afaik they are not. and I can't think of a good reason to need to do one from require().
23:52 < ningu> require() is sync for a reason -- it's not supposed to do anything of that sort which might not be idempotent.
23:52 < sinclair-work> ningu: that is beside the point
23:54 < sinclair-work> ok, so nodejs cannot do synchronous web requests, not without something like a timer that checks at regular intervals if it is ready or not
23:54 < ningu> you can't use a timer either
23:54 < keyosk> Once again you're looking at this issue with a very wrong mindset
23:54 < ningu> well, whether it's wrong or not it isn't how node lets you do it
23:54 < keyosk> You really need to consider breaking your intitialization up into steps, and invoking the next step into the callback of this request
23:54 < ningu> it's wrong from the point of view of how node apps are meant to work
23:55 < sitapati> wouldn't you just put your continuation code in the callback?
23:55 < sitapati> that makes it (effectively) synchronous
23:55 < sitapati> you make your web request
23:55 < sitapati> it resolves and require does its thing
23:55 < sitapati> and you continue
23:56 < ericelliott> ningu: there's an ah-hah moment - require() should be idempotent.
23:56 < ningu> ericelliott: you mean aha for you right now, or it should be for whoever uses node?
23:57 < ericelliott> ningu: I think it's a good rule of thumb that might not be immediately obvious to node newbies.
23:57 < ningu> yeah, I don't think require() is strictly constrained to work that way, but it does seem like how it's intended to be used
23:57 < ningu> and if you try to do otherwise you will have trouble
23:58 < ericelliott> ningu: no, it's not constrained that way, but I could see how you could get all sorts of unintended consequences if you break that rule without intentionally knowing that it's a rule of thumb that you're breaking (with intent).
23:58 < ericelliott> like, you really, really should have a good handle on what you're doing if you break that rule. ;)
23:58 < ningu> for example, the same file can be require()'d various places and you don't want to depend on the order
23:58 < keyosk> Just rename it to require_once, then everyone will get the picture ;)
23:59 < ericelliott> ningu: exactly.
23:59 < ningu> since the cache will use the first one
--- Log closed Fri May 03 00:00:13 2013
