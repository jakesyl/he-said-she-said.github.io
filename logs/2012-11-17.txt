--- Log opened Sat Nov 17 00:00:09 2012
--- Day changed Sat Nov 17 2012
00:00 < xp_prg> wankinator it must wait for the user input in a loop
00:00 < xp_prg> how hard is that to understand?
00:00 < xp_prg> your not doing that *sigh*
00:00 < xp_prg> its like speaking a foreign language
00:00 < wankdanker> you can't do it in node
00:00 < xp_prg> yes I know that now
00:00 < wankdanker> as far as i know.
00:00 < bnoordhuis> can't do what?
00:00 < wankdanker> if you were willing to not loop, this is how you could do it.
00:01 < xp_prg> but I bet I can find a way and when I do I will yell in the face of nodejs that you will not force me to be asynchronous
00:01 < brianloveswords> xp_prg wants to solve a problem, but he hates the way he has to solve it in node. Prognosis: use a different language.
00:01 < bnoordhuis> ah, like that
00:01 < AAA_awright> xp_prg: One more code sample http://pastebin.com/DCSuFFJQ
00:01 < AAA_awright> xp_prg: Run that
00:02 < mks_> xp_prg: you know, nodejs doesn't like to wait doing nothing...
00:03 < xp_prg> yes I do know that
00:03 < AAA_awright> xp_prg: Also, if you try doing any sort of long-polling with Apache, that'll bring your webserver to its knees. Threaded web servers are dying, inefficent, even bloated
00:03 < xp_prg> this is a simple cli program, don't care about performance *sigh*
00:03 < rvagg> #!/bin/sh
00:03 < AAA_awright> xp_prg: Then use /bin/bash or /usr/bin/ruby
00:03 < xp_prg> I can't, I am testing js code that will run in the browser
00:03 < brianloveswords> AAA_awright ++
00:04 < brianloveswords> xp_prg: then use callbacks.
00:04 < AAA_awright> Callbacks are how ECMAScript works
00:04 < AAA_awright> Period
00:04 < AAA_awright> ECMAScript is a functional, evented, prototype language
00:04 < xp_prg> is there a way to run exactly what is run in the browser with web workers on linux server side from the command line?
00:04 < AAA_awright> (quasi-functional)
00:04 < xp_prg> web workers don't require callbacks anymore
00:05 < AAA_awright> If you don't mind your UI locking up
00:05 < xp_prg> callbacks are only necessary in a single threaded architecture
00:05 < xp_prg> brb
00:05 < AAA_awright> xp_prg: How the webworkers API works doesn't change the fact ECMAScript is evented
00:07 < harrisonm> Oh wow I looked away from the screen for a while and this conversation is going
00:07 < harrisonm> *still going
00:07 < mscdex> harrisonm: +1
00:07 < wankdanker> the players have changed... several times.
00:08 < context> 'this is a simple script so i dont care about performance' .... 
00:09 < Hotroot> I love socket.io <3
00:09 < Hotroot> Everything is so simple and handy, it's making this a breeze
00:09 < context> i read this as "i dont care so im gonna purposely do it in a way against what everyone and their mother recommends"
00:09 < rvagg> harrisonm: we're playing tag team here
00:10 < harrisonm> Just gonna quote nodejs.org really quickly then I have to go drive for a while:
00:10 < harrisonm> "Node.js uses an event-driven, non-blocking I/O model"
00:10 < harrisonm> front page
00:11 < rvagg> BUT I WANT IT TO BE RUBY!
00:12 < context> and i want 42 virgins
00:12  * rvagg martyrs context
00:13 < context> wahooo !@#$#@
00:13 < context> good movie also
00:16 < mks_> http://goo.gl/v4rif
00:17 -!- mbalho changed the topic of #Node.js to: node.js: tyranically asynchronous
00:17 < rvagg> nice
00:17 <@mbalho> topic idea courtey dominictarr
00:17 <@mbalho> courtesy*
00:22 < xp_prg> I am just frustrated that I can simply test some simple javascript code on the command line of linux and get user input
00:23 < xp_prg> is there a way to run javascript on linux that I can invoke web workers via command line?
00:23 < AAA_awright> xp_prg: Maybe you're looking for Phantom.js
00:25 < xp_prg> I might be thanks
00:25 < xp_prg> is there a way to get user input with phantom.js?
00:25 < context> you are running tests
00:25 < context> tests generally dont require user input
00:25 < context> that'd defeat the purpose of tests...
00:25 < xp_prg> proof of concepts and demos that are quick do
00:25 < DaMorpheuS> hey guys anyone of you know why I can't install riak-js on a windows platform?!?
00:26 < brainss> how should i check if my ReadableStream is paused?
00:26 < context> then demo in a browser, not a command line
00:26 < brainss> so i don't resume an already open stream
00:26 < xp_prg> too much overhead
00:26 < xp_prg> I heart command line
00:26 < context> damorpheus: 'it dont work'
00:26 < context> is all you said
00:27 < DaMorpheuS> that sucks :)
00:27 < DaMorpheuS> well thank god I have a linux system then on the side :)
00:27 < context> damorpheus: no i mean all you said was 'dont work' 
00:27 < context> i dont know or see why it wouldn't work on windows
00:27 < xp_prg> run windows in vmware on top of linux, trust me, its the best way to go
00:28 < context> or just dont run windows at all
00:28 < Sly> Getting rid of Windows = best way to go, in every case.
00:28 < DaMorpheuS> when I want to install riak-js on my windows environment it won't install (npm install riak-js)
00:28 < context> get a mac and dont run linux or windows
00:28 < nlf> define "won't work"
00:28 < context> damorpheus: please be more vague. you are giving us way too much detail to be able to help you
00:28 < xp_prg> but when your doing it, make sure you make an ordered nested callback so you can guarantee sequential steps
00:28 < DaMorpheuS> it won't install
00:29 < DaMorpheuS> mom.
00:29 < nlf> define "won't install"
00:29 < context> again... please be more vague
00:29 < nlf> what error does it give
00:29 < DaMorpheuS> 42 error notsup Unsupported
00:29 < DaMorpheuS> 42 error notsup Not compatible with your operating system or architecture: riak-js@0.9.0
00:29 < DaMorpheuS> 42 error notsup Valid OS:    linux,darwin,sunos
00:29 < DaMorpheuS> 42 error notsup Valid Arch:  any
00:29 < DaMorpheuS> 42 error notsup Actual OS:   win32
00:29 < DaMorpheuS> 42 error notsup Actual Arch: x64
00:29 < DaMorpheuS> 43 error System Windows_NT 6.1.7601
00:30 < nlf> well i'd say that's a pretty definitive answer
00:30 < DaMorpheuS> is that enough :)
00:30 < blazes816> Valid OS:    linux,darwin,sunos
00:30 < blazes816> Actual OS:  win32
00:30 < DaMorpheuS> I know but I want to know why there are node packages not working on windows
00:30 < DaMorpheuS> it just does an http call
00:31 < context> in the real world no one really cares about windows.  as for that package im not sure, you could force install it and see why it dont work
00:31 < DaMorpheuS> i can run it on my server but I want a local setup for if the war starts or something that destroys my network connetion
00:31 < nlf> in that case, because he specified in the package.json that it doesn't work in windows
00:31 < nlf> maybe there's a bug
00:31 < nlf> who knows
00:31 < DaMorpheuS> ok
00:31 < DaMorpheuS> well
00:31 < DaMorpheuS> long live windows :)
00:31 < nlf> you could try cloning the git repository, removing the "os" property from package.json, and installing it anyway
00:31 < nlf> or use a different library
00:32 < DaMorpheuS> ok but I have allready a prety big program that relies on it :P
00:32 < context> kk time to go ice skating
00:32 < DaMorpheuS> lol
00:32 < nlf> then try cloning it and removing the os property from package.json
00:32 < DaMorpheuS> thanx guys Ill manage I just thought maybe you know why
00:32 < DaMorpheuS> ok i will
00:33 < DaMorpheuS> ill ask the writer :)
00:52 < xp_prg> I figured it out!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00:53 < xp_prg> fs.readFileSync('/dev/stdin', 'utf-8') read'em and weep, reep it, REEP IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00:53 < xp_prg> AAAAAAAAAAGGGGGGGGGGHHHHHHHHHHHHHHHHHHH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00:53 < xp_prg> it only took me two days to figure it out!!!!!!!!!!!!!!
00:54 < xp_prg> reep it you son of a bitch, REEP IT!!!!!!!!!!!!!!!!
00:54 < drudge> heh
00:54 < xp_prg> frankly Scarlet, I don't give a sweet good g** damn
00:55 < dominictarr> xp_prg, process.stdin
00:55 < xp_prg> you have been bent over by the prison gang raper of synchronous user input, take it, take it!!!!!!!!!1
00:56 < xp_prg> then I would have to give a call back though right dominatrixator?
00:56 < dominictarr> process.stdin.pipe(stream)
00:56 < xp_prg> I did synchronously without a callback, I did it my way thank you, now sit down at your asynchronous callback kiddie table
00:57 < dominictarr> xp_prg, you may have won this battle, but you will loose the war.
00:57 < xp_prg> single threaded manual context switching madness
00:57 < niggler> this is a really disturbing conversation
00:57 < xp_prg> no I won't!!!!!!!!!!!!!!!!!!!! :>  Webworkers will destroy nodejs, watch
00:57 < Ax_SeS> Hello everyone, I'm currently coding a school project and decide to implement with nodejs, mongodb, and mongoosejs. I can run a certain query with sort in the mongod shell, but I cannot get my NodeJS to retrieve the same data. My node-code is only working with .find(-stuff-) and .findOne(dsasf). Any ideas?
00:58 < dominictarr> xp_prg, please write "I told you so" on a piece of paper, and then put in in an enveloped, and then open the envelope when you realize I am right.
00:59 < niggler> dominictarr: I'm pretty sure no one will 'loose' any war
00:59 < xp_prg> dominatrix prison transexual, you sit down, you wear the bib of kiddie javascripting nonsense, I shall code with autonomy and walk like a man, A MAN!!!!!!!!!!!
00:59 < drudge> i want some of whatever you are on xp_prg
01:00 < niggler> woah woah woah xp_prg you denigrate transexuals in your comparison
01:00 < xp_prg> I will no longer be gang raped in a prison like coercive manner in the days of old, I walk alone now, I did some work and I held my mud
01:00 < dominictarr> xp_prg, best of luck.
01:01 < xp_prg> then take the shank out of your hand
01:01 < AAA_awright> xp_prg: ECMAScript doesn't do manual context switching
01:01 < niggler> tyrannically asynchronous
01:01 < AAA_awright> ECMAScript does events
01:01 < AAA_awright> A happens, execute B
01:01 < niggler> someone fucked up
01:01 < mmalecki> ...what is going on in here?
01:01 < niggler> chan status is currently "node.js: tyranically asynchronous"
01:01 < xp_prg> it does garbage that will be replaced with web workers, you will see it, mark my words
01:01 < AAA_awright> Hahaha
01:01 < niggler> the word is tyrannically 
01:02 < xp_prg> ya, I have thrown off the shackles of tyranny, smell the glove, SMELL IT!!!!!!!!!!!!!!!
01:02 < danheberden> tyrannisaurus rex
01:02 < dominictarr> niggler, that phase came from http://npm.im/eep
01:02 < AAA_awright> xp_prg: Web workers are for computationally expensive tasks
01:02 < AAA_awright> Not I/O heavy tasks like your console prompts
01:02 < niggler> dominictarr: that person loused up
01:03 < niggler> I'm gonna file an issue
01:03 < xp_prg> you just don't get it, get off of your sister and understand that the only reason callbacks are necessary is if you have a single threaded model
01:03 < dominictarr> niggler, well, you are "niggler"
01:03 < AAA_awright> xp_prg: And look, if you're going to critique Node.js, at least get your code right *before* you try and say it doesn't work. You can't write flawed code, and then try and assert it's done wrong, it doesn't work like that
01:03 < niggler> there we go https://github.com/darach/eep-js/issues/1 
01:03 < AAA_awright> I wrote up three different examples demonstrating how to do what you're doing
01:04 < AAA_awright> And in fewer lines of code than you yourself used
01:04 < dominictarr> xp_prg, single threaded events is the WHOLE POINT of node.
01:04 < mks> this film was bad. wasted time.
01:04 < dominictarr> that was the idea from day one.
01:04 < xp_prg> look man, I can decide to write "normal" code all I want and choose to use threads when I want, not write obfuscated callback asynchronous, non-maintainable garbage code, no thanks
01:04 < niggler> lol speaking of spelling gaffes
01:04 < niggler> darach is darach ennis
01:04 < niggler> there is this political analyst "niger inns"
01:04 < niggler> *niger innis
01:05 < xp_prg> threads are hard enough, much less single threaded call back asynchronous with a dash of multi-threaded inferment
01:05 < niggler> and in msnbc one day they misspelled his name with 2 g's
01:05 < dominictarr> xp_prg, when in rome, do as the romans. and you are in asynchronous rome.
01:05 < xp_prg> I shant, persecute, nail me to your cross of asynchronous, hell, I will even tie myself to the board
01:06 < AAA_awright> xp_prg: obfuscated as you use it is subjective.
01:06 < AAA_awright> xp_prg: I don't consider your "syhcnronous" usage to be very comprehendable myself
01:07 < AAA_awright> It's something you have to learn
01:07 < AAA_awright> And again you demonstrate no clue of what evented programming is
01:07 < niggler> xp_prg cross of asynchrony
01:08 < AAA_awright> In a typical event loop you have to store state yourself. ECMAScript, however, has these nifty things called function closures
01:09 < xp_prg> I have been doing asynchronous event loops before you were born, I took off the training wheels and starting use threads, but everyone is too dumb for threads, but not anymore, hello web workers!!!!!!!!!!!!!!!!!
01:09 < AAA_awright> xp_prg: If you want to say it has a high learning curve fine, let's argue the merits of that, but you can't say it's "wrong" when clearly it's entirely constistent
01:09 < niggler> fuck threads
01:09 < xp_prg> its a poor mans way of doing threads
01:09 < xp_prg> that is all it is
01:09 < AAA_awright> No, it's an event loop
01:09 < AAA_awright> Threads don't use event loops as such
01:10 < dominictarr> xp_prg, there are a few other crazies who think threads are a good idea.
01:10 < dominictarr> see fibers, and streamline.js
01:10 < AAA_awright> And in any event threads are expensive
01:10 < AAA_awright> You have to maintain transactions
01:10 < AAA_awright> And locking
01:10 < AAA_awright> And a whole bunch of other nonsense
01:11 < AAA_awright> Spinning up a thread per event is a horrible way to program, it's not efficent, it's not constistent, and it's liable to shoot you in the foot
01:16 < Leo> Does anybody know if when using mongoose when i set a properties to index: {unique: true}} is it enought to avoid duplicates document with that same propertie => value?
01:18 < othiym23> AAA_awright: sounds like you're not a big Erlang fan, then
01:20 < aheckmann> Leo: unique indexes enforce uniqueness :) http://docs.mongodb.org/manual/core/indexes/#unique-indexes
01:20 < AAA_awright> othiym23: I can't say I know how it works or how to even program it
01:21 < othiym23> AAA_awright: built on an Actor model where each actor is represented by a lightweight thread
01:21 < othiym23> the VM will frequently have thousands of threads active
01:22 < Leo> Its strange... my unique index was working, once i used the collection in another app it started to accept duplicates..
01:22 < bnoordhuis> othiym23, AAA_awright: fwiw, i consider erlang to be our main competitor, not ruby, python or what have you
01:22 < aheckmann> Leo: drop into your mongo shell and dump the indexes: db.yourcollection.getIndexes()
01:23 < Leo> does mongohq have a shell rs?
01:23 < aheckmann> Leo: you may not have the index created due to a previously existing duplicate
01:23 < aheckmann> Leo: adding a unique index to a collection with a duplicate on the specified field will fail by default
01:23 < othiym23> bnoordhuis: I put Node, Erlang and Go into the same general solution space as programming environments
01:24 < othiym23> they solve the same problems in pretty different ways
01:24 < bnoordhuis> othiym23: not so sure about go but admittedly i don't know it very well
01:26 < othiym23> Go is a slippery eel, but writing network servers with it doesn't feel so different from writing JS for Node
01:27 < niggler> success! https://github.com/darach/eep-js/issues/1
01:27 < niggler> i think the chan status needs to be updated
01:28 < Leo> aheckmann: i have already wiped my collection and tried again.. still not adding the unique index to the propertie.. does this look right? http://pastebin.com/QZ9Vmupi
01:28 -!- mbalho changed the topic of #Node.js to: node.js: tyrannically asynchronous
01:29 < aettinger> Leo: { unique: true }
01:29 < aettinger> try that
01:30 < aheckmann> Leo:  do you ever connect to the db?
01:30 < aheckmann> Leo: the commands are buffered until the connection is established
01:30 < Leo> Yes i do.. The documents are being saved.
01:30 < Leo> But i do not wait for the connection
01:30 < aheckmann> Leo: shouldn't matter
01:31 < aheckmann> Leo: what did the output of getIndexes() look like
01:31 < Leo> let me check
01:33 < aheckmann> Leo: gotta run. feel free to open a ticket or post to the group: https://groups.google.com/forum/?fromgroups#!forum/mongoose-orm https://github.com/learnboost/mongoose/issues
01:33 < Leo> Ok
01:34 < Leo> aettinger: Did you say to me try this way? real_ip: { type: String, unique: true }, 
01:41 < Hotroot> .
01:41 < niggler> ..
02:07 < Orbitrix> niggler noggler
02:07 < niggler> yo Orbitrix 
02:07 < Orbitrix> sawp
02:07 < Orbitrix> u code any linez 2day?
02:07 < imm> question: how does one read a directory for file change? is there a fileWatch( ) for directory change ?
02:08 < niggler> i made my contribution to the community today: https://github.com/darach/eep-js/issues/1
02:08  * Orbitrix hugs niggler :D
02:08 < Orbitrix> yay
02:08 < Orbitrix> as far as file event watching with node
02:08 < Orbitrix> i havent done that yet before.   I've used python and Watchdog before
02:08 < Orbitrix> but never on node
02:09 < Orbitrix> i know each platform has its own API for doing such things obviously
02:09 < imm> yes but for /* files in a directory. 
02:09 < Orbitrix> so what works on linux doesnt alway swork on windows, visa versa
02:09 < aettinger> if i'm an under-privleged user, where does npm install -g go?
02:09 < Orbitrix> linux has a subsytem called "inotify"
02:09 < issackelly> is there any documentation for zlib? http://nodejs.org/api/zlib.html#zlib_class_zlib_inflateraw
02:09 < Orbitrix> if thats ur platform, thats ultimately what node will need to tap into
02:09 < Orbitrix> inotify
02:10 < Orbitrix> https://groups.google.com/forum/?fromgroups#!topic/nodejs/DDsU_xaXYog
02:10 < niggler> aettinger: /usr/local is usually writable by nonroot
02:10 < Orbitrix> @imm that link should work good for u
02:10 < Orbitrix> if u are infact on linux
02:10 < aettinger> niggler: yeah, but i'm not really supposed to be using node on this machine, can I tell it to install to /home/aettinger/local
02:11 < imm> mmm.. k let me take a look 
02:11 < niggler> aettinger: why do you care about -g?
02:11 < imm> thanks Orbitrix
02:12 < aettinger> niggler: how can i install npm modules locally inside my h ome dir?
02:12 < niggler> you run npm install from your home directory
02:12 < aettinger> ok
02:13 < niggler> sans the -g
02:13 < dreampilot> ...
02:13 < aettinger> so what do i add to my path so binaries are available?
02:14 < niggler> node_modules/.bin
02:14 < aettinger> ok
02:14 < niggler> Orbitrix: how many lines did you write today?
02:14 < aettinger> that's why i didn't see it .bin
02:14 < Orbitrix> not too much, i did do some clientside javascript
02:14 < Orbitrix> https://www.lightyearcreative.com/portfolio
02:15 < Orbitrix> made those rollover effects w/ jquery
02:15 < Orbitrix> for my web design portfolio
02:15 < Orbitrix> still heavily under construction tho :P
02:16 < niggler> your page makes baby jesus cry Orbitrix 
02:16 < Orbitrix> ;'(
02:16 < niggler> first: https://www.lightyearcreative.com/contact please for the love of god put something other than filler text 
02:17 < aettinger> heh
02:18 < Orbitrix> lol
02:18 < Hotroot> niggler: Besides jerking around like it's on E, what's wrong with his portfolio?
02:18 < Orbitrix> thats why i said
02:18 < Orbitrix> its under construciton lol
02:18 < Orbitrix> hotroot
02:18 < Orbitrix> what browser?
02:18 < Hotroot> Chrome
02:18 < Orbitrix> huh
02:18 < Orbitrix> smooth as butter for me in chrome
02:18 < Orbitrix> things do jump around in IE for me tho
02:18 < Hotroot> Try moving your mouse between random stuff
02:18 < niggler> the speed at which the content bounces back is nondeterministic on safari
02:18 < Hotroot> Especially between menu items and the content
02:19 < niggler> sometimes it falls back quickly
02:19 < niggler> other times it falls back as slowly as it rises
02:19 < Orbitrix> interesting
02:19 < Orbitrix> i'll have to read up on jquerys animation pipeline
02:19 < Orbitrix> works as i would expect on Firefox, Chrome, IE9 on Win7
02:19 < Hotroot> I still can't get into jquery, even when I'm doing tons of DOM stuff
02:20 < Orbitrix> but i havent really even began testing anywhere else
02:21 < niggler> I'm not sure if the thing which raises the orange bar is decoupled from the other mechanisms, but if i move the mouse quickly between two cells sometimes the orange will get stuck on one cell
02:21 < niggler> that could also be a safari or a 'jquery issue
02:21 < Orbitrix> interesting, yea, the orange bar uses a combination of padding and height
02:21 < Orbitrix> which may not be the best strategy
02:22 < dreampilot> ..
02:23 < niggler> dreampilot: ...
02:23 < Orbitrix> for(i=0;i<5;i++) { print '.'; }
02:24 < Orbitrix> 4*
02:24 < Orbitrix> lol
02:24 < Orbitrix> ;'(
02:24 < imm> :)
02:25 < niggler> Orbitrix is dropping the orb today :/
02:25  * Orbitrix poops his pants
02:25  * Orbitrix swirls his thumb around the rim of niggler's puckering javahole
02:26 < Orbitrix> ^_^
02:29 < niggler> wow eep.js does shitty math
02:35 <@mbalho> niggler: fork it
02:36 < niggler> i try to limit myself to one contribution a day
02:36 < niggler> and today's contribution was correcting the spelling mistake
02:37 <@mbalho> you should try using github.com some time its a cool site
02:43 < imm> node-inotify might be an overkill for what I'm trying to do- which is simply to watch for when a file is added to a directory
02:44 < imm> i also found stalker - https://github.com/jslatts/stalker  - I'm going to give that a try first
02:48 < svya1991> Does anyone know how to reset a MongoDB that I have filled with some values?? I was testing out an app, and now I want to clear out the list of users, how could I do that???
02:50 < svya1991> Does anyone know how to reset a MongoDB that I have filled with some values?? I was testing out an app, and now I want to clear out the list of users, how could I do that???
02:51 < imm> has anyone here used the stalker module ? 
02:51 < imm> clever name no?
02:51 < imm> lol
02:53 < Orbitrix> i dont really see how inotify is overkill 
02:53 < Orbitrix> just only use the if(mask & Inotify.IN_CREATE) { }
02:53 < Orbitrix> part of their example
02:53 < Orbitrix> and it'll do pretty much what u want
02:57 < imm> Orbitrix - i guess i was a little confused about the "persistent mode" stuff
02:57 < imm> I'm really new to fs stuff - (if thats not obvious by now).....
03:04 < niggler> imm: fs stands for fuck and suck :P
03:04 < niggler> (catching up on daily show)
03:04 < Aria> Seriously, niggler? Here?
03:05 < imm> no it doesn't but you can you may if you please
03:05 <@mbalho> niggler: try to keep the banter non offensive please
03:06 < niggler> i figured that "legitimate rape" is probably a more offensive phrase :)
03:06 <@mbalho> ...
03:07 < niggler> oh nvm politics
03:08 <@mbalho> niggler: why would you say that after being asked to not be offensive
03:09 < niggler> we talk about "offensive" remarks, but one must ask if it really is offensive when arguably more offensive phrases have become a fundamental part of our national discourse
03:11 <@mbalho> my point, as a mod, is that those topics are outside the scope of the node irc channel so i'll politely ask you again to stfu about non node related topics
03:12 <@mbalho> people talk about random things in here all the time but usually you bring up topics that are arguably offensive
03:14 < niggler> :)
03:27 < Orbitrix> LOLOL
03:27 < jrajav> Some people talk about C++ in here
03:27 < jrajav> That's arguably offensive
03:27 < Orbitrix> tu madre es una puta
03:28 < niggler> and arguably off topic, but the powers that be find that admissible
03:30 < Orbitrix> loldongs.js  teh new project from lulzcorp
03:31 < Orbitrix> i like how this channel isnt all uptight like #python
03:31 < Orbitrix> everyone in there has a tight asshole
03:31 < Orbitrix> and high blood preasure
03:31 < Orbitrix> :-|
03:32 < niggler> Orbitrix: python does that to people
03:33 < Orbitrix> quite
03:33 < Orbitrix> u still h8 coffeescript?
03:38 < imm> "Some people talk about C++ in here
03:38 < imm> That's arguably offensive" ++  ( I second this)
03:38 < timeturner> how's that offensive>
03:38 < timeturner> ?*
03:38 < Orbitrix> see pluz pluz 0wnz u script kiddiez 
03:38 < Orbitrix> ese
03:39  * Orbitrix does a driveby on this chatroom w/ tha homies
03:40 < imm> #include <iostream>
03:40 < imm> using namespace std;
03:40 < imm> int main ()
03:40 < imm> {
03:40 < imm> cout << "Hello World!";
03:40 < imm> return 0;
03:40 < imm> }   <<<< thats offensive
03:40 < Orbitrix> ROFLCOPTER
03:41 < niggler> my eyes are bleeding imm
03:41 < niggler> aren't you missing an << endl
03:41 < imm> lol !
03:42 < niggler> cout << "Hello World!" << endl;
03:43 < imm> yes
03:45 < Guest_1448> how do I use https://github.com/c4milo/node-webkit-agent on windows?
03:45 < niggler> imm: how about java's hello world?
03:46 < Guest_1448> it says "Activate the agent, in your nodejs application, by sending a SIGUSR2 signal to its process id. To de-activate, send the signal once again." <-- how do I do that on windows?
03:48 < niggler> pskill
03:49 < niggler> if node actually supports it, but I'm not sure it does
03:49 < Orbitrix> pskill system32
03:49 < Guest_1448> pskill doesn't look like it has an option to send a custom signal?
03:49 < imm> niggler java's hello world :    public class class hyper superPrivate class@invisible-generic (type system-failure-to-regnize) { noOtherAbstractionSupported class more Abstract class; System.Out.Println("hello world");
03:50 < imm> lol I'm sorry i went too far. I won't say anymore offensive things about java and its awesome type class system. 
03:51 < niggler> woah woah woah you almost went .net on us imm
03:52 < imm> :)
03:52 < mscdex> which is worse in v8: a big if-else ladder or a big switch statement?
03:52 < mscdex> performance-wise
03:53 < niggler> can the compiler reduce a switch statement to a ladder?
03:54 <@mbalho> mscdex: according to felixge big switch statements are bad
03:55 < mscdex> jsperf seems to agree
03:55 < niggler> mscdex are you using string or integer keys
03:55 < mscdex> string
03:56 < niggler> for integer it seems that switch is faster
03:56 < TehShrike> Man, I love programming
03:56 < mscdex> ~4x faster with if-else ladder
03:56 < TehShrike> jsperf link plz?
03:56 < mscdex> for strings
03:56 < mscdex> http://jsperf.com/if-elseif-vs-switch-for-strings/3
03:56 < TehShrike> Thankess
03:57 < TehShrike> Wow
03:57 < niggler> mscdex: choose a case in the middle of the block 
03:57 < mscdex> ?
03:57 < TehShrike> Instead of the second one
03:57 < niggler> var str = "asdffdsa"
03:57 < niggler> in your test
03:58 < TehShrike> Or at the end
03:58 < TehShrike> Picking the one at the end would give the opposite extreme, whatever that was
03:58 < TehShrike> Presumably
03:58 < mscdex> still about the same
03:59 < TehShrike> I don't see a new revision yet
03:59 < mscdex> switch: 74 million, if-else: 282 million
04:00 < TehShrike> Wow, still the fastest by a lot
04:00 < TehShrike> That's nuts
04:01 < mscdex> yep, not enough to *switch* ;-)
04:01 < TehShrike> A horrible pun, but a good thing to know :-P
04:01 < niggler> safari gives the opposite restlt
04:01 < niggler> *result
04:01 < TehShrike> http://jsperf.com/if-elseif-vs-switch-for-strings/4
04:01 < mscdex> well, v8 isn't safari :-)
04:01  * TehShrike pulls out Firefox
04:01 < mscdex> i just need to know for node
04:01 < TehShrike> I'm really curious how this breaks down across browsers
04:02 < mscdex> probably not the same v8 version as in my chrome browser, but close enough
04:02 < TehShrike> Sure
04:03 < TehShrike> Still, I like to have an idea of where the various JS engines lie when it comes to various performance issues
04:03 < TehShrike> Firefox seems to have the if/else beating the switch by a margin similar to Chrome's
04:04 < niggler> can you test with some small numbers?
04:04 < TehShrike> IE8 >_< has the switch ahead, but slightly
04:04 < niggler> like 1,2,3,4,5,6,7,8,9,10
04:04 < TehShrike> That's a good question
04:09 < TehShrike> You should write that test up niggler :-D
04:10 < niggler> hour before i can make another contribution
04:11 < TehShrike> What, there's a limit?
04:11 < TehShrike> That's unfortunate
04:12 < niggler> computer is buckling
04:13 < TehShrike> :-x
04:13 < niggler> p
04:13 < niggler> o
04:13 < niggler> s
04:13 < niggler> sibly
04:13 < niggler> explains why safari performance differed so much
04:13 < TehShrike> Personal machine, or company?
04:14 < niggler> company decommissioned, now i use it personally
04:15 < niggler> i need to take it to service -- its one of the machines affected by the seagate 1TB recall
04:15 < TehShrike> I optimized my personal machine for many cores and many monitors
04:16 < ill0> hello. anyone using npm module: bcrypt? Do you have to have visual studio 2010 to install this module....
04:18 < TehShrike> I don't know about that module, but usually modules that require a C/C++ compiler are looking for a version of gcc laying around somewhere
04:19 < TehShrike> I have taken to the sad habit of ignoring all modules that require non-Python compilation steps, unless I know that I will only ever use that module from a *nix server :-(
04:19 < TehShrike> Which breaks my heart
04:21 < TehShrike> If there even a way for people to release pre-compiled Windows libs for their apps, so that you could compile/commit it once, and every other Windows user who did "npm install" wouldn't have to worry about compiling, that would be cool
04:21 < TehShrike> I don't know if isaacs has any grand schemes to fix all our woes in this department or not
04:23 < AAA_awright> I wouldn't use bcrypt
04:23 < AAA_awright> Just for the record.
04:23 < TehShrike> AAA_awright: use it for what?
04:23 < TehShrike> How can you not like bcrypt? 8-|
04:23 < AAA_awright> Node.js comes with PBKDF2 which is well-tested
04:24 < AAA_awright> TehShrike: Do you know how bcrypt works?
04:24 < TehShrike> Only at a very abstract level
04:24 < AAA_awright> See
04:24 < TehShrike> I just know that a lot of security people consider it the reasonable choice for this decade
04:24 < TehShrike> Or at least, I think I know that
04:25  * TehShrike is open to education
04:25 < Aria> Both are good. bcrypt is perhaps more widely used. 
04:25 < Aria> Depends on what sector you're in. Open source definitely leans bcrypt over pbkdf2.
04:25 < niggler> isn't bcrypt the function used in openbsd?
04:25 < AAA_awright> bcrypt is modified from blowfish
04:25 < TehShrike> Aria: yeah, I've seen bcrypt implementations pretty much everywhere
04:25 < TehShrike> AAA_awright: isn't it the other way around?
04:25 < AAA_awright> Now I don't know why you would want to modify blowfish, unless you were doing something malicious
04:26 < Aria> I can tell you.
04:26 < Aria> It's too fast.
04:26 < AAA_awright> That's why you iterate it
04:26 < Aria> Also that.
04:26 < niggler> blowfish a simple block cipher
04:26 < niggler> a building block for bcrypt
04:27 < AAA_awright> scrypt is almost certainly superior in any event
04:27 < AAA_awright> But... you still don't need to modify blowfish!
04:27 < AAA_awright> I just don't trust that
04:28 < AAA_awright> I have more problems with this notion in here than anywhere else and idk why
04:28 < AAA_awright> Why would you use something inferior, when a superior alternative exists and is shipped natively?
04:29 < niggler> why would you use windows when linux exists?
04:29 < niggler> why would you use IE when chrome exists/
04:30 < AAA_awright> Because Windows and IE are installed by default
04:30 < AAA_awright> PBKDF2 is installed by default and we STILL have people trying to use bcrypt
04:30 < AAA_awright> Do these people whip themselves, too?
04:30 < jawsome> That is a good point. However, the true answer I believe results from personal preference rooting from what they are comfortable and/or have experience with.
04:31 < TehShrike> Do they *gasp* write applications that authenticate against databases that were written for other applications that used bcrypt because it is 1. A reasonable choice 2. Available on almost every platform and in every language?
04:31 < AAA_awright> They're both KDFs, they have the same signature
04:31 < TehShrike> And also, yeah, it's a well-known name.
04:31 < AAA_awright> it takes a password, salt, iteration count, and length output
04:32 < TehShrike> Talking about myself is nothing more than anecdotal evidence, but I've heard of bcrypt, but not PBKDF2 or scrypt, and a lot of my coworkers hadn't even heard of bcrypt before I told them last year.
04:33 < AAA_awright> PBKDF2 is a published standard, and scrypt is a draft IETF standard... bcrypt is a modified cryptosystem. I mean, are you trying to invite attacks, or what?
04:33 < TehShrike> lol
04:33 < AAA_awright> It's been out for longer, as far as I know, so that sounds unusual
04:33 < TehShrike> You're saying this in a world where there are plenty of developers who apparently think it's reasonable to do no more than MD5 the password
04:33 < Aria> bcrypt is well-studied, published. Comes out of some pretty good provenance, too.
04:34 < TehShrike> I think you're picking on the wrong crowd
04:34 < TehShrike> And with very little provocation
04:34 < TehShrike> bcrypt seems to be quite reasonable, from everything I've read
04:36 < niggler> you know, some companies still keep passwords in plaintext
04:36 < AAA_awright> What of it?
04:37 < TehShrike> of what?
04:37 < Darkspiel> ARGH
04:37 < TehShrike> bcrypt seems to be quite reasonable, and we live in a world where many people settle for things that are not reasonable at all
04:37  * TehShrike hugs Darkspiel
04:37 < Darkspiel> everyauth makes me want to stab my eyes with something
04:37 < TehShrike> I'm sorry
04:37 < Darkspiel> thx TehShrike 
04:38 < Darkspiel> Anyone successfully using everyauth?
04:38 < TehShrike> No
04:38 < TehShrike> But I'm trying to make something better
04:39 < TehShrike> I wish it was polished enough to offer https://github.com/TehShrike/just-login/blob/master/example.js
04:39 < AAA_awright> Yeah, see, I think everyone's just taking me up just for the sake of opposing me
04:40 < AAA_awright> Over in ##crypto no one has ever suggested bcrypt, the standard suggestion is PBKDF2 or scrypt
04:40 < AAA_awright> I do the same
04:40 < AAA_awright> <snappy> pbkdf2
04:40 < TehShrike> And I'm no expert, so I imagine you guys know what you're talking about
04:41 < TehShrike> Among consumer webdev blog posts over the last year or two, the word seems to be "stop using MD5 or something like that, use blowfish/bcrypt instead"
04:41 < TehShrike> But I'll keep an eye out for those other algorithms now
04:42 < AAA_awright> SHA with a salt is probably fine to be honest
04:42 < Aria> ... Not really. That's so cheap to brute force now. SHA1 is FAST.
04:42 < AAA_awright> If you're fine with really sluggish behavior from your KDF, it'll still only add 10 effective bits
04:42 < AAA_awright> (1024 iterations = 10 bits)
04:43 < TehShrike> Yeah, speed of the algorithm matters
04:43 < TehShrike> That's why bcrypt is cool, because you can choose how expensive you want it to be
04:43 < AAA_awright> That's what a KDF is
04:43 < AAA_awright> That's one aspect of a KDF, there's other minimum requirements
04:44  * TehShrike looks up KDF
04:44 < AAA_awright> You want your algorithm to be fast, actually, if you wanted it to be slow then just run it more times, that's what a KDF is for
04:44 < AAA_awright> Key derivation function
04:45 < AAA_awright> You use it to create encryption keys from insecure sources, like passwords
04:45 < AAA_awright> Which has a very low strength, maybe 20 bits on average
04:49 < TehShrike> AAA_awright: you should write up a post on the subject, the last posts I read (which I think were written over a year ago) placed blowfish/bcrypt as the best options for developers
04:50 < TehShrike> And then you should get Schneier to link to you :-D
04:50 < gkatsev> passwords kind of suck nowdays...
04:50 < TehShrike> Hell yes they do
04:50 < TehShrike> Which is why I'm working on that one thing
04:51 < gkatsev> http://www.wired.com/gadgetlab/2012/11/ff-mat-honan-password-hacker/all/
04:53 < niggler> “Password reuse is what really kills you,” 
04:53 < TehShrike> It's true
04:53 < niggler> xkcd had something about this
04:53 < TehShrike> But what percentage of users do you think use keepass or something equivalent?
04:53 < TehShrike> Because everybody else is reusing passwords
04:53 < niggler> http://xkcd.com/936/
04:55 < TehShrike> Passwords really need to die.
04:56 < TehShrike> At least for authentication on random web sites.
04:56 <@Nexxy> lol @ topic
04:57 < TehShrike> Hey, random question, does anyone here actually get any use out of "use strict"?  Does it ever catch you on a typo or other issue that you wouldn't have caught otherwise?
04:57 < Aria> It catches variable scoping problems I'd miss.
04:57 < Aria> Also, its other use is to restrict code to things that that compiler doesn't have to bail on.
04:58 < TehShrike> hmm, that's good
04:58 < TehShrike> I've thrown it in a few modules, but I've never written anything that broke it yet
04:58 < jrajav> "use strict" is a wise old sage
04:58 < jrajav> Who will soon die a lonely death
04:59 < jrajav> TehShrike: How exactly does that work? Node doesn't recognize it
04:59 < TehShrike> ...doesn't it?
04:59 < gkatsev> jrajav: it does
04:59 < jrajav> Is that.. new?
04:59 < TehShrike> It's in V8
04:59 < jrajav> I'm pretty sure it didn't
04:59 < gkatsev> also, you should only use "use strict" in function scope
04:59 < TehShrike> As I understand it
04:59 < gkatsev> jrajav: ES5.
04:59 < jrajav> So yes
04:59 < gkatsev> v8 has it, of course.
05:00 < TehShrike> gkatsev: for modules that could ever be used in the browser, right?
05:00 < jrajav> Um, the fact that V8 has it doesn't mean that Node has it
05:00 < gkatsev> hm...
05:01 < gkatsev> jrajav: node has it.
05:01 < jrajav> And as of this discussion, Node did not support it
05:01 < jrajav> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/w-khQf-Ezt8
05:01 < jrajav> So it's changed, if what you say is true
05:01 < jrajav> TehShrike: Yes, it still doesn't hurt
05:02 < gkatsev> "use strict"; a = 5; // ReferenceError: a is not defined
05:02 < TehShrike> >> "use strict"; a = 5;
05:02 < purr> TehShrike: ReferenceError: a is not defined
05:02 < jrajav> Guess I'm wrong
05:02 < TehShrike> (not that purr is using node)
05:03 < TehShrike> (but I wanted to try it anyway)
05:03 < gkatsev> it does, >> is v8/node
05:03 < TehShrike> Well cool.
05:03 < TehShrike> >> console.log("HI GKATSEV!")
05:03 < purr> TehShrike: undefined; Console: 'HI GKATSEV!'
05:03 < gkatsev> >> version
05:03 < purr> gkatsev: (string) '3.11.10.22'
05:05 < niggler> what is purr using?
05:05 < gkatsev> node
05:05 < gkatsev> and v8
05:05 < gkatsev> !about
05:05 < b-ot> gkatsev, http://github.com/gf3/protobot
05:05 < gkatsev> lol
05:06 < gkatsev> -about
05:06 < gkatsev> purr: what is your trigger!
05:06 < gkatsev> -g oftn-bot
05:06 < purr> gkatsev: oftn/oftn-bot · GitHub <https://github.com/oftn/oftn-bot>
05:06 < gkatsev> purr was/is an oftn-bot/fork of it or something along those lines.
05:06 < gkatsev> ecmabot in ##javascript is an oftn-bot
05:11 < Darkspiel> TehShrike, I'm having a look at just-login
05:12 < TehShrike> It's got a stupid bug I'm hoping to fix tomorrow, and then I want to make a demo with a client page and browser library
05:12 < Darkspiel> ah... well it can't find stupid indexer
05:12 < Darkspiel> xD
05:13 < Darkspiel> so that's a shame
05:13 < TehShrike> hmm
05:13 < TehShrike> Lemme fix that
05:20 < lviera> hi
05:20 < vicapow> lviera: hello!
05:21 < lviera> vicapow, hellow man
05:21 < lviera> vicapow, how it going
05:21 < vicapow> lviera: goood
05:21 < vicapow> lviera: you?
05:21 < lviera> vicapow, good man, learning with ( OFFTOPIC ) extjs
05:22 < TehShrike> Huh, my local installation of npm seems to be unhappy
05:22 < vicapow> lviera: cool. how's that going?
05:22 < TehShrike> Oh well, I needed to upgrade to the latest version of node anyway
05:24 < lviera> vicapow, right now i try understand how should be a functionality for any applications without the implementation of route e.q router of backbone
05:24 < vicapow> lviera: is extjs .net specific?
05:24 < lviera> no vicapow 
05:24 < vicapow> lviera: i'm sorry, i don't understand what you said
05:25 < TehShrike> Oh, also, I'll say to isaacs or whoever else is listening: whoever had the node installer add node to the Windows path, <3
05:25 < lviera> vicapow, sorry man, my englist is not very good jeje 
05:26 < vicapow> lviera: no worries!
05:28 < TehShrike> Darkspiel: sorry about that, stupid-indexer is in npm now.  You'll probably have to adjust the require() in just-login/index.js, though.
05:31 < TehShrike> just-login is inspired by http://notes.xoxco.com/post/27999787765/is-it-time-for-password-less-login
05:36 < timeturner> password-less logins should be something that browser vendors implement
05:37 < timeturner> mozilla, google, opera, apple
05:37 < TehShrike> I would appreciate that
05:37 < TehShrike> But it wouldn't help me on public computers
05:37 < timeturner> yeah
05:38 < timeturner> sometimes I wish there was a centralized internet authority
05:38 < TehShrike> Really, anything that gets us away from passwords for every site would make me happy
05:38 < timeturner> that provided user identity services
05:38 < TehShrike> So, I'll see if I can get this library reasonable
05:38 < timeturner> but who is the middleman
05:39 < TehShrike> Your email provider
05:39 < freewil> sounds like you guys are talking about mozilla's browserID
05:39 < timeturner> on that link you sent it's Bagcheck right
05:39 < TehShrike> https://github.com/TehShrike/just-login/blob/master/example.js
05:40 <@Nexxy> biometrics is the answer
05:40 < TehShrike> My email provider doesn't support biometrics yet ;-P
05:40 <@Nexxy> and that's how you know it's irrelevant
05:42 < TehShrike> Can you send me an invite to your biometrics-compatible email provider?
05:42 <@Nexxy> I'm all out of invite codes
05:43 < Sly> Anyone know what https://gist.github.com/4093608 is about?
05:43 < Sly> Happens when building with GDB.
05:43 < TehShrike> I don't know, I never use subcommands
05:43 < TehShrike> I only use supercommands
05:43 < Sly> Er, actually. Let me see if it passes without gdb.
05:44 < Sly> Might not be related.
05:44 < Sly> Almost to that script.
05:45 < Sly> Yeah, it's only with gdb.
05:45 < Sly> Passed without it.
05:56 < niggler> sly you mean with -g?
05:57 < gkatsev> TehShrike: you should file an issue on github for adding node to path for windows installer.
05:57 < gkatsev> wait, never mind
05:57 < gkatsev> TehShrike: ignore me.
05:59 < Sly> Nah, niggler. --gdb
05:59 < Sly> ./configure --debug --gdb --ninja --xcode && make
05:59 < TehShrike> gkatsev: :-)
06:00 < TehShrike> Apparently that issue was pre-resolved somewhere between 8.0.low and 8.0.now
06:00 < gkatsev> yeah, I just thought you said that they should add it, rather than it was added
06:02 < wookiehangover> substack: tea, earl grey, hot http://www.thinkgeek.com/product/f07b/?srp=18
06:03 < substack> but I can buy a kilogram of earl grey for $12
06:05 < TehShrike> Yesterday I was in a coffee shop that had a tea called "earl grayer"
06:05 < Aria> Yum. That's a good tea.
06:06  * gkatsev is a tea snob
06:06 < gkatsev> :P
06:07 < gkatsev> but I drink A LOT of tea.
06:11 < Ax_SeS> So many people here is Ridiculous
06:15 < niggler> tis 1:15
06:15 < niggler> and some of us are still slaving away
06:15 < munichlinux> since nodejs uses v8 shouldn't it have a native apis to parse html ? 
06:16 < Aria> No, why?
06:16 < Aria> v8 isn't chromium.
06:16 < chubz> how can i use nodejs to find the width/height of an image file ? im looking at fs.readfile but it doenst look for the width/height
06:16 < Aria> chubz: Get an image processing library for node, use that. readfile is a layer down -- it reads bytes off a disk, not images. It doesn't know ANYTHING about the data you load.
06:16 < gkatsev> munichlinux: no, the html parsing is done on the DOM side.
06:17 < munichlinux> gkatsev: you mean the layout engine? 
06:17 < munichlinux> i mean the rendering engine 
06:17 < gkatsev> yes, and all the other stuff associated with it.
06:17 < gkatsev> though, there are some things like jsdom which can do some DOM stuff in js.
06:18 < gkatsev> and on the side, there are stuff like phantom which are headless webkits
06:19 < munichlinux> the rendering engine in chrome is called chromium? 
06:19 < Aria> chubz: node-canvas, perhaps, would help you
06:19 < gkatsev> munichlinux: no, it's webkit. chromium is the open source project behind chrome.
06:20 < Aria> munichlinux: chromium is the whole open source chrome project. Webkit, webcore, v8. Most of the parts don't have names.
06:20 < Aria> "chromium's HTML parser" 
06:20 < chubz> Aria: thanks i'll check it out
06:20 <@mbalho> chubz: each image format has a different way of encoding w/h, there are libraries to read the binary
06:22 < Aria> munichlinux: If you need to parse html on the server side in node, you can do it -- there's several libraries, with different trade-offs (accuracy/error tolerance vs speed)
06:22 < Aria> (I wrote the html5 parser)
06:23 < munichlinux> Aria: so you ideally do what a rendering engine does? 
06:24 < Aria> munichlinux: No, I do what an HTML parser does. There's no rendering.
06:24 < Aria> munichlinux: It plus JSDOM make a tree structure.
06:24 < munichlinux> Aria: how does jsodm construct a tree? 
06:25 < munichlinux> Aria: https://github.com/tmpvar/jsdom/blob/master/lib/jsdom/browser/htmltodom.js
06:25 < Aria> One node at a time.
06:25 < Aria> jsdom calls out to a parser of your choice.
06:26 < Aria> munichlinux: Notice line 83. That's bindings to my parser ;-)
06:26 < Aria> https://github.com/aredridel/html5/
06:27 < munichlinux> Aria: https://github.com/tautologistics/node-htmlparser/blob/master/lib/htmlparser.js
06:27 < Aria> munichlinux: That's one of the fast but not so error tolerant parsers.
06:28 < munichlinux> right. What my intension is, since webkit would have a parse in itself, all you need to do is write a wrapper and spit javascript like API
06:29 < munichlinux> be it any language python or node
06:29 < Aria> Bind webkit's parser? Sure. It's doable.
06:29 < Aria> My html5 parser intends to be very similar if not the same.
06:29 < Aria> You'd have to extract that parser, though, from the DOM -- or bind the whole DOM.
06:30 < munichlinux> right. webkit is written to do that and would be much faster if its written in c 
06:30 < Aria> Why so?
06:30 < TheAceOfHearts> can I do something like app.get('/users/', function) and app.get('/users/:id', function)? Where the first one is like a list, and the second one is a specific user?
06:30 < munichlinux> Aria: which part?
06:30 < TheAceOfHearts> or will the second one try to run?
06:30 < Aria> Why would it be faster in C?
06:31 < munichlinux> well i am not comparing node and c here
06:31 < TheAceOfHearts> a properly coded C program should always be able to beat node, I think @_@
06:31 < TheAceOfHearts> the difference in difficulty might be huge, though @_@
06:31 <@mbalho> FFI is slow
06:32 <@mbalho> https://github.com/felixge/faster-than-c/
06:32 < Aria> TheAceOfHearts: Maybe. Not definitely. The v8 optimizer is getting better and better.
06:32 < Aria> And yeah, once you take binding into account, there's definitely some slowness. 
06:32 < munichlinux> Aria: ok lets not get into the discussion of how its faster 
06:32 < Aria> (since things that don't live inside the optimizer's walled garden need a 'safe' interface, which is slow)
06:33 < Aria> (You can only directly optimize against interfaces you have control over -- so crankshaft has hacks for many specific cases, not general ones)
06:33 < munichlinux> i expect webkit to be better evolved rather than trying to write the same functionality again 
06:34 <@mbalho> webkit is a big steaming pile of code
06:34 < Aria> munichlinux: *shrug* maturity brings its ups and downs.
06:48 < jden|away> hey there, quick question: is it defined anywhere what a valid npm package name is?
06:48 < TehShrike> Your question confuses me
06:48 < TehShrike> Are you asking if there are characters that are not allowed in a package name?
06:49 < TehShrike> jden|away: Anyway, you're probably looking for this https://npmjs.org/doc/json.html#name
06:50 < spudly> \quit
06:50 < TehShrike> \quit indeed.
06:51 < jden> yes, thankyou TehShrike
06:52 < TehShrike> No problem
06:58 < chewed-on> Hello all. I'm following a Node.js book and from my program test, I have found it seems like my event can only be received by the one who called it:   http://pastie.org/5391009
06:59 < chewed-on> On line 20, if I change it to ticker2.on( …. ); the tick event is not received
06:59 < dileep> need mysql connectivity with node.js
07:01 < chewed-on> Anyone know why ?
07:07 < chewed-on> Hmmm, it seems like I need to think of Event emitter callbacks like delegation rather than notifications.
07:07 < chewed-on> in a way
07:12 < ettinger> howdy
07:13 < fcrick> is there a simple way i can get node.js to dump everything going over https to a file (unencrypted)?
07:14 < fcrick> i usually use fiddler2, but node.js traffic doesn't seem to want to go through that
07:16 < ettinger> fcrick: you want to dump what exactly
07:16 < substack> fcrick: net.createServer(function (stream) { stream.pipe(net.connect(5001)).pipe(stream) }).listen(5000)
07:17 < substack> will make a pass-through proxy
07:17 < fcrick> like all the headers and contents of http requests and responses
07:17 < dileep> someoneweird,need connetivity mysql with node.js
07:17 < substack> then you can add a line after your pass through to stream.pipe(fs.createWriteStream('input.txt'))
07:18 < substack> and you can dump the output stream from c = net.connect(5001) with just c.pipe(fs.createWriteStream('output.txt'))
07:18 < substack> or even better:
07:18 < fcrick> so i user https.request() to make the request
07:18 < fcrick> will that work with that?
07:19 < fcrick> *use
07:19 < duko> hi i just found that my forever.log file is 250gb
07:20 < duko> how should forever be used so that one avoids this situation?
07:23 < ettinger> duko: can you configure forever to use the system logger?
07:24 < ettinger> duko: http://linux.die.net/man/8/logrotate
07:25 < tmpvar> munichlinux, unwinding the dom stuff from rendering is not going to be an easy task
07:26 < duko> ettinger: thanks
07:27 < munichlinux> tmpvar: agree 
07:27 < munichlinux> i never gave a shot
07:27 < tmpvar> i looked into it, decided to write it from scratch intead ;)
07:28 < tmpvar> but it is slow in js. no doubt about it.
07:30 < munichlinux> ho
07:45 < ettinger> any idea if we'll ever get deep populate with mongoose? it's very restrictive otherwise.
07:48 < duko> i am ignorant about log files and log file rotation
07:48 < duko> if forever runs as one continuous process and logs to one file...
07:49 < duko> does this mean that I must use some other way of running a node.js application to allow for log rotation?
07:49 < duko> forever appears to be inflexible for this
07:54 < aMoniker> Can someone explain why using Object.create() on an object that has been declared as a variable inside a node module would always return the original instance of the variable, and not a fresh copy?
07:55 < aMoniker> Using $.extend(true, {} object_variable) and THEN calling Object.create() will create a fresh copy
07:55 < aMoniker> where $ is jQuery
07:57 < aMoniker> If you can answer this then surely you are a wizard.
07:58 < tmpvar> aMoniker, Object.create() creates an object with its prototype pointed at the object you passed in.  there is no copying going on
07:59 < ettinger> duko: you can just use logrotate to process your logs
07:59 < tmpvar> this is useful when you want a "copy" ie: you want to change the Object.create()'d object and not affect the original
07:59 < ettinger> just tell forever to write the log to /var/log/forever.log
07:59 < ettinger> or wherever, and it might even happen automatically.
07:59 < aMoniker> tmpvar: that's the issue, it is affecting the original
08:00 < ettinger> duko: i beleive on linux everything in /var/log gets rotated automaticaly
08:01 < aMoniker> if it's only pointing to the passed-in object to use as a prototype, then I understand why the original object is continually modified.
08:02 < tmpvar> aMoniker, http://jsbin.com/uhaqet/1/edit
08:02 < tmpvar> yes, i used document.write ;)
08:02 < Hotroot> =0
08:04 < aMoniker> tmpvar: http://jsbin.com/uhaqet/2/
08:05 < aMoniker> err, tag edit on that
08:05 < aMoniker> http://jsbin.com/uhaqet/2/edit
08:05 < duko> ettinger I'm using shared hosting
08:05 < duko> and I doubt I can write to /var/log
08:06 < tmpvar> aMoniker, its like when you define a prototype as Ctor.prototype = { array : [] } .. all instances of Ctor will share that same array
08:06 < duko> but I will try rotating the log files
08:06 < aMoniker> tmpvar: Ok… I can get around that using $.extend then
08:07 < tmpvar> right, because that will actually copy the array instead of pointing at the original instance
08:07 < aMoniker> what's odd is that I'm using Object.create() inside another function that I've set using Object.defineProperty()
08:07 < aMoniker> if I $.extend the object I want to use outside of that, it's fine
08:07 < aMoniker> if I $.extend it inside - same issue
08:08 < tmpvar> weird, example?
08:10 < duko> wow logrotate is amazing
08:10 < aMoniker> one min, will make one
08:12 < ettinger> .
08:20 < aMoniker> tmpvar: weird, I can't get it to happen in the browser via jsbin
08:30 < aMoniker> Ok no, I was being stupid. In that function I set through Object.defineProperty(), I was adding enumerated properties of 'this' to an array that then got added as an argument to Object.create() *before* doing the $.extend
08:30 < aMoniker> tmpvar: thanks for your wizardly help
08:31 < tmpvar> ^_^
09:06 < TheAceOfHearts> I have a quick security question... Using express. I get a POST with a text field, and I want to save what the client sends to me in a text file. If I use: fs.writeFile('dir/', req.body.code, callback);, is there a risk that the code in the body can be escaped? for example, in the req.body.code, if it were to end in \, could it be used to escape? I'm not sure how Javascript evaluates the code. Or since I'm using the variable, do I avoid this?
09:17 < dileep> how to install mysql inn node.js
09:21 < tellnes> dileep: https://github.com/felixge/node-mysql
09:21 < jawsome> https://npmjs.org/package/mysql
09:21 < jawsome> ^
09:21 < dileep> tellnes,doesnt work like that
09:23 < tellnes> node-mysql is just a driver. For MySQL, you have to download it and install it.
09:23 < jawsome> dileep: By >install mysql in node.js
09:23 < jawsome> I assume you're trying to connect to a mysql database, not create mysql within node. What's not working?
09:23 < dileep> not able to install
09:24 < jawsome> dileep: Are you receiving any error messages?
09:24 < dileep> yeah
09:24 < jawsome> dileep: Can you provide a paste?
09:25 < dileep> dileep@dhcppc14:/$ npm install git://github.com/felixge                                                                                                                 /node-mysql.git npm ERR! Error: EACCES, mkdir '/node_modules' npm ERR!  { [Error: EACCES, mkdir '/node_modules'] npm ERR!   errno: 3, npm ERR!   code: 'EACCES', npm ERR!   path: '/node_modules', npm ERR!   fstream_type: 'Directory', npm ERR!   fstream_path: '/node_mod
09:26 < dileep> dileep@dhcppc14:/$ npm install git://github.com/felixge                                                                                                                 /node-mysql.git npm ERR! Error: EACCES, mkdir '/node_modules' npm ERR!  { [Error: EACCES, mkdir '/node_modules'] npm ERR!   errno: 3, npm ERR!   code: 'EACCES', npm ERR!   path: '/node_modules', npm ERR!   fstream_type: 'Directory', npm ERR!   fstream_path: '/node_mod
09:26 < jawsome> Did you try npm install mysql first?
09:26 < dileep> yeah
09:27 < tellnes> Looks like you do not have write access to the node_modules folder.
09:27 < tellnes> Are you running `npm install mysql` from your project folder?
09:27 < jawsome> ^ Do you have root privileges on the machine?
09:28 < dileep> first i did sudo apt-get update and then sudo apt-get install libmysqlclient-dev an then npm install -g db-mysql....and then follow the link  that u pasted
09:28 < dileep> yeah i am installing via root access
09:29 < jawsome> Since it appears you're on Ubuntu. Have you tried sudo npm install mysql ?
09:29 < dileep> jawsome,yeah
09:30 < jawsome> Are the error messages you receive from that different?
09:30 < dileep> no 
09:30 < dileep> dileep@dhcppc14:/$ sudo npm install mysql npm http GET https://registry.npmjs.org/mysql npm http 304 https://registry.npmjs.org/mysql npm http GET https://registry.npmjs.org/require-all/0.0.3 npm http 304 https://registry.npmjs.org/require-all/0.0.3 mysql@2.0.0-alpha4 node_modules/mysql âââ require-all@0.0.3 
09:31 < jawsome> None of those are errors.
09:31 < jawsome> ls node_modules
09:31 < jawsome> Run that ^
09:31 < dileep> yup but when i follow the program it shows mme error
09:32 < tellnes> "dileep@dhcppc14:/$"
09:32 < dileep> mysql 
09:32 < tellnes> For me it does not look like you are in the project folder.
09:33 < dileep> tellness,i am installing that globally
09:33 < jawsome> tellnes: I think he's putting this in / -_________-
09:33 < jawsome> dileep: You would then use the -g flag
09:33 < tellnes> jawsome: me to
09:33 < jawsome> sudo npm -g mysql 
09:34 < tellnes> dileep: dont install modules you are using localy globaly
09:34 < jawsome> However, it's recommended to install only what you need in the directory of the project itself
09:35 < dileep> ok,
09:35 < dileep> var mysql = require('mysql'); var client = mysql.createClient({   host: 'localhost' });   client.query('SELECT "HELLO,WORLD !"',function (err ,results,fields){ console.log(results); console.log(fields); client.end(); } );     the following program i am running so what sholud i have to put in host
09:38 < jawsome> Is the MySQL server you're connecting to on your local machine?
09:39 < dileep> jawsome,i am not getting u
09:40 < jawsome> Is the database you're trying to connect to being served from the same server you're on?
09:40 < dileep> host:i am getting on the server follow the ip address
09:40 < dileep> by putting adress like 192.166.111.159
09:42 < jawsome> And you'll specify the user/pass:
09:42 < jawsome> var mysql      = require('mysql');
09:42 < jawsome> var connection = mysql.createConnection({
09:42 < jawsome>   host     : 'localhost',
09:42 < jawsome>   user     : 'me',
09:42 < jawsome>   password : 'secret',
09:42 < jawsome> });
09:44 < tellnes> TheAceOfHearts: No, it should not be escaped. But you should do some more checks so that no one are filling up your disk or like.
09:51 < dileep> jawsome,var mysql = require('mysql'); var connection = mysql.createConnection({   host: 'localhost',   user: 'root',  password: 'root' });   connection.query('SELECT "HELLO,WORLD !"',function (err ,results,fields){ console.log(results); console.log(fields); connection.end(); } ); 
09:57 < standoo> anyone making any interesting nodejs apps here?
10:01 < dileep> standoo
10:01 < dileep> jawsome,u there ???
10:02 < tellnes> standoo: Probably the majority here. What about you?
10:02 < standoo> wow
10:02 < standoo> i'm writing a platform for nodejs apps
10:02 < standoo> its not nodejitsu
10:02 < sticko> what will it do?
10:03 < standoo> you can host your nodejs apps
10:03 < standoo> on your own vps/dedicated server
10:04 < sticko> I can. What features you wanna provide with that platform?
10:04 < standoo> I can?
10:05 < standoo> one click install nodejs apps
10:05 < sticko> u mean sth like a library with ready to install apps?
10:06 < sticko> (free/commercial?)
10:06 < standoo> both free and commercial
10:06 < sticko> well its obvious you can clone some git repo and do sth like >>>node app.js
10:06 < sticko> yea that could be interesting.
10:07 < standoo> sticko: PM?
10:07 < sticko> ok
10:08 < tellnes> I'm interested too.
10:08 < standoo> tellnes: IM?
10:10 < tellnes> standoo: You are not ready to publish details yet? (ie write here)
10:11 < standoo> tellnes: not yet. because i haven't finalized it yet
10:11 < standoo> tellnes: i'm still gathering individual views from developers
10:13 < tellnes> pm ok
10:17 < dileep> pm ok
10:17 < dileep> can anyone provide me the way how can i eexecute query of mysql in node.js
10:18 < necco> dileep: https://github.com/sidorares/nodejs-mysql-native
10:19 < gavri> I've been reading the grunt.js documentation and I don't know how to call a method exported from a module in a grunt task. all the examples seem to depend on built-in or custom plugins
10:20 < gavri> any pointers to where I could find this info?
10:20 < terinjokes> 22
10:20 < tellnes> dileep: Do you get any error messages on the code snippet you posted further up?
10:22 < dileep> tellness,yeah i got undefined undefiined
10:23 < tellnes> try console.log(err)
10:23 < tellnes> or
10:23 < tellnes> if (err) throw err
10:24 < tellnes> If you get an error then will results and fields be undefined
10:26 < dileep> hey u know node.js screw me alot...
10:31 < gavri> is there a way to get the node command line tool to execute a function exported from a specific module?
10:33 < tellnes> gavri: node -e "require('the-module').theFunction()"
10:33 < gavri> tellnes: thanks
10:34 < gavri> -e, --eval script    evaluate script
10:34 < Nikolas__> Hi guys
10:34 < gavri> sounded like it read in a filename and executed the file
10:34 < Nikolas__> I#ve got a problem installing node, maybe someone could help
10:34 < Nikolas__> ?
10:34 < dileep> nikoolas,
10:35 < Nikolas__> I get the following message "File "./configure", line 355     1 if options.unsafe_optimizations else 0)"
10:36 < Nikolas__> When I start ./configure I went in this problem
10:38 < tellnes> Nikolas__: I do not know, but usually when I see someone has a problem with the configure script, then mostly someone answers that they have the wrong version of python.
10:39 < Nikolas__> Yes I've recogniced that already
10:39 < Nikolas__> I had nodejs running before in Version 06.4
10:40 < Nikolas__> now I've deleted the whole nodejs stuff and want to reinstall it in the current stable release
10:41 < Nikolas__> I don't know why I get that error, it worked before
10:41 < Nikolas__> before the 0.6.4 install I had installed python in v2.7
10:42 < tellnes> Since no one else answers, could you try the mailing list.
10:43 < standoo> try using nvm?
10:44 < Nikolas__> ah okay, there's python 2.4 still in the system
10:44 < Nikolas__> I think I have to tell nodejs configure where the python 2.7 is
10:44 < standoo> you using linux?
10:44 < Nikolas__> how can I do that?
10:46 < Nikolas__> i#m using linux 
10:46 < Nikolas__> centOS
10:46 < standoo> try updating your centOS
10:46 < standoo> centOS should have a package manager?
10:47 < standoo> you might even want to ask this question in the centOS channel
10:47 < Nikolas__> yes but there's only a nodejs package with version 0.6.4 from may or march this year
10:48 < Nikolas__> No idea how i can tell the nodejs configure script using the python2.7 installation?
10:53 < tellnes> I saw a question about it on the mailing list (I think) some time back. It should be possible to search it out.
10:54 < Nikolas__> Ok, perhaps I#ve figured it out
10:55 < Nikolas__> just changed the first line of configure script from python to python2.7
10:55 < Nikolas__> install seems to run correctly
10:56 < Nikolas__> I'm still no linux pro ;) But I have to use nodejs, it's awesome ;)
10:56 < Nikolas__> Thank you guys
11:39 < andrew____> anyone combined socket.io and backbone.js ?
11:43 < andrew____> ....anyone combined socket.io and backbone.js ?
11:43 < deoxxa> you mean in the time since you last asked?
11:43 < deoxxa> probably not
11:50 < Sorella> andrew____, doesn't Backbone expect a REST architecture? I don't see how you'd use it with websockets, because they're... well, websockets :3
11:50 < andrew____> ya i understand that
11:50 < Sorella> And by "use it with" I mean use the websockets as the backend.
11:50 < Sorella> I don't see why you wouldn't be able to use Backbone and socket.io together in the same page, though.
11:50 < andrew____> just cant find any decent way to organise a socket.io app
11:51 < andrew____> my app is pure socket.io
11:51 < Sorella> andrew____, what kind of App are you building? You can just write your own MVC stuff, you can use MVVM (knockout).
11:52  * Sorella would go for reactive interfaces, they apply better to the socket.io model, imho.
11:52 < andrew____> a chess game
11:52 < andrew____> just for fn
11:52 < andrew____> *fun
11:54 < pyykkis> andrew: this might be worth checking out: https://github.com/raimohanska/bacon.js
11:54 < agu10^_> is node.js still alive?
11:55 < standoo> agu10^_: yes
11:55 < pyykkis> I just happen to made introductory exercise this morning, it just blow my mind: https://github.com/raimohanska/bacon-devday-code
11:55 < agu10^_> why should i use Node.js? should i use it for regular websites
11:56 < agu10^_> instead of php?
11:57 < chewed-on> agu10^_: I'm no pro but I'll try to answer you from my own perspective.
11:57 < agu10^_> yes please
11:58 < chewed-on> agu10^_: I've recently learnt a bit of Symony web framework (PHP based) and it's very good, it builds great web servers and web service, I thought I can build anything.
11:58 < chewed-on> with it
11:58 < chewed-on> agu10^_: then for one of my projects, I need to implement a Push Notification Server for an iPhone app.
11:58 < chewed-on> agu10^_: that's where I hit a brick wall
11:58 < agu10^_> ok
11:59 < chewed-on> PHP wasn't designed to do network related stuff
11:59 < chewed-on> It wasn't designed to maintain a connection to another server like Apple's push notification through secure socket layers
11:59 < chewed-on> and I was trying to use infinite loops and such to build the push server
11:59 < Sorella> agu10^_, Node is an application framework with asynchronous I/O. This means it totally rocks socks when used for applications that are I/O bound, because you can do other stuff when you're waiting to get response from reading some file or loading some resource on the interwebs. As such, it does quite rock for webapps, because that's what they usually do: receive a request from an interwebs user, do something (query dbs, load file, etc), send the 
11:59 < Sorella> response back. Since it's asynchronous you: 1.) don't worry with thread stuff 2.) achieve good concurrency because you can respond to other requests while you process the I/O operations from the first one.
12:00 < chewed-on> agu10^_: until Yesterday, I discovered Nodejs :D
12:00 < chewed-on> After reading a short book it felt like the right way to tackle this problem of mine
12:01 < Sorella> agu10^_, and there are a few frameworks and libraries you can use if you need to serve webpages. I believe Express is the most famous one. There are also CMS stuff being developed in Node. And libraries for working with most of the DBs (NoSQL being the most prolific from what I gather)
12:01 < chewed-on> agu10^_: in short, personally I like to think of NodeJS as the right tool for building network servers while Symfony web framework for web servers
12:01 < agu10^_> Sorella, so basically most webpages should still be made with php, but use Node.js for the more complex persistent stuff?
12:02 < agu10^_> with sockets, etc, for web apps?
12:02 < agu10^_> chewed-on, i don't follow you. web servers vs network servers?
12:02 < Sorella> agu10^_, no. You can develop webpages with Node.js and they'll be faster than what you develop with PHP (V8 engine is faster, Node can respond to lots of requests without needing lots of configuration)
12:03 < Sorella> agu10^_, if you ~should~, that depends on how much you and your team knows PHP vs how much you and your team knows Node/JS.
12:03 < agu10^_> php can be fast using what facebook uses, right?
12:04 < Sorella> agu10^_, Facebook compiles their PHP to C++, iirc. But that's a hack, and it would be faster and more stable if they've written it in another language to begin with. Facebook's chat is written in Erlang iirc.
12:04 < agu10^_> ooh i see
12:05 < agu10^_> so they just used php because it was what they had started with, right?
12:05 < Sorella> But again, it would be better if you've started with the right technology for the job to begin with. Having to do a complex setup because you made a wrong decision in terms of scalability is stupid.
12:05 < chewed-on> agu10^_: I am probably wrong, but think of network type servers like Chat Room like IRC and web servers like web sites and admin systems
12:05 < agu10^_> what do you think would have been the right tool for fb?
12:05 < chewed-on> agu10^_: what are you trying to build ?
12:05 < agu10^_> Sorella, yes. but isn't it easier to find php coders rather than Node.js or something else?
12:06 < agu10^_> chewed-on, just learning in general
12:06 < agu10^_> i want to build many different things
12:06 < mks> any application that can be written in javascript, will eventually be written in javascript.
12:06 < mks> this is the rule
12:06 < chewed-on> agu10^_: ok, why not try them both and learn them both, then you'll be a very good candidate 
12:06 < chewed-on> for jobs
12:06 < Sorella> I'm not sure, that would depend on what their team was good at. Haskell might have been a good choice, but no one will ever know. Node didn't exist at the time, but there are some problems with memory limitations if I remember correctly — it still rocks, though. Maybe Go, maybe Erlang, maybe lots of other good languages/tools.
12:07 < agu10^_> mks, why?
12:07 < agu10^_> chewed-on, no point in doing more work than necessary
12:07 < agu10^_> well, more or less
12:07 < agu10^_> I have a preference for C# right now.
12:07 < mks> do you question the second law of thermodynamics?
12:07 < mks> js has a huge momentum
12:07 < mks> it is everywere
12:08 < agu10^_> is it really?
12:08 < agu10^_> more than php, C#, python?
12:08 < Sorella> agu10^_, in terms of language expressiveness, JavaScript kicks PHP's butt pretty darn good.
12:08 < mks> ja
12:08 < mks> sure
12:08 < bitfed> :-\
12:08 < mks> none of those run in every browser
12:08 < bitfed> It has more potential
12:08 < Sorella> agu10^_, and it has the most awesome package manager I've had the pleasure to work with.
12:08 < mks> ^^
12:09 < agu10^_> package manager? what do you mean?
12:09 < bitfed> PHP may be pretty standard and proliferated, but js is more attractive to the next generation of web developers
12:09 < chewed-on> mks: if you count lynx … well nothing runs in every browser :D
12:09 < agu10^_> sure but everything runs on servers, not just Node.js
12:09 < deoxxa> mks: that rule is proving more and more true as time goes on
12:09 < bitfed> And more flexible I think?
12:09 < mks> you can write a new lynx
12:09 < agu10^_> bitfed, in that case why not use C#, python, erlang, go, haskell, java, etc?
12:09 < mks> in node
12:09 < Sorella> agu10^_, it's the thing you use to manage your dependencies. You install and manage any library your application might depend on quite easily. And that's per-project too. Something I don't think Python's pip does.
12:09 < mks> that runs javascrito
12:09 < mks> it will be HUGE
12:10 < bitfed> js is even more portable
12:10 < agu10^_> Sorella, oh great
12:10 < bitfed> It means that if you start now, you can build a massive database of reusable code and keep using it for the next 15-20 years
12:10 < agu10^_> why is Node.js better than other server-side solutions?
12:11 < Sorella> bitfed, almost any language could be more portable, just write a compiler/interpreter.
12:11 < mks> nothing is absolutely better
12:11 < bitfed> js will only grow, I think PHP will decline over time
12:11 < mks> here we all fucking love javascript
12:11 < mks> it is just a tool
12:11 < bitfed> Sorella: You going to write one for iOS, Android, WebOS, etc etc?  js runs on all of those already
12:11 < Sorella> agu10^_, it might not be better, depending on what you want to do.
12:12 < agu10^_> ok. where should i pick something else?
12:12 < agu10^_> 'when
12:12 < bitfed> I'm not saying it's better, I just think it makes sense to invest in js because of what I think the next two decades looks like
12:12 < mks> when you have to do heavy computations
12:12 < mks> but this is falling short
12:12 < Sorella> agu10^_, again, Node.js is just a tool, it has its strong and weak points. You need to know them and contrast with what you want to build before deciding which tool you should go with. That's how Facebook devs chose Erlang to build their Chat system, even though no one knew Erlang (at Facebook) at that time.
12:13 < chewed-on> bitfed: the more you say the more I want to continue reading my Node JS book :P
12:13 < agu10^_> bitfed, i see what you mean
12:13 < agu10^_> the next 2 decades are likely html5 D:
12:13 < mks> next two decades? isn't the world ending next month?
12:13 < Venemo> lol
12:13 < mks> better to have fun until then
12:13 < chewed-on> agu10^_: use the right tool for the right job, that's why I said it would be better if you know them all
12:13 < mks> and nodejs is FUN
12:13 < bitfed> I like node.js the most because it's gotten me out of the DOM.  I needed a break.
12:14 < mks> enough evangelizing. back to writing code. have fun all of you today. i will.
12:14 < bitfed> :)
12:14 < bitfed> Enjoy
12:15 < bitfed> I've got some tinkering to do myself, bbl
12:15 < agu10^_> i should remove this idea from my mind: of using the best language for everything
12:15 < chewed-on> mks: lol!
12:15 < Sorella> agu10^_, Node rocks at I/O applications, that includes webservers, web pages, socket applications, etc. But it is terrible at computational intensive applications because of the language it uses (JavaScript), so if you need to deal with lots of mathematics or file processing, it won't be that good of a choice. For things that need concurrency, Node can be a good thing, but if you need high availability and failover stuff, Erlang might be a better
12:15 < Sorella>  choice, because those things are already there. If you need full parallelism, Haskell might be a better choice.
12:15 < Fike_> having a little trouble emitting events in node
12:16 < mks> Sorella: if you write your games using WebGL, you can leverage the GPU to do heavy computations
12:16 < Fike_> been reading the events module docs
12:16 < Sorella> And note the "might be", because that also depends on several other factors, like tools, knowledge from the people who gonna work on the thing, time, etc.
12:16 < agu10^_> Sorella, you mean for its speed?
12:16 < Fike_> but I don't understand it
12:16 < mks> for instance: https://turbulenz.com/games/save-the-day/play
12:16 < Fike_> basically I have a function that connects to a server, but I need it to emit events
12:17 < Fike_> so if I instantiate the object
12:17 < agu10^_> can you run jQuery on Node.js?
12:17 < mks> sure
12:17 < Fike_> I need to do obj.on("test", function() {});
12:17 < mks> but you have to implement the DOM
12:17 < mks> there are modules for that
12:17 < mks> but.... what's the point?
12:17 < Sorella> agu10^_, you could, but what would be the point? Node applications usually don't work with a DOM.
12:17 < agu10^_> it's uncommon to use jQuery? ok
12:17 < mks> you shouldnt use JQuery
12:17 < Sorella> (unless you're doing web site scrapping).
12:17 < mks> even in the browser
12:17 < agu10^_> php has DOM
12:17 < mks> (my POV)
12:17 < agu10^_> why not?
12:18 < aandy> mks: document.querySelector? :)
12:18 < mks> the DOM is not that bad
12:18 < Sorella> jQuery is a terrible library, imho. Library bloat and bad API.
12:18 < mks> once you take your time to learn it properly
12:18 < agu10^_> why not? modify the html data server-side instead of client side
12:18 < mks> JQuery damaged a lot of young delevopers brain
12:18 < mks> being lazy
12:18 < mks> too much
12:18 < chewed-on> agu10^_: just for you bro: http://stackoverflow.com/questions/5062614/how-to-decide-when-to-use-nodejs   :)
12:18 < mks> we are all lazy
12:18 < aandy> depending on your computations, why compute server side what can be done client side?
12:18 < Sorella> agu10^_, the server and the client are two whole different and separated environments.
12:19 < mks> thin servers -> thick clients
12:19 < agu10^_> Sorella, so what?
12:19 < agu10^_> aandy, for SEO
12:19 < deoxxa> agu10^_: you have to remember that not everything in node.js involves HTML, or even HTTP
12:19 < agu10^_> yes i know
12:19 < Sorella> agu10^_, there's a Lisp framework that does that, it maintains one representation of the DOM tree for ~every~ client that ~ever~ connects to your server, for like ~ever~. So it's ~really~ memory intensive.
12:19 < aandy> mks: what do you mean by that?
12:20 < agu10^_> Sorella, something like syncing client html to server?
12:20 < mks> with the lazy-jquery argument?
12:20 < agu10^_> lisp != Node.js though
12:20 < aandy> agu10^_: well, there are other ways to structure SEO, but i guess it depends on what it is you're trying to do with js
12:20 < aandy> mks: with the thin -> thick i mean
12:20 < mks> that we are lazy, but we are also courious. we are hackers. we love to learn how things works. and jquery hides that.
12:20 < mks> oh
12:20 < mks> that argument
12:20 < Fike_> hm
12:20 < Sorella> agu10^_, no, it maintains the representation of how the page will be, then when the client does some action it sends an event back to the server, the server responds with a bit of HTML/JS to change the page and reflect the new server's state.
12:20 < mks> more work to the clients
12:20 < agu10^_> aandy, i meant for sending webpages
12:20 < Fike_> can someone help me wih my issue? :P
12:21 < Fike_> with*
12:21 < tellnes> mks: Do you use just plain dom or do you have somewhat minimalist library?
12:21 < mks> they are more powerful. cheaper
12:21 < Sorella> agu10^_, but then you need to maintain sessions for everything. Sessions don't scale. And they're memory intensive.
12:21 < aandy> agu10^_: if you use js to generate something you want to be in a search engine ... shouldn't you check first that they support it (google, bing etc.)
12:21 < mks> and they can be connected, in realtime, to our server/services
12:21 < agu10^_> Sorella, sessions don't scale? why not?
12:21 < Sorella> (at least, they don't scale horizontally, you can't just add a new node to your network and have it divide the workload)
12:21 < aandy> mks: ah okay. yeah, that's what i meant too :)
12:21 < mks> a huge network mesh
12:22 < mks> the true cooperative multitasking
12:22 < agu10^_> aandy, support what exactly?
12:22 < chewed-on> aandy: there are reasons to do certain things server side than client side, for example, if you want to re order a table of data based on row weights, it would be faster having a stored procedure in the SQL database and using the client code to tell the server to execute the stored procedure to reorder the table rows (I am talking about HTML table rows of data). 
12:22 < Sorella> agu10^_, because they live in the memory, they're stateful, and they can be only used in a single node. Whereas REST is stateless, so you can just add several other computers to your network and start dividing the workload right away. All the data is encapsulated in the request.
12:22 < aandy> javascript execution? if your data is not rendered, but generated by js
12:22 < agu10^_> Sorella, memcached exists
12:23 < agu10^_> php guys can save any object to a cluster
12:23 < agu10^_> and get it back from any server
12:23 < chewed-on> aandy: rather than having the server send the data to the client web browser through the network, re order the table data, then send the newly sorted data back to the server
12:23 < mks> the problem with PHP is the bloat of core
12:23 < agu10^_> yes i know
12:23 < agu10^_> but at least memcached works
12:23 < aandy> i'd call that a query assesment, but either way, if he's talking about jquery and server side, then i'm assuming he's talking about *manipulating* some data, not querying
12:24 < Industrial> Anyone here familiar with One Page applications and REST architecture? I have a  very simple data model: User and Transaction with only the resource /transactions. Reading about authentication I'm opting to go for digest over SSL.
12:24 < gavri1> I'd like to create a module in a file that when invoked using node on the command line executes a function, but when required from another file only returns the function instead of actually executing it. how do I do this?
12:24 < mks> clients (browsers) are **very** good at working with the DOM.
12:24 < mks> why do that work on the server side?
12:24 < Sorella> agu10^_, not as fast. Plus network/retrieval overhead.
12:24 < Industrial> What I don't understand is this; In order to give a user access to areas on the website I need a session. Sessions are stateful. REST architectures are not.
12:25 < mks> sessions are state.
12:25 < Industrial> So how do I implement a login, without state?
12:25 < mks> you don't
12:25 < Industrial> then I need a session resource to generate a token to send back to the client to sign each further request?
12:25 < mks> but for this, something like redis is the right tool for the job
12:26 < mks> redis has ttl straight on the keys
12:26 < Sorella> Industrial, use tokens.
12:26 < mks> so you can just write your token, set a ttl, and forget about it.
12:26 < Sorella> Industrial, or you mean a website rather than an API?
12:26 < mks> you query the token. if it is there, the session is still valid, if it is not -> expired.
12:26 < Industrial> yes
12:26 < mks> easy
12:26 < Fike_> ._.
12:26 < Fike_> anyone have experience with event emitters etc.?
12:27 < mks> hehe
12:27 < agu10^_> Industrial, you can send login details for each REST query, right?
12:27 < aandy> like signing AWS requests
12:27 < aandy> or a naive oauth approach
12:27 < Industrial> correct, but I still need a way of differentiationg 'logged in' from 'anonymous' in terms of what can be seen on the site
12:27 < aandy> if you're trying to avoid cookies that is
12:27 < aandy> well, no valid session = anonymous
12:28 < aandy> or rather, valid session = logged in :p
12:28 < mks> logged in means a "peer" that has some state set on the server side.
12:28 < Industrial> So then I do need a POST /sessions when I submit my login form?
12:28 < mks> also an anonymous guest can be considered "logged-in"
12:29 < mks> the point is more about what he/she is authorized to do.
12:29 < aandy> not necessarily. you could have an Authentication header sent on every request, or token like oauth
12:29 < mks> how is that different from a cookie?
12:29 < mks> cookies are http headers
12:29 < Industrial> but how do I get that token, with no session and only a username and password?
12:30 < aandy> mks: how so? if i send X-something-Whatever: 1, that's not a cookie. it's a header
12:30 < mks> sure
12:30 < aandy> ah, you mean the cookie is a header
12:30 < aandy> right, sorry
12:30 < mks> but if you are trying to recreate the same functionality of cookies
12:30 < aandy> i thought you meant the other way :P
12:30 < mks> why don't use cookies (and their awful api)?
12:30 < aandy> *shrugs*
12:30 < b-ot> ¯\_(ツ)_/¯
12:31 < aandy> haha
12:31 < Industrial> (because theres EU legislation requiring a popup to agree to use cookies now)
12:31 < mks> and if you don't, you risk fines.
12:31 < aandy> free internet 1 - china internet 0
12:31 < mks> (using different tracking solutions is **dangerous**)
12:32 < aandy> but seriously though, cookie warnings only have to be displayed once, and you could do that either at your login page or sign up
12:32 < chewed-on> What frameworks do you guys use with Node JS, Meteor ?
12:32 < Sorella> chewed-on, frameworks for...?
12:33 < agu10^_> sessions don't use cookies?
12:33 < aandy> if express is a framework, then i use that sometimes
12:33 < chewed-on> Sorella: Node JS
12:33 < chewed-on> Sorella: web frameworks ? :P
12:33 < Sorella> chewed-on, no, I mean for which purpose? Like, building web apps, building desktop apps?
12:33 < aandy> agu10^_: they do. we meant in regards to state (which doesn't have to use cookies)
12:33 < Sorella> Ah, I usually go with Express.
12:33 < chewed-on> Sorella: things that does the model, view and controller stuff
12:33 < mks> agu10^_: yeah. but just as a "token-transport-layer".
12:33 < gavri1> does node wait for all callbacks to complete before exiting?
12:34 < chewed-on> Sorella: for web apps
12:34 < agu10^_> so using cookies for sessions is not bad?
12:34 < Sorella> gavri1, yes
12:34 < agu10^_> i don't understand
12:34 < gavri1> Sorella: thanks
12:34 < aandy> chewed-on: then you want express. has just that :)
12:34 < mks> agu10^_: no. it is the only reliable way for handling that.
12:34 < agu10^_> it could use the IP
12:35 < mks> you can try to reinvent that wheel, but it is tricky
12:35 < agu10^_> or save something in the php and send it again using POST
12:35 < mks> IP?
12:35 < aandy> most do (or most suggest that you do)
12:35 < mks> IP is not unique
12:35 < aandy> for session verification
12:35 < agu10^_> yeah exactly, reinventing the wheel
12:35 < aandy> to prevent hijacking
12:35 < agu10^_> okay
12:35 < mks> if me and you are in the same room
12:35 < mks> we have the same IP
12:35 < aandy> or "some guy in china accessed your youtube account"
12:35 < agu10^_> yea i know
12:35 < chewed-on> Sorella:  recently, I've picked up Symfony web framework, it was great that it can completely separate data, business logic and presentation, it had an ORM Doctrine for data management, a Twig Template engine for Presentation and it structured the controllers into folders and such, I am wondering if Node JS have something similar, I don't want to go back to writing websites with raw PHP :P 
12:36 < agu10^_> when calling a page, cookies will be sent again?
12:36 < aandy> mks: right, but short of https there's not much you can do about that. it can never truly be prevented
12:36 < agu10^_> or does it send a unique id or something?
12:36 < aandy> agu10^_: as long as your cookie is valid for, and the domain matches, yes
12:36 < agu10^_> ok
12:36 < agu10^_> i get it
12:36 < mks> and you can "hide" cookies from the client side js code
12:36 < mks> using the "HttpOnly" parameter
12:37 < Sorella> chewed-on, most people on the Node community prefer to build their own architecture using libraries, rather than frameworks enforcing everything about what they do. So if they need ORM, they'll grab an ORM library from NPM. Since deps management is rather easy, libraries rock here.
12:37 < aandy> ,1
12:37 < aandy> +1*
12:37 < deoxxa> +1,1
12:37 < aandy> :p
12:38 < Sorella> chewed-on, don't build large apps, break them down in small libraries and piece them together. As substack would say :3
12:38 < aandy> mks: also signing cookie values will help server-side verification that it hasn't been tampered with
12:38 < mks> if you don't renew the token for every request, yes
12:39 < chewed-on> aandy: right Express, Sorella build own architecture, very hardcore… :
12:40 < aandy> i think his point is that you should write as modules - things that do one or two things only, and the combine, rather than having just one big "myapp.js"
12:40 < aandy> even with express you still end up either using a lot of external middleware, or writing addition middleware yourself
12:41 < aandy> there's rarely any one size fits all
12:41 < agu10^_> how do you scale a Node.js app through multiple servers or a cluster?
12:41 < agu10^_> can you?
12:41 < Industrial> agu10^_: loads of blogs on that ;)
12:41 < deoxxa> agu10^_: more servers
12:41 < agu10^_> okay.
12:41 < aandy> i haven't toyed with the new cluster api in node, but you can do that just by running more processes and have a load balancer
12:41 < agu10^_> can you do image processing in Node.js?
12:42 < agu10^_> or complex stuff like that?
12:42 < aandy> yes, although one threaded
12:42 < deoxxa> agu10^_: depends how you build your application - keep your state distributed, or in the client, or somewhere else, and you can just start up more servers to "scale"
12:42 < agu10^_> oh why can't i run multiple threads in Node.js?
12:42 < agu10^_> or can i run various nodes or something?
12:42 < deoxxa> agu10^_: for image processing there are graphicsmagick, imagemagick, etc libraries
12:42 < aandy> https://github.com/aheckmann/gm
12:42 < agu10^_> how can i use the 4 cores?
12:42 < mks> agu10^_: by design nodejs is single threaded.
12:43 < aandy> agu10^_: run 4 processes (or more) :)
12:43 < mks> you can "hack" it and run multiple threads if you like.
12:43 < agu10^_> why would i run 4 processes for 1 app?
12:43 < mks> there are modules for that
12:43 < agu10^_> or how would that work?
12:43 < aandy> what i mean is, each process is one thread, so it'll do 25% at max for some heavy image trick - unless you thread it manually
12:43 < aandy> you can do 4 images at once and get 100% of course
12:43 < agu10^_> what's the satate deoxxa?
12:44 < agu10^_> or how do you save it?
12:44 < agu10^_> aandy, i see. ok.
12:44 < agu10^_> those libraries use pure javascript? they don't use C code or something, right?
12:45 < agu10^_> can you interface Node.js with C#, C++, python, etc?
12:45 < agu10^_> like make native calls or something ?
12:45 < deoxxa> c/c++, yes
12:45 < aandy> i *think* you can thread more easily if you take advantage of the cluster api, but i haven't tested it yet myself http://nodejs.org/api/all.html#all_cluster
12:45 < agu10^_> why doesn't javascript on browsers run multithreaded?
12:46 < aandy> in terms of shared ressources, like if you have a huge array of images to process
12:46 < mks> agu10^_: because event loops is a better fit for GUIs.
12:46 < mks> and the browsers are just a glorified gui.
12:46 < Sorella> agu10^_, because JavaScript has been developed to be single threaded.
12:47 < Sorella> And what mks said. Plus multi-threading in stateful languages is a can of worms. A terrible one at that.
12:47 < Sorella> So processes that communicate through messages are a *safer* approach to concurrency. Plus asynchronous concurrency for I/O is ♥
12:48 < mks> agu10^_: the best way to answer your questions, is to write some code, and experience yourself the pros and cons.
12:48 < aandy> hehe
12:48 < agu10^_> javascript for heavy apps is a joke then
12:48 < agu10^_> imagine making heavy 3d games in a single thread
12:48 < mks> again
12:48 < agu10^_> even phones have 4 cores
12:49 < aandy> depends how they're written
12:49  * Sorella would love to see immutability in JS, and engines taking advantage of that.
12:49 < aandy> if you write it to run only one thread, then sure
12:49 < mks> not the best game maybe
12:49 < mks> but check this out: https://turbulenz.com/games/save-the-day/play
12:49 < Sorella> agu10^_, most of the "heavy lifting" in games is rendering, and that's pipelined in the GPU.
12:49 < mks> 3d game (console quality) running in a browser
12:49 < mks> with no plugins. just javascript and webgl
12:49 < agu10^_> Sorella, that's not true. there's a lot of CPU involved
12:49 < Sorella> http://hexgl.bkcore.com/
12:49 < agu10^_> of course the GPU is also important
12:50 < mks> agu10^_: javascript is fast enough
12:50 < mks> the bottleneck is not processing
12:50 < mks> but rendering
12:50 < Sorella> There's a few other like those. And JS is getting a few additions to make types more efficient for games. Most JITs nowadays that do JS are really fast.
12:50 < agu10^_> not really. that's false in most cases.
12:50 < mks> and for that, CSS3 and WebGL exist.
12:50 < aandy> yeah but if your game is running at 100% cpu and fully accelled gfx, then your game is *seriously* heavy and shouldn't be written in anything but c++
12:51 < agu10^_> why? if you want to run multiplatform on browsers
12:51 < mks> aandy: i disagree with that
12:51 < mks> the web is the platform
12:51 < agu10^_> CPU is used to alleviate the GPU
12:51 < aandy> i've never tried a game which had me running 100% cpu
12:51 < agu10^_> so it doesn't make sense to say "the GPU is the bottleneck"
12:51 < Sorella> agu10^_, v8's JIT is one of the fastest around, even when JS is terrible at maths. Once JS gets more specific type structures for WebGL and high-perf games, it'll be even faster.
12:51 < agu10^_> there are lots of things the CPU can do to optimize what is done by the GPU
12:52 < aandy> try the quake3 port in js
12:52 < agu10^_> Sorella, sure but still no threading D:
12:52 < aandy> runs very smooth on ancient hw
12:52 < mks> check out three.js
12:52 < aandy> and i think there's a microsoft demo site of an aston martin model render with *a lot* of vertexes
12:52 < mks> mmm
12:52 < aandy> ie.microsoft.com/testdrive/performance/astonmartin/
12:52 < agu10^_> looks like a lame flash game...
12:52 < mks> no. that are just jpegs
12:53 < aandy> oh, really?
12:53 < agu10^_> this is just like a flash game. but in html5
12:53 < agu10^_> it's not like a AAA game. that would be GTA4
12:53 < mks> put enough money to it
12:53 < mks> and you will see....
12:53 < mks> GTA4 is GTA4 because of tons of developers
12:53 < agu10^_> ?
12:53 < Sorella> agu10^_, you can use other processes and talk to them.
12:53 < mks> and years of development
12:54 < agu10^_> yes i know. but also because the technology ALLOWS gta4 to work
12:54 < mks> not because of the platform
12:54 < agu10^_> javascript and html5 cannot make GTA4
12:54 < mks> wrong.
12:54 < substack> Industrial: rest is not useful in situations where you actually want state. Just do whatever works instead.
12:54 < aandy> mks: the vertex renders look like canvas, but not jpg's - maybe the 6th gear (the car with texture) is, i'm not sure
12:54 < agu10^_> Sorella, in the browser? no you can't
12:54 < Sorella> agu10^_, you can. I don't remember the name of the feature though :x
12:54 < substack> tiny processes that all talk to each other over the network
12:54 < deoxxa> web workers
12:54 < Sorella> Oh, right, web workers.
12:55 < agu10^_> Sorella, not without breaking the sandbox
12:55 < deoxxa> (that's the browser thing)
12:55 < agu10^_> ahh
12:55 < Sorella> You can transfer buffers around in v8
12:55 < substack> Sorella: you can also decompose problems in such a way that the components are sufficiently separated to achieve the same effect as multiple processes
12:55 < Sorella> So you can do heavy computations on a separate process and send back the results.
12:55 < substack> it's just harder
12:56 < mks> aandy: check the resources downloaded. it is just a **fake**, M$ style.
12:56 < mks> they don't have webgl, so they want to show the kids that it is not important
12:56 < mks> but it is, really. 
12:56 < aandy> i feel sad now :(
12:56 < aandy> well, the quake3 demo then ;)
12:56 < agu10^_> how do you use the 4 cores with javascript on the browser then?
12:56 < agu10^_> how do web workers work?
12:56 < Sorella> agu10^_, again, you won't be seeing AAA games in the browser anywhere in the near future. That's not what the browsers are for, there is too much overhead, JS is not a language for low-level stuff, and the pipeline is entirely driven by the browser. But you will see lots of acceptable games, that run on multiple platforms without much work.
12:57 < mks> Sorella: it is just a matter of time and money. not a problem with the platform.
12:58 < agu10^_> Sorella, there are other frameworks that are ALSO multiplatform and can run AAA games though.
12:58 < agu10^_> the issue is they are not so popular or supported in browsers.
12:58 < agu10^_> mks, yes there is a problem with the platform
12:58 < mks> http://mrdoob.github.com/three.js/ <<= just tech demos, but show that the "primitives" are there
12:58 < Sorella> mks, there's a problem with the language as of now. They're trying to fix it by adding type structures and stuff, but there's still a problem with the language in the terms of how much the JIT can optimise things for you, and how much you have control over the data structures/etc.
12:58 < agu10^_> mks, unless you mean with time the platform will improve
12:59 < substack> the webgl bsg game was pretty impressive
12:59 < substack> and that was a while ago
12:59 < agu10^_> Sorella, type structures?
12:59 < Sorella> agu10^_, yes, but they don't run in the browser without any plugins. And that's a field some people want to play at.
12:59 < agu10^_> why not just change the language completely?
12:59 < Sorella> agu10^_, like C's typedefs.
12:59 < mks> js is ok.
12:59 < mks> you don't need types
12:59 < mks> you need structure for your code. and that is up to you.
12:59 < Sorella> agu10^_, because JS is a pretty language, and it accomplishes what it needs to. It wasn't ~designed~ to write AAA games.
12:59 < agu10^_> Sorella, yes exactly. they don't run in the browser JUST because they can't agree to use the same thing
13:00 < agu10^_> they only agree to use javascript and html5 D:
13:00 < aandy> mks: screw the aston, http://carvisualizer.plus360degrees.com/threejs/ ;)
13:00 < Sorella> agu10^_, browsers won't change. They won't be supporting several runtimes, and plugins make everything less secure.
13:00 < agu10^_> chrome supports flash out of the box
13:00 < mks> aandy: webgl rocks as much as nodejs rocks
13:00 < agu10^_> besides google is pushing nacl
13:01 < agu10^_> why did Flash add 3d support right now, after it has been delcared obsolete? it's stupid
13:02 < Sorella> agu10^_, yeah, just google alone. Mozilla doesn't want to have NaCl, and they're hesitant on PNaCl iirc. Brendan Eich posted something about it on Hacker News
13:02 < aandy> mks: i agree. getting more and more impressed with webgl. the kid in me is pushing my brain to make a small 3d game :>
13:02 < Sorella> Ask adobe.
13:02 < mks> aandy: do it! three.js is a fucking nice lib.
13:02 < mks> as easy as it can get
13:02 < agu10^_> Sorella, yes but chrome is rising. and mozilla can have an external plugin for pnacl i guess
13:03 < agu10^_> people will install it, as long as most people use chrome
13:03 < Sorella> I do expect to see decent 3d games in JS/WebGL in the near future, but nothing like AAA games.
13:03 < Sorella> agu10^_, yes, but Mozilla doesn't want it.
13:03 < aandy> the fact that bsp is already ported makes it seem like it's built by my kind of people :)
13:03 < Sorella> They want the web to be standard, and they don't want Google to dominate or something.
13:03 < agu10^_> Sorella, i doubt mozilla will have much power in the future.
13:03 < Sorella> It was quite the war.
13:03 < agu10^_> hell it even depends a lot on google's donations
13:03 < agu10^_> yeah i know
13:04 < agu10^_> i hope google gives up and makes it REALLY FOSS
13:04 < mks> gotta go now. have fun.
13:04 < aandy> you too ;)
13:04 < agu10^_> Mozilla sounds like a nice foundation
13:04 < trankil> agu10^_: I HOPE MOZILLA SELFKILLS FIREFOX
13:05 < agu10^_> why?
13:05 < agu10^_> they could start a new browser though. using webkit or chromium, etc
13:05 < agu10^_> I like chrome better than firefox
13:05 < agu10^_> but i don't trust google much.
13:06 < aandy> webkit or chromium? doesn't chromium use webkit?
13:07 < agu10^_> kind of, i think
13:08 < Sorella> Chromium uses webkit, Chrome uses Chromium.
13:08 < Sorella> well "uses" for the latter.
13:09 < trankil> well "later" for the lattter.
13:09 < nathan7> WebKit also has a JS engine of its own though
13:10 < trankil> FIREFOXOS LOLOLOLOLLL
13:10 < trankil> FIREFOXOS2 BASED ON WEBKIT LOLOLOOOLLLLOL
13:10 < agu10^_> what?
13:10 < agu10^_> really?
13:10 < agu10^_> not based on firefox?
13:10 < agu10^_> nathan7, V8
13:10 < Sorella> JavaScriptCore.
13:10 < Sorella> It's Apple's engine.
13:10 < Sorella> v8 is a Google/Chrome thing.
13:12 < trankil> V8 IS A COMMUNITY THING, DUMBASS
13:13 < nathan7> Oh, come on.
13:13 < nathan7> That's an illusion.
13:13 < nathan7> agu10^_: No, it's JSCore
13:13 < nathan7> agu10^_: I haven't touched it
13:14 < aandy> lax language here on a saturday
13:14 < nathan7> ..what
13:16 < Sorella> trankil, I don't quite consider Google's FOSS to be "community"
13:17 < substack> big companies like to do code drops
13:17 < deoxxa> firefox is best browser
13:18 < substack> browsers should be like 100 separate projects
13:18 < trankil> Sorella: URE SO STUPID 
13:18 < trankil> WHAT MEAN BSD TO U?????
13:18 < nathan7> hmm
13:18 < nathan7> trankil: It is a license.
13:18 < nathan7> trankil: It is also a bunch of OSes.
13:19 < deoxxa> trankil: bsd == big stupid document
13:19 < nathan7> trankil: The relevant one here is the license.
13:19 < nathan7> trankil: But that has nothing to do with the development model.
13:19 < RLa> substack, if you build chromium from source, doesn't it checkout from like 100 different project repos?
13:20 < Sorella> trankil, I'm not sure where all that will of insulting me comes from, but I'm not in the mood for insults today.
13:20 < nathan7> substack: Yes, but the amount of bureaucracy is rather large per project in a company
13:22 < Kakera> is it possible to reuse the same superagent object for multiple requests?
13:22 < Kakera> I will have the same referer and cookie, and the form data will also be partially the same
13:22 < trankil> nathan7: THE DEV MODEL HAS NOTHING TO DO HERE
13:22 < trankil> nathan7: U CAN GRAB THE PROJECT, CONTRIBUTE OR CONTINUE THE DEV FOR UR OWN 
13:23 < trankil> nathan7: GOOGLE CONTRIBUTE FOR THE COMMUNITY, ISNT THAT EASY TO UNDERSTAND????
13:24 < RLa> trankil, is there some articles about early bsd development?
13:24 < trankil> OMG SOME PEOPLE ARE SOOO SELFBOUNDED
13:24 < RLa> i guess someone would remember stuff what/how they did and wrote it down
13:26 < RLa> i'm interested for historical reasons
13:27 < evelyette> hi
13:27 < RLa> hey
13:27 < evelyette> I'm getting this error: throw new Error('Can\'t set headers after they are sent.');
13:28 < evelyette> I know there's a lot of documentation about this, but it doesn't really imply my use case
13:28 < evelyette> I've been trying to eliminate the cause for that, and my server.js really doesn't contain anything anymore, but the error is still there
13:28 < RLa> you should paste your code somewhere
13:29 < evelyette> yes, here: http://dpaste.com/832510/
13:31 < evelyette> RLa, any ideas ?
13:31 < RLa> and which line throws the error?
13:31 < RLa> it's not the whole code i assume
13:32 < RLa> for routes you should always add some call that terminates the response
13:32 < RLa> res.send(), res.json(o) or res.end()
13:33 < evelyette> http.js:650
13:33 < evelyette>     throw new Error('Can\'t set headers after they are sent.');
13:33 < RLa> you are missing the app's setup code, maybe it's wrong order of middleware
13:33 < evelyette> it's the line in http.js, which is not in my juristiction
13:33 < nathan7> Yes
13:33 < nathan7> Check the stack trace.
13:33 < RLa> please paste the whole stacktrace
13:33 < nathan7> It throws that error because you're doing something silly
13:34 < nathan7> It's a good thing that it does that.
13:39 < evelyette> nathan7, this is the stack:
13:39 < evelyette> [ { route: '', handle: [Function: query] },
13:39 < evelyette>   { route: '', handle: [Function: expressInit] },
13:39 < evelyette>   { route: '', handle: [Function: router] } ]
13:40 < nathan7> evelyette: that's the middleware stack
13:40 < nathan7> evelyette: the thing you pasted before, with the error throwing line
13:40 < nathan7> evelyette: is the first two lines of the stack trace
13:40 < nathan7> evelyette: It shows you where the error originated.
13:41 < evelyette> http://dpaste.com/832517/
13:42 < RLa> /home/eleanor/Desktop/Spideroak/Android/Server/NodeServer/node_modules/socket.io/lib/manager.js:118:10
13:42 < RLa> so something related to socket.io?
13:43 < evelyette> but what ?
14:19 < karlwestin> can i ask you guys, is buffering the content from a stream considered an anti-pattern?
14:20 < karlwestin> just doing it here to get the full content of a request, and to be able to use the content later: https://github.com/karlwestin/fowler/blob/master/lib/fowler2.js
14:20 < aandy> if you can do without, then yes. there's also a push-pull (or something similar) module for fetching x length of a stream, in chunks if that's your reason for buffering
14:21 < aandy> ah, well, dunno. i do the same for http requests
14:21 < aandy> if you need to use is not as a stream but as a "final", then i don't think there's any shame in buffering like that
14:22 < karlwestin> ok, thanks for having a look :)
15:38 < evelyette> nathan7, RLa I've figured out that this line causes the failure: var io  = require('socket.io').listen(httpserver);
15:38 < evelyette> let me present the failure again: throw new Error('Can\'t set headers after they are sent.');
15:39 < RLa> maybe you can take the official socket.io+express example and work from there
15:57 < celinedion> hi all
15:57 < celinedion> im a little confused
15:58 < celinedion> if i have tweets stream 
15:58 < celinedion> how can i do mapreduce jobs on them, please
15:58 < celinedion> (with node)
15:59 < celinedion> Help me, please. whats the best aproach to do that?
16:01 < evelyette> RLa, hi, the same happens even if I download a library from here: https://github.com/LearnBoost/socket.io, enter samples
16:01 < evelyette> install dependencies
16:01 < evelyette> and run app.js
16:01 < deoxxa> celinedion: use the power of luv
16:01 < deoxxa> (oh god that was a bad pun)
16:01 < deoxxa> (i'll see myself out)
16:02 < celinedion> ^^
16:02 < celinedion> no, you are lovely :)
16:02 < celinedion> but please, help me
16:03 < deoxxa> well a map/reduce job is usually run on a specific dataset - what you're talking about doing is more of a running operation
16:03 < RLa> evelyette, what node version are you using?
16:03 < deoxxa> specifically, a map/reduce job has an end. if you have a stream of tweets, it presumably has no end, so you'd be forever in the map/reduce stage and you'd never hit the finalise portion of the operation. thus you would never actually get results.
16:04 < deoxxa> celinedion: can you be more specific about what you want to do?
16:05 < celinedion> deoxxa: thanks you for the precision
16:06 < celinedion> deoxxa: i want to use the twitter streaming api for some specifics users, and provide somme trends and stats in realtime
16:06 < celinedion> so your right, the stats and trends are continuously evolving
16:06 < celinedion> (sorry for my english, im french :)
16:06 < deoxxa> celinedion: well, you have a couple of options. i'll list them from "most ghetto" to "least ghetto"
16:07 < deoxxa> 1 (compton): stream all the data into a database (mongodb or something), run a map/reduce job on cron every couple of hours to update another collection
16:08 < deoxxa> 2 (upstate new york): listen on the "data" event from the twitter stream instance and do your calculations as each tweet comes in
16:09 < deoxxa> 3 (orange county): implement a stream with proper pause/resume stuff and pipe the twitter stream into it, giving you all the fun parts of flow control for a low one-time payment (the payment is spending the time implementing pause/resume behaviour)
16:10 < deoxxa> celinedion: in any case, you're going to want to get familiar with http://nodejs.org/docs/latest/api/all.html#all_stream
16:10 < deoxxa> celinedion: and if you end up implementing a real stream, might i suggest https://github.com/deoxxa/steez - it'll make your life easier :3
16:11 < celinedion> lol, your just awesome! thanks you so much deoxxa!
16:11 < deoxxa> celinedion: oh and 3) should do the same as 2), but with the stream pause/resume semantics wrapped around it (so you don't end up blowing up your database)
16:11 < celinedion> i will carefully read, and tell you back maybe. Thanks again :)
16:11 < deoxxa> \o/
16:12 < deoxxa> also, france is a nice place! :D
16:12 < deoxxa> i was just there yesterday
16:12 < celinedion> ohh
16:12 < celinedion> paris?
16:12 < deoxxa> yep
16:12 < deoxxa> and before that, montpellier
16:12 < deoxxa> for 4 days total
16:12 < celinedion> and your from usa?
16:13 < deoxxa> australia
16:16 < nathan7> deoxxa: You're appearing here monday, eh?
16:17 < deoxxa> errrrrrrm lemme check
16:17 < deoxxa> tuesday, i think
16:18 < nathan7> deoxxa: coo'
16:19 < nathan7> deoxxa: Wanna hang out for no particular reason?
16:20 < deoxxa> nathan7: sure!
16:20 < nathan7> deoxxa: :D
16:20 < deoxxa> nathan7: whereabouts are you situated?
16:20 < nathan7> Right now I'm at Schiphol q=
16:21 < nathan7> deoxxa: I live about twenty minutes from Schiphol
16:21 < deoxxa> ah, nice
16:21 < nathan7> An hour from Amsterdam
16:23 < nathan7> deoxxa: what timeish are you appearing in this country?
16:23 < evelyette> RLa, it's 0.9.3
16:24 < deoxxa> nathan7: not sure yet, haha
16:24 < RLa> evelyette, try stable series 0.8
16:24 < deoxxa> nathan7: i just know that my motel here is booked until tuesday morning, so i have to be out of here at that point
16:24 < evelyette> RLa, ok
16:27 < niggler> in node forever is there a way to force it to reload .foreverignore?
16:28 < evelyette> RLa, works, thank you :)
16:30 < RLa> evelyette, it would be nice to get it running on 0.9 tho
16:38 < nathan7> deoxxa: mhm
16:38 < ravster> hello everyone
17:07 < celinedion> my question is for deoxxa
17:08 < celinedion> i have another question deoxxa, please!
17:08 < celinedion> in the doc of steez you write that "If you continue to emit data at a high rate while the stream is paused, there's a chance you'll blow out your memory usage as events will be indefinitely buffered."
17:08 < celinedion> since i think the total of my users (from whose ill stream the tweets) will be ~4500,
17:09 < celinedion> i should not first redirect the twitter stream to mongodb?
17:09 < celinedion> isnt there a risk for this rate? and if i do like this can i retake the mongodb data as another stream (to pipe it to the streams ill construct myself)
17:12 < celinedion> deoxxa: are you there?
17:17 < mks> Can someone please show me an example of handling manually checkContinue in http?
17:32 < ravster> is it possible to use a datestamp as a version for use with npm?
17:32 < ravster> so "20121116" as opposed to "0.0.12"
17:33 < deoxxa> ravster: yes, but
17:33 < deoxxa> ravster: http://semver.org/ << this is why it's usually x.y.z
17:34 < deoxxa> ravster: there's a concept called a "build" that might work well for you
17:35 < celinedion> deoxxa, i asked you some questions before
17:35 < deoxxa> celinedion: oh! yes, what's up?
17:35 < celinedion> just scroll, its up
17:35 < deoxxa> celinedion: ah, yep, i see
17:35  * deoxxa reads
17:35 < celinedion> ok :)
17:37 < deoxxa> ah that note is only for internal data emission events within steez (or an object extended from it) - so long as the twitter thing you're using as input properly implements streams, when the steez instance is paused it'll tell the twitter thing to stop sending data for a while
17:37 < deoxxa> check out http://nodejs.org/docs/latest/api/all.html#all_stream_pipe_destination_options
17:44 < ravster> deoxxa: thanks for the link
17:46 < celinedion> deoxxa: do you think that https://github.com/AvianFlu/ntwitter is a good one to go with?
17:47 < deoxxa> well AvianFlu is a pretty cool guy, so it's probably pretty great
17:47 < deoxxa> buuuut it doesn't look like it implements a proper stream
17:49 < celinedion> so itsnt pipable?
17:49 < WakkoMircing> celinedion: I think ntwitter is your best bet atm
17:49 < WakkoMircing> That was the decision I reached when looking through npms
17:51  * deoxxa going to dinner, bbl
17:51 < celinedion> okay
17:51 < celinedion> bitfed: can you pipe the ntwitter stream to a normal stream?
17:52 < bitfed> I'm not sure, sorry
17:53 <@mbalho> ntwitter emits stream-like events but it doesnt inherit from the node stream prototype so you dont get pipe and other things
17:55 < celinedion> mbalho: thanks you.
17:56 < celinedion> mbalho: and also, i see in his code "stream_base = this.options.stream_base", can i patch that in an easy way to do a pipe, please?
17:56 < celinedion> i mean, does it accept de default stream module as an option?
17:57 < celinedion> https://github.com/AvianFlu/ntwitter/blob/master/lib/twitter.js#L191
17:57 <@mbalho> its confusing because twitter uses the word 'stream'
17:57 <@mbalho> and node also uses the word stream
17:57 <@mbalho> but all of the instances of the word 'stream' in that file are referring to the twitter 'stream'
18:00 < celinedion> mbalho: ok, how can i do to use the pipe feature then?
18:00 < celinedion> without writing a new twitter module?
18:01 <@mbalho> here is an example of a wrapper around websockets to expose a stream api https://github.com/maxogden/websocket-stream/blob/master/index.js
18:01 <@mbalho> basically you would need to fork ntwitter and wrap the streamparser() thing in a similar wrapper
18:03 < celinedion> mbalho: which streamparser?
18:03 < celinedion> /lib/parser.js?
18:03 <@mbalho> yea and its associated usage in twitter.js
18:04 < celinedion> thanks you so much, i will check  the link.
18:14 < dino-> I've been going through a Coffeescript book and, in an example, they have me doing process.openStdin()
18:14 < dino-> I was curious about this function but am having a lot of trouble finding any mention of openStdin in the node.js docs.
18:14 < dino-> What gives?
18:15 < dino-> Can't find it at either nodemanual.org or nodejs.org/api/
18:15 < dino-> Are these the authoritative places for API docs for node?
18:17 <@mbalho> dino-: that is an alias of stdin.resume()
18:18 < dino-> mbalho: Is it deprecated or something? Weird to not see a thing about it in docs, even matching the version of node.js I have installed.
18:19 <@mbalho> dino-: dunno, i looked in the node source code and found this process.openStdin = function() { process.stdin.resume(); return process.stdin; };
18:19 <@mbalho> dino-: in most modules i see people using process.stdin.resume(), i bet openStdin is deprecated or is from the early days or something
18:20 < dino-> I see. So maybe just unfortunate luck that the very first thing I ever try to look for in node API docs is this function.
18:22 <@mbalho> dino-: haha yea, for common things the docs are pretty reliable
18:22 < niggler> http://nodejs.org/changelog.html
18:22 <@mbalho> dino-: you could fork joyent/node and add a note to the docs, that would be a good way to get involved
18:22 < nlf> for oddball things, the docs more or less imply you should never do that
18:23 < NickMatthews> hello, I have a simple websocket -> tcp bridge running and the rss in process.memoryUsage() increases everytime i read data from the socket, any obvious things that cause this?
18:23 < Sally_Chesterfie> you are a prick
18:24 <@mbalho> Sally_Chesterfie: ?
18:24 < nlf> yeah, i feel a little like i missed something
18:24 < Sally_Chesterfie> soz wrong chat
18:24 < dino-> mbalho: Ok, perhaps when I learn more about writing docs. Thank you
18:26 < fcrick_> is there a helper fn that will convert a string into its hexadecimal equivalent?
18:26 < NickMatthews> the memoryUsage().rss is going up each time i get data from the socket, but i don't store anything every time i get data, any ideas about this?
18:26 < fcrick_> like, 2 hex chars for each byte in the string
18:27 < fcrick_> NickMatthews: if you run a long time it never stops going up?
18:27 < niggler> >>> 123..toString(16) @fcrick_
18:27 < purr> fcrick_: (string) '7b'
18:27 < niggler> >>> 123.456.toString(16) @fcrick_
18:27 < purr> fcrick_: SyntaxError: Unexpected token ILLEGAL
18:27 < niggler> >>> (123.456).toString(16) @fcrick_
18:27 < purr> fcrick_: SyntaxError: Unexpected token ILLEGAL
18:28 < NickMatthews> fcrick_: been running it for a while now and it hasn't stopped going up
18:28 < nlf> that doesn't work for strings though
18:28 < niggler> >>> (123.456).toString(16) @fcrick_
18:28 < purr> fcrick_: (string) '7b.74bc6a7ef9dc'
18:28 < NickMatthews> every message add's approx 9000 bytes
18:28 < nlf> you could write the string to a buffer
18:29 < fcrick_> >>> "foo".toString(16) @fcrick_
18:29 < purr> fcrick_: (string) 'foo'
18:29 < nlf> >>> new Buffer('foo')
18:29 < purr> nlf: ReferenceError: Buffer is not defined
18:29 < NickMatthews> fcrick_: it seems to increase less per message the longer it runs though, it's only increasing by about 5% of the value it was increasing by before now
18:29 < nlf> aw
18:30 < fcrick_> NickMatthews: presumably something is holding a ref or it would be free'd - you just need to find it i'd guess
18:30 < elliottcable> Anybody know of a pastebin that will take ANSI-escape'd terminal output and display it in HTML, with colours, etc?
18:30 < elliottcable> i.e. a pastebin for *terminal output*.
18:31 < NickMatthews> fcrick_: thing is, on data all I do is socket.emit('data', data.toString());, nothing is stored
18:31 < nlf> elliottcable: no, but that would be neat. you should make one
18:31 < elliottcable> nlf: thinking about it.
18:31 < elliottcable> nlf: want to be able to have my IRC bot(s) use libraries that produce console output longer than one line, and pastebin the whole damn thing.
18:31 < elliottcable> >> console.log('abc')
18:31 < purr> elliottcable: undefined; Console: 'abc'
18:32 < elliottcable> is great and all,
18:32 < elliottcable> but what about for output like this? http://i.ell.io/4RQM
18:32 < nlf> it would be really handy
18:33 < fcrick_> NickMatthews: if it were me i'd play around with closing the socket or getting rid of it, and just see what that does
18:33 < NickMatthews> fcrick_: data is constantly streaming through the socket though, i can't really close it
18:33 < fcrick_> or check if it really does grow forever by making it read a ton of stuff
18:34 < fcrick_> it it getting up into hundreds of megs, for example?
18:34 < NickMatthews> fcrick_: ok i'll give that a go
18:34 < NickMatthews> it starts at about ~15mb and grows to about ~30mb quickly with a lot of reads, ill try reading more from it and see if it grows that much
18:34 < fcrick_> you could also just look up some basics about the v8 garbage collector
18:35 < elliottcable> shit. .na. domains are ~$US 4.5/year
18:35 < nlf> profiling is an irritating thing
18:35 < fcrick_> i don't even know if it can be run manually, or if it runs on allocation, or what
18:35 < NickMatthews> fcrick_: alright cheers, ill look into it
18:36 < fcrick_> it could also be that number that grows is just wrong and doesn't have anything to do with memory held - you could just that by allocating a ton and looking at the process memory
18:36 < NickMatthews> what should i be using to look at the memory, at the moment i'm watching it grow in ps aux but i remember reading that probably isnt the most reliable way
18:37 < nlf> NickMatthews: look at the memwatch module
18:37 < nlf> there's a heapdiff class in it that can be helpful for finding leaks
18:49 < vekexasia> can someone
18:49 < vekexasia> test for me a piece of code?
18:49 < vekexasia> just node launch it and see what it does return ?
19:23 < squeakytoy> Can i ask a question i dont really understand. Why is node.js so popular? People must have done a back-end javascript solution with other languages (for example Java) using other engines (like Rhino). Why is C++ and V8 the winning bet?
19:24 < niggler> its the 100 monkey problem squeakytoy 
19:25 < squeakytoy> what does that mean?
19:26 < niggler> its not about C++ or V8 but rather that node came at the right time and achieved a critical mass
19:26 < niggler> why Facebook and not myspace
19:26 < niggler> why github and not bitbucket
19:26 < squeakytoy> yea, but if there were other solutions already out there..
19:27 < squeakytoy> you can clearly see why facebook > myspace
19:27 < vicapow> squeakytoy: there are reasons behind all of those other then just coincidence
19:27 < niggler> you can clearly see that in retrospect
19:27 < vicapow> niggler: ^^
19:27 < squeakytoy> so.. pure luck!
19:27 < blazes816> basically
19:27 < blazes816> well, not pure
19:27 < squeakytoy> pff :P
19:28 < blazes816> there was still a lot of work involved
19:28 < blazes816> not really fair to call it ALL luck
19:28 < vicapow> niggler: v8 was (and still is) by far the fastest javascript engine
19:28 < vicapow> facebook was a better product then myspace
19:28 < niggler> I'm not saying there aren't genuine advantages
19:28 < vicapow> github is a better product then bitbucket
19:29 < niggler> github now is a better product than bitbucket
19:29 < squeakytoy> vicapow, its "than" :>
19:29 < vicapow> squeakytoy: lol. i program. i should know this :P
19:29 < niggler> vicapow: you are thinking about if .. then
19:29 < squeakytoy> please end all your statments with ;
19:30 < blazes816> the ;'s are added automatically
19:30 < squeakytoy> by whom?
19:30 < squeakytoy> the IDE?
19:30 < niggler> ASI
19:30 < vicapow> I'm dyslexic so I get a free pass
19:31 < blazes816> http://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion
19:31 < niggler> that's like ADHD
19:31 < niggler> which is not to say that it doesn't exist, but there are far too many cases of people claiming to have ADHD
19:31 < squeakytoy> vicapow, you really dyslexic?
19:31 < vicapow> squeakytoy: ye
19:31 < vicapow> yep
19:31 < squeakytoy> hm
19:32 < squeakytoy> how does that work with coding?
19:32 < squeakytoy> not same challenges?
19:32 < vicapow> squeakytoy: it doesn't really effect my code. just my variable names, at times
19:32 < squeakytoy> you can read code better than normal text?
19:32 < vicapow> squeakytoy: and those types of errors are usually got pretty quickly
19:33 < Sally_Chesterfie> b
19:33 < niggler> if you want a real test: http://www.wired.com/wired/archive/9.12/aqtest.html
19:33 < vicapow> squeakytoy: hrm. idk. its hard to compare
19:34 < niggler> vicapow: why would variable names be affected?  wouldn't you consistently misspell?
19:34 < vicapow> niggler: actually. you're right but it can be hard if you're working with someone else and they're like "wtf is this?"
19:34 < niggler> you know, if you stick with single letter names, you'd be good :)
19:35 < niggler> or even unicode characters
19:35 < niggler> >>> var ಠ_ಠ = 3; ಠ_ಠ*ಠ_ಠ
19:35 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
19:35 < niggler> >> var ಠ_ಠ = 3; ಠ_ಠ*ಠ_ಠ
19:35 < purr> niggler: (number) 9
19:35 < vicapow> niggler: oh, wow
19:35 < vicapow> lol
19:35 < squeakytoy> maybe you only allowed to create "throw away" variables :o like you only allowed to create for-loops
19:36 < niggler> i wonder why one engine fails -- its valid for ES5
19:36 < squeakytoy> heh, i just joking
19:37 < nvcexploder_> howdy folks! would this be the right room to ask some Johnny-five questions, or is there a node-y-robots IRC kicking somewhere?
19:37 < vicapow> also, with a program, i feel like there's a lot less variation in terms of words then compared to reading/writing.  
19:38 < niggler> you actually don't need 'then' or 'than' in that context
19:38 < niggler> … there's much less variation in terms of words compared to …
19:39 < vicapow> than*
19:39 < vicapow> the only way i remember the different is to think first "when? then"
19:39 < niggler> >> var ಠ_ಠ = 3; ಠ_ಠ*ಠ_ಠ
19:39 < purr> niggler: (number) 9
19:39 < niggler> >>> var ಠ_ಠ = 3; ಠ_ಠ*ಠ_ಠ
19:39 < purr> niggler: (number) 9
19:40 < niggler> ok now I'm really confused
19:40 < vicapow> niggler: compared to like, a blog or something
19:40 < vicapow> oh, i see you were correcting my sentence :P my bad
19:42 < niggler> ok i need to stress test some javascript.  ideally id want a headless browser that supports javascript and lets me describe what i want to do (input text in a text box, hit enter). what is the best way to do it?
19:42 < niggler> *ideally i'd use
19:43 < trodrigues> casper.js ?
19:43 < nvcexploder_> I have been reading about phantom.js
19:44 < trodrigues> casper works over phantom. just lets you write those kinds of tests more easily
19:44 < nvcexploder_> yep
19:44 < nvcexploder_> you are correct sir
19:44 < trodrigues> but yeah you can also use phantom directly
19:44 < niggler> actually casper looks like what I'm looking for
19:44 < trodrigues> holy crap irssi/ssh over 3g is slow
19:44 < niggler> does it play nicely with websockets?
19:44 < niggler>  
19:44 < niggler> id assume so
19:45 < trodrigues> mmm...not sure to be honest
19:45 < trodrigues> never really tested anything with websockets on it
19:45 < niggler> lol if it works on my iphone
19:45 < trodrigues> don't assume so just because it's webkit
19:45 < trodrigues> webkit is just the rendering part
19:47 < niggler> lol spookyjs
19:52 < dragon> Renaming NPM package. How do I go for it?
19:53 < trodrigues> unpublish and publish a new one?
19:54 < RLa> what if someone is using the old one?
19:54 < RLa> well, bad luck then ...
19:55 < dragon> I don't think anyone is.
19:56 < dragon> I won't know though. I see no dependents at least.
19:56 < dragon> 12 downloads in last month. They're all me, I think.
19:58 < ravster> hello everyone
20:00 < dragon> Hello ravster.
20:04 < niggler> !hello @ravster
20:04 < niggler> damnit nvm
20:10 < dragon> Now the package has a better potential for getting popular, with a name that actually makes sense.
20:10 < dragon> If anyone's trying to write an XMPP bot, https://npmjs.org/package/xmpp-muc-handler
20:11 < niggler> trodrigues: maybe I'm doing this wrong, but right now i have a form with an empty action and onSubmit handler.  For some reason casper is trying to process the form via get request.  is there a way to force casper to do the on submit action?
20:15 < trodrigues> if you're using the fill method with the last parameter to true it should do that for you
20:15 < niggler> trodrigues: it appears not to
20:15 < trodrigues> and whether it's submitted via get or post is not up to casper, it's up to your code
20:15 < trodrigues> http://casperjs.org/api.html#casper.fill
20:15 < niggler> the debug shows that it tries to do a get request
20:15 < niggler> even though the onSubmit explicitly returns false
20:16 < trodrigues> ok, but those are separate things
20:16 < trodrigues> do you want it to go through get or post?
20:17 < niggler> it should be irrelevant if the onSubmit returns false, right?
20:17 < trodrigues> mmm...not entirely sure to be honest. then again, if you want to stop the event, you should do a preventDefault on the event object
20:20 < niggler> actually found a workaround trodrigues 
20:20 < niggler> i just used evaluate :)
20:24 < AAA_awright> Node.js Y U so bloated
20:24 < b-ot> (屮'Д')屮
20:29 < AAA_awright> Also this python build system is going to drive me crazy
20:29 < AAA_awright> I can't believe that hasn't been fixed since... the beginning
20:33 < AAA_awright> How do you coerce the build system to use `python2.7` as the python interperter?
20:40 < niggler> trodrigues: any way to force casper to print the remote console locally?
20:41 < niggler> if the remote site does console.log('foo') id like to see 'foo' locally, ideally prefaced by [remote] or something
20:43 < ravster> is it a good idea to just use 'exports' and not 'module.exports'? I'm having difficulty with understanding the difference.
20:43 < AAA_awright> Who's the resident build system expert on duty?
20:45 < AAA_awright> ravster: simply 'exports' isn't safe in cases where you're assigning a new object to it.
20:45 < AAA_awright> You're not modifying the variable, you're creating a new value entirely
20:45 < lpin> ravster look here http://www.hacksparrow.com/node-js-exports-vs-module-exports.html
20:46 < lpin> or better here http://nodejs.org/api/modules.html
20:49 < Leo_> Hello, I got a form with a http://website.com value in it.. does anybody know how can i match anything with regex? Will /name="website"\svalue="(*+)"/ work?
20:50 < Leo_> * /name="refer"\svalue="(*)"/
20:50 < AAA_awright> Leo_: Explain better?
20:51 < AAA_awright> niggler: Why Github? Because Bitbucket doesn't do Git
20:51 < niggler> why git over mercurial, happy?
20:51 < Leo_> I need to get a input value="".. but it has bars in it / .. if i use the regex /name="refer"\svalue="(*)"/ will it return me the value even tought its a url?
20:51 < AAA_awright> There's no other revision control system properly suited to handle the needs of such diverse projects
20:52 < AAA_awright> It doesn't matter if it's bitbucket or rcsCentral (idk), it's not impressing anyone
20:54 < AAA_awright> Leo_: You should probably be using an HTML parser
20:54 < AAA_awright> HTML isn't parsable with regex
20:54 < AAA_awright> Or XML in general, for that matter
20:55 < niggler> have you tried both AAA_awright 
20:55 < Leo_> wouldnt this be "heavy"? i mean i dont need the whole html parsed..
20:55 < AAA_awright> niggler: Mercurial has very weak notions of tags and branches. It's inferior.
20:55 < niggler> s/weak/different
20:55 < AAA_awright> No, weak
20:56 < AAA_awright> It's centralized and not well-defined
20:56 < niggler> what do you think mercurial branches are
20:56 < niggler> the git branch workflow is done via mercurial bookmarks
20:56 < AAA_awright> They're not references to commits, that's what matters
20:58 < AAA_awright> And same thing with tags, you have to build up your own system of metadata to accurately label a commit, which isn't any better than SVN and whatnot
20:58 < AAA_awright> npm has this problem too which drives me crazy
20:58 < badem4o> Is anyone here familiar with the hbs package? https://github.com/donpark/hbs
20:59 < niggler> your criticism reflects a git weltanschauung which was my original point
20:59 < AAA_awright> A what?
20:59 < ^Sprint^> There is some good website to read more about node.js?
20:59 < ^Sprint^> I search all over the web, but hard to find good tutorial about the language
21:00 < AAA_awright> ^Sprint^: http://nodejs.org/docs/latest/api/all.html, the source code...
21:00 < niggler> had you learned mercurial first and approached it that way, you'd have similar criticisms of git
21:00 < AAA_awright> niggler: No, Git objectively does it correctly. I had these critisisms long before it existed
21:00 < ^Sprint^> yeah I saw it, but I'm looking something more deep
21:01 < AAA_awright> I've been looking for a project like Node.js for a while, and it does a lot of stuff correctly (But not everything(
21:01 < jrajav> Normally I'd say it's pretty silly to revere a piece of software as the be-all, end-all in its field, digital jesus and the rapture all in one...
21:01 < niggler> you are aware of the history, right?
21:01 < niggler> w
21:01 < niggler> hen
21:01 < niggler>  
21:01 < jrajav> But in this case, yeah, git ftw
21:01 < niggler> w
21:01 < niggler> a
21:01 < niggler> s g
21:01 < jrajav> forever
21:01 < niggler> it and mercurial developed
21:02 < AAA_awright> With the Linux kernel and all?
21:02 < niggler> both roughly april 2005
21:02 < AAA_awright> And one did it correctly, and the other not so correctly
21:02 < AAA_awright> No suprise, Linus did it correctly
21:02 < niggler> "AAA_awright: niggler: No, Git objectively does it correctly. I had these critisisms long before it existed"
21:03 < AAA_awright> Yeah that's what I said
21:03 < niggler> hg bookmark is objectively correct
21:03 < AAA_awright> Why?
21:03 < niggler> and the traction of git stems from linus' development
21:03 < AAA_awright> I'm not doubting that
21:03 < AAA_awright> That doesn't explain Node.js though
21:04 < niggler> other platforms existed before node.js
21:04 < niggler> like rhino
21:04 < AAA_awright> Which are just ECMAScript interperters
21:04 < AAA_awright> Not any real API
21:04 < AAA_awright> It's not very fair to compare them
21:04 < niggler> its straightforward to see how rhino could have been infused with the other sugar that node.js added to v8
21:05 < AAA_awright> I mean I was using spidermonkey on the command line long before Node.js
21:05 < ^Sprint^> there is some website that can show the powerful of node.js?
21:05 < ^Sprint^> some codes examples etc'?
21:05 < AAA_awright> It's not a platform in any meaningful way
21:05 < ^Sprint^> i dunno why, it's seems that you can use "HTTP" and "NET" those the most modules that the web talking about
21:06 < AAA_awright> ^Sprint^: Where on the web?
21:06 < badem4o> Is anyone here familiar with the hbs package? https://github.com/donpark/hbs
21:07 < AAA_awright> ^Sprint^: Start right here http://nodejs.org/docs/latest/api/all.html#all_synopsis
21:07 < ^Sprint^> google
21:07 < ^Sprint^> I read already this..
21:07 < ^Sprint^> I'm comming from PHP
21:07 < ^Sprint^> and I built some chat server on node.js
21:07 < AAA_awright> ^Sprint^: Google's just a search engine, what webpage was this
21:08 < ^Sprint^> but I still cant figure out what can I do with PHP and Node.js\
21:08 < AAA_awright> ^Sprint^: I kind of doubt you read all the documentation :p
21:08 < ^Sprint^> not all, the most important :)
21:08 < AAA_awright> ^Sprint^: Well you'd see that require('http') and require('net') are builtin to Node.js
21:08 < badem4o> ^Sprint^ http://www.manning.com/cantelon/     Try this for a more guided approach
21:10 < badem4o> It is not the best book you can read I'm sure there will be many others to come that will be better but it is a good starting point.
21:10 < ^Sprint^> will look it
21:11 < badem4o> And as AAA_awright mentioned it is best to stick the official documentation
21:11 < badem4o> and also node on its own is very broad. What are you trying to use it for?
21:12 < badem4o> For web development look into some of the frameworks expressjs, geddyjs, meteor/
21:12 < Doikor> i would start by learning javascript well first then node.
21:12 < badem4o> Agreed
21:13 < badem4o> Is anyone here familiar with the hbs package? https://github.com/donpark/hbs
21:13 < ettinger> badem4o: what's the problem?
21:14 < mscdex> i would start by learning cobol
21:14 < ettinger> then pascal
21:14 < mscdex> nono, then fortran
21:14 < badem4o> Well It seems like including partials is kind of convoluted 
21:15 < ettinger> badem4o: https://github.com/donpark/hbs/blob/master/examples/partial/app.js
21:16 < badem4o> I was wondering if anyone knows a better way of doing it.
21:16 < badem4o> I saw that and it works but if I make changes to the partial they don't register until I restart the server
21:16 < ettinger> i don't know. i use ejs
21:17 < ettinger> why would your partial change?
21:17 < badem4o> If you decide to make updates to it. 
21:18 < badem4o> in development I mean
21:18 < ettinger> supervisor
21:18 < ettinger> i don't worry about it. my production server the file will never change. I use supervisor in dev to restart node when my files change
21:19 < ettinger> when i deploy to production i restart node anyway.
21:19 < rudiX> ettinger: what hardware you use
21:19 < ettinger> hardware?
21:19 < badem4o> Sure but in express that is not necessary because all of your templates are observed anyway
21:20 < ettinger> i have no idea
21:20 < badem4o> If I make changes to my hbs templates the changes are reflected the issue is just with partials
21:21 < rudiX> ettinger: so whos paying the bills for hosting
21:21 < rudiX> :)
21:21 < badem4o> AWS
21:21 < ettinger> rudiX: i am. but i don't know what hardware they use
21:21 < rudiX> vps?
21:21 < ettinger> 1gb ram
21:21 < ettinger> yeah
21:22 < ettinger> 50gb space
21:22 < ettinger> $15mo
21:22 < badem4o> Wow where
21:22 < ettinger> bermanhosting.com
21:23 < ettinger> pretty good, their tech support takes a day or two to get back and their data center is in germany, but for $15 I can't complain
21:23 < rudiX> great .. i recommend linode anyways
21:23 < rudiX> even I am using free services
21:24 < rudiX> even cheaper
21:24 < rudiX> whops not
21:24 < ettinger> yeah. it's just like linode but half the price
21:24 < badem4o> linode is good but AWS free micro instance for 12mo can't beat that 
21:25 < rudiX> anything can beat aws free
21:25 < ettinger> aws free for 12/mo -- that doesn't make sense.
21:25 < badem4o> http://aws.amazon.com/free/
21:26 < rudiX> there was a performance issues with particulary that package ... but i can't explain due the lack of english kung fu
21:26 < rudiX> like - if not anyone using the processor ... you  get average performance ... otherwise it stinks
21:27 < Amfy> Hm, who needs hosting for a cool app?
21:27 < AAA_awright> Where's bnoordhuis when you need him
21:27 < rudiX> Amfy: me
21:27 < rudiX> i am poor as fuck right now
21:27 < rudiX> :)
21:27 < Amfy> rudiX ok, for what app and what size of hosting?
21:27 < badem4o> The spinning down is done by companies that sell PaaS on top of AWS
21:29 < ettinger> all the PaaS stuff is cool, but $$
21:29 < Amfy> ettinger: Right, AWS is already not cheap, but PaaS is adding to much $$
21:29 < ettinger> if your app takes off though, PaaS can scale easier
21:29 < ettinger> but then it gets $$$
21:30 < ettinger> i just have vps and slowly develop my app in my spare time.
21:30 < badem4o> That is why you learn how to do aws without the paas
21:30 < badem4o> Then you don't have to pay all of the extra $$$
21:31 < ettinger> amazon services are very difficult to learn
21:31 < ettinger> even their product api is arcane.
21:31 < Amfy> ettinger but why are you guys always wanting AWS?
21:31 < badem4o> it took me 2 hours of reading on their website and two articles on google to deploy the first time.
21:32 < Amfy> badem4o ok, then I understand that. But I'm a sysadmin, so installing, etc isn't that problem
21:34 < ettinger> Amfy: i'm not sure why aws, i don't want it because it seems too damn difficult to figure out how to get started
21:35 < badem4o> Amfy explain some of the difficulties you came across with aws. It might be of help. 
21:35 < badem4o> I'm still exploring it so my knowledge is limited,
21:36 < Amfy> badem4o sorry, never touched AWS. It's an interesting thing, but I've never seen any advantage for my projects… so I went with own dedicated servers
21:36 < ettinger> http://aws.amazon.com/products/ for startes. ok, wtf. Which one do I need to host a web site again?
21:36 < badem4o> ettinger EC2
21:36 < ettinger> easier just to do 'apt-get install mongo'
21:36 < ettinger> on a vps
21:36 < badem4o> LOL
21:37 < Amfy> ettinger EC2, that's like a VPS. As far as I know they use Xen HVM for virtualization
21:37 < ettinger> the other problem with this cloud crap, is you have no idea what it costs up front.
21:38 -!- mode/#node.js [+o piscisaureus_] by ChanServ
21:38 < ettinger> reminds me of the old days where you get a bandwidth bill out of the blue for $800
21:38 < badem4o> ettinger look at this: http://aws.amazon.com/free/ 
21:38 < Amfy> ettinger yes, and you already get for a very few hundret dollars much better servers at other datacenters
21:38 < badem4o> And if you scroll down they have pricing
21:39 < Amfy> badem4o but come on, a free instance of EC2 is nearly nothing
21:39 < badem4o> just to try it
21:39 < badem4o> if you don't like it go to linode
21:40 < ettinger> linode is a rip off
21:40 < badem4o> now way man
21:40 < badem4o> linode is priced well
21:40 < ettinger> disagree
21:40 < badem4o> it is not shared hosting pricing by any means but it is not bad
21:40 < ettinger> i got twice the ram for half the price
21:41 < rendar> ettinger: where?
21:41 < Amfy> The pricing of Linode is ok, especially for some of their locations. But yes, they are to expensive for the budget market
21:41 < badem4o> you go ahead and do that.
21:41 < Amfy> but we all know: Quality is costing...
21:41 <@Nexxy> ettinger, haha
21:41 <@Nexxy> you couldn't be moar wrong
21:41 < badem4o> you get what you pay for
21:41 < Amfy> ^
21:42 < Amfy> Linodes' Wiki is great, their asian locations are interesting, etc
21:42 <@Nexxy> stackscripts
21:43 <@Nexxy> also the reliability
21:43 <@Nexxy> and customer service
21:43 < ettinger> i read the linodes howtos and use my budget vps
21:43 <@Nexxy> how nice of you
21:43 < Amfy> ^
21:43 < badem4o> LOLOLOL
21:43 <@Nexxy> ettinger, how long have you managed to keep one of your budget VPS up?
21:44 < ettinger> i've only had it for about 2 months.
21:44 < rudiX> i change like 10 vpses ... and the issues i've got was
21:44 <@Nexxy> lol
21:44 < rudiX> 1. cannot pay them
21:44 <@Nexxy> ettinger, come back in a year and tell us how much of a value it was
21:44 < ettinger> but it only went down twice in the first week, after that nothing. They had an issue and had to reboot it a couple of times.
21:45 < rudiX> 2. performance
21:45 <@Nexxy> "only" 
21:45 <@Nexxy> twice in the first week
21:45 < rudiX> cloud is ths *hit
21:45 <@Nexxy>  21:42:55 up 433 days, 17:00,  1 user,  load average: 0.00, 0.01, 0.05
21:45 < Amfy>  22:46:06 up 156 days,  5:35,  1 user,  load average: 11,22, 11,36, 11,36
21:45 < deoxxa>  21:50:57 up 180 days,  9:54,  5 users,  load average: 0.42, 0.31, 0.20
21:45 < rudiX> wow
21:45 <@Nexxy> I win ;P
21:45 < Amfy> Nexxy hehe, same idea :P
21:45 < deoxxa> damn you, kernel update
21:46 < TehShrike> lol
21:46 <@Nexxy> that's also with 0 network interruptions
21:46 < rudiX> Nexxy: arent these nodejitsu servers or I am mistaken you with someone else 
21:46 < ettinger> 433 days on a production server?
21:46 <@Nexxy> rudiX, that's linode
21:46 < Amfy> Nexxy yea, mine, too - was logged into IRC for almost 3 months
21:47 < onr> i was gonna ask that
21:47 < onr> which plan, Nexxy?
21:47 <@Nexxy> just the 512
21:47 < Amfy> But that's what I'm saying… maybe Linode is not the cheapest, but look on Nexxy's result… you get great quality
21:47 < deoxxa> dedicated hardware ftw
21:47 <@Nexxy> you also get to share bandwidth quota between your nodes
21:48 <@Nexxy> as long as they're in the same DC
21:48 < onr> yeah bandwidth pooling is a great feature
21:48 < onr> have you tried their loadbalancing?
21:48 < rudiX> linode is great ... I used them back in the day when facebook apps was not iframe
21:48 <@Nexxy> http://www.linode.com/?r=ea4730ea72c5cd33517ca70f4d84e1fed3c5af9c
21:48 < deoxxa> i'm like three steps away from the opposite end of the cloud spectrum
21:48 <@Nexxy> \o/
21:49 <@Nexxy> onr, I haven't had a need yet
21:49 < onr> i wish they provide storage nodes
21:49 < ettinger> i use mine as a seed box too.
21:50 < ettinger> what i reawlly need is 1tb somewhere i can backup all my personal data to.
21:51 < rudiX> why a webmaster need such ammount of data ettinger 
21:51 < Slade-> hm linode isnt much cheaper than some dedicated hosting
21:51 <@Nexxy> infinitely moar convenient
21:51 < ettinger> rudiX: just for my personal stuff at home, mp3, photos, videos of family.
21:51 < rudiX> I mean ... if my computer decide to die today ... i can easy continue my work like hour later
21:51 < RLa> using virexpert here for my budget hosting :) so far no problems
21:51 < ettinger> i had a power outage here and my local debian box crashed
21:52 < ettinger> destroyed grub and i can't fix it
21:52 < RLa> found them from here: http://www.lowendbox.com/
21:52 < ettinger> so i have to login into live cd and scp all my data somehwere
21:52 < RLa> ettinger, what about amazon glacier? too expensive?
21:52 <@Nexxy> if ettinger is complaining about linode pricing
21:52 < onr> lowendbox servers are usually suitable for personal purposes only
21:52 <@Nexxy> glacier sounds out of the question
21:53 < ettinger> RLa: i haven't looked, but ideally i could use rsync to transfer data
21:53 < Slade-> heh virexpert.. i never know how to feel about companies that dont make their sites work in IE
21:53 <@Nexxy> Slade-, given their target audience
21:54 < ettinger> screw ie
21:54 < Slade-> Nexxy: especially given their target audience
21:54 < ettinger> i will probably just go with 1tb ioSafe
21:55 < ettinger> one time price of $250
21:55 < ettinger> and you're done
21:55 <@Nexxy> until you have a physical security breach
21:55 <@Nexxy> then it's gone
21:55 < ettinger> true
21:57 < RLa> just encrypt it
21:57 <@Nexxy> that will prevent them from taking it!
21:59 < ettinger> but they could steal my computer and the iosafe
21:59 < ettinger> and then i have nothing
21:59 < ettinger> glacier sounds ok, except i have to use some obfuscated api to transfer data. i can't just rsync
22:00 <@Nexxy> ettinger, did you look a the price?
22:00 <@Nexxy> lol
22:01 < ettinger> Nexxy: $10/mo for 1tb
22:02 <@Nexxy> for the storage itself, yes
22:02 < ettinger> there's more too it?
22:02 <@Nexxy> yes, you pay for the transfer
22:02 < onr> just get one of these, http://www.ovh.co.uk/dedicated_servers/kimsufi.xml
22:03 < chapel> ettinger: you pay to get it off of glacier
22:03 < chapel> a lot
22:03 <@Nexxy> and the price increases the more you transfer 
22:03 < chapel> yeah
22:03 <@Nexxy> what chapel said
22:03 <@Nexxy> they basically hold you hostage if you ever want to get it all back at any one time
22:03 < chapel> its cheap to store, expensive to retrieve
22:03 <@Nexxy> like
22:03 < Slade-> is the UK even reasonably suitable for hosting?
22:03 < ettinger> Slade-: i use germany
22:03 < ettinger> pretty quick
22:04 < onr> ettinger: hetzner?
22:04 < Slade-> ettinger: i was asking in response to onr's link.. but yea i have systems in germany and they're reasonable for most of eu
22:05 < onr> Slade-: its said UK and NL datacenters' world connectivity is relatively good
22:05 < onr> Slade-: which provide you use btw?
22:05 < onr> *provider
22:06 < Slade-> onr: in germany? The company I work for has presence there
22:06 < ettinger> onr: I user bermanhosting
22:06 < ettinger> whats the diff between dedicated and vps?
22:07 < Slade-> physical machine vs virtual machine
22:07 < onr> VPS disks usually perform better
22:07 < ettinger> administration wise, they are the same?
22:07 < onr> because providers use better hardware
22:07 < ettinger> onr: that UK hosting looks decent. 2gb for what i'm paying for 1gb
22:08 < onr> almost same, but you just can't do one-click-os-install in dedi
22:08 < ettinger> 500gb hd vs 50gb hd i could just back up there.
22:09 < onr> ettinger: yeah OVH is ridiculously cheap. check this one too http://www.hetzner.de/en/hosting/produktmatrix/rootserver-produktmatrix-ex
22:11 < ettinger> onr: hetzner is about 4 times the cost
22:11 < ettinger> $64/mo for a 16gb ram/ 3tb drive
22:12 < ettinger> that is cheap for what you get i guess
22:12 < onr> you don't pay VAT
22:12 < onr> exclude 19%
22:13 < onr> and hetzner is i7, OVH is i3
22:13 < onr> there's a HUGE difference but same price tag
22:13 < Amfy> onr, yea, but OVHs network is much better
22:14 < ettinger> what is i7/i3?
22:14 < Amfy> also OVH has some premium features
22:14 < onr> the CPU
22:14 < onr> Amfy: what are these premium features?
22:14 < Amfy> onr: i.e they will exchange your hardware on failure within a hour
22:14 < ettinger> i may have to use ovh
22:14 < Amfy> onr: like virtual racks, etc
22:15 < ettinger> i think hetzner is overkill for me
22:15 < Amfy> onr: better control panel (you nearly never need to contact support, you can do everything with their control panel)
22:15 < onr> ettinger: check ovh and hetzner's vps too. they're even cheaper
22:15 < deoxxa> if you go with ovh and a french box, you'll end up colocated right next to a zillion other seed boxes, so torrents are really quick :3
22:15 < onr> Amfy: have you used hetzner?
22:15 < perezd> when using mikeal's request module to request an image, is there a preferred buffer encoding type I should use if I plan to just pipe it to the browser?
22:16 < Amfy> onr: only with a very small box a couple of months ago
22:16 < onr> Amfy: didn't like their "robot" control panel?
22:16 < Amfy> onr: It was also pretty cool, but I prefer the OVHs' one
22:18 < onr> Amfy: i'd give OVH a try if they had better hardware
22:19 < Amfy> onr: (Normally I would have to prefer hetzner, since I am also from Germany and I should support a local company - but meh, am not happy with what they provide)
22:20 < onr> Amfy: i've used them for 2 years. customer support was really horrible. and we had some accounting issues
22:20 < Amfy> onr: Was pretty cool at those days when OVH only charged a one-time fee on their IPs, but now they have a similar model as hetzner where you have to pay about 1€ per additional IP / month
22:21 < onr> Amfy: they kept me billed for 3 more months after i cancelled eveything
22:21 < Amfy> onr: Oh… that's definitely not good.
22:22 < onr> Amfy: Hetzner used to charge one time for IPs. I got 256 IPs (a /24 subnet) for 149 euro - VAT
22:22 < Amfy> onr: Yes, but that was many years ago :P
22:22 < Amfy> onr: Also, they do not longer give you more than a /28 or /29 per server
22:22 < ettinger> onr: something that's unclear with ovh -- is it unlimited bandwith?
22:22 < onr> I'm getting older :)
22:23 < onr> ettinger: "unmetered" to be more accurate
22:23 < Amfy> ettinger: It depends. You have unlimited bandwith, like you do not get charged for over-usage. But if you use more than xx TB your speed gets decreased
22:23 < ettinger> ok
22:24 < ettinger> how do you guys setup email on a dedi?
22:24 < Amfy> ettinger better don't do that. To much headache, go and use Google Apps
22:25 < onr> theoretically a dedicated 100Mbps will give you 33TB bandwidth per month. But in OVH you probably share that 100Mbps with others
22:25 < Amfy> onr: On the Kimsufis you share the bandwidth - but not with the real OVHs one. There you get a dedicated line!
22:27 < onr> Amfy: oh
22:27 < ettinger> Amfy: yeah. i gotta learn google apps for email...but I can still have me@mydedi.com, though right?
22:28 < onr> ettinger: sure
22:28 < Amfy> ettinger you can, of course. But you have to change your MX Records to the google ones
22:29 < ettinger> sure
22:29 < ettinger> i managed to setup alias
22:29 < ettinger> and get postfix to forward email. But that was a PITA
22:30 < Amfy> Yep, so you see, a nice GUI like from google is better :)
22:32 < ettinger> yeah
22:32 < onr> Amfy: it seems OVH operates in North America too. and with same prices
22:32 < ettinger> ok, once i get my local box back up, i'm going to get one of these ovh dedis
22:32 < zak> hi guys. Is there an in-built or a small library to check primitive types, like isNumber or isString?
22:32 < Amfy> onr: Yep, they built a brand new datacenter for 360 000 servers
22:32 < ettinger> zak: node-validator
22:32 < mscdex> zak: why not use typeof ?
22:32 < zak> mscdex: is typeof reliable enough? I know JS has some quirks
22:33 < mscdex> zak: afaik it is
22:33 < mscdex> zak: instanceof is one that can be quirky i think
22:33 < zak> mscdex: okay. I'll do some tinkering and double check. thanks
22:34 < mscdex> zak: for arrays you can do Array.isArray() and for Buffers, Buffer.isBuffer()
22:34 < mscdex> zak: the util module has some other methods for checking regex and dates
22:34 < mscdex> http://nodejs.org/api/util.html
22:34 < zak> mscdex: thanks again
22:34 < ljharb> zak: typeof is 100% reliable for primitives, except for null. Array.isArray is 100% for arrays.
22:35 < zak> thanks ljharb 
22:35 < ljharb> zak: object is `foo !== null && typeof foo === 'object'`
22:35 < zak> they should put isObject in util too
22:36 < zak> and I guess it wouldn't hurt to put the primitive checks in too. I don't know if you would consider that bloat.
22:53 < zak> ljharb: I'm being pendantic here and this is twisting definitions here but when I google JS primitives, people are saying there are 5; undefined, null, boolean, string, number.
22:54 < zak> Apparently everything else is supposed to be an object. What about functions though? typeof a function would return "function"
22:55 < zak> I think I'm getting myself confused with JS objects, first class objects and primitives.
22:56 < _bart> Good evening :)
22:57 < _bart> About to try Node.js for the first time, got coffee-script installed, let's roll
23:00 < ettinger> doh
23:01 < ettinger> --cs
23:27 < wao> well well well.
23:27 < wao> I need shot about, how to use modules directly from github repo
23:27 < wao> )
23:29 < tooijar> Anyone know of a good all-in-one pc that has a battery?
23:29 < tooijar> Don't want to be stuck with a desktop.  But also not a fan of having my monitor stuck to my keyboard.
23:32 < rump> tooijar: mbp with a cinema display :)
23:33 < tooijar> Heh...yeah, pretty much laptop plus external display is what I'm after without paying for that extra display that is build into the laptop.
23:35 < rump> mac mini
23:35 < rump> no battery though obviously
23:39 < ettinger> i want to run apache on other domains on my vps and node for only one domain, how should i do this, since they both would need port 80.
23:39 < T7g__> Quick silly question. Is there any way for me to use socket.io with node-static? I'm getting terrible DOM security errors trying to write an HTML5 Canvas app.
23:39 < Hotroot> Does everyone else hate doing CSS work, or is it just me?
23:39 < rump> ettinger: mod_proxy and pass the request to node on a different port
23:39 < ettinger> T7g__: you're not using file:// are you?
23:40 < T7g__> ettinger, I am not
23:40 < ettinger> rump: ok, thanks
23:40 < T7g__> ettinger, I am running a seperate server on localhost to serve my static and still get DOM errors
23:40 < ettinger> would be hard to know w/o seeing the app myself
23:41 < T7g__> Of course, it's a different port
23:41 < ettinger> hmmm
23:41 < ettinger> not sure if port can trigger security error. I think it might
23:41 < T7g__> I have node.js mainapp running as port 80 in a VM, using a local tinywww on 443 to serve my content
23:41 < ettinger> http://stackoverflow.com/questions/4669494/xmlhttprequest-cross-site-scripting-on-same-server-but-differnt-port
23:42 < ettinger> rump: is there any drawback from using mod_proxy with node app underneath?
23:43 < rump> ettinger: not many options if yer set on apache on port 80
23:43 < rump> your super fast non blocking async node app is gonna be limited by bloated apache threads/processes
23:43 < rump> nginx would be better
23:44 < T7g__> ettinger, http://pastebin.com/SGZ4H8tk <-- server - http://pastebin.com/J0zwBzj3 <-- client
23:44 < tooijar> CSS  has always felt hackish for all but the most basic tweaks
23:44 < rump> tooijar: we should go back to table/<font>/etc layouts :)
23:45 < ettinger> T7g__: its the port
23:45 < T7g__> ettinger, Chrome was being rather crazy about the port. I picked ssl since I knew it was whitelisted
23:46 < ettinger> did you read the SO link?
23:46 < AAA_awright> I'm trying to build Node.js but I'm getting a Syntax Error from python:   File "tools/js2c.py", line 57
23:46 < T7g__> saw ajax figured you needed to see code first.
23:47 < T7g__> So okay, back to my real question, can I attach socket.io to a node-static instance?
23:47 < T7g__> I need DOM not to complain so I can do my transitions
23:48 < AAA_awright> bnoordhuis: I'm building Node.js, but I can't because line 288 of node.gyp calls python, instead of $PYTHON which I have set to python2.7
23:49 < AAA_awright> I'd consider this a bug
23:49 < bnoordhuis> AAA_awright: we take patches :)
23:49 < AAA_awright> I don't claim to know anything about the build system, I certainly wouldn't be using python >_>
23:49 < AAA_awright> I've been complaining since 0.4 heh
23:50 < T7g__> ettinger, Essentially all I need is some way to serve a directory with node-static yet also have socket.ip attached
23:50 < T7g__> err .io, my ba
23:53 < bnoordhuis> AAA_awright: open an issue and i'll look into it
--- Log closed Sun Nov 18 00:00:28 2012
