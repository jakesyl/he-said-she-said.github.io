--- Log opened Mon Oct 29 00:00:29 2012
00:21 < abrkn> can i run rergular updates on a mongoose connection? .update({ condition }, { update }, true/false })?
00:25 < opus_> i don't know if youcan with mongoose, but maybe the native mongodb driver
00:25 < opus_> which mongoose uses
00:26 < abrkn> how do i access the underlying driver? im quite new with mongoose, used to do mongolian straight up
00:27 < abrkn> i just want to do: var withdraw = 100; db.bank.update({ id: 1, balance: { $gte: withdraw } }, { $inc: { -withdraw }) and make sure the user had enough money
00:27 < warz> personally, i prefer mongodb client libs such as: mongoskin or monk
00:27 < warz> monk uses mongoskin
00:28 < warz> or if you have to use the older mongodb-native lib
00:28 < abrkn> hmm, im not "set" on which lib to use. i just use mongoose because its slightly convenient with schemas
00:28 < warz> so if youre at a point where you can explore those, id recommend it
00:28 < warz> if you like schemas, you could try um, one sec lemme find it. it uses monk.
00:28 < abrkn> imo adding orm to mongo without heavy subdocs seems overkill
00:29 < warz> i avoid clients that add orm style functionality.
00:29 < abrkn> aye, im just trying mongoose to be hip
00:29 < abrkn> not gaining anything from it atm
00:29 <@mbalho> thats why i use node
00:30 < warz> grr im trying to remember this lib name
00:30 < abrkn> whoa, monk docs is shitty :P
00:30 < abrkn> mbalho: haha
00:30 < hendore> My first node test with node done, woohoo! Anyone have any CC on the following, very short app http://pastebin.com/0kLWkhUZ && http://pastebin.com/SPDCZ9Uw
00:30 < warz> monk rocks
00:31 < warz> oh here we go
00:31 < warz> i'd use this if i wanted some sort of ORM functionality
00:31 < warz> https://github.com/jeromegn/monastery
00:31 < warz> still very flexible
00:32 < abrkn> im all about learnboost, but 100 stars on monk? o_O
00:32 < abrkn> sounds pretty fresh
00:32 < warz> sure, it is.
00:32 < abrkn> yikes, mongolian looks anbandoned
00:32 < warz> mongolian did fall off, yes
00:33 < warz> mongolian had some issues, though
00:33 < warz> i had to quit using it
00:33 < abrkn> sigh, i already have auth working with mongoose
00:34 < abrkn> not that i understand wtf it does
00:34 < Slade-> so i have functions nested in functions nested in functions ... at some point it begins to affect readability.. anyone have any advice on this?
00:34 < warz> stick with it then, no big deal. just make sure auto reconnect is enabled for your original question.
00:35 < shanse> Slade-: use streams
00:35 < Slade-> streams?
00:35 < abrkn> warz: who is learnboost anyway? pretty sure that user makes mocha <3
00:35 < warz> learnboost is a company
00:36 <@mbalho> Slade-: callbackhell.com
00:36 < abrkn> k
00:36 < warz> with some smart coders working at it. still though, i've been around the block with mongodb clients on node.
00:36 < Slade-> mbalho: there we go :)
00:36 < warz> and i would only suggest either mongodb-native, mongoskin or monk.
00:37 < abrkn> warz: will give monk a shot
00:37 < abrkn> warz: but mark my words, if they abandon the project i will shake my fist repeatedly
00:37 < warz> *shrug*
00:38 < warz> i suggest it because it's a pretty thin wrapper around mongoskin, which is the newer node mongo client
00:39 < warz> which won't go inactive
00:39 < abrkn> nice, im fine with the mongo "shell style" commands as it is
00:41 < Slade-> mbalho: oh just telling you not to do it, and split it out :P
00:42 <@mbalho> Slade-: yea its pretty simple
00:42 < Slade-> you lose upvalues when you do that.. going to need to pass stuff
00:43  * Slade- hmms and wonders what the js term for upvalues are
00:43 <@mbalho> upvalues meaning variables from nested function scope?
00:43 < Slade-> yea
00:43 <@mbalho> thats a pretty messy way to code
00:43 <@mbalho> causes lots of headaches, passing arguments is a lot more concise and easier to follow
00:43 <@mbalho> also makes the code easier to refactor
00:43 < Slade-> yea its much uglier in JS than other languages i've used them in
00:44 < Eber> guys, I have a server where I have a imagesPool array and requests populate it at every request (if needed)... is there a way I can pop out values from this array consistently?
00:45 < ralphholzmann> how would you go about calling super.apply with the correct context?
00:45 < abrkn> warz: any idea if i can add "methods" to collections? var db = module.exports = require('monk')('conn'); _.extend(db.get('users'), { setSomethingComplicated: function(value) { db.get('users').update(....) }); ?
00:45 < ralphholzmann> in a class?
00:46 < warz> abrkn, you can
00:47 < warz> abrkn: https://github.com/kissjs/node-mongoskin#bindcollectionname-extendobject1-extendobject2-
00:48 < warz> monk uses mongoskin, so you're capable of that.
00:49 < ralphholzmann> whoops, wrong channel!
00:51 < hendore> http://postimage.org/image/ygsoreizf/ Not bad for first day of javascript/node, anyone got suggestions on what could be a small challange to add to this?
00:53 < yitsushi> hendore: make a preview of the site
00:54 < hendore> yitsushi: Awesome idea
00:54 < ChrisPartridge> Eber: you should be able to
00:54 < abrkn> warz: swimming in docs here. i want to do: db.get('users').update({ _id: userid, balance: {$gte:amount}}, { $inc:{balance:-amount} }, func() { was it updated? }). can you suggest the syntax? i cant work it out from monk docs
00:56 < warz> you can do it as that one liner, but i typically would do: var users = db.get('users'); users.update({ _id: id }, { $set: ... }, function (success) { if (!success) { ... } })
00:56 <@mbalho> hendore: use cheerio to scrape the html e.g. http://maxogden.com/scraping-with-node.html
00:57 < yitsushi> hendore: https://plus.google.com/114798913484842413424/posts/JMD9Kn5b7Qp
00:57 < abrkn> warz: what is the update callback arguments? cant figure it out from docs
00:57 < warz> abrkn, you may have to cross reference mongoskin. monk is a light wrapper on it. i believe update's callback received only a success/fail parameter.
00:58 < warz> your syntax looks fine, to me
00:59 < abrkn> warz: ah, it says arguments are error and update count
01:01 < hendore> yitsushi: That looks great, thanks for the link
01:01 < yitsushi> :)
01:01 < hendore> mbalho: Yes, would be nice to replace the url with page title, could use cheerio to do that 
01:01 < abrkn> warz: im thinking this for my command: https://gist.github.com/3970781
01:02 < abrkn> well, mnus the mongoose
01:03 < warz> *shrug* yea looks fine. just keep the docs handy and youll be good to go.
01:03 < niggler> anus the mongoose?
01:04 <@mbalho> anus jokes, always funny
01:05 < nathan7> Anuses!
01:06 < abrkn> i for one welcome our new anus overlods
01:06 < niggler> ok what is the best javascript syntax highlighter
01:09 <@mbalho> rainbow
01:11 < jlord> is this Oakland!?!?!
01:12 < nathan7> ?!?!?!?!?!?!?!?!
01:12 < nathan7> Everyone loves lots of punctuation, amirite?
01:15 < warz> oops. looks like creating an array with 10 million number values and then printing that out freezes the repl.
01:15 < warz> that or my ssh client, lol.
01:18 < jwulf> i'm trying to make my npm module reusable in the browser
01:18 < jwulf> any advice?
01:23 < substack> jwulf: try it with browserify and if it works you're done
01:23 < prettymuchbryce> is there an easy way to see which port node is running on ?
01:25 < yitsushi> prettymuchbryce: which OS?
01:26 < jwulf> cool, thanks substack 
01:26 < niggler> if i have a cpu bound function and i want to run it asynchronously, is it possible to start a new thread to do it?
01:27 < substack> niggler: http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_fork_modulepath_args_options
01:28 <@mbalho> node protip: node processes are single threaded
01:28 < mscdex> mbalho: just the v8 part!
01:29 < mscdex> and network i/o
01:29 < mscdex> :-D
01:30 < abrkn> substack: know of any nice and simple browserify wrapper of debug?
01:34 < prettymuchbryce> OSX
01:34  * gluxon wonders when Apple will make OS XI
01:35 < abrkn> try windows 8! it only destroyed my bootloader three times during install
01:37 < jedahan_> How come this doesn't work in my package.json? "prestart": "ps | grep [r]edis || redis-server --daemonize yes"
01:41 < chilts> jedahan_: if you run ps, I don't think you'll see your redis instance (try ps -fu <yourusername>)
01:41 < jedahan_> chilts when i run that in sh manually, it works fine
01:41 < jedahan_> its only when i do 'npm start' that it doesn't run right
01:41 < jedahan_> (with "start": "coffee server")
01:44 < yitsushi> prettymuchbryce: try that: lsof -i -P | grep node | grep LISTEN
02:00 < llappy> Anyone know how I might be able to perform a speed test using Node.js?
02:00 < llappy> (e.g. determine what the maximum upload and download speeds are from the Node server to another server {the other server can be whatever I need it to})
02:13 < mscdex> llappy: erm.... (time taken)/(size of file) ?
02:14 < mscdex> or vice versa :-D
02:14 < llappy> mscdex: I'm not sure how to get the time taken, though
02:15 < llappy> if I do req.write(HolyFucktonOfData); it just goes off to the kernel buffer and I dunno how to find out how long it actually takes to get there
02:15 < llappy> maybe the time between me writing the data and receiving a response?
02:15 < llappy> that could work
02:20 < mscdex> llappy: you could listen for the 'drain' event maybe
02:20 < llappy> mscdex: that just means it made it to the kernel buffer, though
02:23 < mscdex> llappy: how about the callback to socket.write() ?
02:24 < llappy> that's when it's written out, not when the server gets it
02:24 < mscdex> d'oh, looks like http doesn't support that at the higher level
02:24 < llappy> pretty similar to drain
02:24 < niggler> what file extension do you use for javascript that you expect to be run on the server side
02:25 < mscdex> niggler: .js
02:25 < niggler> i want to host some files and have other files processed on the server
02:25 < niggler> should I name them with different extensions or put some content in the file to distinguish
02:26 < abrkn> one folder is called lib, thats your server side. another is called assets or public, thats what you give the browsers
02:26 < abrkn> or you use browserify and it's all one big, happy third reich
02:27 < abrkn> don't quote me on that
02:28 < mscdex> [22:25] <abrkn> or you use browserify and it's all one big, happy third reich
02:28 < niggler> lol
02:28 < abrkn> touche
02:29 < niggler> i need to concentrate
02:29 < abrkn> most examples have one lib dir for node files and one public dir for client js
02:31 < mscdex> yeah that's what i do
02:31 < mscdex> public/ contains html, js, css
02:31 < mscdex> for client side
02:41 <@Nexxy> gnarf, danheberden :P
02:41 < gnarf> ^.^
02:41 < mscdex> Nexxy, \o/
02:42 <@Nexxy> mscdex, \o/
02:54 < astropirate> bradleymeck, hey
02:54 < astropirate> did you ever implement a Fix protocol library?
02:54 < astropirate> (I googled and your conversation came up in irc logs :) )
03:14 < Zoney> Hi, has anyone ever experienced issues with a Node app just stopping? No errors, no exit event, no signal events, no nothing.
03:14 < mscdex> no
03:15 < mscdex> Zoney: using any compiled addons? what node version?
03:15 < Zoney> all i'm using is engine.io
03:16 < Zoney> Node 0.8.12
03:17 < Zoney> sadly it doesn't just happen right away
03:18 < Zoney> it has happened anywhere from 8 hours to 72 hours after i started the app
03:19 < deoxxa[cookies]> Zoney: does the cpu usage go crazy? could be an infinite loop
03:19 < Zoney> not that i can tell. i do have monitors for load and memory and nothing out of the ordinary
03:25 < Zoney> I tried the following to capture it: process.on.... exit, SIGTERM, SIGINT, SIGHUP, SIGUSR, SIGUSR1 - I don't even know what some of those mean but I saw them in docs.
03:25 < Zoney> but none of them got called when the program just magically stopped
03:25 < ashish> Hi I am making a small express app with connect json middleware. Every time I send an incorrect json using curl, I get the full stack trace back in response. I want to avoid that and just send 400 response code. how can I do that ?
03:29 < deoxxa[cookies]> Zoney: do you mean the process actually exited? or just hung?
03:29 < Zoney> exited
03:29 < deoxxa[cookies]> ashish: #express will be able to help you better
03:29 < deoxxa[cookies]> Zoney: hmm. could it be that it just naturally exited? i.e. it had nothing left to do?
03:30 < Zoney> shouldn't
03:30 < Zoney> and if it did, process.on("exit", ...) shoulda been run
03:33 < Zoney> var server = http.createServer().listen(port); should pretty much keep it running forever
03:33 < ChrisPartridge> Zoney: process.on('uncaughtException') maybe?
03:33 < Zoney> ya, i'll try, but exception should print out if there's an uncaught except and no process.on("uncaughtexceptin")
03:34 < ChrisPartridge> it should
03:34 < Zoney> but i'll try it on my next run.
03:34 < Zoney> thanks
03:37 < bradleymeck> astropirate: never made a fix protocol lib, someone else said they had one
03:43 < astropirate> bradleymeck, I see, thank you
04:19 < jwulf> got my cross-platform module half-way working
04:19 < jwulf> https://gist.github.com/3971482
04:19 < jwulf> all the exports show up fine in the browser
04:20 < jwulf> except the PressGangCCMS object
04:20 < jwulf> it comes out as "undefined"
04:20 < jwulf> any pointers?
04:25 < airtanah> does "exports.PressGangCCMS = (function () {
04:25 < ChrisPartridge> jwulf: is that anonymous function actually returning it?
04:25 < airtanah> return anything?
04:26 < jwulf> it works as a node module with something like that
04:26 < jwulf> let me find it
04:26 < jwulf> it works like this: 
04:26 < jwulf> https://github.com/jwulf/node-pressgang-rest/blob/master/pressgangccms.js
04:26 < jwulf> https://github.com/jwulf/node-pressgang-rest/blob/master/pressgangccms.js#L122
04:27 < jwulf> https://github.com/jwulf/node-pressgang-rest/blob/master/pressgangccms.js#L344
04:28 < airtanah> you have 'return PressGangCCMS'
04:28 < ChrisPartridge> ^
04:28 < airtanah> the other example is missing a return statement
04:28 < jwulf> boom
04:28 < jwulf> headshot
04:29 < jwulf> thanks airtanah ChrisPartridge 
04:29 < airtanah> gg
04:41 < niggler> if there's an error in readdirsync how do i get it?
04:41 < niggler> will it be thrown or will the return value not be an array?
04:50 < mscdex> thrown
04:51 < mscdex> all fs sync methods throw on error
04:51 < mscdex> well with some exceptions
04:51 < mscdex> like existsSync
04:52 < niggler> everything works except for those that don't
04:52 < bradleymeck> mikeal: do you know how to read in a null terminated string with the new readable-streams ?
04:52 < mikeal> you want to real until null?
04:54 < bradleymeck> mikeal: yep
04:55 < mikeal> you'd just do read(), find null, and when you're done processing/buffering you'd call read() again
04:55 < mikeal> so that it would return null and you wouldn't pause
04:55 < mikeal> a readUntil(new Buffer('\n')) would be great
04:56 < bradleymeck> mmm so i guess buffering in memory is still best way
04:56 < bradleymeck> kk, thanks man
04:56 < mikeal> if the protocol support framing you can do size limited reads
04:56 < mikeal> and those, eventually, can get well optimized 
04:57 < mikeal> it would be nice to do the same with readUntil
04:57 < bradleymeck> its on disk so no framing haha
05:00 < niggler> mscdex: any reason why dot files have no extname?
05:00 < niggler> err like .git or w/e
05:03 < zensavona> what's up, guys
05:04 < niggler> zensavona: READY FOR THE STORM?
05:04 < mikeal> bradleymeck: ondisc database files usually use page files which are framed
05:04 < niggler> what are you doing with your holiday?
05:04 < zensavona> <-- australian
05:04 < bradleymeck> mikeal: im reading elf headers for now, not a database
05:04 < zensavona> I'm safe on my little island ;)
05:05 < mikeal> yeah, i'm reading giant json files right now :)
05:05 < mikeal> github activity stream data
05:09 < zensavona> I don't actually know node, not even Javascript really
05:09 < zensavona> I'm actually a Ruby/Go dude, but I'm learning (proper) js as we speak and I just wanted to come and tell you guys how crazy/strange/cool a creature it is
05:10 < chovy> is it bad to expose mongo object ids in urls?
05:12 < ChrisPartridge> zensavona: it's a wonderful beast
05:12 < zensavona> i just realised I can do this
05:12 < zensavona> https://gist.github.com/3971675
05:12 < zensavona> and declare functions _as_ arguments
05:12 < zensavona> like, what...
05:13 < jwulf> pretty cool, huh?
05:14 < zensavona> if php is a squid, this is a duodepus
05:14 < jwulf> any idea why $.ajax success doesn't fire when the response is 200?
05:15 < deoxxa[cookies]> zensavona: (function(fn){fn();}(function(){console.log("hello");});
05:16 < deoxxa[cookies]> javascript be crazy yo
05:16 < zensavona> Sure seems so.
05:16 < niggler> deoxxa[cookies]: are you giving out cookies?
05:17 < deoxxa[cookies]> no i was eating cookies
05:17 < ChrisPartridge> niggler: i think the [] is the contents of his stomach
05:17 < niggler> haha
05:17 < zensavona> this feel reminds me of when I first learnt about channels/goroutines in Go, mind was blown a bit.
05:18 < Benvie> this is also useful
05:18 < Benvie> (function(a, b, c){ ... }).apply(this, function(){ return ['a', 'b', 'c'] }())
05:19 < Benvie> poor mans destructuring
05:29 < jesusabdullah> cute trick Benvie :)
05:36 < mscdex> niggler: it's just been the Unix way for many many years?
05:36 < mscdex> Unix/Linux
05:39 < mdedetrich> hi everybody!
05:41 < ChrisPartridge> mdedetrich: I'm Dr Nick?
05:41 < mdedetrich> sure if you want to be baby
06:10 < owen1> anyone uses shoe? is it a good replacement to engine.io?
06:26 < astropirate> How do I make use of Node.js's event loop. As apposed to doing a setIntervel()
06:26 < niggler> setInterval
06:26 < ChrisPartridge> process.nextTick, maybe
06:27 < astropirate> so just keep calling process.nextTick from within the function
06:27 < astropirate> on itself
06:58 < TehShrike> >> (function(fn){fn();}(function(){console.log("hello");});
06:58 < purr> TehShrike: SyntaxError: Unexpected token ;
06:59 < TehShrike> deoxxa[cookies]: >:-|
07:03 < TehShrike> >> (function(fn){fn();})(function(){console.log("hello");});
07:03 < purr> TehShrike: undefined; Console: 'hello'
07:03 < TehShrike> deoxxa[cookies]: missed a paren there.
07:03 < niggler> lol deoxxa[cookies] had too many cookies
07:03 < niggler> sugar coma
07:09 < sshaginyan> When I do sudo node-gyp configure I get yp ERR! configure error 
07:09 < sshaginyan> gyp ERR! stack Error: "pre" versions of node cannot be installed, use the --nodedir flag instead
07:09 < sshaginyan> Has anyone done c/c++ add ons?
07:10 < miths1108> i was installing sharejs on my system...it is working fine...but i am unable to find where the content of the editor is getting saved...can anyone help me on this..? i am a beginner :P
07:46 < durre> I'm trying to setup an integration test with node and mocha. I include my app in the test like so: var app = require('./main'); … then call app.client.send() … client is defined in main.js, but is undefined in the test. am I using require wrong?
07:51 < TehShrike> durre: yup - the object that is returned by require() is essentially the "exports" object from the file you included
07:51 < TehShrike> durre: give this a read, it's not too long, and will bring much enlightenment: http://nodejs.org/api/modules.html
07:53 < TehShrike> durre: Also, the common convention is to have your modules export not an object, but a single function.
07:59 < durre> TehShrike: thanks for the tip. I'll read the article and see if I can get it sorted
08:07 < Jakey> hi
08:09 < Jakey> when will node.js run on iphone and android fully
08:09 < Jakey> creating native apps on it
08:09 < Jakey> fully binding
08:09 < Jakey> i'm gonna spam this channel until somebody does
08:10 < russfrank> lol
08:10 < russfrank> never
08:10 < russfrank> can't run v8 on an iphone
08:13  * Jakey slaps russfrank 
08:13 < Jakey> node-ios on github
08:13 < clever> Jakey: i found an arm build of node, complete with express in /data/data/ on my android
08:13 < Jakey> only android is left
08:13 < clever> no clue which app its part of
08:13 < clever> or why it would need that
08:14 < Jakey> there needs to be native bindings for it
08:14 < Jakey> to make a native app
08:14 < Jakey> how cool will that be
08:14 < Jakey> and make it opensource
08:14 < Jakey> not like those f#kers at monotouch 
08:17 < russfrank> Jakey: not without jailbreaking
08:17 < Jakey> yes
08:17 < russfrank> which doesn't count
08:17 < Jakey> its a shame
08:18 < Jakey> where everyone is going this way
08:18 < Jakey> every company
08:18 < Jakey> it will be illegal to jailbreak/root your tablets too
08:18 < chovy> any good tools for migrating data in mongodb?
08:21 < sshaginyan> Has anyone used addon c/c++ ?
08:33 < [AD]Turbo> hola
08:52 <@Nexxy> uh oh
08:53 < AAA_awright> It's quiet
08:53 <@Nexxy> everyone's out rioting
08:54 <@Nexxy> or preparing for a hurricane
08:54 < AAA_awright> too quiet
08:55 <@Nexxy> there is seriously nothing even close to xmonad for OSX
09:10 < Nasga> Nexxy: did you try app like divvy ?
09:11 <@Nexxy> Nasga, yeah I was looking at it
09:12 <@Nexxy> Nasga, ty
09:12 < Nasga> Nexxy: there also moom, shift it etc… i use divvy but i would like to find a quicker way
09:13 < Nasga> Nexxy: i have a friend who use zooom/2 also
09:37 < sinclair> has anyone here for TS compiling from node yet?
09:45 < icebox> sinclair: yes
09:45 < sinclair> icebox: oh really?
09:45 < icebox> sinclair: well... I tried it
09:45 < sinclair> how was it?
09:45 < icebox> sinclair: typescript or the "compiler"
09:46 < sinclair> the compiler
09:46 < icebox> sinclair: it seems no pain: "npm install -g typescript" and then tsc your_file
09:47 < sinclair> i don't want to use the tsc command
09:47 < icebox> sinclair: (on windows box)
09:47 < analphabet> sinclair: me too
09:47 < sinclair> i want AST info from TS
09:47 < icebox> sinclair: I think you can get also the AST
09:47 < analphabet> sinclair: I want TGS?!
09:47 < analphabet> is this also possible?
09:47 < icebox> analphabet: what is TGS?
09:47 < deoxxa[cookies]> TehShrike: booo
09:48 < sinclair> why is express so popular, i was able to rewrite most of it in a afternoon?
09:49 < sinclair> in fact, it was trivial
09:49 < TehShrike> deoxxa[cookies]: :-P
09:49 < analphabet> sinclair: well, why rewrite something, if it's there already?
09:49 < deoxxa[cookies]> sinclair: because it's simple and tested, probably
09:49 < TehShrike> sinclair: I imagine not because it is complex, but rather because it is not, and because it is more of a standard for hooking things together than a complex framework
09:50 < analphabet> TehShrike: it would be more difficult to rewrite if it was opinionated,... imo
09:50 < analphabet> TehShrike: but yea, that'S why probably
09:50 < sinclair> TehShrike: simplicity yes, so long as it is perceived as just that. a ridiculously trivial framework. the author does not deserve the credit he is given
09:50  * TehShrike shrugs
09:51 < TehShrike> I don't know about no credit.
09:51 < sinclair> the author of express openly ran down TS without even looking at the language
09:51 < TehShrike> typescript?
09:51 < sinclair> yeah
09:52  * TehShrike shrugs again
09:52 < TehShrike> This is all drama that I am unaware of.
09:52 < jonpacker> sinclair: once again, dislike for the author is not a reason to dislike his work. that's childish.
09:52 < TehShrike> Express is a tool, people use it.
09:52 < sinclair> hes a fool, i refuse to use the express framework, because it was written by an idiot
09:52 < TehShrike> lulz
09:52 < sinclair> nuff said really
09:52 < jonpacker> that's nice. why are you telling us about it?
09:53 < TehShrike> Man, if I didn't use things because the writer was an idiot, I'd have to write everything myself
09:53 < TehShrike> ...and then I wouldn't even be able to use THAT!
09:53 < sinclair> socket.io on the other hand, damn useful, express, written by an idiot
09:53 < TehShrike> How do you know socket.io wasn't written by an idiot?
09:54 < jonpacker> sinclair: so you make your technology decisions solely based on the author of the project?
09:54 < sinclair> jonpacker: yes
09:54 < deoxxa[cookies]> sinclair: rofl
09:54 < jonpacker> nice :)
09:54 < deoxxa[cookies]> sinclair: so how much longer are you going to be in university for
09:55 < sinclair> deoxxa[cookies]: i've been in the industry for over 10 years
09:55 < jonpacker> I find that difficult to believe, sorry
09:55 < deoxxa[cookies]> sinclair: how have you managed to avoid getting a clue, then?
09:55 < TehShrike> Oh come on, I talk to clueless people in the industry all the time
09:55 < TehShrike> We all ready thedailywtf, we know it happens
09:55 < deoxxa[cookies]> sinclair: you should take a look at just how much of your codebase was written by TJ ;)
09:56 < deoxxa[cookies]> sinclair: calling him an "idiot" because he has a library that was very successful is... well, it doesn't make sense
09:56 < sinclair> deoxxa[cookies]: was TJ involved in node development?
09:56 < sinclair> or writing libraries for node?
09:56 < deoxxa[cookies]> ...
09:56 < deoxxa[cookies]> are you serious?
09:56 < deoxxa[cookies]> go take a look at the toplist on npmjs.org
09:57 < jonpacker> sinclair: he's a core contributor, yep
09:57 < sinclair> deoxxa[cookies]: sorry, im not into idol worship 
09:57 < jonpacker> therefore, I guess you can't use node. sorry :(
09:57 < deoxxa[cookies]> sinclair: there's a pretty big divide between "idol worship" and giving props where they're due. and in the case of TJ, they are most definitely due.
09:58 < sinclair> deoxxa[cookies]: i disagree with you
09:58 < deoxxa[cookies]> so i'll happily defend some of his decisions, especially in regards to express, when some no-business-having rookie comes in talking crap :)
09:58  * TehShrike yawns
09:58 < sinclair> deoxxa[cookies]: except, i run a business?
09:59 < jonpacker> LOL
09:59 < TehShrike> Less ideology, more writing useful libraries plz
09:59  * jonpacker hugs TehShrike 
09:59 < jonpacker> that's the spirit
09:59 < sinclair> TehShrike: its not about ideology either, 
09:59 < deoxxa[cookies]> TehShrike: https://github.com/deoxxa/dissolve and https://github.com/deoxxa/concentrate << my weekend project :3
10:00 < TehShrike> Oh, nice
10:00 < deoxxa[cookies]> yay, useful libraries!
10:01 < sinclair> deoxxa[cookies]: awesome
10:01 < sinclair> better than express
10:02 < TehShrike> better than butts
10:02 < TehShrike> No wait, I like butts
10:03 < deoxxa[cookies]> yay, butts!
10:03 < TehShrike> DISREGARD PROGRAMMING ARGUMENTS, TOUCH BUTTS
10:05 < sinclair> anyway, has anyone tried compiling TS from node?
10:05 < TehShrike> Compiling the library itself?
10:05 < TehShrike> Or building typescript code into JS with node?
10:06 < TehShrike> I haven't tried either yet, but I don't imagine it would take much to build typescript into JS with node, I'm pretty sure MS put the library into npm
10:06 < TehShrike> https://npmjs.org/package/typescript
10:08 < sinclair> TehShrike: yes, thats fine, but the entire TS compiler written in JavaScript (built from TS), therefore, it can run in node.
10:09 < TehShrike> Yes?
10:09 <@Nexxy> sinclair, y u hatin tho
10:09 <@Nexxy> #JIFASNIF yo
10:10 <@Nexxy> I mean the hashtag
10:10 <@Nexxy> it also happens to be a channel on freenode now
10:10 < TehShrike> Hah!
10:16 < deoxxa[cookies]> i find myself needing to manipulate a bunch of stuff in memory
10:16 < deoxxa[cookies]> this is lame
10:16 < yawnt> ouch
10:16 < yawnt> i'm hungry :|
10:17 < deoxxa[cookies]> got like 200kb of single-byte values
10:17 < yawnt> 3how bout cookies?
10:17 < deoxxa[cookies]> and i need to be able to access/modify them really often
10:17 < yawnt> do you have cookies?
10:17 < deoxxa[cookies]> i don't have cookies right now :<
10:17 <@Nexxy> I have several
10:17 < TehShrike> I had some really good cookies yesterday
10:17 < TehShrike> They were amazing
10:17 < TehShrike> I ate the last one
10:17 < deoxxa[cookies]> gief plox
10:17 < deoxxa[cookies]> :<
10:18 < deoxxa[cookies]> i wonder how fast/slow buffers are vs arrays of numbers for this kind of thing
10:18 < deoxxa[cookies]> it's benchmark time!
10:18 < deoxxa[cookies]> actually, maybe typed arrays would be better
10:19 < TehShrike> TYPED ARRAYS?  ARE YOU CRAZY?
10:19 < deoxxa[cookies]> maybe
10:19 < TehShrike> What kind of language do you think this is?
10:20 < deoxxa[cookies]> a systems programming language
10:20 < deoxxa[cookies]> obviously
10:20 < deoxxa[cookies]> jeez
10:22 <@Nexxy> deoxxa[cookies], Uint8ClampedArray
10:22 < deoxxa[cookies]> yeah, reading up on that at the moment
10:26 < deoxxa[cookies]> hm
10:27 < deoxxa[cookies]> Buffer and UInt8ClampedArray(ArrayBuffer()) are almost identical in performance
10:27 < deoxxa[cookies]> well that was still a good test to do
10:28 < ChrisPartridge> ah dear, sitting here for 35 minutes wondering why its telling me theres no toObject on v8::Value :(
11:47 < JdJ> Hi all I'm new to node.js
11:47 < NodeX> welcome to hell!
11:47 < sinclair> lol @ NodeX 
11:48 < JdJ> I'm thinking of building a website based on an design of a website I saw in a article
11:48 < JdJ> Tx ;)
11:48 < JdJ> But I'n not sure node.js is the way to go
11:48 < NodeX> just kiddingh
11:48 < NodeX> -h
11:48 < JdJ> Can anybody give me some advice
11:49 < JdJ> not to worry @NodeX I saw it as a great welcome :)
11:50 < JdJ> May I post url here?
11:50 < NodeX> of course
11:50 < JdJ> Tx here s the design http://media.smashingmagazine.com/wp-content/uploads/2010/01/fibonaccilayout.jpg
11:51 < NodeX> and what's the question?
11:51 < JdJ> Is this something one could one could build using node.js
11:51 < JdJ> or is it better to go the Wordpress :boring: route?
11:52 < NodeX> you can do either
11:53 < NodeX> I always recommend not using wordpress or other similar bloated P'OS to build websites
11:53 < NodeX> for a few reasons, one being they propogate the dispatch of slow inefficient websites and thus have a large footprint when they dont need to
11:54 < NodeX> and another being you dont learn anything by adding plugins to a system and designing a template
11:54 < JdJ> Ok then I will give node.js a try/spin It looks like mich more fun to work with
11:54 < NodeX> you'll certainly have fun doing it
11:54 < JdJ> What you say maks sense
11:54 < NodeX> personaly I use a mixture of both
11:54 < sinclair> JdJ: that is just a html template, it has nothing to do with node, you could use any web backend 
11:54 < NodeX> I use php and node for realtime exciting stuff
11:54 < JdJ> Then it is node.js
11:55 < sinclair> NodeX: ever tried AppEngine
11:55 < JdJ> Yes @sinclair  I know. I simply feel in love with the template and now have a use for it and want to build a site based on it
11:56 < NodeX> sinclair : No, I dont use software stacks that others write (with the exception of node.js)
11:56 < NodeX> and jquery *
11:56 < sinclair> could build a html page, no backend required
11:56 < sinclair> NodeX: node is a software stack (or the foundation of one)
11:57 < JdJ> That is wehere I will start a pure html but it will need a database once the design is finished
11:57 < sinclair> NodeX: unless you wrote node
11:57 < sinclair> maybe you did
11:58 < JdJ> @NodeX php with node.js?
11:58 < NodeX> " (with the exception of node.js)"
11:58 < NodeX> ^^
11:58 < sinclair> JdJ: AppEngine gives you a datastore, and pretty good build in templates, with options to use a myriad of other open source template engines
11:58 < sinclair> JdJ: its highly scalable also, but you do get a nice free quota 
11:58 < JdJ> will google sinclair
11:58 < sinclair> JdJ: this means, database + webhost costs are taken care of. 
11:59 < sinclair> JdJ: downsode, you have to choose Python, Java or Go
11:59 < sinclair> i recommend Python
11:59 < sinclair> few lines of code, you will be up and running
12:00 < sinclair> JdJ: if you want to use node, you could use express i suppose, but im not a fan of it
12:01 < JdJ> tx sinclair I see AppEngine is a google product. Which already scores points in mu eyes
12:01 < sinclair> JdJ: yeah, i used it for a year and a bit
12:01 < JdJ> tx for the advice. I will look into it.
12:02 < JdJ> have to go now
12:02 < sinclair> see ya
12:02 < JdJ> NodeX tx as well :)
12:32 < motin> how do I assert an array equal to another array with the node.js assert module? googled and found nothing about it… currently I get this in mocha test results: 			assert.equal([0,0,0], rgbutils.fromInteger(0));       gives:     AssertionError: [0,0,0] == [0,0,0]
12:34 < motin> more general test case that fails:
12:35 < motin> https://gist.github.com/3973272
12:36 < booyaa> crikey v0.8.14 taking a bit longer than v0.8.6 to compile on raspberrypi. it's been going for 2 hours.
12:36 < booyaa> i wonder if these new 512mb ones are a bit slower?
12:36 < motin> aha got it… deepEqual...
12:45 < sayembd> Hi, how do I pass an additional parameter to this request handler - 
12:45 < sayembd>     app.get('/', requestHandlers.start);     
12:45 < sayembd> where the function is defined in another independent module - 
12:45 < sayembd>     function start (req, res) {
12:45 < sayembd>         // need to pass an additional parameter here
12:45 < sayembd>     }
12:51 < Clex> sayembd: closure.
12:57 < phrearch> hi
12:57 < deoxxa[cookies]> i made a thing: https://github.com/deoxxa/jsmc
12:58 < phrearch> when compiling hogan.js templates asString, how do i revive them back on the client?
12:58 < phrearch> eval them or?
12:58 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:01 < sayembd> Clex: Which probably means I need to define the function in the same file as the app variable, isn't it? Like this - 
13:01 < sayembd>     app.get('/', (function () {
13:01 < sayembd>         var test = "simple";
13:01 < sayembd>         return function (req, res) {
13:01 < sayembd>             // access test
13:01 < sayembd>         }
13:01 < sayembd>     })());
13:02 < Clex> sayembd: you can acces variables outside the scope.
13:03 < Clex> var foo = 42; asyncFunc(function() { console.log(foo); });
13:03 < Clex> It prints 42.
13:04 < sayembd> yes, but the "requestHandler.start" function that I've mentioned earlier, is defined in another file, which I am importing as a module to my main file. So, probably I won't be able to access foo in that file, right ?
13:05 < Clex> Well, it looks like a bad design to me. You can define a global but it's really dirty.
13:05 < Clex> Or you can give parameters to your module.
13:06 < sayembd> Clex: you know what, that has given me an idea. Let me try it first........
13:07 < braoru> Hello, its beginning to be realy hard to choose wish very good webapp framework to use when (Comet,express,highway,tower,oppa,many many more..) someone have a good link or resources to help with this cornelian choice ?
13:07 < braoru> all are good ... and all are pleasent to use :/
13:09 < sayembd> Clex: Yup, closure is the way to go! I defined another function in my requestHandler module, passed that additional parameter to it, and had it return my previous "start" method
13:09 < sayembd> Clex: Thank you very much!
13:10 < Clex> sayembd: you're welcome.
13:12 < gildean> braoru: it is bit difficult, but in my experience, express seems to have the most users so the community support on that is usually good
13:26 < MI6> joyent/node: Scott Blomquist master * fd7a651 : Correct outputs list in "node_etw" gyp target.  The gyp target node_etw d - http://git.io/uonqqA
13:27 < braoru> gildean, ok
13:27 < braoru> gildean, and express3 seem to be realy good :)
13:29 < MI6> joyent/node: Scott Blomquist master * 953b049 : windows: correct outputs list in "node_etw" gyp target  The gyp target no - http://git.io/3R3SVQ
13:46 < sinclair> braoru: whats good about express3?
13:48 < braoru> seem to be a fit all situation and last update features seem to work well
13:48 < braoru> for the try I'v done
13:48 < braoru> but the last version of railway work well too :)
13:49 < sinclair> braoru: im not a fan of express
13:50 < braoru> what do you use ?
13:50 < sinclair> i just wrote my own
13:50 < braoru> and what are your critics against express ?
13:50 < sinclair> its author
13:50 < braoru> you have a github link :) ?
13:51 < sinclair> nope
13:51 < braoru> ok
13:51 < sinclair> maybe ill bang my project up there when i get a few other things done
13:51 < braoru> so no way to test your own framework :)
13:52 < braoru> ok
13:52 < gildean> sinclair: tj seems like a good and extremely productive guy, i don't see why you'd skip one of the best frameworks just because the author?
13:52 < braoru> so if you had to choose one now what you would give a try ?
13:52  * DougReeder waves hello
13:52 < sinclair> gildean: his moronic comments on TypeScript give me enough reason to doubt him as a developer
13:53 < sinclair> gildean: and hes another one of those anti MS zealots
13:53 < gildean> sinclair: some single comments, he might've just been a bit pissed off about something else and was harsher than intended
13:54 < sinclair> gildean: his comments, and comments following the replies were inaccurate
13:54 < sinclair> gildean: he judged a technology based on its author, so ill judge him on his projects
13:55 < braoru> ok
13:55 < braoru> so .. still have to choose a framework :P
13:55 < gildean> sinclair: yes, that's obviously being a better person than him
13:55 < braoru> I tryed many but can't realy find one where I realy feel good with
13:55 < DougReeder> If I do something like fs.writeFile('path/to/file', JSON.stringify(album), cb) the string created by stringify would be eligible for garbage collection as soon as writeFile was done with it, yes?
13:55 < sinclair> braoru: writing your own is extremely trivial
13:56 < dschatz> How are addons loaded? Does it use dlopen?
13:56 < braoru> sinclair, I tried to do something with the http-proxy from nodejitsu and connect .. maybe I should continue on that way..
13:58 < sinclair> braoru: perhaps, in my view, express is soo trivial, it barely warrants an existence, id use what is most appropriate for your application
13:59 < gildean> express might be trivial, but it's already there, it works and has the methods you'll probably use
13:59 < gildean> like sessions and csrf
14:00 < sinclair> both are trivial
14:01 < bigkevmcd> sinclair: My view is that it's hard to see what benefits TypeScript brings
14:01 < sinclair> bigkevmcd: quite a few things
14:01 < gildean> sinclair: yet you'd spend some time making sure they actually work as intended, if your point is not to write a framework but to write an app, why not use a framework that is known to work
14:02 < ruff> gildean: you can also write a framework in typescript
14:02 < bigkevmcd> sinclair: I'm also not a fan of CoffeeScript for similar reasons, I find it harder to read than plain JS
14:02 < gildean> ruff: i didn't realize we're talking about typescript
14:02 < sinclair> bigkevmcd: im looking at TS is a slightly different way
14:02  * sinclair notes the conversation did change rapidly
14:02 < gildean> i have no problems with typescript myself, it seems somewhat interesting to me
14:02 < sinclair> lol
14:03 < ruff> rofl
14:03 < sinclair> gildean: anyway, i appreciate your comments, but for me, express .... no thanks
14:03 < sinclair> in terms of TS, it offers some interesting options in terms of contractual interfaces and reflection
14:04 < ruff> sinclair: what do you think of dart vs TS?
14:04 < sinclair> ruff: i think dart is kinda right in principle
14:05 < sinclair> ruff: but i prefer TS as it can consume every JS framework available now
14:05 < sinclair> ruff: without fuss or hassle
14:06 < sinclair> ruff: i appreciate that Dart is as much about native compilation (to a runtime), as it is to a compile to JS, but compiling to JS defeats the purpose imo, and the runtime just isn't there yet
14:07 < ruff> interesting
14:07 < sinclair> ruff: in terms of Dart's compiler, it has some interesting tricks, like tree shaking and various optimization tech under the hood. 
14:08 < sinclair> ruff: you may be interested in this.. http://channel9.msdn.com/Shows/Going+Deep/Anders-Hejlsberg-and-Lars-Bak-TypeScript-JavaScript-and-Dart
14:08 < ruff> thanks
14:08 < booyaa> just ran make test on node v8.0.14 and got this at the end:
14:08 < booyaa> [18:15|% 100|+ 450|-   8]: Done
14:08 < booyaa> make: *** [test] Error 1
14:09 < bradleymeck> sinclair: ruff: lljs is another interesting project https://github.com/mbebenita/LLJS in the vein of those
14:09 < booyaa> is that normal if not how do i find out what failed? i've got a node bin and npm too
14:10 < ruff> bradleymeck: manual GC, hmm
14:10 < ruff> curious where this positions itself
14:13 < DougReeder> Is the main drawback of using fs.writeFile (instead of a Writable Stream) to write a large file, that it requires a large memory allocation?
14:15 < sinclair> ruff: that video is quite awesome btw
14:16 < sinclair> ruff: guy on the left invented C# and TypeScript, guy on the right, Google v8 architect and Dart inventor.
14:17 < ruff> sinclair: i watched the main vid with Anders presenting TS, very good stuff
14:18 < ruff> i would say the tooling is a huge selling point for TS
14:18 < sinclair> ruff: im looking forward to see what makes it into future releases
14:19 < sinclair> ruff: i love the fact that the compiler is written in JS
14:19 < durre> is there a good lib for working with activemq that you could recommend?
14:23 < deyna> Hey guys, I'm trying to setup a local NPM repository using CouchDB. Everything appears to be working correctly apart from the fact that when I try to publish my first module I get a conflict telling me the module is already published
14:24 < bradleymeck> deyna is it replicating the public npm modules and is there a module with same name / version on public registry?
14:25 < deyna> bradleymeck: No, no intention to publish them to the public registry
14:25 < deyna> I have the .npmrc overriding to my local repository
14:25 < bradleymeck> deyna: but is the couchdb replicating
14:26 < deyna> bradleymeck: I haven't configured that task yet in Futon. Is that something that could cause issues? My test module only has a single dependency (async)
14:27 < bradleymeck> deyna if your private couch replicates npm, it will replicate all the modules in npm by default, you will want to check if a module of the same name and version is in the public registry, couchdb ppl can help with replicating without getting all the docs
14:28 < deyna> I'll do a quick search now. At the moment my local repo is not replicating from anywhere is empty, so I should be able to publish my module?
14:29 < bradleymeck> deyna: if it does not have design documents no, also gist npm config list -l
14:29 < bradleymeck> sounds like something screwy with config if its not just blowing up
14:33 < deyna> ill do a replication now
14:46 < roxlu> hey
14:49 < roxlu> Hi I've working on a project using libevent and someone told me to have a look at libuv some time ago. Atm I'm stuck with libevent and ssl. Therefore I'm looking around if I can replace libevent by libuv. How does libuv handle ssl? Or doesn't it?
14:52 < baudehlo> roxlu: I don't think it does.
14:52 < navaru> roxlu: a book on libuv http://nikhilm.github.com/uvbook/index.html , browse the contents, but I don't think ssl is a part of libuv
14:53 < roxlu> navaru: ok thanks (I did just see a code snippet to create https server though)
14:54 < bradleymeck> roxlu: no, node binds them separate
14:54 < roxlu> bradleymeck: what?
14:54 < bradleymeck> roxlu libuv does not come with ssl, so node must use separate dependencies to link against them, node includes ssl so was easy to check
14:55 < EyePulp> yo ho ho -- anyone using Cube for event capture? https://github.com/square/cube/
14:55 < booyaa> is there a magic env variable that i need to define so npm doesn't need su(do) to install stuff using -g
14:55 < booyaa> nvm
14:55 < bradleymeck> EyePulp: is that like statsd?
14:56 < EyePulp> bradleymeck: Definitely some overlap
14:56 < roxlu> bradleymeck: I understand it node doesn't have it's own ssl implementation, but if it includes it as you say, it seems there is some support for it?
14:56 < bradleymeck> booyaa npm_config_user=desired_install_user
14:57 < EyePulp> bradleymeck: it feels similar to mixpanel
14:57 < EyePulp> (cube does)
14:57 < bradleymeck> roxlu: node uses libuv for tcp and pipes it through openssl and back to js
14:57 < roxlu> ah got it! thanks
14:57  * roxlu likes that approach
14:58 < DougReeder> booyaa: You could log in a root before using npm -g
14:59 < navaru> roxlu: http://blog.indutny.com/0.benchmarking-tls  -  https://github.com/indutny did some work on tls
15:00 < DougReeder> booyaa: It's a design feature that npm doesn't require elevated permissions most of the time.
15:00 < clever> does crypto.createHmac() need the key in binary or base64 form?
15:01 < roxlu> navaru: ah thanks! I'm new to ssl; I'm googling for an example which uses libuv + openssl to create a https connection
15:01 < bradleymeck> substack: API design q if you gots time
15:02 < substack> here
15:04 < bradleymeck> substack, have a streaming interface for reading binary structs, but I have a problem, the struct declares the offset and types of structs contained withing in its header. I cannot figure out how to read the stream without some complex book keeping every time i read data off the stream
15:05 < bradleymeck> do you have any examples of reading dynamic data structs that are only offset based from a stream or ideas?
15:06 < substack> bradleymeck: maybe the protocol isn't a good one for streaming then
15:07 < bradleymeck> substack: i guess, reading ELF files, and just trying to avoid buffering the whole damn thing
15:09  * sinclair compiles TS with nodejs
15:09 < sinclair> yay
15:29 < sinclair> anyone here used the vm.runInThisContext() method?
15:32 < durre> is there a good module for working with activemq? I found some stomp modules that all seem to be abandoned
15:37 < dschatz> how do addons get loaded? Is it dlopen?
15:38 < chakrit> what happen to nested dependencies for modules which are listed as bundledDependencies?
15:38 < chakrit> ... on npm install?
15:41 < rauchg> chakrit nothing 
15:42 < rauchg> https://github.com/isaacs/npm/issues/2442
15:47 < dbackeus> Scenario: I want to let clients upload files to my node endpoint - but I also want other clients to start streaming down those incoming files while the they are still uploading.
15:47 < deyna> after all that - same error....
15:48 < dbackeus> At the moment I have upload working. The problem is how to manage the download streams as the stream reader will get an end event as soon as it reaches end of file, but as the file is still incoming it's not actually the end of the file.
15:49 < dbackeus> How to accomplish a more intelligent read?
15:49 < deyna> sounds like you want the drain event
15:51 < dbackeus> I think what I want is a reader which goes on until end of file but then keeps waiting for new data.
15:55 < chakrit> rauchg: thanks for the link
15:55 < rauchg> chakrit np
15:59 < Slade-> Is there a generally accepted 'class' pattern in javascript/node?  
16:00 < Slade-> the jquery pattern is messy, but fast..
16:00 < bradleymeck> Slade-: util.inherits
16:01 < cdarling> Are there any good hosts right now that support full TCP sockets? I'm trying to build a system that uses a custom binary protocol
16:02 < Slade-> ah, no i dont care about inheritance.. just creating an object
16:03 < Slade-> is this util.inherits used much within node?
16:03 < bradleymeck> Slade-: Objects are types in javascript, i'm not understanding the question
16:03 < Slade-> bradleymeck: well you can use the function that creates the object. or you can use 'new' and prototypes.. or..
16:04 < aandy> if you're not interested in inheritance, then what do you mean by class?
16:05 < bradleymeck> Slade-: use whats appropriate, .createX is popular if you are making generators, new is generally used when making library specific stuff or extensible things
16:06 < jgornick> hey guys, with npm, is it possible to get package information through the registry without using the npm cli tool?
16:07 < sinclair> Slade-: try TS, it does all the work for you
16:07 < Slade-> http://pastebin.com/iHAGsJjT   <-- this is what i'm referign to
16:07 < jgornick> looking to see if i can perform a GET on a package url and get the data returned so i can inspect the package information through js.
16:07 < Slade-> sinclair:  TS?
16:07 < sinclair> TypeScript
16:07 < Slade-> oh
16:07 < Slade-> ah method 1 needs a return ret;
16:08 < sinclair> Slade-: http://www.typescriptlang.org/Playground/
16:08 < Slade-> sinclair: ah that seems to use the 'new' method
16:09 < sinclair> ?
16:09 < jgornick> Nevermind, got it :) http://registry.npmjs.org/lodash/
16:10 < sinclair> Slade-: i think youll find it uses prototypes 
16:10 < Slade-> sinclair: it creates 'objects' with 'new'  
16:10 < aandy> by that logic you could use coffeescript also, which is the return function and new approac as you mentioned, Slade- 
16:10 < sinclair> Slade-: as apposed to?
16:10 < aandy> so in that sense, it's a "common" approach
16:10 < Slade-> sinclair: what i posted above
16:10 < Slade-> sinclair: a function that just makes the object
16:11 < sinclair> Slade-: use the "new" keywoard
16:11 < sinclair> *keyword
16:11 < sinclair> Slade-: alternitively, use a factory pattern, don't just slap on functions
16:11 < sinclair> Slade-: better yet, use TS
16:12  * sinclair notes that Slade is a prime example of why TS is important
16:12  * Slade- notes that sinclair seems semi biased.
16:13 < sinclair> Slade-: dude, you are asking me how to write a class
16:13  * aandy notes that it's a general pattern also used by many libraries in node, and also the default way of coffeescript, making LINT compliant etc code
16:13 < Slade-> no. i'm asking what the generally accepted way is to write a class. i've done tons of ways
16:13 < aandy> tons of ways, meaning two?
16:14 < Slade-> no?
16:14 < aandy> ok, if you have a "big" library which issues small computed objects, .createX like bradleymeck said is a good approach
16:14 < aandy> if you have a model/class/prototype, use new
16:15 < sinclair> aandy: i think the former is called a factory pattern
16:15 < aandy> an example of the other would be http.createServer and similar. you might not want all the junk that http has, just because you want a server object
16:15 < aandy> sinclair: right, or as sinclair said ;) either way, i think that'd be where i'd draw the line if i had to choose one or the other approach
16:16 < sinclair> Slade-: seriously, try TS
16:16 < aandy> in animals, dog extends fourlegged, cat extends dog, whiskers = true, sort of thing, new is more logical reading wise aswel
16:16 < draginx> Does npm install also update my NPMs? (I'm asking due to deployment reasons)
16:16 < draginx> or can I do a npm install && npm update and be fine? (npm instgall will just skip)
16:18 < Slade-> aandy: yea after bradleymeck replied i had my answer. everything else was just an attempt to see if anyone had anything useful to say beyond that
16:18 < aandy> well, then: those are the two preferred ways. node patterns aren't set in stone yet though
16:19 < Slade-> aandy: yea thats what i gathered, there isnt a way that has 'won' and is the common. people use what makes sense in the situation
16:19 < sinclair> aandy: tho, i have found the factory pattern to be most useful in node
16:20 < sinclair> aandy: i am somewhat adverse to things like var cat = new Cat(function() {}}); 
16:21 < aandy> isn't that what TS does?
16:21 < sinclair> aandy: not unless you tell it to do that
16:22 < sinclair> aandy: TS is just good at cleaning out all the OO fluff with JS prototyping and closures etc,
16:22 < bradleymeck> sinclair: I tend to agree for users .create is nicer, but if you do not export the GD constructor function and prototype i will cry
16:22 < sinclair> (and type checking is a plus)
16:22 < aandy> any particular reasoning? i generally use both, so would like to hear arguments :)
16:23 < sinclair> aandy: its more convention over anything else
16:23 < sinclair> new should be synchronous imo 
16:24 < sinclair> not, new with a callback
16:24 < bradleymeck> aandy: cause initialization waiting on a callback is hell when extending
16:24 < bradleymeck> use events
16:25 < sinclair> you would have thought that all these conventions would have been ironed out and agreed upon years ago.
16:25 < aandy> personally i feel silly doing a `new` approach for middleware and many types of http libraries, which is the majority of things i use/write in node. unless i'm the only one, that might be why it's more "common" :)
16:26 < sinclair> JS is wrong :(
16:26 < niggler> is there any example of node being used as a backing for a collaborative document editor?
16:27 < aandy> js is not classy :(
16:27 < sinclair> aandy: JS == http://www.planetarybargains.com/Blog/wp-content/uploads/2010/01/Wrong-Funny-Rabbit-and-Duck-Shirt-Black-Front-300x300.jpg
16:27 < aandy> forcing another language's class definition on JS is wrong, yes :p
16:27 < sinclair> niggler: f**k operational transforms
16:27 < bradleymeck> aandy: middleware is middleware, its a filter / decorator / jargon, not really a type used to persist state which is when classes/types/ducks are used
16:28 < niggler> sinclair: you afraid to say fuck?
16:28 < sinclair> niggler: you afraid to be civil ?
16:28 < jrajav> You're apparently not afraid to say "niggler
16:28 < niggler> actually sinclair dropped the l once 
16:29 < sinclair> niggler: i believe i found a nodejs operational transformation implementation out there in my travels for one a while back
16:29 < niggler> as it exists now there's a massive queue of pending operations and i wonder if that's the best solution
16:29 < sinclair> niggler: you know the term, no go fourth and find it
16:29 <@mbalho> attention node.js irc users: quit being idiots. thank you, the management
16:29 < aandy> bradleymeck: yes, what i mean is the common /lib stuff. it's rare that i need to create many objects of the same "class"
16:30 < bradleymeck> mbalho: ?
16:30 <@mbalho> bradleymeck: see above quibbles
16:30 < sinclair> niggler: i was actually going to spend some time researching OT at some point
16:30 < sinclair> niggler: its the "next big thing"
16:31 < bradleymeck> niggler: https://github.com/Pita/etherpad-lite ?
16:31 < richtera> npm pushlished module seems to be one version behind. Is this normal?
16:31 < sinclair> niggler: bang a npm module up there, you'll be a rock star, like the rock star who make express...
16:31 < sinclair> *made
16:31 < bradleymeck> richtera: may be oversight, but not terribly uncommon for a day or 2 delay
16:31 < niggler> what a waste of a day off
16:31 < richtera> Cool, thanks.
16:32 < niggler> dammit the weather isn't bad why are the markets closed :/
16:33 < richtera> bradleymeck: It's funny I published twice due to a bug and it pushed the version one right away; I'll just wait.
16:48 < dbugger> Hello guys. Ive made an upload form in a very simple server. For some reason when I upload files bigger than 2 GB in Firefox, I get an error message. In Chrome it works
16:48 < dbugger> Why is that?
16:49 < yitsushi> dbugger: Is there any built-in options in firefox for Timeout?
16:50 < yitsushi> or just firefox can't handle bigger allocation then 2gb of data?
16:50 < dbugger> I have no idea.... But I dont think its a timeout. The error message is instantaneous
16:50 < yitsushi> http://www.motobit.com/help/scptutl/pa98.htm
16:50 < yitsushi> check this
16:51 < yitsushi> Mozilla Firefox	All versions	2GB-1
16:51 < yitsushi> Google chrome	All versions	>4GB
16:53 < Eber> hey guys, I'm trying to use the imagemagick package and for some images it is breaking, and I really can't find the reason... it doesn't happen with every image I try to proccess, just a few... I get this error "prop[comps[0].trim().toLowerCase()] = comps[1].trim()"
16:53 < Eber> And then: "TypeError: Cannot set property '20' of undefined"
16:54 < Eber> It looks like, at some point, "prop[comps[0].trim().toLowerCase()]" might be undefined, but even if I test for it with an "if" statement, the script breaks...
16:54 < jrajav> Eber: It's not prop[comps[0].trim().toLowerCase()] that's undefined, it's prop
16:55 < dbugger> yitsushi, you just BLOWED my mind
16:55 < dbugger> yitsushi, is there anything that can be done? :(
16:56 < _rheora_> hi all
16:57 < Eber> jrajav: uia! let me try that...
16:59 < Eber> jrajav: right, now it breaks somewhere else... I guess this is far beyond my comprehension...
16:59 < Eber> Maybe I shoudl try to call imagemagick directly...
17:11 < yitsushi> dbugger: I don't know... I never tried to upload files with that huge size
17:16 < dschatz> can anyone tell me how addons get loaded? Are they dlopen'd?
17:17 < zane> I'm trying to follow the instructions @ blog.nodejs.org to create a flame graph, but CentOS lacks the dtrace tool -- anybody have a good tutorial / info on how to install / get around this?
17:19 < janmower> zane:
17:20 < janmower> zane: use the smartos if you want those flame graphs
17:20 < janmower> zane: otherwise look at systemtap/stap dtrace on centos
17:20 < zane> janmower: any syntax examples or links for smartos?
17:20 < janmower> zane: stapgraph.stp is a script that will make similar graphs
17:20 < janmower> zane: look at joyent's website for more info on how to get smartos
17:21 < zane> janmower: great, and where can I find stapgraph.stp or info on it?
17:21 < janmower> zane: look for systemtap in the yum repos
17:21 < zane> janmower: thanks
17:21 < janmower> zane: systemtap has similar tools (and includes a different-working dtrace)
17:22 < janmower> zane: to the solaris dtrace, but has many differences, but ends up doing very similar things
17:22 < janmower> zane: sourceware.org/systemtap i believe
17:24 < janmower> zane: sure man np.  also wait for updates for dtrace/systemtap with node.js (to make the same sort of flame graphs).  that pull request is in :)
17:25 < zane> janmower: yeah... I'm just trying to trace a bug where my CPU is going to 100% right now, on a prod machine, so kinda in a rush ;)
17:26 < janmower> zane: iotop and strace
17:28 < janmower> zane: also lsof can help.  pegged cpu can be iowait on flaky writes to network or disk
17:29 < zane> janmower: iowait on network seems most probable to me, I'll try out those tools
17:29 < zane> janmower: in the mean time, is there any quick fix if that's the case?
17:29 < zane> janmower: I immediately went to flaky network writes because my app does lots of calls to external APIs (Facebook, Twitter, etc)
17:30 < niggler> ok who needs help
17:30 < zane> janmover: and even downloads RSS contents from arbitrary sites
17:30 < niggler> another day off :/
17:30 < janmower> zane: yea sounds like you're waiting for something from a protocol stack that will block
17:31 < zane> janmower: sounds reasonable... though use the node-request library and have tried hard to optimize callbacks etc. Still... any quick tips or ideas where to start looking?
17:31 < zane> janmower: eg, how I would fix if this is the case?
17:32 < janmower> zane: it's sort of hard to say.
17:32 < janmower> zane: how much network stuff have you done?
17:33 < janmower> zane: if you look in /proc/pid/fd/
17:33 < janmower> zane: you can look at the open file descriptors
17:33 < tnorris> niggler: you familiar much w/ how ipv4/6 works?
17:33 < niggler> yeah whats your question tnorris ?
17:33 < zane> janmower: Yeah, I've looked @ that, there's always < 300 or so, and I have a cap of ~1024
17:33 < MI6> joyent/node: isaacs created branch max-tick-warning - http://git.io/vnL9TQ
17:34 < tnorris> niggler: here's the post to the mailing list: https://groups.google.com/forum/?fromgroups=#!topic/nodejs/Qo0FSfrQkJA
17:34 < janmower> zane: but what are the fds trying to open?  what are they blocking on? which syscalls are failing?
17:34 < tnorris> niggler: basically I don't know enough about how those operate to know if binding to host '::' has any unforseen drawbacks.
17:34 < janmower> zane: is there a single host or pattern?  it's an organic process, debugging
17:35 < gildean> tnorris: don't set an interface address to listen to and it should listen on both ipv4 an v6
17:35 < janmower> zane: good look, afk for a meeting
17:35 < tnorris> gildean: nope. doesn't work that way.
17:35 < zane> janmower: ah, interesting point. I haven't managed to catch the CPU while its pegged yet, always happens while I'm AFK :(
17:35 < tnorris> if no host is set then it binds to '0.0.0.0', which doesn't work for ipv6.
17:35 < gildean> tnorris: oh, i just read ahed the thread, so it is
17:35 < niggler> what platform are you using?
17:35 < niggler> i think "::" is in6addr_any so you should be good
17:36 < tnorris> niggler: ubuntu 64
17:36 < gildean> yeah :: should work ok
17:36 < tnorris> niggler: ok, cool. yeah, just used that by default on an EC2 that doesn't have ipv6 internet access, and it still worked.
17:36 < niggler> can you take a peek at what in6addr_any is on your platform?
17:36 < niggler> it should be defined in netinet/in.h 
17:37 < tnorris> guess I'm also wondering if the default in code should be '::' instead of '0.0.0.0' if ipv6 is enabled on the interface.
17:37 < tnorris> niggler: sure, give me a set
17:37 < tnorris>  /set/sec
17:37 < niggler> tnorris: 0.0.0.0 is all IPv4
17:37 < niggler> but not ipv6
17:37 < tnorris> niggler: yeah, and that's how it's defined in node if no host is set.
17:38 < niggler> i think node falls back on the platform's bind
17:39 < tnorris> niggler: net.js line 1003. force binds to 0.0.0.0
17:40 < niggler> tnorris its if you only give a port
17:40 < tnorris> niggler: from in.h: "extern const struct in6_addr in6addr_any;        /* :: */"
17:40 < niggler> there we go
17:40 < niggler> then its fine tnorris "::" does ipv4 and ipv6
17:41 < niggler> I'm surprised, though, that node doesn't expose that constant
17:42 < niggler> id expect INADDR_ANY and IN6ADDR_ANY to be exposed as constants from the net 
17:42 < tnorris> niggler: yeah, that's what I was wondering.
17:42 < tnorris> if that should be the default.
17:42 < tnorris> in everyplace I can find in .listen 0.0.0.0 is hardcoded.
17:42 < niggler> no inaddr_any should be the default
17:43 < niggler> you should have to specify if its v6 as well
17:43 < niggler> BUT those should be constants in the net module
17:44 < niggler> tnorris: for you: https://github.com/joyent/node/issues/4210
17:46 < tnorris> niggler: wow, you work fast. so to make sure I understand. those should be exposed via like "net.INADDR_ANY"?
17:46 < niggler> tnorris: id think that makes the most sense
17:46 < niggler> its certainly better than throwing "0.0.0.0" all over the place
17:47 < tnorris> niggler: ah, like what's done in lib/net.js: Server.prototype.listen?
17:48 < niggler> actually it could be done via exports as well
17:49 < niggler> but this is probably something that needs to be pulled from C code
17:50 < MI6> joyent/node: isaacs max-tick-warning * 01b9c97 : Print warning when maxTickDepth is reached - http://git.io/M01VNA
17:50 < tnorris> niggler: ok, then one last thing. do you think node should detect if ipv6 is supported then default to IN6ADDR_ANY, instead of INADDR_ANY. Since the former will work with both?
17:50 < tnorris> (by both, I mean ipv4 and ipv6)
17:51 < bradleymeck> anyone know of a decent lseek impl for both win32 and *nix?
17:51 < bradleymeck> for node*
17:51 < niggler> tnorris: the only reason it should default to v4 only is because that's the expected behavior
17:52 < MI6> joyent/node: isaacs max-tick-warning * 4a7a782 : Print warning when maxTickDepth is reached - http://git.io/VZmcIA
17:52 <@mbalho> isaacs: phew thought o/ was a isaacs max o warning
17:53 < tnorris> niggler: ok, makes sense. how about adding API docs showing how to bind to IN6ADDR_ANY (i.e. "::")? I discovered it by accident when I meant to type "::1".
17:54 < tnorris> (for those of us, like myself, who are novices in the ways of network protocols)
17:54 < MI6> joyent/node: isaacs max-tick-warning * 8546d18 : Print warning when maxTickDepth is reached - http://git.io/UtUJZA
17:54 < niggler> that's an alternative too tnorris 
17:55 < tnorris> cool. thanks for clarifying that stuff. want to start contributing back, but always like to make sure I understand how a project flows before I do.
17:56 <@isaacs> mbalho: you thought i was giving you warnings about parasites?
17:56 < MI6> joyent/node: isaacs master * 21c741f : Print warning when maxTickDepth is reached - http://git.io/nWcXZA
17:56 <@mbalho> isaacs: yea! maybe substack brought back a lethal parasite from china market
17:56 <@isaacs> mbalho: watch out! there are too many ticks on you!
17:56 <@isaacs> mbalho: it's over the maximum!
17:57 <@isaacs> mbalho: use setImmediate instead!
17:57 <@mbalho> setImmediate(noTicks, true)
17:59 < niggler> isaacs: any reason net doesn't expose constants like INADDR_ANY and IN6ADDR_ANY?
17:59 <@isaacs> niggler: i dunno
18:08 < tnorris> niggler: would exposing those be more complicated than just setting two exports in net.js? you said something about doing it in C.
18:09 < niggler> tnorris: technically its a platform constant, so i don't see how it could be done in JS
18:10 < tnorris> niggler: heh. that is definitely the more technically correct way. guess I just figured that since it's currently just set to '0.0.0.0', it would be as simple as "exports.INADDR_ANY = '0.0.0.0'"...
18:11 < niggler> though if you are only working on ubuntu "::" is a safe assumption
18:11 < tnorris> ah, yeah. i'm definitely out of my realm on this one.
18:18 < jviotti> hi people, I'm new to node and expressjs. Do you people use express to generate the app architecture? or do you use you own? maybe a monolithic setup. What is it mostly used between you guys?
18:20 < bradleymeck> jviotti depends on what kind of app: cli vs net vs daemon
18:22 < jviotti> bradleymeck: I was playing with mongoose with a webapp generated with express, and express separates the app.get route callbacks I wasn't able to use the schemas I defined. 
18:22 < jviotti> I had to define the callbacks within the app.js
18:23 < bradleymeck> no idea what you are asking exactly, would need to see code
18:27 < jviotti> bradleymeck: Im following this mongoose quick start: http://mongoosejs.com/docs/index.html, they initialize the db and then run all code as a callback of db.once. But It sounds to me like a bad app architecture to define most of my app, including routes all inside a big db.once callback on my app.js
18:27 < tnorris> in lib/net.js line 946-955, is there a reason why cluster isn't defined after the conditional?
18:27 < tnorris> ah, nm.
18:28 < bradleymeck> jviotti: if your app relies on mongoose and you never want to reconnect, seems sane
18:28 < tnorris> so, then it would be more efficient to do "if (cluster && cluster.isWorker)" and defined cluster in the conditional?
18:30 < gildean> tnorris: if-statement is not a scope
18:30 < jviotti> bradleymeck: but what if I defined my API route callbacks in a different file. Then require that file on my app.js and want to setup my routes as app.get('/', myRouteModule.index)?
18:30 < bradleymeck> tnorris: but then you would not know if it was a worker, ever, cluster is not a global
18:30 < gildean> even if you defined it in the if-statement, the defined vars get hoisted up
18:31 < tnorris> gildean: yeah, I know. it's that assigning a global if not required seems like a waisted step.
18:31 < bradleymeck> jviotti: make your file export function (app, db) {} and call it appropriately?
18:31 < tnorris> bradleymeck: yeah, it is.
18:31 < bradleymeck> tnorris: it is a module specific variable
18:31 < tnorris> bradleymeck: line 27
18:32 < bradleymeck> not global, it needs to be loaded at least the first time listen is called otherwise it will always be null, and boom you cant know before loading it if cluster is a worker
18:32 < bradleymeck> undefined not null*
18:33 < jviotti> bradleymeck: sorry I didnt understand you. You are talking of my main app.js file or my module including all my route callbacks?
18:33 < tnorris> bradleymeck: so then why doesn't line 27 just have "var cluster = require('cluster')"
18:33 < _rheora_> hi all
18:33 < _rheora_> please, i need a little help
18:33 < bradleymeck> tnorris: require's resolve takes longer than checking via !
18:33 < tnorris> bradleymeck: since in "function listen" it's not declaring the variable, so the assignation is floating to the global scope.
18:33 < bradleymeck> jviotti: in your module with routes
18:34 < bradleymeck> tnorris: it is floating to module not global
18:34 < _rheora_> anyone please?
18:34 < bradleymeck> _rheora_: first rule of irc, just ask
18:34 < draginx> is there a way to print the NODE ENV variable through command line?
18:34 < bradleymeck> draginx, `env` ?
18:34 < draginx> bradleymeck: ?
18:34 < draginx> o ok thanks
18:35 < _rheora_> bradleymeck: ok, i want to know the steps of an eventloop iteration
18:35 < _rheora_> with libuv
18:36 < bradleymeck> _rheora_: http://nikhilm.github.com/uvbook/introduction.html
18:37 < _rheora_> i saw it (im finding since 2h)
18:38 < _rheora_> but it doesnt give me clear informations about the steps within an iteration of the loop
18:38 < bradleymeck> _rheora_: depends on what you put onto the loop
18:38 < bradleymeck> it basically just pops of fifo style
18:39 < _rheora_> bradleymeck: i mean, is io is fire first, then events, then ...
18:39 < tnorris> bradleymeck, gildean: this is what I think would be more efficient: https://gist.github.com/3975594
18:39 < bradleymeck> _rheora_: no priority
18:40 < bradleymeck> it is using queueing so just w/e was on the queue
18:41 < _rheora_> queing what?
18:41 < bradleymeck> tnorris that invokes a syscall from process.env's catchall
18:41 < bradleymeck> _rheora_ things onto the event loop, functions (callbacks if you want to call em that)
18:42 < tnorris> bradleymeck: mmm... doesn't process.env get populated as an object when the process starts?
18:43 < bradleymeck> tnorris: yes, but its still a catchall that does syscalls in case it got changed somehow
18:43 < tnorris> so accessing it would be like accessing any other object variable?
18:43 < _rheora_> bradleymeck: im not really sure, but thks anyway
18:43 < bradleymeck> nope
18:43 < bradleymeck> _rheora_ it puts pointers to functions like in c/c++ socket programming basically
18:43 < tnorris> bradleymeck: mother... wish that was in the docs.
18:43 < bradleymeck> so you just take one off and call it
18:44 < bradleymeck> tnorris i can double check, sec
18:45 < bradleymeck> tnorris: https://github.com/joyent/node/blob/master/src/node.cc#L2178
18:45 < draginx> superjoe_: hey man any idea why im getting "1. the ipc file specified is invalid, or" ?
18:45 < draginx> with naught
18:45 < bradleymeck> remember, things outside of your process can sometimes change the env variables (not all OS)
18:46 < superjoe> draginx, can you make me a paste of some example command line output?
18:46 < draginx> superjoe: https://gist.github.com/10140b76626189c7565f
18:46 < tnorris> bradleymeck: then what is https://github.com/joyent/node/blob/master/src/process_wrap.cc#L219-229
18:47 < bradleymeck> tnorris: exporting current env vars to a child being spawned
18:48 < draginx> superjoe: my npm run start command is simply naught start app.js && naught deploy app.js
18:49 < superjoe> draginx, ah. `naught deploy` doesn't take app.js as a parameter
18:50 < superjoe> draginx, just remove that parameter and it should be good.
18:52 < tnorris> bradleymeck: wow, had no idea process.env  did that. well, thanks for the insights. you think that should be mentioned in the API?
18:52 < floody> hello
18:57 < floody> i looking for an easy way to read tcp streams which are written by a java server, could someone recommend to me a method or a module? my problem is that the stream contains bytes, strings and int values and these values are mixed in order
18:57 < roxlu> hi guys, where is the configure file for libuv/
18:57 < tnorris> gildean: so what do you think about the following change: https://gist.github.com/3975594
18:58 < draginx> superjoe: doh! makes sense thanks
18:58 < superjoe> np
18:58 < Cheery> I need an efficient typed array implementation
18:58 < Cheery> anyone happened to have done one?
18:59 < tnorris> floody: data coming from a tcp stream is a buffer, so if you know the exact structure you could slice it up and resolve each part.
18:59 < tnorris> Cheery: have you used the built in typed arrays?
18:59 < draginx> superjoe: same problem
18:59 < tnorris> floody: here's the docs: http://nodejs.org/api/buffer.html#buffer_buf_slice_start_end
19:00 < draginx> https://gist.github.com/119c206462ec2bc913c5
19:00 < draginx> not exactly sure how its failing though :/
19:00 < Cheery> tnorris: oh there are those!
19:00 < Cheery> tnorris: they are exactly what I need. but are they accessible through c++ addons?
19:00 < draginx> superjoe: running it manually is fine though but not from npm run start :/
19:01 < Cheery> tnorris: I don't need much control. just enough that I can pass a POINTER lol. :)
19:01 < tnorris> Cheery: I'd imagine so. it's part of the v8 implementation. though I'm not a c++ programmer.
19:02 < draginx> superjoe: so naught start app.js && naught deploy works but npm run start does not xD
19:02 < draginx> does npm need something special? :S
19:03 < Cheery> lets seeeee
19:03 < superjoe> draginx, you have to set up a script in package.json
19:03 < draginx> I do
19:03 < superjoe> show me a paste and I'll eyeball it
19:03 < draginx> ok
19:04 < draginx> superjoe: https://gist.github.com/119c206462ec2bc913c5
19:04 < tnorris> Cheery: someone mentioned to me that the current Buffer implementation is basically an Int8View for an ArrayBuffer. might want to look there for implementation details.
19:05 < mscdex> uint8
19:05 < floody> tnorris: and how can i detect where is the end of the string?
19:05 < superjoe> draginx, double check that you're running npm start with the correct working directory
19:06 < mscdex> floody: look at the data, it's probably null terminated
19:06 < mscdex> floody: unless it's prefixed with a length or something
19:06 < tnorris> floody: well, first you need to know the the character type (utf8/ascii). then you need to know what the end of the string is (new line, etc) then run through the buffer checking for that.
19:06 < phrearch> hey
19:06 < draginx> superjoe: i am because the log says what its trying to execute
19:06 < draginx> it sees the naught start && naught deploy commands
19:06 < Cheery> tnorris: okay
19:07 < draginx> heres my post receive...
19:07 < Cheery> tnorris: I might be able to work through it.
19:07 < Cheery> maybe my stuff already supports it all
19:07 < superjoe> draginx, hmm. is the project open source?
19:07 < draginx> superjoe: https://gist.github.com/27619aceec9a060036f1
19:07 < draginx> it is not sorry :(
19:08 < draginx> npm run build works flawleslly
19:08 < draginx> i can show u bits of code if ur looking for something specific
19:08 < draginx> (id love to make it open source but it is not my call unfortunately :()
19:08 < floody> tnorriss, mscdex thanks for the help
19:09 < tnorris> mscdex: thanks for your feedback the mailing list. niggler helped me understand that on my system "::" resolves to IN6ADDR_ANY, which is why it works for both v4/v6.
19:16 < tnorris> Cheery: here's a thread that has a link to what I think is similar: https://groups.google.com/forum/?fromgroups=#!topic/nodejs/_Hqu54rVeqo
19:17 < draginx> superjoe: u see anything wrong with my post-receive?
19:17 < superjoe> draginx, can I see the error message? it could be a permissions issue. if the user that created the .ipc file is different than the one that runs git post receive hooks, it may not work
19:18 < draginx> interesting and I thought i showed u the error msg..?
19:18 < draginx> let me cat npm error
19:18 < draginx> superjoe: https://gist.github.com/9a183c615aa596ed5f66
19:21 < superjoe> draginx, oh yeah. and `naught start` is going to have a nonzero exit code if it's already running. so you want `naught start; naught deploy`.
19:21 < draginx> oh so naught start app.js && naught start; naught deploy; ?
19:22 < draginx> because start needs a parameter me thoughts >.>
19:22 < draginx> unless u were just coding for brevity
19:22 < draginx> typing*
19:22 < superjoe> draginx, sorry, typo. `naught start app.js; naught deploy`
19:22 < draginx> ah ok just wanted to double check! :) awesome man thanks
19:27 < draginx> superjoe: worked! thanks :)
19:28 < gildean> tnorris: difficult to say, also does it really make a difference?
19:28 < superjoe> np
19:28 < draginx> superjoe: is there anyway to buy you a beer? :)
19:29 < superjoe> draginx, do you live in new york city?
19:29 < draginx> i dont lol sorry :( and stay safe up there!
19:29 < superjoe> yeah I just hope the internet stays up )
19:29 < superjoe> :)
19:29 < draginx> as a floridian idk why everyone is making a big deal out of this hurricane thing ;x
19:31 < jcrew> THE INTERNET IS DOWN
19:32 < shanse> LIAR
19:32 < samo_> hi everyone...
19:32 < samo_> i have a somewhat general (architectural?) js question. can i post it here?
19:33 < shanse> test your luck
19:33 < samo_> shanse: your talking to me? =)
19:33 < ruff> http://3.bp.blogspot.com/_QzNB27fayQY/SoRas_9pdHI/AAAAAAAAAVo/1N9EDPe68W4/s400/03.png
19:33 < shanse> yes
19:33 < samo_> =) great tnx... here goes...
19:34 < tnorris> gildean: only that you never have to process the "require()" statement if you don't use a cluster. and I assumed that was important since they don't just do "var cluster = require('cluster')" at the top.
19:34 < therealkoopa> When is it too late to pipe on a stream? If the nexttick has processed?
19:36 < MI6> joyent/node: Francois Marier v0.8 * 326bce9 : doc: reflect hostname v. host preference in examples  The documentation f - http://git.io/Yybu7g
19:36 < samo_> let's say i want to create a web app (browser and mobile), that has a lot of forms. those forms are complicated, i.e. form validations are interdependent etc. since i have to write a lot of js to do the client side logic, i thought it might be cool to use the same parts on the server side. my question is: how do i go about that?
19:37 < Aartsie> what is the best way to protect your application from sql injections ?
19:37 < bradleymeck> samo_ if you use some sort of library like flatiron/revalidator would that be enough?
19:37 < therealkoopa> samo_: Checkout browserify
19:37 < bradleymeck> Aartsie use your driver's escape method appropriately, different SQL engines have different attacks
19:39 < Aartsie> ok thank you :) bradleymeck
19:40 < samo_> bradleymeck, therealkoopa: can i use any of those modules without an internet connection on the client?
19:40 < DougReeder> Aartsie: In general, SQL statements should use variables, rather than concatenating strings.
19:41 < bradleymeck> sam_ revalidator just takes an object?
19:41 < therealkoopa> samo_: How is the client going to communicate with the server? Same network, but it doesn't have access to "the internet"? 
19:43 < samo_> therealkoopa: let's say you want to do client side validations when you are offline, and then when you get to a connection you push the data to the server...
19:43 < therealkoopa> samo_: You should be fine.
19:43 < therealkoopa> Browserify works as a build step
19:45 < samo_> so with browserify, you can basically do anything, while revalidator is just for validations?
19:45 < therealkoopa> browserify allows you to use npm modules on the client so you can use a lot of the modules in npm
19:45 < therealkoopa> I have not used revalidator
19:46 < cdarling> Anyone have experience running a raw TCP socket server on EC2? I'm about to start a project and wanted to avoid any pitfalls
19:46 < bradleymeck> browserify will not let you do some things, but yes its a conversion utility, revalidator is for validating stuff like JSON-Schema
19:46 < samo_> ok, i guess i'll try them out
19:46 < jtomasrl> when building an API in node, should i insert the JSON from the client directly to the DB or i should re make it and then insert it?
19:47 < bradleymeck> jtomasrl: depends on when you want to scrub your user input
19:47 < samo_> i'm kinda new to node, been doing rails until now (don't shoot please...)
19:47 < bradleymeck> cdarling: if you need perf, look at VPC otherwise EC2 instances can have wonky perf once you start caring about perf
19:48 < cdarling> bradleymeck: got it, any particular reason? I'm basically taking binary data over a socket and pushing it into a redis queue
19:49 < bradleymeck> cdarling: VPC lets you get better reliability from what ive seen/heard from a couple large deployments
19:49 < cdarling> bradleymeck: good to know
19:50 < jtomasrl> bradleymeck: I think a better question is, should i send from the client the JSON object or should i send the params and create the JSON object on the server
19:51 < bradleymeck> jtomasrl: once again depends, but generally if you just want simplicity, client sending JSON would be my route
19:51 < samo_> bradleymeck, therealkoopa: tnx
19:51 < Aric> what is the handlebars room? or can i ask in here
19:51 < bradleymeck> for non-js enabled sites for w/e reason def fall back to url-encoded
19:52 < jtomasrl> bradleymeck: ty
20:13 < jcrew> no
20:18 < KevinSjoberg> I'm trying to use coffee-script with mocha and when I run ./node_modules/.bin/_mocha --compilers coffee:coffee-script it says it can not find the coffee-script module. When I run npm list -g coffee/script it says its installed.
20:18 < KevinSjoberg> Any ideas?
20:19 < KevinSjoberg> I'm sorry if this is not directly related to Node.js itself, but didn't find a channel for mocha itself.
20:19 < TooTallNate> KevinSjoberg: you'd need it to be installed locally, not globally
20:20 < TooTallNate> so that it can be "require"d
20:20 < KevinSjoberg> TooTallNate: Aha, I see. It's not possible to require a globally installed package?
20:20 < TooTallNate> KevinSjoberg: no, you want to install locally when you want to require it
20:21 < TooTallNate> KevinSjoberg: global installation is just for packages that install some executable into your $PATH
20:21 < TooTallNate> i.e. npm install -g npm
20:21 < KevinSjoberg> TooTallNate: I see. That make sense. I'll add it to package.json then.
20:21 < TooTallNate> but you want just `npm install coffee-script`
20:21 < TooTallNate> yup, do that
20:23 < KevinSjoberg> TooTallNate: Now it works fine. Thanks a lot.
20:23 < TooTallNate> np :)
20:25 < jtomasrl> how can i update an array that is 3 levels deep in a json object using mongodb driver?
20:29 < tnorris> jtomasrl: mongodb driver aside, lookup deep copy or deep clone for copying a multi-level array/object.
20:30 < Aric> How do you do something like this in handlebars? {{> {{template}}}}
20:30 < ruff> i think you're missing a few {{}}
20:31 < seldo1> If I have a function that relies on the successful outcome of two independent events, is node-promise still the right way to create a function that doesn't fire until both of them happened?
20:31 < seldo1> (the two independent events == connecting to two different servers)
20:31 < carli2> hi. I wrote a simple module that allows data structure/type validation of random JSON data. I also write README.md and package.json; what should I do next?
20:34 < aho> Aric, you have to register it as partial. then you can include it with {{>foo}}
20:34 < Aric> but the point is i have multiple partials
20:34 < Cheery> I'd like to run a script and then continue in REPL after that. how to do it?
20:34 < Aric> and i want a function to check mongodb and then decide which partial to do
20:35 < context> cheery: require() it ?
20:35 < Aric> aho, so i need something to dynamically choose a template
20:35 < Cheery> context: um I'd like something shorter
20:35 < context> ... shorter ?
20:35 < context> you didnt ask for something short
20:35 < aho> how many partials are there? less than 5? 10? 50?
20:35 < context> you asked how to run a script in the repl
20:36 < Cheery> context: also, if I require it, I can't access all the variables
20:36 < context> cheery: r = require; r()
20:36 < Aric> aho, it's dynamic but i can't suspect it being more than 5
20:36 < TehShrike> lol
20:36 < TehShrike> Cheery: copy/paste it!
20:36 < context> cheery: mod = r(); mod.variables
20:36 < context> properly modularize your code
20:36 < Aric> it's for a dynamic theming system so people should be able to make multiple templates etc
20:36 < Cheery> seems I can start a repl
20:36 < Cheery> anytime I want
20:37 < kramutils> Cheery: http://nodejs.org/api/repl.html 
20:37 < aho> write a helper
20:37 < TehShrike> Cheery: maybe you just want to make a node script to call from the command-line, and then pass in options at the command-line? https://github.com/substack/node-optimist
20:38 < Aric> aho i tried using a helper but couldnt find any help online on how the helper wiuld then output the template
20:39 < Cheery> oh I can also .load
20:40 < Cheery> hm. didn't do so well
20:41 < context> cheery: also: .load file.js
20:41 < wavded> anyone have experience with stud?
20:42 < aho> well, you got all compiled templates in Handlebars.templates... what's missing is the context, but that's explained here: http://handlebarsjs.com/block_helpers.html
20:48 < aandy> hi, i have a "meta" question. i've been reading up on owasp's and after checking their session checklist, i'm left with a question. i'm pro "ssl all the things", and take security very seriously, yet many high profile websites use only https for the login processing request. how is it they handle hijacking?
20:49 < DougReeder> Poorly, I think.
20:49 < aandy> i know ssl generally adds some overhead (and computation), but still
20:50 < niggler> you should use nginx or something in between to handle ssl
20:50 < niggler> ssl termination proxy
20:50 < othiym23> stud!
20:50 < gildean> niggler: or use node there also
20:50 < aandy> sure, and i do, but many sites don't. most allow for https, but it's far from default
20:50 < aandy> e.g. wikipedia, youtube
20:51 < aandy> where session id's are widely readable
20:51 < othiym23> gildean: problem is node's SSL impl doesn't have a shared connection cache and so is gated, performance-wise
20:51 < aandy> and i know facebook handled it somehow after "firesheep" became the craze a couple of years ago
20:51 < othiym23> indutny and others are working on it, but if you have a really loaded chokepoint, you're better going with dedicated SSL / TLS termination
20:52 < wavded> othiym23: i'm guessing you use stud?  do you know have multiple certificates?  I seem to only be able to do one bound to port 443.
20:53 < othiym23> wavded: never had to use it with more than one cert so far
20:54 < niggler> othiym23: what do you use in your stack?
20:54 < aandy> wavded: you could use nginx or haproxy and delegate to backends based on sni
20:54 < wavded> othiym23: ok, yeah i have two different certs, can't find anything on how to do that... am debating at looking a haproxy 1.5 (we already use it but not for ssl)
20:54 < othiym23> aandy: it's safe to assume that in the absence of encryption, any protection against session hijacking is going to be heuristic (i.e. tied to IP address or whatever)
20:54 < aandy> othiym23: okay, thanks :)
20:55 < othiym23> niggler: been a little while, but the last time I did this in anger it was nginx + Express 2
20:55 < wavded> aandy: yeah don't understand SNI, have been trying to cat the two certs together into one .pem file but stud doesn't seem to care about the second one
20:56 < othiym23> we tried using node-proxy because at the time nginx kept b0rking websockets, but we ran into some issues with our cheapassed *.domain.com certs and cert bundles failing to validate on certain browsers
20:57 < othiym23> wavded: according to bumptech/stud, you should be able to provide multiple certificate files to it and then it'll use SNI
20:57 < aandy> wavded: ah, no, i don't know about merging them, i'm not sure you can do that (dunno how stud loads cert(s)). what i meant was that based on the sni (server name indication) i route to the appropriate backend. e.g. if the user goes to https://domain1, i use the backend1, if they go to https://domain2 it goes to backend2. the incoming server binds only on one port
20:57  * DougReeder waves goodbye
20:58 < aandy> http://blog.exceliance.fr/2012/04/13/enhanced-ssl-load-balancing-with-server-name-indication-sni-tls-extension/
20:58 < wavded> aandy: yeah ok, i think that is setup, stud passes to haproxy which delegates it out, maybe i'm just using the command wrong, i'll try again
20:58 < aandy> no, without stud. haproxy has native ssl now
20:59 < wavded> aandy: in development
20:59 < aandy> or you can go with a nginx setup, which easily lets you route through https
20:59 < wavded> aandy: will go to that eventually, just not sure if i want to put it on my production stack yet :)
20:59 < nlf> i thought nginx still didn't work with websockets
20:59 < wavded> aandy: yeah but websockets
20:59 < aandy> wavded: noted :) i'm forced to use it in production right now, but i see your point
21:00 < aandy> exactly. well, that and omitting response buffering and such
21:00 < othiym23> nlf: I'm pretty sure that recent versions of nginx handle ws OK
21:00 < Aric> What is the handlebars room?
21:00 < wavded> othiym23: i heard 1.4, not sure if that is out, but know they are working on it
21:00 < aandy> allowed me to set up a neat setup for a combined python, node (and websockets) stack with and without ssl
21:01 < aandy> really, nginx support 1.1 now?
21:01 < nlf> in 1.3 it does
21:02 < nlf> 1.2 supports http 1.1 but not websockets
21:03 < `3rdEden> nlf: point me change log section where they state that they fixed it
21:03 < `3rdEden> because it's not there
21:03 < nlf> http://trac.nginx.org/nginx/roadmap
21:03 < `3rdEden> roadmap != changelog
21:03 < nlf> 1.3.x planned features and improvements
21:04 < nlf> 7. Websockets
21:04 < `3rdEden> a.k.a. it's not out yet
21:04 < nlf> right, it might not be done, but that's where they're planning on it
21:05 < `3rdEden> ok, thought so.. kept hearing this ghost stories that it was fixed in 1.3 ._.
21:05 < `3rdEden> and I was starting to wonder if I messed something up, because all my tests still fail against 1.3
21:07 < aandy> well, even if nginx gets websockets support, that was not the only feature that made me use another proxy
21:07 < aandy> and i will still use nginx for static files anyway. a stack is never just one piece of software :p
21:07 < othiym23> OK, I will defer to `3rdEden on this, because he knows waaaaaaaaay more than I do when it comes to what chowderizes websockets ;)
21:08 < othiym23> aandy: I do know of some sites using dev versions of haproxy for exactly the criteria you were mentioning, so people are doing it in production
21:08 < rauchg> check out `3rdEden's realtimeconf presentation on websocket
21:09 < rauchg> `3rdEden i actually found out a new very weird bug with websocket and cross-domain origins affecting chrome/safari/ff
21:09 < rauchg> will document later
21:09 < `3rdEden> rauchg: awesome
21:09 < `3rdEden> less awesome that they exist, still awesome that we find those :p
21:09 < seldo1> Anybody experienced in socket.io here?
21:09 < aandy> i wasn't arguing for or against it, i was just saying it works great for what i need on this app, and the fact that i can put ssl on top of it without going through stud, nginx or similar only sweetens the deal. haven't used a stable version of haproxy, it's that new, so can't really benchmark yet. but compared to the nginx https response on comparable pages it's fine
21:10 < othiym23> seldo1: you might say that rauchg has some experience with socket.io
21:10 <@mbalho> seldo1: or `3rdEden 
21:10 < aandy> should be interesting to do though
21:10 < rauchg> seldo1 hates orms
21:10 < tnorris> seldo1: have you tried #socket.io?
21:11 < seldo1> tnorris: I hadn't realized there would be a dedicated channel, I have been using node a total of 24 hours :-p Thanks!
21:11 < rauchg> [1] reference to some article written by a seldo
21:11 < seldo1> rauchg: my reputation precedes me, apparently
21:11 < `3rdEden> rauchg has spies everywhere
21:12 < tnorris> seldo1: heh, neither did I until you asked. usually I just put a hash in front of the name, and it probably exists on freenode.
21:12 < nlf> he has the internet indexed in his brain
21:12 < wavded> aandy: othiym23 turns out i just needed a space between the cert files for stud and it works :)
21:12 < wavded> hurrah for no docs :)
21:13 < aandy> hehe, nice
21:13 < tnorris> is there anyone assigned to maintaining the pull requests/issues? there are a lot of old ones that aren't applicable anymore.
21:13 < draginx> is there a SIMPLE_OPTIMIZATION equivalent for uglifyjs2?
21:19 < chovy> niftylettuce: hey, you there?
21:20 < LouisT> hola
21:21 < chovy> LouisT: howdy
21:25 < TehShrike> Can anyone recommend a good uuid-generating module?
21:26 < LouisT> TehShrike: which version?
21:26 < TehShrike> I'm not educated enough on the subject to care
21:26 < TehShrike> node-uuid seems fairly widely used
21:27 < LouisT> i just use this for v4: function UUID () { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); }); };
21:27 < TehShrike> I'm looking to use it for session IDs
21:27 < TehShrike> Not sure what the best UUID method is for that
21:28 < LouisT> TehShrike: i've not had issues with the one i just posted
21:28 < TehShrike> I suppose for session ids I should use 3 or 5, or perhaps 4?
21:29 < LouisT> i REALLY REALLY doubt it would ever generate the same ID twice for as long as your sessions would be active..
21:29 < TehShrike> LouisT: is that snipped there a v4 implementation then?
21:29 < LouisT> yes
21:29 < LouisT> 1/02:28:15 ~<Louis> !jse GenID();
21:29 < LouisT> 1/02:28:16 ~<FailBot> 3f72adc1-3fb9-4322-aaab-ab94ee5fe3e7
21:29 < LouisT> what it looks like
21:29 < niggler> othiym23: you still here?
21:30 < TehShrike> Well, assuming Math.random() isn't broken somehow, that seems pretty reasonable to me.  Thanks for the snippet LouisT
21:30 < LouisT> i have it as "GenID" because i plan(ed) to add multiple versions
21:33 < taterbase> What happened to ryah?
21:39 < nickmessing> Hello, what type of hosting is better for big node.js app - Cloud (like heroku) or dedicated servers?
21:40 < LouisT> nickmessing: it all depends on what the app would do and how many users would access it really..
21:40 < LouisT> i prefer dedicated/private just because it gives me more access to everything really
21:40 < LouisT> but then you have to setup EVERYTHING on your own
21:41 < nickmessing> If I can setup it, and it will use WebSockets with more then 5000 connections, what should I choose?
21:41 < gildean> tho setting up a nodejs server is relatively easy, usually just install nodejs, npm and redis
21:41 < gildean> maybe some db's
21:42 < yitsushi> i think you need to calculate first how many servers do you need if you want as private
21:43 < yitsushi> 5000+ concurent connections is too huge (i think) for one server
21:43 < yitsushi> and for backend database
21:43 < yitsushi> so you need load balancers, app servers, db servert for instance
21:44 < yitsushi> if you calculate it then compare with heroku and nodejitsu.
21:46 < yitsushi> nodejitsu : $0.0042 / HOUR / drone => 0.0042*24*30*5000 => 15120 + database  or dedicated: $0.033 / HOUR => 118800
21:47 < yitsushi> it's just an example :) with a very big drone number
21:47 < yitsushi> so I think you need to calculate the cost first
21:58 < niggler> yitsushi: can you go over those components
21:58 < niggler> e.g. what is the recommended load balancer
21:58 < niggler> how does haproxy compare to nginx
21:59 -!- isaacs changed the topic of #Node.js to: Node.js: Float like a hurricane, sting like a hurricane
22:00 <@Nexxy> lol
22:00 < yawnt> lol
22:00 < yawnt> HEY NEXXY
22:00  * yawnt pokes Nexxy 
22:01 < deoxxa[cookies]> https://github.com/deoxxa/jsmc/blob/master/lib/chunk.js hooray binary data
22:01 <@Nexxy> yawnt, hai
22:01 < yawnt> hey deoxxa[cookies] 
22:01 < deoxxa[cookies]> herro
22:01 < yawnt> yes, i'm a hero
22:01 < yawnt> deoxxa[cookies]: i watched elfen lied
22:01 < deoxxa[cookies]> no, not the craw, the craw!
22:01 < yawnt> 2 days of full immersion
22:01 < deoxxa[cookies]> lol
22:01 < yawnt> i was about to cry
22:02 < yawnt> like i never do for movies or such, but NYUUUU :'(
22:02 < niggler> deoxxa[cookies]: where are my cookies
22:02 < yawnt> NYU ;_;//
22:02 < deoxxa[cookies]> niggler: die!
22:02 < deoxxa[cookies]> mine
22:02 < AAA_awright> Who stole the cookies from the cookie jar?
22:02 < mscdex> gotta love these pages that have benchmarks where the graphs don't use the same scale
22:02 < deoxxa[cookies]> yawnt: lolll you need to watch sola
22:02 < niggler> nom nom nom nom nom
22:02 < yawnt> deoxxa[cookies]: what's at?
22:03 < yawnt> - - - - = = ==~( ;_;)/·/
22:03 < niggler> who else is enjoying this perfectly unpleasant weather?
22:03 < yawnt> ^ this is me holding deoxxa[cookies] 's cookies flying away 
22:04 < yawnt> niggler: DON'T TALK WHILE I'M ASCII-ART-ING
22:04 < niggler> yawnt: why not unicode art?
22:04 < yawnt> wat
22:04 < yawnt> is it broken?
22:04 < niggler> get some unicode up in here
22:05 < niggler> ☃
22:05 < tnorris> ✓
22:05 < niggler> ▧
22:05 < yawnt> :(
22:05 < niggler> ▩
22:05 < niggler> holy fuck thats awesome
22:05 < yawnt> i wonder if that's because i'm it_IT.utf8
22:06 < yawnt> and this machine is en_US.utf8
22:06 < niggler> ▦
22:06 < niggler> http://en.wikipedia.org/wiki/Unicode_Geometric_Shapes
22:06 < yawnt> anyway
22:06 < yawnt> i'm out
22:06 < yawnt> BB
22:06 < tnorris> 😁
22:06 < fannarsh> isaacs: One question, in NodeUp 32, do you remember now which module could replace cluster-master in npm-www?
22:07 < gildean> ✈
22:07 <@isaacs> fannarsh: dunno
22:08 <@isaacs> fannarsh: i dont' know of anything that does what it does, exactly
22:08 < niggler> ✈🌇
22:09 < fannarsh> isaacs: ok, I'm quite satisfied with cluster-master, although always on the lookout for alternatives
22:10 < tnorris> ᴎᴑᴅᴇ
22:12 < Cheery> it seems my buffers whack up if I'll give them something else than UByte
22:12 < Cheery> or is it Uint8? 
22:13 < CoverSlide> Cheery: read the docs
22:14 < Cheery> CoverSlide: docs in where?
22:15 < CoverSlide> nevermind, misunderstood your question
22:15 < deoxxa[cookies]> Cheery: what's happening?
22:16 < Cheery> gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
22:16 < tnorris> Cheery: did you still want to use the typed arrays in your c++ addon, or are buffers working for you?
22:16 < Cheery> I'm doing that through my bindings
22:16 < deoxxa[cookies]> ah
22:16  * deoxxa[cookies] not sure :<
22:17  * deoxxa[cookies] also late for work :<
22:17 < Cheery> https://github.com/cheery/node-video/blob/master/src/webgl/renderer.cc#L475
22:17 < Cheery> and that's how I've implemented it
22:18 < tnorris> CoverSlide: maybe you can help. I think Cheery would do well using the native v8 typed arrays, but I'm not sure how to access those in a c++ addon.
22:20 -!- isaacs changed the topic of #Node.js to: ᴎᴑᴅᴇȷʂ - Unicode like a hurricane, sting like a ☃
22:20 < Lorentz> i swear on my terminal that looks like a water flea
22:20 < tnorris> oooh yeah. unicode ftw.
22:23 < CoverSlide> yeah i'm not the one to ask about C++ addons
22:24 < tnorris> Cheery: bnoordhuis is probably your best bet, but no idea when he's on.
22:24 < Aric> whats the handlebars.js channel?
22:26 < niggler> 🌵
22:26 < Cheery> tnorris: apparently I can get ExternalArrayType, but not sure how to get equivalent of sizeof
22:26 < niggler> ⛮
22:26 < ProLoser|Work> http://hastebin.com/caleqeyebi.hs
22:26 < ProLoser|Work> i can't figure out what's wrong with this npm install
22:29 < d4rklit3> well hellloooo
22:29 < jwm> hello
22:33 < d4rklit3> what is the best way to set node env vars?
22:33 < d4rklit3> is there a file it will read?
22:33 < d4rklit3> .env ? or something ?
22:34 < tnorris> Cheery: you're trying to get the size (length) of the incoming buffer?
22:35 <@Nexxy> d4rklit3, set them from the command line?
22:35 < d4rklit3> how do i do this?
22:35 < d4rklit3> on windows
22:35 < d4rklit3> will they persist?
22:35 <@Nexxy> I have no clue
22:37 < d4rklit3> is there aw ay to get into node shell
22:37 < chrisdotcode_> d4rklit3: open up a terminal and type node?
22:38 < d4rklit3> lol duh
22:39 < FunnyLookinHat> d4rklit3, pew pew
22:40 < d4rklit3> still not sure how to set that up tho
22:42 < othiym23> d4rklit3: are you talking about reading the environment variables from process.env?
22:42 < othiym23> environment variables are just environment variables to node
22:43 < othiym23> you set them the same way you would for anything else
22:43 < Cheery> tnorris: yep
22:43 < Cheery> it's quite clear isn't it?
22:44 < othiym23> d4rklit3: also, if you're using PowerShell on vista+, you can persist your environment variables the same way you'd persist changes to e.g. your path
22:45 < othiym23> don't ask me how, though, because PowerShell confuses the shit out of me
22:45 < othiym23> RTFM there
22:46 < MI6> joyent/libuv: Leonard Hecker master * b8706f3 : darwin: make it possible to compile for iOS  Relocate the include of Targ - http://git.io/q5JDrw
22:47 < MI6> joyent/libuv: Leonard Hecker master * 97c527a : darwin: make it possible to compile for iOS  Relocate the include of Targ - http://git.io/IknWfA
22:48 < nlf> hm. maybe you guys have a suggestion here. i'm making requests over a raw network socket via functions in my library, however i need to make sure that i wait for a full reply (could be one data event, could be several) for each request before i send another
22:48 < nlf> currently i'm sending the data to async.queue, which adds an event listener, and removes it when the response is fully recorded
22:49 < nlf> but i kind of feel like that's really slow
22:50 < nlf> i'm not really sure how else to go about it
23:01 < tnorris> bnoordhuis: on 4210, by "all interfaces addresses" you don't mean that "0.0.0.0" will also allow for connections from ipv6, do you?
23:01 < bnoordhuis> tnorris: no, but :: does
23:02 < bnoordhuis> provided your system is dual-stack enabled
23:02 < tnorris> bnoordhuis: yeah, I realized that on accident. It's not documented in the API, and for n00bs in network interfaces like me it isn't apparent.
23:03 < tnorris> I figured it out by typing "::" instead of "::1". think it should be mentioned in the API, or possibly defaulting in someway to "::" if dual-stack is enabled?
23:03 < bnoordhuis> tnorris: right. the docs assume some familiarity with networking
23:03 < bnoordhuis> tnorris: ::1 is the ipv6 localhost address
23:04 < ruff> it would be more accurate to say it's the ipv6 127.0.0.1
23:05 < bnoordhuis> ruff: isn't that what i said?
23:05 < ruff> 'localhost' can be understood to be a route, as well
23:06 < niggler> bnoordhuis: the constant should be exposed
23:07 < bnoordhuis> niggler: i disagree (as evidenced)
23:08 < bnoordhuis> niggler: if you could do `ping INADDR_ANY` i'd agree but that's not the case, is it?
23:12 < niggler> bnoordhuis: if you are coming from a networking background
23:12 < niggler> you learn to use those
23:12 < niggler> INADDR_ANY and IN6ADDR_ANY
23:12 < niggler> netinet/in.h it usually explicitly states to use it
23:16 < niggler> bnoordhuis: run $ man ipv6 | grep in6addr
23:16 < niggler>        To bind an AF_INET6 socket to any process, the local address should be copied from the in6addr_any variable which has  in6_addr  type.   In
23:16 < niggler>        The IPv6 loopback address (::1) is available in the global in6addr_loopback variable.  For initializations, IN6ADDR_LOOPBACK_INIT should be
23:17 < bnoordhuis> niggler: your name is well chosen :)
23:17 < bnoordhuis> but... this is the Voice of Authority and it's saying "no"
23:17 < niggler> the manpage says to use it
23:18 < niggler> so take back your earlier statement regarding networking experience
23:18 < mrmuchwin> heyyy noordhuis hoe is het weer daar?
23:18 < niggler> because networking experience tells you to use INADDR_ANY or IN6ADDR_ANY :)
23:18 < bnoordhuis> niggler: iff you're a c programmer
23:18 < niggler> you get one of two choices: either add it to node, and fallback on experience, OR explicitly spell it out
23:19 < bnoordhuis> niggler: i also get a third option: do nothing and call it a day :)
23:19 < bnoordhuis> mrmuchwin: have we met?
23:20 < niggler> " There is no platform that we support where 0.0.0.0 and :: are not the "all interfaces" addresses."
23:20 < niggler> that's another fair answer -- just restrict its usefulness
23:21 < mrmuchwin> bnoordhuis: yes at c9, drinking beer with jan
23:21 < bnoordhuis> mrmuchwin: oh right. hello then :)
23:32 < tnorris> bnoordhuis: would you mind if we just included that "::" can be used, and will accept connections from both ipv4/6, in the net docs?
23:32 < tnorris> possibly save people like me who come from a web ux background into node.
23:36 < bnoordhuis> tnorris: in principle i mind because a) it's not specific to node, and b) you run the risk of information overload (if you add too many secondary things)
23:36 < bnoordhuis> but submit a PR and we'll take it from there
23:36 < tnorris> bnoordhuis: will do, and thanks much.
23:38 < MI6> joyent/node: isaacs streams2 * b90f5b0 : crypto: Streaming interface for cipher/decipher/iv (+39 more commits) - http://git.io/CHdfqw
23:39 < tnorris> bnoordhuis: one last q. for PR, does the node team prefer the commits against HEAD or latest-stable?
23:42 < TooTallNate> tnorris: in this case, probably v0.8 branch is fine
23:42 < TehShrike> Which is the more common pattern when creating objects that are event emitters? http://hastebin.com/fefaceqipi.js
23:42 < tnorris> TooTallNate: sounds good. thanks.
23:43 < mscdex> i wish the requirements for building addons was made more prominent somewhere
23:43 < TehShrike> Whoops, missed a set of parens.  Oh well.
23:43 < TooTallNate> mscdex: like where?
23:43 < mscdex> i dunno
23:43 < TooTallNate> i'm open to suggestions, but the README is about as obvious as it gets
23:44 < mscdex> but i had someone with a windows compilation problem and they were under the impression it was a requirement of my addon to have 2008-2010
23:44 < mscdex> etc
23:44 < TehShrike> Which is the more common pattern when creating objects that are event emitters? http://hastebin.com/cosusapevu.js
23:44 < TooTallNate> mscdex: believe me, windows users not having the right shit installed is by far my highest bug report
23:45 < TehShrike> I got the right version of Python on my Windows box, but I still run into issues with lots of modules
23:45 < mscdex> yeah, but i just wish there was maybe something in the node docs in the addon section maybe or on nodejs.org somewhere
23:45 < tnorris> mscdex: isn't there an addon page in the api's?
23:45 < TooTallNate> TehShrike: i'd go the constructor method, but using "this" instead of returning "self"
23:45 < TooTallNate> tnorris: threre is
23:45 < TehShrike> TooTallNate: this = new EventEmitter() ?
23:45 < mscdex> it'd be nice to even list what gcc versions work the best/at all
23:45 < TooTallNate> TehShrike: no, EventEmitter.call(this)
23:45 < TooTallNate> TehShrike: but don't forget util.inherits()
23:46 < TehShrike> TooTallNate: oh, huh, I didn't know you could use call like that inside of constructors
23:46 < tnorris> TooTallNate: so, what about a section after addon patters. it could be a massive faq for all your windows bugs. ;-)
23:46 < tnorris>  /patters/patterns/
23:47 < TooTallNate> tnorris: sure, we can list the dependencies there too, i'm not too confident of a difference it'll make :p
23:47 < mscdex> the problem is i don't know how many people would be reading the node addon docs before using npm to install addons
23:47  * mscdex shakes a fist at the sky
23:47 < TooTallNate> mscdex: exactly… most people just install the node.msi, then `npm install jsdom` and shit blows up
23:47 < TehShrike> mscdex: ...I'd read them :-x I want all those modules to work for me under Windows, too
23:48 < TehShrike> Plus if I wrote libraries that depended on those other libraries, I could link to the addon docs for any Windows users
23:48 < TooTallNate> TehShrike: that's basically how all the core classes do it
23:48 < TooTallNate> TehShrike: r.e. EventEmitter
23:48 < mscdex> TooTallNate: can we display some message somehow about requirements if stuff blows up?
23:48 < tnorris> mscdex: ah, I thought you were talking about developers trying to implement a c/c++ addon. didn't realize it was just "npm don't work" bugs...
23:48 < TehShrike> TooTallNate: awesome, thanks for the knowledge.
23:48 < mscdex> even if it's not related to the problem? that way they can at least see it
23:49 < TooTallNate> tnorris: well the solution there is to have prebuilt binaries, but that's still a day-dream
23:49 < TehShrike> Is there an easy way to have one emitter reflect certain events from another object?
23:49 < TooTallNate> mscdex: yes, I think that might be possible
23:49 < TooTallNate> TehShrike: you mean like proxy events?
23:49 < TehShrike> Yeah
23:49 < TooTallNate> TehShrike: not really unfortunately, short of overwriting the "emit" function of emitter A
23:49 < tnorris> TooTallNate: whoa, yeah. good luck to whoever takes on that task.
23:50 < TehShrike> Welp, I imagine I can live with that
23:50 < Cheery> hahaa!
23:51 < Cheery> I've got half of a working webgl implementation now :) for raspberry pi
23:51 < TooTallNate> mscdex: this guy says he was gonna do it https://github.com/TooTallNate/node-gyp/pull/149#issuecomment-9709260
23:51 < TooTallNate> Cheery: sweet!
23:51 < RushPL> hi guys, am I right that child_process.spawn actually is blocking? I get a valid PID just after the call so I assume my program spent time starting the other process.
23:52 < bradleymeck> mikeal: thoughts on https://github.com/isaacs/readable-stream/issues/30 ?
23:52 < mscdex> TooTallNate: i think we need something more general than that though, what he was talking about was if SDKs specifically were not found
23:52 < bnoordhuis> RushPL: that's correct, blocking up to the execve() syscall
23:52 < bradleymeck> RushPL: it takes time to spawn, but the process itself may not be done initializing
23:53 < TooTallNate> mscdex: it's better than nothing, but i suppose the same warning would be nice for OS X users who don't have their dev tools installed either
23:53 < tnorris> Cheery: nice job. glad you were able to figure out those buffers.
23:53 < mscdex> maybe the wording in the npm stdout output should be modified too.... right now it blames the module for errors
23:54 < mscdex> there should probably be a blurb appended to that statement? i dunno
23:55 < RushPL> bradleymeck: that sucks a little bit if I am going to start new processes per request in my http server... any way to do it asynchronously?
23:56 < Cheery> https://github.com/cheery/node-video/blob/master/tutorial/tutorial-1.js
23:56 < Cheery> tnorris: look at that :)
23:56 < Cheery> the gl code there is almost 1:1 to the webgl code.
23:57 < bradleymeck> RushPL: for most part you dont need it to be async, not entirely sure what you are trying to do, just use stdio like normal
23:57 < Cheery> it's possible I can push it to 1:1 most likely.
23:58 < Cheery> anyway
23:58 < Cheery> a webgl demo without all the DOM
23:58 < Cheery> ^^
23:58 < RushPL> bradleymeck: I mean if am doing a chain of comamnds and pipelining their results quite often I need to start several programs in a non blocking way. Maybe the execve is very quick so maybe it is not an issue ... 
23:58 < RushPL> but suppose the system needs to load the said programs from the disk, than the whole app will get locked.
23:58 < bradleymeck> RushPL: from the parent process its very fast
23:59 < tnorris> Cheery: that is sick. I'll have to try that later. (hopefully before I pick up AC III at midnight tonight)
23:59 < RushPL> if they are already in memory
23:59 < Cheery> tnorris: it's bit complex to compile and use at the moment.
23:59 < Cheery> tnorris: basicly you need to run node-waf configure build in display/ and .
--- Log closed Tue Oct 30 00:00:12 2012
