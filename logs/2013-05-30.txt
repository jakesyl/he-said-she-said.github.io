--- Log opened Thu May 30 00:00:31 2013
00:01 < levilewis> yeah, I suppose that is the only option if I want to handle it with a single route
00:01 < ningu> levilewis: what's the objection to handling it via multiple routes?
00:01 < ningu> you could reuse almost all of the code
00:02 < levilewis> I don't have one really. In fact, it kinda makes more since - logically - an RSVP belongs to an event => /events/:id/rsvps
00:04 < levilewis> ningu, thanks.
00:09 < merpnderp> Are these promises, or just calling functions on the returned objects? https://github.com/visionmedia/superagent/blob/master/test/node/json.js#L32-L35
00:10 < ningu> not promises according to the promise spec
00:10 < ningu> just a normal js chaining pattern
00:10 < ningu> merpnderp: you should watch crockford's monads and gonads talk :)
00:11 < merpnderp> ningu: 50 minutes..hah, why not. Thanks
00:12 < merpnderp> Is there a TL;DW? :P
00:12 < ningu> I guess "we've been doing monads for a long time in JS and didn't even know it"
00:12 < merpnderp> hah
00:14 < ningu> but he also goes into chaining, promises, etc. in a fair amount of detail
00:19 < Nijiko> uhm anyone around?
00:19 < ningu> no
00:19  * _6a68 hides
00:20 < Nijiko> https://gist.github.com/Nijikokun/5674942
00:20 < Nijiko> url parsing is giving me undefineds inside of my strings..
00:21 < Nijiko> i could be derping on this though..
00:21 < ningu> both input and output to help you we need
00:21 < Nijiko> mostly likely derping on this hold on
00:21 < Nijiko> probably went what way too early
00:22 < Nijiko> yes I did
00:23 < merpnderp> ningu: 10 minutes in and it is really good. Thanks :)
00:23 < ningu> :)
00:30 < elliottcable> ♪ Future Blind
00:30  * elliottcable slaps purr
00:30 < elliottcable> -purr
00:31 < purr> elliottcable is listening to “Future Blind”, by Pretty Lights
00:31 < purr> (<http://tinysong.com/sH9Q>)
00:31  * purr 
00:31 < elliottcable> ah.
00:31 < elliottcable> Laggy little bastard.
00:31 < elliottcable> Fuckin' love Pretty Lights.
00:33 < _6a68> udp fanout daemon? any suggestions? looking at npm, not coming up with much.
00:40 <@mbalho> _6a68: that would be like 6 lines of code
00:41 < elliottcable> 6. that's rather specific.
00:41 < _6a68> ...
00:41 < elliottcable> did you write it in your head, or just pull that number out randomly? ;)
00:41 <@mbalho> in my head
00:41 < ningu> what is a udp fanout daemon?
00:41 < _6a68> ningu: I have UDP packets coming from syslog, and I want them to go to two (or more) places
00:42 < _6a68> but! I might want to make the proxy invisible by spoofing the sender
00:42 < _6a68> also, I might want to dynamically add/remove endpoints, say if we're on AWS and hosts are going up and down on both sides
00:42 < _6a68> I can live without persistence—it's UDP after all, you're supposed to be able to drop packets
00:43 < _6a68> ningu: one heavyweight way to do this is to use a queue like rabbitMQ
00:43 < ningu> well it does sound like something node would be good at, but it isn't the sort of thing I've ever done
00:44 < _6a68> ningu: what I want is something lightweight but well-tested, that I can put on a couple of nodes behind a load balancer
00:44 < _6a68> ningu: yeah, this is interesting stuff, I recommend poking at it a bit sometime :-)
00:44 < Sly> Nexxy: <3
00:45  * Sly waits 3 days for response. :3
00:45 < _6a68> ningu: I work at mozilla, we're moving persona.org to AWS, and the services guys built a logstash-like thing called heka, but it's pretty alpha.
00:46 < _6a68> ideally I can send data to both statsd/logstash and heka, so that we can help them find bugs, but also have reliable graphs when we relaly really need them (is this cluster getting traffic?)
00:46 < ningu> _6a68: well, I would probably just write the 6-line version and see how it works
00:46 < ningu> and then add the features you were talking about
00:47 < _6a68> ningu: yeah, this is going straight into production, so me goofing around probably isn't the best approach :-)
00:47 < ningu> I see
00:47 < _6a68> ningu: just thought somebody might have an idea, maybe someone will drop something in channel later on
00:47 < ningu> well then use an off the shelf solution, node or otherwise
00:47 < _6a68> I'll probably use a real queue or maybe samplicator.
00:47 < _6a68> yeah
00:47 < xanadu> i'm using Express and noticed that POSTs with file data will auto write to disk - how can i override that behavior so i can stream/buffer it forward?
00:47 < _6a68> everything else we do is node, would be great to avoid adding lots of other stuff to the monitoring stack. /me shrugs
00:48 < ningu> xanadu: someone here (mscdex?) wrote something like that
00:48 < xanadu> i know my question is more Express-ish, but that channel seems to do be pretty quiet
00:48 < ningu> xanadu: basically you want to do something instead of bodyParser, or just do it before bodyParser
00:49 < ningu> xanadu: I would look at the bodyParser code to get some ideas
00:49 <@mbalho> _6a68: most stuff on npm can be described as people 'goofing around' :D see also http://nodejs.org/api/dgram.html#dgram_socket_bind_port_address_callback
00:49  * _6a68 nods
00:50 < gildean> the only thing i've goofed off with udp was this, but it's not really what you're after: https://github.com/gildean/node-udp-proxy
00:50 < xanadu> ningu: @mbalho and mscdex actually helped me with some of my questions earlier today - they might be worn out of hearing my stupidity - i wouldn't blame them
00:51 < xanadu> :)
00:51 <@mbalho> xanadu: i dont use express, sorry
00:51 < _6a68> gildean: saw that via npm search :-) thanks though
00:52 < _6a68> ah well. thanks anyway, y'all
00:53 < gildean> _6a68: it wouldn't be a big change to make that fan out the connections tho'
00:54 < xanadu> ningu: so to override the default fs.write behavior of file POSTs, i should look up stuff about how the bodyparser works probably?
00:54 < ningu> xanadu: don't look it up, just read the code
00:54 < xanadu> ningu: yes, master Yoda. :)
00:54 < elliottcable> <3 ningu
00:57 < ningu> xanadu: https://github.com/senchalabs/connect/blob/master/lib/middleware/multipart.js
00:59 < meltz> bnoordhuis: hey
01:00 < meltz> I have a question about node internals
01:00 < ningu> I guess the real code is in formidable
01:00 < ningu> and mscdex iirc wrote a version of formidable that doesn't touch the file system
01:01 < meltz> ok so, I'm using a node TCP server and using that as a proxy to a node http server
01:01 < bnoordhuis> meltz: it's 3 am here, i was about to sign off for the night
01:02 < meltz> bnoordhuis: ahh ok, no problem then :)
01:02 < xanadu> ningu: do you know where that code is?
01:03 < ningu> nope, sorry
01:03 < ChrisPartridge> xanadu: https://github.com/felixge/node-formidable
01:03 < ningu> I think he meant the version mscdex wrote
01:03 < ChrisPartridge> maybe replace felixge with mscdex
01:03 < ChrisPartridge> and pray
01:04 < ningu> https://github.com/mscdex/busboy
01:05 < meltz> ok so, I'm using a node TCP server and using that as a proxy to a node http server
01:05 < jesusabdullah> ChrisPartridge: Captain I think I can get warp engines back online if we reroute from felixge to mscdex!
01:05 < jesusabdullah> ChrisPartridge: "HOW LONG" "Gimme about 20 seconds" "WE DONT HAVE 20 SECONDS"
01:05 < meltz> but I need one of the http headers in  the TCP server
01:05 < meltz> so I parse the headers on the HTTP request
01:05 < ChrisPartridge> jesusabdullah: lol!
01:05 < meltz> I mean on the data event
01:06 < jesusabdullah> "NOW LAFORGE!!!"
01:06 < meltz> and once I have what I need, I send the handle via IPC (this is node clustering) to the worker process
01:06 < meltz> I then emit the connection event
01:06 < chilts> _6a68: any ideas from here that might work? http://stackoverflow.com/questions/14130560/nodejs-udp-multicast-how-to
01:07 < meltz> but I also need to give the HTTP header data that I read to the http server
01:07 < meltz> so I need to know how to do this
01:07 < meltz> I tried emitting the data event with the data
01:07 < meltz> but that didn't seemto work
01:07 < jaCen915> Hi everyone, crazy question, but is it possible to use a socket to the extent that an event emitted on one page (page A) will trigger the matching "on" for another (page B) 
01:07 < jaCen915> page cool
01:08 < NotMyself> damn it why cant i tell fs.rmdir to recurse… >:(
01:08  * chilts finds it funny when random people he's met in different places all chat to each other : _6a68, ningu, mbalho  :)
01:08 < ningu> chilts: hehe
01:08 < ningu> I figured you must know _6a68 
01:09 < chilts> we met on a vidyo (like Skype) session :)
01:09 < chilts> or hangouts
01:09 < ningu> I'm kind of curious why persona is moving to AWS rather than someone else
01:09 < ningu> I guess AWS is the cheapest
01:09 < ningu> I don't have a good sense for how you'd choose between different cloud providers
01:10 < Aria> NotMyself: use rimraf
01:10 < chilts> also, been used for a while : e.g. https://github.com/mozilla/awsbox
01:10 < chilts> I don't know the entire decisions :)
01:10 < ChrisPartridge> meltz: why not run a standard http server up front? why tcp? 
01:10 < Aria> ningu: For node, I'd go Joyent. For almost anything, I'd go Joyent. The tooling around AWS is pretty large, though. And if you engineer around their constraints, it's a super stable platform.
01:11 < ChrisPartridge> and dtrace rocks, too
01:11 < Aria> ningu: It's not a regular VPS, though --  you really have to assume that nodes can die without warning.
01:11 < Aria> dtrace so rocks.
01:11 < ningu> Aria: can you get a server from joyent for the same price as AWS micro?
01:11 < Aria> $5/mo
01:11 < ningu> EC2 I mean, obviously.
01:11 < Aria> Joyent just adjusted their prices.
01:11 < ningu> EC2 micro is surprisingly useful despite its low-end specs
01:12 < Aria> I've heard Joyent outperforms EC2 almost completely.
01:12 < elliottcable> Not surprisingly.
01:12 < ningu> that sounds plausible
01:12 < elliottcable> I just wish it wasn't so hard to apply for a FOSS drone.
01:12 < ningu> but joyent and amazon are not the only two players
01:13 < elliottcable> I have to manually apply? Why can't I just provide some script with a link to a GitHub project, get a free drone immediately to begin developing on, and have them verify it later?
01:13 < NotMyself> Aria: thanks
01:13 < elliottcable> can't imagine that would cost them very much more; and it'd make for much more rapid-prototyping and rapid-adoption of their platform
01:13 < ChrisPartridge> elliottcable: probably because it would be open to abuse, and it's the internet, so it would be abused
01:13 < Aria> Yeah, really, elliottcable. 
01:14  * ChrisPartridge wants joyent in AU
01:14 < ChrisPartridge> would blow the competition away, i mean, we only just got AWS
01:14 < elliottcable> wait a sec.
01:14 < elliottcable> I was confusing Joyent with nodejitsu.
01:14 < elliottcable> >,<
01:14 < Aria> Hehe.
01:14 < elliottcable> Never used either. Didn't realize nodejitsu wasn't a Joyent project.
01:15 < Aria> Joyent micro is $0.008/hour.
01:15 < Aria> Yeah, nodejitsu is the other end of the country.
01:15 < ChrisPartridge> elliottcable: they use joyent, and telefonica (who use joyent tech)
01:15 < Aria> Also awesome, but they're the heroku of Node, rather than the AWS of awesome.
01:15 < ningu> ec2 micro is $0.02/hour
01:15 < ningu> well, depends on the region
01:15 < chilts> ChrisPartridge: I think Rackspace is also opening up in AUS soon
01:16 < Aria> Like I said, Joyent just changed their prices ;-)
01:16 < ChrisPartridge> chilts: Yeah, i heard that also - just a shame our local companies are so far behind the ball
01:16 < elliottcable> nodejitsu == Heroku,
01:16 < elliottcable> Joyent == AWS?
01:16 < Aria> Yeah. More or less.
01:16 < elliottcable> do you have more-or-less complete control over the VMs on Joyent? I didn't realize that.
01:16 < Aria> Joyent is all SmartOS as hypervisors, KVM as the underlying virtualization playform.
01:16 < Aria> Yeah, total control. More than AWS, even.
01:16 < ChrisPartridge> chilts: e.g. we have clients who will not put data on servers owned by US companies
01:17 < Aria> Their SmartOS zones are actually containers, not full VMs -- very efficient.
01:17 < Aria> Their Linux machines are KVM vms.
01:17 < chilts> ChrisPartridge: fair enough :)
01:17 < elliottcable> what's with this compute-pricing vs image-pricing
01:17 < elliottcable> compute-pricing is for a completely unprovisioned VM, and image-pricing for various services that are pre-built? looks like?
01:17 < ChrisPartridge> yup
01:17 < elliottcable> Man, this could be a lot more clear. C'mmon, guys.
01:18 < Aria> Yeah. Give 'em feedback. They're responsive on Twitter.
01:18 < ChrisPartridge> the old layout was clearer, imo
01:18 < ningu> elliottcable: I was just being confused by that too.
01:18 < Aria> Agreed.
01:19 < elliottcable> can't be arsed.
01:19 < elliottcable> but nodejitsu looks interesting.
01:19 < Aria> Yeah, they're both neat.
01:23 < yanush> hi folks, really love to get a second / third eye on this code if anyone can spare a moment to take a gander :)  https://github.com/yanush/cluster-file-writer 
01:28 < meltz> does anyone here have any familiarity with the node internals??
01:30 < elliottcable> -topic @ meltz
01:30 < purr> meltz: node may be useful to you for programming computers - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
01:30 < elliottcable> er, crap
01:30 < elliottcable> the topic changed.
01:30 < elliottcable> Well, it used to say “don't ask to ask.”
01:30 < meltz> oh lol
01:30 < meltz> ok so
01:30 < meltz> I'm proxying a node TCP server
01:31 < meltz> I mean
01:31 < meltz> I'm proxying a node HTTP server
01:31 < meltz> with a TCP server
01:31 < meltz> using node clustering
01:31 < meltz> and I read some of the data from the request in the TCP server
01:32 < meltz> and once I have what I need, I pause the request's socket, send the handle via IPC to one of the workers, create a new socket with the handle, and emit the connection event on the HTTP server, passing in the new socket
01:32 < meltz> then I resume the socket
01:33 < meltz> however, because I read some of the data in the TCP server
01:33 < meltz> the HTTP server is not getting all of the data
01:33 < meltz> which would essentially be HTTP headers
01:33 < meltz> so my questions is, how can I manually send this data as part of the request to the HTTP server
01:34 < meltz> I tried emitting it on the "data" event, but that didn't work
01:34 < r1card> I need microtime() or similar. "npm install microtime" failed with an error (Windows XP)
01:34 < r1card> Alternatives?
01:35 < zomg> r1card: I don't think even microsoft supports XP at this point
01:35 < zomg> Do they?
01:35 < zomg> :P
01:35 < r1card> zomg, they do.
01:35 < ljharb> no they do not
01:35 < ljharb> it was end of lifed last year
01:36 < ljharb> oh wait, i'm wrong
01:36 < ljharb> it will be end of lifed next year
01:36 < r1card> Extended support until Aril/May-ish 2014
01:36 < ljharb> they gave it 2 extra years because people still refuse to upgrade
01:36 < ljharb> http://www.microsoft.com/en-us/windows/endofsupport.aspx
01:36 < ljharb> that said, screw XP :-p it's from 2002
01:36 < zomg> Yeah you will have better luck with node (and everything) on some other OS =)
01:36 < r1card> ljharb, no it's not. It's from May 30, 2012, I just installed updates :P
01:37 < r1card> I mean 2013
01:37 < Aria> Heh. I'm quite sure that doesn't count.
01:37 < r1card> Is XP supported or not by Node
01:37 < r1card> I mean it either is, or isn't.
01:37 < gildean> node is
01:37 < gildean> modules might not be
01:37 < ljharb> i believe it is.
01:37 < ljharb> but yeah, modules might not be
01:43 < ChrisPartridge> meltz: take a look at node-http-proxy - you should be able to do what you need, then pipe the request through without messing about with the tcp server
01:44 < meltz> ChrisPartridge: the thing is that I'm using node clustering
01:44 < meltz> so I need to proxy to a node process that isn't bound to port
01:47 < ChrisPartridge> meltz: how are you currently trying to send it to the destination? code? gist?
01:47 < ChrisPartridge> it should be possible
01:48 < meltz> so this is how the library I found does it: https://gist.github.com/meltzerj/5675274
01:48 < meltz> using the "sticky" function
01:49 < meltz> the callback passed to the sticky function is a node.js server
01:49 < meltz> and that code works
01:50 < meltz> ChrisPartridge: and this is how I modified it: https://gist.github.com/meltzerj/5675279
01:51 < meltz> ChrisPartridge: can you see them?
01:53 < ChrisPartridge> meltz: Yep, you could create a node-http-proxy in the master, when you get the request, do your ip check, then get the socket handle from req.socket and send it to the child
01:54 < ChrisPartridge> (i think :)
01:55 < meltz> ChrisPartridge: well that's what I'm doing now, no?
01:55 < xecycle> What is the common paradigm of async-retrieve-with-timeout?
02:05  * xecycle timed-out retrieving an answer to his question
02:06 <@Nexxy> 10 minutes is a pretty short timeout for IRC
02:06 <@Nexxy> you may want to consider increasing it
02:06 < xecycle> :/
02:06 < ningu> xecycle: I didn't understand your question
02:08 < xecycle> ningu: Hmm.  I'd like to perform, say, a DB connection, or a query, that accepts a callback and is async; but the method does not provide a `timeout' option.  I want to know if it is reasonable to implement one myself in such cases.
02:10 < ningu> well, it depends on the method but it might have its own internal timeout and return an error in that  case
02:10 < ningu> anyway, sure, you can implement your own timeout
02:11 < xecycle> ningu: Perhaps it does have --- but it's too long to be useful.  So how do we usually implement such a timeout?
02:12 < ningu> presumably with setTimeout/clearTimeout
02:13 < xecycle> ningu: Do I need to consider the case when resources are received after the timed-out?
02:13 < ningu> of course, that might happen
02:13 < ningu> xecycle: you might want to look into the 'once' module
02:13 < xecycle> Hmm...  With something like _.once()?
02:13 < ningu> that too
02:14 < xecycle> Well, I am already using underscore.  I'll then go and use it.
02:14 < ningu> ok
02:14 < ningu> just do cb = _.once(cb);
02:14 < xecycle> Yes :)
02:16 < elliottcable> underscore <3
02:17 < ChrisPartridge> meltz: sorry had to step away, quite possible - however I'm guessing http-proxy has taken care of that use case, might be worth testing - should be pretty simple to drop into what you have to test
02:17 < meltz> ChrisPartridge: hmmm
02:18 < ChrisPartridge> xecycle: instead of using once, you could also just clearTimeout when successful
02:18 < meltz> ChrisPartridge: I'll look into it - i'm not sure it has a use case for what I need but maybe
02:18 < ningu> ChrisPartridge: that won't work for the case where the data comes in after the timeout
02:19 < begizi> I am using passport.js for authentication and ttezel/twit to handle the twitter stream api. twit uses event emitters whenever any tweets come in. I need to start 1 twit event emitter for each user but as of now whenever a second or third user logs in it creates a second or third user stream event emitter for all the users... any suggestions? any help greatly appreciated
02:19 < meltz> ningu: the timeout?
02:19 < ningu> talking about xecycle's thing
02:19 < ChrisPartridge> meltz: not related to what you were talking about
02:19 < meltz> oh
02:32 < xecycle> ChrisPartridge: I know that; but if I set timeout to be 60sec and the resource arrived at 61sec, the callback will still be executed twice.
02:34 < ChrisPartridge> xecycle: yeah, ningu set me straight :)
02:35 < xecycle> Huh, didn't notice that.
02:37 < deoxxa> xecycle: function callOnce(fn) { var called = false; return function() { if (called) { return; } fn.apply(null, arguments); }; }
02:37 < deoxxa> erm
02:37 < deoxxa> function callOnce(fn) { var called = false; return function() { if (called) { return; } called = true; fn.apply(null, arguments); }; }
02:37 < deoxxa> that's better
02:38 < deoxxa> var singleUse = callOnce(cb); db.get(whatever, singleUse); setTimeout(function() { singleUse(Error("timeout!")); }, 60 * 1000);
02:38 < deoxxa> that's how i'd do it, anyway
02:38 < deoxxa> something liek that
02:39 < deoxxa> you might also be able to unregister your callback from the other thing, maybe
02:39 < deoxxa> to help out the GC a bit
02:39 < xecycle> deoxxa: Huh.  Now that there are libraries implemented this I don't feel like rewriting "once".
02:39 < deoxxa> there are?
02:40 < xecycle> Yet I'm unsure about unregister the callback to the normal requests.  The exact process seems to differ.
02:40 < xecycle> deoxxa: _.once()
02:40 < deoxxa> oh, neat
02:46 < mscdex> xanadu: my form upload parser module thing is here: https://github.com/mscdex/busboy
02:46 < mscdex> ningu, ChrisPartridge ^
02:46 < ningu> mscdex: I already linked to it :)
02:47 < mscdex> ah
02:47 < mscdex> :-)
02:52 < garthk> Anyone used node-http-signature with their SSH keys?
03:19 < worldhacker> Hello!
03:19 < worldhacker> How is everyone today
03:20 < monokrome> Does anyone know how I can replace every occurance of path.sep in a string with another character most easily?
03:21 < monokrome> Trying to avoid
03:21 < monokrome> '2012/5/14'.split(path.sep).join('-')
03:22 < boogyman> replace() ?
03:22 < monokrome> no
03:22 < monokrome> '2012/5/14'.replace(os.sep, '-') results in '2012-5/14'
03:22 < monokrome> only replaces the first occurance unless you provide a regular expression with the global flag
03:23 < ChrisPartridge> whats wrong with a regex?
03:23 < monokrome> I'm using os.sep
03:24 < Aria> "2012/5/14".replace(new Regexp(os.sep), '-')
03:24 < Aria> "2012/5/14".replace(new Regexp(os.sep, 'g'), '-')
03:24 < monokrome> Thanks, Aria 
03:32 < monokrome> Apparently it's RegExp :}
03:33 < ChrisPartridge> monokrome: aiming for cross platform?
03:33 < monokrome> always
03:33 < ChrisPartridge> be careful with that regexp on windows then
03:34 < monokrome> Why's that?
03:34 < ljharb> monokrome: why wouldn't you just split the string, and use path.join on it?
03:34 < monokrome> Because that isn't my intention
03:34 < ljharb> something like path.join('2012/5/14'.split(path.sep)) ?
03:34 < ljharb> it has the same effect
03:35 < monokrome> ljharb: I just said that solution earlier, but I don't like it
03:35 < ljharb> ah
03:35 < ljharb> why are you using path.sep, if you're not making a file path?
03:35 < monokrome> It doesn't have the same effect because it does more operations than the other
03:35 < ljharb> "more operations" is irrelevant. worry about performance once it's built and profiled, not before.
03:35 < monokrome> because I'm using a file path to reconcstruct the date
03:35 < deoxxa> warning! warning! conjecture!
03:36 < monokrome> ljharb: Do as you wish, I'll do as I wish :)
03:36 < ljharb> well obviously. i can't force you to write clean code.
03:36 < monokrome> If this wasn't a personal/not-too-important/fun project, I'd agree with you.
03:36 < ChrisPartridge> monokrome: well, on windows path.sep will return \\ - which RegExp will not like
03:36 < monokrome> replacing path.sep with a '-' is more clean than splitting and joining it
03:36 < ljharb> that's not a good justification to write bad code :-)
03:37 < monokrome> obviously
03:37 < ljharb> i highly disagree with that
03:37 < monokrome> well you're wrong
03:37 < ljharb> lol
03:37 < monokrome> my intent with the operation is to replace items in a string
03:37 < monokrome> that's the semantic purpose of replace
03:37 < ljharb> yes, but it's a file path. that's what the path module is for.
03:37 < ljharb> but you're right, if you want to reinvent the wheel, you go right ahead
03:37 < monokrome> split and join do not represent that purpose, but can be used to do so in this case if you're excited to find a somewhat creative hackjob
03:37 < monokrome> I'm not
03:38 < monokrome> If I have a path like 2012/5/16
03:38 < monokrome> and want it to be 2012-5-16
03:38 < monokrome> replace() has the right semantic meaning there
03:38 < ljharb> alright, i can agree with that
03:38 < monokrome> leaving now
03:38 < monokrome> have a good one
03:39 < ChrisPartridge> monokrome: for windows support, new RegExp(p.sep === '\\' ? p.sep + p.sep : p.sep), just fyi
03:40 < ljharb> and look how clean that looks
03:40 < ljharb> :-)
03:40 < ChrisPartridge> lol
03:40 < ChrisPartridge> after realising that, i personally would use split/join
03:40 < ljharb> that's a good gotcha to remember tho
03:58 < aleksandar> Hey guys, excuse the offtopic but can you install a OS say, linux and run a server on a NAS? 
03:59 < Aria> Some of them, yes. Most NAS devices are running some sort of Linux already.
03:59 < Aria> They're usually ARM based, and often very constrained on RAM
03:59 < Aria> But it's possible
04:00 < aleksandar> Yeah I found questions when I changed OS for a distro, thanks alot. I'll inception deeper.
04:03 < xecycle> In what timezone is a Date object's .getTime()?
04:03 < aleksandar> Meh, it's not worth it, the Nas costs 150euro, without harddrives, I can build a pc for cheaper, and use that for server.
04:03 < AAA_awright> xecycle: getTime returns a timestamp, there's no timezone
04:04 < aleksandar> xecycle, AAA_awright, Thanks I learned something new thanks to you guys, never thought of that before.
04:04 < xecycle> AAA_awright: I know that; but I wish to know in what timezone is that "1970-1-1 00:00".
04:04 < xecycle> aleksandar: me?
04:04 < aleksandar> It's based on your clock in the computer, and then the timezone is applied after that.
04:04 < AAA_awright> xecycle: It's defined as the number of milliseconds since the start of Jan 1, 1970, UTC
04:05 < xecycle> UTC.  So it is Greenwich time?
04:05 < aleksandar> nvm I'll just shutup sorry :)
04:05 < AAA_awright> xecycle: No, without daylight savings
04:05 < AAA_awright> i.e. UTC
04:05 < xecycle> Huh.
04:06 < xecycle> So I'm in UTC +8, and .setTime(0) shall give me 1970-1-1 08:00 --- right?
04:06 < AAA_awright> xecycle: Not quite, again because daylight savings
04:07 < AAA_awright> Daylight time will have a different UTC offset than standard time
04:07 < xecycle> AAA_awright: I tried and it is.  So you mean it shall be approximately that?
04:08 < ljharb> xecycle: date objects are in the local time of the JS engine
04:08 < AAA_awright> xecycle: Approximately what?
04:09 < xecycle> AAA_awright: That .setTime(0) in UTC+8 will be approximately 08:00 on that day.
04:09 < AAA_awright> It should be exactly
04:09 < xecycle> ljharb: I care about the timestamp used in set/get-Time.
04:09 < ljharb> right, that's UTC
04:09 < xecycle> Okay.
04:10 < AAA_awright> ljharb: Well technically it's a duration
04:10 < xecycle> I'm actually going to pass times between the client and server; am wondering whether to use timestamps or strings.
04:10 < ljharb> lol true
04:10 < ljharb> xecycle: always timestamps.
04:11 < ljharb> if you want to keep track of timezone, pass that separately
04:11 < xecycle> I prefer using timestamps.  My boss said we'll be using a fixed timezone around the globe, and he thinks using strings may be easier.
04:11 < ljharb> nope, using strings is never easier :-)
04:11 < ljharb> then you have to parse them.
04:11 < xecycle> Okay.  I'll then go with stamps.
04:12 < AAA_awright> In databases use unix timesstamps, certainly
04:12 < AAA_awright> Or in SQL, DATETIME
04:12 < ljharb> just mind your units - timestamps in JS are in ms, but in many backend envs, they're in seconds
04:12 < AAA_awright> Most databases have some form of date storage
04:12 < ljharb> right - but like json, timestamps are a reliable serialization format between environments
04:13 < xecycle> ljharb: Yes, but node-mysql seems to be able to parse Date objects correctly.
04:13 < deoxxa> i always use ISO8601 for time stuff
04:14 < ljharb> xecycle: sure, of course it can. but at best, using strings is no harder than using timestamps. at worst, it's much harder.
04:14 < AAA_awright> In string timestamps a timezone of +0 and -0 indicates different things, either "Timezone of 0" and "No timezone" and I forget which is which
04:15 < xecycle> ljharb: Yup.  Next I will have to find out how to enforce UTC+8 parsing of date strings, as will be the user input.
04:15 < ljharb> that's much trickier in the browser.
04:17 < AAA_awright> >> new Date('Thu, 30 May 2013 04:14:27 UTC-7').toISOString() // But not impossible
04:17 < purr> AAA_awright: (string) '2013-05-30T04:21:27.000Z'
04:17 < deoxxa> >> new Date("tomorrow")
04:17 < purr> deoxxa: (object) Invalid Date
04:17 < deoxxa> darn
04:17 < deoxxa> see that's the kind of stuff that idiot users type in
04:18 < AAA_awright> There's a library that'll do that
04:18 < ljharb> you'd probably want to use Date.UTC
04:18 < deoxxa> i know, AAA_awright
04:18 < ljharb> moment.js is a good one i believe
04:18 < deoxxa> but my point is that parsing what people type is never fun
04:18 < deoxxa> and very rarely a good idea
04:19 < deoxxa> unless you can give them realtime feedback of "i don't understand the mess of crap you've typed in - do it like this instead"
04:19 < xecycle> Well I'm going to use a DatePicker, of course, to reduce the parsing work a bit.
04:21 < AAA_awright> Dates are confusing
04:23 < AAA_awright> Years typically go 2 BC... 1BC... 1AD... 2AD...
04:23 < AAA_awright> Except ISO 8601 specifies year 0
04:23 < ningu> AAA_awright: typically? afaik that transition only happened once :)
04:23 < AAA_awright> So 1 BC = Y+0, 2BC = Y-1
04:23 < xecycle> :/
04:24 < AAA_awright> Year 100BC = year -99, etc
04:24 < xecycle> Like the elevator :)  You go from -1F to 1F without passing 0F
04:24 < ljharb> wait, why isn't there a year zero?
04:24 < ningu> ljharb: because there isn't.
04:24 < ljharb> hm
04:25 < ningu> I actually think the concept of 0 was not known when the BC/AD system was created
04:25 < AAA_awright> Because years weren't invented in the middle east, appearently?
04:25 < ningu> well, at the time and place it was created
04:25 < deoxxa> xecycle: here in australia we have the "G" floor (ground)
04:25 < deoxxa> xecycle: so that's *kind of* 0
04:25 < AAA_awright> And RFC 3339 defines a subset of ISO 8601, 
04:26 < AAA_awright> deoxxa: I think normally I see G, 2, 3, 4, ...
04:26 < ljharb> http://en.wikipedia.org/wiki/0_(year) what do you know
04:26 < xecycle> deoxxa: Well.
04:26 < ljharb> AAA_awright: in europe, it tends to go G, 1, 2, 3, 4 i believe
04:26 < deoxxa> AAA_awright: i know in my building, at least, there's B2, B1, G, 1, 2, 3, ...
04:26 < AAA_awright> Or (going down) 5, 4, 3, 2, 1, P1, P2, ...
04:26 < AAA_awright> Yeah like that
04:26 < ningu> what about leaving off floor 13?
04:26 < deoxxa> my building only has 6 levels :<
04:26 < AAA_awright> >> new Date('2013-05-30T04:21:27.000-05:00') // Also this works
04:26 < purr> AAA_awright: (object) Thu May 30 2013 09:21:27 GMT+0000 (UTC)
04:26 < deoxxa> but two basements for some reason
04:26 < ningu> http://www.youtube.com/watch?v=_dHcvpnjcwI
04:26 < deoxxa> not really necessary i don't think
04:28 < samholmes> I just discovered Kue by tjh!
04:29 < samholmes> Cool module, however, should it be used in it's own process?
04:30 < xecycle> AAA_awright: Thanks.
04:31 < AAA_awright> xecycle: It might be prudent to read http://tools.ietf.org/html/rfc3339
04:32 < xecycle> U-huh.  Sadly Google is down for me, otherwise I could have found it out.
04:32 < AAA_awright> That's the official standard, that most Internet stuff uses, including HTTP and the Date objec
04:33 < AAA_awright> Google? Down?
04:33 < AAA_awright> That's new
04:33 < xecycle> Not new if you are in China.
04:33 < AAA_awright> Oh heh
04:36 < AAA_awright> Ah: "RFC 3339 deviates from ISO 8601 in allowing a zero timezone offset to be specified as "-00:00", which ISO 8601 forbids. RFC 3339 intends "-00:00" to carry the connotation that it is not stating a preferred timezone, whereas the conforming "+00:00" or any non-zero offset connotes that the offset being used is preferred."
04:40 < xecycle> AAA_awright: Do you think Date.parse() or new Date() will work on RFC 3339 in Firefox and Chrome/Chromium?  I'm considering compatibility in only these browsers.
04:41 < ljharb> Date.parse works the same in all ES5 browsers.
04:41 < AAA_awright> new Date() has worked for a long while I think
04:41 < xecycle> Okay.  Thanks :)
04:41 < ljharb> you can use the es5 shim to add ISO8601 (i think) parsing to ES3 browsers
04:42 < AAA_awright> xecycle: Also note a few other quirks, getMonth returns a zero-indexed month, January=0, December=11, and getDay is day-of-week, getDate is day-of-month
04:42 < AAA_awright> getYear isn't a standard function, it's getFullYear
04:42 < xecycle> AAA_awright: I know that, but am unsure whether these accept overflowing and/or negative values.
04:42 < AAA_awright> Alright
04:43 < AAA_awright> Uh, if it makes sense it should
04:43 < AAA_awright> otherwise it will parse to Invalid Date a.k.a. NaN
04:43 < ljharb> negative values?
04:43 < AAA_awright> I think like
04:44 < AAA_awright> >> var d=new Date(); d.setHour(-5); d
04:44 < purr> AAA_awright: TypeError: Object Thu May 30 2013 04:43:33 GMT+0000 (UTC) has no method 'setHour'
04:44 < xecycle> If it does I can simply +/- the hour to get a UTC time.
04:44 < AAA_awright> er
04:44 < xecycle> .setHours()
04:44 < AAA_awright> >> var d=new Date(); d.setHours(-5); d
04:44 < purr> AAA_awright: (object) Wed May 29 2013 19:43:49 GMT+0000 (UTC)
04:45 < AAA_awright> xecycle: Date won't ever report invalid dates, except NaN, if that's what you mean
04:46 < xecycle> AAA_awright: No, not NaN.  I am thinking of possible ways to set a timezone; and +/- to the hours seems an easy way.
04:46 < xecycle> As long as the constructor accept overflow/negative values.
04:47 < AAA_awright> That's probably not a future-proof way of doing it
04:47 < xecycle> am also fearing that.
04:48 < AAA_awright> If you have a date string that includes a timezone just parse that
04:49 < xecycle> OK, seems fine.  I think I'd better reformat strings taken from pickers into RFC 3339.
04:50 < AAA_awright> xecycle: And unfortunately the offsets change seasonally with daylight savings in many zones
04:53 < xecycle> :/
04:53 < xecycle> Change at the magnitude of seconds?
04:54 < AAA_awright> Hm?
04:54 < xecycle> If the offset changed from 1:00:00 to 1:00:01, I can ignore it in my application.
04:55 < AAA_awright> Very few, actually no timezones anymore, have second offsets
05:01 < xecycle> :/ these timezone stuffs seem nasty.  I'm going to start with assuming the offset to be +8h, before bugs really come up.
06:12 < t0lkman> if you were choosing today to create your node,js app what framework would you choose?
06:13 < substack> t0lkman: http.createServer()
06:13 < t0lkman> but what about cookies handling + db connection ?
06:13 < substack> what about them?
06:13 < t0lkman> mvc structure
06:14 < substack> why do you need an mvc structure?
06:14 < substack> what problem does that solve and are you sure that you have that problem?
06:14 < t0lkman> to separate logic from views?
06:14 < substack> why do you need a framework to separate logic from views?
06:14 < substack> you can just do that
06:14 < substack> with programming
06:15 < t0lkman> I know, but maybe somebody already did it before me with better approach :)
06:18 < substack> t0lkman: but perhaps they did each of those things better in isolation instead of writing a kitchen sink of all functionality?
06:18 < t0lkman> I mean all those frameworks http://ocdevel.com/blog/nodejs-frameworks-comparison don't exist just for nothing
06:18 < substack> you can find individual libraries for pretty much everything you need to do
06:19 < substack> and when you can't find one, you can write one and publish it to npm
06:19 < substack> and then everybody can benefit
06:19 < substack> instead of mutually-exclusive fiefdoms of frameworks that don't inter-operate
06:23 < substack> t0lkman: there will always be more and more and more frameworks because there is nothing inherent in the problem domain that constrains the solutions
06:23 < substack> it's all opinion, conjecture, and fashion
06:24 < substack> but libraries that express a single clear idea about their inputs and outputs can be evaluated independently on their merits for their narrow problem domain
06:24 < substack> we can actually know something about them
06:25 < substack> it's much harder to make conclusive statements about expansive frameworks because they are so multi-faceted
06:25 < ningu> substack: how would you propose handling, say, messiness in http implementations? it would be nice if you could somehow handle that all with a single library so you didn't have to worry about it
06:25 < substack> it goes to the heart of your internal epistemological system
06:26 < substack> I happen to be a methodological reductionist because I don't see how we can make reliable statements about big systems owing to the compounding factors
06:26 < substack> it's the same idea as experimental design: you test only a single variable at a time and you keep everything else the same
06:27 < substack> ningu: what does that even mean?
06:27 < ningu> substack: I mean that not all http clients send their requests in the same way, and if there are predictable idiosyncrasies it would be good to not have to worry about them
06:30 < substack> ningu: I'm still not sure what you're talking about.
06:30 < substack> can you be more specific?
06:31 < ningu> substack: there were several examples given on the api podcast
06:33 < deoxxa> substack: "bitches be trippin', how a real g deal with the games dem hoes play in a manner allowing for optimal reuse of logic? ...yo?"
06:34 < ningu> one of them iirc had to do with how iOS sends urls
06:34 < deoxxa> where, of course, the "bitches" are http clients, and the "real g" is your application
06:34 < substack> "sends urls"
06:34 < substack> this seems really off-topic to what frameworks provide
06:35 < ningu> substack: whoever said it was not very specific.
06:35 < substack> if you need to normalize urls you find a library to normalize urls
06:35 < substack> case closed
06:35 < substack> instead of looking for a framework which *happens* to normalize urls
06:35 < substack> merely incidentally
06:38 < innociv> How much is performance impacted if I split node.js into two instances, and communicate between them with a socket?
06:38 < substack> innociv: measure it and see
06:38 < innociv> Aha
06:38 < substack> what kind of answer are you looking for? we can't measure your application for you
06:39 < substack> nor do we have any idea what your requirements for latency and throughput are
06:39 < ragle> I don't think :innociv is out of line if he is looking for a general, conceptual answer tot he question
06:39 < px> shouldn't be too bad
06:39 < ragle> s/tot he/to the
06:40 < px> obviously communication over a socket timing can vary widely
06:40 < innociv> It would be similar to the performance of communicating to a mysql socket, shouldn't it?
06:40 < px> maybe faster
06:40 < Lorentz> guess so?
06:40 < px> about the same
06:40 < Lorentz> maybe not?
06:40 < substack> use evidence
06:40 < substack> don't guess
06:40 < px> just go for it
06:40 < Lorentz> maybe it'll be banana
06:40 < px> solve perf issues when they cause real probs
06:40 < rvagg> guess all the metrics
06:40 < substack> this is mere conjecture
06:41 < Lorentz> I like conjecturing with bananas
06:41 < ningu> do the bananas like it too?
06:41 < Lorentz> no, they do not
06:41 < freannrak> Hello. I'm having trouble installing NodeJS to CentOS 6.4 following this guide (https://www.digitalocean.com/community/articles/how-to-install-and-run-a-node-js-app-on-centos-6-4-64bit). I ran into problems when executing 'npm -g install express supervisor'. Without sudo it runs, but throws permission errors. With sudo it says command not found. Here's my .bash_profile and npm config list: http://dpaste.com/1204656/
06:43 < Lorentz> npm got installed as local user, but whatever the path it's pointing to for global install is locked out to user (probably /usr or something)
06:43 < Lorentz> meanwhile because it's installed for local user, sudo (being root) wouldn't see it, thus command not found
06:44 < ChrisPartridge> freannrak: hence you probably wern't root when you did make install
06:44 < t0lkman> npm -g install express
06:44 < Lorentz> do "echo $PATH" as sudo and see if "/usr/local/bin/node" is in there
06:45 < ChrisPartridge> which that guide is expecting
06:45 < t0lkman> what do you need expresses? it's a MVC framework
06:45 < t0lkman> people here against frameworks :)
06:45 < Lorentz> no they're not
06:45 < Lorentz> tools are tools
06:46 < freannrak> Lorentz: http://dpaste.com/1204661/
06:46 < freannrak> everything appears to be in order with sudo path...
06:46 < t0lkman> freannrak: I think they have a typo in their doc
06:47 < t0lkman> or just mistake
06:47 < Lorentz> is there really node in that directory?
06:47 < Lorentz> and npm
06:47 < t0lkman> ./configure when you configure without prefix it can install in some weird places
06:48 < freannrak> Lorentz: http://dpaste.com/1204664/
06:48 < Lorentz> hmmm
06:48 < Lorentz> strange that it can't see it then
06:48 < t0lkman> I would use something like: ./configure --prefix=/your/chosen/path
06:48 < Lorentz> possibly permissions on the directory?
06:48 < t0lkman> so you can install it locally
06:49 < t0lkman> wait
06:49 < freannrak> Lorentz: http://dpaste.com/1204666/
06:49 < t0lkman> so you do see node,npm under /usr/local/bin ?
06:49 < t0lkman> what happens if you run it there
06:49 < t0lkman> ./node -v
06:49 < Lorentz> strangeness all around
06:50 < Chel> hi everyone, q: what is the best way to have a fixtures for testing like django has ?
06:50 < freannrak> t0lkman: http://dpaste.com/1204667/
06:50 < t0lkman> I see you have node there, try to run it
06:51 < freannrak> t0lkman: as regular user it runs
06:51 < freannrak> sudo node command not found
06:51 < t0lkman> what happens when you use sudo ./node -v
06:51 < t0lkman> ?
06:51 < Lorentz> or go in as "sudo -i" and see if you can run node then
06:52 < freannrak> t0lkman: command not found
06:52 < t0lkman> ok so what happens when you type: sudo -u YOUR_USERNAME ./node -v
06:52 < Lorentz> freannrak with node and the infinite strangeness
06:53 < freannrak> [ar@Sekhmet bin]$ sudo -u ar ./node -v
06:53 < freannrak> v0.10.8
06:53 < t0lkman> ok
06:53 < t0lkman> so you have issue for path
06:53 < t0lkman> type
06:53 < t0lkman> sudo -i
06:53 < t0lkman> #root
06:53 < t0lkman> type export
06:53 < t0lkman> see PATH to your node if it's not there add in under being root
06:54 < t0lkman> or why care? just use sudo -u
06:54 < freannrak> yup, it's not there
06:54 < t0lkman> who sad superuser needs an access to the node?
06:55 < t0lkman> s/sad/said
06:55 < freannrak> t0lkman: by just using sudo -u you mean: sudo -u ar npm -g install express supervisor ?
06:56 < t0lkman> yep
06:57 < freannrak> t0lkman: command not found :P
06:57 < freannrak> i'll try adding it to root's .bash_profile
06:57 < freannrak> the path
06:58 < t0lkman> maybe you should add it to /etc/profile
06:58 < t0lkman> to make it default to everybody
06:59 < freannrak> I added export PATH=/usr/bin/node:$PATH to root's bash_profile and it's still saying command not found when I execute sudo npm -g install express supervisor
07:00 < t0lkman> hmm
07:00 < t0lkman> but your node is in /usr/local/bin
07:00 < t0lkman> add it to /etc/profile
07:00 < t0lkman> PATH=/usr/local/bin/:$PATH 
07:01 < t0lkman> then: source /etc/profile
07:01 < t0lkman> or just relogin
07:01 < Lorentz> thought it was more like /usr/local/bin/node/ ?
07:01 < Lorentz> whatever it is
07:02 < t0lkman> Lorentz:  I see his copy/paste http://dpaste.com/1204667/
07:02 < freannrak> t0lkman: to the EOF of /etc/profile?
07:02 < Lorentz> that's because as user he can see no* binaries (I assume he tabbed), nothing to do dir he's in
07:04 < t0lkman> oh it's cents specific issue
07:04 < t0lkman> n CentOS 6.2 (and probably versions less than this), sudo has a secure path set secure_path = /sbin:/bin:/usr/sbin:/usr/bin. This is a problem because npm is installed in /usr/local/bin by default and sudo does not have access to that location in it’s path.
07:05 < t0lkman> To make this change you must use visudo to change the line Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin . This will take care of the problem now you can install packages using sudo like normal.
07:05 < t0lkman> so just visudo and add new path
07:06 < t0lkman> add /usr/local/bin  using visudo
07:06 < freannra1> connection lost, what was my last message?
07:06 < t0lkman> lol
07:06 < t0lkman> let me copy paste
07:06 < t0lkman> t0lkman: to the EOF of /etc/profile?
07:06 < t0lkman> [12:02a]
07:06 < t0lkman> Lorentz
07:06 < t0lkman> :
07:06 < t0lkman> that's because as user he can see no* binaries (I assume he tabbed), nothing to do dir he's in
07:06 < t0lkman> [12:04a]
07:06 < t0lkman> t0lkman
07:06 < t0lkman> :
07:06 < t0lkman> oh it's cents specific issue
07:06 < t0lkman> [12:04a] t0lkman:
07:06 < t0lkman> n CentOS 6.2 (and probably versions less than this), sudo has a secure path set secure_path = /sbin:/bin:/usr/sbin:/usr/bin. This is a problem because npm is installed in /usr/local/bin by default and sudo does not have access to that location in it’s path.
07:06 < t0lkman> [12:04a] t0lkman:
07:06 < t0lkman> To make this change you must use visudo to change the line Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin . This will take care of the problem now you can install packages using sudo like normal.
07:07 < t0lkman> [12:04a] t0lkman:
07:07 < t0lkman> so just visudo and add new path
07:07 < t0lkman> add /usr/local/bin  using visudo
07:07 < freannra1> t0lkman: ok, thanks, minute.
07:08 < t0lkman> is anybody here from SF Bay Area?
07:09 < ningu> t0lkman: a lot of us
07:10 < t0lkman> is there any node.js meet up soon?
07:10 < ningu> not sure
07:10 < ningu> there is nodeconf
07:11 < t0lkman> LoL nodeconf2013 all tickets sold oud
07:11 < t0lkman> s/oud/out
07:13 < t0lkman> interesting what was the price...
07:16 < asham> Hy! I have some divs at the page with hover functions to change picture when mouse on. How can i save images to browsers cache, to prevent image flickering when mouse on? I hope you understand what i need. Thanks!
07:16 < t0lkman> it's not nodes question man :(
07:16 < t0lkman> try #javascript
07:17 < t0lkman> though it is not even JS question :)
07:18 < jesusabdullah> haha
07:18 < Trangar> asham, google "pre-load image javascript"
07:18 < asham> Aha ok thanks :)
07:18 < asham> Thank you all :)
07:18 < freannra1> t0lkman: Thanks for all the help. I gtg now, but I think I'll manage on my own from here. I'll update their documentation once I'm done.
07:19 < t0lkman> freannra1:  np :)
07:20 < Doidel> Hello guys. I'm trying to get this (a little old) WebWorker script on github.com/pgriess/node-webworker running (on Windows). So far so good, yet I constantly get an Error: listen EACCES when listening to the server. I tried granting "running as Administrator" for node.exe and granting full privileges to all on the temporary network directory (the script uses github.com/pgriess/node-websocket-client for connections), yet nothing helped, that s
07:21 < carlos_> how do you guys document your code? is there something like YARD or RDoc for Ruby? I'm asking from the point of view of big projects with many modules… keeping track of all that can be painful
07:22 < ssafejava> jsdoc helps
07:23 < Doidel> The stacktrace btw: http://dumptext.com/NejgXl6A
07:25 < Doidel> An alternative would be to try it with another module mimicking the html5 Worker api, if somone knows one that runs on Windows...
07:26 < jesusabdullah> what's windows?
07:26 < ChrisPartridge> those things normal people have that lets light into a building, duh
07:27 < ningu> Doidel: does it work when the port is >1024?
07:27 < jesusabdullah> ChrisPartridge: oh geez I forgot I haven't seen "outside" in months
07:29 < Doidel> ningu, let me check where I can find the used port, don't know which one's used right now..
07:30 < kumavis> im running into peer dependency problems  https://gist.github.com/kumavis/5676173
07:32 < freannra1> t0lkman: thanks again, this solution works. Time to update their docs.
07:32 < t0lkman> cool, yeah just send them quick note
07:33 < ningu> kumavis: looks like an issue with the voxel package
07:34 < Doidel> ningu, the path is set together like this: 
07:34 < Doidel> var sockPath = process.argv[2];
07:34 < Doidel> 'ws+unix://' + sockPath
07:35 < Doidel> while the WebSocket constructor is:   var WebSocket = function(url, proto, opts)
07:35 < kumavis> ningu how would i go about resolving it ?
07:35 < Doidel> I'll debug it and search for an example..
07:36 < ningu> kumavis: looks like the issue is with voxel-snow and/or voxel-throw
07:36 < Doidel> It's later parsed with urllib. require('url')
07:36 < kumavis> ningu ty
07:37 < kumavis> ningu also, how did you decipher that?
07:38 < axscode> hi guys, anyone happen to know a good hosting for nodejs but able to run redis also?
07:38 < ningu> kumavis: where it says which versions each package wants...
07:38 < ningu> npm ERR! peerinvalid Peer voxel@0.3.1 wants voxel-engine@>=0.9.0
07:38 < ningu> npm ERR! peerinvalid Peer voxel-snow@0.1.1 wants voxel-engine@0.6.0
07:38 < ningu> you can't have both >= 0.9.0 and 0.6.0
07:38 < ningu> axscode: nodejitsu?
07:38 < axscode> thanks ningu, checking
07:39 < gabor2> hi
07:39 < ningu> Doidel: lib/webworker.js says, The master and workers communite over a UNIX domain socket at ...
07:40 < ningu> Doidel: so maybe it doesn't support windows.
07:41 < kumavis> im new to node, but i could vendorize the 'behind' packages (snow/throw) and then upgrade their listed dependencies and hope for the best, c/d?
07:41 < Doidel> @ningu: Yeah I just figured -.- damn.. is there no Worker api module for nodejs around which works on windows? what a pain...
07:41 < Doidel> But many thanks for your help!
07:42 < ningu> Doidel: no idea, sorry
07:43 < gabor2> I am newbie in nodejs. I checked nodejs's mail list but I couldn't find answer. I am looking for a feature in nodejs to set "maximum execution time". In PHP exists it. Is there any similat solution in nodeJS?
07:43 < ningu> kumavis: sounds like a good idea, not sure how you could do that most easily though
07:43 < nightfly> gabor2: you mean like a response timeout?
07:44 < gabor2> I mean the all execution time while you create a page. It can be running some binary or reading files + creating page
07:44 < ningu> gabor2: do you mean for the running of a whole node process, for a single request the process is making, or what?
07:44 < gabor2> ningu: yes
07:44 < ningu> gabor2: oh. well, I guess you could use setTimeout
07:44 < ningu> but that won't actually stop the other things for you, you'll have to do that yourself
07:45 < ningu> or just ignore the result
07:45 < gabor2> yes, it's my problem
07:45 < ChrisPartridge> setTimeout(function() { process.exit(); }, 1000) ?
07:45 < gabor2> filereadsyn can't be interrupted if e.g. there is a blocked file
07:45 < gabor2> fs.readFileSync
07:45 < gabor2> or
07:46 < ningu> gabor2: you shouldn't be using fs.readFileSync during a web request anyway
07:46 < nightfly> learn async
07:46 < gabor2> but If I use service.handleRequest
07:47 < gabor2> I mean running some binary with nodeJS can I interrupt it somehow?
07:47 < gabor2> if it gets stuck?
07:47 < nightfly> Yeah, you can set a timeout on it
07:47 < gabor2> I use express
07:48 < gabor2> nightfly: ok, I try. Thanks
07:48 < deoxxa> gabor2: you really shouldn't think of node.js in terms of how similar/different it is to php
07:48 < deoxxa> php is... very, very broken
07:49 < ssafejava> nodejs is just like php but async amirite
07:49 < ningu> nodejs is a sink
07:49 < ningu> not sure if there is hot water or not
07:53 < Lorentz> if nodejs is a sink, php is the toilet basin?
07:53 < Lorentz> still pretty important
07:55 < carlos_> I'm glad for php's existence 
07:55 < carlos_> it made me realize what to NEVER do with web development
07:55 < sambarino> why can't node.js be more like php?
07:55 < carlos_> when you use php for so long, you realize why other tools are so great
07:56 < carlos_> I can't speak for node because I'm a total noobie at it
07:56 < carlos_> but I can speak for Ruby/Sinatra/Rails
08:09 < carlos_> btw I asked earlier about documenting code in Node, I found this one and it looks quite usable http://jashkenas.github.io/docco/
08:09 < greelgorke> docco doesnt work well with js, as far as i know
08:11 < kumavis> ningu could i also resolve that by rolling back my dependency versions for the offending packages until they all sync up on the lowest common denominator?
08:12 < ningu> what do you mean by "rolling back"?
08:12 < ningu> if something says it requires 0.9.0 I would not use an earlier version
08:12 < ningu> if it says it needs exactly 0.6.0 it is probably just an oversight
08:12 < ningu> but may still break on later versions of course
08:12 < greelgorke> but i might be wrong on this point
08:37 < bag-man> I'm trying to get this function to return percentageCPU but it is in the setTimeout so it doesn't get set. how can I solev this. http://sprunge.us/fWia
08:38 < ningu> use a callback
08:39 < styol> bag-man: use a callback like function getCPU(callback) and then you can return callback(percentageCPU); inside of your setTimeout's anonymous function
08:39 < carlos_> you're essentially returning a value that hasn't been set yet 
08:40 < bag-man> Like this? http://www.theprojectspot.com/tutorial-post/nodejs-for-beginners-callbacks/4
08:40 < carlos_> so it would be function getCPU(callback) { setTimeout(function( stuff(); callback(percentageCPU); ), 100); }
08:40 < styol> another way to look at this is you're essentially passing a callback to setTimeout also
08:40 < carlos_> so then you say something like getCPU(function(cpupercentage) { console.log(cpupercentage); });
08:41 < carlos_> made a syntax mistake but hopefully you get it :P
08:43 < bag-man> carlos_: THanks for your help. I'll try that now :)
08:47 < bag-man> Where do I define callback, or is it a reserved word I have spelt wrong?
08:47 < greelgorke> its just a function
08:48 < jesusabdullah> bag-man: var f = function (callback) { callback(null, 'hello'); } f(function (err, msg) { if (err) throw err; console.log(msg); });
08:48 < jesusabdullah> bag-man: so "callback" is an argument that gets defined when f is called
08:48 < jesusabdullah> bag-man: does that make sense?
08:49 < carlos_> basically, a callback is a function you "save for later" in a variable… it works like any other function, takes parameters, and it's called with the parenthesis operator
08:50 < bag-man> Sort of. Let me get an example working :)
08:50 < carlos_> jesusabdulla explains that very well in his code example :P
08:51 < greelgorke> jesusabdullah: you can define a callback anywhere. it's just a function with only special semantic, that it will be passed as parameter to another function
08:51 < jesusabdullah> well yeah
08:51 < jesusabdullah> you're just... CALLING it BACK
08:52 < greelgorke> a callback is just like a phone number you left to the casting producer in hope, he/she will call you back if a decision is made :P
08:53 < greelgorke> http://en.wikipedia.org/wiki/Hollywood_principle
08:53 < bag-man> I'm never going to get a callback at this rate
08:54 < carlos_> bag-man, too much stress with formalities here… try this in your javascript console
08:54 < carlos_> var callback = function(variable) { console.log(variable); }
08:55 < carlos_> callback("hello world");
08:55 < carlos_> callback("hi bag-man! :)");
08:55 < carlos_> then you take that one step further
08:55 < bag-man> THanks
08:55 < greelgorke> http://en.wikipedia.org/wiki/Callback_(computer_programming)#JavaScript
08:55 < carlos_> var apply_callback = function(callback, variable) { callback(variable); }
08:56 < carlos_> apply_callback(f, "hello");
08:56 < carlos_> apply_callback(f, "hi bag-man! :)");
08:56 < carlos_> that should give you a working understanding of how callbacks work 
08:57 < bag-man> Should I shall have a play in the node console. Thanks :)
08:57 < ningu> you can make blinking words on irc?
08:57 < ningu> if I knew that I must have forgotten
08:58 < bag-man> COLOURED TOO
08:58 < olalonde> callback is the "return" of async programming :)
08:58 < greelgorke> just italic for me, not coloured
08:58 < bag-man> Coloured on irssi
08:59 < olalonde> i wish irssi had vim style shortcuts
08:59 < greelgorke> may be its the theme
08:59 < carlos_> I get (incompatible encoding)
08:59 < carlos_> my client sucks haha
08:59 < ningu> I don't think irssi's color thing is standard, not sure
08:59 < bag-man> carlos_: Where does the f int he example come from?
09:00 < ningu> bag-man: change f to callback
09:00 < ningu> I think that was a think-o
09:00 < jesusabdullah> ningu: it's de-facto standardized
09:00 < carlos_> yeah sorry
09:00 < carlos_> you can just do
09:00 < carlos_> var f = callback;
09:00 < ningu> jesusabdullah: ah, ok
09:00 < jesusabdullah> ningu: but it was mirc that invented irc color codes
09:00 < jesusabdullah> oh also I don't think blinky-blink ever worked I COULD BE WRONG
09:00 < bag-man> carlos_: After defining callback?
09:00 < jesusabdullah> just foreground and background colors
09:01 < olalonde> i remember gamenet/gamesurge IRCs were pretty colorful
09:01 < olalonde> haha
09:01 < carlos_> bag-man: yeah
09:01 < ningu> it's funny how we read lots of RFCs but we don't hear much about the comments they were requesting
09:01 < greelgorke> bag-man: in js functions are object, just values as strings, arrays etc. you can assign them to any variable/property, return them from a function and pass them as param
09:01 < olalonde> lol
09:02 < olalonde> i think RFC was definitely a bad choice of name to define RFCs
09:02 < ningu> I don't think PEP is much better
09:03 < ningu> although at least it makes sense
09:03 < ningu> but it sounds silly
09:03 < olalonde> PEP?
09:03 < ningu> python enhancement proposal
09:03 < olalonde> ah
09:04 < olalonde> still better than RFC haha although it does sound silly when you say it out loud
09:09 < carlos_> bag-man: here I did a quick jsfiddle example for callbacks :P http://jsfiddle.net/J4HUe/
09:09 < bag-man> carlos_: h cool, thanks! I must remember to use jsfiddle more
09:10 < ningu> if you have more classical taste you can use jsviolin
09:12 < carlos_> ningu: I think I was too ignorant for that joke :P
09:12 < ningu> carlos_: well then here's some fiddle music for you http://www.youtube.com/watch?v=qHutGIIGtbM
09:13 < Umair> I have written a simple node.js program and I can run it with "node test.js" now how can I register "test" so I just may run "test do" with args?
09:13 < bag-man> Staying up to 4am lastnight was a mistake wasn't it. (UK)
09:13 < carlos_> ningu: thanks it's much better than the marketing kids screaming on the phone where I work :D
09:13 < ningu> hehe
09:13 < ningu> carlos_: where are you?
09:14 < ningu> Umair: chmod +x?
09:14 < carlos_> at work (don't tell my boss) haha… I live in southern spain so it's a 11am here
09:15 < bag-man> Umair: Is this what you are after? http://stackoverflow.com/questions/4351521/how-to-pass-command-line-arguments-to-node-js
09:15 < Umair> ningu: what?
09:16 < Umair> bag-man: nope. I want to register my main module so I may not need to prefix it with "node"
09:17 < bag-man> Ah
09:17 < Umair> bag-man: may be I need to deploy that package?
09:17 < bag-man> No idea, sounds over my head. 
09:17 < bag-man> Do you want to do this so you don't have to type node each time yu want to run it?
09:18 < deoxxa> Umair: `npm help json', then look for the "bin" section
09:19 < Umair> yes. if I deploy my module, I can send it to NPM registry from where people can install via "npm my-module" and then they can run it like "my-module args"
09:19 < greelgorke> Umair: simplest is: place in the first line of your test.js #!/usr/bin/env node and make it executabel
09:19 < greelgorke> then you can just type ./test.js in the shell
09:20 < Umair> deoxxa: looks like what I wanted :)
09:20 < deoxxa> :D
09:21 < Umair> greelgorke: can you explain that comment?
09:21 < greelgorke> it just tell the shell how to execute the script
09:22 < bag-man> Umair: He means making the script run like a bash, perl or python script by adding a crungbang to the top line
09:22 < carlos_> greelgorke: the #!/usr/bin/env node is the "shebang" and it tells the console how to execute your executable file
09:22 < carlos_> you make your file executable with chmod +x <filename>
09:22 < carlos_> was it shebang or shebang? I don't remember hah
09:23 < greelgorke> carlos_: yes
09:23 < carlos_> shebang sounds kind of wrong
09:23 < Umair> oh I would definitely try that first
09:23 < gildean> hashbang
09:23 < carlos_> hashbang, shabang, shebang… she bangs
09:23 < greelgorke> this way you don't need npm to install it anyhow
09:24 < deoxxa> "execute kiddies who know they can't hang, chmod +x, start with the shebang!"
09:24 < bag-man> So what is a crunchbang? #! I thought
09:24 < Umair> google hashbangs goes to shabang
09:24 < greelgorke> but if you need it accessible from anywhere, then a symlink to a dir in PATH would fix that
09:25 < carlos_> I just have my executables in /usr/bin or /usr/local/bin or ~/bin
09:25 < gildean> bag-man: i think crunchbang is also acceptable, tho it's usually either shebang or hashbang
09:26 < gildean> bag-man: but using crunchbang nowadays makes people think about the linux distro more than anything
09:26 < gildean> so shebang or hashbang is better, no mixups there
09:27 < bag-man> gildean: Yeah the distro is what confused me
09:27 < carlos_> # = she, ! = bang… self explanatory :P
09:28 < bag-man> # = she? How!
09:29 < carlos_> hehe, just a joke… I think I'll just start calling it hashbang exclusively from now on  
09:30 < bag-man> But by that logic it would be a HashExclamation
09:30 < bag-man> WHich is no fun ata ll
09:31 < garthk> FFS. ldapjs' client doesn't work for me.
09:31 < garthk> ldapsearch command line finds things; ldapjs module can't even bind. Bleh.
09:38 < ningu> carlos_: estas en Andalucia? ayer estaba explicando a un amigo que en andalucia hay personas que dicen "disen" y hay personas que dicen "perzonaz" ;)
09:38 < carlos_> ningu: jaja sí estoy en Andalucía! pero soy argentino así que siempre digo "disen" :P
09:39 < ningu> segun mis amigos andaluces en malaga siempre dicen "z"
09:39 < ningu> ceceo
09:39 < bag-man> De nada
09:39 < carlos_> ningu: es muy típico de aquí cecear jaja
09:39 < garthk> … and the LDAP module fails because it can't authenticate on the initial opening.
09:39 < ningu> carlos_: oju quillo
09:40 < carlos_> ningu: LOL no vea tú
09:40 < ningu> I think you lost me on that one
09:40 < Foxandxss> yo soy de málaga, digo z
09:41 < carlos_> ningu: lol I got the local jargon down
09:41 < ningu> carlos_: what is "no vea tu"?
09:41 < ningu> I can't quite put it together
09:42 < carlos_> ningu: that's just an expression… like agreeing with something in this sense
09:42 < ningu> Foxandxss: mi amigo era de nerja, o "nea" como el dijo
09:42 < Umair> guys I don't get this thing "./test.js" why ./ prefix? if . = current dir
09:42 < ningu> Umair: because usually the current dir is not in the $PATH
09:42 < carlos_> ningu: it could also be like "you ought to see"
09:43 < Foxandxss> :)
09:43 < ningu> carlos_: hmm, ok
09:43 < Umair> ningu: why would I need that be in $PATH?
09:43 < Umair> it's single file which should just be run
09:43 < ningu> Umair: $PATH is what the shell searches in order to run a program you specify on the command line
09:44 < ningu> if it isn't in the $PATH you can always run it by specifying an absolute or relative path
09:44 < Umair> got it
09:44 < gildean> unless you prefix it with ./ meaning you want to run the file from your current working path
09:44 < gildean> directory rather
09:46 < Umair> if I wil create a symlink of test.js in /usr/bin/test can I run "test args"?
09:46 < carlos_> Umair, so long as /usr/bin/test has the executable bit enabled
09:47 < ningu> Umair: yes, you still need the shebang line
09:47 < Umair> no I mean without shebang line
09:47 < Umair> carlos_:  executable bit?
09:47 < carlos_> also I'm not a Node expert, but can't you do something like $~ test arg1 arg2 and then in the code have ARGV[0] ARGV[1]??
09:47 < ningu> carlos_: symlinks don't have executable bits, it goes by the permissions of what it points to
09:48 < ningu> carlos_: yes, of course. shows up in process.argv
09:48 < carlos_> ningu: right.. correction then :P
09:48 < Umair> carlos_: I know how to get args in node :)
09:48 < Umair> I am exploring the ways to run it
09:48 < ningu> Umair: if you ln -s test.js /usr/bin/test it will work if (1) test.js is +x and (2) you have the shebang line in test.js
09:48 < gildean> Umair: just add the hashbang line on top and make the file executable
09:49 < gildean> a symlink to an executable will work too
09:49 < Umair> gildean: already tried that and it works :)
09:50 < ningu> Umair: by design npm install things locally
09:50 < ningu> most of the time that's what you want
09:50 < Umair> ningu: I'm aware of -g
09:51 < ningu> I know, but what I meant was, -g is not a good idea for deployable apps
09:52 < Umair> ningu: yes
09:52 < PsySkeletor> Hi everyone, here a rookie of node.
09:52 < Umair> ningu: I don't think symlink is working
09:52 < PsySkeletor> maybe someone could help me decipher what means that when i do a "npm install"
09:52 < PsySkeletor> npm WARN package.json css-parse@1.0.4 No repository field.
09:53 < ningu> Umair: you need the whole path, sorry... ln -s /path/to/test.js /usr/bin/test
09:53 < ningu> PsySkeletor: it just means that package has an incomplete package.json file, but it's just a warning, it will still work fine
09:53 < PsySkeletor> thank ningu
09:53 < PsySkeletor> :)
09:53 < ningu> it just means the author did not specify a git repository for the module
09:54 < ningu> which is generally useful if you want to keep track of changes or whatever
09:54 < Umair> ningu: I tried "/path/to $ ln -s test.js /usr/bin/test"
09:54 < ningu> Umair: that command no sense makes
09:55 < carlos_> ln -s ~/test.js /usr/bin/test
09:55 < Umair> ningu: lol. it means I am already at the dir where test.js is located and then execute the rest of cmd
09:55 < ningu> Umair: right, and what I'm trying to tell you is that won't work
09:55 < Umair> ningu: I will try full path now
09:56 < gildean> ningu: ln -s somefile /usr/bin/somefile works fine for me
09:56 < Umair> full path works
09:57 < ningu> gildean: it creates a valid symlink but it won't find the original somefile unless it's in the current dir
09:57 < Umair> ningu: I was in current dir and it didn't work
09:57 < ningu> err... no, sorry, it's relative to the location of the link
09:57 < ningu> I'm being inarticulate
09:57 < ningu> Umair: yes, I know
09:57 < Umair> ah okay
09:57 < ningu> carlos_: so are there many node programmers in spain?
09:58 < ningu> carlos_: I was in sevilla in 2000 and everyone was shocked that I knew how to program
09:58 < Umair> I really don't like seeing more python stuff than node :(
09:59 < carlos_> ningu: not many, people here are still stuck in LAMP days
10:00 < ningu> carlos_: with the current economic situation, it might be oil lamp days
10:00 < carlos_> ningu: no kidding lol
10:00 < ningu> is portugal even worse or about the same?
10:01 < ningu> all I can tell is that the news is terrible from both places, but I can't compare :P
10:01 < carlos_> I think worse, but there's more progressive areas… it just depends really… but in general I would say worse
10:02 < ningu> carlos_: do people still count their money in duros?
10:03 < carlos_> ningu: lol no, I wasn't around here when they normally did… now they just use it as an expression like "I don't have a cent!" -- "No tengo un euro!"
10:03 < ningu> euro or duro?
10:03 < ningu> I thought maybe they found a way to translate duros into a portion of a euro or something
10:04 < carlos_> duro was 100 pesetas
10:04 < carlos_> (I think)
10:04 < ningu> no, duro was 0.05 pesetas
10:04 < carlos_> … close :P
10:04 < ningu> hehe
10:04 < ningu> when I was there sometimes people would tell me the price of things in duros
10:04 < carlos_> so probably around the days of switching to Euro, right?
10:04 < ningu> it was 2000, so not long before
10:05 < carlos_> yeah I was still in elementary school by that time, in Utah :P
10:05 < ningu> haha
10:05 < ningu> so many people do foreign exchanges in really remote places
10:05 < ningu> in the US, I mean
10:10 < Okan> hello guys, i will ask you some question? 
10:10 < ferno> Don't ask to ask, just ask.
10:15 < alexwhitman> Can anyone suggest what I'm doing wrong here: http://pastebin.com/Rytc5Ndk ? I'm trying to concat multiple files using streams but the script doesn't iterate through all of the files and exits early with no error.
10:15 < bag-man> Can I use console.log on jsfiddle/
10:16 < Trangar> bag-man, yes
10:19 < bag-man> Trangar: Sure? Where would it output to?
10:19 < Trangar> bag-man, your browsers console?
10:19 < bag-man> Ah sneaky
10:19 < Trangar> Just like any console.log does in a client-side script
10:19 < bag-man> Thanks
10:29 < bag-man> Any way to hide warnings on firefox's developer console?
10:33 < bag-man> carlos_: http://jsfiddle.net/4RZEY/ I still don't get this :( 
10:33 < carlos_> bag-man: I see them bugs heh
10:35 < carlos_> bag-man: check this one out http://jsfiddle.net/4RZEY/1/
10:35 < carlos_> you can of course use console.log on jsfiddle but it kind of defeats the purpose
10:36 < carlos_> just have a function that inserts some text into the html structure
10:36 < bag-man> Thanks :)
10:36 < bag-man> That is a lot easier
10:37 < carlos_> bag-man: yeah, simple and easy.. like Michael Scott says: KISS ^^
10:37 < bag-man> :)
10:39 < gildean> a slightly cleaner version: http://jsfiddle.net/4RZEY/2/
10:40 < carlos_> gildean: yeah that of course works as well… good example for bag-man too to see callback usage
10:41 < bag-man> gildean: Thanks
10:42 < gildean> bag-man: np
10:43 < gildean> btw. you know that you can get the loadaverage for *nix systems with the os core-module?
10:43 < gildean> http://nodejs.org/api/os.html#os_os_loadavg
10:45 < jcoglan> hi, wondering if someone could help with an https problem I'm having
10:45 < deoxxa> jcoglan: mathematically speaking, if you preface every question with another leading question, it's going to take you *at least* twice as long to get the answers you want
10:46 < bag-man> gildean: Yeah but I did it the hard way :)
10:46 < jcoglan> okay, let me be more direct ;)
10:47 < jcoglan> I have an https server using self-signed certs (for testing), and I can make a TLS connection to it and send a request, but I can't get https requests to work
10:47 < sambarino> jcoglan: is it ok if I answer your question?
10:47 < jcoglan> gist: https://gist.github.com/jcoglan/5677049
10:47 < TheAceOfHearts> is anyone here living in Silicon Valley? if so, can you tell me how much you pay in rent? is $1000/month the standard? 
10:47 < jcoglan> sambarino: absolutely :)
10:48 < sambarino> i can't actually help sorry, was just being facetious
10:59 < gildean> jcoglan: add rejectUnauthorized: false to your request options
11:06 < jcoglan> gildean: I don't want to skip validation, I want users of my module to be able to specify their own trusted CAs
11:07 < jcoglan> i.e. do the right thing by being explicit about what we trust, rather than removing validation altogether
11:07 < fallous> anyone noticed a change in node-mysql error emitting?
11:14 < deoxxa> fallous: i think that question might have had too much detail
11:15 < gildean> jcoglan: what's the error you're getting?
11:15 < jcoglan> I'm not getting an error -- the client_https.js script just hangs and does not emit errors
11:18 < jcoglan> gildean: have you tried running the gist I posted?
11:18 < bag-man> Is this socket disonnecting? http://sprunge.us/PIXB
11:18 < jcoglan> gildean: the request does also not emit 'close' or 'end'
11:23 < gildean> jcoglan: aha, you're not calling request.end();
11:23 < gildean> from the client
11:23 < gildean> so the req just sits there waiting for that
11:23 < jcoglan> gildean: :facepalm:
11:25 < jcoglan> gildean: thanks :)
11:25 < gildean> jcoglan: np
11:25 < deoxxa> NOW KISS
11:26 < gildean> deoxxa: you? i'd rather not, the beard is tickly
11:26 < deoxxa> tee hee
11:35 < fallous> the error isn't a legit error object, so checking err.fatal and err.code fails. result of console.log(err) is { [Error: Connection lost: The server closed the connection.] fatal: true, code: 'PROTOCOL_CONNECTION_LOST' } which gives a TypeError: Property 'code' of object Error: Connection lost: The server closed the connection. is not a function when trying to check value of err.code
11:36 < fallous> acts like they're stringifying maybe?
11:44 < standoo> Gehello
11:44 < bnoordhuis> hello standoo
11:44 < standoo> bnoordhuis: hello
11:45 < standoo> bnoordhuis: have we talked before?
11:45 < TheAceOfHearts> hello 
11:45 < bnoordhuis> standoo: i don't know
11:47 <@MI6> joyent/node: Fedor Indutny v0.10 * 9ee86b7 : tls: proper .destroySoon - http://git.io/Ign93w
12:38 <@MI6> joyent/node: mscdex master * 510aef9 : buffer: return `this` in fill() for chainability - http://git.io/Ofep6w
12:41 <@MI6> joyent/node: Brian White master * 6af8788 : buffer: return `this` in fill() for chainability - http://git.io/zmFxIQ
12:42 <@MI6> joyent/node: Brian White v0.10 * 774b28f : repl: fix JSON.parse error check - http://git.io/u9mCTA
12:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:52 < thiagod> guys, I'm facing a problem, how I stub one require function to test it. I had a pdfBuilder.js that will delegate to the spawn function. How stub that ?
12:53 < thiagod> I dont want to call the spawn on my test, just stub it
12:55 < thiagod> this is the pastie: I dont know how to stub the spawn on my tests , could you help me.  http://pastie.org/7983588 
12:58 <@MI6> joyent/node: Ryunosuke SATO master * 7ce5a31 : events: define properties on prototype - http://git.io/kFIing
12:58 < atSetKey> You have not forgotten about ';', in your code?
13:04 < thiagod> atSetKey: talking about the pastie ?
13:04 < floody> hello
13:04 < TheAceOfHearts> hello
13:05 < vulture> hello test
13:07 < Doidel> If someone has already come over the "spawn ENOENT" problem I would very much appreciate if you could have a look at https://github.com/rogerwang/node-webkit/issues/754
13:11 <@MI6> joyent/node: Kiyoshi Nomo v0.10 * 36e90da : doc: remove `bufferSize` option - http://git.io/R4JjKQ
13:13 < bnoordhuis> Doidel: msbuild probably isn't on your path
13:14 < bnoordhuis> Doidel: try running rebuild from a terminal you start from within visual studio
13:14 < bnoordhuis> there's also this .bat you can run to set the correct env vars
13:14 < bnoordhuis> but i always forget where it's located in the vs install tree
13:15 < shlevy> Is there a rule about what characters aren't allowed in npm package names? I have a context where I need to uniquely represent a (name, version-range) pair as a single string and I'm looking for a safe delimiter
13:16 < Doidel> ah, ok bnoordhuis I'll give it a shot
13:17 < gildean> shlevy: what's the context, normally npm represents versions with modulename@version
13:19 < Doidel> bnoordhuis, I can't seem to find that .bat, if you by chance know where to look it up that'd be great :S
13:19 < shlevy> gildean: Ah, is @ not allwed in package names? That'd be good. The context is npm2nix, a tool to package npm packages in nixpkgs github.com/nixos/nixpkgs
13:23 < Doidel> @bnoordhuis I first have to upgrade vs10 to sp1 so it might take a while x/
13:24 < gildean> shlevy: also, check the docs here: https://npmjs.org/doc/json.html
13:25 < shlevy> gildean: Thanks!
13:33 < leichtgewicht> I wonder if npm runs in naming issues one day and we start to use domain based package names:
13:33 < leichtgewicht> org-coolio-glob
13:34 < nathan7> leichtgewicht: we have a sensible policy for npm
13:35 < leichtgewicht> nathan7: did I overstep it?
13:36 < leichtgewicht> nathan7: Don't really know what you are talking about...
13:37 < deoxxa> leichtgewicht: usually if a package name is taken, it's because the name was too broad
13:37 < deoxxa> leichtgewicht: all you have to do is make the name more specific
13:38 < leichtgewicht> org-coolie-glob: a specific glob implementation with some soul-comfort for this and that coolio lover ...
13:39 < leichtgewicht> deoxxa: domain-based packaging says: I don't have a new thing. Just my version of it because I love it ^^
13:39 < nathan7> leichtgewicht: then you're free to do that, sure
13:40 < deoxxa> leichtgewicht: heh, well that's fine too
13:40 < nathan7> I can see good reasons for both
13:40 < leichtgewicht> alright
13:40 < leichtgewicht> just never seen it.
13:40 < deoxxa> i've seen a few "forks" on npm
13:41 < leichtgewicht> how are they differentiated?
13:41 < deoxxa> where it'll have like "fix-bug-123" appended to the name
13:41 < nathan7> leichtgewicht: Component uses GitHub as a registry
13:41 < deoxxa> but that just seems really hacky
13:41 < nathan7> It works quite nicely
13:42 < leichtgewicht> I enjoy the substack-style more than the visionmedia-style 
13:43 < zpimp> hello everyone
13:43 < zpimp> can i ask for help here, regarding nonde.js ?
13:44 < deoxxa> zpimp: no, you can only ask questions about asking questions here... sorry
13:44 < deoxxa> zpimp: the good news is that you're off to a great start!
13:45 < zpimp> thanks :) but i dont understand, 
13:45 < nathan7> CAN I ASK NO QUESTIONS?
13:46 < deoxxa> zpimp: don't ask to ask - just ask whatever your actual question is
13:46 < zpimp> ok, sorry about that :)
13:46 < deoxxa> nathan7: well that *was* an option, but you've ruined it now
13:47 < substack> OK EVERYONE
13:48 < eddyb> bnoordhuis: so I'm looking at the output of setInterval(/*console.log heapTotal and heapUsed*/, 1000), it's leaking 10KB every 6 seconds or so. that's not relevant, is it?
13:48 < substack> npm install -g watchify
13:48 < zpimp> i want to scrape some links of a page using xpath
13:48 < Doidel> @bnoordhuis, it's done
13:48 < substack> it's like browserify, only crazy fast and it recompiles your shit automatically when you edit files
13:48 < Doidel> couldn't find where to start the console within VS though
13:48 < Doidel> to I just execute a console application?
13:48 < zpimp> please give me something to read
13:48 < zpimp> anyone ?
13:52 < zpimp> anyone  ?
13:53 < nathan7> Many!
13:53 < Trangar> No-one!
13:54 < deoxxa> zpimp: i'm going to ignore your "using xpath" clause
13:54 < deoxxa> zpimp: but you might want to look at cheerio
13:56 < zpimp> ive read about cheerio, but dont know where to start
13:56 < zpimp> tried using xpath.js 
13:57 < zpimp> i would like to go kinda low level, to understand what im doing since im kind of a noob :)
13:57 < zpimp> i mean simple code
13:59 <@MI6> joyent/node: Andrew Paprocki master * 49e3fcd : vm: fix race condition in watchdog cleanup - http://git.io/ML_GNQ
13:59 < zpimp> have to go, will be back
14:00 < jas-> This is for a maintainer of node.js. I recently opened an issue (https://github.com/joyent/node/issues/5546) and would like to submit a pull request but thought I would ask here first regarding the proper branch to open it on. Any information (besides whats on the "contributing" page) you can give me?
14:04 < deoxxa> jas-: i don't have an answer to your question, but the <keygen> element you mentioned looks freaking cool
14:05 < chrisbuchholz> Guys, whats the best tool to have node restart once app when the source code changes?
14:06 < chrisbuchholz> ones*
14:07 < jas-> It is really an old element originally used with the NetScape browser.
14:07 < Trangar> chrisbuchholz, check the state of a file and if it changes, do ¨delete require.cache[absolutePathUrl]; var obj = require(absolutePathUrl); ¨
14:07 < nero_> NEED SOME HELP: trying to integrate express with yeoman and grunt. when running "grunt server" it loops at "running 'express-start' task" https://gist.github.com/fuhlig/5678038
14:07 < jas-> The latest W3C HTML5 spec includes it as a new element and with the current W3C group working on native crypto support for browsers (exposing the private key, or at least a reference to it) for browser encryption functionality this will come in handy for pushing user details (along with their public key) to a server for certificate signing by a certificate authority leading to easy certificate authentication
14:08 < deoxxa> jas-: yeah, so i'm reading... this is actually really exciting to me, lel
14:08 < Trangar> chrisbuchholz, http://nodejs.org/api/fs.html#fs_class_fs_stats and try something with the require.cache array, just deleting and re-adding it should work
14:09 < deoxxa> having access to the private key would be ace
14:09 < deoxxa> there are pure js rsa implementations out there
14:09 < jas-> I haven't added the native CSR funcationality to the patch I would like to issue a pull request with, but I feel like baby steps are in order
14:10 < jas-> yeah but pure javascript implementations are limited by the browsers inability to security generate a large prime effectively rendering *most* encryption keys susceptible to attack in one form or another
14:10 < jas-> *secrurely
14:10 < bag-man> Anyone know where the d3 data visualisation library IRC is?
14:10 < deoxxa> jas-: that's true
14:12 < jas-> I have to run, but thanks for the support deoxxa
14:12 < deoxxa> good luck!
14:12 < jas-> Thanks!
14:16 < nero_> NEED SOME HELP: trying to integrate express with yeoman and grunt. when running "grunt server" it loops at "running 'express-start' task" https://gist.github.com/fuhlig/5678038     <-- anybody? :(
14:17 < khuss> hi there.. i'm looking for some help with http-proxy. Could anybody help
14:18 < chrisbuchholz> Trangar: oh i meant, to restart my server automatically when i work on at
14:18 < chrisbuchholz> it*
14:18 < deoxxa> the next person who asks a question about asking another question... i will find them and play "the song that never ends" from lamb chops for the rest of eternity
14:18 < QRPIKE> Question: What would you recommend for server-to-server  ( 2 way ) communication?
14:19 < Trangar> chrisbuchholz, have a different script run your server, have it check the file and if the file changes then restart the server
14:19 < deoxxa> QRPIKE: depends on how you need to communicate
14:19 < japandroid> Anyone know how to broadcast an event to a room using socketio?
14:19 < khuss> has anybody used node-http-proxy?
14:20 < khuss> trying to proxy some websocket requests using node-http-proxy
14:20 < QRPIKE> I own the servers I am communicating to. 1 server will connect to 10-20 servers and request info and wait for a response. But I also need to know instantly if it goes offline. I was thinking web sockets, but seems overkill for this
14:20 < deoxxa> QRPIKE: i'm happily using http://npm.im/burro for basic "send objects from a to b" stuff, and http://npm.im/pillion for rpc-style communication (which can sit on top of burro)
14:20 < deoxxa> QRPIKE: full disclosure in that i've worked on both those libraries, and that there are plenty of other options out there
14:21 < QRPIKE> daoxxa: Checking them out now
14:21 < khuss> i'm trying to see how to interrupt the websocket data using node-http-proxy
14:24 <@MI6> joyent/libuv: Ben Noordhuis master * a8da229 : build: remove CSTDFLAG, use only CFLAGS (+1 more commits) - http://git.io/m0gBmg
14:30 < jas-> @MI6 ping
14:30 < jas-> @MI6 Do you have a moment?
14:36 <@MI6> joyent/libuv: Linus Mårtensson master * fc6a2ad : unix: support for android builds - http://git.io/IqCByg
14:37 < alexwhitman> MI6 is a bot
14:37 < jas-> Whoops
14:37 < jas-> Is it operated by @tjfontaine?
14:38 < bnoordhuis> jas-: it's operated by no one and it answers to no one
14:38 < jas-> lol
14:38 < nfour> that is an interesting concept
14:38 < jas-> bnoordhuis, you are actually who I am looking to ask
14:39 < Doidel> Guys, when I build something with nw-gyp it works fine but when I try to load it I get this self-explanatory error: 
14:39 < Doidel> module.js:356
14:39 < Doidel>   Module._extensions[extension](this, filename);
14:39 < Doidel>                                                         ^
14:39 < Doidel> Error: no error
14:39 < Doidel> any ideas? x/
14:40 < bnoordhuis> jas-: well then, you found me
14:42 < jas-> bnoordhuis I posted the question (https://github.com/joyent/node/issues/5546), but really I just need to know which branch to issue a pull request on
14:44 < bnoordhuis> jas-: i'd be disinclined to land it in v0.10 so i'd say master
14:45 < bnoordhuis> the stable branch is for bug fixes, where 'bug' usually means 'something that used to work and is now broken'
14:46 < jas-> Sounds good... do you think that because it impelements (currently 3) new functions it should be in its own branch for testing puposes prior to merge?
14:49 < bnoordhuis> jas-: you mean should you use a feature branch? always :)
14:50 < jas-> bnoordhuis: Great! Thanks again for your help, I will go ahead and issue a new pull request for review
14:55 < NotMyself> good morning peeps, its an Imelda May sort of day I think… /me fires up itunes
15:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:20 < kenperkins> felixge around?
15:42 < eddyb> bnoordhuis: yay I was able to use the v8 heap snapshot from C++ without having to serialize it to JSON (and thus using even more RAM. the snapshot alone is 700MB for a 250MB heap)
15:43 < eddyb> bnoordhuis: 77MB in objects and 50MB in arrays. I might have a leak after all :(
15:45 < bnoordhuis> eddyb: depends. are they collected when you run with --expose-gc and a few strategically placed `while (gc());` statements?
15:46 < eddyb> bnoordhuis: the difference was about 50MB out of ~300MB (but it seemed constant, not proportional to the RAM usage) when I tried it. and it was much much slower
15:47 < eddyb> I wish I could get a list of HeapSnapshot nodes from v8 without using that much RAM
15:47 < eddyb> I know how to bring my app's usage to 1.5GB
15:48 < scott_gonzalez> chjj: I wrote down my notes on the issue triage: https://gist.github.com/scottgonzalez/5678902
15:48 < scott_gonzalez> chjj: You can probably get the open issue/PR count down quite a bit pretty quickly. Lots of issues look like they can just be closed without any further action.
15:49 < eddyb> bnoordhuis: hmm, this is a lot: type=kHidden: count=211629 usage=10932512B max-size=592
15:54 < mikejw> what event should I listen for to tell me a http response has finished?
15:55 <@mbalho> .on('end')
15:55 < mikejw> thanks :)
15:55 <@mbalho> (its a stream)
16:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:23 < redhoodie> hi does anyone know a good page for learning jquery in jade?
16:23 < __carlos> [noob question] I understand Node in conjunction with socket.io is used for many applications that feature real-time collaboration… let's say I wanted to make an editor similar to Etherpad… any clues on where to start? (probably looking at the etherpad code, no? hehe)
16:24 < __carlos> the real question is… do I have to handle all the concurrent problems myself or is there some sort of built-in mechanism?
16:24 < eddyb> what concurrent problems?
16:24 < __carlos> well, two people editing the same line at the same time
16:24 < eddyb> socket.io handles only the evented protocol between the client and the server
16:24 < eddyb> you have to manage sessions on the server, on your own
16:25 < __carlos> also, if the data is very big… like 2million lines, it seems a little bit overkill to transmit the entire thing.. you'd have to do that by small sets I take it
16:25 < eddyb> __carlos: you send diffs to the server
16:25 < eddyb> like, a range of changed text (start, end) and the new contents
16:28 < mae> fear my johnny 5 drone animated ascii art with requestAnimationFrame: http://codepen.io/seraphzz/pen/raybv
16:29 < __carlos> eddyb: nice nice, I see what you mean
16:29 < __carlos> so then you'd have a pointer within the text to annotate the start and end of each change… how would track that though? like on a schedule? say 500 milliseconds or 3 seconds? or by events? like X key presses? (I would go with some time interval just off the top of my head)
16:29 < __carlos> probably somewhere in between
16:29 < eddyb> mae: lrn2unicode box drawing characters
16:29 < eddyb> __carlos: you track key presses. you have to anyway, that's the only sure way to know when the editor changed its content
16:29 < __carlos> mae: if you were really cool you'd have it shoot some missiles or something
16:29 < _6a68> ningu | chilts: the AWS choice was made by service ops, it was clearly a sane choice, I haven't dug into details. but chilts you could ask mmayo in #identity if curious.
16:30  * _6a68 feels funny replying 15 hours later. internets are cool
16:30 < mae> __carlos: hater! : )
16:30 < __carlos> eddyb: thanks =D
16:30 < __carlos> mae: just want you to succeed! ^^
16:30 < mae> lol well met
16:31 < redhoodie> I'm trying to connect it to the localhost
16:32 < eddyb> bnoordhuis: Array: count=825785 total-usage=50528328B max-size=1237968B (code relocation info) // the biggest array is one megabyte of code relocation info :/
16:32 < mae> __carlos: ok v2 will DEFINITELY shoot hellfire missiles, but it won't kill militants or civilians =D
16:33 < __carlos> mae: but those are the funnest to kill D:
16:33 < mae> ooh low-class joke!, i like it ; )
16:33 < __carlos> I got plenty of those unfortunately haha
16:34 < eddyb> http://www.kelsienikki.com/fapmaster/
16:34 < redhoodie> I'm trying to connect it to the localhost but the server gets reconnected
16:35 < redhoodie> and it quits the server on its own giving errors such as undefined keywords in app.js file
16:35 < __carlos> mae: you know what would be REALLY cool is to have an android or iPhone app that connects to your server and your server pushes commands to your drone (ok I'll shut up now) … I'll actually do that and get back to you fellas when I've done it
16:36 < mae> __carlos: lol i'm rolling hilarious! that would either be hipster-bait or gloriously awesome, not sure which ; )
16:37 < mae> eddyb: what a great name for an irc bot
16:37 < bnoordhuis> eddyb: is that an observation, implied question, expression of astonishment or something else?
16:37 < ddod> Does anyone have any tips for getting started with subdomains in Express? I'm looking to do your basic users-each-get-a-subdomain thing a la "user.tumblr.com". What's the best way to do this?
16:38 < __carlos> mae: firing up Xcode now
16:38 < __carlos> :D
16:39 < mae> riiiight
16:39 < mae> i would never do such a thing, i would disrespect android / iphone proper and use phonegap or something like it
16:39 < eddyb> bnoordhuis: 1 and 3. maybe an implied question about code relocation info, in case you happen to know what would cause that big size. but I'm pretty much on my own, now that I have a beachhead in a C++ node.js module and I can analyze heap snapshots. thanks for your help for the last few days :D
16:39 < mae> well maybe i would fire it up to do the build.. since i don't really have a choice… but other than that ; )
16:40 < __carlos> it's happening all right
16:40 < mae> ok ok, well let me know when you go IPO
16:40 < mae> i wont buy stock ; )
16:41 < bnoordhuis> eddyb: it's not unexpected that there's a lot of relocation info. v8 moves things around a lot
16:41 < __carlos> I was working on my thesis but this is much more exciting 
16:42 < bnoordhuis> eddyb: an obj.foo property lookup, for example, gets compiled down to an IC (inline cache) which is essentially a small function
16:42 < __carlos> mae: you say that now :P
16:43 < bnoordhuis> for something completely unrelated, there are approximately 3,000 kids passing in front of my window right now
16:43 < redhoodie> http://dpaste.com/1205207/ 
16:43 < __carlos> bnoordhuis: damn it… I left the cage open -.-
16:43 < eddyb> bnoordhuis: lol. and I kinda know what ICs, I'm not sure what the relocation info is used for (and how it's split into arrays, if it is)
16:44 < bnoordhuis> __carlos: good luck getting them back in, they're an unruly lot
16:44 < __carlos> bnoordhuis: yeah that took a while… all that work to waste ¬¬
16:44 <@tjfontaine> bnoordhuis: there are 3000 kids on this ferry right now
16:45 < bnoordhuis> eddyb: it's kind of complicated but v8 keeps it around for optimization/deoptimization purposes
16:45 < bnoordhuis> eddyb: and i think most of it is stored in FixedArrays, which is what backs most regular js arrays as well
16:46 < bnoordhuis> well, maybe not 'most' but 'many'
16:49 < eddyb> bnoordhuis: thanks, I guess I should try to fiddle with it and sort the different array and object subtypes
16:52 < olalonde> hi all i just created a module for testing sequelize models using rails style fixtures. check it out :) https://github.com/olalonde/fixer
16:57 < Zaxnyd> I just started receiving the error Error: connect ECONNREFUSED at errnoException (net.js:884:11) at Object.afterConnect [as oncomplete] (net.js:875:19)
16:58 < Zaxnyd> googling doesn't really provide any insight.  anyone know what's happening?
16:59 <@MI6> joyent/node: Trevor Norris master * 9a6c085 : process: remove max tick check for domains (+2 more commits) - http://git.io/4TNH3g
16:59 < Zaxnyd> I can reproduce it consistently, I just start the server and make a request to it and it crashes consistently.
17:02 < Zaxnyd> interestingly, it doesn't crash when I do a curl from localhost
17:02 < levilewis> Hey guys have a route question (express room is quiet). trying to determine the best way to implement a couple routes. I have Trips & Events they are associated via an Itinerary. So, I have the basic CRUD routes for those under /trips & /events. If I want to add an event to a trip I'm thinking POST payload to /itinerary containing both the trip_id and the event_id (which I think makes sense), but I'm not sure what the best way to remove an event fr
17:03 < levilewis> the Itinerary is once it's been added?
17:12 < Zaxnyd> it's not code specific, as I can go back to known-good revisions and it still fails.
17:12 < Zaxnyd> so I'm guessing it's package specific
17:12 < Zaxnyd> but how do I figure out what's causing it?
17:12 < Zaxnyd> the error is quite cryptic
17:13 < sshaginyan> Guys I'm loading these stubs json for an api service. Would it be better to use require(); or just fs?
17:13 < sshaginyan> I'm sure require uses fs underneath it.
17:14 < ckknight> What's the best way to profile memory leaks in node v0.10?
17:15 < levilewis> Is sending a payload with a delete request considered bad practice? or is it acceptable?
17:16 < CoverSlide> require is fine
17:17 -!- mode/#Node.js [+o sblom] by ChanServ
17:20 < Kosch> hi
17:20 < CoverSlide> levilewis: technically, TRACE is the only request with which you can't have a payload
17:20 <@MI6> joyent/node: isaacs v0.10 * c86afa5 : npm: Upgrade to 1.2.24 - http://git.io/yBlybw
17:21 < levilewis> coverslide, I'm trying to figure it out…. http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7 "The DELETE method requests that the origin server delete the resource identified by the Request-URI."
17:21 < Kosch> I've got a package.json with deps to some git repos. usually the username of the current logged in user is used as user for the git ssh dep. Its possible to use a placeholder for that? e.g. npm install gituser=... and use this param inside the package.json?
17:21 < Zaxnyd> does anyone have any insight on my issue?  I'm a bit stuck.
17:22 < levilewis> coverslide, according to that and other places I'm reading it seems many services completely ignore payloads sent with a delete request…
17:22 < levilewis> (even some libraries will ignore the payload with a delete request)
17:23 < mscdex> Zaxnyd: what node version?
17:23 < Zaxnyd> v0.10.5
17:23 < Zaxnyd> maybe if I could find net.js, I could dive in and debug it 
17:23 < Kosch> my question is solved. found solution...
17:23 < CoverSlide> levilewis: any reason why you'd want to?
17:23 < eddyb> Zaxnyd: net.js is just the wrapper around the native TCP IO
17:24 < Zaxnyd> is there some way I can get a better stack trace?
17:24 < Zaxnyd> with more info?
17:24 < eddyb> uhm, no, maybe I should explain this
17:24 < eddyb> Zaxnyd: you're actually getting ECONNREFUSED from TCP itself
17:24 < mscdex> Zaxnyd: did you try with 0.10.8?
17:24 < eddyb> well, the TCP part of libuv anyway
17:25 < eddyb> Zaxnyd: it just is "TCP connection was refused"
17:25 < Zaxnyd> to what, though?
17:25 < Zaxnyd> in general?
17:25 < eddyb> to a connect call
17:25 < levilewis> CoverSlide, I'm probably just over thinking this, but I have Trips & Events they are associated via an Itinerary. So, I have the basic CRUD routes for those under /trips & /events. If I want to add an event to a trip I'm thinking POST payload to /itinerary containing both the trip_id and the event_id (which I think makes sense), but I'm not sure what the best way to remove an event from the Itinerary is once it's been added? I would like to use a 
17:25 < levilewis> delete that accepts a similar payload, but I think it's no really standard practice...
17:25 < Zaxnyd> that's what I'd like to get more info about
17:25 < Zaxnyd> what connect call?
17:26 < eddyb> it's async, so you can't just get a better stacktrace
17:26 < Zaxnyd> makes sense.
17:26 < mscdex> eddyb: you can with domains and the like
17:26 < CoverSlide> levilewis: usually, a resource should be identifiable by its URI
17:26 < Zaxnyd> any suggestions on how to debug?
17:26 < eddyb> mscdex: but still
17:26 < eddyb> Zaxnyd: are you using connect directly in your code?
17:26 < Zaxnyd> I could upgrade per mscdex's suggestion.
17:27 < mscdex> Zaxnyd: try it with node 0.10.8 or 0.10 branch on github to make sure it's not a bug that's been fixed since your version
17:27 < Zaxnyd> no, eddyb.  it's not code-specific, as I've reverted to older known-good versions and still have the same issue.
17:27 < Zaxnyd> maybe some package is.
17:27 < Zaxnyd> but I don't know which.
17:27 < CoverSlide> levilewis: so a POST should create a new resource with a unique URI, and DELETE from the same URI should be all you need
17:28 < eddyb> Zaxnyd: no, I was asking for connect calls so I have a guess at what fails
17:28 < eddyb> Zaxnyd: npm ls
17:28 < CoverSlide> levilewis: you could have an endpoint /itenerary/:trip_id/:event_id to refer to what has been posted
17:28 < mscdex> Zaxnyd: also, are you sure you are connecting to the right port and using tls/ssl if necessary?
17:29 < levilewis> CoverSlide, right I agree so lets says I have just the /event & /trips routes. What would you suggest the route(s) look like for adding and deleting an events? (post) /trips/:id/events & (del) /trips/:id/events/:id ? something doesn't feel clean about it
17:29 < levilewis> CoverSlide, I kinda like that idea.
17:29 < Zaxnyd> I'm just connecting to port 80
17:29 < CoverSlide> or you can use querystrings too, if that's cleaner
17:29 < Zaxnyd> I installed grunt recently and was toying with grunt watch
17:29 < Zaxnyd> which I know deals with other ports for live reloading
17:30 < Zaxnyd> but I've disabled all of those features, afaik
17:30 < eddyb> Zaxnyd: this might be code-specific in the sense that the API might have changed slightly
17:30 < mscdex> Zaxnyd: hostname/ip is exactly the same as the one you used with curl?
17:30 < levilewis> CoverSlide, I think I like your suggestion above: /itenerary/:trip_id/:event_id
17:30 < mscdex> Zaxnyd: can you post the code you're using to connect?
17:30 < Zaxnyd> no, I used 'localhost' with curl, and a domain name externally
17:30 < mscdex> oh
17:31 < levilewis> CoverSlide, thanks I will work with that idea for a bit.
17:31 < Zaxnyd> connect to what? the server?  I was using my browser.
17:31 < mscdex> Zaxnyd: how are you listening on the port on the server?
17:31 < mscdex> Zaxnyd: .listen(80); ?
17:31 <@MI6> joyent/node: isaacs created branch v0.10.9-release - http://git.io/IUEgeQ
17:32 < Zaxnyd> ah, http.createServer(app).listen(app.get('port'), function () {
17:32 < Zaxnyd>   console.log('Express server listening on port ' + app.get('port'));
17:32 < Zaxnyd> });
17:32 < Zaxnyd> port = 80
17:32 < mscdex> Zaxnyd: firewall issue ?
17:32 < eddyb> Zaxnyd: wait, can we get something out of the way first? are you just listening in node.js or are you also connecting to something else?
17:33 < Zaxnyd> it's a very basic webserver
17:33 < eddyb> AFAIK that connect error shouldn't show up if a client was connecting to the web server
17:33 < Zaxnyd> the only other 'connecting' that might be happening is whatever grunt is doing for watching and livereloading, but I've disabled that afaik
17:33 < Zaxnyd> grunt listens on a port
17:34 < Zaxnyd> and serves up a js file
17:34 < eddyb> Zaxnyd: you can also monkey-patch the net module's tcp connection's connect function so it prints a stacktrace every time it's called
17:34 < mscdex> Zaxnyd: so you can curl from localhost but you can't curl from outside using the domain name?
17:34 < Zaxnyd> correct
17:34 < mscdex> Zaxnyd: i would check firewall
17:34 < Zaxnyd> well, I used my browser, not curl
17:34 < Zaxnyd> I'll try to curl now
17:34 < eddyb> mscdex: but he's getting a connect error in his server
17:35 < mscdex> eddyb: no, in his browser
17:35 < eddyb> [19:57] <Zaxnyd> I just started receiving the error Error: connect ECONNREFUSED at errnoException (net.js:884:11) at Object.afterConnect [as oncomplete] (net.js:875:19)
17:35 < eddyb> mscdex: that's a node.js error
17:35 < mscdex> that is, yeah
17:35 < eddyb> that's his problem
17:36 < Zaxnyd> curl seems to work fine.
17:36 < Zaxnyd> using the domain
17:36 < Zaxnyd> externally
17:36 < mscdex> hrmm
17:37 < Zaxnyd> http://pastie.org/private/fdt5yt6n4ksfa0pokt3ta
17:38 < ckknight> Anyone know the best way to profile memory leaks in node v0.10?
17:38 < mscdex> Zaxnyd: out of curiousity, what if you try a higher port number? like 8000?
17:38 < eddyb> mscdex: can you stop?
17:38 < eddyb> his server obviously works
17:38 < mscdex> eddyb: http://stackoverflow.com/questions/8792869/node-js-econnrefused-on-port-80
17:38 < Zaxnyd> I think I found the point of failure
17:39 < Zaxnyd> looking in the chrome net tab, I can see there are subsequent calls
17:39 < eddyb> mscdex: all those GET lines in his log means the server should be working anyway
17:39 < Zaxnyd> I think it's because my database might be down
17:39 < Zaxnyd> I suppose I AM making 'connections' in that sense
17:39 < mscdex> heh
17:39 < eddyb> Zaxnyd: you were connecting to a database via TCP or sockets and you didn't mention that :))?
17:39 < Zaxnyd> yeah that totally didn't cross my mind
17:40 < Zaxnyd> there has to be a better way to debug this crap lol
17:40 < mscdex> ckknight: i've been using node-heapdump and node-webkit-agent
17:41 < segomos_> node-heapboner
17:41 < mscdex> Zaxnyd: like i said before, you might look into domains
17:41 < ckknight> mscdex: I'll check it out
17:41 < Zaxnyd> domains?
17:41 < mscdex> Zaxnyd: http://nodejs.org/docs/latest/api/domain.html
17:41 < Zaxnyd> in what sense?
17:42 < Zaxnyd> oh that's glorious
17:44 < Zaxnyd> so, how would one typically go about debugging what I just encountered?  just the way we did?
17:44 < Zaxnyd> seems rather brutal.
17:44 < eddyb> github TANGO DOWN
17:44 < segomos_> bitbucketbitches
17:44 < eddyb> Zaxnyd: like I said, you could monkeypatch the connect method to prints its arguments and/or stack trace
17:45 < Zaxnyd> so it's just a matter of being more diligent in my coding practices? 
17:45 < Zaxnyd> there's no tool to help gain insight into these kinds of errors?
17:45 <@mbalho> node lets you split your code up into small modules that are easier to reason about
17:46 <@mbalho> thats a tool, kind of
17:46 < Zaxnyd> but even if I'd broken my db connection into a module, the error would've been the same
17:46 < Zaxnyd> right?
17:46 < eddyb> Zaxnyd: it's the db module's fault for not catching the error and making it meaningful, I think
17:46 < mscdex> Zaxnyd: add an 'error' listener for your db connection?
17:46 < segomos_> dboner
17:46 < eddyb> something like (but my example will be wrong, I don't know the details) var proto = require('net').Connection.prototype, originalConnect = proto.connect; proto.connect = function() {console.log('connect', [].slice.call(arguments));console.trace();return originalConnect.apply(this, arguments);};
17:47 < Zaxnyd> gotcha, so it's just poor error handling on my part.
17:47 < Zaxnyd> I can live with that.
17:47 < eddyb> but monkeypatching should be your last/laziest resort
17:47 < Zaxnyd> monkeypatching?
17:48 < Zaxnyd> (googling)
17:48 < Zaxnyd> heh.
17:48 < eddyb> Zaxnyd: in my example above, I replace the original connect method with a wrapper
17:48 < Zaxnyd> well, the 'db module' is mine.  it's simply making calls to a neo4j rest endpoint.
17:48 < eddyb> you can do all sorts of things, even with the builtin modules/globals
17:48 < eddyb> github TANGO UP
17:49 < Zaxnyd> so I suppose time to start fleshing out some tests on my end to gain overall clarity into the health of my application. 
17:50 < sshaginyan> Guys how do I track all the processes made by another process and that process was executed by child_process.exec
17:50 < eddyb> sshaginyan: for yourself, or automatically?
17:50 < Zaxnyd> thanks mscdex and eddyb.  you guys have been extremely helpful.
17:51 < sshaginyan> eddyb: For me.
17:51 < eddyb> sshaginyan: pstree
17:52 < sshaginyan> eddyb: Does node have such an option?
17:52 < sshaginyan> I haven't seen it
17:52 < segomos_> pstreeboner
17:52 < eddyb> well, you said for yourself. pstree is a tool you can use
17:53 < sshaginyan> Well let's say I can't use it
17:53 < sshaginyan> lol sorry
17:53 < eddyb> (it prints a process list, as a tree. you can give it a pid to show the the children of that process)
17:53 < sshaginyan> eddyb: see I need to kill all the chidren of a process
17:54 < sshaginyan> eddyb: but I don't know how to get there a processes child pid
17:54 < eddyb> sshaginyan: just kill the main process
17:54 < sshaginyan> eddyb: But then it leaves zombie processes
17:55 < eddyb> sshaginyan: real zombies or just orphaned processes?
17:55 < sshaginyan> eddyb: This is what I'm talking about pid = child_process.exec('grunt nodemon', function () {      }); this creates 8 workers 
17:55 < sshaginyan> orphaned
17:55 < sshaginyan> idk actually
17:55 < segomos_> grunt boner
17:56 < eddyb> segomos_: for me sending SIGKILL to a process kills all the children, too
17:56 < sshaginyan> eddyb: When I kill pid the other 8 processes are still there
17:56 < eddyb> kill -KILL pid
17:56 < eddyb> see if that works, first
17:56 < sshaginyan> so if I send sigkill to pid it should kill all of it's children?
17:57 < eddyb> SIGKILL is the easiest one to think about, since a process can't catch it, it will always kill the process
17:59 < segomos_> is nodemon just restarting the processes after they're killed with `kill`
17:59 < sshaginyan> eddyb: But will it transcend to the chidren? 
17:59 < owen1> i am trying to install a packages for our corporate github account - npm install git+ssh://git@.....  but get some errors related to silly lockfile
18:00 < owen1> i read about proxy related setting but not sure what does it mean
18:00 < segomos_> rm lockfile
18:00 < segomos_> then boners
18:00 < eddyb> sshaginyan: SIGKILL will, because it cannot be stopped
18:00 < segomos_> it will but can nodemon restart the shit
18:01 < eddyb> sshaginyan: all other signals can be caught (intercepted) by processes. node.js has it like process.on('SIGTERM', function(){...})
18:02 < segomos_> you forgot boner
18:11 < charlydagos> mae: I got it running… your XR66 Roadkill drone can now be controlled remotely… my very first Node project mind you ^^
18:13 <@MI6> joyent/node: isaacs created tag v0.10.9 - http://git.io/uaT0XQ
18:28 <@MI6> joyent/node: isaacs v0.10 * ce54f4a : Now working on v0.10.10 (+2 more commits) - http://git.io/Z5nAUg
18:39 < rhalff> I have some code which does several http.get() requests, basically reading html and then parsing the stylesheets within it, any ideas on how to manage this? I have to send a response back after the list of stylesheets is processed.
18:39 < rhalff> the stylesheets can be processed async
18:42 < rhalff> e.g:   for() { AsyncProcesses(); sendResponse() } I can wrap those AsynProcesses in something?
18:42 < rhalff> uh, the for() is not necessary
18:45 < _6a68> rhalff: callback nesting or promises or pubsub signals on receipt, that's your basic range of options
18:46 < pachet> AsyncProcesses().then(sendResponse)
18:46 <@Nexxy> > nesting
18:46 <@Nexxy> no
18:46 <@Nexxy> > promises
18:46 <@Nexxy> not an option
18:47 < rhalff> _6a68, I see there is also https://github.com/caolan/async  , I didn't read about promises or pubsub yet btw, will do that also.
18:48 < _6a68> rhalff: flow control is religious territory, and we're on IRC, and I don't want to bring out the trolls, so, I'll just suggest you also look at https://github.com/kriskowal/q, it's my favorite promises implementation :-)
18:49 < _6a68> rhalff: the upside to doing that reading is that every front-end JS codebase uses some combination of those three options, too :)
18:49 <@Nexxy> control flow*
18:49 <@Nexxy> flow control is e.g. TCP 
18:49 <@mbalho> flow control is e.g. glaciers and fjords
18:49 <@Nexxy> rofl
18:50 <@mbalho> trust me i saw some fjords last week and there was definite flow control at work
18:50 <@mbalho> i promise
18:50 < _6a68> mbalho I think you mean dams and levees?
18:50 < medice> flow control is dam
18:50 <@mbalho> dams are a leaky abstraction
18:50 < _6a68> badabing!
18:51 < eddyb> https://en.wikipedia.org/wiki/C%2B%2B14 oh wow
18:51 <@mbalho> abstractions like that fork the environment
18:51 <@Nexxy> so dams and levees are the promises of the real world?
18:51 <@mbalho> yes
18:51 <@Nexxy> that's what I was thinking
18:51 <@mbalho> modern marvels but you have to have an engineering degree to understand them
18:51 <@mbalho> and they ruin ecosystems
18:51 < pachet> haha
18:52 <@mbalho> callbacks are glaciers, they are much more simple but you end up with beautiful fjord code
18:52 <@Nexxy> hahaha
18:52 <@mbalho> callback hell, otherwise known as fjord code
18:52 < pachet> let it henceforth be called
18:52 <@mbalho> im totally giving this talk at the next conf i get invited to
18:52 <@mbalho> ill just draw bob ross style the whole time
18:52 < richcollins> Any idea why I'd get this error deploying to heroku using npm?
18:52 < richcollins> https://gist.github.com/richcollins/595318f9c7052283c823
18:53 <@Nexxy> glacial control flow
18:53 < pachet> mbalho pyramid of doom => glacial advance
18:54 < _6a68> mbalho: you can't draw bob ross style without bob ross hair. https://www.google.com/search?q=bob+ross+hair&tbm=isch
18:55 < asturel> anyone knows is there a ticket 'system' for nodejs?
18:55 <@mbalho> asturel: github.com/joyent/node
18:56 < asturel> i mean nodejs app
19:04 < dxd828_> Hey, is there an easy way to read the last line of a file into a string?
19:05 <@tjfontaine> tail -1 myfile.txt
19:07 < mscdex> a tail call!
19:07 < rhalff> the promise documentation makes me sleepy
19:08 < mscdex> that is the promise
19:08 < _6a68> you sound like horse_js ;-)
19:09 < Havvy> Does ES6 require Tail Call Optimization?
19:10 < mscdex> child process optimization!
19:10 < bnoordhuis> Havvy: i sincerely doubt it
19:10 < Havvy> mscdex: What are you, a Sin-Clair?
19:11 < mscdex> typescript!
19:11 < eddyb> mscdex: that's enough!
19:11 < mscdex> :-D
19:11 < Havvy> TypeScript doesn't solve that problem.
19:11 < _6a68> mscdex: NewtonScript!
19:12 < _6a68> SELF!
19:12 < _6a68> StrongTalk!
19:12 < eddyb> fun times, using the result of v8::String::Utf8Value::operator* after free
19:12 < eddyb> it wrote 50MB, I'm scared to peek in
19:12 < mscdex> beerscrpt
19:12 < mscdex> beerscript
19:13 < mscdex> bill o'reilly playing battletoads just made my day
19:15 < ddod> Question for anyone: Is there a better way to get the base hostname in Express than parsing out subdomains on req.headers.host?
19:15 < mscdex> ddod: http://nodejs.org/docs/latest/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost
19:16 < mscdex> ddod: you can safely get the hostname that way, in case someone supplies a full http path
19:16 < ddod> mscdex: thanks, I was more wondering if there was like a req.basehost or something like that
19:17 < mscdex> ddod: no, but you could easily use a regexp to parse out the domain
19:17 < ddod> all right, thanks for the info
19:17 < charlydagos> mae: here it is http://guarded-hamlet-1744.herokuapp.com/ … the drone moves "collaboratively" … my first "project" and making it was so easy I think I'll dive into Node 100% :D 
19:17 < charlydagos> takes a bit for socket.io to connect
19:17 < charlydagos> but whatever
19:17 < charlydagos> yay someone is using it!
19:18 < charlydagos> oh come on don't drive it off the screen!
19:18 < charlydagos> >.>
19:19 < charlydagos> all right it's now way up
19:19 < charlydagos> hah
19:20 < Zaxnyd> WebSocket connection to 'ws://guarded-hamlet-1744.herokuapp.com/socket.io/1/websocket/rYDDg72MoqctHFqZ3QND' failed: Unexpected response code: 503 
19:20 < charlydagos> Zaxnyd: yeah I saw that… I don't know why that is :|
19:20 < mscdex> socket.uhoh
19:20 < Zaxnyd> it's not doing anything for me.
19:20 < levilewis> i want to drive it too
19:20 < levilewis> me either.
19:21 < charlydagos> lol, they drove it off the screen
19:21 < Zaxnyd> using chrome
19:21 < charlydagos> let me see if I can provent that
19:21 < levilewis> same for me using chrome, gett that error mentioned above
19:22 < charlydagos> all right, pushed a quick fix to heroku… also socket.io takes a while to connect but it eventually does
19:22 < levilewis> so are we all driving it at once or what? lol
19:22 < charlydagos> yeah
19:22 < charlydagos> ^^
19:22 < levilewis> haha nice
19:22 < mscdex> i hope socket.io 1.0 gets released soon.... using engine.io is going to be a big help
19:22 < mscdex> with getting connected quickly
19:22 < charlydagos> Node is fun as shit… I'm full convinced to start dedicating much more time now
19:23 < charlydagos> I remember pulling off a similar project with Ruby/Sinatra a while ago and it wasn't as easy
19:24 < mscdex> https://www.youtube.com/watch?v=jS2vaGAmQYw
19:24 < charlydagos> oh man a bill o'reilly video
19:24 < charlydagos> GOLD
19:27 < _6a68> bill oreilly video is so good
19:30 < s5fs> solid gold
19:35 < charlydagos> levilewis, mae: here is sauce in case you guys are interested (you shouldn't really) https://github.com/charlydagos/xr66-roadkill
19:40 < s5fs> charlydagos: fun little robot
19:40 < charlydagos> s5fs: heh thanks
19:40 < jmhnilbog> Hi, all. I'm hacking component/component to work with my @#^&@# enterprise GitHub behind my company's #@&* self-signed-cert nonsense.
19:41 < jmhnilbog> I know there's a variable I can set in...the TLS module?... that will get me past the SELF_SIGNED_CERT_IN_CHAIN errors superagent is hurling. I am failing to google the correct incantation.
19:42 < jmhnilbog> I had this working, then stupidly trashed the file with the hack in place. Any help?
19:42 < eddyb> bnoordhuis: I'm all derpy today. there's a discrepancy I forgot about: process RAM usage is 330MB, v8 reports a total heap of 290MB (which makes sense, the rest is the native heap), a used heap of 269MB (the difference is from the lack of compaction), but then a heap snapshot gives me a total of 170MB from all the nodes. so where's 90MB going?
19:42 < mscdex> jmhnilbog: are you already setting the 'ca' option to the generated ca on your server?
19:44 < jmhnilbog> mscdex: nope. I don't want to dig into all of component's dependencies, which I'd need to do to do that. There's some setting to toggle this cert check off.
19:45 < s5fs> jmhnilbog: setting within component proper, or somewhere else (like npm or package.json or whatever)?
19:45 < s5fs> jmhnilbog: you say you've resolved this once before
19:45 < jmhnilbog> s5fs: in the guts of component.
19:46 < mscdex> jmhnilbog: the env var to disable this is NODE_TLS_REJECT_UNAUTHORIZED
19:46 < jmhnilbog> Enterprise Github is just different enough from regular Github to break things.
19:46 < mscdex> jmhnilbog: set it to 0
19:46 < jmhnilbog> Yeah, I just found that, mscdex. Checking it now. It sounds right.
19:46 < charlydagos> I always thought that Enterprise github just entailed private repos :|
19:47 < s5fs> charlydagos: same, shows what I know
19:47 < charlydagos> s5fs: hah, well for private purposes I just use gitolite on my own server… it's modest and it totally works
19:48 < jmhnilbog> Phewwwwwwww.
19:48 < jmhnilbog> Thanks for the assist.
19:48 < s5fs> charlydagos: haha same here, I only recently got a github acct
19:48 < jmhnilbog> Enterprise Github doesn't provide the 'raw' subdomain, for one thing.
19:49 < charlydagos> jmhnilbog: so you would have something like git@your-company.com:repo.git ??
19:49 < jmhnilbog> It doesn't help when you stick it behind rickety VPNs and broken certs, either.
19:49 < charlydagos> well then it sounds like you're not getting your money's worth :P
19:50 < jmhnilbog> I only interact with it over https, but I assume they allow the gir pseudo-protocol too.
19:50 < Zaxnyd> any reccomendations on unit testing setups with node?
19:51 < jmhnilbog> Superficially, it's identical to GitHub, but component/component has revealed the unpleasant differences.
19:52 < jmhnilbog> Also -- no decent way to fork public GitHub repos into our enterprise setup, or vice-versa. We have to do crappy mirroring.
19:55 <@isaacbw> Zaxnyd: one of the tap modules will be your best bet
19:57 < Zaxnyd> ok looking into that, thank you.
20:07 < buckstabu> Hi, guys. I'm trying to write some data into mcabber's fifo through fs.writeFileSync. Got Error: ESPIPE, invalid seek
20:10 < Zaxnyd> 'tap' is just a format of unit testing, yes?  would expresso fall under that category?  I hear it's one of the most popular.  is it recommended?
20:11 <@isaacbw> use whatever you like
20:11 <@isaacbw> try a few 
20:11 < vampi-the-frog> search your feelings
20:11 < Zaxnyd> lol
20:12 < Zaxnyd> is 'tap' a specific framework or a standard?
20:12 < Zaxnyd> seems the latter per the wiki
20:12 <@tjfontaine> in node context, both
20:12 < Zaxnyd> gotcha
20:13 <@tjfontaine> there is a tap module for parsing and output, as well as running tests
20:13 < Zaxnyd> so this one is just one of the many 'tap' testing frameworks: https://github.com/isaacs/node-tap
20:14 < Zaxnyd> and the benefit of using a tap framework is that it's standardized and more readable by machines
20:14 <@tjfontaine> that is the one I'm referring to, there are other test harnesses that have TAP output as well
20:14 <@isaacbw> use this instead: https://github.com/isaacs/tt
20:14 <@tjfontaine> yes, you can use whatever harness mechanism you want, but it should support tap output
20:14 < eddyb> http://testanything.org/wiki/index.php/Main_Page dat logo
20:14 <@isaacbw> and if you want to be cool, you can consume them with https://github.com/isaacbwagner/node-runtests
20:15 < Zaxnyd> interesting
20:16 < Zaxnyd> I like the syntax of tt more than tap
20:16 < Zaxnyd> actually it doesn't seem different.  nevermind.  I guess it's just the example that's cleaner.
20:18 <@isaacbw> don't think about it so much. Just pick one and start using it
20:18 <@isaacbw> or if you want, print TAP output with console.log
20:18 < eddyb> if you're me, you'll want to clean up the syntax first before using
20:19 < Zaxnyd> okay
20:19 < eddyb> I may use _ instead of t
20:19 < __carlos> when I do "npm install -g <whatever>"
20:19 < __carlos> what's the -g?
20:19 < eddyb> global
20:19 < Zaxnyd> global
20:19 <@mbalho> giraffe
20:19 < jtal> I just read some article that said if I use a non-node proxy when deploying my app I lose some of the benefits of using node...
20:19 < jtal> anyone know what that guy is talking about?
20:20 < eddyb> __carlos: if you're on linux, also add sudo otherwise it will fail (assuming a standard /usr setup)
20:20 < thetristan> ick, global
20:20 < hrmphh> is there any way to pass the objects i use/create with sequelize to the client side? for use in angularjs?
20:20 < __carlos> eddyb: thanks for the tip
20:20 < jas-> When creating a test case, what is the proper assert submethod for comparing Buffer output? My assumption is assert.deepEqual(buf1, buf2) but that isn''t working out for me
20:20 < eddyb> isaacbw: _ => { ... } instead of function(t) { ... }
20:21 < eddyb> jas-: you might want to come up with your own, I guess
20:21 < eddyb> or use an array-specific one, if it exists
20:22 < eddyb> (like deepEqual, but make sure .length is the same and compare for i = 0..length)
20:22 < __carlos> if they're installed globally then this in turn means that wherever I export my project, those packages will be dependencies… fair enough I can state those in package.json … so for the next part.. can I vendor all the requirements before exporting? and also, how can you install all the packages specified in a package.json file?
20:22 < eddyb> __carlos: npm install
20:22 < eddyb> they will install locally, though
20:23 < eddyb> in node_modules, in the current directory
20:23 < __carlos> eddyb: yeah I'm interested in that before exporting… sweet :D
20:23 < thetristan> i've found it better to avoid global altogether
20:23 < thetristan> `export PATH=node_modules/.bin:$PATH` puts the local nom bin folder on your path
20:23 < thetristan> s/nom/npm
20:23 < __carlos> thetristan: well it depends on your space requirements I guess :|
20:23 < thetristan> that way you're always using the right version of a dep for the project
20:24 <@Nexxy> mikeal, ping
20:32 < segomos_> pingboner
20:35 <@Nexxy> segomos_, ?
20:35 <@MI6> joyent/libuv: Ben Noordhuis master * 442d11d : unix: avoid extra read, short-circuit on POLLHUP - http://git.io/fPvxBw
20:36 < mscdex> bnoordhuis: ping
20:37 < jas-> How can I convert a Buffer to a SlowBuffer?
20:38 < bnoordhuis> mscdex: pong
20:38 < bnoordhuis> jas-: why would you want to?
20:38 < rhalff> jas-, setTimeout... 
20:39 < __carlos> any module that reloads my app.js file for express or something… it's quite annoying to make a few changes and have to reset the process entirely :\
20:39 < jas-> The fs.readFileSync() returns a Buffer and the patch I am working on returns a SlowBuffer type. This is a problem when dealing with usage of the assert.deepEquals() for test cases
20:39 <@Nexxy> __carlos, node-supervisor, nodemon
20:40  * rhalff ok, that wasn't  funny and incorrect.
20:40 < __carlos> Nexxy: awesome ^^
20:40 < mscdex> bnoordhuis: er nevermind, disregard :-)
20:42 < __carlos> I'm full of questions today… is there a fixed length list by default in node? something that works in LIFO
20:43 < bnoordhuis> jas-: you should try to return a Buffer. we're going to eradicate SlowBuffers someday. none will be spared
20:44 < jas-> bnoordhuis: No problem, can you give me the correct API call?
20:44 < jas-> New::Buffer() ?
20:45 < __carlos> sorry… I meant FIFO
20:45 < bnoordhuis> jas-: ah, it's complicated in c++
20:46 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:46 < jas-> bnoordhuis: Buffer* buf = Buffer::New(reinterpret_cast<char*>(out), out_len);
20:48 < bnoordhuis> jas-: yeah, that creates a slow buffer
20:48 < jas-> Roger
20:49 < bnoordhuis> jas-: never mind for now. what you can do for your deepEquals check is convert the SlowBuffer to a Buffer
20:50 < bnoordhuis> jas-: new Buffer(slowbuffer, 0, slowbuffer.length)
20:50 < jas-> bnoordhuis: Sounds good. Are there any docs regarding these types of changes?
20:50 < bnoordhuis> jas-: what kind of changes?
20:51 < jas-> bnoordhuis: You mentioned that slowbuffer data types were going away?
20:52 < olalonde> 2013-05-30T20:30:11.000Z
20:53 < bnoordhuis> jas-: ah, that. irc logs
20:53 < olalonde> is that a serialized js date?
20:53 < olalonde> what kind of date format is this called?
20:53 < jas-> lol
20:53 <@Nexxy> ISO 8601
20:53 <@Nexxy> olalonde, 
20:53 < olalonde> Nexxy: thanks
20:53 < olalonde> im trying to make it work with bootstrap-datepicker
20:54 < olalonde> but im not sure how to transform it so datepicker is happy
20:54 <@Nexxy> I just always deal with things internally as epoch
20:54 <@Nexxy> but then again I don't deal with time zones :D
20:55 < olalonde> ahhh d.toISOString()
20:55 < olalonde> right
20:55 <@MI6> joyent/libuv: Bert Belder v0.10 * b9eb402 : include: remove lame comment from uv.h - http://git.io/LuLQjw
20:55 < olalonde> epoch as in unix timestamp?
20:55 <@Nexxy> olalonde, yeah
20:55 < olalonde> well im using w/e sequelize is shooting at me now haha
20:56 <@Nexxy> probably for the best I'd imagine
21:00 < olalonde> nice i can pass that string to Date()
21:04 < tjkrusinski> clear
21:07 < jas-> bnoordhuis: Sorry to keep asking questions. Is it a common practice to require a buffer data type on output? It seems like it is
21:10 < Industrial> Can I use a shell script to collectively start and stop (!) a bunch of node processes? for development ..
21:10 < Industrial> To restart one server when files change is fine, but I want to restart all :P
21:10 < nightfly> sure, why not ;)
21:11 < Industrial> actually, one of the server watches for files and another compiles files. Can I make them eat themselves and restart everything when I give it a signal/cmdline call?
21:12 < Industrial> nightfly: I tried separating them with & in a .sh file but if one program errors the others keep running.
21:12 < Industrial> I guess I could add a killall -9 node; in front..
21:12 < Industrial> but thats kind of whacking a sledgehammer at it
21:12 < thetristan> Industrial: you need to track the PID for each server you start
21:13 < Industrial> thetristan: in a sh file? how? should I take this to #bash?
21:14 < thetristan> problem tho is you're still going to have to restart all of them if one dies and falls over unless you put something like nodemon in front of it
21:14 <@isaacbw> cool people use zsh
21:15 < monokrome> O.o
21:15 < Industrial> thetristan: this is for development.
21:15 < thetristan> tho for your needs you might be able to get away with & and using the wait builtin
21:15 < jas-> Industrial: for process in `ps | grep "app_name" | awk '{ $1 }'; touch /path/to/lock/$1; fi
21:16 < thetristan> you can run those tools in devel too
21:16 < thetristan> i have a watcher that restarts my apps on changes/death when i run in dev
21:16 <@isaacbw> is there any reason you don't want the server itself to write its pid?
21:16 <@isaacbw> that would be the easiest solution
21:17 < thetristan> isaacbw is right, otherwise you have to capture child PID after each fork – `$!`
21:19 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:20 < nero_> i created an app with node+express+angular and got the following routing problem: when starting the server and clicking on links to the routes it works but when reloading the page with /shop (or any other route) i get an error (Error: ENOENT, stat 'C:\DEV\WEB\PROJECTS\iShop\views\product-list.html')
21:20 <@isaacbw> if you want to make it shell friendly, you could just have the server print its pid to stdout (assuming you aren't using stdout for other things)
21:20 < nero_> https://gist.github.com/fuhlig/5681296
21:21 < thetristan> isaacbw: $! shell var captures child pid, no need to write that to stdout
21:21 < nero_> the routing within server.js(express) and app.js(angular) is probably messy but i dont know another way to serve plain html
21:21 <@isaacbw> oh, cool
21:22 < Zaxnyd> this isn't outputting the stadout like I'd expect: https://gist.github.com/Zaxnyd/a87b267fe6b7554d550d  am I doing something wrong?
21:22 < thetristan> $! usage: https://gist.github.com/thetristan/3f649817e95df8fd7933
21:23 <@isaacbw> hmm, I may have misunderstood the original issue
21:30 < nero_> can anyone help me with the express routing problem?
21:30 <@Nexxy> nero_, not until you tell us what the problem is
21:32 <@Nexxy> preferably along with code and any applicable errors
21:45 < CorbinDallas> if I create an empty object {} in node do I still have to worry about hasOwnProperty in a for in loop like I do in normal JS, or is node nicer?
21:45 < CorbinDallas> *different
21:47 < nathan7> CorbinDallas: It's more about whether anyone else fucks with Object.prototype
21:47 < nathan7> CorbinDallas: if you're doing this in a library, something people will reuse - do it
21:47 <@isaacbw> yay javascript
21:47 < CorbinDallas> so you're saying just do it
21:47 < nathan7> CorbinDallas: if it's in your application.. meh
21:47 < nathan7> but I end up moving most shit out of my application into modules
21:48 < CorbinDallas> ok, I'll just keep doing it.  It's a good habit to have I suppose.
21:48 < nathan7> and I end up using mostly higher-order functions from modules
21:48 < nathan7> which is pretty awesome
21:59 < ljharb> CorbinDallas: yes, you absolutely you worry about it. luckily Object.keys already does that for you
22:00 < ljharb> CorbinDallas: so you should just avoid for..in and you're fine
22:00 < CorbinDallas> I"m not familiar with Object.keys - is that new?
22:00 < ljharb> it's in ES5
22:01 < ljharb> so it's in everything newer than IE 8
22:01 < ljharb> and with the es5 shim, it's in everything :-)
22:01 < CorbinDallas> what I'm doing is just server side
22:01 < CorbinDallas> thanks for the info!
22:01 < ljharb> then you don't need to worry about the shim
22:01 < ljharb> but definitely use ES5 methods - Object.keys, Array#forEach, Array#map, etc
22:01 < CorbinDallas> so Object.key[0] is the first key?
22:01 < ljharb> Object.keys(obj) returns an array of the keys
22:02 < CorbinDallas> Oh, ok
22:02 < ljharb> it's not Object#keys (a prototype method) it's a method on the Object object
22:02 < ljharb> to iterate, Object.keys(obj).forEach(function (key) { obj[key]; })
22:02 < CorbinDallas> well, thanks for that - that should make my code cleaner 
22:03 < ljharb> yup, functions all the way down :-) loops are gross
22:07 < Sven_vB> is there a name for that Type#method notation?
22:07 < meltz> bnoordhuis: hey, it's me again :) I have a question related to node internals
22:08 <@isaacbw> Sven_vB: it just means it's an instance function
22:09 < Zaxnyd> this isn't outputting the stadout like I'd expect: https://gist.github.com/Zaxnyd/a87b267fe6b7554d550d  am I doing something wrong?
22:10 < Zaxnyd> is it because the task needs to end before output is flushed?
22:12 < Zaxnyd> I think this answers my question: http://stackoverflow.com/questions/15257729/display-running-child-process-output-in-nodejs-windows
22:21 < Zaxnyd> require('child_process').exec('supervisor -i node_modules/ app.js').stdout.pipe(process.stdout);
22:24 < Sven_vB> isaacbw, is that a style specific to the nodejs docs?
22:26 < Sven_vB> probably not. i just found it in some ruby doc as well
22:29 < inspiron> easiest way to get a list of directory names in a directory
22:29 <@mbalho> ls
22:30 < Zaxnyd> lol
22:30 < inspiron> lol, how do you do that in node.js
22:31 <@mbalho> http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback
22:31 < levilewis> I like this module, but prob overkill for you.. https://github.com/ryanmcgrath/wrench-js
22:32 < meltz> is anyone here comfortable with node.js internals?
22:32 < meltz> I have a complex question
22:34 <@mbalho> the answer is probably in http://nikhilm.github.io/uvbook/
22:34 < Havvy> It's a book about a library!
22:34 <@mbalho> haha
22:34 <@mbalho> i think the lib in libuv stands for liberace
22:35 < Havvy> Still a library.
22:35 -!- mode/#Node.js [+o Nexxy] by ChanServ
22:35 <@mbalho> and the uv refers to liberaces excellent tan
22:35 <@mbalho> bnoordhuis: is that accurate?
22:35 < blueadept> anyone know a good code review tool to use with git?
22:36 <@mbalho> like github.com?
22:36 <@tjfontaine> where "good" is approachable
22:36 < chilts> blueadept: I think some people use Gerrit ... mbalho: GitHub can help but I think he's meaning something more involved :)
22:36 < chilts> anyway, that's two to look at
22:37 < blueadept> mbalho: i'm thinking of something like barkeep, but with some more options
22:37 < levilewis> blueadept, http://www.atlassian.com/software/crucible/overview 
22:38 < blueadept> levillewis: yeah saw this earlier today
22:38 < levilewis> haven't used it myself, but looks cool
22:44 -!- mode/#Node.js [+o Nexxy] by ChanServ
22:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:03 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:04 -!- mode/#Node.js [+o sblom] by ChanServ
23:07 < glassresistor> cls
23:07 < glassresistor> opps
23:07 < DiegoMax> command not found
23:07 < glassresistor> is there a way to create a file with fs.writeFile and the folders its inside if they dont exist?
23:08 <@mbalho> npm install mkdirp
23:08 < ChrisPartridge> glassresistor: I've seen a module
23:09 < glassresistor> ChrisPartridge: mbalho nice was about to compare to mkdirp
23:09 < ningu> what about mkderp if I want to create some derp?
23:09 < julianduque> glassresistor: I use npmjs.org/mkdirp before the writeFile 
23:09 < ChrisPartridge> ningu: no package required to derp
23:09 < julianduque> ^
23:10 < ningu> ChrisPartridge: but how will I do it if it isn't in the standard library?
23:10 < ningu> I guess people find a way
23:18 < gladius> can anybody here help me with an error i'm getting when installing node on redhat 5.9?
23:19 < ningu> don't ask to ask
23:19 < gladius> ./configure   File "./configure", line 434     fpu = 'vfpv3' if armv7 else 'vfpv2'                    ^ SyntaxError: invalid syntax
23:19 < nightfly> Why the fuck doesn't ubuntu have a newer node? </rant>
23:19 < ningu> nightfly: use the ppa
23:20 < bnoordhuis> gladius: check the prereqs in the README
23:20 < ChrisPartridge> nightfly: use chris leas repo
23:20 < ChrisPartridge> gladius: you have no build tools, afaik
23:20 < ChrisPartridge> nightfly: https://launchpad.net/~chris-lea/+archive/node.js/
23:21 < nightfly> Cool, will add to repositories
23:21 < hrmphh> whats the best way to serve models ive created on the backend in node/sequelize (mysql orm) to my front-end angular site? ideally want to use the same data structures
23:21 < gladius> ok thanks - not familiar with the machine i'm installing on but looks like a python issue then
23:22 < ningu> hrmphh: json over ajax?
23:22 < ningu> hrmphh: or you mean the whole model?
23:22 < hrmphh> yeah i guess i meant
23:22 < hrmphh> if im going to be writing services to sling em over http
23:23 < hrmphh> can i somehow re-use the model classes ive created
23:23 < hrmphh> or do they have to be recreated on the client side?
23:23 < hrmphh> (given that both are in js)
23:23 < ningu> hrmphh: well, what do you want to do with the models? you want clients to be able to select/update/delete?
23:23 < hrmphh> yes
23:23 < ningu> somehow I doubt you want a direct SQL passthrough, so
23:23 < hrmphh> obviously not
23:25 < ningu> hrmphh: I don't really know the answer to that. I would probably create a restful api on the server end. what I would look into, I guess, is if you can introspect the sequelize models and generate client versions of them yourself
23:25 < ningu> i.e. introspect for tables, columns, relationships
23:25 < ningu> I might even use an ejs template to generate the client models to call the proper http endpoint
23:26 < ningu> afaik no one has done this already but it doesn't sound too hard to rig together, depending how elaborate you want the models to be
23:27 < ningu> and you might also have to do something smart on the server end if you wanted that part not to be overly tedious
23:27 < ningu> loop through the models and use them to define app.get, app.post etc.
23:27 < ningu> but the risk here is always that not every model is identical and it's a bit hard to do this all automatically, and hard to leave hooks to insert custom code
23:31 < whiskeynerd> I'm new and am trying to figure out how to do account creation with passport using an example I found on github but am having trouble with require
23:31 < whiskeynerd> here https://github.com/madhums/nodejs-express-mongoose-demo/blob/master/server.js  on lines 32-35 he requires user from
23:31 < whiskeynerd> https://github.com/madhums/nodejs-express-mongoose-demo/blob/master/app/models/user.js
23:31 < whiskeynerd> but user.js doesn't have any exports and module.exports so how is the code in user.js accessed?
23:32 < ningu> User is a mongoose model
23:32 < ningu> mongoose exposes methods for defining it an accessing it
23:33 < ningu> oh, I see
23:33 < ningu> yeah, so require(models_path+'/'+file) just executes the code in the file
23:33 < ningu> it doesn't actually return anything in this case
23:33 < ningu> but it has the side effect of defining a mongoose model and therefore making it available from mongoose.model(...)
23:33 < whiskeynerd> I thought so
23:34 < ningu> whiskeynerd: I actually don't like that pattern very much
23:34 < ningu> but that's how mongoose does it
23:34 < whiskeynerd> in my project though it only works if I have the user.js code in the main app.js file
23:34 < whiskeynerd> if I try to do what he does it doesn't work for some reason.  User is undefined when I try to use the post route
23:34 < ningu> whiskeynerd: you can't require() it?
23:34 < ningu> well I guess we'd have to see your code
23:34 < whiskeynerd> I do
23:34 < ningu> but you must be doing something different
23:35 < whiskeynerd> hold on a sec.  do you know if free bitbucket accounts lets you make your code public?
23:35 < ningu> I think so
23:37 < whiskeynerd> I hadn't pushed the changes yet so I'll just use pastebin
23:37 < whiskeynerd> app.js :   http://pastebin.com/S0W0Zy0L
23:37 < ningu> ok
23:37 < whiskeynerd> user.js  :  http://pastebin.com/V3Z4FLQ5
23:39 < ningu> two choices: (1) in app.js, require('./users.js'); var User = mongoose.model('User') (2) in users.js, module.exports = mongoose.model('User',UserSchema); 
23:39 < Ganymede> Hello, was wondering about this method to returning a 413 when the size of an HTTP post is too large: http://stackoverflow.com/questions/4295782/how-do-you-extract-post-data-in-node-js/12022746#12022746 The answerer destroys the connection when the request is too large. Is it valid to do so without supplying "Connection: close"? And what if that TCP connection is being shared by multiple users (e.g. it's
23:40 < Ganymede> between a connection-reusing reverse proxy and the node.js webserver)? And is it valid HTTP to return a response before the request is finished?
23:40 < ningu> choice (1) makes it more like the original
23:40 < ningu> but both work fine
23:42 < whiskeynerd> mongoose gives me an error with (1).  "Cannot read property 'options' of undefined"
23:43 < whiskeynerd> I'll try (2)
23:43 < ningu> whiskeynerd: can you pastebin the error for (1)?
23:44 < AAA_awright> Ganymede: Terminating the underlying TCP connection is fine... but what you should be doing is checking Content-Length if provided, and 100-continue, if available
23:44 < AAA_awright> And checking that the posted data doesn't exceed Content-Length
23:44 < whiskeynerd> ningu: http://pastebin.com/S09Ucpne
23:46 < ningu> whiskeynerd: did you take out the var User line from users.js?
23:46 < ningu> if so, don't do that :P
23:48 < whiskeynerd> the error happens either way
23:48 < ningu> hrm
23:48 < ningu> I must be forgetting something obvious
23:49 < Ganymede> AAA_awright: So you're saying browsers will properly handle the unexpected close of the TCP connection in the middle of uploading its request? That doesn't address the issue of whether there are multiple end-users sharing the same TCP connection.
23:49 < Ganymede> I guess if I don't want the client to waste my bandwidth by continuing to send data, I have no choice though
23:50 < ningu> whiskeynerd: you may need to move the mongoose.connect line up before require('./users.js')
23:50 < ningu> whiskeynerd: I can't remember, I haven't used mongoose in a while
23:50 < ningu> it doesn't seem like it should matter, but ... 
23:51 < whiskeynerd> still error
23:52 < whiskeynerd> I tried the second way you suggested earlier and the server worked but posting showed a User undefined error 
23:52 < ningu> whiskeynerd: well, it's clearly something fairly simple but I think my blood sugar is too low right now to think of it, sorry :P
23:53 < ningu> I need to go get something to eat
23:53 < whiskeynerd> that's fine, thanks for the help
23:53 < ningu> seeing the whole set of code would help, though
23:53 < ningu> good luck
23:54 < whiskeynerd> those are the only two files that have a problem which doesn't exist if they're in the same file
23:54 < whiskeynerd> thanks
23:54 < AAA_awright> Ganymede: TCP can close at any time for any reason
23:54 < AAA_awright> It's just a reset packet
23:56 < AAA_awright> Ganymede: The client shouldn't be sending data on a reset connection, if that's what you mean. And it won't continue to send data if the server doesn't acknowledge it received it, that's called congestion control
23:57 < Ganymede> AAA_awright: Yeah, but that's suboptimal because if I have the server behind a reverse proxy and a user POSTs and excessively large request, causing me to close the connection, the other users who are in the middle of a request on that same TCP connection will receive an error in their browser saying the TCP connection was ended prematurely (assuming the reverse proxy doesn't re-attempt the request on a
23:57 < Ganymede> different connection).
23:58 <@MI6> joyent/node: Trevor Norris master * 4b31a2d : process: use Tock for nextTickQueue items (+2 more commits) - http://git.io/1pA1Fw
23:58 < AAA_awright> Ganymede: That's why you check the Content-Length and 100-continue before accepting the entity body in the request
23:59 < AAA_awright> If there's no content length, you can indicate that clients are required to send one
--- Log closed Fri May 31 00:00:35 2013
