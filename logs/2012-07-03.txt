--- Log opened Tue Jul 03 00:00:11 2012
--- Day changed Tue Jul 03 2012
00:00 < mmalecki> maxogden: sure he does!
00:00 < tim_smart> mmalecki: I was playing around with custom string objects. You could do something like: c('string').red.bold.raw.split('')
00:00 < mmalecki> tim_smart: yeah, if I was to reimplement colors.js, I'd do it like that
00:01 < piklu> mifadie0 : ???? on ??
00:01 < piklu> what ?
00:01 < piklu> mifa?
00:01 < mmalecki> maxogden: is he, like, drinking vodka on stage or something?
00:01 < mmalecki> maxogden: I've heard that's what Russian people do!
00:01 < tim_smart> mmalecki: I started a branch, but I got me some servers to code. Might re-visit it later.
00:03 < bobbyJ> #java is invite only?
00:03 < TimeTurner> why do I get [Object object] on console.log ?
00:03 < wltsmrz> The object is being toStringed()?
00:03 < mmalecki> bobbyJ: it's a suggestion not to use java, ever
00:03 < bobbyJ> mmalecki lol
00:03 < tim_smart> Each time I look at libuv it makes me want to code servers in C
00:04 < mmalecki> tim_smart++
00:04 < mmalecki> uv_http module would be kinda cool
00:04 < bobbyJ> does node use classes and interfaces and such?
00:04 < bobbyJ> or is it a totally diff animal
00:04 < tim_smart> bobbyJ: What do you mean by classes?
00:05 < tim_smart> Are you talking about the internal c++ code or what?
00:05 < bobbyJ> class InterestBearingAccount extends Account
00:05 < bobbyJ> {
00:05 < bobbyJ> etc
00:05 < tim_smart> bobbyJ: You know node is javascript right?
00:05 < wltsmrz> http://en.wikipedia.org/wiki/Prototype-based_programming
00:05 < bobbyJ> Im learning
00:06 < tim_smart> bobbyJ: Oh, then read up on prototypical languages.
00:06 < tim_smart> Its all meta man.
00:06 < tim_smart> Life is an object in javascript.
00:06 < bobbyJ> Java == Apache2 and Javascript == sql
00:06 < bobbyJ> ish
00:06 < mmalecki> tim_smart: don't get too existentional!
00:06 < wltsmrz> That's definitely accurate, bobbyJ
00:07 < tim_smart> Java == Java, javascript === javascript
00:07 < bobbyJ> so im trying to learn both Java + node.js <=> javascript
00:08 < tim_smart> Java is completely different
00:08 < bobbyJ> so im learning
00:08 < bobbyJ> is the structure similar?
00:08 < tim_smart> bobbyJ: Only the syntax is similar
00:08 < bobbyJ> I see
00:08 < bobbyJ> le sigh
00:09 < tim_smart> The language constructs and concepts are almost opposite.
00:09 < TimeTurner> that's what i get when i do console.log(req);
00:09 < TimeTurner> can't see the object :/
00:09 < wltsmrz> Is it already a string?
00:09 < wltsmrz> console.log(typeof req)
00:09 < bobbyJ> nah its cool I am on a programmingg kick recently learning / relearning SQL, php, Java, Node.js, javascript
00:10 < wltsmrz> You can't think in java while writing javascript, bobbyJ
00:11 < wltsmrz> The scope will kill you before you see it coming, honest
00:11 < bobbyJ> I know
00:11 < wltsmrz> :thumbsup:
00:11 < bobbyJ> I have a programmer buddy of mine teaching me
00:11 < tbranyen> scope is simple in javascript... happens in functions or global
00:11 < tbranyen> bam
00:12 < bobbyJ> so as I code my Perl/Python github/launchpad linux bs we work on Java/Node.js stuff 
00:12 < bobbyJ> learning the diff and similarities in php / javascript
00:12 < bobbyJ> fun times
00:20 < tim_smart> bobbyJ: Quick something I made https://gist.github.com/3036591
00:21 < tim_smart> Quick use of prototypes compared to the typical class stuff.
00:21 < bobbyJ> tim_smart omfg and thats Node?
00:21 < tim_smart> Yeah
00:21 < bobbyJ> wow
00:22 < bobbyJ> so much cleaner and pythonish
00:22 < Raynos> How do I install node & npm in a local /home/USERNAME/node_install folder ?
00:22 < bobbyJ> how do you reference an outside file? Like for images etc?
00:22 < Raynos> I dont want to use sudo for make install or sudo for npm install -g
00:22 < Raynos> and I can just add the local bin to my PATH
00:23 < tim_smart> bobbyJ: See the http://nodejs.org/api docs
00:23 < tim_smart> Lots of stuff you can require()
00:23 < tim_smart> var fs = require('fs') <- file system
00:25 < bobbyJ> switchin to node mode
00:26 < wltsmrz> Don't forget your shades
00:27 < tim_smart> bobbyJ: Updated that gist with some important stuff on the bottom
00:33 < bobbyJ> tim_smart when my programmer buddy and I get done with our video series I want you to look at it I think you would enjoy it
00:33 < tim_smart> OK. bobbyJ you should look into luvit, even though I'm slightly bias.
00:34 < tim_smart> libuv + luajit is a nice combination.
00:34 < tim_smart> And lua is a super-clean language without the threat of the ecma specs taking a dump on the language.
00:35 < tim_smart> (Only saying this because it seems you are on a lets-try-everything spree)
00:35 < bobbyJ> yuppers?
00:35 < bobbyJ> lol
00:43  * other_guy wants to dick punch the creators of CoffeeScript
00:43 < tbranyen> other_guy: *creator
00:43 < jocafa> how do you /really/ feel?
00:43 < EricBlade> hey guys, anyone offer a suggestion for what might be going wrong with my fs functions? all of them are returning either ENOACCES or EBADF, when called in one particular piece of code, but work fine from another
00:44 < wltsmrz> https://github.com/jashkenas/coffee-script/graphs/contributors
00:44 < tbranyen> wltsmrz: note, that says contributors, not creators ;-)
00:44  * EricBlade is happy he will not be getting dick punched today, most likely
00:45 < wltsmrz> To create coffeescript is to contribute to it
00:45 < wltsmrz> The creators of coffeescript are its contributors
00:45 < tbranyen> yeah thats why they are different words
00:45 < tbranyen> i see
00:46 < other_guy> tbranyen, I don't believe you.  CoffeeScript *must* have been a decision by a frustrated committee of Ruby developers trying insanely to force Python and Ruby to have a bastard love child in a Javascript shaped test tube.
00:46 < tbranyen> lol
00:46 < tbranyen> its is definitely conspiracy worthy
00:47 < mmalecki> lolololol
00:47 < mmalecki> other_guy: your twitter? I'm totally oh'ing that :D
00:47 < other_guy> @n_aschbacher
00:48 < mmalecki> well, fucking 160 chars
00:49 < other_guy> I seriously don't get it.  It solves only superficial "problems" while adding about a half dozen real problems, and at the end of the day you don't get anything awesome out of the language transformation process like you do with Streamline.js
00:52 < s5fs> other_guy: howdy
00:52 < other_guy> s5fs
00:52 < other_guy> word :-)
00:53 < s5fs> i'm waiting to hear about nodeconf after hours, expect it'll wrap up around 7ish
00:55 < tim_smart> other_guy: Streamline.js is for people who don't use know how to do control flow properly
00:57 < tim_smart> For some reason a lot of people think it is a myth that you can code plain async javascript without making mountains.
00:57 < other_guy> mmalecki, abriged version:  CoffeeScript was born from a frustrated committee of Rubyists mercilessly dry humping Python until they produced a bastard Javascript test tube baby.
00:58 < s5fs> jesus
00:58 < other_guy> tim_smart, I know… but at least it does something.
00:58 < tim_smart> other_guy: It was created by a guy who coded quite a bit of javascript actually
00:58 < tim_smart> ... as well a quite a bit of ruby.
00:58 < tim_smart> *as well as
00:59 < other_guy> tim_smart, that much is obvious.
01:00 < other_guy> s5fs, perfect.  Let me know.  SMS me, because I'll already be over off of East Burniside up by Heart Coffee by then
01:00 < s5fs> other_guy: will do
01:02 < other_guy> To be completely fair to the CoffeeScript folks… it's really not their fault.  I should be bitching a blue streak at the module developers that decided to build core useful functionality on top of a weird esoteric abstraction that is, at best, highly annoying to debug.
01:11 < owen1> anyone from nodeconf want to share some insights?
01:12 < other_guy> It turns out that isaacs was actually a push broom in a horse costume in a man costume in a woman costume this whole time.
01:12 < other_guy> :-p
01:14 < owen1> tim_smart: there should be a project on github that shows how to write good js code with callbacks alone.
01:30 < myndzi> object eventemitter has no method 'destroy' at socket.onclose (stream.js) ?
01:30 < mmalecki> myndzi: with union
01:30 < mmalecki> ?
01:30 < mmalecki> or what are you using?
01:31 < myndzi> it appears to be entirely within node 0.8.1 code (the stack trace)
01:31 < myndzi> process.nextTick -> socket._destroy -> socket.emit -> socket.onclose -> error
01:31 < mmalecki> right, are you using something like connect, union, buffered stream?
01:32 < myndzi> oh, no
01:32 < myndzi> http.request
01:32 < mmalecki> oh, wow
01:32 < myndzi> but i did need to supply my own socket
01:32 < myndzi> so that might be what's going on
01:33 < myndzi> i am just using new net.Socket() though
01:34 < myndzi> i see, it's calling .destroy on the destination of the pipe
01:35 < myndzi> so i need to check the parts and verify that it's there on all of them
01:36 < myndzi> i only pipe to zlib though o_O
01:37 < Spion> why does mircscripts.org come to mind? :)
01:37 < myndzi> there's a site i haven't seen mentioned in years
01:37 < myndzi> :P
01:38 < Spion> haha :)
01:38 < myndzi> from mirc to javascript, big step up right? :P
01:38 < myndzi> i swear js is almost as bad as mirc
01:38 < myndzi> sometimes :)
01:38 < Spion> personally i think js is just fine :)
01:39 < Jakey> its confusing
01:39  * Jakey slaps Spion myndzi 
01:39  * myndzi slaps Spion Jakey
01:39  * Jakey slaps Spion myndzi 
01:39  * myndzi slaps Spion Jakey
01:39 < Jakey> i seee
01:40 < Aria> /oper y'know
01:40 < Spion> neat object literal syntax, objects are hashes, decent closures. yeah, it has slightly awkward syntax and type conversion but it doesn't matter much in practice :)
01:40 < Spion> awkward anonymous function syntax
01:41 < myndzi> another one doesn't take the bait :(
01:41 < myndzi> i think i gave irc too much credit for curiosity when i wrote that script
01:42 < Spion> what bait? what script? :)
01:43  * myndzi points up
01:44 < Spion> that makes sense, I see no bait there :P
01:45 < myndzi> that's what i was complaining about :)
01:45 < myndzi> might just be that nobody writes those anymore
01:45 < myndzi> there used to be a lot of them and they'd annoy people
01:45 < myndzi> so people would try to exploit them to say stupid things
01:45 < Aria> I'm just used to scripts being a LOT more interesting than a one-liner.
01:48 < Aria> The manifesto in the new npmjs site is awesome.
01:49 < jocafa> link?
01:49 < Aria> https://github.com/isaacs/npm-www
01:50 < diegovio1a> i wish there was something like npm in ruby
01:50 < mmalecki> diegovio1a++
01:50 < jocafa> bundler?
01:50 < diegovio1a> bundler sucks
01:50 < Aria> Bundler so sucks.
01:50 < Aria> I keep thinking I should make one.
01:50 < mmalecki> bundler is the worst package manager ever
01:50 < diegovio1a> bundler is bandaid for rubygems
01:50 < Aria> Something rediculously simple. Install locally. Screw gems. JSON for the metadata format, no you don't get to use code for it. Deal with it.
01:50 < Jakey> NODE.JS IS THE WORST FRAMEWORK 
01:50 < Jakey> EVER
01:51 < Aria> NODEJS ISNOT A FRAMEWORK
01:51 < diegovio1a> turn on top of turn doesn't make a good system
01:51 < Jakey> ...................
01:51 < Jakey> DERP
01:51 < Jakey> much?
01:51 < diegovio1a> s/turn/turd/
01:51 < Aria> Gems is why I left Ruby.
01:52 < Jakey> yes PHP IS MUCH BETTER
01:52 < Jakey> <3 PHP
01:52 < purr> Jakey: I think you meant '-- PHP'.
01:52 < purr> Let it be known that Jakey hates PHP.
01:52 < mmalecki> hahahaha
01:52 < mmalecki> purr: <3
01:52 < Jakey> no i do not you silly bot
01:52  * Aria sighs. Trolls.
01:52  * Jakey slaps Aria 
01:53 < Jakey> ruby language sucks ass its syntax is like vb.net
01:53 < Lorentz> Q. $foo = 'abc'; return (int) $foo == $foo; what is returned?
01:53 < diegovio1a> Jakey: js sucks too
01:53 < diegovio1a> i'd rather be writing perl
01:53 < Jakey> i would kill myself before i learn perl
01:54 < Lorentz> answer: true
01:54 < Lorentz> >php
01:54 < diegovio1a> lol
01:54 < Jakey> just stick with one language and be done
01:54 < Jakey> and thats php
01:54 < Jakey> lamp stack is there is to it
01:54 < Jakey> all there is to it
01:54 < wltsmrz> Did you solve your probem, TimeTurner_?
01:55 < tim_smart> Jakey: PHP has a horrible standard library
01:56 < TimeTurner> yep
01:56 < TimeTurner> util.inspect(req) :)
01:56 < TimeTurner> the circular references were causing the issue
01:56 < TimeTurner> and console.log() automatically does a toString() on any object passed so that wouldn't have worked wither
01:56 < TimeTurner> either*
01:57 < tim_smart> My favorite scripting language right now is lua
01:57 < tim_smart> Javascript is not far behind
01:57 < Aria> Lua's delightfully small.
01:58 < Jakey> tim_smart, ppl say its horrible never explain how
01:58 < Aria> Lua's like a good JS that doesn't work in the browser.
01:58 < Jakey> Aria, but not its VM
01:58 < TimeTurner> node-lua
01:58 < tim_smart> Jakey: I coded with PHP for a year.
01:58 < mmalecki> how did we even end up nerdfighting over programming languages?
01:58 < Jakey> tim_smart, irrevelant
01:58 < Aria> mmalecki: Trolling and we took the bait.
01:59 < Jakey> mmalecki, all because of you
01:59  * Jakey troll slaps Aria
01:59 < Aria> (I'm a php programmer by day currently. I'm || this close to writing a PHP interpreter in Node.)
01:59 < Aria> (So that then I can start using node and then be free of PHP)
01:59 < tim_smart> Jakey: Things like explode(delimiter, string), I was expecting it to be explode(string, delimiter)
01:59 < Lorentz> Aria: I wish you luck
01:59 < Aria> Heh. And explode is one of the good ones1
01:59 < Lorentz> for that is a dangerous path to tread on
01:59 < Aria> It's even got the same order as its inverse.
01:59 < kuja> Aria: Good luck with that :) .. PHP has no language specification
02:00 < mmalecki> and you have to reproduce bugs
02:00 < mmalecki> or half of existing code won't work, lol
02:00 < Aria> kuja: I'm not worried about that. It's got a relatively large test suite, a killer app (wordpress), and enough inter-version gotchas to be able to get in the zone with no trouble.
02:00 < Aria> Besides, I only have to care about the app I work on at work ;-)
02:01 < Aria> And it's barely using PHP 5.3 now.
02:01 < Jakey> well guess what...
02:01 < Jakey> i don't node.js scales
02:01 < Jakey> derp
02:01 < Jakey> don't think*
02:01 < mmalecki> because nothing scales on its own?
02:01 < Aria> Scales across what?
02:02 < mmalecki> so, yeah, you're totally right here
02:02 < Aria> "Scales" is a meaningless thing without some units.
02:02 < Jakey> across large of clusters of server
02:02 < Aria> "Spiderman scales" "Walls, that is."
02:02 < Aria> Oh?
02:02 < Aria> I've no trouble doing so.
02:02 < Aria> Depends on how independent your requests are though. 
02:02 < Aria> If you do what PHP does, it scales just fine. For things PHP is good at.
02:02 < mmalecki> Aria: WEBSCALE, OBVIOUSLY
02:03 < Aria> If you do what network routers do, it's good at what network routers are good at.
02:03 < diegovio1a> fuck everything
02:03 < diegovio1a> terminfo sucks
02:03 < Aria> But no, there's no magical "makes scaling easy" language. Or runtime. Or paradigim.
02:03 < tim_smart> mmalecki: The only people who need to do stuff web scale is Google.
02:03 < Aria> diegovio1a: Yes it does.
02:03 < Aria> tim_smart: And Amazon.
02:04 < mmalecki> tim_smart: and probably few companies you never heard of :)
02:04 < Aria> (actually, we do 70k concurrent users at work. It's an interesting if small level of complexity)
02:04 < tim_smart> Aria: They fail at that, they can't event survive an electrical storm.
02:04 < Aria> tim_smart: They were up just fine after the last one.
02:04 < diegovio1a> why they won't fucking support <C-left> <C-right> is fucking beyond me, I know I'm supposed to use HJKL or ^w ^b to move around in vim but then actually using arrow keys will delete lines from my code and or insert crap like "d" and "c"
02:04 < Aria> tim_smart: Only VA went down. And they've never said that single data center uses are stable.
02:04 < diegovio1a> all over the place
02:04 < tim_smart> Aria: I'm just compaining because the site I work on went down for a while because of that.
02:04 < Aria> diegovio1a: What terminal?
02:05 < diegovio1a> Aria: this happens with konsole, xterm, urxvt, etc
02:05 < Aria> tim_smart: I bet. Everyone's always caught off guard since it's just reliable enough to lull people into a sense of complacency.
02:05 < diegovio1a> Aria: but this happens when I start vim inside screen/tmux or outside of it, as long as I have TERM=linux or TERM=screen
02:05 < Aria> diegovio1a: Weird! Guess I've never used C-arrow.
02:05 < diegovio1a> Aria: it's a problem with those term dbs
02:06 < Aria> Wait, =linux?
02:06 < Aria> That's the console. You use that?
02:06 < diegovio1a> but we're in 2012, why they won't support arrow keys is beyond me
02:06 < Aria> Why not the terminal type you actually use?
02:06 < tim_smart> export TERM=xterm
02:06 < diegovio1a> TERM=xterm works
02:06 < Aria> (now that said, screen and tmux are an interesting problem in that they make that value dynamic)
02:06 < tim_smart> I use urxvt so I have to do that sometimes
02:06 < diegovio1a> but not 'screen' or 'linux'
02:06 < Aria> (and screen at least sucks.)
02:06 < Aria> Well, yeah. linux != xterm
02:06 < diegovio1a> Aria: tmux uses the screen terminfo shit too
02:06 < diegovio1a> so it happens there as well
02:06 < Aria> And screen proper is super limited.
02:07 < Aria> (only works by accident, in that things it doesn't interpret get passed through. Mostly.)
02:07 < diegovio1a> I use tmux so it happens with tmux also
02:07 < diegovio1a> but i mean
02:07 < Aria> Yeah. . . That's a much harder problem to solve. 
02:07 < Aria> But use your real terminal type.
02:07 < diegovio1a> but why they won't solve this...
02:08 < Aria> Because it's Hard.
02:08 < Aria> You have to interpret the full set of terminal capabilities, then dumb it down for what's actually connected.
02:08 < Aria> That's not easy.
02:08 < Aria> Possible, but a long tail project.
02:08 < Aria> But if you're using xterm-compatible, use an xterm TERM entry.
02:08 < diegovio1a> they should just see what 'TERM=xterm' is doing and fix the damn thing with 'screen' and 'linux' TERM also
02:09 < Aria> Why would you declare linux?!
02:09 < diegovio1a> I mean TERM=linux
02:09 < Aria> Very few people use that terminal.
02:09 < Aria> Why would you do that?
02:09 < Aria> It's not like you're using a linux terminal.
02:09 < diegovio1a> I use the linux framebuffer console sometimes
02:09 < diegovio1a> KMS
02:09 < mmalecki> oh, wow. 4 AM!
02:09 < tim_smart> diegovio1a: Wait, were you slandering vim and hjkl navigation before?
02:09 < Aria> Okay, in that case, use linux when you do that.
02:09 < tim_smart> Get out if you were.
02:09 < Aria> But ONLY then.
02:10 < Aria> Or, if you use tmux or screen, get used to lowest-common-denominator.
02:10 < diegovio1a> tim_smart: what is your fucking problem?
02:10 < Aria> (Or figure out what your highest common denominator is)
02:10 < diegovio1a> douchebag
02:10 < tim_smart> diegovio1a: Hah
02:10 < Aria> (and use that. It's not screen or linux)
02:10 < Aria> (I bet it's xterm or xterm-256color.)
02:10 < Jakey> diegovio1a, hahahahahahahahahahahahahahhahahahahahahahhahahahahahahahhahahahahahahahhahahahahahahahhahahahahahahahhahahahahahahahhahahahahahahah
02:11 < tim_smart> diegovio1a: My development environment consists of arch linux, awesome wm, urxvt terminal, gnu screen and vim.
02:11 < mmalecki> I have a problem with understanding what the fuck is going on in here
02:11 < diegovio1a> sorry i think i read that wrong
02:11 < wltsmrz> I think someone founda  bar of chocolate in their pocket, mmalecki
02:11 < Aria> I don't envy tmux and screen their jobs.
02:12 < diegovio1a> tim_smart: i use archlinux too 
02:12 < diegovio1a> tim_smart: sorry misunderstanding
02:12 < tim_smart> diegovio1a: I read it as sarcasm anyway
02:12 < diegovio1a> tim_smart: ok
02:12 < diegovio1a> i'm just fucking tired of random quirks like this
02:13 < diegovio1a> i feel like i'm doing more bug reporting than using my computer
02:14 < diegovio1a> i'm going to send an email to the ncurses mailing list
02:15 < diegovio1a> it seems like enough bitching won't change this
02:15 < diegovio1a> https://github.com/godlygeek/vim-files/blob/master/plugin/terminalkeys.vim
02:15 < diegovio1a> https://gist.github.com/3036384
02:16 < diegovio1a> that stuff works for a workaround but i don't like working around bugs like this
02:16 < elpadron> im building my client page (socket.io) in javascript via long string '\     blah \   blah\';  but when i view source in the browser there are no new lines, is there anyway to trick it so i can read my own code when i am using firebug ?
02:17 < diegovio1a> why can't shit just work for once
02:17 < diegovio1a> ruby is full of crap like this also
02:17 < Aria> How about this: Don't use a terminal type you're not using.
02:17 < Aria> If you're using an xterm _tell your software so_
02:18 < tim_smart> What is the TERM of the linux framebuffer?
02:18 < Aria> linux
02:19 < tim_smart> My computer boots to the framebuffer login, but I still use xterm usually.
02:19 < Aria> And then make sure you use the greatest common denominator among the terminals you use if you use tmux or screen
02:19 < tim_smart> So things like C-L and C-R work properly over ssh etc.
02:19 < Aria> And ... well, terminals with vastly different implementations or capabilities, this is a hard problem.
02:19 < Jakey> yeah
02:19 < Jakey> for instance the shitty putty
02:20 < Aria> Putty's not that bad. Not very buggy, pretty consistent.
02:20 < Aria> Not that capable, but it's no plain vt102.
02:20 < Jakey> well i meant entering keybord combination
02:20 < Jakey> like copy paste fucking sucks
02:21 < elpadron> an cryhard!
02:21 < tim_smart> urxvt doesn't come with X clipboard support by default.
02:21  * Aria shrugs. Works for all my coworkers who use it.
02:21 < Aria> tim_smart: Wow, really"?!
02:21 < tim_smart> I have a slew of plugins though.
02:21 < tim_smart> Aria: Well, at least mine didn't.
02:21 < elpadron> pfft, whats wrong with xterm :P
02:22 < tim_smart> Aria: I have things like url select, vi-like text selection installed on my setup though.
02:22 < Aria> elpadron: Lack of tabs for me. But your mileage may vary!
02:22 < supernaught> hey all
02:22 < Aria> tim_smart: Interesting.
02:22 < tim_smart> And if I need tabs etc, I just open a screen session
02:22 < supernaught> I'm new to web programming and am trying to find out if Node.js is something I can use with S3
02:23 < elpadron> what is S3...
02:23 < wltsmrz> Simple Storage Service
02:24 < elpadron> openshift.com
02:24 < supernaught> I'm trying to build a very simple image uploader for a wedding
02:24 < Jakey> i like the concept but node.js needs to advance more
02:24 < wltsmrz> Have you checked out the node modules wiki, supernaught?
02:24 < elpadron> supernaught: use php
02:24 < wltsmrz> Looks like there are a couple modules using S3. Maybe you can learn something from them.
02:24 < supernaught> did not know it existed. I'll check it out, thanks
02:24 < elpadron> you don't need events to make an image uploader
02:25 < Aria> supernaught: Sure can. S3's just HTTP, so nothing weird there.
02:25 < supernaught> Thanks all!
02:25 < wltsmrz> You becha
02:27 < tim_smart> isaacs: Damn you and your sneaky techniques, trying to increase visit duration time on new.npmjs.org by not letting me logout >.<
02:27 < tim_smart> No matter how much I click the log out link
02:30 < MrV> does anyone here use the sqlite3 module? I am having trouble deploying with that dependency... when I try to start node it throws an error "Unable to load shared library .../sqlite3_bindings.node" 
02:31 < MrV> do I need to build the module after deploying to my server since it has c++ binding?
02:35 < Aria> MrV: Yes. 
02:40 < MrV> Aria: is there a generally accepted workflow for deploying a node project with modules that have this type of binding? 
02:41 < Aria> MrV: Build locally and pack it all up and send to server, or run build on the server.
02:51 < coffeecup> is it possible to set the --node-version command line arg in package.json ? 
02:55 < bnoordhuis> MrV, Aria: local builds only work (reliably) if your local environment is identical to the server
03:03 < MrV> bnoordhuis: being that it is an npm module, is there a way to run the build scripts on the server as part of a git post-receive hook?
03:03 < mmalecki> MrV: why not PaaS?
03:04 < MrV> it seems strange to me that I would re-build a module every time since it won't be changing 
03:08 < MrV> mmalecki: just trying to learn what can be done without the various PaaS options
03:09 < mmalecki> MrV: oh, cool. you can use `npm rebuild`, but it always rebuilds too
03:10 < Aria> You could commit the build products. But then that ties you to architecture and often OS
03:13 < mmalecki> also, commiting binaries sucks
03:14 < bradleymeck> build servers for the win
03:25 < Raynos> what's the glob pattern for everything in the cwd?
03:26 < SomeoneWeird> ./* ?
03:27 < tim_smart> Raynos: ./**
03:27 < tim_smart> That does sub directories  as well
03:28 < Raynos> badass
03:28 < tim_smart> Rather, two levels deep actually
03:29 < tim_smart> Usually you would specify a recursive flag of some sort for most command tools that require it.
03:30 < tim_smart> grep -R pattern ./ etc
03:31 < TehShrike1> So apparently there's some sort of conference happening around now? 8-|
04:13 < dnnsmanace> any tips on piping a stream to S3?
04:13 < dnnsmanace> been messing around with knox but no go
04:14 < dnnsmanace> trying to read a stream and save it directly to S3
04:39 < tim_smart> dnnsmanace: Are you using a S3 client library?
04:41 < dnnsmanace> knox
04:41 < dnnsmanace> yes
04:41 < dnnsmanace> i am able to write to disk, then read stream and write it to amazon
04:41 < dnnsmanace> but not directly have the stream write to amazon without saving locally
04:41 < dnnsmanace> was wondering if anyone was able  to do it
04:42 < dnnsmanace> tim_smart: i am using knox, i think its one of the most populaer
04:51 < blakmatrix> meteor.js thoughts?
04:53 < tim_smart> dnnsmanace: Have you looked at the putStream method.
04:53 < tim_smart> I had a quick look at the README
04:54 < tim_smart> client.putStream(fs.createReadStream('some-file', '/some-data.json', callback)
05:01 < tim_smart> Urgh, missing a ) above ^
05:02 < dnnsmanace> tim_smart: but that requires reading a file off fs
05:03 < tim_smart> dnnsmanace: That is just an examples. A stream is just an special event emitter.
05:04 < tim_smart> var req = http.request(options); req.on('response', function (res) { client.putStream(res, path, callback) }); req.end()
05:04 < tim_smart> That is another example
05:16 < utu> hello guys, i'm trying to create server app where multiple clients connect, and I want keep persistent tcp/http connection, so I can get to those clients later after some time, is this done by using keep-alive?
05:17 < utu> also to send some data to clients, I need to keep a list of IP addresses so I can get back to clients?
05:19 < TimeTurner> utu: sounds like you want something like websockets
05:19 < TimeTurner> depends on how long you plan to keep the connection open
05:20 < utu> TimeTurner: until client forcibly closes his connection. So as long as client is up
05:20 < utu> any other 'terms', 'modules' that I should research?
05:23 < tim_smart> utu: Just use sockjs or something?
05:23 < tim_smart> I think it some level of redundancy
05:24 < utu> ^ ok will look into that, this is interesting and very simple, maybe it will work well for me: http://stackoverflow.com/questions/7007039/keep-track-of-connected-clients-with-nodejs
05:34 < dob_> Everyauth question: I want to register different types of users and so I need different registerViews. Is there any way to do that?
05:42 < thealphanerd> I love the way functional programming makes my head hurt
05:52 < tonini> howdy folk :) Question: I'm testing with mocha atm, and with module.exports = ... I made my js modules available for the test, but have anyone an idea how to prepare the modules to also use in the browser?
05:52 < TimeTurner> browserify
05:54 < vrlogrs> hey guys
05:54 < vrlogrs> need some people to test out my game: http://209.141.47.151/chess
05:54 < vrlogrs> it's made in node.js :)
05:55 < vrlogrs> please and thank you
06:00 < diegovio1a> vrlogrs: is it open source?
06:01 < vrlogrs> not yet
06:24 < myndzi> how can i find out more about an object in a particular error?
06:25 < myndzi> it gets thrown from process.nextTick and just says "Object #<EventEmitter> has no method 'destroy'"
06:25 < myndzi> the error doesn't help me find where thee problem is at all :|
06:25 < myndzi> i might have better luck if i knew which object the event emitter was
06:28 < owen1> i have a usersCollection object (mongo) that i defined in server.js. how to make it available in my dataAccess function? it exist in a seperate module.
06:34 < _Tristan> is there one single complete dnode example on the internet?
06:36 < wltsmrz> https://github.com/substack/dnode
06:42 < _Tristan> I find it lacking. Specifically, it doesn't seem to have anything to expose client side functions to the server, only the other way around
06:50 < ljharb> _Tristan: what client side functions would make any sense to execute on the server?
06:53 < wltsmrz> updateMyChatBoxPlease(){}
06:53 < _Tristan> ^
07:16 < ljharb> that modifies the dom. you don't have a dom on the server
07:16 < ljharb> (i'm assuming on both)
07:18 < [AD]Turbo> hola
07:20 < _Tristan> ljharb: That's not what I mean. Say browser side function foobar does this: console.log('hello'); and on the server side I run remote.foobar() to get the word hello in my client side console. There is no example of that.
07:20 < ljharb> i'm not sure that's the best way to share code
07:21 < _Tristan> it certainly is
07:21 < ljharb> via a "remote" object? i'd say just require it on the server, and have it be in public/javascripts so the client side can get to it
07:21 < _Tristan> there's no reason why the two nodes shouldn't be peers. There's no reason why a client should be allowed to run remote functions, but not the other way around.
07:22 < ljharb> sure there is. clients are insecure and dirty. servers aren't.
07:22 < ljharb> the client isn't just another server
07:23 < ljharb> in the same vein, the client is a browser. the server is node. they're very different.
07:23 < _Tristan> you still don't understand what I'm trying to say, so I'll give another example. The server might run remote.youHaveANewMessage() to remotely inform the client that a new message has arrived.
07:23 < ljharb> the communication youre describing sounds like a perfect situation for a JSON REST API
07:23 < ljharb> playing make-believe that you can directly call remote functions is like RPC/SOAP, which is not a good pattern for so many reasons.
07:24 < _Tristan> no you're saying that dnode is no good to begin with?
07:24 < _Tristan> so*
07:24 < ljharb> i am not familiar with dnode
07:24 < _Tristan> ...
07:24 < ljharb> but i'm saying i'd certainly be shocked if an engineer i worked with proposed using an RPC model to communicate between client and server, especially one that obscured the nature of their communication in the first place.
07:26 < ljharb> so looking at dnode, it's clever, sure, but i can't see how that pattern is a good idea for maintainability.
07:26 < ljharb> altho i can see the appeal of pretending the client and server are all one single harmonious utopia
07:27 < runvnc> ljharb, right, because all good 'engineers' know that anything that makes a job easier is automatically insecure and a horrible idea
07:27 < ljharb> making a job easier short term at the expense of long term? yes, all good engineers do know that.
07:27 < runvnc> I am building a component framework and leaning heavily on now.js
07:28 < runvnc> wait what long term problem are you talking about?
07:28 < runvnc> what do you suggest instead of dnode
07:28 < ljharb> maintainability, testability
07:28 < ljharb> i suggest making a JSON REST API.
07:28 < _Tristan> the long term problem that arises if the application starts using so much bandwidth that a binary protocol is necessary, that's the only scaling problem that would exist
07:29 < ljharb> just because youre using the same language on the client and server does not mean the client and server are the same or should be treated as such.
07:29 < runvnc> you think that json rest is more maintainable than dnode?  I think that json rest is not more maintainable, and its only right if you want external parties or departments to have a json api
07:29 < runvnc> well
07:29 < _Tristan> dnode isn't about treating client and server as the same, it's about integrating them to a level never before possible
07:29 < ljharb> and runvnc just looking at nowjs - that means i can set a function that will be passed and evalled on the server, that will run in the server's context? that's a huge security hole
07:30 < runvnc> wait dnode is not client/server is it? I thought that was primarily for the server
07:30 < ljharb> _Tristan: or advisable, is what i'm saying,
07:30 < runvnc> ljharb: no, it does not do that
07:30 < runvnc> it does not pass the function code to the server
07:30 < runvnc> lol
07:30 < runvnc> whatever I gotta get out of here before I start yelling
07:30 < ljharb> lol
07:31 < ljharb> "Functions and variables added to now are automatically synced, in real-time" and "Call client functions from the server and server functions from client" means "i can do whatever i want on your server"
07:33 < _Tristan> ljharb: I would suggest that you read more about dnode and nowjs if you wish to disagree with them, because you have absolutely no idea how they work.
07:33 < ljharb> _Tristan: i've never claimed to know how they work. i'm reading up on them now
07:34 < ljharb> _Tristan: but what i disagree with is the general principle that client and server SHOULD be that integrated. i think they should not be.
07:34 < _Tristan> you're one of those guys who is still mad about the internet, aren't you? (your irc client is integrated with your irc server)
07:35 < ljharb> it's not integrated with it. it's a protocol. my irc client doesn't pretend its on the server
07:36 < _Tristan> dnode clients don't pretend they're on the dnode server, they just use a protocol.
07:36 < wltsmrz> substack didn't invent RPC
07:36 < wltsmrz> I can see your argument though
07:36 < ljharb> i realize that
07:37 < wltsmrz> For multiple reasons I still prefer good old 'ws'
07:37 < ljharb> and like i said, dnode is a very clever form of rpc
07:37 < ljharb> but it's still rpc.
07:37 < wltsmrz> That it is
07:37 < ljharb> and RPC should be left to those poor folks still coding in java, xml, and eclipse.
07:37 < _Tristan> what's wrong with rpc?
07:38 < ljharb> primarily, it's not semantic. it's got a DSL that i need a spec to understand.
07:38 < ljharb> REST is better because if the API is built properly, you can just look at an individual call and know exactly what it's doing
07:40 < _Tristan> rest is just an attempt to create a very simple, limited and memorable rpc.
07:41 < ljharb> no, because it does not proscribe URLs. RPC does.
07:41 < wltsmrz> Semantic though, that's his argument
07:41 < ljharb> "how i explained rest to my wife" http://tomayko.com/writings/rest-to-my-wife
07:41 < ljharb> give that a read.
07:42 < ljharb> while i read more about dnode and now.js (and keep seeing examples of how i would be able to utterly violate a server running them)
07:42 < _Tristan> I know what rest is
07:43 < ljharb> one who knows what rest is does not ask what is wrong with rpc.
07:44 < _Tristan> how exactly would you "violate" a server running dnode?
07:44 < ljharb> i've been mostly reading about nowjs, where i can just set a function on the server and do whatever. let me take another look at dnode
07:45 < ljharb> but knowing substack, it's likely to be pretty secure
07:46 < _Tristan> what you're not understanding about dnode and nowjs is that they do not run arbitrary code remotely, they simply provide an interface without the programmer needing to use the protocol directly.
07:47 < ljharb> nowjs does. let's say now.foo exists. i can say "now.foo = function () { everyone.now.foo = function () { alert('pwned'); }; everyone.now.foo(); };" and then wait.
07:49 < _Tristan> and this is run on the client side?
07:49 < ljharb> yup
07:49 < _Tristan> the client side doesn't have everyone, just the server side.
07:49 < ljharb> so with dnode, however, it looks like all you can do is pass a function name, and a string. so that's pretty safe
07:49 < ljharb> right, but i just set a function on the client side that will be run on the server side where everyone is freely editable.
07:50 < ljharb> basically it creates an XSS hole into your server.
07:50 < _Tristan> it doesn't work that way
07:51 < ljharb> got a nowjs-powered server i could play with? i'd love to give it a shot.
07:51 < _Tristan> if the server ran now.foo, the client would run your code.
07:51 < _Tristan> no function that you write on the client will be executed on the server, and vice versa.
07:52 < _Tristan> if you're on the server and you do now.foo() it will not run the function, it will send a message to the client telling it to run the function.
07:52 < ljharb> hm, i'll reread
07:52 < ljharb> perhaps it's just unclear docs
07:52 < _Tristan> I can understand them just fine
07:53 < ljharb> nice for you. docs are unclear if anyone can not understand them just fine.
07:53 < _Tristan> perhaps they have a "how I explained nowjs to my wife" page.
07:54 < ljharb> been hold on to that one, eh
07:54 < ljharb> *holding
07:54 < _Tristan> not really, it was just relevant
07:56 < ljharb> ok, so it seems youre right, and neither one has the security issues i initially read
07:56 < ljharb> which means both of them are wonderfully clever RPCs.
07:56 < ljharb> but still RPC.
07:59 < _Tristan> by taking care of any protocol imaginable, dnode allows two servers to run in harmony, and doing so better than any protocol in existence for any application with low enough bandwidth usage to not require a binary protocol.
08:13 < booyaa> chaps is there a repo/source that has up todate node.js compiled for debian arm?
08:14 < booyaa> i've got two distros that can handle either hard or soft floating if that helps
08:14 < booyaa> if not i'll just compile it meself
08:42 <@konobi> are all the nodecore folks well hammered by this point?
08:46 < booyaa> why?
08:46 < booyaa> is there a node conf?
08:46 < tim_smart> booyaa: http://www.nodeconf.com/
08:46 < booyaa> an the node conf :D
08:47 < booyaa> almost certain there will be missing days for these guys there's a lot of merkins on the team no?
08:47 < booyaa> and indie day is tomorrow
08:57 <@Nexxy> booyaa, I don't think that word means what you think it means.
09:04 < samoin> hi all
09:08 < samoin_> from ff
09:08 < samoin> from ie
09:12 < myndzi> is there any way to edit the node core libraries on windows?
09:13 < strk> how do I find the version of _npm_ ?
09:13 < strk> tried: --version, -v, -V
09:13 < strk> none worked
09:13 <@konobi> `npm -v`
09:13 <@konobi> works for me
09:14 < strk> uhm, works for me too with newer npm now that I see it
09:14 < strk> [strk@gnash:/usr/src/cartodb/grainstore(node08)] npm -v
09:14 < strk> 1.1.32
09:14 < strk> [strk@gnash:/usr/src/cartodb/grainstore(node08)] /usr/bin/npm -v
09:14 < strk> [TypeError: Object function log(msg, pref, level, cb) {
09:15 < Jakey> myndzi, just edit it
09:15 < myndzi> or perhaps extend / hook their prototypes?
09:15 < Jakey> the files is in Lib
09:15 < myndzi> Jakey: all i can find is an exe
09:15 < Jakey> look carefully
09:16 < myndzi> contents of program files\nodejs: node_modules (with npm, lib, etc.), node_etw_provider.man, nodejsvars.bat, npm, npm.cmd
09:16 < myndzi> hex editor shows that the node modules are compiled into node.exe somehow
09:16 < myndzi> i'm wondering if i can extract them or use external files by some means
09:17 < guy> Who is Dtx here?
09:17 < Jakey> oh..
09:17 < guy> or Darshan Sanghani
09:21 < guy> What a troll. https://github.com/anuary/ay-game/network Was looking through his commits glad that someone joined the project. Supposedly reworked from the ground. Though, what's done is: added bunch of redundant debug information, implemented redundant express, removed PHP session implementation that breaks game logic and changed naming convention. Kudos. : )
09:24 < Lorentz> I like git commit comments that consists of "minor changes"
09:24 < Lorentz> then "major changes"
09:25 < myndzi> i like stack traces that help me solve problems >:(
09:25 < Lorentz> pffft there's no fun in stack traces
09:25 < Lorentz> you gotta solve things blindly
09:25 < myndzi> i've been doing that all day
09:25 < myndzi> :P
09:25 < myndzi> i can't for the life of me figure out wtf is causing this problem
09:26 < myndzi> and as far as i can tell, i don't have any way to get into the code where i could figure it out from
09:28 < myndzi> ooh, idea
09:29 < myndzi> i wonder if i can get a close event on there before whatever is the problem
09:29 < myndzi> and dump the listeners
09:29 < myndzi> even better
09:30 < myndzi> it calls errors this tick and close next tick
09:30 < myndzi> now if i can just figure out WHICH socket it is
09:30 < myndzi> haha
09:32 < Spion_> if this helps, you should be able to monkey-patch anything already in the core library
09:32 < Spion_> unless frozen or similar
09:32 < Spion_> oldblah = core.blah;
09:32 < myndzi> turns out the thing i want to hook is a function defined inside a method of stream
09:32 < Spion_> core.blah = function() { do my stuff... oldblah.apply(this, arguments); }
09:32 < myndzi> no idea how to access that
09:34 < Spion_> oh yeah. okay you can't do that easily.
10:07 < innociv> How can I use monit with forever?  Like forever isn't restarting the process when it is using 100% cpu.
10:10 < rampr> why do you want to use monit with forever ?
10:11 < innociv> Because forver doesn't restart the script when it's using 100% cpu
10:16 < rampr> innociv:  you can use something like if cpu usage (user) > x% then restart
10:16 < innociv> rampr yeah but, don't I need sudo?
10:17 < innociv> to stop the process
10:17 < rampr> no monit runs as root
10:17 < innociv> Er well how should I actually stop it?  If I kill it will monit restart?  If not don't I need to know what process number it is in forever?
10:17 < innociv> I mean if i kill it will forever restart it?
10:18 < rampr> actually you don't need forever at all
10:18 < rampr> you can just have a rule which checks for the cpu usage and just restart the node process
10:18 < innociv> I like using forever anyway with how it handles the logs
10:18 < innociv> Runs as daemon simply
10:19 < rampr> okay, you could still restart the node process
10:19 < innociv> But what process am I checking?
10:20 < rampr> I've not used forever, but is it a separate daemon?
10:20 < innociv> Oh, yeah.
10:20 < innociv> Like you can do forever list and it has an array of the processes.  Than forever stop index stops that one.
10:21 < rampr> and do you set a set a pid file or something ?
10:21 < rampr> that it monitors ?
10:21 < rampr> the way I see it forever and monit solve the same purpose
10:22 < rampr> it is just sufficient that you use one of them
10:22 < innociv> It looks like I can do a --pidFile flag
10:22 < innociv> Yes forever does do a lot that monit does, and monit does a lot that forever does, but they don't do everything that each other do. :(
10:22 < strk> is require('../package') not supported by node-0.4 ?
10:23 < innociv> Can I set the pidfile in my script instead of using flags?
10:23 < strk> it was for:
10:23 < strk> program .version(require('../package').version)
10:23 < rampr> we use an upstart script and set the pid file in the upstart script
10:25 < strk> I think the idea was to extract "version" from the package.json file
10:38 < innociv> If I kill it forever will restart it. But how do I kill the particular process?
10:38 < innociv> I killed it in htop.  I can't figure how I would for the monit command
10:39 < dmilith> ;]
10:39 < dmilith> npm install pid
10:39 < dmilith> innociv: 
10:40 < dmilith> and monitor each process that way. it kinda works
10:40 < dmilith> Or use cluster2
10:40 < innociv> How do I kill a process by pid?
10:40 < dmilith> several ways to do so
10:40 < innociv> I can't find doc on npm pid
10:41 < dmilith> http://nodejs.org/api/process.html
10:41 < dmilith> particulary: http://nodejs.org/api/process.html#process_process_kill_pid_signal
10:41 < dmilith> particularly*
10:42 < innociv> I was looking at that.
10:42 < dmilith> with pid module, you can store pid number of each process, from process.kill you can kill that process by reading that pid from a file
10:42 < innociv> But I don't see how it helps
10:42 < innociv> How would I know when to kill it?
10:44 < dmilith> I don't know. You're the programmer, You should know what's wrong with Your app right?
10:45 < innociv> Nope, I don't.  All I know is that it randomly uses 100% cpu after a few days or weeks.
10:45 < dmilith> But anyway.. I suggest You using cluster2 module. It's far better prepared for process unstability
10:45 < innociv> I can't get DTrace to install on Ubuntu.
10:45 < dmilith> using ubuntu is like "please fuck my server up, please" call
10:45 < deoxxa> ^^ truth
10:46 < dmilith> randomly uses 100% of cpu.. quite interesting
10:46 < innociv> Haha.
10:46 < dmilith> It's like runjs on 0.8.x
10:46 < innociv> Debian was familiar with me and Amazon EC2 didn't have a recommended Debian AMI.
10:46 < dmilith> everytime I use runjs on my devel boxes, it hogs my cpu hardly
10:46 < dmilith> but on bsd.. it works like a charm ;]
10:46 < dmilith> innociv: ubuntu isn't debian..
10:46 < innociv> I say randomly because it works perfectly fine for those days or weeks, handling millions of requests.
10:47 < dmilith> it's like win 3.11 isn't OS ;]
10:47 < innociv> I know. But it's close.
10:47 < innociv> I mean
10:47 < dmilith> unfortunatelly.. no
10:47 < innociv> The commands and file structure.
10:47 < dmilith> I used debian >9 years
10:47 < dmilith> believe me. ubuntu is really fucked up debian
10:47 < innociv> I believe you :(
10:47 < dmilith> anyway, 
10:48 < innociv> God damn it. I think I'm just going to just use a custom debian AMI
10:48 < dmilith> do You have logging of your "fancy" process?
10:48 < dmilith> it shouldn't be related with OS TBH
10:48 < innociv> console.log()?  No.  I don't because like I said, it handles millions of requests fine
10:48 < innociv> Then suddenly messes up
10:48 < innociv> Yeah but the OS is why I can't install DTrace.
10:48 < innociv> And other issues.
10:49 < dmilith> personally.. I'm using switch to my production apps, in which I'm logging parts of code (let's call it namespace of code)
10:49 < dmilith> and I'm monitoring such cases
10:49 < innociv> If I log, it's going to be spammed.
10:49 < innociv> I don't want to look through millions of lines long log.
10:49 < innociv> I want to look when it's actually using 100%
10:49 < dmilith> yea
10:49 < innociv> See what stack is using all that cpu.
10:49 < dmilith> that's why don't log craps, only useful data
10:50 < dmilith> the most important thing is to find hot spot, which triggered will start that cpu hog issue
10:54 < dmilith> innociv: strace is helpful on linux
10:55 < dmilith> but don't expect dtrace to be working well on non bsd hosts
10:55 < dmilith> it's possible to run dtrace, but I had strange problems with it
10:55 < innociv> I was recommended to use dtrace and that flamegraph plugin for node
10:55 < innociv> Can I see cpu usage from strace?
10:55 < dmilith> sounds like good recommendation
10:55 < dmilith> nope
10:56 < dmilith> sttace is a toy compared to dtrace TBH ;]
10:59 < tim_smart> innociv: You can only see syscalls with strace
10:59 < innociv> Yeah.
10:59 < innociv> I really want to get dtrace to work.
10:59 < innociv> Got compile errors in ubuntu.
11:00 < dmilith> tim_smart: you can get almost any information you may need from dtrace
11:00 < tim_smart> dmilith: I know
11:01 < innociv> I'll just start a micro and see if dtrace compiles there
11:01 < dmilith> but it's like big fat dragon - usually you're too scared to talk to him ;]
11:01 < dmilith> I spend some time on dtrace.. but huh.. it's full time job ;]
11:01 < tim_smart> dmilith: Unless your Brian Cantril
11:01 < dmilith> ;]
11:01 < tim_smart> *you're
11:01 < dmilith> aye
11:05 < innociv> Heh
11:05 < innociv> That flamegraph thing looks to really simplify it.
11:22 < myndzi> awwww yeah
11:22 < myndzi> i got it :D
11:23 < myndzi> son of a bitch.
11:23 < myndzi> binary links .pipe to Stream.prototype.pipe
11:23 < strk> how can I check the engines.node in package.json againt the running node ?
11:23 < myndzi> which is fine except Stream.prototype.pipe expects there to be a .destroy method
11:23 < myndzi> and there isn't
11:23 < strk> I've seen it checked for modules installed by npm install, but not for the root package
11:24 < deoxxa> strk: install the root package with npm
11:25 < deoxxa> strk: or grab semver and use that to compare against process.whatevertheversionkeyis
11:47 < dob__> hello
11:48 < lrvick> https://github.com/tawlk/hyve Anyone know what would cause console.log() to not work within these submodules?
11:48 < lrvick> and a solution to work around it?
12:34 < ootje> is there some kind of statistics module that will just allow me to do a .ping() or something every now and then, and that i can then use to inspect how many pings per last second, minute, hour etc i am having?
12:34 < emr> hello i'm trying to initiate project with  express, hw running node_modules/express/bin/express raising SyntaxError:
12:37 < Noor_> can I maintain an auth session cookie over all https.requests?
12:39 < Noor_> anyone?
12:41 < Noor_> no one :(
12:41 < ootje> i have no idea, if that helps :)
12:41 < ootje> *g'
12:41 < Noor_> *g' ??!!
12:41 < ootje> but, judging by other languages and how they deal with it, you usually set up a cookie jar object of sorts, and use it in all requests
12:42 < emr> http://pastie.org/4192728
12:45 < Noor_> authenticating using a post https.request. does setting an agent here help in my problem?
12:45 < fire2k> hi. Is it okay to ask questions about developing with node.js here, or is this channel only for the development of node.js? 
12:45 < Noor_> using the globalagent isn't working
12:46 < Noor_> session cookies are rebuilt not maintained
12:48 < Noor_> not so helpful :(
12:48 < Noor_> 762 inactive members
12:53 < velo> hello, how to launch nodejs V8 snapshot created with ?
12:53 < velo> any idea ?
12:54 < therealkoopa> I'm trying to figure out how to handle express sessions with socket.io.  There is a tutorial that uses connect.utils.parseCookie, but I no longer see that in connect.  Any idea what replaced it?
12:55 < velo> *created with mksnapshot
12:56 < fire2k> this must be where questions go to die :D
13:14 < dsirijus> anyone here using 'forever'?
13:15 < radiodario> dsirijus: i use supervisor
13:15 < dsirijus> i'm getting some errors on 'forever start', see this http://pastie.org/4192870
13:16 < dsirijus> it's a little garbled with bash, try to ignore it
13:16 < radiodario> try to update forever
13:17 < dsirijus> radiodario: what, just run again npm install forever?
13:17 < radiodario> npm install -g forever
13:17 < radiodario> dunno, never used forever
13:17 < radiodario> looks interesting tho
13:17 < radiodario> also what version of node are you using?
13:18 < radiodario> node -v?
13:18 < dsirijus> 0.8.1
13:18 < dsirijus> (same thing after update of forever)
13:19 < radiodario> how about you try to give it absolute paths to the log and out files?
13:19 < dsirijus> good suggestion
13:20 < dsirijus> radiodario: love you :*
13:28 < fire2k> Does anybody know why this: http://pastebin.com/DTWUNWp6 always sends to the same node?
13:28 < radiodario> did it work?
13:29 < dsirijus> radiodario: no, i'm just gay
13:29 < dsirijus> of course it worked :)
13:29 < radiodario> awesome!
13:29 < ablomen> fire2k, because you are overwriting sendNode
13:30 < ablomen> fire2k, var does not do block scoping
13:30 < fire2k> but shouldn't it overwrite it?
13:31 < ablomen> you are referencing to sendNode in the callback, which ends up being the send node in the last run of the loop
13:31 < ablomen> fire2k, wrap lines 8 to 16 in a self executing function and you should be fine
13:31 < fire2k> ah okay, will try
13:32 < ablomen> fire2k, http://pastebin.com/FNiSvibR 
13:34 < Piotras> someone with "low level" knowledge and knows how to provide ObjectWrap derived class destructor?
13:35 < bnoordhuis> Piotras: what do you mean exactly?
13:35 < fire2k> are the ; after functions necessary in JS-syntax?
13:36 < Piotras> bnoordhuis, https://github.com/piotras/node-gir/blob/master/src/types/object.h#L34
13:36 < Piotras> bnoordhuis, I need to provide destructor for this class
13:36 < bnoordhuis> Piotras: virtual ~GIRObject() { ... }
13:37 < Piotras> virtual ?
13:37 < fire2k> @ablomen That did indeed fix all my code
13:37 < bnoordhuis> Piotras: ObjectWrap takes care of calling it when the JS object is GC'd
13:37 < fire2k> you are my hero :D
13:37 < bnoordhuis> Piotras: yes. it's not strictly necessary because ObjectWrap's destructor is already virtual but it's good style
13:38 < Piotras> bnoordhuis, it doesn't get invoked 
13:38 < Piotras> either virtual or not
13:39 < bnoordhuis> Piotras: then the js object hasn't been gc'd yet
13:39 < bnoordhuis> Piotras: note that in short-lived scripts it probably never gets invoked
13:39 < bnoordhuis> that's gc for you
13:40 < Piotras> so how to free internal fields?
13:40 < bnoordhuis> Piotras: have a look at node::AtExit()
13:41 < CIA-93> node: Ben Noordhuis v0.8 * rb1cce04 / (common.gypi configure): build: rename strict_aliasing to node_no_strict_aliasing - http://git.io/itKpog
13:41 < CIA-93> node: Ben Noordhuis v0.8 * ra0add91 / configure : build: detect cc version with -dumpversion - http://git.io/7JUMmA
13:41 < CIA-93> node: Ben Noordhuis v0.8 * rb731c96 / configure : build: disable -fstrict-aliasing for any gcc < 4.6.0 - http://git.io/Mw_p-Q
14:00 < drostie> Yay, shell scripting in Node. :DD
14:01 < drostie> I only realized that I could probably do it when I realized that what I was trying to do was a "decodeURIComponent()" on a file:// uri.
14:45 < w0rldmaker> what is the equivalent of a controller in expressjs framework?
14:48 < brianc> w0rldmaker: the function which gets called when the route matches
14:48 < brianc> w0rldmaker: if you're coming from the ruby world express is far more similar to sinatra than it is to rails
14:51 < Ed__> hi, i'm trying to uglify my node code using https://github.com/JakeWharton/uglify-js-middleware
14:52 < Ed__> wondering where I should put this code: 
14:52 < Ed__> app.use(uglify.middleware({
14:52 < Ed__>   src : __dirname + '/public/javascripts',
14:52 < Ed__>   uglyext: 1
14:52 < Ed__> }));
14:52 < Ed__> is app the name of the server I'm creating?
14:52 < SomeoneWeird> yes
15:03 < therealkoopa> I'm trying to loop over all the clients in a socket.io room, and for each of them, do a client.get('gizmo', function () {}), building up an array of all the gizmos.  I cannot figure out how to do this because the client.get is async.  how do you know when the loop and each callback has finished?
15:04 < radiodario> you know how many clients?
15:04 < radiodario> you can check each time?
15:04 < radiodario> if clientsfinished == clientslength
15:04 < radiodario> i'm done!
15:05 < radiodario> and just add one to clientsfinished once a client is done
15:06 < therealkoopa> Blah, okay
15:07 < Ed__> still trying to get uglify-js-middleware working….
15:07 < radiodario> dunno i'm sure there's some fancy way but you know
15:07 < Ed__> var   uglify = require('uglify-js'),
15:07 < Ed__>   uglifyjs = require('uglify-js-middleware')
15:07 < Ed__> var server= connect.createServer(
15:07 < Ed__>  //Server code
15:07 < Ed__> )
15:07 < Ed__> server.use(uglify.middleware({
15:08 < Ed__>   src : __dirname,
15:08 < radiodario> Ed__: use pastebin please
15:08 < Ed__>   uglyext: 1
15:08 < Ed__> }));
15:08 < Ed__> server.listen(PORT)
15:08 < Ed__> /end of server.js file
15:08 < Ed__> I'm getting an error that says "uglify" has no method "middleware"
15:08 < Ed__> anyone see something i'm doing wrong?
15:08 < Ed__> sorry for multiple lines, tried using pastie :(
15:08 < radiodario> server.use(uglifyjs.middleware?)
15:08 < tbranyen> Ed__: what do you mean you tried using pastie?
15:09 < tbranyen> you go to pastie, you hit paste, click a button
15:09 < tbranyen> its not like you need to try to use it
15:09 < radiodario> hey tbranyen leave the kid be, i'm sure he wont do it again, right Ed__ ?
15:09 < Ed__> tbranyen, i used it. just not correctly it seems
15:09 < tbranyen> i'm just curious
15:09 < tbranyen> how thats possible, there is literally *no* learning curve
15:10 < radiodario> hehehe
15:10 < radiodario> +1
15:10 < radiodario> Ed__: try not declaring uglifyjs
15:10 < radiodario> i think it might bind to the main object
15:11 < Ed__> for pastie i hit paste, and then what…copy the url?
15:12 < radiodario> you hit paste, and then you copy the url: http://pastie.org/4193487
15:13 < radiodario> also, http://pastie.org/help/
15:13 < radiodario> and you can also use the pastie bot
15:13 < radiodario> which hangs out in #rubyonrails
15:13 < Ed__> ah ok thanks radiodario
15:14 < radiodario> lol the help has a section on 'advanced pasting'
15:16 < Ed__> radiodario - I tried not declaring uglifyjs as you suggested…still same error
15:16 < Ed__> http://pastie.org/4193508
15:16 < mephju> hey. are u guys familiar with the segmentation fault when using bcrypt?
15:17 < radiodario> have you tried reading the uglify-js-middleware file?
15:18 < radiodario> https://github.com/JakeWharton/uglify-js-middleware/blob/master/uglify-js-middleware.js
15:19 < Ed__> i'm reading it now. i see the uglify.middleware function on line 29
15:20 < Ed__> so at my level of understanding, it should just work?? lol
15:20 < Ed__> but i think i now see what you meant by binding to the main object
15:20 < Ed__> since its declared as uglify.middleware
15:24 < radiodario> not sure man, i've never used that module, and i'm not sure how it'd work
15:24 < radiodario> also, you might wanna check which version of Node you are using
15:24 < radiodario> etc
15:25 < Ed__> ok will do
15:26 < Ed__> have you used any other modules for uglification that you like?
15:26 < radiodario> nope, i havent, i was planning on just uglifying it manually once i'm production-ready
15:27 < innociv> Wow
15:27 < innociv> make for node.js takes forever
15:27 < bnoordhuis> innociv: make -j <cores>
15:28 < Owner> doesn't take that long...
15:28 < radiodario> innociv: have you ever used gentoo?
15:29 < innociv> Nope.
15:29 < radiodario> ok you dont know 'forever'
15:29 < innociv> It's been going for almost 30 minutes, Owner
15:29 < radiodario> weird?
15:29 < innociv> Well it's on an amazon micro instance.
15:29 < Owner> innociv~# there you go
15:30 < innociv> Heh
15:30 < Owner> innociv~# i find its better to build a binary compatible system vm
15:30 < innociv> hm?
15:30 < Owner> then use nvm to compile node to home directory
15:30 < Owner> then transfer the files and add one line to .bashrc
15:30 < innociv> I don't follow
15:30 < Owner> you compile it on a good computer
15:30 < Owner> and transfer it
15:31 < Owner> ive done this...you can send compiled node and libraries and everything to other systems and they will run with user permissions very easily
15:32 < rmah> yo noders
15:32 < bnoordhuis> yo rmah
15:33 < Owner> innociv~# try openshift
15:33 < innociv> Oh
15:33 < Owner> and avoid compiling anything
15:34 < innociv> I don't compile node a ton
15:34 < innociv> Just getting rid of Ubuntu right now
15:34 < Owner> innociv~# welcome to 2012
15:34 < innociv> Haha.
15:34 < innociv> Well amazon didn't have any suggested Debian images before.
15:35 < innociv> And people advised me to use the suggested. :/
15:35 < Owner> don't listen to the hiveminders
15:35 < radiodario> don't listen to the person telling you not to listen to the hiveminders
15:36 < radiodario> they might be part of the hivemind
15:36 < radiodario> tricking you into doing what the hivemind works
15:36 < Owner> dont drink the koolaid!
15:36 < mephju> bcrypt doesn't work for me anymore. Am I the only one having this problem?
15:44 < owen1> http://lanyrd.com/2012/nodeconf/schedule/ - a few pdfs from day1 of nodeconf
15:45 < owen1> if someone know anything about isssac's talk "state of node", please share!
15:49 < w0rldmaker> i have created a form in a jade template method=post with an input named x
15:50 < w0rldmaker> is the proper way to get the value in app.post('/whatever') req.body.x?
15:52 < w0rldmaker> http://pastie.org/4193688
15:52 < w0rldmaker> is there anything wrong with my code here? http://pastie.org/4193688 it sends a blank object
15:57 < w0rldmaker> nevermind i was missing a quote
15:58 < derekv> is there any quick way to have a self-contained node server, eg one that can be run without installing much in the way of dependacies?
15:58 < radiodario> define dependEncies
15:58 < derekv> sorry
15:59 < radiodario> like a headless server?
16:00 < derekv> I am a terrible speller , and, qwerty keyboards make it even worse... but... I mean something that I could distribute to people who are not node.js users with only some very simple steps to run
16:00 < plato> npm is good at installing dependencies
16:00 < radiodario>  you mean compiling it?
16:00 < derekv> All I'm trying to do is to make a mock server for a rest api I'm designing.
16:02 < derekv> radiodario: ... sortof 
16:02 < brainss> owen1: maybe this helps https://twitter.com/izs/status/219894561248509957
16:02 < derekv> maybe this: http://imsky.co/notes/nodejs-portable-windows-version-15
16:07 < sumo_> s
16:07 < phillyDesignr> anyone mind if i ask a stupid generic form submission question here? I'm stumped.
16:08 < mAritz> anyone know why my ssh (putty) shows âââ in npm ls output? (i'm assuming encoding issues. anyone know exactly how i can fix it? i'm lazy, i know :D )
16:08 < mAritz> phillyDesignr: ask
16:08 < mAritz> and don't ever ask to ask again.
16:08 < phillyDesignr> lol
16:08 < brainss> phillyDesignr: you don't need permision to ask any questions
16:09 < innociv> http://nodejsdb.org/db-mysql/ I did "export MYSQL_CONFIG=/usr/bin/mysql_config" in debian, and I'm getting "node-v0.8.1/node_modules/db-mysql/wscript:34: error: The program ['mysql_config'] is required
16:09 < innociv> ". Any ideas?
16:09 < phillyDesignr> anyone know how to collect data from a multi select box, i'm not getting anything on the req.body
16:10 < phillyDesignr> option(name="categories[]", value=category.id)!= category.name
16:14 < innociv> Any recommendations for mysql driver for node? :/ db-mysql no longer seems to work on 8.0
16:15 < innociv> And it doesn't look like the creator is going to fix it any time soon
16:15 < mAritz> phillyDesignr: have you checked the html that comes out of that?
16:15 < innociv> Oh I needed "libmysqlclient-dev" maybe
16:16 < phillyDesignr> mAritz: yes it renders fine
16:16 < mAritz> innociv: you could always fix db-mysql as well and put up a pull request. 0.8 didn't break much backwards compatibility, so it should be simple enough.
16:17 < mAritz> (except if it's a native module, in which case i've got no idea)
16:18 < mAritz> innociv: either way, node-mysql should work with 0.8 and comes from the magnificent felixge :)
16:18 < innociv> The install didn't note requring libmysqlclient-dev, but I figured it out
16:18 < yawnt> yo mAritz 
16:18 < innociv> Admittedly, it wasn't hard to figure out.  Search what package contains mysql_config
16:20 < mAritz> yo yawnt
16:34 < owen1> brainss: thanks!
16:36 < owen1> brainss: i don't use keynote... it's not a pdf!
16:36 < owen1> wtf
16:37 < owen1> brainss: nevermind. opened it with keynote (:
16:38 < owen1> when i make a request to a node server. node will spawn a thread, right? and everything in this thread will be single threaded and never block requests?
16:38 < drudge\work> no
16:42 < owen1> drudge\work: what's is incorrect?
16:43 < drudge\work> everything you said. it doesn't spawn threads
16:45 < owen1> drudge\work: even not http.createSerever?
16:45 < blob4000> hey all, do i have to run node.js from my own server, or are there any hosts who can run it for me?
16:46 < alejandromg> blob4000: https://github.com/joyent/node/wiki/Node-Hosting
16:46 < blob4000> thanks!
16:47 < owen1> drudge\work: i believe node http library is using thread pool of 5 threads to handle requests.
16:47 < owen1> drudge\work: but inside each thread everything in evented. that's what i understand.
16:48 < owen1> drudge\work: i assume that if u don't have a lot of concurrent requests, you will only have 1 thread. but if you get a ton of requests, i assumed node will spawn another thread to handle the request.
17:02 < other_guy> Nexxy
17:13 < possibilities> if i spawn a child process (it's a shell script) that starts a bunch of child processes of it's own is there an easy way i can look up all their pids so i can kill them all? or is there some altogether better way to make sure everything dies when the main drocess dies?
17:14 < alex4nder> possibilities: there are many ways to do that with bash
17:15 < possibilities> ok, cool, problem is i don't have control over what's in the bash script, so i guess i have to go spelunking in `ps` output to find all the child pids?
17:15 < alex4nder> well you just want to kill off everything of a specific process?
17:16 < possibilities> yeah, i want to kill the bash script (easy) and any of it's child processes
17:17 < alex4nder> possibilities: take the output of ps, pipe it through awk, come up with a process list to kill, kill them.
17:18 < possibilities> cool, got it, thank you
17:23 < hotch> I've never encountered this before. With express if I response.send(new Error('my message')); -> the exception with query reads as internal server error, vs. custom message. Am I going crazy. hmm.
17:23 < tjholowaychuk> hotch that's never worked
17:23 < tjholowaychuk> if so it was just converted to json
17:23 < hotch> Ok I didn't think so.
17:24 < possibilities> alex4nder or others: come to think of it, when i run said bash script manually and kill it using crtl + c it and all of it's subprocesses die. i wonder why starting spawning it in node doesn't work the same way?
17:27 < Owner> https://openclipart.org/image/800px/svg_to_png/22398/nicubunu_Emoticons_Laughing_face.png
17:29 < Owner> http://fstservers.com/blog/
17:29 < alex4nder> possibilities: because node is managing its children different than your shells manage its children.
17:30 < possibilities> ok cool, thanks alex4nder, i appreciate the hand holding
17:46 < owen1> so is http.createServer use threads or it's always going to use 1 thread?
17:46 < owen1> i know node is single threaded, but we're taking about the webserver connections here.
17:49 < Kingdutch> Any alternatives to express? idk y but it feels weird to use
17:49 < WarheadsSE> So I am going to get this GNTP library cleaned up, finally. Who's got a quick link to a nice style guide for mutli-part module breakouts?
17:50 < WarheadsSE> (or, point me to a git tree I can use as an example)
17:50 < krunkosaurus> express is fine just drop the silly weird templating and do the erb (?)
17:50 < tjholowaychuk> erb?
17:50 < krunkosaurus> weird templating = jade
17:51 < tjholowaychuk> use a different template engine
17:51 < Kingdutch> idk, I feel more at home with ocnnect even though I know express is built on top if it =|
17:51 < tjholowaychuk> erb is ruby though lol
17:51 < Kingdutch> Maybe I'm just not used to being so high up
17:51 < Kingdutch> (I prefer stuff like C++ over Java :'))
17:51 < krunkosaurus> sorry, i mean the one that's not jade
17:51 < WarheadsSE> I couldn not call Java higher than C++
17:51 < krunkosaurus> EJS
17:52 < Kingdutch> You think Java is less high up than C++?
17:52 < tjholowaychuk> there are like 15 engines you can use, pick one of those
17:52 < Kingdutch> idk maybe my lack of java knowledge then, but I hope you get where I'm coming from
17:52 < Owner> less high up?
17:53 < Kingdutch> Less high up -> less abstracted | as in assembly is very low level, C++ is higher up because it abstracts stuff away from you
17:53 < owen1> Kingdutch: in node you don't need a framework to write websites - https://github.com/oren/node-website-template
17:53 < Owner> um no java is higher level
17:53 < Owner> its got a freaking VM...which does garbage collection and what not
17:54 < Owner> how could it be lower, u crazy
17:54 < Kingdutch> Yeah, so that's why I said java is higher than C++ ..
17:54 < Kingdutch> Hence why I prefer C++ over Java, I feel like I have more control and less is done for me
17:54  * WarheadsSE still doesn't think thats true
17:54 < Kingdutch> So I have a better understanding of what's going on
17:54 < Owner> ok
17:54 < Owner> assembly is best
17:54 < Kingdutch> HAha
17:54 < WarheadsSE> 0o
17:54 < Owner> it is fun
17:54 < WarheadsSE> go for it.
17:54 < Kingdutch> Anyway I'll take a look at your link
17:54 < WarheadsSE> I'll see you in a year.
17:55 < Owner> a year for what?
17:55 < WarheadsSE> making a website in assembly
17:55 < WarheadsSE> :p
17:55 < Owner> hah
17:56 < Owner> for sure...asssembly is good for embedded
17:56 < Owner> not webapps
17:56  * WarheadsSE works on ARM, knows
17:57 < Owner> so
18:04 < Owner> looks like you could do a python http server with inline c++/assembly to make a webapp in assembly
18:04 < Owner> :)
18:04 < WarheadsSE> but then its not just assembly ;)
18:05 < Owner> yea but node.js isnt just javascript either
18:05 < Owner> if you use that logic
18:06 < WarheadsSE> we're just plain way off base & topic now
18:09 < Kingdutch> back on topic: suggest me a good router that's not tied up in a major framework and less than 2 years un-updated
18:11 < TimeTurner> Kingdutch: superagent
18:11 < TimeTurner> best client side router
18:14 < john____> what is the max req/sec from nodejs one should expect per 1 Core if redis is used for session management? what is the setup to be used in multicore scenario ie lb/nginx nodejs processes redis stores?
18:15 < Owner> eleventythousand
18:15 < Owner> i just checked
18:16 < TimeTurner> LOL
18:17 < john____> assuming it's decent app
18:17 < Owner> yes, assuming it is decent
18:17 < john____> new to nodejs
18:18 < john____> well clearly you think you are funny :)
18:19  * Owner nopes pretty hard
18:19 < john____> are there any benchmarks besides hello world examples
18:19 < Owner> fibonacci server
18:20 < john____> great where is the example
18:20 < Cheery> http://www.raspberrypi.org/phpBB3/download/file.php?id=403
18:20 < Owner> that was a joke
18:20 < Owner> context: http://www.uberbrady.com/2011/10/nodejs-is-not-cancer-you-are-just-moron.html
18:21 < john____> i don't see why you can't have a 'server' of fibonacci
18:22 < w0rldmaker> can mongoose schema reference itself? like in Comment, replies: [Comment]
18:22 < john____> look at the brightside there is a cure for everything :)
18:23 < Cheery> next I could get on and start typing something more serious.. ^^
18:23 < Owner> john____~# have you looked at vert.x or opa
18:23 < john____> i heard of vert.x
18:24 < john____> the claim it's faster then node b/c of fs
18:24 < Owner> fs?
18:24 < john____> i really don't care about fs or the fact that it has better cluster
18:25 < Owner> john____~# what are you planning on making...
18:26 < TimeTurner> node.js is great for I/O heavy and realtime stuff
18:26 < john____> all i was hoping to find out if anyone did benchmarks on a decent app and what are the numbers per core and what is the memory footprint. Everyone is saying nodejs is using little cpu and memory
18:26 < TimeTurner> if you aren't doing either or you're just serving static pages with client side js then node isn't what you want
18:26 < john____> i'm using socketio and nodejs for realtime notifications
18:26 < TimeTurner> that's probably the simplest explanation
18:27 < TimeTurner> yeah, then you want it
18:27  * TimeTurner goes back to dormant mode
18:27 < john____> i'm making a one page site I think node is great for that
18:27 < Owner> do you know how to benchmark?
18:28 < Owner> ab -c 100 -n 100 http://localhost:31415/
18:28 < Owner> i think
18:28 < john____> i'm using ab on mac I would ideally want to 10000 connection
18:28 < Cheery> https://github.com/cheery/essence
18:29 < john____> right now i'm getting around 1200 req/s   using ab -c 1000 -n 200
18:29 < Cheery> now I can finally say I've went over the hardest obstacles
18:29 < john____> on 1 core
18:29 < Owner> john____~# ok well, thats for initial page load
18:29 < Owner> how many sockets can node.js keep open and send to is the question
18:30 < Owner> use broadcast.volatile.emit
18:30 < john____> that's correct
18:30 < therealkoopa> Anyone familiar with mongoose auth or everyauth?  I'm trying to determine the best way to support multiple login strategies, but treat the user identically regardless of how they logged in.  So I can simply say user.name and it gets me the right information if they logged in with facebook or twitter
18:30 < Owner> not sure how you bencmark that though, you'd literally need 10000 browser windows
18:30 < Owner> get some websockets tester
18:31 < Cheery> is there node.js developers around here?
18:31 < Owner> node or no node, doing websockets...is what you need to test
18:31 < john____> ok i'll probably write a small browser that connects to it
18:31 < john____> i did something similar in as3
18:31 < Owner> http://www.websocket.org/
18:32 < john____> yes that's correct i need to know how many sockets can stay open per process
18:33 < john____> right now i'm using nginx with long polling but i'm looking into switching to http-proxy
18:33 < Owner> john____~# and after you make a little test, compare it to other frameworks that could do what you want...like Python Twisted i guess
18:33 < john____> i heard of tornado
18:34 < Owner> https://github.com/mandiant/RProxy
18:34 < john____> but i think nodejs can do it pretty well 
18:34 < Owner> if it supports sockets
18:34 < blueadept> john_____ been using http-proxy for a while, although haven't been able to really test it up against a very large amount of requests per second (100k per sec, ex.)
18:34 < john____> i prototyped a lot of code so far and it looks really good
18:34 < Owner> proof?
18:35 < john____> i like http-proxy and http-static for ec2 setup instead of using nginx
18:37 < john____> i used ab -c 1000 -n 1000 and got 1140 req/sec on 1 core 
18:37 < troynt> is nodeconf being streamed? if so link?
18:37 < john____> assuming i'm using long polling 
18:38 < john____> what are you benchmarks for nodejs
18:39 < blueadept> john_____: hold on, getting a good link
18:39 < Owner> john____~# you know if it is slow, it could always be your code
18:39 < blueadept> http://zgadzaj.com/benchmarking-nodejs-basic-performance-tests-against-apache-php
18:40 < blueadept> i think this is fairly recent
18:40 < Owner> not only that but you still are not benchmarking what you should be bencmarking
18:40 < john____> @blueadept thanks man!
18:41 < Owner> apache s ucks though
18:41 < Owner> ill run some bmarks
18:41 < john____> @Owner you are right i need better benchmarks definitely this benchmark is done on mac 
18:42 < Owner> nginx and php-fpm vs node.js hello world
18:42 < john____> it limits the number of connections
18:43 < john____> on mac if you go over 1000 connections the test aborts
18:43 < Owner> i was running AB against ruby monday
18:43 < Owner> it crapped out so fast
18:45 < john____> yes this is not acceptable 
18:46 < john____> is anyone using websockets?
18:46 < john____> i see a lot of people still rely on long polling
18:47 < Owner> sec
18:47 < Owner> benchmarking
18:49 < john____> my test is making a call to redis that checks for ratelimit and gets the user session
18:49 < john____> you will probably get better results
18:50 < john____> when an ip is blocked I get 2000 req/sec but the call to redis is still made
18:50 < Owner> ok node is faster
18:50 < Owner> for just hello world
18:50 < Owner> than nginx + php-fpm
18:51 < Owner> 50% in 35ms   vs 50% in 139ms
18:51 < Owner> longest request 21714ms vs 29801ms
18:52 < Owner> john____~# as far as i know, i use websockets with socket.io
18:52 < john____> @Owner how did you run your benchmark?
18:52 < john____> are you using nginx with tcp 
18:52 < Owner> with ab -n 100000 -c 1000
18:52 < Owner> ?
18:54 < john____> @Owner is there a reverse proxy in front of node
18:54 < CIA-93> libuv: Ben Noordhuis v0.8 * r5031a5b / (4 files in 2 dirs): unix: rename linux/core.c to linux/linux-core.c - http://git.io/XKcEDA
18:54 < Owner> no proxies
18:54 < john____> how do you serve the static files?
18:54 < Owner> i tested against local host addresses
18:55 < Owner> i dont have any static files
18:55 < Owner> especially not in hello world
18:56 < john____> @Owner oh ok i thought if you use websockets in real world example
18:56 < Owner> i do but i did a hello world test against nginx/php
18:57 < Owner> you can do a realworld websockets example without static files also :P
18:57 < john____> lol i hope i don't have to
18:58 < CIA-93> node: Ben Noordhuis v0.8 * r5da7890 / (4 files in 2 dirs): deps: upgrade libuv to 5031a5b - http://git.io/T7f-kQ
18:58 < CIA-93> node: Ben Noordhuis v0.8 * rfc4e12b / (611 files in 209 dirs): tools: update gyp to r1426 - http://git.io/5-xFDg
18:59 < john____> @Owner you when i run ab -n 10000 -c 1000 on mac the test aborts 
18:59 < Owner> only 10000 ?
18:59 < Owner> macs are toys
18:59 < john____> is there a way to run ab on mac that allows more n's and c's
19:00 < john____> yes i hope you are using one
19:00 < Owner> lol what
19:00 < Owner> i would never
19:00 < john____> why
19:01 < Owner> because linux and windows are better, with more open hardare and choices and better prices?
19:01 < Owner> macs cant even run 'ab'
19:03 < john____> lol this sounds like ab is more important 
19:03 < john____> lol you must be rock and roll dude or something these jokes are so 1990
19:04 < tomb> lol
19:04 < Cheery> I'm so 1980, I just wrote a structural editor.
19:04 < bnoordhuis> john____: you need to bump `ulimit -n` at the very least
19:04 < Cheery> or 1970
19:04 < Cheery> whatever
19:04 < tomb> I'm so 1969 I landed on the moon
19:04 < bnoordhuis> which requires you to log in again on os x iirc
19:04 < john____> lol
19:05 < Owner> john____~# apple blows, and no, it is 2012 and it is especially true
19:07 < john____> back to 2012 i hope we can move forwards
19:07 < john____> @bnoordhuis thanks!
19:07 < Cheery> next I'd need to implement an interpreter and construct a verlet simulator which I can use for layouting
19:08 < bnoordhuis> john____: i have to warn you though, running benchmarks on os x is in no way representative
19:08 < bnoordhuis> john____: that's not a knock on apple but xnu (the os x kernel) is dog slow compared to linux
19:08 < bnoordhuis> or windows, for that matter
19:10 < bnoordhuis> [% 100|+ 149|-   6]: Done. <- out/Debug/run-tests on freebsd 9
19:10 < bnoordhuis> not too bad - and it's really only five failing tests
19:10 < bnoordhuis> the sixth one fails because there's no ipv6 configured on that machine
19:11 < Owner> ipv6 sucks anyways
19:11 < john____> thx i  try to them from linux 
19:11 < bnoordhuis> oh hah, i meant to paste that into #libuv
19:12 < bnoordhuis> but yes, ipv6 is a myth propagated by nebulous forces
19:12 < Owner> ITS A GIANT CRAP
19:21 < Owner> john____~# https://github.com/mixu/siobench
19:24 < john____> @Owner thx !
19:25 < Owner> i accept bitcoins
19:25 < john____> this is exactly what i need
19:27 < john____> sure i know besides the love for ab you love bitcoins !
19:28 < john____> but really thanks i'll try to find some bitcoins to send your way
19:32 < john____> @Owner this benchmark doesn't work for XHR polling only websockets
19:33 < Owner> it works for  xhr polling
19:33 < Owner> https://openclipart.org/image/800px/svg_to_png/22398/nicubunu_Emoticons_Laughing_face.png
19:35 < john____> look at the notes at the bottom of the readme.md
19:36 < motiooon> does anybody knows a node js app that tags images autmoatically
19:36 < motiooon> ?
19:37 < Owner> john____~# well that sucks
19:37 < motiooon> if I have 1000 images on my server and I want to tag them how would I do that with node?
19:37 < motiooon> but I don't want to tag each one of them individually
19:37 < john____> but still it's the step in right direction things like this are very helpful when strategizing with new technology
20:04 < thanpolas> are there resource monitoring tools? e.g. measure memory consumption of a required file / lib?
20:07 < bricker88> Hello. Can someone explain to me what types of things could cause the error, "[Error: socket hang up] code: 'ECONNRESET'"
20:08 < bnoordhuis> bricker88: the other end closed the connection
20:20 < Owner> ( ._.)
20:33 < CIA-93> libuv: Ben Noordhuis v0.8 * r68b0c85 / test/test-hrtime.c : test: allow 80 ms intervals in hrtime test - http://git.io/DCuj2w
21:14 < ic3> hi guys! is there any way to make requets module, retry connection with another proxy server if the supplied one is failing? https://github.com/mikeal/request/
21:19 < benatkin> ic3: that's outside the scope of request
21:19 < benatkin> ic3: there might be another module that does that
21:19 < ic3> hm
21:20 < ic3> what module?
21:21 < ic3> there is no way to make a callback to another function that checks or something?
21:21 < ic3> for this proxy?
21:21 < benatkin> ic3: yes you could implement that yourself
21:21 < benatkin> ic3: check for err and if you get an err, try the next one
21:22 < ic3> so i make same call until i don;t get any err
21:22 < ic3> in this time i seitch between proxy ips
21:22 < ic3> switch*
21:23 < benatkin> ic3: yeah, sketching it up
21:24 < ic3> ok
21:24 < ic3> tx
21:30 < benatkin> here's my sketch...haven't run it or nothin', could have syntax errors even https://gist.github.com/3043347
21:32 < owen1> i have a variable in server.js. how to access it from within a function that is exported from a module? http://pastebin.com/MaH1vDQa i use mapletree as my routes library.
21:33 < rmah> wow, I finally got lessc to work!
21:34 < rmah> node.js's handling of require() is... less than obvious
21:39 < benatkin> I'd like feedback on my new module that parses and converts JSON+comments, and describes it as a distinct format to avoid breaking stuff http://github.com/benatkin/eon
21:46 < iangreenleaf> isaacs: Is any of the config stuff factored out of npm yet? I'm using npm-registry-client to do some querying and it's pretty slick, but I feel like a bit of a jerk setting my own registry and cache locations.
21:46 < othiym23> Nexxy: that's a good thing, really ;)
21:48 <@Nexxy> othiym23 oh, phew
21:54 < therealkoopa> When a node upgrade, I'm now getting a lot of path.exists is now called `fs.exists`.  Best way to track these down?
21:56 < AvianFlu> therealkoopa, grep -R "path.exists" .
21:56 < AvianFlu> …not if you're on windows, though
21:56 < therealkoopa> AvianFlu: Doah! Haha, didn't realize it was taht easy.  
21:57 < AvianFlu> therealkoopa, the warning is pretty harmless, except that it's annoying
21:57 < AvianFlu> most likely, there's a dependency of yours it'll be in
21:57 < therealkoopa> AvianFlu: I figure, it pisses me off with tests reports.
21:57 < therealkoopa> I think that's the case.
21:57 < AvianFlu> therealkoopa, I actually had it make a test fail last week!
21:57 < AvianFlu> the test was like, asserting the content of logs
21:57 < AvianFlu> which suddenly had a new first line :D
21:58 < therealkoopa> Oh, yea... :)
21:59 < therealkoopa> :( sad day: grep -R "path.exists" . | wc -l -> 54
22:00 < jergason> Anyone know if the nodeconf vods will be available?
22:00 < AvianFlu> therealkoopa, woof
22:00 < AvianFlu> jergason, they're definitely filming
22:01 < AvianFlu> so, presumably
22:01 < jergason> Awesome.
22:01 < jergason> AvianFlu: are you there?
22:01 < jergason> My twitter feed is full of sweet stuff and I am super jealous.
22:02 < AvianFlu> jergason, yeah, I'm here :D
22:02 < jergason> nice :)
22:03 < s5fs> jergason: i understand the vids will be available in a month or so
22:03 < jergason> Schweet, that makes me happy.
22:03 < s5fs> ditto, i'm excited to see 'em
22:04 < s5fs> i live in portland, was not able to attend. kinda stings.
22:04 < s5fs> other_guy: missed seeing you last night, sorry you couldn't make it.
22:08 < remysharp> I'm finding `npm publish` is just hanging - any way to tell it's doing anything of value?
22:08 < remysharp> oh - after several minutes it failed...good timing, eh.
22:10 < AvianFlu> remysharp, npm config set loglevel info
22:10 < remysharp> hmm, npm update/pub, etc is nasty slow atm
22:41 < Spion> so uhh - has anyone noticed how easy it is to write unscalable node.js code? :/
22:41 < Spion> just put things into a not-so-local variable
22:41 < chapel> Spion: has anyone noticed how easy it is to write unscalable (x framework) code?
22:42 < jergason> I bought this gun, but it really hurts when I shoot myself. Should I get a pellet gun?
22:42 < chapel> jergason: :D
22:42 < Spion> this is relevant though. its easy to think in terms of one process
22:42 < s5fs> Spion: pssh, i can make a mess in any framework, just gimmie the opportunity!
22:43 < jergason> Spion: do you have a specific problem or complaint?
22:48 < Spion> I'll let you know as soon as I'm done fixing a mess
22:50 < Spion> but in short, client data was stored inside a local variable - and that local variable is available via a closure to every request. Something like this,  function(blah) { var localvar ...  http.createServer(function(req, res) {... localvar is accessed
22:50 < Spion> this breaks if you make a cluster
22:51 < Spion> I think I should make it mandatory that all testing is done using a cluster of at least 2 node processes.
22:52 < Spion> that way its much easier to spot that you are, in fact, relying on a local variable (process memory), or using a module which is like that.
22:53 < eldios> guys any advice on how to create a portable package of your software?
22:53 < eldios> with *everything* inside it? (node + dependencies + code)
22:54 < eldios> method can be different to deliver contents to different platforms
22:59 < ralphtheninja> I did npm install mocha --save-dev and the semantic version of mocha is ~1.2.2 .. what does the tilde mean in semantic versioning?
23:02 < Spion> jergason, so basically memorizing things in variables from the outside closure of a function serving a request must be forbidden. Things like var queue = []; http.createServer(function(req, res) { if (stuff) queue.push(req.something); else { res.end(queue.pop()); } }) will break as soon as you cluster the http server.
23:03 < jergason> ralphtheninja: I think it means 1.2.x
23:04 < bwen> spion: you dont even need to "cluster" it for it to go wrong :P
23:06 < Spion> oops, am I misusing the word cluster? :)
23:07 < Spion> bwen, howcome?
23:07 < bwen> the fact that you dont use variable scope correctly has nothing to do with clustering a webserver...
23:08 < Spion> how am I not using a variable scope correctly?
23:08 < reid> Node.js IRC represent! #nodeconf
23:08 < othiym23> w00t woot
23:08 < bwen> well you assumed it wasnt correctly, I guess your example could work in some cases.... not sure what it is supposed to accomplish
23:09 < Spion> Its supposed to queue certain kinds of requests that the back-end can process only one at a time
23:10 < Spion> its just an illustrative example. should I show a full example?
23:12 < bwen> Spion: yes plz
23:12 < s5fs> Spion: I'd read it
23:13 < jfroma> hi, i am having problems with httpS... I have my options object as {key: fs.readFileSync(...my.key), cert: fs.readFileSync("...my.pem"), ca: [ fs.readFileSync("ca1.pem"), ca2.pem] }... however when i go from the browser.. it seems that it cant load the chain of certificates just mycert.pem
23:13 < jfroma>  I read this one-year thread https://groups.google.com/forum/#!msg/nodejs/UmTEexxzpQM/3FjcKmASUm8J when someone suggest to manually concatenate the three.. is this still valid?
23:14 < Spion> okay I'll extract a working example. let me prepare it.
23:14 < jfroma> if i do that, i get "[Error: error:0906D06C:PEM routines:PEM_read_bio:no start line..."
23:16 < bwen> jfroma: I nerver used  more than just key: and cert: self-signed works fine for me
23:17 < jfroma> bwen this is not self-signed.. is from verizon
23:37 < myndzi> something keeps killing my process :|
23:37 < myndzi> i have access to the whm and cpanel, is there some setting that limits process execution time or some such?
23:37 < myndzi> (hoping someone knows)
23:38 < unomi> knows what?
23:38 < myndzi> about whm/cpanel installations
23:38 < myndzi> i'm suspecting it's killing my process
23:38 < myndzi> it just says 'killed'
23:38 < myndzi> heh
23:39 < unomi> you have my sympathies
23:39 < myndzi> i think i just found it!
23:39 < myndzi> we'll see
23:39 < myndzi> amusingly it only watches users that were made through whm
23:39 < myndzi> not through adduser
23:39 < myndzi> that must be why the other server didn't have this problem :)
23:40 < livinded> is there a specific reason that libuv is compiled statically into node rather than dynamically linking against it?
23:45 < Spion> almost done
23:48 < christophsturm> livinded: the node binary is totally selfcontained
23:49 < livinded> christophsturm: I understand that. But is there a specific reason other than simplicity?
23:50 < christophsturm> livinded: i don't know. but I think it's a great idea
23:50 < livinded> it's a great idea until you want to do something that's a lot harder with a statically linked binary than a dynamically linked binary
23:51 < livinded> and nowhere near as clean to implement
23:51 < christophsturm> well, you have the source :)
23:51 < livinded> christophsturm: I'm trying to figure out a way to do this as an addition, not a patch
23:52 < christophsturm> maybe some debian dev already split it up. they do that kind of thing :)
23:52 < livinded> I seriously doubt any of this would be merged into mainline and I don't really want to maintain patches
23:52 < christophsturm> what do you want to do?
23:53 < livinded> proper sandboxing
23:53 < livinded> whitelisting and blacklisting of functions/modules
23:53 < orlandodelaguila> hello
23:53 < livinded> I have it working with the node stdlib but the problem is that you can still just enter the code from stdlib
23:54 < livinded> I was going to dynamically hook the libuv calls and stub them out but since it's a statically linked binary I can't. I need to look at the binding layer and see if I can do it there instead
23:58 < zackattack> How come the Profiles tab in node-inspector never shows up for me, only Scripts and Console? 
--- Log closed Wed Jul 04 00:00:28 2012
