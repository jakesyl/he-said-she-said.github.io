--- Log opened Tue Apr 30 00:00:14 2013
00:01 < ryanrolds> This bot is a genius: https://twitter.com/camibendfeldt/status/329021621337731072
00:01 < Raynos> Industrial: they already have unique identifiers. It's called the name of the module in package.json :D
00:02 < Industrial> Raynos: no, the instances of them have unique identifiers. there may be 20 buttons (Button's) on a page :P
00:02 < Raynos> oh they dont need unique identifiers
00:02 < Raynos> unless the thing your dealing with has actual identity
00:03 < kenperkins> so who's in SF?
00:05 < octetcloud> Is NODE_PATH=./lib ./node test/simple/test-whatever.js  the right way to get my ./lib/ ahead of any others?
00:07 < Aidanie> I'm install a package via npm, the install is successful but then my code says the package cannot be found. What do? (working with 'nodetime')
00:07 < qard> You might want to make sure the original NODE_PATH is in there.
00:14 < techkid6> How long does nodejs normally take to build? It has going for a good 40 minutes now
00:15 < TheJH> techkid6: you won't need to do it again very soon, so be patient and eat some cake or whatever :)
00:16 < techkid6> I don't have cake, but, thanks :D
00:16 < piklu> ls
00:16 < ChrisPartridge> techkid6: depends on the hardware really
00:16 < piklu> Hii guys
00:16 < techkid6> Probably the fact that it is on a RPi is doing it xD
00:16 < octetcloud> Because I don't think my hacks to lib/https.js are being seen (I put in a bogus require, and it never gets hit).
00:17 < TheJH> techkid6: oooh, yes. I started using an rpi a few days ago – everything is sooo slow :/
00:17 < piklu> I am thinking of providing Node.JS + REDIS / MongoDB hosting - do you think you guys as community thinks its needed - its on very good pricing - like a webserver of 1 GB memory + a Redis setup of 8GB memory for 60-70 USD
00:17 < TheJH> piklu: that's not per month, right?
00:18 < piklu> TheJH - That is per month, these are dedicated virtual instances - not shared.
00:18 < TheJH> piklu: wtf? dedicated virtual instances?
00:18 < piklu> TheJH - yes. Is that unacceptable ?
00:19 < piklu> TheJH - ??
00:19 < piklu> What happened ?
00:20 < TheJH> piklu: erm, what would "dedicated virtual instance" mean? you share a physical host, but the users are in different VMs, just like normal VPSes?
00:20 < piklu> TheJH : Yes, kind of like VPS
00:21 < piklu> The redis and webserver will be in the same datacenter making your communication fast, they can be on same node as well. So one virtual machine running Redis and another for Node
00:22 < piklu> The webserver will be on 1GBPS 
00:22 < TheJH> piklu: well, I think that that's very overpriced. for 15EUR per month, I can get a VPS with 4GB RAM and a 2GHz CPU
00:23 < piklu> TheJH ??? 8GB RAM VPS for REDIS, and you know its KVM
00:23 < piklu> Can u find me KVM in that price ?
00:23 < piklu> And these are quadcores
00:24 < TheJH> piklu: http://www.netcup.de/vserver/ , have a look at "Saturn" – quadcore, 4GB RAM, 23EUR per month
00:25 < TheJH> piklu: that's where I have my VPS, too (although it's a much cheaper one)
00:26 < piklu> Thats OpenVZ
00:26 < piklu> a shared container
00:26 < piklu> if you understand virtualisation
00:27 < piklu> its very famous for being oversold
00:27 < piklu> Also - 23 Euro x 2 = 46 Euro - Almost 60-70 USD ???? But mine is KVM on SAS 15K Drives
00:27 < TheJH> piklu: what's openvz?
00:28 < techkid6> And, once I have node, all the bootstrap errors while compiling for not having node will hopefully be resolved, so, worth the wait :D
00:29 < TheJH> piklu: netcup uses KVM, too
01:08 < techkid6> Oh my gosh, 2 hours later, it failed.....I just..... let me pastebin the error >:<
01:09 < techkid6> This is so..... http://pastebin.com/EqHrHSN2
01:15 < techkid6> heck, can I just apt-get install it? :/
01:16 < techkid6> apparently.... i can? :O
01:17 < jeffwhelpley> I was looking at this list of websites using node.js (https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node) and it seems like a large majority of the sites are using Node as an API. The only sites I could recognize that use Node.js for their main website seem to be Trello and Klout. Are there any other major websites you guys are aware of that use node for their 
01:17 < jeffwhelpley> main website?
01:19 <@isaacbw> what do you mean by main website
01:19 < TehShrike> jeffwhelpley: what do you mean by "main website" - serving up static files?
01:19 <@isaacbw> server-side templating?
01:20 < jeffwhelpley> serving up web pages
01:20 < jeffwhelpley> perhaps some static files but using ejs/jade to generate pages
01:21 <@TooTallNate> jeffwhelpley: how are you assuming what's serving their main website?
01:21 < jeffwhelpley> @TooTallNate, you mean for the ones on the list?  Basically I went through the ones that I recognized and did a google search on their tech stack
01:22 <@TooTallNate> i see
01:22 < jeffwhelpley> fyi, the reason I am asking is that I am trying to do this myself and we want to be able to point to other major sites that already do this in case our investors ask
01:23 <@isaacbw> that wouldn't be a question that any smart investor would ask
01:23 < jeffwhelpley> ha...too true, perhaps I am being to paranoid about it
01:24 <@isaacbw> just make a product
01:24 <@isaacbw> how to get there doesn't matter so much
01:26 < jeffwhelpley> @isaacbw, thanks! that helps
01:41 < ironfroggy> i am trying to install NPM, using the install.sh script, but it hangs after the "All clean!" line and isn't progressing at all. npm_debug=1 doesn't give me any extra info either. anything i might be able to do?
01:41 < TehShrike> jeffwhelpley: "how are you planning on making this product?" "TECHNOLOGY!"
01:43 < ironfroggy> nm just was confused with no output for that long
01:49 < ChrisPartridge> Whats the best way to check if an argument is a stream or buffer?
01:50 <@mbalho> Buffer.isBuffer
01:51 <@mbalho> (iirc)
01:52 < ChrisPartridge> mbalho: yep, what about checking for a stream - guess just look for the readable method
02:04 <@Nexxy> lol looks like I missed a good chat
02:05 < techkid6>  is there any docs for LESS on node? I am trying to find the flags
02:42 < niggler> lol http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform
02:43 < innociv> haha
02:44 < niggler> I'm impressed that he raised 25K pounds for it
02:44 < innociv> Yeah
02:44 < niggler> without even a prototype 
02:45 < innociv> Yeah that is really crazy
02:49 < donCams> so... what's the difference between strata and express?
03:02 < arnorhs> hey, do you guys know of a good module for doing BDD style integration tests in mocha. with type/value checking beyond assert?
03:02 < arnorhs> or is mixing should together with mocha just the way to go?
03:02 < LuckyBurger> arnorhs look at should
03:02 < LuckyBurger> <3 should
03:02 < arnorhs> ah ok.. i saw frisby.js -- that looked pretty nice but it's using jasmine, which I'm not as much of a fan of
03:02 < niggler> arnorhs: you.should.use.should
03:03 < LuckyBurger> ^
03:03 < LuckyBurger> hahaha
03:03 < arnorhs> lol
03:03 < LuckyBurger> i like shoulds document equals specificly :x
03:05 < arnorhs> i'm planning on testing JSON API endpoints, and figured that combining mocha + should + http request might be a good blend.. also there might be something nice in using json xpath along with that to check if the data is correct
03:06 < arnorhs> that's probably too crazypants to think that's available as a module
03:07 < c4milo> arnorhs: for JSON, you could use JSONSelect 
03:07 < c4milo> or JSON Schemas 
03:08 < c4milo> arnorhs: I personally use JSON Schemas v3, with http://zaach.github.io/orderly.js/ 
03:08 < c4milo> and the module json-schema 
03:10 < c4milo> http://github.com/kriszyp/json-schema <--- arnorhs 
03:16 < devoidfury> any recommendations for public code reviews? I'm new to writing libraries and would appreciate some commentary
03:17 < arnorhs> devoidfury: I can take a look at your code, but maybe i'm a bit too pendantic, and not knowledgable enough about Node compared to some people here
03:17 < arnorhs> or do you mean a particular tool?
03:17 < devoidfury> https://github.com/devoidfury/express-debug/tree/1.0
03:18 < niggler> devoidfury I'm told people accept cash money for doing code reviews
03:18 < devoidfury> arnorhs: style, project layout, node tips, etc
03:18 < arnorhs> devoidfury: you want me to take a look at the whole repo? normally people look at a particular commit or a pull request
03:18 < arnorhs> sure
03:19 < devoidfury> arnorhs: it's fine if you don't, just throwing it out there =)
03:26 < arnorhs> devoidfury: the project setup seems reasonable to me.. though i'm not super familiar with express modules
03:27 < devoidfury> arnorhs: thanks for taking a look
03:27 < arnorhs> i just randomly saw this.. https://github.com/devoidfury/express-debug/blob/1.0/lib/assets/js.js#L1-L6 -- why do you use dollar prefixes? normally people use those to indicate a variable being a jquery/zepto object
03:28 < arnorhs> if you just use that naming scheme outside of that convention, it's fine by me,.. just asking
03:28 < devoidfury> habit -- when I see $varname, I think jquery/zepto/dom; in this case dom references
03:29 < sinclair-work> ok, i may be a bit tired, but i have a node question
03:29 < sinclair-work> assume i wanted to write a page crawler
03:30 < sinclair-work> i want to write an algo that will visit each page, search for the links, and recursively continue on until it does not find anymore links
03:31 < sinclair-work> the result of this function will be a list of pages (a array of strings containing the content for each page)
03:31 < sinclair-work> i am way to tired to try and figure this out.
03:32 < arnorhs> sinclair-work: you mean that you'd download every page that each link links to?
03:33 < sinclair-work> arnorhs: yeah
03:33 < sinclair-work> its a recursive thing, and i normally wouldn't struggle, bit node makes does everything on callbacks
03:34 < sinclair-work> and im tired
03:34 < Luziiann> !
03:34 < sinclair-work> i think i need a stack?
03:34 < arnorhs> sinclair-work: you mean you'd recursively go into each document and find all links there, and in each link's content you'd find all the links et cetc ?
03:35 < sinclair-work> yeah
03:35 < sinclair-work> on and on and on
03:35 < sinclair-work> until it finds no more links, 
03:35 < arnorhs> sinclair-work: yeah, i think the approach you'd take is to make a flat array of links to crawl
03:35 < arnorhs> and you'd just append each link to that array.. and then you have some thing that just always goes through that queue and fetches links
03:36 < sinclair-work> arnorhs: i have a method signature as follows
03:36 < arnorhs> or that's one approach at least
03:36 < arnorhs> bring it on
03:36 < sinclair-work> arnorhs: you fine with TS?
03:36 < sinclair-work> TypeScript
03:37 < arnorhs> hm, i can probably read it
03:37 < arnorhs> and pretend it's working and that it's pseudocode
03:37 < sinclair-work> crawl(url:string, callback: { (  pages:string[]  ): void; }): void
03:37 < sinclair-work> {}
03:38 < sinclair-work> an implementation would look like...
03:38 < sinclair-work> crawl('http://domain.com/index.html', function(pages) {  /* a list of strings containing the content on each page*/   });
03:39 < sinclair-work> arnorhs: on the outset, the recusion should be fine, but im not sure how i would tell to callback
03:39 < arnorhs> devoidfury: this is pretty minor, but i personally think a .forEach loop is more clear in cases like this - https://github.com/devoidfury/express-debug/blob/1.0/lib/panels/index.js#L62-L66 -- don't know if there are performance reasons etc for using a normal for loop though
03:40 < arnorhs> sinclair-work: it would be nice if you'd use a gist or something instead, people don't appreciate code in the chat room
03:40 < sinclair-work> arnorhs: its a one liner
03:41 < sinclair-work> arnorhs: one line of code is perfectly fine
03:41 < arnorhs> sinclair-work: but yeah, that looks reasonable
03:41 < arnorhs> and the string array, the pages:string[] is that an array of lines? or is that an array of links?
03:44 < arnorhs> cc sinclair-work 
03:45 < sinclair-work> arnorhs: array of page content
03:45 < sinclair-work> arnorhs: its ok, i will work it out, it just means sitting down and fluffing with it
03:45  * sinclair-work could use some sleep tho
03:46 < devoidfury> arnorhs: I was under the impression that forEach is a touch slower than for loops, and that part of the library is run every request
03:46 < arnorhs> devoidfury: ok, sure, i wouldn't be surprisded if they were much much slower
03:47 < sinclair-work> arnorhs: i would say forEach vastly slower than a for loop
03:47 < sinclair-work> forEach would mean calling callbacks, jumping scope, etc
03:47 < sinclair-work> for doesn't do any of that
03:48 < arnorhs> not all projects need that kind of optimizations
03:49 < sinclair-work> arnorhs: i don't really see a reason to use foreach really
03:49 < devoidfury> this particular library includes a timing profiler for middleware/routes
03:49 < arnorhs> and some poeple prefer code clarity over anything else (not aruing that normal for loops are hard to read, tho)
03:50 < sinclair-work> arnorhs: in other languages, i use foreach all the time, in node, i don't like the callback
03:51 < sinclair-work> arnorhs: the callback makes things more verbose, but i understand the intent
03:52 < sinclair-work> arnorhs: in node at least, you 'expect' callbacks to be async, so using foreach (which in synchronous) is mixing and matching paradigms, but this is just my thoughts on the matter
03:53 < MitchW> assumptions can be deadly.
03:53 < sinclair-work> (synchronous things shouldn't be in callbacks, except for predicates i.e array.map for example) 
03:53 < devoidfury> sinclair-work: that's something you have to be careful with in node -- always assume int's synchronous unless you know otherwise
03:53 < devoidfury> it's*
03:55 < devoidfury> well, that's probably not the best approach either. better just to check
03:55 <@Nexxy> isn't the standard assumption that things are async unless otherwise noted?
03:56 < devoidfury> in the node stdlib, yes. but not js core or libraries
03:56 <@Nexxy> interesting
03:57 <@Nexxy> I haven't encountered this
03:57 < MitchW> js core is all sync, most libs I use are a healthy mix.  if you're making assumptions though, expect to shoot yourself in the foot for not reading the doco/contract of the function/api you're using
03:58 <@Nexxy> what is js core in this context?
03:58 < MitchW> anything defined in the ecma specs
03:58 <@Nexxy> yeah
03:58 < devoidfury> sort, forEach, map
03:59 <@Nexxy> the language itself is obviously synchronous
03:59 <@Nexxy> but making the assumption that things will execute asynchronously isn't a foot-bullet
03:59 <@Nexxy> assuming that they will execute in order is the foot-bullet
04:00 < MitchW> the stack/scope overhead and perf degredation from such pollution in your typical JS engine (including V8) is noticeable if you're redundantly adding function stacks/etc to handle async cases for no reason
04:00 < MitchW> anyways i've got a meeting, bbl
04:02 < devoidfury> it could theoretically bite you if you add a statement after something you assume to be async expecting it to execute before the 'async' callback would
04:06 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:19 < ForSpareParts> I've got a git repository with an Express app in a subdirectory. Is there a good way to deploy that app to heroku?
04:20 < ForSpareParts> People seem to recommend a config.ru file, but it sounded like that might be something specific to Ruby? I've never used heroku before, so I'm a little turned around.
04:21 < Chase> God
04:22 < Chase> Trying to conquer  a capcha when you're trippin is hard
04:22 < Chase> so I need some real help please
04:22 < Chase> I've just finished reading a book, nut I just need one question answered 
04:23 < rvagg> Chase: here, this captcha is easier: http://craptchas.com/
04:23 < Chase> HELLO!
04:23 < rvagg> sorry, wrong url
04:23 < Chase> Can you help me pleeeease?
04:24 < Chase> does anyone talk?
04:24 < ChrisPartridge> ForSpareParts: doesn't heroku read your package.json?
04:24 < ChrisPartridge> Chase: ask the question, don't ask to ask
04:25 < Chase> I'm sorry
04:26 < Chase> How do I or can I set up an Node.JS server on my Linux server that is being hosted by hostgator
04:26 < ForSpareParts> ChrisPartridge: It apparently expects the app to be at the top level. Is the best thing for me to do to insert some wrapper stuff at the top? Like an index.js that just requires and calls my app one level below?
04:27 < Chase> So you just add the javascript files that were writeen in Node and put them on the server?
04:28 < ChrisPartridge> ForSpareParts: you could probably put your package.json in the repo root, along with a procfile - then again, I don't use heroku
04:28 <@Nexxy> Chase, you need to install node.js
04:28 < Chase> I did
04:28 < Chase> and I just finished reading an intro book on it
04:28 <@Nexxy> on your hostgator account?
04:29 < Chase> Yeah could I 
04:29 <@Nexxy> no
04:29 < ForSpareParts> Whoops. Sorry about that. ChrisPartridge, if you said anything I might've missed it. I accidentally left the room for a minute.
04:29 <@Nexxy> you will need something like nodejitsu or heroku
04:29 < Chase> So I have to run them on my own machine?
04:29 <@Nexxy> you could do that for development & testing
04:29 < ChrisPartridge>  ForSpareParts: you could probably put your package.json in the repo root, along with a procfile - then again, I don't use heroku
04:30 < ForSpareParts> ChrisPartridge: Fair enough. Thanks!
04:31 < Chase> So for me. I would have to find a host that supports nodejs?
04:32 < devoidfury> Chase: either that or a VPS with root access
04:32 < Chase> ok sorry
04:32 < Chase> It's hard to read this text. 
04:33 <@Nexxy> you will need to find a host that supports node.js, correct. Things like linode or prgmr offer inexpensive DIY solutions. nodejitsu and heroku have hosted solutions that are much easier.
04:34 < gkatsev> red
04:34 <@Nexxy> that's easy to read, right?
04:34 <@mbalho>                                          Nuclear Launch Detected
04:34 < gkatsev> very visible
04:34 <@Nexxy> oh good
04:34 < donCams> run for yo lives!
04:35 < Umren> Nexxy, you forgot that they are much more pricy
04:35 <@Nexxy> not really
04:35 <@Nexxy> heroku has free tier
04:35 <@Nexxy> nodejitsu has liek, $3 drones
04:35 < innociv> jolent is an option
04:35 < innociv> I use amazon AWS
04:35 < Umren> digitalocean is good too, and almost free
04:35 < Umren> for it's price ;)
04:36 <@Nexxy> free for a price?
04:36 < Umren> yep
04:36 < innociv> haha
04:36 <@Nexxy> funny how that works out
04:36 < Benoit`> hum, i may have failed a rebase on a pull request that already exists... does anyone have suggestion on how to clean it up? https://github.com/joyent/node/pull/5380
04:36 < innociv> I actually think amazon is the cheapest for the memory and bandwidth.
04:36 <@Nexxy> pretty sure niftylettuce disproved that innociv !
04:36 < innociv> You get a massive connection to handle DDoS attacks.
04:36 <@Nexxy> linode is cheaper
04:37 < innociv> No it's not
04:37 <@Nexxy> you get 8 cores
04:37 < innociv> I had Linode
04:37 <@Nexxy> linode is the answer, linode will protect you from the terrible secret of space
04:37 < innociv> Linode sucks against DDoS attacks when I had it 2-3 years ago.
04:37 <@Nexxy> why are you being DDoS'd?
04:37 < innociv> Amazon gives you a firewall in front of the server.
04:37 < innociv> Because internet
04:37 <@Nexxy> you don't just get ddos'd
04:40 <@mbalho> happened to estonia
04:40 <@mbalho> (thats what madeleine albright told me at least)
04:40 <@Nexxy> was it not political?
04:41 <@mbalho> well it wasnt provoked
04:41 <@mbalho> other than by the fact that they are a nation that used the internet
04:43 < Benoit`> (ok, nevermind, I fixed it :))
04:55 < kingkarl85> does anyone know how to get the raw http that is send when using http.request?
04:55 < kingkarl85> i want to see what is being sent
04:55 < kingkarl85> can't tell from the docs how to get the raw
05:00 < DaMorpheuS> what is the best method to use multiple node processes? is that with the child_process event emitter or is there a better way?
05:00 <@mbalho> best method is to require()
05:01 < DaMorpheuS> kingkarl85: you can just console.dir the request var.
05:01 < DaMorpheuS> require is the same process
05:01 <@mbalho> yep. why do you need multiple processes?
05:02 < DaMorpheuS> because i want to use my second process as a helper
05:02 <@mbalho> what does a helper do?
05:02 < DaMorpheuS> it will round up a lot of data for the main process so i don't want to wait for it
05:03 < DaMorpheuS> i read something about forking the process but i don't know if that's the best way to go or just create a tpc server and call that
05:05 <@mbalho> if 'round up data' involves i/o that can be done async you can just do it from your normal process and it will be just as fast
05:06 < DaMorpheuS> still i want to know how to do this. my architecture requires this process to run saperatly from the access process
05:08 < kingkarl85> DaMorpheuS: thanks!
05:09 < kingkarl85> DaMorpheus: I am looking at making a few worker processes always connected and connecting via a socket back to the main node process - then you can rpc work to the workers.
05:10 < kingkarl85> That way you can know how many jobs you have sent to each worker and know which worker is least busy etc
05:10 < kingkarl85> better then forking all time
05:10 < DaMorpheuS> so using a net socket
05:11 < kingkarl85> yeah!
05:11 < kingkarl85> so make the main process connect to socket
05:11 < kingkarl85> bind*
05:11 < kingkarl85> then make the workers connect to it
05:12 < kingkarl85> use something like messagepack or json-rpc to communicate
05:12 < kingkarl85> http://msgpack.org/
05:13 < kingkarl85> websockets are really cool as messages are whole and delivered whole - where a normal net.socket is just binary data - you would need to workout where one message starts and ends.
05:13 < mikeal> msgpack is like json, but for hipsters ;)
05:14 < kingkarl85> mikeal: lol
05:14 < DaMorpheuS> yeah but using a websocket localy looks like a strange way to approach
05:14 < DaMorpheuS> i think binary socket is faster
05:15 < kingkarl85> it would be faster as the websocket client and server operate a little different
05:15 < kingkarl85> i think the server always sends with a different message envelope
05:15 < kingkarl85> but to use net.socket you will need your own message envelope
05:16 < mikeal> you might want this
05:16 < mikeal> https://github.com/binaryjs/node-binarypack
05:16 <@Nexxy> omg... *the* mikeal !?
05:16 < niggler> mikeal what's your actual name?
05:16 <@Nexxy> lol
05:16 < mikeal> it's part of binaryjs, which i believe is meant to deal with some of the binary-formatting-over-websockets issues
05:16 < mikeal> yes
05:16 < kingkarl85> mikeal: does this do the message envelope also?
05:16 < mikeal> that is my name
05:16 < niggler> is it mike-al, mikael ?
05:16 < mikeal> who would make up a normal name but with bad spelling?
05:16 <@Nexxy> haha
05:17 < niggler> or literally "mike" + "al"
05:17 < mikeal> exactly literal
05:18 < niggler> new meaning to "two first names"
05:18 < hackedy> mikeal is actually two people
05:18 < hackedy> Mike
05:18 < hackedy> and
05:18 < hackedy> Al
05:18 < hackedy> Al's Custom Node Modules
05:18 < hackedy> Mike's (Function) Body Shop
05:19 < niggler> Al Gorithm?
05:21 < hackedy> Mike Roprocessor
05:21 <@Nexxy> rofl
05:22 <@mbalho> names from ReBoot
05:22 < ljharb> i loved reboot
05:22 < niggler> wtf is reboot
05:22 <@mbalho> why did you let your love die
05:23 <@mbalho> reboot is this obscure tv show, you probably havent heard of it
05:23 < niggler> http://reboot.com/ ?
05:23 <@mbalho> yes
05:23 <@mbalho> oh wow it actually is
05:24 < kingkarl85> DaMorpheuS: the other advantage to have separate workers is that these workers could scale to be on seperate machines so you will be in a position to scale much larger.
05:25 < DaMorpheuS> that's why i want workers at the first place to scale over multiple machines
05:26 < DaMorpheuS> ah and so a fork won't work ofcourse
05:29 < kingkarl85> fork just makes a new process on the current machine
05:37 < kingkarl85> DaMorpheuS: you will also need to look at a way of distinguishing which message is a new request and which message is a reply
05:38 < kingkarl85> have a look at JSON-rpc v2 and other RPC implementations
05:39 < kingkarl85> the good thing with JSON-rpc is that you could use that format then use messagepack or binarypack instead of JSON.stringify()
05:43 < DaMorpheuS> kingkarl85: does the type of message not say that allready
05:51 < kingkarl85> message pack and binary pack is just a way of packing a message
05:52 < kingkarl85> to do rpc you would need to have a message id - method to call, params etc
05:53 < kingkarl85> The other way to do it would be to create a traditional REST api can use net.get to call for the response
05:53 < kingkarl85> but that means the server would need to know about all the workers
05:58 < DaMorpheuS> I have a sessionID of the client who requests data so on that base i can send the retrieved data back to that client.
06:04 < kingkarl85> If your work has 3 jobs under way - they may respond in a different order - if you send it all over the same socket - how do you know what response if for what request to pass back to your original request?
06:04 < kingkarl85> If all you are doing is to try and scale out a web server then look at http://nginx.com/ to do your load ballancing and scaling
06:04 < kingkarl85> balancing*
06:13 < piklu> TheJH ??? email them, or check in ur server, it ll be probably openVZ at that price
06:13 < piklu> byee
06:57 < booyaa> has anyone got a module template? i've having problems trying to work out scope/visibility for my functions w.r.t. to using nodeunit
06:58 < booyaa> right now i'm using var moduleName = {}, adding funcs as moduleName.foo = function() { return bar(); };
06:58 < booyaa> then exports-ing moduleName
06:58 < booyaa> module.exports = moduleName; if you want to be explicit
07:09 < Sven_vB> how about using the require and module.exports scheme?
07:10 < Sven_vB> +directly
07:10 < Sven_vB> exports.foo = function() { return bar(); };
07:12 < booyaa> that'll result in a lot of extra lines for each function as you export each one in turn
07:16 < ljharb> sveisvei: don't use "exports", use "module.exports"
07:16 < ljharb> sorry, Sven_vB 
07:17 < ljharb> booyaa: but what i'd do ideally is have each function in its own module, and test those separately.
07:18 < booyaa> what about functions that make up module i.e. related functionality?
07:23 < ljharb> booyaa: how related? generally i'd expect a module to export a single function ideally
07:25 < booyaa> one sec, let me show you my lib. but i use the module as a series of functions like the core objects... fs.readFile etc
07:25 < booyaa> https://github.com/booyaa/poisonpentametron/blob/master/lib/poisonpentametron.js
07:26 < booyaa> so pre-testing coding i had two functions i could use in the module isFresh and updateFeed
07:26 < ljharb> looks like lots of those functions depend only on a "config"
07:27 < ljharb> also i think it's odd that all your requires aren't at the top
07:27 < booyaa> so i'm artificially bunlding them together?
07:27 < ljharb> thats what i'm suggesting, yes
07:27 < booyaa> ah yeah things like request eh?
07:28 < ljharb> it's cool if your main module exports a bunch of functions, but inside your module, there's no reason for them to be all in one file
07:28 < ljharb> also, you can even put the config loading in a separate module, then everything can just require it on its own
07:28 < booyaa> yeah i've tried to only require them when i need them, okay. crikey always worried this would become to granular
07:29 < ljharb> "too granular" is usually a good thing
07:29 < booyaa> but sounds like this is cool
07:29 < booyaa> yes i know it's hideous bit of code :D
07:29 < ljharb> the code smell is when it's too broad, not the other way around :-)
07:35 < [AD]Turbo> hola
07:36 < booyaa> started retrofitting it with grunt so will start looking clean 
07:36 < booyaa> so still better to require all modules at the top? i guess it's a fallback to ensure deps are missed in package.json?
07:36 < booyaa> oh i meant in terms of console.log-less lol
07:36 < booyaa> so move out functions, presumely  you have one main lib entry point called main.js? and require all the other functions with their and call the module.exports there? 
07:37 < ljharb> yes. if you have a function "foo", make a "foo.js" and require that into your main.js
08:15 < booyaa> oh ljharb before I forget ty will give the restructuring a go
08:17 < jjore> Hi, I've recently found it useful to have AND, OR, and SEQUENCE combinators and wrote http://pastie.org/7741807 however I'm confident I should have just looked in some standard npm library.
08:17 < jjore> Your thoughts?
08:22 < booyaa> so how does that work? and(1,1) === true? 
08:41 < thealphanerd> good eve
08:41 < thealphanerd> does anyone know much about llvm and asm.js?
09:10 < iggyZiggy> hello
09:11 < thealphanerd> hi
09:11 < iggyZiggy> i want to rewrite my current game server code to something better so i could use some recomendations
09:11 < FMJaggy> what is it in now?
09:11 < iggyZiggy> it's just nodejs, custom code
09:12 < thealphanerd> what kind of game server?
09:12 < iggyZiggy> tcp
09:12 < iggyZiggy> i mean it's for turn based game
09:12 < FMJaggy> what would necessitate a rewrite? 
09:13 < iggyZiggy> i would like to write crash-only code
09:13 < iggyZiggy> something like hook.io
09:15 < iggyZiggy> i would like to rewrite it in a way i can separte components, in a way they can work independently
09:16 < FMJaggy> i don't know how well all of those statements correlate
09:16 < iggyZiggy> i'm having difficulties explaining, sorry :)
09:17 < iggyZiggy> maybe an example would be better
09:17 < iggyZiggy> let's say users join the lobby
09:17 < iggyZiggy> then start a game room
09:18 < iggyZiggy> i change something in game logic code, let's say fix some bug or add something new
09:18 < iggyZiggy> after that every new game room should run the latest game room
09:19 < FMJaggy> for instance seperating components so that they work indepedently can be done through making the code compatible with unit and integration tests, without switching frameworks or anything
09:24 < iggyZiggy> guess i'll have to try again :)
09:24 < sambarino> but i think he wants different versions of modules of his code to run concurrently.... ?
09:24 < sambarino> or am i missing something :)
09:24 < iggyZiggy> yes, let's go with that :)
09:24 < FMJaggy> crash-only software is a seperate idea (http://en.wikipedia.org/wiki/Crash-only_software) wooga has an infoq presentation with their erlang attempts but they switched off
09:25 < FMJaggy> doesn't mean it's bad but maybe see if you agree or disagree with their thoughts.
09:26 < iggyZiggy> the current problem is i can't change anything without restarting the game server, disconnecting all users
09:26 < BadDesign> Plugins!
09:27 < sambarino> it's an interesting idea
09:27 < iggyZiggy> i would like to be able to make changes that will not affect users previously connected, let them play untill they finish and when they want to start a new game, they run the updated version
09:28 < sambarino> games like starcraft 2 have "scheduled maintanence" where they shut down the servers and update the code
09:28 < sambarino> but if you could get your idea working it would be cool
09:29 < iggyZiggy> yeah, it pisses off a lot of people when i have to disconnect 1k users at once while they are in middle of the game :)
09:30 < iggyZiggy> or it pisses me off when i have to wake up early just to disconnect as few users as possible to make changes
09:31 < greelgorke_work> iggyZiggy you can probably solve that without changing your code, but by maintaining a load-ballancing proxy and spawning new server instances, rerouting the new request to it and let the old ones on the old machines, so they can go down gracefully
09:31 < stagas> greelgorke_work: I was about to say that exactly :P
09:31 < greelgorke_work> it's the same aproach behind learnboosts up lib for http server, you can just prot that
09:32 < greelgorke_work> port*
09:33 < iggyZiggy> that's what i usually do, but then i get a lot of complaints from people who stay on the old instance or from the people who get on new server instance and can't find/play with friends who are on other server instance
09:34 < greelgorke_work> so you want to modularize your code more and exchange code on live sessions seamlessly
09:35 < iggyZiggy> yes
09:35 < greelgorke_work> i'm not aware of any modules for exactly that. you'll have to implement a managing interface, which you could use to invalidate the require cache for newly deployed modules
09:36 < iggyZiggy> but more importantly i would like to slice my current game server into separate components/instances/processes
09:36 < stagas> iggyZiggy: send a message to the clients to refresh automatically when they finish their current game
09:36 < iggyZiggy> a lot of users are idiots, can't rely on that :)
09:36 < greelgorke_work> modularize your code extensively, design modules public interfaces to be abstract enough and not change on every fix
09:37 < stagas> iggyZiggy: or have the rooms on a separate instance
09:38 < iggyZiggy> that could work, but how would rooms comunicate with main instance, for example when users join lobby they see list of availible rooms
09:38 < stagas> the instances announce their rooms to the lobby instance
09:38 < stagas> the game instances that is
09:40 < iggyZiggy> ok so when game room is created it should dispatch event/send msg to lobby, lobby shows that new room in a list
09:40 < stagas> right
09:41 < iggyZiggy> and i want to be able to make a change in game room, lets say compile new game room and after that point users who create new game room would run that new version but they would still be able to exit that room and go back to the old one
09:42 < stagas> well the old room won't die if there are people playing in it so it should show and work I guess
09:42 < iggyZiggy> if it's separte process and uses the same events/msg it should work, i just have no idea how to connect it
09:46 < stagas> you'd need to separate lobby and game code completely and have new game code load on room connect
09:48 < sambarino> if your code worked via like api calls then you could update the api in such a way that the calls and responses are the same and it should work
09:48 < sambarino> without needing multiple instances etc
09:50 < iggyZiggy> i like the idea of having it all separated, each instance doing its own job without affecting each other or crashing everything
09:51 < iggyZiggy> just don't know how to connect it after separation, for example, how would game room update looby with player count
09:52 < iggyZiggy> or how would lobby get new info about the game room
09:53 < sambarino> well the game could have events that the lobby listens to and visa versa, like "player joined" / "player left" and send the current number as event data
09:54 < iggyZiggy> thats how it works now, but it's all in one process :)
09:55 < sambarino> someone in my company works on a similar type of project, just got paranoid that you might be him :P lol
09:55 < stagas> iggyZiggy: you could use a pubsub
09:56 < iggyZiggy> pubsub?
09:56 < stagas> iggyZiggy: or just http calls, depends on your environment really
09:56 < iggyZiggy> sambarino, take it easy on weed :)
09:57 < sambarino> lol
09:58 < iggyZiggy> stagas, yes! something like that
10:03 < Lorentz> [A
10:08 < MI6> joyent/libuv: Fedor Indutny v0.10 * 67f9b91 : stream: use harder sync restrictions for osx-hack - http://git.io/F3rbtg
10:24 < iggyZiggy> long live stagas! :)
10:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:06 < sandfox> has anyone used mikeals request module with a socks5 proxy before? If so, how...?
11:14 < Omid> hi
11:15 < dypsilon>  Hi everyone, I'm looking into implementing a small message queue system. Any recommendations? 
11:15 < Omid> is it possible to update the output of a web page before response.end()
11:15 < Omid> ?
11:15 < Omid> Can I have an ajax like output with nodejs?
11:16 < dypsilon> Omid, what framework do you use?
11:16 < Omid> for example, I want to write a code to print fibonacci numbers, one per second, is it possible?
11:17 < Omid> dypsilon: I'm not using any framework yet
11:17 < dypsilon> Omid, it's possible using either polling or websockets.
11:17 < saschagehlich> Does anybody know whether there is some kind of hidden plain-filter in jade? I'd like to have a plain text only template, but writing "|" in front of every line really sucks…
11:17 < Omid> dypsilon: which frameworks support them?
11:18 < dypsilon> Omid, look at socket.io
11:18 < Omid> dypsilon: it's a module?
11:18 < dypsilon> Omid, http://socket.io/
11:19 < dypsilon> yes
11:21 < snuggl> Omid: but tbh, you should roll your own long polling solution or similar atleast one, else it can be quite magic how its all fits togheter
11:21 < snuggl> if you have the time!
11:22 < mscdex> or use engine.io!
11:23 < snuggl> The DreamHost customer who owns engine.io has not yet uploaded their website
11:23 < snuggl> =(
11:23 < Havvy> Omid: (function fib (n1, n2) { console.log(n1 + n2);  setTimeout(fib.bind(null, n1+n2, n1)); }())
11:24 < dypsilon> I'm looking into implementing a small message queue system. Any recommendations? 
11:24 < snuggl> Havvy: that wont work over http though
11:24 < Havvy> No, but it handles the fib once a second part.
11:24 < sandfox> dypsilon: don't :-)  
11:25 < sandfox> dypsilon: axon is pretty light wieght
11:25 < Omid> Havvy: yes, for me the main challenge is the http
11:25 < dypsilon> sandfox, what's axon?
11:25  * dypsilon is looking at axons github
11:25 < sandfox> dypsilon: TJ module that basically gives JS it's own version of ZeroMQ
11:26 < snuggl> Omid: your "problem" is that once the the page is done sending itself to the client the communcation is done, but the client wont start rendering until the communcation is done too.
11:26 < mscdex> snuggl: github.com/LearnBoost/engine.io
11:26 < sandfox> dypsilon: how many messages a sec and how big are they?
11:26 < snuggl> Omid: to solve this we have come up with various hacks, like having a request ongoing for ever and let new data be sent over that wire
11:27 < snuggl> or to "almost-realtime" ask quite often for new data
11:27 < snuggl> so what you need to do is to find such a way to talk to the webserver, which suits your needs
11:28 < dypsilon> sandfox, the requirements are very low, 1-2 messages per hour, 100KB max. Mostly just job "events".
11:28 < snuggl> mscdex: im always suprised, and annoyed, that learnboost has nothing to do with boost, the framework =D
11:29 < dypsilon> tbh any ready message queue would suffice, I just have no knowledge in this area in node.js. What packages are popular, what are stable, what are they based on (reds? zeromq?)?
11:30 < snuggl> for that amount of traffic you can use i.e the file system and related metadata as storage.
11:30 < snuggl> files are way underused =)
11:30 < dypsilon> Also I would like to use mongodb as the storage for message queue because I already have it installed on the server.
11:30 < snuggl> "oh HTML that will be updated almost once a year? that has to go to a database"
11:32 < sandfox> dypsilon: worlds your oyster then… depends on how many moving parts you can put up with and how complicate your topology is… roll with mongo and cron job is the super simplest although a bit of an anti-pattern
11:33 < dypsilon> sandfox, thanks
11:54 < mkozjak> what is the proper way to check if my service is already connected to the remote server?
11:56 < remysharp> anyone know a way of capturing a control key in process.stdin (ctrl+R) without using process.stdin.setRawMode(true) ?
12:06 < Omid> is it possible to see the a progress bar when the npm is downloading packages?!
12:08 < sambarino> anything is possible, you just have to believe... (but seriously, i don't know)
12:09 < trodrigues> I might've seen that once, but I can't remember if it was an npm feature or a hack
12:20 < Omid> trodrigues: do you have any clue about that?! I really need it
12:21 < Omid> sambarino: I like your belief, and I hope it turns to be true (at least for me)
12:23 < greelgorke_work> Omid: https://github.com/isaacs/npm/issues/1257
12:25 < sambarino> might need to believe in your own ability to write the code for it Omid :P
12:28 < trodrigues> Omid: sorry, just the memory of seeing it :(
12:28 < trodrigues> I might've even dreamt it :p
12:33 < syskk> i need to convince my boss to convert his coffeescript codebase to javascript
12:33 < syskk> any suggestions?
12:33 < syskk> s/need/want/
12:33 < niggler> syskk there are no plans AFAICT for a major browser vendor to natively support coffeescript
12:34 < niggler> on the other hand, every major browser vendor natively supports javascript
12:34 < syskk> right
12:34 < syskk> for me the biggest concern is always context switching when working with JS library
12:34 < syskk> since there are far more JS libraries than CS
12:34 < niggler> so invariably you will be spending time in coffee and time in JS
12:35 < niggler> its not that syskk; the problem is that, since JS is the ultimate endpoint, you will end up doing work in JS throughout the development process
12:36 < syskk> right
12:36 < niggler> so since CS doesn't give you really significant efficiency advantages, the costs outweigh the benefits
12:37 < bajtos> piscisaureus_: ping
12:37 < niggler> isaacs wrote about this
12:37 <@piscisaureus_> sup bajtos
12:37 < niggler> http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly @ syskk 
12:38 < booyaa> dudes can I ask a non node.js question about programming languages and career advice?
12:38 < sambarino> well now you've made me curious booyaa
12:38 < syskk> niggler: thanks
12:38 < booyaa> asides javascript is there any other languages that would be useful for a would full stack developer? Im think erlang might be useful
12:39 < niggler> booyaa what is your plan
12:39 < booyaa> eventual write enough web services /api that pay for themselves so I can be totally self employed
12:40 < booyaa> I know that's kinda what were all trying to do
12:40 < zomg> I would pick up some language which I could use to rapidly develop and test ideas
12:40 < booyaa> node right now is proving really helpful thanks to nodejitsu stupidly cheap hosting
12:40 < niggler> how's your C booyaa 
12:41 < zomg> You can fix it later once you've proved people will pay for it
12:41 < zomg> =)
12:41 < niggler> also check out azure
12:41 < booyaa> niggler: awful i remember only bit from UNO
12:41 < niggler> (azure is free as part of biz spark)
12:41 < booyaa> uni yes azure on list to try
12:41 < syskk> booyaa: if you want to write CRUD style apps, Ruby on Rails is pretty popular
12:42 < booyaa> my day job im SQL/c# coder
12:42 < syskk> booyaa: node.js is also a good choice ;)
12:42 < zomg> Yeah Rails is a pretty decent option for rapid development
12:42 < niggler> node.js > rails for rapid development
12:42 < booyaa> oh totes the initial learning bit is tricky but this was mostly my lack of js knowledge
12:42 < zomg> Haven't used it a whole lot though and I keep hearing people talk about how it's no good in long run
12:43 < syskk> if you want to  improve your programming skills you should learn a functional language… im trying to learn haskell right now and its really interesting stuff ;)
12:43 < booyaa> so erlang and Haskell not so hot on the list?
12:43 < sambarino> i say it depends on what you like coding in, if you enjoy what you're doing you will ultimately do a better job of it
12:43 < zomg> Haskell is amazing =)
12:43 < niggler> gets back to context switches booyaa 
12:43 < Havvy> Erlang > Haskell. ;)
12:43 < zomg> You could definitely build web apis with Haskell too
12:43 < niggler> wait wait dumb question
12:43 < zomg> Havvy: does it have monads?
12:43 < zomg> lol
12:43 < niggler> booyaa is your goal to get hired by <startup of the month> or to actually build something
12:44 < Havvy> zomg: Since I'm not entirely sure what defines a monad, I don't know. Probably.
12:44 < zomg> haha
12:44 < booyaa> build something
12:44 < syskk> my day job is node.js :)
12:44 < booyaa> tbh node will do that just don't want to stuck with one language that's all
12:44 < zomg> Building something is easy
12:44 < niggler> learn C/C++ booyaa 
12:44 < zomg> but coming up with something that people will pay for
12:44 < zomg> well, not so much.
12:45 < zomg> :P
12:45 < booyaa> heh true
12:45 < syskk> invent a cryptocurrency
12:45 < syskk> ;)
12:45 < booyaa> hahah
12:45 < zomg> lol
12:45 < booyaa> thanks everyone
12:45 < zomg> wasn't there some conspiracy theory about bitcoin
12:45 < zomg> how it was simply a plan by the creator to inflate the value
12:45 < niggler> they aren't the hottest languages, but those have staying power
12:45 < zomg> and cash in when it goes really high
12:45 < zomg> :D
12:45 < niggler> zomg its not a conspiracy theory
12:45 < booyaa> yeah wired think they found who the real creator is
12:46 < niggler> in a zero-sum game, when some people get something for nothing, others must get nothing for something
12:46 < syskk> could be … but on the other hand, at the time.. the odds that bitcoins would be worth anything one day were pretty low
12:47 < niggler> the fundamental BTC problem is that there's someone now with millions of BTC with a negligible cost basis
12:47 < zomg> The odds that Google would overtake Altavista seemed pretty low back in the day as well
12:47 < zomg> :D
12:47 < syskk> true
12:48 < syskk> anyways, they well deserved that 100M$ if Bitcoin is here to stay
12:48 < syskk> or more like 150M$ now?
12:48 < Gottox> Schwarzenegger becoming governor was pretty unlikely too.
12:48 < niggler> if others are willing to buy BTC, the founder's fortune is well deserved
12:49 < zomg> Gottox: haha =)
12:49 < niggler> just like with companies going public
12:49 < syskk> a scam/conspiracy theory would imply that the creators actively tried to hide that but they  dont
12:49 < zomg> talking about arnie, watched the last stand this morning
12:49 < zomg> good stuff
12:49 < zomg> :D
12:49 < niggler> Gottox id argue that politics is about $$
12:49 < niggler> syskk its structural, but some people would rather call it a conspiracy than a scam
12:50 < niggler> would you call MLM a scam?
12:51 < syskk> MLM is different though
12:51 < niggler> how is it different?
12:51 < niggler> the value of BTC comes from other people accepting it for goods and services
12:51 < syskk> sure, like other currencies or precious metals
12:52 < syskk> i wouldnt call gold a MLM scam :)
12:52 < niggler> to contrast with PMs
12:52 < niggler> gold and silver do have intrinsic value in the form of industrial demand 
12:52 < niggler> and the use of gold as currency dates back many centuries
12:53 < niggler> true story: USD used to be a silver certificate
12:53 < syskk> yes, but its industrial value is nowhere near its actual market value
12:53 < Havvy> I personally don't see why we use gold/silver/fiat/bitcoins as a currency at all. None of them are intrinsically valuable to the majority of people.
12:54 < niggler> that's true syskk (that the value is higher) 
12:54 < niggler> https://upload.wikimedia.org/wikipedia/commons/7/70/US-%245-SC-1953-Fr.1655.jpg
12:54 < niggler> but there is a nonzero basis
12:55 < niggler> Havvy the whole concept of time value is arbitrary
12:55 < Havvy> niggler: Yes. Yes it is.
12:56 < syskk> personally, I believe cryptocurrencies are here to stay. we still have to find out if it will be bitcoin or another  one
12:56 < Havvy> syskk: Who says there's only one cryptocurrency?
12:57 < niggler> why syskk?
12:57 < syskk> yes , I mean we still have to find out if bitcoin will still be around in 20 years or it will be overtaken by another one
12:57 < niggler> syskk the cost to maintain the currency will outweigh the value
12:57 < niggler> that's why pennies are being phased out
12:59 < syskk> right
13:00 < syskk> i think that's one issue with bitcoin… eventually, mining might not be profitable enough
13:01 < niggler> i think the plan is to pay out transaction costs
13:01 < niggler> a seignorage sharing
13:01 < snuggl> syskk: well, the BTC doesnt have a set value, so mining also lacks a set value
13:01 < Havvy> syskk: It eventually won't. That just means that bitcoins will be worth more and more.
13:01 < sambarino> the problem with cryptocurrencies are that id (and i know it's a massive massive if) they ever get cracked we are f'd in the a. 
13:01 < sambarino> if*
13:02 < syskk> but mining has set real world costs
13:02 < snuggl> yes
13:03 < snuggl> but there are no cheaper ways to get btc
13:03 < syskk> yeah i guess it'll reach an equilibrium
13:03 < snuggl> as its the only way to get them
13:03 < snuggl> so it will be stable around a third world country salary
13:03 < niggler> is there even a mechanism to increase the supply of BTC (beyond the original limit)?
13:03 < snuggl> nope
13:04 < sambarino> the plan is just to deal in smaller and smaller fractions of bitcoins
13:04 < niggler> won't that result in a deflationary spiral at one point
13:04 < snuggl> its not needed, we just use smaller and smaller divisions of a BTC to make transacitons
13:05 < snuggl> niggler: not really spiral as its has a defined end
13:06 < snuggl> more like a non-recursive pyramid scheme
13:06 < snuggl> the early guys are going to be filthy ritch
13:06 < sambarino> it's much better than print-money based currencies
13:06 < snuggl> the only thing thats better is the ability to transmit then over a distance imo
13:06 < niggler> sambarino howso?
13:06 < deepy> snuggl: that's only if they don't spend money
13:06 < snuggl> deepy: in pratice they dont, so yes
13:07 < niggler> a small amount of inflation is healthy
13:07 < sambarino> because there's no reserve bank controlling the market
13:07 < deepy> snuggl: and the value is going to change slowly
13:07 < snuggl> deepy: the early adoptors, devs and devs family have 5 digit stashes of BTC
13:07 < deepy> even after the recent spiral in worth?
13:07 < snuggl> and people are acting like they did it all out of love and compassion =)
13:07 < snuggl> deepy: 5 digit amount of BTC, not 5 digit worth of
13:08 < sambarino> well it's in their interest to at least spend a fair amount of it so that there is more in circulation, otherwise it will always be "niche" and never a commonly used currency
13:08 < snuggl> so thats 10,000 * $120 atleast
13:08 < niggler> snuggl its the perfect scam
13:08 < deepy> snuggl: no I meant, when BTC hit that $275 I would've imagined that a lot of them sold all
13:08 < niggler> the wet dream of bernie madoff
13:08 < snuggl> ah
13:08 < snuggl> sure, that might have happened
13:08 < niggler> wait a second isn't it possible to trace what happened with the first few bitcoins?
13:08 < deepy> Sure
13:08 < deepy> all transactions are public iirc
13:09 < niggler> so ostensibly, if Satoshi sold, it should be possible to see how much
13:09 < snuggl> niggler: you can track to a waller, but you cannot see if one person has one wallet or thousand wallets
13:09 < snuggl> wallet*
13:09 < syskk> niggler: he hasnt sold anything
13:09 < niggler> but you can trace individual bit coins, right?
13:09 < syskk> niggler: he still has around 1M bitcoins that were never spent
13:09 < niggler> the first BTC, and all transactions involving fractions of it
13:10 < niggler> then what was the newest bitcoin to be used (when was it mined)?
13:10 < syskk> my pet theory is that he had a hardware failure, lost all his private keys and decided to jump off a bridge
13:10 < snuggl> tbh, even 120M is quite small profit for such an inventsion
13:10 < snuggl> invension*
13:10 < deepy> Don't you mean, what was the oldest bitcoin spent?
13:10 < snuggl> thats less then the diaspora guys got for some fancy blog posts
13:10 < syskk> snuggl: that's my point
13:10 < syskk> instagram founders got 1B$ from facebook
13:11 < syskk> i think whoever created bitcoin deserves quite a bit of money
13:11 < Omid> dypsilon: I get "Error: shasum check failed for /root/tmp/npm-24932/1367326343486-0.6491326112300158/tmp.tgz" while insta;lling this package!!!!
13:11 < snuggl> sure
13:11 < snuggl> also its a "scam" where we dont really need a victim for it to succeed
13:11 < Omid> dypsilon: is there any problem with socket.io repository?!
13:11 < sambarino> i wouldnt be surprised if he purposefully deleted his private keys to prevent someone else from having those coins and hoarding them
13:12 < dypsilon> Omid, more exclamation marks please
13:12 < dypsilon> Omid, sorry, I don't know, I never used socket.io before.
13:13 < sambarino> are you talking about the current socket.io package being unable to install?
13:13 < sambarino> or that github is down?
13:13 < dypsilon> no idea
13:13 < Omid> sambarino: yes
13:13 < Omid> sambarino: haveyou had the experience?!
13:14 < sambarino> i think it's more likely that it would be something wrong with your computer, or, one of the socket.io dependencies
13:14 < sambarino> it took me quite a while to get it installed correctly but it was due to dependencies not socket.io itself
13:14 < Omid> sambarino: you see, there is a problem with shasum
13:15 < Omid> sambarino: which means that the shasum of the package is not the same as it seems to be
13:15 < sambarino> oh, i haven't encountered that
13:15 < Omid> sambarino: dypsilon is it a way to ignore shasum checking?!
13:15 < sambarino> last time i did the install was last night
13:15 < niggler> yeah deepy thats what i meant
13:16 < niggler> syskk instagram deserved every penny
13:16 < syskk> im not saying they didnt
13:16 < Omid> sambarino: oh
13:16 < niggler> they threatened Facebook and accepted the buyout
13:16 < Omid> sambarino: I downloaded the package and it's broken
13:16 < Omid> sambarino: can you download and check it?!
13:16 < sambarino> ok
13:16 < syskk> just trying to put 100M in perspective
13:17 < Omid> sambarino:  https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.11.tgz
13:17 < niggler> the FB IPO was a bigger scam
13:17 < Omid> sambarino: I opened it with Archive manager and it's a broken zip file
13:17 < Omid> can you check it?
13:18 < niggler> Omid its a tgz
13:18 < sambarino> well i dont install it that way
13:18 < niggler> tar.gz
13:18 < sambarino> i use npm install
13:18 < Industrial> Say I have a tree of objects (Component's). I want to give each a Configuration object that I can get/set keys with. Can a CRDT Model be so that when I link two components (one becoming the sub-component of the other), the sub-component takes over all parent keys but is also able to override them for its own children?
13:18 < Omid> sambarino: I used the npm, and it gives error while extracting this package
13:18 < sambarino> i tried now and it worked up until this point...
13:18 < sambarino> > ws@0.4.25 install \node_modules\socket.io-client\node_modules\ws
13:18 < sambarino> > (node-gyp rebuild 2> builderror.log) || (exit 0)
13:18 < sambarino> because i didnt install node-gyp first
13:18 < Omid> sambarino: I want to know if the problem is with my internet connection or something from server
13:19 < kevinsimper> are you on windows, sambarino?
13:19 < sambarino> yeah
13:19 < kevinsimper> if yes, thats why
13:19 < kevinsimper> It tries to compile the source code, but it is not possible on windows
13:19 < Omid> kevinsimper: can you check that package and tell me if it is ok?
13:19 < sambarino> yeah, i have got it working before, was just trying a fresh install for omid
13:19 < sambarino> i think i need to install python 2.7 to get it all working nicely
13:20 < kevinsimper> it is not possible on windows, that node-gyp :)
13:20 < Omid> kevinsimper: it seems that the link is broken
13:20 < sambarino> kevinsimper: it is possible, i've done it before :P
13:20 < Omid> can anyone just check this like?! https://registry.npmjs.org/socket.io-client/-/socket.io-client-0.9.11.tgz
13:21 < niggler> Omid how are you installing it?
13:21 < Omid> npm install socket.io
13:21 < sambarino> omid i just downloaded that file and unzipped it without a problem
13:21 < Omid> it goes very well until:
13:21 < niggler> why is it pulling 0.9.11
13:21 < Omid> npm ERR! Error: shasum check failed for /root/tmp/npm-24932/1367326343486-0.6491326112300158/tmp.tgz npm ERR! Expected: 94defc1b29e0d8a8fe958c1cf33300f68d8a19c7 npm ERR! Actual:   a2c714bee763bc6eaed855492d88508571ce0c67...
13:21 < niggler> isn't 0.9.14 head?
13:22 < Omid> sambarino: can you upload it somewhere else, so that I could get it from another server?
13:22 < niggler> Omid can you try npm install socket.io@0.9.14
13:22 < sambarino> no, i'm busy with my day job, lol
13:23 < Omid> niggler: it may be because of my node version
13:24 < niggler> yeah probably
13:24 < niggler> what version are you using (node --version)?
13:25 < Omid> sambarino: you can upload it here in a few seconds: https://mega.co.nz/
13:28 <@isaacbw> Omid: it's pretty bad protocol to be pushy about something like that
13:28 < niggler> what's "bad protocol" isaacbw 
13:28 < niggler> do you mean "bad form"/
13:29 <@isaacbw> :(
13:30 < Omid> isaacbw: common it's from the main source of node packages with which ever day we deal
13:31 < niggler> Omid what version of node?
13:35 < Omid> niggler: 0.8
13:35 < niggler> 0.8.???
13:35 < niggler> node --version will give a patch version
13:37 < Omid> niggler: yes
13:37 < Omid> niggler: 0.9.11
13:38 < Omid> niggler: 0.8.11****
13:38 < niggler> wow that version does not like osx
13:40 < niggler> anyone on a mac using `n`?  version 0.8.11 node "Illegal instruction: 4" and npm "Segmentation fault: 11"
13:45 < sambarino> omid, i couldnt upload there if i wanted to, my company is very strict about security
13:45 < sambarino> :)
13:47 < ThePrimeMedian> hey all.. using MongooseJS, inside a User.statics.doFindConnections = function(cb) { .. I want to access the friends collection from here... how do I access it? this.db.??? }
13:54 < mkozjak> i get fs.close(logstream, function() { console.log('zatvorio file'); });  /wi9
13:54 < mkozjak> oops
14:18 < RobW_> Is there a stylus irc channel?
14:23 < mkozjak> if i open a file in one net event, how do i access its filedescriptor in another event?
14:25 <@isaacbw> mkozjak: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals
14:33 < Slaytorson> Anyone know where I can find a guide on memory management for node? I have a men leak somewhere while processing a 800mb XML file and it's killing me.
14:33 < Slaytorson> mem* leak
14:35 <@isaacbw> you should never need to think about "memory management" in javascript outside of getting rid of things you don't need anymore
14:35 <@isaacbw> for really memory-intensive jobs you might consider a native module
14:35 <@isaacbw> you can't really have memory leaks. More like memory hang-nails
14:39 < pachet> memory swamp
14:40 <@isaacbw> swamp filled with hang-nails
14:40 < MI6> joyent/node: isaacs v0.10 * dda7b40 : doc: Fix require.extensions documentation - http://git.io/7p_6Kw
14:43 < berkbozkurt> Rendering html in localhost works but in heroku it gives that error I think its path problem anyone can help (Error: Failed to lookup view "index.html" )
14:44 <@isaacbw> sounds like you should read the heroku docs more closely
14:45 < berkbozkurt> @isaacbw do you think it is path problem?
14:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:46 <@isaacbw> I'm not sure what a path problem is
14:48 < berkbozkurt> @isaacbw I mean path of the 'index.html' seems wrong. But it works in local. Heroku can't find the file
14:49 <@isaacbw> so you probably didn't set something up properly on heroku
14:50 < eaz> o/
14:50 <@isaacbw> it isn't finding the view
14:51 < pachet> berkbozkurt: make sure the path + file you're specifiying are the same case as the actual path + file on the fs
14:51 < pachet> heroku is case sensitive
14:53 < pachet> i guess it'd be more accurate to say that linux is case sensitive, but you get what i mean
14:54 < pachet> if that doesnt fix it, try logging __dirname where you set up your view directory and make sure it's what you'd expect
14:56 < chrysweel> Hello!! I need to do this call in node.js : curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d 'object' http://xxxx 
14:56 < chrysweel> somebody can help me ? : )
14:57 < chrysweel> I am using http.request, but I dont know send the option -d with the object to insert
15:00 < LoppEar> chrysweel: along the lines of "req.write(JSON.stringify(object)); req.end()"
15:01 < greelgorke_work> i tried to build node localy on osx. i got an error: https://gist.github.com/greelgorke/5489280 can anyone actually tell my if it's a system config issue or do i need to tweek some project config?
15:03 < chrysweel> LoppEar:  thanks for to reply!  I can use ? req.write(req.write('{"user":{"nick":"peter"}));
15:03 < chrysweel> for example ?
15:04 < chrysweel> req.write('{"user":{"nick":"peter"});
15:04 < chrysweel> sorry! 
15:05 < SomeoneWeird> LoppEar, what no he's trying to request a page and pass post data to it
15:05 < SomeoneWeird> chrysweel, look at the module 'restler', it has restler.post 
15:06 < LoppEar> SomeoneWeird: req = http.request...; req.write(..);
15:06 < LoppEar> but I agree on using a lib like restler or superagent too.
15:06 < chrysweel> yes, I am using http.request
15:07 <@isaacbw> greelgorke_work: where did you get the source?
15:07 < chrysweel> I want to do the same call : curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d 'object'       http://xxxx
15:07 < greelgorke_work> isaacw it's a github clone
15:07 < greelgorke_work> from my fork
15:09 <@isaacbw> you ran the configure script first?
15:09 < greelgorke_work> i did now. same error
15:11 <@isaacbw> did you change anything or is it an unchanged fork of master?
15:11 < chrysweel> LoppEar:  The req.write doesnt work!   
15:11 < chrysweel> I have : var req = http.request(options, function(res) {
15:11 < chrysweel>           console.log('STATUS: ' + res.statusCode);
15:11 < chrysweel>           console.log('HEADERS: ' + JSON.stringify(res.headers));
15:11 < chrysweel>           res.setEncoding('utf8');
15:11 < chrysweel>           res.on('data', function (chunk) {
15:11 < chrysweel>             console.log('BODY: ' + chunk);
15:11 < chrysweel>           });
15:11 < chrysweel>         });
15:11 < chrysweel>  
15:11 < chrysweel>         req.on('error', function(e) {
15:11 < chrysweel>           console.log('problem with request: ' + e.message);
15:11 < chrysweel>         });
15:11 < chrysweel>  
15:11 < chrysweel>         // write data to request body
15:11 <@isaacbw> chrysweel: oy, please use a paste site
15:12 < greelgorke_work> i just added 4 new methods on base streams classes and a test.
15:12 < chrysweel> ahh ok sorry isaacbw !
15:12 < greelgorke_work> did nothing with c stuf
15:12 <@isaacbw> greelgorke_work: I don't use a mac so it's hard for me to know, but it definitely looks like something strange with your system
15:13 <@isaacbw> somewhere there is a 'usr/bin/xcodebuild' without the leading '/'
15:14 < greelgorke_work> hum. k. then i have to research deeper
15:14 < greelgorke_work> thx anyway
15:14 < greelgorke_work> gotta go now. bye
15:16 < LoppEar> chrysweel: the req.write needs to happen outside of the http.request callback. i can look if you use a paste site.
15:17 < eaz> i keep getting "Error: connect ETIMEDOUT" when accessing mysql database
15:17 < eaz> http://pastebin.com/3N59pFVk
15:19 < chrysweel> LoppEar:  here it is: https://gist.github.com/Chrysweel/5489407
15:22 < chrysweel> LoppEar: you can help me ?
15:24 < LoppEar> chrysweel: i expect the issue is that you're not passing options with method: 'POST' to http.request. you're currently doing a GET request (options is a string/url).
15:25 < chrysweel> no LoppEar the options is a object, I will paste now! 
15:25 < bmatusiak_> anybody know if GetAsyncKeyState() in c++ works in linux and mac?
15:26 < chrysweel> LoppEar:  is updated now ! :)
15:31 < chrysweel> Nobody can help me ?please https://gist.github.com/Chrysweel/5489407
15:40 < LoppEar> chrysweel: looks fine on the surface, what error or issue are you getting?
15:42 < chrysweel> LoppEar:  The data is not send!  BODY: [{"message":"An exception occurred while executing 'INSERT INTO user (name) VALUES (?) ....
15:43 < chrysweel> User with capitalize, sorry
15:43 < chrysweel> any idea ?
15:44 < chrysweel> The strange is that , the call with "curl" works correctly...
15:45 < LoppEar> chrysweel: not setting the Content-type header perhaps?
15:46 < chrysweel> maybe, Is it. How can I include this option ?
15:46 < mscdex> what LoppEar said
15:46 < mscdex> chrysweel: set "Content-Type": "application/json" in your "headers" object
15:46 < LoppEar> either in your options.headers object
15:47 < LoppEar> or i think req.setHeader(name, val) exists.
15:48 < chrysweel> ajá, it was. I included the "content-type" and it works, thank you very much !! LoppEar
15:48 < chrysweel> : )))))))
15:49 < chrysweel> thanks you too mscdex ! : )
15:54 < chmac> I'm retrieving data from node-mysql and want to build XML output. I'm using node-elementtree, but it requires lots of iteration. Is there a generic convert object to xml type function somewhere?
15:58 < chmac> Looks like maybe xmlbuilder-js might help, but I don't see a conversion, where I can take an object and build xml from it automatically.
15:58 <@isaacbw> is there a reason why? json is far more convenient 
15:58 < niggler> xml has more x
15:59 <@isaacbw> hot
15:59 < niggler> xxxml
16:00 < niggler> where's hackedy when you need gim
16:00 < niggler> isaacbw https://npmjs.org/package/xxxtreme
16:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:05 <@isaacbw> niggler: beautiful
16:15 < eaz> my sql queries keep timing out
16:15 < eaz> is there anything i am doing wrong?
16:17 <@isaacbw> can you connect with the database's cli?
16:46 <@isaacbw> http://www.wikihow.com/Answer-a-Cell-Phone-Call
16:50 < Slaytorson> Anyone know how costly global.gc(); is?
16:50 < niggler> generally a bad idea Slaytorson 
16:50 <@isaacbw> just let v8 do its thing
16:51 < Slaytorson> The problem is v8 isn't doing it's thing on heroku.
16:51 <@isaacbw> heroku has nothing to do with it
16:51 <@isaacbw> what's the issue you're having
16:53 < Slaytorson> I am parsing a 800+mb XML file. I am streaming it from S3 and running it through a SAX parser, modifying the data, adding it into mongodb, and then creating a new xmlfile and streaming that to disk for sphinx, and then streaming the saved file from disk to S3. Everything works fine on localhost. V8 kicks in and memory never goes about 120mb. On heroku however, memory is blowing up and reaching the max memory within about 30-40
16:53 < Slaytorson>  seconds.
16:54 < JohnMcLear> Slaystorson: that's an issue with VMs prolly
16:55 < JohnMcLear> Lack of initial available resources, possibly
16:55 < Slaytorson> I added global.gc and I notice my worker is running incredibly slow now.
16:55 < Slaytorson> Or at least the process is running slow.
16:55 < Slaytorson> JohnMcLear, anything you know of to work around it? 
16:55 <@isaacbw> Slaytorson: did you ignore me when I answered you last time :(
16:56 < Slaytorson> isaacbw, nope! I kinda traveled back around in a circle back to global.gc.. :(
16:56 < JohnMcLear> Nope. I avoid vms where possible tbh
16:57 < CoverSlide> how much memory does heroku give you?
16:57 < daekano> I forget.
16:57 < daekano> zing.
16:57 < Slaytorson> I'm using a 512mb dyno
16:57 < JohnMcLear> Afaik it's not dedicated memory, it's allocated on demand
16:57 < Slaytorson> I can go up to a 1GB dyno
16:57 < JohnMcLear> Same with processor (afaik)
16:57 < JohnMcLear> But my understanding of vms is rather dated...  I could be wrong
16:58 < CoverSlide> also, are you developing on a 32-bit os?
16:58 < Slaytorson> 64-bit. Late 2011 model Macbook Pro
17:06 < chmac> isaac, niggler: Apologies, only seeing your messages now.
17:06 < chmac> I'm back porting an API, so I need to output XML unfortunately :-(
17:06 < chmac> json *is* much easier, `res.send object` :-)
17:06 < ljharb> gross
17:07 < ljharb> xml is the ie 6 of api clients
17:07 < niggler> chmac you have a schema?
17:07 < chmac> niggler: I do have a schema, of sorts, from what I can piece together from various implementations of the api
17:07 < chmac> ljharb: lol, it sure wouldn't be my choice, but needs must...
17:08 < kenperkins> meh, 6e vs 27a
17:08 < ljharb> ?
17:09 < kenperkins> just venting about seats
17:09 < chmac> lol
17:36 <@isaacbw> chmac: is someone paying you to do this?
17:44 < d2dchat> what do people use for front end asset management?
17:44 <@isaacbw> I wouldn't touch xml unless I could invoice it :P
17:47 < kenperkins> d2dchat: you mean fingerprinting etc?
17:47 < d2dchat> kenperkins: fingerprinting?
17:47 < kenperkins> versioning/md5 hashing/etc
17:48 < kenperkins> knowing that client.js is really the one you want
17:48 < d2dchat> kenperkins: mm, I mean more like Ruby's sprockets equivalent
17:48 < kenperkins> well, there's a really slow module I've used called snockets, that's based on sprockets
17:48 < kenperkins> you want to define a dep graph?
17:49 < kenperkins> or what?
17:49 < d2dchat> kenperkins: sort of.. I looked at require js and it seems close to what I want but I'm not sure?
17:49 < kenperkins> require.js is good
17:50 < d2dchat> kenperkins: do you have any preferred directory tree structure you use ?
17:50 < kenperkins> i do, but there's a 100 ways to skin a cat
17:50 < Hendy> hello
17:51 < d2dchat> kenperkins: but I want the right way! ;) jk
17:51 < kenperkins> are you using express?
17:52 < chmac> isaacbw: No
17:52 < chmac> isaacbw: Why'd you ask?
17:53 < ThePrimeMedian> im looking on google, but I dont think the answer I want is there.  I have an express node app built, now I want to crunch the whole thing down to one file to give to the client to run. node app_name.js is this possible, I heard it was with something called v8 snapshot.
17:53 < chmac> isaacbw: haha, ok, just saw your follow up :-)
17:53 < Hendy> someone know how to use a *.node file?
17:55 < d2dchat> kenperkins: yes
17:59 < ThePrimeMedian> anyone use nexe? https://github.com/crcn/nexe
18:02 < s_e> hmm, is node-waf no longer distributed with node?
18:03 < nlf> nope
18:03 < nlf> gyp now
18:03 < s_e> is it fairly transparent? i.e. can I just switch node-waf to node-gyp in build scripts?
18:04 < nlf> it's pretty much a rewrite of your build scripts
18:04 < nlf> it's not hard though
18:05 < s_e> i will investigate, ta
18:06 < dresende> mysql@2.0.0-alpha8 released
18:07 < Moniquel> hello 
18:07 < Moniquel> can i ask a question about the instalation nodjs
18:08 < evbogue> moniquel: do it up
18:08 < Moniquel> I tried it seral times but it says
18:08 < Moniquel> one moment
18:09 < Moniquel> I cant past it
18:09 < Moniquel> brb
18:10 < Moniquel> yes
18:11 < Moniquel> make[1]: g++: Command not found make[1]: *** [/home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target/v8_base/deps/v8/src/accessors.o] Error 127 make[1]: Leaving directory `/home/moniquel/Downloads/node-v0.10.5/out' make: *** [node] Error 2 moniquel@moniquel-VirtualBox:~/Downloads/node-v0.10.5$ cd moniquel@moniquel-VirtualBox:~$ node -version The program 'node' can be found in the following packages:  * node  * nodejs Try: su
18:11 < niggler> Moniquel what OS?
18:11 < Moniquel> thats whats it telle me the whole day!!
18:11 < niggler> do you have gcc installed?
18:11 <@isaacbw> did you wait a few hours and try again?
18:11 < Moniquel> i have a virtbox
18:11 < Moniquel> with ubuntu
18:11 < niggler> you probably need build-essential
18:11 < Moniquel> I installed yesterday
18:11 < niggler> apt-get install build-essential
18:11 < Moniquel> ok
18:12 < Moniquel> Itry niggler
18:13 < s5fs> it's always build-essential
18:13 < Moniquel> I tried...
18:13 < Moniquel> but it telling me this:
18:13 < Moniquel> moniquel@moniquel-VirtualBox:~$ apt-get install build-essential E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied) E: Unable to lock the administration directory (/var/lib/dpkg/), are you root? moniquel@moniquel-VirtualBox:~$ 
18:13 < s5fs> sudo first
18:13 < s_e> sudo apt-get install build-essential
18:14 < s5fs> boy aren't we a supportive community! gold stars all around!
18:14 < pachet> hi5
18:14 < s_e> suggest rename to #linux.basics
18:14 < niggler> blargh just make it #basics
18:14 < s5fs> pachet: o/
18:14 < Moniquel> well this is doing something;) 
18:15 < pachet> \o
18:15 < s5fs> Moniquel: awesome!
18:15 < niggler> i need to spend more time with the git manpages
18:15 < Moniquel> Iḿ sorry.. I tought I learn node.js.. but i did not expect to learn an other os
18:15 < niggler> `git submodule foreach` is ridiculous
18:16 < s_e> sometimes i forget git isn't intended to be a package manager
18:16 < s5fs> niggler: i'm still feeling like git newbie
18:16 < s5fs> but it beats svn!
18:16 < pachet> with things like that i just imagine the programmer who implemented it
18:16 < pachet> riding a ski-doo with dolphins in the sunset
18:17 < pachet> like a lisa frank folder
18:17 < s5fs> so. much. sparkle.
18:17 < niggler> wtf?
18:18 < s_e> definite substance abuse
18:49 < Moniquel> Iḿ sorry
18:49 < Moniquel> its still not working
18:49 < Moniquel> touch /home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target/node_dtrace_header.stamp   touch /home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target/node_dtrace_provider.stamp   touch /home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target/node_dtrace_ustack.stamp   touch /home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target/node_etw.stamp   touch /home/moniquel/Downloads/node-v0.10.5/out/Release/obj.target
18:49 < Moniquel> what does it mean
18:50 < Moniquel> make[1]: Leaving directory `/home/moniquel/Downloads/node-v0.10.5/out' ln -fs out/Release/node node make -C out BUILDTYPE=Release V=1 make[1]: Entering directory `/home/moniquel/Downloads/node-v0.10.5/out' make[1]: Nothing to be done for `all'. make[1]: Leaving directory `/home/moniquel/Downloads/node-v0.10.5/out' ln -fs out/Release/node node /usr/bin/python tools/install.py install  installing /usr/local/bin/node
18:50 <@isaacbw> Moniquel: please put large pastes on a paste site
18:50 <@isaacbw> and there was no error in the text you pasted
18:50 < Moniquel> How can I do that isaacbw?
18:51 <@isaacbw> http://pastebin.com/
18:51 < Moniquel> great isaac;)
18:51 < pachet> Great Isaac and the Holy Noders
18:52 < mscdex> node.js rules!
18:53 < Moniquel> well I coppied it on the pastbin
18:53 < Moniquel> http://pastebin.com/EAV7XvBJ
18:54 <@isaacbw> you have to install it with sudo
18:54 <@isaacbw> 'sudo make install'
18:55 < Moniquel> ok
18:55 < Moniquel> i try that
18:55 < stuartf> is there a way to catch ENOTFOUND from an http.get() without just catching all uncaughtExceptions?
18:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:56 <@isaacbw> exceptions are yucky
18:56 < geNAZt> append an error listener ?
18:59 < geNAZt> but in which case does http.get() throw a ENOTFOUND ?
18:59 < Moniquel> wauw!! you are amazing.... more than the whole day I tries to fix this
18:59 < Moniquel> thank you isaac
18:59 < stuartf> geNAZt: if the host isn't found in dns
19:00 < stuartf> it doesn't come from the http code though, it comes out of dns.js
19:00 < stuartf> with practically no stack
19:00 < Moniquel> but whats the diffence between sudo make install and make && make install
19:00 < geNAZt> i am not sure if ENOTFOUND is the right error message for this
19:00 < geNAZt> Moniquel, sudo forces root rights
19:00 < ljharb> Moniquel: you need "make" regardless. "make install" versus "sudo make install" depends on what you're installing.
19:01 < Moniquel> ok. Iḿ going to google about it;)
19:01 < Moniquel> ty
19:01 <@isaacbw> lol you're welcome
19:01 < stuartf> geNAZt: http://pastebin.com/JzGZUX0A
19:01 <@isaacbw> your regular user account isn't allowed to mess with system folders
19:02 <@isaacbw> and make install puts stuff into /usr/local/bin which is a protected folder
19:02 < CoverSlide> stuartf: var req = http.get();req.on('error', function(){})
19:02 < CoverSlide> stuartf: or, use request
19:02 < geNAZt> well i cant get my head around the fact not resolving a dns would lead to a ENOTFOUND error
19:02 < geNAZt> which says it cant be found
19:03 < geNAZt> but in this case it cant be resolved so it should be an other error 
19:03 < Moniquel> dont laugh at me isaac;) in september i even didnt know the difference between java and javascript:P
19:03 < ljharb> same as the difference between ham and hamster
19:03 < CoverSlide> I can't tell the difference between butter and I Can't Believe it's Not Butter
19:03 <@isaacbw> both delicious bbq'd
19:04 < Slaytorson> Man. I still can't figure out what the heck is up with memory not being reclaimed on heroku.. FML
19:04 < stuartf> geNAZt: thanks, I'll try that
19:04 <@isaacbw> doing anything data-intensive in javascript is going to lead to trouble
19:04 < CoverSlide> Slaytorson: maybe heroku has a support line
19:04 < CoverSlide> s/line/channel
19:05 <@isaacbw> offload the processing to a native module or other process
19:05 < geNAZt> can i have two event lopps running sharing the same v8 ?
19:05 < CoverSlide> Slaytorson: also, are you devving on the same node version as heroku?
19:06 < Slaytorson> CoverSlide, yep. I tried that. 0.10.1
19:06 < Slaytorson> I'm going to try their IRC
19:07 < ljharb> 0.10.5 is the latest - heroku doesn't use that?
19:07 < geNAZt> well most likley the hosters never have the latest version running of something
19:08 < CoverSlide> right
19:08 <@isaacbw> Slaytorson: you're trying to spur a minature horse into pulling a wagon
19:08 < CoverSlide> Slaytorson: is your heroku app getting the same amount of traffic you're developing on?
19:09 < Slaytorson> isaacbw: lol.. You think so?
19:09 < Slaytorson> CoverSlide, all resources I am using is for development. There is no outside traffic.
19:10 <@isaacbw> v8 wasn't designed for processing a lot of data. You might able to get the heroku guys to flip some switch so that you're able to work with your current dataset, but you're only raising the ceiling a little higher
19:12 < niggler> does heroku use the 'engines' field like azure?
19:12 < howdynihao> they do
19:14 < Slaytorson> isaacbw: when I take out the calls to mongo and take out saving a new xml file, node downloads and runs through 800mb worth of xmldata in 25 seconds. Of course the XML file is on S3 and my dyno is in AWS east
19:14 < geNAZt> 800MB xml.... wtf :D
19:14 < CoverSlide> yeah that's pretty bad
19:14 < niggler> 799MB formatting, 1MB content
19:14 < Slaytorson> niggler, they do from within your package.json
19:14 < CoverSlide> hahaha
19:15 < geNAZt> xml the new designer data struct 
19:15 < geNAZt> :D
19:15 <@isaacbw> Slaytorson: it's not so much a speed problem as it is a heap problem
19:16 < Slaytorson> Wait. I lied. This months XML file is 441.7MB last months was 800+
19:16 <@isaacbw> v8 is optimized for web applications
19:16 < ljharb> gross, xml
19:16 < geNAZt> which can be data intensive
19:16 < Slaytorson> @isaacbw: What would be a better suited language for this?
19:16 < CoverSlide> jabba?
19:17 < geNAZt> assembler
19:17 < Slaytorson> It's not xml by my choosing. That's for sure.
19:17 < CoverSlide> if only node ran on spidermonkey
19:17 < CoverSlide> then you'd get xml support for free
19:17 < geNAZt> Slaytorson: do you download the whole xml and parse it on block ?
19:17 < CoverSlide> well used to at least
19:18 < Slaytorson> geNazt, no I am streaming it through a SAX parser
19:18 < geNAZt> kk
19:18 < CoverSlide> maybe it's buffering faster than it can parse
19:18 < Slaytorson> I'm using this one: https://github.com/astro/node-expat
19:18 < geNAZt> but net sockets also are stream v2 apis or ?
19:19 < geNAZt> so they wont buffer any more then 16k ?
19:19 < CoverSlide> maybe that lib is leaky
19:19 < niggler> sax sux
19:19 < geNAZt> well if this lib is build onto stream v1 api it could be possible
19:19 < niggler> as a general rule, you can usually do better with regexes
19:20 <@isaacbw> Slaytorson: my rants aren't topical
19:20 < CoverSlide> niggler: regexes for xml? are you high?
19:20 < Slaytorson> HA!
19:21 < niggler> CoverSlide I tried a few for 'xlsx' but found that using regexes to cull data is faster than sax
19:21 < Slaytorson> Perhaps the lib is leaky. If it is, why would my worker work on my mac and not my dyno?
19:21 < geNAZt> maybe other arch ?
19:23 < CoverSlide> Slaytorson: try using an 8.x engine. see if that helps
19:23 < CoverSlide> node-expat hasn't been updated in 7 months, so before streams2
19:24 < Slaytorson> CoverSlide, I am trying now.
19:28 < CoverSlide> Slaytorson: also, you might want to try sax-js. It'll probably run slower, but I find that pure js modules tend to be more stable to work with than native modules
19:29 < Slaytorson> CoverSlide, interesting. Thanks.
19:29 < Slaytorson> Also, no bueno with changing to 0.8.x
19:31 < Slaytorson> CoverSlide, I am going to switch it out with sax-js.
19:31 < Slaytorson> I never saw that lib when I was looking for a SAX for node.
19:34 < niggler> sax-bastard
19:57 < chmac> I'm new to this whole async paradigm. Trying to wrap my head around this.
19:57 < chmac> I'm calling a function which runs 2 queries.
19:57 < chmac> I'm using node-mysql
19:58 < chmac> Can anyone point me at an example of how to run queries, verify their output, and then do something useful with the data?
19:58 < chmac> I'm trying to create a function which returns the value retrieved by the query, but maybe that's the PHP way not the node.js way...
19:58 < ljharb> chmac: var now = Date.now(); if (now > 0) { console.log('it\'s after 1970'); }
19:59 < ljharb> you didn't specify where you want to query from :-p
20:00 < chmac> ljharb: I have something like `connection.query 'SQL', (err, rows, fields) -> return rows[0].field`
20:00 < chmac> But that return value doesn't actually get returned to the calling function.
20:00 < chmac> I'm not sure what the correct language is.
20:01 < chmac> Do I need to use a callback?
20:01 < chmac> Maybe that's the node way?
20:01 < chmac> Callback on success...
20:01 < ljharb> it's async
20:01 < ljharb> you definitely want a callback
20:01 < chmac> ljharb: Ok, so that's the way, I say something like do_this(blah, callback);
20:02 < ljharb> yes
20:02 < chmac> ljharb: Ok, thanks, that's helpful, I'll try to wrap my mind around that. :-)
20:04 < CoverSlide> the correct language is not coffeescript
20:07 < ljharb> that's true
20:07 < ChrisMatheson> hey, just a hopeful but does anyone use AppFog for PaaS hosting ??
20:09 < CoverSlide> no, noone uses appfog
20:09 < qard> I use AppFog sometimes, just because it's free.
20:10 < qard> For small stuff anyway.
20:10 < bmatusiak_> https://github.com/bmatusiak/node-kbstroke
20:10 < qard> It's kind of annoying having absolutely no useful deploy errors though. :(
20:10 < CoverSlide> wtf is node-chat?
20:11 < CoverSlide> and what version of node are they on?
20:11 < ChrisMatheson> CoverSlide why no AppFog ??
20:12 < ChrisMatheson> ward that my issue just now :( i have a feeling that they are not re-building the native modules correctly
20:12 < ChrisMatheson> i seem to crash just as i call my first mongodb function
20:13 < ChrisMatheson> *  ward sorry misstyp
20:13 < ChrisMatheson> hmmmm
20:13 < ChrisMatheson> ward OSX autocorrect does not like you :)
20:13 < ChrisMatheson> damm it
20:13 < ChrisMatheson> qard 
20:29 < Slaytorson> CoverSlide, sax-js is absolutely MUCH slower than node-expat.
20:30 < Slaytorson> :(
20:31 < owen1> is common to have multiple package.json files in a given project?
20:31 < owen1> i have mini apps inside one repo
20:32 < owen1> and i want each app to live on it's own, but without having multiple repos.
20:32 < owen1> so in the future someone will be able to cp -r miniapp1 into it's own repo
20:34 < CoverSlide> Slaytorson: sorry. but does it complete?
20:35 < Slaytorson> I'm deploying to heroku now. Did a simple smoke test on my local machine.
20:36 < Slaytorson> CoverSlide, when I ran it on my local machine it maxed out the CPU where node-expat didn't do that.
20:37 < Slaytorson> Memory is rising on heroku too. WTF.
20:38 < Slaytorson> I hit the mem limit again. Hmm
20:38 < chmac> What's the callback way to do this? http://pastie.org/7744848
20:38 < chmac> Can I somehow pass the callback value into the query success function?
20:38 < chmac> Or any examples of how to do this sort of thing properly the "node way" ?
20:38 < CoverSlide> Slaytorson: were you saying it doesn't hit memory limit when you add the mongo stuff?
20:39 < CoverSlide> maybe mongo is the problem
20:39 < CoverSlide> s/add/remove
20:39 < Slaytorson> I'm using the latest mongoose lib. The whole thing is executed in about 30 seconds without mongo.
20:39 < CoverSlide> on heroku?
20:39 < Slaytorson> yep, on heroku.
20:40 < CoverSlide> hmm
20:40 < Slaytorson> That's how fast node-expat was working for me.
20:40 < Slaytorson> Granted it wasn't doing anything once it got to an opening tag. but hey..
20:41 < qard> chmac: http://pastie.org/7744858
20:42 < qard> You can't return from an asynchronous context without some weird language hacks which are probably a bad idea to rely on.
20:42 < chmac> qard: Thanks a lot. I shall study that for some time until it speaks to me :-)
20:42 < chmac> Right, I'm starting to realise that, because my code is running out of order!
20:43 < chmac> qard: So in this case, next is the callback?
20:43 < qard> It's better to get use to thinking in async.
20:43 < qard> Yep.
20:44 < qard> The callback will get run eventually—maybe right away, maybe in several minutes. Who knows. So any code that relies on the response should be in the callback passed in.
20:44 < Bubo> Where can I find some good node.js talks?
20:44 < chmac> qard: Ok, starting to grasp it, and found some links that seem to cover some of this stuff, thanks a lot.
20:46 < CoverSlide> Bubo: http://lmgtfy.com/?q=nodejs+talks
20:46 < qard> No problem. It was a bit brain melting for me at first too. Once you get used to it, it makes things a lot easier though.
20:47 < chmac> qard: I'm looking forward to that day! :-)
20:47 < qard> It helps to understand how event loops work.
20:48 < qard> Basically, it's just storing a function for later and there is an infinite loop that, for each function, checks if the data for it is ready and then calls it.
20:49 < chmac> qard: Ok. I think I get the general principle, but I'm also fighting to understand coffee script, decided to jump in at the deep end and take on node, coffee and async in one bite!
20:49 < Slaytorson> CoverSlide, I took out mongoose/mongo completely while leaving in the code that creates a streams a new XML to filesystem and memory still rises, just not as quickly. Actually a lot slower. I am wondering if v8 has yet to kick in it's garbage collector.
20:50 < CoverSlide> Slaytorson: maybe. could be mongoose is leaky.
20:50 < qard> coffeescript is interesting, but it's a bit challenging if you don't have a strong grasp of Javascript already. You really have to understand what the output of it is, since there are many quirks in the behaviour.
20:51 < DaMorpheuS> hey guys question : if i use socket.io to make a request to the server can i identify that request by an id or something like that so i can return data to that specific id?
20:51 < Slaytorson> CoverSlide, that is depressing. 
20:52 < Slaytorson> Looks like the memory is sticking around 150mb-ish
20:52 < qard> I'm not really a fan of it, just because it felt less like it was "fixing" Javascript and more like it was hiding the complex bits that you really should understand to use the language properly.
20:52 < CoverSlide> it's possible either the mongo driver or mongoose itself. there was an alternative, named mongolian, but seems development has stopped on it
20:53 < Slaytorson> Dangit..
20:53 < ljharb> qard: that's exactly right.
20:53 < Slaytorson> I might check into Redis.
20:53 < chmac> qard: It's definitely a learning curve. :-) I'm starting to get the hang of it, and I much, much, much prefer the syntax.
20:53 < ljharb> qard: coffeescript should not be used by people that don't know JS very well.
20:53 < ljharb> it's got some gotchas.
20:53 < qard> Like shadowing. :(
20:54 < ljharb> that's one of the big ones
20:54 < chmac> Oooh, sounds like there's fun times instore for me!
20:54 < qard> I learned it just to try it out, but I find I only ever use it for prototyping.
20:54 <@Nexxy> ljharb, it's funny to me that oyu say that
20:55 <@Nexxy> as that's the only valid reason in my opinion, for using coffeescript
20:55 < qard> I can make a simple express server in 70% of the code! That saves me a whole 20-30 characters! :P
20:55 < LoppEar> contra, if you don't know javascript you've got mysteries to learn either way.
20:55 < ljharb> Nexxy: that's the problem. it's gotchas mean that you need to know JS to use it properly. but it's benefits disappear once you know JS. :-/
20:55 <@Nexxy> exactly
20:56 <@Nexxy> it's a gateway drug to proper JS
20:56 < ljharb> even if reading it didn't make my eyes bleed, that ^ means there's no reason to use it.
20:56 < qard> lol
20:56 < qard> Should just wanting to properly understand the tools you use be the gateway drug? :O
20:56 < qard> Shouldn't*
20:56 <@Nexxy> that *is* the mechanism we're talking about
20:56 < Slaytorson> CoverSlide, memory is stuck at 146.92mb.. Surely it should change just a little. The process is still running
20:56 <@Nexxy> people that are used to python/ruby see CS as familiar
20:56 <@Nexxy> they feel like they can understand them better
20:56 < ljharb> specifically ruby
20:57 <@Nexxy> they get into it
20:57 < pachet> then they get smacked down
20:57 <@Nexxy> get fucked over a few times
20:57 < pachet> withdrawal time
20:57 < ljharb> cause every single bit of JS ashkenas writes is a desperate attempt to make JS more like ruby :-)
20:57 < LoppEar> yes, very nice transition via coffeescript from python.
20:57 <@Nexxy> and finally make the jump to real JS
20:57 < pachet> lol
20:57 < ljharb> just like every single bit of JS that google outputs is a desperate attempt to make JS more like Java
20:57 < LoppEar> people who glorify languages without list comprehensions are sadists ;)
20:57 < pachet> ljharb: i f--king know, right
20:57 <@Nexxy> simmer
20:57 < ljharb> well, both have some good bits, i suppose. but overall.
20:57 < qard> eh, if anything I'd think it'd scare people away. It looks similar in syntax, but functions completely different mechanically.
20:57  * pachet is waist deep in angular
21:05 <@isaacbw> angular 4 lyfe
21:06 < JohnMcLear> heh, hipsters die young
21:07 <@Nexxy> hipsters don't die
21:07 <@Nexxy> they just fade back into obscurity
21:07 < jonathanmh> I'm somehow reminded of Richmond from IT-Crowd.
21:07 < ljharb> wouldn't they fade back into mainstream?
21:07  * JohnMcLear puts his crossbow away
21:08 < jonathanmh> "get back in your room, you're bringing everybody down!"
21:08 <@isaacbw> richmond was the best character
21:14 < pachet> mat berry is the best character in everything
21:14 < pachet> even things he isnt in
21:14 < pachet> s/mat/matt?
21:38 < MI6> joyent/node: Ben Noordhuis master * ab518e8 : https: implement https.Server#setTimeout() - http://git.io/oIU_jw
21:48 < octetcloud> any interest in a patch to document the return values for EventEmitter methods? of the undoced, most return this, setMaxListeners returns undefined (oversight?), and emit returns true/false (useful and undocumented)
21:49 < Domenic_> defunctzombie or any other express users: has anyone run into lib/view.js doing existsSync in View.prototype.lookup and janking your server?
21:49 < defunctzombie> Domenic_: nope
21:49 < Domenic_> seems to happen whenever we do res.render()
21:49 < defunctzombie> Domenic_: maybe view engine specific?
21:49 < defunctzombie> Domenic_: iirc express doesn't do that stuff anymore
21:49 < CoverSlide> oh boo sync functions
21:50 < Domenic_> i guess? the existsSync is part of express but maybe other view engines don't go down that code path?
21:50 < CoverSlide> https://github.com/visionmedia/express/blob/master/lib/view.js#L11
21:50 < CoverSlide> me no likey
21:51 < Domenic_> no i think it happens with every view ever
21:51 < Domenic_> https://github.com/visionmedia/express/blob/master/lib/view.js#L43-L64
21:51 < Domenic_> constructor calls this.lookup calls existsSync
21:51 < defunctzombie> Domenic_: you started a fresh app and this is happening?
21:51 < defunctzombie> Domenic_: or it just started failing?
21:52 < Domenic_> fresh app
21:52 < Domenic_> no i misunderstood
21:52 < Domenic_> we've had this app for a while, investigating performance issues with it now
21:52 < Domenic_> but i just started the server, i mean
21:52 < Domenic_> maybe view caching isn't on or something...
21:53 < defunctzombie> Domenic_: what version of express?
21:53 < defunctzombie> Domenic_: would need to see some code to give feedback
21:53 < defunctzombie> but it sounds like a setup issue and maybe you recently upgraded something
21:53 < Domenic_> code is literally res.render(); run it through a profiler and existsSync shows up
21:54 < Domenic_> 3.0.6 fwiw, but the code in lib/view.js seems the same
21:55 < CoverSlide> it's on master.
21:55 < CoverSlide> at least there's less sync than there was a year or so ago. but still ...
21:57 < defunctzombie> Domenic_: sure ok.. but what is your specific issue?
21:58 < defunctzombie> Domenic_: and did it work before? how long ago
21:58 < defunctzombie> Domenic_: I mean.. I have not had this issue, so at this point it requires the code to debug
21:58 < defunctzombie> :)
21:59 < Domenic_> specific issue is express is slow with more than one user and profiling traces it to this existsSync
21:59 < Domenic_> I think the problem is that I'm in the default "development" mode, which disables the view cache
21:59 < Domenic_> setting NODE_ENV = 'production', see how it goes.
22:00 < octetcloud> node has tri-valued booleans. cool. error.domainThrown A boolean indicating whether the error was thrown, emitted, or passed to a bound callback function.
22:02 < Industrial> with browserify, how do I check for the availability of a file on disk before attempting to require it? I have this ComponentFactory (spare me the java comments) that I'm feeding json with a type key which is part of `'./components/'+type` or `'./lib/'+type`. if it's both not found I want to raise an error.
22:03 < Industrial> I tried requiring fs and using fs.exists() but that isn't available.
22:03 < ljharb> why not just check the return value of the require call
22:03 < ljharb> ps, also it's considered bad practice to require anything but a string literal i believe
22:04 < Industrial> dunno, I was under the impression it would generate an error rather then return false or undefined.
22:04 < ljharb> i'm not sure what browserify's require is supposed to do in that situation - but if it doesn't generate an error, then obviously you'd need to check the value :-)
22:06 < ljharb> i still think you should just avoid dynamic paths tho.
22:06 < ljharb> use an explicit map of strings to paths - that way it's easy to know if it exists or not.
22:08 < Industrial> I guess that would world.
22:08 < Industrial> work*
22:20 < defunctzombie> Domenic_: express 3 does not cache views
22:20 < defunctzombie> Domenic_: iirc it doesn't even do stuff with NODE_ENV
22:21 < defunctzombie> Domenic_: I would re-evaluate your assumptions :)
22:32 < Domenic_> defunctzombie: that seems false in light of https://github.com/visionmedia/express/blob/master/lib/application.js#L90-L92
22:33 < Domenic_> defunctzombie: also https://github.com/visionmedia/express/blob/master/lib/application.js#L479-L502
22:34 < defunctzombie> Domenic_: him, that isn't how I typically enable view cache.. interesting
22:34 < defunctzombie> Domenic_: weird... I thought he removed that stuff, anyhow, I don't enable cache like that
22:35 < Domenic_> what do you do
22:36 < defunctzombie> Domenic_: interesting, that is the documented way in the docs.. but I thought it was removed.
22:36 < defunctzombie> Domenic_: I use the view options
22:36 -!- mode/#Node.js [+oo tjfontaine MI6] by ChanServ
22:37 < defunctzombie> Domenic_: I think it is a mistake to use this view cache thing
22:37 < defunctzombie> and for it to be auto enabled in "production"
22:37 < defunctzombie> Domenic_: I would avoid it
22:42 < d2dchat> Can someone help me figure out how to use JSONStream to take a an object (with IDS) or array of objects and convert that to stringify? 
22:42 < d2dchat> https://github.com/dominictarr/JSONStream
22:43 < d2dchat> I feel like the easiest use case for JSONStream is to parse JSON from a string, then transform, then stringify back, but getting it from an object .. kind of confused.. do I call write ?
22:46 < Industrial> I can't seem to get the right path, using browserify: 	this.classes[name] = require('./components/' + name)[name];
22:46 < Industrial> where __dirname is '/lib' and /components is at ../ of lib.
22:47 < Industrial> so i guess, ../components/+name, but that also doesn't work
22:48 < Industrial> name === 'Button' and a components/Button/index.js exists.
22:48 < Industrial> Where did I go wrong :\?
22:49 < ljharb> i don't see a trailing slash there
22:49 < ljharb> but also, use hardcoded paths, not dynamic ones imo
22:49 < ljharb> components/button is looking for "button.js", not "button/index.js"
22:49 < Industrial> well, I have an Inversion Of Control situation. I'm generating instances based on a JS Object / JSON-ish configuration.
22:49 < Industrial> ljharb: right
22:50 < Industrial> so I really just want to require an array of component names 'sall :)
22:50 < ljharb> so make a map of "name" to "full path"
22:50 < ljharb> then it's explicit.
22:50 < ljharb> i'm not really sure what you're building, but if you need that kind of inversion of control, i'm gonna wager there's a different way to design it :-)
22:56 < Industrial> ljharb: the js object configration is aimed at ease of implementation for API users. This is people I'm explicitly giving parts of the API and denying others to build interfaces. It's a nested structure of UI components :)
23:02 < ljharb> Industrial: then instead of requiring it, perhaps you should use fs to walk through the paths? and as for browserify, it seems like you would want to generate an explicit list of paths on the server, and then have that config be available to the frontend.
23:29 < djazz> hey! Is there a way I can generate a video from png images? I know I can use ffmpeg/libav but the pictures must come at exact timestamps, in sync with a music file
23:30 < djazz> I'm making a tool to analyze audio with HTML5 Web Audio and draw a nice spectrogram. I want to save this rendering as mp4 or similar
23:34 < djazz> The samplerate of the spectrum samples can vary between 18 and 40 samples/sec
23:36 < Technodrome> Good day
23:37 <@mbalho> djazz: you might try looking into webm
23:37 <@mbalho> djazz: also TooTallNate might know
23:37 < djazz> mbalho: aha
23:38 <@TooTallNate> sup?
23:38 <@mbalho> djazz: also your minecraft + javascript stuff is awesome, i work on voxel.js and found it really helpful
23:38 <@mbalho> TooTallNate: have you done any video encoding in js?
23:38 < djazz> :D
23:38 <@mbalho> TooTallNate: like exporting a movie from pure JS
23:38 <@TooTallNate> mbalho: no actually, i've only done audio stuffz so far
23:38 <@mbalho> ahhh
23:38 <@TooTallNate> mbalho: though i've recently started experimenting with emscripten
23:38 <@TooTallNate> it's AMAZING
23:39 <@mbalho> wow really? last time i used it i wasnt very impressed but i am also noob at that stuff
23:39 <@TooTallNate> see: broadway.js
23:39 <@TooTallNate> mbalho: well it got adopted by Mozilla and has matured a lot
23:39 <@mbalho> ahhh
23:39 < djazz> also, could I use a <video> to render? some getUserMedia hack? xD
23:40 <@TooTallNate> djazz: i think broadway.js uses <canvas>
23:40 < djazz> both demo links down
23:41 <@TooTallNate> lame
23:41 < djazz> hmm, encoder?
23:41 < djazz> or only decoder?
23:41 <@mbalho> i think it just decodes
23:41 <@TooTallNate> broadway is just the decoder
23:42 < djazz> hmm http://antimatter15.com/wp/2012/08/whammy-a-real-time-javascript-webm-encoder/
23:43 <@mbalho> ooh
23:43 < djazz> might work :)
23:43 < djazz> demo: http://antimatter15.github.io/whammy/clock.html
23:43 < djazz> looks cool
23:43 < RobW_> Does spawn('rm') have any security checks? Makes sense on the server, but it seems like a horribly dangerous thing to use in a local development utility.
23:44 < mcoffee> I'm just wondering of a good persistent session store for connect/express. I can't install a third-party database. I already know that there's connect-sqlite3, but I'm now wondering of other options.
23:45 <@isaacbw> you can't install a database?
23:45 < djazz> YES, whammy can add frames with duration. it seems :D
23:46 <@mbalho> djazz: are you on github?
23:46 < djazz> mbalho: daniel-j
23:47 < rvagg> mcoffee: there's two session managers that run LevelDB that'll work with connect/express, see https://github.com/rvagg/node-levelup/wiki/Modules
23:47 < djazz> mbalho: I should be more active there though
23:47 <@mbalho> djazz: +1 github is awesome
23:48 < djazz> mbalho: yea
23:48 < thealphanerd> anyone in here play with emscripten / asm.js at all?
23:48 < rvagg> mcoffee: actually, one of them isn't there.. level-session will work as a connect middleware and there's also https://npmjs.org/package/connect-level
23:49 < mcoffee> rvagg: awesome. thanks for that!
23:54 < RobW_> I'm guessing spawn processes can't affect anything out of the node project directory?
23:56 < djazz> mbalho, TooTallNate: YES! this webm encoder works!
23:56 < djazz> :D
23:56 <@isaacbw> RobW_: no
23:56 <@mbalho> RobW_: there are no security restrictions, you shouldnt run code you dont trust
23:56 <@mbalho> djazz: nice, can you save as .webm ?
23:57 < djazz> mbalho: I'll just see if I can sync up the frames
23:57 <@TooTallNate> thealphanerd: i do
23:57 < djazz> and do some ffmpeg magic to add sound
23:57 <@TooTallNate> i've only just started though
23:57 < RobW_> isaacbw, mbalho: Thanks. Working with yeoman and was about to include an rm -rf, and then thought "wait, are you allowed to do this?"
23:57 <@TooTallNate> djazz: nice
23:58 < thealphanerd> TooTallNate: what kind of stuff have you worked on?
23:59 <@TooTallNate> thealphanerd: the only thing so far has been compiling mpg123 to JS
--- Log closed Wed May 01 00:00:00 2013
