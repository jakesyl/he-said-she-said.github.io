--- Log opened Thu Dec 13 00:00:07 2012
00:00 < trankil> And of course, he hopes to reach 80+.
00:22 < mjsrs> hi everyone, anyone knows about a hosting service that can host a node.js tcp server?for free :)
00:23 < Kvisle> mjsrs: heroku is pretty close
00:24 < trankil> heroku, or localhost.
00:24 < Kvisle> localhost, dead cheap.
00:27 < Marcky> I have a question about socket.io and node-mysql
00:27 < mjsrs> It is working locally but now I wanted to host it outside my network. The project is a tcp proxy. Client 1 connects to node tcp server and communications are forwarded to client 2 and vice-versa
00:27 < Marcky> is anybody good with socket.io and node-mysql?
00:28 < Kvisle> Marcky: is that your question?
00:28 < Kvisle> Marcky: I believe there are quite a few of those.
00:28 < cliffano> http://nodejs.org/api/dgram.html#dgram_udp_datagram_sockets has example code: var x = dgram.createSocket('udp4'); x.send(...); x.on( ...); , but if i check require('dgram').Socket.prototype , I could find send() method, but there is no on() method. where does on() come from?
00:28 < Marcky> is it bad to use node-mysql with socket.io?
00:29 < Marcky> lets say on the client I call socket.emit(data) and on the server where i listen on this call
00:29 < Marcky> I do some sql stuff?
00:29 < CoverSlide> Marcky: why would it be bad?
00:29 < mdedetrich> does anyone know if jade has a way of dealing with linebreaks in text areas
00:29 < Marcky> well I dont know..
00:29 < Marcky> socket.io is like a none-blocking component
00:30 < CoverSlide> so is node-mysql
00:30 < Marcky> oh
00:30 < Marcky> so it is good to use it with
00:30 < Marcky> ?
00:30 < CoverSlide> sure why not, but realize it's probably slow for real-time stuff
00:30 < Marcky> well faster then my old ajax method
00:31 < CoverSlide> it really depends on how you plan on using it
00:31 < Marcky> well its no big querys
00:31 < mdedetrich> CoverSlide: tbh, your biggest bottleneck would be mysql
00:31 < mdedetrich> and not socket.io
00:31 < CoverSlide> also remember it can only process one request at a time. Ypu'd have to use a connection pool
00:31 < CoverSlide> mdedetrich: that's what I'm saying
00:31 < mdedetrich> if you want proper realtime stuff
00:31 < mdedetrich> you would use something like mongodb
00:31 < mdedetrich> and redis
00:33 < Marcky> well what i wanna do is like > client do an action > socket.emit to the server > server receive the data and insert it into database > broadcast emit this new data to other client
00:33 < CoverSlide> well is speed of importance?
00:33 < CoverSlide> or reliability?
00:34 < Marcky> well yes and no
00:34 < Marcky> yes speed is always important
00:34 < CoverSlide> does it need to be immediate?
00:34 < Marcky> sort of
00:34 < CoverSlide> or just a matter that all clients get updated is enough?
00:34 < Marcky> yes
00:34 < Marcky> all client needs to get updated
00:35 < Marcky> but i have to store this data inside a database
00:35 < CoverSlide> either way, switching your entire stack to mongodb I wouldn't recommend
00:36 < Marcky> i dont know much about mongo?
00:36 < Marcky> what is it exactly
00:36 < CoverSlide> if you're starting from scratch, though, maybe using mongo would be good
00:36 < CoverSlide> mongo is a document store
00:36 < CoverSlide> it stores JSON documents
00:37 < CoverSlide> it's quicker than MYSQL but it doesn't use SQL, it uses javascript expressions
00:37 < LouisT> <3 mongodb
00:37 < Marcky> oh
00:37 < Marcky> I see
00:37 < CoverSlide> so you have to rething how to solve some problems if you're used to solving them in a relational manner
00:37 < Marcky> im looking at the front page tutorial
00:38 < substack> just store things in memory and then figure out how to make them persist later
00:38 < CoverSlide> yeah that's true
00:38 < Marcky> Yea i tough about that
00:39 < Marcky> like storing data for X time on the server
00:39 < mdedetrich> mongodb is basically a database that stores everything in memory
00:39 < Marcky> then push it inside
00:39 < mdedetrich> and it has other mechanisms for persistance (replication and journals)
00:39 < CoverSlide> if you can separate your app logic from your database logic, makes it much more maintainable and testable
00:39 < mdedetrich> its MUCH faster on reading than other databases (especially SQL ones)
00:39 < CoverSlide> except redis
00:39 < Marcky> ok
00:39 < mdedetrich> also you can do relational stuff with mongodb, its just done on client side
00:39 < mdedetrich> with something like mongoskin
00:39 < Marcky> well I dont want it to be EXTREMELY fast
00:40 < mdedetrich> CoverSlide: redis isn't as good when it comes to using it as a database
00:40 < Marcky> but i'd like it to be close to real time
00:40 < mdedetrich> doing queries in redis is ugly
00:40 < CoverSlide> i say use the right tool for the job
00:40 < mdedetrich> Marcky: if you want realtime, then use mongodb, thats what its designed for
00:40 < mdedetrich> Marcky: and redis for session storage
00:41 < CoverSlide> mongodb is web-scale!
00:41 < mdedetrich> if thats what you want to do, than that is the right job
00:41 < mdedetrich> however for things like storing back details, and maybe even accounts
00:41 < mdedetrich> I would use something like postgresql
00:41 < mdedetrich> alternately you can use riak for reliability
00:41 < mdedetrich> (riak approaches reliability from a different angle than postgresql)
00:42 < mdedetrich> honestly the biggest issue I have with SQL databases nowadays is updating the schema without taking the website down
00:42 < Marcky> well i have a part of my application that will work with node
00:42 < Marcky> the rest (registering,accounts, paiement) will work on apache
00:42 < Marcky> with php + yii
00:42 < mdedetrich> thats fine, just use mongodb for everything else then
00:43 < Marcky> allright cool
00:43 < Marcky> im looking at it
00:43 < mdedetrich> with mongodb + node.js, its all going to be non blocking
00:43 < Marcky> sweet then
00:45 < mdedetrich> Marcky: also I would use engine.io instead of socket.io
00:45 < mdedetrich> at least if you care about real proper cross browser compatibility
00:45 < CoverSlide> i would use sockjs instead of socket.io
00:46 < mdedetrich> ive used sock.js, but engine.io is a lot better
00:46  * CoverSlide shrugs
00:46 < CoverSlide> imo
00:46 < mdedetrich> its design is meant to be completely fault tolerant, and I have had issues reconnecting with sockjs
00:48 < Marcky> its another sockets handling library?
00:48 < mdedetrich> yeah, socket.io is actually going to use engine.io as a backend eventually
00:48 < mdedetrich> engine.io was created in response to all the issues socket.io created
00:49 < Marcky> oh I see..Damn so many news things to look at
00:49 < Marcky> i was expecting my apps to be done on april
00:49 < Marcky> but yea
00:49 < mdedetrich> Marcky: https://github.com/LearnBoost/engine.io
00:49 < mdedetrich> read the goals section
00:49 < Marcky> bookmarkedd
00:49 < Marcky> thanks man
00:50 < mdedetrich> Marcky: also if you want cloud hosting for mongodb
00:50 < mdedetrich> mongohq is a very good choice
00:50 < mdedetrich> the most annoying thing about mongodb is managing the database, so at least that variable is removed from the equation when using someone like mongohq
00:51 < Marcky> aw man
00:51 < Marcky> that looks great
00:51  * CoverSlide hands mdedetrich a bag of money
00:51 < Marcky> thats like totaly like socket.io syntax
00:51 < mdedetrich> Marcky: everything in node.js land uses that syntax
00:52 < mdedetrich> callbacks with (err,result)
00:52 < Marcky> oh well im new to node
00:52 < mykul> hi there. I'm trying to use http.get within a simple script, but i'm not getting into the response callback or the 'error' callback
00:52 < mdedetrich> nodes massive +1 over every other language in terms of web servers
00:52 < mdedetrich> is that its entire ecosystem is asynchronous and non blocking (for everything that should be asynchronous and non blocking)
00:52 < Marcky> just that fact that it kills most of my php stuff
00:52 < Marcky> its a big +1
00:52 < Marcky> i hate php
00:52 < Marcky> ...
00:53 < mdedetrich> you should, its god damn terrible as a language
00:57 < CoverSlide> mykul: gist your code
00:57 < mykul> okie doke
01:06 < mykul> hmm, while trying to pull out code into the gist
01:06 < mykul> i came upon a potential cause
01:06 < mykul> i had my http.get call inside a callback for a 'when' deferred
01:07 < mykul> when i take it out, the http.get call works fine
01:12 < _numbers> what is the command to abort a node process 
01:13 < _numbers> like process.exit(0) ?
01:13 < _numbers> ah guessed correctly :)
01:31 < peteschaffner|aw> back
01:32 < patrickgamer> I'm trying to work through a passport-local example and my "home" page isn't loading. my browser hangs up, but i don't see errors in the console. http://dpaste.com/hold/844989/
01:32 < peteschaffner|aw> back
01:42 < CoverSlide> front
01:45 < patrickgamer> the example i'm trying to follow is https://github.com/jaredhanson/passport-local/blob/master/examples/express3/app.js
01:45 < patrickgamer> anyone have any ideas/suggestions on what i could be missing?
02:07 < Marcky> how do i set my mongodb configs o.O
02:12 < trankil> Marcky: this is weird.
02:12 < Marcky> what?
02:13 < trankil> Marcky: Your question. try the #mongolians chan, and join them also.
02:14 < Marcky> kk
02:21 < patrickgamer> wish there was a channel for passport
02:28 < Zak> patrickgamer: try and get in contact with the author
02:28 < patrickgamer> Zak:  thanks
02:33 < prettyrobots> Hey, guys! Did you hear...
02:33 < prettyrobots> For thumb inter-working we require an architecture which supports blx!
02:34 < Zak> is this a script
02:34 < Zak> *s that
02:34 < Zak> http://elsmorian.com/post/23474168753/node-js-on-raspberry-pi
02:35 < prettyrobots> I'm building for arm.
02:38 < prettyrobots> I'm getting an error in the build, trying to find the switch to reassure GYP that I'm building for ARM >= 5.
02:39 < AAA_awright> Where's tj when you need him
02:42 < Zak> prettyrobots: check the article
02:42 < prettyrobots> Thank you.
02:42 < TooTallNate> Zak: prettyrobots: i have experience with building node for raspberry pi as well
02:42 < prettyrobots> Yes.
02:43 < prettyrobots> I know TooTallNate. I've read your article.
02:43 < TooTallNate> prettyrobots: ok cool. i'm jumping in late here… what are you trying to do exactly?
02:43 < Tobsn> anyone amazingly good with math? ;)
02:44 < prettyrobots> What are the correct possible values of -march=armv6?
02:44 < prettyrobots> I'm targeting arm5.
02:44 < TooTallNate> prettyrobots: http://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html
02:45 < TooTallNate> so you probably want one of  `armv5', `armv5t', `armv5e', `armv5te'
02:45 < prettyrobots> Huh.
02:45 < prettyrobots> My board says...
02:45 < prettyrobots> armv5tejl
02:46 < prettyrobots> And this article...
02:47 < prettyrobots> http://www.yoovant.com/how-install-node-js-0-8-arm-based-sbc-fox-board-g20/
02:47 < prettyrobots> Says armv5tejl.
03:00 < erisco> okay, so I am a bit confused as to what what implementation of node.js is. I was expecting a few javascript files but it seems different than that... what's up?
03:01 < prettyrobots> Node.js is a program comperable to Rhino. It runs JavaScript.
03:01 < freewil> and it has built-in libraries for doing all the basics like networking, file access, all asynchronously
03:02 < erisco> prettyrobots, I see... so this isn't meant to exclusively exist in a web browser? that is, the server side is some extra runtime/service?
03:02 < freewil> its not meant to run in the browser at all
03:02 < patrickgamer> erisco:  node is a binary executable. it doesn't run in browsers
03:02 < prettyrobots> erisco: Node.js is a stand alone executable. It is not meant to run in the browser.
03:02 < patrickgamer> lol
03:03 < prettyrobots> Heh.
03:03 < erisco> so, scripting servers in JavaScript is the idea
03:03 < patrickgamer> erisco:  yup
03:03 < prettyrobots> erisco: What patrickgamer said.
03:03 < erisco> okay, that clears up a lot of confusion then
03:03 < freewil> erisco, doesnt have to be a server, could just be a little script that copies files for backup
03:03 < patrickgamer> like PHP or PERL
03:04 < patrickgamer> commonly used for web servers, but not exclusive
03:49 < innociv_> Any chance that someone would make a guide for profiling node.js with systemtap now that support is added for it?
04:30 < gluxon> Node.js is cool :)
04:31 <@konobi> innociv_: have a look at dtrace.org
04:34 < innociv_> konobi, doesn't work on debian
04:34 < innociv_> Node.js won't build with dtrace support on debian even if you have dtrace installed on debian
04:34 <@konobi> innociv_: the systemtap support is bolted onto the dtrace support
04:35 <@konobi> so the same probes, etc. are valid
04:47 < innociv_> konobi, so I can just follow this exactly?
04:47 < innociv_> http://blog.nodejs.org/2012/04/25/profiling-node-js/
04:49 <@konobi> no, you'll not have jsstack functionality
04:50 < innociv_> And I'd assume the command is not "dtrace"?
04:50 <@konobi> that's a pure dtrace feature, not a node thing
04:51 < misterhat> o
04:51 < innociv_> Well, I'm not getting what I need to do this same thing but with systemtap
04:52 <@konobi> innociv_: you can always spin up smartos in a vm
05:04 < innociv_> konobi, the issue I have only comes up in production
05:07 <@konobi> urgh
05:08 < dileep> hello noders
05:09 < dileep> i have error please help me
05:09 < dileep> Error: require.paths is removed. Use node_modules folders, or the NODE_PATH environment variable instead.
05:10 < ome> dileep: so what exactly you don't get about that error?
05:13 < jesseTaylor> anyone worked with the youtube javascript api with node? ive got a question
05:14 < dileep> when i m starting cloud9.js installed locally with node this is formed....
05:16 < jesseTaylor> http://craz.ee im just developing this now, can a look if you want
05:16 < dileep> ome:the errror gist i have uploaded have a look at... https://gist.github.com/4274204
05:19 <@konobi> dileep: and where did you come across this file?
05:29 < dileep> konobi,after installing node.js,npm globally and cloud9...
05:31 < tthenne> Does anyone know where one can find more documentation on the mysql module for node? I've read through the npm module page https://npmjs.org/package/mysql, but still have a few Qs?
05:31 <@konobi> dileep: sounds like the cloud9 module hasn't been updated in quite some time
05:33 < dileep> Konobi:then what to do???
05:38 <@konobi> contact the author
06:11 < jesseTaylor> http://craz.ee i wanna test it out again, feel free to poke in
06:22 < mdedetrich> lets dance
06:24 < umurgdk> hop
06:45 < rohara> anyone able to help with an error I'm getting with everyauth
06:46 < rohara> Am getting - 500 Error: Step rememberTokenSecret of `twitter` is promising: requestTokenSecret ; however, the step returns nothing. Fix the step by returning the expected values OR by returning a Promise that promises said values.
06:46 < rohara> I have no idea how to fix though
06:51 < chovy> i just ran npm update, now i get this error: 
06:51 < chovy> https://gist.github.com/6eff1187403ef74ea4b9
06:52 < chovy> Something to do with Mongoose schema not being registered
07:02 < lethalduck> Evening all
07:04 < sambhav> fuck u guys.......
07:04 < sambhav> specially dil
07:05 < sambhav> 59.177.162.110
07:05 < sambhav> [12:32] == dileep [3bb1a26e@gateway/web/freenode/ip.59.177.162.110] [12:32] ==  realname : 59.177.162.110 - http://webchat.freenode.net [12:32] ==  channels : #Node.js [12:32] ==  server   : rowling.freenode.net [Corvallis, OR, USA] [12:32] ==  idle     : 0 days 1 hours 31 minutes 41 seconds [connected: Thu Dec 13 10:34:54 2012] [12:32] == End of WHOIS [12:32] <sambhav> 59.177.162.110
07:05 < lethalduck> That's not very polite sambhav
07:06 < sambhav> thats all for only dee\ not for u guys....
07:06 < sambhav> [p
07:07 < lethalduck> dee\ not here
07:07 < sambhav> its dilee
07:07 < sambhav> ==p
07:08 < dileep> hiii sara
07:08 < sara> hey
07:09 < sambhav> this man dileep is frod.......
07:09 < sambhav> baby
07:09 < sambhav> don't reply him sara...
07:09 < dileep> hey from where u r
07:10 < lethalduck> frodo and bill bagins
07:10 < sambhav> fsf
07:11 < sambhav> chal bata ki node js kya hota hai...
07:31 < deeds> hey ho
07:32 < lethalduck> ho ho
07:33 < lethalduck> and a bottle of rum
07:33 < deeds> agree! :D
07:37 < NuZZ> how how
07:37 < lethalduck> slurp slurp
07:55 < abraxas> hmm
07:55 < abraxas> does cluster/cp not removeAllListeners when a process dies?
07:58 < bright_day> i want to save download and save .mp3 files. when i use module request and pipe request to some file ex "hug.mp3" it works but when i take response body and create buffer and when use fs.writeFile it saves file but corrupted cant listen 
07:58 < bright_day> can anyone help?>
07:59 < jergason> bright_day: hard to tell without looking at your code
08:00 < jergason> bright_day: are you setting the encoding type on the buffer or the file you are writing out?
08:03 < dileep_> hiii sara
08:05 < bright_day> jergason: i know that when using fs.writeFile with buffer it doesnt need encoding  code: http://hastebin.com/yibenogesu.coffee
08:07 < jergason> is the data base64 encoded coming in?
08:12 < bright_day> jergason: http://hastebin.com/feparicivo.vbs this is response header
08:12 < SomeoneWeird> vbs?
08:12 < SomeoneWeird> lol
08:13 < bright_day> SomeoneWeird: hastebin type detection is really odd
08:13 < ljharb> substack: if you're here… with funstance, can i still use instanceof? ie, in your example, could i do `fobj instanceof Foo`?
08:14 < substack> ljharb: I don't think that will work
08:15 < ljharb> :-/ yeah it doesn't seem to
08:16 < ljharb> is there any way, given that funstantiated object, to figure out it's a Foo?
08:21 < ljharb> is there any way to override the console.log output of a function in node? setting toString seems not to work.
08:29 < jergason> ljharb: I don't think so by default. console.log ends up calling formatValue (https://github.com/joyent/node/blob/master/lib/util.js#L202)
08:29 < jergason> it just prints out keys and values of Objects
08:29 < jergason> only calls toString on dates or RegExps
08:29 < ljharb> :-/ hm
08:30 < ljharb> ah it looks like there's a hook for "inspect"?
08:31 < jergason> ah
08:31 < jergason> didn't see that
08:31 < jergason> perhaps
08:31 < ljharb> ooh, ok that kind of work
08:31 < ljharb> s
08:32 < ljharb> doesn't work in generic v8 or sm tho, just in node
08:32 < jergason> yeah, this is all node-specific stuff
08:32 < jergason> TIL
08:32 < jergason> didn't know about inspect
08:32 < jergason> so you just define and inspect method and it calls that if it exists?
08:33 < ljharb> looks like it
08:34 < basiliothecat> Good time of day everyone! guess it has been asked tons of time, yet i'm still in doubt - am starting a project and plan to use node to build the api part, but am not sure whether it'll be a good idea to use it for building a regular web app? would appreciate any hints!
08:37 < lethalduck> Me too
08:38 < [AD]Turbo> hi there
08:38 < lethalduck> brb: coffee time.
08:40 < NuZZ> brb. coffescript time.
08:40 < umurgdk> \c
08:42 < ljharb> ew
08:42 < NuZZ> wew
08:47 < nathan7> basiliothecat: It's perfectly suited for building a full webapp
08:48 < nathan7> basiliothecat: I've been playing with sharing my frontend code to have an optional client-rendered frontend, falling back to server-rendered when that's not available.
08:53 < basiliothecat> nathan7: thanks, man! guess i'm going to at least try doing both web app and http api in node - felt real eager to use node as much as it makes sense without
08:54 < basiliothecat> nathan7: introducing another language/framework
09:02 < lethalduck> nathan7: "falling back to server-rendered when that's not available." What's that?
09:03 < lethalduck> optional client-rendered frontend?
09:03 < lethalduck> Why would the client-rendered frontend be optional?
09:03 < ljharb> because javascript isn't always available
09:03 < ljharb> nor does it always work
09:03 < ljharb> also, server-side rendering is faster.
09:04 < lethalduck> I see
09:04 < lethalduck> When isn't JavaScript available on the front end?
09:05 < lethalduck> *not
09:05 < lethalduck> doh
09:05 < lethalduck> unless, someone has it turned off via NoScript or similar.
09:05 < ljharb> when it's turned off, when it's a blackberry, when the .js doesn't download, when you have a syntax error that stops execution of your JS, when you're on a mobile device that is slow and hasn't downloaded and/or parsed the JS yet…
09:06 < lethalduck> You can't really get a decent client side experience without JavaScript.
09:06 < ljharb> i've seen google.com stop working for SEARCHES because their JS broke, and they hadn't progressively enhanced.
09:06 < ljharb> that's absolutely not true
09:06 < lethalduck> syntax error? you mean you don't check your syntax?
09:06 < ljharb> of course i do. that's not the point.
09:06 < lethalduck> not even test the script before deployment?
09:06 < ljharb> it's in the list of possibilities
09:07 < lethalduck> hmm
09:07 < ljharb> and since mobile is the most important, and my mobile comments are beyond your control…
09:07 < ljharb> build everything to work without JS, then layer the JS on top, and you'll get the best experience *and* the most robust one.
09:07 < ljharb> also it's far more maintainable and debuggable.
09:07 < zgrizzly> Hello people!
09:08 < Doikor> its a huge pain in the ass to build something like gmail to work without js. way too much work to make it worth it these days.
09:08 < ljharb> gmail is a very special exception. your app is nothing like gmail.
09:08 < lethalduck> Most UI's are built with JavaScript. You just can't do without it
09:08 < nathan7> lethalduck: I don't know about you
09:08 < zgrizzly> I'm searching for a valid example about how I can use Node in the Web, but till now I can not find nothing
09:08 < nathan7> lethalduck: but I like my stuff to be in search engines
09:08 < ljharb> lethalduck: "most" is something you can't possibly back up.
09:08 < nathan7> lethalduck: so people actually see it
09:08 < ljharb> and i can do without it perfectly fine
09:08 < ljharb> ah yes, also SEO
09:08 < Doikor> ljharb: most of the stuff ive been making recently are...
09:09 < nathan7> lethalduck: if you don't do progressive enhancement, you don't need progressive enhancement, because nobody sees your app and nobody uses it.
09:09 < ljharb> Doikor: that's fine, but your qualifiers mean that it may not be true for anybody else
09:09 < zgrizzly> only I have a lot of theory, but I wish could have more a practical example with code
09:09 < lethalduck> SEO? Plenty of other ways to cater for SEO.
09:09 < ljharb> lethalduck: there are not, when you only have client-side rendering.
09:09 < zgrizzly> can somebody help me and tell me where I can find something that could give the view about what is Node in the reallity?
09:09 < ljharb> lethalduck: every solution i've seen involves server-side rendering. so if you have to build it anyways, why fight the browser?
09:10 < nathan7> It's bloody /easy/ to cater for it
09:10 < ljharb> zgrizzly: it's a server-side environment that runs on JS. just like any other server-side environment running on a language.
09:10 < nathan7> We're in node-land here. We can write code that works on the server too.
09:10 < ljharb> lol exactly.
09:10 < ljharb> that's the whole point of node imo.
09:10 < nathan7> My views couldn't care less where they are
09:10 < lethalduck> ljharb: Well, you need html obviously.
09:10 < nathan7> There's plenty more points to node, I don't particularly love doing web stuff (though it's making it a lot awesomer than I'm used to)
09:11 < nathan7> lethalduck: We can expect HTML to work in every browser and in a search engine.
09:11 < zgrizzly> ljharb: Yes I know and I understand this, I know a lot about Node because I read a lot, but till now I can not find a practical example in the Web that let me see the reality
09:11 < ljharb> zgrizzly: i'm not sure what example you're looking for
09:12 < zgrizzly> Can somebody tell me where I can find an example with code? A simple one, is only to have a view
09:12 < ljharb> zgrizzly: you'd have to pick a framework. try express.
09:12 < lethalduck> nathan7: I may have been missing the JavaScript on the server bit. I'm very new to node.
09:12 < lethalduck> nathan7: So you essentially render on the server what we used to render in JavaScript on the client? Is that what your saying?
09:13 < zgrizzly> ljharb: A simple example like a chat or something to check the speed of Node
09:13 < zgrizzly> ljharb: OK, I was working without framework, but I try it with this one
09:13 < lethalduck> ljharb: Is my last comment where I came undone?
09:13 < ljharb> node isn't a framework. if you don't use one, it's just like using php without one - you'd have to write your own.
09:14 < ljharb> lethalduck: which one?
09:14 < lethalduck> last 2
09:14 < ljharb> i'm not sure what you mean. client-side rendering has always been a vain hope of people who think server-side rendering is too slow.
09:14 < Doikor> sure if you are making a "traditional" web page making sure that everything also works without javascript is a nice thing to have. not that much work anyway to achieve that
09:15 < ljharb> twitter.com flipped entirely back to server-side rendering, and maintain the ajax feel so there's no full page refreshes, and it's much faster for pageload time.
09:15 < lethalduck> So you essentially render on the server what we used to render in JavaScript on the client? Is that what your saying?
09:15 < ljharb> lethalduck: "used to render on the client" has only been for a couple years. we used to render on the server.
09:15 < zgrizzly> ljharb: I know Node is not a framework, but there are some frameworks to work with Node, which one is the best and how to download?
09:15 < ljharb> and now, thankfully, many people are realizing that rendering on the server is better.
09:16 < ljharb> zgrizzly: they're all on npmjs.org - and i recommended you start with express
09:16 < lethalduck> Hmm, I've been writing web apps using JavaScript on the client for years
09:16 < substack> I serve up static assets from the server and do everything else client-side
09:16 < lethalduck> That's what JavaScript was designed for
09:16 < substack> static assets and json streams
09:16 < zgrizzly> ljharb: OK thanks!
09:16 < ljharb> substack: it shouldn't be difficult to do the rendering on the server when JS isn't availab;e.
09:16 < ljharb> *availab;e
09:16 < ljharb> *available. there.
09:17 < substack> zgrizzly: only use a framework when you understand what it gives you and why you need those things
09:17 < substack> zgrizzly: http plus a module for serving static assets like ecstatic will get you a long way
09:18 < substack> ljharb: who cares if js isn't available. that is pretty much never the case
09:18 < substack> and people who turn off js are used to a shitty featureless web experience
09:18 < lethalduck> ljharb: as a node newbe, where am I off track?
09:18 < lethalduck> substack: that's what I mean.
09:18 < ljharb> it's the case often enough i've found - and more importantly, it's really really easy to build it so it works without JS
09:18 < zgrizzly> substack: Yes that is the problem with frameworks, you need a time to learn how works or you need to know exactly what you want. For that reason I don't use framework in this moment for Node
09:19 < nwillems> Hello there. I seem to have a problem with the module poolee, so far it seems it is trying to access a property called _requestcount on socket. can anyone help me here?
09:19 < lethalduck> ljharb: using node you mean?
09:19 < Doikor> yeah if yo use the same models on the client side and the server side rendering on the server should be easy. just put that same data trough the same templates
09:19 < substack> zgrizzly: I think it's worse than that. frameworks cator fundamentally to people who are confused about what they actually need
09:19 < ljharb> lethalduck: no, using html and css.
09:19 < substack> and if people knew what they needed they could go and find tiny modules to suit their purposes
09:19 < lethalduck> haha
09:20 < substack> Doikor: it's often much trickier than that
09:20 < zgrizzly> substack: Yes, this is correct!
09:20 < Doikor> frameworks are for people who know exactly what they want. using one without knowing what it brings is going to lead to a disaster. or thats how i've been looking at things
09:20 < zgrizzly> substack: But I which could see a simple example like a chat running, where I can find something?
09:21 < Doikor> i usually just try to go with some lightweight libraries combined together (like backbone on client side, etc)
09:21 < substack> Doikor: since on the client you can iteratively populate and update templates as you get chunks data back from the server
09:21 < Doikor> and then choose some nice template engine etc.
09:21 < zgrizzly> substack: For me now everything is theory, I wish could see a real example running like a chat and see the code also
09:21 < substack> and the ui can update for each new chunk of data
09:21 < substack> zgrizzly: chat is a really bad example of this stuff
09:22 < lethalduck> zgrizzly: I'm looking for something like that too I think.
09:22 < lethalduck> Maybe a real web app in node
09:23 < substack> real web apps tend to be proprietary
09:23 < zgrizzly> substack: YES!!! I think so also, but I just want to see the face of Node, could touch Node, at least with a very bad example, can you, please, let me know where I can find an example with code?
09:23 < substack> like I just built this ui recently http://ci.testling.com/substack/node-falafel
09:23 < lethalduck> substack: on on open technology?
09:23 < substack> lethalduck: open source applications are often terrible
09:24 < lethalduck> hmm
09:24 < substack> open source libraries have much higher quality
09:24 < lethalduck> right
09:24 < substack> that ui is just 295 lines split out among 3 files
09:24 < lethalduck> Ah well, time to get reading and hacking I think.
09:25 < substack> the bulk of the complexity is handled by npm modules that I'm running in the browser
09:25 < substack> like I'm using node-tap to parse the tap output of the tests
09:26 < substack> and I'm using browserify's xhr shims and JSONStream to parse streaming json docs from the server in order to update the ui
09:26 < lethalduck> When I tab from within the node shell, I get a collection of objects listed. What are they members of?
09:26 < nathan7> global
09:26 < lethalduck> not process?
09:26 < nathan7> No, process is process stuff
09:26 < nathan7> process.<tab>
09:27 < nathan7> substack: I think something as simple as that test page shouldn't need any clientside processing
09:27 < nathan7> substack: thanks for fixing pushover, by the way <3
09:28 < lethalduck> ryan dahl did a video and said process is to node what window is to the browser. The global object. Is this incorrect?
09:28 < substack> nathan7: but it would be so much more complicated and fragile to render the html server-side
09:28 < james_> hi, I'm just starting with node; what's the difference between http.Server(...), and http.createServer(...); ?
09:28 < substack> plus I can just consume these routes: http://ci.testling.com/substack/node-falafel
09:28 < nathan7> lethalduck: Conceptually
09:28 < substack> erm
09:28 < substack> * http://ci.testling.com/substack/node-falafel.json
09:28 < nathan7> substack: How so?
09:28 < substack> nathan7: I don't want any presentation logic in the server side code
09:28 < lethalduck> nathan7 conceptually incorrect?
09:28 < substack> I just want the server to serve up static assets and json data
09:29 < substack> that keeps all the rendering logic from bleeding out where it doesn't belong
09:29 < nathan7> hm
09:30 < substack> and it will be much easier to update the ui to handle live updates when I roll that feature out
09:30 < nathan7> Now that's a different matter q=
09:30 < substack> all the server needs to worry about is shuffling data events out through the output stream
09:30 < nathan7> You can run the same rendering logic on the server and the client with ease, I've played with doing that with Browserify
09:30 < substack> and the client is already written to iteratively build the content so I won't even need to change much at all
09:31 < substack> nathan7: not really
09:31 < substack> rendering on the client and server are fundamentally incompatible
09:31 < substack> in the browser you can modify the dom in-place
09:31 < substack> in the server you've got to send it all in one blob
09:31 < substack> and you can't update it after you've sent it
09:32 < substack> in order to reuse the same rendering logic you'd need to cripple what your client-side rendering is capable of
09:32 < substack> for no good benefit
09:32 < nathan7> hm
09:32 < substack> except that people who have javascript turned off will have the same experience as everyone else
09:33 < substack> which is a pretty unconvincing reason for the kinds of apps I build
09:33 < nathan7> I'm fine with Plates
09:33 < mpfundstein> seriously. if some one surfing the web nowadays with js off and expecting a great experience sth. is really wrong
09:33 < substack> for pretty much everything I build, the interactive JS *is* the feature
09:34 < lethalduck> nathan7: can you explain the difference in output from tabbing in node and the process command?
09:34 < substack> I don't have much in the way of content consumption viewers
09:34 < substack> those are boring
09:34 < mpfundstein> yes. the real time app is the future anyway and you will need socket.io and all these fancy js stuff for it
09:34 < mpfundstein> real time web*
09:34 < substack> socket.io isn't necessary
09:35 < mpfundstein> doesnt matter
09:35 < mpfundstein> you get my point :-)
09:35 < substack> you can just use plain xhr to consume streaming content
09:35 < substack> and if you want bi-directional updates use shoe
09:36 < lethalduck> shoe?
09:36 < substack> http://npmjs.org/package/shoe
09:36 < mpfundstein> ok, but thats a different discussion. what you are talking about now is the technology to use. my point was, that the real time web in general is the future. how it is accomplished doesnt matter. 
09:36 < substack> it's just the node Stream api for websockets with fallbacks provided by sockjs
09:37 < lethalduck> substack: why would you use xhr instead of web sockets if they are supported?
09:37 < substack> lethalduck: it's often much nicer and simpler on the server end to just write a component that emits streaming json
09:37 < substack> and then other tools can just read that json resource directly
09:38 < substack> like this: http://ci.testling.com/substack/node-falafel.json
09:38 < substack> the ui code on the http://ci.testling.com/substack/node-falafel page just reads that json file directly
09:38 < substack> and anybody who wants to scrape the metadata for their test runs can just parse that json file too
09:38 < asadpakistani1> do you guys think linux kernel 3 production ready?
09:38 < substack> only 1 api endpoint necessary to support external and internal use
09:38 < lethalduck> substack: but it must be slower than sockets?
09:39 < substack> lethalduck: why do you think that?
09:39 < substack> it's just 1-way
09:39 < lethalduck> Ok
09:39 < substack> you would need to demonstrate with evidence or compelling reasoning how it would be slower
09:39 < substack> it's transferring the same data in either case
09:40 < substack> the framing might be slightly different is all but basically they are the same
09:41 < mpfundstein> lethalduck: every transfer is through sockets. plain html requests as well. 
09:43 < lethalduck> mpfundstein: xhr is using sockets?
09:43 < nathan7> lethalduck: Of course.
09:43 < mpfundstein> lethalduck: what else? air?
09:43 < nathan7> lethalduck: All networking is with sockets.
09:43 < wulfgarpro> hi, I'm just starting with node; what's the difference between http.Server(...), and http.createServer(...); ?
09:43 < mpfundstein> lethalduck: websockets are just a fancy name for a protocol on top of plain sockets. 
09:44 < mpfundstein> lethalduck: and so is xhr, html, pop3, smtp
09:44 < nathan7> and duct-taped on top of HTTP
09:44 < mpfundstein> well duct-taped. you do one upgrade
09:44 < zgrizzly> another question, my Node Apps are running in this moment in the directory where the folder node_modules was install
09:44 < lethalduck> What's fancy about it?
09:44 < zgrizzly> what if I want to change the directory
09:44 < lethalduck> on top of http?
09:44 < lethalduck> Ah, web sockets
09:44 < zgrizzly> or path, what should I do?
09:45 < mpfundstein> move the node_modules folder as well ?
09:46 < zgrizzly> mpfundstein: I should move the folder node_modules and Node inmidiatly detect this?
09:46 < lethalduck> sockets stay open though right?
09:46 < nathan7> any sockets do
09:46 < lethalduck> they are persistant
09:46 < nathan7> Unless the application chooses to close them
09:46 < lethalduck> xhr doesn't though eh?
09:46 < nathan7> Your IRC connection goes over the network
09:47 < nathan7> lethalduck: That's a matter of how HTTP works
09:47 < nathan7> Layers, layers.
09:47 < lethalduck> that's right
09:47 < mpfundstein> zgrizzly: if you use the whole folder where your app is located. everything should work fine. node just checks in the current directory if there is a folder called node_modules
09:47 < lethalduck> so with xhr there is the setup tear down cost.
09:47 < lethalduck> which takes time right?
09:47 < mpfundstein> well
09:47 < nathan7> A little, yes
09:47 < mpfundstein> couple of ns
09:47 < nathan7> But HTTP connections tend to be kept alive
09:47 < nathan7> Just single HTTP requests are finite
09:48 < mpfundstein> with HTML 1/1
09:48 < lethalduck> if they are requested yes?
09:48 < mpfundstein> HTTp sry
09:48 < nathan7> there's a few lines of headers, that's all
09:49 < lethalduck> Peter Moskovits did a presentation with some comparisons published recently.    a company based around the comet model shares these numbers.    50,000 users with a specific number of messages per second.    Their latency with their highest grade comet server takes around 700 milliseconds to push.    They did the same experiment with WebSockets with 20%-40% more users and it was around 4 milliseconds.
09:49 < lethalduck> Thoughts?
09:49 < nathan7> 700ms?
09:49 < nathan7> No way
09:50 < lethalduck> It was recorded at some .net gig at Ordev
09:51 < nathan7> ah, .net
09:51  * nathan7 smirks
09:51 < nathan7> You've got some rather heavy magic going on in between the client and your actual request handler
09:52 < lethalduck> nathan7 is the silver bullet?
09:52 < lethalduck> node that is
09:52 < substack> websockets are really magical and have headers too
09:52 < lethalduck> explain the magic?
09:52 < nathan7> At the start, yes
09:52 < substack> plus websockets rely on http to serve the initial upgraded message in the first place
09:52 < nathan7> lethalduck: node is light
09:52 < nathan7> lethalduck: You can handle the HTTP request straight away
09:53 < lethalduck> nathan7: mm
09:53 < nathan7> lethalduck: There is no framework forced upon you
09:53 < mpfundstein> the websocket header is quite cool actually
09:53 < mpfundstein> i wrote a small c++ lib for that
09:54 < mpfundstein> https://github.com/MarkusPfundstein/C---Websocket-Server
09:54 < mpfundstein> in Network/Connection.cc you can precisly see how websockets work
09:54 < lethalduck> mpfundstein: I need to get to grips with node first
09:54 < lethalduck> she's new to me.
09:54 < mpfundstein> kkk. but i like that you are eager to learn.
09:54 < mpfundstein> thats good
09:55 < lethalduck> Well. node from what I've seen makes sense.
09:55 < lethalduck> I'm yet to find most of the pitfalls
09:57 < lethalduck> The guidance I'm getting from the channel is much appreciated.
09:58 < mpfundstein> yeah but just do. node is quite straight forward
09:58 < mpfundstein> and you get results pretty fast
09:59 < lethalduck> So.. what's the difference between tab in node shell and and process?
09:59 < mpfundstein> no idea what you mean to be honest
10:00 < lethalduck> I'm in the node shell, I hit tab, I get all the global properties listed. I do the same, but type process
10:00 < lethalduck> instead of hitting tab
10:00 < nathan7> lethalduck: properties of the global object versus properties of the process object
10:00 < nathan7> lethalduck: you can be all global.global.global.global.process if you wish
10:01 < lethalduck> but I thought process was the global object?
10:01 < nathan7> no
10:01 < nathan7> it isn't
10:01 < nathan7> lethalduck: what Ryan means is that the process is the environment for a node program
10:01 < lethalduck> Ok, so ryan dahl's video is incorrect.
10:01 < nathan7> lethalduck: like a window is the environment for a browser program
10:10 < Pitel_IPEX> any idea how to watch a file, which keeps getting updated by some other process, and run some code when the other process stops updating the file?
10:10 < mpfundstein> you can use inotify
10:11 < mpfundstein> just doenst work on NFS so take care 
10:11 < mpfundstein> (or not working completely)
10:15 < SomeoneWeird> or SMB
10:16 < nathan7> Pitel_IPEX: You're looking for fs.watch
10:16 < Pitel_IPEX> but won't I get bunch of "changed" events, instead of one "close", which I want?
10:22 < mpfundstein> Pitel_IPEX: whom are you asking?
10:24 < Pitel_IPEX> pretty much anyone... but I guess trying it will be best I can do now.
10:28 < lethalduck> nathan7: got it
10:37 < daedeloth> I'm pushing a lot of data trough a websocket (json data) and it takes too long to push it trough. So I was wondering, is there any compression I could use that is quite fast?
10:39 < mpfundstein> gzip?
10:39 < mpfundstein> Pitel_IPEX: With inotify you can specify what events you want to listen to
10:40 < mpfundstein> Pitel_IPEX: for instance, file is moved, file was opened, file was written to etc.. 
10:40 < daedeloth> yea, I'm thinking about gzip, but gzip is a bit heavy on the cpu
10:40 < daedeloth> especially on the client side
10:42 < mpfundstein> maybe this helps: http://cs.fit.edu/~mmahoney/compression/text.html
10:43 < mpfundstein> deflate can also be an option
10:43 < mpfundstein> but gzip seems to be more reliable
10:44 < daedeloth> actually a simple base64 could reduce the size quite strongly as well
10:46 < mpfundstein> sure. i dont know how heavy it is on a computational level but this could solve your problem
10:47 < mpfundstein> and one drawback
10:47 < mpfundstein> you would need the whole strea before you could decompress
10:47 < mpfundstein> maybe it would be smart to divide the json into units of lets say 1500 bytes (mtu)
10:47 < mpfundstein> compress them with whatever method and then read out on the client 1500 bytes each, decompress them and reassemble
10:48 < daedeloth> well I'm using socket.io and Im only processing complete messages
10:48 < daedeloth> the messages itself should be quite short, but during initialization I need to push a few "large" messages
10:49 < mpfundstein> and you benchmarked already?
10:50 < daedeloth> no right now I'm just doing a few small tests
10:50 < mpfundstein> when i wrote some upload tools
10:50 < mpfundstein> i also did streaming with socket.io
10:51 < mpfundstein> i needed to compute a md5 hash and update it all x bytes
10:51 < mpfundstein> i worked very well
10:51 < mpfundstein> it*
10:51 < daedeloth> hm base64 doesn' tseem to be make it that much smaller
10:52 < mpfundstein> so you should be able to do the same with a base64 hash. but in the end the question is. is it faster / slower to compress/decompress than to send. probably the former 
10:52 < daedeloth> it makes it larger. I'm confused.
10:52 < mpfundstein> :D well
10:53 < mpfundstein> base64 has only 64 characters right? in ascii / ut8 you have much more
10:53 < daedeloth> yea, true
10:53 < mpfundstein> so they use 2 bytes where plain text would use one (for some characters. ) ( is that right actually ? i am not quite sure ! )
10:54 < daedeloth> well no utf8 uses more bytes / character
10:54 < daedeloth> and I'm only counting the characters right now
10:54 < daedeloth> so it's probably the same size
10:54 < gildean> utf8 uses multiple bytes depending on the character
10:54 < daedeloth> 1 to 4
10:54 < mpfundstein> utf8 is two bytes right?
10:54 < mpfundstein> 4 is utf16 isnt it?
10:54 < daedeloth> nono, it depends on the character
10:55 < mpfundstein> ok
10:55 < daedeloth> don't ask me how, but it's between 1 and 4 bytes
10:55 < gildean> mpfundstein: no, utf8 has a variable size
10:55 < mpfundstein> gildean: ok thanks. how do they know than which one is how long?
10:56 < mpfundstein> daedeloth: i think gzip should work fine. i can trasncode mp4 videos in realtime so it should be pretty easy for the client to decode gzip :-)
10:56 < lethalduck> Is all the node source self documented and well commented? I'm looking at http.js and module.js and it's lovely.
10:57 < lethalduck> I wasn't expecting such easy to read code.
10:57 < gildean> mpfundstein: http://en.wikipedia.org/wiki/UTF-8
10:57 < gildean> it has a quite good description how the characters are formed
10:58 < mpfundstein> lethalduck: one thing i love about node is that the creators are really hackers. they love to write good code and you see it , be it in the libuv source, the node source or in lib
10:59 < mpfundstein> gildean: wow, utf8 even supports 6 bytes
10:59 < daedeloth> zlib is included in default node?
11:00 < gildean> daedeloth: yeah, it's a core module
11:00 < mpfundstein> gildean: awesome read. thanks. now i understand
11:00 < lethalduck> mpfundstein: I'm not used to this, who needs documentation with code like this.
11:00 < gildean> daedeloth: http://nodejs.org/api/index.html
11:00 < mpfundstein> lethalduck: well :-) it still will be faster to check the doc instead of reading through the source :-)
11:01 < daedeloth> I (l) node.
11:01 < lethalduck> mpfundstein: maybe
11:01 < gildean> lethalduck: yeah, iirc they've been cleaning the source since 0.6 so it's really easy to read
11:02 < mpfundstein> are you guys using node in production actually or is it more learning?
11:02 < gildean> lethalduck: i'd say the api docs are pretty good too, they also include good examples so it's nice and quick to check something from the docs
11:02 < lethalduck> got a long and exciting life ahead of it I'd say.
11:03 < lethalduck> Cool! I'll have to have a look.
11:04 < gildean> mpfundstein: i've used node in production, in a sense
11:04 < gildean> mpfundstein: as in, i've built internal tools to use at work
11:05 < mpfundstein> gildean: ok like i do at the moment. i kinda switch a lot of stuff to node. its just way more fun to work with. sadly i cant find good devs here in amsterdam
11:05 < mpfundstein> everyones still on ruby/php/java ;-)
11:06 < lethalduck> mpfundstein: outsource?
11:06 < mpfundstein> lethalduck: no no. i want real contact
11:06 < mpfundstein> :-)
11:06 < lethalduck> I'm looking to go it alone middle of next year.
11:07 < lethalduck> mpfundstein: Well, it's definitely preferable.
11:08 < mpfundstein> lethalduck: yeah it is also different. you can discuss about stuff easily, do peer programming etc. remote is ok for a period of time but not as a persistence state
11:08 < lethalduck> But... There are not many good JavaScript devs around. I'm currently in a 400 employee company and there are 1 or 2 others.
11:08 < mpfundstein> ne problem i found is, that most javascript devs are actually html frontenders. but the server has different requirements. you need to take care about security, backups, databases, RPC, clustering etc..
11:08 < gildean> mpfundstein: well, if you decide to start a company that does dev in node, i'm willing to move to amsterdam ;D
11:08 < lethalduck> mpfundstein: Well, the open source communities do it ok.
11:08 < mpfundstein> gildean: where are you from?
11:09 < gildean> finland
11:09 < mpfundstein> lethalduck: but the speed of an open source community is not really comparable to the requirements of a business
11:09 < thealphanerd> anyone around who is good with bash / sed / awk?
11:09 < mpfundstein> gildean: awesome, i ll recently built a finnish sauna in my attic
11:10 < mpfundstein> lethalduck: i love oss . dont get me wrong. it is definitly the future. but its a whole different style of working.
11:10 < gildean> mpfundstein: a finnish sauna is the only real kind of sauna
11:10 < lethalduck> mpfundstein: I know... Check my sanitisation posts if you're keen. Client side: http://blog.binarymist.net/2012/11/04/sanitising-user-input-from-browser-part-1/ Server side: http://blog.binarymist.net/2012/11/16/sanitising-user-input-from-browser-part-2/
11:11 < mpfundstein> lethalduck: thanks.. wow a lot of code there ;-)
11:11 < lethalduck> mpfundstein: Yip. Done all that other than clustering. I've slowly moved from backend to clientside.
11:11 < mpfundstein> gildean: so true :-)
11:12 < mpfundstein> i love that this channel is so active. :-) 
11:12 < mpfundstein> justs keeps me from hacking
11:12 < mpfundstein> damn you guys
11:12 < lethalduck> mpfundstein: I do my best to cover the holes.
11:13 < mpfundstein> lethalduck: very nice . good work. maybe post in on HN
11:13 < lethalduck> mpfundstein: agreed.
11:13 < lethalduck> HN?
11:13 < lethalduck> hacker network?
11:13 < lethalduck> :s
11:14 < Kvisle> hackernews
11:15 < gildean> lethalduck: http://news.ycombinator.com
11:15 < lethalduck> Kvisle: the?
11:15 < lethalduck> ah
11:18 < lethalduck> got to be member?
11:18 < gildean> lethalduck: for posting?
11:18 < gildean> yeah
11:18 < lethalduck> ok
11:19 < gildean> registering doesn't actually require anything
11:19 < ROTINFUCCINGHELL> ┌∩┐(◣_◢)┌∩┐ http://youtu.be/bKeU92wXl4I?t=11m34s ┌∩┐(◣_◢)┌∩┐
11:19 < lethalduck> heh, see that.
11:20 < gildean> iirc they check your first post before it becomes public or something in those lines
11:21  * mpfundstein is taking lunch
11:22 < lethalduck> Just post a url by the look of it.
11:23 < CTCPVERSION> okuryu Internet13 daedeloth ROTINFUCCINGHELL wizonesolutions robmozart hipertracker retrofox nsolsen omni5cience Wizek|2 _mdp emattias_ SasanRose davidcoallier dannyamey alanmeira Aartsie ExxKA yacks halfhalo euforic uiureo kelonye serapath jamesd dch dubban ohcibi luisbug hammon astropirate sfoster sandfox AvianFlu PhysX solmsted fly-away simong adambeynon tPl0ch Swizec Twelve-60 rafmc GreenDog stiant Slipo blakmatrix jez0990 graeme_f 
11:23 < CTCPVERSION> [05:20] Users on #Node.js: Torsten85 admc mattijs aaronmcadam Bonuspunkt drodger eldios Aidan88 josh-k timkuijsten Druide_ mrchrisadams joehoyle manuelbieh larsvegas TomY zonetti jvanveen D4RK-PH0ENiX Frippe [[zz]] romainneutron stafamus monkegjinni ecthiender tayzlor Guest46216 pvankouteren zgrizzly bnoordhuis sthaha _graham_ pct sdouble Know1edge average_drifter zeroz zedas ReinH _kud benhoman hakunin eb0la Fuu`` tlrobinson mpfundstein
11:23 < CTCPVERSION> [05:20] Users on #Node.js: CMTegner nooga [AD]Turbo balboah edmellum _pid ablomen stonebranch basiliothecat kishoreyekkanti Nasga zeuslalkaka cosmincx tomb weie_ PaulCapestany Ralt groom nicholasf bahaaldine benjaminb djcoin douglaslassance kkszysiu_work Morkel poolshark simmelj Jabberwocky mtsr whitman dobber `3rdEden ttt Swaagie armetiz toonketels Pitel_IPEX abrkn sawjig rendar chakrit dileep_ echo Piotras toppledwagon adrianlang WolfA
11:23 < CTCPVERSION> [05:20] Users on #Node.js: _gambit SamuraiJack minibikini niloy cliffano Kvisle rurufufuss tlync pretty_function jammsen ejholmes joshfinnie isomorphic booo ericelliott zaheera hemanth_ gluxon netiul petschm jasonpincin meso_ satyr joshontheweb urlwolf hossy ryanh teerapapc levi501d redir jemparing duncanbeevers jkarsrud mgc__ nym percival_ Outsider jyp_cloud phuu svnlto frankdsm_ kenperkins tomtomaso fcoury intripoon yhpark freewil pret
11:23 < CTCPVERSION> [05:20] Users on #Node.js: Tobsn niftylettuce_ tim_smart zackiv31 inimino xp_prg2 corytheboyd yankhates Fli-c kudos reprisal beuk_ Drager faulkner khollada_ RushPL_ skebcio_ jslatts_ sneakyness rodasc raja hipsterslapfight \mSg thealphanerd willwhite woolite64 odyniec jimt cuttooth mape ircretary `10 shesek ashnur rcapasso dcamp gim50 Sly adz ossareh onr wereHamster fwg elijah-mbp brooss Disil jzacsh wires TehShrike Guest50794 idefine pu
11:23 < CTCPVERSION> [05:20] Users on #Node.js: scttnlsn kirkstrobeck drug_motor qubit[01] lance|afk Nykolla ramitos ootje chrxn henrikhodne devdazed jgornick TheFuzzball KiNgMaR ^esc schredder Rolken styol ehershey frogstarr78 epiloque prismatictrail notmatt inolen lurksia mikey_p_ texinwien tmpvar _cheney kppullin danielfi_ innociv_ rmill cha0s davidbowieslefte Orbitrix ejnahc jden jmfcool philips_ CTPAX Steve Gruni salsamontes jedi4ever rwaldron bigkevmcd
11:23 < CTCPVERSION> [05:20] Users on #Node.js: slickplaid jaredrhine_ CamonZ SvenDowideit mscdex llab8ks chjj Benvie Zauberfisch netAction SHAGGSTaRR CoffaBun33h i_m_ca victor2812 Wa yawnt xSmurf _yoy_ Jee5us_w cyphase JonnyFunFun jdeibele pquerna ryanrolds_w reid joshie kaoD_ ClaudioAlbertin dook thread mikl neersighted ruff Leeol ivan\ TomRone txdv litenull1 cjheath tahu eykosioux Guest87286 calvinfo zhware niggler jwulf_afk Tivs___ xorox90_ balupton_ jae
11:23 < CTCPVERSION> [05:20] Users on #Node.js: remysharp thejefflarson dested Fabryz olegp sveisvei Raynos NimeshNeema upgrayeddd garann justicefries herzi dscape Hosh__ strmpnk JasonSmith darach_ salazr_ beawesomeinstead chunhao__ iaincarsberg sriley jsonified denysonique__ heatxsink_ dekz_ majek klobucar avidal metadaddy daleharvey LeoAtWork_ magn3ts wycats irclogger_com _ior marienz prasm mpajor_op5 optixx Kingdutch Doikor tuhoojabotti cfq topaxi L10n ac
11:23 < CTCPVERSION> [05:20] Users on #Node.js: zomg prawnsalad xer0x beasty_ ppppaul baudehlo simius kborchers rubicon Youdaman Tim-_- munro tdmackey jesusabdullah psino Slashbunny don_jones leoncamel Josh kraft andrewaclt mbalho qmx|away rvagg ljharb EvRide1 digiwth freeformz deizhu rking Zak Moult swaj bren2010 kcm1700 zykes- Nom- zemm @konobi jefferai andrehjr cjm bitZero__ chovy shanlar jalcine darkc0met dcelix russell_h sj26 retornam Shadda s5fs Lorent
11:23 < CTCPVERSION> [05:20] Users on #Node.js: gildo aboudreault SomeoneWeird doki_pen Nuck pig theForce fearphage SpX L_star Gabriel403 teff stephank TheNumb TehShrike|Work topek dhpe gorillatron slurp legind maru_cc___ Shrink yewton plato Pagan|Work jtwalters_ TheMoonMaster FIQ yorn gkatsev Kester cxreg Epelii Proditor_ jolo2 Christian87 jawsome nitind guor_ geb appr stalled Validatorian polyrhythmic codepal queequeg1 Lee- tassmjau gshipley jimbot stoneco
11:23 < CTCPVERSION> [05:20] Users on #Node.js: tchopper_ Mack kimico teamoulu jheusala Mortchek AllStruck eventualbuddha tchopper jackyyll benatkin @Nexxy imarcusthis bacilla Zol _Blorb owen1 whyhankee CoverSlide knyon asadpakistani1 havocp SecretAgent brainproxy happosade roger_raymond leptonix stbuehler dec cainus fatninja fastman rudolfrck zenazn rworth trodrigues dogmatic69 richardshaw mrmoneyc LeftWing chayin_ wo0kie bentruyman Azra-el ianjm chadskidmo
11:23 < CTCPVERSION> [05:20] Users on #Node.js: emilsedgh BadOPCode codelahoma _baton_ zodiak q88qlsd karupanerura silvers BombStrike dmilith joeytwiddle krishna wankdanker tmiw clever jaket djoot akshayms malcolmva Zelest aromasca metellus wookiehangover im0b dKc _janne er1c_ mikaelb stride tokuhirom Derander mnaser _sri coffeecup alta LordLobo niallo xat- Jygga framlin topi` heroux PhilK ManneW Clex Typo nathan7 edr yongtin misterhat matt_c drspin ultravio
11:23 < CTCPVERSION> [05:20] Users on #Node.js: Connorhd EPIK kanzure przemoc flagg0204 zorzar Draggor Sven_vB chrisbuchholz donghee__ vitsaus jareiko mmalecki turbolent rcs kuja wadey|away aandy Erriond wang tec27 pavelz vladikoff guybrush gaYak asherkin BruNeX drey keeto AntelopeSalad phI||Ip Zuchto Kai` d-snp RichardBronosky balgarath jeedey brianloveswords mdevolving Seich barce chapel sorensen lrvick defunctzombie_zz superjoe ktk rikurouvila zk hlindset
11:23 < CTCPVERSION> [05:20] Users on #Node.js: jkridner_ renan_saddam meshugga sugyan rocsteady ianl` DrPizza kth5_ Snoopah _br_ terinjokes ben_alman ghoti naquad lmjabreu marlun masch samstefan JmZ_ mephux othiym23 __class__ sontek sir_tyrion flexd jbpros jayne xcat tellnes khmer_ Grephix __main__ einaros SlexAxton dlg dedis drudge onre SebastianFlyte tsingi Fudge| juliangruber pc1oad1e1ter rgmarcha_ saapaz llakey Aikar joschi context netj Gottox jtm DjMad
11:23 < Josh> SPAM
11:23 < netiul> o.0
11:23 < tokuhirom> wtf
11:23 < _kud> wowowow
11:23 < Slipo> ^^
11:23 < masch> O.o
11:23 < Shrink> heh
11:23 < Josh> isaacs, konobi , Nexxy, Spam alert
11:23 < masch> dafuq
11:23 < _gambit> :-/
11:23 < ExxKA> ?
11:23 < Aartsie> -.-
11:23 < rurufufuss> what, I thought I  was important for a minute
11:23 < wo0kie> ?
11:23 < netiul> :D
11:23 < _kud> haha rurufufuss
11:23 < sandfox> me too...
11:24 < Josh> rurufufuss, Hehe
11:24 < ianjm> wtf
11:24 < Shadda> finally, acknowledgement
11:24 < masch> rurufufuss: you are :P
11:24 < _kud> anyway, come back to sleep ^^
11:24 < aaronmcadam> tha fuq?
11:24 < wo0kie> I was like "OH SHIT, SOMEONE WANTS TO TALK TO ME"
11:24 < Moult> rurufufuss: let me ping you again, then :)
11:24 < masch> suddenly: activity in channel
11:24 < rurufufuss> gpdammit
11:24 < eldios> never nick-tab an idling IRC-user
11:24 < onr> he wanted to greet us
11:24 < aaronmcadam> lonely sod
11:25 < ianjm> script gone wrong
11:25 < cosmincx> someone called? :)
11:25 < ianjm> why the feck is he called CTCPVERSION?
11:25 < sfoster> someones bot I'd guess
11:25 < CTCPVERSION> einaros SlexAxton dlg dedis drudge onre SebastianFlyte tsingi Fudge| juliangruber pc1oad1e1ter rgmarcha_ saapaz llakey Aikar joschi context netj Gottox jtm DjMadness gsf ivan` gf3 nail__ batmania_ Ezku 
11:25 < CTCPVERSION> [05:21] <CTCPVERSION> [05:20] Users on #Node.js: sente avital billy nilc mikegerw1tz filleokus Pete4 pignata tg parasight tomaw tklun s4muel estebistec hkri gnarf Steve|4D AAA_awright apa- Mchl ralphholzmann else- Pilate jn wao rphillips Will| Rantanen- forzan_ chilts jmoney [mlg]d30xx4[mlg] Martz \stro Bilge RussellB28 vyvup crescendo orospakr` radiodario retrostlye|13 hij1nx toothrot MerlinDMC Agent_Sebba gabriel medice shanse danheber
11:25 < CTCPVERSION> [05:21] <CTCPVERSION> [05:20] Users on #Node.js: eosphoros leonardo stutter ajpiano @isaacs callumacrae stylus creationix Cheery tjfontaine kuranai_off sdboyer substack mjr84 SirFunk niclone inarru shajith jvolkman mekwall simewn med_ nuba russfrank gildean swi7ch AttackingHobo sawrubh gozala mickhansen carolyns necco ofan ypcs doffm_ MrMaksimize thedaywillcome Daegalus iain_ ed209 scott_gonzalez moonlite SargoDarya coasterD cpg Sembianc
11:26 < wo0kie> mmm bots
11:26 < ianjm> here we go again
11:26 < eldios> definitely look like a script code problem
11:26 < SargoDarya> wtf?
11:26 < eldios> maybe he could gist the code so we can help out :P
11:26 < sfoster> ffs CTCPVERSION, test on your own server or a bogus channel please
11:26 < ianjm> time for a /silence
11:26 < wo0kie> gonna fork that shit
11:26 < eldios> XD
11:26 < ianjm> Notice from CTCPVERSION: VERSION AndChat 1.4.1 http://www.andchat.net
11:26 < wo0kie> :O
11:26 < wo0kie> android?
11:26 < ianjm> yers.
11:27 < wo0kie> trollin
11:27 < eldios> could be faked
11:27 < wo0kie> botnet of phones
11:27 < wo0kie> D:
11:27 < ROTINFUCCINGHELL> ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11:27 < _kud> Boooriiiing.
11:27 < onr> or someone's android app driven botnet
11:27 < wo0kie> lol
11:27 < daedeloth> hm I can't seem to inflate my deflated data
11:28 < eldios> aaaaanyway.. nothing to see here.. move along o/ o/ o/
11:30 < ianjm> quick let's get an IRC COP
11:30  * ianjm sets mode +911 #node.js
11:30 < wao> wuah
11:30 < [mlg]d30xx4[mlg]> lol @ ctcpversion
11:36 < lethalduck> Been a while since I've felt this excited about code.
11:39 < lethalduck> Tempted to pull a node sicky tomorrow. Well, actually today.
11:40 < _ior> i feel dirty using a semaphore
11:40 < _ior> it feels like dijkstra has won
11:40 < _ior> i'm probably DoingItWrong
11:49 < zX360Shotz420Xz> how2 pwn al duh n0d3.js n00Bz ???
11:49 < Youdaman> zX360Shotz420Xz: kittens yo
11:49 < zX360Shotz420Xz> 2mlg4u nocl0sur3
11:50 < zX360Shotz420Xz> c4lLBak h3LL
11:51 < Youdaman> zX360Shotz420Xz: i r dun no y u r leik dat 4 -- node pwnz
11:52 < Moult> The parameter to the engine method is the template name to use.
11:52 < Moult> whoops. http://www.youtube.com/watch?v=O2rGTXHvPCQ rather
11:53 < zX360Shotz420Xz> w3BSc4L3 srv1cE5 xx420xx
11:54 < zX360Shotz420Xz> (not sure this counts as leetspeek, it's more broken-CoD-player-speak)
11:54 < zX360Shotz420Xz> i m3EN l0l 2pr0 4 1rC
11:56 < Youdaman> zX360Shotz420Xz: i wonder what cross-section of the node community play cod or even realise it's not fish?
12:07 < nerd_ema_> hi all
12:07 < nerd_ema_> anyone can help me on node.js? :S i have a problem
12:07 < _ior> did you hear about the woman who visited boston and asked a passing local if he knew where she could get scrod? the man replied: 'i didn't know that verb had a past tense!'
12:07 < _ior> ... speaking of fish
12:08 < nerd_ema_> no one?
12:09 < _ior> i believe the general rule for irc help is: "don't ask if you can ask a question, just ask the question and wait and hope for an answer"
12:09 < _ior> for the record, i'm too new to node to really help anyone :D
12:09 < nerd_ema_> xD lol sorry
12:09 < nerd_ema_> i have this error [12/13 13:04:28 GMT+0100] Error: Image given has not completed loading
12:10 < nerd_ema_> but i read sync my image
12:10 < nerd_ema_> :S
12:10 < nerd_ema_> http://pastebin.com/FPjuZNvA that is the source, the error is at row 131
12:11 < nerd_ema_> i don't know why
12:12 < nerd_ema_> im afk
12:13 < bsnote> Hi There. Does clearTimeout remove an unprocessed callback which is already in the execution queue?
12:15 < chiel> hi all. i have a main process which spawns child processes. i would like the child process to kill itsself off when a certain situation arises. i thought `process` would point to the child process, but it `process.exit()` exits the main, is there any way for a child process to only kill itsself?
12:17 < freewil> you shouldnt kill of the parent until all the children processes exit
12:17 < chiel> no, which is why i want to have the child process only kill itsself
12:18 < chiel> if i could send a message to the parent that would also work
12:19 < terinjokes> heh, android bot not
12:20 < freewil> chiel, i think child.kill from the parent is what you want
12:20 < chiel> freewil: yeah, but only the child knows when it should exit :)
12:20 < chiel> which is where my problem lies
12:21 < chiel> i guess i could grep stdout but that feels kinda dirty.
12:21 < chiel> brb, meeting.
12:21 < gildean> deoxxa: who were you trolling with that nick?
12:21 < deoxxa> gildean: the world
12:21 < deoxxa> gildean: or myself
12:21 < deoxxa> either way, success!
12:21 < nerd_ema_> so, what i can do for fix this error? :S [12/13 13:04:28 GMT+0100] Error: Image given has not completed loading
12:22 < gildean> deoxxa: congratulations
12:22 < deoxxa> nerd_ema_: let's take a look-see why not
12:22 < nerd_ema_> the error is at line 131 http://pastebin.com/FPjuZNvA
12:23 < deoxxa> nerd_ema_: looks like the Canvas.Image instance isn't done initialising (at a guess)
12:23 < nerd_ema_> the reading of image is sync
12:23 < nerd_ema_> why not?
12:23 < deoxxa> might want to take a look at the Canvas.Image docs and see if you need to listen for an event or supply a callback or something
12:23  * deoxxa shrugs
12:23 < deoxxa> i haven't used that module
12:26 < Industrial> Good afternoon.
12:27 < lethalduck> Good morning
12:30 < mpfundstein> morning
12:32 < lethalduck> I feel a node weekend comming.
12:32 < deoxxa> the best kind of weekend
12:32 < deoxxa> aside from a "found 100kg of gold in my floor" weekend
12:32 < lethalduck> Heh
12:32 < yawnt> http://lolsnaps.com/upload_pic/LegolasIsAFreeElf-73237.jpg
12:33 < yawnt> i laugh so hard every time i see this
12:33 < yawnt> deoxxa: ^
12:34 < lethalduck> 01:30 Time to sleep before working for the man again.
12:34 < lethalduck> Night all.
12:34 < Zak> is there a way to timeout from a function? i was looking at asyncjs, but there's no generic way to do it
12:34 < Zak> also, i understand that if a function blocks, then you can't get out of it
12:35 < deoxxa> yawnt: lel
12:35 < deoxxa> ur crazy
12:36 < yawnt> dude
12:36 < yawnt> i just burned myself with boiling water
12:36 < yawnt> protip: it hurts
12:36 < deoxxa> that's...
12:36 < deoxxa> yeah
12:36 < deoxxa> that'll hurt
12:36 < yawnt> dude
12:36 < yawnt> ARGH
12:36 < gildean> yawnt: it'll hurt for a while
12:36 < yawnt> it didn't look so bad at the beginning
12:36 < yawnt> now it's like "OMG OMG OMG"
12:36 < gildean> it'll burn deep
12:37 < yawnt> deoxxa: going to The Hobbit european premiere in 4 hours
12:37 < gildean> yawnt: did you run cold water on the burn for several minutes?
12:37 < yawnt> SHOULD I DRESS LIKE LEGOLAS?
12:37 < yawnt> gildean: no
12:37 < yawnt> but i'm about to
12:38 < yawnt> 13:37
12:38 < yawnt> it's leet time
12:39 < deoxxa> dude
12:39 < deoxxa> go run water on that burn already
12:40 < deoxxa> get off irc and fix your damn burnt flesh
12:40 < deoxxa> ._.
12:40 < yawnt> deoxxa: i am
12:40 < deoxxa> you're not! you're typing!
12:40 < yawnt> ONE HANDED
12:40 < deoxxa> lol
12:40 < Industrial> (mad skillz!)
12:40 < deoxxa> 2mlg4me
12:47 < yawnt> deoxxa: it stopped hurting
12:47 < yawnt> :3
12:47  * deoxxa shakes head
12:48 < deoxxa> boiling water is like
12:48 < deoxxa> cooking 101
12:48 < yawnt> dude
12:48 < yawnt> i wasn't cookin
12:49 < deoxxa> were you... cleaning jewellery?
12:49 < yawnt> laundring dirty money
12:49 < deoxxa> oh
12:49 < deoxxa> did it go well?
12:49 < deoxxa> i mean aside from the burn
12:49 < chiel> damn that was a long meeting
12:49 < yawnt> not really
12:49 < deoxxa> that's a shame
12:49 < deoxxa> better luck next time?
12:49 < yawnt> now i have my bills reduced to a bunch of sticky paper
12:49 < yawnt> :\
12:50 < chiel> just quoting from earlier: "i have a main process which spawns child processes. i would like the child process to kill itsself off when a certain situation arises. i thought `process` would point to the child process, but it `process.exit()` exits the main, is there any way for a child process to only kill itsself?"
12:50 < yawnt> protip2: never use hot water to wash money
12:50 < deoxxa> :<
12:50 < yawnt> the only logical conclusion i can get is
12:50 < yawnt> hot water hates money and attacked me due to self defense
12:50 < deoxxa> in australia we have plastic money
12:50 < deoxxa> so you can safely use hot water on it
12:50 < chiel> or can i somehow send a message to the parent process, from the child?
12:50 < yawnt> doesn't hot water melt plastic too?
12:51 < deoxxa> only if it's super hot
12:51 < deoxxa> super hot fire
12:51 < deoxxa> i'm not a rapper
12:51 < deoxxa> http://www.youtube.com/watch?v=5BrkmIqUXck
12:53 < daedeloth> I'm having my hands full trying to deflate a bunch of data in nodejs and to inflate it in javascript. Something sais me it should be that hard
12:53 < daedeloth> does anyone have experience with that?
12:56 < bnoordhuis> daedeloth: are you running into specific issues?
12:56 < daedeloth> some things don't want to inflate, I'm starting to think it's text encoding
12:58 < kaoD_> daedeloth: inflate/deflate?
12:58 < kaoD_> you mean data compression?
12:58 < daedeloth> yea
12:58 < daedeloth> could also be my base64 library
12:58 < kaoD_> which algorithm and where's the problem?
12:59 < daedeloth> deflate
12:59 < daedeloth> from zlib
12:59 < daedeloth> rawdeflate to be more precise
12:59 < daedeloth> but just to be sure, what text encoding does node use by default?
12:59 < kaoD_> daedeloth: it depends... in sockets it's just a Buffer
13:00 < daedeloth> well I convert it to a string
13:00 < flexd> Random highlighters are not cool!
13:00 < daedeloth> well no actually I do JSON.stringify
13:00 < daedeloth> *goes googling*
13:02 < daedeloth> ok so JSON.stringify returns a javascript string, so I guess that is UTF-16
13:10 < RLa> daedeloth, you should not care about internal encoding
13:10 < RLa> not in js at least
13:12 < daedeloth> well, yes, I agree
13:12 < daedeloth> until you start doing data zipping
13:30 < Xano> I'm looking for info on shipping assets with packages, such as best practices, where exactly to put them, etc
13:32 < gildean> Xano: define assets and packages
13:33 < Xano> gildean: npm packages and assets are non-JS files, in my case YAML config
13:34 < gildean> Xano: for creating packages you can check: https://npmjs.org/
13:34 < Xano> gildean: I found the info on creating packages. My question is about shipping assets with them
13:34 < gildean> it has a faq and a readme that should get you going
13:35 < Xano> About which I haven't been able to find docs yet
13:35 < gildean> Xano: https://npmjs.org/doc/developers.html
13:38 < Xano> gildean: Thanks
13:39 < Xano> gildean: It answers my question partly. Would non-code files go in /lib? (I understand it's up to the dev to decide where to put them, but I'm just wondering about best practices and conventions)
13:40 < mpfundstein> Xano: Thats an interesting question
13:40 < Xano> The reason I'm asking is because other devs should be able to use those YAML files without having to load any of the JS that comes with them
13:41 < mpfundstein> Xano: I normally put lib files in /lib , app source in /src and config gets placed into /etc/ when installing , and in /<app_root> while coding
13:41 < Xano> So loading those files should be as easy and straightforward as possible
13:42 < mpfundstein> Xano: You can make a folder /resources
13:42 < mpfundstein> Xano: than everyone would now. ok here is non code stuff 
13:44 < Xano> mpfundstein: sounds sensible :)
13:46 < Xano> Two more newbie questions: 1) Is there a common unit testing framework? Most articles I've found are somewhat older, or reference to frameworks that haven't been maintained for a while. 2) How do I find the path to another installed package? (In order to load those resources)
13:48 < zomg> Xano: at least for packages you would generally install them via npm which sorts out the path stuff so you can just say require('WhateverPackage')
13:48 < nathan7> Xano: require.resolve() if you want to resolve a non-JS file like require()
13:49 < Xano> zomg: Right, but that doesn't work for resources (non-JS files), does it?
13:49 < zomg> Nah you can use what nathan7 suggested though
13:49 < Xano> nathan7: Thanks, let me check that :)
13:50 < Xano> nathan7: zomg Yup, that's exactly what I was looking for! :)
13:51 < nathan7> require.resolve <3
13:54 < Pitel_IPEX> mpfundstein: thanks for inotify tip, it does exactly what I want. :)
13:56 < mpfundstein> Pitel_IPEX: You are welcome. But dont forget that it doesnt work quite well on network mounted stuff (if you want to migrate or whatever)
14:00 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:03 < redir> morning
14:06 < rking> <substack> rking: you could just write the stuff using the node-style commonjs-esque module system ← Sounds interesting. Any example repos of something that does this?
14:37 < daedeloth> alright I'm going to start crying.
14:37 < daedeloth> http://pastebin.com/EFH91GwT
14:37 < daedeloth> tell me about text encoding
14:38 < mpfundstein> daedeloth: please put { on the same line as function and if etc... thats good javascript convention and otherwise you can encounter some very weird bugs
14:38 < daedeloth> yea I know about the bugs, I avoid those situations :)
14:39 < Aikar> ... here I was thinking someone actually wanted me in here, but it was just a spambot :(
14:39 < daedeloth> so I take an object, turn it into a nice json string, turn that string into base64 (kindof useless but just to avoid weird characters), deflate it and base64 encode the result again
14:39 < mpfundstein> deadeloth: yeah, but if someone else will work with your code he/she will probably be confused
14:39 < daedeloth> this should all work without any trouble, right?
14:40 < daedeloth> and yet something must go wrong with text encoding.
14:41 < daedeloth> so what I need to know basically is wha ttext encoding is returned by json.stringify I think
14:55 < Wes-> daedeloth: I could be wrong, but I think JSON.stringify use guaranteed 7-bit clean
15:07 < Wes-> does anybody understand the implementation of net module events w.r.t. ordering?
15:07 < Wes-> IIUC events are not guaranteed to be processed in order, but the sample echo server relies on "connection" being delivered before "connect" in order for the client to receive the hello message
15:15 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:16 < gildean> Wes-: how's so?
15:16 < Wes-> ....unless, the .emit() method en-queues the emitter object and event name, rather than enqueueing the actual function that is to be invoked?
15:17 < Wes-> gildean: I'm seeing this while trying to reimplement the EventEmitter API outside of Node -- basically, the "connection" event is responsible for setting up the "connect" listener on the client socket, but when the server accepts the incoming connection, and emits the "connect" event on the new client socket, it has not yet got the listener assigned, because when the .emit() method is...
15:17 < Wes-> ...called, the invocation of the server's "connection" event hasn't happened yet
15:22 < gildean> Wes-: i'm still not getting you
15:23 < gildean> Wes-: i looked at the net-modules example, and to me it seems quite straightforward
15:24 < mpfundstein> i have a question. when storing an object to JSON and using _id for private data. Is there a possibilty to store it as 'id' instead of '_id' ?
15:28 < zomg> mpfundstein: isn't that related to your specific data store though
15:31 < opengeek_> hello there, I would like to know if I can configure npm to use a different command than "node" to run nodejs
15:32 < SomeoneWeird> symlink ?
15:32 < mpfundstein> zomg: i just want to store a json. i wonder if theres a cool way to transform the _id to id
15:33 < opengeek_> i would prefer a different solution than a symlink
15:33 < SomeoneWeird> a.id = a._id
15:33 < SomeoneWeird> woo!
15:33 < mpfundstein> LOL
15:33 < mpfundstein> i wanted something more elegant
15:33 < zomg> Just.. don't call it _id in the first place?
15:33 < SomeoneWeird> a.id = a._id; delete a._id;
15:33 < SomeoneWeird> woo!
15:33 < mpfundstein> no no no
15:33 < naomi> i also find the _id convention to be pretty stupid.
15:33 < mpfundstein> all not elegant
15:34 < zomg> define "elegant"
15:34 < Tobsn> elegant?
15:34 < SomeoneWeird> lmao, i'm joking if you can't tell
15:34 < zomg> lol
15:34 < SomeoneWeird> and I can't think of anything elegant anyway
15:34 < mpfundstein> ^^ 
15:34 < naomi> hence the "woo!"
15:34 < naomi> :P
15:34 < mpfundstein> sorry, forgot that i am not in the c++ forum
15:34 < zomg> I'd justs ignore it and go with _id... it's easier than having to change it everywhere
15:34 < mpfundstein> nobodys joking there
15:35 < zomg> I'm assuming you're using mongodb, it's just what it does
15:35 < mpfundstein> no redis
15:35 < zomg> Ah right
15:35 < mpfundstein> backend db is sql
15:35 < mpfundstein> and there everything is stored with id 
15:35 < zomg> Anyway one could argue that the data itself and its identity should be separate
15:35 < naomi> mpfundstein: you use snake_case in ruby, CAPS in SQL, camelCase in JavaScript, and _id using Redis/MongoDB
15:36 < zomg> so in that way _id being sort of "private" is towards that end
15:36 < naomi> when_in_rome, WHEN IN ROME, whenInRome, _whenInRome
15:36 < naomi> adhere to conventions
15:36 < mpfundstein> naomi: private data members in node also prefix with _
15:36 < naomi> yep
15:36 < naomi> so use _id
15:36 < mpfundstein> i doooo
15:36 < mpfundstein> my sql has id
15:37 < mpfundstein> if i could transform it would be cool 
15:37 < zomg> who's sql?
15:37 < zomg> ;>
15:37 < mpfundstein> in an automated way. like normalizing all private members with a _ prefix to be without
15:37 < naomi> wait, i thought you were using redis ?
15:37 < mpfundstein> redis + sql ;-)
15:37 < zomg> mpfundstein: sure, you could create a function that did that
15:37 < Wes-> gildean: it looks straightforward, but it only works due to details of the implementation of EventEmitter that I think are undoc'd --- if event ordering is non-deterministic like the docs say, and the "connect" method is fired on the client socket before the "connection" event is fired on the server, there will be no registered event handler for the client "connect" message, and, hence, no...
15:37 < Wes-> ..."hello" will be sent back to the connecting client
15:37 < zomg> mpfundstein: you'd just need to run your objects through it when fetching/saving
15:37 < zomg> or whatever.
15:37 < mpfundstein> zomg: yes, ill probably will write that. i thought there exists a solution already
15:38 < zomg> well it's relatively simple to write a function like that which is probably why the base library for those DBs don't have one
15:38 < zomg> and it's also very specific to people's use-cases so it might not be a very general function
15:38 < mpfundstein> zong: true
15:38  * mpfundstein is writing now these stupid function. ttyl
15:40 < exit2> What are the benefits of being a JS ninja?
15:41 < sohcahtoa> cool outfit
15:41 < gildean> Wes-: the client and the server are completely separate entities?
15:44 < Wes-> gildean: when the echo server server accepts a connection, the Server object emits "connection",clientSocket and "connect" on the clientSocket. The hello message is sent to the client over the clientSocket, using the "connect" listener on the clientSocket, which was set up by the connectionListener on the server.   It's this implied ordering (i.e. if it happens out of order the demo doesn't...
15:44 < Wes-> ...work) that seems to be at odds with the documentation.
15:50 < gildean> Wes-: if you look at the example code, the server emits a 'connection' event with a socket-object, and in the callback of that event something is written to the socket
15:51 < gildean> Wes-: because the write is done in the callback, it can only happen after the connection event has happened
15:51 < Wes-> gildean: AHAHA!
15:52 < chiel> what is considered the best promises library nowadays? i know this is personal preference and all, so i guess i am mainly looking for suggestions. :)
15:52 < Wes-> gildean: I am looking at sample code from a previous version!!! OMG, thank you!
15:52 < Wes-> gildean: now there is no conflict between sample code and docs
15:53 < gildean> Wes-: np, i was a bit perplexed on your question at first
15:53 < Wes-> gildean: Me too, lol!    FWIW -- here's the old code-sample: http://pastebin.mozilla.org/1992664
16:22 < Mack> :o
16:23 < mscdex> why so surprised?
16:23 < naomi> mscdex: whoa, you're all over my radar lately
16:24 < mscdex> ?
16:24 < Industrial> qhy so inquiring?
16:24 < naomi> mscdex: well i was doing some nntp work and stumbled across your node-nntp repo over the weekend. i was working on my own when bam! you updated it just a day or two ago.
16:25 < mscdex> heh yeah
16:25 < naomi> mscdex: how long did your rewrite actually take? 
16:26 < mscdex> did most of it sunday night, but was busier this week so didn't get a chance to finally push until the other day
16:26 < Wes-> mscdex: did you purposefully name yourself after the CDROM driver?
16:26 < mscdex> Wes-: not a driver, but the extensions ;-) and yes
16:26 < naomi> mscdex: a single day? i'm jealous of your speed
16:26 < Wes-> mscdex: Cool! :)
16:27 < naomi> mscdex: in all fairness, i'm new to implementing an nntp client, though :P
16:27 < mscdex> naomi: well, the painful part of the previous implementation was the parsing of responses
16:27 < naomi> mscdex: yeah... i was definitely running into that roadblock
16:27 < mscdex> naomi: i ended up writing a separate module while i was working on it to help with parsing responses
16:27 < Wes-> a good 'yacc' for JS would be nice for that sort of stuff
16:28 < mscdex> naomi: it does a boyer-moore-horspool search on streams to find the CRLF and CRLF.CRLF
16:28  * Wes- has done NNTP, too.. but, like, 20 years ago!
16:28 < naomi> mscdex: does nntp generally use ".\r\n" as a way to signal that it's done dumping data?
16:28 < mscdex> naomi: for multi-line respones, yes
16:29 < mscdex> naomi: for single line it's just CRLF
16:29 < naomi> when would CRLF.CRLF be used ?
16:29 < mscdex> naomi: but actually the end-of-response for multi-line responses is CRLF.CRLF
16:29 < naomi> ah
16:30 < mscdex> the reason for that is if you have content that starts with a .
16:30 < naomi> i was piping my output through a line splitter, so i was only see "."
16:30 < mscdex> so you can "dot stuff" to make sure it isn't misinterpreted as an end-of-response
16:30 < mscdex> e.g. CRLF..CRLF is a line with a dot
16:31 < Wes-> SMTP does that too
16:32 < mscdex> never looked at SMTP.... IMAP was enough for me ;-)
16:33 < mscdex> the one thing that was annoying is that a lot of usenet servers don't support the _mandatory_ CAPABILITIES command
16:33 < naomi> mscdex: so this boyer-moore-horspool search...
16:33 < Wes-> SMTP and NNTP are quite closely related... IMAP is rather different
16:34 < mscdex> yeah IMAP is crap :-)
16:34 < Wes-> if you're writing an NNTP lib, you should be able to do SMTP with very little effort
16:34 < naomi> mscdex: yea, i was very thankful to find out mine supported it
16:34 < Wes-> IMAP is crap, but less crappy than POP3
16:34 < chiel> right guys, promises libraries, any suggestions? i only have experience with promised-io, but i have no idea if it's considered good or bad. :)
16:34 < naomi> mscdex: what will the server response be if it doesn't respond to CAPABILITIES ?
16:35 < ExxKA> What's the best way to generate keys from node js?
16:35 < ExxKA> rsa keys
16:35 < mscdex> naomi: well, it's 500 for no such command
16:35 < mscdex> iirc
16:35  * naomi nods
16:35 < naomi> that would make sense
16:35 < naomi> mscdex: did you implement the boyer-moore-horspool search on your own?
16:35 < mscdex> usenet is a somewhat dying breed, i guess that's why nobody tries to enforce the RFC :P
16:36 < naomi> mscdex: so sad, too
16:36 < daedeloth> anyone have experience with base64 in node? I can't seem to convert it to bytearray properly
16:36 < mscdex> naomi: no, it's a modified version of a C++ implementation
16:36 < mscdex> daedeloth: can you gist your code?
16:37 < naomi> mscdex: that must be part of the streamsearch lib you included
16:37 < mscdex> naomi: yep
16:37 < daedeloth> http://pastebin.com/wxS0gPUn
16:37 < naomi> mscdex: i don't suppose you gave this thing a facelift because of the recent takedown on the indexing sites? 
16:37 < naomi> :P
16:38 < mscdex> naomi: no, someone approached me because they were having some trouble with it. also because i happened to have some free time and it desperately needed a rewrite
16:39 < naomi> mscdex: well it came at a perfect time
16:40 < Wes-> wait, you naomi is one of the usenet-ruiners? >:-(
16:40 < naomi> Wes- ?
16:40  * Wes- wishes October 1993 would hurry up and get here
16:41 < Wes-> naomi: once upon a time, usenet was used by people to talk to one another... not to trade warez links and porn
16:41 < naomi> Wes-: in all fairness, it was ruined when i got there, then
16:41 < Wes-> naomi: I supposed that's probably true
16:42 < naomi> but "warez links and porn" ...
16:42 < naomi> what about my ebooks?
16:42 < naomi> and my nintendo ds roms!
16:42 < Wes-> well, DS ROMs are definitely warez.
16:42  * EyePulp missed the first part of the discussion - what did mscdex re-write, and how did it destroy my ability to see lousy TV shows commercial free?
16:42 < naomi> true
16:42 < Wes-> Did you write the ebooks?
16:43 < mscdex> EyePulp: node-nntp
16:43 < naomi> EyePulp: he rewrote his own nntp lib for node.js
16:43 < EyePulp> I see.  Nifty
16:44 < naomi> Wes-: i'm not as filthy a pirate as most; so many books are poorly written. i try to find a free (albeit pirated) version first. if the book is useful to me, in almost all cases, i will buy it.
16:45 < mscdex> daedeloth: what's the problem exactly?
16:45 < daedeloth> I can't seem to inflate the damn thing on client side
16:46 < mscdex> daedeloth: what is the client side? browser or ?
16:46 < daedeloth> browser, yes
16:46 < daedeloth> I'm pretty sure it's the base64
16:46 < mscdex> daedeloth: you're comparing `out` with the data received on the client? do they not match? is the client side's data just truncated or ?
16:47 < daedeloth> I'm receiving the base64 data right
16:47 < daedeloth> but while trying to convert the base64 to a bytestring, it messes up
16:48 < mscdex> daedeloth: can you gist the code you're using client-side to convert the base64 to a bytearray or whatever?
16:48 < daedeloth> yes, give me a sec, need to deploy it for that
16:49 < naomi> need to deploy to give a code paste? 
16:50 < daedeloth> why paste if I can give a link? :)
16:50 < daedeloth> http://home.catlab.be:8008/js/CatLab/Andromeda/Net/Packer.js
16:50 < mscdex> either way :-)
16:51 < daedeloth> I've tried everything with this data, converting it to utf8, converting it from utf8, ...
16:51 < mscdex> ok, where is Base64 defined?
16:51 < daedeloth> http://home.catlab.be:8008/js/CatLab/Andromeda/Net/Packer.js
16:51 < daedeloth> oops
16:52 < mscdex> :-)
16:52 < daedeloth> http://home.catlab.be:8008/js/lib/utf8.js
16:52 < mscdex> that's utf8
16:52 < daedeloth> exactly. http://home.catlab.be:8008/js/lib/base64.js
16:53 < daedeloth> brain goes woowoo from trying to figure out simple zlib problems all day :)
16:54 < naomi> daedeloth: do you realize your codex string is 65 characters long?
16:54 < daedeloth> to be honest I've just downloaded a library, then changed the library, than changed it again
16:55 < isaacbw> does npm have a system of optional dependencies?
16:55 < isaacbw> oy, my wifi cut out as soon as I asked that
16:56 < mscdex> isaacbw: yes
17:02 < daedeloth> aaaalrigth, never mind, I just found a library that allows me to convert straight to bytearray
17:02 < daedeloth> seems to work now
17:04 < kenperkins> who rang?
17:04 < kenperkins> must have been last night
17:05 < gildean> kenperkins: nah, it was someones bot which echoed all the users back to the channel
17:05 < gildean> all the nicks rather
17:05 < kenperkins> figures
17:05 < kenperkins> I get no <#
17:05 < kenperkins> <3 even
17:10 < daedeloth> how can I disable those "debug" messages in nodejs?
17:11 < daedeloth> never mind, socket.io question.
17:11 < mscdex> daedeloth: here's one that works: https://gist.github.com/4af8d54577df046d5bd6
17:11 < mscdex> oh oops nvm :-)
17:16 < daedeloth> mscdex, thanks :) but I got it working, after 8 hours
17:16 < daedeloth> by the way, does anyone know how to se tthe level of compression in zlib?
17:18 < mscdex> daedeloth: http://nodejs.org/api/zlib.html#zlib_options
17:20 < tuhoojabotti> Does Node.js have a brand guide?
17:25 < baudehlo> where is the definition of the process.* functions in the node source code?
17:25 < isaacbw> is there an intuitive way to have different node processes listening to different sub-urls, i.e. /resource/2 and resource/65 end up being handled by different processes?
17:26 < chiel> http-proxy
17:26 < rideh> warz: i dont think i'll be able to do it like your example afterall. I think I need more logic in the form rendering unfortunately.
17:27 < rideh> warz: here is what my schema looks like - of course not every object will have all of these available form types: http://dpaste.com/845398/  
17:28 < sha0coder> hi
17:28 < sha0coder> do you recommend any irc lib?
17:29 < sohcahtoa> hm js ircd 
17:30 < isaacbw> thanks chiel
17:31 < isaacbw> man the wifi here is terrible
17:31 < isaacbw> I keep getting disconnected
17:32 < isaacbw> hmm, that might not be quite what I want
17:35 <@isaacs> chjj: ping
17:35 <@isaacs> chjj: i'm confused by the tests in marked.
17:35 <@isaacs> chjj: like.. my test was passing even before i did my change.
17:36 <@isaacs> chjj: are you sure that they're actually testing properly?
17:36 < chjj> isaacs: oh, yeah, ill fix that. i have it set up in a strange way.
17:36 <@isaacs> oh, ok
17:36 < mscdex> baudehlo: probably in src/node.js
17:36 <@isaacs> baudehlo: in src/node.js and in src/node_process.cc i believe.
17:36 < mscdex> baudehlo: and/or in node.cc
17:36 < chjj> isaacs: i have one directory with the original markdown suite, and one with all the new tests. i have a shell script to mix them together into the `tests` directory.
17:36 <@isaacs> ah, right, node.cc
17:36 <@isaacs> node_process.cc is for child_process objects
17:36 <@isaacs> chjj: ah, i see
17:37 <@isaacs> chjj: `npm test` should probably run that shell script first.
17:37 <@isaacs> chjj: or maybe not, i dunno
17:37 < chiel> hm.. any suggestions for a good library to do http requests from node?
17:37 <@isaacs> chiel: request
17:37 <@isaacs> chiel: https://npm.im/request
17:37 < chiel> isaacs: checking, thanks :)
17:37 < chjj> isaacs: yeah, that's possible
17:38 < yairgo> I need some help understanding how node websockets work, I have a fairly strict network and want to know how things work before I start asking my network people to open up ports
17:38 <@isaacs> chiel: if you want more fanciness than node's require('http').request(...) anyway
17:38 <@isaacs> yairgo: websockets just go over the same port that your http is going over.
17:38 < yairgo> right now I have node listening on port 1234 and I have nginx over https listening on 4443 and forwarding to 1234
17:38 < chiel> isaacs: yeah, i was looking at http.request, but the api seems kinda messy, definitely would prefer an abstraction :)
17:38 < yairgo> it doesn't seem like the response is getting back out to the client though
17:39 <@isaacs> yairgo: yeah, i think nginx is not websocket friendly
17:39 < yairgo> isaacs, sweet
17:43 < yairgo> isaacs, I'm being lazy so you can tell me to go try to find it myself, but do you know of any examples I can look at for using socket.io with https? I'm trying to stand up an inherited project :(
17:44 <@isaacs> yairgo: sorry, you're out of my knowledge level now
17:44 < airportyh> Hi all, is there a way to tell if the network port you are trying to use is already in use? Seems like it should throw a EADDRINUSE but it doesn't
17:45 < airportyh> And I am on OSX
17:45 <@isaacs> airportyh: yes, it'll throw EADDRINUSE
17:45 <@isaacs> airportyh: if it doesn't, it's because it's not in use :)
17:45 <@isaacs> airportyh: or your'e not binding to it
17:45 <@isaacs> airportyh: are you in a cluster worker?
17:45 < airportyh> I am pretty sure it's in use
17:45 < airportyh> I started 1st server
17:45 < airportyh> open the browser to connect to it
17:46 < airportyh> and then started second one on same port
17:46 < airportyh> the browser still connects to the page served by 1st server
17:46 < airportyh> but no exception thrown
17:46 < airportyh> but interestingly, if I wait a bit
17:46 < airportyh> it starts serving the file served by 2nd server
17:47 < airportyh> then if I kill 2nd server, it will again serve the file by 1st server
17:49 < airportyh> I think maybe it's OSX specific, hinted by http://stackoverflow.com/a/10266225/5304
17:51 < bngreer> I'm having a spot of trouble googling current best practices for multithreaded nodes projects
17:52 < bngreer> everything is either old or TJ's version of cluster or other noise
17:52 < bngreer> can someone point me in the right direction?
17:53 < bngreer> I hear hook.io is kind of deprecated
17:54 < bngreer> so what is the current recommended  interprocess messaging library?
17:54 < mmalecki> bngreer: why not use .fork?
17:54 < mmalecki> child_process.fork?
17:55 < bngreer> for messaging?
17:55 < mmalecki> yes
17:56 < bngreer> it lacks the erlang hotness of inter server messaging
17:56 < s5fs> re: child_process.fork, i'm looking to write to OS config files using a child 'helper' process. what's a safe way to escalate privs during writing?
17:58 < bngreer> use a background daemon that runs as root
17:59 < sgallagh> isaacs: What's the plan for 0.9.4?
18:01 < hoodoos> hello guys!
18:01 < hoodoos> i have a question about new timeout option for http client
18:03 < hoodoos> just wonder how it works, you know sometimes there's a blocking tasks on eventloop so let's say i made request, set timeout to 20 and then other process comes and launches blocking task for 30 seconds. and let's assume that http request will process really quickly. so after eventloop returns to process and check timeout will it first check that it has all data needed or will simply callback timeout function?
18:03 < hoodoos> err not process but request, it's all running on same eventloop
18:03 < astropirate> Anyone else get the feeling 
18:04 < ruff> yea
18:04 < astropirate> they have never won any chance lottery time of game
18:04 < ruff> oh wait.. what feeling
18:04 < astropirate> :(
18:04 < hoodoos> is it related to my question? =)
18:05 < astropirate> hoodoos, why does everyting have to be abotu you?
18:05 < astropirate> it ALWAYS has to be abotu you doesn't it?
18:06 < peterrs> is there a synchronous version of net.createServer() ?
18:06 < hoodoos> astropirate: are you drunk?
18:08 < peterrs> because i have two named pipes which need to be connected before returning, its kinda awkard having to emit a custom `ready` event when connections are established: https://github.com/peters/pty.js/blob/master/lib/pty_win.js#L141
18:20 <@isaacs> sgallagh: streams2
18:21 <@isaacs> sgallagh: monday-ish
18:21 < sgallagh> isaacs: Ok, thanks. What does "streams2" mean?
18:21 <@isaacs> sgallagh: depending on when bnoordhuis and piscisaureus_ can land the revised fix for the libuv issue i ran into recently
18:22  * sgallagh perks up.
18:22 < sgallagh> I'll need to keep an eye on that too, I suppose.
18:22 <@isaacs> sgallagh: https://dl.dropbox.com/u/3685/presentations/streams2/streams2-ko.pdf
18:24 <@isaacs> sgallagh: i'm going to blog about them soon.
18:24 <@isaacs> sgallagh: on blog.nodejs.org, i mean
18:24 < sgallagh> isaacs: Anyway, thanks for the update. I'm trying to finalize the Fedora packaging. I'm trying to get Node 0.9.x/0.10/1.0? into Fedora 19
18:24 < sgallagh> It's been quite a journey :)
18:25 <@isaacs> kewl
18:28 < st_luke> oh monday
18:28 < st_luke> sweet
18:28 < st_luke> -ish
18:35 <@isaacs> st_luke: :)
18:36 < st_luke> I'm going to have so much more free time soon, great timing
18:54 < ben_alman> ok, a question for the npm braintrust. we used to tell people to install grunt globally. we have since realized this is a horrible idea, so we created grunt-cli which gets installed globally, and grunt gets installed locally. the problem is: people keep trying to install grunt globally (they don't RTFM) so we've added a preinstall test for process.env.npm_config_global and fail the install if that's set
18:54 < ben_alman> so this works great.
18:54 < ben_alman> the problem is that if someone tries to globally install a module that has grunt as a dependency, THAT install fails
18:54 < ben_alman> help?
18:55 < ben_alman> i basically need to know if grunt is being installed globally itself, but not as part of a module that has grunt as a dependency
18:57 < ben_alman> i can find things in process.env.npm_config_argv, PATH and PWD
18:57 < ben_alman> but i'd have to parse them and was wondering if there was a better way
18:59 < ben_alman> the least gross thing, which still seems really gross, is that i could make it error if process.env.PWD contains 'node_modules' only once
19:00 < ben_alman> but this assumes implementation details of npm that i don't really want to assume
19:00 < sohcahtoa> I'm having a problem installing 'canvas' module (and maybe all modules I haven't tried any others) with npm I get this error python: can't open file 'C:\Users\Brian M\.node-gyp\0.8.15\tools\gyp\gyp': [Errn
19:00 < sohcahtoa> o 2] No such file or directory
19:01 < sohcahtoa> I tried reinstalling node-gyp but no luck
19:01 < TooTallNate> sohcahtoa: i think that might have to do with the space in the file path :\
19:01 < sohcahtoa> oh really?
19:01 < sohcahtoa> damn
19:01 < sohcahtoa> let me check
19:01 < ben_alman> TooTallNate: any idea with my question?
19:02 < ben_alman> i'm totally stuck here and really trying to find a solutin to this
19:02 < TooTallNate> sohcahtoa: there's a pull request open that i haven't gotten a chance to test yet https://github.com/TooTallNate/node-gyp/pull/164
19:02 < sohcahtoa> (that tools\gyp\gyp file doesn't exist btw
19:03 < AAA_awright> ben_alman: Don't force people to do something a particular way
19:03 < sohcahtoa> thanks
19:03 < AAA_awright> If people want to install it globally that's their problem
19:03 < ben_alman> AAA_awright: it becomes our problem when they file lots of issues about it
19:03 < ben_alman> and that we originally told them to install it globally :/
19:03 < AAA_awright> No, it isn't. Mark WONTFIX.
19:04 < ben_alman> that's not really great from a customer service perspective
19:04 < ben_alman> i mean, i get it
19:04 < AAA_awright> Or consider maybe your logic is broken if it won't work in a number of different cases, including as a system-wide library
19:04 < ben_alman> huh?
19:04 < ben_alman> when would you ever install a lib globally?
19:04 < AAA_awright> If things are breaking because it's installed system-wide then something is broken
19:04 < ben_alman> no
19:04 < AAA_awright> There's use cases
19:04 < ben_alman> people just think it'll work and it won't
19:04 < AAA_awright> Just because you can't think of one doesn't mean it doesn't exist
19:04 < ben_alman> because it has no cli component
19:05 < ben_alman> lol ok
19:05 < ben_alman> anyways, if anyone has any ideas please let me know /cc isaacs 
19:05 < AAA_awright> ben_alman: That's your idea: It should work no matter where it's installed. Fix your program, don't purposefully fail
19:06 < ben_alman> AAA_awright: you're not going to convince me, so stop trying
19:06 < ben_alman> or don't
19:06 < AAA_awright> Coding your program to know about npm and change its behavior is a Very Bad Idea
19:06 < ben_alman> also, feel free to /ignore me if you disagree with me
19:07 < AAA_awright> ben_alman: Why should I ignore someone asking for help
19:07 < AAA_awright> That's the solution to your problem. It should work no matter where it's installed.
19:07 < ben_alman> so how do you require('my-lib') when it's installed fglobally
19:08 < ben_alman> i'm not sure what your use case is
19:08 < AAA_awright> The behavior of Node.js doesn't change
19:08 < ben_alman> you're on ignore fwiw
19:08 < AAA_awright> you can require('module') no matter where in NODE_PATH it's installed
19:08 < ben_alman> i don't have time for this
19:08 < ben_alman> i suggest you mark this conversation as WONTFIX
19:09 < `3rdEden> ben_alman: why don't you just add a bin with a console.error that tells them to install the correct module?
19:09 < AAA_awright> ben_alman: What do you mean how do you require a global module? You just do!
19:09 < ben_alman> `3rdEden: so the problem is that we unfortunately used to tell them to install it globally the bin was "grunt" - the new way, grunt is locally installed but the thing they install globally is "grunt-cli" which has a "grunt" bin
19:09 < ben_alman> npm won't overwrite an existing bin
19:10 < ben_alman> so they need to uninstall grunt and then install grunt-cli
19:10 < ben_alman> we just took the bin out of grunt to avoid issues
19:11 < ben_alman> with conflicts should someone try to install them both in the same location
19:11 < ben_alman> as it's possible to install both the cli and grunt lib locally
19:12 < `3rdEden> ben_alman: maybe you can solve it by creating a install script in your package.json
19:12 < TooTallNate> ben_alman: actually i think `3rdEden's idea is pretty good
19:12 < ben_alman> hmmn
19:12 < ben_alman> TooTallNate: the problem is that if someone wants to install the cli locally along with grunt and they both ahve a "grunt" bin npm will error
19:12 < AAA_awright> ben_alman: Why do you have two paths with the same name? The executable script and the library/module should only appear in one package each
19:12 < ben_alman> now, they shouldn't install the cli locally, but they *can*
19:13 < ben_alman> i don't want to limit them to having to install the cli globally
19:13 < TooTallNate> ben_alman: though i get where you're coming from, npm should have some way of differentiating
19:13 < ben_alman> per aaa's general line of thought
19:13 < ben_alman> we're doing something a little differently here than anyone else
19:13 < CoverSlide> maybe npm should have requireGlobal and requireLocal instead of preferGlobal
19:13 < ben_alman> and i don't know if it's a Good Idea™
19:13 < ben_alman> but instead of making the user globally install a cli that has the lib embedded
19:14 < TooTallNate> ben_alman: so this dummy "helper" bin in the regular "grunt" module, have instructions to 1) npm remove -g grunt, and 2) npm install -g grunt-cli
19:14 < CoverSlide> or maybe a pre-install hook
19:14 < ben_alman> we're having them install a cli that looks for a locally-installed (to the current gruntfile) lib
19:14 < ben_alman> so the cli and lib can really be decoupled
19:14 < ben_alman> hmmn
19:15 < `3rdEden> but why not create a install script in your package.json?
19:15 < ben_alman> i have them
19:15 < ben_alman> what would it do?
19:15 < ben_alman> the only thing i could think of is in grunt lib preinstall, fail if it's being installed globally
19:15 < `3rdEden> you could uninstall the old grunt by spawning npm
19:16 < ben_alman> i'm not sure i feel comfortable uninstalling things on users' behalf
19:16 < AAA_awright> I'm seeing Very Bad Things happen
19:16 < ben_alman> that seems a little too forceful
19:16 < ben_alman> i'd really like to warn them
19:16 < `3rdEden> well, then you warn them in your script
19:16 < AAA_awright> ben_alman: Why do two packages share the same files?
19:16 < ben_alman> so a warning isn't enough ,it has to fail
19:17 < ben_alman> this is because npm is so verbose people miss warnings
19:17 < AAA_awright> That's what dependencies are for, if you want a file depend on the package that provides it
19:17 < `3rdEden> ben_alman: you can have the install using the install script
19:17 < ben_alman> ALL THE TIME
19:17 < ben_alman> what do you mean
19:18 < ben_alman> right now i use a preinstall script
19:18 < `3rdEden> in your package.json you have scripts: { install: 'node checkstuff.js' } and you just have your checkstuff exit with 1 when you want the install to stop due to a failure
19:18 < ben_alman> right
19:18 < ben_alman> so… in my preinstall i have: if (process.env.npm_config_global) { console.log('error message'); process.exit(1); }
19:19 < ben_alman> which works great when grunt lib is installed -g globally
19:19 < ben_alman> it also fails if grunt lib is a legitimate dependency of another project which is itself installed globally
19:19 < ben_alman> which is the problem
19:19 < ben_alman> i can't find a way to differentiate short of parsing process.env.PWD
19:19 < ben_alman> which could be problematic
19:20 < ben_alman> so i want to fail when grunt itself is installed globally, but not when installed as a dep of another package (locally or globally)
19:20 < ben_alman> because the latter are totally legit use cases
19:20 < ben_alman> this is *ONLY* to help users understand the new way of doing things because they fail at RTFM
19:20 < `3rdEden> why don't you check it with https://github.com/isaacs/node-which
19:21 < `3rdEden> to see if grunt is globally installed
19:21 < ben_alman> i need to check as grunt is being installed
19:21 < ben_alman> hmmn
19:21 < mscdex> muahahaha! simultaneous ssh2 exec() across many hosts!
19:22 < mscdex> now i can update node on all machines with one command!
19:22 < mscdex> :-D
19:22 < mscdex> WITH node!
19:23 < chilts> mscdex: sweet, that's pretty awesome :)
19:25 < MI6> joyent/libuv: bnoordhuis created branch libuv-streams2-fix - http://git.io/v-pUhg
19:25 < MI6> joyent/node: bnoordhuis created branch libuv-streams2-fix - http://git.io/OKyJGg
19:28 < ben_alman> can the postinstall npm hook prevent an install to fail?
19:28 < ben_alman> like, in a way that results in the thing not being installed?
19:28 < ben_alman> or only preinstall
19:30 < AAA_awright> ben_alman: Ping?
19:47 < dylang> npm update still doesn't include dev dependencies, right? what's the one-command-to-update-them-all?
19:47 < bsnote> Hey, seeing a new version on Website, but the https://raw.github.com/joyent/node/v0.8.16/ChangeLog link is broken
19:48 < bsnote> github failure?
19:53 < MI6> joyent/node: isaacs v0.8 * 45cdb0e : blog: Post for 0.8.16 (+4 more commits) - http://git.io/_LEYmw
19:53 < MI6> joyent/node: isaacs created tag v0.8.16 - http://git.io/Gxm9WQ
19:53 < TooTallNate> bsnote: fixed
19:55 < rump> oh god, i tossed and turned all night dreaming of an endless string of callbacks
19:55 < rump> i could never find an end point, it was horrible
19:56 < bsnote> TooTallNate: thanks
19:57 < mscdex> rump: Well, you're safe and sound now back in good ol' 2012.
19:57 < TooTallNate> 1974!?!?!
19:58 < mscdex> callback hell is a thing of the past!
19:58 < mscdex> :-D
19:58 < rump> it wasn't even nested callbacks
19:58 < rump> it was named functions
19:58 < rump> but, so, many, *shudder*
19:59 < rump> all i wanted to do was return the final callback but i could never get there
19:59 < rump> i was must had been endless looping
20:02 < rump> and apparently i need coffee ^
20:06 < sayd> i did npm install sinon-chai, and it didnt bring in any devDependencies, did that behavior change?
20:06 < rump> sayd: --dev ?
20:06 < sayd> rump, that seems to go through some obscene build process that always fails for me
20:07 < sayd> like it explicitly builds everything with gcc
20:07 < sayd> i'll give it another shot but it usually fails
20:07 < rump> builds everything or builds a specific c extension
20:08 < rump> are you running latest npm?
20:08 < rump> and is your NODE_ENV set to development?
20:08 < sayd> rump: log.error("cwd", process.cwd()) ^
20:08 < sayd> Error: EMFILE, too many open files
20:09 < sayd> rump: 1.1.66
20:09 < rump> i think if you're environment is 'production' now then devdependencies dont get installed
20:10 < rump> which is awesome
20:12 < Wes-> rump: next time just throw an exception
20:12 < rump> Wes-++
20:13 < Cat4D> has anyone bothered to make a tzolkin or long count calendar for this week's solstice? http://www.maya3d.mobi is close but there at 5 gear rings.
20:13 < mscdex> here's a mass exec script that uses ssh2 for anyone interested: https://gist.github.com/4279365
20:14 < mscdex> a simple one at that
20:15 < naomi> mscdex: "callback hell is a thing of the past!"
20:15 < naomi> mscdex: did i miss something?
20:15 < AAA_awright> Why is it so impossible to get people to care about semantics
20:16 < AAA_awright> "Well I would never do that, therefore no one else should either"
20:16 < AAA_awright> UM, I WOULD
20:16 < AAA_awright> Serious question guys
20:17 < mscdex> AAA_awright: 404 Context not found
20:17 < AAA_awright> This pragmatic coding paradigm is slowly killing me
20:17 < Wes-> AAA_awright: fully half of the population have an IQ under 100. Think about that for a minute.
20:17 < AAA_awright> Wes-: I'd like to think coders are above-average
20:18 < Wes-> AAA_awright: I'd like think that next year we will have world peace
20:18 < ben_alman> is "node_modules" something that's hard-coded into npm, or is it possible for a user to change what that directory is named through some kind of environment setting?
20:18 < rump> then you should further be reminded that php is the dominate language on tha internets
20:18 < nathan7> It's hard-coded into node and into npm, afaik
20:18 < AAA_awright> Wes-: Well that's easy, it's just getting politicians to play along
20:18 < nathan7> hard-coded into require.resolve
20:18 < ben_alman> ok, great.
20:18 < ben_alman> that makes my life easier
20:18 < AAA_awright> ben_alman: You do have NODE_PATH
20:18 < tthenne> does anyone know where one can find more documentation on mysql module? I've read through the npm doc and although good documentation there, just lookin for a bit more
20:19 < Wes-> ben_alman, nathan7: If node conforms to CommonJS modules/1.1 or better you can *add* paths by modifying the methods.paths array
20:19 < Wes-> s/methods/module/
20:19 < mscdex> node doesn't
20:19 < ben_alman> never see NODE_PATH
20:19 < Wes-> Oh, that's a bummer.
20:19 < ben_alman> is that the same as npm's global prefix?
20:20 < AAA_awright> Which is rather silly... I still don't know why that was taken out
20:20 < mscdex> ben_alman: http://nodejs.org/api/modules.html#modules_loading_from_the_global_folders
20:20 < ben_alman> looking
20:20 < AAA_awright> Especially considering npm was the one that abused it in the first place, now it's taken out as a punishment for all the rest of us? :p
20:20 < ben_alman> interesting
20:21 < sayd> rump: is there any way to have --dev just install devDependencies and not try to compile stuff?
20:22 < rump> sayd: some packages need to compile extensions i guess
20:22 < CoverSlide> mmm indian food in the kitchen today
20:22 < CoverSlide> not enough beef though imo
20:22 < rump> which package is failing?
20:23 < rump> CoverSlide: i thought cows were sacred in india
20:23 < CoverSlide> exactly my point
20:23 < CoverSlide> we're in 'murica!
20:23 < CoverSlide> so give me some fucking beef!
20:24 < rump> haha
20:24 < augusteiner> nice
20:24 < rump> only ghee and lentils for you
20:25 < sayd> rump: i dont know it just gets to that too many open files
20:25 < sayd> it happens whenever i try to install --dev
20:25 < rump> sayd: increase your ulimit?
20:32 < MI6> joyent/node: isaacs streams2 * bad29ed : streams2: Remove extraneous bufferSize setting - http://git.io/Xozpaw
20:32 < MI6> joyent/node: isaacs streams2-net * 27d69b8 : test updates for streams2 (+68 more commits) - http://git.io/UladJA
20:32 < Cat4D> has anyone bothered to make a tzolkin or long count calendar for this week's solstice? http://www.maya3d.mobi is close but there are 5 gear rings.
20:32 < MI6> joyent/node: isaacs streams2 * 27d69b8 : test updates for streams2 (+8 more commits) - http://git.io/zF_rHA
20:46 -!- Topic for #Node.js: Node.js - Neuvo Operations Define Excellence point javascript - http://logs.nodejs.org/node.js/ - jerks get kickbanned
20:46 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Fri Dec  7 18:18:20 2012]
20:46 [Users #Node.js]
20:46 [@isaacs          ] [ Connorhd        ] [ goraxe          ] [ kudos        ] [ pifantastic     ] [ SvenDowideit   ] 
20:46 [@konobi          ] [ constantx       ] [ gorillatron     ] [ kuja         ] [ pig             ] [ svnlto         ] 
20:46 [@Nexxy           ] [ context         ] [ Gottox          ] [ Kullt        ] [ pignata         ] [ Swaagie        ] 
20:46 [@piscisaureus_   ] [ continuum       ] [ gozala          ] [ kuplatupsu   ] [ Pilate          ] [ Swadq          ] 
20:46 [@piscisaureus__  ] [ coolnalu        ] [ Grephix         ] [ kuranai_off  ] [ pinja           ] [ swaj           ] 
20:46 [ [[zz]]          ] [ corytheboyd     ] [ gru2            ] [ kuryaki      ] [ pinkkis         ] [ swi7ch         ] 
20:46 [ \mSg            ] [ CoverSlide      ] [ Gruni           ] [ Kvisle       ] [ plato           ] [ Swizec         ] 
20:46 [ \stro           ] [ cpsubrian       ] [ gsf             ] [ kwhinnery    ] [ polyrhythmic    ] [ tahu           ] 
20:46 [ ^esc            ] [ crabdude        ] [ gshipley        ] [ L10n         ] [ pootpoot        ] [ tanepiper      ] 
20:46 [ __class__       ] [ creatine        ] [ Guest22690      ] [ L_star       ] [ ppppaul         ] [ tassmjau       ] 
20:46 [ __main__        ] [ creationix      ] [ Guest46216      ] [ lanceball    ] [ pquerna         ] [ taterbase      ] 
20:46 [ __underscore    ] [ crescendo       ] [ Guest87286      ] [ LanyonM      ] [ prasm           ] [ tchopper       ] 
20:46 [ _baton_         ] [ Cronoh          ] [ guybrush_       ] [ lazyshot     ] [ prawnsalad      ] [ tchopper_      ] 
20:46 [ _Blorb          ] [ cronopio        ] [ gwoo            ] [ LEDfan       ] [ prettyrobots    ] [ tdmackey       ] 
20:46 [ _br_            ] [ CTPAX           ] [ hakunin         ] [ Lee-         ] [ prismatictrail  ] [ teamoulu       ] 
20:46 [ _cheney         ] [ cxreg           ] [ halfhalo        ] [ Leeol        ] [ Proditor_       ] [ tec27_         ] 
20:46 [ _gambit         ] [ cyphase         ] [ hammon          ] [ LeftWing     ] [ przemoc         ] [ teff           ] 
20:46 [ _gambit_        ] [ d-best          ] [ happosade       ] [ legind       ] [ psino           ] [ TehShrike      ] 
20:46 [ _graham_        ] [ D4RK-PH0ENiX    ] [ harth_          ] [ LeoAtWork_   ] [ purr            ] [ TehShrike|Work ] 
20:46 [ _ior            ] [ daedeloth       ] [ havocp          ] [ leonardo     ] [ q88qlsd         ] [ tellnes        ] 
20:46 [ _janne          ] [ Daegalus        ] [ hbeck           ] [ leoncamel    ] [ qmx|away        ] [ templaedhel    ] 
20:46 [ _marvin1        ] [ daffl           ] [ hdon            ] [ leptonix     ] [ qubit[01]       ] [ tequnix        ] 
20:46 [ _mdp            ] [ dags            ] [ heath           ] [ levi501d     ] [ queequeg1       ] [ terinjokes     ] 
20:46 [ _ritch          ] [ daleharvey      ] [ heatxsink_      ] [ limeforce    ] [ r0tha_          ] [ texinwien      ] 
20:46 [ _sorensen       ] [ danheberden     ] [ hellopat        ] [ limeforce_   ] [ radiodario      ] [ tg             ] 
20:46 [ _sri            ] [ danielfi_       ] [ hemanth_        ] [ litenull1    ] [ rafmc           ] [ thanpolas      ] 
20:46 [ _yoy_           ] [ danmactough     ] [ henrikhodne     ] [ ljharb       ] [ raja            ] [ that4chanwolf  ] 
20:46 [ `10             ] [ darach_         ] [ heroux          ] [ llab8ks      ] [ ralphholzmann   ] [ thedaywillcome ] 
20:46 [ AAA_awright     ] [ darjeeling      ] [ herzi           ] [ llakey       ] [ ralphtheninja   ] [ theForce       ] 
20:46 [ aandy           ] [ darkc0met       ] [ hiitsu          ] [ lmjabreu     ] [ Ralt            ] [ TheFuzzball    ] 
20:46 [ aaronmcadam     ] [ davidbanham     ] [ hij1nx          ] [ LordLobo     ] [ ramitos         ] [ thejefflarson  ] 
20:46 [ AaronMT         ] [ davidbowieslefte] [ hipertracker    ] [ Lorentz      ] [ Rantanen-       ] [ TheMoonMaster  ] 
20:46 [ abe             ] [ davidcoallier   ] [ hipsterslapfight] [ lpin         ] [ Raynos          ] [ TheNumb        ] 
20:46 [ aboudreault     ] [ davidsklar      ] [ hitsthings      ] [ lresende     ] [ rcapasso_       ] [ therealkoopa   ] 
20:46 [ abrkn           ] [ dawolf          ] [ hkri            ] [ lrvick       ] [ rcs             ] [ thomblake      ] 
20:46 [ acidjazz        ] [ dcamp           ] [ hlindset        ] [ lurksia      ] [ recurrence      ] [ thread         ] 
20:46 [ adamnbowen      ] [ dcelix          ] [ Hochmeister     ] [ M_F_B        ] [ redir           ] [ tilgovi        ] 
20:46 [ addisonj        ] [ dch             ] [ Hosh__          ] [ Mack         ] [ reid            ] [ Tim-_-         ] 
20:46 [ adrianlang1     ] [ dec             ] [ hossy           ] [ magn3ts      ] [ remysharp       ] [ tim_smart      ] 
20:46 [ AdrienBrault    ] [ dedis           ] [ href            ] [ majek        ] [ renan_saddam    ] [ timeturner     ] 
20:46 [ ag4ve           ] [ defunctzombie   ] [ hugorodr_       ] [ makkron      ] [ rendar          ] [ timkuijsten    ] 
20:46 [ Agent_Sebba     ] [ deizhu          ] [ i_m_ca          ] [ malcolmva    ] [ reprisal        ] [ timmywil       ] 
20:46 [ aheckmann       ] [ dekz_           ] [ iain_           ] [ malkomalko   ] [ retornam        ] [ Tivs___        ] 
20:46 [ Aikar           ] [ Demux           ] [ iaincarsberg    ] [ mandric      ] [ retrofox        ] [ tjfontaine     ] 
20:46 [ ajpiano         ] [ denysonique__   ] [ ianjm           ] [ ManneW       ] [ retrostlye|13   ] [ tjholowaychuk  ] 
20:46 [ aka             ] [ deoxxa          ] [ ianl`           ] [ mape         ] [ rgmarcha_       ] [ tklun          ] 
20:46 [ akshayms        ] [ Derander        ] [ idefine         ] [ marienz      ] [ rho             ] [ tlrobinson     ] 
20:46 [ alanmeira       ] [ derekpioneer    ] [ igl             ] [ mAritz       ] [ RichardBronosky_] [ tmiw           ] 
20:46 [ alexhanc_       ] [ dested          ] [ iksik2          ] [ marlun       ] [ richardshaw     ] [ tmpvar         ] 
20:46 [ AllStruck       ] [ devdazed        ] [ im0b            ] [ Martz        ] [ rideh           ] [ tokuhirom      ] 
20:46 [ alta            ] [ dguttman        ] [ imarcusthis     ] [ maru_cc___   ] [ rikurouvila     ] [ tomaw          ] 
20:46 [ Amfy            ] [ dhpe            ] [ inarru          ] [ masch        ] [ rking           ] [ tomb           ] 
20:46 [ andrehjr        ] [ digiwth         ] [ indexzero       ] [ matkl        ] [ RLa             ] [ TomRone        ] 
20:46 [ andrewaclt      ] [ Disil           ] [ infynyxx        ] [ matt_c       ] [ rmill           ] [ tomtomaso      ] 
20:46 [ AnonymousPrime  ] [ disnet          ] [ infynyxx_       ] [ mattgifford  ] [ robmozart       ] [ TooTallNate    ] 
20:46 [ AntelopeSalad_  ] [ djcoin          ] [ inimino         ] [ mbalho       ] [ rocsteady       ] [ toothrot       ] 
20:46 [ apa-            ] [ DjMadness       ] [ innociv_        ] [ mbrevoor_    ] [ rodasc          ] [ topaxi         ] 
20:46 [ appr            ] [ djoot           ] [ inolen          ] [ Mchl         ] [ roger_raymond   ] [ topek          ] 
20:46 [ aromasca        ] [ dk01            ] [ ins0mnia        ] [ mdevolvi1g   ] [ Rolken          ] [ topi`          ] 
20:46 [ arronhunt       ] [ dKc             ] [ Internet13      ] [ meanyface    ] [ romainhuet_     ] [ toppledwagon   ] 
20:46 [ asadpakistani   ] [ dlg             ] [ intripoon       ] [ med_         ] [ rphillips       ] [ torgeir        ] 
20:46 [ asadpakistani1  ] [ dmilith         ] [ irclogger_com   ] [ medice       ] [ rubicon         ] [ trodrigues     ] 
20:46 [ asherkin_       ] [ dnolen          ] [ ircretary       ] [ medikoo      ] [ rudiX           ] [ truedat101     ] 
20:46 [ aslant          ] [ doffm_          ] [ isaacbw         ] [ mekwall      ] [ rudolfrck       ] [ tsingi         ] 
20:46 [ asterick        ] [ dogmatic69      ] [ isaacs_         ] [ mephux       ] [ ruff            ] [ tuhoojabotti   ] 
20:46 [ astropirate     ] [ Doikor          ] [ isomorphic      ] [ MerlinDMC    ] [ rump            ] [ turbolent      ] 
20:46 [ AttackingHobo   ] [ doki_pen        ] [ ivan\           ] [ mertimor     ] [ runningskull    ] [ tutley         ] 
20:46 [ aut0mata        ] [ don_jones       ] [ ivan`           ] [ meshugga     ] [ RushPL_         ] [ Twelve-60      ] 
20:46 [ average_drifter ] [ donghee__       ] [ jackyyll        ] [ meshugga_    ] [ russell_h       ] [ txdv           ] 
20:46 [ AvianFlu        ] [ dook            ] [ jaequery_       ] [ meso_        ] [ RussellB28      ] [ Typo           ] 
20:46 [ avidal          ] [ Drager          ] [ jaket           ] [ metadaddy    ] [ russfrank       ] [ ultraviolent   ] 
20:46 [ AviMarcus       ] [ Draggor         ] [ jalcine         ] [ metellus     ] [ rvagg           ] [ umurgdk        ] 
20:46 [ avital          ] [ drey_           ] [ jamesd          ] [ mgc__        ] [ rwaldron        ] [ upgrayeddd     ] 
20:46 [ azend           ] [ drodger         ] [ jammsen         ] [ MI6          ] [ rworth          ] [ urlwolf        ] 
20:46 [ Azra-el         ] [ DrPizza         ] [ janmower        ] [ mickhansen   ] [ ryanrolds_w     ] [ V1             ] 
20:46 [ bacilla         ] [ drspin          ] [ jaredrhine_     ] [ mikaelb      ] [ s4muel          ] [ Valdez         ] 
20:46 [ BadOPCode       ] [ drudge          ] [ jareiko         ] [ mikegerw1tz  ] [ s5fs            ] [ Valid          ] 
20:46 [ bahaaldine      ] [ drug_motor      ] [ jareiko_        ] [ Mikeumus     ] [ saapaz          ] [ Validatorian   ] 
20:46 [ bakadesu        ] [ Druide_         ] [ jasonrm         ] [ mikey_p      ] [ salazr_         ] [ Venom_X        ] 
20:46 [ balgarath_      ] [ dscape          ] [ JasonSmith      ] [ mikl         ] [ salsamontes     ] [ vervain        ] 
20:46 [ balupton_       ] [ dshaw_          ] [ jayne           ] [ misterhat    ] [ Sam-T           ] [ VesQ           ] 
20:46 [ barce           ] [ dubban          ] [ jbpros          ] [ MitchW       ] [ samfalkner      ] [ victor2812     ] 
20:46 [ bartt           ] [ DukeofURL       ] [ jbpros_         ] [ mjr84        ] [ samstefan       ] [ vitsaus        ] 
20:46 [ basiliothecat   ] [ duncanbeevers   ] [ jcrew           ] [ mmalecki     ] [ SargoDarya      ] [ vladikoff      ] 
20:46 [ batmania_       ] [ dylang          ] [ jdeibele        ] [ mmalecki_    ] [ SasanRose       ] [ VultureZ       ] 
20:46 [ baudehlo1       ] [ echo            ] [ jden            ] [ mmiller_     ] [ satyr           ] [ vyvup          ] 
20:46 [ beasty_         ] [ ed209           ] [ Jee5us_w        ] [ mnaser       ] [ sawjig          ] [ Wa             ] 
20:46 [ beawesomeinstead] [ edr             ] [ jeedey_         ] [ moonlite     ] [ sawrubh         ] [ wadey          ] 
20:46 [ ben_alman       ] [ ehershey        ] [ jefferai        ] [ Morkel       ] [ sayd            ] [ wang           ] 
20:46 [ benatkin        ] [ EhevuTov        ] [ jemparing       ] [ Mortchek     ] [ sbeam           ] [ wang_          ] 
20:46 [ benhoman        ] [ Eiam            ] [ jergason        ] [ Moult        ] [ sbeam__         ] [ wao            ] 
20:46 [ bentruyman      ] [ einaros         ] [ jesusabdullah   ] [ mpajor_op5   ] [ sbook           ] [ warz           ] 
20:46 [ Benvie          ] [ ejholmes        ] [ jez0990         ] [ mrchrisadams ] [ schredder       ] [ wavded         ] 
20:46 [ beuk_           ] [ ejnahc          ] [ jgaui           ] [ mrkurt       ] [ scott_gonzalez  ] [ wdent_         ] 
20:46 [ bgnx            ] [ elijah-mbp      ] [ jgornick        ] [ MrMaksimize  ] [ scttnlsn        ] [ weie_          ] 
20:46 [ bigkevmcd       ] [ elliottcable    ] [ jheusala        ] [ mrmoneyc     ] [ sdboyer         ] [ wereHamster    ] 
20:46 [ Bilge           ] [ else-           ] [ jimbot          ] [ MrNibbles    ] [ sdouble         ] [ Wes-           ] 
20:46 [ billy           ] [ emilsedgh       ] [ jimt            ] [ mscdex       ] [ SebastianFlyte  ] [ whitman        ] 
20:46 [ bitZero__       ] [ eosphoros       ] [ JJMalina        ] [ munro        ] [ SecretAgent     ] [ whyhankee      ] 
20:46 [ blakmatrix      ] [ epa_            ] [ jkarsrud        ] [ mykul        ] [ Seich           ] [ willob         ] 
20:46 [ blazes816       ] [ Epelii          ] [ jkridner_       ] [ myndzi       ] [ Sembiance       ] [ willwhite      ] 
20:46 [ Blkt            ] [ EPIK            ] [ jlank           ] [ nail_        ] [ sente           ] [ Will|          ] 
20:46 [ blueadept       ] [ epiloque        ] [ jmanoto         ] [ nail__       ] [ serapath        ] [ wires          ] 
20:46 [ bnoordhuis      ] [ er1c_           ] [ jmaugue_        ] [ naomi        ] [ serby_          ] [ wizonesolutions] 
20:46 [ BombStrike      ] [ ericelliott     ] [ jmfcool         ] [ naquad       ] [ sgallagh        ] [ wo0kie         ] 
20:46 [ Bonuspunkt      ] [ erichynds       ] [ jmoney          ] [ Nasga        ] [ Shadda          ] [ WolfAlex       ] 
20:46 [ booo            ] [ Erriond__       ] [ JmZ             ] [ nathan7      ] [ SHAGGSTaRR      ] [ wolfeidau      ] 
20:46 [ bq              ] [ estebistec      ] [ jn              ] [ necco        ] [ shajith         ] [ wookiehangover ] 
20:46 [ bradgignac      ] [ esundahl        ] [ joeytwiddle     ] [ necolas      ] [ shanlar         ] [ woolite64      ] 
20:46 [ bradleymeck     ] [ etcetera        ] [ JohnMcLear2     ] [ neersighted  ] [ shanse          ] [ wycats         ] 
20:46 [ brainproxy      ] [ etcetera_       ] [ jol02           ] [ netiul       ] [ Shrink          ] [ Xano           ] 
20:46 [ brainss         ] [ euforic         ] [ jolo2           ] [ netj         ] [ siksia          ] [ xat-           ] 
20:46 [ breck_          ] [ eventualbuddha  ] [ jonno11         ] [ neurone-1337 ] [ simewn          ] [ xcat           ] 
20:46 [ bren2010        ] [ EvRide          ] [ JonnyFunFun     ] [ niallo       ] [ simius          ] [ xer0x          ] 
20:46 [ brianc          ] [ EvRide1         ] [ joschi          ] [ niallo_      ] [ simmelj         ] [ xonecas        ] 
20:46 [ briancray       ] [ exit2           ] [ Josh            ] [ nicesukhi_   ] [ simong          ] [ xonev          ] 
20:46 [ brianloveswords ] [ EyePulp         ] [ joshfinnie      ] [ nicholasf    ] [ sir_tyrion      ] [ xonev1         ] 
20:46 [ brooss          ] [ eykosioux       ] [ joshie          ] [ niclone      ] [ SirFunk         ] [ xorox90_       ] 
20:46 [ bsnote          ] [ Ezku            ] [ joshontheweb    ] [ niftylettuce_] [ sirkitree       ] [ xorspark       ] 
20:46 [ Bwild           ] [ Fabryz          ] [ joshthecoder    ] [ niggler      ] [ sj26            ] [ xp_prg2        ] 
20:46 [ bwinton         ] [ fastman         ] [ jpdery          ] [ nilc         ] [ skebcio_        ] [ xSmurf         ] 
20:46 [ cainus          ] [ fatninja        ] [ jrajav          ] [ NimeshNeema  ] [ slajax          ] [ yacks          ] 
20:46 [ callumacrae     ] [ faulkner        ] [ jslatts_        ] [ nitind       ] [ Slashbunny      ] [ yankhates      ] 
20:46 [ calvinfo        ] [ fcoury          ] [ jsonified       ] [ nitind_      ] [ slaskis         ] [ Yasumoto       ] 
20:46 [ CamonZ          ] [ fearphage       ] [ jtm             ] [ nlf          ] [ SlexAxton       ] [ yawnt          ] 
20:46 [ carlyle         ] [ filleokus       ] [ jtwalters_      ] [ nnisi        ] [ slickplaid      ] [ yewton         ] 
20:46 [ carolyns        ] [ FIQ             ] [ juliangruber    ] [ nodon        ] [ slifty          ] [ yongtin        ] 
20:46 [ cce             ] [ flagg0204       ] [ justicefries    ] [ Nom-         ] [ Slipo           ] [ yorick         ] 
20:46 [ cfq             ] [ flexd           ] [ jvolkman        ] [ nooga        ] [ slloyd          ] [ yorn           ] 
20:46 [ cha0s           ] [ Fli-c           ] [ jwulf_afk       ] [ nsolsen      ] [ slurp           ] [ Youdaman       ] 
20:46 [ chadskidmore    ] [ flyth           ] [ jxie            ] [ nuba         ] [ Snoopah         ] [ ypcs           ] 
20:46 [ chapel          ] [ fmeyer          ] [ jxson           ] [ Nuck         ] [ so              ] [ Yuffste__      ] 
20:46 [ charuru         ] [ forzan_         ] [ Jygga           ] [ Nykolla      ] [ socketwiz       ] [ Yuffster_fun   ] 
20:46 [ charuru_        ] [ framlin         ] [ jyp_cloud       ] [ nym          ] [ sohcahtoa       ] [ yzap           ] 
20:46 [ chayin_         ] [ francisl        ] [ jzacsh          ] [ odyniec      ] [ solidoodlesuppor] [ zackiv31       ] 
20:46 [ Cheery          ] [ frankdsm_       ] [ Kai_            ] [ ofan         ] [ solmsted        ] [ zaheera        ] 
20:46 [ chid            ] [ Franz__         ] [ Kakera          ] [ ohcibi       ] [ SomeoneWeird    ] [ zaheera_       ] 
20:46 [ chiel_          ] [ freeformz       ] [ kanzure         ] [ olegp        ] [ someprimetime   ] [ Zak            ] 
20:46 [ chilts          ] [ freewil         ] [ kaoD_           ] [ omni5cience  ] [ someprimetime_  ] [ zaki           ] 
20:46 [ chjj            ] [ FrenkyNet       ] [ karupanerura    ] [ onr          ] [ sorensen        ] [ Zauberfisch    ] 
20:46 [ chovy           ] [ fritzy          ] [ kborchers       ] [ onre         ] [ spleeze         ] [ zcourts        ] 
20:46 [ chrisbuchholz   ] [ frogstarr78     ] [ kcm1700         ] [ ootje        ] [ springmeyer     ] [ zedas          ] 
20:46 [ chrisdickinson  ] [ Fudge|          ] [ keeto           ] [ optixx       ] [ SpX             ] [ Zelest         ] 
20:46 [ chrisjaure      ] [ FunnyLookinHat  ] [ kenperkins      ] [ Or1on        ] [ sriley          ] [ zemm           ] 
20:46 [ Christian87     ] [ Fuu``           ] [ Kester          ] [ Orbitrix     ] [ stalled         ] [ zenazn         ] 
20:46 [ chrxn           ] [ fwg             ] [ kevinykchan     ] [ orospakr`    ] [ stbuehler       ] [ zeroz          ] 
20:46 [ chunhao__       ] [ g_bleezy_       ] [ khmer_          ] [ othiym23     ] [ stephank        ] [ zeuslalkaka    ] 
20:46 [ cjheath         ] [ gabriel         ] [ kholladay       ] [ Outsider     ] [ Steve           ] [ zezikaro       ] 
20:46 [ cjm             ] [ Gabriel403      ] [ kill-9_         ] [ owen1        ] [ Steve|4D        ] [ zhware         ] 
20:46 [ cjm_            ] [ Gabriel413      ] [ killtheliterate ] [ Pagan|Work   ] [ stoke           ] [ zk             ] 
20:46 [ ClaudioAlbertin ] [ garann          ] [ kimico          ] [ parasight    ] [ stonebranch     ] [ zodiak         ] 
20:46 [ clever          ] [ garciawebdev    ] [ Kingdutch       ] [ PaulCapestany] [ stonecobra      ] [ Zol            ] 
20:46 [ Clex            ] [ geb             ] [ KiNgMaR         ] [ pavelz_      ] [ stride          ] [ Zombywuf       ] 
20:46 [ cly             ] [ generalissimo   ] [ klobucar        ] [ pc1oad1etter ] [ strmpnk         ] [ zomg           ] 
20:46 [ coasterD        ] [ gf3             ] [ Know1edg1       ] [ pct          ] [ stutter         ] [ zoned          ] 
20:46 [ codelahoma      ] [ ghoti           ] [ Know1edge       ] [ percival_    ] [ stylus          ] [ zorzar         ] 
20:46 [ codepal         ] [ gildean         ] [ knyon           ] [ Pete4        ] [ styol           ] [ zygote___      ] 
20:46 [ codyaray        ] [ gildo           ] [ kppullin        ] [ peteschaffner] [ substack        ] [ zykes-         ] 
20:46 [ codycraven      ] [ gim50           ] [ kraft           ] [ petschm      ] [ sugyan          ] [ zz_silvers     ] 
20:46 [ Codynyx         ] [ gkatsev         ] [ kraft_          ] [ philips_     ] [ superjoe        ] 
20:46 [ CoffaBun33h     ] [ gluxon          ] [ krishna         ] [ PhilK        ] [ supersym        ] 
20:46 [ coffeecup       ] [ gnarf           ] [ kth5_           ] [ phuu         ] [ sveisvei        ] 
20:46 [ confoocious     ] [ gnoirzox        ] [ ktkNA           ] [ PhysX        ] [ Sven_vB         ] 
20:46 -!- Irssi: #Node.js: Total of 974 nicks [5 ops, 0 halfops, 0 voices, 969 normal]
20:46 !wolfe.freenode.net [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
20:46 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
20:46 -!- Home page for #node.js: http://nodejs.org/
20:46 -!- Irssi: Join to #Node.js was synced in 23 secs
20:46 < tim_smart> substack: Nevermind, I found the answer to that.
20:48 < sethetter> Is there any reason `npm install` wouldn't be installing the dependencies listed in my package.json?
20:49 -!- mode/#Node.js [+o isaacs_] by ChanServ
20:50 < rump> ruff help
20:56 < nathan7> sethetter: that'd be a bug
20:56 < nathan7> sethetter: Can you further detail that?
21:00 < ruff> rump: http://www.reactionface.info/sites/default/files/images/1310576301803.jpg
21:08 < drx_> hello
21:09 < drx_> Anyone know why console.log() works when app is started using node command , but doesn't when app started with Upstart ad daemon   ( even if tail-f  node.log )
21:10 < chilts> drx_: I suspect your logs will be going to a different place
21:10 < chilts> I'm not sure where upstart puts them by default
21:10 < chilts> might be worth figuring that out
21:10 < drx_> it appears most console.log() go to node.log,  its just the exceptions and app start problems that dont seem to go in that file, everything else does.
21:10 < chilts> (ie. it's not the fact that console.log() doesn't work, it's the fact that they might be going somewhere else)
21:11 < chilts> in which case, check where STDERR is going
21:11 < drx_> console.log  goes in to /var/log/node.log        but Exceptions seem to vanish.     @chilts thanks, im checking STDERR now!  :)
21:11 < chilts> cool
21:13  * st_luke is free
21:13 < isaacbw> ping
21:13 < isaacbw> ping
21:13 < isaacbw> ping
21:14 < chilts> I guess that's your IRC client pinging?
21:14 < yawnt> pong?
21:14 < isaacbw> oh, I couldn't see it. I'm playing around with irc stuff and node
21:15 < chilts> sweet
21:16 < isaacbw> blubber
21:16  * CoverSlide purchases all the st_luke s
21:16 < nathan7> st_luke: FREE? I'LL HAVE TWO!
21:16 < sayd> not quite a node question, but whats a good strategy to group based on a sub property. say i have an array of items and i want to pull out 3 unique (based on items[0].group.id) and i wanted to access via items.groupid[0]
21:17 < CoverSlide> http://www.youtube.com/watch?v=H8j1CgePtsg
21:17 < sayd> where 0 would just be iterating 
21:17 < CoverSlide> yay shaky cam on youtube
21:17 < isaacbw> yay
21:17 < TehShrike|Work> How did I ever live without npm link?
21:35 < Daegalus> the topic should read "No Other Developers Exist. just saying" or something like that
21:36 < FIQ> let me guess... mass-highlight?
21:38 < gildean> FIQ: yep, someone apparently tried their bot on a public channel
21:38 < FIQ> ok
21:48 < eskaki> hey, I mirrored npmjs ok, seems to work but getting error code 500 
21:49 < eskaki> for example
21:49 < eskaki> npm --registry http://root:12345@localhost:5984/registry/_design/app/_rewrite install express
21:49 < eskaki> npm http GET http://root:12345@localhost:5984/registry/_design/app/_rewrite/express
21:49 < eskaki> npm http 500 http://root:12345@localhost:5984/registry/_design/app/_rewrite/express
21:49 < eskaki> npm http GET http://root:12345@localhost:5984/registry/_design/app/_rewrite/express
21:49 < eskaki> npm http 500 http://root:12345@localhost:5984/registry/_design/app/_rewrite/express
21:50 < eskaki> but is installed at the end (slowly than live npmjs)
21:58 < tim_smart> Anyone here used persistence.js much?
21:58 < tim_smart> Want to work out if it is possible to have more than one set of models + connection in one process.
22:10 < derekchiang> aa
22:37 < cliffano> 	http://nodejs.org/api/dgram.html#dgram_udp_datagram_sockets has example code: var x = dgram.createSocket('udp4'); x.send(...); x.on( ...); , but if i check require('dgram').Socket.prototype , I could find send() method, but there is no on() method. where does on() come from?
22:46 < atula> I
22:46 < atula> I'm trying to wrap my head around session in node.js using express and connect-mongo.
22:48 < atula> what is the concept here? on fresh connection I create a session (socket.io or express doing this?) on connecting again the session is provided for me?
22:48 < atula> I think this should be something quite simple but I'm not getting it.
22:48 < barce_> atula: http://stackoverflow.com/questions/6819911/nodejs-expressjs-session-handling-with-mongodb-mongoose
22:49 < atula> I got that. However, how do I use it?
22:49 < atula> I set it up… it's working.
22:49 < atula> now how do I access the session or setting new session values?
22:50 < atula> can I access the session outside of socketio or express request scope? 
22:50 < atula> I have a rabbitmq consumer scope.. how do I access session there?
22:50 < ryanrolds_w> atula, The session middleware makes a sessionId. That session id is used as a key in mongo (or whatever you're using to back it). You just need to "use" the session middleware and provide with an object that has a valid express sessionstore interface.
22:50 < ryanrolds_w> atula, req.session
22:50 < atula> ryanrolds_w, I don't think I get access to request object in socket scope
22:51 < atula> or the rabbitmq connection scope either 
22:51 < tjholowaychuk> atula just grab it from mongo or whatever store you use
22:51 < tjholowaychuk> it doesn't matter if you use the Session constructor for that
22:51 < atula> ryanrolds_w, perhaps I can send the session id to the client and then pass it back on emit?
22:51 < tjholowaychuk> why not just stuff things in the user's doc and grab that doc
22:52 < ryanrolds_w> ^
22:52 < atula> so stuff the session id into the body…. grab it and send it with each request?
22:52 < ryanrolds_w> If you're using socket io, you will have a client id.
22:52 < atula> wait sec. what if I want to add to the session?
22:53 < ryanrolds_w> I'm really confused. It sounds like you're asking a few different questions.
22:53 < atula> ryanrolds_w, sorry. here's what I am trying to do
22:53 < ryanrolds_w> Ok, feels like an XY problem.
22:53 < ryanrolds_w> What is the original problem?
22:54 < atula> ryanrolds_w, sorry for the confusion
22:54 < ryanrolds_w> What are you trying to do? Forgot you best guess about how to do it.
22:54 < CoverSlide> the problem is i am a zombie
22:54 < ryanrolds_w> *your best
22:55 < atula> here's what I am doing: I have connection to amqp/rabbitmq connection that I emit messages to the front-end
22:55 < atula> I have a pause button. if I press pause, the rabbitmq scope should know to stop emitting to the client that sent the pause event
22:56 < atula> I could use room concept
22:56 < ryanrolds_w> Where is the pause event originating? Web client w/ Socket.io?
22:56 < atula> web client ryanrolds_w 
22:58 < atula> right now I have a variable. when I press pause all connected clients are pause which is stupid hehe
22:58 < ryanrolds_w> So: client < -- something --> front-end <--- message queue --> something else?
22:58 < atula> client/browser --> node.js server <---> rabbitmq
22:59 < atula> front-end===client/browser
22:59 < atula> sorry for the confusion again
22:59 < atula> one step at a time then.
22:59 < atula> 1) I need to access session in both my socket.io scope and express/app scope
23:00 < atula> does socket.io have an option to emit to everyone except for a specific group of people?
23:00 < ryanrolds_w> Ok, if you're using vanilla http, not socket.io or web sockets, you can use expresses session middleware to store id you're clients. You could also generate an id, like a UUID, and tack that in to the session.
23:01 < atula> I will have to work more on this later.
23:01 < ryanrolds_w> Of you're using socket.io or web sockets, the client should be assigned an id as well. 
23:02 < atula> I think I can solve the first problem by having a "pause" room and a general room
23:02 < atula> when user hit pause, I could make the user/client leave the general room and join the pause room
23:02 < atula> that way I can just emit to the general room
23:02 < onr> try SockJS
23:03 < ryanrolds_w> Oh, ok I assume all clients get every message from the mq if they aren't paused?
23:03 < atula> ryanrolds_w, indeed
23:03 < atula> I just don't want to send messages to client needlessly
23:03 < atula> that's the simple problem I'm trying to solve
23:04 < atula> once I can do that, then I'll deal with filtering the messages
23:04 < ryanrolds_w> Ok, all you need to do is maintain a hash or list of connected clients and any message coming in on the mq gets sent to each connected client.
23:04 < ryanrolds_w> Er, really a set, but that doesn't matter as long as you have some way of iterating through them.
23:05 < atula> ryanrolds_w, I would need to iterate to the set and emit instead of broadcast
23:05 < atula> is that efficient?
23:05 < ryanrolds_w> Not really, but how else are you going to do it without having the clients connect directly to the mq?
23:08 < ryanrolds_w> You don't really need to worry about the clients talking to the mq. Let the node instance listen to both room and have it keep track of which client is in which room.
23:09 < ryanrolds_w> *both rooms
23:10 < cellvia> what are some comparable ways to deal with modularizing assets etc   as "component"    i read substack say that many people just simply use package.json to include client side packages but i dont understand how that is done.. .  anyone can help me understand?
23:11 < cellvia> do you ahve to use browserify to do that
23:12 < cellvia> client side framework i'll be working with most likely backbone+marionette
23:12 < medikoo> celivia: you can bundle them -> https://github.com/medikoo/modules-webmake
23:12 < cellvia> oh huh medikoo is this similar to browserify?
23:13 < medikoo> celivia: it's a bit different, browserify is about using specific Node.js stuff in a browser, webmake is about using CJS style modules in a browser
23:14 < medikoo> celivia: so if you want to use some Node.js modules like path, fs, even http, then browserify might be better.. but if you just want to use same modules style as in node for client side applications then Webmake will be cleaner
23:15 < cellvia> very cool
23:15 < cellvia> i dont understand how you could use fs in the browser
23:15 < cellvia> do browsers allow js access to the filesystem
23:16 < substack> medikoo: you forgot streams
23:16 < medikoo> celivia: html5 have some apis.. but I guess browserify allows that by providing live connection with a server and just passing work from client to server, is that right substack?
23:16 < cellvia> werd up substack   so browserify allows streams on the browser same as node?
23:17 < substack> medikoo: false
23:17 < substack> there's no server<->client interaction
23:17 < substack> cellvia: it gives you the node stream module when you require('stream')
23:17 < medikoo> so it's polyfil on top of some html5 api.. right?
23:17 < substack> so you can use npm modules that expose streaming apis
23:17 < substack> which is really nice
23:17 < substack> like shoe wraps sockjs in a stream
23:17 < substack> which you can plug into a module like dnode or scuttlebutt
23:18 < substack> which both just expose streaming apis so you can use them in browser code
23:18 < superjoe> is there a module which implements a cache with a decent algorithm and lets you limit memory usage?
23:18 < substack> medikoo: not sure what you're talking about
23:18 < cellvia> sweet, ive been working endlessly on streams for past couple months and loving it
23:18 < superjoe> so it would use heuristics to drop enough cache entries to keep it below a certain memory threshold
23:18 < cellvia> substack:  so back to my original question of using package.json instead of "component"s
23:18 < medikoo> substack, I thought you know as you just said I'm wrong :)
23:19 < cellvia> do you have a good example of that  off top of your head?
23:19 < medikoo> substack: it was about how fs is implemented in a browser.. is it polyfill on top of some html5 api
23:19 < substack> medikoo: fs isn't implemented, it just returns {}
23:19 < substack> so that when a module does require('fs') you still might be able to use the pure algorithmic parts
23:19 < medikoo> ok, that's clear then, so it's just there not to crash
23:20 < substack> browserify is about using npm modules in the browser
23:21 < substack> because shipping 2 versions of a module really sucks and is stupid
23:21 < cellvia> substack:  so to implement client side intended packages, i would broserify them from npm,  does this allow for static assets like image and css
23:21 < substack> just write your code the node way and use a tool to make it work in browsers
23:21 < substack> cellvia: not natively
23:21 < substack> do you really need to put static assets in your packages?
23:21 < cellvia> i ahvent decided yet :)  im considering my options
23:22 < medikoo> celivia: as substack says.. forget about components.. npm is the one, and thanks to that you can use same modules in both server and client without adding any boilerplate, or writing two versions
23:22 < tjholowaychuk> real modularity ftw
23:22 < medikoo> celivia: I'm doing heavy applications that way with large span of same modules across both sides
23:22 < cellvia> yeah see i like the idea of keepign it totally modular all dependencies
23:23 < cellvia> the github setup of component does seem a little funky
23:23 < cellvia> but i like the idea
23:23 < tjholowaychuk> cellvia it has no registry, major win
23:24 < tjholowaychuk> not sure I'd call that odd but different sure
23:24 < substack> tjholowaychuk: how does component handle versions?
23:24 < medikoo> celivia: in npm you can also define dependences via github username/repo it was added in some of the recent versions
23:24 < substack> I for sure as fuck don't want to peg my modules against floating master
23:24 < tjholowaychuk> you can opt-in to warnings or it just leaves the dups
23:25 < substack> but I don't want to always peg against a static commit either
23:25 < cellvia> yeah i like the versioning in npm
23:25 < medikoo> celivia: still I believe package manager should not depend on other not related system.. at one point one of them may change or die, and then everything is doomed ;-)
23:25 < tjholowaychuk> npm doesn't even implement ~
23:25 < tjholowaychuk> correctly
23:25 < tjholowaychuk> last i checked at least
23:25 < tjholowaychuk> but anyway
23:25 < cellvia> medikoo i agree
23:25 < tjholowaychuk>  </flaming>
23:26 < cellvia> wuht... not flaming im seriously considering using component and the info helps
23:26 < medikoo> tjholowaychuk: what's wrong with npm's ~ ?
23:26 < cellvia> ive basically come down to either using component or substack method but i need more clarity on what he proposes
23:26 < tjholowaychuk> cellvia just ignore FUD and evaluate
23:26 < cellvia> so i can evaluate
23:27 < cellvia> :)
23:27 < substack> the way I do things is I put the static assets in the app itself and use modules published to npm
23:27 < tjholowaychuk> medikoo: it compares the wrong segment of the version
23:27 < tjholowaychuk> medikoo: at least it did a week or two ago
23:28 <@Nexxy> tjholowaychuk, hater ;0
23:28 < drudge> tjholowaychuk: you can lock in versions in your component.json right? what keeps the history?
23:28 < cellvia> substack any kind of example ?
23:28 < tjholowaychuk> drudge yeah of course
23:28 < medikoo> tjholowaychuk: can you show some example? it's not clear to me
23:28 < s5fs> Nexxy: howdy
23:28 <@Nexxy> s5fs, hey!
23:28 < tjholowaychuk> I'm just using * right now since things are in flux
23:29 < Sly> Nexxy: <3
23:29 <@Nexxy> Sly, <3
23:29 < substack> tjholowaychuk: but so anyways I'll start poking at component more since I want people to be able to write testling-ci tests for component packages
23:29 < tjholowaychuk> cool
23:29 < substack> seems like it won't be too difficult since it's simple enough to node's module system
23:29 < substack> *similar
23:30 < substack> but I'm not really sure how testing against static assets in a mock page should work yet
23:31 < tjholowaychuk> medikoo: ~1.2.3 := >=1.2.3 <1.3.0
23:31 < tjholowaychuk> in the node-semver thingy
23:32 < substack> tjholowaychuk: also there seems to be a weird issue when outputting tap in browsers
23:32 < substack> in mocha
23:32 < tjholowaychuk> oh really? hmm
23:32 < substack> an off by 1 error on the 'failing' message at the end
23:32 < medikoo> tjholowaychuk: that's the logic I expect, is that wrong? or is it not working that way in npm?
23:32 < tjholowaychuk> medikoo no that's wrong
23:32 < tjholowaychuk> it should compare major
23:32 < substack> click one of the passing browser versions to see the output http://ci.testling.com/substack/mocha-testling-ci-example
23:33 < substack> '# tests 2\n# pass 1\n# fail 1\n'
23:33 < substack> even though there was only 1 test
23:33 < substack> and it passed
23:33 < tjholowaychuk> haha shit ill check that pull-request again
23:33 < substack> but the # parts are ignored by TAP so the test still passes properly
23:33 < medikoo> tjholowaychuk: ah I see…this is right: ~1.2 := >=1.2.3 <1.3.0
23:34 < tjholowaychuk> he said the comments were necessary
23:34 < tjholowaychuk> for testling ci
23:34 < substack> merely helpful
23:34 < substack> tap consumers ignore everything starting with #
23:34 < tjholowaychuk> yeah I figured
23:34 < tjholowaychuk> it seemed strange
23:34 < tjholowaychuk> since you already have the total
23:34 < substack> they just look for "1..N", "ok", and "not ok"
23:34 < tjholowaychuk> i'll revert
23:35 < tjholowaychuk> https://github.com/visionmedia/mocha/commit/61cec64680727d4e0808311d4e59263a83196aab
23:35 < substack> tjholowaychuk: hah failures starts at 1
23:35 < substack> that's probably it
23:35 < substack> just change it to 0
23:36 < medikoo> tjholowaychuk: ok I get it, anyway just writing ~1.2.3 I guess doesn't make much sense.. as I guess there's no server support for versions like 1.2.3.4 
23:36 < tjholowaychuk> medikoo lots of the comparisons dont make sense in practice
23:36 < tjholowaychuk> IMO
23:36 < medikoo> tjholowaychuk: but I agree it's a bug, corner case, but should be fixed
23:44 < cellvia> substack i'd still really love to hear a little more about your approach to dealing with assets in a consistent and modular way,  i have plenty to read and watch w/ components and its compelling -- main thing holding me back is just trying to keep things as simple and streamlined as possible all the way around
23:45 < tjholowaychuk> cellvia one thing to keep in mind, that we found at least when we were using npm for client-stuff (not sure how browserify handles this), but say you have "enumerable" which you happen to be using on the server, it then automatically becomes part of the client build
23:46 < cliffano> anyone know the reason why stream's pause() is only advisory?
23:46 < tjholowaychuk> unless it's defined as a separate package or you have some opt-out mechanism
23:46 < cellvia> ah so you'd have to manually exclude the packages you didnt want?
23:46 < tjholowaychuk> i dont know what browserify does
23:46 < tjholowaychuk> but that's what we ran into
23:46 < tjholowaychuk> with our npm thing
23:48 < substack> tjholowaychuk: it only gets inlined if the dependency graph for the browser entry point includes it
23:48 < substack> and there are ways to exclude certain modules
23:48 < tjholowaychuk> oh right because you do the require() parsing stuff?
23:48 < tjholowaychuk> forgot about that
23:48 < substack> that problem is going to get much nicer with defunctzombie's browser field work
23:48 < tjholowaychuk> I just ended up adding the silly .component namespace thing but then we had a few completely unrelated npm modules
23:48 < tjholowaychuk> using those on the server end
23:49 < substack> really early versions of browserify just included everything in the directory recursively
23:49 < tjholowaychuk> mucking with our deps
23:49 < substack> which ended up with a ton of extraneous noise
23:50 < defunctzombie> tjholowaychuk: substack: for opt out stuff, I use a concept of "externals" with script
23:51 < tjholowaychuk> i think im going to just use npm's GH style thing from now on haha
23:51 < sayd> can i chown and chgrp at the same time?
23:51 < tjholowaychuk> all the names are taken
23:51 < defunctzombie> anytime you bundle something you can specify other bundles
23:51 < defunctzombie> if those bundles contain the file, then it won't be brought into the new bundle
23:51 < defunctzombie> works very well for common stuff like jquery, engine.io, etc
23:52 < defunctzombie> also, by parsing the requires, you don't have to duplicate the *.js file list and accidentally forget one
23:52 < substack> tjholowaychuk: install wordnet
23:52 < substack> it has a synonym function
23:52 < defunctzombie> the tool can detect all sorts of crazy things like that
23:52 < substack> that's what I use
23:52 < substack> wordnet synonyms + grep /usr/share/dict/words
23:52 < substack> infinite supply of module names
23:52 < cellvia> nice
23:52 < tjholowaychuk> defunctzombie in our case that's what makes installations so fast (explicit listings), plus if you have to glob
23:52 < tjholowaychuk> you probably have way too much shit
23:52 < cellvia> +1 for use of wordnet practicalyl
23:53 < substack> cellvia: here's the scripts I use https://github.com/substack/wordpack
23:53 < defunctzombie> tjholowaychuk: that is my point, no globbing is needed
23:53 < defunctzombie> the requires already tell you what deps you need
23:54 < tjholowaychuk> right
23:54 < tjholowaychuk> kinda hacky
23:54 < tjholowaychuk> but eyah
23:54 < defunctzombie> (this is not related to installation)
23:54 < tjholowaychuk> that's fine
23:54 < defunctzombie> this is related to packaging
23:54 < defunctzombie> I don't like to conflate the two really
23:54 < defunctzombie> I see npm as just a fancy download tool
23:54 < defunctzombie> and not my bundler or packager
23:54 < defunctzombie> node doesn't consult npm when it runs
23:54 < defunctzombie> server side, node is the packager
23:55 < defunctzombie> for browser stuff, I run another packager
23:55 < defunctzombie> but all the same package.json metadata is used
23:55 < defunctzombie> regardless of how it got there
23:55 < defunctzombie> manual clone, submodule, etc etc etc
23:56 < defunctzombie> tjholowaychuk: for my script stuff, right now I used this (https://github.com/shtylman/node-enchilada)
23:56 < defunctzombie> it doesn't do css or html templates
23:56 < defunctzombie> but something that reads package.json data for that would be reasonable and can easily live alongside regular require stuff
23:57 < defunctzombie> (at least that is the mental picture I have)
23:57 < defunctzombie> oh yea.. I was gonna tell you, if you parse the requires (in component or whatnot) you can do fancy things to make the client side require code really really small
23:57 < defunctzombie> because you can normalize all the paths server side
23:57 < tjholowaychuk> gzip
23:58 < defunctzombie> so you don't need path resolution etc
23:58 < defunctzombie> even before gzip, it just makes the code easier to grok
23:58 < tjholowaychuk> we dont have a publish step
23:58 < tjholowaychuk> so there's no time to really preprocess
23:58 < tjholowaychuk> like that
23:58 < defunctzombie> ?
23:58 < defunctzombie> the build step
23:58 < tjholowaychuk> no $ npm public etc
23:58 < defunctzombie> none of this is during publish
23:58 < defunctzombie> forget about npm
23:58 < defunctzombie> none of this uses npm
23:59 < tjholowaychuk> oh sorry haha misread, yeah sure, i mean it's not a big deal though
23:59 < tjholowaychuk> at all really
23:59 < defunctzombie> npm is just "curl"
23:59 < tjholowaychuk> no one has been like wow require() sure is confusing
23:59 < defunctzombie> yea
23:59 < defunctzombie> just saying there are interesting tricks
23:59 < defunctzombie> I agree
23:59 < defunctzombie> the added code is a non issue
23:59 < eskaki> hey, I'm using my own npmjs mirror on local network, is working fine and fast for some packages , but other like express are looking for http://registry.npmjs.org/express/-/express-3.0.4.tgz  how can I force those packages look into my mirror?
--- Log closed Fri Dec 14 00:00:06 2012
