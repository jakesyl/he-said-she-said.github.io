--- Log opened Sat Sep 22 00:00:59 2012
00:23 < xandy> what's the best way to redirect a module's logging output(eg from console.log) wiithout changing the module or directly overriding console.log?
00:28 < Hello71> There is no way to override a function call without overriding the function or editing the source. (???)
00:29 < xandy> my thought was like providing another context/global object for the module
00:30 < EhevuTov> .pipe(<somestream>) if you can
00:48 < mridgway> hey guys, we're trying to use Express 3 at my company, but there is a question about the "methods" (https://npmjs.org/package/methods) npm dependency, what the license is, and where the source is. I can't seem to find it on TJ's github page
00:54 < badem4o> Any feedback on Node.js in Action http://www.manning.com/cantelon/   
00:56 < badem4o> I'm want to learn more about node and I've read all the resources that I could find on the web but I still think I need more. Any suggestions?
00:56 < badem4o> What are your favorite resources?
00:59 < CIA-118> node: Bryan Cantrill master * r7bd84de / deps/v8/src/platform-posix.cc : v8: loosen artificial mmap constraint - http://git.io/KtQ4gw
01:08 < TheJesus> badem4o: you've read every resource you can find on the web about node.js ? 
01:09 < TheJesus> badem4o: http://nodejs.org/api/all.html, http://stackoverflow.com/questions/tagged/node.js?sort=votes
01:10 < badem4o> :) I'm pretty sure there is more 
01:10 < badem4o> hahha
01:11 < badem4o> thanks I'll check this out 
01:11 < TheJesus> more than what? I doubt anyone can consume the info on the web about node as fast as it's being generated
01:15 < badem4o> I agree. Do you have any other suggestions.
01:15 < TheJesus> spend a few days on those
01:16 < TheJesus> https://groups.google.com/forum/?fromgroups#!forum/nodejs
01:16 < badem4o> :-D thanks for the advise. I already spent 2 weeks on them but I guess I'll give it a few more.
01:17 < TheJesus> oh well
01:19 < TheJesus> https://twitter.com/izs, http://nodeup.com/, 
01:20 < TheJesus> http://howtonode.org/
01:20 < TheJesus> I'll stop
01:21 < badem4o> Thank you!
01:22 < TheJesus> np!
01:22 < TheJesus> hey what are the best you've seen? 
01:22 < TheJesus> trade ya for the links I gave
01:23 < badem4o> the api docs
01:23 < badem4o> http://nodemanual.org/latest/
01:25 < badem4o> + some of the ones you mentioned
01:48 < CIA-118> node: Nathan Rajlich fix/2746 * r4f38a86 / (lib/repl.js test/simple/test-repl.js): repl: make invalid RegExps throw in the REPL - http://git.io/m6WVgQ
01:51 < CIA-118> libuv: Bert Belder v0.8 * r39ca621 / src/win/core.c : windows: don't blow up when an invalid FD is used - http://git.io/DHDkAw
01:52 < CIA-118> node: Bryan Cantrill v0.8 * r4165f73 / deps/v8/src/platform-posix.cc : v8: loosen artificial mmap constraint - http://git.io/eqi54Q
01:53 < garrettwilkin> i have this site that's collecting details on events as users interact with a visualization:  http://hackerclub.jit.su/force.html
01:54 < garrettwilkin> I'm storing all this in a database, with the idea of replaying it. my question is, what's the best practice for this?
01:54 < garrettwilkin> My app also has an HTTP API
01:54 < CIA-118> node: Bert Belder v0.8 * rf536eb1 / (8 files in 4 dirs): uv: upgrade to 39ca621 - http://git.io/i08SNA
01:54 < garrettwilkin> so i could pull these events out with an API call
01:55 < garrettwilkin> butâ€¦ can i do that from the client?  
01:55 < CIA-118> node: Ben Noordhuis master * r17ef062 / src/handle_wrap.cc : handle_wrap: don't abort if wrap == NULL (+7 more commits...) - http://git.io/GlqvIw
01:56 < garrettwilkin> because probably the most straight forward thing to do would be 1) when a user loads the site, query the DB  2) when the result comes back, emit a bunch of events on an interval via socket.io 3) the client displays those events
01:58 < garrettwilkin> so everyone is playing with the site.  awesome :)
02:01 < joaojeronimo> anybody else using node_redis and having problems with hmset  ?
02:50 < CIA-118> node: Nathan Rajlich v0.8 * r4a26707 / (lib/repl.js test/simple/test-repl.js): repl: make invalid RegExps throw in the REPL - http://git.io/ic5z-w
03:23 < Franz__> so
03:24 < Franz__> whats the better method for..
03:24 < Franz__> for example
03:24 < Franz__> im using cookies for auth the users in my system
03:25 < Franz__> and node-mysql for db
03:25 < AAA_awright> Franz__: What's better for what, exactly
03:25 < Franz__> ok?
03:25 < AAA_awright> ... That's a question
03:25 < Franz__> then the system connect to mysql for select, update the data in mysql
03:25 < AAA_awright> What are you asking is better than what?
03:25 < Franz__> but i want save some data in a temp
03:25 < Franz__> in a cloud i dont know
03:26 < Franz__> for catch in db only the first time then save in a cloud
03:26 < Franz__> and use the data until lost connect with the user
03:28 < Franz__> do you recommend some module?
03:28 < Franz__> not save in client-side
03:38 < AAA_awright> Franz__: What are you trying to do? "I don't know" doesn't help us
03:39 < Franz__> AAA_awright so, each second the user walk and change de coordenates
03:39 < Franz__> 1,2  to 2,2 to 3,2, the system update in a mysql db, sure?
03:39 < AAA_awright> No, what are YOU DOING
03:40 < Franz__> AAA_awright simple
03:40 < AAA_awright> >_<
03:41 < Franz__> each second my script send to db the NEW location
03:41 < Franz__> update a table in mysql
03:41 < Franz__> in 10 seconds 10 updates
03:41 < Franz__> 10 selects and 10 updates
03:41 < Franz__> and i dont making this form
03:41 < SomeoneWeird> wat
03:42 < Franz__> many querys to db in a little time 
03:42 < AAA_awright> You don't _what_ making this form?
03:42 < plato> communicate
03:42 < Franz__> so i have a game
03:42 < Franz__> rpg game like as browserquest
03:42 < AAA_awright> Fill in the blank.... "I don't ________ making this form"
03:42 < Franz__> when the user walk in the map, update in a database
03:43 < Franz__> the position of the player
03:43 < Franz__> do you understand?
03:43 < SomeoneWeird> you should probably go with a nosql db for a game
03:43 < SomeoneWeird> even just for locations
03:43 < Franz__> yes
03:43 < AAA_awright> Nosql isn't a database, SomeoneWeird
03:43 < SomeoneWeird> yeahyeah
03:43 < SomeoneWeird> still
03:43 < Franz__> with mysql
03:43 < Franz__> node-mysql
03:43 < Franz__> i never sair nosql
03:43 < SomeoneWeird> mysql isnt nosql
03:43 < AAA_awright> Franz__: We never said you did
03:44 < Franz__> then i want change this method
03:44 < AAA_awright> Franz__: So you just need to update a value in a database?
03:44 < Franz__> because send many querys to db do you understand?
03:44 < Franz__> AAA_awright i made this
03:44 < SomeoneWeird> which is why you shouldn't use a db
03:44 < SomeoneWeird> use redis or something, it will be WAY faster
03:44 < AAA_awright> I don't think speed is the issue
03:45 < Franz__> sure
03:45 < SomeoneWeird> sure, but for a game it all counts
03:45 < Franz__> but redis
03:45 < Franz__> save something in client-side?
03:45 < AAA_awright> And anyways, MySQL won't lose your data
03:45 < AAA_awright> But /can/ redis do that?
03:45 < SomeoneWeird> can redis do what?
03:45 < AAA_awright> That's your job to handle
03:45 < SomeoneWeird> oh yeah
03:45 < SomeoneWeird> oh, yeah*
03:46 < Franz__> i dont want save in client-side
03:46 < Franz__> for security
03:46 < AAA_awright> Of course
03:46 < AAA_awright> You have to communicate with the server somehow.
03:46 < SomeoneWeird> how are you doing that?
03:46 < gabrieluk> redis is for real time data, right?
03:46 < SomeoneWeird> yes gabrieluk 
03:46 < Franz__> can i use redis 
03:46 < Franz__> is that right?
03:46 < AAA_awright> It's more fancy than a key-value store, less fancy than a tuple store
03:47 < Franz__> but its security?
03:47 < Franz__> save something in client side with redis?
03:47 < SomeoneWeird> redis is a server database
03:47 < SomeoneWeird> like mysql
03:47 < AAA_awright> Franz__: The databases are all server side, you have to communicate with the HTTP server to do all this.
03:47 < AAA_awright> Franz__: That's your job to handle, not the database.
03:47 < SomeoneWeird> s/http//
03:47 < Franz__> ah ok 
03:47 < Franz__> i was thinking redis is similar to a cookie 
03:48 < AAA_awright> You should probably read up a bit more to understand this, before attempting to run a marathon, this sounds like a big project.
03:48 < Franz__> AAA_awright my project is very simple
03:49 < SomeoneWeird> lol
03:49 < SomeoneWeird> no games are simple
03:49 < Franz__> its only a prototype with no graphics 
03:49 < Franz__> no cancas
03:49 < Franz__> *canvas
03:49 < Franz__> no images
03:49 < AAA_awright> <SomeoneWeird> no games are simple
03:51 < gildean> SomeoneWeird: i don't think mocking up a prototype would be too hard
03:52 < gildean> if the client just sends stuff to the server, the server then dumps the data to a db and uses the data to update views of other or something
03:53 < gildean> if only mobile browsers had websocket support it would be a nice websocket project
03:53 < SomeoneWeird> they don't?
03:53 < gildean> i don't think so, at least not fully
03:53 < Franz__> its only a prototype of persisent connection
03:54 < Franz__> like as a quiz 
03:54 < gildean> Franz__: are you making this for mobile devices or for more capable devices
03:54 < Franz__> i found a project
03:54 < Franz__> oh god finally!
03:54 < Franz__> example with socket.io and knockout
03:57 < deviantgeek> just curious, in this tutorial http://howtonode.org/express-mongodb why did they use the prototype of the function vs doing something like this: http://pastebin.com/wkJqn3cw
03:57 < Franz__> i need only
03:57 < Franz__> catch the data on connect
03:58 < Franz__> and save the data on disconnect
03:58 < deviantgeek> im talking about the articleprovider_mongodb file
03:58 < Franz__> simple
04:05 < deviantgeek> anything? I really want to know the difference between the two styles and which one is correct
04:08 < gildean> deviantgeek: i don't think there is a "correct" way
04:09 < gildean> a wrong way would be if it doesn't work
04:09 < deviantgeek> well, is it bad practice to use one way?
04:09 < Franz__> the tuto/2010
04:10 < Franz__> Node Version:
04:10 < Franz__> node v0.4.10
04:32 < mscdex> 0.4.10 is ancient!
04:35 < jmar777> i feel like i just stepped into the twilight zone. hop onto IRC at 12:34 and people are discussing node 0.4.10 in #node.js and some module that's been abandoned for over a year in #express
04:38 < sirvon> i think im in love with nodejs
04:45 < AAA_awright> sirvon: NOT IF I FALL IN LOVE FIRST
04:45 < AAA_awright> >_>
04:45 < AAA_awright> I mean, the more the marrier?
04:45 < mscdex> anyone here ever return an Error instance from their functions instead of throwing an exception or passing an Error to a callback?
04:45 < AAA_awright> mscdex: Never
04:45 < sirvon> its a 70s type of love, ill share her
05:10 < mrFrog> ok anyone familiar with mocha & should.js ? for some reason, if i try something like this in a test: (-> task2.complete()).should.throw "Dependent task 'wash dishes' is not completed." it is getting "undefined" rather than an exception i'm throwing.
05:33 < rafiks> can i ask npm questions here?
05:34 < DTrejo> ye
05:34 < DTrejo> s
05:35 < rafiks> trying to install cloud9 on a debian unstable box with node.js 0.8.9
05:35 < DTrejo> sudo
05:36 < rafiks> but i got a "tar pack error reading `my tmp dir`"
05:36 < rafiks> ran as root
05:36 < rafiks> DTrejo: use sudo instead?
05:40 < rafiks> sudo doesn't work
06:13 < gabrieluk> can i make an express app listen to port 80?
06:16 < timeturner> yes
06:16 < timeturner> change the port to 80
07:40 < ashnur> morning
08:20 < bubbles10101> what's the best front end webserver to use with node? http-proxy, haproxy, nginx? it must support WebSockets
08:23 < ljharb> bubbles10101: node is the webserver. why do you need anything else?
08:25 < ashnur> there are too many options
08:25 < ashnur> you can read about node based solutions in deployment for weeks before you can get an idea which might fit your environment best
08:26 < bubbles10101> haha ashnur. exactly..... hence my question :P
08:27 < bubbles10101> so i gather yah in the same bout then?
08:28  * ashnur too, has no idea how should i deploy node so that I can be sure that it's somewhat secure and stable at the same time
09:03 < neekl> hello i'm connecting via ssh on my server, i'm launching node as a deamon but when i quit my ssh session, node stops ! is that normal ? (node myscript.js &)
09:04 < ljharb> neekl: try node myscript.js & disown
09:04 < neekl> thx ljharb  :)
09:39 < Xtreme> Hello guys
09:39 < Xtreme> is node.js client and server or only server?
09:49 < substack> Xtreme: node is some c++ bindings for v8 for tcp and disk i/o
09:49 < gildean> Xtreme: it is what you make of it
10:00 < sinclair_> hey guys, anyone running ubuntu, and if so, do you opt for desktop or server?
10:01 < sinclair_> noting that i need it for a web server
10:01 < gildean> sinclair_: why would you install a desktop if you need a server?
10:02 < sinclair_> gildean: i mean to say, i just need a ubuntu install for developing web applications,
10:02 < sinclair_> gildean: why would one opt for server over desktop?
10:03 < gildean> sinclair_: if it's a server, where do you need the desktop?
10:03 < gildean> if it's a desktop, use the desktop
10:03 < sinclair_> well, whats the difference between desktop and server?
10:03 < sinclair_> just that it has a desktop?
10:03  * sinclair_ is a linux n00b
10:03 < gildean> and some other packages
10:03 < sinclair_> but i can install what i want right?
10:03 < gildean> you can install the desktop on top of the server with one meta-package alone
10:04 < gildean> sudo apt-get install ubuntu-desktop
10:04 < gildean> will install all the packages required for the desktop
10:05 < mon> hello (first time around :) )
10:09 < mon> do I need these (libv8... -packages and apache2-utils) in installing Node on Linux Mint?
10:11 < Chuwiey> Hi all, is there a way to run node.js constantly without using http listen?
10:12 < FMJaggi> Chuwiey: http://stackoverflow.com/questions/4018154/node-js-as-a-background-service
10:13 < Chuwiey> thanks FMJaggi :)
10:14 < FMJaggi> oh hmm, they might be assuming there is still a http server, the fugue link seems ok but hasnâ€™t been updated in 2 years
10:15 < gildean> mon: make sure you install nodjs and not node
10:15 < mon> gildean :)
10:16 < FMJaggi> oh forever does do it, the example just used http, this one seems httpless: http://stackoverflow.com/questions/4903570/how-does-one-start-a-node-js-server-as-a-daemon-process
10:16 < gildean> mon: follow the ubuntu part here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
10:17 < gildean> it works, i don't know why there's a note on mint to do it any different than on ubuntu
10:17 < mon> gildea: ok, they are mentioned in the Mint part
10:18 < gildean> ?
10:18 < gildean> the link under mint explains how to build it yourself
10:19 < gildean> but you can just add the same repo as you would on ubuntu
10:19 < mon> yeah
10:19 < gildean> unless you're on lmde, then i guess you need to build it
10:20 < mon> miscellaneous install info around (like https://gist.github.com/3765452)
10:21 < gildean> if you want to build your own, go ahead, i'd still suggest using the ppa
10:21 < gildean> it's just easier
10:21 < mon> gildean: ok, thanks
10:22 < mon> ... i was going to use this apptob.org
10:23 < gildean> mon: well, if you want to do a rebuild on every update, then go ahead
10:23 < gildean> imo that's one thing i don't want to worry about
10:24 < mon> gildean: ah, ok
10:24 < mon> ... good point
10:26 < deoxxa> gildean: how do you use older versions?
10:26 < deoxxa> gildean: like if you need to test on 0.4.x or 0.6.x
10:27 < gildean> deoxxa: i haven't had a situation where i would need to test it, but i guess then i'd just get an older package and install it by hand
10:27 < gildean> deoxxa: i'm not developing things to be used on anything other than the newest version at the time
10:27 < gildean> at least not yet
10:27 < deoxxa> fair enough
10:29 < gildean> node on linux is just the binary and a library, so i guess you could have them tucked away somewhere
10:39 < nkuttler> deoxxa: ./configure --prefix should do
10:40 < nkuttler> though ideally you'd want a vm i guess..
10:48 < Fikeu> hm
10:49 < Fikeu> have a question but it's more javascript related than node in particular
10:49 < SomeoneWeird> ?
10:50 < Fikeu> I have a bit of code that looks something like this (don't think it's worth it to pastie it):
10:50 < Fikeu> Atheme.NickServ = {
10:50 < Fikeu>     login: function(obj, nick, pass, ip) {
10:50 < Fikeu>         Atheme.Query(obj, "atheme.login", [nick, pass, ip], function(data) {
10:50 < Fikeu>             obj.sessionid = data.params.param.value.string;
10:50 < Fikeu>         })
10:50 < Fikeu>     }
10:50 < Fikeu> }
10:50 < Fikeu> thing isâ€¦
10:50 < deoxxa> nkuttler: i actually use n and some environment variables to manage it
10:50 < Fikeu> Atheme.Query is async, and obj.sessionid gets set after it runs
10:50 < deoxxa> nkuttler: along with https://npmjs.org/package/npmrc to manage my npm profiles for testing that kind of stuff ;)
10:51 < Fikeu> however if i do a console.log(obj.sessionid); straight after it's undefined
10:51 < SomeoneWeird> straight after what?
10:51 < Fikeu> actually, hold up
10:51 < Fikeu> I think I know what I need to do :)
10:54 < deoxxa> https://npmjs.org/package/callbackmaybe heh
10:54 < Fikeu> nice name
10:54 < Fikeu> xD
10:54 < wao> lol
10:55 < SomeoneWeird> hahah
11:21 < saschagehlich> hey, did anybode manage to get connect-assets running in production?
11:25 < qballer>  Hey guys, does node.js have an "how to contribute" doc or and open bug tracking system. I've started maintaining my own project and I want to check out the other side of things.
11:25 < zomg> qballer: think there might be something on github
11:25 < BennyLava> https://github.com/joyent/node/issues
11:27 < qballer> I meant this : https://github.com/joyent/node/wiki/Contributing thanks ! 
11:27 < qballer> tracking system is step two
11:31 < qballer> So all contributers sign the agreement thing?
11:31 < substack> correct
11:32 < qballer> I work as a programer but contributing will not be part of my job, I would do it in my spare time. Don't think I need to bring them in the picture.
12:29 < ojon> anyone here who uses emacs can tell me about what modes/plugins are usefull for node?
12:57 < SoulRaven> any recomandation for a mysql module?
12:57 < SoulRaven> a good one and stable?
12:59 < efbeka> php?
12:59 < SoulRaven> nodejs, i cam from php, in spcial from cakePHP
12:59 < incon> https://github.com/felixge/node-mysql
13:00 < SoulRaven> incon: is stable for production envirement?
13:00 < efbeka> SoulRaven: IMHO php is the best node mysql module
13:01 < incon> SoulRaven: yes
13:02 < SoulRaven> efbeka: i want to use  native module for node
13:03 < efbeka> SoulRaven: ^^, there is no native nor core module for that
13:03 < efbeka> check the felige's one
14:01 < molnarg> i have a question about streams and buffering
14:01 < molnarg> i have a fairly large file that i am piping to a http response
14:02 < molnarg> i see a lot of writes until the write method of the response returns false
14:03 < molnarg> then when it emits drain, the writing continues
14:03 < molnarg> when I extract the number of bytes the client has received from the number of bytes there was written to the response, i see a 5Mbyte difference
14:03 < molnarg> it is a slow connection
14:04 < molnarg> there must be a write buffer somewhere
14:04 < molnarg> be as far as i know, the tcp write buffer in linux is ~128K
14:04 < bnoordhuis> molnarg: node buffers if you keep writing after the kernel send buffer is full
14:05 < molnarg> well
14:05 < molnarg> when i read the socket.bufferSize
14:05 < molnarg> it is always 0
14:05 < molnarg> and when it grows over zero
14:05 < molnarg> there's a pause immediately
14:05 < molnarg> so no more writes happen
14:06 < molnarg> until it emits drain
14:06 < molnarg> and the bufferSize is usually ~30kbyte
14:06 < bnoordhuis> molnarg: what does your code look like?
14:07 < molnarg> so i think there must be another buffer somewhere between node and kernel tcp write buffer
14:07 < molnarg> well it's very simple, just fs.createReadStream(process.argv[2]).pipe(res)
14:07 < molnarg> after writeHead
14:08 < molnarg> and i proxy the write method of the response to print information about writes
14:08 < bnoordhuis> molnarg: gist?
14:08 < molnarg> ok
14:11 < molnarg> https://gist.github.com/3766279
14:12 < molnarg> then i use curl to issue a http request
14:12 < molnarg> and i use iptables, and tc to limit the bandwidth, and introduce latency
14:12 < molnarg> from localhost to localhost
14:15 < bnoordhuis> molnarg: oh, that might explain the gap
14:16 < molnarg> bnoordhuis: so you say there's nothing between node and the kernel tcp write buffer?
14:16 < molnarg> bnoordhuis: and that tc somehow distorts my results
14:17 < molnarg> bnoordhuis: i will try it with two different hosts
14:20 < noxoc> Hm. what do I have to look at if I want to deal with a stream/long living http request? 
14:28 < molnarg> bnoordhuis: you were right, it works as expected with a real network link, thanks
14:28 < bnoordhuis> molnarg: my pleasure :)
14:29 < fb55> i just released https://github.com/fb55/node-cornet - any thoughts?
14:32 < molnarg> bnoordhuis: do you know any reliable network simulation tool that would simulate bandwidth and latency more realistically?
14:36 < bnoordhuis> molnarg: the netem kernel module?
14:37 < bnoordhuis> molnarg: though i guess that's what tc uses under the hood
14:38 < molnarg> bnoordhuis: yes, i do the delay simulation with tc and netem
14:39 < molnarg> bnoordhuis: but the bandwidth limiting is with tc as well but i think i did it somehow without netem
14:39 < molnarg> bnoordhuis: with traffic shaping or something
14:49 < shlevy> Hi. I'm creating 10 concurrent http client requests, and as expected only the first 5 get a socket right away. Unfortunately, after one of them finishes the others never get sockets, it seems as if they just die. Do I need to manually queue requests?
14:49 < guybrush> fb55: the link to fb55/htmlparser2 is wrong :D looks super interesting your project!
14:52 < rovar> shlevy, are you just doing 10 http.gets in a row? 
14:52 < shlevy> rovar: Yes
14:53 < shlevy> rovar: The docs for http.Agent suggested to me that requests are queued if there's no socket available
14:53 < shlevy> But that doesn't seem to be the case...
14:54 < rovar> shlevy, I can't see why it wouldn't just issue all 10..
14:54 < shlevy> rovar: http://nodejs.org/api/http.html#http_agent_maxsockets
14:56 < shlevy> Hm, I can't reproduce it in a test case :(
14:58 < jondot`> hey guys, what would be the current (leasy buggy) way to do CSS selectors over DOM today?
14:59 < jondot`> i remember many bugs with jsdom and i had to use it, but now I can evaluate the toolset again for a new project
14:59 < jondot`> bumped into cheerio aswell, is everyone moving from jsdom to cheerio?
15:03 < rovar> shlevy,  options = { agent = false };   http.request(options) 
15:04 < rovar> shlevy, but yea.. it should be queuing..
15:05 < shlevy> And globalAgent.sockets is always an empty object even in the .on 'socket' callback of the first five requests
15:07 < shlevy> Ah, was looking at http instead of https
15:07 < shlevy> So there's part of the issue...
15:11 < shlevy> OK, so I see the request in the globalAgent.requests object
15:11 < shlevy> But it never gets a socket...
15:13 < fb55> jondot`: cheerio uses my selector library cssselect, and i don't know of any bugs. i'll promise you to fix all selector bugs you report if there are any :)
15:14 < jondot`> fb55: thanks. yep i'm moving to use cheerio indeed
15:26 < shlevy> OK, traced the issue further. The 'socket' event is indeed being emitted for each request, but the ones that wait until the first batch are done never go on to emit a 'response' event
15:47 < ben_alman> are there any templating engines in nodejs that allow me to use | style filters? like {{ foo | bar | baz(1) }} etc
15:49 < ben_alman> hmmn, ejs looks decent
15:53 < qballer> So any simple bugs out there to get used to the commit process
15:53 < qballer> I'm going over them my self
15:54  * sinclair_ is on ubuntu
15:56 < shlevy> Ah, found my problem. Forgot to add keep-alive to my http headers
15:59 < shlevy> Seems counter-intuitive... If I don't specify keep-alive, shouldn't node know not to reuse a socket?
16:02 < shlevy> Also I need to manually resume() the socket
16:04 < jcrew> one time i had to walk somewhere
16:06 < BennyLava> sounds dangerous
16:06 < jcrew> it sucked big time
16:06 < BennyLava> glad you're ok
16:06 < jcrew> thank you
16:18 < alksdjfashfieir_> hi
16:18 < qballer> So do you rate some how the difficulty of the bugs?
16:20 < alksdjfashfieir_> how to test the code via node-js
16:21 < timeturner> https://github.com/visionmedia/mocha
16:21 < hemanth> alksdjfashfieir_: what kina code?
16:22 < hemanth> anyone interested in silly weekend app review ? https://github.com/hemanth/irc-notify ;)
16:22 < alksdjfashfieir_> serverhttp
16:23 < hemanth> as timeturner suggested https://github.com/visionmedia/mocha
16:23 < hemanth> alksdjfashfieir_: ^
16:24 < qballer> Is make enough if I don't want to install globaly ?
16:24 < alksdjfashfieir_> hemanth: thx
16:25 < alksdjfashfieir_> timeturner: thx.
16:39 < russfrank> is node supposed to be able to translate ansi escape codes for positioning on windows
16:40 < qballer> do you guys have a mentoring program ?
16:44 < sinclair_> qballer: yeah
16:44 < sinclair_> qballer: its called....google
16:44 < thl0_> anyone played with harmony proxies?
16:45 < thl0_> I'm trying to write a module that wraps all function bodies with something like: "try .. catch(e) { callback(e) }"
16:46 < thl0_> not sure if using esprima to modify ast is the best solution
16:49 < qballer> sinclair_,  I'm not talking about GSOC. I'm talking about a list of easy to fix bugs.
16:51 <@Nexxy> thl0_, substack wrote something to do that, I think it's burrito
16:51 <@Nexxy> thl0_, https://github.com/substack/node-burrito
16:52 < thl0_> Nexxy: looked into that, not sure if that will work
16:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:52 < thl0_> I need to change the body **inside** the function as opposed to wrapping the function itself since I need to be able to call the funcs callback which is only available inside it
16:53 < runvnc> hello.  Trying to follow this tutorial https://github.com/felixge/node-memory-leak-tutorial to track down memory leaks.  Problem I am having is that the inspector does not give me a profiles tab?
16:55 < substack> Nexxy: falafel is better
16:55 < qballer> Shoarama is better
16:56 < qballer> Showarma
16:56 < substack> thl0_: http://github.com/substack/node-stackedy
16:56 < mscdex> breakfast burrito is better
16:57 < runvnc> has anyone ever used the web inspector, and if so, did you see a profiles tab? 
16:59 < jarr0dsz> hi everyone, loading the contents of a controller#action to a certain div only when there are changes would be long polling right?
16:59 < jarr0dsz> im looking to replace my old ajax jquery .load stuff that executes a load every single second for each client
17:00 < jarr0dsz> and i know i could use node.js but i only want this feature and as less resources usage as possible something like sockets with long polling should do the trick then right
17:00 < runvnc> I like to use Now.js
17:00 < runvnc> socket.io is more popular though jarr0dsz 
17:00 < runvnc> but Now.js is easier
17:00 < jarr0dsz> okay dident knew about now.js i check that one, i only use sockets for this feature so it doesent have to be very complex with lots of features
17:00 < thl0_> substack: thanks, will have a look
17:01 < jarr0dsz> runvnc: would you maybe have a link to the project? seaching now.js returns lots of node.js sites ;)
17:01 < runvnc> http://nowjs.org/
17:01 < thl0_> substack: this will allow me to add a "try ... catch(e) callback(e)" where the callback is an argument of the function?
17:01 < thl0_> substack: and [...] would be the original body
17:01 < substack> thl0_: stackedy adds the callbacks for you
17:02 < runvnc> If you google now.js google assumes you mean node.js. just click on the link at the top where it says search instead for what you searched for
17:02 < jarr0dsz> does socket.io has to use node.js? always?
17:02 < substack> it is non-trivial to add the callbacks
17:02 < jarr0dsz> thx runvnc i look into it
17:02 < runvnc> ok
17:02 < thl0_> substack: thanks, I'll make a gist to outline better what I'm trying to do and maybe we can scheme up the best solution
17:02 < jarr0dsz> i mean is there dependancy on node.js always also for socket.io?
17:02 < substack> jarr0dsz: you should use a streaming abstraction instead like https://github.com/substack/shoe
17:03 < thl0_> substack: lunch first though ;)
17:03 < substack> it's harder but more elegant and will be less technical debt later
17:03 < substack> you can use rpc or events or both read this: https://github.com/substack/stream-handbook
17:03 < jarr0dsz> substack: whats that differ to sockets.io? thx alot btw for the links this socket and realtime stuff is really not my thing
17:04 < substack> jarr0dsz: instead of inventing its own wonky api you just use streams
17:04 < substack> and when you use streams you can use any streaming abstraction
17:05 < substack> and you can have multiple streaming abstractions on the same streaming transport with https://github.com/dominictarr/mux-demux
17:05 < jarr0dsz> substack ok ill see goes a bit against the levels of my socket knowledge, what exactly does that mean s?
17:05 < substack> streams are the nicest way of handling async io
17:05 < jarr0dsz> basically for now, i just want to have a div in my page where i load a certain controller#action ( rails app )
17:05 < substack> jarr0dsz: once you learn the streaming api you won't need to learn many more apis
17:06 < jarr0dsz> call it home#queue it sets some timers and is a queue i use in my application
17:06 < jarr0dsz> and there are 2 states for it..   true or false, when false nothing is outputted.. if true then every second it has to reload its contents
17:06 < runvnc> substack not to bother you but.. can you give me a hint for profiling the heap. doesnt have to be with node-inspector.  I have this nodetime thing. its heap profile is not helping
17:07 < jarr0dsz> substack: that shoe socket thing seems cool but im not quite sure how it differes from sockets.io?
17:07 < substack> jarr0dsz: shoe() returns a stream in the browser
17:07 < jarr0dsz> and the stream contains.. data?
17:08 < timeturner> why does node provide methods to buffer data when we should be streaming everything?
17:08 < substack> jarr0dsz: stream is an api in node core that you can use in browsers too
17:08 < substack> jarr0dsz: with streams you can call .pipe()
17:08 < timeturner> why are they even there in the first place
17:08 < substack> so you can compose together abstractions by piping data
17:08 < jarr0dsz> ok so it uses node.js well thats not a big problem but would i really need node.js to do what I want to do?
17:08 < substack> a.pipe(b).pipe(c)
17:08 < runvnc> nodetime is telling me I have 418% with the largest instances in my heap being hidden links to 'system / Map'.. no idea what that is
17:08 < timeturner> no I mean why does fs.readFile() exist
17:09 < jarr0dsz> im on a vps with already 4 heavy memory usage deamons not sure about node.js memory consumption but if not needed i would prefer
17:09 < timeturner> vs fs.createReadStream()
17:09 < timeturner> if we should always be doing the latter
17:09 < runvnc> you can't use any of this node.js stuff without node.js jarr0dsz 
17:09 < jarr0dsz> no logic right :) only wondered if there are other techniques available to do what ill need but guess node.js is a solid way off doing things
17:10 < jarr0dsz> would it work even in internet exploder ?
17:10 < timeturner> actually in that  data.txt example from substack/stream-handbook the file should be cached in memory once
17:11 < timeturner> disk I/O shouldn't even happen in that case
17:11 < timeturner> if you're serving to every client
17:12 < jarr0dsz> ok so there are 2 real options then the sockets.io or the shoe stream thing ( wich seems way more complicated ) best bett would be to start with sockets.io then ill guess for now
17:12 < runvnc> now.js is better I think
17:12 < jarr0dsz> or now.js yes
17:12 < runvnc> why is that not a real option
17:12 < jarr0dsz> runvnc: no idea sockets.io seems a bit more used.. im not sure what would be the advantage of using now.js.. although it also has socket reconnection i read
17:13 < runvnc> everyone.now.newContent 'jarr0dszdiv', '<h1>Streaming is so much better</h1>'
17:13 < substack> do this: https://github.com/substack/stream-handbook#roll-your-own-socketio
17:13 < runvnc> the advantage is its much simpler
17:13 < substack> or this: https://github.com/substack/dnode#dnode-in-the-browser
17:13 < runvnc> dont roll your own anything. its three lines of code with now.js
17:14 < substack> the advantage of using streams is that you won't be stuck with a feature-creeptastic or abandoned sprawling api later
17:14 < jarr0dsz> substack: isee your point on technology it looks like you can implement it beatefull and love that as  coder but this goes above my socket skills and requires a lot of reading up
17:14 < runvnc> you think they are going to abandon now.js?
17:15 < substack> "socket skills" what is that!
17:15 < substack> streams are easy and excellent
17:15 < substack> if you are doing node you should read about streams anyways so it's a good excuse to start using them I think
17:15 < jarr0dsz> well streaming technology ;p im missing even the basics on essential terms
17:16 < substack> jarr0dsz: http://maxogden.com/node-streams
17:16 < runvnc> Established in 2010 and based in Berkeley, California, Flotype is venture-backed by Andreessen Horowitz, Ignition Partners, InterWest Partners, and Salesforce.com 
17:16 < substack> or something longer: https://github.com/substack/stream-handbook
17:16 < runvnc> meaning they are not going to shortly abandon now.js
17:16 < jarr0dsz> cool stuff ill bookmark those links and look at them
17:17 < jarr0dsz> but just to be clear, sockets is the way to go and using something like now.js or sockets.io is a more quick way of getting there with solid examples etc
17:17 < jarr0dsz> i first had planned an instant messenger using websockets build a prototype on faye but i decided to switch to facto standard xmpp
17:17 < substack> runvnc: they're called bridge now
17:17 < jarr0dsz> so its not that much ill need socket tech for in my app a.t.m
17:17 < substack> for one
17:18 < runvnc> he said he wants internet explorer.  does shoe/sockjs or whatever support that?
17:19 < substack> sockjs does so shoe should
17:19 < runvnc> great they are called bridge now
17:19 < substack> oh no I am doing Object.keys() in shoe
17:19 < substack> oh wait just for the server-side part
17:20 < runvnc> so you don't like socket.io obviously
17:20 < substack> socket.io is fine streams are much better
17:20 < substack> *fine but
17:21 < runvnc> but shoe is built on sockjs instead of socket.io right
17:21 < runvnc> which sockjs wraps a websocket?
17:21 < runvnc> like socket.io
17:21 < substack> sockjs is JUST websockets with fallbacks
17:21 < substack> socket.io is that plus an api for doing events and callbacks and channels
17:21 < runvnc> right
17:21 < substack> but you can get each of those features separately with modules
17:23 < runvnc> ok so you think that bridge is going to go out of business and then suddenly the now.js npm modules won't work?
17:23 < jarr0dsz> ok so ill just start with sockets.io ive copied the app.js and index.html from there homepage and ran npm install socket.io
17:23 < jarr0dsz> but then? how would you install the app, just run the index.html? i assume node.js has to run
17:24 < SoulRaven> node-mysql has any confirmation when the connection to mysql server is made and i success?
17:25 < nkuttler> jarr0dsz: you run app.js with node and serve the index.html somehow. i like python -m SimpleHTTPServer
17:26 < jarr0dsz> okay cool yes i know simpleserver have python installed also :) it doesent mention if you need jquery.js either, better i find a good sockets.io tutorial , seems to be a nice way to get a bit introducted to everything
17:27 < runvnc> yeah why would you use socket.io when now.js is simpler.
17:27 < runvnc> everyone uses socket.io instead of now.js. why? there must be a reason
17:27 < runvnc> oh probably because I said socket.io was more popular and it is. thats all
17:28 < nkuttler> runvnc: i've never heard of it and i'm not looking for "simpler"
17:28 < nkuttler> "better" might be interesting..
17:28 < runvnc> right that's another reason.  people don't like things that are easy, it makes them suspicious
17:28 < runvnc> better because it is less code
17:29 < nkuttler> if you think socket.io is hard i'm probably not very interested in your opinion anyway
17:29 < jarr0dsz> just have to start somewhere right ;p
17:29 < runvnc> jarr0dsz, substack made something that is practically exactly what you asked for, if you follow his advice, he is a genius, and its a good option
17:30 < jarr0dsz> runvnc: sorry what exact advise was that? there where several good links
17:30 < jarr0dsz> just playing around sockets to get a basic idea of how things work i have to catch up on this amazing techlogy's
17:30 < jarr0dsz> *technologies
17:31 < nkuttler> jarr0dsz: if you just want to play you can use the native stuff
17:31 < runvnc> Here's the thing. C is not hard.  Python is not hard.  Streams are not hard. JavaScript is not hard.  But Node.js and JavaScript is easier. Streams are not hard.  JavaScrip is not  hard. But events and CoffeeScript are easier. 
17:32 < runvnc> Socket.io is not hard.  But Now.js is easier
17:32 < runvnc> Oh I repeated javascript is not hard
17:32 < runvnc> wasnt as poetic as I intended
17:32 < nkuttler> ah, coffeescript is easier. ok then
17:32 < nkuttler> still, looking into now right now..
17:34 < runvnc> I have been programming for 27 years.  I have written reasoners in Ocaml, socket servers in C, chess timing programs in C++, network programs with Python's Twisted and java nio.
17:34 < runvnc> I have written node programs with socket.io
17:34 < substack> runvnc: I like how orthogonal the streaming approach is with shoe
17:34 < runvnc> and streams
17:35 < jarr0dsz> runvnc: great writeup you said that substack made something exactly that ill needed but what one was that from his links?
17:35 < substack> I have run into frustrating issues where the magic starts to break down in opaque ways with socket.io
17:35 < runvnc> BUT the thing is, most of my programs aren't about chess timing, or managing sockets, or managing memory, or networking abstractions.  they are about the problem domain I am trying to solve
17:35 < jarr0dsz> i mean whats the suggestion, i have bookmarked all but not sure wich one yo mean ;p
17:35 < substack> like turning off logging or reconnection logic is very, very hard
17:36 < runvnc> so when I find something that reduces the amount of plumbing code or extra information, I use it.  Like Now.js or CoffeeScript.
17:36 < runvnc> ok
17:36 < jarr0dsz> runvnc: yes frameworks are mostly the way to go in most cases, im using rails haml coffeescript and compass to easy some pain ;p
17:36 < runvnc> ok I understand substack. 
17:36 < jarr0dsz> and node is all new to me but its very cool, just readup on the express framework
17:37 < substack> having too many choices made for you by frameworks can lead to problems when you need to do something different from what the framework authors intended
17:37 < runvnc> if I was a smart as substack I woul dmake my own thing
17:37 < jarr0dsz> substack: you suggested something that came closs? could you recall your advise? bit lost on which git repo or link you provided was the right one
17:37 < substack> if you have an orthogonal set of separable, reusable modules it's much easier to reconfigure them to do what you need later on
17:37 < jarr0dsz> substack: yes i know ive uses zend framework it was horrous
17:38 < substack> jarr0dsz: what are you trying to do?
17:38 < runvnc> I am also not that sure about all of the magic in socket.io, but it seems to be working.. and the thing is that digging through it and rolling my own seems a major project that would repeat a lot of work other people have done
17:38 < runvnc> he suggested shoe
17:38 < substack> runvnc: the best part is that people have already done all the work with streaming apis in a reusable way
17:38 < jarr0dsz> substack: i have this div in my html, i want to replace its contents with sockets.. now im using an ajax.load wich reloads it every second ;)
17:38 < nkuttler> now looks interesting
17:39 < substack> runvnc: I'm in the process of documenting these streaming modules better in the stream handbook
17:39 < substack> they play very very nicely together
17:39 < NaN> hi there, I had installed node on a fedora machine with the instructions from http://nodejs.tchol.org/ but now I can't install chromium because a v8 dependency problem, what can I do to install it?
17:39 < runvnc> ok I will read it for a few minutes at least
17:40 < substack> jarr0dsz: you could use something like https://github.com/Raynos/element-list
17:40 < runvnc> can you please give me a hint on getting v8 profiler to give me a heap snapshot breakdown or something
17:40 < substack> just .pipe() a shoe stream into one of those
17:41 < gildean> i looked at socket.io in my last project but found that using the ws-module it was easier to create a custom server/client combination
17:41 < gildean> i made two clients, one headless agent-client and one for the browser to act as the control-view
17:45 < jarr0dsz> thx substack i have quite some reading to catch up :p
17:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:29 < russfrank> anybody know when github figures out that you changed the primary language of a project
18:30 < russfrank> i want everyone to know that i rewrote a thing in javascript that was in coffeescript
18:30 < mmalecki> russfrank: good approach, but no idea
18:31 < tuhoojabotti> russfrank: email github, they have nice customer service
18:38 < thl0_> substack: are you around?
18:39 < thl0_> substack: I created a gist to explain what I'm trying to archieve with the try/catch wrapper for async code here: https://gist.github.com/3767341
18:41 < owen1> russfrank: what project is it?
18:41 < russfrank> owen1: https://github.com/russfrank/tsm
18:44 < cody> hey
18:51 < nible> derp
18:51 < owen1> russfrank: thansk
19:09 < llrcombs> I'm having trouble using NPM on a Slackware box with a FAT32 USB drive
19:09 < llrcombs> if I try to install anything on it, it complains about not being able to make symlinks
19:10 < nkuttler> llrcombs: well fat doesn't do symlinks..
19:10 < llrcombs> nkuttler: I know
19:10 < rovar> fat32 doesn't support symlinks
19:10 < nkuttler> just put a nice filesystem on that drive
19:10 < rovar> you can fake them
19:10 < rovar> but npm doesn't know how to fake them
19:10 < llrcombs> can I force npm to just clone the files?
19:10 < llrcombs> it has to be FAT (it's the UnRAID boot volume)
19:11 < nkuttler> llrcombs: but you certainly didn't install slackware on fat?!
19:11 < llrcombs> nkuttler: no
19:12 < llrcombs> nkuttler: the root fs is a ramfs
19:12 < llrcombs> which is created from a file on the FAT at startup
19:12 < nkuttler> llrcombs: don't you have any drive with a linux fs?
19:13 < nkuttler> i think i'm out of my element here..
19:13 < llrcombs> nkuttler: I'm using npm right now on a reiserfs drive and it's working just fine; I'd just prefer to have the option of using the USB if I can
19:13 < llrcombs> if npm just won't do that, I'll just stick to the reiser drives
19:13 < nkuttler> sounds like a good plan
19:14 < nkuttler> (and mounting fat as noexec as well)
19:14 < llrcombs> bad plan, there are config scripts on the fat
19:14 < nkuttler> oh well, i'd call it a bad layout :) anyway
19:14 < llrcombs> yeah, dunno why it was designed with FAT32 as the config volume
19:14 < llrcombs> but hey, whatever
19:14 < llrcombs> it works
19:15 < nkuttler> llrcombs: oh i thought you made it
19:15 < llrcombs> oh, no
19:15 < nkuttler> it sounds so bizarre, what kind of device is it?
19:15 < llrcombs> well, I built the actual tower, yes
19:15 < llrcombs> but I didn't design the OS
19:15 < llrcombs> it's a modified version of slack called UnRAID
19:15 < nkuttler> interesting
19:20 < Cogito_Ergo_Sum> hi folks
19:21 < Cogito_Ergo_Sum> has anyone had problems with node.js 0.6.x in an amazon linux micro ami ?
19:21 < Cogito_Ergo_Sum> problems as in the node process hanging
19:43 < saamyjoon> anybody have a good command line parser package recommendation?
19:44 < superjoe> saamyjoon, optimist
19:46 < saamyjoon> looks great, thanks. 
19:46 < superjoe> no problem
19:46 < saamyjoon> I was actually looking for what substack wrote in this category because I came by it a while ago, but couldn't find it scrolling through his git repo
19:50 < tuhoojabotti> lol wut
19:50 < tuhoojabotti> travis is trying to compile our module with ruby :P
19:53 < GriffenJBS> where can I find more info on node-gyp?
19:53 < GriffenJBS> specifically 'node-gyp install'
19:59 < substack> thl0: stackedy would seem to do exactly what you need
19:59 < substack> thl0: also check out domains in node core
20:02 < substack> thl0: http://nodejs.org/docs/latest/api/domain.html
20:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:57 < robinson_k> hi
20:58 < robinson_k> i have a problem with express and csrf tokens. they just appear after the second request.
20:58 < robinson_k> i created a pastie: http://pastebin.com/RWF0EyQr
20:59 < robinson_k> does anyone have an idea? it seems the session starts too late?
20:59 < robinson_k> i am using 3.0.0rc4, btw
21:01 < bren2010> robinson_k, that's usually how sessions work.  o.0  What are you trying to get it to do?
21:01 < robinson_k> i have a form and wanted to secure it with a csrf token.
21:02 < robinson_k> have the solution!
21:03 < robinson_k> moving Â´  app.use(express.csrf());
21:03 < robinson_k> above the body parser just under the line with the session did the trick
21:05 < dave_> Has anyone ever had a problem where npm does literally nothing after installing node?
21:05 < robinson_k> but thanks bren.
21:05 < robinson_k> bren2010: do you know the "duck"-thing?
21:05 < bren2010> Umm... no?
21:05 < bren2010> What is it?
21:06 < robinson_k> http://en.wikipedia.org/wiki/Rubber_duck_debugging
21:06 < robinson_k> we call it "beeing a duck" at work
21:06 < bren2010> xD
21:06 < bren2010> That's funny.
21:07 < dave_> I hate to be a bother, but can anyone point me in a direction to get some help properly installing npm in linux?
21:08 < dave_> I thought I did it correctly, but it seems that npm does not work --at all--
21:08 < dave_> node itself works, though
21:08 < dave_> but npm hangs
21:08 < dave_> :-(
21:08 < GriffenJBS> if the duck is like my gf he won't understand it no matter how I explain it ;-)
21:09 < robinson_k> dave_: hrm, i am not sure if i can help. are you using osx, linux or windows?
21:09 < dave_> linux
21:09 < GriffenJBS> dave_: using a distro package?
21:09 < dave_> I'm using a derivative of ubuntu lucid
21:09 < dave_> no
21:09 < dave_> I built from source
21:09 < dave_> grabbed the git repo, then make; sudo make install
21:10 < dave_> seemed to work, but npm is a lame duck
21:10 < GriffenJBS> source sucks, all too often a distro requires a special switch and things go wrong without it
21:10 < dave_> I suppose I could hunt down a deb package
21:10 < dave_> I just like being as up to date as possible :-)
21:10 < dave_> I'll try that and see where I end up
21:11 < GriffenJBS> the last time I installed it like that I cloned the git then ran npm and installed it from local to global
21:11 < GriffenJBS> npm -g install .
21:11 < dave_> the problem I have is that the npm command is basically dead
21:11 < dave_> it does absolutely nothing except hang
21:12 < GriffenJBS> npm is a short script to run npm-cli.js
21:12 < dave_> npm help provides no output and I have to kill the process
21:12 < GriffenJBS> sure your running the right one? which node, which npm
21:13 < dave_> node --version  gives me v0.9.3-pre
21:14 < GriffenJBS> why not the last stable v0.8.9?
21:17 < gluxon> Can I reuse a stream without redeclaring its events?
21:18 < substack> gluxon: redeclaring?
21:19 < gluxon> substack: Well, I posted a question on stackoverflow on using the zlib module -> http://stackoverflow.com/questions/12467584/how-to-use-node-js-zlib-module-with-options
21:19 < dave_> GriffenJBS:  I switched to v0.8.9 in my local git repo and am rebuilding.  I'll let you know if that worked.  Thanks for the suggestion
21:19 < dave_> my computer is a tad sluggish, so it will take a few minutes :-)
21:20 < gluxon> Only, I need to reuse that multiple times, and there doesn't seem to be a way to do it without redeclaring each event.
21:21 < sirvon> there was interested talk like a few hrs ago...i wanna read the convo is there anyway to get past transcripts of this chan
21:21 < sirvon> interesting*
21:22 < gluxon> sirvon: I don't think this page is logged.
21:22 < gluxon> sirvon: But I was here a few hours ago, so I have the entire conversation in this channel since 2:14 PM EST
21:23 < gluxon> Um.. so, 3 hours.
21:23 < sirvon> i think i neeed 12-1pm
21:24 < sirvon> they were talkin about socket.io and websockets
21:24 < sirvon> and one dude was talkin about how nodejs is better and how coffeescript is better
21:25 < sirvon> it was great insight
21:26 < substack> gluxon: are you .pipe()ing to your deflate instance?
21:27 < substack> also use .createDeflate(opts) or .createDeflateRaw(opts)
21:27 < substack> if you are using .pipe() you can .pipe(dst, { end : false }) so not call .end() when the source stream ends
21:28 < sirvon> gluxon:can you paste somewhere wat you have?
21:28 < substack> also is this for http compression or something else?
21:30 < sirvon> gluxon: if u see in that transcript talk from runvnc he was the one giving good info
21:33 < chovy> what's the quickest way to send emails from a node app?
21:34 < superjoe> chovy, when you say "quick", are you talking about processing time, or api painlessness?
21:35 < gluxon> sirvon: Ok thanks. I wasn't using pipe, I'll try that now. (not sure what it is yet)
21:35 < substack> chovy: here's one way https://github.com/substack/node-pony#send-an-email-with-some-options
21:35 < substack> I got frustrated with existing mail libs at the time all being broken as fuck
21:35 < saschagehlich> what is the right way to compile coffeescript files using express 3?
21:35 < substack> so pony has tests at least
21:35 < superjoe> saschagehlich, express and coffeescript have nothing to do with each other
21:36 < saschagehlich> superjoe: i know, but with express 2 i was able to implement the coffeescript compiler into express / connect
21:36 < superjoe> saschagehlich, compile your coffeescript into javascript before trying to use express
21:36 < superjoe> it'll be worth it for the tracebacks.
21:39 < gluxon> substack: I really feel like zlib shouldn't be a stream.
21:40 < gluxon> I just need to repeatedly call a function to deflate a buffer with some options.
21:40 < substack> gluxon: zlib is pretty much a perfect fit for streams
21:40 < chovy> superjoe: oh, i mean the easiest solution to implement.
21:40 < gluxon> substack: Really?
21:40 < chovy> i found node-email-tempaltes...might give that s hot.
21:40 < substack> gluxon: use this api then http://nodejs.org/docs/latest/api/zlib.html#zlib_zlib_deflate_buf_callback
21:40 < substack> if you have a single buffer in memory already
21:41 < gluxon> substack: That's what I was using before, but it apparently doesn't have support for options.
21:42 < dave_> GriffenJBS:  alas, recompiling the latest stable version of node (0.8.9) didn't do anything for npm
21:42 < dave_> after installing node, npm still hangs and is completely defunct
21:44 < danheberden> dave_: does another version help?
21:44 < danheberden> and maybe in a different shell?
21:44 < dave_> haven't tried a different shell... bash has never failed me before :-/
21:44 < danheberden> e.g., https://github.com/danheberden/nave-installer
21:45 < GriffenJBS> dave_: no npm log?
21:45 < danheberden> then `nave install 0.8.8 && nave use 0.8.8`
21:45 < substack> gluxon: Deflate() actually takes the options
21:45 < substack> reading through the lib/zlib.js source
21:45 < dave_> I apologize, I'm a bit of a node noob -- i'm on the installation step you see :-)  I will look for an npm log
21:46 < gluxon> substack: Oh, does it?
21:46  * gluxon goes and checks
21:46 < dave_> danheberden: node itself seems to work fine
21:46 < dave_> I can run the node command and execute arbitrary javascript with it
21:46 < dave_> it gives me output
21:47 < danheberden> dave_: npm comes with node; i was curious if a new install of it in a seperate shell instance would help
21:47 < dave_> npm, on the other hand does absolutely nothing except hang
21:47 < danheberden> since nave isolates each of those versions
21:47 < dave_> would nave provide me such an environment?
21:47 < danheberden> exactly
21:47 < dave_> I'll give it a go
21:47 < danheberden> and that thing i linked to just makes it easy to install
21:47 < danheberden> with one line
21:47 < danheberden> and have nave available for forever
21:47 < gluxon> substack: Deflate() does take options, but I can't use it with zlib.deflate(buf,callback)
21:48 < gluxon> https://github.com/joyent/node/blob/master/lib/zlib.js#L109
21:48 < substack> gluxon: yes but look at how it's implemented
21:48 < gluxon> zlib.deflate() calls Deflate without passing options.
21:48 < substack> gluxon: yes but you can just roll your own thing
21:50 < dave_> danheberden: so, nave manipulates the globally installed version of node, et al, is that right?
21:50 < gluxon> substack: Now I see what you mean. Let me try that. :)
21:51 < dave_> it seems to have worked!
21:51 < danheberden> dave_: it can link /usr/local/bin/node to whatever version you specify
21:51 < danheberden> that's the usemain command
21:51 < danheberden> `nave usemain stable` will make sure stable is installed, and use it as `node` everywhere
21:51 < danheberden> it's just handy to have multiple versions
21:52 < dave_> well, in my case it's just handy to have a working version
21:52 < dave_> thank you!
21:52 < danheberden> haha
21:52 < danheberden> i bet!
21:52 < dave_> hadn't heard of nave until now
21:52 < dave_> pretty sweet!
21:52 < danheberden> yeah, i really like it
21:52 < dave_> does this, by any chance work on windows?
21:52 < dave_> I'm relegated to a windows box at work... :-(
21:53 < danheberden> bummer :( it's a bash script, so uh uh
21:53 < gluxon> substack: Are you sure I'm able to use Deflate() outside of zlib.js?
21:53 < gluxon> ReferenceError: Deflate is not defined
21:53 < gluxon> I thought require wasn't like include on C++
21:53 < dave_> yeah, bummer -- maybe the sysadmins will let me run linux instead ;-)
21:53 < dave_> anyway, thanks again very much.  Time to get hacking!
21:54 < substack> gluxon: require('zlib').Deflate
21:55 < GriffenJBS> dave_: I'm glad you got it working, sorry I wasn't more help
21:57 < dave_> GriffenJBS: thank you as well.  If my machine was a bit faster, I'd have been able to give you faster feedback.  Thank you for the suggestion anyway
21:57 < dave_> it made sense to try the stable version, at least
21:58 < dave_> but I assume it might be some problem with my local environment -- the precompiled stuff I'm using via nave is working, but the locally compiled version isn't
22:04 < gluxon> substack: It appears I also need zlibBuffer(), don't I? That function isn't added with util.inherits
22:04 < gluxon> I'm still new to Node.js :'(
22:06 < substack> gluxon: zlibBuffer isn't exported
22:06 < substack> write something like what that does
22:07 < gluxon> ok..
22:14 < gluxon> substack: This is bringing me back into the original issue. zlibBuffer calls functions in zlib.js.
22:14 < gluxon> *sigh* I'll figure something out -.-
22:15 < lala> There was an error while checking app name / subdomain availability. What to do???
22:16  * gluxon doesn't understand why he can't just call awesomeCompressFunction(opts, buffer, callback) >_<
22:17 < lala> There was an error while checking app name / subdomain availability. What to do???
22:17 < lala> i've written subdomain as johnycs
22:19 < gluxon> If I make a change to the zlib.js module to allow opts for the convenience methods, what's the chance of it actually getting approved?
22:20 < substack> if your change is tiny, pretty good
22:20 < substack> that api is new so it's still subject to change
22:20 < gluxon> substack: Thank you. I seems to me like I'm trying to morph the zlib module into something it's not, but at the same time, I can't use it the way it is now.
22:21 < lala> gluxon :  There was an error while checking app name / subdomain availability. What to do???
22:21 < gluxon> lala: Paste the error? -> http://pastebin.com/
22:22 < substack> gluxon: just use only the Deflate(opts) constructor
22:22 < substack> enough is exposed to do exactly what you need
22:22 < gluxon> substack: Okay, but how do I pass a buffer to that?
22:22 < substack> gluxon: .write() to it
22:23 < substack> just make a new Deflate for each buffer
22:26 < gluxon> substack: But then I need to declare events (data, end)
22:26 < gluxon> Each time I want to use it..
22:26 < gluxon> :-/
22:26 < gluxon> It seems weird that there isn't a better way.
22:27 < substack> do what works
22:27 < substack> don't do what won't work
22:27 < gluxon> Well, repetitive code like that feels like horrible coding practice to me.
22:28 < substack> put it in a module
22:30 < gluxon> substack: Well, anyway. Thanks so much for the help :)
22:54 < superjoe> is this useful to anyone? https://github.com/superjoe30/naught
22:54 < superjoe> It solves a problem I had when deploying my app in production
23:00 < chesles> superjoe: looks like it could be a nice replacement for 'forever'
23:00 < superjoe> chesles, yes, I wrote it precisely because of how shitty forever is
23:01 < mscdex> a naughty module
23:01 < chesles> superjoe: nice :)
23:01 < deviantgeek> superjoe: yes, i was writing something simlar, but this is better
23:02 < superjoe> I think it's production ready. going to deploy the media processing server for indabamusic.com with it on monday, so it'll get battle tested soon enough.
23:02 < deviantgeek> is .co coffeescript?
23:03 < superjoe> deviantgeek, https://github.com/satyr/coco/
23:03 < superjoe> if you want to see how some code compiles: http://satyr.github.com/cup/
23:08 < deviantgeek> cool
23:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:10 < deviantgeek> so its using a file to communicate between your process and naught?
23:10 < superjoe> a unix socket
23:10 < deviantgeek> so this wont work on windows?
23:10 < superjoe> correct
23:10 < superjoe> the log rotation depends on posix compliance as well
23:10 < superjoe> I should probably make that clear in the README
23:11 < deviantgeek> hrmm, two things that would be really cool for this
23:11 < deviantgeek> a web interface, and a way to deploy to a naught server from a client using git or a special client
23:12 < superjoe> interesting
23:12 < superjoe> deviantgeek, can you explain the second thing?
23:12 < superjoe> what would that process be like?
23:12 < superjoe> from the user's perspective
23:13 < deviantgeek> if i make a change to my code
23:13 < deviantgeek> i can go:
23:13 < deviantgeek> naught upload <my app here>
23:13 < deviantgeek> and it will read from a naught.json and upload to a designated naught server
23:13 < deviantgeek> think how nodejitsu works
23:14 < superjoe> hmm, I'll have to give that some thought
23:14 < deviantgeek> https://github.com/nodejitsu/jitsu
23:14 < deviantgeek> it would be great for making personal clouds
23:14 < deviantgeek> and
23:14 < deviantgeek> for people wanting to start hosting companies
23:16 < superjoe> those requests are definitely doable
23:16 < jesusabdullah> deviantgeek: so, a cli client for haibu?
23:17 < deviantgeek> deviantgeek: yes, but using what superjoe made, since it has zero downtime code updates
23:17 < superjoe> as is, naught is simply a way to run your node.js server as a daemon and then be able to hot-swap code
23:18 < deviantgeek> this would make it kinda like cpanel for node.js
23:18 < superjoe> and it doesn't keep track of state in a retarded way like forever
23:24 < deviantgeek> Only thing thats stopping me from forking naught and doing this is a lack of comments
23:24 < deviantgeek> for the life of me understanding anything more complicated than hello world is impossible without comments
23:27 < jesusabdullah> there are a few ways to deal with that
23:27 < jesusabdullah> one is to comment stuff
23:27 < jesusabdullah> the other is to code small composable pieces with obvious names
23:27 < jesusabdullah> and of course, there's avoiding doing things that are hard to read
23:27 < jesusabdullah> usually you want some combination thereof
23:27 < substack> I dislike comments in general.
23:28 < substack> Use sparingly. Make them really count.
23:28 < deviantgeek> I comment anything that is communicating between files, or would require leaving the file you are in
23:28 < substack> comments are like a joke-explainer for your code
23:28 < substack> use them only for the really subtle high-brow stuff
23:29 < substack> deviantgeek: you might be suffering from too much code
23:29 < substack> delete some of it where possible
23:32 < deviantgeek> I try to keep things as concise as possible, but being new to javascript i probably write nasty code
23:34 < deviantgeek> for example, module.exports confuses me... I think this is how im suppoesed to use it without causing memory leaks, but I don't really know... http://pastebin.com/wkJqn3cw
23:34 < jesusabdullah> I appreciate comments, but they're really just to keep the story going. "show, not tell" as they say, but it's tough to keep a story going when it's quotes and transcripts only
23:35 < jesusabdullah> memory leaks?
23:35 < deviantgeek> (that file is for a blog tutoriall i was doing, their version of it is here: http://howtonode.org/express-mongodb/articleprovider-mongodb-final.js)
23:43 < nykac_> deviantgeek: only one copy of your module is evaluated afik
--- Log closed Sun Sep 23 00:00:05 2012
