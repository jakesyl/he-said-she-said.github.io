--- Log opened Tue Aug 14 00:00:08 2012
--- Day changed Tue Aug 14 2012
00:00 < rvagg> ok, sounds like I might have to get my Mac VM working to figure this one out
00:01 < mscdex> bwen: http://nodejs.org/docs/v0.8.6/api/crypto.html / createCipher()
00:02 < bwen> mscdex: yeah i'm looking at crypto but i'm a bit lost >_<
00:02 < TooTallNate> Mac VM?
00:02 < TooTallNate> hackintosh?
00:03 < rvagg> vmware workstation
00:03 < rvagg> .. hacked a little
00:03 < TooTallNate> i think i smell what you're stepping in
00:04 < rvagg> huh? are you an unbeliever?
00:11 < DTrejo> i dunt belive in criptography
00:12 < rvagg> I shall make you BELIEVE TooTallNate: http://js.vagg.org/osxss.png
00:13 < rvagg> but it's not really working properly since Workstation 2012 and I'm stuck on Snow Leopard for now..
00:13 < TooTallNate> oh no i believed :)
00:14 < TooTallNate> i used to hackintosh
00:14 < TooTallNate> before i moved to the real thing
00:14 < rvagg> mm.. I don't care enough for OSX to hackintosh
00:14 < rvagg> I know that's blasphemy here tho..
00:15 < TooTallNate> well i guess a VM is a little different
00:15 < TooTallNate> they're in the same family though
00:15 < TooTallNate> (i.e. VMware has to implement an EFI emulator of sorts
00:16 < TooTallNate> only for the bootup
00:18 <@konobi> TooTallNate: not really, you can use HackBoot and chameleon
00:19 < chjj> TooTallNate: vmware doesnt support EFI yet?
00:20 < TooTallNate> chjj: no it does
00:20 < chjj> ah
00:20 < TooTallNate> %s/it has to/it does
00:20 < chjj> ah, gotcha
00:20  * chjj just uses qemu+kvm.
00:20 <@konobi> there's also some sanbarroe hacks you can use to boot with tiano
00:21 <@konobi> chjj: for osx?
00:21 < chjj> konobi: linux
00:21 < chjj> konobi: oh, you mean as a guest?
00:21 <@konobi> ah... for host and guest?
00:21 <@konobi> yeah... i mean quest
00:21 < chjj> konobi: ive never tried osx as a guest, but i think it might work if you used OVMF, which is an EFI firmware for QEMU
00:22 < chjj> a quick google might answer that
00:23 < chjj> konobi: hmm, not sure
00:24 <@konobi> the efi part doesn't matter that much... just trying to work out the qemu args
00:25 < chjj> konobi: qemu is intimidating at first, but you get used to it
00:26 < chjj> i started using qemu after virtualbox started crashing on me pretty regularly
00:27 <@konobi> chjj: i know how to use it... there just seems to be a magic incantation for osx (other than efi)
00:28 < chjj> konobi: oh? well, im pretty sure OVMF would be necessary, but maybe theres something else
00:28 < chjj> IMO OVMF should be included in QEMU now, i wish it were
00:31 <@konobi> chjj: hackboot can bypass that
01:00 < timeturner> wtf is the topic
01:00 < timeturner> lol
01:10 < Joric> did anyone notice node.js (win32 console) seems slower than js in chrome 21
01:11 < rauchg> Joric benchmarks or it didn't happen 
01:15 < TehShrike> Hey, do any of you CA developers have some mystical Silicon Valley-tech-startup network that you could tap into for me?
01:15 < chjj> Joric: id blame windows
01:15 < chjj> Joric: i have no evidence to back that up ;p
01:17 < Joric> okay okay i'll make some tests, i noticed it on bignum multiplications it's like three times slower than in browser
01:18 < TehShrike> bignum?  What library were you using?
01:19 < Joric> http://www-cs-students.stanford.edu/~tjw/jsbn/
01:21 < Joric> the actual code is here http://brainwallet.org/#sign
01:21 < Joric> signing takes much more time in console
01:22 < samholmes> what's a good merchant account that plays well with node.js?
01:22 < TehShrike> samholmes: accepting credit card payments?
01:23 < samholmes> TehShrike: Yes.
01:23 < shama> samholmes: stripe.com
01:23 < CIA-93> libuv: Bert Belder win-signals-wip * r6d69d8c / (include/uv-private/uv-win.h include/uv.h src/win/signal.c): WIP - http://git.io/b0NvYA
01:23 < TehShrike> Yeah, that's just what I was going to say
01:23 < shama> :)
01:23 < TehShrike> I don't think anyone even gets close to Stripe
01:23 < TehShrike> Unless you were maybe going to accept Dwolla payments
01:23 < samholmes> TehShrike: They're that good then?
01:24 < TehShrike> I think it's more that everyone else is so bad
01:24 < TehShrike> I mean, maybe there's another reasonable merchant somewhere
01:24 < TehShrike> I just haven't heard of them
01:24 < TehShrike> Here's a better recommendation: http://www.kalzumeus.com/2012/08/06/stripe-and-ab-testing-made-me-a-small-fortune/
01:24 < mappum> bitcoin :D
01:25 < TehShrike> Are there any good JavaScript bitcoin implementations?
01:25 < TehShrike> That would be cool
01:25 < mappum> http://bitcoinjs.org
01:25 < Joric> very lousy written, i'd say
01:25 < TehShrike> Nice!
01:25 < TehShrike> Joric: which, bitcoinjs?
01:25 < TehShrike> Oh, your bignum library
01:26 < Joric> bitcoinjs - had to use eval for import
01:26 < mappum> that guy is basically who got me into node
01:26 < mappum> he wrote the bignum library too :/
01:26 < TehShrike> :-o
01:26 < Joric> mappum, justmoon?
01:27 < mappum> yeah
01:28 < mappum> Stefan Thomas
01:28 < Joric> well there's a disclaimer 'This is currently pretty raw code. We're planning to clean it up, convert everything into CommonJS modules and put a flexible build system in place.'
01:28 < Joric> there's no commonjs yet, mostly window.*
01:30 < Joric> idk maybe eval() affects perfomance
01:31 < Joric> it used once to bootstrap this thing
01:43 < onebravehog> back
01:45 < mscdex> stephank: i think i may see why the encryption wasn't working... the exchange hash also includes a uint32be length before each value that makes up the hashable blob
01:46 < mscdex> stephank: and prepended zero bytes need to go back in for the values that have 0x80 set on the first byte
02:09 < drudge> websphere lol
02:10 < holzp> is websphere still around?
02:11 < drudge> holzp: my work still uses it on thier as400
02:16 < tomshreds> where is loudbot at?
02:18 < DTrejo> i think loudbot is madeup
02:19 < tomshreds> Try to /query loudbot
02:19 < tomshreds> ;-)
02:19 < tomshreds> I'm intrigued, is it made out of nodejs?
02:31 < TehShrike> Does anybody here have an app.net account?  I want to try to follow all the JS folks who are there
02:31 < tomshreds> There's a public alpha, but you can just read and not write.
02:34 < TehShrike> Not for me and the 11,957 other people who backed it
02:34 < TehShrike> :-)
02:36 <@Nexxy> TehShrike, take comfort in that fact
02:37 < tomshreds> I need a hand, could anyone go like the facebook page of my startup please? I'd just need 3 more likes to got it all setup. I don't really like to ask for such stuff but it would be awesome! Thanks http://www.facebook.com/brainpad.org
02:38 < TehShrike> What happens at 30 likes?
02:39 <@Nexxy> TehShrike, then you can get a real name
02:39 <@Nexxy> like facebook.com/yourcompanyname
02:39 < tomshreds> I have insight from facebook, and that's a dumb prerequisite to submit my page to a local entrepreneur-thingie meeting.
02:40 <@Nexxy> tomshreds, I think a better cover should be a prerequisite
02:40 < tomshreds> It's a local meetup for startups, getting contacts and stuff, and it's part of the conditions to join. Portfolio, facebook page, references, etc
02:41 < tomshreds> Nexxy what's wrong with the cover?
02:41 <@Nexxy> it's all artifactey
02:41 <@Nexxy> you're better than that
02:41 < tomshreds> But facebook compresses the crap out of images
02:41 < TehShrike> It should be red across the whole cover probably :-x
02:41 <@Nexxy> I don't want excuses, I want a pretty cover
02:41 < TehShrike> :-P
02:41 < tomshreds> hahaha
02:41 < tomshreds> The truth is, I should really hire a designer.
02:42 < TehShrike> Just spread it out over the whole cover - re-render the image with the swoop going out wider, and that should be about it
02:42 < TehShrike> It looks kind of weird with half of it being a dark-ish (artifacty) square
02:42 < tomshreds> You mean, scale the logo on the whole width?
02:42 < timeturner> bp? really?
02:43 < TehShrike> tomshreds: well, not scale
02:43 < tomshreds> timeturner ?
02:43 < timeturner> it's cool though
02:43 < tomshreds> why really?
02:43 < timeturner> looks like I'm looking a photoshop logo :P
02:43 < TehShrike> But re-render at the same ratio as the Facebook cover
02:43 < timeturner> just saying
02:43 < TehShrike> tomshreds: probably because of the oil company
02:43 < TehShrike> I'm guessing is what timeturner means
02:44 < tomshreds> Oh haha okay right.
02:44 < tomshreds> TehShrike: thanks for the tip, I'll try this, good idea :)
02:44 < timeturner> I like the name though
02:44 < tomshreds> Thanks! :-)
02:44 < rvagg> maxogden: pull latest master and `npm install` again and it *should* build properly for you now
02:44 < rvagg> maxogden: `npm test` once you have a build, just to confirm all's well
02:52 < papertigers> Hey guys, how could I take an image like http://example.com/image.png and save it to a Buffer?
02:55 < papertigers> right now I am taking the body from request( imageurl, function(err, res, body) {
02:55 < papertigers> and var buf = new Buffer(body, "binary")
02:56 < Hotroot> >> console.log(1 + 2 + blah || 3);
02:56 < purr> Hotroot: ReferenceError: blah is not defined
02:57 < Hotroot> Is there a way to do what I was trying to do there?
02:57 < Hotroot> Or is the bot just messing up
02:57 < Hotroot> I thought you could use that as a shortcut
02:58 < TehShrike> What, blah?
02:58 < deoxxa> blah is clearly not defined
02:58 < Hotroot> To test if something is truthy or falsy
02:59 < deoxxa> yes but it's undefined
02:59 < Hotroot> Right, that always gets me =/
02:59 < deoxxa> also why are you doing it like that
02:59 < TehShrike> >> console.log(1 + 2 + (blah || 3))
02:59 < purr> TehShrike: ReferenceError: blah is not defined
02:59 < deoxxa> you can just use if (blah)
02:59 < deoxxa> or if you want to get fancy, if (!!blah)
02:59 < TehShrike> >> console.log(1 + 2 + typeof blah === 'undefined' ? 3 : blah))
02:59 < purr> TehShrike: SyntaxError: Unexpected token )
02:59 < Hotroot> In those terms?
02:59 < TehShrike> >> console.log(1 + 2 + typeof blah === 'undefined' ? 3 : blah)
02:59 < purr> TehShrike: ReferenceError: blah is not defined
02:59 < rvagg> you've striked out TehShrike 
03:00  * TehShrike goes down swinging
03:00 < rvagg> .. struck..
03:00 < TehShrike> stricken
03:00 <@Nexxy> strikededed
03:00 < Hotroot> >> console.log(1 + 2 + (if (blah) {return 3;}));
03:00 < purr> Hotroot: SyntaxError: Unexpected token if
03:00 < TehShrike> >> console.log(1 + 2 + (typeof blah === 'undefined' ? 3 : blah))
03:00 < purr> TehShrike: undefined; Console: 6
03:01 < TehShrike> There's also
03:01 < TehShrike> >> var blah = blah || 3; 1 + 2 + blah
03:01 < purr> TehShrike: (number) 6
03:02 < Hotroot> console.log(1 + 2 + (if (blah == undefined) ? 3 : blah));
03:02 < Hotroot> Did I break it? 0.o
03:02 < TehShrike> Needs the >>
03:02 < Hotroot> >> console.log(1 + 2 + (if (blah == undefined) ? 3 : blah));
03:02 < purr> Hotroot: SyntaxError: Unexpected token if
03:02 < TehShrike> ...also, that's not how the ternary operator works
03:03 < deoxxa> Hotroot: blah is undefined, so you can't reference it. not sure what's unclear here.
03:03 < TehShrike> Hotroot: this works 1 + 2 + (typeof blah === 'undefined' ? 3 : blah)
03:03 < Hotroot> I'll just .alias = ""; on creation
03:03 < deoxxa> Hotroot: there's a difference between the value being undefined and the actual variable being undefined.
03:04 < Hotroot> Just being lazy, I'll define it on creation
03:05 < Hotroot> Oh wait
03:06 < Hotroot> >> var blah = ""; console.log("1" + "2" + (if (!blah) {return "3";}) );
03:06 < purr> Hotroot: SyntaxError: Unexpected token if
03:06 < TehShrike> That's not how if statements work
03:08 < Hotroot> >> var blah = ""; console.log("1" + (blah ? "blah" : "2"));
03:08 < purr> Hotroot: undefined; Console: '12'
03:08 < Hotroot> Ka-ching!
03:09 < TehShrike> >_<
03:09 < rvagg> >> Object.keys(global)
03:09 < purr> rvagg: ReferenceError: global is not defined
03:09 < TehShrike> Hotroot: please don't treat strings like numbers
03:10 < rvagg> arguments.callee.toString()
03:10 < rvagg> >> arguments.callee.toString()
03:10 < purr> rvagg: ReferenceError: arguments is not defined
03:10 < Hotroot> TehShrike:How am I doing that?
03:11 < Hotroot> I'm not trying to add the numbers, I just realized it looked bad as addition, so I made them strings
03:11 < TehShrike> Gotcha.
03:11 < TehShrike> btw, since blah is defined in that case, you could actually use the || trick there
03:11 < rvagg> >> !!this
03:11 < purr> rvagg: (boolean) true
03:11 < rvagg> >> this.toString()
03:11 < purr> rvagg: (string) '[object global]'
03:11 < TehShrike> >> var blah; console.log("1" + blah || "2")
03:11 < purr> TehShrike: undefined; Console: '1undefined'
03:11 < rvagg> >> Object.keys(this)
03:11 < purr> rvagg: (object) ['numbers_that_add_and_subtract_to', 'print', 'alert', 'obfuscate', 'constant_multiply', 'strip_color', 'version', 'console', 'constant_divide', 'Sol', 'braille', 'numbers_that_add_and_multiply_to']
03:11 < TehShrike> >> var blah; console.log("1" + (blah || "2"))
03:11 < purr> TehShrike: undefined; Console: '12'
03:12 < rvagg> >> Object.keys(this.Sol)
03:12 < purr> rvagg: (object) ['parseHuman', 'parseSol']
03:12  * TehShrike is bad with operator precedence :-x
03:12 < gkatsev> feel free to /msg the bot...
03:12 < rvagg> >> Object.keys(this.braille)
03:12 < purr> rvagg: (object) []
03:12 < Hotroot> >> var blag; console.log("1" + (blag || "2"));
03:12 < purr> Hotroot: undefined; Console: '12'
03:12 < rvagg> ah, cheers gkatsev 
03:12 < Hotroot> Oh neat
03:12 < TehShrike> Did you know that Node gives you your OWN PERSONAL JAVASCRIPT BOT? :-)
03:12 < gkatsev> I think it's enabled. Otherwise, message ecmabot from ##javascript. It's the same bot, mostly.
03:13 < Hotroot> =0
03:13 < TehShrike> srsly!  Just run node from the command-line with no parameters!
03:13 < gkatsev> TehShrike: heh, it's mostly there to show examples and stuff. also, factoids
03:13 < TehShrike> It's like the Chrome JavaScript console, BUT IN YOUR COMMAND-LINE!
03:13 < Hotroot> Hax!
03:13 < gkatsev> >> version
03:13 < purr> gkatsev: (string) '3.6.6.11'
03:13 < gkatsev> also, the bot is written in node
03:13 < rvagg> doesn't annoy people when you run it alone tho TehShrike
03:14 < TehShrike> Oh, right
03:14 < TehShrike> True enough
03:14 < gkatsev> ecmabot can also eval using spidermonkey
03:14 < Hotroot> I was posting it here before so I could show the example of what I needed
03:14 < TehShrike> You could just run node in a crowded place, like a coffee shop, and yell out the commands you're running
03:14 < TehShrike> That could work
03:14 < gkatsev> lol
03:14 < rvagg> heh, I'd like to see a video of that
03:14 < gkatsev> TehShrike: you should get improve everywhere to do that.
03:15 < TehShrike> Oh, improv everywhere?  hah!
03:15 < TehShrike> Or is it improv anywhere?
03:15 < TehShrike> Those people.
03:15 < gkatsev> improv, yes, lol
03:15 < TehShrike> Some sort of "croud-sourced programming" gag...
03:15 < TehShrike> err, crowd-sourced
03:15 < thealphanerd> http://nodeup.com/twentyseven
03:15 < thealphanerd> coool
03:15 < thealphanerd> nodebotics :D
03:16 < Hotroot> Saur Kraut-sourced?
03:16 < TehShrike> lol
03:16 < Hotroot> *sauerkraut-sourced
03:16 < Hotroot> My bad
03:16 < TehShrike> Loud-sourced!
03:17 < Hotroot> Aaaand now I'm craving bratwurst =/
03:21 < Hotroot> userCommands.js:44});^ SyntaxError: Unexpected token )
03:21 < Hotroot> Neat, except that like 44 doesn't exist, and }); doesn't exist anywhere in that .js file
03:24 < Hotroot> And I'm an idiot
03:26 < TehShrike> I know that feeling
03:26 < TehShrike> And not just because I possessed the body of an idiot that one time
03:27 < Hotroot> I forgot that I was fixing up the exported method right before the new one, and forgot to finish it
03:27 < Hotroot> Lots of forgetting
03:33 < Hotroot> What's the thing called that tells you how much CPU/RAM node is using, and what pieces of code are taking what amount of time?
03:33 < Hotroot> A performance monitor?
03:33 < Hotroot> Oh, profiler, right, sorry
03:35 < TehShrike> lol, I was going to say "the process manager" :-P
03:35 < TehShrike> Also, lulz: http://branch.com/b/choosing-the-best-technology-for-my-website
03:36 < Hotroot> ^^ lol
03:37 < Hotroot> Best line "I'm not super impressed with multi-core Perl. If you take the semicolons off of JS, it's about as fast."
03:41 < SEToChan> hi, i having problems running nodejs packaje from console
03:41 < SEToChan> anfter successfull instalation of this package https://github.com/operasoftware/ucss
03:41 < SEToChan> i can't just run ucss from console
03:42 < SEToChan> it say that there are no such command
03:42 < SEToChan> how to solve this?
03:43 < Franz__> anybody who works with canvas here?
03:44 < TehShrike> SEToChan: what command?
03:44 < TehShrike> Oh I see
03:44 < SEToChan> i installed it with "npm install ucss"
03:44 < SEToChan> and then i suppose i can call "ucss" from console
03:45 < Hotroot> ./linux-tick-processor v8.log does absolutely nothing
03:45 < SEToChan> but that command is not found
03:46 < Hotroot> Is there a better way to graph out v8.log?
03:46 < TehShrike> SEToChan: I don't know much about running node.js programs from the command-line, I generally just use them as libraries - but have you tried running "node ucss"
03:48 < SEToChan> TehShrike: if i try "node ucss" then i got "Error: Cannot find module '/home/set/ucss'"
03:49 < TehShrike> Are you in the directory where you installed ucss, or in the directory above it?
03:51 < SEToChan> i'm in same directory where i was while executing "npm install ..."
03:51 < SEToChan> and it's my home directory
03:52 < SEToChan> i'm under ubuntu
03:52 < TehShrike> I don't know
04:03 < Runey> Hi. Is there anyone on who might be able to help me sort out an error when installing Python2.7.3?
04:06 < Runey> wow looks like I cleared the room lol
04:07 < zak__> try asking in a python channel
04:09 < Runey> sorry o.O I must of clicked the wrong link. Node is next on my list after I get Python sorted out.
04:13 < deoxxa> i want to use a stream for non-buffer objects
04:13 < deoxxa> is this crazy?
04:45 < AAA_awright> Alright, what *should* I be using for passing simple JSON structures between the server and client?
04:45 < AAA_awright> Historically it's been socket.io but that's such a big bloated mess now I think there's a simpler library?
04:46 < deoxxa> AAA_awright: depends on whether or not it needs to be "realtime"
04:47 < AAA_awright> You know, bi-directional, ASAP
04:47 < TehShrike> Is dnode bloated, then?
04:47 < deoxxa> yeah, there's "shoe", which sits on top of about 20 layers of other stuff
04:47 < axefrog> what's the best mocking framework for node?
04:48 < TehShrike> Probably internet forums
04:48 < TehShrike> Or YouTube
04:48 < deoxxa> zing
04:48  * TehShrike takes a bow
04:48 < axefrog> hah. I see what you did there.
04:48 <@maxogden> rvagg: built and tested successfully
04:48 < deoxxa> AAA_awright: https://github.com/substack/shoe might fit (get it)
04:48 < substack> hahaha
04:49 < AAA_awright> i c wat u did thar
04:49 < axefrog> but seriously. nodemock only has 66 followers. Wondering if nobody mocks :P
04:49 < deoxxa> i'm a comedic genius
04:49  * TehShrike gives that pun a thumbs up
04:49 < axefrog> he's a punny guy
04:49 < substack> TehShrike: dnode in 1.0.0 just went through a heavy pruning process of de-bloatification
04:50 < substack> namely removing the direct dependency on socket.io in favor of a streaming api
04:50 < TehShrike> Very cool!
04:50 < deoxxa> substack: where can i find information about the dnode protocol?
04:50 < TehShrike> Unrelated: what are the odds of you switching shoe to use node-gyp instead of node-waf? >_<
04:50 < TehShrike> deoxxa: https://github.com/substack/dnode
04:51 < substack> TehShrike: that must be some subproject
04:51 < substack> deoxxa: https://github.com/substack/dnode-protocol/blob/master/doc/protocol.markdown
04:51 < deoxxa> oh
04:51 < deoxxa> der
04:51 < deoxxa> how did i not find that before
04:52 < deoxxa> should write cnode
04:52 < TehShrike> chode?
04:53 < deoxxa> D:
04:53 < AAA_awright> Is there like, a... simple (gasp) socket.io?
04:53 < deoxxa> engine.io maybe? i haven't looked at it very closely, but it's apparently a complete rewrite of the socket.io stuff
04:53 < AAA_awright> Or some way I can configure it where it doesn't need more than a dependency or two and none of this event or .json.all.on().whatever chaining nonsense
04:54 < AAA_awright> It seems to be something related to socket.io but there's not enough info in the README to tell if it's useful to me >_>
04:57 <@Nexxy> we just figured out blue's clues! we just figured out blue's clues!
04:57 <@Nexxy> damnit
04:57 <@Nexxy> wrong channel
04:59 < TehShrike> lol
04:59 < TehShrike> And now I want to know what channel that was meant for
04:59 <@maxogden> AAA_awright: sockjs
05:00 < AAA_awright> maxogden: Do you have a link?
05:00 <@maxogden> it is googleable
05:00 < AAA_awright> Often it's not for odd reasons
05:00 < AAA_awright> hm
05:00 < axefrog> does node have a high precision timer?
05:00 < TehShrike> Google doesn't rank Github highly enough yet
05:00 < TehShrike> axefrog: that's a good question
05:01 < axefrog> aka no idea? ;)
05:02 <@maxogden> axefrog: process.hrtime
05:02 < axefrog> ah cheers
05:02 < chrisdickinson> maxogden: do you have any thoughts about making window.postMessage/onmessage streamable?
05:02 <@maxogden> protip use http://nodejs.org/api/all.html
05:02 < chrisdickinson> between tabs, i mean?
05:02 <@maxogden> chrisdickinson: i endorse that idea
05:02 < axefrog> the interwebs are rife with sarcastic bastards ;)\
05:02 <@maxogden> chrisdickinson: might be similar to https://github.com/maxogden/domnode-webworker
05:03 <@maxogden> axefrog: i was serious :) that is all the node docs on one page which makes it easy to search for things
05:03 < rvagg> maxogden: thanks! some basic docs will be my next job
05:03 < axefrog> ah righteo, i thought you were just lolrtfmnoob!!!11
05:03 < AAA_awright> axefrog: process.hrtime
05:03 < TehShrike> chrisdickinson: between tabs?  Perhaps that would be a fine excuse to use http://browserver.org/
05:03 < axefrog> cheers
05:04 < chrisdickinson> TehShrike: window.postMessage already does communication between tabs locally :)
05:04 < axefrog> I've been using .Net for the past ten years and I'm finding I have to work out what translates and what doesn't.
05:04 < TehShrike> chrisdickinson: daww :-)
05:05 < chrisdickinson> but! it would be cool if in the future (the webrtc future) there were a streamable interface between browsers.
05:05 < chrisdickinson> then you could swap out postMessage streams for webrtc streams and everything would be a-okay.
05:05 <@maxogden> it would be cool if there were a streamable api in browser for anything that didnt buffer all the data in one giant buffer
05:06 < chrisdickinson> thinking of xhr.responseText?
05:06 < chrisdickinson> (also fun: IE8 never garbage collects "new XMLHttpRequest", like… ever. until it crashes.)
05:06 <@maxogden> xhr does it, filereader does it
05:07 < chrisdickinson> yeah. not to mention the lovely sync api on top of localStorage.
05:08 < chrisdickinson> :(
05:08 < AAA_awright> How am I supposed to `make install` a Node.js executable?
05:08 < AAA_awright> Especially when there's local libraries I depend on?
05:09 < AAA_awright> you can't just go require('./library') because the path changes after install
05:09 < TehShrike> You put your app in npm, or your own instance of it
05:09 < TehShrike> And then do npm install!
05:10 < AAA_awright> TehShrike: Unfortunately that doesn't answer my question at all
05:11 < TehShrike> I'm sorry :-x I may have misunderstood the question.
05:11 < AAA_awright> I mean like, where do you copy the libraries and executables to
05:11 < AAA_awright> Obviously something will go into /usr/local/bin
05:12 < AAA_awright> chrisdickinson: We were discussing HTTP requests between browsers a while ago, it'd be more suitable for APIs than loading webpages because you'd have to re-establish the connection when loading the page, heh
05:12 < AAA_awright> history.pushState would be a nice matchup
05:13 < chrisdickinson> AAA_awright: i'm mostly just looking at local communication, between two already-open tabs.
05:13 < chrisdickinson> for example: having an image open in an editor in one tab, whose edits immediately propagate to pages open in other tabs who use those images.
05:13 < chrisdickinson> s/image open/image editor open/g.
05:16 < axefrog> wow, so some simple benchmarking sisn't yield any useful results. node (or V8?) seems quite inconsistent with how long an operation takes from one iteration to the next
05:16 < axefrog> isn't^
05:17 < axefrog> running the same like over and over again takes anywhere from 5ms to 900ms
05:17 < axefrog> like^line
05:17 < AAA_awright> axefrog: That's probably garbage collection
05:17 < AAA_awright> there's some options you can pass V8 to modify how that works
05:18 < axefrog> this is all i'm doing, and it's just out of curiosity, not for anything practical:
05:18 < axefrog> var d1 = process.hrtime(); for(var i=0;i<1000000;i++){var x = Math.random()*123456} var d2 = process.hrtime();
05:19 < axefrog> then i get the difference of d1 and d2.
05:19 < AAA_awright> Also the rule of thumb is don't choose one equally efficent style of code over another because it's faster
05:19 < AAA_awright> V8 changes fast enough that your optimizations quickly won't matter
05:19 < axefrog> oh it reoptimizes on the fly?
05:20 < AAA_awright> Well, it can do that too
05:20 < AAA_awright> But I mean from one version to another
05:20 < AAA_awright> axefrog: For instance, if you're not doing anything with x, it *might* detect that and skip generating the random number altogether
05:20 < axefrog> I'm used to compiled languages where you get pretty much the same result every time a benchmark runs
05:21 < AAA_awright> ECMAScript has garbage collection so it messes some timing tests up
05:21 < axefrog> ok
05:21 < AAA_awright> axefrog: Just skim through the output of `node --v8-options` and take a look
05:21 < axefrog> tbh it's probably a terrible test. i need to do something that's actually cpu [semi-]intensive in there
05:21 < axefrog> ok cheers
05:22 < AAA_awright> crankshaft is the one that re-optimizes code when it gets run enough times
05:23 < axefrog> ah
05:23 < AAA_awright> Turning it off might make it do the most aggressive optimizations on startup, instead of delaying them (which normally saves time in a web browser)
05:23 < AAA_awright> I'm not quire sure
05:23 < axefrog> i actually just wanted to see how quickly v8 runs through a loop as compared to C#, which I normally use\
05:24 < axefrog> but like I said, probably a bad test because it operates differently
05:25 < AAA_awright> maybe --gc_interval 1 might force it to do garbage collections every iteration... or horrible, horrible things
05:25 < axefrog> heh
05:30 < axefrog> interestingly, I've noticed that when ever I use the words ".net" or "C#", node folks' eyes usually glaze over.
05:30 < axefrog> as opposed to the reverse, in that I find other technologies interesting, personally..
05:46 < stephank> mscdex: yeah, it's encoded like any other message
06:02 -!- maxogden changed the topic of #Node.js to: node.js - check out these sweet estonian nature webcams http://www.eenet.ee/EENet/kaamerad
06:37 -!- pratchett.freenode.net changed the topic of #Node.js to: node.js - websphere eat your heart out
06:37 < tasslehoff> Still fumbling a bit on the tar-stuff. I have a folder on my server that I want to serve tar'ed to my user. Is the idea to create a stream of type tar, and serve that directly to the user without ever creating a tarfile on disk on my server?
06:38 <@konobi> tasslehoff: node-tar
06:38 <@konobi> you can even pipe to gzip to get a tgz
06:39 <@konobi> the fstream helps a bunch with that
06:39 < tasslehoff> konobi: yeah, it's node-tar I'm trying to understand how to use.
06:40 <@konobi> tasslehoff: isaacs fstream helps a bunch there
06:40 <@konobi> isaacs: i no longer have the example for use... can you remember it?
06:40 < tasslehoff> konobi: I'm new to both node.js and webdevelopment, so I'm trying to change my mindset :)
06:40 < justsee> yy
06:40 <@isaacs> konobi: example of what now?
06:41 <@konobi> oh
06:41 <@maxogden> goddamnit internet i just want to read this stream of estonian osprey images and convert it to ascii art http://www.eenet.ee/EENet/kalakotkas.html
06:41 <@konobi> i do actually, saved it in a personal buffer... 2 secs
06:41 <@maxogden> why is that so hard?
06:43 <@konobi> tasslehoff: fstream.Reader({ type: "Directory" , path: mydir }).pipe(tar.Pack({})).on("error", function(){ res.statusCode = 500; res.end('Unable to create tarball'); }).pipe(zlib.Gzip()).on("error", function(){ res.statusCode = 500; res.end('Unable to gzip tarball'); }).pipe(res).on("close", function(){ res.end() });
06:44 < tasslehoff> konobi: thanks!!
06:45 <@konobi> tasslehoff: no warranty, etc.
06:45 <@konobi> it just worked to the purposes i needed
06:46 < tasslehoff> konobi: fairly close to what I need, and helps a lot in understanding stuff
06:46 <@konobi> tasslehoff: cool
06:55 < harb> hello
06:55 < MARXBRONSON> hello
07:18 < tasslehoff> konobi: didn't even have to understand stuff, it just worked :D
07:19 < rvagg> substack: hater
07:21 < tasslehoff> konobi: do you know how I can get a .tar suffix on the file I send?
07:22 < substack> rvagg: I have been known for such things!
07:30 <@isaacs> konobi: you got the close/end switched
07:30 <@isaacs> konobi: need the .on("close") to be before the .pipe(res)
07:31 <@isaacs> konobi: actually, that whole end/close bit is unnecessary, since you'er piping to the res
07:31 <@isaacs> "end" will emit before "close" and will end the res, making another call to end() a no-op
07:32 < stephank_w> npm -g update currently trashes my npm install?
07:36 <@isaacs> stephank_w: probably a bug.
07:36 <@isaacs> stephank_w: npm install npm -g <-- that pretty mcuh always works, though
07:37 <@isaacs> stephank_w: you can also always use the sh script or the node installer
07:37 <@konobi> isaacs: ah
07:38 < Emmanuel`> hey what happen to the (mostly nice) express ver long one page guide ?
07:38 < Emmanuel`> they revamped the website and I can't find those information anymore
07:38 < Emmanuel`> (or is it me looking at the wrong place ?)
07:40 < timoxley> Emmanuel` yeah, it's gone
07:41 < Emmanuel`> that.. sucks
07:41 < tasslehoff> isaacs: so just cut everything after .pipe(res) ?
07:41 <@isaacs> tasslehoff: yah
07:43 < gnoirzox> heloo
07:43 < gnoirzox> hello*
07:45 <@konobi> isaacs: rightio... that was the example at the time ^_^
07:51 < Init--WithStyle-> Hey all, I need to convert the information inside a .exr heightmap file to my mongoDB database
07:51 < Init--WithStyle-> any ideas where to start?
07:53 < tasslehoff> isaacs: how can I make the fstream I serve get the suffix .tar on the receiving end?
07:53 <@isaacs> tasslehoff: content-disposition header
07:53 <@isaacs> http://www.ietf.org/rfc/rfc2183.txt
07:54 < Init--WithStyle-> Anyone have an idea about reading in heightmap data?
07:54 < rvagg> Init--WithStyle-: google's going to be your best bet for that
07:54 < Init--WithStyle-> aight
07:54 <@isaacs> res.setHeader('content-disposition', 'attachment;filename=flerpdedoop.tar')
07:55 <@isaacs> tasslehoff: you can also set other stuff, like created date, modified date, etc.
07:58 < tasslehoff> isaacs: great. thanks. now I've done what I had-to-get-done-real-fast. hopefully I can sit back and learn more about what I just hacked together :)
08:40 < bobby_ct> hi guys real noob question here! Is listener.broadcast(text) not a part of socket.io anymore ?
08:41 < yyfrankyy> s
08:44 < aroman> nom seems to be exploding when installing on node 0.8.6: http://snippi.com/s/6wkr4ue
08:44 < aroman> s/nom/npm/
08:48 <@konobi> TomY: ullo
08:48 < rvagg> hey aroman, check your ~/.npmrc, is it there? does it have stuff in it?
08:49 < aroman> rvagg: not there
08:49 < aroman> what's even more curious is that npm also explodes even when doing `nom -h`
08:49 <@konobi> TomY: FMT?
08:49 < aroman> err wait, i lied
08:50 < rvagg> aroman: do you have a /usr/local/etc/npmrc ?
08:50 < aroman> rvagg: it works fine unless it's in global mode
08:51 < aroman> so `npm install foo` works, but `npm -g install foo` doesn't.
08:51 < rvagg> hm, that's an odd error
08:51 < rvagg> have you tried `sudo npm -g install foo` ?
08:51 <@konobi> rvagg: bad man
08:52 < aroman> yeah I thought nom was never supposed to run as root?
08:52 < aroman> npm* damn autocorrect
08:52 < rvagg> depends on the OS
08:52 < rvagg> what OS are you running?
08:52 < aroman> i'm on OS X
08:52 <@konobi> it'll be relative to node... so depends on where/how you installed node
08:53 < ashnur> morning
08:53 < stephank_w> aroman: I have the same. How did you install? I install using nvm, and a clean install works, but as soon as I npm -g update things break.
08:53 < rvagg> konobi: see the paste, /usr/local/
08:53 < stephank_w> aroman: <@isaacs> stephank_w: probably a bug.
08:53 < aroman> stephank_w: just the installer on npmjs.org
08:53 < ashnur> could you please tell me what wrong with this: http://pastie.org/4472637 ? All I got is 404 and "Cannot GET /"
08:53 < aroman> huh interesting
08:54 < aroman> is there any way to 'reset' npm?
08:55 < rvagg> rm -rf ~/.npm
08:55 < standoo> jo
08:56 < aroman> well shit
08:56 < aroman> that fixed it
08:56 < stephank_w> ah :)
08:56 < aroman> must've been a bad upgrade path from 0.8.X -> 0.8.6
08:56 < aroman> i did need to run it as root though
09:02 < yyfrankyy> can `npm install -g` run w/o sudo ?
09:03 < rvagg> not on Linux if you're working in /usr/local/, unless you've done wholesale permission changes in there
09:04 < rvagg> on OS X, it's all black magic to me, *shrug*
09:04 < rvagg> the cool-kids will have to pipe up on that one
09:04 < yyfrankyy> but how can `homebrew` do that ? All the packages installed by `homebrew` go to `/usr/local/Cellar/`
09:04 < harb> can i turn my computer into a website host?  i.e. i made an app that works on the localhost, but i want to test that it works on another computer
09:05 < deoxxa> bitches don't know 'bout my `npm config set prefix ~/local'
09:05 < yyfrankyy> =,=
09:05 < rvagg>  /usr/local/ is for installs! don't mess my home dir
09:05 < yyfrankyy> that should be set by default!
09:05 < rvagg> no!
09:05 < harb> no to me?
09:06 < rvagg> sorry harb, no to deoxxa
09:06 < deoxxa> =3=
09:06 < rvagg> are you on a shared server or something deoxxa where you need to care?
09:06 < harb> we have a lot of node users here
09:06 < deoxxa> no, i just like keeping everything isolated to one place
09:06 < rvagg> harb: unless you bind your listen() to a localhost/127.0.0.1 then it'll bind to all addresses of your computer, just point another computer to your local computer's IP
09:07 < rvagg> deoxxa: my computer is *one place*
09:07 < deoxxa> i know that i can't write outside ~/ so anything i do as my user is going to live only in my home directory - or as any other user, will live in their home directory
09:07 < harb> rvagg: how do i point another computer to my local computer's IP?
09:08 < deoxxa> as soon as you sudo up, the gloves come off and you have no idea where things are really going
09:08 < harb> rvagg: i have a node server running
09:08 < deoxxa> (especially considering the environment changes that come from sudo etc)
09:08 < rvagg> ... back in my day we had no `sudo`, I still find it weird and often just `sudo su` to get real stuff done!
09:09 < rvagg> harb: you're going to need to figure out your ip address
09:09 < rvagg> then http://ipaddresshere:port/
09:09 < harb> rvagg: is that all it takes?
09:10 < rvagg> should be!
09:10 < deoxxa> bah, back in your day they didn't have the concept of "days", rvagg. it was believed that the sun was drawn across the sky in a chariot by horses.
09:10 < deoxxa> (in reality i have no idea how old you are)
09:10 < rvagg> bah, you and your fancy science, those horses deserve respect n00b!
09:10 < deoxxa> (guessing it's older than me though)
09:11 < harb> rvagg: i tried that on my same computer
09:11 < harb> rvagg: instead of going to localhost:8888
09:11 < harb> i went to myipaddress:8888
09:11 < harb> and it was an error
09:11 < harb> lol
09:12 < rvagg> but it worked on localhost:8888?
09:12 < harb> yes
09:12 < rvagg> are you just doing a listen(8888) ?
09:12 < harb> i used my public ip address
09:12 < rvagg> ok, so I guess you have a firewall issue, probably being blocked
09:12 < rvagg> what OS?
09:12 < harb> i'm doing a listen
09:13 < harb> http
09:13 < harb> mac os
09:13 < rvagg> ya, but listen can take multiple arguments, if you just have one then it should bind to all addresses
09:13 < rvagg> ok, you need to look at your firewall settings, but I have no idea, OS X person here want to help?
09:13 < harb> just one
09:15 < harb> rvagg: don't worry about it; thanks for trying :)
09:21 < rvagg> sorry harb, I need to learn me some fancy OS X stuff some time
09:21 < stephank_w> harb: system prefs -> security & privacy -> firewal?
09:22 < rvagg> I suspect it's probably an application-based firewall, you may need to say that 'node' has permission to wreak havock
09:22 < stephank_w> I never use it, but figure you'll find what you need there.
09:22 < stephank_w> if it's completely disabled, it *should* already work
09:22 < harb> my firewall is off
09:22 < harb> that is not the issue
09:22 < rvagg> ok, so you're sure you're getting the right ip address?
09:23 < harb> pretty sure
09:23 < harb> i just used google
09:23 < rvagg> oh, don't do that
09:23 < harb> it gave me my public ip address
09:23 < rvagg> look locally
09:23 < harb> how?
09:23 < rvagg> that'll probably be your gateway address
09:23 < rvagg> system prefs somewhere?
09:23 < rvagg> ifconfig -a in a terminal?
09:23 < picto> good morning
09:23 < stephank_w> yeah, you can see it in system perfs -> network too
09:24 < harb> i trid that
09:24 < harb> tried*
09:24 < harb> the ifconfig -a
09:24 < harb> i dont see an ip address
09:25 < rvagg> 'inet addr' ?
09:25 < harb> ipv4 address?
09:25 < rvagg> yerp
09:25 < harb> i'll try that
09:26 < harb> works
09:26 < harb> works on my computer
09:26 < rvagg> should work on computers on your local network
09:26 < harb> now, if i type that same thing into another computer
09:26 < harb> it should work?
09:26 < harb> my local network?
09:26 < rvagg> connected to the same gateway
09:26 < harb> you mean the wifi network?
09:26 < rvagg> your address is 192.168.... ? or 10.0.... ?
09:26 < harb> 10.0
09:27 < rvagg> ya, so it's a private network, won't work beyond your gateway unless you configure your gateway to forward traffic for that port
09:27 < harb> i heard port forwarding is dangerous
09:27 < rvagg> but it should work for any other computer on your local network, wifi or whatever is plugged into your gateway/router
09:27 < harb> rvagg: do you know a lot about servers?
09:28 < rvagg> if you have control over what's running on that port and you trust your own software then it's cool
09:28 < harb> how do i maintain control?
09:28 < harb> also, do servers simply port forward?
09:28 < harb> i'm wondering how the server works
09:28 < rvagg> well, what port are you using? 8888? nothing else is likely to run on that port, forwarding traffic for that port only should be fine if you trust your app
09:29 < harb> i get that it handles incoming requests, but how is a bit of a mystery
09:29 < picto> I think my problem is the same, on localhost the server works but not from the web
09:29 < rvagg> sorry harb, being dragged away
09:29 < rvagg> back a bit later
09:29 < harb> rvagg: ok
09:37 < stephank_w> harb: Servers don't port forward, it's something your router does. Your can configure your router so that when it sees a connection to PublicIP:80, it forwards it to 10.0.x.x:8888.
09:38 < TomY> konobi: hey
09:38 < TomY> FM
09:39 < TomY> u?
09:39 <@konobi> TomY: was FMT once upon a time
09:40 <@konobi> out at white city
09:40 <@konobi> just interesting noticing auntiw folks dropping in
09:41 <@konobi> *auntie
09:43 < harb> has anyone here ever played Shattered Galaxy?
09:43 < harb> i'm trying to find out how to code my own video game
09:43 < harb> i want it to be mmo rts
09:46 < stephank_w> harb: An MMO is, really, an enormous undertaking: http://gamedev.stackexchange.com/questions/90/why-is-it-so-hard-to-develop-a-mmo
10:03 < tasslehoff> konobi: I'm serving a dir of 270MB, and the fstream-line takes a lot (more than 10 times) longer then a direct scp of the directory.
10:05 < tasslehoff> don't know what takes time, but perhaps it's better to create a temporary tarfile and serve that one instead.
10:05 < medice> mmos are only lucrative to big corporations that have enough skilled people to pull it off and give enough content or interesting gameplay
10:05 < medice> well, some exceptions like states in that stackexchange
10:05 < medice> stated
10:06 < medice> since you have to actually pull in enough people to inhabit that world
10:06 < medice> big teams have more advertizing power and more following
10:07 < medice> and all the difficulties of actual development stated in that url above
10:08 < txdv> If I do 5 sequential zlib.unzips, will the callbacks be called in the same order?
10:09 < medice> if the next unzip happens in the callback of the previous one, then surely yes..
10:09 < medice> but otherwise no quarantee of order of when they are finished
10:10 < txdv> what methods are there in js to guarantee sequential ordering?
10:11 < SomeoneWeird> use a control library, have a look at seq or something
10:11 < SomeoneWeird> txdv, ^
10:11 < txdv> I am doing a for loop 154 times and requesting zlib.unzip 154 times, now I want the output to be returned in sequential order as well, according to the requests
10:11 < txdv> SomeoneWeird: yeah, I am asking for some library names
10:11 < SomeoneWeird> eh
10:12 < SomeoneWeird> you really shouldn't mix async and sync if you don't know what you're doing
10:15 < medice> well, there's plenty of ways you can hack your way around that too, if you dont want to use control libraries
10:15 < medice> have a list of the files and count how many files are finished etc
10:16 < medice> just a simple integer counter
10:17 < txdv> I know what I am doing, I am very well aware of the issues with async and sync.
10:17 < tasslehoff> anyone got a clue why serving a directory is so very slow with: fstream.Reader({type: "Directory", path: dir}).pipe(tar.Pack({})).on("error", function(){res.statusCode = 500; res.end('Unable to create tarball');}).pipe(res); ?
10:18 < deoxxa> txdv: the zlib module uses a thread pool so you don't have a guaranteed order of execution
10:18 < txdv> a ok
10:19 < deoxxa> txdv: https://github.com/caolan/async is what i use for this kind of thing, it works well for me. there are plenty of options though if you have a poke around the npm search results for "async" or "flow control" or that kind of thing.
10:20 < tasslehoff> serving a 270MB file takes 20 minutes this way, and 2m16s with a normal scp.
10:26 < txdv> http://paste.ubuntu.com/1146572/ - I have this error when using npm (worked yesterday), does anyone have advice what to do?
10:29 < txdv> nevermind, I just did a make install of node
10:41 < rvagg> many aussies here atm?
10:41 < rvagg> wondering what t
10:41 < rvagg> wondering what the interest level would be for a NodeConf.au
10:43 < deoxxa> rvagg: i'm for it
10:43 < rvagg>  where are you at deoxxa? melbourne isn't it?
10:43 < deoxxa> yeah, melbourne
10:43 < deoxxa> there's a few of us down this way
10:43 < deoxxa> couple of people in brisbane too
10:43 < rvagg> mmm, I've noticed
10:44 < rvagg> costly to help pay for international speakers to fly in, wouldn't be a cheap exercise
10:44 < rvagg> I might talk to mikeal about it some time
10:44 < deoxxa> he's also .au?
10:45 < rvagg> no, but he's the conference guru
10:45 < deoxxa> ah
10:45 < rvagg> I'm sure he'd be keen to at least offer advice and help get it going
10:45 < deoxxa> i'd be down for participating in some way if needed
10:45 < deoxxa> though unfortunately all i have to offer is time :<
10:46 < rvagg> that'd probably be good enough!
10:46 < SomeoneWeird> im in melb too
10:46 < rvagg> I'd like to hear rioter's story on jsconf.au tho
10:46 < deoxxa> should talk to timoxley, he's involved with that in some capacity
10:49 < rvagg> I wonder if it's difficult to run community events here due to cost, perhaps that's why we mainly see the larger commercial-type events
10:50 < deoxxa> i know some of the guys who run ruxcon (a security conference here), and cost isn't sooo bad
10:51 < deoxxa> it's mostly just that there's a pretty small audience and not a lot of traction for conferences
10:53 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:08 < tasslehoff> isaacs: sorry if I'm too verbose today, but have you got any ideas what I can do to increase the throughput when transferring files with the line konobi gave me? since I use node-tar and fstream I figure you're the guy to ask :)
11:14 < rvagg> you'll be waiting at least 4 hours for an answer to that tasslehoff 
11:14 < rvagg> check this out, copying the contents of one database to another (key/value store):
11:14 < rvagg> copy = function (srcdb, dstdb, callback) { srcdb.readStream().pipe(dstdb.writeStream().on('close', callback)) }
11:14 < rvagg> streams!
11:14 < deoxxa> rvagg: how do you do streams when it's not buffers?
11:15 < rvagg> object streams
11:16 < rvagg> {key:<key>, value:<value>}
11:16 < tasslehoff> rvagg: because he's away from irc?
11:16 < rvagg> he's in SF, asleep
11:16 < deoxxa> rvagg: i see. so you just use the same api but instead of buffers, it's objects?
11:17 < deoxxa> like, i understand how it would work, i just didn't know that people were using streams for non-buffer stuff
11:17 < rvagg> apparently they are!
11:17 < rvagg> I talked to dominictarr about it the other day and he opened my eyes
11:17 < deoxxa> i see
11:17 < rvagg> https://github.com/dominictarr/event-stream/
11:18 < rvagg> and consider fstream too, streaming whole directories, basically the same thing, key=value
11:18 < rvagg> but in that case, the value is another stream, one for each file
11:18 < rvagg> in my case, both the key and the value could potentially be buffers
11:18 < deoxxa> yeah
11:19 < deoxxa> that's really interesting actually
11:19 < rvagg> I'm also going to have wrapper streams that just spit out keys or values so it'll be compatible with standard streams
11:19 < deoxxa> mmm
11:20 < rvagg> my read & write streams are in here: https://github.com/rvagg/node-levelup/tree/master/lib
11:23 < tasslehoff> rvagg: cool. then he's rested and ready to help me when he awakes ;)
11:23 < rvagg> heh, I'm sure he'll be thrilled!
11:48 < deoxxa> rvagg: reading through that event-stream stuff, looks pretty neat
11:56 < rvagg> deoxxa: I'm going to try and make mine compatible with all that and then I should be able to stream & copy whole databases over the wire with simple pipes
11:56 < deoxxa> that'd be awesome
12:47 < hij1nx> is anyone else seeing process.title not working on 0.8+/Darwin?
12:48 < hij1nx> seems to work fine on linux...
12:49 < hij1nx> someone just mentioned they though it was broken since 0.6.x
12:50 < MerlinDMC> hij1nx, on osx i see a process.title=='node'
12:51 < MerlinDMC> changeing doesn't work
12:53 < hij1nx> MerlinDMC: confirmed, it no longer works.
12:54 < MerlinDMC> maybe a lion/mountain lion thing?
12:54 < hij1nx> MerlinDMC: its not xplatform, so i guess no one cares? i thought it was really useful
12:54 < hij1nx> it worked on lion, its an 0.6.x+ issue.
13:01 < TrahDivad> Can somebody familiar with Mongoose tell me if there is a way to "unset" a variable through a Query?
13:02 < ProblemEmitter> any full-featured IRC daemon written in node.js yet?
13:03 < mscdex> ProblemEmitter: probably somewhere
13:07 < RLa> TrahDivad, maybe you can do that through low-level api
13:07 < TrahDivad> RLa: I'll go down to native mongo if I have to. I was just curious if I could avoid it.
13:07 < mscdex> ProblemEmitter: here's one that's on npm: https://github.com/alexyoung/ircd.js
13:07 < mscdex> not full featured yet
13:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:34 < PSvils> Hey all!
13:34 < PSvils> are there any existing poker modules for Node.js?
13:34 < shanse> poker module?
13:35 < deoxxa> poker..?
13:35 < deoxxa> like, the card game?
13:35 < leonardo> *poker face*
13:35 < PSvils> yeah
13:35 < PSvils> poker card game...
13:35 < PSvils> :D
13:35 < shanse> npm search gives me 3 results
13:38 < PSvils> mhm, but are they complete?
13:38 < PSvils> I checked out a few of them, seems like they're works in progress
13:38 < shanse> I have no idea
13:39 < niftylettuce> PSvils shanse https://betable.com/
13:39 < snodgrass23> @TrahDivad  I'm pretty sure $unset is available now in Mongoose.  https://github.com/LearnBoost/mongoose/commit/f3db3eaf0776af6994e332ec47d416f19f494ec5
13:41 < PSvils> niftylettuce: that's more of a platform for real money no?
13:42 < RLa> is there a reason why i should use one of those 50 js doc packages in npm reg instead of just slapping my own template on top of dox?
13:42 < pdgreen> Does anyone know if node.js does anything funky with Array.forEach()?  I have code that hangs inside of Array.forEach().
13:43 < PSvils> pdgreen: I'm no expert, but are you modifying the array with the forEach() ?
13:43 < RLa> and what you mean by hang? 100% cpu?
13:44 < wink_> modifying it is ok
13:44 < rvagg> pdgreen: no funkyness going on, it's the same implementation you'll find in Chrome
13:44 < wink_> something in your foreach callback is busted
13:44 < RLa> maybe it's infinite array :)
13:44 < pdgreen> I'm not modifying the array.  In fact at this point, I only have a couple console.log() statements and an assignment
13:44 < RLa> so paste whole code somewhere
13:45 < wink_> pdgreen: gist it, how certain are you the hang is in your foreach?
13:45 < wink_> because it sounds like it isnt :p
13:45 < pdgreen> Well, in my forEach, I have console.log(); assignment; console.log();
13:45 < pdgreen> The first log show up, the second doesn't
13:45 < pdgreen> but I'll gist my code
13:48 < pdgreen> https://gist.github.com/3349395
13:49 < pdgreen> lines 24 to 32 is where the problems seem to be having
13:49 < pdgreen> I suppose that console.log() isn't showing up because it is being buffered.
13:51 < rvagg> no, that won't be your problem
13:51 < rvagg> likely an uncaught exception
13:51 < rvagg> do a try{}catch() in your forEach callback and see what's there
13:51 < rvagg> or listen for uncaught: http://nodejs.org/docs/latest/api/process.html#process_event_uncaughtexception
13:52 < PSvils> make sure that you have path and childPath correctly defined
13:53 < rvagg> anyway, I'm not here anymore, have fun with it!
13:53  * rvagg = gone
13:55 < pdgreen> Thanks!
14:02 < hillct> Good morning all. I got a new retina display macbook yesterday and found that the OSX node package seems to have a problem relating to platform type. whig manifests when using native hooks, which fail reporting that it's looking for i385 rather than x86_64
14:03 < hillct> Has anyone else seen anything similar?
14:04 < hillct> My solution was to remove the packaged build and use the home-brew recipe instead
14:04 < hillct> which behaved properly
14:25 < eaSy60> Hello
14:25 < AvianFlu> eaSy60: hello!
14:26 < eaSy60> I have my app on heroku, how can I restart it automaticaly on crash (error..) ?
14:28 < totallymike> eaSy60: you might want to fix the crash.  Otherwise I think heroku kicks it off again if it dies, no?
14:29 < eaSy60> No, it does'nt
14:30 < totallymike> nevermind me then
14:41 < TubaraoSardinha> Is crawling web pages with Node.JS a good idea? Is there any good tool for helping me with that?
14:43 < TubaraoSardinha> I was looking at Node.IO but I need to actually crawl pages not just scrape them. 
14:49 < substack> mad science ci server: https://github.com/substack/cicada
14:58 < zipp> Nice substack
15:11 < zipp> I feel like Dr Frankenstein coding in Node, hacking together apps from random parts scoured from Github and my own laboratory..
15:13 < necolas> A colleague is getting this: Error fs.js:532 "return binding.readlink" ...when trying to run any node module installed with npm. Any immediate/known causes we should investigate? At a bit of a dead end. thanks
15:18 < jcrew> looks like a problem with the fs module, nothing to do with npm, unless one of those modules includes a file called 'fs.js'
15:22 < mscdex> necolas: what platform and what node version?
15:22 < mscdex> necolas: and what modules have you tried?
15:47 < hoverbear> :o
15:51 < necolas> mscdex: it's on OSX 10.7, version 0.8.3 and 0.8.6
15:51 < necolas> every module suffers from the same error
15:51 < necolas> mscdex: he has 'grunt' and 'express'. they both produce that error when run in any form
15:52 < necolas> we upgraded his machine to 0.8.6 but the error remained
15:53 < necolas> and bizarrely, it was working yesterday prior to installing grunt and some local-project modules
15:53 < necolas> even after uninstalling grunt globally, the error didnt go away
16:26 < ptone> what happened here? https://npmjs.org/package/hubot-twilio
16:28 < JoelE> I've been trying to install node on my server. I have node 6.12 working from debian sid, but I can't get npm working with that. When I try to compile node 8.whatever it crashes my apache. I tried downloading the pre-compiled linux binaries and running those. That hung my server, and I had to remotely power cycle it. I really just need to run node.js with socket.io, and I am open to any solutions. Any ideas?
16:30 < chiel> has anyone ever had an issue with nginx seemingly serving incomplete files? (as in, the output ends before it's supposed to)
16:30 < chiel> I tried setting expires -1; to make sure there's no weird caching going on or anything
16:31 < chiel> but.. yeah, it's really weird
16:32 < JoelE> well this channel is depressing chiel lol
16:32 < chiel> oh shit, wrong channel. :D
16:36 < klawd_prime> hi guys. i want to develop a framework with node. i want unit tests, a real build process and nice deployment
16:36 < klawd_prime> any hints on where to start?
16:38 < bthesorceror> hi
16:38 < JoelE> hi
16:53 < iyp> I'm issuing ~10 count queries in parallel on a collection of about 300000 docs. Mongo takes about 80 seconds to get through them all, and from what I can tell, is doing them in serial. Any advice on speedup?
17:08 < klawd_prime> anyone working with webstorm?
17:08 < klawd_prime> can i make webstorm re-run the app when i save?
17:30 < DTrejo> klawd_prime: npm docs run
17:35 < zipp_> ps aux | grep node
17:35 < zipp_> woops
17:48 < LordThumper> Hi, does anyone use socket.io?
17:48 < LordThumper> The .js hosted on their servers seems to be down (404)
18:14 < loglaunch> ignore JOINS PARTS QUITS
18:28 < axefrog> anyone know, in the request object passed on socket connect for an https connection coming in via a server (net.createServer) - where the forwarding path is? I only see a host header, but it doesn't contain the full requested path, so i don't know where to forward the data stream to
18:30 < machadogj> could it be: x-forwarded-for
18:30 < axefrog> nah the header's not there
18:31 < axefrog> oh wait - i bet it's part of the encrypted stream
18:31 < axefrog> and if i forward it to the host on port 443, it gets decrypted on the other end
18:32 < dzajdband> Hi everyone
18:32 < axefrog> hi
18:32 < dzajdband> I have a question
18:32 < zipp> Ask it :D
18:32 < dzajdband> I want to decouple my module, so it only loads part of it on the require
18:32 < dzajdband> its
18:32 < dzajdband> https://github.com/danzajdband/tuiter
18:33 < axefrog> so... decouple it
18:33 < dzajdband> I want to provide something like var Tuiter = require('tuiter')
18:33 < dzajdband> but if you only want to use the streaming api for example
18:33 < dzajdband> do
18:34 < dzajdband> var Tuiter = require('tuiter')(['streaming'])
18:34 < axefrog> modules get loaded the first time their require is called, so either defer the require until it's needed, or separate the different bits of code into different modules
18:34 < dzajdband> I can't find an "elegant" way to do it
18:34 < axefrog> make your module have its own dependent modules and have the front module just be a proxy for the others
18:35 < axefrog> alternatively - stop worrying - it's just javascript code. how big can it be?
18:35 < dzajdband> there are more than 100 rest api methods of the twitter api
18:35 < dzajdband> I want to avoid loading all of them
18:36 < dzajdband> most of the usage is for the streaming api
18:36 < axefrog> im still doubt your javascript code is going to be some behemoth a small node process can't handle without breaking a sweat
18:36 < axefrog> i'm guessing what you're doing is indulging in premature optimization. make your code work, then optimize the problem areas.
18:37 < axefrog> i.e. when they become a problem.
18:37 < dzajdband> It works
18:37 < axefrog> is it causing you a problem?
18:37 < dzajdband> im in the middle of a refactoring
18:37 < axefrog> is it broke?
18:37 < dzajdband> It's a enhacement
18:37 < dzajdband> I want to make
18:38 < dzajdband> I'm not fixing broken code, I'm improving it
18:38 < axefrog> from the way you explained it, i don't understand the benefit of what you're trying to do
18:38 < axefrog> like, how is what you're doing an improvement? i mean in practical terms.
18:38 < machadogj> @dzajdband: how would you post a tweet with that module?
18:38 < dzajdband> Preventing to create more than a hundred methods when they are not necesary
18:39 < axefrog> for example, if your code takes 2ms to run and you improve it to only take 1.9999ms, i personally wouldn't consider that an improvement. similarly, if your refactoring provides no tangible benefit, is it worth doing?
18:39 < machadogj> that's only going to happen the first time tuiter is req'd, so you'll be optimizing miliseconds
18:39 < dzajdband> @machadogj: require the library, add the credentials and tuiter.update(params, callback)
18:39 < axefrog> what machadogj said.
18:40 < dzajdband> I know what you say
18:41 < axefrog> ask yourself also if your refactoring makes your system more complex. if so, ask if they increase in complexity is worth the negligible reduction in system overhead.
18:41 < dzajdband> In fact the refactoring is to make the library simpler
18:41 < axefrog> simpler code ftw
18:41 < dzajdband> so 
18:41 < dzajdband> the code it's getting simpler
18:42 < dzajdband> If it makes the code better and it's not a pain
18:42 < axefrog> if you introduce additional code to facilitate lazy loading of submodules instead of just loading them all at startup, that doesn't make anything simpler
18:42 < dzajdband> I think is good to give the possibility
18:42 < dzajdband> to the user to decide what to load
18:42 < dzajdband> is not just that
18:42 < axefrog> why does the user need to know what to load? just make it all available.
18:42 < machadogj> +1
18:43 < axefrog> var foo = require('yourmodule'); foo.whatever.area.iwant()
18:43 < machadogj> and put a test or sample in the doc of how to make a tweet :)
18:43 < dzajdband> I'm not agree. If the user don't want to deal with it
18:43 < dzajdband> just don't add any option
18:43 < dzajdband> but if you want to improve it, add the option
18:44 < machadogj> if you really really want to do it, try with something like inheritance
18:44 < axefrog> it seems like you're writing code for the sake of writing code. what you're doing will provide no tangible benefit to the developer. it solves no problem that they have.
18:44 < axefrog> if you want to divide things into lazy-loaded modules, take advantage of node's existing CommonJS infrastructure. There's no reason to roll your own.
18:45 < axefrog> require('./feature1')
18:45 < axefrog> there. problem solved.
18:45 < dzajdband> that's what im trying to do...
18:45 < axefrog> so what's the problem?
18:45 < dzajdband> I have alredy the API's in their own modules
18:46 < dzajdband> I ask if there is a way
18:46 < dzajdband> to require the module
18:46 < ShaneN> Hey all. I'm running into an issue when trying to install nodetime (appears to be during the install of the v8tools dependency) about not being able to find a file, but I can't tell which file it is referring to. Can someone take a peek? :) http://pastebin.com/QNQicf39
18:46 < dzajdband> without the require('mymodule')()
18:46 < dzajdband> in order to all all the apis methods
18:46 < axefrog> dzajdband - yeah there is. like this: var lazyLoadedFeature = require('./myFeature');
18:47 < axefrog> why are you trying to avoid using require?
18:47 < dzajdband> so the api of my module doesn't change for the final user
18:47 < axefrog> make the api do this: api.myfeature().whatever. put the lazy loading in myfeature().
18:48 < axefrog> module.exports.myfeature = function() { return feature || (feature = require('./feature'); }
18:48 < machadogj> actually, require will execute just once, so no need to do the ||
18:49 < axefrog> that is also true
18:49 < axefrog> what machadogj said.
18:49 < dzajdband> That's not exactly what I want
18:49 < machadogj> module.exports.myfeature = function () { return require('./feature');}
18:49 < dzajdband> I want not to change the api
18:49 < axefrog> does V8 support getters?
18:49 < dzajdband> so user can perform var a = require('mymodule')
18:49 < dzajdband> but
18:50 < dzajdband> make the chance to perform var a = require('mymodule')(options)
18:50 < dzajdband> is that possible?
18:50 < machadogj> yes
18:50 < axefrog> put an initialisation function on the module and don't have it actual load anything internally until they call init
18:50 < dzajdband> Just figured out
18:50 < dzajdband> yes
18:50 < dzajdband> thanks :)
18:50 < axefrog> require('mymodule').init(options)
18:50 < machadogj> you want something like: var stream = require('tuiter/stream')(credentials); //??
18:51 < dzajdband> more like
18:51 < dzajdband> var stream = require('tuiter')(['stream', 'rest'])
18:51 < axefrog> again, what machadogj said. have module.exports return a function that constructs the feature.
18:51 < dzajdband> yes, thanks
18:51 < machadogj> cheers1
19:15 < Domenic__> wow that sounds like a horrible-to-use api. code is cheap.
19:23 < Murvinlai> bnoordhuis: hi.. remember the https connection question I asked yesterday?  I found something more from watching the traffic
19:24 < Murvinlai> bnoordhuis:  After sending TCP, the TLSv1 From CURL is "Certifcate, Client Key Exchange, Certificate Verify, Change Cipher Spec, Encrypted Handshake Message "
19:25 < Murvinlai> bnoordhuis:  But for Node.. at TLSv1;  it returns: " Certifcate, Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message"  and alert for "Level: fatal, Description: Handshake Failure".  It miss the certificate verify.
19:26 < Murvinlai> bnoordhuis: in both my node.js and curl call, I use the same root cert, pem and passphrase to the same server with same port.
19:34 < tasslehoff> I'm serving a 270MB tar-file from a sluggish embedded system like so: fstream.Reader({ type: "Directory" , path: mydir }).pipe(tar.Pack({})).on("error", function(){ res.statusCode = 500; res.end('Unable to create tarball'); }).pipe(zlib.Gzip()).on("error", function(){ res.statusCode = 500; res.end('Unable to gzip tarball'); }).pipe(res).
19:35 < tasslehoff> It is much (7 times) slower than tar'ing the folder manually and then transferring it with scp. Anyone got a clue why, and if there is something in fstream/node-tar I can tweak?
19:37 < russfrank> tasslehoff: you're timing both taring it and scping it right
19:38 < tasslehoff> russfrank: yeah: tar 1m12s, scp 2m17s, versus 1/5th of the file being transferred in 5 minutes
19:39 < russfrank> very strange
19:39 < klawd_prime> hi!
19:39 < russfrank> klawd_prime: hi
19:40 < klawd_prime> can i create QUnit tests with node modules somehow?
19:40 < klawd_prime> i want to write tests involving nano
19:41 < tasslehoff> russfrank: yeah. tried serving a pre-made tar with node-static, but then I ran out of memory
19:42 < cpsubrian> creationix: Trying to get a clear picture of architect … As I understand it, what it does is manage loading inter-dependent plugins (which just expose APIs) in the correct order and feeding those dependencies into eachother?
19:42 < creationix> cpsubrian, yep
19:43 < creationix> it lets you define you app as a declarative configuration of plugins
19:43 < cpsubrian> creationix: What would you do with the `app` object after?  For reference, I'm heavily using Broadway right now and so I'm used to attaching everything to `app`.
19:44 < creationix> not sure what you mean
19:44 < creationix> I haven't used broadway
19:45 < cpsubrian> creationix: The optional? callback after you createApp() has an `app` param.  The calculator example does not do anything with that instance.  What might you do with it?
19:45 < creationix> you might use it to log the plugin config or something
19:46 < creationix> I think I just exposed it for fun
19:46 < creationix> in case someone might want access to all the plugins and services
19:46 < cpsubrian> creationix: Also, in the examples I've seen so far the APIs are always object literals.  Our 'standard' way of creating APIs is through prototypical 
19:46 < cpsubrian> 'classes' .. in that case you would want to feed an initialized instance into the dependent plugin
19:47 < cpsubrian> creationix: Having some trouble figuring out what that would look like
19:47 < cpsubrian> creationix: Say, forexample, a redis client
19:48 < creationix> originally I was doing rpc between architect containers
19:48 < creationix> so I limited the interface to a static object with functions
19:49 < creationix> then I removed the feature because it was never used and bloated everything
19:49 < cpsubrian> I suppose config could contain things like redis clients .. 
19:49 < creationix> cpsubrian, but architect doesn't care what object you provide in your service https://github.com/c9/architect/blob/master/architect.js#L152-168
19:49 < creationix> it just hands that object to anyone requesting the service
19:50 < creationix> so you would have a redis plugin that accepts db connection details in it's config and provides a redis service to other plugins
19:50 < cpsubrian> creationix: That makes sense
19:50 < creationix> plugins needing access to the database would just depend on the redis service and get a reference to your db instance
19:51 < cpsubrian> creationix: One last thing to bug you with for now :) … If plugins add middleware to an http server, and the order of said middleware is important, would the non-deterministic load order of the plugins be an issue?
19:52 < cpsubrian> creationix: I guess in theory the 'consumes' takes care of that
19:53 < cpsubrian> creationix: A session plugin, for example, so long as it consumes 'cookie' or whatever then that middleware will have been added already
19:53 < creationix> yeah, you could force order by creating fake dependencies between your plugins
19:53 < creationix> seems hacky though
19:53 < cpsubrian> creationix: A little, yeah
19:53 < creationix> the order in your config should affect the load order
19:53 < creationix> it's not like it's really non-deterministic
19:54 < creationix> it's all single-threaded logic
19:54 < cpsubrian> creationix: Yeah this is probably a case of 'just implement it' and see what happens ;)
19:54 < creationix> so assume a simple app that has 4 plugins
19:54 < creationix> one provides http and the other 3 consume http
19:55 < creationix> the other 3 should load in the order you have them in your config
19:55 < tasslehoff> think I need to ask the community for ideas here. what's The Forum for node.js-questions (from a rookie)?
19:56 < DarkGhost`> hello!
19:56 < dreamdust> stackoverflow.com
19:59 < DarkGhost`> So, would node.js be the right thing to get into if I wanted a simultaneous exchange of information ?
20:07 < Hotroot> >> 1 / 1;
20:07 < purr> Hotroot: (number) 1
20:07 < Hotroot> Not sure what I was trying to accomplish there
20:09 < mscdex> >> lol;
20:09 < purr> mscdex: ReferenceError: lol is not defined
20:09 < mscdex> >> purr;
20:09 < purr> mscdex: ReferenceError: purr is not defined
20:10 < mscdex> >> while(true);
20:10 < purr> mscdex: Timeout Error: Execution time exceeded 2 seconds
20:11 < hilkolantinga> Anyone here any good with float calculations? I'm doing something wrong but can't spot the error: http://pastebin.com/Vnb2LCmq
20:25 < scttnlsn> mongojs vs mongoskin: anyone have any thoughts?
20:25 < drudge> monk!
20:26 < scttnlsn> oh right...i believe that's another layer built on top of mongoskin?
20:27 < drudge> yes
20:30 < nmanousos> anyone know how to get the profile tab to show in node-inspector?
20:30 < nmanousos> i'm trying this: https://github.com/felixge/node-memory-leak-tutorial
20:31 < qbit> ^_^2: your name makes irssi confused when switching windows :D o/
20:31 < livinded> lol
20:47 < milani> isaacs, how node creates pkg for OSX?
20:47 < milani> I mean how do u manage to create it;)
20:53 < mappum> i have a general question: how do I write tests for web apps? for example, do i have to simulate requests? also, do i actually put stuff in the database?
20:53 < littlebear> mappum: use ab -n x -c x
20:54 < mappum> cool, would i actually put that into my test script?
20:55 < Raynos> What tool do people use to check whether any dependencies in their package.json are outdated?
21:03 < Hotroot> I did data.split, and right after that I try to do data.join, and it says that method doesn't exist?
21:04 < Bennit> Hi, anyone use nginx as proxy frontend for node.js servers?
21:04 < captain_morgan> Bennit: sometimes
21:04 < Bennit> I'm using it for a node application which uses websockets, but in my console where I start the application, node complains:  warn  - websocket connection invalid
21:04 <@konobi> why not just have node at the front?
21:05 < Bennit> the websockets seem to work though
21:05 < Bennit> because I use the server listening on :80 for other purposes aswell
21:06 < captain_morgan> Bennit: I have heard of issues with proxying websockets but do not know of anything off hand
21:06 <@konobi> nginx can't proxy websocket traffic (unless you hack it with the new tcp patches)
21:06 < Bennit> anyways, if noone knows how to 'solve' this, i'll just use a node server infront of the other proxy, but it'd be awesome if it would work with nginx
21:06 < captain_morgan> there you have it
21:06 <@konobi> Bennit: it's a nginx issue
21:06 < Bennit> i'm using now.js,; perhaps that's why it does work
21:07 <@konobi> you could try haproxy instead though
21:07 < AAA_awright> Bennit: Loads of people, me
21:07 < Bennit> okay, I already tumbled on that one, was looking at it earlier
21:07 < Bennit> AAA_awright: and you got nginx to work with websocket-node applications?
21:07 < AAA_awright> Nginx is fantastic or static files
21:08 < machadogj> can you update the routing table of Nginx on real-time without restarting it?
21:08 < AAA_awright> Bennit: Routing websockets through Nginx is a bit more complex than just enabling it in the configuration, because you've got to know which Node.js instance it's being routed to (if you're using a load-balancer setup) and those processes have to talk to each other
21:09 < Bennit> I'm guessing no, but I don't need to for now :p
21:13 < Bennit> ok, i'll take a look at a different proxy
21:13 < octane--> has anyone successfully gotten rails/node session auth working? we've been hitting our head against the wall
21:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:18 < Hotroot> octane--: Do you mean login cookies?
21:18 < Hotroot> Err, session cookies / node sessions
21:18 < octane--> hotroot we were going to use sessions
21:18 < Hotroot> I think I have a working example of secure cookies with mongo
21:19 < Hotroot> And express
21:19 < octane--> hm
21:20 < octane--> we were just having an issue with usnerializing the session data from rails
21:21 < Hotroot> octane--: Yeah, I think there's some weirdness when it comes to sharing sessions, like across socket.io and express
21:21 < octane--> Hotroot:  hm
21:21 < Hotroot> Trying to see if the example still works
21:22 < Hotroot> If you don't use mongo and express, it's probably not too usefull though
21:22 < octane--> lol we use connect and mysql
21:22 < octane--> so :(
21:23 < Hotroot> Express and connect are related
21:23 < Hotroot> I use connect-mongo for sessions
21:25 < Hotroot> Ehh, too lazy to update my Express code, apparently there was a big update
21:25 < Hotroot> Well, hmm
21:28 < Hotroot> octane--: Hmm, yeah, sorry, my example is very broken from updates
21:28 < octane--> Hotroot: np thanks dude
21:30 < Hotroot> Jeez, the express site is totally different too. Tis the danger of young technologies I guess
21:41 < addisonj> anyone know how to make npm smarted about updates? right now, on every deploy, we just do an npm install, which seems to recompile and reinstall everything, not bad for small stuff, but modules wiht lots of native code make it slow
21:44 <@Nexxy> addisonj, `npm update`?
21:45 < addisonj> is that what npm update does? i tried playing with it, and it seemed odd
21:45 < joshwnj> addisonj: you could think about installing your modules to a different location with a specific version in the name (eg. `request-1.0.1`) and then instead of doing npm install, symlink to those directories
21:45 <@Nexxy> no.
21:45 <@Nexxy> don't do that
21:45 < addisonj> yeah, done symlinks before
21:45 < addisonj> its not happy
21:46 < addisonj> I would rather tarball it
21:48 < addisonj> I just wish install only updated if needed, that would be easiest :P
21:49 < joshwnj> have you got 3-point versions for all dependencies in your package.json ? (eg. no '*', no '>') - that's going to affect what options you have here
21:51 < addisonj> ah lol, I am an idiot, just deploying wrong, install is smart about recompiling
21:55 <@Nexxy> addisonj, that's not very good self-talk
21:55 <@Nexxy> everyone makes mistakes
21:58 < addisonj> thanks Nexxy :)
21:58 < Hotroot> I
21:58 < Hotroot> 'm trying to figure out the regex for removing leading and trailing whitespace
21:58 < Hotroot> I think it's something like this?
21:58 < Hotroot> data = data.replace(/^[ \t]+|[ \t]+$/,'');
21:59 < Hotroot> But that doesn't work
22:01 <@maxogden> use String.prototype.trim
22:02 < Hotroot> maxogden: Thanks
22:04 <@Nexxy> maxogden, 
22:04 <@Nexxy> mikeal said I can crash i your warehouse
22:04 <@Nexxy> in
22:05 <@maxogden> Nexxy: when?
22:05 < Hotroot> maxogden: myString = myString.trim(); works too
22:05 <@Nexxy> no clue :D
22:05 <@Nexxy> when I move to teh bay area
22:05 <@maxogden> Nexxy: haha possibly, it is often full
22:06 <@maxogden> Nexxy: jesusabdullah/substack's house usually has an empty room too
22:06 <@konobi> warehouse?
22:06 <@maxogden> yes it is where i keep all my github repositories
22:06 < Hotroot> lol
22:06 <@Nexxy> lolol
22:08 < livinded> lol, I read that as whorehouse at first
22:08 <@Nexxy> you would.
22:09 <@Nexxy> go back to your zombie movies
22:09 <@Nexxy> the adults are talking
22:10 < livinded> wow, someone's having a bad day
22:11 <@Nexxy> don't be jealous
22:12 < dubiago> JQuery…ugh. Now that's a bad day.
22:12 <@Nexxy> better than prototype
22:12 < livinded> what's there to be jealous about?
22:12 <@Nexxy> my ability to refrain from inappropriate comments, perhaps?
22:13 < livinded> dubiago: document.querySelectorAll() there, 80% of your jQuery usage has been replaced natively
22:13 < dubiago> sweeet
22:13 < captain_morgan> maxogden: You looking to rent a room or just have extra space? My brother is moving home and looking for a place
22:17 < TehShrike> Any Voxer folks here?
22:40 < axefrog> anyone got any experience with forward proxies? I'm trying to create a local forward proxy server with node.js that forwards an https request from my browser through a remote proxy server (that requires authorization). http works, but the https bit doesn't work when I try to involve a remote proxy. https://gist.github.com/3353609
22:45 <@konobi> axefrog: there's no real wasy way to deal with https on forward proxies
22:46 < axefrog> konobi - i don't need it to be easy, just need it to work. the forwarding works if the local proxy forwards the request directly to the remote host, but as soon as I involve a remote proxy, something about the way I'm sending it causes an error to be returned
22:46 < livinded> what's wrong with just using an ssl terminator?
22:46 < axefrog> ssl terminator?
22:46 < livinded> oh, that requires authorization
22:47 <@konobi> livinded: forward proxy, not remote proxy
22:47 < axefrog> yeh
22:47 < livinded> so use socks
22:47 <@konobi> axefrog: well, the TCP stream is encrypted, so there's no real way for the proxy to intercept the request
22:47 < axefrog> so, my local proxy is just used in the browser's proxy settings. it then forwards the request through the remote proxy
22:48 < axefrog> i don't need to intercept the request, I just want to forward it on
22:48 < axefrog> i.e. all i care about is the proxy header
22:48 < livinded> pretty sure you can run tls over socks5
22:48 <@konobi> axefrog: proxy header in an encrypted stream?
22:49 < axefrog> errr... not sure i've learned enough to know what tls is.
22:49 < axefrog> :)
22:49 < axefrog> in the https request, there is still a minimum set of unencrypted headers, specifically the proxy info, the remote host and so forth
22:49 <@konobi> no
22:50 <@konobi> the TCP stream is encrypted
22:50 <@konobi> so there's no way to look at anything
22:51 < livinded> just skip the http proxying and use socks
22:51 < axefrog> that can't be. I sniffed the stream myself, as it came from the browser. it contained a CONNECT header, a host header, a Proxy-Connection header, a Host header, and then was followed by the encrypted stream
22:51 <@konobi> axefrog: to the proxy, sure... but to the remote host, you'd be stuffed
22:52 < axefrog> ah... hang on
22:52 < codingstream> does anyone know the name of the code theme that is used on http://expressjs.com/api.html
22:52 < axefrog> ok, so the actual connection between the browser and my local proxy is unencrypted, though the encrypted portion is implicit because it's https. hence I have a few extra headers passed to me. If I strip out everything except what the remote proxy wants, maybe that will work.
22:53 < axefrog> so i basically just pass CONNECT and proxy-authorization
22:53 < axefrog> proxies strip out the auth header when they're done with them
22:53 < axefrog> brb, trying that
22:54 < axefrog> codingstream: who says it's a theme?
22:56 < codingstream> axefrog: tj uses it for the mocha samples too
22:56 < axefrog> ah
22:56 <@isaacs> milani: I type `make pkg -j4` and the computer does all the work
22:59 < axefrog> hmm... still not working.
22:59 <@konobi> axefrog: you're passing it to port 443, right?
22:59 < axefrog> yep
23:00 < axefrog> so, to the socket I write a CONNECT header, a Proxy-Authorization header, a blank line and then send the stream. According to what I read online, that's supposed to work.
23:04 <@konobi> axefrog: i just remember it being far more of a PITA (based on commercial product release that i was somewhat involved with)
23:04 < axefrog> hmm
23:04 < axefrog> well thanks for the help anyway... i gotta hit the sack. will continue on with it tomorrow. might end up sticking it on stackoverflow with a healthy bounty to encourage a detailed answer.
23:05 <@konobi> axefrog: it's a chain-of-trust thing, iirc
23:21 < hillct> What's with the channel title? Was there a big adopter who switched from websphere to node?
23:25 <@maxogden> protip: channel topic is never srsbsns
23:27 < Murvinlai> hi
23:28 < Murvinlai> anyone know where should I put this: {secureProtocol: 'TLSv1_method'}  in a https call?  i try pass in as an option for https, but it seems doesn't work .  
23:29 < Murvinlai> related post: http://stackoverflow.com/questions/10774226/disabling-tls-1-1-in-node-js
23:30 <@Nexxy> lulz
23:32 < Domenic> Do we have a video of SubStack's NodeConf presentation?
23:33 <@maxogden> not out yet
23:33 < Domenic> sad times
23:34 < mscdex> sad times indeed
23:37 < jetienne> sad of what ?
23:43 < aroman> is anyone doing any calendar integration in node? I would really like to make my app sync with Google Calendar, particularly if it's a two-way sync. 
23:53 <@konobi> Konboi: eh!?
23:54 < rvagg> talking to yourself again konobi? how's that working for you?
23:55 <@konobi> rvagg: notice the slight difference
23:55 < rvagg> ya, I do, suspecting a troll?
23:56 <@konobi> rvagg: hard to say
23:57 < Nexxxy> ROBOTS!
23:57 < mscdex> "There can be obi wan!"
23:58 <@konobi> mscdex: kEnobi
23:58 < mscdex> ;-)
23:58 < mscdex> my pun for the day
23:58  * konobi develops hulkosis
23:59 < jetienne> who want to live for ever when loves must die ?
--- Log closed Wed Aug 15 00:00:01 2012
