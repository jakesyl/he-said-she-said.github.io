--- Log opened Sun Aug 12 00:00:06 2012
00:17 < substack> oh goodness: http://www.unlimitednovelty.com/2012/08/debunking-nodejs-gish-gallop.html
00:17 < substack> so many incorrect things said about node in that article
00:18 < substack> apparently the author has never heard of streams
00:19 < jesusabdullah> YOU're a stream
00:21 < mscdex> substack: yeah, like many trolling articles, i just had to stop reading early on
00:22 < substack> mscdex: it was really cringeworthy when the author asserted that the only way to solve backpressure was using blocking i/o
00:22 < substack> isaacs: ^^^
00:24 < jrajav> Easily over half of "technical" blog posts can be explained with one phrase
00:24 < jrajav> Emotional Investment
00:24 <@Nexxy> HEY, THAT OFFENDS ME
00:25 <@Nexxy> brb, blog post.
00:26 <@maxogden> that blog post sucks in like 50 ways
00:26 <@maxogden> and i didnt even read the whole thing
00:26 <@maxogden> rails has smart programmer celebrities! and high level abstractions!
00:26 < jrajav> Ruby's high level?
00:26 < jrajav> No fucking way
00:26 < substack> high level abstractions are always better!
00:27 < substack> we should keep writing abstractions upwards and never revisit our base assumptions ever
00:27 <@Nexxy> I just called my cellphone with a paperclip.
00:27 < jrajav> substack: inb4 blog post about drag and drop programming
00:27 <@Nexxy> my preferred stack is jenga.
00:28 < jrajav> That's nearly quotable
00:28 <@Nexxy> do it.
00:28 < jrajav> Don't get excited
00:28 < jrajav> I did say nearly
00:28  * Nexxy scoffs
00:29 < jrajav> Try something with PVC pipes <-> MVC frameworks
00:29 < jrajav> That might do the trick
00:29 < substack> hahaha the guy who wrote that article is following me on the twitters
00:30 < jrajav> You should tweet about how terrible it is
00:30 < jrajav> Countertroll
00:30 < nlf> he did haha
00:30 < jrajav> lol
00:32 < jrajav> Guessing this is you, substack ? https://twitter.com/substack
00:32 < substack> yes
00:33 < nlf> you can tell by the incredibly lifelike avatar
00:33 < jrajav> I was guessing entirely based on the avatar, yeah
00:41 < russfrank> seems like the only real point of that blog post is the opinion that coroutines are less confusing than callbacks
00:41 < russfrank> the rest of it is just 'rails is great. also hype is bad.'
00:42 < substack> and some false statements about callbacks
00:42 < substack> and especially backpressure holy crap
00:42 < substack> that part of it was just so wrong
00:42 < substack> I proof by counter-exampled the crap out of that part
00:43 < substack> I'm going to go sit in a hammock and write a blog post now
00:43 < substack> haven't done a post in a while
00:44 < deoxxa> > HI, I'M TONY ARCIERI. YOU MAY REMEMBER ME FROM SUCH SOFTWARE PROJECTS AS CELLULOID, REIA, AND COOL.IO
00:44 < substack> this one is about starting from 0, frameworks, and reusable libraries
00:44 < deoxxa> no, no and no
00:44 < russfrank> :] oh boy
00:44 < deoxxa> if you're going to name drop projects you were involved in, make them projects people have actually heard of
00:44 < AvianFlu> deoxxa: yeah, and his ultimate point
00:44 < AvianFlu> is pushing his celluloid projecyt
00:44 < deoxxa> ha
00:45 < AvianFlu> "SCREW YOU GUYS MY ABSTRACTIONS ARE BETTER"
00:45 < deoxxa> i read the first few paragraphs of that article
00:45 < russfrank> yeah it seemed like he was saying 'this thing i made is the solution to all of your problems. also you're wrong.'
00:45 < substack> AvianFlu: I don't have a problem with that except that his conclusions are spurious
00:45 < deoxxa> > Celluloid solves every single problem you're whining about better than Node
00:45 < AvianFlu> SubStack: yeah, that's the thing
00:45 < deoxxa> loll
00:45 < AvianFlu> "these guys beat me at a benchmark but that doesn't matter because backpressure means they'll never hit that request rate"
00:46 < AvianFlu> such a hilarious whiny cop-out
00:46 < substack> lolstreams
00:46 < russfrank> ugh and he links to the brixen talk at the end
00:46 < russfrank> with the link text 'can be done better in ruby'
00:46 < deoxxa> > simply by giving the socket to another Ruby thread
00:47 < deoxxa> > another Ruby thread
00:47 < deoxxa> sounds like a plan
00:47 < substack> russfrank: haha that talk had exactly the same cargo-culting rationality issue as his blog post
00:47 < substack> why does rails have so much cargo-culting
00:47 < russfrank> yeah brian ford did a similar 'node probably has this problem' sortof thing without understanding that it.. doesn't
00:48 < russfrank> it's still a great talk though
00:48 <@maxogden> i think both of those posts are a testament to the fact that people dont understand what node is for
00:48 < ctult> I, as a famous Javascripter once said, "used with() and am not ashamed."
00:50 < deoxxa> substack: i note that in your comment you mention 0.9 making stream implementation easier - would you care to elaborate on that? i'm just getting started with streams myself and i find it really interesting.
00:53 < substack> deoxxa: isaacs talked a little about it at nodeconf
00:53 < substack> I think the videos might be up already
00:53 <@Nexxy> NOPE
00:53  * deoxxa nods
00:53 < rvagg> deoxxa: I just finished listening to the last NodeUp and they talk a lot about streams
00:53 < deoxxa> ah ok, cool
00:54 < deoxxa> i might chuck that on my phone and listen to it today
00:54 < rvagg> lots of isaacs' thoughts on what could be done with ReadableStreams in particular
00:54 < rvagg> he thinks that WritableStreams are pretty good as is
00:54 < deoxxa> this is episode 26, yeah?
00:54 < rvagg> having hacked my own readable and writable streams yesterday for my own project I can testify that while using them might be awesome, writing them SUCKS
00:55 <@maxogden> rvagg: its not so bad
00:55 < rvagg> the one with dominictarr in it
00:55 < rvagg> the thing that pains me the most is getting the timing around which tick things need to happen on
00:55 < rvagg> some things should be nextTick, some things need to be immediate, keeping multiple state variables is also annoying
00:55 < rvagg> but perhaps it'll improve as I get my head around it more
00:56 <@maxogden> ive never had to manage nextTick in a stream
00:56 < deoxxa> http://felixge.s3.amazonaws.com/11/nodejs-streams.pdf << i followed along with this and managed to get a working implementation
00:56 <@maxogden> the only rule to remember with streams is that readable streams have to be piped before nextTick
00:57 < rvagg> I'm dealing with async native operations though, so timing is awkward
00:58 < rvagg> have to care about when the underlying resource is 'ready', so it has to be concerned with buffering, writing and reading from the resource is also async so state gets involved there
00:58 < rvagg> end() makes it annoying, brings in more state cause of async
00:58 <@maxogden> rvagg: what are you writing a stream on top of?
00:59 < rvagg> I've written a leveldb wrapper, I now have readable and writable streams to/from it
00:59 <@maxogden> YAY
00:59 <@maxogden> i really want a nice set of leveldb bindings
01:00 < rvagg> just about to properly implement pipe() so you can connect 2 dbs together and duplicate them in a couple of lines of JS!
01:00 < rvagg> it's nice to use, but a pain to write and test
01:00 <@maxogden> my leveldb hack: https://github.com/maxogden/plumbdb
01:00 <@maxogden> does replication over http
01:01 < rvagg> mine should be compatible with dominictarr's event-stream stuff
01:01 < utu> so in nodejs your code is blocking unless you explicitly make it async correct?
01:01 <@maxogden> rvagg: https://github.com/my8bird/node-leveldb/issues/28
01:02 < digitxp> utu correct
01:02 < rvagg> and I'm planning on writing a through-stream that can also manage isaacs fstream, just for a fun functional test -- pipe a directory into leveldb, key=filename, value=data, pipe it back out to another directory
01:02 < utu> i get to a point in my code where I expect var to have some value but is undefined, it get assigned later, but that's too late for me, so my logic fails
01:02 < utu> but it is*
01:02 < rvagg> cool! thanks for the issue link... I've bypassed the concept of 'iterators' completely in my abstraction layer, gone completely with streams
01:03 <@maxogden> rvagg: the authors of that leveldb dont get streams
01:03 <@maxogden> rvagg: i will beta test your lib, just lemme know when its ready to play with
01:04 < rvagg> I've discovered in the process that even though the writable stream is basically a layer ontop of put() and batch() operations it's actually a much nicer interface to use for writing than doing it direct, just keep a writablestream around and write() to it when you need
01:04 <@maxogden> werd
01:04 < rvagg> maxogden: you're on mac right? I only have my gyp bindings setup for linux so far, mac support next
01:04 <@maxogden> rvagg: yep
01:05 <@maxogden> rvagg: i have a vps i can use in the meantime
01:05 < rvagg> k, I'm keen to get something released, been hanging on to it or too long so I'll pop you a line when I have something to show
01:05 <@maxogden> rvagg: sweet i'm maxogden on github, just mention me in a commit or  something
01:05 < rvagg> sure
01:05 < utu> are nodejs' API functions taking use of process.nextTick() to achieve async flow?
01:06 < rvagg> utu: mostly it's using libuv to do it, nextTick() is an abstraction on what libuv does
01:07 < utu> ok thanks guys, this means I have to move my logic/code into the callback, or else stuff will happen out-of-order
01:09 < blueadept> anyone know that one mac app that scans your hard drive and displays a visual correspondence to how much space your files are taking up?
01:09 < blueadept> starts with a D i think
01:09 < blueadept> its like windirstat
01:10 < blueadept> i think i got it, http://www.derlien.com/downloads/index.html
01:11 < deoxxa> blueadept: i use grandperspective for that
01:15 < rvagg> utu: take a look at caolan/async on github if you're having trouble with ordering non-trivial operations
01:23 < blueadept> ah, grandperspective
01:23 < blueadept> that was i was thinking
01:24 < blueadept> ty deoxxa
01:24 < deoxxa> \o/
01:39 <@isaacs> substack: your reply covered adequately rebutted as much of that article as i felt like reading :)
01:41 < substack> it's strange since node has so few core abstractions and streams are kind of a big deal
01:42 <@isaacs> meh
01:43 <@isaacs> just write a response about how you can't possibly read a program in ruby because anything might be a function
01:43 <@isaacs> so you never know if it's a getter or a setter or wtf
01:43 <@isaacs> therefor, it is not possible to write ruby programs.  QED.
01:43 < deoxxa> but wait! that makes no sense!
01:43 < deoxxa> unless...
01:44 < deoxxa> yep, i've determined that it's hyperbole. genius!
01:44 < deoxxa> ship it!
01:44 < substack> isaacs: and it's impossible to dig up documentation for any function without analyzing the complete dependency graph of your program
01:45 < substack> since every dependency and subdependency can export whatever it wants into your namespace
01:57 < substack> ok this blog post is evolving from making modules pay rent into maximizing your freedom to use and throw away modules
01:58 < substack> because that is a necessary point to make when discussing the first point
02:07 <@isaacs> deoxxa: i'm not hyperbolizing
02:07 <@isaacs> it literally is impossible to write (good) ruby programs, because the language makes it impossible.
02:07 <@isaacs> all ruby programs are (at least) written in ruby, with in itself, is rather damning
02:08 <@isaacs> alternatively, they're "metaprogrammed" (ie, "build up a string and eval it") using a "DSL" (aka "Doubly Stupid Language")
02:08 < substack> isaacs: and the solution is so simple too!
02:08 < substack> all they need is a better module system and proper sandboxing
02:09 <@isaacs> substack: and a different language
02:09 < substack> all exports should be shallowly frozen to stop the immediate abuses
02:09 < TehShrike> Man, Bryan Cantrill was just born to give talks to hackers, wasn't he?
02:09 < russfrank> hahahah yes
02:09 < substack> isaacs: nah the language is pretty unimportant
02:09 <@isaacs> and use libuv instead of their crappy blocking IO
02:09 < substack> it's the culture and the module system that are far more important
02:09 < russfrank> cantrill is one of the most entertaining speakers of all time
02:10 <@isaacs> TehShrike: yes.  he's a fantastic speaker
02:10 < substack> cantrill's open source talk was pretty excellent
02:10 < TehShrike> I'm finally getting around to watching http://www.infoq.com/presentations/Debugging-Production-Systems
02:10 <@isaacs> TehShrike: ah, the disaster porn one?
02:10 <@isaacs> that's good
02:11 < Spion> There is nothing wrong with having abstractions such as coroutines though. or at least generators (which will come soon enough)
02:11 <@isaacs> substack: "anarcho-marxist"? https://twitter.com/substack/status/233867699745353728
02:11 <@isaacs> substack: you're way more anarcho-capitalist, i think.
02:12 <@isaacs> substack: you're actually even less in favor of central control than I am.
02:12 < substack> well it was specifically in response to yegge's continuum which is a bit primitive
02:12 < TehShrike> Have any of you guys written up any response to that Yegge post, beyond random tweets?
02:13 < TehShrike> With a grain of salt to get past some of the gentle trolling, I enjoyed the read
02:14 < substack> isaacs: well marx was pretty well all over the place too, you can pick and choose easily enough
02:14 <@isaacs> i see
02:14 <@isaacs> !!!
02:14 < substack> it's structurally more similar to a religion than most philosophical movements
02:14 <@isaacs> why am i reading this glip glop thing!?
02:14 <@isaacs> "HEAD requests: Rails will transparently convert HEAD requests into GET requests, and return just the headers on the way out. This makes HEAD work reliably in all Rails APIs.
02:14 < substack> isaacs: I know right?
02:14 <@isaacs> i mean, node BASICALLY DOES THIS AND ALWAYS HAS
02:15 <@isaacs> except you know it's a HEAD, because req.method === 'HEAD'
02:15 <@isaacs> but you can still just do the same thing you do with GETs, and res.write() is no-op'ed
02:15 <@isaacs> (and in 0.8, it doesn't warn you like a nervous old school marm any more)
02:15 < substack> isaacs: but in rails it's a higher level of abstraction that's why we don't write in assembly language anymore
02:16 <@isaacs> substack: you and i are enemies now.
02:16 < substack> higher levels of abstraction are necessarily better because they are higher
02:16 < russfrank> lol
02:16 < TehShrike> lol
02:16 < substack> and higher === better
02:16 < TehShrike> Of course
02:16 < TehShrike> That's why I'm so awesome
02:16 < TehShrike> >_<
02:17 <@isaacs> substack: that's why i'm the best programmer ever.
02:17 <@isaacs> substack: because the way i solve most problems is that i convince you that they're a problem, and you solve them.
02:17 < substack> anselm's ontological argument applies to programming
02:17 <@isaacs> substack: or, for node core problems, i convince indutny or bnoordhuis or someone.
02:17 < substack> rails, being the greatest possible abstraction
02:17 <@isaacs> my level of abstraction is made of people!!
02:17 < TehShrike> Hah!
02:18  * isaacs actually needs to get much better at that.  spends way too much time writing code.
02:18 < TehShrike> You truly are a master hacker, but you can do better
02:18 < substack> it exists on the disk therefore it must exist on YOUR disk
02:18 < TehShrike> Somewhere on the other side of the world, some truly elite hacker is getting isaacs to get substack to write code by flapping a butterflies wings or something
02:18 < substack> isaacs: you missed the bike party last night!
02:18 < substack> holy fuck was that ever amazing
02:18 <@isaacs> substack: i know!
02:19 < Spion> seriously, has anyone thought about what would change when generators come to V8 (should be at the end of this year) ?
02:19 < substack> there were like thousands of people on bikes and music and dancing and a metal band powered by stationery bikes
02:19 <@isaacs> substack: i'm getting on their twitter and facebook lists for next time
02:19 <@isaacs> Spion: probably not much internally in node.
02:20 < substack> and 0 police oddly enough
02:20 <@isaacs> Spion: but maybe we can stop talking about stuff like fibers and streamline
02:20 < substack> despite parks officially closing and dusk and thousands of bicycles making roads impassible to cars
02:20 < substack> *at dusk
02:21 < substack> anyways finishing up this blog post
02:21 < substack> it's about FREEDOM
02:21 <@isaacs> substack: oakpd prefers hassling people for sitting down
02:21 <@isaacs> substack: they're easier to catch that way.
02:21 < Spion> yeah. Though in hindsight, if the performance of domains was equivalent, domains would now make the err parameter obsolete... so I was wondering if something like that would also happen with generators
02:21 <@isaacs> Spion: domains are still a bit of an experimental weird thing
02:22 < substack> isaacs: I guess trying to arrest cyclists would be pretty futile
02:22 < substack> especially in a giant crowd
02:22 <@isaacs> yeah
02:22 <@isaacs> mobile crowds are kind of a problem that solves itself
02:23 <@isaacs> occupy crowds start to smell after a few days, i think is the issue.  (not justifying, just that that's why they tend to get involved.)
02:24 < TehShrike> substack: I humbly request that you open wide the ports to your blog, blessing my reader with the bounty of full RSS feeds
02:25 < substack> TehShrike: but then I would need to mess with that code, which I have no intention of doing
02:25 < TehShrike> :'(
02:28 < TehShrike> The only programmer I follow in my feed reader who has a partial RSS feed is Paul Graham
02:30 < TehShrike> He doesn't even have an RSS feed for his posts, some fan hacked it up :-P
02:47 < jrajav> substack: Link to your blog?
02:48 < substack> jrajav: http://substack.net
02:55 < rvagg> https://github.com/substack/ is a more interesting version of substack's "blog"
02:55 < substack> correct
02:55 < substack> I haven't done a blog post since april
03:01 < deoxxa> hey isaacs, is there a way for me to set defaults for the stuff `npm init' gives me?
03:07 < rvagg> I'm pretty sure it's mostly hardwired deoxxa, with some intelligent guessing
03:08 < rvagg> it's all in init-package-json
03:09 < deoxxa> ah ok
03:09 < deoxxa> if it's not too complex, i'll do up a patch for reading that stuff from the user's config
03:09 < deoxxa> it'll get at least one user - me!
03:09 < rvagg> that'd be neat
03:10 < rvagg> then pretty much everyone but isaacs will default to "licence":"MIT"
03:10 < deoxxa> i use bsd :<
03:11 < deoxxa> but that's ok! i'll just configure that :P
03:11 < rvagg> heh
03:11 < rvagg> I don't care that much about licence, but the BSD default does seem to get up people's noses
03:11 < deoxxa> default author and git url are what would be cool for me, with the git url maybe having some simple string replacement stuff going on
03:11 < deoxxa> (or all fields, who knows!)
03:12 < TehShrike> <3 WTFPL
03:12 < purr> Let it be known that TehShrike hearts WTFPL.
03:12 < deoxxa> basically git://github.com/{{npm_user}}/{{package_name}}.git would be what i'd use
03:12 < deoxxa> (syntax not important)
03:12 < TehShrike> purr: word. http://wtfpl2.com/
03:13 < rvagg> check out the bottom of default-input.js, I think author is mostly configurable now in your ini
03:13 < deoxxa> the WTFPL is interesting in that it has an actual use
03:13 < deoxxa> it's great for countries that don't have a public domain definition
03:13 < deoxxa> such as germany
03:13 < TehShrike> It's true
03:14 < rvagg> repo default would be neat though, tho a lot of us are starting to use 
03:14 < rvagg> 'node-' prefixes for repo names
03:14 < deoxxa> i did that at the start, then stopped
03:14 < rvagg> even though the package name in npm is the suffix
03:15 < deoxxa> since most of what i make isn't really node specific
03:15 < deoxxa> it just happens to run in node most of the time
03:15 < deoxxa> if it's a native extension or whatever, or it relies on actual node apis, then yeah it gets a node- prefix
03:15 < TehShrike> Yeah, that's what I've noticed
03:15 <@Nexxy> don't prefix things with node-, it's tacky!
03:16 < rvagg> bfah!
03:16 < deoxxa> but otherwise it's misleading - i've had a few people complain about my templating library's name on github because they don't realise it works outside of node
03:16 < rvagg> I'm prefixing with node- if it's node-specific
03:16 < deoxxa> (it's node-ginger, if you're curious)
03:16 <@Nexxy> pypi
03:16 < rvagg> ah, ya, that's a good case for not using node-
03:17 < deoxxa> but even then, i've had stuff that was only compatible with node before but now works in browsers (thanks to browserify and such)
03:17 < rvagg> I have node-errno which is just errno in NPM, it's very node/libuv specific so makes sense
03:17 < deoxxa> yeah
03:17 < deoxxa> then again, it's one of the largest problems in programming
03:17 < deoxxa> along with cache invalidation :P
03:18 < rvagg> heh, indeed!
03:18 < rvagg> and out-by-one errors, those are the top 2 difficult things
03:18 < benvie> thinking of making a sort of subgroup that uses tagging for npm
03:18 < benvie> tag it "browser" maybe
03:19 < benvie> in my case, tag it "appjs" automatically
03:19 < deoxxa> benvie: for finding browser compatible modules on npm?
03:19 < rvagg> benvie: we're using the "ender" keyword to differentiate ender-specific packages
03:19 < benvie> just a concept
03:19 < benvie> yeah
03:19 < deoxxa> i like the idea
03:19 < jrajav> Alright
03:19 < deoxxa> but again it's a bit confusing
03:19 < jrajav> I'm gonna read the whole Yegge post finally
03:19 <@Nexxy> if only package.json supported keywords natively...
03:19 < jrajav> Wish me luck
03:19 <@Nexxy> ... oh wait.
03:20 < TehShrike> jrajav: it's not that crazy, I enjoyed the read :-)
03:20 < deoxxa> you see these packages with ender tagged, so you assume that they're going to be your best option
03:20 < benvie> it's not confusing, it just relies on either a.) a tool that does it for you, or b.) user knowledge
03:20 < rvagg> jrajav: can you write up a 1 para summary? I don't think I'm going to get around to it
03:20 < deoxxa> but sometimes there's another package with no specific dependencies on node and that will work fine in ender, but it's not tagged, so it doesn't get highlighted
03:20 < TehShrike> rvagg: some programmers like some things and other programmers like other things.
03:20 < deoxxa> community tagging would be cool, but potentially damaging
03:20 < rvagg> TehShrike: thanks! sounds reasonable
03:20 < TehShrike> ;-P
03:21 < rvagg> deoxxa: remember, anarchy is the prevailing ideology
03:21 < deoxxa> this is true
03:21 < TehShrike> It wasn't actually that long of a post, but the comments went on forever and ever, even that first day
03:21 < deoxxa> and it's worked remarkably well so far
03:21 < benvie> this is why it's helpfully to create said tool and have it be a core part of your specialized subset of things that exist on npm
03:21 < jrajav> rvagg: An attempt to categorize all paradigm shifts in software engineering on a one-dimensional spectrum?
03:21 < jrajav> Oh, sorry, that's only one sentence
03:21 < jrajav> I need to add more bullshit
03:22 < rvagg> it would be nice to have a mechanism native to npm that allowed us to group, I don't think npm's "tags" are suitable though
03:22 < jrajav> To be honest, I already know I'm going to hate Yegge's entire point after reading nothing but his TL;DR
03:22 < benvie> consider node as a dependency, and browser as another dependency
03:22 < benvie> does it not make sense to notate which dependency a thing relies on
03:22 < jrajav> Because this kind of one-dimensional categorization is exactly why I hate American politics
03:23 < TehShrike> Yeah, I think his choice of terms was one of the worst parts of his post
03:23 < jrajav> And he's trying to tie into the "sensibility", or more likely, the respectability, of political thought
03:23 < rvagg> the "engine" property could have been helpful, allow an array so you can have multiples: "node", "ender", "browserify", etc.
03:23 < benvie> that ship has sailed at this point I guess
03:24 < rvagg> without reading it, I think Yegge's trouble is that he mixed politics with programming... he should know that mixing politics with *anything* makes people upset
03:24 < benvie> or as a third category, perhaps you've made a node module which IS a browser
03:24 < TehShrike> He didn't even mix in politics
03:25 < TehShrike> Besides evoking everyones aversion to political topics by using the same terms
03:25 < rvagg> he uses political labels doesn't he?
03:25 <@Nexxy> inb4 godwin
03:25 < substack> rvagg: yes but npm early on thought that engine should mean something important so people were rightly afraid to experiment with it
03:25 < substack> so we get no innovation
03:26 < benvie> and now it's too late for it to be useful
03:26 < rvagg> perhaps not
03:26 < jrajav> TehShrike: It's ALL politics. The whole point of the conservative and liberal labels in politics is to evoke sensationalism and guilt-by-association.
03:26 < jrajav> And it's no different here
03:26 < rvagg> I can make it meaningful in Ender, substack could make it meaningful in browserify and then we just need npm to do smething with it
03:26 < benvie> nono
03:27 < benvie> it's specifically not useful in npm and node
03:27 < benvie> because a few people used it in some way
03:27 <@Nexxy> I thought engine could be a few things
03:27 < benvie> and now it can't be fucked with
03:27 < rvagg> Nexxy: this makes me a bit sad, https://twitter.com/dshaw/status/234471495794049024 - you're doing Node on ARM aren't you? who else is?
03:27 <@Nexxy> node, spidermonkey, rhino, etc
03:27 < benvie> engine can't be anything useful to npm, it can be useful elsewhere though
03:27 < benvie> just not npm
03:27 <@Nexxy> oh, right
03:27 <@Nexxy> rvagg, node + arm + arduino, ya
03:27 < mappum> is there a way to encrypt data with an RSA public key in node? it's not in crypto, and for now i'm just getting away with calling openssl through child_procerss
03:28 < benvie> npm has to ignore it for compatibility
03:28 < rvagg> benvie: by useful, I mean for searching, that's really the important bit, for Ender we search and sort with keyword, could do the same with 'engine' if it was hooked up in npm to be searchable
03:28 <@Nexxy> rvagg, there's not a whole lot to node on ARM thought
03:28 <@Nexxy> -t
03:29 <@Nexxy> other than, it's a bitch to compile
03:29 < mappum> it compiles on my vm on my phone just fine
03:29 < substack> rvagg: use keywords
03:29 <@Nexxy> mappum, what version?
03:29 < substack> I've been doing that for modules that are known to work with browserify at least
03:29 < rvagg> we use keywords already, but perhaps 'engine' would be more helpful
03:30 < mappum> it was a little while ago, 0.6.19 i beilieve
03:30 <@Nexxy> yeah
03:30 <@Nexxy> 0.6.x works
03:30 <@Nexxy> 0.8.x doesn't
03:30 < mappum> i see
03:30 <@Nexxy> it fails like 42+ tests
03:30 < substack> rvagg: I think it would be even more useful if other people could tag modules that they didn't write
03:30 <@Nexxy> including SSL signatures and shit
03:30 < mappum> well i do know npm doesnt work on that VM
03:30 < mappum> but everything in node i've tested does
03:30 < mappum> npm runs, but cant connect
03:30 <@Nexxy> it's also a bitch in the sense that compiling takes like...
03:30 < rvagg> substack: true, I'd like an 'ender' keyword in Underscore for example but there's no way I'd get that in!
03:30 <@Nexxy> an hour and a half
03:31 < mappum> haha well i had decent processing power
03:31 < rvagg> Nexxy: I'm dobbing you in to dshaw_ on #nodeup
03:31 <@Nexxy> lol what?
03:32 < mappum> what is nodeup?
03:32 < rvagg> I just think that a hardware show should include some discussion about ARM, it's logical, but he doesn't think it fits
03:32 < wltsmrz> It's a podcast, mappum
03:32 < mappum> ah, ok
03:32 < rvagg> ARM+Arduino makes perfect sense to me at least
03:33 <@Nexxy> yeah, it's been working well
03:33 < Franz__> its possible work
03:33 <@Nexxy> it's a natural fit for modular embedded applications
03:33 < Franz__> with flash and node.js socket.io  ?
03:33 <@Nexxy> "modular"
03:34 <@Nexxy> Franz__, anything is possible
03:34 < rvagg> this new Gertboard for Raspberry Pi looks like fun: http://www.raspberrypi.org/archives/1734
03:34 <@Nexxy> also ninjablocks shipped a ninjablock to me!
03:34 <@Nexxy> so that's exciting!
03:34 < substack> the only limit is yourself
03:35 < substack> Nexxy: I'm getting one of those too!
03:35 < substack> since I added a thing to upnode to make ssl work
03:36 < substack> and now ninjablocks are going to be using upnode yay
03:36 <@Nexxy> substack, sweet
03:36 < rvagg> oh cook, did you guys fork out for the kickstarter project?
03:36 < rvagg> s/cook/cool
03:36 <@Nexxy> actually I wasn't aware of them during their funding
03:38 <@Nexxy> the RF module is the most exciting IMO
03:40 < Franz__> somebody can help me with request module?
03:41 < Franz__> i cant work with this 
03:41 < Franz__> i need a simple example 
03:41 <@Nexxy> ... go on.
03:41 < russfrank> Franz__: are you talking about mikeal/request? because there's a pretty simple example in the readme 
03:42 < Franz__> i need catch the data of php page by post
03:42 < Franz__> rudolfrck mikeal/request
03:42 < russfrank> that sounds wrong. but, ok.
03:42 < Franz__> i saw the examples ;/
03:42 < Franz__> dont have this example 
03:42 < mikeal> Franz__ so you need the server code?
03:43 < Franz__> wow 
03:43 < Franz__> its your module :D
03:43 < Franz__> yes
03:43 <@Nexxy> THE mikeal !?
03:43 < russfrank> hahah
03:43 < rvagg> heh
03:43 < Franz__> yes? 
03:43 < Franz__> hahah
03:43 < mikeal> http.createServer(function (req, resp) { body = ''; req.on('data', function (chunk) { body += chunk}) req.on('end', function () { // you're done})
03:44 < mikeal> PHP is doing a client POST to your server, correct?
03:44 < rvagg> mikeal: now in coffeescript please
03:44 < Franz__> no
03:44 < rvagg> then in CAPSLOCKSCRIPT
03:44 < jrajav> YES
03:44 <@Nexxy> why is there no BFJS?
03:44 < mikeal> Franz__ ok, explain it one more time :)
03:44 < Franz__> the server need send a post request for php
03:44 < mikeal> i see
03:44 < Franz__> and retrieve the data and show for users connected
03:45 < mikeal> and what kind of data are you posting?
03:45 <@Nexxy> http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html
03:45 < mikeal> i'm guessing it's an url encoded form
03:46 < jrajav> Nexxy: Time for punctuation.js
03:46 < mikeal> request.post(url, {form:{key:value}}, function (e, resp) {})
03:46 <@Nexxy> cryllic.js
03:46 <@Nexxy> IMO
03:46 <@Nexxy> cyrillic*
03:46 < mikeal> if it's JSON just replace form: with json:
03:47 < jrajav> dingbats.js
03:47 < Franz__> mikeal i want catch a html code
03:47 <@Nexxy> html codes are not like pokemon
03:47 < Franz__> hahah
03:47 < mikeal> equest.post(url, {form:{key:value}}, function (e, resp, body) { // body is the string body of the response })
03:47 < jrajav> Exceptions: Gotta catch em all, gotta catch em all
03:47 < mikeal> s/equest/request
03:50 < Franz__> mikeal could you give me a example so
03:50 < Franz__> like as 
03:50 < russfrank> Franz__: you want the http response code?
03:50 < Franz__> request.post(http://localhost/page.php?id=1, {form:{key:value}}, function (e, resp, body) {
03:50 < russfrank> resp.statusCode
03:51 < mikeal> yeah, resp.statusCode is the HTTP code
03:51 < mikeal> body is the HTML (if the server returns HTML)
03:52 < mikeal> eww, what PHP service has querystrings in the url AND accepts querystring encoding post messages
03:52 < mikeal> that should be banned from the internet
03:52 <@Nexxy> mikeal, I believe that's what PHP calls "RESTful"
03:52 < mikeal> a lot of clients won't even let you do it
03:52 < mikeal> because they reuse the qs param for the body in a POST
03:53 < mikeal> and by "a lot" i mean "most of ruby"
03:53 < Franz__> i cant understand how can i use the syntax
03:55 < mikeal> i don't entirely understand what you want to get at
03:55 < mikeal> can you explain it in terms of HTTP?
03:56 < mikeal> i've gotta go, i'm sure if you can explain what you'd like to do in HTTP terms someone here can help you
03:57 < Franz__> its simple i can only a example 
03:57 < Franz__> with get and post retrieving a html code and sending for users connected
03:58 < Franz__> its the basic yet ;/
04:00 < Franz__> Nexxy all i learn its with examples ;~~
04:00 < Franz__> i found a example ! finally
04:00 < Franz__> !!!
04:01 < Franz__> var request = require('request');
04:01 < Franz__> request.post({
04:01 < Franz__>         headers: {'content-type' : 'application/x-www-form-urlencoded'},
04:01 < Franz__>         url: 'http://localhost/test2.php',
04:01 < Franz__>          body: "mes=heydude"
04:01 < Franz__>          }, function(error, response, body){
04:01 < Franz__>             console.log(body);
04:01 < Franz__>     });
04:01 < Franz__> Nexxy sorry for flood, this form i understand finally!!!! hahah
04:02 < Franz__> request.post(url, {form:{key:value}}, function (e, resp, body) { // body is the string body of the response })  resp.statusCode
04:02 < Franz__> this form i cant understand 
04:04 < mappum> Franz__, I don't believe that is the node API
04:04 < mappum> it's the http module
04:04 < mappum> nodejs.org/api/http.html
04:04 < wookiehangover> is npm down for anyone else?
04:04 < wltsmrz> No, wookiehangover 
04:04 < rvagg> Franz__: you should probably prefer 'form' to 'body' and let request 
04:05 < rvagg> request will set the header for you too
04:05 < rvagg> so leave header and body out, and do form: {mes:'heydude'}
04:06 < wookiehangover> wltsmrz: huh, I'm getting couch errors (v0.8.6, latest npm) https://gist.github.com/3329642
04:06 < Franz__> mappum you right
04:06 < Franz__> but with my poor knowledge of node and syntax 
04:07 < wookiehangover> looks like others are having simliar issues, at least https://github.com/isaacs/npm/issues/2689
04:07 < Franz__> i cant understand but with example in pratice its more easy for me
04:08 < Franz__> rvagg thanks
04:08 < wookiehangover> huh, apparently it may be on my end http://thomashunter.name/blog/npm-ssl-errors/
04:11 < rvagg> deoxxa: since you said you're writing streams now, have you had a look at this: https://github.com/dominictarr/stream-spec - I'm finding it to be very useful, mainly just the documentation
04:11 < deoxxa> i haven't
04:11  * deoxxa looks now
04:12 < deoxxa> ah yes, that would highlight numerous issues with my implementation
04:12 < deoxxa> issues that i should really fix
04:14 <@Nexxy> Franz__, I learn the same way :) no worry
04:15 < mappum> deoxxa, whoah, i was looking at your github profile 30 seconds ago, then looked and saw you here
04:15 < deoxxa> mappum: spooky!
04:15 < deoxxa> mappum: what were you looking at, out of curiosity? :D
04:15 < mappum> i needed an NBT encoder/decoder
04:15 < deoxxa> ooh
04:16 < mappum> is yours up-to-date and everything? I dont know if it has changed or not
04:16 < mappum> the NBT spec i mean
04:16 < deoxxa> it's up to date with the latest NBT spec, yeah
04:16 < deoxxa> as far as i know
04:16 < mappum> sweet deal
04:16 < deoxxa> there's tests there, see if they cover everything you need
04:16 < deoxxa> there are some problems with large numbers - specifically the "long" integers nbt uses
04:17 < deoxxa> but that's not something that's practical to work around with js
04:17 < deoxxa> (not without using a bigint library, which incurs significant overhead)
04:17 < mappum> how do you handle them then? just lose precision?
04:17 < deoxxa> yeah
04:17 < mappum> my minecraft client just puts them in an array as two numbers
04:18 < deoxxa> in practical use, i've never seen problems just ignoring the precision loss
04:18 < deoxxa> it can decode/encode a map chunk byte-for-byte identically
04:19 < deoxxa> you might also be interested in https://github.com/deoxxa/node-mcnet
04:19 < mappum> nice to see another person who develops for mc and uses node :P
04:19 < deoxxa> and https://github.com/deoxxa/libmcnet
04:20 < mappum> haha, i wish you had told me that a few weeks ago
04:20 < deoxxa> (the development branches of both those repos are more interesting)
04:20 < mappum> well i guess i had started it a logn time ago
04:20 < deoxxa> heh
04:20 < mappum> but i just got my network code up to date with 1.3
04:20 < deoxxa> yeah, that was a big set of changes
04:21 < mappum> everyone in #mcdevs hates on the hipsterism of node
04:21 < deoxxa> haha
04:21 < deoxxa> i always call them out on that when i see someone complaining
04:21 < deoxxa> and i'm like "yeah how's that C# going"
04:22 < rvagg> ouch, Node is hipster?
04:22 < rvagg> hmmm.. perhaps I need to reassess things
04:22 < mappum> apparently
04:22 < deoxxa> rvagg: it is to people who think "cutting edge" is .net MVC
04:22 < rvagg> I'll need a whole new wardrobe for this!
04:22  * Nexxy takes off the lenseless REAL-3D glasses...
04:23 < AAA_awright> ES is in need of a good arbritrary precision math library
04:23 < deoxxa> mappum: got source online for this bot?
04:23 < AAA_awright> That's something I'd like to see in Node.js core
04:23 < AAA_awright> If it's a feature that belongs in ECMAScript, it should probably be adopted by Node.js if it's not
04:23 < mappum> deoxxa: I will put it up soon
04:23 < AAA_awright> I think that's a fair argument?
04:23 < deoxxa> awesome
04:23 < deoxxa> AAA_awright: yeah, i'd find that useful
04:23 < mappum> i have a huge ugly piel of code that evolved a bunch of times
04:24 < mappum> it started out as minecraft stuff in-browser so i could map chunks
04:24 < AAA_awright> Well, should an arbritrary precision library be a part of a programming language?
04:24 < deoxxa> AAA_awright: to be useful though, it'd really have to be a wholesale replacement of the number system
04:24 < AAA_awright> It might make sense for ECMAScript, but not for, say, C or even C++
04:24 < mappum> then i wanted to do bots so it slowly evolved into a node library
04:24 < AAA_awright> True
04:24 < deoxxa> i.e. i don't want to have to do `new BigNumber("12341231241243252436436")'
04:25 < AAA_awright> ES has some capacity for it though, it's just another prototype I guess
04:25 < AAA_awright> hmm
04:25 < AAA_awright> How else would you do it?
04:25 < AAA_awright> Especially as a library
04:25 < AAA_awright> I think you'd store the values in a UInt* array
04:25 < deoxxa> well, there's already bindings to libgmp and such
04:25 < mappum> the one's i've seen (bigint, bignum) are just `bignum('12345645654643624')`
04:25 < deoxxa> if i wanted to use a library
04:26 < rvagg> new BigNumber(3,1,2,4,2,4,5,6,2,3,5,6,3,7,5,4,6,7,4,3,5) would do it!
04:26 < AAA_awright> And you have to go bignum.add(bignum('2894571348905723409578123908571390485'), 2) or something
04:26 < AAA_awright> idk what bignum does exactly?
04:26 < mappum> there is a language that works with node and has it built in: https://github.com/substack/number-script
04:27 < rvagg> heh... that's one option
04:27 < AAA_awright> Thing about arbritrary precision libraries, that I think you could argue to get it into Node.js core, is the high-efficency nature it needs to be
04:27 < AAA_awright> You can't write this in Javascript
04:27 < deoxxa> it really needs to be inside v8 if anything
04:27 < rvagg> Java solved these issues with BigInteger etc., similar sort of thing, boxed objects representing arbitrary precision & size numbers
04:27 < deoxxa> you can't do it nicely from outside imo
04:28 < deoxxa> as soon as there's a disconnect between normal numbers and these other numbers, there's a problem
04:28 < deoxxa> so they all need to be normal numbers
04:29 < deoxxa> of course, this introduces a whole other list of reasons people would dislike javascript's type mangling stuff
04:29 < AAA_awright> It's sort of unfortunate Number is defined to be 64-bit float
04:29 < rvagg> I don't see that happening in JS
04:29 < AAA_awright> Not just any float, an IEEE 64-bit floating point
04:29 < AAA_awright> So we don't get any of the accuracy of floating points, and none of the ranges if we need to iterate to large numbers
04:30 < AAA_awright> *precision in arbritrary bases
04:30 < benvie> http://wiki.ecmascript.org/doku.php?id=strawman:value_types
04:30 < benvie> and http://wiki.ecmascript.org/doku.php?id=strawman:value_objects
04:32 < deoxxa> mappum: if you're interested enough, i'd love another contributor to libmcnet/node-mcnet
04:32  * deoxxa bats eyelashes
04:33 < mappum> heh maybe
04:33 < mappum> how did you want it to work? would that handle the encryption/handshaking/whatnot?
04:39 < deoxxa> mappum: basically i'm wanting it to be a parser/generator only - no client logic or anything
04:39 < deoxxa> mappum: so the user handles things like encryption, compression, nbt stuff, etc
04:40 < deoxxa> the underlying c library maintains a strict "don't allocate memory" policy
04:40 < mappum> i wanted mine to only do simple client logic, so it would be a level up from yours
04:40 < mappum> it would be a minecraft socket, and it would handle the encryption, keepalive, etc
04:40 < deoxxa> yeah, that'd be awesome as well
04:41 < deoxxa> small parts all the way up to a full featured client
04:41 < mappum> you just open a connection, and read and write packets, it handles all the other network logic
04:41 < mappum> of course, you have to do all the actual client stuff yourself
04:41 < mappum> then i have soem ugly code that woudl eventually become the actual client
04:41 < deoxxa> by packets, you mean objects right?
04:41 < mappum> yeah
04:42 < deoxxa> cool
04:42 < deoxxa> that protocol is one of the craziest things i've ever dealt with
04:42 < mappum> haha i know, right?
04:42 < deoxxa> i'd feel bad exposing any of that to a potential user, haha
04:42 < deoxxa> be like "aw jeez, i'm sorry man. but you have to construct this kind of data."
04:42 < mappum> lol
04:43 < deoxxa> i should have breakfast soon... nearly 3pm and i'm hungry
04:43 < deoxxa> pancakes!
04:43 < mappum> good choice
04:50 < Domenic> Working on a intro to Node.js presentation. What are some packages that exemplify how the Node community likes "modern" tech? E.g. redis, socket.io, mongoose are very popular compared to e.g. mysql
04:52 < SomeoneWeird> express
04:52 < deoxxa> Domenic: i don't think it's so much that the community prefers modern stuff as the community is solving modern problems that are well met with these newer technologies... so it's not so much an idealogical thing as it is just practicality. i know that's probably not what you're saying, but i think you should try to make that part clear.
04:53 < Domenic> deoxxa: thanks for the feedback, yeah, that is kind of the direction i was going, but solving modern problems is a good way to put it
04:53 < deoxxa> some people see the node community as being this group of trendy kids with ironic scarfs and lattes, snubbing their noses up at traditional solutions
04:53 < mappum> you don't do that?
04:54 < deoxxa> well i'm an exception
04:54 < deoxxa> of course
04:54 < deoxxa> i'm unique
04:54 < deoxxa> but anyway, i think most people using node will just as quickly reach for mysql as they will mongodb if mysql fits their problem better
04:54 < deoxxa> (just as an example)
04:57 < deoxxa> onto the meat of your question though! some of substack's packages really show off the whole "do things that make sense" attitude
04:57 < deoxxa> Domenic: you might want to poke around github.com/substack and find something you can show off or talk about
04:58 < Domenic> deoxxa: yeah, the demo part of the talk is later, i'm in the "why is node cool" section, and the "it's modern" subsection at the moment.
04:58 < deoxxa> ah, yep
04:58 < deoxxa> well, a related point there is "there's no legacy"
04:58 < deoxxa> with a lot of platforms you have 5, 10, 15 years of libraries built up
04:59 < deoxxa> some of those libraries have thousands of hours of work put into them
04:59 < deoxxa> so you can't possibly compete with them if you write your own implementation of whatever
04:59 < deoxxa> but with node, there's still a lot of room for the community to shape how things should look
05:00 < Domenic> Haha yup, the next subsection is "community"
05:10 < substack> RVAGG I AM WATCHING DOUBLE THE FIST NOW THANKS TO IT BEING MENTIONED ON CAPSLOCKSCRIPT
05:19 < mappum> i just thought of an idea for a new breed of super-secure programming languages
05:19 < mappum> it would be invisble to humans
05:19 < mappum> only spaces and newlines
05:19 < mappum> the amount of spaces is the utf8 value for that character
05:19 < mappum> never again will your code be stolen by spies
05:20 < rvagg> substack: man, you have to watch a whole series, so good! series 2 was particularly enjoyable
05:21 < substack> rvagg: I enjoy how realistic the scenarios and challenges are
05:22 < substack> unlike similar programs which are totally staged
05:22 < rvagg> I'm just not sure how well it translates to non-australian audiences
05:33 < jesusabdullah> rvagg: Does it have kangaroos and Crocodile Dundee? ;)
05:34 < jesusabdullah> I made an Australia Catan map once. It was 90% desert with 3 robbers.
05:34 < rvagg> it has kangaroos and crocodiles, mr dundee is too WEAK
05:34 < jesusabdullah> but he has that knoife
05:34 < jesusabdullah> XD
05:35 < jesusabdullah> ^__^
05:35 < jesusabdullah> Where in Australia do you live again?
05:42 < SomeoneWeird> hahahah jesusabdullah 
05:43 < SomeoneWeird> mappum, lets do it
05:46 < deoxxa> what's with all the aussies here
05:46 < deoxxa> you're all criminals!
05:46 < SomeoneWeird> :c
05:47 < SomeoneWeird> because, australia is bloody awesome mate!
05:47 < SomeoneWeird> lol
05:47 < deoxxa> TOO RIGHT
05:47 < deoxxa> EY
05:47 < rvagg> !
05:47 < chilts> deoxxa: and a Kiwi - thank you very much :)
05:48 < rvagg> jesusabdullah: I live in part of the 10% non-desert
05:48 < chilts> well, I'm from Britain originally, but lived here for 10 years :)
05:48  * deoxxa throws rocks
05:48 < rvagg> a bit south of Sydney
05:48 < deoxxa> chilts: /nick chults
05:48 < chilts> heh
05:48 < jesusabdullah> rvagg: nice!
05:48 < chilts> fush and chups :)
05:48 < deoxxa> bru!
05:48 < jesusabdullah> I suspect the 10% that's not desert is pretty sweet
05:49 < jesusabdullah> also you have sassy parrots
05:49 < rvagg> swt az bru
05:49 < chilts> it's usually the 10% near the coast, where 99% of Aussies live :)
05:49 < jesusabdullah> cause the rest of it is JUST like Thunderdome.
05:49 < SomeoneWeird> true
05:49 < chilts> then again, only Hamilton is not near the coast in NZ
05:49 < rvagg> it IS
05:49 < SomeoneWeird> lol
05:50 < rvagg> you're in Hamilton chilts? I do a lot of work with Ambreed who are in Hamilton
05:50 < rvagg> occasionally have to fly over there for a few days, getting used to Hamilton
05:50 < chilts> rvagg: nah, I'm in Wgtn :)
05:50 < rvagg> ah, Wellington is a disappointing city...
05:50 < chilts> if you're in Welly sometime, give me a shout and we'll meet up
05:50 < chilts> heh
05:50 < chilts> scratch that then
05:50 < chilts> why disappointing?
05:50 < chilts> :)
05:51 < jesusabdullah> is it tiny?
05:51 < chilts> it's the best little capital in the world :)
05:51 < rvagg> just not much there! compared to Auckland and Christchurch it's kind of boring
05:51 < chilts> it's small enough to be good, but but enough to not be horrible
05:51 < rvagg> perhaps I got my hopes up before I first went there
05:51 < jesusabdullah> I've never been on the other side of the equator
05:51 < chilts> it's a great geek place, like a small San Fran
05:51 < chilts> and we have a better harbour too :)
05:51 < rvagg> Te Papa is cool tho
05:51 < chilts> just not a good bridge to show it off
05:51 < Domenic> Is there a simple public API I can use, where things stream in real time, but I don't need to auth to do it? E.g. latest tweet or latest instagram would be cool.
05:51 < jesusabdullah> dawg that's cause Oaktown has the harbor
05:52 < Domenic> (This is for a node.js demo in a presentation.)
05:52 < jesusabdullah> Domenic: streamit.jit.su
05:52 < chilts> rvagg: it is a truly great geek place, small enough to get to know a lot of people in the community
05:52 < rvagg> Dominic: the GitHub firehose is kind of interesting and would be interesting for nerds if that's your audience
05:52  * chilts is going out to some pubs with Wellington PerlMongers on Tuesday
05:53 < Domenic> jesusabdullah: cool site! not quite what I'm looking for but interesting idea.
05:53 < Domenic> rvagg: sounds excellent, any quick links?
05:53 < rvagg> develophttp://developer.github.com/v3/
05:53 < rvagg> http://developer.github.com/v3/
05:53 < rvagg> sorry
05:53 < jrajav> You should be
05:53 < jrajav> My religious beliefs explicitly forbid malformed URLs
05:54 < rvagg> https://api.github.com/events
05:54  * rvagg begs or http://forgiveness/
05:54 < rvagg> s/or/for
05:54 < deoxxa> jrajav: http:\\www.example.com
05:54 < SomeoneWeird> http://www.youtube.com/watch?v=jJ5l5ls0hP4
05:54 < SomeoneWeird> so much win
05:54 < Domenic> This looks excellent, thank you!
05:54 < rvagg> ouch! that hurts deoxxa 
05:55 <@Nexxy> deoxxa, please respect jrajav's religious beliefs
05:55 < deoxxa> rvagg: it was awkward to type as well
05:55 < deoxxa> i've had it up to here with your rules, Nexxy! first it's "don't set fire to the table", then "stop kicking my laptop", now this?!
05:56 <@Nexxy> well you broke the plug on the power adapter
05:56 < deoxxa> that means i just have to wait until that battery dies and my reign of terror can continue
05:57 <@Nexxy> it took me over an hour to solder it back together
05:57 < deoxxa> prepare for inconvenience, suckers!
05:57 < deoxxa> oh
05:57 <@Nexxy> is anyone streaming local audio from a node process?
05:57 <@Nexxy> maxogden, ?
05:58 <@Nexxy> I'm trying to make audio surveillance via beagleboard + node easy over twilio
05:58 < deoxxa> indutny is, i think
05:58 <@Nexxy> vock, that's right
05:58 < deoxxa> he's... absent... though
05:58 <@Nexxy> ty deoxxa 
05:59 <@Nexxy> I will look into it
05:59 <@Nexxy> I have no clue what format twilio is using
05:59 < deoxxa> being sick is super lame
05:59  * deoxxa cough
06:01 <@Nexxy> indutny is using opus codec for audio
06:01 < jrajav> deoxxa: wtf cover your mouth
06:02  * deoxxa covers his mouth
06:02  * deoxxa mmph
06:07 < Domenic> rvagg: GitHub firehose is working out wonderfully, many thanks.
06:13 <@Nexxy> apparently twilio just uses rtmp(s) for audio
06:14 < deoxxa> rtmp[es] is kind of annoying
06:15 <@Nexxy> oh well, it must be done!
06:15 < Domenic> Annnd good simple websocket demos apart from chat?
06:15 < deoxxa> Nexxy: check out rtmpdump (i think it's called)
06:15 <@Nexxy> deoxxa, oooh
06:15 <@Nexxy> ty <3
06:16 < deoxxa> i had a long battle with rtmp because of various anime streaming sites
06:16 < deoxxa> they thought they could secure their stuff
06:16 < deoxxa> (spoiler: they can't)
06:17 <@Nexxy> lol
06:18 < Sri19> suggestions for a pure node.js websocket server?
06:18 < deoxxa> i suggest node.js
06:18 < Sri19> :P
06:18 < Sri19> i'd like the basics taken care of.. i dont want to read the websocket spec
06:18 < deoxxa> npm search websocket
06:18 < Sri19> if it can handshake and receive messages, that'll be nice
06:18 < Sri19> yeah
06:19 < deoxxa> or take a look at socket.io if you want a super high level abstraction
06:19 < Sri19> nope, explicitly want to avoid socket.io
06:19 < Sri19> i love it its great
06:19 < deoxxa> i understand
06:19 < substack> streams!
06:19 < Sri19> but i want to work at a lower level
06:20 < deoxxa> well, ws is a good bet
06:20 < substack> this lets you use streams: http://github.com/substack/shoe
06:21 < Sri19> substack, ill check it out
06:21 < Sri19> good time to learn using streams
06:27 < substack> streams are the best thing ever
06:28 < jrajav> I stream at least a dozen things every day
06:28 < jrajav> Before breakfast!
06:32 < MARXBRONSON> hello node room, i'm working on something very exciting… running untrusted, multi-threaded user-submitted scripts. any v8 hackers in here?
06:32 < deoxxa> hey rvagg, i think maybe you can field this one
06:34 < blakmatrix> is there something up with npm i keep getting lots of 404
06:34 < MARXBRONSON> also, i know the stipulations about v8 and multiple threads :) just want to maybe talk to someone with some experience w/ v8's StartPreemption method
06:34 < MARXBRONSON> i have at least half of a good idea here, and would love to open src what i'm doing 
06:34 < munro> npm ERR! fetch failed https://registry.npmjs.org/-/forever-0.10.0.tgz
06:35 < substack> OPEN SOURCE THE SHIT OUT OF IT
06:35 < gkatsev> -g gf3 sandbox @ munro 
06:35 < purr> munro: gf3/sandbox · GitHub <https://github.com/gf3/sandbox>
06:35 < MARXBRONSON> hehe, i would love too ;)
06:35 < gkatsev> oops
06:35 < gkatsev> munro: sorry
06:35 < MARXBRONSON> no, sandbox creates a new process
06:35 < gkatsev> you dont want a new process?
06:35 < MARXBRONSON> the security precautions it takes are very informative though
06:35 < MARXBRONSON> no
06:35 < MARXBRONSON> i want:
06:36 < MARXBRONSON> multiple threads (v8 has its own Thread class internally), that are "run against" a single, isolated v8 VM instance
06:36 < munro> I'm having trouble npm installing 2 nodejitsu packages right now :/  anyone else? (forever & http-proxy)
06:36 < blakmatrix> munro: I'm getting 404s on npm packages too
06:36 < MARXBRONSON> such a thing is possible with the v8 API, *i think*
06:36 < MARXBRONSON> documentation… reaaaally blows
06:36 < blakmatrix> already cleared cache didnt help
06:37 < munro> yea, I tried on multiple VPSes :/  my world has come crashing down
06:37 < MARXBRONSON> i think such a request would require a fork of node, in order to receive network events JS side 
06:37 < gkatsev> probably
06:38 < MARXBRONSON> fork node, add  some functions to handle "New Thread" requests, run the JS in these new threads on the same isolated V8 interpreter VM
06:38 < MARXBRONSON> using StartPreemption to prevent the "while(1){}" execution problem
06:39 < MARXBRONSON> this would be game-changing. imagine if you could run server-side logic — almost for free! — on the Parse backend
06:39 < MARXBRONSON> this leverages all of node's concurrency wins against a scalability security problem
06:42 < munro> so many npm packages 404ing :'(
06:46 < deoxxa> eep
06:46 < deoxxa> hm. how should i test external services?
06:48 < jgornick> munro: Glad I'm not the only one seeing this.
06:48 < jgornick> Are they update the registry right now?
06:49 < mridgway> Wondering the same thing...
06:49 < mridgway> Lots o' 404s
06:50 < AustinYun> hm
06:50 < deoxxa> i wonder if i should hold off on publishing a package for a couple of hours then...
06:50 < AustinYun> what's a good way to share an options object between different submodules?
06:50  * AustinYun is a noob
06:50 <@Nexxy> EVENTS
06:51 < substack> AustinYun: if you need to share the options then you're probably doing something wrong
06:52 < AustinYun> to be specific i'm refactoring my blog engine to take the directory that has posts and the directory that has templates in it instead of hardcoding those locations in
06:52 < etcetera> are there any downsides to using sequelize?
06:52 < blakmatrix> deoxxa: I published a package just fin but then I wasnt able to install it on a differnt machine haha
06:52 < AustinYun> it's rice on NPM, btw
06:52 < etcetera> is there a lighter-weight ORM for node?
06:52 < deoxxa> ha
06:55 < AustinYun> if it's not idiomatic to do it that way, i'd be interested in learning the "proper" way since that's the entire point behind this exercise
06:57 < AustinYun> i tried reading the source code for Wheat to see how caswell does it, but he's got the directories hardcoded in :/
06:58 < AustinYun> substack: love NodeUp btw
07:05 < etcetera> anyone else having issues grabbing sequelize via npm?
07:06 < mridgway> a lot of packages are having issues. something wrong with the registry
07:09 < Domenic> yeah npm install jsdom just failed :-/
07:11 < fent> a bit out of topic. but wondering what people recommend for registering a domain?
07:11 < Domenic> all right, well, npm being down is one way to get me out of the apartment on a saturday night
07:11 < etcetera> mridgway: oh?
07:12 < mridgway> I'm seeing 404s on connect, mime, express, glob, etc
07:12 < AustinYun> fent: you mean what registrar?
07:14 < fent> AustinYun: yes
07:19 < deoxxa> does request work in a browser?
07:20 < jesusabdullah> deoxxa: look up iriscouch/browser-request
07:20  * deoxxa looks
07:20 < deoxxa> ah, awesome
07:21 < deoxxa> thanks jesusabdullah
07:21 < substack> browser-request doesn't pipe properly :(
07:22 < jesusabdullah> your MOM doesn't pipe properly
07:22 < deoxxa> burn
07:22 < jesusabdullah> seriously though, that's a bummer
07:22 < jesusabdullah> you should tell that JSON Smith guy
07:22 < deoxxa> substack: does browserify provide an http object compatible with request?
07:22 < etcetera> surprised this isnt on the front page of HN :-P
07:23 < deoxxa> etcetera: now's your chance! blog blog blog!
07:23 < mridgway> haha I check there first after seeing the 404s, and then here
07:36 < Urthen> Hello... is anyone else encountering errors when trying to install NPM packages?
07:36 < clarle> Node.js setInterval/setTimeout: "The callback will be called as close as possible to the time specified."
07:36 < clarle> How variable is the time difference for these?
07:36 < mridgway> Urthen: Yes. Not sure what's going on
07:36 < austinbv> depends on how slow something in your event loop is
07:37 < clarle> Ah, okay, I see.
07:37 < Urthen> @mridgway: Ok, thanks. At least I'm not crazy! Maybe this just means its time for bed....
07:37 < austinbv> clarle: every tick the event loop checks how much time has past if it's greater than your iterval or time out the call back is called
07:37 < mridgway> I did the same thing =P
07:37 < mappum> clarle, IIRC, it is pretty much exact, but has a minimum of 8ms or so
07:37 < austinbv> so if you have a for loop that locks down it won't be close
07:38 < austinbv> if you have a clean nonblocking app you will be close
07:38 < mappum> unless something blocks and keeps it from running
07:38 < mappum> it's node, that shouldn't really happen
07:38 < t_p> help, nmp install mongoose is failure
07:39 < austinbv> mappum: the code that blocks is normally not a library it's code that is written because someone doesn't understand async
07:39 < clarle> Is it recommended to use the node setInterval for callbacks that should run after longer intervals, like every 30 min?
07:39 < clarle> Or should I use something else for that?
07:39 < mridgway> t_p: nom registry is down
07:39 -!- Nexxy changed the topic of #Node.js to: welcome... to node.js. the infinite is possible. the only limitation is yourself | npm is having issues, you're not the only one
07:40 < t_p> mridgway: thanks,but how can you give this conclusion?
07:40 < mridgway> 404s for all packages essentially...
07:40 < austinbv> clarle: it's fine
07:40 < mridgway> good idea Nexxy =)
07:40 < clarle> Thanks austinbv!
07:40 < austinbv> I like set time out with async recursion
07:41 < austinbv> so setTimeout(function() { process.nextTick(function() {setTimeout() ...
07:41 < clarle> Is there a benefit to that over setInterval?
07:41 < austinbv> but if you look at the timers module it's the same
07:41 < austinbv> not really
07:41 < austinbv> there is in a lot of browser code
07:41 < austinbv> not really in node
07:42 < jesusabdullah> There is clarle
07:42 < t_p> mridgway:is this situation frequent?
07:42 < jesusabdullah> a setInterval just runs some function every n seconds
07:42 < mridgway> first I've experienced it
07:42 < jesusabdullah> a setTimeout runs the function *after
07:42 < jesusabdullah> * n seconds
07:42 < jesusabdullah> so controling timing with sequential settimeouts gives you more control
07:43 < austinbv> jesusabdullah: but the difference of using setTimeout with recursion or setInterval in node is almost nothing
07:43 < clarle> austinbv: For my reference, what's the benefit in browsers though?
07:44 < jesusabdullah> austinbv: how so?
07:44 < jesusabdullah> They're just different functions that do different things
07:44 < austinbv> I have no idea if this is still true or if it's just habit but setInterval would leak memory
07:44 < austinbv> and slowly crash long running js apps
07:44 < austinbv> https://github.com/joyent/node/blob/master/lib/timers.js you can see in node they are close to the same
07:44 < jesusabdullah> yeah, I wouldn't pay attention to that
07:47 < austinbv> jesusabdullah: https://gist.github.com/3330529 used to be recomended over setInterval
07:47 < Deir> hmm npm is 404ing on every package on windows >.>
07:47 < casten> anyone else having probles with npmjs.org?  I tried doing a couple installs and have gotten a couple 404's.
07:48 < clarle> Looks like it's an all-around npm issue, everyone's getting it.
07:48 < clarle> ^ topic
07:48 < Deir> oh the SSL cert on npm.org is not certified
07:48 < casten> great, thank you.  Any ideas on a workaround?
07:48 < casten> maybe a way to let npm client use http instead of https?
07:48 < Deir> manually install everything?
07:49 < casten> I suppose I can try to figure that out.
07:49 < Deir> @casten: https://registry.npmjs.org/-/pause-0.0.1.tgz
07:49 < Deir> npm itself is returning the 404
07:49 < Deir> so, not much we can do I suppose
07:49 < casten> gotcha
07:50 < casten> I guess I can try to dig up the tgz on github for nano and see how other things are installed, thanks for the help
07:50 < Deir> only problem with that is you will have to manually install every dependency
07:51 < Deir> even if you npm install (gitrepo or archive)
07:52 < Deir> been running my dependencies off a local nexus server so I'm okay.
07:53 < Deir> but wow, npm going down. That hurts.
07:53 < casten> haha, figures.. just started using node tonight.. npm worked, I installed couchdb and then tried to get nano and that was that
07:54 < mscdex> isaacs better be burning the midnight oil ;-)
07:54 < Deir> it has never been done on me before and I've been using node for a year or two now
07:54 < Deir> *down
07:54 < Deir> but shit happens.
07:54 < casten> yeah, ha, maybe I'll hold off and try again tomorrow night
07:55 < casten> I was just thinking to myself how nice all the tools and setup was.. very straightforward, even easy to get running on windows, which was a nice surprise.
07:55 < Deir> yeah that took awhile
07:55 < Deir> but def works great now
07:55 < Deir> what IDE are you using btw?
07:55 < Deir> and.. have you met my friend coffeescript? ;)
07:56 < casten> haha, notepad++, but I'll probably switch to something else once I get rolling with my project
07:56 < mscdex> notepad++ rules if you're on Windows!
07:56 < Deir> yeah I was big into notepad++ until I noticed one my reports using sublime text
07:56 < Deir> and I have fallen in love with sublime text 2 since then.
07:56 < mscdex> gedit for all other platforms :-D
07:57 < Guest52575> Hey guys, can you please solve this one
07:57 < Guest52575> npm ERR! fetch failed https://registry.npmjs.org/-/request-2.10.0.tgz npm ERR! Error: 404 Not Found npm ERR!     at null.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/fetch.js:47:16) 
07:57 < Guest52575> I tried uninstalling npm and removing all stale configs
07:57 < Deir> @Guest: Topic and "The System Is Down" -> strongbad techno.
07:57 < Deir> but yeah, it sucks :(
07:57 < TehShrike> npmjs.org is up for me
07:58 < Deir> https://registry.npmjs.org/-/pause-0.0.1.tgz
07:58 < Deir> click it
07:58 < mridgway> the site is up, the package server seems down
07:58 < Guest52575> yes .. some issue today only
07:58 < TehShrike> Well that sucks
07:58 < Guest52575> yesterday it seems to be fine
07:58 < Guest52575> I am begineer on Node so confused, if I messed up :(
07:58 < casten> I use Eclipse at work and used VisualStudio in the past, but it's not clear how useful those will be unless either one has a plugin for V8 debugger.. I think I saw a post where you can use Chrome Dev Tools from Eclipse with a node.js scripts.
07:59 < Deir> I'm not a big fan of eclipse myself
07:59 < Deir> sublime text has been working out really well as its highly modular with very little UI/overhead
07:59 < casten> Haha, anyone who is (and isn't an Eclipse dev) needs to be beaten.
07:59 < Deir> plus tons of modules for the stuff I'm into
08:00 < Guest52575> Agree with Deir, sublime is all you need
08:00 < casten> I'll take a peek now
08:00 < Deir> I may make a grooveshark plugin xD
08:00 < Deir> so I can pull up the console to change the song
08:01 < Deir> @Guest: there are also some interesting graphical code correlation editors being made
08:01 < Deir> they'd be pretty useful for node and require.js
08:02 < eddyb> uhm...
08:02 < eddyb> npm ERR! fetch failed https://registry.npmjs.org/-/socket.io-0.9.10.tgz
08:02 < eddyb> why can't I... nevermind
08:02 < Guest52575> facing the same eddyb :(
08:02 < eddyb> topic explains it ;)
08:02 < Deir> @eddy: http://www.youtube.com/watch?v=ILVfzx5Pe-A
08:02 < eddyb> s/;)/:)/ (not actually happy)
08:03 < eddyb> so, uhm, should I just fetch everything from github?
08:03 < Deir> yeah, just got connect installed that way >.>
08:03 < eddyb> but that wouldn't work because deps
08:03 < eddyb> darn...
08:03 < Deir> you gotta get every single dep
08:03 < Deir> node.js hardmode.
08:03 < eddyb> I guess I can copy express and socket.io from another app
08:07 < blakmatrix> hehe npm ERR! fetch failed https://registry.npmjs.org/-/npm-1.1.48.tgz
08:07 < casten> sublime2 looks pretty nice, I like the default color scheme and syntax coloring
08:08 < Deir> install the package control module
08:08 < casten> @blackmatrix npmjs package server busted
08:08 < Deir> basically an npm for it (lol)
08:11 < jondot_> hello. is npm registry down or something? getting 404 on packages
08:15 < blakmatrix> jondot_: seems to be that way for several hours now
08:19 < casten> @jondot_ Yes, down for a bit now.
08:27 < TehShrike> I'm pretty certain that this is the best IDE: https://github.com/dominictarr/hipster
08:48 < stisti> does hipster install for anyone?
08:49 < stisti> $ npm install hipster -g
08:49 < stisti> npm http GET https://registry.npmjs.org/hipster
08:49 < stisti> npm http 200 https://registry.npmjs.org/hipster
08:49 < stisti> npm http GET https://registry.npmjs.org/-/hipster-0.3.1.tgz
08:49 < stisti> npm http 404 https://registry.npmjs.org/-/hipster-0.3.1.tgz
08:49 < stisti> npm ERR! fetch failed https://registry.npmjs.org/-/hipster-0.3.1.tgz
08:49 < stisti> npm ERR! Error: 404 Not Found
08:49 < Filnik> stisti: npm is down
08:49 < stisti> git cloning and installing from the repo does not work either... aha!
08:49 < stisti> thanks
08:50 < stisti> oh right... it's in the topic *blush*
08:50 < Filnik> stisti: TehShrike seems to successed to install hipster though, try to ask him..
08:52 < t_p> anyone know when can the npm server availiable?
09:13 < SomeoneWeird> is there a sqlite lib thats updated for current node?
09:35 < substack> rvagg: mephesto is the best
09:39 < SomeoneWeird> is npm reg down for anyone?
09:40 < mathix> it's down for me
09:40  * Nexxy looks at the topic...
09:40  * Nexxy looks at SomeoneWeird...
09:41 < substack> welcome to node.js the only limitation is npm being down
09:41 < mathix> when trying to download .tgz file i get 404
09:41  * SomeoneWeird slaps Nexxy 
09:41 < SomeoneWeird> ya
09:41 < SomeoneWeird> I CAN SEE NOW
09:41  * Nexxy does not condone violence
09:42 < SomeoneWeird> i cant even download gyp
09:42 < SomeoneWeird> xX
09:42 < SomeoneWeird> x.X
09:42 <@Nexxy> where is your god now?
09:42 < SomeoneWeird> :c
09:43 < SomeoneWeird> wtf, why does node-gyp configure download node source?
10:06 < milani> SomeoneWeird, because it needs the source to compile your module
10:06 < milani> there is an option to use your own node repository
10:06 < milani> I can not remember it now. something like --src-dir /path/to/node
10:11 < SomeoneWeird> heh
10:15 < eddyb> I am mad https://gist.github.com/3331065
10:15 < tzara> SomeoneWeird: hmm yes npm down it seems :/
10:18 < SomeoneWeird> :)
10:22 < mathix> does it happen often?
10:24 < freewil> it's the end of days
10:24 < freewil> we need npm mirrors
10:26 < bright_day> hello  is something wrong with npm? i cant download packages
10:26 < SomeoneWeird> ya
10:27 < SomeoneWeird> lol
10:28 < bright_day> ca anyone answer?
10:29 < bright_day> clear
10:29 < bright_day> clear
10:30 < SomeoneWeird> <SomeoneWeird> ya
10:34 < jetienne> isaacs: npmjs.org database is corrupted on my name. where should i report ?
10:35 < igorw> hello, I'm getting a 404 when trying to install npm, is this a known issue, and are there any workarounds?
10:35 < jetienne> https://npmjs.org/package/gowiththeflow im here but clicking on my name do a kind of 500 https://npmjs.org/profile/jetienne
10:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:53 < mmalecki> npm registry is down
10:53 < mmalecki> isaacs: ^
10:54 < justmoon> mmalecki: see topic
10:54 < mmalecki> oh lol
10:57 < justmoon> mmalecki: see also https://github.com/isaacs/npm/issues/2694
10:58 < mmalecki> it's ridiculously hard to hit a link when you're drunk
10:58 < ansolas> :)
10:59 < jetienne> mmalecki: :)
10:59 < justmoon> mmalecki: if you want I can post the link a couple times in a row to increase the surface area :P
11:01 < mmalecki> justmoon: lol
11:02 < mmalecki> ok, I have an idea...
11:02 < mmalecki> oh, wait, no >.<
11:05 < mmalecki> packages are there, in the npm
11:05 < mmalecki> like http://isaacs.ic.ht/_utils/document.html?registry/cradle
11:05 < mmalecki> attachments...
11:05 < mmalecki> SO
11:05 < mmalecki> it's easy to fix
11:06 < mmalecki> I can try writing a proxy, one sec
11:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:06 < rvagg> if only everyone had have installed hoarders then we wouldn't worry about npm being down
11:07 < justmoon> rvagg: yes, because if everyone was trying to install hoarders all the time, the server would always be down
11:07 < justmoon> ^^
11:07 < rvagg> aye, probably
11:12 < rvagg> substack: tara is my fav, she's fistworthy
11:13 < rvagg> ... which will sound quite odd to everyone else who doesn't know the context!
11:14 < bright_day> what your oppinion about node up and running should i buy it ?
11:24 < SomeoneWeird> brianloveswords, huh
11:24 < SomeoneWeird> bright*
11:24 < SomeoneWeird> nvm
11:27 < axefrog> nodeunit is failing to install for some reason. npm install -g nodeunit. yields a 404 in the process. anyone else have this issue? npm http 404 https://registry.npmjs.org/-/nodeunit-0.7.4.tgz
11:28 < rvagg> see the topic axefrog
11:28 < axefrog> oh right, thanks
11:28 < axefrog> any workarounds?
11:28 < axefrog> i guess clone manually :P
11:28 < rvagg> you could manually install from github
11:28 < rvagg> +deps
11:28 < axefrog> yeh
11:34 < bright_day> exit
11:35 < rvagg> exit: command not found
11:37 < stephank> I'm trying to incrementally decrypt data aligned to the cipher block size, but Decipher#update doesn't return anything? http://pastebin.com/Pb95reUq
11:41 < SomeoneWeird> anyone know I'm getting TypeError: Object #<Object> has no method 'appendFile'
11:41 < SomeoneWeird> fs.appendFile
11:41 < SomeoneWeird> :X
11:42 < bnoordhuis> SomeoneWeird: node 0.6.x?
11:43 < SomeoneWeird> hmm using nvm i just installed 8.6
11:43 < SomeoneWeird> maybe its still using an old version somewhere
11:43 < SomeoneWeird> but ya it was .6
11:43 < bnoordhuis> appendFile is only in 0.8.x
11:43 < SomeoneWeird> yeah i just updated
11:46 < futjikato> Does this tut https://github.com/joyent/node/wiki/using-eclipse-as-node-applications-debugger still work with eclipse 4.2 ? I get an error : "Failed to connect to Standalone V8 VM connect timed out" averytime
11:49 < ansolas> http://jbeckwith.com/2012/06/07/node-js-meet-webmatrix-2/
11:49 < ansolas> huh it even supports jade !?
11:59 < RLa> futjikato, don't you have to enable remove debugging in node?
11:59 < RLa> remote*
12:00 < stephank> mscdex: I'm curious if you've gotten encryption to work in your ssh client. I'm talking to openssh, and have matching keys on the client and server, yet the server doesn't understand me.
12:00 < davidbanham> I want to use zlib to stream a tar.gz archive from a directory of files. It seems simple with a single file, but I can't seem to see a way to do it with multiple files.
12:00 < futjikato> RLa do I ? I just followed the tutorial and thought starting it with --debug-brk should work fine
12:01 < RLa> hm
12:01 < futjikato> RLa do you have any information what exactly you mean and how i can get it working ?
12:01 < rasmus> tuhoojabotti!
12:01 < RLa> no, haven't used it
12:02 < futjikato> RLa ok thanks for the hint anyway :)
12:02 < rasmus> Do anyone have any idea how I could match up two random clients with socket.io, like omegle chat
12:08 < davidbanham> Looks like zipstream is what I want.
12:08 < tuhoojabotti> rasmus: ½
12:08 < tuhoojabotti> !
12:08 < axefrog> node-dsl - what's "dsl" stand for?
12:09 < rasmus> Hey tuhoojabotti!
12:09 < axefrog> sorry, nodeunit-dsl
12:09 < tuhoojabotti> rasmus: Hej!
12:09 < shanse> domain specific language, I suppose axefrog 
12:09 < axefrog> oh. hmm
12:10 < axefrog> just trying to work out what nodeunit-dsl does. not particularly clear on the project page.
12:13 < farhadi> Why I can't install anything with npm?
12:14 < shanse> look at the topic
12:14 < farhadi> everything fails with 404 error
12:14 < axefrog> yep
12:16 < farhadi> oh sorry, I didn't see the topic
12:18 < fex-> hi im having trouble installing node-mysql
12:18 < fex-> i get this error http://pastebin.com/ibw6L7M4
12:18 < axefrog> fex - see the topic
12:18 < fex-> ojust saw it sorry
12:29 < hilkolantinga> Any news about the npm registry?
12:41 < rvagg> no
12:51 < Kullt> hi
12:59 <@Nexxy> npm being down made HN!
13:00 < ansolas> :)
13:00 < ansolas> time for a break haha
13:00 <@Nexxy> at least it happened on a Sunday!
13:01 < ansolas> hihi
13:02 < mmalecki> I wrote a proxy
13:02 < mmalecki> sec
13:02 < mmalecki> deploying it to joyent, it should be up in few mins
13:02 < mmalecki> once this machine finishes compiling node
13:03 < mmalecki> https://github.com/mmalecki/npm-proxy
13:03 < \stro> getting a lot of 404s from npm, known downtime?
13:03 < mmalecki> Nexxy: would you mind putting it in the topic as a temp workaround when I'm done?
13:04 < ansolas> we should put it in teh topic :) NPM is down :)
13:07 < milani> mmalecki, is npm working on joyent machines?
13:07 < milani> then what's the problem really?
13:07 < mmalecki> milani: no, but it's a routing problem
13:08 < yhpark> hmm..
13:08 < mmalecki> milani: what I'm doing is I'm working around a problem in couchapp
13:09 < mmalecki> milani: see the code if you're curious https://github.com/mmalecki/npm-proxy/blob/master/proxy.js
13:09 < milani> thx:)
13:12 < mmalecki> compiling node never took so long XD
13:12 <@Nexxy> ansolas have you looked at the topic? :P
13:13 <@Nexxy> mmalecki, I'm on my phone right now
13:14 < yhpark> mmalecki: does your proxy requires http-proxy module?
13:15 < mmalecki> yawnt: no
13:15 < mmalecki> yawnt: fixed on master
13:15 < yhpark> hmm 
13:15 < yhpark> not working
13:15 < yhpark> mmalecki: ReferenceError: httpProxy is not defined
13:15 < mmalecki> yhpark: fixed on master
13:18 < mmalecki> okay, `npm install <thing> --registry http://165.225.128.50:8000` should work
13:18 < yhpark> mmalecki: it works
13:18 < yhpark> thanks
13:18 < mmalecki> yhpark: <3
13:18 < mmalecki> sec, last fixes
13:19 < yhpark> ran mine btw
13:19 < mmalecki> it appears to have problems with modules with '-' in name
13:19 < mmalecki> looking
13:20 < milani> mmalecki, thx.
13:21 < milani> mmalecki, no it seems it works fine with `-`
13:22 < yhpark> well it seems not working with `-`
13:22 < axefrog> mmalecki - the proxy address works "better" for nodeunit, but still fails down the line
13:22 < yhpark> npm ERR! fetch failed http://127.0.0.1:8000/-/forever-monitor-1.0.1.tgz
13:22 < axefrog> yeah prob with - in the name
13:22 < axefrog> or not
13:22 < axefrog> *shrug
13:23 < xijhing> is there a workaround for npm fetch failed today?
13:24 < yhpark> xijhing: https://github.com/mmalecki/npm-proxy
13:25 < yhpark> mmalecki: must be struggling with regexp I guess..
13:25 < mmalecki> yhpark: yeah, that's where it fails
13:26 < milani> ok so mine used the cache.
13:26 < xijhing> dankeshein
13:26 < Kullt> I can't install any modules with npm install
13:27 < Kullt> npm http GET https://registry.npmjs.org/socket.io
13:27 < Kullt> npm http 304 https://registry.npmjs.org/socket.io
13:27 < Kullt> npm http GET https://registry.npmjs.org/-/socket.io-0.9.10.tgz
13:27 < Kullt> npm http 404 https://registry.npmjs.org/-/socket.io-0.9.10.tgz
13:27 < Kullt> npm ERR! fetch failed https://registry.npmjs.org/-/socket.io-0.9.10.tgz
13:27 < Kullt> npm ERR! Error: 404 Not Found
13:28 < axefrog> Kullt - see topic
13:29 < Kullt> ah
13:29 < Kullt> sorry
13:29 < axefrog> I'm using it as an excuse to not write unit tests seeing as I can't install nodeunit :P
13:29 < Kullt> if I manually add the modules do they have to be declared anywhere?
13:29 < mmalecki> yhpark: fixed
13:29 < Kullt> other than in the app?
13:30 < mmalecki> can anyone set the topic to point to that registry?
13:30 < axefrog> you don't have to declare modules, you just put them in the appropriate location
13:30 < Kullt> and you can require them without the full path?
13:30 < axefrog> then erquire() them
13:30 < yhpark> trying
13:31 < yhpark> mmalecki: goood! 
13:32 < yhpark> thanks again
13:32 < Filnik> mmalecki, <3 now it works, thank you :)
13:32 < yhpark> this should be on the topic
13:32 < mmalecki> Nexxy: pretty please!
13:33 < axefrog> mmalecki - you rock - that works great :)
13:33 < mmalecki> yay :)
13:33 < axefrog> just installed nodeunit
13:34 < axefrog> Kullt - npm install whatever --registry http://165.225.128.50:8000
13:34 < axefrog> temp fix by mmalecki
13:36 <@Nexxy> mmalecki, back
13:36 <@Nexxy> mmalecki, kk, link to instructions? or...
13:36 < mmalecki> Nexxy: npm install <module> --registry http://165.225.128.50:8000
13:36 < mmalecki> or https://github.com/mmalecki/npm-proxy if you want to run it locally
13:37 -!- Nexxy changed the topic of #Node.js to: npm is down. use `npm install <module> --registry http://165.225.128.50:8000` in the mean time.
13:37 <@Nexxy> good?
13:37 < mmalecki> sure :)
13:37 < mmalecki> Nexxy: <3 !
13:37 <@Nexxy> mmalecki, <3
13:37 < Kullt> I still get the same error
13:37 < Kullt> :/
13:37 < yawnt> mmalecki: ?
13:37 < mmalecki> Kullt: gist please?
13:38 <@Nexxy> major props for working on a temporary fix :)
13:38 < mmalecki> this was probably the fastest devops action ever
13:38 < yawnt> mmalecki: does push work too? with yo proxy i mean
13:38 < yawnt> *your
13:38 < mmalecki> yawnt: nope
13:38 < mmalecki> gets only
13:38 < yawnt> k
13:38 < mmalecki> sorry
13:38 < yawnt> np thought so, but i wanted to make sure
13:39 < igorw> mmalecki: sweet, works. installing npm itself was a bit more tricky :)
13:39 < mmalecki> igorw: haha, yeah
13:39 < yawnt> sigh
13:39 < yawnt> travis fails too now
13:39 < mmalecki> I had this problem when I was installing forever on this server
13:39 -!- Nexxy changed the topic of #Node.js to: npm is down. use `npm install <module> --registry http://165.225.128.50:8000` in the mean time. (thank mmalecki for the work-around)
13:40 < yawnt`d[^_^]b> imma listen to music
13:40 < mmalecki> Nexxy: ♥ !
13:40 < yawnt`d[^_^]b> yo
13:40 < Kullt> mmalecki: https://gist.github.com/3331879
13:40 < mmalecki> Nexxy: you're getting a filled heart for that one!
13:40 <@Nexxy> omg little ♥ thingies!
13:40 <@Nexxy> I miss those ._.
13:40 < mmalecki> Nexxy: come and join us!
13:41 <@Nexxy> No!
13:41 < mmalecki> Kullt: probably still regexp, working on a fix
13:41  * Nexxy foot stomp
13:41 < Kullt> Thanks
13:42 < mmalecki> Kullt: yeah, pushing a fix
13:42 < Kullt> sweet
13:43 < mmalecki> there, done
13:44 < mmalecki> Nexxy: if you feel like, please retweet https://twitter.com/maciejmalecki/status/234640793476947970
13:44 <@Nexxy> but of course!
13:44 < mmalecki> you probably have way more followers than I do :)
13:44 <@Nexxy> nope!
13:44 <@Nexxy> we're about the same
13:45 < mmalecki> oh, nice!
13:46 < Kullt> mmalecki: thank you very much :)
13:47 <@Nexxy> https://www.gittip.com/mmalecki/
13:47 <@Nexxy> just sayin'
13:48 < jrajav> Is Underscore pretty much the name of the game for fp libs?
13:48 < jrajav> I'm having trouble even finding alternatives, much less comparing them
13:48 < yawnt`d[^_^]b> i want gittip too OL
13:48 < yawnt`d[^_^]b> *O:
13:48 < yawnt`d[^_^]b> just kiddin
13:49 < mmalecki> Nexxy: hahaha
13:53 < mscdex> node.js rules!
13:54 < mmalecki> oops, it's running on node v0.9.1-pre, I should probably do something about that XD
14:05 < fex-> hi i have been exploring the node chat example and was wondering if you could give me any info on the sort of user capacity that it could handle
14:06 < fex-> with say 2gb ram
14:07 < AvianFlu> fex-: probably a couple thousand people, without having to work too hard
14:08 < fex-> so it would be as good as irc?
14:09 < AvianFlu> well, it probably doesn't do as much
14:09 < AvianFlu> I've not looked at that code in a long time
14:10 < fex-> ok thanks
14:10 < AvianFlu> and a node IRC server could probably handle the same kind of load
14:10 < AvianFlu> give or take, depending on protocol overhead and crap like that
14:12 < JasonSmith> npm is up
14:13 < AvianFlu> ALL HAIL JASONSMITH, FIXER OF COUCHES
14:14 < mmalecki> yay!
14:14 < justmoon> cool, many thanks!
14:14 < mmalecki> JasonSmith++
14:15 < jrajav> npm was down? o_O
14:16 < JasonSmith> For some people
14:21 < jgornick> thank you mmalecki for the nom backup :)
14:21 < mmalecki> jgornick: pleasure :)
14:22 < mmalecki> I'll take it down soon
14:22 < mmalecki> Nexxy: also, topic!
14:30 < jgornick> mmalecki: did you take it down already?
14:30 < mmalecki> jgornick: no, not yet
14:30 <@Nexxy> mmalecki?
14:31 < jgornick> mmalecki: hmm, i was just getting 404's from you as well.
14:31 < mmalecki> Nexxy: I think that npm is fixed already, but still fails for me
14:31 < mmalecki> JasonSmith: ^
14:31 < mmalecki> jgornick: what module?
14:31 < mmalecki> Nexxy: so let's leave the topic as it is for now
14:31 < jgornick> ERR! fetch failed http://165.225.128.50:8000/-/handlebars-1.0.6-2.tgz
14:31 <@Nexxy> yeah
14:32 < mmalecki> jgornick: oh, the magic of regexp!
14:32 < mmalecki> jgornick: let me look at it for a sec
14:33 < jgornick> mmalecki: thanks!
14:33 < jgornick> general question too, if i wanted to get the latest of a project hosted on github, i would include something like this in my package.json, right? "locomotive": "git://github.com/jaredhanson/locomotive.git"
14:37 < axefrog> what's the best mocking framework?
14:40 < QaDeS> hiyas. anybody else getting 404s when  trying to install anything with npm? have npm 1.1.48 with node 0.8.6, but same error with 0.6.21
14:40 < axefrog> qades - see topic
14:40 < jgornick> QaDeS: Yes, there are issues with npm. They are working on a fix. Also, see topic.
14:40 < jgornick> I just submitted this issue too :) https://github.com/isaacs/npm-www/issues/115
14:41 < QaDeS> ah, tyvm. seem to be a bit blind today ;)
14:53 < pppaul> hey. i forked a node app that i want to patch. i have used node inspector before, but i find it really hard to debug node apps (i'm comfortable with debugging js heavy websites, though)
14:53 < pppaul> can anyone point me in the right direction for getting the most/more out of node inspector, or some other debugging tool?
14:57 < jgornick> mmalecki: when you said the magic of regexp, what did you mean by that? is the handlebars package not resolving properly because of some regex expression?
14:59 < mmalecki> jgornick: https://github.com/mmalecki/npm-proxy/blob/master/proxy.js#L3 - it doesn't parse x.y.z-a correctly
15:00 < jgornick> ahhhh!
15:00 < jgornick> "fuckety fuck npm is down oh noes. OH LOOK I MADE A PROXY."
15:00 < mmalecki> :D
15:01 < mmalecki> I was still drunk when starting to write it
15:04 < yoklov> what do you guys use for testing
15:05 < yoklov> i'd looking for something simple/lightweight
15:05 < coderarity> vows or node-tap
15:07 < yoklov> vows seems like its annoying.
15:08 < yoklov> but I not a big TDD guy so i'm probably not its target audience.
15:08 < jgornick> yoklov: i use buster
15:09 < mmalecki> I use assert module from the core
15:09 < mmalecki> or tap
15:09 < yoklov> buster looks nice
15:10 < jgornick> buster is nice :)
15:10 < yoklov> i considered just asserting, but figured that i'd ask around
15:10 < desdur> I'm trying to npm install coffee-script, but I get 404 error... Is npm registry down, or is it something wrong with my setup?
15:10 < jgornick> yoklov: it gives you best of both worlds, xUnit assertions or bdd style tests.
15:12 < guybrush> desdur: see topic
15:12 < jgornick> yoklov: plus the guy who wrote buster wrote this book: http://www.amazon.com/Test-Driven-JavaScript-Development-Developers-Library/dp/0321683919
15:13 < yoklov> again, I'm not too big on TDD.  most of the tests i write are for sanity checks.
15:13 < desdur> guybrush: or, thank you, I should pay attention!
15:14 < yoklov> but buster seems to give me what i want, e.g. a way for me to provide assertations that it keeps count of
15:14 <@konobi> mocked can also be handy
15:15 < pppaul> is buster.js less code/writing for tests than mocha
15:15 < pppaul> ?
15:16 < shoshy> heym i'm new to node. i've install express using the -g flag, later i ran express new_project, which created a directory name new_project and then i wanted to get all the dependencies, so i ran npm install but i got npm ERR! fetch failed https://registry.npmjs.org/-/jade-0.27.2.tgz
15:16 < shoshy> npm ERR! Error: 404 Not Found (and then it gave some more ERRS and crushed, probably because of jade). When i went to https://registry.npmjs.org/jade i saw it refers to https://registry.npmjs.org/-/jade-0.27.1.tgz .. is error on my side or their's? 
15:16 < shoshy> *hey
15:16 < bingomanatee> Hello - I am getting a shasum error from npm
15:16 < bingomanatee> for nuby-express
15:16 < bingomanatee> ping isaacs
15:17 < substack> npm is le broken
15:17 < bingomanatee> that is unfortunate. 
15:17 < substack> il ne marche pas bien
15:18 < bingomanatee> has any prediction been made re extent/ETA?
15:18 < substack> well isaacs probs just needs to wake up first and come upon a computer terminal
15:19 < shoshy> substack: were you refering to my problem? 
15:19 < bingomanatee> hm.
15:19 < thanpolas> npm itchy today?
15:22 < sabermonk> hi, can start or end in buffer.slice([start],[end]) has negative arguments, or start < end so that slice is done in circular way?
15:23 < jgornick> pppaul: buster supports both xUnit and BDD style.
15:23 < substack> sabermonk: start >= 0 ? start : (buffer.length + (-start) % buffer.length)
15:24 < substack> jgornick: why doesn't it just pick one and stick with it?
15:24 < jgornick> substack: no clue. i'm assuming to provide the ability to please everyone :)
15:24 < substack> fuck that
15:25 < substack> that's why we have separate test harnesses
15:25 < substack> written by completely separate people
15:25 < substack> to depth-first search the solution space, not to breadth-first it
15:25 < substack> because if everybody breadth-firsts then we learn nothing
15:30 < pppaul> jgornick, i thought mocha does too
15:30 < jgornick> pppaul: i'm did not know that.
15:30 < jgornick> s/i'm/i
15:30 < substack> pppaul: use this https://github.com/isaacs/node-tap
15:31 < jgornick> pppaul: i see, they allow you to use any assert library.
15:32 < jgornick> substack: tap looks nice. very minimal.
15:33 < sabermonk> substack: thanks does it go for start > end too ? (,ie) when start it beyond the end
15:33 < pppaul> i thought that tap was a protocol, and not a testing framework
15:34 < substack> sabermonk: that snippet was so that you could write that part yourself
15:34 < substack> pppaul: yes
15:34 < substack> but who cares, the module known as tap rocks
15:36 < pppaul> oh, is there a tap module that is a testing framework too?
15:37 < RLa> is there a longer tutorial about using jade on browser?
15:38 < RLa> so i get a runtime.js and a compiled template wrapped into function named 'anonymous'
15:38 < RLa> what next? :)
15:38 < pppaul> profit
15:39 < jgornick> mmalecki: did you happen to find a fix for the regex pattern to resolve the handlebars package properly?
15:40 < mmalecki> jgornick: not yet, sorry, didn't have time to look into it yet
15:40 < jgornick> no worries. maybe i can take a stab at it.
15:46 < mmalecki> jgornick: sure, if you feel like :)
15:49 < merpnderp1> I wonder why mongoose doesn't have a fully functioning example? I'm pretty sure that the models are meaningless if not defined with an actual connection. https://github.com/LearnBoost/mongoose/blob/master/examples/schema.js
15:55 < bingomanatee> if you're not conneted to a database, what sort of funtionality do you expect to see?
15:56 < shoshy> i'll retry asking, i'm trying to do npm install jade and i get npm http 404 https://registry.npmjs.org/-/jade-0.27.2.tgz
15:56 < shoshy> npm ERR! fetch failed https://registry.npmjs.org/-/jade-0.27.2.tgz .. 
15:56 < bingomanatee> npm broke
15:56 < shoshy> ok..
15:56 < thanpolas> npm is broken indeed :(
15:56 < shoshy> bingomanatee: is that thing happends very often ?
15:56 < thanpolas> off to my couch, to view us v spain
15:57 < bingomanatee> not to my knowledge
15:57 < bingomanatee> ping isaacs
15:57 < shoshy> good to know. thanks.
15:58 < mmalecki> shoshy: please see the topic
16:16 < domachine> Hey anybody else here having issues with npm?
16:16 < jgornick> what's the reason why the repository is not resolving packages properly?
16:16 < jgornick> domachine: see topic
16:16 < domachine> jgornick: sorry, thank you so much :)
16:19 < cainus> anyone know anything about mocha vs. node 0.9.0?  
16:20 < AAA_awright> Or use `git node add`!
16:20 < AAA_awright> :p
16:21 < domachine> jgornick: I'm getting errors because the shasum check fails. Is this a known issue?
16:23 < jgornick> domachine: i don't know what's going on to be honest. most people have been getting 404's when trying to access packages.
16:26 < NodeJohnny> Just finished off my first nodejs website! Woo hoo!
16:26 < sebwoh> concratz :)
16:26 < NodeJohnny> Graci
16:29 < NodeJohnny> I'm using freenode via the web.. is there a better mac client I should be using? I'm fairly new to IRC.
16:29 < NodeJohnny> I'm just think that most of the people on this list couldn't possibly using this interface.
16:29 < jrajav> NodeJohnny: I swear by Textual
16:30 < NodeJohnny> googling it now..
16:30 < coderarity> textual is pretty awesome
16:30 < jrajav> It's not free, but it's worth the money
16:31 < jrajav> And if you're inclined to try building something without any documentation, it's also open source
16:31 < coderarity> it's on github, https://github.com/Codeux/Textual/
16:31 < coderarity> people in the textual irc chatroom will help you build it
16:31 < coderarity> the github build has some great stuff too
16:45 < jgornick> mmalecki: https://github.com/mmalecki/npm-proxy/pull/3
16:46 < gob> do the panic dance
16:47 < gob> npm is down
16:50 < Sebwoh_> :/
16:52 < jgornick> i sure as hell picked the wrong time to clear out my node_modules folder.
16:53 < pickels> jgornick, no worries only been down for like 8 hours or something.
16:55 < jgornick> pickels: yeah, i cleared it out around 3am central :(
16:55 < pickels> jgornick, there is a fix tho
16:55 < jgornick> pickels: do you know what happened?
16:56 < pickels> jgornick, nope
16:56 < jgornick> pickels: i don't know if anyone does :(
16:57 < pickels> jgornick, I guess the answer is in that proxy fix?
16:57 < jgornick> mmalecki: could answer that ;)
16:57 < pickels> well check the source
16:57 < jgornick> pickels: already did: https://github.com/mmalecki/npm-proxy/pull/3/files
16:57 < pickels> ah
16:57 < jgornick> :)
16:57 < Killswitch> npm works for me.
16:58 < jgornick> Killswitch: not here.
16:59 < TroyMG> so, I know npm is down and that we can use proxies to work around it. anyone know how to update heroku to use an npm proxy?
17:00 < Killswitch> jgornick: weird
17:00 < jgornick> the node community relies on npm so heavily now that there must be contingency plan for when things like this happen. if it's a matter of money for resources, certainly we can get someone to sponsor for it.
17:02 < Killswitch> Excuse my naiveness, but I've only been toying with node, but isn't npm part of node.js now so shouldn't it technically be on joyent's servers too?
17:03 < stephank> jgornick: I'm not sure, but think iriscouch hosts it for free, ie. sponsored?
17:04 < stephank> It's pretty much a part of node, so anyone sponsoring node is already sponsoring npm.
17:07 < jgornick> stephank: good points.
17:07 < TroyMG> fyi, in case anyone else comes looking, this is the solution to getting heroku to use a proxy registry: https://github.com/isaacs/npm/issues/2694#issuecomment-7675445
17:08 < Killswitch> Anyone know any good starter irc apps that are plugin based?
17:08 < Killswitch> s/irc apps/irc bots
17:09 < TroyMG> hubot?
17:10 < Killswitch> hubot is a little more extensive than I want. I am looking for bare bones
17:10 < Killswitch> Also preferrably not in coffeescript
17:11 < jgornick> stephank: i know i'm speaking out of line here, but i think the message i was trying to express is why isn't the registry given more attention? it's been down a few times in the past few weeks and there doesn't seem to be a contingency plan when it is down. i know everything is still very new too, but npm is packaged with node and has been for a little while, which makes it even more important.
17:12 < jgornick> in my eyes, npm is to node developers as github is to every developer. without it, life sucks.
17:12 < Killswitch> jgornick++
17:12 < stephank> I have no clue, really.
17:13 < jgornick> stephank: me either :)
17:13 < stephank> But the point you make can be said for any package repository. I think it's more a matter of stability.
17:13 < Killswitch> Show me a node dev who doesn't use npm daily, and I'll show you someone who just found out that they can write javascript serverside 15 minutes ago.
17:13 < jgornick> stephank: this is true. i don't know why we just don't use github for packages. the middle man concept sucks.
17:13 < stephank> I'm not even sure if it's an iriscouch problem, the thing is partially responding. Could just be a configuration issue.
17:14 < mmalecki> jgornick: thanks for the pull!
17:14 < JasonSmith> I believe somebody deployed a buggy upgrade to npmjs
17:14 < jgornick> mmalecki: no worries, get it up there so i can get working :P
17:14 < mmalecki> jgornick: hm, would it be possible to move .tgz back to the regexp?
17:14 < jgornick> JasonSmith: thanks for that.
17:14 < jgornick> mmalecki: I think that could be done
17:14 < jgornick> Let me see here...
17:15 < mmalecki> not sure about npm APIs, maybe something looks similar and can get parsed as a fetch
17:15 < mmalecki> jgornick: that'd be awesome, thanks :)
17:15 < stephank> I actually wouldn't mind if we could specify github repos in abbreviated format as dependencies. Sounds good to me. Though versioning would be interesting.
17:15 < stephank> I guess you could interpret tags as semvers.
17:17 < jgornick> mmalecki: It's there.
17:17 < jgornick> stephank: Exactly.
17:18 < jgornick> stephank: most repositories have them, why not use them.
17:18 < jgornick> stephank: and for the ones that don't, they will add them
17:19 < stephank> jgornick: there's already support for depending on git repositories. I don't know if that completely bypasses the registry, but maybe that can be extended by.. someone. ;)
17:21 < jgornick> stephank: i would like to specify github packages by doing something like "jgornick/package-name": "1.0.x". where jgornick/package-name automatically maps to git://github.com/jgornick/package-name.git
17:21 < stephank> jgornick: That's what I had in mind, but a lot of packages don't have their github repo names lined up with the npm names.
17:21 < jgornick> stephank: that's something they would have to fix.
17:22 < stephank> on top of that, what happens when you specify two forks of the same package?
17:22 < jgornick> stephank: you'd also be able to specify custom repository
17:22 < jgornick> stephank: if you haven't already, you should check out how composer works http://getcomposer.org/
17:23 < jgornick> stephank: if you wanted to solve that problem, composer solves it by adding custom repositories. it uses the custom repository to override look for the default github account.
17:24 < stephank> jgornick: I don't think the two can compare. PHP has a global namespace and autoloading, whereas Node needs to explicitly require(), and we keep things contained.
17:24 < stephank> I guess it wouldn't be bad to require('joyent/node');
17:24 < jgornick> stephank: i
17:24 < jgornick> stephank: i don't think that needs to happen either
17:25 < jgornick> the repository already has package.json that contains the name of the project. you install to the name of the project, not the user/repo.
17:25 < stephank> that doesn't work, because the key in the dependencies map is what maps to the dependency name
17:25 < jgornick> gotcha
17:27 < jgornick> mmalecki: can you let me know when you get that pr push up?
17:28 < mmalecki> jgornick: reviewing now
17:28 < jgornick> mmalecki: hawt
17:33 < mmalecki> jgornick: hm, doesn't look like it works
17:33 < mmalecki> jgornick: did you try that locally?
17:34 < jgornick> mmalecki: the only thing i tested was the expression. i ran it against different package names + versions.
17:35 < jgornick> mmalecki: what are you seeing that's wrong?
17:39 < cicoder> in my main app.js file, i have var db = require('./db') and in my ./db folder i have index.js which does exports.users = require('./models/users)(db, redis); what would my constructor look like for users.js so that i can still do db.users.find({}) and allows me to use the db and redis that was passed to user.js
17:40 < clarkfischer> Man, this npm proxy (topic) is slow.
17:41 < mmalecki> jgornick: hm, maybe it's npm doing something wrong here... for some reason it fetches socket.io twice...
17:41 < mmalecki> clarkfischer: well, it works
17:41 < mmalecki> also, regular registry is up already
17:41 < clarkfischer> No, no disrespect, thank you for the work-around
17:41 < mmalecki> clarkfischer: no offense taken :)
17:41 < clarkfischer> Regular registry is up?
17:41 < merpnderp1> Is there some way to do layouts and partials in express with ejs without writing my own tool to do it?
17:42 < mmalecki> I just managed to install few things, so, yeah, I guess it is
17:51 < JasonSmith> All, please try npm now and report issues. I have most of them solved.
17:54 <@isaacs> JasonSmith: Mikeal tells me you're looking for me
17:55 < JasonSmith> Filthy rumours!
17:55 < mmalecki> isaacs: the world broke!
17:55 <@isaacs> ah, i see.
17:55 <@isaacs> yep, i broke it last night for some packages while fixing it for others
17:56 <@isaacs> JasonSmith: judgement call to roll back change was exactly right.
17:56 <@isaacs> JasonSmith: ++
17:56 < mmalecki> isaacs: I managed to fix some of it tho!
17:56 < JasonSmith> mmalecki was a saint
17:57 < mmalecki> isaacs: with https://github.com/mmalecki/npm-proxy :)
17:57 < yawnt> patron saint of vodka brewers
17:57 < yawnt> ^ JasonSmith 
17:57 < yawnt> :P
17:58 < mmalecki> lol
17:58 < mmalecki> jgornick: so I guess I don't have to make it work just yet XD
17:58 < mmalecki> jgornick: sorry it took so long, got a busy day at work
17:58 < jgornick> mmalecki: same here
17:58 < jgornick> thanks for helping out though :)
17:59 < jgornick> +1 for mmalecki !
17:59 < jgornick> Also, let's not forget JasonSmith!
17:59 < JasonSmith> mmalecki's proxy kept npm available!
17:59 < jgornick> Thanks for fixing JasonSmith!
17:59 < mmalecki> JasonSmith++
17:59 < mmalecki> JasonSmith: remind me to buy you a beer at lxjs :)
18:03 < jgornick> isaacs: any insight into what happened with the registry?
18:06 < mmalecki> isaacs: well, to be precise it's not a copy :)
18:07 <@isaacs> jgornick: yeah, i pushed a fix that caused a regression.
18:07 < nlf> how dare you
18:07 < jgornick> isaacs: is there a repo for the registry?
18:07 <@isaacs> jgornick: JasonSmith did the right thing and rolled it back
18:07 <@isaacs> jgornick: yeah, isaacs/npmjs.org
18:07  * JasonSmith rolls
18:07 < JasonSmith> back
18:07 < jamygolden> has something happened to the express.session object in express 3?
18:08 <@isaacs> jgornick: that's just for the app code, not the data of course
18:08 < Sliverfish> hey guys, quick question
18:08 < Sliverfish> does anybody know if nodeQuery is dead? last commit 7 months ago or so
18:12 <@isaacs> jamygolden: probably it's removed to make you stop using in-memory sessions which are resistant to scaling
18:13 <@isaacs> jamygolden: tj's been preaching to use a db like mongo or redis for sessions for a long time now
18:13 <@isaacs> jamygolden: in fact, in express 2 i think it warned, even
18:14 < mmalecki> isaacs: yeah, it did. came across it in many log files from users' apps running in production :D
18:15 <@isaacs> jamygolden: you can use this for sessions pretty easily if you have redis installed: http://npm.im/redsess
18:16 < milani> oh what is npm.im
18:17 < mmalecki> isaacs: btw, you can change the topic already
18:19 -!- isaacs changed the topic of #Node.js to: We are JavaScript power.
18:26 < jamygolden> isaacs: thanks! It was being used by mozilla in one of their examples: https://developer.mozilla.org/en-US/docs/BrowserID/Remote_Verification_API - good to know I should avoid it :)
18:32 < _trev> Is anyone having problems creating an account on npmjs.org?
18:32 < _trev> There was a problem! The server said: Failed creating account. CouchDB said: not_found :(
18:47 < wizard_2> Does anyone know if request can stream multipart form encoded uploads?
18:47 < wizard_2> the multipart array doesn't seem stream friendly
18:49 < wizard_2> whoops - lost connection for a moment
18:58 < _smf_> Hi all; I've just written some initial support for v0.8 cluster into Haraka and have been testing - however I'm seeing lots of random SIGABRT and SIGSEGV since getting 0.8 running and I'm having a real tough time trying to track down the cause.
18:59 < _smf_> Are there any 'tricks' to getting a core dump out of node when a cluster worker crashes?  I'm using an EC2 instance running Amazon Linux and I've been unable to.
19:00 < _smf_> Or anyone have any suggestions as to what I might be able to do to pinpoint what is causing the crashes better.   It seems very random; after a period of running I get a crash - but it never seems to be in the same place.
19:06 < substack> codebux. discuss. https://github.com/substack/codebux
19:07 < nlf> interesting
19:08 < substack> if you have negative codebux then your module is too big and you should consider splitting it up or reducing its scope
19:09 < TroyMG> isaacs: still getting failures in npm (namely pulling https://registry.npmjs.org//-/mongodb-0.9.9-8.tgz)
19:09 < substack> first organization to implement a `> 0` codebux step in a commit hook wins at software
19:09 < nlf> what are the criteria for it scanning directories?
19:09 < substack> nlf: standard dependency graph traversal like how browserify does it
19:10 < substack> so it won't pick up your examples or tests
19:10 < substack> later versions might deduct codebux for not having tests or examples
19:10 < nlf> i have a project that has a lib dir with two files and a bin dir with one
19:10 <@isaacs> TroyMG: d'oh.  one sec
19:10 <@isaacs> TroyMG: what are you installing?
19:10 < TroyMG> connect-mongo
19:11 < nlf> the bin dir i get a 'cannot find module' i'm assuming because it doesn't end with .js
19:11 <@isaacs> TroyMG: or better yet, can you gist the log?
19:11 < substack> nlf: if you have a package.json with a main field it should be fine
19:11 < TroyMG> yes
19:11 <@isaacs> TroyMG: gist the npm-debug.log file
19:11 < nlf> and the lib dir i have to do each file individually
19:11 < TroyMG> just a sec
19:11 < nlf> ah, ok, i think i am missing that
19:11 <@isaacs> TroyMG: or just the cli output would probably have what i need, even
19:11 < liam> hi, anyone running the head version of node.js? I'm running 0.8.6 and having problems on this: "require('https').request({host:"wpml.org", port:443, path:'/', method:'HEAD'}, function (res) {})" ..I'd like to know if it's fixed in the current version in dev
19:11 < substack> isaacs: relevant to your interests https://github.com/substack/codebux
19:11 < substack> isaacs: ignore everybody complaining about npm, it's fine now
19:11 < substack> it was down earlier
19:12 < TroyMG> isaacs: https://gist.github.com/3333826
19:12 < nlf> interestingly, my older projects score much better than my newer ones
19:12 < nlf> haha
19:13 < TroyMG> isaacs: I'm quite certain the dependency on mongodb 0.9.9-8 is introduced by connect-mongo
19:13 < nlf> although the code for my newest site is the highest score
19:15 < nlf> i did get deducted $1.48 for path.existsSync -> fs.existsSync
19:15 < nlf> and i don't refer to existsSync in my code anywhere
19:15 < nlf> a recursive grep shows even in my node_modules there are only three references, and they're all exists = fs.existsSync || path.existsSync
19:15 < TroyMG> isaacs: strangely the same package.json works locally (running version 1.1.24), so I'm not sure why heroku is failing
19:15 < nlf> so
19:16 <@isaacs> TroyMG: interesting, so it's actually wrong in the mongodb doc itself
19:16 < nlf> oh nevermind, that was just an error getting printed
19:16 < nlf> substack: looks like one of your modules is spitting that out
19:17 <@isaacs> substack: that looks awesome
19:17 < nlf> my newest site scored a 95.05 though, so apparently i did it right-ish :D
19:17 <@isaacs> TroyMG: i'll kludge around it
19:17 < TroyMG> thanks
19:17 < substack> nlf: ok tricking it down
19:17 < substack> NODE Y U DEPRECATE SO OFTEN
19:18 < nlf> i have an app.js that requires routes.js and controller.js, the error was printed after the score for app.js but before either of the requires
19:18 < nlf> if that helps
19:19 < substack> nlf: nope, it was in resolve
19:19 < substack> all fixed if you bump that dep
19:22 <@isaacs> TroyMG: can you try you command with --registry=http://scratch.npmjs.org/
19:22 < TroyMG> yup, just a sec
19:22 <@isaacs> TroyMG: might have to do `npm cache clean` to get rid of bad pkg docs
19:23 < TroyMG> isaacs: using scratch worked, thanks
19:24 <@isaacs> kewl, i'll copy over
19:24 <@isaacs> the other tests pass as well
19:24 <@isaacs> liam: that looks like a bug, alright
19:25 < liam> isaacs: thanks :) I've already opened an issue on github
19:25 <@isaacs> liam: https://github.com/joyent/node/issues/3861
19:25 <@isaacs> confirmed by bnoordhuis and now by me as well :)
19:25 <@isaacs> it looks pretty minor, probably.  like we're splitting something that's arleady split
19:25 < liam> great :)
19:26 <@isaacs> er, .replace()-ing something that we expect to be a string, but which has been split
19:26 < liam> isaacs: yeah, I've run it on 850k websites and only few (don't know how many exactly, probably < 100) have that problems
19:27 <@isaacs> liam: oh, wtf, they're sending multiple CN values in the key.
19:27 <@isaacs> that's kind of wrong.
19:27 < jgornick> JasonSmith and isaacs, it's happening again. https://gist.github.com/a2c89b0df319b251f058
19:29 < cletus> is there a way to buffer  a stream? Basically, pausing and resuming the sream in intervals of 1 json object at a time?
19:29 < cletus> Im trying to see if it is feasible to create a pseudo-iterator structure with streams./
19:29 <@isaacs> jgornick: scroll up
19:30 < jgornick> scratch ?
19:30 <@isaacs> jgornick: it's not the same error.  that's a different thing.  it'll be fixed once view generation is done.
19:30 <@isaacs> jgornick: go have a snack and it'll be fixed :)
19:30 <@isaacs> jgornick: might need to `npm cache clean`
19:30 < jgornick> BUT isaacs I _just_ ate lunch!
19:30 < jgornick> :P
19:30 <@isaacs> hahah
19:30 <@isaacs> then go get some coffee :)
19:30 <@isaacs> it's good for you!
19:30 < jgornick> good idea!
19:31 <@isaacs> or you can do --registry http://scratch.npmjs.org/
19:31 <@isaacs> but that's just a temporary workaround
19:31 < jgornick> columbian or breakfast ?
19:31 <@isaacs> (like, for the next 10 minutes or so)
19:31 < jgornick> :P
19:31 < jgornick> sounds good, just trying to setup an instance of my app for testing purposes. i can wait for a bit :)
19:31 < jgornick> too many emoticons, sorry
19:37 < cletus> so any advice on streams? how would I buffer them, or rather split them up, per json object being emitted?
19:37 < mmalecki> cletus: you mean one JSON object per line?
19:37 < mmalecki> if so, https://github.com/mmalecki/json-stream is your friend
19:38 <@isaacs> ok, mongo fixed
19:38  * isaacs away
19:40 < cletus> mmalecki: could I pipe a request.get into that?
19:41 < mmalecki> cletus: yes :)
19:49 < CIA-93> node: Ben Noordhuis v0.8 * r6b18e88 / (lib/tls.js test/simple/test-tls-check-server-identity.js): tls: handle multiple CN fields when verifying cert - http://git.io/PyalKw
19:49 <@maxogden> Nexxy: substack was working on some libsox bindings which i think include microphone
20:33 < bingomanatee> Hey is NPM up and running yet?
21:00 < DTrejo> dscape: would be cool if specify supported assert.ifError, but in reality I am just using assert.ok(!err); so it is okay and I am not going to post an issue and annoy you
21:02 < `3rdEden> how big is the NPM registery in terms of file size?
21:02 < DTrejo> fat!
21:02 < `3rdEden> Zomg.
21:02 < `3rdEden> I totallly didn't expect that :9
21:02 < `3rdEden> 10 - 40 gig?
21:02 < coderarity> lol zOMG with caps lock on
21:03 < mmalecki> 15.2 GB
21:03 < mmalecki> http://isaacs.ic.ht/_utils/
21:03 < `3rdEden> mmalecki that's not that much
21:03 < mmalecki> `3rdEden: correct
21:04 < `3rdEden> all historical files are also included in that right?
21:04 < `3rdEden> so the actual size of latest packages would be around 2 - 5 gb
21:04 < `3rdEden> if not less..
21:05 < mmalecki> `3rdEden: well, that sounds correct, yeah
21:06 < `3rdEden> mmalecki thanks for the info :) time to hack some shit up
21:07 < mmalecki> `3rdEden: hold up, pm me what you're working on, we might have that already/in plans
21:12 < merpnderp1> Can someone look at this express route and ejs render calls and tell me if I'm doing this completely wrong?  http://pastebin.com/v2xrFs9e
21:13 < Filnik> I have these ids in mongodb: [1, 2, 3]. I would like to have 3 if I search for 4. Is "near" the option that I need or is something else?
21:22 < merpnderp1> Never mind. Like always I find the answers in TJ's code. 
21:26 < mmalecki> isaacs: hey, ircretary is buggy
21:26 < mmalecki> ircretary: make me a sandwich
21:26 < ircretary> mmalecki: I'm not sure what to do with that command.  Ask for help in PM.
21:39 < mscdex> ircretary: sudo make me a sandwich
21:39 < ircretary> mscdex: I'm not sure what to do with that command.  Ask for help in PM.
21:39 < mscdex> :-\
21:43 < ericelliott> I'm looking for a good node-based cloud irc solution to replace bnc/znc and provide a standards-based web UI I can connect to from any computer without installing an IRC client.
21:43 < ericelliott> Suggestions?
21:44 < coderarity> ericelliott, maybe check out subway https://github.com/thedjpetersen/subway/
21:44 < ericelliott> cool.
21:44 < ericelliott> Looking at Subway right now.
21:47 < stephank> mscdex: Have you gotten encryption to work in your ssh client?
21:50 < CIA-93> node: Nathan Rajlich master * r00fa886 / (tools/addon.gypi tools/gyp_addon): tools: remove "addon.gypi" and "gyp_addon" - http://git.io/jfoGYw
22:00 < khmelevskii> test
22:28 < liam> Hi, is there a way to set a timeout on https requests? for http I see that there is setTimeout, but what about https?
22:32 < owen1> nlf: what site are u working on, the one u got 95.05 on codebux index?
22:35  * ksksal LISTEN :: radio URL: http://playbackfm.listen2myradio.com
22:46 < coderarity> anyone know why the whole Sec-WebSocket-Key and Sec-WebSocket-Accept thing even exists? What's the point of taking the Sec-WebSocket-Key and adding a number to the end just to hash it and return the base-64 encoded hash?
22:46 < utu> when handling an error, I read somewhere that it is a bad practice to do: 'if (err) return callback(err)', instead you should do: 'if (err) { callback(err); callback = function{}; return }'
22:46 < coderarity> how can that possible help?
22:46 < coderarity> possibly&
23:01 < Domenic> coderarity: the `callback = function{};` part makes no sense, but doing `callback(err); return;` instead of `return callback(err);` is a good practice (if a bit OCD)
23:01 < coderarity> utu, ^
23:01 < coderarity> Domenic, ;P
23:04 < ericelliott> if you're not returning a value, there's no reason to return;
23:04 < ericelliott> just callback(err);
23:04 < coderarity> ericelliott, you return to prevent it from running code afterwards
23:04 < coderarity> usually return callback(err) is fine
23:05 < coderarity> no one cares what it returns anyways, it'll probably be undefined or null
23:05 < Domenic> by doing `return callback(err)` you lose control of what your return value is.
23:05 < ericelliott> coderarity: sure
23:05 < coderarity> Domenic, yeah, whatever though
23:05 < utu> slide 10 here: http://www.slideshare.net/the_undefined/nodejs-best-practices-10428790
23:05 < Domenic> nobody should care, but, it could in theory have consequences, so i'd rather be safe. ocd as i said
23:05 < utu> not sure what he means by 'callback = function{};' either :(
23:05 < coderarity> but you're returning anyways
23:05 < coderarity> he's making it so you can't call that callback again
23:06 < coderarity> but he returns right after so I'm not sure why that matters
23:06 < ericelliott> there is a school of thought that says there should only be one exit point per function
23:06 < coderarity> people just want to make javascript as safe as possible
23:06 < coderarity> some people fear the lands of dynamic languages I suppose ;P
23:06 < Domenic> oh
23:06 < Domenic> it makes sense in his example
23:06 < Domenic> wait no it doesn't
23:07 < kuttap> :)
23:07 < coderarity> suggestion: use async.js and everything is easier
23:07 < Domenic> so yeah all that stuff about catching errors and transforming them into callbacks reminds me that you should all use promises... http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript
23:08 < ericelliott> yeah
23:08 < Domenic> async.js probably has similar stuff?
23:08 < coderarity> Domenic, he does a normal forEach to start up a set of asynchronous functions
23:09 < Domenic> ah right it does make sense then
23:09 < coderarity> Domenic, he does the counting and stuff himself, but async will do that for you AND handle the error problem
23:09 < ericelliott> https://github.com/webspinner/Deferred
23:09 < Domenic> if he didn't do the cb = function () {} there's a possibility that other iterations of the loop could call cb.
23:10 < ericelliott> Domenic: an error-handling branch has no business caring about that.
23:10 < Domenic> ericelliott: eww don't emulate jQuery's deferred stuff, use Q. It has nice Node adapters too. https://github.com/kriskowal/q
23:10 < ericelliott> why is Q better?
23:10 < Domenic> Oh man I could rant about this for a long time ^_^
23:11 < Domenic> For starters, https://github.com/kriskowal/q#adapting-node
23:11 < Domenic> Secondly, when the jQuery guys designed their "promise" implementation, they broke some key aspects of Promises/A, namely the equivalence between sync return values/thrown errors and async fulfillment values/rejection reasons.
23:11 < Domenic> So you can in jQuery fulfill with more than one value or reject with more than one reason
23:12 < Domenic> Which would be like returning multiple values or throwing multiple errors
23:12 < Domenic> They also missed the fact that you need to transform thrown errors into rejections
23:12 < Domenic> (Like in felix's presentation with the try/catch)
23:12 < Domenic> If you throw in a jQuery callback, everything breaks---there's no way to catch and propagate the error.
23:12 < Domenic> You have to wrap with try/catch yourself and transform any failures into rejections.
23:13 < Domenic> jQuery also doesn't guarantee asynchronicity; you can resolve your promises synchronously, which leads to inconsistencies
23:14 < Domenic> Finally, they do a poor job separating the deferred and the promise; their deferred has all the promise operations on it, whereas in Q a deferred is just { resolve, reject, promise } so its much clearer where the divide is.
23:16 < Domenic> .... I think I'm done.
23:20 < ericelliott> what do you mean by, "you can resolve your promises synchronously"? Could you give me an example?
23:21 < Domenic> Sure. The following logs "a 1", where it would log "1 a" if the promise was resolved asynchronously: `var d = $.Deferred(); d.promise().then(console.log); d.resolve("a"); console.log(1);`
23:23 < cainus> anyone have any recommendations for deployment scripts?  I'm thinking about not using capistrano anymore
23:24 < coderarity> cainus, maybe check out haibu, https://github.com/nodejitsu/haibu/
23:25 < coderarity> cainus, or if you're a substack type of guy https://github.com/substack/fleet
23:25 < ericelliott> Domenic: Hmm. I consider that a feature... you can choose what you need. For example, on iOS, you can't play audio unless the .play() call is inside the callstack triggered by a user interaction. An asynchronously resolved promise would pull it out of the callstack and make it impossible to play audio with a promise API
23:26 < SomeoneWeird> is npm still down?
23:26 < coderarity> SomeoneWeird, no
23:26 < Domenic> ericelliott: well, if you're doing synchronous code, you shouldn't be using promises...
23:26 < cainus> haibu seems to not handle multi-server stuff... and only handles node instances...  I think I need something more general purpose
23:26 < SomeoneWeird> hrm, still can't download any packages
23:26 < ericelliott> Domenic: Promises can normalize APIs for purposes like better error handling.
23:27 < Domenic> SomeoneWeird: `npm cache clear`
23:27 < Domenic> ericelliott: exceptions work just fine for that in sync code... not really seeing it.
23:28 < SomeoneWeird> still not
23:28 < SomeoneWeird> :c
23:28 < SomeoneWeird> oh, hrm
23:28 < SomeoneWeird> ssl error
23:29 < ericelliott> Domenic: That's a whole other discussion. It looks like you can resolve or reject a Q promise from within any promise callback. Isn't that a violation of the separation between a promise and a deferred?
23:30 < Domenic> ericelliott: not entirely sure I understand, what are you referring to?
23:30 < ericelliott> In the Q doc, there's a line: There are two ways to chain promises. You can chain promises either inside or outside handlers. The next two examples are equivalent.
23:31 < ericelliott> and then it looks like there's an example of how to resolve or reject a promise from inside a callback
23:32 < ericelliott> return foo().then(function (fooValue) { return bar(fooValue) .then(function (barValue) { // if we get here without an error, the value returned here or the exception thrown here resolves the promise returned by the first line
23:32 < ericelliott> ...
23:32 < Domenic> I don't see how that violates the separation. There is only a single promise (the returned one) that passes out of both examples. The rest are intermediaries (thing temporary variables in sync code)
23:32 < Domenic> *think
23:33 < Domenic> Remember that calling .then() returns a new promise
23:34 < Domenic> So multiple people can register listeners with a .then() without affecting each other, no matter what they do in their fullfillment/rejection callbacks. The behavior in those callbacks just modifies the new promise they create.
23:34 < ericelliott> I see
23:34 < ericelliott> That's a clearer explanation
23:35 < Domenic> Hmm, I thought that was covered in the "propagation" section, but perhaps it needs to be made more explicit...
23:44 < SomeoneWeird> if I have a node object, say { a: { b: 2 } }, and i have "a.b" in a string, how can I apply the string to the object to get the result?
23:47 < rvagg> var obj={a:{b:2}};'a.b'.split('.').forEach(function(p){obj=obj[p]});console.log(obj)
23:47 < Domenic> What about if you had an object like { "a.b": 2, a: { b: 3 } }?
23:47 < Domenic> WHAT NOW!?!
23:47 < SomeoneWeird> lmao
23:47 < SomeoneWeird> thanks rvagg 
23:48 < rvagg> >>> var obj={a:{b:2}};'a.b'.split('.').forEach(function(p){obj=obj[p]});console.log(obj)
23:48 < purr> rvagg: undefined; Console: 2
23:49 < rvagg> >>> var obj={a:{b:2}};'a.b'.split('.').forEach(function(p){obj=obj[p]});obj
23:49 < purr> rvagg: (number) 2
23:49 < SomeoneWeird> :)
23:51 < mappum> >>> for(i=0;i++<10;)console.log((i%3?:'':'Fizz')+(i%5?'':'Buzz')||i)
23:51 < purr> mappum: SyntaxError: Unexpected token :
23:51 < Domenic> pwned
23:51 < mappum> >>> for(i=0;i++<10;)console.log((i%3?'':'Fizz')+(i%5?'':'Buzz')||i)
23:51 < purr> mappum: undefined; Console: 1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz'
23:51 < mappum> >>> for(i=0;i++<100;)console.log((i%3?'':'Fizz')+(i%5?'':'Buzz')||i)
23:51 < purr> mappum: undefined; Console: 1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz', 16, 17, 'Fizz', 19, 'Buzz', 'Fizz', 22, 23, 'Fizz', 'Buzz', 26, 'Fizz', 28, 29, 'FizzBuzz', 31, 32, 'Fizz', 34, 'Buzz', 'Fizz', 37, 38, 'Fizz', 'Buzz', 41, 'Fizz', 43, 44, 'FizzBuzz', 46, 47, 'Fizz', 49, 'Buzz', 'Fizz', 52, 53, 'Fizz', 'Buzz', 56, 'Fizz', 58, 59, 'F…
23:52 < mappum> fizzbuzz in 64 characters :D
23:52 < Domenic> congrats?
23:52 < Domenic> programmers being proud of their fizzbuzz skillz seems similar to grown men being proud of their walking skillz.
23:53 < mappum> haha true
23:53 < mappum> but countries do put a lot of effort into competing in running, even though it's just a variation of walking
23:54 < mappum> we even hold an event for it every 4 years
--- Log closed Mon Aug 13 00:00:11 2012
