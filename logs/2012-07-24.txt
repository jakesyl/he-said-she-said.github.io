--- Log opened Tue Jul 24 00:00:12 2012
00:16 < benvie> does a 64 bit chrome exist for osx?
00:22 <@wao> hey
00:22 <@wao> is something similiar in nodejs written http://charlesleifer.com/blog/building-markov-chain-irc-bot-python-and-redis/ ?
00:23 <@wao> like this markov chain ?
00:23 <@wao> https://github.com/crisisking/blatchman-bot
00:43 <@ryanseddon> Ever since updating to 0.8.x npm gets an etimedout error behind a proxy even though the proxy settings are correct, http://stackoverflow.com/questions/11501007/express-install-error-connect-timeout 
01:06 < owen1> any idea where is the mistake in my PUT reqest? http://pastebin.com/REPP3nhi
01:09 < AAA_awright> owen1: The :: in the URI perhaps
01:10 < AAA_awright> And *just why* is the IETF throwing *everything* into the application/ media-type
01:13 < santiago> a
01:22 < fosstux> Hi! Question: Who of you uses multiple Twitter accounts and is seeking for the ideal twitter client?
01:23 < fosstux> I'd like to write one using node.js.
01:23 < fosstux> Who would like to help me?
01:27 < fosstux> Here are my ideas: https://trello.com/board/multwyt/5008bf0943889e536a028be4
01:29 < bingomanatee> Hi there
01:29 < bingomanatee> Great evening all!
01:29 < fosstux> bingomanatee: Hi!
01:29 < bingomanatee> If I want to send raw text out of express.js (no layout, no JSON) how do I do that?
01:29 < fosstux> bingomanatee: sorry, I'm a noob as well... but I want to learn....
01:29 < tjholowaychuk> bingomanatee res.end(str)
01:30 < tjholowaychuk> bingomanatee all the regular node stuff is there
01:30 < bingomanatee> thanks.
01:30 < bingomanatee> Go TJ!
01:30 < tjholowaychuk> if you dont want to add content-length etc each time res.send(str) is the more convenient thing
01:41 < __Pepr> Hi everyone, has anyone been able to sucessfully find/build on mac ppc? I am looking for the last version that was built ppc compatible.
01:41 < __Pepr> Thoughts?
01:42 < fosstux> I'm just trying to install node.js on a debian squeeze server using the manual method shown here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
01:42 < owen1> AAA_awright: the :: is only in the pastebin.. can u explain what u mean by IETF?
01:42 < benvie> oh my god they're swarming
01:42 < AAA_awright> ?
01:42 < fosstux> In the make test I get an error in === release test-net-pingpong ===   
01:43 < AAA_awright> owen1: You know, the Internet Engineering Task Force
01:43 < AAA_awright> They're almost exclisively known as the IETF
01:43 < fosstux> See http://dpaste.org/cXS6q/
01:43 < owen1> AAA_awright: is it a remark that related to my code?
01:44 < AAA_awright> owen1: Well you (correctly) use the application/json mime-type but it's just so awkward
01:45 < owen1> AAA_awright: ok. in my example i use text file. do i need to change it to different mime type?
01:45 < owen1> (if i want to upload an image?)
01:46 < AAA_awright> owen1: You might need to capitalize your outgoing headers properly. How did a paamayim nekdotayim/double colon make it into your URI? Can you paste the correct code?
01:47 < fosstux> any idea what went wrong?
01:48 < owen1> AAA_awright: i have http:// in my real code. my PUT is successfull. i see 200 back from the server. but when i retrieve the file from the server i get lines 38-44
01:48 < owen1> (and the original file had 1 line only - line 44)
01:49 < owen1> so something is messed-up
01:50 < AAA_awright> owen1: Oh I see, what's parsing the incoming request?
01:51 < __Pepr> Anyone have any thoughts or some history on where I can get a mac PPC compatible version of node. I have tried most the builds but the compiler does not offer a ppc CPU option, and all the universal binaries that I have tried are all compiled for intel since I get the error "Bad CPU type" on launch of node.
01:51 < fosstux> I now ran make test again - two errors: see http://dpaste.org/jjsrb/
01:51 < __Pepr> Any help would be appreciated since I have been at this for sometime yesterday and today to no avail. :(
01:52 < fosstux> and the more I run make test, new errors appear.....
01:52 < AAA_awright> owen1: The server end isn't parsing the multipart request correctly. Or you're not sending a multipart request correctly maybe, I'm not familiar with how you do that in Node.js
01:53 < RangerMauve> Is there some easy way of saving and loading objects to and from .json files without having to write the code for it myself?
01:53 < AAA_awright> owen1: If you're not familiar with HTTP, MIME-types, and multipart/form-data encoding you should probably read up on that
01:53 < owen1> AAA_awright: btw, the server i am hitting is working with curl:  curl -sSf -T file1 http://url/file1  (PUT)    and    curl -O -L http://url/file1  (GET)
01:56 < mscdex> RangerMauve: fs.readFile / fs.writeFile + JSON.parse / JSON.stringify ?
01:57 < fosstux> The only error I always get is with the test-net-pingpong - who can help????
01:57 < RangerMauve> Well, I get that there's that. But is there some pre made method like require()?
01:57 < mscdex> __Pepr: I'm pretty sure PPC isn't supported
01:57 < AAA_awright> owen1: Add the -v flag so you can see the headers curl is using
01:58 < owen1> AAA_awright: thank you! 
01:58 < AAA_awright> Well that's not your fix but it should certainly help
01:58 < __Pepr> thanks mscdex, I figured as much my hope was that it  was at some point. Could it be because of the V8 dependency. I know that is not supported in powermac.
01:59 < mscdex> __Pepr: I would say it's mostly because of v8's lack of support for PPC
02:01 < mscdex> RangerMauve: well, you can require() a json file, but that is sync
02:01 < RangerMauve> mscdex: What would require() return if I tried to use it on a .json file?
02:01 < __Pepr> ahhh, thank you. There is a port of V8 that is PPC compatible, my question would be that if I was able to compile that port ( which I should in theory ) then  I would compiling node.js work? My guess is that I would need to play with both tree's first.
02:02 < __Pepr> RangerMauve: it would not return anything, it would make the json object available to your main program. 
02:02 < mscdex> RangerMauve: it would return the same thing that JSON.parse() would, whatever value
02:03 < mscdex> RangerMauve: although, it may cache the contents, i'm not sure
02:03 < RangerMauve> mscdex, _Pepr So if I had something like {cats:"pie"} would it just return an object with the parameter cats that holds "pie"?
02:04 < __Pepr> or that as well. My experience is that require load the file, and since JSON for the most part is just an object with properties. So you could bind it to another object but that would be a bit redundant.
02:06 < bingomanatee> Hey guys - is there a good Node script for producing a line by line diff report between two blocks of text?
02:06 < __Pepr> Yep, it would load it. You could bind it, as well as mentioned before, or  in your JSON since for the most part it already should be.
02:06 < mscdex_> RangerMauve: yes, it would return that object
02:07 < RangerMauve> bingomanatee: Can't you use linux command line stuff for that?
02:07 < RangerMauve> mscdex_ thanks!
02:08 < RangerMauve> <3 Love that guy
02:08 < RangerMauve> Oops
02:08 < RangerMauve> Wrong window. =P
02:08 < wao> ups
02:15 < owen1> AAA_awright: my PUT using curl - http://pastebin.com/ywZByjBh  i see Content-Type: text/html, Transfer-Encoding: chunked.   is it helpful?
02:15 < AAA_awright> owen1: That's what curl is sending to the server?
02:16 < owen1> AAA_awright: yeah
02:16 < owen1> i am sending file1 which is a 1-liner text file
02:16 < owen1> eventually i'll try sending an image
02:21 < AAA_awright> owen1: What's the server doing? Is this your server? You need to examine your use of multipart/form-data encoding
02:22 < AAA_awright> The server seems to be just blindly accepting the data in the request body without parsing it
02:22 < AAA_awright> Or, you need to not use multipart/form-data encoding when making the request
02:22 < AAA_awright> I doubt that's the correct way to make a good request
02:25 < owen1> AAA_awright: so u believe that in my node code i should not use multipart?
02:30 < AAA_awright> owen1: idk, it depends on what the server does
02:31 < owen1> AAA_awright: i can ask the guy that wrote the server. what kind of questions do u think i should ask?
02:32 < owen1> i am ok to try remove the multipart array from the hash i am sending to the request function, i just don't know what to send instead of this hash.
02:32 < owen1> instead of this array.
02:33 < fosstux> How important is the release test-net-pingpong?
02:33 < fosstux> is it none the less safe to run make install?
02:33 < AAA_awright> owen1: I don't really know, you should be familiar with all the APIs you're using first, make sure the server doesn't already have documentation for this
02:35 < owen1> AAA_awright: yeah
02:47 < ccowan> SubStack: Do you have any examples of loading a script via broswerify remotely instead of being pre-compiled (I use pre-compile loosely)?
02:59 < covi> what can be said from you on  node.js vs ruby on rails?
03:01 < coderarity> covi, from nodes.org: "Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices."
03:01 < coderarity> nodejs.org*
03:01 < jrajav> Let's see; Node.js takes a language built on a web framework and turns it into a scripting language, and Ruby on Rails takes a scripting language and turns it into a web framework
03:01 < jrajav> You're either confused or paritcularly insightful
03:02 < coderarity> also it's javascript which is way cool
03:02 < jrajav> ^ That
03:04 < coderarity> covi, mode.js is not a web framework and ruby on rails is
03:04 < sirwan> node is fuckign software brah
03:04 < coderarity> node.js*
03:04 < sirwan> its deep code
03:04 < coderarity> dumb dvorak
03:04 < sirwan> rails is a mother fuckign fan boys tool brah
03:04 < covi> coderarity:  besides web framework, what can node.js be used in web apps?
03:04 < ccowan> ha ha
03:04 < sirwan> deep contemplayion required on your behalf dude
03:05 < sirwan> express covi 
03:05 < coderarity> wait, what?
03:05 < AAA_awright> It's just an I/O API guys, nothing complex about it
03:05 < sirwan> how the fuck do people find these IRC rooms before finding answers to simple questions on Google
03:05 < gkatsev> I/O and http API
03:05 < covi> sirwan: yeah i know express is the choice for web framework
03:05 < AAA_awright> Lots of protocols, not just HTTP
03:05 < AAA_awright> I group all that together under I/O
03:06 < gkatsev> ok, I guess
03:06 <@maxogden> sirwan: quit being a dick
03:06 <@Nexxy> ^
03:06 < jrajav> covi: Node.js is the Chrome V8 engine pulled out of its browsery shell and made to work right on the local system. It also happens to have a bunch of neat APIs for stuff like filesystem access, console logging, and oh right, networking/server stuff
03:07 < covi> To build a lightweight web app, do you choose node.js or ror?
03:07 < gkatsev> depends on what your app does
03:07 < sirwan> ROR ovi
03:07 < sirwan> covi
03:07 < gkatsev> and whether you know ruby
03:07 < sirwan> RoR You fool
03:07 < sirwan> does NodeJS say its a framework on their website
03:07 < sirwan> does RoR not say  build cool apps on their website
03:07 < AAA_awright> Go gool yourself?
03:07 < AAA_awright> *look
03:07 < sirwan> dude.. NodeJS is being used in Robotics
03:07 < jrajav> Dude, all that .js crap is just frameworks
03:07 < jrajav> srsly
03:07 < covi> Right. I guess web programming confuses me a little bit :(
03:08 < coderarity> covi, you could use either
03:08 < jrajav> covi: What are you trying to accomplish?
03:08 < sirwan> covi learn ruby sinatra
03:08 < sirwan> its in between nodejs and ror
03:08 < sirwan> with the ruby language. made easy and soo scalable
03:09 < covi> jrajav: a simple site that makes use of experimental machine learning techniques on users
03:09 < coderarity> covi, if it's a small web app do whatever you feel like lol
03:09 < jrajav> covi: And how are you planning to deploy it? You have your own server, Heroku, etc.?
03:09 < coderarity> covi, it really doesn't matter much for something small, just whatever you prefer
03:10 < covi> jrajav: no idea. Maybe I'll get a VPS
03:11 < jrajav> Then yeah. Whatever you prefer
03:11 < ccowan> covi:  If you looking to learn something new then I would suggest using Node.js with Express. If you already know Ruby and ROR and you want to get it done quickly I would just stick with Rails. The way things work in Ruby vs. Node really different.
03:12 < fosstux> Although make test threw errors, I ran make install
03:12 < covi> Thanks guys
03:13 < ccowan> covi: Hopefully we didn't discourage you. :D
03:14 < jrajav> I don't think we threw enough buzzwords at him :(
03:14 < jrajav> Oh well I think coderarity got it covered with the blurb paste
03:16 < ccowan> Yeah… that phrase was jam packed.
03:16 < AAA_awright> HTML6V8SEMANTICWEB3.0SOCKETSAJAXMLHTTPrequest I can do one better
03:16 < Guest41315> working on a npm search tool for some reason
03:16 < covi> ccowan: well, i guess i'll just try to play around with node+express+jade, or +mongoose or sth
03:16 < AAA_awright> :>
03:17 < ccowan> covi: That's probably a good place to start.
03:17 < AAA_awright> I've never understood Express heh, I've done just fine writing my own request handler
03:19 < AAA_awright> ... Is it just me or are there 235 operators in this channel?
03:20 < ccowan> covi: What's different about most solutions in Node is that you kind of build up your framework with different libraries.. SO express for a light weight Sinatra style web framework… Jade or Mustache for HTML templating… Mongoose for your ORM (or most people don't even bother with an ORM)
03:22 < DTrejo> orm iz technical debt
03:22 < ccowan> covi: The hardest part from coming from Ruby is the callback/async nature of Node. You will want to look a flow control library like async or promises
03:22 < DTrejo> npm docs async
03:22 < npmbro> DTrejo: Please see http://github.com/caolan/async#readme
03:24 < ccowan> What DTrejo said… I'm not a big fan or ORM's either.
03:25 < covi> ccowan: thanks. actually i don't know RoR either.
03:26 < smathy> What are people's opinions of promises?  I know it got pulled from node itself a while back, but it's not clear if this was because it was a failing pattern, or just because having it out of core was healthier.
03:30 < ccowan> I prefer async over promises… seems
03:30 < ccowan> more straight forward
03:31 <@maxogden> callbackhell.com
03:31 < AAA_awright> It establishes better semantics and, within javascript, flow control
03:31 < AAA_awright> http://callbackhell.com/ demonstrates how callbacks give you better flow control
03:32 < AAA_awright> (Thought it was trying to make the opposite point, heh)
03:32 < AAA_awright> ccowan: Also, callbacks are guarenteed to be called exactly once. This guarentee creates stabler programs.
03:32 <@maxogden> it just demonstrates how to use callbacks properly
03:35 < ccowan> yup
03:36 < luoluoluo> hi there, when running demo app of appjs, I got "path not defined".  Any pro encountered situation like this?
03:36 < luoluoluo> for path I mean the path in "path.resolve"
03:45 <@maxogden> luoluoluo: you probably didnt require it
03:45 < covi> What does 'callback' mean
03:47 <@SlexAxton> it's like a hollaback but for functions
03:48 < luoluoluo> maxogden: thanks, but when I enter node shell, enter "path", it just give me the path object info
03:48 < luoluoluo> doesn't path an built in object?
03:48 < cronopio> covi: is the function called when the function finish executing and have results for pass to callback function
03:50 < covi> cronopio: so like function (req, res) { handle(req, res); } or sth like that?
03:50 < cronopio> luoluoluo: is an built module http://nodejs.org/docs/latest/api/path.html
03:51 < cronopio> covi: not really, take a look to callbackhell.com link provided by maxogden 
03:51 < benvie> luoluoluo how are you running it
03:51 <@maxogden> luoluoluo: repl is special
03:51 <@maxogden> luoluoluo: node -e "console.log(path)"
03:51 < cronopio> covi: like function someThing(param, callback) {/** do heavy things and when you have results, just **/ callback(results);} 
03:52 <@maxogden> luoluoluo: http://nodejs.org/api/path.html#path_path "Use require('path') to use this module."
03:52 < benvie> #appjs
03:53 < covi> cronopio: good link.. thanks
03:54 < cronopio> props to maxogden and the author of that webpage :-) (btw, Im seeing a CSS bug where the lines of text continue out of my screen)
03:55 < cronopio> weird, I just disable white-space: 'pre'; on .post-content and the text flow work fine
03:58 < luoluoluo> maxogden: thanks a lot
04:03 < cronopio> maxogden: shit, I did know you are the author of that page, thank you so much! :-) really good resource for noobs
04:39 < jgornick> Hey guys, is it possible to get the full url for a request on an http server?
04:41 < wookiehangover> SubStack should illustrate a children's book
04:41 < wookiehangover> seriously
04:42 < SomeoneWeird> lol
04:43 < Domenic> jgornick: https://github.com/mcavage/node-restify/blob/master/lib/request.js#L207-211
04:43 < konobi> jgornick: path plus host header plus scheme
04:43 < jgornick> Very cool, thanks Domenic and konobi!
04:49 < AustinYun> hey, which NPM js lint package is the best?
04:49 < AustinYun> for some reason there are like 11 versions of jslint in npm
04:50 < ccowan> I think that's the one thing that makes node.js frustrating for new users… How do you decide which of the 11 packages you should use?
04:50 < AustinYun> my primary heuristic is to look at the last time the github page was updated, lol
04:50 < tonymilne> ccowan i use http://eirikb.github.com/nipster/
04:51 < tonymilne> i mean *ideally* i could use other peoples code, and not even need to evaluate it at all myself either!
04:51 < ccowan> AustinYun: yeah… I use a combination of looking at the last time it was updated with the number of watches/forks
04:51 <@SubStack> just go by the quality of the api and the docs
04:52 < ccowan> tonymilne: nice
04:52 < Domenic> node-jshint is pretty popular, if you agree that JSHint > JSLint.
04:52 < ccowan> SubStack: That too
04:52 <@SubStack> number of watchers or last update are not as useful as just looking at the docs
04:52 < wookiehangover> SubStack: http://f.cl.ly/items/1E2s2G0K0e1v3C3G0V1U/Screen%20Shot%202012-07-23%20at%2010.52.08%20PM.png
04:52 < AustinYun> i actually like jslint > jshint
04:53 < Domenic> Once it started making me manually hoist my vars I had to switch.
04:53 < alex4nder> I just realized something; JavaScript is the Applebee's of functional programming languages.
04:53 < sirwan> switch to what Domenic 
04:54 < Domenic> sirwan: switch from JSLint to JSHint
04:54 < sirwan> oh right ok
04:54 < sirwan> anyone suggest a good way to learn nodejs
04:54 < sirwan> AND expressjs
04:54 < wookiehangover> with your mind
04:54 <@SubStack> tests > {h,l}inters
04:55 < sirwan> that was an autistic response
04:55 < Domenic> sirwan: http://stackoverflow.com/tags/node.js/info
04:55 <@SubStack> sirwan: build something
04:55 < sirwan> i take it i have to start from the bare basics before getting on to expressjs
04:55 < sirwan> unlike rails for example
04:56 <@SubStack> it doesn't work very well to learn a technology for its own sake
04:56 < Domenic> Meh, you can probably skip through the basics in a few days, come back and learn them more in-depth later. Assuming you know JavaScript really well.
04:56 <@SubStack> build a thing and incidentally learn about things in order to achieve your objectives
04:56 < sirwan> i hate javascript
04:56 < sirwan> i bought node: up and running
04:56 < AustinYun> c'mon SubStack, totally different things -- one ensures that pieces of your code works, the other enforces a coding style
04:57 <@SubStack> AustinYun: they both look like out of control prescriptivism to me
04:57 <@SubStack> rampant busy-bodying
04:57 < Domenic> Uniformity in a codebase is a good thing. It's easier to contribute if the style is machine-enforced.
04:58 < AustinYun> regardless of your opinion of the efficacy or value of either hinting or tests, the fact remains that the comparison operator isn't defined between them
04:58 < wookiehangover> this is all stuff that applies better to teams of people working on something
04:58 < konobi> depends if it's true linting or just styling
04:58 < Domenic> wookiehangover: it applies more so there, agreed. But it's nice for open-source projects that accept contributions.
04:59 < wookiehangover> Domenic: totally aggree
05:00 < wookiehangover> open source projects that have more than a handful of contributors would benefit by it
05:00 <@SubStack> Domenic: I like to split up codebases into completely separate repos and include them as dependencies instead
05:00 <@SubStack> then it doesn't matter how they're written at all
05:00 < lohkey> git modules FTW
05:00 <@SubStack> npm modules
05:00 < npmbro> SubStack: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20modules
05:00 < lohkey> s/modules/submodules/
05:00 < jesusabdullah> uniformity *in* a codebase
05:00 < jesusabdullah> submodules?
05:01 < jesusabdullah> if you're talking about git submodules then gtfo
05:01 < wookiehangover> SubStack: that's basically saying that one shouldn't care about code quality in modules they use
05:01 < ccowan> SubStack: Even if they use CoffeeScript? ;)
05:01 <@konobi> mwuhahahaha phear my wrath *cough*
05:01 < wookiehangover> which most people don't, fwiwi
05:01 < jesusabdullah> well
05:01 < Domenic> SubStack: I am totally down with your philosophy there. But I'm not sure why you wouldn't want both (i.e. small packages and uniform code style).
05:01 <@SubStack> wookiehangover: yep
05:01 < jesusabdullah> sort of. You can get away with it as long as you have confidence that it's bug-free
05:01 <@konobi> lohkey: WRONG... submodules are fail
05:01 < jesusabdullah> tests help
05:01 <@SubStack> I give 0 fucks about modules that I use so long as they work with nice apis
05:01 < Domenic> And as SubStack was saying, tests find the bugs, linting is just for mental sanity.
05:01 < lohkey> i haven't had a bad experience with them
05:01 < jesusabdullah> having consistency within a given codebase is good
05:02 < jesusabdullah> but it's not hard to enforce if the codebase is small
05:02 < lohkey> also, you package.json can point to … almost anything as a dependency
05:02 < lohkey> you modules don't have to be in NPM
05:02 < jesusabdullah> well yeah, that's the point
05:02 <@konobi> linting can also find subtle bugs
05:02 < wookiehangover> I personally follow rwaldron's adage "it should all look like one person wrote it"
05:02 < AustinYun> lolol, that's NOT what SubStack was saying, but fwiw i like linting because it makes code pretty, whereas i find testing a pain in the ass
05:02 <@konobi> floating point conversions, etc.
05:02 < wookiehangover> AustinYun: testing is hard, lets not do it
05:02 < Domenic> >_<
05:03 <@SubStack> AustinYun: testing doesn't need to be hard
05:03 < jesusabdullah> sub is saying you can black box modules, and that if they're smaller then that makes it a better idea
05:03 <@konobi> linting != making code pretty
05:03 < jesusabdullah> better to have a lot of small black boxes than one gigantic mystery box
05:03 < wookiehangover> I get around the issue of having to actively lint project by having vim do it for me
05:03 <@konobi> AustinYun: check your CompSci history as to what a linter actually is
05:04 < wookiehangover> and if I feel like ignoring the errors, I ignore them
05:04 <@SubStack> I would much rather have a codebase split out among a dozen repos with their own styles than a single consistently formatted repo with the same amount of aggregate code
05:04 < ccowan> wookiehangover: Syntastic FTW
05:04 < jesusabdullah> linter errors are just a heuristic
05:04 < Domenic> Speaking of small packages, has anyone seen one that does this: https://github.com/NobleJS/WinningJS-build/blob/master/lib/utils.js#L3-21 I was trying to find one to depend on but everything's too big.
05:04 < wookiehangover> ccowan: use my own https://github.com/wookiehangover/jshint.vim :P
05:05 < jesusabdullah> I don't lint usually
05:05 < jesusabdullah> mostly I use my human intuition and observations of a codebase's style
05:05 < jesusabdullah> and if it's supplied I'll scan the style guide
05:05 < wookiehangover> linting can be a way of enforcing a style on a team, too
05:06 < wookiehangover> esp when you can attach specific settings to a project
05:06 <@konobi> does anyone __actually__ know the history of linting?
05:06 < wookiehangover> which is why grunt is awesome
05:06 < AustinYun> what something started out as != what it is today
05:06 < Domenic> konobi: nope. Everyone here is using the term for what it actually means in the real world, not the academic definition.
05:07 <@konobi> Domenic: it's the real world version too... lots of us still use C level linting
05:07 < Domenic> s/real world/context of Node.js
05:08 <@konobi> Domenic: nodejs is written in C/C++... what's your point?
05:08 < alex4nder> konobi: bringing up C in a channel full of web 3.0 brogrammers is dangerous.
05:08 <@konobi> alex4nder: sure... but I have a much bigger boot than them =0P
05:08 < alex4nder> konobi: I drink to that.
05:09 < alex4nder> konobi: guys that think that 'bigendian' is a way to describe a chick's ass.
05:10 <@konobi> iirc for javascript we have both a linting guide and a style guide
05:10 < alex4nder> that BSD stockets are those weird electical outlets in bathrooms
05:10 < jesusabdullah> bigendian huh?
05:10 < jesusabdullah> I can drink to that
05:11 < jesusabdullah> brb vodka/juice
05:11 < AustinYun> alex4nder: you know it's funny you bring up endianness given the conversation we just had
05:12 < AustinYun> you know where the term "endian" came from?
05:12 < alex4nder> are you quizzing me?  I'm having flashbacks to grade school.
05:13 < AustinYun> naw, i'm just saying it's relevant to what we just talked about
05:13 < AustinYun> it's from gulliver's travels
05:13 < alex4nder> yes it is
05:13 < AustinYun> the two tribes were at war over which side of the boiled egg you're supposed to crack first
05:13 < AustinYun> the big end or the little end
05:14 < alex4nder> I'm hip to the lingo and history.
05:14 < alex4nder> and still own big endian hardware. ;)
05:16 < wookiehangover> well, la-di-freakin-da
05:16 < wookiehangover> got a big shot over here
05:16 < wookiehangover> with big-endian hardware
05:16 < alex4nder> unoit
05:18 < AustinYun> i might have a calculator somewhere that's bigendian or something
05:19 < Init--WithStyle-> Cluster vs fugue.. what are the pros/cons?
05:19 < Init--WithStyle-> (https://github.com/pgte/fugue) and (https://github.com/LearnBoost/cluster)
05:19 < jesusabdullah> Init--WithStyle-: fyi don't use either on nodejitsu
05:19 < Init--WithStyle-> oh?
05:20 < jesusabdullah> The machines are single core 256 mb slices
05:20 < Init--WithStyle-> how is scaling achieved then?
05:20 < jesusabdullah> we'll also be exposing cluster-ish scaling on top of our app server soon
05:20 < Init--WithStyle-> ohhh
05:20 < jesusabdullah> and finally, for reasons I won't get into, it won't work. You will have a bad time.
05:21 < Init--WithStyle-> but because you are introducing similar functionality in the near future, i don't have a reason to worry? :)
05:21 < jesusabdullah> Yeah, I mean, we use our scaling internally already
05:21 < jesusabdullah> just haven't presented users with the "webscale" button yet
05:22 < Init--WithStyle-> but without some way to control spawned apps (yet) isn't there a large scaling issue for people using it?
05:22 < Init--WithStyle-> or since it's still beta, doesn't really matter as of yet?
05:22 < jesusabdullah> Nobody has ran into scaling issues yet.
05:23 < jesusabdullah> You'd be surprised what you can do with a 256mb slice
05:23 < Init--WithStyle-> ok great, then i'll just get back to coding :)
05:23 < jesusabdullah> word
05:23 < athomas> hello
05:24 < athomas> anyone home
05:25 <@konobi> yeah... node can pump a _serious_ amount of data
05:29 < athomas> noob question, can i bundle node.js to an asset like a pdf that would typically doesn't have the capability of communicating and make it "communicatable" for eg. the user only viewed 3 out of 4 pages in this pdf. i would think i would have to find a way to program this pdf but wondering if it is possible. thanks in advance.  
05:29 < alex4nder> depends entirely on the PDF viewer
05:29 < athomas> i see you don't think i can do it from an asset level 
05:30 < alex4nder> node.js will also not make you waffles out of the box
05:30 < alex4nder> but you could interface it with a waffle maker
05:32 < athomas> but node.js has a web server built in ... which can be used to communicate back if the pdf is opened and communicate back if the user scrolled down to the 3rd page independent of the pdf viewer, no?
05:34 < alex4nder> athomas: what if the user downloaded the entire PDF before viewing it?
05:34 < alex4nder> maybe saved it to the disk.
05:34 < alex4nder> maybe downloaded, printed it, and put it in a cupboard without reading it.
05:35 < AAA_awright> athomas: Well, it can listen to sockets and it has HTTP utilities, I guess that's a web server
05:36 < AAA_awright> ("web" sort of implies hypertext, which Node.js doesn't do)
05:36 < athomas> that is ok. I'm just picking my tools at this point and trying to see if node.js is the right tool for me to report back analytics. it is totally ok if the user put it in a cupboard without opening it, but the fact that it is possible to report back info from an asset level is what i'm after
05:37 < alex4nder> athomas: yes, but why route static content through node?
05:37 < AAA_awright> A secure PDF viewer definitely won't allow external communication, or it'll ask for the user's permission before posting a form
05:37 < alex4nder> unless you have really specific URL routing needs
05:41 < athomas> because i can't think of anything else that has a built in server for communication. I'm not tied to PDF, you can use this example for other assets where getting analytics is difficult or is tied to the "viewer" that we don't control, i own the asset and i have the ability to program the asset. if i can embbed node.js to the asset for the communication piece of it that would be great... trying to see if im on the right track or if th
05:41 < athomas> are other options available 
05:42 < alex4nder> athomas: why do you need to use a dynamic system like node for analytics?  why wouldn't you use a static HTTP server, and then process the logs for your analysis?
05:42 < athomas> because the asset is not consumed at the web level where i can keep track of the logs 
05:42 < athomas> what if i email you the asset 
05:43 < athomas> there is no way for me to know the analytics on the asset 
05:43 < alex4nder> you're over complicating the issue.
05:43 < alex4nder> unless you embed the analytics in the viewing process, you'll never know.
05:43 < athomas> you think so? show me the way :) 
05:43 < athomas> exactly. that is my goal
05:44 < alex4nder> the viewing has nothing to do with node
05:44 < athomas> to embed the analytics during the viewing process
05:44 < alex4nder> unless you write your own viewer, and have it talk to node.
05:44 < alex4nder> and expect your users not to scrape the content.
05:45 < alex4nder> and are ready for your users to hate you.
05:45 < athomas> gotcha. well here is the thing. 
05:45 < alex4nder> this is an architecture issue, not an implementation/node issue.
05:47 < athomas> i understand, also understand that i would have to build the pdf my way but just want to see if node.js would be a tool i can program against for the communication piece, sounds like it would do the trick 
05:47 < alex4nder> yes.
05:48 < athomas> ok cool. 
05:48 < athomas> thanks alex4nder! 
05:48 < alex4nder> np
05:48 < athomas> any books you recommend?
05:48 < alex4nder> no, just learn JS and read code.
05:49 < athomas> cool cool thx
05:49 < ljharb> "Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/"
05:50 < athomas> thanks! 
05:50 <@konobi> anyone read resig's new book?
05:50 < ljharb> the ninja one? that's not new, chapters have been coming out since 2008 when i bought it
05:51 <@konobi> ljharb: yeah... but it's new in terms of actual release
06:19 < alexi> hey guys
06:19 < alexi> Trying to figure out difference between fs.createReadStream and stream.Stream
06:19 < alexi> and how I can replace former one with latter one
06:22 <@maxogden> the first is an instance of the second
06:22 <@maxogden> but the first emits data from the filesystem whereas the second is an abstract class
06:22 <@maxogden> so your question doesnt really make sense
06:23 < et_> hello everyone. I have question. it's seems that everywhere i read on node.js framework, everything around nosql. is there is a reason why node.js community prefers nosql over mysql?
06:24 <@tbranyen> because its webscale
06:24 < et_> in what terms?
06:24 <@tbranyen> in that its easier to drop buzzwords
06:24 <@maxogden> well there is a 'no' in both of them
06:25 <@maxogden> i find that node developers enjoy using databases
06:25 < alexi> maxogden: Thanx. I'll meditate on it a bit more :)
06:25 <@maxogden> alexi: see also http://maxogden.com/node-streams
06:25 < et_> sorry, what you mean by easier drop buzzwords?
06:26 < et_> @maxogden: databases are fun :)
06:27 <@tbranyen> et_: look into mysql cluster, you get mysql AND no-sql
06:27 <@tbranyen> its like the perfect harmony of this and that
06:27 < ljharb> no-sql literally means without SQL. you can't have both.
06:27 <@tbranyen> thats like saying ajax means you have to transfer xml
06:27 < alexi> maxogden: that's exactly what I was looking for, thanx a lot :)
06:28 < ljharb> tbranyen: no, "ajax" refers to the XMLHTTPRequest object. "noSQL" means "databases that don't use SQL"
06:28 < et_> tbranyen: i have them all (mysql, sql server, couch, mongh)
06:28 < et_> that's not the issue
06:28 < et_> i mean .. there are any Performance improvements?
06:28 <@tbranyen> ljharb: so i can't do ajax with iframes or injecting script tags?
06:28 <@maxogden> define: pedantic
06:29 < ljharb> no, thats not ajax tbranyen. thats just asynchronous resource loading.
06:29 < et_> or any other issue made the community choose this new path?
06:29 < ljharb> JSONP isn't ajax either
06:29 <@tbranyen> ljharb: you should probably update wikipedia and every resource on ajax ever then
06:30 < ljharb> http://en.wikipedia.org/wiki/Ajax_(programming) says "Data can be retrieved using the XMLHttpRequest object. "
06:30 <@tbranyen> yeah edit the word can to must
06:30 < et_> ajax: Despite the name, the use of XML is not required (from wikipedia)
06:30 < wookiehangover> maxogden: http://dev.wookiehangover.com/flow-control
06:30 <@maxogden> SICK GOOSE!
06:30 < ljharb> if you read that page, it explicitly only mentions data being transferred with XHR.
06:31 <@maxogden> haha this presentation rules
06:31 < ljharb> under "same origin policy", it says "Methods exist to sidestep this security feature by using a special Cross Domain Communications channel embedded as an iframe within a page,[16] or by the use of JSONP."
06:31 <@tbranyen> ljharb: i didn't actually read wikipedia, because what you're saying is quite foolish :)
06:31 < et_> <wookiehangover>: cool :)
06:31 < wookiehangover> :D
06:32 < ljharb> i find it far more foolish to say "ajax" and intend "anything asynchronous". just like saying "html5" to mean "html5, css3, and all other modern browser features"
06:33 < ljharb> certainly uninformed people use "html5" that way. doesn't mean its correct.
06:33 <@tbranyen> ljharb: IE "invented" ajax for lack of a better word, back in IE 5... shame IE 7 didn't get your XHR till 7 :-/
06:33 <@tbranyen> wheeeeeeeee
06:33 <@tbranyen> nobody could do ajax till ie 7
06:34 < et_> as i understand, 'ajax' term is not used when talking about node.js?
06:34 < ljharb> in IE < 7, the equivalent to XHR was their activex object. iframes were still not "ajax"
06:35 <@tbranyen> comparing their COM object to XHR is like comparing XHR to an iframe at this point
06:36 < wookiehangover> tbranyen: <blink> tags are totally ajax
06:36 < wookiehangover> they're asynchronous in their blinkiness
06:36 <@tbranyen> <blink src="">
06:37 <@maxogden> didnt ie15 plan to implement an xml parser inside blink tags?
06:37 <@maxogden> so you can program your own blink patterns using a certain xml namespace?
06:37 <@tbranyen> one can only hope
06:38 < et_> so why mongodb over mysql?
06:41 < et_> Why do all node.js based frameworks prefer nosql?
06:42 < et_> traditional RDBMS  are over?
06:42 <@tbranyen> et_: https://www.google.com/search?sugexp=chrome,mod=19&sourceid=chrome&ie=UTF-8&q=so+why+mongodb+over+mysql%3F
06:42 <@tbranyen> first link
06:42 <@tbranyen> n-joy
06:42 < et_> :) thx
06:44 < freewil> does canvas run on v0.8.x
06:45 < ljharb> canvas is browser functionality.
06:45 < freewil> ljharb, https://github.com/LearnBoost/node-canvas
06:47 <@tbranyen> https://github.com/LearnBoost/node-canvas/blob/master/package.json#L17
06:47 <@tbranyen> technically yes
06:47 <@konobi> =0P
06:48 < et_> i read the article closely. i'll read more on this subject, i can't find any good reason to prefer nosql over mysql.
06:49 < freewil> does this mean anything to anyone, im assuming it's cairo/canvas specific: undefined symbol: _ZN2v814ObjectTemplate11SetAccessorENS_6HandleINS_6StringEEEPFNS1_INS_5ValueEEENS_5LocalIS2_EERKNS_12AccessorInfoEEPFvS7_NS6_IS4_EESA_ES5_NS_13AccessControlENS_17PropertyAttributeE
06:49 < freewil> ... https://github.com/LearnBoost/node-canvas/issues/186
06:49 < niloy> there is no reason to prefer nosql over mysql
06:50 < et_> talk about node.js now: just learning it,.. i am loading the server by 'node server.js'. now. as i have multiple servers, i created in the 'init.d/' a script for each server. it working. 
06:50 < ljharb> freewil/tbranyen: well knock me over with a wet noodle. i had no idea. altho it calls out to a c library, ick.
06:50 < et_> but sometimes thing go wrong and i need to go 'kill' processes
06:51 < et_> is there is any solution to create multiple servers (better on the same port)
06:51 < freewil> ljharb, optimization :)
06:52 < freewil> et_, i think the new cluster module in 0.8.x allows you to start multiple servers on same port
06:52 < alex4nder> ljharb: how do you feel about the fact that almost all of node is C and C++?
06:52 < alex4nder> does it hurt you?
06:52 < ljharb> not great. thanks for your concern.
06:52 < alex4nder> :(
06:52 < alex4nder> sorry man.
06:52 < et_> i'll check the cluster module, thank you
06:53 < ljharb> i just don't like the extra dependency. if it was part of node i wouldn't comment.
06:53 < alex4nder> ljharb: maybe switch to CommonLisp?
06:53 < freewil> et_, beware that is new and marked "experimental"
06:53  * alex4nder shrugs.
06:53 < et_> i don't threat nothing in the node.js evnironment as production level for now :)
06:54 < et_> treat*
06:54 < et_> but it's so awesome!
07:05 < ccowan> Anyone using Browserify? How are you dealing with template files (non-js)
07:06 < ccowan> I've tried fileify but it doens't seem to work
07:07 < dominictarr> ccowan, I use browserify but not with templates.
07:08 < dominictarr> however, I think it does support that, for jade at least.
07:08 < dominictarr> I think the module you want is named jadeify
07:11 < freewil> im using browserijade with browserify
07:19 < iksik> hm
07:25 < zenista> hi a newbie.... express.js manuall says to use app.helpers and app.dynamicHelpers... but my version of node is giving out error no such method
07:25 < zenista> what to do
07:31 < inLoveWithNode> Node.js is made of 100% pure rainbows. Good one.
07:33 < inLoveWithNode> wtf happened to this channel? 235 ops?
07:36 < [AD]Turbo> hola
07:37 <@doexxa> inLoveWithNode: more ops = more fun
07:37 <@doexxa> obviously
08:08 < moon1> hi
08:10 < zenista> hi moon1
08:11 < moon1> hellow
08:12 < moon1> zenista
08:12 < zenista> whats up
08:14 < moon1> no isay welcome
08:46 < davv3> aw someone deopped me
08:46 < gsf> is there any protocol for recycling abandoned package names?
08:47 < gsf> i've got my eye on "gather" and the npm module by that name links to a 404 at github
08:47 < astropirate> gsf, yes, intimidation 
08:47  * gsf puffs out his chest
08:49 < gsf> astropirate: who should i be trying to impress?
08:49 < astropirate> gsf, the internet
08:49 < gsf> oof tough crowd
08:49 < astropirate> lo
08:50 < astropirate> I need a new project to work on :(   I am without direction right now
08:50 < astropirate> and i dont like it
08:50 < davv3> i gots too many project and no motivation..
08:51 < astropirate> well that too
08:51 < astropirate> there are soo many th ings i want to do
08:51 < astropirate> but dont know what to do
08:51 < astropirate> i have an excusse for not doing any of them
08:51 < astropirate> ohh woops to bad i dont know anything about machine learning
08:51 < AAA_awright> I'd love to have too few projects to work on and lots of motivation right now heh
08:51 < astropirate> woops i dont know anything about 3d developement
08:52 < AAA_awright> I could be slaying monsters in Majora's Mask or Neoquest right now
08:53 < AAA_awright> astropirate: Find a job maybe, there's no shortage of those. Especially if you're working for gree.
08:53 < AAA_awright> *free
08:54 < astropirate> AAA_awright, nahh i'd rather bumm around than work for free
08:55 < astropirate> unless ofcourse its a non-profit and everyone is workign for free :)
08:55  * gsf reads http://npmjs.org/doc/disputes.html
08:55 < AAA_awright> "Get a job"... says the person working for free
08:57 < AAA_awright> I blame it on the global namespace
08:57 < AAA_awright> Drupal has no end of these sorts of problems, it's kinda inevitable when you get around to thousands of people registering thousands of names in the same namespace at no cost
08:59 < dsirijus> could anyone give me some guidelines on the web dev libs available? i've done basically pure node.js up until now, and played a little with sass and jade
09:00 < dsirijus> that being said, i don't like jade
09:00 < dsirijus> and i hate writing sass in an indent-ambiguous way (without braces)
09:00 < dsirijus> anything that a machine cannot indent properly by itself isn't interesting to me
09:01 < forbes_> For css compilation, consider less (lessccs.org) which is similar to sass, but uses proper braces
09:02 < dsirijus> forbes_, i can use braces in sass though
09:02 < forbes_> Templating broadly divides into 3 categories:  Complete languages like JADE, embedded JavaScript based templates, and logic less templates such as mustache.
09:02 < dsirijus> mustache appeals to me since i love my moustache
09:02 < forbes_> Yeh, and when you do that it's fine :)  I personally prefer a language that imposes those good practices
09:03 < dsirijus> forbes_ agreed on that one
09:03 < forbes_> https://github.com/janl/mustache.js
09:04 < dsirijus> forbes_, what do you think what was design decision behind allowing indenting logic in sass? i personally can't wrap my head around why would anyone want to do it that way.
09:04 < forbes_> less is really nice as a language, but if you've already got used to sass I'm sure that's good too
09:04 < forbes_> Because it matches CoffeScript
09:04 < forbes_> And Jade
09:04 < forbes_> and the reason for it in JADE is mostly that it matchces coffe script
09:04 < dsirijus> but it's horrible to edit!
09:05 < dsirijus> especially when you have to play with dom levels
09:05 < forbes_> Yeh, it's hideous, I couldn't hate it much more personally, it's a pain to write, a pain to read, and a pain to debug
09:05 < forbes_> but some crazy folks love it
09:05 < dominictarr> isaacs, I've been thinking about your proposal for buffing streams automatically
09:06 < dsirijus> forbes_, i have unreasonable hate over stuff from ruby's eco-system, that's why i haven't gone with less
09:06 < forbes_> ruby's eco-system?
09:06 < dsirijus> isn't less originally written by ruby folks?
09:06 < forbes_> nope
09:06 < dsirijus> forbes_, actually, yes
09:06 < dsirijus> http://en.wikipedia.org/wiki/LESS_(stylesheet_language)
09:07 < dsirijus> "Its first version was written in Ruby"
09:07 < forbes_> OK, I stand corrected
09:07 < forbes_> It's now very much a JavaScript library though, and doesn't really take anything much from the ruby eco-system nowdays
09:09 < dsirijus> well, either way, it's not like css templating moves me million steps ahead in productivity. it's nice, sure, but not really interesting, not even from the template language development side
09:09 < forbes_> As for other libraries, I'd strongly recommend express.js as a nicely un-opinionated web framework
09:09 < forbes_> lets you use whatever you want for templating/css compilation etc.
09:10 < dsirijus> forbes_, how about html templating?
09:10 < forbes_> And if you need to do authentication, you should consider passportjs
09:10 < dsirijus> jade is definitely not an option
09:10 < forbes_> expressjs supports mustache, ejs etc. as well as jade
09:10 < dsirijus> mustache is kinda simple, right?
09:10 < jesusabdullah> yar
09:10 < ljharb> also regular old HTML, in case you want to write HTML.
09:10 < jesusabdullah> so is ejs
09:10 < forbes_> very simple
09:11 < jesusabdullah> I usually break out ejs cause, like, fuck it we'll do it live
09:11 < ljharb> i actually like EJS. mustache is better but EJS lets me do a small bit of logic
09:11 < forbes_> https://github.com/visionmedia/consolidate.js has a list of templating languages supported by expressjs
09:11 < ljharb> http://microjs.com/#templating
09:12 < forbes_> If you're already really familiar with JavaScript, EJS has a nice fast learning curve
09:12 < dsirijus> um, no mustache in that list, forbes_
09:12 < dsirijus> though, handlebars is a superset of mustache, so it must support mustache too, i guess
09:12 < forbes_> Turns out you're right, mustache support would none the less be easy, I'll add a pull request to get it added :)
09:13 < forbes_> Handlebars is almost identical though, so you could just use that
09:15 < dsirijus> so, either are great if you wanna make json your client<->server language
09:16 < rvagg1> hogan.js is worth considering too, nice and fast, mustache compatible: http://twitter.github.com/hogan.js/
09:16 < dsirijus> anyone used Compass?
09:18 < dsirijus> (Compass could sway me to using sass instead of less)
09:19 < mauriyouth> hello. i wanted to know what do u suggest for conctinuous integration for node project. i use git as a version control
09:27 < dsirijus> well, thanks guys for help
09:27 < rvagg1> mauriyouth: travis-ci is pretty popular, easy to integrate with github if that's what you're using
09:31 < Dron> hi all
09:34 < Dron> Can anyone help me? I have trouble installing node.js
09:34 < rvagg1> what's up?
09:35 < Dron> make end's with error http://pastebin.com/WbHr3dCU
09:36 < Dron> CentOS 5.6
09:37 < Dron> I tried to install python26 and define PYTHON env like export PYTHON=`which python26`
09:38 < rvagg1> what does this give you: /usr/bin/python -c "import bz2; print bz2.__doc__"
09:40 < rvagg1> does it give you info about the bz2 package or do you get an error?
09:53 < Dron> http://pastebin.com/8UNFwm0E
09:53 < Dron> I get info about bz2 with pyton and python26 binaries
10:03 < rvagg1> sorry Dron, disconnected.. what's the output of: which python26
10:03 < Dron> http://pastebin.com/8UNFwm0E
10:03 < Dron> I get info about bz2 with pyton and python26 binaries
10:04 < rvagg1> what about: which python26
10:04 < rvagg1> you might have to manually export PYTHON=/usr/bin/python26 (or wherever your real python binary is)
10:05 < Dron> I already tried it
10:05 < Dron> # which python26
10:05 < Dron> /usr/bin/python26
10:05 < Dron> # export PYTHON=`which python26`
10:06 < Dron> but got the same error 
10:06 < rvagg1> soooo... do you know if you have python installed anywhere else? /usr/local/bin/ perhaps?
10:07 < Dron> I also have systems' python 2.4  in the same place
10:07 < rvagg1> ah, ok
10:08 < rvagg1> so does this give you info about bz2? /usr/bin/python26 -c "import bz2; print bz2.__doc__"
10:08 < RLa> what if you temporarily switch symlinks so that python command works as pythin26
10:09 < RLa> hm, anyway, why would anyone run python 2.4
10:09 < Dron> ok, I'll try this
10:09 < RLa> my system is ancient and even i have python 2.5 :)
10:09 < Dron> 2.4 was installed with the system install and still sit here
10:10 < Dron> even 2.3 was installed with system and today yum update updated to 2.4 :) 
10:11 < Dron> also I installed 2.6 additionally and define PYTHON env variable to 2.6
10:11 < RLa> how you installed it
10:12 < RLa> from source?
10:14 < rvagg1> is it possible to uninstall 2.4 or does yum throw a tantrum doing that?
10:14 < RLa> hm, maybe you can use a command to see what depends on it
12:08 < Dron> pyton2.4 and 2.6 installed using yum from standart centos repo
12:09 < Dron> I tried to make /usr/bin/python as symlink to python2.6 in result - no success, same error
12:12 < RLa> still can't find bz2 module?
12:18 < Dron> yes, same error
12:27 < RLa> tried to ask in #python too
12:27 < RLa> maybe it has some module path missing or something like that
12:54 < wereHamster> I once saw a rather popular website where people post javascript codes to compare in different browsers or compare different algorithms. Any idea what the website is?
12:56 <@sriley> jsperf?
13:00 < wereHamster> yep, thanks :)
13:11 < cactus> Hi guys...Trying to find out here before going to SO.com
13:11 < cactus> anyway, i'm having problem with zlib and compressed memecache data
13:11 < cactus> data stored in memecache is compressed from PHP, so when trying to decompress it inside node i get
13:11 < cactus> [Error: incorrect header check] errno: -3, code: 'Z_DATA_ERROR' 
13:12 < cactus> using: zlib.unzip(...
13:20 < jmwhittaker> How do you run a Node module like - https://github.com/stenson/inca - from source as it requires a global install?
13:21 <@Sembiance> jmwhittaker: if you check out the code, you can 'cd' into the directory and do: `npm install .`  which will install itself locally in that directory. Then just access the binary in the bin dir
13:22 <@Sembiance> jmwhittaker: not sure I understood exactly what you meant though :)
13:22 < jmwhittaker> Sembiance: ah right that makes sense thanks
13:23 < jmwhittaker> Sembiance: So I have to do that to see any changes I make then I guess as it needs to be installed?
13:25 <@Sembiance> jmwhittaker: When I need to modify another persons Node module, I fork it on github, make my changes, check in my changes to github and then in my package.json in the dependencies I do  inca : "git://github.com/Sembiance/inca.git"
13:26 <@Sembiance> jmwhittaker: if you don't want to have to check in your code to test it, you can also in node_modules make a symlink to the node folder. 
13:26 <@Sembiance> jmwhittaker: err the module folder ;)
13:26 < jmwhittaker> Sembiance: Yes, I'm just stumbling at getting it running first before I make any changes. Npm install . fails due to a submodule not having a README.md file
13:26 <@Sembiance> rofl
13:27 <@Sembiance> I'm not laughing at you, but the error :)
13:27 < jmwhittaker> Sembiance: It's only a warning :)
13:27 <@Sembiance> oh, ignore it :)
13:29 < jmwhittaker> Sembiance: Ok so I now have a node_modules directory but how would I run this module? The docs say install using npm install -g inca (ok so I have sone a npm install . ) then I *should* be able to just run inca from the command prompt
13:29 < jmwhittaker> Sembiance: it also looks like I can't do - npm install -g .
13:30 <@Sembiance> jmwhittaker: ahh, yes, that's how you do a global install, is that what you were asking all along? :)
13:31 < jmwhittaker> Sembiance: no sorry i'm not being very clear
13:32 < jmwhittaker> Sembiance: I want to make changes to this Node module. It only runs when you install it globally from Npm. How would I make and test my changes locally
13:32 <@Owner> hai!
13:33 < dsirijus> what does express.js add over connect.js?
13:35 <@Sembiance> jmwhittaker: yah. `npm install .` will install it locally, keeping everything in that module folder. Then you can just execute the bin/inca in that folder. So either type the full path to it, or add that bin directory to your PATH
13:40 < jmwhittaker> Sembiance: ok so adding it to my $PATH looks like the way to go
13:45 < dominictarr> mikeal, hey, I've just been looking through all the old stream issues.
13:46 < dominictarr> what do you think about all streams emitting 'close' after destroy() is called?
13:47 < AviMarcus> do only proper arrays[] have a .forEach function, but not json objects {} ?
13:48 < wereHamster> AviMarcus: {} is not an array. so.. no.
13:49 < riven> json object, lol
13:52 < AviMarcus> riven, what are there generic json constructs?
13:53 < riven> 'Scuse me?
13:53 < riven> English please ;o
13:53 < AviMarcus> var json={key:'value',key2:'val2'}; -- what is that?
13:54 < riven> Nothing to do with JSON, heh.
13:54 < riven> That, dear AviMarcus, is an object literal.
13:54 < riven> Would you perhaps like to learn some JS basics?
13:54 < riven> AviMarcus: Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/
13:54 < circlicious> i console.log(err) and it give [ReferenceError: pageTitle is not defined] , typeof is an object. i want the text out of the object and i am c onfused how to do so ?
13:55 < AviMarcus> riven, indeed, I suppose I do need to learn quite a bit more.
13:57 < dsirijus> forbes_, just wanted to add that i found something really interesting as far as html templating goes -> https://github.com/flatiron/plates
14:26 < deximer> node-jasmine-dom is failing to run tests. I've traced it to a problem in runner-from-html.js where "window.console.log = ..." fails because console has not been assigned to window
14:27 < deximer> What is really strange is that it runs on another devs machine just fine. But not on mine or our integration server
14:49 < TheEmpath> it was so refreshing to play with node.js last night… i gutted the attributes system in a mud engine i just downloaded a night ago, added my own and it worked
14:50 < TheEmpath> and i think back to if that same engine had been written in Symfony, how I'd still be struggling with some crazy implementation of Events
15:19 < xx_alex_xx> Hi there, has anyone else Problems with node.js v0.8.3 and node.io ? I get cannot find module. Any suggestions how to fix that?
15:22 < mateodelnorte> @SubStack: Quick question. I'm getting "Error: error parsing method" when attempting to listen to port 443 with bouncy. Seems pretty straightforward. Am I missing something simple?
15:22 < Iszak> When will Node.js API become more stable?
15:23 < mateodelnorte> @Iszak - it's been stable enough for us to develop on it for over a year. 
15:23 < slickplaid> probably tomorrow, then the next day... and probably a week from then as well. 
15:23 < mateodelnorte> lol
15:23 < slickplaid> i would wager to guess each release will probably make it more stable
15:24 < slickplaid> (even releases, anyhow)
15:24 < mateodelnorte> odd will probably make it more awesomesauce
15:24 < Iszak> yeah, it's not stable enough for me, libraries fail to get updated, api changes.
15:25 < slickplaid> Iszak, the module issue of stability can be seen in any language that allows user modules/addons/etc. Pick established, popular ones or write your own to maintain the stability/updates you're looking for.
15:25 < mateodelnorte> might be your deployment practices. you need to maintain strict control of node versions as well as module versions in package.json of the projects you're developing. the same would be true in any platform, be it Java, .NET, Ruby, etc. 
15:25 < slickplaid> mateodelnorte++
15:26 < ccowan> Node.js itself has been pretty stable
15:26 < Iszak> Perhaps I should rephrase me question, when will node.js development slow down and versions be released less frequent allowing packages to become up-to-date with the current node.js version and hence more stable.
15:27 < ccowan> There are a few functions and module names that have changed but there seems to be a BC with the previous version while they depreciate an interface.
15:28 < Iszak> I'm talking about new major releases every 1-2 years
15:28 < Iszak> but looking that recent release log, we're nearly there, we're at 7 month releases for new versions. from 0.6 to 0.8
15:29 < mmalecki> Iszak: never, hopefully
15:29 < Iszak> why never?
15:29 < ccowan> I was thinking that but didn't say it out loud :D
15:30 < mmalecki> Iszak: slowing development down is never a good thing. you should upgrade your code beforehand
15:30 < jcrew> Iszak: nodejs is non-traditional, that's part of the appeal and being non-traditional means it should keep forging ahead 
15:30 < Iszak> I'm not talking about slowing down development to allow code to become stable, I'm talking about node.js is near perfect and thus no need to release new major versions as often.
15:31 < mateodelnorte> @Iszak, Node is still pre-1.0. It's on the verge of 1.0, but not yet there. It's been stabilizing at a very good pace, with the code team focusing on particular issues with each major release. You can see the version release notes to learn what each of these things are. The software will never be perfect. Instead the team is prioritizing features to complete in order to call Node officially 1.0.0. 
15:32 < Iszak> mateodelnorte: I know the software will never be perfect, but surely by the time of 1.0.0 it should be in a good place where people can work with it and not expect it to change in a year and have to upgrade?
15:35 < hgty> how can i verify an image file is really an image file? i think probably to open with 3rd party the "file" and re-save it as image. suggestions?
15:35 <@Owner> hgty~# sec
15:39 <@Owner> hgty~# http://search.npmjs.org/#/imagemagick-identify-parser  perhaps
15:39 <@Owner> im not sure how much info that gives, but im sure there are error states for 'invalid image'
15:40 <@Owner> hgty~# or this  https://github.com/fabricelejeune/cadabra
15:40 < Iszak> why not use something like the mime magic database?
15:41 < hgty> i am worried about 'non expected' input, last thing i want someone to overflowing / whatever, and executing evil code on my machine.
15:41 < Iszak> hgty: I would use two form validation, extension and file headers through the means of image magick or mime magic database.
15:42 <@Owner> or
15:42 < Iszak> hgty: if you're that worried you can store it on a CDN which has no execution languages
15:42 < jergason> What is the magic mime database?
15:43 < Iszak> jergason: it is a database of locations in the file header which can be checked to see what type of file it is, it can be fooled though.
15:43 <@Owner> get the file, check the extension, put through mogrify info or identify, verify data matches extension, then perhaps 'filter' it by re-saving it as a standard format (.png!)
15:43 < jergason> so basically it is only good if you assume people aren't being malicious?
15:44 < blazes816> would trying to get the irc module running in the browser with browserify be a fools errand?  I'm new to node so don't know too much about it's extent.
15:44 <@Owner> blazes816~# probably take you 2 hours
15:45 <@Owner> blazes816~# you need socket.io too...afaik
15:45 < Iszak> jergason: well you'd have to fake the file extension and the file headers which may make the file unable to be executed given it's wrong extension. 
15:45 < blazes816> :(
15:45 < jergason> blazes816: that would be pretty sweet actually
15:45 < blazes816> Owner: I have a socket.io solution going.  I was wondering if I could move it totally in browser
15:45 < blazes816> I thought so too
15:45 < Iszak> hgty: you could store the files below root and serve the files via X-SendFile headers (or variants) as an extra security precaution.
15:45 < blazes816> I want to be able to combine channels.  like, show #node.js and #express in one tab
15:45 < blazes816> color coded or something
15:46 <@Owner> blazes816~# why doesnt it do that by default :p
15:47 < blazes816> one day
15:47 < Comadrin> hello
15:47 <@Owner> hgty~# you dont need to worry about malicious images unless there is a bug in libpng/libtiff/libjpeg/imagemagick that no one knows about
15:47 < Comadrin> would someone please try to evaluate on their java this expression: "a".matches(".")
15:47 < Comadrin> and tell me what you will get
15:47 <@Owner> blazes816~# my stupid irc thing does that by default
15:48 < blazes816> Owner: XChat does not.  what do you use?
15:48 < Comadrin> for some unknown reason i am getting "a".matches(".") == true
15:49 < Comadrin> but 97!=46
15:49 <@Owner> blazes816~# my node.js socket.io irc crap does that
15:49 < hgty> libpng, 10 July 2012, latest vulnerability fix. i guess i will use those low level libpng, libjpeg and maybe get something going. thanks.
15:49 <@Owner> hgty~# no
15:49 < blazes816> Owner: gotcha.  great minds...
15:50 <@Owner> hgty~# use imagemagick bindings
15:50 <@Owner> blazes816~# im not sure what we did differently
15:51 < hgty> alright i will check that too, thanks.
15:52 <@Owner> hgty~# i linked you to two of them
15:54 < Comadrin> anyone willing to give a hand here?
15:54 < Jacky> o_O
15:54 < jcrew> Comadrin: one sec
15:55 < Comadrin> sure thing
15:55 <@Owner> depends what you want me to do with it
15:55 <@Owner> 0_o
15:55 < jcrew> Comadrin: how are you using that comparison?
15:55 < Comadrin> well, i am doing some text parsing. in this particular instance the following expression returns true. but how
15:55 < Comadrin> here is the exact code: !(line_two.charAt(line_two.length()-1)+"").matches(".")
15:56 < jcrew> that should be true
15:56 < Comadrin> (line_two.charAt(line_two.length()-1)+"" ==== i get "a"
15:56 < Comadrin> that is the point
15:56 < Comadrin> i get false from the evaluation
15:56 < Comadrin> and that does not make any sense
15:56 < jcrew> you will if you negate it
15:56 < jcrew> which you are
15:57 < Comadrin> "a".matches(".") == true
15:57 < Comadrin> i just wrote manually "a".matches(".")
15:57 < jcrew> a.matches(".") doesn't = true but it does exist and when you negate it you get false
15:57 < Comadrin> and i get true as a return
15:57 < jcrew> to see how it works do this: "a".match(".") ? "true" : "false"
15:58 < jcrew> and then when you negate it you'll get the opposite
15:58 < Comadrin> true
15:58 < Comadrin> i understand the negation part
15:58 < jcrew> and then you negate that, from your statement above, you will get false
15:58 < Comadrin> the problem is that char 97 != 46
15:58 < Comadrin> and on my computer it does
15:59 < Comadrin> i wanted to check if someone who has java and can run this command will have the same problem
15:59 <@sriley> its due to match uses a regexp, . means any character
16:00 < Comadrin> oh, so it converts "." to regexp
16:00 < jcrew> the result is the same whether you escape the . or not
16:00 <@sriley> "a".match(/\./)
16:00 < Comadrin> how can i check if it is dot?
16:00 < jcrew> === "."
16:01 < Comadrin> jcrew: thanks, i thought i was going crazy
16:01 <@sriley> but yes if its a single character then it makes more sense to just do === "."
16:03 < Comadrin> thank you for pointing out about regexp. 
16:05 < owen1> what is a 'destination stream'? the pipe function return it. what events is he emitting?
16:15 < kuryaki> cronopio: esta?
16:16 <@Owner> como
16:17 <@Owner> esta bien
16:32 < therealkoopa> I'm going to zlib.gzip a file (image) before sending it into knox.  I have the path of the image.  Is fs.readFile then taking the data and gzipping it the best way, or should I do something better
16:36 < owen1> i am using request package and trying to pipe to a put request. i listen to the data event and i see the chunks arriving. how to view the response back from the server i made the put request?
16:49 < jhsto> any idea how to block part of client-side script from running until its called?
16:49 < blazes816> jhsto: i'm new to node, so sorry if this is completely stupid, but would that not just be a function?
16:50 < jhsto> well, my function is inside of ready function
16:50 < blazes816> or a use for a mutex
16:50 < jhsto> which is required earlier
16:50 < jhsto> and this is plain old javascript since its on client side
16:52 < AviMarcus> hmm less and less ops :(
16:53 < AviMarcus> ops plz <-- ryan wants that to work
16:54 < john3909> I'm using socket.io to send data between my nodejs server and a browser app. My html server is started like this "connect(connect.static(__dirname +  "/public")).listen(8000);". In my html file I have "<script src="/socket.io/socket.io.js"></script>" and I did "npm link socket.io" in my project folder. When I load my html file, I get the following error "GET http://10.100.116.105:8000/socket.io/socket.io.js 404 (Not Found)". Where does c
16:55 < addisonj> anyone here use saltstack for node devops stuff?
16:55 < addisonj> deciding if I want to make the investment in configuration management
16:55 < AviMarcus> addisonj, I use it in general... a bit
16:56 < AviMarcus> I only have a few systems so I haven't torn everything down
16:56 < AviMarcus> how many systems you expecting to deploy?
16:56 < addisonj> 20-30 for starters
16:56 < AviMarcus> basically, I think: before your build gets too complex store everything in configuration management so you'll never have to worry about finding everything you need to set up
16:57 < AviMarcus> 20-30 is a good number, you should really notice the difference when you need to change something.
16:57 < AviMarcus> salt, seemingly unlike the others, makes remote execution easy, not just configuration management
16:57 < addisonj> yeah... more just nervous about getting it right, they aren't trivial systems
16:58 < addisonj> yeah... the grains look fairly fancy
16:58 < AviMarcus> I haven't really used any custom grains or pillars, just name matching
16:58 < addisonj> did you have to write a lot of salt modules to get it to work with node?
16:58 < addisonj> or was that fairly easy/
16:58 < addisonj> *
16:59 <@Owner> is everyone writing http servers?
16:59 < AviMarcus> I didn't actually have it do anything directly with node. I have a script to pull node source from git, V.8.0, compile..
16:59 < AviMarcus> Owner, not sure, what's your Q?
16:59 < AviMarcus> mostly I'm using git post-commit hooks to push stuff around on my 2 servers
16:59 < AviMarcus> and nodemon for dev testing to auto-restart
17:00 < addisonj> yeah, we are just bash and custom node tools, we already have about 10 boxes in  another dpleoy
17:00 < AviMarcus> addisonj, but that post-commit hook could just as easily call a state to do git update and restart the process or whatever. 
17:01 < AviMarcus> salt stuff is much easier to help you write idempotent code
17:01 < AviMarcus> so.. go for it :)
17:01 <@Owner> who are you talking to
17:01 < AviMarcus> addisonj, I presume you're already using package.json to manage dependencies?
17:01 < addisonj> yep
17:02 < addisonj> we already have ~10 or so boxes in production
17:02 < addisonj> much bigger deployment coming soon though
17:02 < AviMarcus> so you can run npm install as part of your state. or as part of a git hook or something.
17:02 < AviMarcus> Owner, I dunno your question
17:02 <@Owner> who are you talking to
17:03 < addisonj> yeah, we actually have a decent tool we wrote for deploys: github/idottv/gogogo
17:03 < AviMarcus> Owner, when I said your name, I was talking to you.
17:03 < addisonj> pretty specific use case
17:05 < john3909> Hey guys, I'm new to nodejs and I'm looking for some help with how to get nodejs to serve up socket.io to the client. I guess I'm looking for the project folder layout so that connect can find the requested socket.io file. 
17:16 < TehShrike1> Hey SubStack, thanks for js-traverse!
17:17 < AviMarcus> oh I think I was looking for something like that.
17:18 < AviMarcus> nice. Thanks.
17:30 < jcrew> john3909: your project folder layout is going to depend on what you're doing and how modular you make it
17:30 < retrobaby> I am using socketIO for some project. Now I have a confirmation variable, whose computation is done server side and I get the value of the variable using socketIO callbacks. but since its async, the confirmation logic is evaluated before the callback returns and fails everytime. Is there a better way of doing this? or a way around this problem?
17:30  * jergason waves at addisonj
17:30 < addisonj> yo
17:31 < retrobaby> any one?
17:31 < jcrew> john3909: to get started with socket.io just create a project folder, cd into that folder type 'npm install socket.io', then 'touch app.js' and start editing app.js
17:31 < wink_> retro: well you clearly need to wait to execute your confirmation logic in your async callback
17:32 < jjido> callback for the callback?
17:32 < retrobaby> wink_: yeah thats one way of doing it, i move the entire confirmation logic into the callback, I have it in a different method now, outside this method. 
17:33 < cocacola> What does "Assertion `handle->InternalFieldCount() > 0' failed." mean?
17:33 < retrobaby> jjido: @.@
17:33 < retrobaby> jjido: actually that makes sense
17:33 < wink_> if your logic can be bundled that easily, just make a function out of it and call it in your socket.io callback
17:34 < john3909> jcrew, thank for your help. I had to copy socket.io.js from the socket.io-client/dist folder into my public/socket.io folder to make this work.
17:35 < john3909> Not sure why it doesn't work the way to described
17:35 < john3909> you describe
17:35 < retrobaby> wink_: yeah I guess that what's I wll do, thanks.
17:36 < wink_> <3
17:36 < wink_> cocacola: thats a v8 assertion, it looks like you're probably crashing in a binding somewhere?
17:37 < retrobaby> cocacola: how did u get that nick? are u an old dude? -_- <3
17:37 < retrobaby> lol
17:37 < john3909> jcrew, how does connect know that /socket.io/socket.io.js is located in the node_modules/ folder?
17:38 < DTrejo> back in my day
17:39 < cocacola> wink_: yeah i'm writing a binding. but i'm trying to call a wrapped function in C++
17:39 < jcrew> when you 'require', it looks in node_modules folder for modules
17:39 < cocacola> wink_: not sure how to call that
17:40 < jcrew> john3909: so if connect does a 'require' for socket.io it will look in the node_modules for socket.io (and it uses the folder that the command was run from, not the folder that the module resides in)
17:40 < retrobaby> john3909: if i read the source right, it recursively looks for node_modules directory in directories, till it reaches the root. 
17:41 < john3909> jcrew, I think I've confused you. Using socket.io on nodejs works fine. The problem is when the browser loads, the client needs to download the socket.io source and that is where I have a problem.
17:41 < owen1> i am using request package and trying to pipe to a put request. i listen to the data event and i see the chunks arriving. how to view the response back from the server i made the put request?
17:43 < john3909> jcrew, so the question is where does connect load a resource when the client has a line like this "<script type="text/javascript" src="/socket.io/socket.io.js"></script>"
17:44 < owen1> also, when i pipe stream into a put request, does the server i am putting into needs to support streaming or will it work with any server?
17:44 < jcrew> john3909: it requests the file from the webserver, in that instance you need a folder called socket.io with the socket.io.js in the web server's doc root
17:45 < john3909> I place the file under public/socket.io/socket.io.js and then it works. 
17:46 < john3909> jcrew, is that the correct way to set this up?
17:49 < jcrew> john3909: i would do a symbolic link so you only have to update it in one spot, your webserver may or may not be configured to follow sym links
17:49 < jcrew> update it meaning update the socket.io.js file
17:50 < jcrew> your node project shouldn't be in your webserver's doc root though
17:50 < madbyte> I am trying to render SVG source to PNG. I am spawning an child process to do this, the first argument to phantomjs file is svg source and second argument is the image filename. "child_proc.spawn("phantomjs",["phantom_svg_to_png.js",""+svgsrc+"","image2.png"]);" Whats wrong here?
17:51 < john3909> jcrew, thank you. You have been very helpful. 
17:53 < jcrew> np
18:03 < Forbes_L> I want to develop a node.js application, with a SQL database backend.  Company rules dictate it must be hosted on one of our own (virtual) servers, not in the cloud :( So the question is, what OS should I go for, and what database should I go for?  What will have the best support for node.js and be simplest to configure?
18:06 < AviMarcus> 'lo Forbes_L. Uhm for lack of someone else answering.. nearly any OS is fine. I think windows support is now nearly on-par with Linux support -- it would probably mostly be different in file functions
18:07 < AviMarcus> and as to backend... if you just need a low level driver, not an ORM, it seems most things are supported -- mysql, postgres, mongo, and I presume couch. Although couch would be easy to do anyway. 
18:10 < Forbes_L> Thanks AviMarcus, that mostly confirms what I thought :) probably go with Windows + MySQL then
18:10 < AviMarcus> that said, from most of the tech communities, people seem to prefer some brand of *nix :)
18:11 < jocafa> it really bugs me that timestamps in ruby are in seconds rather than miliseconds.
18:11 < jocafa> </rant>
18:12 < AviMarcus> nice. It similarly bugs me that we have such a nice console.time function but can't grab that variable.
18:12 < Wes-> it bugs me that time will overflow 32-bit int in 2038!
18:12 < AviMarcus> congrats for keeping it on-topic.
18:12 < Forbes_L> yeh, but people don't seem to have settled on one brand of *nix :(
18:12 < AviMarcus> but Wes- why does that bug you?
18:13 < jocafa> your mom will overflow sooner than that
18:13 < jocafa> SNAP
18:13 < AviMarcus> Forbes_L, meh. just don't run freeswitch on centos6 and you're fine.
18:13 < jocafa> ¬¬
18:13  * Hodapp looks at jocafa 
18:13 < samholmes> How do I set up browserify? There isn't a setup section on the README.
18:13 < jocafa> sorry, it's one of those days hehe
18:13 < Wes-> AviMarcus: I will be 65, that's a little old to be coming back as a highly-paid consultant to fix all my broken non-t2.038k-compliant code
18:13 < samholmes> Surely I need to add some middleware or something to my express app?
18:15 < AviMarcus> Wes-, so... you should start harping about it now, so you can become a highly-paid consultant while just in your 40s!
18:16 < Wes-> AviMarcus: that's a good idea. Although, I may have shot myself in the foot in 2007 by transitioning the company away from C and toward server-side javascript. Dammit! 
18:17 < jocafa> Wes-:  how so?
18:17 < jocafa> just curious
18:18 <@Hodapp> I once set up web services using Apache Axis2/C and Microsoft IIS.
18:18 <@Hodapp> Never again.
18:18 < Wes-> jocafa: JS dates run out way after I'll be dead. 2^53 milliseconds after jan 1970. Not sure how to calculate that, though.
18:18 < context> hodapp: i was gonna say i hope you arent flaunting that fact ;)
18:18 <@Hodapp> context: Few things piss me off so much that I will write entire blog posts about them...
18:18 < context> 53 ?
18:18 < jocafa> no not that, i meant in what way do you think you shot yourself in the foot going from C to JS?
18:19 < AviMarcus> jocafa, now he can't charge a lot for fixing date issues.
18:19 < AviMarcus> rofl!
18:19 < context> hodapp: haha. heard that. i use to deal with websphere and other crap
18:19 < Wes-> jocafa: well, since we won't run out of dates, I won't able to pull off a gig as a consultant fixing Y2K-type problems when I'm old
18:19 < AviMarcus> Wes-: http://www.wolframalpha.com/input/?i=2%5E53+milliseconds+after+jan+1970
18:19 <@Hodapp> context: http://hodapple.com/blag/?p=500
18:19 < Wes-> AviMarcus: COOL
18:19 <@Hodapp> context: We moved to WebSphere. WebSphere may kill itself regularly, but it's about a hundred times more stable than Apache Axis2/C.
18:20 < Wes-> ﻿﻿October 287396
18:20 < Wes-> something tells me I won't live that long
18:20 < jocafa> ah got it
18:20 < jocafa> subjects didn't connect in my head hehe
18:21 < Wes-> jocafa: clearly, you don't read enough Dilbert
18:21 < jocafa> truth
18:22 < context> avimarcus: you arent gonna be alive then? fuck that, i am !
18:22 < AviMarcus> Hodapp, my sympathies.
18:23 <@Hodapp> AviMarcus: thanks.
18:24 < chakrit> console.time? what is it?
18:25 < AviMarcus> chakrit, console.time('my-timer-1'); and console.timeEnd('my-timer-1') --> console.log of ms time the code in between took
18:26 < AviMarcus> chakrit, http://nodejs.org/api/stdio.html#stdio_console_time_label
18:26 < chakrit> AviMarcus, ahhh nice! didn't knew that before.
18:27 < AviMarcus> ooh console.dir(obj) instead of a string.
18:27 < AviMarcus> oh same. nvm.
18:28 < context> chakrit: bookmark that page. api reference IS useful
18:31 < AviMarcus> ooh yey.
18:31 < bakadesu> turntable scratching in here
18:32 < AviMarcus> ops plz!
18:32 <@wesleyh> wtf
18:32 < gkatsev> haha
18:32 <@AviMarcus> wesleyh, ryan started it on thursday.
18:32 < gkatsev> ryah: has driven gf3 to insanity
18:32 <@tuhoojabotti> I can help
18:32 < Druide__> wtf is that?
18:32 < gkatsev> AviMarcus: he started this last year or something more like.
18:32 < bakadesu> we have the power to kick gf3, no?
18:33 <@AviMarcus> oh. k.
18:33 < dominictarr> COMPLETE ANARCHY MUAHAHAHAHAHA
18:33 <@mmalecki> bakadesu: why tho> it's fun :)
18:33 <@jrajav> Hey, sweet :D
18:33 <@mmalecki> dominictarr++
18:33 <@jamiep> MAXIMUM POWER
18:33 -!- gf3 was kicked from #Node.js by dominictarr [gf3]
18:33 <@jrajav> Vegeta what does the scouter say about the op*shot*
18:33 <@nail_> that's more like omniarchy
18:34 <@Gregor> Well well well.
18:34 <@Gregor> Here we go again.
18:34 <@gkatsev> he was almost done.
18:34 <@gkatsev> lol
18:34 <@tuhoojabotti> yeah
18:34 < gf3> RUDE
18:34 <@leonardo> is party time?
18:34 <@dominictarr> you gave me the power, I just wanted to see what it felt like to use it
18:34 <@AviMarcus> btw: /^ops?\s*(please|plz|prx).*/i
18:34 <@tuhoojabotti> almost all opped
18:34 <@AviMarcus> erm
18:34 <@gf3> dominictarr: Felt pretty good, non?
18:35 <@AviMarcus> erm it's /^ops?\s*pl(ease|z|x).*/i
18:35 <@tuhoojabotti> gf3: Shall we continue?
18:35 <@gf3> WE SHALL, INDEED
18:35 <@mmalecki> okay, let's get the "ops pls" bot back up
18:35 -!- slurp was kicked from #Node.js by _root_ [You are banned]
18:35 <@gkatsev> but why start from the beginning again?
18:35 <@wesleyh> argh
18:35 <@RLa> someone hacking again
18:35 <@jrajav> So, are we meant to understand this?
18:35 <@AviMarcus> all done??
18:35 <@gkatsev> RLa: no hacking here.
18:35 <@gf3> The future is now, people
18:36 <@tuhoojabotti> hmm
18:36 <@tuhoojabotti> it's done
18:36 <@Gregor> RLa: It's not hacking, it's just people being doofy.
18:36 <@AviMarcus> you're done.
18:36 <@gkatsev> RLa: ryah has just made them go crazy
18:36 <@gf3> Non-blocking, async OPS
18:36 <@leonardo> uhm
18:36 <@tuhoojabotti> Yes.
18:36 <@leonardo> what now
18:36 <@jrajav> gf3: LOL
18:36 <@RLa> oh
18:36 <@gkatsev> lol
18:36 <@riven> I wanna be special :(
18:36 -!- AviMarcus changed the topic of #Node.js to: http://nodejs.org | Node.js is a JavaScript platform for fast, scalable network applications. | Node.js is kosher and halal, made of 100% pure rainbows; it is scripting beyond your wildest dreams of avarice. | Type "ops please" for ops.
18:36 <@leonardo> WITH GREAT POWERS COMES GREAT RESPONSIBILITIES
18:36 <+riven> Better.
18:36 <@wink_> careful or we're gonna see a slew of python/js/erlang benchmarks to see which language's libraries can op an entire channel the fastest
18:36 <@dominictarr> from where I am sitting it looks like dRiN isn't an op.
18:36 <@smathy> riven, drop yourself then.
18:37 <@gkatsev> AviMarcus: is it ops please or op plz?
18:37 <@RLa> 3 people without ops! they are special
18:37 <@smathy> *deop - spell checker--
18:37 <@AviMarcus> gkatsev, var regex = /^ops?\s*pl(ease|z|x).*/i;
18:37 <@mmalecki> AviMarcus: hey, is your bot running?
18:37 <@gkatsev> AviMarcus: ah, cool.
18:37 <@gkatsev> is it ryan_opper ?
18:37 <@AviMarcus> yeah. ryan asked for an irssi script but hey, I wrote a node bot.
18:38 <@mmalecki> AviMarcus: is it deployed somewhere? let's deploy it to nodejitsu maybe?
18:38 <@AviMarcus> no just on one of my server
18:38 <@riven> What's with the useless .*
18:38 <@riven> omg
18:38 <@mmalecki> AviMarcus: okay, good enough :)
18:38 <@AviMarcus> riven, you can write "ops plz!!!!"
18:38 <@leonardo> i invited some friends if you folk don't mind :)
18:38 <+riven> AviMarcus: you don't need .* for that
18:39 <@AviMarcus> oh. true.
18:39 <@AviMarcus> 'cause I didn't put a $ at the end
18:39 <@RLa> fancy
18:40 <@Gregor> ryan_opper ought to support “bans plz” too.
18:40 <@nail_> opplx
18:40 <@AviMarcus> Gregor, feel free to add it: https://gist.github.com/3146678
18:40 <@Gregor> Pff
18:41 <@AviMarcus> I wonder if npm irc support on-join.
18:42 -!- Gregor changed the topic of #Node.js to: http://nodejs.org | Node.js is a JavaScript platform for fast, scalable network applications. | Node.js is kosher and halal, made of 100% pure rainbows; it is scripting beyond your wildest dreams of avarice. | Type "opplxshutzotheich" for ops.
18:42 <@AviMarcus> lol.
18:43 < qmx> opplx
18:43 <@gkatsev> lol
18:43 <@qmx> ryan_opper: <3
18:44 < hmli> ops plz
18:44 <@AviMarcus> do we want auto-op on join?
18:44 <@leonardo> why not
18:45 <@wink_> cant you setup chanserv to do it?
18:45 <@Gregor> Hahah, set access auto-op on .*
18:47 <@AviMarcus> lol I can set it to auto-reop
18:48 <+riven> reop?
18:48 <@AviMarcus> if someone is de-opped, it can op them.
18:49 <@mAritz> hm, i'm trying to draw imageData into a node-canvas context and then save it as a file. it kind of works, but in some areas it doesn't take my real pixel values but something else (255, 255, 255, 255)... could anyone help me with that?
18:49 <+riven> I'll kill you.
18:49 <@teadict> leonardo: My name is Leonardo !
18:49 <@teadict> Why are we all @ed?
18:49 <+riven> I'm speshul, I only have voice.
18:49 <@gkatsev> no, dont auto-reop
18:49 <@gkatsev> teadict: it's more fun that way
18:49 <@AviMarcus> I'm not gonna auto-op either
18:49 <@teadict> I guess
18:49 <@AviMarcus> nah riven I'd only do it if you didn't do it to yourself.
18:49 <+riven> aaah
18:50 <@leonardo> teadict: NO! MY name is Leonardo!
18:51 <@mw__> woho, first time in YEARS I'm op! :D
18:52 <@leonardo> just kickban us all! :D
18:52 <@AviMarcus> rofl. we can play a quiet game. If you talk, you get de-opped.
18:52 <+riven> ops plz
18:52 <@riven> muahahaha
18:52 -!- isaacs changed the topic of #Node.js to: hypertext transfer protocol double-dot slash slash node javascript point organization
18:53 < mw__> hahaha
18:53 -!- isaacs changed the topic of #Node.js to: http://nodejs.org | hypertext transfer protocol double-dot slash slash node javascript point organization
18:53 < mw__> well, it was fun while it lasted!
18:53 <@isaacs> mw__: i occasionally set it to something boring to inspire others to make it more interesting
18:53 <@gkatsev> just opplx
18:53 <@AviMarcus> hey isaacs -- does package.json allow comments? // nor # seem to work.
18:53 <@isaacs> mw__: otherwise the rainbows halal thing will stick around forever and get boring
18:53 <@isaacs> AviMarcus: no, it's JSON, not JavaScript.  but you can do { "//": "this does nothing!" }
18:54 <@isaacs> AviMarcus: I promise that npm will never do anything interesting with "//" fields
18:54 <@AviMarcus> nice! ;)
18:54 < mw__> isaacs: haha good stuff!
18:54 <+riven> Why does JSON not allow comments again?
18:54 <@AviMarcus> if you specify the same key multiple times does that break something?
18:54 <+riven> Never made sense to me
18:54 <@isaacs> AviMarcus: nah, it's fine
18:55 <@isaacs> riven: allegedly it's because other languages could not use them responsibly, and it led to non-interoperable bullshit
18:55 <+riven> mmmhm right
18:55 <@isaacs> like #!JSON-preformatting-command xyz
18:55 <@isaacs> which is clearly not good for javascript
18:55 <@isaacs> riven: after all, different languages have different commenting mechanisms
18:55 <@isaacs> <!-- is still a valid line-comment in js, i believe
18:56  * riven blinks
18:56 <@mmalecki> yeah, it is :)
18:56 <+riven> Crazy.
18:56 <@mmalecki> I kind of lulzed when I got to know
18:57 <@isaacs> yep
18:57 <@isaacs> $ cat c.js 
18:57 <@isaacs> <!-- totally valid. -->
18:57 <@isaacs> console.log('foo')
18:57 <@isaacs> $ node c.js 
18:57 <@isaacs> foo
18:57 <@isaacs> we should start using that all over.
18:57 <@isaacs> people are starting to get bored with the whole comma-first fights
18:57 <@isaacs> arrow-comment fights would be AWESOME
18:58 <@mmalecki> isaacs: change all comments in node core to arrow comments
18:58 <@wink_> lol
18:58 <@AviMarcus> isaacs, what's the common consensus? it sure makes it easier to add/remove entries, but it kinda messes with formatting in some editors
18:58 <@wink_> do itttt
18:58 < mw__> haha, yeah... I could see some interesting nerd fight's on that subject!
18:58 <@wink_> isaacs let me know when to make the hn post
18:59 <@gkatsev> it can be next years april fools commit, or something.
18:59 <@gkatsev> or just a regular commit
19:00 <@isaacs> mmalecki: btw, does node-read work for you now?
19:01 <@mmalecki> isaacs: didn't test yet, on a call
19:04 <@AndreasMadsen> mmalecki: are we doing a social experiment again?
19:05 <@maxogden> isaacs: time to propose fat arrow comment syntax
19:05 <@isaacs> maxogden: lol!
19:06 <@AndreasMadsen> isaacs: why are everybody ops
19:06 <@isaacs> <!--== // THIS IS EXTRA COMMENTED
19:06 <@AviMarcus> eeeeek nodejitsu has a heck of a lot of dependencies
19:06 <@gkatsev> <-- for single line comments, <== for multi-line comments
19:06 <@AviMarcus> I feel violated.
19:06 <@isaacs> AndreasMadsen: because node.js loves you
19:06 <@gkatsev> s/</<!/
19:07 <@maxogden> <!foo== now foo is a global and this sentence is the value ==>
19:07 <@hillerstorm> mind = blown
19:07 <@AndreasMadsen> isaacs: I would never have thought that possible
19:07 <@hillerstorm> §r
19:08 <@AndreasMadsen> node.js: will you marry me
19:09 <@AndreasMadsen> or are you with someone else?
19:09 <@maxogden> we do not support marriage between man and machine, only civil union
19:09  * AviMarcus loves his new angularjs + restify API
19:09 < ottorickshaw> lol
19:09 < ottorickshaw> i have a noob question 
19:09 <@AndreasMadsen> maxogden: heartbreaker!
19:10 <@maxogden> you can always go cyborg to take advantage of legal loopholes
19:10 < chanced> quick mongoose question: is there anyway to get the name/type of the schema?
19:10 < chanced> i'm not seeing that as a readily available field in any fashion
19:10 < chanced> but hoping i'm missing something
19:11 <@AndreasMadsen> maxogden: I don't want a runaway relationship with node, it is to complicated and node.js hates complexity.
19:12 <@maxogden> haha
19:15 <@AviMarcus> ok so that's on nodejitsu
19:15 <@AviMarcus> uh oh.
19:15 <+AviMarcus> ops prx
19:15 <+AviMarcus> ops plx
19:15 <@AviMarcus> yeah. that's not cool.
19:16 <@mmalecki> AviMarcus: redudancy!
19:16 <@jcrew> web scale too please
19:17 < ottorickshaw> is it possible to make node.js part of a video file (i will have to encode it in a new way) so that the video file can communicate back with analytics when it is not viewed in a flash player on the web 
19:18 < chanced> ottorickshaw: node.js is a server-side framework
19:19 <@AviMarcus> mmalecki, jcrew it seems crude that they are dumbly redundant... but that's more effort than I'm currently interested in doing..
19:19 < ottorickshaw> yup i understand but would i be able to use it not for server side processing but to stick it with an asset and program the encoding part so that node.js is part of a video file
19:32 <@owen1> i want to write an api endpoint that will allow uploading of files. should i use formidable or just the built-in request/response objects?
19:34 <@CIA-93> node: isaacs v0.8 * r0a0002b / (137 files in 26 dirs): npm: Upgrade to 1.1.45 - http://git.io/QH5nxg
19:39 < qubit[01]> anyone use bucket' for S3 files ?  I'm having a hard time writing binary files, text files are fine, but no matter what encoding I try it comes up invalid png format.
19:39 < qubit[01]> they upload fine, when I try write the files to local disc, tis failing, anyone know what encoding the amazon s3 files come back as ?
19:39 <@chilts> qubit[01]: which S3 library are you using?
19:40 < qubit[01]> bucket
19:40 <@chilts> everything to and from S3 is binary, so you're probably encoding a buffer incorrectly
19:40 < qubit[01]> chilts: do you have any sample code you could post ?  I'm not really doing much at all
19:41 <@chilts> I don't use bucket, I use (and wrote) AwsSum : http://search.npmjs.org/#/awssum
19:42 <@chilts> example code here : https://github.com/appsattic/node-awssum/blob/master/examples/amazon/s3/put-object-streaming.js
19:42 <@chilts> that shows how to stream a file upload
19:43 < qubit[01]> hmm
19:45 <@chilts> qubit[01]: wow, that project hasn't been updated in 11 months
19:45 < qubit[01]> yeah :/
20:00 < vandenoever> what is the preferred inheritance method in node?
20:01 <@jcrew> vandenoever: i always use util.inherits
20:02 <@mAritz> ok, so i have narrowed down my problem into 2 other problems. one: is there any way in node-canvas to get the pixel data without the alpha channel applied to the rgb pixel values?
20:02 < vandenoever> i guess that's node specific
20:02 <@jcrew> vandenoever: http://www.crockford.com/javascript/inheritance.html
20:03 < vandenoever> jcrew: yeah, i am accustomed to the closure way
20:05 <@jcrew> vandenoever: ?, that second link doesn't seem like a closure
20:05 < vandenoever> jcrew: ah, that method does not work very well with closure compiler which i use for type checking
20:06 <@jcrew> type checking?
20:06 < vandenoever> jcrew: yes, a new concept for most javascript developers ;-)
20:06 < vandenoever> https://developers.google.com/closure/compiler/docs/js-for-compiler
20:06 < vandenoever> it really helps to find problesm
20:08 <@jcrew> i can't see myself ever using that, i also don't write code for a living :)
20:09 < vandenoever> jcrew: i do and i do
20:10 <@jcrew> why is that useful?
20:10 < vandenoever> jcrew: to catch errors at compiletime
20:11 <@tbranyen> i'd opt-into some type checking
20:11 < vandenoever> jcrew: do you use jslint?
20:11 < lohkey> you can kind of get type checking with the google closure compiler
20:11 <@jcrew> i mostly use node to perform data warehousing and statistics 
20:12 < lohkey> node is good for hacking together service oriented architectures really fast
20:13 < vandenoever> i like node because i want to share code between server and browser
20:13 < lohkey> never had much success with that
20:14 < lohkey> the only time i have had success with that was sharing templates
20:14 < coderarity> vandenoever, might want to check out flatiron then
20:14 < lohkey> sharing more general code though has been a bit of a pipe dream for me
20:14 <@jcrew> does the compiler insert 'instanceof' type crap or does it just let you know ??
20:15 <@jcrew> or am i misunderstanding what you mean by type checking
20:15 < lohkey> jcrew: google closure does it all at "compile" time
20:16 <@jcrew> i understand that part, but i don't understand how it tells you that you're comparing a string to an int so to speak, or does it fix it in your script?
20:16 <@jcrew> or is that not what is meant by type checking
20:16 <@AviMarcus> jcrew, if you saw that page, you need to tell it what it is
20:16 < hatch_> vandenoever, I do that with YUI 3 & Express
20:16 < lohkey> jcrew: jsdocs
20:16 <@jcrew> ahh okay got ya
20:16 < lohkey> so it forces you to do inline documentation too
20:17 <@jcrew> yea that turns me off to that even more 
20:17 <@Owner> wow...i dont know whats wrong but npm is faulting my kernel recursively
20:17 <@Owner> well ubuntu's kernel....why am i not suprised at all
20:17 <@jcrew> thanks for the info, though 
20:32 <@AviMarcus> how do people do unit testing on restify stuff? Do they have the restify routes be a wrapper for their modules?
20:35 <@Owner> wow, 
20:35 <@Owner> 764 ops!
20:35 <@AviMarcus> 99 unopped :(
20:36 <@Owner> apparently we are so awesome
20:36 <@Owner> that...this works...
20:36 -!- AviMarcus changed the topic of #Node.js to: http://nodejs.org | hypertext transfer protocol double-dot slash slash node javascript point organization | type "ops plz" for ops
20:37 < coderarity> i always miss the op party
20:37 <@AviMarcus> so.. how do you unit test a rest API? and use it from other node scripts? make restify just a wrapper for the core code?
20:37 <@AviMarcus> coderarity, "ops plz"
20:37 < coderarity> ops plz
20:37 <@coderarity> :D
20:38 <@context> hahaha
20:38 <@Owner> it makes no sense
20:38 < filmaj> is this the place to ask npm questions ?
20:38 <@context> err fuck
20:38 <@AviMarcus> filmaj, you can ask.
20:38 < filmaj> cool.
20:38 < filmaj> in my package json i have "scripts":{"install": "./scripts/postinstall.js"}
20:38 <@AviMarcus> I can't guarantee any helpful responses though...
20:38 < context> filmaj: why is that a script?
20:38 < context> and the worst name for a script ever.
20:39 <@AviMarcus> case in point.
20:39 < filmaj> context: im new :D
20:39 < filmaj> im one sentence into my description and alreayd getting called out haha
20:39 < context> thats like going to a car dealer and responding with "i want a car" to every question
20:39 <@Owner> filmaj~# are you wearing makeup?
20:40 <@AviMarcus> filmaj, I presume you want a script to run after all the files are copied in?
20:40 < filmaj> yeh after install is done
20:40 < context> i didnt know it was this type of party
20:40 < filmaj> im testing shit out
20:40 <@AviMarcus> wtf? can we stop bashing the newbie please.
20:40 < context> do i want to know what postinstall does
20:40 < filmaj> literally this is it: #!/usr/bin/env nodeconsole.log('mhmm');
20:40 < filmaj> er
20:40 < filmaj> you get it
20:40 < filmaj> nothing in there
20:40 < filmaj> console log
20:40 < filmaj> i want to see it run is all :)
20:40 < filmaj> what should i name it / put in the install property under scripts in npm
20:40 < filmaj> to make it run :D
20:41 < context> scripts dont get ran unless you manually run them
20:41 <@Owner> we've got a runner!
20:41 <@AviMarcus> I only see preinstall in the docs
20:41 < filmaj> from npm docs: "install, postinstall: Run AFTER the package is installed."
20:41 < filmaj> http://npmjs.org/doc/scripts.html
20:41 < context> :/
20:41 <@AviMarcus> OK so... what's the problem?
20:41 < filmaj> output is:
20:41 < filmaj> npm WARN skipping, cannot run in /Users/fil/src/cordova-client cordova@0.0.2 ./scripts/postinstall.js
20:41 <@npmbro> filmaj: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20WARN%20skipping
20:42 <@Owner> does anyone verify what is in an npm package
20:42 < context> filmaj: {install: "node scripts/postinstall.js"}
20:42 <@Owner> or can you completely hose your system 
20:42 <@AviMarcus> Owner, if you're not doing -g then you may not be running as root
20:42 <@AviMarcus> but still.
20:43 < context> filmaj: im guessing postinstall.js is NOT executable. so when it tries to run "./scripts/postinstall.js" it fails.
20:43 <@timeturner> lol @ topic
20:43 < filmaj> context: it is executable
20:43 < context> put node in front of it anyway
20:43 < filmaj> and i tried both with node and without in front of the .js file
20:43 <@Owner> AviMarcus~# but still all your home directory files could be deleted
20:43 <@AviMarcus> is that the right path to node?
20:43 < filmaj> and i tried with and without sudo
20:43 < filmaj> :(
20:43 < filmaj> yeh
20:43 < filmaj> the "test" script has the exact same thing
20:43 < filmaj> node blah
20:43 < filmaj> and it runs well!
20:43 <@AviMarcus> indeed Owner anything with your access. It's like PPAs -- the owner can kinda screw you over.
20:44 <@Owner> PPA?
20:44 <@AviMarcus> ubuntu private package manager
20:44 <@creationix> except with ppa you have to manually enable the repo
20:44 <@owen1> i want to create endpoint for uploading a file. i use formidable but the 'file' event never being emited. any idea why? http://pastebin.com/sMefhfsf
20:44 <@creationix> everyone has access to all of npm
20:44 <@Owner> im sure thats a charm
20:44 <@AviMarcus> creationix, you have to do that to install a PPA..
20:44 <@AviMarcus> erm
20:44 <@Owner> i didnt know ubuntu hired a programmer
20:44 <@AviMarcus> creationix, you also choose to install an npm package
20:44 <@Owner> or maybe he is working for free and they are just taking his code
20:45 <@Owner> thats probably it
20:45 <@AviMarcus> oh you are comparing to the normal repo.
20:45 <@AviMarcus> filmaj, it's the exact same setup for test and for install?
20:46 < filmaj> rgr
20:46 < filmaj> well
20:46 < filmaj> i mean they point to different scripts
20:46 < filmaj> test points to jasmine
20:46 < filmaj> install points to a one-liner with a console.log in it
20:46 <@Owner> so npm is like the android marketplace wild wild west
20:46 <@Owner> good to know
20:46 < filmaj> running npm 1.1.0-2
20:46 <@nlf> that's a good way of looking at it
20:46 < filmaj> node 0.6.8
20:47 < context> android market place is the apple app store wild wild west.
20:47 < filmaj> maybe i should try running node 0.8 ?
20:47 < filmaj> might as well
20:47 <@AviMarcus> 0.8.3!
20:47 <@Owner> the Apple Macintosh Application Store for Applications and Apps in a Walled Garden Approach!
20:49 <@coderarity> lol i don't think people realize that app stands for application
20:49 < blazes816> codearity: they really don't.
20:49 < blazes816> it's unbelievable
20:50 <@coderarity> it's hilarious
20:50 < blazes816> people constantly inform me that apple invented the word app
20:50 < vandenoever> prototype of iphone was called applet
20:51 < context> coderarity: i could be "applicant"
20:51 < context> coderarity: or Appalachian
20:51 < context> goin to the app mountains guys bbiab
20:51 < blazes816> i have a feeling applet wouldn't have gone over too well
20:51 < filmaj> if im upgrading/downgrading node should i be upgrading/downgrading npm as well?
20:51 < timeturner> -
20:51 < chanced> apple invented applications and thus apps… /s
20:51 < timeturner> ops plz
20:51 <@Owner> The Applecation of the nation....nuke plz
20:51 < filmaj> (probably noob question)
20:51 < context> blazes816: we dont speak of such things here
20:52 < context> filmaj: upgrade node, then upgrade npm if there is an update
20:52 < context> filmaj: npm update -g
20:52 < filmaj> cool
20:52 < filmaj> thanks context 
20:52 <@Owner> NUKE PLZ
20:52 < timeturn> ops plz
20:52 <@Owner> no
20:53 <@jocafa> *sigh* when windows 8 comes out, let's all collectively drop support for IE8 and lower. deal?
20:53 <@Owner> that guy fucks shit
20:53 <@mAritz> tjholowaychuk: do you know how i can get the true rgb pixel value of rgba imageData that has a non-255 alpha channel? is it some simple operation like r*alpha or something?
20:53 <@mAritz> (node-canvas)
20:53 <@coderarity> jocafa, can't because XP users will still exist
20:53 < tjholowaychuk> mAritz yeah they're pre-multiplied
20:54 <@mAritz> tjholowaychuk: so, unless the alpha channel is 0 there should be a way to get the original value, right?!
20:54 <@coderarity> jocafa, i don't know that XP will ever die now
20:54 <@jocafa> it needs to.
20:54 < tjholowaychuk> mAritz yup http://en.wikipedia.org/wiki/Alpha_compositing
20:54 < d14a248> help, i received a cloning error during installation of node
20:54 <@timeturner> why do people want to stay on XP?
20:54 <@mAritz> tjholowaychuk: awsome, thanks :)
20:55 <@Owner> timeturner~# why dont people upgrade to windows 8 ?
20:55 <@mAritz> tjholowaychuk: oh my god. i think i'm too stupid to understand that :(
20:55 <@jocafa> because it's expensive for large companies to upgrade anything at all
20:55 <@timeturner> yeah I guess it goes both ways
20:55 <@coderarity> it's over a decade old but people just can't move on lol
20:56 <@timeturner> it's kind of like sticking to DOS or OSX 1 or something because it's "confortable"
20:56 <@timeturner> comfortable*
20:56 <@Owner> well recompiled all of node
20:56 <@coderarity> timeturner, because people are emotionally attached to their operating system
20:56 <@Owner> [ 2281.606110] Pid: 18944, comm: npm Tainted: G        W    3.2.0-25-virtual #40-Ubuntu
20:56 <@Owner> same shit
20:56 < tjholowaychuk> mAritz each component just does has * alpha applied
20:57 < tjholowaychuk> r * alpha, b * alpha etc
20:57 <@timeturner> fancy http://en.wikipedia.org/wiki/Painter%27s_algorithm
20:57 <@coderarity> timeturner, tbh i never understood why people can't upgrade stuff like they are supposed to
20:58 <@Owner> either ubuntu or amazon ec2 is a piece of shit
20:58 <@timeturner> yep, me neither
20:58 <@jocafa> i posit that these users aren't the ones we want to support anyway. the cost of supporting them is far greater than the lost revenue
20:58 <@jocafa> </opinion>
20:58 <@Owner> err either both
20:58 <@Owner> [ 2281.606104] WARNING: at /build/buildd/linux-3.2.0/arch/x86/xen/multicalls.c:129 xen_mc_flush+0x1a3/0x1b0()
20:58 <@jocafa> also: screw 'em. they need a punch in the gut anyway.  ¬¬
20:58 <@Owner> [ 2281.606110] Pid: 18944, comm: npm Tainted: G        W    3.2.0-25-virtual #40-Ubuntu
20:58 <@Owner> [ 2281.606115]  [<c0692d1e>] ? printk+0x2d/0x2f
20:58 <@mAritz> tjholowaychuk: so, just imgdata.data[offset]/imgdata.data[offset+3] = r value? that's far easier than i suspected from that wiki page :D
20:59 <@timeturner> I'm so glad that the user-agent is sent in the headers
20:59 <@timeturner> otherwise I wouldn't be able to send a "No IE < 9" reply
21:00 <@timeturner> or I would have to send the whole page and wrap it in lt ie 6 or something
21:00 <@timeturner> lt ie 9*
21:01 <@Owner> w/e....ill try 64 bit
21:01 <@Owner> maybe its a combination of 32 bit, ec2, ubuntu, and latest node all fucking u p together
21:02 <@jocafa> i wish google chrome frame would spread virally.  (not in the media way. in the virus way.)
21:02 <@maxogden> haha
21:06 <@timeturner> yeah
21:07 <@timeturner> like an aggressive virus
21:08 <@jocafa> it's not malware… it's palware.
21:08 <@jocafa> heyooooo
21:14 <@owen1> i want to use node side-by-side ruby, on the same page. is iframe my only option?
21:14 <@owen1> with ruby
21:15 <@jcrew> owen1: you can request information from a node server and inject it into ruby, that's another option
21:17 <@owen1> jcrew: ok. by inject u mean into the dom using socket.io?
21:17 <@Owner> can you not use ajax to both?
21:18 <@jcrew> what Owner is saying, meaning in ruby you make an web service call to your node stuff and get the information you need and continue with ruby or yea just inject it into the dom
21:19 <@Owner> the real question is what are you trying to do and why
21:19 <@Owner> lol
21:19 <@jcrew> Owner: reality gets in the way of dreams
21:20 <@Owner> |NOT THE AMERICAN DREAM
21:20 < benvie> https://github.com/appjs/appjs that
21:21 <@Owner> OOH APPLE THING??!
21:21 < benvie> https://github.com/appjs/appjs/raw/master/examples/chrome-in-node-repl.jpg
21:21 <@Owner> what am i looking at
21:22 < addisonj> is app.js going to include some common ui stuff? seems like that is what it would need to be a real alternative to native apps
21:22 < benvie> what jcrew was asking for it sounded like
21:22 < benvie> or you
21:22 < milani> addisonj, only menu and tray icon
21:22 < benvie> whatever
21:22 < milani> addisonj, since everything else is possible using html
21:23 < addisonj> hrm... seems like a ui-toolkit would be helpful
21:24 <@Owner> let us re-invent one
21:24 < benvie> that's what the html5 and the DOM and all that stuff IS
21:25 <@jcrew> benvie: i didn't ask for anything
21:25 < benvie> it was owner I take it
21:25 <@owen1> jcrew: Owner : upload huge csv file, inspect each row, insert into db and spits some info about some rows to the browser. i got a rails app already, but i think uploading big files is easier with node.
21:25 < benvie> I just got in halfway through the convo
21:25 <@gkatsev> benvie: how many times have you linked that jpg over the last couple of day? 100? 1000?
21:25 <@gkatsev> lol
21:25 < benvie> yeah
21:25 < benvie> every time I see someone mentioned dom in node
21:25 < benvie> I link it
21:26 < benvie> people ask about it a lot =D
21:26 <@gkatsev> just write an irssi script
21:26 <@Owner> why didnt they use comic sans
21:26 <@gkatsev> whnever it sees 'dom' mentioned in this channel, it would paste the link
21:26 < benvie> might as well
21:26 <@gkatsev> yep
21:26 < milani> lol
21:26 <@Owner> owen1~# uhhh i see
21:26 < benvie> I'm going to keep doing it until people realize what it is =D I don't think they have yet
21:27 < benvie> it's the whole dom in node
21:27 < benvie> real one
21:27 <@gkatsev> no fake or imitiation doms here.
21:27 <@Owner> google is really going to kill the PC arent they
21:27 <@Owner> fuck they really are going to do it
21:28 <@coderarity> Owner, how?
21:28 <@coderarity> Owner, android?
21:28 <@Owner> mobile, cloud, and html5
21:28 <@gkatsev> coderarity: no, glass, dummy. :P
21:28 <@jcrew> owen1: i'd do as Owner said and use ajax for it, you can reverse proxy an /upload dir to node and not worry about it
21:28 <@Owner> only the programmers will have real computers everyone else will have Apple like devices
21:29 <@AviMarcus> Owner, indeed! I can't imagine coding on a tablet.
21:29 <@gkatsev> AviMarcus: i've done it. It was the asus transformer tablet, though.
21:29 <@coderarity> Owner, nah eventually developers will move
21:29 <@Owner> http://boingboing.net/2012/01/10/lockdown.html
21:29 <@gkatsev> and I was sshed in to a linux box and was using vim.
21:29 <@Owner> move to what?
21:30 <@Owner> coding for devices no one has anymore?
21:30 <@coderarity> you'll get used to it after it's good
21:30 <@coderarity> Owner, coding on a tablet
21:30 <@owen1> jcrew: i am not sure i understand the ajax+reverse proxy approach. does it mean to use nginx to route requests to /upload to my node?
21:30 <@Owner> ill never own a tablet
21:30 <@Owner> what a joke
21:30 <@coderarity> gotta give me time learning Dvorak :P
21:30 <@AviMarcus> owen1, I do that because I currently serve my old site via nginx
21:30 <@AviMarcus> coderarity, colemak!
21:31 <@AviMarcus> owen1, you using apache or nginx?
21:31 <@gkatsev> abcdef keyboard is clearly the best one.
21:31 < kinginky> when you use console.dir on an array or object, it prints out the basic details, but for nested objects it doesn't (just says [Function] or [Object])
21:31 <@owen1> AviMarcus: oh. so my form is in ruby, but /upload hits my node server
21:31 < kinginky> is there a way to display deeper nesting?
21:31 <@coderarity> Owner, people will never have personal computers either
21:31 <@AviMarcus> owen1, it does, or you want it to?
21:31 <@Owner> coderarity~# i meant sheeple
21:31 <@AviMarcus> kinginky, is the object alone in the console.log or you put text with it?
21:31 <@owen1> AviMarcus: i want to have my file upload using node
21:32 <@AviMarcus> owen1, you using apache or nginx?
21:32 <@AviMarcus> afaik ruby doesn't have it's own built in server..
21:32 < kinginky> AviMarcus: it's alone and it's a console.dir not log. should i try log?
21:32 <@owen1> AviMarcus: nginx
21:32 <@AviMarcus> oh you already tried console.dir. dunno.
21:32 < kinginky> log has the same result
21:32 < kinginky> damn, ok
21:32 <@AviMarcus> k owen1 sec
21:32 < kinginky> i cant just manually dir the sub-objects
21:32 < kinginky> thx
21:32 <@Owner> coderarity~# there is a lot that is going to happen that you would say will never happen
21:32 < kinginky> can***
21:32 <@gkatsev> kinginky: what browser/console are you using?
21:33 <@coderarity> Owner, better to embrace the inevitable and try to fix the worst parts while yet have a chance then just deny it
21:33 <@coderarity> while you have a chance*
21:33 <@Owner> coderarity~# ok prepare for ipv6 being shoved up your ass
21:34 <@gkatsev> welcome your ipv6 overlords
21:34 <@Owner> going to need a nice 'crisis' to get that one moving
21:34 <@coderarity> Owner, but statistically mobile is the future
21:34 <@Owner> an internet 9/11 perhaps
21:34 <@gkatsev> Owner: like not being able to put more devices online?
21:34 <@Owner> the future of tracking populations
21:34 <@coderarity> i want to not use NAT anymore :\
21:34 <@AviMarcus> owen1, https://gist.github.com/3172823
21:35 <@AviMarcus> that's my current config for /nodejs to a running process on :8000
21:35 <@Owner> i dont care eitherway
21:35 <@AviMarcus> and it strips the /nodejs/ prefix when it proxies it
21:35 <@Owner> it will just be handled in the worst way possible :p
21:35 <@gkatsev> the problem right now is bufferbloat
21:36 <@owen1> AviMarcus: so /nodejs/upload will hit /upload on your node server?
21:36 <@AviMarcus> yep!
21:36 <@Owner> so how many ips are in ipv6?  67 trillion or something?
21:36 <@Owner> oh good, thats 32 trillion for MIT
21:36 <@owen1> AviMarcus: awesome!
21:36 <@gkatsev> Owner: you could have an ip address for each hair on your body.
21:37 <@Owner> im fully shaved
21:37 <@gkatsev> lol
21:37 < yrfg> so i am using express redirect. "/go". the problem is since the node server is on port 777, and and i use nginx as a reverse proxy, it redirect it domain.com:777 instead of the regular redirect. Setting basepath to "http://domain.com" resolves in domain.com:777/domain.com/go. Anything else besies using absolute redirects in each redirect?
21:37 <@gkatsev> Owner: each cell in your body.
21:37 < tjholowaychuk> yrfg enable "trusy proxy"
21:37 < tjholowaychuk> trust*
21:37 <@AviMarcus> owen1, just remember this is a proxy -- nginx has to wait for the response and then send it back.
21:38 <@AviMarcus> so there's a tad of overhead to that.
21:38 <@Owner> gkatsev~# im one giant cell
21:38 <@gkatsev> lol
21:38 < tjholowaychuk> yrfg also #express
21:38 <@owen1> AviMarcus: wait for what response?
21:39 <@AviMarcus> owen1, the upload is TCP so there's ACKs or whatever.. there's data going both ways in an upload
21:39 <@Owner> i upload via udp spray and pray method
21:40 <@Owner> coderarity~# http://youtu.be/HUEvRyemKSg
21:40 <@jcrew> Owner: lol
21:41 <@coderarity> Owner, tl;dw
21:41 < yrfg> tjholowaychuk: awesome thanks. is there any doc on this feature?
21:41 < wannabe1> ops plz
21:41 < tjholowaychuk> yrfg i'll have the new stuff up tonight i think
21:42 <@owen1> AviMarcus: interesting. i hope it's worth doing that
21:42 <@Owner> judging from github...90% of coders code things to help coders code
21:42 <@Owner> 10% do things
21:42 <@AviMarcus> Owner :)
21:42  * coderarity actually watches it anyways
21:42 <@owen1> AviMarcus: what stuff do u upload?
21:42 < milani> Owner, lol.
21:42 <@Owner> i dont upload anything
21:42 <@coderarity> Owner, yes!
21:42 <@AviMarcus> Owner, although, you're seeing the public code -- the code people usually write for stuff is business coding that can't be published
21:43 <@AviMarcus> owen1, I've reverse-proxying my API for same-origin. I should probably just switch to jsonp though.
21:43 <@AviMarcus> s/'ve/'me/
21:43 <@Owner> AviMarcus~# backup scripts dont count
21:44 <@owen1> AviMarcus: with jsonp, you will be able to place your node server on a different machine?
21:44 <@jcrew> owen1: yes
21:45 <@owen1> jcrew: and avoid the performance hit of the reverse proxy?
21:45 < tjholowaychuk> isaacs is there an $ npm ls-files or similar?
21:45 <@AviMarcus> yeah.. can you don POSTs and PUTs with jsonp though?
21:45 < tjholowaychuk> to make sure everything you wanted ignored
21:45 < tjholowaychuk> is ignored
21:45 <@Owner> performance hit of nginx?  compared to ruby????
21:45 <@isaacs> tjholowaychuk: i usually do `npm cache add .` and then `npm cache ls <pkgname>`
21:46 <@jcrew> owen1: yes but not in this case
21:46 <@isaacs> tjholowaychuk: a ls-files would be pretty nice, though.  send me a pull req :)
21:46 < tjholowaychuk> isaacs ok cool that works
21:46 <@owen1> AviMarcus: is it possible to use jsonp with the file upload scenario?
21:46 <@jcrew> owen1: probably not
21:46 <@isaacs> tjholowaychuk: you could use a npm-fstream packer, and just listen on the entry events
21:46 < timeturner> who uses jsonp nowdays?
21:47 <@isaacs> tjholowaychuk: the next optimization level would be to have it abort every non-dir, so that it doesn't read the files.
21:47 <@owen1> timeturner: how would u call node server from your html that is served by a ruby server?
21:47 <@AviMarcus> erm owen1 can't you just post to a different URL/port? or you want async uploading?
21:47 <@Owner> isaacs~# can the npm registry client do a general search ?
21:47 <@isaacs> tjholowaychuk: or you can `rm -f *.tgz; npm pack ; tar tvzf *.tgz ; rm -f *.tgz`
21:48 <@isaacs> Owner: the search is implemented in npm itself.  the registry client just fetches the index
21:48 <@isaacs> and updates it if it already has the index cached
21:48 <@Owner> well i made an interface for the client so i can look up packages
21:48 <@Owner> but there is no way to search for blah
21:49 <@owen1> AviMarcus: i didn't know i can post to any url i want
21:49 <@Owner> isaacs~# are you saying npm is a node module is hould also use?
21:50 <@owen1> i built api for uploading files using formidable, but the files are not in my TMP directory. any idea why? http://pastebin.com/sMefhfsf
21:52 <@jroes> any way to set default arguments for mocha?
21:52 < tjholowaychuk> jroes mocha.opts
21:52 <@jroes> you the man tjholowaychuk 
21:52 <@Owner> ok so it was 32 bit ubuntu on amazon EC2 that broke the kernel when using npm
21:53 <@Owner> 64 bit seems fine
21:53 <@AviMarcus> why are there so many testing suites... mocha, vows, nodeunit.... 
21:53 <@jcrew> testing is for suckas
21:53 <@Owner> AviMarcus~# because no one has any good ideas?
21:54 <@tjholowaychuk> why are there so many javascript server platforms!
21:54 <@Owner> there is only one!
21:54 <@Owner> Rhino!
21:54 <@AviMarcus> tjholowaychuk, there's more than one? :)
21:54 <@tjholowaychuk> rhino ftw haha
21:55 <@Owner> rhino best
21:55 <@tjholowaychuk> actually rhino was how i found node
21:55 <@Owner> vert.x > rhino!
21:55 <@Owner> http://vertx.io/
21:56 <@TooTallNate> you can't call rhino a server framework
21:56 <@TooTallNate> it's just a JS implementation
21:56 <@Owner> i woke the sleeping giant
21:57 < arpp> May I ask about Express here?
21:57 <@Owner> why dont we just rename #node.js to #express
21:57 <@tjholowaychuk> arpp #express
21:57 <@Owner> since everyone has problems with it
21:57 < arpp> tjholowaychuk: thx
21:57 < arpp> (I tried #express.js >_<)
21:58 <@Owner> am i wrong in thinking that if you are using express...then you probably shouldnt be using node in the first place
21:58 < denom> Owner, how so?
21:58 < arpp> why?
21:58 < timeturner> that doesn't make any sense
21:59 <@tjholowaychuk> Owner screw node
21:59 <@tjholowaychuk> just use libuv + c
21:59 < blazes816> screw libuv
21:59 <@owen1> libeio
21:59 <@tjholowaychuk> hell just use asm and interrupts :p
21:59 <@Owner> i highly doubt they are using ndoe so they can implement their own http server...hence they are using express
21:59 <@Owner> and hence they should just use nginx and php
22:00 < context> ...
22:00 < context> </troll>
22:00 < timeturner> lmao
22:00 < timeturner> sometimes I wish they had music playing in the irc channel
22:01 < timeturner> Connected to #node.js..."salsa!" :P
22:02 <@tjholowaychuk> you're not allowed to use node for web apps
22:02 <@tjholowaychuk> only php
22:10 < EhevuTov> ops plz
22:10 < kinginky> has anybody ever messed with the async module?
22:11 <@jcrew> yea
22:11 < kinginky> i'm trying to figure out why my async.queue stops processing.
22:11 <@jcrew> it may not like you
22:11 < kinginky> tasks are still being pushed in fine, it's just hanging on process
22:11 < kinginky> and for whatever reason, it works for the first two pushes
22:12 < kinginky> once the third comes along, it never processes anything else
22:13 <@jcrew> are your queue functions doing the callback() ?
22:13 < kinginky> yep. 
22:13 < kinginky> it wouldn't process the first few items if they didnt
22:13 <@jcrew> do you have some code to look at?
22:13 < kinginky> sure
22:13 < kinginky> one sec
22:20 < kinginky> @jcrew: i just noticed something else -- im sending these tasks to three child processes, each has an async.queue. what's happening is that it's processing the very first thing it gets, then stops
22:20 < kinginky> somehow queue.running() still returns 1
22:20 < kinginky> it thinks it's still going -- let me get the code for u
22:21 < kinginky> this is the "manager", index.js: https://gist.github.com/3173055
22:21 < kinginky> this is the "workers", lib/scout.js: https://gist.github.com/3173052
22:23 <@jcrew> which queue is failing?
22:24 < kinginky> there are two total, it's the main one (this.queue, not q)
22:24 < kinginky> i commented the q one out
22:24 < kinginky> to see if it helped
22:24 < kinginky> same result
22:25 < ryah> ops plz
22:25 <@ryah> :)
22:25 <@ryah> good job people
22:25 < timeturner> haha
22:27 <@tuhoojabotti> :D
22:27 <@jroes> .kick ryah make node more awesome
22:27 <@jroes> oops
22:28 <@ccowan> kinginky: async.queue will process the total number of concurrent workers even if you don't call the callback
22:29 <@ccowan> so if you have the concurrency set to 5 then it will execute 5 and then just hang
22:29 <@ccowan> (That's been my experiance)
22:29 < kinginky> @ccowan: that actually makes sense... is there anyway to get it going again?
22:30 <@ccowan> if you didn't call the callback() then you need to restart the process
22:30 <@ccowan> and fix the code
22:30 <@jcrew> it looks like the concurrency is set to 0 and then later to 1
22:30 < kinginky> @jcrew: that's right, it was a solution i was attempting
22:30 < kinginky> @ccowan: so if  i call the callback() it will keep processing if new jobs are pushed?
22:31 <@jcrew> it should, yes
22:31 <@ccowan> yup
22:31 < kinginky> ok is it the task callback we're talking about?
22:31 < kinginky> like push(obj, function() {})?
22:32 < styol> When utilizing the Forever module, is the watch parameter not recommended for production use? Or is there another recommended way to hot load script changes with minimal or no downtime?
22:32 <@ccowan> There are two callbacks… async.queue(function(arg, callback) { callback() }); There is the callback you pass to the async.queue and then theres the callback that get's passed to your callback
22:33 <@qbit> anyoen use winston logging to redis? and if so .. how is the query performance? 
22:33 <@qbit> like.. say if you logged all user activity on a site 
22:33 <@qbit> .. for 2 years
22:33 <@qbit> how fast would querying be? 
22:33 <@ccowan> qbit: depends on the number of users
22:33 <@qbit> say 300
22:34 <@ccowan> how much traffic do the 300 users generate?
22:34 <@jcrew> about 600
22:34 <@ccowan> As long as you have enough memory on the machine it should be fast
22:34 <@jcrew> that sounds fast
22:35 <@ccowan> Are you really going to look at logs that are older then say 30 days?
22:35 <@qbit> cool
22:36 <@ccowan> or 60 days?
22:36 <@qbit> possibly
22:36 <@ccowan> 2 years seems like overkill
22:36 <@qbit> does
22:36 <@jcrew> unless it's an ERP system
22:36 <@ccowan> jcrew: Then I wouldn't use Redis :D
22:37 <@jcrew> then redis would be the only choice for pros
22:37 <@ccowan> jcrew:  ha
22:38 < Earwig> Hi folks; trying to install, nothing too complicated - any idea what's going wrong? http://dpaste.com/774834/
22:39 <@owen1> any good packages to upload a csv using streams?
22:39 <@owen1> package
22:40 <@AviMarcus> holy cow. modern-tech fast food.. for healthy for: http://www.wired.com/business/2012/07/ff_lyfekitchens/all/
22:41 <@ccowan> qbit: Are you going to do anything interesting with your logs or are you just looking to store them centrally
22:41 <@qbit> ccowan: something interesting
22:42 <@ccowan> qbit: I'm using watson to put my logs to Graylog2
22:42 <@AviMarcus> I store CDRs/billing on my voip system indefinitely. And will keep an audit trail of changing settings related to billing. Otherwise, it's just diagnostics that usually irrelevant after a few days. If something is wrong, it gets reported soon, not at all, or can be reproduced.
22:42 <@jcrew> AviMarcus: about damn time, i hate leaving work to get food let alone staying away for 30 minutes so i don't have to eat fast food
22:44 <@owen1> AviMarcus: what do u mean by async uploading. i want to send to the browser progress of upload (and maybe some info about some rows of the csv)
22:45 <@AviMarcus> sorry, I dun really know :P
22:45 <@AviMarcus> what kind of volume is your uploading anyway? nginx reverse proxy probably isn't a big deal.
22:46 <@owen1> AviMarcus: ok. so with nginx i should be able to use socket.io to send some info back to the browser, right?
22:46 <@owen1> 30mb of csv
22:46 <@AviMarcus> it should be nearly transparent.. just instead of the remote IP it's a forwarded for IP
22:46 <@AviMarcus> 30mb of csv? How frequently to how many people?
22:46 <@owen1> AviMarcus: not many people and once every few hours
22:47 <@owen1> AviMarcus: do u think i can do that with ruby instead?
22:47 <@AviMarcus> pff. the proxy isn't a problem at all then.
22:48 <@AviMarcus> I'm sure ruby can handle it, but since I never used ruby, I dunno how hard it would be to set up or how blocking it would be.
22:48 <@CIA-93> node: isaacs v0.8 * rf4f0daa / (6 files in 4 dirs): V8: Upgrade to 3.11.10.17 - http://git.io/MTBMvQ
22:48 <@CIA-93> node: isaacs v0.8 * r2c48766 / deps/v8/build/common.gypi : v8: Reapply floating patches - http://git.io/lLIL0Q
22:48 <@CIA-93> node: isaacs v0.8 * re4c9c9f / (3 files in 2 dirs): readline: Remove event listeners on close - http://git.io/47Dl8A
22:48 <@owen1> AviMarcus: ok. great. should i upload using the built-in events ('data' and 'end') of ServerRequest or should i use formidable?
22:49 <@AviMarcus> formidable might help you, give it a shot.
22:51 <@owen1> AviMarcus: the issue i have with formidable is it's working for me with a visible form, but i need a http end-point, and i can't see the uploaded file on my server - http://pastebin.com/sMefhfsf
22:52 <@owen1> AviMarcus: also, what package do u recommend for processing the csv?
22:57 <@CIA-93> node: Ben Noordhuis v0.8 * r1513848 / lib/net.js : net: fix Socket({ fd: 42 }) api - http://git.io/PbPfSA
23:02 < jayke> anyone here has a clue using mongoose?
23:03 < EricBlade> hi guys .. working on learning how to build my own modules to do nifty stuff .. and i'm having some scope issues ..  namely, that "this" is never what i need it to be when i need it to be certain things.  let me see if i can figure out how to phrase this 
23:03 < drudge> get used to writing var self = this :P
23:03 <@jcrew> jayke: yea
23:04 <@nlf> or .bind(this)
23:04 <@jesusabdullah> EricBlade: var self = this; in the scope you need, then do what you need to self
23:04 <@jesusabdullah> Or, .bind(this) if it makes sense to
23:04 <@nlf> both work
23:04 < EricBlade> ok , makes sense .. i'm guessing i can do that in the constructors ?
23:05 <@jesusabdullah> Yes
23:05 <@CIA-93> node: isaacs v0.8.4-release * r51261f0 / (AUTHORS ChangeLog src/node_version.h): 2012.07.25, Version 0.8.4 (Stable) - http://git.io/2LcIwg
23:05 <@jesusabdullah> And in the prototype methods
23:05 < EricBlade> basically, i'm trying to build an event emitter, that will deal with things on an incoming socket, deal with the data, and emit it out as parsed data
23:06 < EricBlade> i had solved all the issues with the socket by binding the callbacks
23:06 <@jcrew> jayke: were you just curious or had a question?
23:06 < EricBlade> but now i'm going crazy trying to access functions in the same level
23:06 <@jesusabdullah> A lot of times you don't need to inherit from EE and you can just create the ee and add what you need/want
23:06 <@jesusabdullah> to your particular instance
23:07 <@AviMarcus> owen1, npm install csv
23:07 <@AviMarcus> https://github.com/wdavidw/node-csv-parser
23:07 <@AviMarcus> 'night
23:09 -!- isaacs changed the topic of #Node.js to: node.js Release early, release often.
23:09 < EricBlade> inheriting it seems to be more straightforward, i would think
23:09 < EricBlade> esp since i'm just barely comprehending what i'm doing. :D
23:09 <@isaacs> op plz
23:09 < blakmatrix_> op plz
23:10 < EricBlade> er.. if i do self = this .. but this isn't.. that .. then ..self isn't that, either
23:10 <@jcrew> sounds like a who's on first
23:10 <@nlf> right, you have to self = this when this is that so that self remains that, then you use self instead of this
23:12 < EricBlade> ok, but say, at the top, i self=this, how do i access self ? 
23:12 < EricBlade> in other functions, self would not exist
23:12 < EricBlade> or.. am i missing osmehting
23:12 <@nlf> you would set self at the beginning of the functions
23:12 < EricBlade> at the beginning of the functions, this is already not what i want, otherwise i'd use this
23:13 <@nlf> post a gist of the basic idea of what you have
23:13 <@samholmes> http://substack.net/posts/24ab8c/ Has the syntax changed sense then?
23:13 < EricBlade> yeah i'm trying to figure out how to explain what i have.  i'm sort of porting some python code, and my mind is melting :)
23:14 <@jesusabdullah> ah, pythons
23:14 <@jesusabdullah> this will be good for you EricBlade :)
23:14 <@nlf> i've been doing a lot of back and forth between python and javascript today
23:14 <@nlf> makes my head hurt
23:15 < EricBlade> ok, API creates a socket, and a thing to Read from the socket, and a thing to Write from the socket.  API forwards the incoming data from the socket into the Reader thing, and the outgoing data to the Writer thing.
23:17 < EricBlade> actually, API sets a function in the reader to be the receiver of the socket's data event
23:17 < EricBlade> AHA.
23:17 < rvagg1> EricBlade: you my need to brush up on this, bind, call, apply etc. get your head around how it all works, maybe start here: http://dailyjs.com/2012/06/18/js101-this and then here: http://dailyjs.com/2012/06/25/this-binding
23:17 < EricBlade> i don't need to muck with all that
23:17 < rvagg1> get your head around this stuff and then everything falls into place
23:18 < EricBlade> addListener('data', this.reader.receive.bind(this.reader))
23:19 <@owen1> is there a yum package for node?
23:20 < rvagg1> owen1: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
23:21 <@owen1> rvagg1: thanks
23:22 <@owen1> i hope the centos works
23:22 < rvagg1> cross your fingers while you install...
23:23 < rvagg1> installing from source is really easy btw, good for your soul too
23:24 < rvagg1> I think the CentOS package may still be stuck on 0.6 btw
23:25 < jayke> :(
23:25 < jayke> why...
23:25 < qubit[01]> Im trying to understand the knox library, in it he has response.on('data') ... but there is no clear way to determine when the chunks are finished, how do I say on('complete') ???
23:26 <@owen1> rvagg1: i need to create a tpkg and i thougth to do it by converting a yum to tpkg
23:26 < jayke> why the hell does mongoose return undefined when i make a "find" inside a function? :(
23:26 <@owen1> but if i can created tpkg without it, i would do that
23:26 < qubit[01]> is this a common node ididom ?
23:27 < jayke> anyone willing to help? google is really not working for this
23:29 < qubit[01]> jayke:  paste ?
23:29 < jayke> function returnuserpos(username){  	mongoose.model('User').find({}, function (err, cursor) {   			return cursor 		}); };
23:29 < qubit[01]> also mongoose is all asynch, it will rarely 'return' anything
23:29 <@tjholowaychuk> jayke you cant return from async functions like that
23:29 <@tjholowaychuk> that's what callbacks are for
23:29 < jayke> ohw
23:29 < jayke> new to node.js btw hahahag
23:30 < jayke> so, how do i use a callback there?
23:30 <@owen1> anyone knows how to create tpkg from node source?
23:31 < jayke> maybe i have to call another function from there?
23:31 <@tjholowaychuk> jayke yup
23:31 < jayke> ahw...
23:31 < jayke> ...
23:31 <@tjholowaychuk> returnuserpos(username, done){ ... later done(null, whatever) }
23:32 < jayke> god, this new asynchronous thing is killing me
23:33 < qubit[01]> where can I read more about this res.on('data').end() idiom ?  I just need to know when the chunks have finished
23:33 <@TehShrike> jayke: :-)
23:34 < jayke> but, can i still call the function? like, the callback has to be from the function or from the .find()
23:34 < jayke> btw, thanks for helping out
23:35 < jayke> :)
23:35 <@mscdex> but asynchronous isn't new!
23:35 < jayke> well, for me coming from the shitty php world
23:36 < jayke> this is space-technology
23:36 <@mscdex> :-)
23:36 < jayke> i was even bad at php, imagine
23:36 <@Guest41315> jayke, http://vertx.io/
23:36 <@Guest41315> shiva space technology
23:38 <@isaacs> Owner: i saw in the backlog that you tried to do `npm update` and got some NPM output
23:38 <@isaacs> Owner: did you install npm from apt-get or something?
23:38 <@isaacs> Owner: that looks like the non-parametric mapping utility's error output
23:39 < qubit[01]> can anyone explain to me why this http://pastebin.com/n7PwhQmw , is making a file with a size of 89K, when the response clearly says its 48K in length ?  at my witts end 
23:39 < qubit[01]> god nevermind, just saw it
23:44 < jayke> ................
23:44 < jayke> nope
23:44 < jayke> if i call it from the function returns nothing
23:49 < fat> isaacs: i didn't know you looked for package.json data inside a file if a package.json didn't exist…
23:49 < fat> is this true?
23:49 < alyx> this is more of a general js question, but if I have an array of strings and I have another string, and I want to see if the same string is inside the array, is there a way to do this other than stringarray.forEach() and comparing strings?
23:49 < fat> or have i been lied too
23:50 < rvagg1> alyx: arr.indexOf(str) != -1
23:50 <@SubStack> samholmes: just use the command-line tool
23:50 < alyx> awesome, thanks :D
23:51 <@samholmes> SubStack: I run two environments, one locally and one hosted VPS. I'd rather have some configuration files I can edit then deploy to the production environment (VPS).
23:52 <@samholmes> But, maybe it's worth just using the CLI
23:53 < supermonster> is there a way to get a cpu usage for the current node process?
23:55 <@deoxxa> fat: iirc that was a planned feature - not sure if it's made it into npm yet though
23:55 <@isaacs> fat: yes.
23:55 <@isaacs> fat: index.js
23:56 < fat> isaacs: cool - was just looking at https://github.com/isaacs/read-package-json
23:56 < fat> so that's currently supported in npm?
23:56 <@isaacs> fat: also you can `npm install http://url.com/foo.js` and it'll Just Work now.
23:56 <@isaacs> if foo.js has the package comment
23:56 <@isaacs> ye;
23:56 < fat> nice
23:56 <@deoxxa> oh neat
23:56 <@isaacs> supports a file, a tar, a tar.gz, anything
23:56 < fat> was thinking of adding this to bower
23:56 <@isaacs> a file in a tar.gz
23:56 < fat> should i just use read-package-json?
23:56 <@isaacs> fat: yes.
23:56 < fat> still your codes
23:56 < fat> steal*
23:56 < fat> ok cool
23:57 < fat> thanks!@
23:57 <@isaacs> that's why i split it up, because i want you to steal it :)
23:57 < fat> hahah
23:57 < fat> ok
23:57 < fat> 1 more thing
23:57 < fat> if i could get your opinion 
23:57 < fat> if you do npm install http://url.com/foo.js do you install it into it's own directory?
23:58 <@isaacs> yeah
23:58 < fat> what does the file structure look like
23:58 < fat> do you keep it named foo.js?
23:58 <@isaacs> it sort of pretends that it was a tarball, no matter what
23:58 < fat> ah word
23:58 < fat> ok cool
23:58 <@isaacs> it installs into node_modules/<pkgname>/{package.json,index.js}
23:58 <@isaacs> so it's always consistent and predictable once it's digested
23:58 < fat> gotcha
23:58 < fat> cool
23:58 < fat> thanks!
23:59 <@isaacs> the actual "install a js file" bits are not in read-package-json
23:59 < fat> that's what i was doing with bower - but haters were hating
23:59 < fat> sure
23:59 <@jesusabdullah> bower?
23:59 < fat> of course
23:59 <@isaacs> fuck the haters, man.
23:59 < fat> haha
23:59 <@isaacs> they don't like it, they can build their own damn package managers.
23:59 < fat> they were saying it should stay foo.js
23:59 < fat> instead of index.js
23:59 <@isaacs> you can say, "I agree. Write your own that does it that way, and i'll use it."
23:59 <@jesusabdullah> they frontin'
23:59 < fat> hahaha
--- Log closed Wed Jul 25 00:00:00 2012
