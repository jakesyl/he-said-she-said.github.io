--- Log opened Wed Aug 08 00:00:42 2012
00:03 < TehShrike|Work> So, literally 5 hours ago, I was having a conversation with our sysadmin about how Node.js wasn't in the CentOS package manager, and I just now read this http://blog.nodejs.org/2012/08/07/node-v0-8-6-stable 8-|
00:04 < bnoordhuis> TehShrike: we're mind readers
00:04 < TehShrike|Work> And wizards!
00:12 < Lorentz> am I the only person who has a ~/.local/
00:12 < Lorentz> which is used like /usr/local except it's just for me
00:12 < timeturner> unix filesystem confuses me
00:13 < timeturner> way too many folders to put stuff in
00:13 < TehShrike|Work> Yeah, Windows is way better.  There's just Program Files!  And Program Files (x86).  Oh, and ProgramData.  And... UserData?  Anyway, it's pretty sweet.
00:15 < timeturner> no, Windows sucks
00:15 < timeturner> but unix is so much better than windows
00:15 < timeturner> that I don't even consider then comparable
00:15 < timeturner> :)
00:15 < TehShrike|Work> I was afraid my sarcasm wasn't strong enough to be detectable - apparently my fears were justified.
00:16 < timeturner> haha
00:16 < TehShrike|Work> The confusion between all those folders is pretty great among Windows developers, let alone Windows users.
00:16 < TehShrike|Work> Though I should say that I am both a Windows developer and a Windows user, and I do like the operating system.
00:17 < timeturner> oh, me too
00:17 < Argon_> lol
00:17 < timeturner> I use putty
00:17 < TehShrike|Work> It seems that all folder structures seem simple when an operating system is young... but then, you realize that you actually do need to split things up a bit more finely...
00:18 < timeturner> yeah
00:18 < timeturner> it actually makes me feel better
00:18 < timeturner> because organizing my app's folder is a task in and of itself
00:18 < timeturner> and when I look at windows' directory structure...
00:18 < timeturner> you know
00:19 < CIA-93> libuv: Ben Noordhuis master * r21f2c16 / (3 files in 2 dirs): include: fix macro formatting - https://github.com/joyent/libuv/commit/21f2c1629a242c0d61fcadd485542b8ec22d6988
00:19 < TehShrike|Work> Yeah - my company's flagship application is ten years old now, and moving to post-XP Windows was pretty painful because we just kept everything in Program Files
00:19 < tmpvar> Domenic, level1/html is essentially covered by level1/core
00:20 < CIA-93> libuv: Bert Belder v0.8 * r00d2f22 / src/win/process-stdio.c : windows: fix typos in process-stdio.c - https://github.com/joyent/libuv/commit/00d2f22151d5812a58cbae3df8b12e0a52f70e97
00:20 < CIA-93> libuv: Bert Belder v0.8 * r39b750c / src/win/process-stdio.c : windows: windows: don't duplicate invalid stdio handles - https://github.com/joyent/libuv/commit/39b750ca7009a5bef6add280d74ca36720d9a491
00:21 < tmpvar> Domenic, and we followed the dom tests.  They weren't really specific to level1/html. why do you ask?
00:21 < Domenic> tmpvar: looking through it, I would say it's been incorporated into level2/html... there's a lot in http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html#ID-642250288 that isn't there
00:21 < Domenic> tmpvar: was looking to update https://github.com/tmpvar/jsdom/pull/453
00:22 < Domenic> tmpvar: level1/html specs cover the name property, although if it's test-based, it makes sense to put it in level2/html instead.
00:22 < Domenic> But then I got sidetracked trying to fix file:// urls on Windows
00:22 < Domenic> because the level2/html tests fail
00:22 < Domenic> And actually it turns out the hrefs etc. are all wrong
00:23 < tmpvar> :(
00:23 < tmpvar> i meant to get back to you on that one, been pretty sidetracked tbh
00:24 < perezd> SubStack: you here?
00:24 < perezd> or maxogden 
00:25 < CIA-93> libuv: Bert Belder v0.8 * ra1157ce / src/win/process-stdio.c : windows: don't duplicate invalid stdio handles - https://github.com/joyent/libuv/commit/a1157cef3741984bd3b3d9564defadb35bccd20a
00:25 < Domenic> No worries, it's next on my hitlist. I'll enjoy getting more familiar with the jsdom code---that's a worthwhile thing to learn.
00:26 < perezd> maxogden concat-stream, does that need to hard limit support for 0.6.0? its introduced a problem for us when installing browserify, even tho we've vendored to a specifc version.
00:26 < perezd> someone has a fuzzy dependency.
00:26 < perezd> I hate that.
00:29 <@maxogden> perezd: it uses an 0.8 feature
00:29 < perezd> which?
00:29 <@maxogden> perezd: if you want 0.6 support im sure it can be feature detected
00:30 <@maxogden> perezd: Buffer.concat
00:30 < perezd> oh
00:30 < perezd> well fuck.
00:30 < perezd> the problem I have is indirect
00:30 < perezd> I've bene installing browserify 1.13 over and over again
00:30 < perezd> never a different version
00:30 < perezd> and suddenly it stopped working today
00:30 < perezd> requiring me to have 0.6
00:30 < perezd> err 0.8 
00:30 < perezd> because of this module
00:31 < perezd> and I have no idea how to stop that nowâ€¦no matter that version of browserify I install
00:31 < ProblemEmitter> perezd, check package.json
00:31 <@maxogden> concat-stream should only be in the newest version
00:31 < perezd> it appears to not be
00:31 <@maxogden> its also only http-browserify
00:31 <@maxogden> browserify -> http-browserify -> concat-stream
00:32 < ProblemEmitter> guys, about 0.8.6, do i understand it right: a binary distribution means that i dont need to compile/install anything? just unpack and ready to go?
00:33 < perezd> maxogden: see here: https://gist.github.com/a5d67f9a31477ca60e95
00:33 < ProblemEmitter> and it should run in any linux environment, like opensuse/fedora/debian/ubuntu etc
00:33 <@maxogden> npm http GET https://registry.npmjs.org/http-browserify
00:34 <@maxogden> perezd: o/ it seems to be getting to newest version?
00:34 < perezd> 1.13 isn't newest is it?
00:34 < perezd> browserify
00:34 <@maxogden> did you see my above comment?
00:34 <@maxogden> you want http-browserify 0.1.1
00:34 < perezd> oh
00:35 < perezd> oh its cached
00:35 < perezd> is there a way to make it not use cache (304?)
00:37 < alcuadrado> is there a way to make commander print the help if no command was provided by the user?
00:39 < smw> Hi all, I have a program that errors when I run it. I get: `Error: The "sys" module is now called "util".`
00:39 < smw> this program was installed with npm, how would I update using npm??
00:39 < smw> doing sudo npm --global install juggernaut did not fix it :-\
00:40 < Domenic> tmpvar: https://github.com/tmpvar/jsdom/pull/480
00:41 < Domenic> smw: `sudo npm --global update juggernaut`
00:41 < smw> Domenic, http://fpaste.org/TOc4/
00:42 < Domenic> smw: it looks like that package is not Node 0.8.0 compatible then
00:42 < Domenic> smw: its readme does say it's depracated
00:43 < smw> Domenic, it works fine with the node in 12.04
00:43 < smw> ubuntu 12.04*
00:43 < Domenic> smw: yes, it has not been updated to keep up with the latest Node
00:43 < smw> ok
00:44 < Domenic> smw: you can try `sudo npm --global install git://github.com/maccman/juggernaut.git` to see if there is a fixed version on GitHub that hasn't been published to npm
00:46 < smw> Domenic, I will do some more testing
00:52 < smw> Domenic, apparently juggernaut is doing a version test to decide what to import
00:52 < smw> Domenic, and it is choosing the wrong one
00:55 < Domenic> smw: welcome to my world of patching packages to work correctly
00:56 < smw> nope, it has multiple places it fails
00:56 < smw> Domenic, one of them did a check, at least one other does not
00:57 < smw> Domenic, I am not a node.js developer. Right now I see sys = require('sys'). Can I change that to sys = require('util')?
00:58 < Domenic> smw: yes, that will work
00:58 < smw> yes! it works :-)
00:59 < smw> Domenic, well, this patch will do. The new system we are rolling out based on ubuntu 12.04 just works. So I am just going to be happy and not question it too hard.
01:00 < Domenic> :)
01:00 < AAA_awright> smw: Repeat after me, "I am a Node.js developer"
01:02 < jrajav> If he wasn't before, he is now
01:05 < wingy> does anyone here use apigee?
01:07 < smw> AAA_awright, I was joking around earlier that I have programmed in many more languages than I know
01:08 < smw> AAA_awright, I am just the sysadmin!
01:08 < AAA_awright> lol
01:08 < AAA_awright> Well, I'd like to see someone program in fewer languages then they know
01:09 < AAA_awright> "Yeah, I'm one of the best ES developers, I've just never programmed in it"
01:09 < smw> lol
01:10 < jrajav> smw: You understand the general function and semantics of a statement like sys = require('sys')
01:10 < jrajav> You have modified Node.js code, with success
01:10 < jrajav> I honestly don't see how you're NOT a Node.js developer
01:11 < AvianFlu> I mean, "just the sysadmin" is kind of a funny statement by itself :)
01:11 < smw> jrajav, considering this is my first time looking a Node.js code and the fact that I don't know javascript, it seemed correct at the time ;-)
01:11 < AAA_awright> I think I'm succcesfully popularizing the term "semantics" as it applies to programing...
01:11 < AAA_awright> smw: See http://magnode.org/nodejs-design-demantics
01:11 < AvianFlu> I'd imagine a lot of sysadmins could handle figuring out javascript on the fly :)
01:11 < jrajav> require('cherry').break();
01:11 < smw> lol
01:12 < smw> AAA_awright, well, I am in denial. I still tell people I am not a programmer :-P
01:12 < jrajav> AAA_awright: You mean popularizing it more than actually getting a Comp Sci degree? :P
01:12 < jrajav> (And paying attention in class)
01:13 < AAA_awright> I prefer "Software Develpment/Design Engineer"
01:13 < AAA_awright> :)
01:13 < Argon_> can i put my bot in here? its powered by jsnode
01:13 < jrajav> Only if it gives us all ops
01:13 < AAA_awright> ^^
01:13 < AAA_awright> There's #botpark and I think a Node.js-specific channel someone created
01:14 < AAA_awright> You could try in here, they tend to not last very long for some reason though
01:14 < AAA_awright> (I'd guess)
01:14 < Argon_> hm..
01:14 < Argon_> you mean they crash?
01:14 < Argon_> or they stop developing them?
01:15 < jrajav> They have an "accident"
01:17 < Argon_> there is #botwar
01:17 < Argon_> but i need ppl to talk to test mine
01:18 < hunterloftis> Please, somebody link me to a decent http client that supports cookies/sessions in a simple way. I'd love to use supertest but it doesn't seem to store cookies.
01:19 < paulwe> hunterloftis https://github.com/mikeal/request/ ?
01:20 < hunterloftis> paulwe: nope, been trying that for a while. really hate the API and either I misunderstand how it uses cookies, or they don't work properly
01:20 < paulwe> fair enough
01:20 < hunterloftis> var req = request.defaults({ followRedirect: false }); <-- should create a new instance of request, yes? with no cookies? doesn't work... cookies persist.
01:22 < paulwe> i think you need to pass in the jar option set to false
01:23 < hunterloftis> paulwe: that would disable cookies altogether... I just want to clear them
01:23 < hunterloftis> (create a new instance of request without cookies)
01:23 < ferlores> hunterloftis, yep change the jar and it will work or use var request = request.defaults({jar: false}) to disable cookies
01:23 < _Tristan2> COOKIES
01:24 < hunterloftis> Thanks for the suggestions guys, but I just don't trust request. The inability to make a new, blank instance of a "requestor" really bugs me. I'm writing tests and I want to trust them.
01:24 < paulwe> .defaults doesn't create a new instance request, it just wraps the api...
01:24 < hunterloftis> paulwe: agreed, but is there a way to create a new instance? or is request a singleton?
01:24 < ferlores> hunterloftis, I think reuqest is the best http client you can find...
01:25 < hunterloftis> ferlores: I'm in love with supertest (check out that sexy simple api) but it has no cookie support
01:25 < paulwe> it's a singleton :( main.js doesn't even return the Request class it's instantiated from
01:25 < hunterloftis> paulwe: yeah exactly. I looked through some of the source and it's not something I'm willing to put faith in.
01:26 < hunterloftis> paulwe: it's better than *my* node projects from two years ago though!
01:27 < paulwe> lol
01:27 < paulwe> hunterloftis i think you could get most of what you want from calling .default with jar: request.jar() to create a new blank cookie store
01:28 < hunterloftis> paulwe: yeah but I can't :/ running a bunch of async tests... without the ability to create new request instances, how would I know when there is a jar, when there is a new jar, etc? All the tests would clobber each other (and are ;)
01:32 < paulwe> if i'm understanding this correctly, every call to .default returns a new instance of some wrapper... so for every test you run you would just need to create a new wrapper with a fresh jar and the code inside those tests would share the cookies they generated without polluting your other tests 
01:33 < paulwe> i appologize if you've already tried this and it didn't work... it seems reasonable given the docs though
01:33 < paulwe> apologize*
01:35 < paulwe> hunterloftis the code supports this assumption, it might be worth testing
01:36 < hunterloftis> paulwe: yeah that's what I thought too... I have been using .default to get a new instance of the wrapper, but I haven't been passing in fresh cookie jars to it
01:36 < hunterloftis> paulwe: The fresh wrapper instance by itself doesn't do the trick though (all the instances share a cookie jar).
01:36 < hunterloftis> Looking at forking supertest to add cookie support instead. This is something I'll be using a lot
01:37 < MrWhite> fresh cookie jars? mmm
01:37 < hunterloftis> hahah
01:37 < hunterloftis> yeah I'm hungry too
01:38 < paulwe> yeah, i've seen some of mikeal's other work and read his blog... he seems like a disciple of zed shaw's programming motherfucker methodology which sort of explains the code style but he seems like a smart guy
01:41 < unomi> any hints on how to handle / what I could be doing wrong when: I have an evolving mongoose schema with a nested object literal - say person: {stats:{stat1:{type: Number, 'default':0}}}
01:41 < hunterloftis> Being an average programmer, I've got to go with Brian Kernighan: "Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it."
01:41 < WarheadsSE> hunterloftis has never read bad perl then.
01:41  * WarheadsSE shiver
01:41 < unomi> the initial case seems to work fine, but once I add stat2 then the default value for it seems ignored and stat2 is handled as undefined.
01:42 < hunterloftis> unomi: are you defining your schema as 'strict?'
01:42 < unomi> hunterloftis, no
01:43 < hunterloftis> unomi: I'm not sure what the default setting is now (strict or not) but it might be worth checking, since with strict you can't add properties to a schema like that
01:43 < hunterloftis> If you manually add stat2 with a default to the schema's object literal, are you able to save the property then?
01:57 < abraxas> does anyone know if there's a way to see which outstanding event handlers are in existance?
01:58 < abraxas> I'm figuring, the most graceful way to terminate a node process is not to hit process.exit(), but to get all event handlers to unregister at the right time
01:59 < abraxas> but with a lot of servers and services, that can be hard to achieve without any ability to peek inside node to see what events you're listening for
02:02 < AvianFlu> abraxas: on 0.8, there are two nifty semi-private APIs for that, process._getActiveHandles() and process._getActiveRequests()
02:02 < abraxas> cool
02:02 < abraxas> thanks for that, i'll look into it
02:02 < AvianFlu> the output isn't exactly noob-friendly, but it can be very helpful
02:04 < abraxas> what's the difference between the two?
02:11 < AvianFlu> abraxas: simply speaking, one represents an internal node/libuv object, and the other is an FS or network request
02:12 < abraxas> alright
02:16 < Argon_> http://rinik.de:3000/ - and type something in this channel :D
02:18 < rhutchison> word
02:18 < Argon_> seen it?
02:18 < rhutchison> that's sweet argon
02:18 < Argon_> thanks :D
02:18 < rhutchison> does it do anything besides raindrops
02:18 < Argon_> no ;) not yet
02:18 < rhutchison> what are you looking to do with it
02:19 < Argon_> well.. its has basic bot stuff
02:19 < Argon_> like .google
02:19 < Argon_> but it should be disabled in this channel
02:19 < rhutchison> nice
02:19 < rhutchison> is it on github?
02:19 < Argon_> because normally big public channels don't want bots
02:20 < Argon_> yes. but i haven't pushed the raindrop thing yet
02:20 < Argon_> https://github.com/darkargon/nodbot
02:21 < rhutchison> cool
02:21 < Argon_> i know ugly code and stuff..
02:22 < rhutchison> looks fine to me ;P
02:22 < rhutchison> plan is to have people build their own modules/commands?
02:23 < Argon_> hm..
02:23 < Argon_> yea that whould be cool
02:23 < rhutchison> I thought that was your intention based on you authoring the commands that are there
02:25 < Argon_> your right rhutchison. that was my goal
02:26 < Argon_> but this i my first open source project. so it will probably fail ;)
02:28 < rhutchison> won't fail if you're learning
02:51 < unomi> hunterloftis, sorry - was afk
02:51 < Argon_> can i autocrash child processes if the main one dies?
02:51 < unomi> hunterloftis, not quite sure what you mean by: If you manually add stat2 with a default to the schema's object literal
02:52 < unomi> that seems to be exactly what I am doing, the issue is with already created objects
02:54 < unomi> those pre-existing objects don't seem to gain the benefit of knowing anything about any stat2 ( though, yes, if I someObj.stat2 || someObj.stat2 = "this works )
02:54 < unomi> but I am trying to avoid peppering my code with version / refactor artifacts 
02:56 < unomi> aperson.stats.stat2 - rather
02:56 < niftylettuce> plz upboat "Show HN: Send postcards with Node.js & Sincerely (makers of Postagram)" -- it under "New" at http://news.ycombinator.com/newest
03:06 < mscdex> upboat? ;-)
03:07 < devaholic> the if/else inside async thread makes me sad
03:07 < jcollum> hola, i'm having an issue with a very simple node coffee app
03:08 < jcollum> I get 'Object http has no method 'createServer''
03:08 < mscdex> single thread!
03:08 < jcollum> when I run this: 
03:08 < jcollum> require http = 'http' http.createServer (req, res) ->         res.writeHead 200         res.end 'Hello, World!' .listen 4000
03:08 < jcollum> well the formatting is boned, but you get it I think
03:09 < jcollum> running it with coffee app.coffee
03:09 < jcollum> suggestions? 
03:09 < mscdex> i don't do coffeescript, but is that the right syntax for require?
03:09 < devaholic> jcollum: i dont drink coffeescript
03:09 < mscdex> should it be: http = require 'http'
03:10 < devaholic> yeah..
03:10 < jcollum> @mscdex thanks! 
03:11 < jcollum> I tried to find the most recent 'hello node + coffee' sample I could 
03:11 < jcollum> and it was wrong 
03:11 < jcollum> -_-
03:11 < purr> jcollum: à² _à²  is an IRC client/IRC client framework.
03:11 < mscdex> lol
03:11 < jcollum> @purr ??
03:11 < mscdex> jcollum: have you looked at the coffeescript site for examples?
03:13 < jcollum> I see what I did wrong. Picnic. 
03:15 < mscdex> uh oh, localhost has quit!
03:15 < mscdex> now we can't access our own machines!
03:15 < DarkArgon> lol
03:15 < niftylettuce> mscdex: upvote it plz :D
03:15 < DarkArgon> thats  bad
03:15 < jrajav> Is there seriously not a #coffeescript yet?
03:16 < mscdex> jrajav: no idea, but jeremy pops in here every now and again though
03:16 < jrajav> Oh, there actually is a #coffeescript
03:16 < mscdex> niftylettuce: i'll upvote your github avatar!
03:17 < jrajav> I think I'll join it :P
03:17 < niftylettuce> mscdex: lol SubStack made it
03:17 < mscdex> :-D
03:18 < niftylettuce> mscdex: neat homepage, flashing terminal cursor
03:19 < mscdex> it's also neglected ;-)
03:19 < _Tristan> op plz
03:19 < _Tristan> BAWWW
03:21 < mscdex> 404 IRC op bot not found
03:21 < _Tristan> what if library that monitors data structures for changes?
03:22 < mscdex> that would require polling though.... unless you have getter functions that notify
03:23 < mscdex> er setter
03:23 < _Tristan> no polling, notifystuffs
03:23 < mscdex> v8 doesn't magically tell you when an object is updated is what i mean
03:24 < _Tristan> but not the setters, more like data.set('cake', 1) or data.append('pie', 5)
03:27 < mscdex> an evented tree structure or linked list? :-)
03:27 < _Tristan> both
03:28 < mscdex> i don't know of any that are like that.... usually the events would happen outside of the data structure
03:28 < mscdex> but it wouldn't be hard to add events to a simple structure like a tree or linked list
03:28 < _Tristan> I've done it with a tree
03:53 < _Tristan> a lot of work is put into mirroring data structures with minimal communication
03:54 < _Tristan> for example, the list of users in an IRC room. The server knows it, the client knows it, but they only communicate when somebody joins or leaves, and both sides have to handle it separately but identically, which is a pain in the ass.
03:55 < DarkArgon> true word
03:58 < _Tristan> the web traditionally transfers a bunch of different data in one request, but we're moving towards many transactions of small amounts of data, especially with web sockets. If there is a defined protocol for synchronizing any data structure with minimal bandwidth, the client and server won't have to listen for joins and parts, they'll just monitor the list of users and update the dom accordingly
04:01 < DarkArgon> code one _Tristan ;)
04:01 < DarkArgon> like the idea
04:02 < _Tristan> I am, but sometimes I forget what I'm making so I need to write it down :)
04:02 < mscdex> argh, npm doesn't honor the http_proxy environment var
04:03 < DarkArgon> is it on github?
04:11 < _Tristan> mscdex: yes, npm is on github
04:12 < DarkArgon> .. no is your superprotocol on github?
04:12 < _Tristan> oh, not yet
04:12 < _Tristan> it will be later tonight, though
04:13 < mscdex> huh?
04:13 < DarkArgon> is it a REAL new protocol, so we would need to patch browsers?
04:14 < _Tristan> uh, it's real, but no browser patches would be necessary
04:14 < _Tristan> it'll probably use socket.io
04:15 < DarkArgon> sounds good
04:22 < AAA_awright> _Tristan: You probably don't like that there's multiple verbs for add user to channel, remove user from channel, replace user list for channel. If NAMES were instead a long sequence of joins, there might be less of an issue?
04:24 < _Tristan> NAMES?
04:27 < DarkArgon> names in your irc example i think
05:28 < _Tristan> thing = new otherthing(); thing(something) < is there a way to do this?
05:30 < freewil> _Tristan, i dont think so
05:31 < ljharb> already told him no in #javascript :-)
05:31 < freewil> if you changed new otherthing() to otherthing.create() and returning a object you could
05:31 < SomeoneWeird> thing = new otherthing(something)
05:31 < SomeoneWeird> ?
05:31 < freewil> or a function i mean
05:32 < _Tristan> object.create?
05:32 < _Tristan> what is this voodoo?
05:32 < SomeoneWeird> new Object(something)
05:32 < freewil> var otherthing = { create: function() { return function() {} };
05:32 < freewil> then you could do otherthing.create() which would return a function
05:34 < ljharb> but that only works in modern browsers.
05:34 < ljharb> (or node)
05:34 < freewil> what?
05:34 < freewil> no
05:34 < freewil> it's just returning a function
05:34 < freewil> any js-implementation can do that
05:35 < ljharb> Object.create only works in modern browsers, i mean.
05:36 < _Tristan> Object.create({init: myConstructor}).init() == new myConstructor()?
05:37 < ljharb> _Tristan: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create but note it only works in modern browsers.
05:40 < _Tristan> even if I do use object.create, the output won't be callable(?)
05:41 < freewil> ljharb, i see, but in my example im just overwriting the "magic" create
05:41 < ljharb> ah. probably best not to reuse a native term like "create" :-)
05:42 < _Tristan> I'm confused. Is it possible to make an instance callable?
05:42 < SomeoneWeird> yes
05:43 < _Tristan> awesome. How?
05:43 < freewil> ljharb, agreed
05:43 < freewil> it would be a bad practice
05:43 < SomeoneWeird> _Tristan, for exporting a module?
05:43 < _Tristan> no
05:43 < SomeoneWeird> x.X
05:44 < devaholic> _Tristan: how does that make any sense?
05:44 < devaholic> you have some desire to use new?
05:44 < ljharb> _Tristan: better question. why do you want an instance to be callable? or, why must it be an instance?
05:45 < _Tristan> I want it to be callable because it's cleaner in this case, and I don't need to use "new"
05:45 < devaholic> _Tristan: then why not just use a little factory function?
05:45 < _Tristan> I mean, I don't need to use new if there's some other way to do it
05:46 < ljharb> _Tristan: it's not something javascript does natively. it can't possibly be cleaner.
05:46 < devaholic> _Tristan: function foo () { return function () {} }
05:47 < devaholic> var s = foo(); s();
05:48 < jesusabdullah> or, function StupidThing() { if (!(this instanceof StupidThing)) { return new StupidThing(); } /* whatever */ }
05:49 < jesusabdullah> if you just want to avoid the "new" keyword
05:49 < _Tristan> I'm still confused. This is what I have, minus all of the interesting stuff. http://pastebin.com/fwNgWtsP
05:50 < devaholic> yes function thing () { return new OtherThing() } is useful
05:51 < _Tristan> how can I change that code so that line 15 can work?
05:52 < wookiehangover> learn javascript
05:53 < AAA_awright> "Wrappers around new considered harmful"
05:54 < gkatsev> '"Wrappers around new considered harmful" considered harmful'
05:54 < gkatsev> :P
05:54 < SomeoneWeird> lol
05:54 < devaholic> "Random statements in quotes"
05:54 < ljharb> i plain old dislike "new" :-p
05:54 < AAA_awright> _Tristan: evhash.prototype.set(arg){/*blah*/}; config.set(blah);
05:54 < SomeoneWeird> "If you put things in quotes people will believe them"
05:55 < AAA_awright> Well it doesn't make a complete sentence without the quotes
05:55 < AAA_awright> Wrappers around new considered harmful
05:55 < AAA_awright> No, it has to be
05:55 < AAA_awright> Wrappers around new are considered harmful
05:55 < AAA_awright> But that breaks the snowclone
05:55 < _Tristan> "Rappers around new considered harmful"
05:55 < gkatsev> it's also a play on the paper name. mine was a play on the response paper
05:56 < wookiehangover> ljharb: ya, having instances of things is hard and confusing
05:56 < wookiehangover> and `this` is scary
05:56 < wookiehangover> so fuck `new`
05:56 < AAA_awright> What's scary about this?
05:56 < gkatsev> `this' isn't scary
05:56 < AAA_awright> Guys, Javascript is a prototype language
05:56 < AAA_awright> Get over it
05:56 < gkatsev> !g sorella oop
05:56 < wookiehangover> trolololo
05:56 < gkatsev> -g sorella oop
05:56 < purr> gkatsev: Understanding JavaScript OOP â€” Sorella's Basement <http://killdream.github.com/blog/2011/10/understanding-javascript-oop/>
05:56 < ljharb> AAA_awright: it's also quasi functional. you don't *have* to use prototypes
05:57 < gkatsev> has a good writeup about `this'
05:57 < ljharb> "this" has 6 different meanings. yay!
05:57 < jcollum> @purr: 404
05:57 < gkatsev> jcollum: your client fails at parsing urls correctly, then.
05:57 < gkatsev> jcollum: remove the closing >
05:58 < SomeoneWeird> yeah works for me
05:58 < SomeoneWeird> lol
05:58 < jcollum> ah
05:58 < jcollum> pays to read the url
05:58 < gkatsev> heh
05:58 < AAA_awright> Yeah, your client should never parse in < or > as part of a URL
05:58 < AAA_awright> That's precicely what the < and > are there for!
05:59 < AAA_awright> So you don't end up reading trailing periods as URL
06:00 < gkatsev> I have trackbar.pl enabled in irssi, if a url finishes exactly at the end of the screen, it sometimes grabs the trackbar as part of it. also, the timesignature
06:00 < wookiehangover> "anything that's worth doing can be done with Regular Expressions"
06:00 < gkatsev> -g xkcd regular expressions
06:00 < purr> gkatsev: xkcd: Regular Expressions <http://xkcd.com/208/>
06:00 < wookiehangover> I think somebody said that, once
06:00 < ljharb> also http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
06:01 < gkatsev> ljharb: that's a good one
06:01 < AAA_awright> ljharb: I'm still not sure what feature of Javascript makes it "quasi-functional" generally it either is or it isn't
06:01 < gkatsev> regex should only be used to parse a regular language
06:01 < gkatsev> html isn't regular
06:01 < _Tristan> anything that's possible can be done with rod logic
06:02 < ljharb> AAA_awright: well it's not purely functional because it has inheritance. it's functional because functions are first-class
06:02 < ljharb> AAA_awright: i might be wrong, not trying to get too pedantic about it, hence "quasi:"
06:03 < wookiehangover> so javascript is a "seemingly" functional language; how subtle of it
06:04 < gkatsev> wookiehangover: it is FP, nothing seemigly about it.
06:05 < gkatsev> multi-paradigm, really
06:07 < wookiehangover> multi-dimensional, even
06:08 < gkatsev> ?
06:09 < wookiehangover> like, what if there's this whole other dimension, like in Tron
06:09 < wookiehangover> but with JavaScript, obvs
06:09 < gkatsev> lol
06:09 < gkatsev> anyway, sleep time for me
06:09 < gkatsev> night
06:38 < whiskers75> how do you 'wait until' in Node?
06:40 < DarkArgon> callback?
06:40 < whiskers75> i've got two async functions with two callbacks, and I want to wait for both to finish.
06:41 < ljharb> you could use a promise
06:41 < whiskers75> how?
06:41 < SubStack> whiskers75: var pending = 2; and then in your callbacks if (--pending === 0) { do some things }
06:41 < ljharb> or you could use a counter :-p
06:42 < timeturner> can someone explain to me how modules like async work to make functions run in parallel if JS is running in a single thread
06:42 < timeturner> does it fork?
06:42 < whiskers75> i have: var go = 0, in my callbacks I have go += 1, how do I wait until go = 2?
06:42 < SubStack> timeturner: no, those libraries just interface with code that is already asynchronous
06:43 < SubStack> whiskers75: you just if (go === 2) {} in your callbacks
06:43 < SubStack> there's nothing tricky about this
06:43 < whiskers75> why in my callbacks?
06:44 < SubStack> because your callbacks fire when important things happen
06:44 < whiskers75> paste: http://pastebin.com/35EfYnJu
06:45 < whiskers75> look at the paste
06:45 < SubStack> that indentation style is really weird >_<
06:45 < whiskers75> copy/paste indent errors.
06:46 < SubStack> whiskers75: don't do this: n = ...
06:46 < SubStack> that does nothing
06:46 < SubStack> db.get() is async, it calls you with the result, you don't get the values outside
06:46 < AAA_awright> whiskers75: And use var=
06:47 < AAA_awright> global variables are the goto of ES
06:47 < SubStack> whiskers75: instead of go += 1, if (++go === 2) finish()
06:47 < SubStack> and then define finish which will fire when both callbacks are done
06:47 < AAA_awright> You can use them, and you even might be able to use them in certain situations, but overwhelmingly, Bad Things Happen
06:47 < whiskers75> ah
06:48 < whiskers75> i get it
06:48 < SubStack> or better yet, set go to 2 and then decrement so you only need to hard-code the number of pending callbacks in one place
06:48 < AAA_awright> Sometimes you don't know the number of callbacks, what I do is:
06:48 < AAA_awright> var remaining = 1;
06:48 < AAA_awright> blah.forEach(function(v){ remaining++; async(done); });
06:48 < SubStack> also a good approach
06:48 < AAA_awright> done();
06:49 < jondot_> i have a function that needs to divide an array of 10,000 to chunks of 1000, and apply an async web call on each chunk. should I apply the returning callback on each chunk or should i apply when all chunks end?
06:49 < AAA_awright> function done(){ if(--remaining!==0) return; allDone(); }
06:50 < AAA_awright> Note the remaining = 1; and the call to done() after all the async functions have been called, this protects against in-line execution of the callback function
06:52 < AAA_awright> jondot_: You probably don't want more than a few network connections at a time
06:52 < jondot_> AAA_awright: the network connections are OK, i have no option but to call the service. what i'm kinda still deciding is - do I use (or abuse) callbacks or not
06:53 < jondot_> for example:  submit_to_webservice( array_of_10_thousand, callback)  -> if the web service can only take 1000 items per call, then I can call the callback with results 10 times
06:53 < AAA_awright> I'm probably thinking some sort of queue you dump into
06:54 < jondot_> OR inside submit_to_werbservice i can wait until I have all 10 results from the calls and call the callback once
06:54 < AAA_awright> Oh uh
06:54 < AAA_awright> jondot_: Callbacks get called exactly once.
06:54 < AAA_awright> Always.
06:55 < jondot_> from what I gather, it works when I call the callbacks multiple times!
06:55 < AAA_awright> If you want to call something an arbritrary number of times, that's what an EventEmitter is
06:55 < AAA_awright> function divide_and_submit( all_data, callback ) should only call `callback` once. Not more, not less
06:55 < AAA_awright> one is the number to which you shall count, etc
06:55 < whiskers75> http://pastebin.com/jN7mahk2 - when I enter login, my username, and then my PIN, it freezes. why?
06:56 < AAA_awright> You shall not stop at one-half, you shall not proceed to two
06:57 < VesQ> whiskers75: what's with the "go" variable?
06:57 < jondot_> AAA_awright: ok then, but it does work when I call the callback multiple times doesn't it? just for the sake of knowing
06:57 < whiskers75> VesQ: to make sure both have finished
06:57 < VesQ> so you init it to 0... where?
06:57 < whiskers75> otherwise i get 'true' instead of the DB value
06:57 < whiskers75> and I var go = 0 at the start of the program
06:58 < AAA_awright> jondot_: the function presumably will make multiple calls the service, and those will have callbacks. But you will want to keep track of them, and then call `callback` only when all of them have finished
06:58 < VesQ> whiskers75: but you never reset it? it might get above 2?
06:58 < whiskers75> ok, Ill add a line to reset it in finish() (oops!)
06:58 < jondot_> AAA_awright: yea, it makes sense, i was just surprised when it worked in the wrong way. only to realize this is still javascript :)
06:59 < AAA_awright> Well that shouldn't do any good, VesQ, whiskers75
06:59 < VesQ> AAA_awright: yes, whiskers75, that most likely isn't why it freezes
06:59 < AAA_awright> jondot_: There's a fancy reason why http://magnode.org/nodejs-design-demantics
06:59 < whiskers75> i know that
06:59 < jondot_> AAA_awright: should I take an array of 100,000 and generate an array-of-arrays [ 1000items, 1000items .... ] etc or should I do a while loop that splits the 100,000 items 1000 items a time?
07:00 < AAA_awright> jondot_: As the return value?
07:00 < AAA_awright> Most generally I would implement EventEmitter and call an event every time you get a result back, so you can handle the results as they come in
07:01 < whiskers75> then why does it freeze?
07:01 < VesQ> whiskers75: I hope you've declared "finish" somewhere with var
07:01 < whiskers75> yes
07:01 < VesQ> k
07:01 < jondot_> AAA_awright: well divide_and_submit can internally do a while loop that takes the huge array and takes a slice of 1000 each time to submit, or it can divide the huge array once to an array of arrays and map over those
07:01 < AAA_awright> whiskers75: Yeah, where's the var in your code?
07:01 < whiskers75> it usually freezes when there is no callback(null, 'message')
07:01 < AAA_awright> whiskers75: There's not a single var anywhere in that paste and that's disturbing
07:01 < whiskers75> vars are at the very top
07:02 < AAA_awright> :-\
07:02 < VesQ> whiskers75: so when no callback is set, it freezes?
07:02 < AAA_awright> whiskers75: Use as-local-as-possible definitions
07:02 < VesQ> ^ this
07:02 < whiskers75> http://pastebin.com/YkwjCbiW - with vars
07:03 < whiskers75> AAA_awright: what do you mean?
07:03 < whiskers75> VesQ: yes
07:03 < VesQ> gah so you basically use "global" vars? inside your single file, that is?
07:03 < whiskers75> yes, just one file
07:03 < AAA_awright> whiskers75: I have no clue what sort of behavior you're looking for. If you have two requests going on at the same time, they'll both use the same variable
07:03 < AAA_awright> That's not good
07:04 < AAA_awright> Unless you want that, but generally requests don't talk to each other
07:04 < whiskers75> AAA_awright: how do I fix that?
07:04 < VesQ> it's not wise to use the same variables throughout your program
07:04 < AAA_awright> whiskers75: Make your definitions as-local-as-possible...
07:04 < whiskers75> You can have a look at the whole code on cloud9: c9.io/whiskers75_1/creativemud
07:05 < whiskers75> AAA_awright: what does that mean?
07:05 < AAA_awright> Don't use finish = function()
07:05 < AAA_awright> use function finish()
07:05 < whiskers75> does it matter?
07:05 < AAA_awright> And get rid of the corresponding finish in the file header
07:05 < AAA_awright> YES
07:06 < AAA_awright> whiskers75: If another request comes in the tick right after you set waitingType='pin'; then what happens?
07:06 < AAA_awright> I can't see, but something nasty presumably
07:06 < whiskers75> it wont,
07:07 < whiskers75> because of the advanced waiting syste,
07:07 < whiskers75> m
07:07 < whiskers75> 8
07:07 < whiskers75> *
07:07 < VesQ> "advanced" feels quite wrong in this situation
07:07 < whiskers75> It will not let another request in until the 'waiting' flag has been unset
07:07 < VesQ> why?
07:07 < VesQ> why is that necessary?
07:08 < whiskers75> that's how I coded it
07:08 < whiskers75> if I had multiple requests in the waiting block, the system would go defunct
07:08 < whiskers75> github.com/whiskers75/creativemud - look at the whole code
07:09 < AAA_awright> Or, you can code it so it handles multiple requests at the same time with no problems
07:09 < VesQ> ^ this again
07:09 < AAA_awright> I mean, that sort of defeats the ENTIRE PURPOSE OF NODE.JS'S EXISTANCE
07:09 < VesQ> you should code it in a way that would support multiple requests.
07:09 < VesQ> AAA_awright: that is true.
07:09 < whiskers75> I know, but how?
07:09 < whiskers75> come and code it with me
07:10 < VesQ> I've got my own projects, sorry, just trying to help if possible
07:10 < whiskers75> ok
07:10 < whiskers75> for now, that is how it is handled
07:10 < whiskers75> so, WHY DOES IT FREEZE?
07:10 < VesQ> when a user connects to your server, you could assign him/her an unique ID
07:11 < whiskers75> VesQ: the socket
07:11 < AAA_awright> whiskers75: I don't know, but there's a lot of possibilities, probably multiple reasons
07:11 < AAA_awright> whiskers75: First off, https://github.com/whiskers75/creativemud/blob/master/server.js#L54-63
07:11 < AAA_awright> whiskers75: You should use if(){} else {}
07:11 < whiskers75> that's ok
07:11 < VesQ> whiskers75: so that's a telnet server, isn't it?
07:11 < AAA_awright> whiskers75: In https://github.com/whiskers75/creativemud/blob/master/server.js#L70 instead of wrapping everything in a giant if(wait===0) block, go:
07:11 < DarkArgon> whiskers75 u know the && operator?
07:12 < AAA_awright> if(wait!==0) return;
07:12 < AAA_awright> whiskers75: That saves on a lot of indenting
07:12 < whiskers75> DarkArgon: no
07:12 < whiskers75> AAA_awright: i dont mind if it#s bulky
07:12 < whiskers75> it is a telnet server
07:12 < VesQ> whiskers75: if (1 === 1 && 2 === 2) { return true; }
07:13 < DarkArgon> if(a==1 && b == 2)
07:13 < VesQ> whiskers75: but we do mind
07:13 < DarkArgon> so you don't have to if()if()if()
07:13 < whiskers75> ah thanks
07:13 < AAA_awright> The less if statements the better
07:13 < VesQ> and if you want help later, it would be much much easier to help when we can read your code
07:13 < VesQ> right now it's hard to read because of the amounts of indentation and bulkiness
07:14 < AAA_awright> whiskers75: Everywhere you have if (waitingType === 'login'), use switch(waitingType){ case 'login': processLogin(some,Variables,Relating,To,The,Request); break; }
07:14 < VesQ> yes, split your code into multiple functions
07:14 < whiskers75> AAA_awright: argh, complicated!
07:15 < AAA_awright> whiskers75: No, easy to read!
07:15 < VesQ> whiskers75: right now your way of doing it is complicated
07:15 < whiskers75> yes, but I dont understand that code
07:15 < VesQ> I'd say the way AAA_awright is easier
07:15 < VesQ> whiskers75: then learn ;)
07:15 < AAA_awright> People complain because *I* code without color-coding on nano all on a single line no whitespace. But at least I produce readable code :p
07:16 < whiskers75> ok, ill fix it up - maybe have a login() function, etc.
07:16 < VesQ> yes
07:16 < AAA_awright> I mean, point is, code structure is more important than trivial whitespace standards
07:16 < VesQ> AAA_awright: that is true
07:16 < whiskers75> ok, going to code now - and what are whitespaces?
07:16 < AAA_awright> That said, TABS FOR INDENTING, SPACES FOR ALIGNING
07:16 < VesQ> but AAA_awright I do think that whitespace standards are necessary anymore
07:16 < VesQ> anyhow*
07:17 < whiskers75> ok, going to code now
07:17 < AAA_awright> whiskers75: Tabs, spaces, newlines, stuff that isn't visible
07:17 < VesQ> whiskers75: whitespaces are " " :)
07:17 < VesQ> and yeah. ah
07:17 < VesQ> nvm me
07:17 < VesQ> I'll go hide in a hole for a while
07:17 < whiskers75> nvm?
07:17 < VesQ> nvm = never mind
07:17 < whiskers75> oh
07:18 < VesQ> lazy people of the internets use abbreviations
07:18 < whiskers75> i know
07:18 < whiskers75> im gong to code
07:18 < VesQ> happy coding :)
07:24 < jondot_> AAA_awright: any recommended way to divide huge arrays ? a while loop that slices through on each iteration at a time or pre-compute divide into array of arrays and then parallel map over all parts?
07:24 < AAA_awright> jondot_: Just handling the data? arr.slice()?
07:24 < ljharb> AAA_awright: YES. tabs for indenting, spaces for alignments.
07:24 < AAA_awright> ljharb: ^5
07:24 < ljharb> AAA_awright: also don't use switch statements.
07:25 < AAA_awright> ljharb: What's wrong with those
07:25 < ljharb> either use a hashmap if its a data lookup, or an if statement if it's logic.
07:25 < AAA_awright> Ah this is true
07:25 < ljharb> they're goto, and missing "break"s can cause hard to find bugs.
07:25 < jondot_> AAA_awright: well if I have array of 100 items, i can divide it to groups of 10: [ a10, a10, a10, a10... a10] and then map over it.
07:25 < AAA_awright> If you deliberately need multiple labels to goto the same code, and need to omit breaks, or mix break/return/continue, you can't beat them though
07:26 < jondot_> AAA_awright: i'm wondering about the memory cost of that vs a while loop that arr.slice 10 items on each iteration
07:26 < ljharb> AAA_awright: definitely not. if (foo || bar) is far better than case foo: case bar: code
07:26 < ljharb> jondot_: don't worry about the memory cost. this is javascript.
07:26 < ljharb> AAA_awright: also i'd avoid "continue" and "break" just like i'd avoid "switch"
07:27 < jondot_> ljharb: huh?
07:27 < AAA_awright> whiskers75: Take ljharb, an even better idea is have a map like so: var commands = {login: loginHandler, register: registerHandler, ...}; commands[cmd](arguments);
07:27 < ljharb> jondot_: things are garbage collected. just build it, and wait til its slow before you worry about memory.
07:27 < jondot_> ljharb: what if its a 10M items array ?
07:27 < ljharb> whiskers75: you can also do (commands[cmd] || defaultCommand)() if you want
07:28 < jesusabdullah> When working with datasets I'll regularly make a copy of the entire dataset.
07:28 < jesusabdullah> If that's not horribly inefficient idk what is.
07:28 < jesusabdullah> but it's easy to reason about.
07:28 < ljharb> jondot_: if you have an array that large, you'll probably run into trouble on your own no matter what.
07:28 < jesusabdullah> and if it's okay to do with a large dataset, it's probably okay for you.
07:28 < ljharb> i'd say if you're working with large datasets, you should be doing that work in hadoop, or some other service that's good for large datasets.
07:28 < jesusabdullah> well
07:28 < jesusabdullah> I should say small dataset
07:29 < AAA_awright> ljharb: For the object-lookup case absolutely that's better, but I reserve the right to use continue and return in my switch statements to break the iteration of a for loop and out to the current function, respectively
07:29 < jesusabdullah> in fact, you may even say I misspoke
07:29 < ljharb> if it's small enough to do in JS, then yeah, don't worry about the memory
07:29 < jesusabdullah> for actually large datasets you have to ask the tough questions like, "how the Hell am I going to run this on more than one computer"
07:29 < ljharb> AAA_awright: Array#some and Array#every. why do you even need for loops?
07:29 < ljharb> truer
07:29 < jondot_> ljharb: whats small enough? i think 100k is immediate for me, and 10M would be the final size
07:29 < ljharb> jondot_: i don't know. run it until it crashes. then subtract one, and thats the biggest it can get.
07:30 < AAA_awright> Because you can't break an array#forEach
07:30 < ljharb> AAA_awright: i said Array#some, which you absolutely can break
07:30 < ljharb> AAA_awright: some breaks on return true. every breaks on return false. you don't need for loops.
07:30 < AAA_awright> Yeah, and that has weird issues with it but I guess
07:30 < jesusabdullah> some and every can be used as breakable forEach's. I do this regularly.
07:31 < ljharb> at this point, i consider for loops an antipattern 99% of the time, and switch 100% of the time.
07:31 < ljharb> and the only time i've let a for loop past code review is when it's building an array of months or years for a date picker :-)
07:31 < AAA_awright> I consider it slightly less readable
07:32 < AAA_awright> I do use it, I found myself stopping to use it because I remembered I was coding for web browsers
07:32 < ljharb> why? i find them far more readable. plus you don't need to create vars that pretend you have block scope, ie iteration vars
07:32 < jesusabdullah>  for loops don't create scope. Everything else does.
07:33 < jesusabdullah> Scope make things a lot easier.
07:33 < ljharb> AAA_awright: https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js problem solved.
07:33 < AAA_awright> jesusabdullah: Just functions
07:33 < ljharb> AAA_awright: all the shimmable es5 stuff is in there, and that file should be on every single website ever made imo.
07:33 < jesusabdullah> That's the point AAA_awright, .forEach, .some and .every all take a function argument, hence the creation of a closure.
07:34 < AAA_awright> ljharb: Well browser, idealls
07:34 < ljharb> also map, reduce, and filter
07:34 < ljharb> so beautiful
07:34 < ljharb> AAA_awright: ?
07:34 < AAA_awright> *ideally
07:34 < AAA_awright> I use those regularly
07:35 < ljharb> you don't have to worry about web browsers with that shim.
07:35 < AAA_awright> reduceRight even though it's a pain to get right
07:41 < ljharb> isn't [].reduceRight just [].reverse().reduce ?
07:44 < [AD]Turbo> hola
07:45 < AAA_awright> reverse... function?
07:48 < ljharb> yes, Array#reverse
07:54 < SubStack> ljharb: right folds are a little different from left folds
07:55 < ljharb> SubStack: how?
07:56 < SubStack> ljharb: hmm odd, in javascript you seem to be correct
07:56 < SubStack> in other places the args are sometimes flipped
07:57 < `3rdEden> Does anyone know if there's a netbeans protocol module for node?
07:57 < ljharb> SubStack: ah, ok gotcha. but functionally equivalent everywhere, just perhaps diff args on the iterator
07:57 < `3rdEden> (http://vimdoc.sourceforge.net/htmldoc/netbeans.html)
08:09 < strk> can I use linux-tick-processor shipped with node-0.8 against a v8.log produced with node-0.4 ?
08:10 < _Tristan> yes
08:11 <@konobi> strk: of course, best in class is node on smartos in terms of debugging... but iirc it should still work
08:13 < strk> I get a silent _nothing_ as output :/ -- could have to do with a bug in the script
08:16 < _Tristan> why do people hate magic methods?
08:16 < ljharb> magic hides bugs.
08:16 < strk> indeed
08:16 < strk> vood debugging is painful
08:16 < strk> *voodoo
08:17 <@konobi> just... enough... rope...
08:17 < whiskers75> if i run console.log involving an async function, will it wait until the function returns something before logging?
08:17 < _Tristan> magic hides bugs...?
08:18 <@konobi> more unexpected side effects which can lead to bugs
08:18 <@konobi> bugs that take _forever_ to track down to "magic"
08:18 < AAA_awright> Unexpected behavior = bad
08:18 <@konobi> this is why monkey patching is BAD... mkay
08:19 < AAA_awright> The [[Get]] proxy can be useful *sometimes*... there was one case... I forget which, and even then I forget what it was so I must have worked around it
08:19 < AAA_awright> So point being, bad
08:19 < SomeoneWeird> whiskers75, no
08:19 < whiskers75> SomeoneWeird: so how do I make it wait?
08:19 < AAA_awright> whiskers75: Why does it need to wait?
08:19 < AAA_awright> It depends
08:19 < SomeoneWeird> asyncmethod(function(response) { console.log(response) });
08:20 < _Tristan> how is monkey patching related to magic methods?
08:20 < whiskers75> I want to run callback(null, login()) and login is async.
08:20 < whiskers75> and callback is inside a REPL
08:21 < whiskers75> and login uses return 'blah's
08:21 < AAA_awright> uhhh
08:21 < SomeoneWeird> why?
08:21 < SomeoneWeird> use callbacks
08:21 < stagas> whiskers75: login(callback) ?
08:21 < AAA_awright> whiskers75: The only reason the async nature of console.log would be a problem is if you're calling process.exit() before the text has been flushed to the console
08:22 < whiskers75> oh ok, ill add a callback argument to my login function:)
08:22 < whiskers75>  :)*
08:22 < AAA_awright> console.error is synchronous for that reason
08:29 < whiskers75> is db.set() async?
08:30 < SomeoneWeird> if it says it is, it is
08:30 < SomeoneWeird> if it wants a callback, it is
08:31 < SomeoneWeird> if db = database, it probably is
08:31 < whiskers75> ok
08:31 < whiskers75> it's from node_redis
08:31 < whiskers75> npmbro docs redis
08:31 < SomeoneWeird> oh
08:31 < SomeoneWeird> it is, i think
08:31 < whiskers75> ok
08:31 < SomeoneWeird> with an optional callback though
08:31 < whiskers75> thanks
08:32 < SomeoneWeird> db.set('key', 'value', function(res) { console.log(res) });
08:33 < whiskers75> is there an 'or' operator like &&?
08:36 < whiskers75> will running callback() end a function, or not?
08:37 < MerlinDMC> no but if you just use return callback() it will ;)
08:38 < strk> I've seen 'return callback()' used in many places, but I always think the author had no idea about callback return
08:38 < whiskers75> i'll just use callback() and then return
08:38 < strk> yeah, that's how I usually change that code :)
08:39 < whiskers75> makes a lot of sense
08:39 < strk> if (whatever) { callback(); return; }
08:39 < whiskers75> yeah
08:39 < strk> especially in Step, where an _undefined_ return is handled differently than a non _undefined_ one
08:40 < strk> (the latter considered like a callback invocation)
08:40 < strk> another case of "magic" making your life hell
08:54 < mtsr> Hi, I'm having some trouble with facebook being unable to parse our static html served through express.static. When I use the facebook linter it gives a 206: Could not retrieve data from URL. If I serve the same page using e.g. nginx it works fine. Can anyone help?
08:54 < _Tristan> http://i2.listal.com/image/2260593/500full.jpg There's no such thing as magic!
08:54 < ljharb> mtsr: compare the headers from both
08:54 < mtsr> ljharb, headers and bodies are identical
08:54 < mtsr> One strange thing I noticed though:
08:55 < mtsr> If I curl the first 40k (like facebook does) using -r 0-40960 I get back a strange content-length from nodejs
08:56 < ljharb> thats probably it
08:56 < mtsr> Content-Range: bytes 0-40960/10618 Content-Length: 40961, which is odd, as the page is only 10618 bytes long.
08:56 < mtsr> But this looks like an issue in either express or nodejs to me
08:57 < christophe_> Hello
08:57 < mtsr> Nginx returns the expected: Content-Range: bytes 0-10392/10393 Content-Length: 10393
08:57 < christophe_> I moved to ember 1.0 pre today
08:58 < mtsr> ljharb, do you agree that the content-length from the nodejs header looks incorrect?
08:58 < stagas> mtsr: it's a bug in the static middleware
08:58 < ljharb> yep
08:59 < christophe_> And I am having troubles with the handlebars helper 'editable' as it is in the contact exemple
08:59 < whiskers75> why does this code throw an error? callback('Logged in as: ' + players[sockets.indexOf[socket]);
08:59 < whiskers75> the error is: unexpected token )
08:59 < stagas> mtsr: https://github.com/visionmedia/send/blob/master/lib/send.js#L332-386 it uses the range diff to set the content-length instead of the stat.size
09:00 < entitydigital> whiskers75: square brackets on indexOf
09:00 < whiskers75> ah thanks
09:00 < stagas> mtsr: I guess that's right, but when calculating len it should check if it's smaller
09:01 < mtsr> stagas, Cool, that means I can patch it :)
09:01 < mtsr> Thanks!
09:01 < christophe_> sorry wrong channel
09:02 < stagas> mtsr: yeah you should make a pull request with the fix also
09:03 < mtsr> Thanks for finding the line :)
09:06 < stagas> mtsr: I'm not sure what the correct behavior should be though, ie asking for 500-1200 on a 1000 byte file should it fix the range like 500-1000 ?
09:07 < mtsr> That's what nginx does, I'll see if I can find it in the rfc, I guess
09:08 < stagas> mtsr: maybe in 365: options.end = Math.min(ranges[0].end, stat.size) should be good
09:11 < mtsr> stagas, Yeah, that seems correct to me, as both the content-length and the -range need to be capped.
09:11 < mtsr> I'll still quickly check the rfc though.
09:13 < whiskers75> why does this code let me login to any user with any pin? http://pastebin.com/r1DUgQPm
09:13 < stagas> mtsr: Math.min(ranges[0].end, stat.size - 1) probably because the range is 0-based and size is not
09:17 < _Tristan> I'm storing multiple bson documents in one file, what can I use to separate them? I was previously using json and \0 but bson uses \0...
09:22 < whiskers75> bump
09:45 < whiskers75> why does this code let me login to any user with any pin? http://pastebin.com/r1DUgQPm
09:46 < SomeoneWeird> not enough code to know what it's doing
09:46 < Deathspike> whiskers75: Use the callback.
09:51 < mtsr> stagas, Thanks for the help. I've submitted a pull request.
09:54 < stagas> mtsr: cool!
10:03 < radiodario> has anyone got experience with node-irc? i'm trying to use the simple example bot on the repo but i can't get it to connect to freenode
10:10 < samholmes> Hey, are there any interesting projects that try to bring web apps to the local side of things using Node.js? I'm talking about a project that could make it easy to install local apps and run them through your web browser.
10:10 < samholmes> This would be very interesting to see.
10:11 < freewil> not consumer type apps
10:12 < freewil> there are some dev tools that i would put under that category
10:12 < samholmes> More developer apps then?
10:12 < samholmes> freewil: I see. But I'm talking about a consumer project actually
10:12 < freewil> right
10:12 < samholmes> How it could work is you install a load balancer that starts on start-up and is accessed through a local IP.
10:12 < freewil> why would you need a load balancer
10:13 < samholmes> you just type something like "local" in your address bar then it'll load a quick web-page that shows all your installed apps.
10:13 < freewil> oh
10:13 < freewil> that's an interesting idea
10:13 < samholmes> freewil: I actually meant a proxy
10:13 < samholmes> freewil: Indeed an interesting idea.
10:13 < samholmes> Each app will need to plugin to the "loader" in a very non-dependent way
10:14 < samholmes> I was thinking maybe listening on localhost on a unique port for each app, but that doesn't seem very scalable.
10:14 < freewil> so this sounds like a consumer app platform
10:15 < samholmes> Rather, you could just have a single port, and the "loader" would proxy the requests to each app based on either a subdomain or path.
10:15 < freewil> you would have to have a standard way for the framework to specify the port so the app knows what port to listen on
10:15 < freewil> either one
10:16 < samholmes> So apps listen to a special port, and the platform proxies requests to that port, but then all apps will get the messages.
10:17 < samholmes> Maybe, you require in a module in your app. The module is used to interface with incomming messages?
10:17 < freewil> well i was thinking the framework would start an app specifying some env var - i think heroku does something like this
10:17 < freewil> so it would be like PORT=8233 someapp.js
10:18 < samholmes> So only one app runs at a time?
10:18 < freewil> no the framework would choose from a pool of available ports
10:18 < samholmes> Oh, you mean the platform starts the app with a specified port?
10:18 < samholmes> I see
10:18 < samholmes> Good idea.
10:18 < freewil> yes that the platform would choose from some "pool" or range
10:19 < freewil> i think the subdomain/path idea would be better though
10:19 < samholmes> This seems like a hot idea. I think there's a project out there for porting a GUI framework as a node module, but why do that when you already have the browser?
10:20 < samholmes> freewil: You could do both. You have local/myapp start the app and proxy to the app's port.
10:20 < anu_free> hi,  i am new to node.js. I want to know what should i use if my users need to connect to same server-port with different user specific configurations
10:21 < freewil> i think they will always be a place for native apps
10:22 < samholmes> freewil: what do you mean?
10:22 < samholmes> anu_free: user specific configurations? Do you mean sessions like in PHP?
10:22 < freewil> non-web-based apps
10:22 < freewil> like an android app
10:22 < freewil> would be native
10:22 < samholmes> who's to say what's native and what's not?
10:23 < samholmes> I mean, android apps are java apps, am I right?
10:23 < samholmes> WebOS was using node.js in their OS.
10:24 < samholmes> There could be a point where a computer (chrome OS) uses only web technologies to the point were it doesn't matter whether it's called native or not, it's all about the user experience.
10:24 < anu_free> samholmes: in particular user will specify the files to load. I want my browser to load with those files before starting. 
10:24 < samholmes> In the end, it's about the user experience, that's why we design software.
10:25 < samholmes> anu_free: You'll need to store session data and put a cookie on their computer to know it's them.
10:25 < samholmes> anu_free: Have you worked with any other web tech before node?
10:25 < anu_free> samholmes: yes. but how to start the instance on same port
10:26 < anu_free> samholmes: different instances on same server-port
10:26 < samholmes> anu_free: You only have one process on a port at a time.
10:26 < samholmes> There's no way of getting around that, it's a deep-rooted computer restriction.
10:27  * samholmes could be wrong.
10:27 < anu_free> samholmes:yes. so multiple processes is needed right
10:27 < samholmes> anu_free: not necessarily. All you need to do is have one process "track" each users, then serve content to each user dynamically.
10:28 < samholmes> anu_free: Are you using any frameworks like express?
10:28 < anu_free> samholmes: is it possible to serve content dynamically. yes express i am using
10:28 < samholmes> anu_free: Look into the connect middleware for sessions and cookies.
10:29 < samholmes> Once you put these middlewares in place, each user's session data can be accessed simply through req.session
10:30 < wltsmrz> Have you heard of "Chrome Apps," sanholmes
10:31 < anu_free> samholmes: ok. I got so confused. I tried socket.io, cluster.nothing answered my problems. Anyways i will go through this now. Thankq
10:31 < samholmes> wltsmrz: Yes, but they don't have node.js
10:32 < samholmes> anu_free: np. Hope I helped.
10:32 < wltsmrz> Functionally is there anything different from your hypothetical distribution platform and a browser-agnostic set of chrome apps / app store?
10:32 < wltsmrz> I just woke up so maybe I've missed something.
10:33 < wltsmrz> You are suggesting an npm for browser apps, right?
10:44 < strk> can node do blocking read from stdin?
10:45 < samholmes> wltsmrz: I was suggesting a lightweight "platform" that starts up on system boot and exposes itself through a local IP (maybe masked under a domain via the host file or w/e), when you access it, it'll display all your apps installed as well as ones you can install. Each app is run on the node platform.
10:45 < rio{> strk: Have you tried readSync
10:45 < samholmes> strk: No blocks! Unless you're a baby. :P
10:46 < strk> rio{: I will right now
10:46 < strk> samholmes: want to implment a command-line tool, read command from user, execute them..
10:46 < samholmes> but why can't you just use the async read?
10:47  * strk finds http://stackoverflow.com/questions/3430939/node-js-readsync-from-stdin
10:47 < strk> well, possibly, yes
10:47 < rio{> Whats the point if you have to wait for it to complete before continueing anyways?
10:47 < strk> right
10:48 < strk> rio{: have an hint for line-oriented buffering too ? 
10:52 < rio{> strk: Hmm nope sorry, but I would be interested if you find any useful info about it
10:53 < strk> https://github.com/nickewing/line-reader
10:54 < strk> not sure it's worth using a module for that
10:54 < stagas> line reading is in core http://nodejs.org/docs/latest/api/readline.html
10:55 < strk> ah, this sounds better !
10:55 < strk> Stability: 2 - Unstable -- is it new in 0.8 ?
10:56 < stagas> strk: no it's been around a couple of stable versions, just not well documented as now
10:58  * ProblemEmitter emits: 'problem'; when trying to run the binary distribution package, i get the following error: ./node: /lib64/libc.so.6: version `GLIBC_2.9' not found (required by ./node)
10:58 < ProblemEmitter> it's repeated 3 times with version numbers 2.9, 2.6, 2.7
10:59 < ProblemEmitter> $ uname -a: Linux dn44 2.6.18-194.26.1.el5 #1 SMP Tue Nov 9 12:54:20 EST 2010 x86_64 x86_64 x86_64 GNU/Linux
11:16 < liam> hello
11:17 < liam> how much memory does it usually take a node.js server process? I've mine that starts at 9-10m and after a while it goes up to 60+mb? is that normal or some memory leaks I should hunt?
11:18 < strk> liam: I observed similar behavior and still doing memory profiling -- NOTE: --trace-gc is your friend
11:18 < strk> liam: I suspended the profiling activity on a pseudo stable 48mb
11:18 < strk> (ie: as soon as I got the memory back down to <50 mb
11:19 < liam> strk: I'll try that out, thank you
11:21 < liam> I just hope that nodejs+redis will able to manage thousands of requests/second without crash :-/
11:21 < liam> will be*
11:22 < SomeoneWeird> it can :)
11:22 < liam> SomeoneWeird: on a simple vps, not using an entire google datacenter :P
11:23 < SomeoneWeird> it can :)
11:23 < liam> SomeoneWeird: great :-)
12:30 < strk> interesting, also node-0.4 had readline, only seems somewhat unusable
12:30 < strk> TypeError: Object #<Object> has no method 'resume'
12:30 < strk>     at Object.createInterface (readline.js:38:10)
12:31 < strk> ideas about it ? the object "resume()" is attempted to be called against is process.stdin
12:46 < CIA-93> libuv: Ben Noordhuis master * rbf28aa4 / src/unix/process.c : unix: drop SPAWN_WAIT_EXEC guard in process.c - https://github.com/joyent/libuv/commit/bf28aa4e784785ea4f92dd250b82e24535d5a1df
12:51 < dmilith> damn
12:51 < dmilith> how to install npm on osx now?
12:51 < dmilith> isaacs: curl installation instructions arent working at all
12:51 < dmilith> I'm unable to install npm "normal" way..
12:52 < mmalecki> dmilith: it's bundled with node
12:52 < mmalecki> so use whatever node installation method you prefer and it'll get installed
12:52 < dmilith> it is not, if You're using brew (which is using --without-npm cause some reason)
12:52 < dmilith> I don't get why
12:52 < dmilith> https://raw.github.com/isaacs/npm/9175c793441a6416be71975410b39e8ca5412841/scripts/install.sh isn't working either
12:53 < mmalecki> well, installing node with brew isn't a good idea
12:54 < mmalecki> there's an os x package
12:54 < dmilith> I hate when someone just changes something perfectly working just _because_
12:55 < dmilith> what's wrong with curl http:/... | sh ?
12:55 < lperrin> I've had all sorts of weird bugs with homebrew's node.js package as well
12:55 < dmilith> what if someone have old node and needs new npm?
12:56 < dmilith> mmalecki: anyway, node .pkg for OSX is broken
12:57 < dmilith> it's requiring me to use sudo
12:57 < dmilith> and hacking working stuff
12:57 < jeffstieler> can anyone point me to a good explanation of the process of contributing to an npm module? i'm having a terrible time even running tests for a module i've pulled the git repo for
13:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:07 < dmilith> I _really_ don't understand what caused such a regression with npm
13:11 < strk> so, the "readline" module is being very nice, but it does have bugs
13:12 < strk> like, if I STOP and RESUME the process, node.js gets out of the "reading loop"
13:15 < strk> uhm, .on('SIGCONT', function() { rl.prompt() }) fixes it
13:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:35 < WarheadsSE> Alright guys, I'm bumping node to 0.8.6 for Arch Linux ARM.. what's the "new" installer.js replacement call ?
13:37 < WarheadsSE> Nexxy: isaacs piscisaureus_ et all ? ^
13:40 < bnoordhuis> WarheadsSE: tools/install.py > *
13:40 < milani> bnoordhuis, I read that there are pkg for OSX
13:40 < bnoordhuis> milani: that's correct
13:40 < WarheadsSE> that what it looked like, but i prefer to check sometimes
13:41 < milani> bnoordhuis, is it generated by node? any third party?
13:42 < bnoordhuis> milani: it's built by us
13:43 < milani> wow. I couldn't find the tools you use. 
13:43 < milani> by you I mean node.
13:44 < milani> bnoordhuis, is it in the repo? how should I generate it here for myself?
13:59 < WarheadsSE> bnoordhuis: all fixed.. there was an intermediate time where installer.js was used, yes?
13:59 < bnoordhuis> WarheadsSE: yes
14:01 < flexd> oh, balls.
14:01 < flexd> I kind of want to make use of https://npmjs.org/package/Travis
14:01 < WarheadsSE> K, that was all I needed to adjust was to remove a sed from the upstream package tweak
14:01 < flexd> Then I looked at the dependencies
14:01 < flexd> and then I looked at the dependencies of hoarders (which Travis is dependant on).
14:01 < flexd> SHIT.
14:01 < flexd> :(
14:06 < WarheadsSE> hehehe
14:06 < WarheadsSE> hoarders is huge
14:06 < WarheadsSE> but! you won't be missing any dependancies!
14:07 < flexd> I'd spend a year installing it all :p
14:07 < matthewrobb> anyone know if its possible to enable a v8 flag during run time?
14:08 < WarheadsSE> bnoordhuis: still have a ugly v8 bug, but at least node is happier :)
14:16 < AAA_awright> I suggest var ___ = "mingle";
14:16 < AAA_awright> But mabe other people have better suggestions for the /topic
14:17 < AAA_awright> Guys I need a suggestion: What should I call a content type that publishes a body, author, date, and similar metadata, as opposed to a Page which is only a body, with no displayed metadata. I'm thinking "Story" or "Post"
14:18 < mmalecki> AAA_awright: entity?
14:18 < AAA_awright> Too generic
14:18 < AAA_awright> What would be an entity anyways? Isn't that rather well-defined in HTTP?
14:19 < AAA_awright> Yeah, it is
14:19 < mmalecki> no actual idea
14:19 < AAA_awright> "blog post" is what I'm going after, but that's way too speciic
14:20 < AAA_awright> *specific
14:20 < AAA_awright> Maybe just "Post"? Is there some word that by definition includes author and date metadata?
14:21 < mmalecki> AAA_awright: article?
14:22 < AAA_awright> hmm
14:22 < AAA_awright> "article" only suggests that it's included along with other articles
14:23 < AAA_awright> So not inaccurate but not what I'm going for
14:23 < Senji> Article/Post is ok 
14:23 < Senji> these things are pretty ambiguous by definition
14:24 < AAA_awright> Yeah, but nonetheless the definitions are different in subtle ways
14:25 < AAA_awright> A post is more of an announcement, so that implies a date and publisher more than anything else
14:26 < alFReD-NSH> Do you guys know any open source real world  use case of streaming json parser?
14:27 < alFReD-NSH> kinda like using this library, https://github.com/dominictarr/JSONStream
14:28 < bradleymeck> alFReD-NSH, none that wouldnt be easier using line delimited json
14:28 < alFReD-NSH> I'm just looking if that library or anything like it been used anywhere
14:30 < alFReD-NSH> Gonna try to write one like that, but a bit more memory friendly
14:30 < alFReD-NSH> looking for examples, so I can build my test cases around them.
14:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:38 < AAA_awright> alFReD-NSH: Really massive JSON exports
14:38 < AAA_awright> Like, gigabytes
14:38 < alFReD-NSH> that's what I have in my mind
14:38 < AAA_awright> There's about a 4x overhead (!!) to using JSON.parse()
14:39 < AAA_awright> Compared to pure interperted ES
14:39 < alFReD-NSH> yeah, using JSON.parse may use less CPU time, but will have a lot of latency, since it has to be buffered...
14:40 <@isaacs> dmilith: just install node.  npm comes with it
14:40 <@isaacs> dmilith: or curl https://npmjs.org/install.sh | sh
14:40 <@isaacs> dmilith: or download the shell script and run it
14:44 < Taar779> Could someone help me out with this error? I'm trying to render a couple jade files but the renderFile() method throws a "no such file or directory" error. This is a bit confusing since the file path should point to the files. Here is the code, traceback and file structure: http://vpaste.net/agmyN Thanks.
14:46 < dmilith> isaacs: ;]
14:46 < dmilith> isaacs: did You try second one?
14:46 < dmilith> It worked, sure. But it is not working now
14:47 < dmilith> anyway.. if You want to give https You should also give -k.. but it's broken anyway
14:50 < dmilith> isaacs: that's why I reported it
14:56 <@isaacs> dmilith: works for e
14:56 <@isaacs> *me
14:56 <@isaacs> dmilith: are you on linux?
14:56 < AAA_awright> Taar779: You shouldn't need the leading ./ since it's relative to the CWD, do you know what the current working directory is?
14:56 < dmilith> isaacs: osx
14:56 < dmilith> isaacs: same on bsd
14:56 < AAA_awright> Taar779: You probably want to prefix that with __dirname
14:57 <@isaacs> dmilith: "not working" <-- be more specific
14:57 <@isaacs> dmilith: what happens?
14:57 < AAA_awright> And use path.join(__dirname, 'templates/formatSomething.jade')
14:58 < dmilith> isaacs: I used http like on github page: curl http://npmjs.org/install.sh | sh
14:58 < dmilith> sh: line 1: syntax error near unexpected token `newline'
14:58 < dmilith> sh: line 1: `<html>Moved: <a href="https://npmjs.org/install.sh">https://npmjs.org/install.sh</a>'
14:58 < dmilith> with https it's working
14:58 <@isaacs> dmilith: ok, kewl
14:59 < freewil> im really missing the npmjs.org search
14:59 < freewil> im assuming this google search is a half-measure?
15:03 < RangerMauve> Hey, is there a way to distribute precompiled node.js binaries so that I can distribute an app to computers that don't have node installed?
15:04 <@isaacs> RangerMauve: os?
15:05 < RangerMauve> Preferably the three major ones.
15:05 < RangerMauve> But at least Windows.
15:06 < strk> Error: write ECONNRESET -- it's happening on a "huge" path
15:06 < strk> (http request)
15:09 < mmalecki> dominictarr: food?
15:10 < dominictarr> mmalecki, sure!
15:11 < mmalecki> dominictarr: okay, first stop is the ATM
15:11 < thanpolas> then we take manhattan 
15:14 < flexd> Honestly damnit, I cannot be the only person in history wanting to extract urls from a string in javascript/node..
15:14 < flexd> On page 8 of the google results now :/
15:15 < gkatsev> flexd: get a regex and run str.match?
15:16 < Benvie> for more complicated stuff like scraping people just full blown DOM and something like jQuery
15:16 < Benvie> that's actually the first example here https://github.com/appjs/appjs/wiki
15:16 < gkatsev> Benvie: is that even a sentence?
15:16 < Benvie> missing a few words =D
15:17 < rio{{> :D
15:17 < slaskis> flexd: https://github.com/publicclass/addressable has an #extract method
15:18 < flexd> gkatsev: yeah, looking to find a decent regex.. the ones Ive found so far are missing bits :)
15:18 < gkatsev> a pretty good video about scraping: http://vimeo.com/34152299
15:18 < flexd> I've been googeling stuff like node.js capture url from string
15:18 < flexd> I am just parsing IRC messages at them oment
15:19 < flexd> the moment*
15:19 < flexd> But not all of the url bits are being picked up.
15:19 < Benvie> should search for js regexp url
15:19 < Benvie> javascript regex url parsing
15:20 < flexd> Yeah, been there
15:20 < flexd> but addressable looks promising :)
15:20 < flexd> I also found what proclaimed to be the ultimate URL regex
15:20 < flexd> with lots of comments
15:20 < flexd> But that is broken :p
15:21 < Benvie> and in node, not the browsr right?
15:21 < gkatsev> hm... looks like regular-expressions.info only has an email example
15:21 < Benvie> in the browser you can use this
15:22 < gkatsev> I was sure they also had one an url
15:22 < Benvie> function parseURL(a){return function(b,c,d){a.href=b;c={};for(d in a)if(""+a[d]===a[d])c[d]=a[d];return c}}(document.createElement("a"))
15:22 < Benvie> er
15:22 < Benvie> function(a){return function parseURL(b,c,d){a.href=b;c={};for(d in a)if(""+a[d]===a[d])c[d]=a[d];return c}}(document.createElement("a"))
15:22 < flexd> Good luck running that in node :P/
15:22 < flexd> No dom?
15:22 < Benvie> well you can but not without loading one up
15:22 < gkatsev> jsdom, phantom, appjs, others
15:23 < Benvie> what about node's url thing/
15:23 < Benvie> I guess that's for parsing one as a whole
15:23 < Benvie> not finding them in strings
15:23 < Benvie> http://xregexp.com/
15:23 < Benvie> second example
15:23 < Benvie> XRegExp.matchChain(html, [
15:23 < Benvie>   {regex: /<a href="([^"]+)">/i, backref: 1},
15:23 < Benvie>   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
15:23 < Benvie> ]);
15:24 < flexd> anyway, addressable.extract seems to work
15:24 < flexd> http://cognitive.io:2000
15:24 < flexd> Picked up all those, and they look correct 
15:24 < Benvie> XRegExp is basically the omega solution when it comes to RegExp for JS
15:24 < flexd> The other regexes would sometimes just cut out stuff after ? or /stuff/ 
15:25 < flexd> Yeah, just need to match them in strings
15:26 < slaskis> flexd: if you find any urls that fail then go ahead and post an issue
15:26 < flexd> Will do :)
15:26 < flexd> I plan on aggregating shitloads of stuff for fun, so it will certainly get passed a few :p
15:28 < slaskis> great! here's the current test case for it (it's based on daring fireballs regex): https://github.com/publicclass/addressable/blob/master/test/fixtures/daring-regex.txt
15:29 < flexd> cool :)
15:31 < flexd> slaskis: your website is really confusing.. :D not sure if I hate it or love it.
15:32 < slaskis> flexd: haha, thanksâ€¦? :P
15:33 < slaskis> we're working on a new one. although it will still be a grid
15:34 < flexd> I kind of like it, but it took me a while to figure out all those things are blog posts?
15:34 < flexd> Actually does not work until I whitelist the site n my popup blocker heh
15:35 < slaskis> oh really? 
15:35 < slaskis> strange, there's no popups?
15:36 < flexd> It's Better Popup blocker for chrome
15:36 < flexd> it's the popup nazi, even javacript stuff (like alerts) is denied as well.
15:36 < flexd> So I have to whitelist a lot of pages to even view video, but it stops a lot of crap :)
15:36 < slaskis> oh, so maybe it's blocking that preloaded thingie
15:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:37 < flexd> Yeah I guess, works now after whitelisting :)
15:37 < flexd> Seems like you guys do a lot of cool project
15:37 < flexd> s
15:38 < slaskis> we try to keep it fun ;)
15:43 < flexd> The best kind of projects :p
16:16 < jocafa> is anyone using tmux as part of their day-to-day workflow?
16:19 < revnoah> I have a 'best practices' type of question. I want to data from multiple collections for a homepage - in order to ensure that all find methods are executes, should I nest my Find commands or is there a better way?
16:19 < context> "want to data from"
16:19 < freewil> revnoah, as long as they dont depend on each other you don't need to next
16:19 < freewil> "nest"
16:20 < freewil> you can make the two find calls one after each other
16:20 < freewil> then you can wait for them both to return
16:21 < freewil> take a look at the async module
16:21 < freewil> https://github.com/caolan/async#parallel
16:22 < dnnsmanace> how do i create a new file with fs?
16:22 < revnoah> freewil, thanks I'll give that a try
16:22 < dnnsmanace> i am trying to write a buffer to a file and am creating a writestream but it seems i need to actually create the file first, how to do it with fs?
16:22 < tchopper> jocafa: I've been using tmux for several months now. Before that, I did everything in screen. I rarely use a terminal without a tmux session.
16:23 < maxogden> dnnsmanace: dont use streams if you have a buffer
16:23 < maxogden> dnnsmanace: unless it is a stream that emits buffers then using a write stream makes sense
16:23 < context> dnnsmanace: fs.open() ?
16:23 < bradleymeck> dnnsmanace: w+ for flags
16:23 < dnnsmanace> its just a buffer.. does fs.open() create the file?
16:24 < maxogden> fs.writeFile(buffer)
16:24 < maxogden> err ('name', buffer)
16:24 < maxogden> http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_encoding_callback
16:24 < dnnsmanace> thanks :)
16:24 < dnnsmanace> exactly waht i need
16:24 < dnnsmanace> so easy
16:25 < jocafa> tchopper:  do you have any nifty scripts/configuration tips?
16:26 < jocafa> this is what my tmux setup looks like right now http://dl.dropbox.com/u/543400/tmux.png    i'm still tinkering and making workspace shortcuts for projects
16:26 < owen1> glad to see Tim Caswell's video - https://peepcode.com/products/play-by-play-nodejs-creationix but not sure if i am happy with him demonstrating building middleware. i thought middleware will disappear from node one day.
16:27 < hoverbear> jocafa: That's ~awesome~ do you have the source anywhere?
16:27 < jocafa> hoverbear:  all my dotfiles are on https://github.com/jocafa/Bindle
16:28 < hoverbear> jocafa: Thanks. Do you have a moment to talk about OS X? Thinking of getting a mac and would love to ask a few questions.
16:28 < CIA-93> libuv: Ben Noordhuis report-execve-error * r9c6152c / (4 files in 3 dirs): unix: report execve() errors - http://git.io/ob-xMg
16:28 < jocafa> sure, sup?
16:28 < hoverbear> jocafa: Mind if I PM?
16:28 < jocafa> go 'head
16:31 < dnnsmanace> maxogden: any idea about this error: Error: ENOENT, stat './images/6115ba70-e176-11e1-b4b4-f95b33cdfff5'
16:33 < maxogden> dnnsmanace: what code generated it
16:34 < dnnsmanace> hmm, i think when another function tries to read it
16:34 < dnnsmanace> but nothing is getting written at all
16:35 < maxogden> fs.writeFile('test', new Buffer('hello'), function(err) { if (err) throw new Error(err); console.log(fs.readFileSync('test')) } 
16:36 < maxogden> (dont use sync functions unless you are typing code into irc)
16:37 < nlf> or sometimes the repl
16:37 < dnnsmanace> mahogden: <Buffer 68 65 6c 6c 6f> 
16:38 < dnnsmanace> maxogden: but no file appears
16:38 < owen1> revnoah: http://creationix.com/utahjs/slides.html#27 and the next slide
16:38 < owen1> revnoah: it's better to try using javascript itself, and only when u start feeling a pain to reach out and use external libraries like async.
16:39 < jocafa> utahjs rep-ra-ZENT!
16:39 < jocafa> Â¬Â¬
16:39 < owen1> the 'done' flag and the checkDone() function will make sure all the parallel functions finished their work.
16:39 < owen1> jocafa: ha?
16:40 < jocafa> <â€” not actually a member, never gone to meetings, but is in utah
16:41 < CIA-93> libuv: Ben Noordhuis report-execve-error * rf227ca6 / (4 files in 3 dirs): unix: report and store execve() errors - http://git.io/bLv4gw
16:42 < llrcombs> OK, I'm having a rather strange issue
16:42 < llrcombs> when I'm on an external computer, I can't curl a file from Node, but I can access the same file from Chrome
16:43 < llrcombs> when I ssh to the server, I can curl said file
16:43 < dnnsmanace> maxogden: seems like its writing to my root dir for some reason.. got it. 
16:43 < llrcombs> arm, I retract that
16:43 < llrcombs> looks like it's just a curl issue, sorry
16:55 < Domenic> So did I miss all the fun regarding axon?
17:33 < vipaca> What channel should I join to get help with C?
17:34 < DarkArgon> #c ? if it exists
17:35 < DarkArgon> ##c
17:38 < Domenic_> Not to be confused with #c#
17:38 < bradleymeck> ah, CSharp, how search engines, urls, irc, filenames, and various database injection attacks love thee
17:42 < Almindor> is there a way to add new functionality to node without restarting it? (something standardized, not a home-baked "read file with JS and execute")
17:42 < Almindor> I mean to the project
17:43 < Almindor> say you got a running server and you wanted to add a new api call or something without restarting it
17:46 < maxogden> usually you use two processes, wait for requests to close on the first and transfer them to the second
17:53 < DTrejo> npmbro help owner
17:55 < bradleymeck> random survey : https://twitter.com/bradleymeck/status/233258814978285568 oldest NPM module in use
17:56 < DTrejo> MODULE IDEA: you open your repl, you run _ = require("require")("underscore"); and it downloads the module from npm, and then tells you that it has it
17:56 < DTrejo> and then you use in your repl
17:56 < DTrejo> saves you about 2 seconds of work
17:58 -!- ServerMode/#Node.js [+o ryah] by pratchett.freenode.net
17:58 < AAA_awright> DTrejo: BAD idea with massive security implications
17:58 < maxogden> i always read through the code of every module i require before i use it
17:58 < maxogden> - nobody ever
17:58 < DTrejo> haha
17:58 < DTrejo> lol
17:59 < DTrejo> that had good comedic timing
17:59 < maxogden> thanks but it might have been network lag
17:59 < duko> I'm looking for a way to handle requires statements in scripts that are loaded in a browser
17:59 < AAA_awright> And code stability. Every new day you run it you would be running with different code.
17:59 < duko> the scripts are concatenated together and i do not want to use amd
17:59 < bradleymeck> duko, browserify
18:00 < duko> is there anything else? I don't really need the building functionality provided by browserify
18:01 < maxogden> then how are you going to use require?
18:01 < mscdex> bradleymeck: oldest as in last updated or created?
18:01 < DTrejo> AAA_awright: this would only be for invoking within the repl, really. So to making testing out/trying a module easier
18:01 < bradleymeck> mscdex last modified
18:02 < DTrejo> oh wait... you'd have to install this special module globally before it would work
18:02 < DTrejo> so it would be about as much work anyway
18:02 < AAA_awright> DTrejo: That makes it sound slightly better but pfft, you just know people are going to use that the wrong way
18:03 < mscdex> bradleymeck: not sure offhand, but on a related note i found a production server using node 0.1.10x yet ;-)
18:03 < DTrejo> could add a line in there that made it throw when used outside of the repl
18:04 < AAA_awright> I'd perhaps console.error("Using liverequire('e773d09483157a476a2f3b1fbc30ee40643c6bcf') for 'rdf'");
18:04 < bradleymeck> mscdex that is horrifying
18:04 < AAA_awright> mscdex: How can you tell? O.o
18:05 < mscdex> AAA_awright: it's one of the servers i manage
18:05 < mscdex> it's getting upgraded today though :-)
18:07 < Industrial> I'm getting Error: listen EACCES on a very simple example server that I am running on a cloud server that I just bought. I'm doing this with a non root user so I guess the user can't access that port. I'm not sure how to solve this.
18:07 < addisonj> wow... I thought were hardcode for having stuff in production in node 0.4.2 days, 0.1.10... thats scary
18:07 < mscdex> :-D
18:07 < WarheadsSE> Industrial: try a much higher port?
18:07 < Industrial> WarheadsSE: yeah, but what if I want to serve a site?
18:08 < addisonj> was it stable over its lifetime?
18:08 < Industrial> (or 20)
18:08 < mscdex> Industrial: use a port > 1023
18:08 < WarheadsSE> Industrial: then its time you got yourself sudo :)
18:08 < mscdex> addisonj: to be honest it wasn't be used a whole lot
18:08 < WarheadsSE> or, setup the machine appropriately to allow you to access that port 
18:09 < mscdex> Industrial: you can serve sites on any port... you could even redirect traffic with iptables
18:09 < mscdex> lots of different solutions
18:09 < Industrial> mscdex: mind if I pm?
18:09 < bradleymeck> Industrial: use port > 1023, port forward using pfilter or iptables etc
18:09 < addisonj> use nginx/haproxy/varnish to redirect
18:09 < addisonj> thats the good thing
18:10 < livinded> or just start as root and drop privs after you listen()
18:10 < bradleymeck> don't proxy using something that heavy duty unless you are terminating SSL etc.
18:10 < Industrial> mscdex: mind if I pm? >:O ty
18:11 < Industrial> derp
18:11 < Industrial> okay, lots of stuff to google now >:O! ty
18:11 < myndzi> ha, i like the nick (mscdex)
18:12 < mscdex> Industrial: i don't mind
18:12 < mscdex> myndzi: :-)
18:19 < Zarel> So, how do I fire a callback exactly once each time a request ends? res.on('end') and and req.on('error') only happen most of the time
18:20 < Zarel> Does anyone know what res.on('close') does? I think that might be what I'm looking for
18:20 < DTrejo> res.once('close')
18:20 < DTrejo> try it out
18:24 < Zarel> DTrejo, thank you!
18:25 < TehShrike|Work> marak left Twitter :-(
18:26 < mscdex> Zarel: 'close' should always fire, whether an error happens or a TCP FIN is not received (which generally causes 'end' to emit)
18:26 < timeturner> ah crap I missed the axon fight
18:26 < timeturner> wish there was a copy somewhere
18:27 < CIA-93> node: Ben Noordhuis master * r08b382c / tools/install.py : installer: remove c-ares header files - http://git.io/rQ08TA
18:27 < phpnode> timeturner: looks like marak got so upset he deleted his twitter account
18:27 < timeturner> as the saying goes: "good artists copy, great artists steal"
18:28 < adrianlang> wow
18:28 < timeturner> lol I made that up
18:28 < timeturner> actually I heard it in Pirates of Silicon Valley :P
18:28 < timeturner> although I'm sure there's some truth to it
18:28 < drudge> cry me a river plays over and over in my head
18:28 < phpnode> so pathetic, also asciimo
18:29 < timeturner> we need a copy of this grand fight
18:29 < adrianlang> (20:23:28) marak: You know what. Fuck this. I'm just gonna delete my account. Quest over.
18:30 < phpnode> lulz
18:30 < TehShrike|Work> I could probably pastebin a lot of it
18:30 < timeturner> please pastebin!
18:30 < TehShrike|Work> At least the contributions from the people I follow
18:30 < TehShrike|Work> If people care enough
18:32 < phpnode> his final tweets were just total meltdown
18:32 < Benvie> seemed to be going on about a bunch of nothing
18:32 < timeturner> seems pretty harsh
18:33 < timeturner> from tj's replies
18:34 < phpnode> no shit people don't want to work on his projects, who would want to work with someone like that?
18:34 < timeturner> whose projects?
18:35 < phpnode> marak's... at least the one he was referring to
18:35 < timeturner> (no context since maraks replies are gone)
18:35 < timeturner> ah yeah
18:35 < livinded> what does maraks work on?
18:35 < timeturner> no wait
18:36 < timeturner> most of his replies are showing
18:36 < scott_gonzalez> isaacs: Does the markdown module not support HTML blocks?
18:36 < mape> livinded: nodejitsu
18:36 < TehShrike|Work> Pastebin coming
18:36 < livinded> mape: ah, so kind of important
18:36 < phpnode> livinded: and hook.io and a load of other things. he does contribute, but he's got such an attitude
18:36 < mape> livinded: Co-Founder & Chief Evangelist
18:36 < livinded> so he's the zed shaw of node?
18:36 < phpnode> no
18:37 < phpnode> because zed is mostly right
18:37 < livinded> so he's the zenspider of node (if you were ever a ruby person)
18:37 < EyePulp> heh
18:37 < timeturner> zed just has a very direct way of putting things
18:38 < phpnode> whereas this guy is both very opinionated and incredibly rude, he still doesn't seem to get the concept of copyright
18:38 < EyePulp> he seems to have relaxed significantly since moving to python
18:38 < phpnode> it's the significant whitespace. it has a calming effect
18:38 < timeturner> lol
18:38 < EyePulp> possibly.
18:39 < livinded> I dunno, significant whitespace is fairly infuriating to me
18:39 < livinded> tracking down those bugs is always a pain in the ass
18:39 < EyePulp> you shouldn't get bugs with it, unless you
18:39 < EyePulp> use an editor that hates consistency
18:39 < EyePulp> =)
18:40 < livinded> vim doesn't always do the best with auto-indent
18:40 < phpnode> in my experience there are less bugs because usually you indent these things properly anyway, and you're no more likely to misindent than to miss a parenthesis
18:40 < livinded> and when I'm hacking on shit I'd rather just get it working that make it look nice
18:40 < bradleymeck> Marak has great ideas and is generally ahead of the curve in innovation when he does go toward a large goal, but he is often on the whipping post so he has to deal with a lot of flack from ppl.
18:40 < timeturner> mssocket has a much crappier api than axon does
18:40 < timeturner> nssocket*
18:40 < TehShrike|Work> timeturner: here it is, in reverse chronological order http://pastebin.com/R2MckgYU
18:41 < phpnode> bradleymeck: he doesn't have to choose between being innovative and not being an asshole
18:41 < timeturner> TehShrike|Work: sweet! thanks
18:41 < livinded> is anyone going to the js conf in dusseldorf in october?
18:41 < EnosFeedler> does anyone here know details of how socket sharing works with child_process.fork?
18:42 < prettyrobots> I R CONFUSE.
18:42 < bradleymeck> phpnode its a long story to him becoming upset so often. i would not blame him after all the random attacks on him from publicly posted code on a blog being used
18:42 < livinded> EnosFeedler: when a parents forks all sockets are copied
18:42 < bradleymeck> timeturner: it serves a slightly different purpose, nssocket is meant to include namespacing etc.
18:42 < phpnode> bradleymeck: the problem is, he didn't *get it*, still doesn't
18:43 < prettyrobots> When I start a process, 'data' events start coming it says very soon, it says data will be lost.
18:43 < prettyrobots> But, that's, okay...
18:43 < phpnode> that wasn't his code to use, he cannot accept it, he resorts to trashing the author, even after 2 years
18:43 < EnosFeedler> livinded: if I kill the child does the socket die or does the parent still have it to pass to another child?
18:43 < prettyrobots> That's not until the nextTick. I'm sorry ignore me.
18:43 < livinded> EnosFeedler: no, there's still a reference in the parent
18:43  * prettyrobots herps and derps
18:44 < livinded> generally you close the listening socket in the child as soon as you fork and close the new socket in the parent after the fork
18:44 < bradleymeck> phpnode if it is unlicensed, on the public internet, and no reply after an inquiry initially, rewritten after cease and desist, and then trolled for 2 years by the author?
18:44 < EnosFeedler> livended: ok thanks.  from the docs it says "Note that once a single socket has been sent to a child the parent can no longer keep track of when the socket is destroyed. " does this condition revert when the child is killed?
18:44 < bradleymeck> phpnode beware of ppl who will troll for 2 years after a mistake
18:44 < bradleymeck> and im not talking about marak
18:45 < livinded> EnosFeedler: I don't know if node does any magic in the background. This is all low level net code I'm talking about
18:45 < phpnode> bradleymeck: err, marak is the troll here, he literally reached out today and called that guy an asshole
18:45 < EnosFeedler> livinded: okay thanks. perhaps i can use this as an opportunity to go exploring in the node source code
18:45 < bradleymeck> phpnode, are we talking about TJ? or the old asciimo dude
18:45 < livinded> I can show you some C code that will describe what I'm talking about though
18:45 < phpnode> bradleymeck: i get that some people like Marak, but honestly he took a completely indefensible position there
18:46 < phpnode> bradleymeck: the original author of the ascii thing
18:46 < phpnode> patorjk
18:47 < livinded> EnosFeedler: not a bad idea. I think you're goin to have to look at libuv though. iirc node has a common interface for all streams that go through file descriptors and it's all implemented at the uv level
18:47 < zonetti> can excessive use of console.log affect the server performance?
18:47 < bradleymeck> phpnode i agree today against TJ was odd, but the original ascii code has ppl bringing it up after it was a mistake, hell i copy paste sometimes from tutorial sites that dont have licenses stated, if they come at me with a cease/desist it would be equivalent
18:48 < livinded> zonetti: yes
18:48 < bradleymeck> phpnode, have you never copy pasted code from a site that did not express the license explicitly?
18:48 < phpnode> bradleymeck: as far as i know the original author isn't sending his minions, people bring it up because he acted badly
18:49 < phpnode> bradleymeck: of course, but if someone told me it was copyrighted, i would remove it, i wouldn't trash the author and lol at how "awful" the code was, if it's so awful, why use it in the first place
18:49 < bradleymeck> the difference is patorjk and a lot of people have brought this up for any argument, even unrelated like today for years
18:49 < timeturner> "npm Patent Office" lol
18:49 < phpnode> bradleymeck: people rightly bring up the fact that he's being a hypocrite
18:49 < bradleymeck> phpnode patorjk even after it was resolved made it impractical for marak to post on public sites for months about anything
18:49 < phpnode> no, by his own behavior. marak did that to himself
18:50 < bradleymeck> phpnode patorjk following him for 3 months after he resolved the cease and desist is his fault?
18:50 < bradleymeck> you dont want to ever go to court of DMCA if thats your thinking
18:50 < mscdex> node.js rules!
18:50 < livinded> meh, if code is posted publicly with no license I generally consider it free game. To all of a sudden claim a different license is kinda dick
18:51 < phpnode> livinded: that is not how copyright law works. like it or not
18:51 < livinded> if you don't want people using your code don't post it or explicitely state it
18:51 < phpnode> and really, i agree. but i don't agree with the way Marak reacted when he got called out on it
18:51 < timeturner> marak has issues
18:52 < livinded> phpnode: just my .02
18:52 < timeturner> that's just how it is in the battlefield
18:52 < livinded> not defending anyone, but seems like both sidea have their issues
18:52 < timeturner> you cannot copyright an idea
18:52 < timeturner> period
18:53 < timeturner> you can copyright the implementation of it
18:53 < phpnode> if he hadn't trashed the author in his code, this would never have happened
18:53 < timeturner> ideas have no value in the real world
18:53 < timeturner> implementations do
18:53 < bradleymeck> both sides got over involved, timeturner thats not true, look at patent trolls
18:53 < timeturner> patent troll?
18:54 < bradleymeck> timeturner several US court cases have resolved in favor of ppl without implementation of a software patent for things suck as "an interface that displays your current location", they merely had an idea and layed out how it may look
18:54 < Zarel> mscdex, 'close' appears not to have fired
18:55 < phpnode> bradleymeck: it's not like patorjk summoned up an army of minions to attack marak. marak invited a huge backlash with his own behavior. patorjk isn't to blame in any way that i can see. it's his code, if he wants to keep it to himself, that's up to him.
18:55 < Aikar> i think my best option may be to use Haraka and custom code the imap copy feature, since im guessing postfix doesnt have a built in solution for this
18:56 < Aikar> err miss... meant for postfix XD
18:56 < timeturner> patent law is confusing shit if you can copyright ideas
18:56 < Aikar> anyone got any examples/advice on using Haraka to copy all incoming mail to a gmail account?
18:56 < Aikar> from imap
18:56 < Aikar> with imap*
18:57 < chasefarmer> is there a way to install 32 bit node alongside 64 and manage which version you're using in order to use something like appjs?
18:58 < milani> chasefarmer, I think nvm can do that.
18:58 < mscdex> chasefarmer: i think there are self-contained binary packages you can download now
18:59 < mscdex> chasefarmer: for *nix
18:59 < milani> mscdex, do they include both 64 and 32 bit versions?
18:59 < mscdex> milani: yep
18:59 < mscdex> milani: http://nodejs.org/dist/v0.8.6/
19:00 < Cesur> help me
19:00 < milani> no I mean can you have both 64 and 32 bit versions at the same time?
19:00 < mscdex> milani: sure, just use the right path
19:00 < milani> oh not that I want simply do node.
19:00 < milani> don't want to SET path each time.
19:00 < bradleymeck> phpnode 1. patorjk did expressly make efforts to attack marak even after resolution. 2. publicly posting code without license and without prompt reply about license is technically copyright, but in most cases considered public domain / fair use in court of public opinion and any court action such as cease and desist generally resolves the case 3. ppl copy pasta all the time, the infamy in this case resolves around the authors 
19:00 < bradleymeck> assumption of malicious intent and claims of lack of resolution even after rewrite, patorjk in some cases appeared to be making the idea of JS + Ascii rendering in similar manners as being his 4. marak did a similar turn around today against TJ, but without months of trolling, the issue today is probably gone now
19:02 < mscdex> milani: well, you can't expect it to magically know which version you want to use :-)
19:02 < Aikar> so does anyone see any flaws with haraka with a plugin that uses https://github.com/mscdex/node-imap/ and does ImapConnection.append(newincomingmessage) to Gmail? Basically forward my mail to Gmail w/o an actual relay, so that SPF records arnt checked. but im guessing this might bypass Gmail spam filters :/
19:02 < Aikar> err - reword: SPF Records are checked against the real incoming mails domain, and not my server which will always fail when using relayed messages
19:04 < Aikar> my current setup is so that paypal mails me, my server receives it, sees an alias for aikar@aikar.co to my actual gmail account, and forwards it to Gmail instead. Gmail shows it fine, but it looks like my server is spoofing mail since it was the last hop, and fails SPF 
19:04 < Aikar> (using paypal as an example of a valid domain with sPF checks)
19:05 < phpnode> bradleymeck: the whole point, is that marak refused to accept what he did was wrong, he will not even acknowledge it. he rages and rants at the original author, throws insults like a small child.... a bigger man would just accept it, apologise and move on. he brought the whole thing upon himself. no wonder people remember and hold it against him, he's acting like an asshole!
19:06 < bradleymeck> phpnode no arguement on that one
19:06 < bradleymeck> argument even*
19:06 < Aikar> whoa whats the drama?
19:06 < Aikar> link?
19:07 < phpnode> Aikar: http://pastebin.com/R2MckgYU
19:07 < phpnode> enjoyable meltdown
19:10 < gnujach> hi how to force a my clients use websocket in a faye server?
19:10 < chasefarmer> milani: hmm using 'n' already
19:10 < chasefarmer> have a feeling adding nvm will bork things
19:11 < milani> chasefarmer, I didn't try myself, but someone told me he is using nvm with appjs and it works fine.
19:11 < milani> and also tmpvar can help us. he used appjs so he may have a solution.
19:12 < chasefarmer> ideally I'd use n but understand if I need to take another route
19:13 < tmpvar> chasefarmer, for osx, I just bundled x86 node up and made it installable via npm
19:13 < Aikar> o.o dramafest
19:14 < tmpvar> chasefarmer, so running appjs stuff is done via `appjs path/to/entry.js`
19:15 < chasefarmer> tmpvar, sounds awesome. any examples of how to bundle the node install to work like that you know of?
19:15 < milani> tmpvar, we are going to support it in appjs soon. because I failed to get chromium for x86_64.
19:15 < prettyrobots> phpnode: Where is this dispute you're discussing?
19:16 < prettyrobots> timeturner: You can't copyright ideas, but you can patent them.
19:16 < prettyrobots> We're all much better of as developers if we can learn to share.
19:16 < phpnode> it was on twitter, but *someone* deleted their account, so TehShrike kindly pastebinned it here, start from the bottom: http://pastebin.com/R2MckgYU
19:17 < WarheadsSE> crickey. so when I *eventually* get to my twitter im gonna have to scroll past all that bullshit.
19:18 < tmpvar> chasefarmer, see https://github.com/appjs/appjs/tree/osx-global-install.  you should be able to `npm install -g https://github.com/appjs/appjs/tarball/osx-global-install`
19:18 < tmpvar> and then have an `appjs` on your path
19:19 < chasefarmer> tmpvar, sweet. thx much, I'll give that a go.
19:20 < prettyrobots> Node has been really bitter lately.
19:20 < tmpvar> chasefarmer, no problem.. also, here's a project that uses it https://github.com/tmpvar/tirc
19:20 < phpnode> prettyrobots: it's an evolutionary thing
19:20 < drudge> Node has no feelings
19:21 < prettyrobots> Node used to have feelings. Node used to be all about the love.
19:21 < phpnode> there are comparatively few people using node at the moment, so when someone kicks up a fuss, we hear about it. when it's more popular these rants will get lost in the background noise
19:22 < chasefarmer> tmpvar, nice I saw you tweet the video for that the other day. looks cool so far!
19:23 < prettyrobots> I have an idea! Something like Node, but with hugs.
19:23 < entitydigital> speaking of popularity, anybody know what the node scene is like in the UK? I'm relatively new to node and haven't heard of much going on
19:24 < phpnode> entitydigital: don't see much action tbh, but i'm not in london
19:25 < jcrew> phpnode: you sure it's not just that there are parts of the C/C++ community showing through?
19:25 < entitydigital> phpnode: I'm on the outskirts, techies I know have heard of it, some people are pretty open, I'm starting with a new company in a couple of weeks and I'm gonna try using it for at least some stuff
19:25 < jcrew> or at least coming over to try out node
19:26 < prettyrobots> entitydigital: Node.js is centered in Oakland, I'm told.
19:26 < s5fs> solid following here in Portland, OR too
19:27 < livinded> wish it was easier to find node work in LA
19:27 < livinded> nobody is hiring for it down here
19:27 < phpnode> wish it was easier to find remote node work
19:27 < s5fs> i see telework offers in here occasionally
19:27 < livinded> I don't even mind relocating. It just needs to be worth it
19:28 < livinded> well relocating to the bay or portland. That's about all I'm willing to move to
19:28 < mmalecki> livinded: try remote
19:28 < livinded> mmalecki: if I could find remote node work I'd be more than happy
19:28 < mmalecki> livinded: or, if it's bay, nodejitsu
19:28 < entitydigital> saw some interesting stats on avg salaries, seems node devs get paid well in comparison, at least in London but I guess that's because it's still quite niche
19:28 < mmalecki> livinded: hint: nodejitsu
19:29 < mmalecki> for both remote or bay
19:29 < bradleymeck> relocate to austin lol
19:29 < livinded> all the node jobs I've seen have paid considerably less that what I'm making doing rails
19:29 < RLa> is there channel for mongoose?
19:29 < phpnode> i was going to apply for a job at nodejitsu.. then i saw who the cto was
19:29 < livinded> wasn't willing to take the pay cut
19:29 < jcrew> who is the cto?
19:29 < phpnode> gutted
19:29 < phpnode> marak
19:29 < s5fs> livinded: i'd shoot for the bay personally, far more opportunity than portland (imho)
19:29 < AvianFlu> marak is not the CTO of nodejitsu
19:29 < mmalecki> hij1nx is the CTO
19:29 < AvianFlu> he's a developer and one of the founders
19:29 < phpnode> i thought he was?
19:29 < AvianFlu> no.
19:30 < phpnode> ah, well, even so, we would definitely clash
19:30 < prettyrobots> entitydigital: It will always be well paid, because its hard.
19:30 < livinded> s5fs: I love LA and don't want to move. But I will for a good company and a good job
19:30 < jcrew> why would you clash
19:30 < phpnode> because we're equally opinionated
19:30 < phpnode> and he is wrong. on the internet
19:31 < entitydigital> prettyrobots: true, but I think the fact that node devs are few and far between has something to do with it at the moment
19:31 < RLa> anyway, seems like not, but why was api changed from MyModel.find({ name: /john/i }, ['name', 'friends'], function () { }) to MyModel.find({ name: /john/i }, 'name friends', function () { })
19:31 < livinded> besides our startup scene is way more awesome than the bay. We have the beach
19:31 < baudehlo> has anyone done file upload with node? And I mean client end, not receiving end.
19:31 < prettyrobots> phpnode: Well of course someone who doesn't share your opinions is wrong.
19:31 < RLa> isn't the latter worse?
19:31 < bradleymeck> everyone on the internet is wrong, thats why its the internet, either way we all need to just sit back and relax
19:31 < phpnode> prettyrobots: i know, right? how dare they
19:31 < livinded> and snowboarding an hour away
19:31 < prettyrobots> entitydigital: Network effect. More deves will write more code, more code will require more devs.
19:31 < prettyrobots> And it is hard.
19:32 < s5fs> phpnode: sounds like you'd clash with anyone who doesn't share your views :-/
19:32 < prettyrobots> But, it gives good returns.
19:32 < entitydigital> prettyrobots: agreed
19:32 < prettyrobots> I'd like to find a group of developers who are bootstrapping or going it alone with products.
19:32 < prettyrobots> The iOS community is all about that
19:32 < prettyrobots> .
19:33 < phpnode> s5fs: yes, but at least i will admit if i'm wrong
19:33 < prettyrobots> Instead of gigs, build a half-dozen little apps that generate revenue.
19:33 < phpnode> traffic is hard
19:33 < wltsmrz> baudehlo, I've experimented with binary upload over websocket. 
19:33 < prettyrobots> I'd love to find a group of Noders that wanted to talk about that stuff.
19:33 < s5fs> phpnode: talented devs tend to be opinionated asses, that's why nerdherding is hard ;-)
19:33 < phpnode> (getting traffic is hard)
19:33 < wltsmrz> Firefox has supported unprefixed 'WebSocket' since version ten or so. And version nine had 'MozWebSocket
19:34 < wltsmrz> Maybeb it wouldn't be a huge alienation to your potential users
19:34 < wltsmrz> Anyway, Aikar had a question earlier about haraka
19:34 < baudehlo> I found this, guess there's no easier version: http://stackoverflow.com/questions/5744990/how-to-upload-a-file-from-node-js
19:34 < wltsmrz> Hrmm
19:34 < prettyrobots> Nerd herding is easier if you have a nerd to the herding.
19:34 < phpnode> yeah it's a lot easier if theres a nerd in charge
19:34 < prettyrobots> The problem with prima-donna nerds is that management seems them as the alpha-nerd.
19:35 < prettyrobots> Because they sound most like the nerds on CSI or Numb3rs.
19:35 < prettyrobots> And then you have a culture where the loud opinionated nerd has the ear of management, so that behavior gets rewarded.
19:35 < s5fs> agreed, having management with a similar background is very helpful, they are often able to empathize better with their team. however, i tend to see too many talented geeks moved into management positions and not given any sort of training.
19:36 < s5fs> prettyrobots: well, the squeaky wheel analogy does ring true
19:36 < prettyrobots> s5fs: Yup. People are difficult.
19:36 < s5fs> indeed. i've been skirting the edges of management for a while, not sure i wanna make the drop
19:36 < phpnode> i see a lot of geeks move up to middle management, and not have the people skills / authority to assert themselves with the "real" managers
19:37 < Aikar> wltsmrz: yes
19:37 < wltsmrz> :]
19:37 < s5fs> happier with code and systems, tbh. the people end *is* hard, no matter where you stack in the deck.
19:37 < prettyrobots> s5fs: Yeah. I've learned to run from anyone who looks for gurus, ninjas or rockstars. They are showing that they have *no* idea as to who they are hiring, how they work, what they do.
19:37 < s5fs> what attracts me to mgmt is my feeling that "i could do it better" but that's also a geek mentality, haha
19:37 < wltsmrz> (baudehlo is the author, Aikar)
19:37 < prettyrobots> s5fs: LOL.
19:38 < s5fs> prettyrobots: haha, for sure. last thing i want is to be on a team of rockstars, nobody wants to be the drummer or the roadies.
19:38 < prettyrobots> s5fs: LOL.
19:38 < prettyrobots> There's a Tweet in there.
19:38 < bradgignac> livinded: shameless plug for my employer. rackspace is hiring node devs in SFO.
19:38 < s5fs> personally, i love maintenance programming, i'd love a non-lead spot doing interesting work
19:38 < phpnode> s5fs: that summed up the whole marak thing earlier. i don't think he gets that mentality
19:38 < baudehlo> There's also a #haraka channel if I'm not around.
19:38 < prettyrobots> bradgignac: Ohhhâ€¦. Rackspace.
19:39 < prettyrobots> Like everything I read about Etsy, OMG. They sound dreamy.
19:39 < prettyrobots> Verve.
19:39 < phpnode> i am in love with etsy. i don't think they allow remote workers though
19:39 < prettyrobots> No, Valve.
19:39 < Aikar> wltsmrz: yep im aware, was checking for im in here but hes not here it seems
19:39 < prettyrobots> Valve sounds dreamy.
19:40 < wltsmrz> He isn't here?
19:40 < wltsmrz> I thought he just spoke to me :O
19:41 < s5fs> wltsmrz: not out loud, i hope
19:44 < pppaul> hey guys
19:49 < livinded> bradgignac: no offense but I've dealt with rackspace before and everything I've used from them is shit
19:50 < livinded> also, I know people who work there who are unhappy and leaving
19:50 < pquerna> woo
19:50 < s5fs> livinded: it's a big company, both concerns are legit and normal
19:51 < ryanrolds_w> livinded: I'm really not a fan of trying to roll out RS cloud vm to unexpectedly find we have to contact them and request that they allow us to give them more money.
19:51 < s5fs> livinded: my experience has been different, we've got machines both with AWS and Rackspace, but it seems we're moving more towards rackspace for new customers
19:51 < bradleymeck> livinded i use them and joyent mostly, i tend to enjoy the customer service / custom installs far more than aws, need to ramp up more on linode though
19:52 < mythmon> is it right to make an emitter, emit an event, then return the emitter? or do I need to put the 'emit event' step in a setTimeout to make sure the listener gets attached first?
19:52 < ryanrolds_w> They have been addressing the issues like the stupid homing they had before, but I'm still annoyed about not being able to make more vms in the middle of a major deployment.
19:53 < bradleymeck> mythmon use process.nextTick for great justice if you emit as you construct the ee
19:53 < prettyrobots> mythmon: When in doubt: nextTick.
19:53 < mythmon> sounds good
19:53 < mythmon> thanks.
19:54 < prettyrobots> mythmon: Give the caller a chance to set a listener, yes. Use nextTick. That's how its done.
19:54 < mythmon> i wasn't sure if there was some magic like automatically nextTicking emitted events or something.
19:55 < bradgignac> livinded: hopefully we'll presently surprise you in future.
19:56 < livinded> bradgignac: I don't intend to ever use rackspace after my dealings with them at my last company. The security team was completely incompetent and I don't feel safe or secure hosting with them
19:56 < bradgignac> livinded: sorry to hear that
19:57 < livinded> meh, shit happens. Given that I have a background in operations and security in addition to development I have high expectations
19:59 < mAritz> Break early. Fix often. !
20:01 < livinded> mAritz: when people shut down production machines and spin up new ones that aren't configured yet at a managed hosting facility it's not breaking it's incompetance
20:01 < livinded> or install a firewall without testing that it's configured correctly
20:08 < s5fs> godaddy moved a customer's shared hosting acct to a new server. unfortunately, they moved it from a linux host to a windows host w/o php. when we contacted them to correct it, they said it would take 72 hours, haha! now that's top notch support!
20:08 < mmalecki> I mean, joyent <3
20:08 < mmalecki> that's all
20:08 < DTrejo> s5fs: what jokers
20:09 < s5fs> well, you get what you pay for
20:09 < bradleymeck> ripped off?
20:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:10 < jcrew> s5fs: they did the same crap to us, except they moved from linux to linux but just shut the current prod machine down and changed ips
20:10 < s5fs> jcrew: this was over the weekend in our case, yourself?
20:11 < jcrew> ours was midweek about a month ago
20:11 < s5fs> interesting
20:11 < jcrew> we're moving to inmotionhosting
20:12 < jcrew> which is quite a bit more responsive
20:12 < s5fs> shared hosting is always a crapshoot
20:12 < jcrew> this was on dedicated unmanaged hosting from gd
20:12 < s5fs> but i don't have interest in hosting rinkydink websites, those customers tend to be the most finicky
20:12 < s5fs> jcrew: ugh, nice
20:13 < s5fs> i recently helped a customer get two managed servers from opus interactive, very reasonably priced (esp for windows servers) and the customer is happy.
20:13 < mAritz> livinded: wait, what? did i miss someting? :D
20:13 < zonetti> Does anyone already made a file upload using only express through fs.rename(tmpPath, targetPath, cb) ? I'm getting the 34 error, ENOENT
20:13 < livinded> mAritz: that was some of my experience with rackspace
20:14 < mAritz> livinded: riiight, uhm. might i not be the person you were intending to talk to? :D
20:14 < jcrew> s5fs: i'll check them out, i picked inmotionhosting because it's managed and they're willing to do some htaccess magic to reverse proxy if we need anything but really we're only just now porting our 30 some websites to a CMS (drupal)
20:14 < livinded> I thought you were refering to what we were talking about above
20:15 < jcrew> s5fs: we're stuck in the early 90s, coming into the early 00's
20:15 < s5fs> jcrew: this was for a cms too, sitefinity, some telerik .net commercial wtf-ware
20:15 < mAritz> no. i was referring to the channel topic. i didn't see your discussion as i only joined about 17 minutes ago.
20:15 < jcrew> s5fs: lol
20:15 < s5fs> jcrew: haha, solving yesterday's problems tomm
20:15 < jcrew> i'm gonna start using wtfware
20:15 < mAritz> livinded: no worries though, didn't hurt anyone :D
20:15 < s5fs> patent pending!
20:16 < yawnt> yo mAritz 
20:17 < mAritz> yo yawnt
20:17 < mAritz> jade breaks when uglified with mangle:true :x
20:17 < mAritz> my new job uses uglify
20:18 < mAritz> i didn't know either of those things and coded happily away with jade templates (didn't haver client side templates before there). today i deployed my feature branch... i was not happy...
20:22 < dominictarr> garthk, hey did you get your thing working?
20:22 < pppaul> i have a node module installed, i want to edit the global file so it outputs logging. where do i find this file? (looking on /home/username but i get nothing)
20:23 < jcrew> pppaul: does your node module log anything?
20:24 < yoklov> is there any danger in modifying native prototypes if 1) I avoid Object.prototype and 2) I'm certain there won't be any name collisions?
20:25 < mAritz> yoklov: anyone that uses your code and doesn't always now what you did to the native prototypes will run into trouble.
20:25 < mAritz> so, if you're quite certain no one will ever use your code, do it.
20:25 < yoklov> i'm writing a toy compiler targeting js
20:25 < yoklov> so that's not a particularly huge issue
20:25 < AvianFlu> yoklov: colors.js adds color properties to the String prototype, String.prototype.cyan and the like have never caused any big problems
20:25 < AvianFlu> but, obviously, don't collide with stuff :D
20:26 < yoklov> alright, that's good to know
20:26 < mAritz> yeah, and don't collide with ECMA 5, harmony or next, and so on....
20:27 < RLa> why is cyan on String prototype?
20:28 < mmalecki> RLa: because you did require('colors')
20:28 < yoklov> the props i'll be adding will be mangled, so it's unlikely i'll collide with anything
20:28 < phpnode> because "foo".cyan 
20:28 < mAritz> that's just retarded though
20:28 < mmalecki> ah, okay, I read the thread
20:29 < mAritz> var colorise = require('colors'); colorise.cyan("foo")
20:29 < mAritz> would be better imo
20:29 < RLa> mmalecki, yeah, but why are those put on String prototype
20:29 < phpnode> mAritz: the string object already has bold() etc, this isn't so bad
20:29 < RLa> not on some other object
20:29 < phpnode> it's fairly practical
20:29 < RLa> phpnode, it has?
20:29 < phpnode> uh huh
20:29 < mAritz> phpnode: so, if ecma.next decides to implement string.cyan as well?
20:29 < phpnode> "foo".bold()
20:30 < RLa> aww, never knew that
20:30 < mAritz> also, it's not what you'd expect from a node module. (wait a second, node modules can't modify global object prototypes?!)
20:30 < phpnode> they sure can
20:30 < mAritz> wtf
20:30 < RLa> but it does not work on console, just wraps string into <b></b>
20:31 < RLa> it could give string with bold font when using from console
20:31 < RLa> then cyan and other colors would also make sense
20:32 < mAritz> indeed they can. why in the hell can they?
20:32 < phpnode> mAritz: because they're global?
20:33 < mAritz> no such thing in node modules
20:33 < phpnode> there's no namespacing
20:33 < mAritz> except the native prototypes apparently
20:33 < mAritz> just seems inconsistent
20:35 < phpnode> mAritz: it's not really possible for node to namespace them i think, it would involve having multiple copies of the native prototypes in the same JS context
20:36 < phpnode> node isn't really doing much magic when you require()
20:47 < blax> hi, is it possible to move live sockets from one node instance to another?
20:50 < mmalecki> blax: sure, look up docs for child_process.fork
20:52 < qballer> is nodejs using requirejs or common js
20:53 < shanse> common js
20:54 < qballer> I'm going to build an extendable system. Some of the code is going to run in the browser and some in node. Would you recomend to use require ? shanse?
20:55 < qballer> thanks btw
20:56 < zipp> extendable in what way? Plugins?
20:56 < zipp> And you can require on the browser side by node-browserify modules
20:57 < phpnode> qballer: faced this issue myself, i ended up just compiling my application into one file instead, none of the solutions feel "right"
21:01 <@Nexxy> qballer, phpnode: browserify.
21:02 < zipp> Nexxy! How's the spawn?
21:03 <@Nexxy> zipp: fabulous! he's already doing impressions
21:03 <@Nexxy> and how are we?
21:03 < zipp> Hah, scary :P
21:03 < zipp> Quite well; I managed to go from being our systems guy to a full-time Node developer #prostatus
21:04 < chilts> cool
21:04 <@Nexxy> sweet!
21:07 < texinwien> I'm trying to read a binary from a foreign server via http_request, but having trouble.
21:08 < texinwien> It's a pdf file, and I'm using strings to hold the data at the moment.
21:08 < qballer> Not a plugin system. More like the code will be runes on several machines at the same time. 
21:08 < texinwien> which I know isn't really kosher
21:09 < zipp> Oh. You mean scalable :P
21:09 < texinwien> the resulting saved file is corrupted.
21:11 < CIA-93> node: Ben Noordhuis master * r5fba3b8 / lib/fs.js : fs: fix ReferenceError in truncateSync() - http://git.io/h-N-ZA
21:11 < zipp> We're working on a clustered application framework using our own modules cantina and amino, if you want to check them out http://github.com/cantina/cantina
21:11 < cbobo> can you have socket.io running on port 80 and a node.js webserver ?
21:12 < zipp> When you bind socket.io to your app, it listens on whatever port your webserver is listening on, generally. Look at the socket.io / express example.
21:12 <@Nexxy> cbobo the node process listens on 80 and socket.io listens on the web server
21:12 < phpnode> zipp - that repo is private?
21:12 < zipp> Oh, can you not see it? It might be :x
21:12 <@Nexxy> lol
21:13 < zipp> Well then. We have one and you can't use it :P
21:13 < zipp> lol
21:13 < zipp> Sorry dude
21:13 < phpnode> lol
21:13 < cbobo> so yes, i can?
21:13 < zipp> Yes, you can cbobo
21:15 < cbobo> hm nice
21:15 < cbobo> ya i have just been using apache for running the http, and I think u can not do it that way
21:15 < zipp> Oh, running apache and node.js on the same port? Yeah, the kernel frowns on that.
21:15 <@isaacs> scott_gonzalez: if you mean the one on the npmjs.org website, no
21:15 < texinwien> no ideas on reading in binary data over http and saving the file?
21:15 < cbobo> but, if I switch to the node.js http server then I can have it listen on 80 and then have the socket.io listen on top of it
21:15 <@isaacs> scott_gonzalez: for somewhat obvious reasons.
21:15 < cbobo> okay thanks
21:16 <@isaacs> scott_gonzalez: even if it did, it'd have to be sanitized
21:16 < zipp> texinwien, google: streams :P
21:16 < scott_gonzalez> isaacs: I meant https://npmjs.org/package/markdown but then I saw that you're using marked for npmjs.com
21:16 < zipp> isaac, thanks for the patch to Nave removing default --debug
21:16 < scott_gonzalez> isaacs: and marked does seem to support HTML blocks.
21:17 < scott_gonzalez> isaacs: I was asking about markdown because it was the first result I came across as you're listed as a maintainer.
21:17 <@isaacs> scott_gonzalez: oh, right, i'm explicitly sanitizing before doing marked :)
21:17 <@isaacs> scott_gonzalez: un-supporting inline html :)
21:17 <@isaacs> scott_gonzalez: that package is somewhat old and unmaintained at this point
21:18 < scott_gonzalez> Which? marked or markdown?
21:18 <@isaacs> scott_gonzalez: and really it's ashberlin's not mine
21:18 <@isaacs> scott_gonzalez: markdown
21:18 <@isaacs> scott_gonzalez: marked is actively maintained, and freaking awesome.
21:18 < scott_gonzalez> isaacs: Ok, good, that's what we'll be using for jQuery sites then :-)
21:18 <@isaacs> zipp: np.  it's been kinda annoying me for a while
21:19 < cbobo> how much can we trust the node.js http server?
21:19 < cbobo> compared to apache 
21:19 < EyePulp> cbobo: I think it's a double agent
21:19 <@isaacs> zipp: i actually explicitly avoided it because i have a .naverc that does export NAVE_CONFIG=("--without-npm")
21:19 < EyePulp> cbobo: commie-pinko http
21:19 <@isaacs> cbobo: it's solid.
21:19 <@isaacs> cbobo: just don't do anything stupid like trust user input :)
21:20 < cbobo> well ya, but even with apache u have modsecurity
21:20 < cbobo> where is that for node.js, you know?
21:20 <@isaacs> mod_security doesn't actually protect you that much
21:20 <@isaacs> you can still hoze yourself easily by trusting user input to be valid.
21:20 <@isaacs> that includes: the url, the headers, the cookies, post body, etc.
21:21 <@isaacs> everythign the user sends you is poisonous
21:21 < CIA-93> libuv: Ben Noordhuis master * r13467a4 / (4 files in 3 dirs): unix: retrieve execve() errors in process.c - http://git.io/qkjNxQ
21:21 < CIA-93> libuv: Ben Noordhuis master * r47f496a / src/unix/process.c : unix: simplify stdio handling in process.c - http://git.io/CHfnWw
21:21 < CIA-93> libuv: Ben Noordhuis master * rd4737ab / src/unix/process.c : unix: remove dead code in process.c - http://git.io/V1AyRQ
21:21 < zipp> isaacs: Yeah, I had one too, but it was annoying whenever I rolled out a new VM that didn't have it and had to install iconv or something
21:21 < zipp> "Oh, that error again? fuuu"
21:23 <@isaacs> zipp: yeah
21:23 <@isaacs> i hear ya
21:23 <@isaacs> --debug should be opt-in
21:29 < scott_gonzalez> isaacs: Do you know why a module would create a Debug build instead of a Release build?
21:29 < zipp> we just had that discussion
21:29 < zipp> Download the newest version of Nave
21:29 < scott_gonzalez> zipp: thanks
21:30 < zipp> And recompile. Nave defaulted to using --debug, which caused a bunch of fuckups when compiling other modules with node-gyp
21:30 < zipp> np
21:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:46 < qballer> Hey guys, let it rip : http://www.quora.com/Node-js/What-is-the-most-recommended-node-js-compatable-IDE
21:47 < phpnode> qballer - webstorm is pretty good
21:47 < texinwien> zipp: Thanks - that set me in the right direction. already working ;-)
21:48 < zipp> texinwien: #winning :)
21:51 < broofa> Is this the right channel for socket.io/engine.io questions or is there a better channel?  'Having issues with engine.io.
21:53 < broofa> rauchg ^ 'Trying to set up basic engine.io using method (B) as described in Readme.  The client makes a (succesful) POST to engine.io/default..., but then tries to make a second request using GET, which 404's.  Expected?
21:53 < broofa> ... then "WebSocket is closed before the connection is established" errors. (This is in Chrome, btw.)
21:55 < zipp> Isn't there a #socket.io?
21:56 < zipp> That'd probably be a better place to ask
21:56 < broofa> zipp - why yes there is, thx. :)
22:06 < CIA-93> node: Ben Noordhuis master * r6770555 / test/pummel/test-net-throttle.js : test: raise pummel/test-net-throttle write req size - http://git.io/zDdrFg
22:09 < mikeywaites> hey can anyone recommend a way to test if an {} is empty ?
22:09 < mikeywaites> is there a built in way with node i cant find in the docs or something?
22:10 < zipp> http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json
22:10 < zipp> idk no fun way to do it?
22:11 < serdem> zipp, code it while you gettin bj. that would be fun?
22:11 < zipp> serdem: lmao would probably be an improvement.
22:13 < gicode> Is there a reason "node debug foo.js" can't automatically pick an open port? :-/
22:14 < mikeywaites> cheers, thats what i had already!! 
22:14 < mikeywaites> minus the bj of course ;)
22:14 < zipp> serdam: though my boss just showed up with beer, so that doesn't hurt, right?
22:14 < ddod> Could anyone handhold me through an installation of node-xmpp? I keep running into walls in osx, mint, and centos. I'd be happy to get it working in just about any of those. NPM keeps flipping out over node-expat, and I'm not sure what to do about it
22:15 < zipp> Define: flipping out?
22:15 < ddod> npm ERR! 
22:15 < ddod> npm ERR! Failed at the node-expat@1.6.0 install script.
22:15 < ddod> npm ERR! This is most likely a problem with the node-expat package,
22:15 < ddod> npm ERR! not with npm itself.
22:15 < ddod> npm ERR! Tell the author that this fails on your system:
22:15 < ddod> npm ERR!     node-waf configure build
22:15 < ddod> npm ERR! You can get their info via:
22:15 < ddod> npm ERR!     npm owner ls node-expat
22:15 < ddod> npm ERR! There is likely additional logging output above.
22:15 < ddod> npm ERR! 
22:15 < ddod> npm ERR! System Linux 2.6.18-308.el5.028stab099.3
22:15 < ddod> npm ERR! command "nodejs" "/usr/bin/npm" "install" "node-xmpp"
22:15  * TehShrike|Work does the pastebin dance
22:15 < ddod> npm ERR! Failed at the node-expat@1.6.0 install script.
22:15 < chilts> mikeywaites: http://paste.dollyfish.net.nz/6ac886.txt
22:15 < zipp> That's definitely a flip out o.O Lemme try installing it .. but pastebin next time :p
22:15 < zipp> lol
22:15 < ddod> sorry about that!
22:15 < zipp> np lol
22:16 < zipp> Oh yep, I got the same error on node 0.8.6
22:16 < serdem> zipp, oh sure. why not!  i lik your boss.
22:16 < gicode> ddod: Do you have the expat headers?
22:16 < zipp> nope
22:16 < ddod> considering I don't really know what those are, I would hazard a no
22:17 < gicode> ddod: Try: sudo apt-get install libexpat1-dev
22:18 < zipp> Oh, there are other problems
22:18 < zipp> uhh
22:18 < gicode> zipp: Do you have build-essential?
22:18 < ddod> do you know the equivalent package for centos?
22:19 < gicode> ddod: Sorry, I only have Debian flavors
22:19 < zipp> Actually, this is a new VM so probably not. Lemme install.
22:19 < ddod> or for osx
22:19 < gicode> ddod: Sorry, I don't own any Apple products either.
22:20 < zipp> It's weird, npm installing node-xmpp gives a blank directory.. I'm gonna try pulling the module from github and doing a regular install
22:20 < ddod> ha ok so I feel I'm SOL
22:20 < ddod> if any of you know another way to get a gtalk bot without using node-xmpp, I'd prefer that
22:20 < gicode> ddod: Thought you said you had Mint?
22:20 < ddod> yeah, but something just got screwed up with npm on it
22:21 < gicode> ddod: Are you using the node ppa?
22:21 < zipp> Yep
22:21 < zipp> It's looking for expat.h
22:21 < ddod> gicode: I'mâ€¦ not sure?
22:22 < gicode> ddod: sudo apt-add-repository ppa:chris-lea/node.js; sudo apt-get update; sudo apt-get install nodejs
22:22 < zipp> gicode, what's the package to install for the headers for libexpat?
22:22 < zipp> libexpat1-dev?
22:22 < gicode> zipp: Yes
22:23 < zipp> kk that worked
22:23 < ddod> gicode: I have a couple node apps running for work on this machineâ€” Will installing nodejs through those commands stop them?
22:23 < gicode> zipp: $ apt-file search /usr/include/expat.h => libexpat1-dev: /usr/include/expat.h
22:23 < zipp> Yeah, I got it
22:23 < zipp> Just wanted to be sure that was the package you were aiming for
22:24 < zipp> Alright
22:24 < gicode> ddod: If it is a prod setup, I might not use the PPA
22:24 < zipp> node-xmpp successfully installs now
22:24 < zipp> on ubuntu 12.04 .. Don't know about centos lol
22:25 < gicode> Well, I should get back to work.
22:25 < ddod> ah ok, so I guess I'm back to figuring out what I need to do for centos/osx
22:25 < zipp> But thanks, gicode. That's definitely the right direction
22:25 < ddod> thanks for your help gicode
22:25 < gicode> Glad to help
22:25 < ddod> so zipp, did you have to do anything besides install libexpat-dev
22:25 < zipp> Can you do "yum provides expat.h" ?
22:25 < zipp> Nope
22:26 < ddod> No Matches found
22:26 < perezd> pure js murmurhash npm module if anyone is interested: https://github.com/perezd/node-murmurhash
22:27 < zipp> https://github.com/astro/node-expat/issues/5 This is old.. yum search expat and find the dev package?
22:27 < zipp> I don't have a centos image handy :x
22:27 < ddod> I'm trying yum install expat-devel now
22:28 < ddod> oh I think that did it!
22:28 < zipp> BOOM
22:28 < ddod> thanks for your help, zipp
22:28 < ddod> I really appreciate you taking the time
22:29 < zipp> ^^ Thank gicode; he did the work, I just ported the ideas to CentOS lol
22:29 < zipp> but np
22:30 < jcrew> where did whiskers go
22:44 < zipp> ddod: threw a pull request with some changes to the readme. Don't mind the number of commits; I suck at markdown https://github.com/astro/node-xmpp/pull/81 lol
22:44 < ddod> oh cool, thanks!
22:45 < ddod> Did you try the actual node-xmpp out?
22:45 < ddod> I managed to get it online with one of my accounts, but it's not sending anything
22:46 < ddod> also, I think it requires yum install libicu-devel
22:46 < ddod> it throws that one up as an error after you run it
22:48 < zipp> eh, I don't have a use for it right now, I just felt like helping out :d
23:03 < othiym23> let's say I have a readable stream and would like to pipe it into a buffer, handing the buffer off to a callback once the stream sends an 'end' event
23:04 < othiym23> is there an idiomatic way to do that without dependencies and without just setting up all the relevant event listeners myself?
23:05 < othiym23> I've done it "by hand" a zillion times, but it struck me that with all the foaming at the mouth over streams that's been happening lately, there might be a simpley way built-in
23:05 < othiym23> like a StreamBuffer or something
23:06 < chrisdotcode> what about using .pipe()?
23:07 < othiym23> to what am I piping?
23:07 < chrisdotcode> stream.pipe(response)?  I'm not quite sure I'm understanding what you mean, though.
23:07 < othiym23> I have a response stream, I want to read the whole thing into a Buffer, and then pass it off to be handled once the whole thing has been read
23:08 < othiym23> so, the buffer is an endpoint
23:08 < othiym23> I mean, I can write up my own StreamBuffer pretty easily, I just was curious if there was something I was overlooking in the core distribution
23:08 < chrisdotcode> so why not fiddle with the 'data' and 'end' events?
23:09 < chrisdotcode> othiym23: does http://nodejs.org/api/stream.html help?
23:09 < othiym23> that's what I'm doing right now, but it's a common enough problem it would be neat to have it wrapped up in something standard
23:10 < CIA-93> libuv: Trond Norbye master * rcbb9300 / (3 files): Allow headers to be included with -Werror and -Wundef - http://git.io/cI43vw
23:10 < CIA-93> libuv: Trond Norbye master * r5143d54 / include/uv.h : Allow inclusion of <uv.h> with Sun Studio compiler - http://git.io/JUADfA
23:10 < othiym23> chrisdotcode: I came here after reading that, but thanks ;)
23:10 < chrisdotcode> othiym23: ah, sorry about that then =/
23:19 < Hotroot> Anyone here who's used mongo in node have a second to spare?
23:19 < Hotroot> I'll just ask here. I'm confused as shit about opening a collection. The examples look like they are for one time opening's of the db/collection
23:20 < pandemic> I've used it. What exactly is your question?
23:20 < Hotroot> I do the blah = new mongodb.Db stuff, but how do I get to the collection after that?
23:20 < pandemic> what driver are you using?
23:20 < Hotroot> They show opening the collection inside the callback of connecting to the db
23:21 < Hotroot> pandemic: mongodb-native
23:21 < Hotroot> https://github.com/mongodb/node-mongodb-native/
23:21 < pandemic> oh ok, one sec
23:21 < Hotroot> They do this "var collection = new mongodb.Collection(client, 'test_collection');"
23:21 < Hotroot> But what is client, and how does it know what db I'm referring to, etc?
23:22 < timeturner> might want to check out mongoose
23:22 < pandemic> i think you may be looking at the wrong thing?
23:22 < timeturner> makes life way easier when working with mongo
23:22 < pandemic> I've used mongolian and it was simple
23:22 < Hotroot> This is definitely a working mongo driver
23:23 < pandemic> if you insist on using mongodb-native, check the introduction section of the page you linked
23:23 < Hotroot> I suppose. I mean it doesn't look "difficult", the docs are just not great
23:23 < pandemic> var client = new Db('test', new Server("127.0.0.1", 27017, {})),
23:23 < timeturner> all the libs use node-mongodb-native
23:23 < timeturner> we know it works
23:23 < timeturner> but it is a pain in the ass
23:23 < timeturner> to use it in your app directly
23:23 < pandemic> 'test' is the db
23:23 < Hotroot> I get the connecting to mongo server, and opening the db
23:23 < othiym23> chrisdotcode: here's a sketch at what I'm talking about -- https://gist.github.com/3299666
23:24 < Hotroot> I'll check out mongoose
23:24 < pandemic> This is straight from their introduction on the page you linked:
23:24 < pandemic> var client = new Db('test', new Server("127.0.0.1", 27017, {})),
23:24 < pandemic>     test = function (err, collection) {
23:24 < pandemic>       collection.insert({a:2}, function(err, docs) {
23:24 < pandemic>         collection.count(function(err, count) {
23:24 < pandemic>           test.assertEquals(1, count);
23:24 < pandemic>         });
23:24 < pandemic>         // Locate all the entries using find
23:24 < pandemic>         collection.find().toArray(function(err, results) {
23:24 < pandemic>           test.assertEquals(1, results.length);
23:24 < pandemic>           test.assertTrue(results[0].a === 2);
23:24 < pandemic>           // Let's close the db
23:24 < pandemic>           client.close();
23:24 < pandemic>         });
23:24 < pandemic>       });
23:24 < pandemic>     };
23:24 < pandemic> client.open(function(err, p_client) {
23:24 < pandemic>   client.collection('test_insert', test);
23:24 < pandemic> });
23:25 < Hotroot> I see how their example works, but I want the collection tied to a variable I can use outside the scope of the callback of connecting to the db
23:25 < pandemic> ah ok
23:25 < Hotroot> So later on I can just use collection.insert(blah)
23:25 < Hotroot> I mean, that's how it should be
23:25 < pandemic> hmm, not sure how you do that with the native driver
23:26 < pandemic> i know in mogolian it's easy to do that
23:26 < timeturner> why are you using the native driver?
23:26 < Hotroot> Mongoose looks odd, what's all this about schema?
23:26 < Hotroot> I just want what I had with sqlite
23:26 < timeturner> mongoose doesn't force any schema
23:26 < pandemic> https://github.com/marcello3d/node-mongolian
23:26 < pandemic> check this out
23:26 < pandemic> check that out. it would do what you are looking to do
23:27 < Hotroot> Yeah, I'm looking at mongolian now
23:27 < chrisdotcode> othiym23: oh, okay.  now I see what you're saying.  yeah, I'd like that functionality implemented as well, now that you mention it haha
23:28 < Hotroot> It says mongolian is very experimental
23:28 < pandemic> i think there is mongoskin too
23:28 < pandemic> i believe it is similar
23:28 < pandemic> https://github.com/guileen/node-mongoskin/blob/master/examples/insert.js
23:28 < pandemic> https://github.com/guileen/node-mongoskin/blob/master/examples/insert.js
23:29 < pandemic> https://github.com/guileen/node-mongoskin/tree/master/examples
23:29 < pandemic> check out the insert.js
23:29 < Hotroot> Mongolian looks fantastic
23:29 < Hotroot> Finally, a logical mongo manager
23:29 < pandemic> Check out the insert.js example
23:29 < Hotroot> I don't know why it's not like this by default
23:30 < garthk> Sigh. Not sure I can stand more bouncy+mux-demux debugging today. So, alternatives: I need A to take web service API requests and pass them to B, who then hits the correct web service to get the results. The trick is that A is not allowed to open connections to B. Instead, B has to connect to A. What shall I try this time? 
23:30 < pandemic> @Hotroot I agree
23:31 < Hotroot> And a list of working commands. My goodness, it's like I've found an island of logic in this sea of bullshit documentation
23:31 < garthk> â€¦ e.g. take normal request, read headers, reconstruct them rather than using buffers, use dnode to drive remove event emitters and just hope the pause/resume takes care of itself?
23:32 <@Nexxy> logical mongo!
23:34 < Hotroot> I get a nerdboner when db stuff uses a clear OO syntax. server.db.collection.comamnd()
23:34 <@Nexxy> thanks for sharing.
23:34 < Hotroot> No prob sexy Nexxy
23:35 < pandemic> lol
23:35 -!- Hotroot was kicked from #Node.js by Nexxy [Hotroot]
23:35 <@Nexxy> nopw!
23:35 <@Nexxy> nope*!
23:35 < vicelow> http://pastie.org/4414849    can I do a users.findOne and just get the first 10 events (is a nested document)?
23:35 < pandemic> nothing wrong with a little nerd boner
23:35 <@Nexxy> every now and then
23:35 <@Nexxy> lol
23:36 < pandemic> @vicelow I think you'll have to use their new aggregation framework to do that
23:36 < pandemic> if you don't want to parse it on the client
23:37 < pandemic> I would read this if you haven't already https://groups.google.com/forum/?fromgroups#!topic/mongodb-user/ZP0FRII5zAs
23:37 < vicelow> yes I think, because there is a lot of events and the query is getting so slow
23:37 < pandemic> it's long, but worth it
23:37 < pandemic> this article is for pre-aggrigation framework though
23:37 < Hotroot> Aha, just a joke. Anyway, grids in mongo are basically files?
23:38 <@Nexxy> Hotroot, ;P
23:38 < pandemic> unfortunately I haven't used that yet. possibly someone else has experience with that.
23:38 < yoklov> heh, emacs js2-mode has settings for ignoring lines that begin with # because they might be pre-processor directives. do people do that?
23:39 < vicelow> thank you pandemic 
23:39 < pandemic> not a problem :)
23:40 < Hotroot> L_Sway
23:40 < flockonus> boilerplate for express 3 + redis + socket.io?
23:41 < Hotroot> I am surprised that the absolute best docs on telnet are by Microsoft
23:41 <@Nexxy> lol
23:41 < Hotroot> Nobody else so easily describes the ascii for control codes, what they do, etc.
23:41 < Hotroot> Conflicted feelings
23:41 < EhevuTov> because MS doesn't have ssh naturally. Telnet is the best they got
23:42 < EhevuTov> not many *nix use telnet
23:42 <@Nexxy> telnet still exists beyond serial devices?
23:42 < EhevuTov> :-)
23:42 < EhevuTov> I use telnet to manually connect to HTTP sometimes
23:42 < Hotroot> Telnet is used for MUD's, and various other things
23:42 <@Nexxy> look
23:42 < Hotroot> Well microsoft blocks telnet by default on Win7 now 0.o
23:42 <@Nexxy> throw chair
23:43 <@Nexxy> leave east
23:43 < EhevuTov> ha
23:43 < Hotroot> Hey, don't dis them too much, I'm writing one right now =P
23:43  * Nexxy writes Hotroot off
23:43 < garthk> Looking up connection pooling techniquesâ€¦
23:43 < Hotroot> Lol. They have a special place for me. Writing for something with no graphics is quite enjoyable
23:44 <@Nexxy> one time my blind neighbor printed out the entire LPC manual for me
23:44 < s5fs> haha!
23:44 <@Nexxy> he wanted me to write a MUD framework for him
23:44 < garthk> Oh, man. I remember LPC.
23:44 < Hotroot> Telnet uses a simple TCP ascii stream, and you get some control codes that are nice
23:45 < garthk> MUSH was more fun. You could use functional programming techniques to cheat the event loop and get more done before control passed to anyone else's code. Great incentive to learn a new programming style. 
23:46 < Hotroot> If I ever finish it, I believe it will be the first MUD in node, and the first hacker MUD
23:46 < garthk> What makes it the first *hacker* MUD?
23:46 <@Nexxy> programmatic cheating encouraged?
23:46 < Hotroot> garthk: Haha, nice. The extent of my "cheating" was writing bots that detected text and sent text accordingly
23:46  * gicode searches for node js mud
23:46 < Hotroot> The first MUD about hacking.
23:46 < Hotroot> Think Uplink, Slavehack, etc.
23:47 <@Nexxy> will I have a backtrace command?
23:47 <@Nexxy> and get to run from the Internet Police?
23:47 < Hotroot> Of course =P
23:47 < Hotroot> It will be based on hacking in the old days. BBS's, modems, etc.
23:48 < DTrejo> freaking
23:48  * Nexxy crafts a blott box and automatically wins
23:48 <@Nexxy> blotto*
23:48 < Hotroot> No idea how to balance it yet. Most people cheat and use "levels" of software
23:48 < Hotroot> I think that's bullshit
23:48 < Hotroot> I'm thinking hardware works in "levels", and all software is the same, assuming you can get access to it.
23:49 < Hotroot> Not sure how to implement "hacking" skills though. Thought about using a BASIC-like language or summat
23:49 <@Nexxy> emulate some sort of 16 bit processor
23:49 <@Nexxy> and let players write ASM for it
23:50 < Hotroot> Not sure I'm that smart/skilled.
23:50 < Hotroot> Would be ripping off 0x10c also
23:50 <@Nexxy> sure you are! you have 'root' in your nickname
23:50 <@Nexxy> oh yeah cuz 0x10c is the first game to ever implement that concept
23:50 < Hotroot> You know that's actually caused me flak before?
23:50 <@Nexxy> only once? :P
23:51 < yoklov> just do a better job than notch and make it possible to implement in hardware
23:51 < Hotroot> "You can not use that username. Your username has the reserved word 'root' in it."
23:51 < Hotroot> Bullshit security technique -.-
23:51 <@Nexxy> I IRC from root
23:51 < Hotroot> I know Notch isn't the first, but it would likely be hard to swipe that audience away from him.
23:52 < Hotroot> So then would users have to write their own OS? Would the "hacking" be exploiting holes in other's software?
23:54 < Hotroot> On that front, there's toughness vs realism. User quality vs user quantity also
23:57 <@Nexxy> Hotroot, I think you should be true to your intended audience
23:59 < Hotroot> Nexxy: Yeah. I'm trying to go for something harder than clicking "crack" but easier than programming
--- Log closed Thu Aug 09 00:00:09 2012
