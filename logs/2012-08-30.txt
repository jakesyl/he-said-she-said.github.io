--- Log opened Thu Aug 30 00:00:48 2012
00:14 < T0m209847> I'm confused about what exactly app.param does in Express... is that referring to the URL string, the POST parameters, or what?
00:14 < T0m209847> (sorry about the totally noob question)
00:27 < t0mbstone> how is there 811 people here but I'm not seeing anyone say anything?
00:27 < dragon_> t0mbstone: You're likely not asking the right questions.
00:28 < t0mbstone> Ah, ok. I was trying to figure out if something was wrong with my IRC client
00:28 < dragon> No, not the client.
00:59 < styol> Hrm. I r cornfused. There is a point in code triggered by an HTTP request (express) that hangs when a valid JSON string is parsed. There is no error thrown that I can see and other requests work as expected. Any ideas what might cause that or how I might go about resolving this strangeness?
01:00 < styol> IE: user = JSON.parse(user); // works fine when commented out, but it creates a double encoding of JSON later
01:01 < TehShrike> That sounds fun.  Can you pastebin some code that gets it to happen?
01:01 < TehShrike> Are you sure user is a string?
01:03 < styol> TehShrike: I can probably abstract something yah. Pretty sure it's a string but I will double check
01:03 < cleos_frey> I need advice: I'm creating a library that makes an async request and returns an produces an object once it's done. Should I return the object through a callback, or return a dummy object until the request is done?
01:04 < TehShrike> cleos_frey: some people like promises, some people like callbacks - callbacks seem to be much more common in libraries
01:04 < cleos_frey> example: makeThing(function(thing) { myThing = thing; });
01:04 < cleos_frey> oh, I've heard of promises, I guess I should read up on that
01:04 < cleos_frey> are node developers used to waiting on callbacks to get their stuff though?
01:05 < cleos_frey> I'm making an interface for Growl, and I have to send a REGISTER request to the growl server before a 'sendNotification' object is usable
01:05 < ChrisPartridge> cleos_frey: does the code touch the network/disk?
01:06 < cleos_frey> would it be fine to return the 'sendNotification' object in a callback after the REGISTER returns? seems convenient to have it immediately
01:06 < cleos_frey> yeah, talks to the Growl server on localhost:25035
01:06 < cleos_frey> so there's a wait
01:06 < ChrisPartridge> Callback that sucker then :)
01:07 < cleos_frey> okay, that makes things easy, and I guess it's common in node programming? (I'm new...)
01:07 < cleos_frey> I see lots of callbacks
01:07 < cleos_frey> ...lots
01:07 < chesles> callbacks are the name of the game in node :)
01:07 < styol> relatively common format: async(arguments, function(err, response){});
01:08 < styol> in particular the error arg though so something else can transpire if there is one
01:09 < styol> cleos_frey: like an issue connecting, registering, etc
01:12 < cleos_frey> makes sense, I'll do that then -- trying to read up on promises too
01:13 < cleos_frey> btw, any good nodejs projects you guys recommend that are idiomatic and well written?
01:14 < cleos_frey> I'm handy with JS, just getting into the node game though
01:14 < ChrisPartridge> cleos_frey: Just grab some popular modules from NPM and take a look at the code, most of the popular ones have great tests
01:21 < styol> TehShrike: I'm unable to abstract and replicate the issue outside of node :( I am sure that the JSON is a string and fairly sure that the request fails at the parsing (no console logs are received afterwards)
01:23 < TehShrike> If you get into an infinite loop anywhere, you'll lose some console.logs from beforehand
01:25 < CIA-1> node: Bert Belder reviewme * r191b4d4 / lib/child_process.js : child process: fix processes with IPC channel don't emit 'close' - http://git.io/4SqMAw
01:28 < styol> TehShrike: works fine when commented out, it is just escaped later in a method that responds JSON. Me baffled
01:28 < codingstream> how do i reference a private module my folder in another private module's package.json?
01:29 < codingstream> s/my/by
01:30 < styol> TehShrike: would seeing the example still maybe help?
01:40 < rickbauss> i am trying to pass hex encoded message from a url query param to crypto.createDecipherIv but keep getting TypeError: Not a string or buffer on decipher.update (it's weird because I can write the response to the screen but then node crashes) any ideas?
01:44 < rickbauss> query params are not strings?
01:45 < Guest56068> someone uses nowjs ?
01:45 < gkatsev> someone isn't here today. Maybe tomorrow
01:46 < substack> just use shoe + mux-demux + emit-stream + dnode
01:46 < substack> + scuttlebut
02:19 < t0mbstone> Away for now
02:57 < LuckySMack> looking at different frameworks that are either mostly serverside, mostly client side, or some a mix in between... if I were to make my own basic site or something with express, how would I make it do either one of those?
02:57 < chilts> express is serverside
02:58 < LuckySMack> like what would I do differently if I wanted my controllers/models available on both client/server so the app could handle limited offline capabilities, versus something completely serverside where if i lose internet, i cant use the site.
02:58 <@Nexxy> chilts, I'm guessing LuckySMack is talking templating frameworks
02:58 <@Nexxy> oh.
02:58 < LuckySMack> yea i get that, im just not sure where I would meet yes a templating framrwork with the code itself
02:59 < chilts> maybe Director : https://github.com/flatiron/director
02:59 < LuckySMack> well, i guess what is different if i was using say express and mustache for normal use, and if I wanted it to be available offline as well.
03:00 <@Nexxy> just make it a single page app and use lots of localStorage!
03:00 <@Nexxy> instant offline app
03:00 < ChrisPartridge> LuckySMack: You could use local storage if the server isnt available
03:00 < chilts> yeah, localStorage
03:00  * ChrisPartridge is slow
03:00 <@Nexxy> ChrisPartridge, me too ._.
03:00 < chilts> sorry, was just trying to figure out what you wanted :)
03:00 < ekryski> For anyone that is interested I got NodeJS running on pandaboard with Ubuntu 12.04
03:00 < ChrisPartridge> only issue is local storage limits ><
03:00 < chilts> ekryski: cool :)
03:01 < LuckySMack> so i would use something like director to handle routes, and it could make the controllers/models/whatever work on offline/client
03:01 < ekryski> Instructions are here http://erickryski.com/2012/08/29/nodejs-on-pandaboard/
03:01 < chilts> LuckySMack: sounds like you have a lot of work to do if your app needs to be available offline
03:01 < chilts> are you sure that's exactyl what you want?
03:01 < tprice> what would happen if i compile process.binding('natives').net
03:01 <@Nexxy> ekryski, awesome!
03:02 <@Nexxy> ekryski, what version?
03:02 < ekryski> latest
03:02 <@Nexxy> also did you find that you had to modify the gyp file at all?
03:02 < tprice> i need to over write the net module
03:02 < ekryski> 0.8.8.
03:02 < ekryski> yep
03:02 <@Nexxy> aw
03:02 <@Nexxy> I was hoping they'd fix that
03:02 < LuckySMack> fully offline, no. just if the person loses some connectivity. i was actually wanting to use a local copy of couchdb for storage and have it sync with the server. if theres no local couchdb, then it uses the servers couch instance.
03:02 < ekryski> All of the instructions are up on the link.
03:02 <@Nexxy> ekryski, what do the tests do?
03:02 <@Nexxy> how many fail?
03:02 <@Nexxy> last time I tried to get 0.8.x compiled on ARM it failed 44+ tests
03:02 <@Nexxy> including all the SSL stuff
03:03 < ekryski> Let me run them again. I only had one fail before
03:03 <@Nexxy> that's great!
03:03 < ekryski> but I think it was just SSL
03:03 <@Nexxy> yeah ._. kinda a big deal
03:03 < ekryski> but I have update my SSL since then
03:03 < tprice> anyone?
03:03 < ekryski> give me a sec
03:03 <@Nexxy> tprice, usually if someone that's active knwos the answer they will tell you
03:03 < ChrisPartridge> LuckySMack: Can you assume all users will have a local couch instance?
03:04 < ChrisPartridge> LuckySMack: Local storage sounds perfect for what you need, as long as you aren't storing *too* much data
03:04 < LuckySMack> no, typically only admins will have it. end users would be say store customers. think along the lines of a POS system
03:04 <@Nexxy> ekryski, this may also be relevant to your interests: http://nexxylove.tumblr.com/post/22690398464/ubuntu-web-kiosk-in-10-easy-steps
03:04 < LuckySMack> i think i will need more capabilities than local storage though.
03:04 < LuckySMack> which I will likely use anyways for other stuff.
03:05 < ChrisPartridge> Couch communicates via JSON right?
03:05 < LuckySMack> yea
03:05 < tprice>  Nexxy lol
03:05 < LuckySMack> well. its all REST
03:06 < LuckySMack> but the stores itself are json yea
03:06 < ekryski> Nexxy: ha! Nice! I've been something similar with multitouch stuff. Trying to get it working on my pandaboard.
03:06 < ekryski> Nexxy: love the cheap price, low power, small form factor
03:06 <@Nexxy> jah, I've been just using beagleboards
03:06 < ekryski> I think I'm going to try putting arch linux for panda on it though
03:07 < ekryski> Nexxy: should be able to follow similar steps to get Node running on beagle. You will just need to check your cpu info. There are a couple flags that might need to change. I don't have a beagle so I can't test it
03:08 < LuckySMack> would there be a way to have an app first look for a db connection on the clients machine? and if there isnt one use the servers db instead.
03:09 < ChrisPartridge> Sure, if the node app is running locally - but if it's in the browser, nope
03:09 <@Nexxy> ekryski, I think they're the same arm cortex family of processors
03:09 <@Nexxy> I could be wrong though
03:10 < LuckySMack> ok thats what i figured. so far ive assumed that for local, i would have to make an installable package. maybe using something like app.js, not sure. but im not sure if that can bundle a couch instance though.
03:10 < LuckySMack> which would essentially be the same thing as the site. just a local copy
03:11 < mscdex> woohoo! another pandaboard owner!
03:11 < mscdex> ;-)
03:11 < ChrisPartridge> Whats the diff between raspi and the pandaboard?
03:12 < ekryski> Nexxy: I think so too but there might be different whether you use vfp3 and armeabi:softfp or armeabi:hardfp
03:12 < ekryski> raspi is much much smaller and less powerful
03:12 < ekryski> less io ports as well
03:13 < ekryski> the panda is still pretty small though
03:13 < mscdex> beagleboard-xm is cortex a8 and pandaboard is cortex a9
03:13 < mscdex> both armv7 though
03:13 < ekryski> yep. Cortex a8 has different configs for v8 to compile
03:14 < LuckySMack> so outside of offline usage, regarding director. when writing my code, how would I make the distinction between server only code, and client/server code? do i just point router to where the client code is? i would want to not load my server code onto the client.
03:15 < ekryski> mscdex: did you have Node working on your panda already?
03:15 < mscdex> i did the last time i used it
03:16 < mscdex> that's been some time ago though
03:17 < ekryski> mscdex: what OS were you using?
03:17 < mscdex> ubuntu
03:18 < ekryski> hmm. You should have blogged about it ha ha. Would have save me some time ;-)
03:19 < mscdex> i don't even think i did anything special to compile it on-device at the time, except maybe specify --dest-cpu
03:19 < mscdex> but i don't remember doing that so much
03:19 < ekryski> Nexxy: yep the only error is ssl error. SSL handshake error
03:19 < ekryski> mscdex: ah I see. Was it for Node 0.4?
03:20 < mscdex> possibly
03:20 < ekryski> Would make sense. A lot of stuff got changed moving to 0.6 and then 0.8
03:21 < mscdex> although i was able to pretty easily cross compile for this old cheapo armv6 tablet i have
03:21 < mscdex> just had to set dest-cpu and set up ccflags and cxxflags
03:23 < ekryski> Ya that's pretty much all you need to do. It's just figuring that out and then which flags that took me time
03:33 < ekryski> Nexxy: I just realized something
03:33 < ekryski> Reading through your blog post
03:33 < ekryski> I think you can get chrome to go full screen by setting the presentation mode and I think you can do it via command line
03:36 < Mack> How do you install node-waf?
03:36 < Mack> I don't have that installed, but npm isn't working without it
03:38 < mscdex> Mack: node-waf is deprecated
03:40 < Mack> mscdex: So then how do I use npm now?
03:40 < Mack> It seems to requre node-waf, but it's not installed
03:42 < mscdex> Mack: what are you trying to install?
03:42 < Mack> Socket.io
03:43 < mscdex> it's not required for that. don't worry about it
03:43 < Mack> Oh wait, nevermind. I just never ran npm update >.<
03:44 < Mack> mscdex: Thanks! I would've spent a while trying to figure out how to get waf before realzing that after updating the repo it's not necessary
03:44 < mscdex> socket.io has a dependency on some redis module that tries to compile the binding if it can, otherwise it defaults to a pure-javascript version
03:44 < mscdex> iirc
03:45 < mscdex> and if you don't use redis with socket.io then you really don't have to worry about it ;-)
03:47 < Mack> Ok
04:00 < abacon> hey all, newbie question here. I am doing a require and it is console.logging a whole bunch of crap that I couldn't care less about.
04:00 < abacon> Is there some way to silence that?
04:00 < abacon> Should it even be outputting stuff?
04:00 < timeturner> you're console.logging a require()?
04:01 < abacon> No, no.
04:01 < abacon> just $ = require('query') spits out a whole bunch of stuff.
04:01 < abacon> *jquery
04:01 < abacon> not query.
04:01 < abacon> Aaand it is making reading my debug output impossible.
04:01 < timeturner> hmm, really?
04:01 < timeturner> do you have the gh url
04:01 < abacon> Also, preventing me from using a smaller buffer size in my exec.
04:01 < timeturner> let me check the code
04:01 < abacon> for the jquery package?
04:01 < abacon> umm.
04:02 < timeturner> wait it's the main repo?
04:02 < timeturner> for jquery
04:02 < timeturner> ah ok
04:02 < timeturner> let me check
04:02 < abacon> thanks.
04:05 < mscdex> abacon: what kind of stuff is it displaying?
04:05 < timeturner> i think it's showing debug stuff
04:05 < timeturner> or possibly grunt
04:05 < timeturner> what is it showing exactly
04:05 < timeturner> like the first line
04:06 < abacon> mscdex: https://gist.github.com/3522217
04:10 < abacon> what's grunt?
04:11 < abacon> I mean, the built tool.
04:11 < abacon> You mean you think it's the output of… some build of the project?
04:12 < bubbles10101> anyone know why __dirname has double underscores? what is the meaning behind this? is it good practice? http://pastebin.com/AgdRaHpG
04:12 < chilts> bubbles10101: it's a variable that Node.js gives you
04:12 < chilts> like __filename
04:12 < chilts> that's the currently executing file
04:13 < chilts> ie. the double underscore shows you it's reserved, given, internal - whatever you want to call it
04:13 < chilts> you shouldn't name your variables with __ otherwise it'd be confusing to the reader :)
04:13 < mscdex> abacon: hmm, i don't get that output when i do require('jquery')
04:13 < abacon> ah, maybe I have it installed improperly?
04:13 < heroic123> i made a small npm package
04:14 < heroic123> to support parallel queries with node-mysql
04:14 < heroic123> https://github.com/heroic/mysql-pool
04:14 < heroic123> any feedbacks?
04:14 < mscdex> abacon: wait, did you install 'jQuery' or 'jquery' ?
04:14 < heroic123> its my first package :)
04:14 < abacon> jquery
04:14 < abacon> is jQuery less annoying somehow?
04:14 < abacon> Are they functionally different?
04:15 < mscdex> i don't know, but they are separate packages it seems. i used 'jquery'
04:15 < livinded> why are you installing jquery via npm?
04:15 < mscdex> abacon: so you tried just running a file that contains `require('jquery');` and you got output?
04:15 < mscdex> livinded: there's a dom and everything included
04:15 < mscdex> livinded: via jsdom
04:15 < bubbles10101> chilts: ahh ok thanks!
04:16 < livinded> mscdex: can you load a page into it and have it render the dom?
04:16 < bubbles10101> chilts: is there a list of these somewhere?
04:16 < livinded> including exec all the js and shit
04:16 < mscdex> livinded: yeah, pretty much, i've never used it though
04:16 < chilts> bubbles10101: I don't know about a definitive list
04:16 < livinded> oh cool!
04:16 < abacon> mscdex: yeah
04:16 < livinded> might have to look into that for some evil ideas
04:17 < abacon> :D
04:17 < mscdex> abacon: and you did `npm update` to make sure you have the latest version?
04:17 < livinded> and a few not so evil as well
04:17 < mscdex> abacon: because i'm not able to reproduce your problem
04:17 < abacon> :\ I did run nom update.
04:17 < chilts> bubbles10101: try here : http://nodejs.org/api/globals.html
04:17 < chilts> maybe it's just those two :)
04:17 < abacon> Like I said, maybe I installed it or node incorrectly?
04:19 < livinded> it's REALLY hard to install node incorrectly
04:19 < livinded> like almost impossible
04:20 < abacon> especially via ubuntu package... 
04:20 < abacon> :\
04:20 < livinded> you never know with ubuntu
04:20 < livinded> those devs aren't the brightest bulbs
04:20 < mscdex> abacon: no idea, try blasting your node_modules and try reinstalling 'jquery' from scratch
04:21 < abacon> ah if I did npm install -g, do I need to delete more than just ~/node_modules?
04:22 < livinded> ya, wherever global ones are stored
04:22 < abacon> ah hey. That worked, mscdex.
04:22 < livinded> usually something like /lib/nodejs/
04:22 < abacon> Like a charm.
04:22 < abacon> <3
04:22 < mscdex> cool!
04:22 < abacon> You guys are awesome! :D
04:22 < abacon> Thanks so much!
04:23 < timeturner> abacon: might want to check this out: https://github.com/component
04:23 < timeturner> it has jquery in there as well
04:24 < timeturner> http://tjholowaychuk.com/post/27984551477/components
04:25 < abacon> ah, nice! Thanks timeturner.
04:25 < worr> can anyone around right now help me with an issue I'm having with a native module I'm writing?
04:30 < mscdex> worr: what problem is that?
04:32 < worr> I have an object that I'm working on, and I need it to do some cleanup when it falls out of scope. however, it seems like the objects destructor never gets called
04:39 < mscdex> worr: got your code anywhere?
04:40 < be5invis> Any hu.js attender?
04:40 < worr> mscdex: take a look at FAM::New()
04:40 < worr> https://github.com/worr/fam.js/blob/master/src/fam.cc
04:41 < worr> when the FAM object gets destroyed, I'd like it to do some cleanup, but it never seems to get deleted by node/v8/whatever
04:43 < mscdex> worr: got your test code anywhere?
04:44 < worr> https://github.com/worr/fam.js/blob/master/test/test-fam.js
04:44 < worr> so, the way I've been testing it is running a debug instance of gam_server
04:44 < worr> a hackier way to test it is to put a print statement in the destructor ;)
04:44 < worr> but that's not in the committed code
04:45 < worr> it also, quite obviously, requires fam or gamin to run
04:47 < mscdex> have you tried a simple test ? like just `var FAM = require("../fam").FAM; var foo = new FAM();` or something
04:49 < worr> yes
04:53 < mscdex> worr: no idea then, i don't see anything wrong
04:54 < worr> mscdex: ok, thanks
05:53 < nkuttler> any recommendation for i18n? and solutions for switching/detecting preferred language etc?
05:56 <@konobi> nkuttler: where?
06:00 < deoxxa> nkuttler: javascript contains two key control flow constructs for achieving this
06:00 < bubbles10101> did npm change things with brew recently? 
06:01 < bubbles10101> i recently did a "brew update" "brew upgrad" and npm is no longer installed
06:01 < bubbles10101> hmmm
06:01 < TheMoonMaster> Homebrew removed npm forever ago.
06:01 < deoxxa> nkuttler: the first is "if". you can use it to execute a certain "branch" of code depending on a specific condition. it also contains provision for executing another "branch" if the condition isn't passed.
06:01 < deoxxa> nkuttler: the second is "switch", which is like a turbo-charged "if"! you can use it to perform one of a list of branches based on the value of a statement.
06:02 < deoxxa> nkuttler: if you want anything more specific than that, you'll probably want to let us know what you're already working with. we're not, unfortunately, able to read minds. especially not over irc.
06:02 < ChrisPartridge> deoxxa: you should write a book on if/switch
06:02 < ljharb> deoxxa: by "turbocharged" you mean "antiquated and backwards", i assume
06:03 < deoxxa> probably
06:03 < deoxxa> or maybe i mean it's amazing!
06:03 < deoxxa> who knows!
06:03 < deoxxa> i might be crazy
06:03 < ljharb> switch statements are awful.
06:04 < bubbles10101> TheMoonMaster: hmm. yeah i had installed npm manually before. but the bin has dissappeared. weird
06:04 < TheMoonMaster> Odd.
06:04 < deoxxa> bubbles10101: homebrew is pretty bad at upgrading - you might want to consider maintaining a separate installation of node
06:05 < bubbles10101> deoxxa: oh really? is homebrew not advised then for installing node?
06:05 < ljharb> it's far far easier to use the git repository to install node.
06:05 < deoxxa> well i personally wouldn't advise it
06:05 < deoxxa> but i'm just one person
06:05 < nkuttler> deoxxa: have you ever worked with i18n?
06:05 < ljharb> git clone git://github.com/joyent/node.git; git checkout v0.8.8; ./configure; make; make install
06:06 < nkuttler> i don't think so if you think i need if/switch
06:06 < bubbles10101> hehe - yeah i just like it cos it keeps most of my installs in one place, nice and easy
06:06 < deoxxa> bubbles10101: i use n (https://github.com/visionmedia/n) to maintain installations of various versions in my home directory
06:06 < deoxxa> nkuttler: trust me, i've worked with internationalisation before ;)
06:06 < bubbles10101> deoxxa: link no work :(
06:06 < bubbles10101> wait nm - being a noob
06:06 < deoxxa> nkuttler: my point was actually that you gave us nearly 0 information about what you want to do
06:07 < nkuttler> uh oh i want to internationalize my code, but never mind
06:08 < bubbles10101> :p ahh tnx . visionmedia/n looks interesting. u not worried about conflicts tho?
06:09 < bubbles10101> also, why wouldnt a person just run the latest node?
06:09 < deoxxa> i develop with the latest version, then test with the version we run in production at work
06:09 < deoxxa> n makes it easy to do that
06:11 < bubbles10101> ahh ok, i see there is also this one https://github.com/creationix/nvm
06:12 < rvagg> milani: looks like I have your only (legit) dependent: https://npmjs.org/package/appjs - I'm a bit surprised by this!
06:13 < milani> rvagg, hehe. yeah. I tried to start your project! 
06:13 < milani> are you morkdown author?
06:13 < rvagg> yep, how'd it go for you?
06:14 < rvagg> the 32-bit chromium issue is a bummer
06:14 < rvagg> (for Mac users that is)
06:14 < rvagg> doesn't bother me on Linux!
06:14 < maxogden> substack: http://i.imgur.com/uwQgq.png
06:14 < substack> I approve of this.
06:14 < bubbles10101> hahah
06:15 < milani> rvagg, it is annoying 
06:15 < milani> people complain why you don't support it :D
06:16 < milani> we are working with chromium guys to fix the issues
06:16 < milani> but there are a lot of them, we are going one by one and fix them.
06:16 <@konobi> well, it also makes it sounds like it won't work on 64bit mac
06:17 < ekryski> maxogden: were you working on node on raspberry pi?
06:17 < milani> konobi, actually it won't if you use npm :) it needs more tricks. 
06:17 < maxogden> nope
06:17 < rvagg> milani: anyway, feedback from me is that appjs is kind of fun and pretty easy
06:17 < rvagg> I had an itch and it didn't take long to scratch it
06:17 <@konobi> milani: yeah.. but everyone's going to check the site =0)
06:17 < ekryski> ah. I thought you were putting up some tweets about that a while back. Must have been someone else.
06:18 < milani> ekryski, it was TooTallNate I guess.
06:19 < rvagg> ekryski: fyi there's #robotjs where you can find some hardware-node nerds
06:19 <@konobi> it works
06:19 < milani> rvagg, yeah it is easy to start. but it's not ideal for products. it needs more tools.
06:20 < ekryski> milani: ya that's who it was
06:20 <@konobi> node on rpi that is
06:20 < ekryski> ya thanks guys. I am just getting going on some of the robotjs stuff. Johnny-five is fantastic
06:20 <@konobi> no... he's alive
06:21 < rvagg> *was alive*... that was back in the 80's wasn't it? surely he's not still alive
06:21 < Kr_lee> console.log('hello world');
06:23 <@konobi> rvagg: http://www.imdb.com/title/tt0929281/
06:23 < rvagg> whaaat? 2013??
06:23 < rvagg> ahh... 1986, it was the '80s
06:24 <@konobi> yeah, remake
06:24 < rvagg> didn't know about a remake though, that's cool, my childhood all overagain!
06:25  * rvagg googles for more details and discovers that substack featured in the original Short Circuit: http://collider.com/wp-content/uploads/short-circuit-johnny-5-fisher-stevens.jpg
06:27 < Lorentz> wait, they're remaking it?
06:28 < Lorentz> what the hell
06:28 <@konobi> yar
06:30 < ChrisPartridge> That shouldn't be allowed
06:31 < div_> hi
06:32 < div_> anybody there
06:36 < milani> div_, 787 total.
07:16 < mscdex> ekryski: you can build node for arm without having to edit files. instead of editing common.gypi, just do (for pandaboard) `export GYP_DEFINES="armv7%=1 arm_neon=1"` instead. also you can just export your own CCFLAGS and CXXFLAGS instead of editing SConstruct. lastly, you don't need libssl* anymore :-)
07:17 < ekryski> mscdex: beauty! thanks. I'll give it a try and update my blog post
07:17 < ekryski> ya I had thought about the exports but I didn't realize that I don't need libssl
07:21 < mscdex> ekryski: yeah, node has been using the bundled openssl for all platforms for awhile now
07:37 < [AD]Turbo> hi there
07:42  * xxethanixx is a new user to node.js
07:43 < xxethanixx> working on an icecast server
07:43 < cryptopsy> i would like to be a part of that
07:43 < xxethanixx> orl?
07:43 < cryptopsy> yarl
07:43 < cryptopsy> ome to #ethan
07:44 < xxethanixx> well i need all the halp i can get
07:45 < xxethanixx> cryptopsy: sent you a pvt message
07:45 < cryptopsy> im blocking those, come to #ethan
07:58 < miblon> Hi guys and gals, I want to return something from a function with fs.writefile in it (temporary file name), how do I do that?
07:58 < rvagg> miblon: you return it via a callback function
07:58 < rvagg> miblon: or you use fs.readFileSync, but that's not recommended for performance reasons
07:58 < rvagg> sorry, fs.writeFileSync that would be
07:59 < miblon> rvagg, right now my callback is function(err), but there is no err object
07:59 < miblon> Can I check for other stuff?
07:59 < rvagg> so make it function(err, data)
07:59 < miblon> Aah, ok! Perfect
07:59 < rvagg> is this a callback on fs.writeFile?
07:59 < miblon> Gonna try now
07:59 < rvagg> or your own custom callback?
07:59 < miblon> a callback on fs.writeFile
07:59 < rvagg> ah, ok, then you won't get anything interesting from that
08:00 < rvagg> you need to pass it down, do you have some example code you can show?
08:00 < rvagg> stick it in a gist perhaps?
08:00 < rvagg> so we can see what you're trying to d
08:00 < rvagg> o
08:00 < rvagg> .. o o o...
08:02 < miblon> https://gist.github.com/3523940
08:06 < rvagg> https://gist.github.com/3523962
08:06 < rvagg> that's node-style
08:06 < rvagg> if you have a function that does anything async, calls anything that requires a callback, then your function should require  a callback argument and use that
08:06 < theblackbox> anyone use db-migrate? I'm facing an issue I'm thinking might be due to [circular] references in a table - the migration freezes
08:07 < rvagg> miblon: and always your first argument to a callback should be the error object, null if there is no error
08:08 < rvagg> miblon: follow that pattern and you won't confuse anyone and you'll also be able to more easily integrate with other node libs
08:09 < miblon> rvagg, thanks! I am diggin in now
08:09 < rvagg> great
08:11 < rvagg> miblon: also, try and remember that return & throw shouldn't be used in functions that run async, any function that takes a callback shouldn't need to 'return' unless you're doing fancy chaining or something, and shouldn't 'throw' because it'll likely get lost if it's running on a later tick
08:14 < miblon> rvagg, understood. Back to the design table. I do a request to a remote server and on('end') create two files and want to write their names to the response object...
08:15 < rvagg> cool, that can all be done in the callback that's run from your function
08:15 < rvagg> because you have 2 files to write you may want to run them at the same time so you'll have 2 callbacks to deal with
08:15 < rvagg> so things start to get messy and you may want to consider a helper lib, like caolan/async
08:21 < theblackbox> it seems to be happening only when I'm trying to apply a FORIEGN KEY CONSTRAINT onto the circular ref though
08:21 < theblackbox> ugh… s/IE/EI … it's early!
08:26 < miblon> I created a github repo for my project
08:26 < miblon> https://github.com/milovanderlinden/dino.js
08:26 < miblon> which is basically a wrapper for an existing rest service that is kind of crappy
08:27  * miblon hopes his wrapper is less crappy
08:28 < deoxxa> miblon: you can simplify a bunch of that - check out `request'
08:28 < deoxxa> https://github.com/mikeal/request/
08:29 < miblon> deoxxa, thanks, looking at your code now
08:30 < deoxxa> oh it's not mine, that's mikeal's deal
08:30 < miblon> deoxxa, don't know if I can use it. I am doing some manipulation to the output to make it more usable
08:30 < miblon> deoxxa !== mikeal, understood ;-)
08:31 < deoxxa> yeah, you'd just do `request("http://whatever/some/thing.json", function(err, res, data) { console.log(data); // your json })'
08:31 < deoxxa> it just lets you avoid doing the buffering on your own
08:32 < miblon> deoxxa, yeah, sounds good. But doing buffering on my own helps me understand node.js, so it also has it's benefits
08:32  * deoxxa nods
08:33 < theblackbox> is there a reason no one is using db-migrate? I realise it's not exactly a mature module… wondering if this is another example of that
08:33 < miblon> deoxxa, and anyhow, left or right, this code is already a lot leaner than the java code it originates from ;-)
08:33 < theblackbox> the query runs fine in postgres itself
08:34 < miblon> theblackbox, sounds good, especially for peeps commin' from a rails background
08:34 < theblackbox> bah, sorry all my fault - was using a null callback not the one db-migrate was passing in...
08:35 < theblackbox> need coffee
08:36 < theblackbox> yeah it seems it but there are a few things that aren't supported, or implemented but not working correctly… kinda like me at the moment
08:41 < codeAssassin> hi all
08:44 < codeAssassin> i'm working on a very cool project with node.js and socket.io. However, the on('error') event doesn't seem to fire in chrome :S
08:44 < dr0id> tell me more about the very cool project
08:44 < `3rdEden> error events are overrated
08:45 < `3rdEden> codeAssassin you are probably more interested in the connect_failed event
08:45 < deoxxa> that sounds a lot like an error
08:45 < `3rdEden> seee https://github.com/learnboost/socket.io-client#events
08:46 < `3rdEden> the root cause of a failed connection does not need to be an error deoxxa
08:46 < codeAssassin> well i want it to do something when the server shuts down :)
08:46 < `3rdEden> you probably want to listen for the reconnect events then
08:46 < `3rdEden> as there are no events for server death
08:49 < codeAssassin> `3rdEden: you're name is hell to quote lol, i'll try the reconnect event
08:49 < `3rdEden> :D
08:49 < `3rdEden> blame IRC for not allowing usernames to start with a number
08:49 < codeAssassin> does nothing
08:50 < codeAssassin> weird because the error event does fire in every other browser
08:50 < codeAssassin> v8 eighter does a good job, or messes it up
08:50 < `3rdEden> odd
08:50 < codeAssassin> which makes no sense since node.js is also v8 based :p
08:54 < codeAssassin> https://gist.github.com/8d6fa73fbe4ddd9fb738 <--
08:55 < codeAssassin> i kind of disabled the reconnect event because the browser kept trying to reach the node server, but it was down
08:55 < codeAssassin> i don't want it to try, it just needs to stop and show a message
09:09 -!- mode/#Node.js [+o xyxne] by ChanServ
09:24 < milani> http://nikhilm.github.com/uvbook
09:24 < milani> thx for the guy behind this:)
09:26 <@konobi> milani: is it the nss stuff that's holding up the mac 64bit build?
09:26 < milani> konobi, no it's more than that. 
09:27 < milani> konobi, actually nss is not the problem it's chromium crypto module which received a patch and should be fixed by now.
09:28 < milani> there are some carbon framework stuff which won't get x64 build at all, so they need to be updated to cocoa
09:28 < milani> and also ffmpeg, yuv converters etc.
09:29 < milani> we are a group of 4 devs working on more bits on chromium, if you like to join us.
09:29 < ljharb> can you make chrome save tabs in the session when they *start* loading like safari, instead of when they finish loading?!?
09:30 < ljharb> cause that'd be awesome, and would make chrome usable for me.
09:30 <@konobi> there a setting for that
09:30 < ljharb> um, where?
09:30 < ljharb> and why isn't it defaulted to on.
09:30 <@konobi> look it up
09:30 < milani> hehe you can ask in #chromium-support
09:31 < ljharb> konobi: dude, i have no idea how. i've googled about this problem for years.
09:31 <@konobi> "on startup" under preferences
09:31 < ljharb> i'm not talking about the "save tabs" checkbox.
09:31 < ljharb> thats not at all what i mean.
09:32 < ljharb> i mean, reopen chrome after a crash when some of the pages don't load (let's say your vpn is off). then quit chrome and reopen it. the tabs that weren't loaded successfully have disappeared.
09:32 < ljharb> this isn't a setting, it's a flaw in the way chrome saves tabs in its sessions.
09:32 < ljharb> one that safari gets right.
09:32 <@konobi> file a bug
09:33 < ljharb> filing a bug on large open source projects is usually more trouble than its worth.
09:33 <@konobi> what milani is talking about is not chrome, but CEF
09:34 < milani> konobi, it's now an effort to get chromium for x64 not CEF:)
09:34 < ljharb> basically i just don't know enough about the problem, nor about the chrome/webkit/chromium/safari stuff, to figure out how to describe my bug any better.
09:35 <@konobi> ljharb: hitup the chrome channel
09:36 < ljharb> i'll give that a shot tomorrow, thanks. just figured if some of you were working on chromium you might have something more specific in mind :-)
09:56 < AustinYun> hey, question about the way the stream API works
10:01 < AustinYun> https://gist.github.com/3525257 <--- so this works, but is there a better way?
10:02 < AustinYun> i mean my first though was to do oppressor(req).pipe(res).end(data) but
10:02 < jibay> Hello all, do you know a way to replay events captured by monitorEvents(window) in javascript browser console ?
10:06 < thomaschaaf> Hey I am on Debian Wheezy and tmp is mounted in RAM (as tempfs). Thus fs.rename() doesn't work anymore. can I change the tmp folder used by node?
10:08 < AustinYun> you can't give the file path to wherever you want to go in the arguments for rename?
10:11 < thomaschaaf> AustinYun: I get EXDEV, cross-device link not permitted 
10:13 < AustinYun> odd, but way out of my depth, sorry :p
11:01 < codeAssa_> weird i got disconnected
11:02 < codeAssa_> `3rdEden: you there/
11:02 < codeAssa_> btw why didn't you just pick ThirdEden or something?
12:36 < scott_gonzalez> isaacs: Is there a workaround for this? https://github.com/isaacs/npm/issues/2523
12:37 < scott_gonzalez> I assume running `npm install` won't fetch an updated verison when pointing at a git repo.
12:44 < Dream707> is it a proper place to ask a question?
12:45 < mmdm> you just asked a question :)
12:45 < Dream707> ok
12:46 < deoxxa> Dream707: what's up
12:47 < Dream707> so i have 2 separate servers and a file that needs to be transmitted directily, also there must be and option to accept or dismiss that, what is the best way to do it?
12:47 < deoxxa> probably HTTP
12:48 < Dream707> can you explain please?
12:48 < deoxxa> HTTP is an initialism, standing for "hypertext transport protocol"
12:48 < mmdm> why do you need the option to accept or dismiss?
12:48 < Dream707> yeah
12:49 < Dream707> mmdm cus its a chat app
12:49 < deoxxa> commonly used for interprocess communication between client and server, it has been quickly gaining traction for inter-server communication in the last few years
12:49 < RLa> you can always extend it with X-headers
12:50 < deoxxa> AS A MECHANISM FOR TRANSFERRING FILES CONDITIONALLY, it would excel. some notable features that might interest you are preconditions and the "expect: 100-continue" header.
12:50 < RLa> X-File-Accepted: no
12:50 < deoxxa> seriously this doesn't get much simpler
12:50 < deoxxa> this is like web applications 101
12:50 < deoxxa> so i'm guessing there's some other question you actually want to ask, Dream707
12:51 < deoxxa> instead of "how do i transfer a file with the ability to reject it"
12:51 < deoxxa> if you can figure out a way to word what you actually want to ask, i'm sure everyone will have a much better time :)
12:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:53 < rvagg> having a bad day deoxxa?
12:54 < deoxxa> i have a headache :<
12:54 < Dream707> so i have a chat app, ant i want to inplement feature to allow users to send a files to each other, thats why i need option to reject it, i already tried with socket io, but it dont worked
12:54 < deoxxa> hooray!
12:54 < deoxxa> that's better
12:55 < deoxxa> now the issue, it sounds like, is that you don't have any logic there around sending files
12:55 < deoxxa> you might want to send a request saying "hey can i send x, it is y bytes and of z type", then wait for a "yes" or "no" response. upon receiving the response, you start sending the file.
12:55 < deoxxa> (or not, depending on the response)
12:56 < Dream707> i think i have to sent chunks of data between sender and reciver
12:56 < deoxxa> that's going to be much easier than trying to stop a transfer that's in progress
12:56 < deoxxa> well yes
12:56 < mmdm> you have to define a protocol
12:57 < deoxxa> keep in mind that if you use something like socket.io, you're going to be piping all the data through an intermediary server
12:57 < deoxxa> which might be ok
12:57 < deoxxa> but if you have more than a few users, it's going to quickly become a bottleneck
12:57 < Dream707> no i want to do it directly
12:58 < deoxxa> well you're not going to be able to transfer it via socket.io then
12:58 < deoxxa> your only option right now is WebRTC, which isn't yet stable and is only in chrome
12:58 < deoxxa> ...and only recent builds have it turned on
12:59 < Dream707> server might be useful for establishing connect with sender and reciver but then it unneded
12:59 < deoxxa> correct
12:59 < mmdm> is your program web-based if you don't mind me asking
12:59 < deoxxa> but browsers have to catch up first
12:59 < Taneem> TIL about webRTC
13:00 < Taneem> interesting
13:00 < Taneem> microsoft submitted a competing standard just 2-3 weeks ago
13:00 < Dream707> well it is base on appjs, wich is node plus cef
13:00 < `3rdEden> microsoft is always late to the party
13:00 < Dream707> based*
13:01 < deoxxa> `3rdEden: and that's a pretty darn good tactic if you ask me
13:01 < deoxxa> `3rdEden: let everyone else iron out the kinks, come in with your own implementation, clean up the market
13:01 < deoxxa> just look how far C# has come in such a short time, for example
13:01 < deoxxa> when you pit it against what it's designed to compete with (i.e. java), it's great
13:02 < `3rdEden> deoxxa: they usually come with their implementations after 2 - 3 brwosers have already implemented it
13:02 < `3rdEden> same as webRTC, it's in FF and chrome/webkit..
13:02 < deoxxa> well yeah, their browser game has always been a bit sloppy
13:02 < `3rdEden> they did the same for HTTP, a competing spec agains SPDY...
13:02 < `3rdEden> after Opera, FF, and Chrome implemented SPDY..
13:12 < drudge_> maxogden: callbackhell.com is down
13:48 < aldus> hi. Nodejs beginner here... I am actually using the db-mysql extension for querying mysql. Is this a safe choice? I have some weird problem where queries seem to be cached (the same query returns the same result for two times even if the second time result should be different). Any guess?
13:48 < milani> hey is there any module to create a p2p connection?
13:57 < kokotron> im a newb with no node.js+database experience, but i've heard many a time that mongoDB is the way to go
13:57 < kokotron> again, no experience 
13:58 < maximiliano> It is certainly A way to go :)
13:58 < gkatsev> it depends on your use case. If your data fits better in an RDB, go with that, if a non-schema document store is better, go with something like mongo or couch
14:00 < Top> .
14:01 < RLa> non-schema doesn't mean you should have arbitrary mess stored in db
14:02 < maximiliano> kokotron: Depending on your needs you could consider also Redis, it's awesome!
14:02 < gkatsev> RLa: yes, not saying it does
14:02 < dr0id> mongodb is the way to go if your aim is to scale in the web
14:03 < gkatsev> eh
14:03 < gkatsev> use the db that fits your data
14:03 < gkatsev> dont fit your data to the db
14:04 < Leeol> For anyone familiar with Browserify.. Does it expose a module name or anything in the global/window namespace for browsers? Or should you do that yourself? (eg: window.MyPackage = require('./lib'))
14:06 < chrisjaure> Leeol: pretty sure you need to do that yourself
14:06 < Leeol> chrisjaure: k, i was thinking that, but it seemed like it would offer an option to expose a namespace with a flag, but i couldn't find it :s. Thanks :)
14:07 < chrisjaure> Leeol: browserbuild exposes a global if that's all you want https://github.com/LearnBoost/browserbuild
14:09 < gkatsev> ugh, globals. I'd avoid globals as much as I can
14:09 < Leeol> gkatsev: How else would you expose the namespace?
14:10 < Leeol> (I'm honestly asking)
14:10 < Leeol> I agree with you, but is there another method i am missing?
14:10 < gkatsev> just do it the same as you'd work in node
14:11 < Leeol> gkatsev: <script>require('./lib');</script> would fail i would think
14:12 < Leeol> Or does browserify expose a global require! (haven't even tried, i assumed it was closured for use only by the node-libs)
14:12 < gkatsev> you'd still want to do "var lib = require('./lib');"
14:12 < gkatsev> and then run browserify on that file
14:12 < gkatsev> and then you do <script src="browserifed-file.js"></script>
14:12 < Leeol> gkatsev: Oh nono, i am talking about external to browserify
14:13 < Leeol> gkatsev: You write a lib that a browser based user wants to consume. Forcing him to use Browserify seems silly (why did you even use browserify in the first place then?)
14:13 < gkatsev> can you use require outside of browserify?
14:13 < Leeol> gkatsev: I just tried, it's not exposed globally
14:13 < gkatsev> yes
14:13 < gkatsev> you run browserify locally, it created a "compiled" file that you include
14:13 < Leeol> Of course
14:14 < bradleymeck> einaros: is there a reason `ws` doesn't follow streams implementations? particularly .pipe and on('pipe')
14:14 < CIA-1> node: Bert Belder reviewme * rb0d2795 / (3 files in 3 dirs): child process: fix processes with IPC channel don't emit 'close' - http://git.io/wdHMkQ
14:14 < gkatsev> Leeol: ooh, I understand what you're trying to do.
14:14 < Leeol> gkatsev: But then what? You release this file, the user puts it in his html-import, and how does he use it? He can't "require('lib')", he needs you to expose a global namespace for your library
14:15 < gkatsev> Leeol: you want to expose the module in an object or something so that it's available.
14:15 < Leeol> It's not ideal of course, but browsers suck ass. heh
14:15 < Leeol> Yea
14:15 < gkatsev> Leeol: but no, browserify is meant to be used with browserify. If you want, release non-browserify versions
14:15 < gkatsev> a lot of libs release it for browserify, ender, require.js, and vanilla js includes
14:16 < gkatsev> or a subset of the above
14:16 < Leeol> gkatsev: Is there something "wrong" about just using browserify to compile for the browser? It's trivial to expose the namespace yourself
14:17 < gkatsev> I dont know browseriy enough to answer that.
14:17 < gkatsev> substack: ^^
14:17 < Leeol> k, ty for your honest answer
14:18 < Leeol> gkatsev: Nah, i'm sure it's fine, it was just the way you worded your prior statements that made me assume you thought it was ill-advised to use browserify to compile your lib for "normal" consumtion
14:18 < gkatsev> yeah, not sure whether ill-advised, but I dont think it's really used that way.
14:18 < gkatsev> maybe substack will show up. He should know a bit better :)
14:18 < TimTim`> which methods (or libraries if necessary) do you folks recommend for managing fairly complex node apps? from serving pages (i use express) to managing users/databases to simple stuff like password resets, etc.
14:19 < TimTim`> my app right now is 1800 lines -_-
14:19 < TimTim`> it's really organized but i'd prefer it to be way more modular/extendable
14:20 < bradleymeck> TimTim look into broadway and i would try to make things using plugins via that model
14:20 < CIA-1> node: Bert Belder v0.8 * rb0d2795 / (3 files in 3 dirs): child process: fix processes with IPC channel don't emit 'close' - http://git.io/wdHMkQ
14:21 < TimTim`> i was thinking of maybe incorporating something like this: http://ejohn.org/blog/simple-javascript-inheritance/
14:22 < chrisjaure> Leeol: i made a browserify plugin to help with packaging up scripts that expose a global that might be useful for you https://github.com/chrisjaure/loadify
14:24 < aldus> hi. Nodejs beginner here... I am actually using the db-mysql extension for querying mysql. Is this a safe choice? I have some weird problem where queries seem to be cached (the same query returns the same result for two times even if the second time result should be different). Any guess?
14:24 < Leeol> chrisjaure: Nice! `name: 'myScript', // global that will be available if loaded via script tag` is exactly what i was looking for. Is this available via command line?
14:25 < mochja> hello everyone, I'm working on some tcp server I just got problem when I put it on remote server, when I send big packet, the tcp protocol will divide it to more parts, I need split in to one packet, packet structure is like, [0,0,0,0,packet_len,data,crc] what is a best practice to do that?
14:25 < mochja> in java I have something like https://gist.github.com/a2c497a38687a872d041
14:26 < chrisjaure> Leeol: hmm, i never tried it via command line, feel free to file an issue if it doesn't
14:26 < einaros> bradleymeck: well it's been on the todo list for some time, and is trivial to implement
14:26 < bradleymeck> einaros if i throw you a patch ?
14:27 < Leeol> chrisjaure: Not a huge issue, i'll just toss the loadify code in my *akefile, and figure out how to make browserify compile from an API (rather than the middleware i've only used it as)
14:27 < einaros> bradleymeck: if you do, I'll adapt that to work with the other changes I've put into the development version
14:32 < Domenic> Anyone know how English-friendly HuJS is going to be?
14:49 < avoidwork> anyone know why i'd have, what seems to be a socket error, when making a http.request() POST followed by a GET to the same host, but a diff url? I can see the first request & response, and I see the outbound request, but the server never receives it, and then the socket emits econnrefused
14:50 < avoidwork> flip side, i can make hundreds of gets without issue
14:55 < armetiz> Hi there.
14:55 < armetiz> I'm new on NodeJS. And I'm trying to deploy my apps in production.
14:55 < armetiz> I'm totally lost around bash, init.d script and I don't want to install tools like monit.. So I have build my own init.d template using JS
14:56 < armetiz> Can you take a look on it and tell me what do you think about it ? 
14:56 < armetiz> https://github.com/armetiz/node-init-script/blob/master/template.js
14:56 < TrahDivad> How would I do a "map" operation on an Array, but with a function that is defined on the array objects?
14:57 < jmar777> TrahDivad: as in, each item has it's own mapping function?
14:58 < TrahDivad> jmar777: an elegant version of "array.map(function(obj) { obj['method']() })"
14:58 < jmar777> TrahDivad: well, honestly just about what you have there (with a return statement, of course)
14:59 < TrahDivad> jmar777: ok, thanks for the info. I thought there was another way
15:13 < jmar777> quick poll: recommended hosting for a node.js + mongodb site?
15:14 < jmar777> anyone prefer ec2 over nodejitsu over whatever?
15:18 < TrahDivad> jmar777: only tried nodejitsu so far. It's nice as targeted to node.js, but does not seem to be 100% production ready
15:19 < chesles> jmar777: i use EC2, but i also run a few non-node apps on it
15:19 < jmar777> TrahDivad, chesles: thanks
15:20 < jmar777> i'm just trying to throw a pretty simple blog up - so not expecting high traffic, and i suppose a little downtime wouldn't kill me either. more interested in ease of deployment and such
15:21 < jmar777> i played around with nodejitsu back when they were in the free/private beta phase. liked it a lot at the time
15:24 < TrahDivad> jmar777: nodejitsu is great in that creating a new database is a simple command
15:25 < jmar777> TrahDivad: cool. the site i had on there before was entirely static, so i haven't played with that yet
15:26 < CIA-1> libuv: Bert Belder v0.8 * r24c062c / src/win/tcp.c : windows: fix memory corruption when closing shared server sockets - http://git.io/sTd5og
15:26 < CIA-1> libuv: Bert Belder master * r24c062c / src/win/tcp.c : windows: fix memory corruption when closing shared server sockets - http://git.io/sTd5og
15:26 < CIA-1> libuv: Bert Belder master * r5eb1d19 / src/win/tcp.c : Merge branch 'v0.8' - http://git.io/layeSg
15:29 < CIA-1> node: Bert Belder v0.8 * r9603f08 / (5 files in 3 dirs): uv: upgrade to 24c062c - http://git.io/19DB-A
15:29 < russfrank> how can I expand %appdata% on windows?
15:29 < russfrank> can I just use it in paths, ie will windows automatically expand it
15:30 < aldus> I don't understand why db-mysql seems to be caching queries even if my database has cache disabled, seems bugged :(
15:31 < CIA-1> node: Bert Belder master * red10340 / (3 files in 3 dirs): uv: upgrade to 5eb1d19 - http://git.io/p8LB7g
15:36 < peteski> Hey all, is it possible to have node sharing a port with something else? I'm a n00b but trying to use it as a basic webserver (IIS is b0rked) and want to run my WCF console app and node on port 80 so that it gets around cors stuff for testing on my dev box.
15:36 < peteski> I had been reading this post about using node as a basic web server: http://thecodinghumanist.com/blog/archives/2011/5/6/serving-static-files-from-node-js
15:37 < peteski> When I fire them up together node gives me a Error: listen EACCES 
15:37 < peteski> oh my
15:44 < peteski> I think IIS and WCF sharing ports is a magic MS thing.. nevermind I guess, will just have to fix IIS and not get to play with nodejs today ;(
15:45 < igl> sux to be with windows
15:46 < peteski> ja.. 
15:46 < peteski> Work
15:46 < Hupo> nothing wrong with windows on desktop!
15:47 < yawnt> tjholowaychuk: are you there?
15:48 < yawnt> +mixin(something.function(something), 'val') seems to fail in jade
15:48 < yawnt> am i doing something wrong or is it a bug?
15:50 < igl> "mixin funcName(args)" is the jade syntax
16:15 < aldus> hi. Nodejs beginner here... I am actually using the db-mysql extension for querying mysql. Is this a safe choice? I have some weird problem where queries seem to be cached (the same query returns the same result for two times even if the second time result should be different). Any guess?
16:20 < scott_gonzalez> isaacs creationix: Would love your thoughts on https://github.com/jquery/qunit/issues/190#issuecomment-6666569 and whether this is a widespread problem that we should be concerned about.
16:38 < jmpe> Can anyone confirm the node-weak will install on Windows XP SP3? I have installed VS C++ 2010 x86. 
16:39 < jmpe> I am thinking I am having an issue with node-gyp, but not sure.
16:39 < mscdex> jmpe: if it ordinarily compiles on windows, i don't see why not
16:40 < mscdex> jmpe: what is the problem?
16:43 < jmpe> The logfile is here: http://pastebin.com/rXRuJGxz
16:43 < jmpe> Line 199: Exception: binding.gyp not found (cwd: C:\)
16:54 < xico> Hello personel. 
16:54 < xico> Does anyone use Mongoskin and DBRefs with MongoDB?
16:55 < xico> I can't find a better place to ask this :\
16:56 < mscdex> jmpe: hrmm... it builds fine here on xp64
16:57 < exit2> is node.js a web framework?
16:57 < russfrank> exit2: no
16:58 < mscdex> exit2: node.js is a set of bindings on top of libuv and v8
16:58 < jmpe> mscdex: Tried originally on Windows 7 64bit, didn't work, now on Windows XP 32bit, same problem. I must be doing something wrong, but what?
16:59 < bubbles10101> exit2: its more like a runtime and ecosystem of modules similar to unix in a way. however there are web frameworks that are built on it.
16:59 < bubbles10101> meteor.com for example is a full stack framework that was built on node
16:59 < jmpe> mscdex: Did you have to install anything else or did you simply 'npm install weak'?
17:00 < mscdex> jmpe: just `npm install weak`. i even used the same directory tree you started from
17:00 < mscdex> :S
17:00 < exit2> I see, thanks for the help.  I'm a Django developer and hear a lot about Node.js all the time so I wanted to look into it
17:01 < russfrank> exit2: node is more like twisted or gevent than django
17:01 < mscdex> jmpe: the only difference i can see is that i'm using python 2.7.2 and not 2.7.3, but i'd hope that wouldn't make a difference...
17:01 < russfrank> in that it's a framework for writing io driven programs
17:01 < torrio> hi guys, how to store POST data on a node.js server into a variable - i want to access the post data the same way as request.url.query ?
17:01 < russfrank> uses a different abstraction than either of those though
17:02 < bubbles10101> exit2: sure - yeah its confusing at first, because node is much more sprawling, diverse and low level than django or rails
17:03 < bubbles10101> if you thinking along those lines, checkout backbone.js, ember.js or meteor.com
17:03 < torrio> when using request.on("end", ...) i am able to log it into console, but can not return it ?!
17:03 < jmpe> mscdex: Did you previously install Visual Studio 2010 C++ as called for here: https://github.com/TooTallNate/node-gyp?
17:04 < mscdex> jmpe: have you looked at your environment variables to see if there is something pointing to the C:\ root that node-gyp/vs2010 might be looking at?
17:04 < mscdex> jmpe: yes, i'm using express
17:05 < exit2> bubbles10101: ah I see thanks, I just find myself using tons of js with my django projects as it is, and was thinking it might be best to have something that is purely built in js versus having several different languages between frontend and backend
17:08 < mscdex> jmpe: what does it show if you try and execute this from that same directory tree?: node -p -e "require('path').resolve('build')"
17:08 < russfrank> exit2: nodejs can be used to do the same sorts of things django does, express is probably the most popular nodejs web framework 
17:08 < bubbles10101> exit2: yeah despite node being quite simple, to start with, it's actually a massive time investment, just because the landscape is so vast with tons of different module combinations. trying to figure out how everything fits together can be daunting
17:09 < russfrank> exit2: so nodejs itself isn't a web framework but web frameworks can be written on top of it
17:09 < bubbles10101> sorry yes, forgot about express too. add that ot the list :p
17:10 < jmpe> mscdex: c:\jmpe\avl\build
17:10 < mscdex> weird
17:11 < jmpe> mscdex: I don't see anything obviously wrong in my ev: http://pastebin.com/9xS1WEYW
17:12 < exit2> meteor is pretty sweep, watching these videos now
17:12 < mscdex> jmpe: well, not so much the path, but any other variables shown by `set`
17:13 < mscdex> jmpe: have you also tried from a different, new directory?
17:13 < exit2> *sweet
17:15 < jmpe> mscdex: Tried c:\test with same result: Exception: binding.gyp not found (cwd: C:
17:15 < mscdex> ok
17:19 < mscdex> jmpe: does it just happen with the `weak` module or any binding?
17:22 < jmpe> mcdex: I suspect with any. I think it may be an issue with node-gyp?
17:22 < mscdex> jmpe: also, was the problem you had on win7 the same?
17:22 < jmpe> msdex: Yes, the same.
17:22 < mscdex> jmpe: vs2010 pro or vc2010 express?
17:23 < jmpe> msdex: Express
17:24 < mscdex> jmpe: hmm yeah i don't know offhand, i've never seen that issue before
17:24 < mscdex> jmpe: i'd definitely file an issue on node-gyp's issue tracker
17:24 < TooTallNate> jmpe: i've never seen it either
17:25 < mscdex> ha
17:26 < fatshotty> hi there
17:27 < TooTallNate> so is the tl;dr that it thinks you're in C:\ but you're really somewhere else?
17:27 < fatshotty> hello TooTallNate 
17:27 < fatshotty> I'm trying to install nodejs on raspberry
17:27 < TooTallNate> fatshotty: hello :)
17:27 < TooTallNate> oh nice
17:27 < fatshotty> did you already try?
17:27 < TooTallNate> you should try my "pi" branch ;)
17:28 < TooTallNate> yes, i have it running
17:28 < fatshotty> oh good… any online tutorial, too?
17:28 < TooTallNate> i'm gonna write a blog article this weekend i think
17:28 < jmpe> TooTallNate: That is what it appears to be as far as I can tell.
17:28 < TooTallNate> since i rewrote my blog engine last weekend for the occasion
17:29 < TooTallNate> jmpe: ya i mean, that's really weird, haha
17:29 < TooTallNate> jmpe: it's gotta be some weird configuration thing
17:29 < TooTallNate> i'm just not sure though
17:30 < TooTallNate> fatshotty: https://github.com/TooTallNate/node/compare/joyent:v0.8...TooTallNate:pi
17:30 < TooTallNate> fatshotty: that should compile on the pi basically out of the box
17:30 < TooTallNate> i've been cross-compiling
17:32 < fatshotty> ok thanks, tomorrow i'll be going to try ;)
17:32 < fatshotty> so, clone the repo and configure, make, make install
17:32 < fatshotty> right?
17:34 < milani> TooTallNate, should you pass --dest-cpu=arm to build for pi?
17:39 < addisonj> any mongoose users here? trying to figure out if mongoose 3 supports read preferences
17:40 < addisonj> I see how to do it on an individual query, but not on a per-collection basis
17:46 < TooTallNate> milani: i didn't have to even when cross compiling. our ./configure script detected the proper arch of the cross compiler
17:47 < jerrysv_> TooTallNate: making better pi progress?
17:48 < TooTallNate> jerrysv: well ya :) down to like 3 failing tests i think
17:48 < TooTallNate> and we got the bundled ssl working so i'm rather happy
17:48 < jerrysv> TooTallNate: nice! i ran out of time for a while
17:48 < jerrysv> TooTallNate: awesome, in master yet?
17:49 < TooTallNate> jerrysv: most of the necessary stuff is in v0.8 already. some upstream v8 and libuv stuff is in my pi branch
17:49 < TooTallNate> jerrysv: https://github.com/TooTallNate/node/compare/joyent:v0.8...TooTallNate:pi
17:49 < jerrysv> TooTallNate: will definitely have to take a look - i haven't booted a pi in a while, waiting for parts and more parts to show
17:59 < doki_pen> is there anyway to temporarily change npm prefix to install a package into a sandbox?
18:01 < bradleymeck> doki_pen https://npmjs.org/doc/folders.html 
18:07 < doki_pen> bradleymeck: that doesn't tell you how to change it
18:07 < doki_pen> is it impossible?
18:12 < chakrit> got this after a fresh npm install today: http://gist.github.com/3535963
18:12 < chakrit> extraneous/invalid packages under the request module
18:12 < chakrit> problem with the module? npm? or just me?
18:17 < dtrejo> npm prune
18:17 < dtrejo> npm install .
18:17 < dtrejo> npm ls
18:20 < chakrit> dtrejo: ah, that fixed it thanks!
18:20 < dtrejo> yay :)
18:21 < chakrit> dtrejo: what does it do anyway?
18:21 < chakrit> is there a link i can read up on this?
18:21 < dtrejo> npmbro help prune
18:21 < npmbro> dtrejo: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20prune
18:21 < dtrejo> i wrote the bot too :)
18:22 < chakrit> cool, thanks a lot!
18:22 < dtrejo> np man
18:24 < chakrit> never liked bundleDependencies -.-
18:32 < EyePulp> help me remember -- if I've got a function that calls an async operation midway through, but the original function ends, that async op keeps on trucking, correct?
18:33 < lohkey> EyePulp: correcto mundo
18:34 < EyePulp> cool
18:37 < lmatteis> sup noders
18:37 < lmatteis> what's noding today?
18:39 < estbd> does anybody know of docs for embedding nodejs in a c++ app? instead of lua or python
18:40 < jocafa> i only know of this: https://developers.google.com/v8/embed
18:41 < estbd> jocafa: i would like to keep node's bindings (fs, http, etc) which are quite nice
18:41 < jocafa> *nod*
18:42 < jocafa> some sort of libnode would be awesome
18:42 < estbd> exactly
18:43 < estbd> i have started down that path but am having context issues where my script does not see the module.js bootsrap exports/require
18:44 < jocafa> my c++fu is weak :(
18:46 < estbd> no worries :)
18:58 < visnup> node knockout registration is soft-opened now
18:58 < visnup> for registration
18:59 < visnup> please don't tweet or publicize yet as we're making sure there are no bugs in registration
18:59 < visnup> nodeknockout.com
18:59 < visnup> but feel free to register if you want (and let us know if you run into any problems)
19:13 < avoidwork> g'day .. i just noticed something about http.request(), and i was wondering if it was intention or a bug of sorts..
19:13 < avoidwork> if i POST and set a content-length header (as i should), then make a GET ... the socket is reused and the content-length header is present
19:14 < avoidwork> i'm not really sure why that's occurring, any ideas how i could fix that? i assume it's a flaw on my end
19:23 < stagas> visnup: looks good
19:23 < visnup> stagas: whoo hoo. tweeted.
19:29 < gerad> stagas: thaks
19:32 < prettyrobots> lobste.rs invite anyone?
19:32 < prettyrobots> alan@prettyrobots.com
19:34 < milani> visnup, !! going to register!
19:34 < milani> visnup, I read in the site there is no prize this year. ha?
19:34 < lmatteis> i hate invite onlly sites
19:35 < prettyrobots> lmatteis: It's a beta thing.
19:36 < jocafa> what is it?
19:42 < fosstux> Hi! I'm new to node.js. I'd like to use it for a project - but how can I find out what I'd like to use as the base: Meteor, ….
19:42 < fosstux> I'd like to create a project showcase site...
19:43 < drudge_> Meteor :X
19:44 < benatkin> ^^ this title is my favorite :)
19:54 < AviMarcus> I'm using the package "request" to login to a site and post to retrieve some data from my account. How do I save the file? myResult.pipe(fs.createWriteStream("cdr-"+argv.s+'.zip'));  is creating the file with some information, but inside is blank. I know in the browser the request takes 3-9 seconds, but node.js finishes right away. I tried seting timeout:20000 but that seemed to have no affect. suggestions?
19:55 < visnup> milani: likely no prizes
19:55 < milani> lol
19:55 < milani> I wanted to win one!
19:55 < milani> ;)
19:55 < milani> then why people should compete?
19:55 < visnup> maaaaybe virtual ones
19:55 < milani> ;)
19:56 < visnup> milani: but no more trying to ship macbooks to brazil for me
19:56 < milani> haha right
19:56 < milani> so we can still have github premium account for example.
19:56 < milani> or heroku 
19:56 < visnup> yeah, possibly. we'll see
19:56 < visnup> or dropbox space, etc.
19:57 < milani> hope so. if there is no price, there is no need to compete! no one compete for nothing:D
19:57 < visnup> overwhelming feedback has been that they will
19:57 < visnup> which I didn't understand myself
19:57 < visnup> but am happy to hear it :)
19:57 < milani> hmm those who are in the site will be happy, it will be fun
19:57 < visnup> yeah
19:58 < visnup> at least, we want to set expectations way low
19:58 < milani> but for those not there, it has no fun without prizes
19:58 < visnup> so if we do add prizes of some sort later, it'll be a bonus
19:59 < visnup> it's hard to say no when companies say they want to give away their stuff for free
19:59 < milani> right:) thank you for your hard work
19:59 < visnup> milani: thanks for taking part!
20:28 < Hotroot> Sort of weird question. I have a .js file that holds additional functions, and uses exports.funcName to make them accessible to the main JS file
20:29 < Hotroot> How would I make a function that the exported function can use?
20:29 < maxogden> look at any of the 12,000 modules on npm for examples :)
20:29 < Hotroot> Say I have exports.func1 and exports.func2. Both of these functions need a say() function
20:29 < RLa> just add in the same module
20:30 < Hotroot> Just function, or exports.function?
20:31 < Hotroot> Nvm, think I get it
20:31 < Hotroot> Thanks
20:57 < Nasga> hello, does anyone use spacemagic ?
20:57 < cjblomqvist> How can I convert a (file) stream into base64 continuously? I'd like to be able to do something like this: stream = fs.createReadStream(..., ...); stream.on('data', function(data) {   output( data.toString('base64') );   });         but it doesn't work
20:58 < Nasga> this looks cool, but real time demo does not works (and i can also write app witch does not work in every language :p)
20:58 < cjblomqvist> (I get wrongly encoded data in between two chunks)
20:59 < benatkin> I think if node knockout handed out URLs with a special code on IRC, with each one good for a few accounts, it would improve the quality of the registrations
21:00 < benatkin> not that there's a problem with them - I just hate to see the compulsive twitterers get an advantage, even if I happen to be one
21:06 < gerad> benatkin: we'll open up new spots every day at 0:00 gmt
21:06 < gerad> so that the people who care will be able to get 
21:09 < benatkin> gerad: cool. I'm already in - I was just noticing why I'm already in. :)
21:10 < gerad> benatkin: yeah, personally I don't read the twitter / hackernews anymore, so I'm particularly sensitive to the problem :-)
21:16 < benatkin> Rats - I was looking forward to meeting forestwizard. https://github.com/maxogden/rewriter
21:16 < benatkin> just an alias, though *sigh*
21:18 < AviMarcus> If I can download a file in my browser after a submit, is there a reason I can't download it with curl or the package request? it takes several seconds in the browser, seems to be instant in the others.
21:19 < benatkin> maxogden: that README still says tako is unreleased. Could have a link to it now.
21:23 < Ramone> hey all... anyone have any suggestions on how to determine if my node server is honouring keep-alive headers?  seems like it might not be...
21:23 < Ramone> http, not https
21:24 < doki_pen> if package.json contains a files parameter, then npm install -g doesn't work right
21:24 < cleos_frey> hey, in node is __proto__ supposed to be the inaccessible [[prototype]]?
21:25 < cleos_frey> I know there's an accessible 'prototype' and inaccessible '[[proto]]'
21:25 < doki_pen> it installs all the packages into ~/.npm then fails later because it expects them in /usr.....
21:26 < doki_pen> using npm packaged with 0.8.8, also tried with 0.8.2
21:26 < cleos_frey> im reading the top answer from here http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript
21:26 < doki_pen> removing files from pacakage.json resolved the issue
21:27 < Spion> would it be possible to get process.tickCount? it would give you the number of ticks elapsed since the process was first run
21:28 < Spion> hmm, no that wouldn't work.
21:28 < Ramone> Spion: what's that useful for?
21:29 < Spion> what would be really cool is process.idle, would return the amount of time the process has been idle and waiting for events in the past X seconds
21:29 < deltab> cleos_frey: yes: notice the comments
21:30 < Spion> Ramone, process.idle would be useful to measure the "load" of a process.
21:30 < deltab> cleos_frey: there's also Object.getTypeOf
21:30 < deltab> cleos_frey: er, Object.getPrototypeOf
21:31 < Ramone> process.tickCount I mean
21:31 < Spion> I guess tickCount would be useless
21:33 < Spion> I'm not sure about the API, but I guess process.idle(5) would return {time:5.01, idle: 4.51} if 4.51 of the past 5.01 seconds were spent waiting for an event to happen.
21:36 < Spion> I'm writing a process farm library and I'm thinking a good feature for automatic scaling would be if one was able to measure... oh wait.
21:37 < Spion> i guess you can ask the OS
21:41 < EyePulp> this might be a dumb one… if I load a text file (full of line breaks and what not - it's a full page of html) what do I need to do to convert it to a string I can store under a JSON key?
21:41 < Spion> on linux I can use /proc/pid/sched
21:44 < Spion> EyePulp, I think an arbitrary string can be a json key
21:45 < EyePulp> Spion: just wondering how many things I have to replace/escape in it
21:45 < Spion> Try it.
21:45 < Spion> I think the answer is 0
21:47 < AviMarcus> EyePulp, you can escape enclose js object keys with quotes. strict json requires "keys" anyway, I think.
21:48 < Spion> well, unless you're not using obj[fileContents] = true; JSON.stringify(obj); but some other serialization method (why?)
22:04 < mscdex> node.js rules!
22:10 < chilts> mscdex: yes, yes it does :)
22:24 < mashed> can anyone tell me if node will have a way to serialise code in the future or will I forever be depending on async?
22:25 < lohkey> mashed: learn asynchronous patterns
22:25 < CIA-78> node: Shigeki Ohtsu v0.8 * rf347077 / (lib/net.js lib/tls.js test/simple/test-tls-connect-pipe.js): tls: support unix domain socket/named pipe in tls.connect - http://git.io/HYdS9A
22:26 < mashed> lohkey: i have but the 'brick wall' that i keep hitting is detecting that all of the require callbacks have been completed before completing the request
22:26 < mashed> s/require/required
22:27 < lohkey> mashed: you'll get better at that
22:28 < mashed> care to elaborate? if theres a community accepted solution I'd be interested to hear it.
22:29 < lohkey> embrace and learn asynchronous flow
22:29 < maxogden> mashed: simplest way is to keep a counter
22:29 < lohkey> it's a if you're letting calls escape from your flow then those are bugs
22:30 < AviMarcus> keep a counter but make sure it's in the right scope for closures :)
22:30 < maxogden> mashed: var pending = 0, each new request increments the pending number, each finished request decrements it
22:30 < lohkey> keeping counters works, seems like un needed boilerplate that you'll have to duplicate everywhere though
22:31 < lohkey> at my work most people whore the living crap out of the promise pattern
22:31 < lohkey> we use Q specifically
22:31 < AviMarcus> also there's a bunch of sync libraries
22:31 < maxogden> there are like 400 modules that address this problem
22:31 < lohkey> but i'm a fan of async myself
22:31 < jtomasrl> i have a problem using encrypted params, it get sends like "vPHnRlpc7mgEnPOCFFl+/MVk2vfthOwz7xI6ocuMwQA=" but when i want to use it, i get "vPHnRlpc7mgEnPOCFFl /MVk2vfthOwz7xI6ocuMwQA="
22:31 < lohkey> maxogden: oh yeah, indeed
22:32 < AviMarcus> 'night
22:32 < lohkey> i'm not a huge fan of promises
22:32 < lohkey> it seems like a mind hack + a lie had a baby
22:32 < mashed> maxogden: my point precisely - it's a problem and should be at least addressed in node.
22:32 < lohkey> but at the end of the day, promises do work, so i can't argue against them much other then from a style perspective
22:33 < lohkey> mashed: it's not a problem
22:33 < lohkey> mashed, some times you want to fire and forget things
22:33 < chilts> lohkey: yeah, I've had the promises v callbacks debate (well, chat) with someone recently
22:33 < chilts> I like how Node.js gathered around callbacks with (err, data) etc
22:33 < lohkey> i'm a huge fan of node.js continuations
22:33 < chilts> and promises/eventemitters for more complicated stuff
22:33 < lohkey> chilts: same
22:33 < chilts> :)
22:34 < chilts> ie. things that can emit more than one thing
22:34 < lohkey> chilts: i even use (err, data) in client code with a wrapper
22:34 < chilts> at least that's how I kinda see the demarcation
22:34 < chilts> lohkey: in the browser?
22:34 < lohkey> so all my ajax/real-time stuff runs with (err, data) as callbacks
22:34 < lohkey> chilts: yeah, in the browser
22:34 < chilts> yeah, I was thinking that this morning!!!
22:34 < chilts> got any examples you use?
22:34 < lohkey> it actually works out amazingly well
22:35 < chilts> I was also thinking of trying superagent :)
22:35 < lohkey> chilts: yeah, i got a small snippet somewhere
22:35 < lohkey> chilts: http://codepad.org/JrBvpDpU
22:35 < chilts> lohkey: ever tried this : https://github.com/visionmedia/superagent
22:35  * chilts looks
22:36 < lohkey> it assumes the response is formatted always with {status: "error"|"ok", data: payload}
22:36 < cleos_frey> Hey, why is __proto__ accessible (it's apparently an internal property that's shouldn't be accessible?) any good reason to ever access it?
22:37 < chilts> lohkey: I think you and I think the same, I always reply with { ok : (true|false), err : ..., data : ... }
22:37 < chilts> or similar
22:37 < lohkey> chilts: yeah, it's the same reason why i love (err, data)
22:37 < chilts> if ( data.ok) /// always sits well with me :)
22:37 < chilts> yeah, nice and easy and everyone understands
22:37 < lohkey> i've been doing the same with coffeescript lately too
22:37 < lohkey> for non async calls too
22:37 < chilts> heh, this is where we start differing :)
22:37 < lohkey> [error, data] = nonAsyncCall(args);
22:37 < chilts> but it's all good
22:38 < lohkey> destructuring as a means of returning multiple values FTW
22:39 < chilts> speak of the devil, tjholowaychuk, was just saying I'm going to try your superagent :)
22:41 < CIA-78> node: Ben Noordhuis master * r298f6bf / src/node_crypto.cc : crypto: use CRYPTO_THREADID_set_callback() - http://git.io/_QcEIQ
22:44 < jtomasrl> how can i tell js not to scape a character inside a string?
22:46 < deltab> jtomasrl: whne doing what?
22:47 < jtomasrl> deltab, im getting a hash with that has "+/" inside of it's scaping that char
22:48 < deltab> I still don't understand
22:49 < EyePulp> scaping == escaping?
22:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:50 < jtomasrl> i need to make a string shorter, so i encrypt it, i need to send it over an HTTP request and grab it on the server side. I use crypto module to cipher the text using aes-256 algorithm, the hash im getting looks like this vPHnRlpc7mgEnPOCFFl+/MVk2vfthOwz7xI6ocuMwQA= but when grabbing it from the client side, the "+/" get escapped so i get a blank space inside of the hash
22:53 < jtomasrl> i've seen that md5 works better but i cant decrypt md5 hash using crypto
22:54 < kranius> hashing, compression, and cyphering are 3 different things
23:00 < matehat> jtomasrl: can you show us a sample of your code?
23:02 < jtomasrl> matehat, sure https://gist.github.com/d4275a6d2be571654622
23:04 < matehat> jtomasrl: why not send your encrypted string via a POST request?
23:06 < jtomasrl> matehat, you said for not encrypting it?
23:06 < matehat> jtomasrl: trick -> encode your encrypted text using `encodeURIComponent(encryptedText)`
23:06 < matehat> jtomasrl: then decode on the other end using `encodeURIComponent(encryptedText)`
23:07 < matehat> *decodeURIComponent
23:07 < jtomasrl> i'll try it
23:08 < ciamik> i'm new to node.js. can someone point me to the beginner tutorial?
23:10 < freewil> i highly recommend ryan's introduction video (1 hr) on nodejs.org
23:11 < jtomasrl> ciamik, nodejitsu docs are also good
23:12 < eO_Ae> I also recommend Nodetuts by pedro texiera. Its a little out of date at the beginning, but the github for it is good. http://nodetuts.com/
23:12 < ciamik> thanks.
23:12 < ciamik> thanks freewil
23:13 < ciamik> thanks jtomasrl
23:13 < eO_Ae> http://www.nodebeginner.org/
23:17 < samholmes> Would anyone here agree that developming an application that is locked into a framework is a bad practise?
23:17 < samholmes> practice*
23:17 < carlos8f> the smaller the framework the better. i prefer that: https://github.com/carlos8f/that.js
23:18 < matehat> Depends on the framework, you gotta rely on something unless you want to build everything on your own
23:19 <@konobi> anyone know of a multimarkdown parser that gives more than just rendering?
23:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:38 < lohkey> samholmes: the cool thing about node is it's easy to build tons of small well defined and completely isolated services
23:39 < lohkey> so i like to think of node.js as a lego kit for building services really fast and simply
23:39 < chilts> yeah, lots of decoupling :)
23:39 < lohkey> in which case, the "frameworks" i mostly use are message and rpc oriented ones
23:40 < lohkey> dnode/upnode for example
23:40 < cleos_frey> samholmes: I've been bitten by inflexible frameworks too often, so I try to avoid them
23:40 < lohkey> dnode is really secret sauce for remote services in node
23:40 < cleos_frey> however, I do like lohkey's idea of just using a bunch of small packages
23:41 < lohkey> makes doing deploys a lot less painfull too
23:42 < lohkey> you don't have to worry about breaking the monolith as a whole and it doesn't mean the entire project freezes while bugs are tracked down in unrelated components etc
--- Log closed Fri Aug 31 00:00:00 2012
