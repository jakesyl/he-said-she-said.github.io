--- Log opened Tue Mar 05 00:00:07 2013
--- Day changed Tue Mar 05 2013
00:00 < fourlincoln10> qs.parse("name=rah'madahn o'keefe"); returns { name: 'rah\'madahn o\'keefe' }
00:01 <@isaacs> guybrush_: use nave
00:01 <@isaacs> guybrush_: nave use 0.6; npm === 0.6's npm
00:01 <@isaacs> guybrush_: unless you specifically prevent it, delete it, etc.
00:01 < guybrush_> isaacs: oh nave manages multiple npm-versions too (per node-version)?
00:02 < guybrush_> nice
00:02 < guybrush_> ok thx
00:02 <@isaacs> guybrush_: wll, ever since npm shipped with node, yeah
00:18 < wwicks> if anyone is looking for a good 'picky' deep copy: https://github.com/williamwicks/propex#lets-be-picky
00:24 < faceleg|work> fourlincoln10: maybe you should just ban irish signups
00:25 -!- mode/#Node.js [+o sblom] by ChanServ
00:25 < fourlincoln10> lol...
00:25 < fourlincoln10> I figured it out (sorta). node-querystring uses decodeURICompoment which adds the slashes.
00:25 <@sblom> tjfontaine: regarding the WiX failure, once I've got a local repro, I'll probably be able to come up with something.
00:26 <@sblom> Worst case is I'll do some debugging on the build agent directly.
00:26 < fourlincoln10> I'm going to have to just strip the slashes from the values I need them in. Thanks for your help though!
00:26 <@sblom> I have a tiny bit of time to spend on this tonight. I'll have more time tomorrow afternoon.
00:31 < somekittens> Hi all, I've encountered a SSL issue.  I've found several examples online and nothing's worked yet.  When using fs.readFileSync() to read the key/cert, should I use toString()?
00:33 < ChrisPartridge> somekittens: afaik, no you shouldn't need to toString
00:33 < somekittens> Alright, some examples have it and I wasn't sure.
00:41 < ningu> hey, is there somewhere I can read about the node 0.9 stream implementation? I know it's a work in progress.
00:42 < tjfontaine> ningu: I think there have been some refinements since, but http://blog.nodejs.org/2012/12/20/streams2/
00:42 < wwicks> ningu: did you look here: http://nodejs.org/docs/v0.9.0/api/stream.html
00:43 < mykul> hi is anyone here using mongoose-fulltext?
00:44 < olleicua1> Hey I found a complex thing that might be a bug in cyclic dependency handling but it might also be me abusing cyclic dependencies.  Would someone with more familiarity with node mind taking a look at it?
00:45 < ningu> wwicks: oh, I had no idea the 0.9 api was documented. thanks!
00:46 < ningu> tjfontaine: will check that out too, thanks.
00:46 < ningu> is there an approximate intended release date of 0.10?
00:47 < tjfontaine> WhenItsReady but it looks like things are normalizing
00:47 < wwicks> ningu: yeah- a while back I was looking for older docs and noticed that you can change the url to whatever version you're looking for. Them joyent folks are smart ones :P
00:47 < ningu> yes, I know when it's ready. but I remember with 0.8 isaacs was pretty straightforward about when he hoped it would be out. and he turned out to be mostly right :)
00:48 < ningu> wwicks: well, yeah, I knew all the *older* apis were up, but it didn't occur to me there would already be 0.9 docs.
00:48 < ningu> but 0.9 is released, so...
00:49 < ningu> I checked out for a while before 0.8 was final. have been using it with no issues but just curious, have domains taken off as something useful?
00:49 < wwicks> I just assumed that they changed the docs as they checkinâ€¦ I'll probably get bitten by that assumption one day
00:54 < ningu> for my current project I initially was using python, cause it had lucene bindings, but I decided to switch to solr which receives requests via xml or json. it occurs to me that node has very few bindings in the old sense but it doesn't matter these days cause so many things have apis like that.
01:02 < maisre> Just picked up Node so this may have an obvious answer. I am trying to do a simply proxy that will function just like http://anonymouse.org/anonwww.html, basically takes a url and then retrieves the site. here is what I have, http://hastebin.com/tedequfipo.coffee, the problem is images do not seem to come through along with follow up get requests... what is the proper way of doing this?
01:04 < ningu> maisre: well, yeah, a browser first GET's the html and then initiates separate requests for images, css, js files referenced in the html
01:04 < ningu> you are just doing one GET request as far as I can tell.
01:05 < maisre> yeah, i couldn't figure out how to buffer the other requests or whatever, the code gets the follow up requests for the images and its logged to the console but either it does not get sent on or my browser has no idea what to do with it past the first bit
01:05 < ningu> hmm
01:06 < echo> Just curious, have you thought of using something like phantomjs?
01:06 < ningu> well, in that case it might be an issue with restler not handling image requests well
01:06 < ningu> restler doesn't look like it was designed to do arbitrary http requests
01:06 < maisre> echo: didn't even know of phantomjs, i will check that out
01:07 < maisre> I did the same with just http, it handled a few things better but not much
01:07 < wwicks> after a week of building a a Internet Printing Protocol (IPP) module for node, I decided port 9100 printing (PJL) will be better suited for what I'm needing on my project. sigh.
01:08 < echo> It's a headless webkit browser, it fully loads the remote page and all resources and you have the ability to inject javascript into it.
01:08 < wwicks> hopefully someone will enjoy it
01:09 < ningu> maisre: form restler docs: decoding The encoding of the response body. For a list of supported values see Buffers. Additionally accepts "buffer" - returns response as Buffer. Defaults to "utf8".
01:11 < Advant> Is there any reason why File IO on linux would fail, not permission related?  I'm using a pcap library and it fails to open the file and process it
01:11 < maisre> ningu: would i need to do some sort of checking on the requests and decode as needed? 
01:12 < ningu> maisre: try setting it to buffer for everything. see if it works for html too -- it probably will, since it's just a pass through.
01:13 < niggler> isaacs what's the right way to handle node modules that have external dependencies?
01:13 < maisre> ningu: thanks, I will give that a shot, just got some actual work handed to me so I gotta go but I appreciate your input
01:13 < maisre> echo: you as well, thanks I will check out phantom
01:27 < ningu> btw are there any node-related events in SF currently going on?
01:38 < euoia> how do I make sure that `bower install` is automatically ran after a succesful npm install?
01:38 <@isaacs> niggler: like what?
01:39 < othiym23> I think hij1nx could probably have been more sarcastic in his latest PR on joyent/node
01:39 < niggler> isaacs something that depends on an external utility (like how the growl module depends on growlnotify or xls module depends on xlhtml)
01:40 < bradleymeck> euforic: https://npmjs.org/doc/scripts.html ctrl+f hooks or add it to package.json as postinstall
01:41 < niggler> bradleymeck you mean euoia 
01:41 < euoia> got it, thanks
01:41 <@isaacs> niggler: the first time you try to use the thing, if it's not there, raise a useful error and gtfo
01:41 < bradleymeck> darn tabs
01:42 < niggler> darn tabs indeed bradleymeck 
01:43 < niggler> also isaacs why does `npm login` ask for email addresses?
01:43 < niggler> ostensibly all you would need is a username and password
01:45 < bradleymeck> niggler: pw resets presumably
01:46 < niggler> bradgignac why would the `npm login` command ask for the email address
01:46 < niggler> I'm not asking about registration
01:46 < niggler> registration makes sense, but why would login ask if you've already added your email address when you registered
01:59 < tds5016> hey. Question.... how would I encode a base64 image with node.js?
01:59 < tds5016> I know the image will be a jpeg, I'm just looking for the shortest way to do it :-)
02:00 < ningu> new Buffer(data).toString('base64') ?
02:01 < tds5016> how would I buffer the image?
02:01 < tds5016> new Buffer(fs.readFile('/path/to/file').toString('base64');
02:01 < tds5016> would that wokr?
02:01 < ningu> no
02:01 < tds5016> I know I biffed up  the (), but you got the idea :-)
02:02 < ningu> fs.readFile is async
02:02 < tds5016> how would I do that correctly?
02:02 < ningu> and you probably don't want to do it sync
02:02 < tds5016> ningu: you are correct.
02:02 < ningu> var stream = fs.createReadStream(path);
02:03 < ningu> var data = ''; stream.on('data', function(chunk) { data += chunk });
02:03 < ningu> etc.
02:03 < ningu> read the docs for readable stream
02:05 < tds5016> ningu: how would I set up stream completed, then conver tot base64?
02:06 < ningu> stream.on('end', function () { var base64 = new Buffer(...) })
02:07 < tds5016> ningu: would I pass data into the buffer?
02:07 < ningu> yeah
02:07 < ningu> like I said, read the readable stream docs :)
02:13 < owen1> what is the argument for exporting one function as oppose to an object (in common.js module)
02:14 < ningu> module.exports = function() {...}
02:14 < owen1> ningu: but why is it considered a best practice?
02:15 < ningu> it's just a practice, not sure if it's a best practice
02:15 < ningu> sorry, I misunderstood your question :)
02:19 < Manu__> is there someone having experience with node.js on windows iis7 ?
02:20 < Manu__> i try to run node.js on windows is7. testing on localhost/server.js, i got this error: operation not permitted 'C:\Inetpub\vhosts'. the question now is, how do i have to set the permissions?
02:27 < tds5016> ningu: next issue...
02:27 < tds5016> it looks like I'm able to get the data across the wire, but it looks like socket.io is cutting the length of the data when I do: socket.on('newSlide', function (base64Image)
02:28 < tds5016> it looks like it's only giving me a about 200 characters of the many many characters that it is.
02:28 < Franz__> somebody can help with install/upgrade express module?
02:28 < tds5016> If I look in the log of the frame, it's actually sending the whole string.
02:28 < tds5016> but when I try to use it, it gets truncated.
02:29 < ningu> tds5016: hmm. not sure there, I don't know enough about socket.io
02:30 < tds5016> thanks anywho :-D
02:31 < tds5016> better question... is there a way to stop users from viewing a file based on something arbitrary like if they have a session running?
02:31 < ralphholzmann> is there a download endpoint that has the latest stable version?
02:32 < echo> Most webservers support control of allowance via presence of cookie.
02:33 < tds5016> echo so if I'm using Connection() I can check that they have a cookie before sending the image?
02:33 < tds5016> technically a session*
02:34 < echo> Not sure what you're referencing with Connection(), but express/connect/passport/nginx/apache all support Access control depending on the presence of a cookie, yes.
02:42 < tds5016> echo okay.
02:42 < tds5016> last question....sorry.... is it possible to force node.js to not cache a response?
02:43 < gkatsev> substack: https://twitter.com/horse_js/status/308767898942468096 this is how you have so many npm modules, right?
02:45 < echo> tds5016: What kind of response is being cached?
02:45 < tds5016> echo I'm not sure if it is. I just want to make sure that when I grab image.jpeg...
02:45 < tds5016> if it's changed, the file will be always grabbed.
02:45 < tds5016> unless it is the browser that is causing it to be viewed as cached.
02:46 < OliverJAsh> Stupid question potentially, but I'm using the oauth NPM module to talk to the Twitter API, and it's returning JSON in a stringâ€¦ and the JSON is escaped it seems, i.e: "[{\"created_at\":\"Tue Mar 05 02:40:20 +0000 2013\"
02:46 < OliverJAsh> What am I supposed to do about something like that?
02:47 < echo> tds5016: It's typically not that sweet and loving, although it does make use of Unix Filesystem cache IIRC, it's much more likely to be a browser doing it. I would test it with a CLI browser like curl which doesn't persist a cache of any kind and just pipe the image to md5sum and compare the sums to determine if anything is changing.
02:47 < tds5016> echo good call1
02:48 < tds5016> good call!*
02:48 < tds5016> thanks!
02:48 < ChrisPartridge> OliverJAsh: it's stringified
02:48 < ChrisPartridge> call JSON.parse() on it
02:49 < OliverJAsh> Perfect, cheers ChrisPartridge 
02:49 < owen1> ningu: in the recent episode of nodeup the topic was 'best practices of writing a module' and having exposing 1 function was one of the points. i just can't remember the reasons and the recording is not up yet.
02:52 < mscdex> node.js rules!
02:54 < niggler> lol mscdex 
02:54 < mscdex> i gotta keep promoting it since it's not in the topic anymore
02:55 < ChrisPartridge> vote mscdex for OPS?
02:55 < mscdex> heh
02:59 < niggler> mscdex is the first node evangelist
02:59 < niggler> the robert scoble of node
03:33 < mscdex> robert scoble?
03:39 < euoia> having a bit of a nightmare with socket.io - are there any alternatives?
03:40 < niggler> mscdex scoble was an evangelist for microsoft
03:43 < ChrisPartridge> euoia: npm search websocket
04:00 < mscdex> niggler: was he paid?
04:00 < niggler> yeah he was a microsoft employee
04:00 < niggler> maybe you need a job with joyent
04:00 < mscdex> ok, that explains it then
04:01 < mscdex> well, i live on the eastern half of the U.S., so that does not help me much
04:02 < mscdex> east coast needs their own silicon valley
04:02 < mscdex> !
04:02 < greg5green> you mean, like nyc?
04:03 < greg5green> I know its not the same and has a difference scene, but there are a lot of jobs there too
04:03 < mscdex> meh
04:03 < mscdex> i've been to nyc before, but i can't say it was a particuarly enjoyable experience
04:05 < greg5green> Lets just say I dont like there... :)
04:05 < greg5green> err, live there***
04:05 < greg5green> freudian slip
04:05 < mscdex> lol
04:05 < greg5green> I've seen some node jobs advertised here in columbus, but those bastards never seem to call me back
04:06 < greg5green> maybe you'd have better luck
04:06 < mscdex> columbus is closer for me, ~1 hour drive
04:06 < greg5green> yeah, i did a whois ;)
04:07 < mscdex> there's a couple of local nodejs meetups
04:07 < mscdex> one of them seems to kind of fizzled out, the other is in cincy
04:07 < greg5green> there isnt one here in cols
04:07 < garthk> Oh, THAT
04:07 < garthk> s 
04:07 < greg5green> afaik
04:07 < garthk> â€¦ what's going wrong.
04:08 < garthk> dom
04:08 < greg5green> dom claud van damme
04:08 < SomeoneWeird> bayum
04:08 < garthk> dominictarr's fstream's output doesn't emit('data'), hence why es.through et al don't let me amend the stream before piping it into tar.Pack.
04:09 < mscdex> pew pew pew
04:09 < dominictarr> garthk: not sure what you mean?
04:10 < greg5green> you merely adopted the dom
04:10 < greg5green> I was born in it
04:10 < garthk> dominictarr: I was expecting I could es.pipeline from fstream.Reader through es.log, an es.through which filters entries out, then finally into tar.Pack and fs.createWriteStream.
04:10 < garthk> 
04:11 < garthk> Exceptâ€¦ hang on. IRC client massively lagging. Probably memory leaked over the last week.
04:11 < ohnoesitsraphy> Is there a way to define global functions using ExpressJS?
04:11 < dominictarr> garthk should work, post a gist if you are having throuble
04:11 < SomeoneWeird> greg5green, lol
04:11 < garthk> Righty.
04:11 < garthk> Oh, that's much better.
04:12 < SomeoneWeird> lol
04:12  * mscdex shakes a fist at memory leaks
04:14 < mscdex> oh no, yet another display server
04:15 < ChrisPartridge> ohnoesitsraphy: what do you need a global function for?
04:16 < ohnoesitsraphy> I want my controllers to be able to generate a random "key" that checks the database for previous used keys
04:16 < ohnoesitsraphy> I have the function, but just want to see how to access it in different controllers
04:16 < ohnoesitsraphy> in PHP I'd just "include" the file and call the function for example
04:17 < garthk> Cool. Ok, if I turn the 'entry' events into 'data' events the rest of the chain worksâ€¦
04:17 < garthk> Aha! I can pass a filter. Even easier.
04:18 < ChrisPartridge> ohnoesitsraphy: can't wrap it up in some middleware, and chuck it in the stack for the routes that need it?
04:18 < ohnoesitsraphy> I don't know how to do thatâ€¦I honestly just started
04:20 < garthk> dominictarr: got it figured. Fooled, yet again, by expecting that anything that used 'pipe' was a stream which emitted 'data' events.
04:22 < ChrisPartridge> ohnoesitsraphy: example here https://gist.github.com/cjpartridgeb/5087969
04:24 < ohnoesitsraphy> Thank you, ChrisPartridge
04:24 < dominictarr> garthk: post an issue on anything that has pipe but isn't a stream!
04:25 < garthk> https://github.com/isaacs/fstream/blob/master/examples/pipe.js 
04:25 < garthk> dominictarr: oh, FFS. I don't know how "isaacs" became "dominictarr" in my head, there. :)
04:26 < dominictarr> heh
04:27 < ChrisPartridge> ohnoesitsraphy: yw, also remember you can wrap up your db functions into a seperate file, and curry the middleware function if you need to provide any configurations
05:13 < AndChat52500> Is there anyway to access an object using values from an array sequentially. ['one', 'two']  Then I have an object one:{two:2}
05:14 < AndChat52500> Without a loop
05:17 < ChrisPartridge> Not sure how you would achieve it without a loop
05:25 < jaha> anyone have an exmaple of how to redirect or proxy an express app to serve amazon s3 files?
05:25 < jaha> im a bit confused on how it should work
05:27 < asdf12> why can't you just serve them directly?
05:49 < echo> jaha: Those are two vastly different things. If you just want to 302 them to a certain static file on s3, you can easily do that with just res.redirect() with dynamic route.
05:53 < asdf12> does Math.random work differently in node vs browsers? ie: it uses a different seed ?
05:53 < havvy> asdf12: It's V8's engine.
05:54 < havvy> What's with all the irccloud users?
05:55 < asdf12> well i'm guessing math.random might work differently still since it uses a different way to seed depending on system arch and os?
05:56 < havvy> Possibly. There's no hard fast rule for what algorithm to use.
06:06  * freon is lazy
06:06 < freon> does anyone have a recipe for sourcemapped uglified coffeescript browserify transforms?
06:09  * freon just wants to dump compiled&compressed&required coffeescript on the browser, and somehow be able to read it ...
06:17 < ChrisPartridge> freon: you could always just use javascript ;-)
06:20 < AndChat52500> So I'm making this api server where
06:21 < AndChat52500> I'm getting my data from messed up pkaces. Us there a json query langyagw library I could use for node?
06:22 < AndChat52500> I've googled and the only thing remotly close to what I want is json select
06:28 < ChrisPartridge> AndChat52500: What are you trying to do with the data?
06:30 < gildean> AndChat52500: node has es5 JSON.parse and JSON.stringify
06:31 < gildean> so when getting json from an external source you can just abstract the parsing into a function like: function isValidJson(json) { try { return JSON.parse(json); } catch (e) { return false; }
06:32  * freon stares coldly at chrispartridge
06:34 < anildigital_work> Hi..  what is max number of open websocket connections Google Chrome supports?
06:42 < paulkon> how do you guys push updates to the js file(s) for single page apps with the assumption that they leave the page open and cookies don't expire for a week?
06:44 < gildean> paulkon: idk, force a page-reload from the clientside js?
06:45 < paulkon> yeah
06:45 < paulkon> that's the only way I can think of
06:45 < paulkon> it would be different if it were getting a 304 but even that's eliminated with the single page app routes
06:48 < freon> paulkon: socketio
06:50 < anildigital_work> asking again .. What is max number of open websocket connections Google Chrome supports?
06:51 < niggler> woah freon whats with this coffee script 
06:55 < freon> yo niggler: cleaner syntax, semantic scoping, string interpollation, list and collection comprehension, standardised inheritance syntax, conditional dereference ...
06:56 < niggler> coffee script introduces more problems than it solves
06:57 < niggler> btw: is syntax here?
06:58 < freon> what problem?
07:14 < ChrisPartridge> anildigital_work: should be in the chromium source *somewhere* :)
07:20 < tmiw> anyone familiar with sequelize?
07:21 < tmiw> i'm trying to add some "first-execute" logic to my node.js app. it doesn't seem to be working quite right though.
07:21 < tmiw> code I added: https://github.com/tmiw/postShuffle/commit/425e926cf7eac211a1728aeec9f3e74f64cbb00d
07:21 < tmiw> on first execute it complains because it thinks the Users table doesn't exist.
07:21 < tmiw> but when I run it a second time the first run code actually executes because now it sees that table.
07:21 < tmiw> any ideas why?
07:25 < ChrisPartridge> tmiw: maybe because db.sync() hasn't finished by the time you're "first run" code executes?
07:26 < tmiw> ChrisPartridge: perhaps. does db.sync() allow .success(function() { ... }) like with the other query-type functions?
07:26 < ChrisPartridge> never used sequelize, but i would assume it would have some sort of callback
07:26 < ChrisPartridge> http://www.sequelizejs.com/#models-sync
07:26 < ChrisPartridge> yep, look at the last example in that section
07:27 < ChrisPartridge> .success().error()
07:27 < tmiw> ah cool. i'll try that i think. thanks!
07:28 < ChrisPartridge> yw
07:33 < bitfed_> Anyone else here tried nodeclipse?
07:33 < ChrisPartridge> st4life
07:34 < ningu> st?
07:37 < sshaginyan> Guys how would I share an about thoughout the scope of my application?
07:37 < sshaginyan> What is the best way to do this?
07:37 < sshaginyan> share an object
07:38 < sshaginyan> It's for events
07:43 < ningu> sshaginyan: I dunno, it depends on how you're writing the app, but typically you pass it to the relevant other modules as you require() them
07:44 < sshaginyan> ningu: So require()(parameters?)
07:44 < ningu> sure
07:44 < sshaginyan> ?
07:44 < sshaginyan> k
07:44 < ningu> I mean, that works... you might be able to come up with a way so the other modules don't need it
07:45 < ningu> sometimes using eventemitters you can write all the logic in one place for that stuff even though the code that triggers it is elsewhere
07:45 < sshaginyan> ningu: that's exactly what I want to do
07:46 < sshaginyan> ningu: But I still need access to the object to trigger it right?
07:46 < ningu> well, I might not be the best person to ask but I suspect it's possible :)
07:46 < ningu> you should look up techniques for socket.io
07:46 < sshaginyan> ningu: var eventEmitter = new events.EventEmitter();
07:46 < ChrisPartridge> sshaginyan: create a "singleton" event emitter
07:46 < ningu> even if you aren't using that, people face similar design issues with it and have solved it a few ways
07:47 < tdh_andy> hello
07:47 < ningu> ChrisPartridge: but how do the various parts of his code find it?
07:47 < ChrisPartridge> just require it
07:47 < sshaginyan> ChrisPartridge: That's the thing. Is there anyway that I won't create a file?
07:47 < ningu> create a file?
07:48 < sshaginyan> ningu: Chris is saying to do var eventEmitter = new events.EventEmitter(); inside of a file and require it as a singleton throught my app
07:48 < ningu> yes, I got that
07:48 < sshaginyan> But I really don't want to create a single file just for var eventEmitter = new events.EventEmitter(); and singleton logic
07:49 < sshaginyan> Is there another way I can do this?
07:49 < ningu> oh, right.
07:49 < ningu> I guess you can either create it in its own file, or create it in app.js and pass it through to other files that need it
07:49 < ChrisPartridge> define it at your entry point into the code, and pass it down the chain
07:49 < ningu> top-down or bottom-up
07:50 < sshaginyan> ChrisPartridge: I can't do a .prototype on some global object?
07:51 < ningu> ugh
07:51 < ChrisPartridge> no ones stopping you, i guess
07:51 < sshaginyan> But is it bad practice
07:51 < sshaginyan> ?
07:52 < ningu> yeah, doing that tends to create unanticipated issues in my experience
07:52 < jhsto> how do i append data to end of an file?
07:52 < ningu> e.g. if you do Object.prototype.foo then Object.keys(someObj) will always list it
07:52 < ningu> jhsto: open with mode 'r+' ?
07:52 < jhsto> when i try to do so the file gets re-written, but i want to keep the old data
07:53 < ChrisPartridge> jhsto: create a file stream, or use appendFile ?
07:53 < ningu> yeah, there's fs.appendFile too
07:53 < sshaginyan> jhsto: There should be an extra parameter to pass to write
07:53 < paulkon> adding to the Object prorotype doesn't propogate to the other files I think
07:53 < sshaginyan> or appendFile
07:53 < paulkon> it's much cleaner just to have a singleton
07:54 < jhsto> ChrisPartridge its a stream, which 'end' event im listening to
07:54 < paulkon> ningu: and require
07:54 < sshaginyan> k
07:54 < tdh_andy> i have a problem with http request callbacks, i have a class that does 2 requests, so in the method that does the requests i do var reader = this;  http.request(data1, callback(){reader.done(response)}); http.request(data2, callback(){reader.done(response)}), the problem is reader.done recieves responses form other instances requests, they get mixed up
07:54 < paulkon> sshaginyan: *
07:54 < sshaginyan> paulkon: But is it nice to have a single statement in a whole file
07:54 < sshaginyan> ?
07:55 < ChrisPartridge> sshaginyan: Yeah, i prefer the singleton method - and it's concise and readable, no one will come along and go "where does module.ee get created?" X months down the track
07:55 < sshaginyan> True that G
07:56 < exomniac> my body is ready
07:56 < penzur> ratatatat
07:57 < ChrisPartridge> jhsto: take a read of the fs docs, pretty sure there is even example for appending to file
07:57 < ChrisPartridge> im heading home to fire up ArmA3, boo yeah
07:57 < ningu> what about up-ending a file?
07:58 < jhsto> ChrisPartridge I'm starting to think that it's my module which decodes the file which blows it up.
07:59 < jhsto> Once the streamis made it runs trough decoder
08:00 < jhsto> It is supposed to add data to the end of the file, but it instead wipes out the existing data first
08:11 < tiglionabbit_> what's the node equivalent of the php variable SERVER_NAME?
08:16 < asdf12> req.host?
08:17 < pats_Toms> request.headers.host
08:25 < tmiw> that worked
08:25 < tmiw> :)
08:45 < sshaginyan> ['one', 'two'] {one: {two: 2}} is there anyway I can access the object directly without using a loop.
08:45 < sshaginyan> So I want to use the array to directly access the object without looping
08:46 < sshaginyan> Can I do concat on the array and change it to an object or something?
08:46 < deoxxa> sshaginyan: how "mad scientist" do you want it to be?
08:46 < sshaginyan> ....?
08:46 < sshaginyan> just as simple as that
08:46 < deoxxa> the solution, i mean
08:46 < sshaginyan> no loops
08:46 < deoxxa> can do ;)
08:46 < sshaginyan> ?
08:47 < sshaginyan> ['one', 'two'] to one.two
08:48 < sshaginyan> deoxxa: Are you alive?
08:48 < deoxxa> i am!
08:49 < deoxxa> i'm just typing it up
08:49 < sshaginyan> k np
08:49 < gildean> >> var arr = ['one', 'two']; var obj = { one: { two: 2 } }; obj[arr[0]][arr[1]];
08:49 < purr> gildean: (number) 2
08:49 < sshaginyan> gildean: Dynamic
08:49 < sshaginyan> so arr[0] arr[1] is a no
08:49 < [AD]Turbo> hi there
08:51 < deoxxa> nearly done, sshaginyan
08:51 < deoxxa> you'll lol though
08:51 < sshaginyan> lol k :)
08:52 < deoxxa> function generate_getter(path) { return new Function("o", "return o" + path.map(function(e) { return "[\"" + e.replace(/"/g, "\\\"") + "\"]"; }).join("")); }
08:52 < deoxxa> var o = {one: {two: 3}};
08:52 < deoxxa> console.log(generate_getter(["one", "two"])(o));
08:53 < deoxxa> no loops!
08:53  * deoxxa collects victory prize
08:53 < MI6> joyent/node: Felix BÃ¶hm master * 3e64b56 : events: loop backwards in removeListener  `removeAllListeners` is removin - http://git.io/LXWpVQ
08:55 < asdf12> except map and reduce loops over the array -_-
08:55 < deoxxa> sshaginyan: i actually have a library for that exact thing already, but it uses loops: https://github.com/deoxxa/dotty
08:55 < deoxxa> asdf12: oh darn
08:55 < deoxxa> i didn't even think about that
08:55 < sshaginyan> deoxxa: Your a crazy aren't you?
08:55 < deoxxa> sshaginyan: it's been said!
08:55 < asdf12> just because you dont use a for loop, you're still looping
08:56 < deoxxa> asdf12: new solution, coming right up
08:56 < asdf12> if recursion isn't considered looping an array
08:56 < asdf12> you can use a recursive function
08:57 < deoxxa> better - i'm abusing regex
08:57 < dhzr> thats the spirit deox
08:57 < asdf12> capturing the names with regex gives you an array as the result :p
08:58 < asdf12> so you are taking the long way of looping an array anyway
08:58 < dhzr> only excessive trickiness
08:58 < deoxxa> function generate_getter(path) { return new Function("o", "return " + ["o"].concat(path).join(".")); } << this is if the keys are all valid symbols in js
08:58 < deoxxa> function generate_getter(path) { return new Function("o", "return o[\"" + path.join("###").replace(/###/g, "\"][\"") + "\"]"); } << and this is if they're not, but it breaks if "path" is empty
08:59 < deoxxa> i love solving non-problems in complex ways
08:59 < deoxxa> function generate_getter(path) { return new Function("o", "return o['" + path.join("###").replace(/###/g, "']['") + "']"); } << a little neater
09:00 < deoxxa> Array.join probably loops internally
09:00 < deoxxa> but whatever
09:00 < deoxxa> i'm an adult
09:00 < deoxxa> i do what i want
09:01 < deoxxa> function generate_getter(path) { return new Function("o", "return o['" + path.join("']['") + "']"); } << clearer still
09:01 < deoxxa> you can basically see the code it wants to spit out
09:02 < dhzr> anyone played with hapi.js? ive been working with it on a project at work for the last month or moreso memories of days when i didnt feel like my head was shrinking
09:02 < sshaginyan> deoxxa: ty
09:02 < deoxxa> sshaginyan: lol dude don't actually use that as-is
09:02 < deoxxa> sshaginyan: you need to check for undefined properties and all sorts of fun stuff
09:03 < dhzr> get terse with it
09:03 < sshaginyan> deoxxa: thinking about using your library
09:03 < deoxxa> sshaginyan: oh, well, yes. use that as-is all you like. i use it extensively at work and it's yet to let me down.
09:06 < deoxxa> now i wonder if generating functions would be faster than using loops
09:06  * deoxxa lets it be
09:12 < asdf12> in your example it wouldn't
09:13 < deoxxa> asdf12: no, not if it was single-use
09:13 < deoxxa> asdf12: but if it was the same (long) path being used over and over again on different objects, it might be
09:14 < deoxxa> i wonder if i could have some kind of runtime detection of that
09:14 < deoxxa> just for entirely unnecessary optimisation
09:14 < asdf12> no the problem is v8 can't optimize your function you are generating
09:14 < deoxxa> oh?
09:14  * deoxxa was not aware of this
09:14 < deoxxa> it doesn't optimise `new Function()' functions?
09:15 < asdf12> creating anonymous func dynamically are harder to optimize for, i don't know if it wouldn't i know it's hard for v8 though
09:16 < asdf12> and also you would be using more memory holding on to the generated functions
09:16 < deoxxa> that's very true
09:16 < asdf12> and new functions would have to be generated for different paths/objs
09:16 < deoxxa> well, different paths, yes
09:16 < deoxxa> not necessarily different objects though
09:17 < deoxxa> if i could detect repeated use of a specific path, i could generate a function and cache it for some amount of time/uses
09:17 < deoxxa> but like
09:17 < deoxxa> lol
09:17 < deoxxa> that's crazy
09:17 < asdf12> you hold a reference to the function to it yea, but when i say caching i mean does v8 optimize that function
09:17 < asdf12> i doubt it would then still
09:20 < asdf12> also
09:21 < asdf12> the str - array conversion will slow it down compared to a loop
09:23 < candy_> hi there! I got a little project relying on ORMs are there any _mature_ ORMS out there I can use, so e.g. automatic syncing and association of local and dbobject, etc
09:24 < Nopik> did anyone managed to get the new coffeescript source maps working enough to be displayed in the stack traces?
09:24 < Nopik> i can generate source map, but i can't get them to be used in the stack trace, unfortunately
09:26 < jocafa> Nopik:  what browser(s)?
09:27 < Nopik> jocafa: node.js, run from console
09:27 < jocafa> ah
09:29 < candy_> in case this is an issue: i already looked but they are either all poorly documented or demand that once an object is created/build to fetch it from the database again in order to assign it to another object freshly created, which means multiple callbacks, where there shouldn't be the need for them
09:30 < asdf12> deoxxa: actually i'm wrong apparently v8 does optimize those things well
09:30 < deoxxa> asdf12: interesting!
09:30 < faceleg> I thought v8 was magic
09:30 < asdf12> but the extra memory still stands, i guess it doesn't matter either unless you have a huge object that you want to generated a function for
09:31 < deoxxa> yeah it's all a bit silly really
09:31 < Tox> http://www.youtube.com/watch?v=qpK0WAuyOl4
09:31 < tds5016> hey. I am having an issue with socket.io whereby I'm getting two events sent to my client.... can someone help? http://ideone.com/eQxcb9
09:31 < ningu> candy_: I'm not really sure what you mean. in mongoose for example, you save() an object to sync it with mongodb, but that doesn't involve creating another object.
09:31 < deoxxa> https://github.com/deoxxa/pillion << i'd love input on how the documentation here reads
09:32 < asdf12> deoxxa: even so though, its debatable whether to go that route, it depends on how often you are going to reuse it, because generating the function is expensive
09:32 < ningu> candy_: also, I'm not sure what you mean by automatic syncing, but not having to call save() (for example) and having it somehow happen automatically seems like a bad idea to me -- bad for performance and also too much magic.
09:33 < asdf12> so i guess if you were going to have to reuse the function like 3 times or more it'll start winning
09:33 < deoxxa> asdf12: exactly - it'd have to be a "hot loop" kind of situation
09:33 < asdf12> its a weird use case
09:33 < ChrisPartridge> tds5016: is it firing two file change events?
09:33 < ningu> calling new Function() just seems like a slightly dubious thing to do in general to me :)
09:33 < tds5016> should only be a single event...
09:33 < tds5016> I'm copying the file
09:33 < deoxxa> ningu: i love me some code generation sometimes :P
09:34 < dominiques> Hi everyone
09:34 < tds5016> good call though... I'll double check that. I hope I'm not sthat dumb.
09:34 < ningu> I've never had to generate functions other than with function ().
09:34 < dominiques> I am using node-http-proxy to proxy requests - how can I catch errors, e.g. when the target host is down?
09:34 < ningu> mary had a little lambda...
09:35 < deoxxa> ningu: at work, i generate entire modules from definitions that are constructed via a GUI
09:35 < deoxxa> ningu: code generation is <3 sometimes
09:35 < tds5016> ChrisPartridge: I'm actually triyng to copy the file from a directory outside of the folder to replace one in the folder.
09:35 < tds5016> if that makes sense?
09:36 < ningu> deoxxa: that sounds quite ridiculous. why not serialize settings to json and have one non-changing module read the json files?
09:36 < ningu> deoxxa: presumaby not possible for some reason in your case... but that sounds like a strange case :)
09:36 < ChrisPartridge> tds5016: just chuck a console log inside the file change callback, and see if it spits out two messages on the console
09:36 < candy_> ningu, ok here is an example, i have 2 objects representing to 2tables in my MySQL database, using e.g. sequelize.js, I create the defined objects, set the properties, I first save object 1, then I make an association to object 2 BUT
09:36 < deoxxa> ningu: it'd be possible, definitely, but generating code has three distinct advantages for me
09:37 < tds5016> soo... apparenlty copy fires two events....
09:37 < tds5016> hmmm....
09:37 < candy_> ningu, object 1 never got the primary key set from null to whatever number the primary key has, only the success-callback yields this value,
09:37 < deoxxa> ningu: 1) performance - v8 can see the whole program at one glance and do whatever it likes to optimise it
09:38 < tds5016> ChrisPartridge: any idea how I'd get it fs.watch to only fire a single event on a copy?
09:38 < asdf12> deoxxa: yea new function is useful in situations, but its expensive
09:38 < deoxxa> ningu: 2) debugging - i can take a look at the generated code and see what's going on (there's actually a trace option in the code generator that outputs a ton of log messages for exactly this purpose), and if an exception gets thrown, i get line numbers and all that good stuff
09:38 < ningu> candy_: I'm not familiar with sequelize, unfortunately
09:38 < candy_> ningu, furthermore, when appending the  related object 2 to object 1, via the setter object1.setObject2 (object2), it has no effect
09:38 < deoxxa> ningu: 3) deployment - i can use my existing deployment infrastructure at work to deploy the applications, and they sit entirely independent and isolated from anything else
09:39 < deoxxa> ningu: so yeah, for me, code generation has multiple advantages. it's not for everyone though, and it's a fairly heavy solution.
09:39 < candy_> ningu, that was just an example, My original quesiton was if there is an orm, without this issues, more friendly to use for a programmer with c/c
09:39 < candy_> c++ background
09:40 < ningu> candy_: database operations in node are always run async by design -- you will always need callbacks
09:40 < candy_> callbacks are fine, don't get me wrong, publish and subscribe rules but the orms i have seen are a bit too extensive for my taste
09:40 < deoxxa> candy_: you're coming up against "async is stupid" syndrome; it'll pass after a while, just stick with it and it'll make sense
09:40 < ningu> hehe
09:40 < ChrisPartridge> tds5016: you could use a timeout
09:40 < RLa> first time i saw node i though pretty much same
09:41 < tds5016> ChrisPartridge: how would I do that?
09:41 < deoxxa> yep, i hated that style of programming when i first started with node
09:41 < deoxxa> but it grew on me quickly
09:41 < deoxxa> and now i can't live without it
09:41 < deoxxa> luckily there's libuv as well, so i get the same awesomeness in all the c stuff i do :3
09:41 < faceleg> +1 for libuv
09:42 < faceleg> candy_: have a look at the async module
09:42 < candy_> ningu, i know that node.js is designed to make all io-operations async, and that one should write their own event-dispatchers, but when performing the operations one can craete an update on the invoking object as to not having to do it all by hand, and thats why i was asking, ok primary key(auto increment) migh tbe a bit hard to predict without internal record but still
09:42 < RLa> unfortunately i never tried node after seeing it, took almost 2 years more before i actually tried it :/
09:42 < ningu> deoxxa: what are your favorite async-flow modules? I usually just use async, which is awesome but I wonder if there are others that are worth looking into
09:42 < faceleg> https://github.com/caolan/async
09:43 < Doriath> Im getting an error message ETIMEDOUT when trying to connect to my mysql database with mysql-node, does anyone know what could be wrong?
09:43 < ningu> candy_: oh, I see what you mean. of course the async op can still change the invoking object. it just depends what the design is.
09:43 < deoxxa> ningu: same here, async all the way when i need it
09:43 < ningu> I just discovered async.queue() which is pretty cool
09:43 < deoxxa> aw yiss, async.queue() is my favourite part of that library
09:43 < asdf12> ningu: there's promises
09:44 < asdf12> ningu: there's before/after 
09:44 < candy_> faceleg, thanks for the hint with the asyncmodule, will have a look, looks interesting, although it  will mean more asyncronosity -.-'
09:45 < faceleg> candy_: as the others say, you get used to it. then like it, then love it, then bemoan the lack of same in other languages
09:45 < jocafa> never. block.
09:45 < jocafa> :D
09:45 < deoxxa> candy_: do you have any specific examples of libraries that are giving you a headache?
09:46 < asdf12> actually in other languages
09:46 < asdf12> they probably don't use callbacks to solve async
09:46 < candy_> faceleg lets hope not^^(the missing it in other parts), nodejs is currently a private project of mine, i usually write php and c/c++ code so my mindset is everything but suited for functional programming, or obp with shared state,
09:46 < ningu> asdf12: threads?
09:46 < faceleg> yeah threads
09:47 < asdf12> well yea
09:47 < jocafa> Apple's Grand Central Dispatch is very callback-friendly
09:47 < faceleg> ObjC makes threading less horrible than you'd think possible
09:47 < asdf12> but in other languages you have fibers, coroutines, so you write your code as some people are custom to, top to bottom 
09:47 < faceleg> "threading for the masses"
09:47 < ningu> what about threads in java? I recently installed solr and on its admin console there was a list of like 12 threads or some rather large seeming number.
09:47 < faceleg> in PHP we have cURL
09:47 < faceleg> for threading
09:48 < deoxxa> candy_: one thing that someone said (might have been isaacs) that really made a lot of sense to me was something along the lines of "indenting == travelling through time". in most languages, you read the program from top to bottom and that's the flow of time in the application. in a lot of javascript code, you read from left to right, in indentation, so for any given block, the least-indented code runs first, then the next-least-indented c
09:48 < ChrisPartridge> tds5016: https://gist.github.com/cjpartridgeb/5089125
09:48 < tds5016> ChrisPartridge: Thanks
09:48 < tds5016> !
09:48 < candy_> deoxxa, yes sequelize.js, a setter doesn't seem to work, with a freshy created object using objectdefinition.build or objectdefinition.create and upon saving the data the values primary key values are not updated, e.g. prediction with internal record, set/updated upon initializing sequelier-object
09:48 < pixie79> morning all - i am having a callback issue - I am running a process via exec, if that process issues an error then my callback works ok however if it is ok or my file test before fails i can not seem to set the callback to anything that the script calling it seems to be happy with. I keep getting the error 'TypeError: undefined is not a function' any ideas ?
09:48 < ningu> deoxxa: lots of async operations in a row can be kind of a pain to code, though. it would be nice to make the code more readable even if it was doing the same thing.
09:48 < tds5016> will that be blocking though?
09:48 < asdf12> for instance, ruby allows fibers, coroutines, so you can write code top to bottom without callback and indent shifting
09:49 < tds5016> as in will it affect other processes that the server is trying to do?
09:49 < ChrisPartridge> just note, you are binding a file watcher on each socket io connection
09:49 < ChrisPartridge> tds5016: no?
09:49 < deoxxa> candy_: ah, i see what you mean
09:49 < asdf12> so that's why when people complain about async in node.js i'm usually like async isn't the selling point, the selling point is javascript 
09:49 < faceleg> I'm teetering on the brink of groking some V8
09:50 < faceleg> hahaahahahahaha the selling point is js
09:50 < ningu> asdf12: actually I thought async *was* one of the main selling points.
09:50 < tds5016> ChrisPartridge: hmm, is there a way to bind this watcher overall in the process, then have it broadcast when it's seen?
09:50 < candy_> deoxxa, the order of execution is clear to me, it just is a hassle to wrap everything up in a function, and not beeing able to refere to values as I am used to, when invoking a collection of methods within an object, see func.bind or func.call
09:50 < faceleg> asdf12: for me, when talking to co-workers about node, async is the *only* selling point
09:50 < deoxxa> candy_: that is a bit annoying - but you can't guarantee that the value will be defined until the library tells you "hey bud, it's ready" anyway
09:50 < candy_> but as they said, probably will get used to it :D
09:50 < ningu> asdf12: if for no other reason than that the whole node library and npm modules are written around it. so you don't have to worry about someone's code blocking and messing everything up.
09:50 < ChrisPartridge> tds5016: yep, you certainly can
09:51 < asdf12> ningu: it is, but a lot of people complain about callbacks, in order languages they try to solve 'easy' concurrency too without using callbacks, so
09:51 < asdf12> so it's not a selling point if people hate the language
09:51 < asdf12> so the selling point should be the language mainly, imo
09:51 < ningu> whereas in ruby you can do sync or async, so maybe you can use fibers but do you have to be calling things that are written with that in mind?
09:51 < ChrisPartridge> tds5016: store the connected clients in an array for example, when they disocnnect, remove them from the array, then bind the file watcher somewhere, and then broadcast to the clients in the connected array - socket.io might have something built in already that tracks connected clients
09:52 < ningu> candy_: you can refer to objects outside of the scope of the function depending on how you've coded it
09:52 < asdf12> i don't know ruby, i just know they have fibers/coroutines, so you write sync looking code, but it's async
09:52 < faceleg> asdf12: sounds like magic
09:52 < pixie79> https://gist.github.com/pixie79/5089146
09:52 < candy_> ningu, yeah thanks to closures,^^
09:52 < ningu> candy_: right.
09:53 < tds5016> ChrisPartridge: There should be a way to broadcast.
09:53 < ningu> faceleg: yeah, it sounds like magic to me too. it would be nice if you could write code that way but I've never seen a way that actually worked.
09:53 < ningu> maybe I'm wrong though.
09:54 < ningu> btw this reddit stack overflow thread is kind of amusing: http://www.reddit.com/r/programming/comments/19npsp/developers_may_be_getting_as_much_as_50_of_their/
09:55 < faceleg> lol "php has the best docs"
09:55 < faceleg> protip: comments on docs do not count as part of docs
09:55 < tds5016> one last question that's probably stupid.... does anyone know of a good image change detection library for node.js?
09:56 < ningu> what do you mean by image change detection?
09:57 < deoxxa> https://github.com/deoxxa/pillion/blob/master/README.md << ok, i'm pretty happy with this readme now - opinions?
09:58 < tds5016> ningu: I have two image stored in memory, I want to tell how different they are.
09:58 < asdf12> ningu: https://github.com/postrank-labs/goliath/wiki/Asynchronous-Processing
09:58 < tds5016> there will be some noise, so I need to normalize for that.
09:58 < ningu> "There was a research paper that implemented searching exceptions automatically from Stack Overflow."
09:58 < asdf12> ningu: look at his http request, no call back, its top to bottom and it won't block
09:59 < asdf12> on the bottom of that, shows you a db query thats written top to bottom with no callback too
09:59 < tds5016> ningu was that for me? haha.
09:59 < candy_> well thanks again for the nice insight, will be dropping by more often, if this project works as expected.... bb till nex ttime
09:59 < ningu> tds5016: ok. I'm not really sure what you mean by "how different". I guess I would start by looking at well established image libraries out there and see if you can use a command line tool.
09:59 < ningu> tds5016: no, just a random quote from that thread I linked to
10:00 < tds5016> oh okay. :-)
10:00 < ningu> tds5016: but I don't know anything at all about parsing image data
10:00 < tds5016> soo... basically what imageDiff does.
10:00 < tds5016> I'm able to do this client side, but not server side :-)
10:00 < tds5016> https://github.com/HumbleSoftware/js-imagediff
10:00 < tds5016> that :-)
10:00 < ningu> imagediff looks like it's available server side.
10:00 < ningu> right.
10:01 < tds5016> really? hmm.... does it have an npm module?
10:01 < ningu> it says so.
10:01 < ningu> npm install imagediff
10:01 < tds5016> oh okay.
10:01 < tds5016> so how would one go about adding it to node?
10:01 < ningu> looks like it's meant to be used from the command line but you can probably figure out how else to use it
10:02 < ningu> I would look at the imagediff script to start
10:02 < ningu> https://github.com/HumbleSoftware/js-imagediff/blob/master/bin/imagediff
10:03 < ningu> that shows you how to use it in your code
10:03 < tds5016> oh ballz... it found it :-)
10:03 < tds5016> in npm...
10:03 < ningu> looks pretty simple
10:06 < tds5016> thanks man!
10:06 < ningu> actually I think you mostly answered your own question
10:11 < phrearch> hm, i was pretty sure that ive setup node-dev to ignore certain files or dirs, but forgot how
10:12 < phrearch> according to the docs, it doesnt have such an option in .node-dev.json (to ignore dirs)
10:17 < faceleg> protip: comments on docs do not count as part of docs
10:17 < faceleg> oops, up-enter fail
10:17 < ChrisPartridge> deoxxa: readme looks good
10:18 < deoxxa> ChrisPartridge: thanks!
10:18 < deoxxa> i'm getting ready for an [ANN] post on the mailing list
10:20 < faceleg> GUYS GUYS
10:20 < faceleg> GREAT NEWS
10:20 < faceleg> I've gone from segfault to malloc: *** error for object 0x100828910
10:20 < faceleg> w00t
10:20 < deoxxa> yes!
10:21 < faceleg> it was const_template->GetFunction()->NewInstance(), not the 1 million other things I tried
10:21 < faceleg> <i>What a fool</i>
10:21 < deoxxa> lol
10:21 < deoxxa> v8's c++ side is a mixture of awesome and painful
10:22 < faceleg> so much pain
10:22 < faceleg> a week of 10PM - 2AM 
10:22 < faceleg> bashing my hands against the keys fruitlessly
10:22 < faceleg> I knew _so little_ I wasn't actually able to articulate questions 
10:22 < faceleg> So I want to do *waves hands* but I don't know how
10:23 < faceleg> pointer being freed was not allocated
10:23 < faceleg> Love C++ errors
10:23 < deoxxa> lol
10:24 < ChrisPartridge> haha
10:25 < ningu> maybe it was mal-allocated
10:25 < ningu> or mallocated
10:25 < faceleg> I don't know enough C/++ to tell whether you're attempting humour or tryint to be helpful
10:25 < ningu> the former
10:26 < faceleg> I was 65% sure of that
10:26 < faceleg> ningu: hahaa! good one
10:26 < ningu> just don't dereference this pointer: http://commons.wikimedia.org/wiki/File:English_pointer.jpg
10:27 < faceleg> the error handling of this code I'm working on is so ... vacant that I'm often not sure if a c-fail is because of my bad in C++ or using it wrong in JS
10:27 < faceleg> 404 hound not found
10:27 < deoxxa> ningu: i like your style - puns are my jam, yo
10:28 < faceleg> anyone want some free SO rep?
10:28 < faceleg> http://stackoverflow.com/questions/15202676/instantiate-pass-c-object-to-node-js-function-v8
10:28 < faceleg> the answer is:     Local<Object> parent = GitCommit::constructor_template->GetFunction()->NewInstance();
10:28 < faceleg>     GitCommit *parentCommit = ObjectWrap::Unwrap<GitCommit>(parent);
10:28 < faceleg>       parentCommit->handle_
10:29 < faceleg> you have from now until I compulsively anser it myself
10:30 < faceleg> anyone here more than passingly familiar with V8? I have yet another (likely noob) question and the v8 room is dead
10:31 < pixie79> i am getting stuck trying how to do something if my exec works ok, if it fails my callback invokes and I know about it, but if the exec is ok it seems i am not capturing it ?
10:31 < faceleg> If I instantiate an ObjectWrap class from inside V8, do I need to instance->Ref() it to prevent it from being GC'd?
10:33 < jetienne> q. i remember that it is possible to plugin a debugger into node, but i don't remember the name of the package, anybody got a better memory than me
10:33 < tds5016> ningu: maybe I'm just incredibly dense...
10:33  * jetienne hopes :)
10:34 < tds5016> but I can't wrap my head around how to make my base64's into two files that imageidff could compare with node.js
10:35 < abe> hi
10:36 < faceleg> ih
10:36 < ningu> tds5016: why use files if they're in memory?
10:37 < tds5016> ningu: base64 in memory, yeah.
10:37 < tds5016> how would I use imagediff to compare?
10:37 < tds5016> or how can I push them into canvases that would compare might be a better question.
10:39 < tds5016> ningu: btw, thank you so much. I really do appreciate all the help you and everyone else has been. you guys are awesome.
10:40 < ningu> tds5016: I'm looking at the source.
10:40 < ningu> I have no idea how imagediff works but the source is pretty short.
10:40 < tds5016> thanks ningu you rock.
10:41 < tds5016> ningu: I have no idea either, but if I can run the equal method and get semi-decent results, the world is a good place :-)
10:42 < ningu> tds5016: ok, yes, looks like you need to make Canvas.Image() out of them.
10:42 < ningu> a = new Canvas.Image(); a = imagediff.toImageData(a);
10:42 < ningu> imagediff.equal(a, b, t)
10:43 < ningu> so the only question is how to make the canvas.
10:43 < faceleg> ih
10:43 < tds5016> ningu: so if I have a base64 encoded file...
10:43 < tds5016> what woudl that look like?
10:45 < ningu> well, var foo = new Buffer(base64data, 'base64);
10:45 < ningu> that will decode the base64.
10:45 < ningu> then the question is how to make a canvas.
10:46 < ChrisPartridge> there's a createCanvas method
10:46 < ningu> ok, it looks like you want to do something like:
10:47 < ningu> var img = new Canvas.Image; img.src = new Buffer(foo, 'base64');
10:48 < tds5016> awesome! thanks!
10:48 < tds5016> on the downside, I'm now having issue with the canvas module :-(
10:49 < ningu> haven't tested any of this. looks like it should work though.
10:49 < tds5016> Error: Cannot find module '../build/Release/canvas'
10:50 < ChrisPartridge> you need node-canvas, which requires cairo as per the docs
10:52 < tds5016> npm install node-canvas seems not to work :-(
10:52 < ningu> do you have cairo installed?
10:52 < ningu> not in npm but in /usr/lib
10:52 < phrearch> hm, i need an autoreload which is easy to config to ignore extensions and directoreis
10:52 < tds5016> can't find cairo either.
10:52 < phrearch> nodemon jumped to 100% cpu
10:52 < tds5016> npm install cairo isn't there*
10:52 < ningu> cairo is a library
10:52 < ningu> not a node module
10:53 < phrearch> and node-dev is a bit confusing to setup :(
10:53 < faceleg> phrearch: supervisor?
10:53 < ningu> phrearch: heh, I parsed nodemon as "no demon" and was confused
10:53 < faceleg> anyone here avail. to answer a v8 question *crosses fingers*
10:53 < phrearch> faceleg: does that come with a config file?
10:53 < tds5016> ningu: hmmm. I'm guessing I wat the c one?
10:54 < tds5016> or c++*
10:54 < faceleg> phrearch: not sure
10:54 < phrearch> ningu: its probably meant to be read like that :)
10:54 < faceleg> v8, anyone?
10:54 < ningu> tds5016: whatever node-canvas says it needs. I didn't know there was more than one.
10:54 < tds5016> ningu: where can I see what node-canvas wants?
10:54 < phrearch> faceleg: supervisor is more a autoreload program in case something crashes
10:55 < faceleg> phrearch: ah right, my bad
10:55 < tds5016> I'm getting that npm install node-canvas doesen't exist at all if I understand hte output.
10:55 < phrearch> i liked node-dev, but it seems to have the ignored-directory 'public' hardcoded
10:55 < ningu> npm install canvas
10:55 < ningu> read the docs :P
10:55 < ningu> https://github.com/LearnBoost/node-canvas
10:55 < tds5016> npm ERR! message 404 Not Found: node-canvas
10:56 < rendar> what is node-canvas?
10:56 < tds5016> npm install node-canvas am I even running the right command
10:57 < ningu> no, as I just said :P
10:57 < phrearch> this seems more advanced: https://github.com/iliakan/node-dev
10:57  * ChrisPartridge laughs
10:58 < tds5016> It's 3AM, and I'm clearly an idiot -)
10:59 < tds5016> tseth@tseth-lnx2:~/campFire2$ npm install canvas npm http GET http://registry.npmjs.org/canvas npm http 200 http://registry.npmjs.org/canvas tseth@tseth-lnx2:~/campFire2$ 
10:59 < tds5016> canvas is isntalled
11:00 < tds5016> but I still get that build/Release/canvas doesn't exist
11:02 < ChrisPartridge> tds5016: got cairo installed on your system?
11:02 < tds5016> up.
11:02 < tds5016> yup*
11:03 < tds5016> or at least I should. haha.
11:03 < tds5016> I followed the wiki
11:04 < faceleg> oh ffs v8 is driving me up the wall
11:04 < guor> what's your issue?
11:04 < tds5016> ChrisPartridge: I should. I forgot to add your name on the last send. sorry about that.
11:04 < faceleg> returning an object instatiated from within a C++ function
11:04 < faceleg> results in {}
11:05 < faceleg> I'm using   Local<Object> parent = GitCommit::constructor_template->GetFunction()->NewInstance();
11:05 < faceleg>   return scope.Close(parent);
11:05 < tds5016> â”œâ”€â”¬ imagediff@1.0.4  â”‚ â””â”€â”€ canvas@1.0.1 
11:05 < tds5016> looks like canvas should be isntalled.
11:05 < ChrisPartridge> tds5016: when you installed js-imagediff, did it build it?
11:05 < tds5016> but it's whining that it doens't see it :-/.
11:05 < ChrisPartridge> well, build canvas
11:05 < ChrisPartridge> or, did you install js-imagediff before installing cairo?
11:06 < tds5016> ChrisPartridge: the latter.
11:06 < tds5016> is there a way to uninstall imagediff and reinstall?
11:06 < ChrisPartridge> try npm remove imagediff and then npm install imagediff
11:06 < ChrisPartridge> it should build a bunch of stuff with node-gyp
11:07 < tds5016> same issue.
11:07 < faceleg> guor: does template->GetFunction()->NewInstace() not do what I think it does?
11:08 < tds5016> http://ideone.com/Vih03r
11:08 < ChrisPartridge> tds5016: any errors?
11:08 < tds5016> ChrisPartridge: ^
11:08 < tds5016> that should be my output. I shouldn't have gotten any errors fromwhat I can tell.
11:08 < ChrisPartridge> yeah, you dont actually need to install canvas on it's own - imagediff should take care of it
11:09 < tds5016> oh, gotchya. yeah. it looks like it may've
11:09 < tds5016> but it's not finding it :-/.
11:09 < tds5016> var Canvas = require('canvas');
11:09 < tds5016> I'm trying to use it correctly there, right?
11:09 < faceleg> is there a build in Debug, a folder that may exist beside Release?
11:09 < ChrisPartridge> yeah, check that ^
11:09 < faceleg> Sometimes maintainers forget to switch off debug for release builds
11:10 < ningu> no, actually he needs canvas separately to pass things to imagediff
11:10 < ChrisPartridge> look for a build folder atleast tds5016, inside the node_modules folder
11:10 < ChrisPartridge> ningu: imagediff has a createCanvas method anyway
11:10 < ningu> unless imagediff provides a canvas instance
11:10 < ningu> ah, ok
11:10 < ChrisPartridge> i assume it's just using canvas API
11:10 < ningu> according to docs that's deprecated
11:11 < ningu> oh, nevermind. that was canvas docs.
11:11 < tds5016> if I do the imagediff only, it still has issues :-)
11:11 < ChrisPartridge> tds5016: inside nodule_modules/imagediff, is there a build folder?
11:11 < tds5016> imagediff is in node_modules
11:11 < ChrisPartridge> er, maybe nodules_modules/imagediff/nodule_modules/canvas/ <-- check for build folder here
11:11 < faceleg> guor, oh guor, you made my heart race with hope
11:12 < tds5016> there is not a build folder it appears.
11:12 < tds5016> there are quite a few there, but no build.
11:12 < gofs> New hack tools Cryptography, Encryption,Hack,windows,linux,games,cs,psybnc,mirc,scan,ssh , etc.. feel free to visit www.team3d.3xforum.ro
11:13 < tds5016> binding.gyp  History.md  index.js  install  lib  Makefile  package.json  Readme.md  src  util
11:13 < tds5016> that's all that's in there :-/.
11:13 < ChrisPartridge> tds5016: hmm, maybe need the node-gyp packaged installed for it to build the deps
11:13 < faceleg> what is in lib/
11:14 < tds5016> ChrisPartridge: should I do npm install node-gyp?
11:14 < ChrisPartridge> tds5016: npm install -g node-gyp (note the -g for globally)
11:15 < ningu> yeah, it looks like something is going wrong with gyp
11:15 < tds5016> I installed gyp, and still not finding it :-(
11:15 < ChrisPartridge> did you reinstall the package again?
11:16 < faceleg> depending on your system you might need to symlink node-gyp to /usr/local/bin/node-gyp from wherever it was installed (I have to do this in OS X, node installed via brew)
11:16 < tds5016> yup. no luck.
11:17 < ChrisPartridge> tds5016: go into the node_modules/imagediff/node_modules/canvas dir in a shell, and type node-gyp configure && node-gyp build
11:17 < tds5016> faceleg: looks like it is: ./usr/local/lib/node_modules/node-gyp
11:19 < tds5016> ChrisPartridge: looks like it's doing somethign :-)
11:19 < ChrisPartridge> horra
11:19 < tds5016> not sure if it's doing the right thing.... but it's doing... something.
11:19 < tds5016> haha.
11:19 < ChrisPartridge> something is better than nothing?
11:19 < ChrisPartridge> :P
11:22 < niloy> anyone knows if Array.sort([1,2,3]) works?
11:22 < deoxxa> niloy: Array.sort.call([1,2,3])
11:23 < niloy> deoxxa, that would work, I was just wondering why 'Array.sort' works on firefox
11:24 < niloy> deoxxa, also, shouldnt it be Array.prototype.sort.call ?
11:24 < deoxxa> they probably have it set up that way for convenience
11:24 < deoxxa> oh, yes, prototype
11:24  * deoxxa silly
11:27 < tds5016> http://ideone.com/oYr98H
11:27 < tds5016> last thing today... honest.
11:27 < tds5016> it looks like that won't work. it's giving me data type issue.
11:28 < tds5016> any ideas? I swear; this is 100% the last question fo the day.
11:31 < sebmck>  /join #seb-gab-charlie
11:32 < ChrisPartridge> tds5016: try just pass the file path to src
11:33 < ChrisPartridge> tds5016: in fact, look wat the imagediff binary is doing
11:33 < ChrisPartridge> https://github.com/HumbleSoftware/js-imagediff/blob/master/bin/imagediff
11:34 < tds5016> ChrisPartridge: the files paths would end up being the same file :-(
11:34 < shirokuma> tds5016: Assuming currentImage is base64, The src for the images _need_ to be binary, not base64, it's right now also hashing "data:image/jpeg;base64,"
11:35 < shirokuma> so, new Buffer('data:image/jpeg;base64,'+currentImage, 'binary'); should work
11:36 < tds5016> shirokuma: so how would I get it back to binary?
11:36 < shirokuma> in the .src = parts, don't encode it in base64, encode it into "binary", so basically change "base64" to "binary" in the Buffers with data:image
11:38 < tds5016> looks like I'm still getting the same error :-(
11:38 < shirokuma> try removing buffer altogether.
11:39 < shirokuma> (new Buffer('data:image/jpeg;base64,'+currentImage, 'base64');  -> 'data:image/jpeg;base64,'+currentImage;
11:39 < tds5016> http://ideone.com/JXddSQ
11:39 < shirokuma> what
11:39 < shirokuma> update your node
11:39 < faceleg> so ChrisPartridge , you're a v8 expert right?
11:40 < tds5016> shirokuma: k?
11:40 < tds5016> sorry... I mean "??"
11:40 < tds5016> what do you mean update my node?
11:40 < shirokuma> tds5016: Buffer is global since 0.8? Either update your nodejs to 0.8 or add require('buffer'). 
11:41 < shirokuma> right now the error you're getting is that buffer is not defined.
11:41 < shirokuma> wait
11:41 < shirokuma> nevermind
11:41 < ChrisPartridge> faceleg: LOL, nope
11:41 < tds5016> shirokuma: that's not the issue that's showing up :-)
11:42 < shirokuma> strip buffer from line 4 and 7, plain old 'data:image/jpeg;base64,'+base64_data
11:42 < ChrisPartridge> i've made one C++ extension, and i went through the same pain you're going through right now
11:42 < faceleg> ChrisPartridge: worth asking
11:42 < faceleg> ChrisPartridge: "... made one C++ extension" so you _are_ an expert!
11:42 < faceleg> *comparisons are relative
11:42 < shirokuma> I once made a malebolge extension for Node.js, doesn't mean i understand the shit.
11:43 < deoxxa> faceleg: i've made two!
11:43 < tds5016> shirokuma: same error :-(
11:43 < ChrisPartridge> how are you getting the files tds5016? 
11:43 < deoxxa> https://github.com/deoxxa/node-polarssl and https://github.com/deoxxa/node-mcnet :3
11:43 < shirokuma> tds5016: what error are you getting?
11:43 < tds5016> oldImage.src = 'data:image/jpeg;base64,'+currentImage; you meant go to that, right?
11:43 < ChrisPartridge> faceleg: whats the problem you're having, i *may* know 'something'
11:43 < tds5016> TypeError: Image or Canvas expected
11:43 < tds5016> shirokuma: ^^
11:44 < faceleg> uh
11:44 < faceleg>  want to intantiate an object in C++
11:44 < faceleg> and return it to JS
11:44 < shirokuma> tds5016: please copy the entire script to somewhere.
11:44 < faceleg> I've got it returning, after like 12 hours of failing
11:44 < shirokuma> faceleg: http://nodejs.org/api/addons.html
11:45 < faceleg> but in JS, console.log(obj.function()) is just {}
11:45 < deoxxa> Local< Object > object = Object::New(); scope.close(object);
11:45 < deoxxa> iirc
11:45 < faceleg> shirokuma: yes I've read that, thanks
11:45 < deoxxa> @ faceleg
11:45 < faceleg> my object::new method expects v8::Arguments &args
11:46 < tds5016> shirokuma: which pastebin do you prefer?
11:46 < tds5016> ideone is taking a long time.
11:46 < tds5016> haha.
11:46 < asdf12> hastebin.com is fast
11:46 < asdf12> and no ads
11:46 < ozette> i'm playing around with the jinjs template engine, i tried to for-in through a dict and place the content between <li> tags, but ended up with an empty render. seems i'm not understanding something very well. here's the small script: http://pastebin.com/2k562VB0
11:46 < deoxxa> gist.github.com
11:46 < ChrisPartridge> gist ftw
11:46 < deoxxa> @ tds5016
11:46 < ChrisPartridge> tds5016: how are you getting these images in node? is the data in a buffer?
11:46 < ningu> https://www.destroyallsoftware.com/talks/wat
11:47 < faceleg> ningu: +1
11:47 < tds5016> shirokuma: http://ideone.com/wQp3fE
11:47 < tds5016> ChrisPartridge: ^^ there's the whole script :-)
11:47 < shirokuma> new Buffer(fs.readFileSync('public/images/slides/slide.jpeg')).toString('base64'); --- I'm 50/50% sure that fs.readFileSync is already a buffer.
11:47 < deoxxa> ozette: might i suggest https://github.com/deoxxa/node-ginger
11:48 < deoxxa> ozette: ginger is a play on "jinja"
11:48 < shirokuma> also new Canvas.Image ---> new Canvas.Image()
11:48 < ozette> deoxxa, let me have a look ..
11:49 < ningu> shirokuma: new Canvas.Image was taken right from the node-canvas docs.
11:49 < deoxxa> ozette: don't let the last commit being 11 months ago scare you off, i just haven't touched it for ages because it's stable and i haven't had to add anything to it
11:50 < asdf12> random version bumps
11:50 < asdf12> to keep it fresh
11:50 < deoxxa> ha
11:50 < deoxxa> yeah
11:50 < deoxxa> "fixed whitespace"
11:50 < deoxxa> "re-added trailing newlines"
11:50 < deoxxa> "renamed index file"
11:50 < ozette> deoxxa, i'm not scared off that easily, jinjs hasn't been worked on for about a year as well ;)
11:51 < ningu> no one ever uses oldlines
11:51 < tds5016> shirokuma: it looks like that :-)
11:51 < deoxxa> rofl
11:51 < tds5016> like that is already a buffer*
11:51 < asdf12> because oldlines didn't get random version bumps
11:51 < shirokuma> AH I SEE
11:52 < ningu> said the blind man to his deaf wife, who wasn't listening anyway
11:52 < asdf12> no joke, i think most people do care about that, oh it has too little stars, or it hasn't been updated in x amount of months
11:52 < ningu> well, I do check how recent something is, depending on what it is -- for example I'd be iffy about an ORM without active development
11:53 < tds5016> shirokuma: what do you see?!
11:53 < ningu> tds5016: http://xkcd.com/979/
11:53 < shirokuma> tds5016: if this doesn't work, i have no idea what will https://www.refheap.com/paste/a97f6d53464b8d0e1c9c194c1
11:54 < deoxxa> welp, gotta be up early tomorrow
11:54 < deoxxa> bed time
11:54  * deoxxa bids all goodnight
11:54 < faceleg> how would I instantiate this class https://github.com/tbranyen/nodegit/blob/master/src/commit.cc#L105 in a V8 function and return it to JS?
11:54 < faceleg> deoxxa: later
11:54 < ozette> deoxxa, good night, thanks for the reference
11:54 < faceleg> be sure to pass it by
11:55 < tds5016> shirokuma: TypeError: Object #<Canvas> has no method 'putImageData
11:55 < shirokuma> ugh, contexts.
11:56 < shirokuma> add oldContext = oldCanvas.getContext("3d"); and change oldCanvas.putImageData to oldContext.putImageData
11:56 < faceleg> shirokuma: are you talking to me or tds5016 ?
11:56 < tds5016> does that mean you know what the issue is or I'm sol?
11:56 < tds5016> haha.
11:56 < shirokuma> same for new
11:56 < shirokuma> faceleg: tds5016 
11:56 < faceleg> shirokuma: hopes are dashed
11:56 < shirokuma> faceleg: you had any?
11:57 < faceleg> shirokuma: dwindling
11:57 < shirokuma> lol
11:57 < faceleg> but seriously
11:57 < faceleg> wth am I doing wrong
11:58 < shirokuma> faceleg: have you confessed your sins and prayed to god for it to work?
11:58 < tds5016> shirokuma: and then do I still put oldCanvas and newCanvas in imagediff.equal()?
11:58 < shirokuma> tds5016: yes
11:58 < faceleg> the compiler doesn't listen to prayers
11:59 < shirokuma> faceleg: so it's satanic, maybe you should do some evil demon chanting.
11:59 < neurom> why does this print nothing?  http://pastie.org/6389495
11:59 < faceleg> shirokuma: ron't want to wake baby
11:59 < shirokuma> neurom: because stdout isn't process.stdout?
11:59 < tds5016> shirokuma: I think I might be slightly misunderstanding, do you think you update the pastebin?
11:59 < tds5016> I'm sorr.y
12:00 < shirokuma> https://www.refheap.com/paste/92e2c224bb5a3a4c3636b24ab
12:01 < faceleg> shirokuma: is it not proper to use Handle<Value> parent = GitCommit::constructor_template->FunctionTemplate()->NewInstance(); to construct an instance?
12:01 < neurom> shirokuma: how come?  the manual says stdio: 'inherit' same as stdio: [process.stdin, process.stdout, process.stderr] or [0,1,2]
12:02 < tds5016> shirokuma: TypeError: ImageData expected
12:02 < tds5016> :-/.
12:02 < tds5016> so close....
12:02 < shirokuma> tds5016: wat. uhm
12:02 < shirokuma> hold on
12:02 < tds5016> holding :-)
12:03 < shirokuma> tds5016: imageDiff(toImageData(oldCanvas), toImageData(newCanvas), 170)
12:03 < shirokuma> faceleg: my C++ knowledge is next to nothing
12:04 < shirokuma> neurom: odd, tried manually cat xxx
12:04 < shirokuma> 'ing the file?
12:04 < faceleg> shirokuma: damn
12:05 < shirokuma> neurom: first thing to do is check if the spawn or fs is having problems.
12:05 < tds5016> oldContext.putImageData(oldImage);
12:05 < tds5016> that's the line it's complaning about :-(
12:07 < shirokuma> okay, hold on.
12:08 < pixie79> can anyone help on a spawn callback issue - i need to be able to return 'OK' or '0' to the calling script once the program exists ok but it keeps telling me my callback is not a function - https://gist.github.com/pixie79/5089871
12:09 < shirokuma> tds5016: https://www.refheap.com/paste/855f9574be8ccb7bc04ea06ba I have no idea how imagediff works, but give this a shot
12:09 < neurom> shirokuma: sorry for the still-too-complex example.  these still prints nothing: http://pastie.org/6389529 http://pastie.org/6389533
12:13 < tds5016> it's looking for an image or canvas.
12:13 < tds5016> won't take it :-/.
12:13 < shirokuma> neurom: reading up on the docs, you need to bind to the data event of the spawn process, cat.stdout.on "data"
12:15 < tds5016> hmm, so it's compiling now, just doens't mean to work. :-/.
12:15 < neurom> shirokuma: so what is the stdio: 'inherit' option good for?
12:15 < tds5016> I'm giving up for the night. thank you though! that made my life a lot better! I apprecaite the help1
12:16 < shirokuma> tds5016: https://www.refheap.com/paste/fcba6ccc9b86695df0e79d087 last shot
12:16 < shirokuma> neurom: not a clue
12:17 < neurom> shirokuma: ok, np, thx
12:17 < d4Mn> Hi, i have a problem with socket.io when refreshing a page I get duplicated data it's like each time sockets don't destroy and get's duplicated anyone know how to fix that?
12:17 < tds5016> that's comparing old canvas and new image...
12:17 < tds5016> si that right?
12:18 < faceleg> this is horrible
12:18 < faceleg> I'm considering going back to using input/output variables and rejecting my wild idea of refactoring the C++ so that the node module acted like JS
12:19 < shirokuma> tds5016: yes
12:20 < adammw111> Does udp/dgrams support the stream interface or is it essentially each packet read entirely into a buffer then a message event is emitted?
12:22 < tds5016> no dice :-(
12:22 < supersym> [M yX/quit
12:26 < ChrisPartridge> adammw111: the latter
12:27 < faceleg> I officially give up
12:29 < neurom> shirokuma: for the record, i'm a dummy.  my nodejs is too old, ignores the stdio option.
12:36 < Stephen> I noticed paddybyers committed to his fork of node again. Anyone know whats up?
12:37 < mscdex> ?
12:37 < Stephen> Im hoping he's made progress on android node
12:39 < Stephen> I built it using Debian kit on android, but the process is both insane and requires basically a chroot
12:45 < faceleg> Stephen: are you a v8 pro?
12:46 < Stephen> Not at all.. lol
12:46 < faceleg> dammit
12:46 < Stephen> Why?
12:46 < faceleg> I have ... issues
12:46 < ChrisPartridge> You might find one eventually faceleg, they're a lot like leprecauns 
12:46 < Stephen> Ask anyway,I might be able to help
12:48 < faceleg> scope.Close(objcet); is resulting in {} in JS
12:48 < faceleg> when it should be a populated object
12:55 < pats_Toms> hi, I am trying to make route with optional parameter with express
12:55 < pats_Toms> something like .get('/route/:something', ...)
12:56 < pats_Toms> and route will work on this if something is not writed
12:56 < pats_Toms> any ideas?
12:59 < pats_Toms> adding "?" after works fine
13:01 < asdf12> something is not writed?
13:04 < asdf12> oh i get it
13:05 < asdf12> i think you want req.params.something
13:06 < pats_Toms> another thing that seems like I am missing
13:06 < pats_Toms> http://sprunge.us/hdaT
13:07 < d4Mn> is it possible to listen socket.io connections of all namespaces?
13:07 < pats_Toms> this is console.log from my random var
13:07 < pats_Toms> when I use random.title
13:07 < pats_Toms> it's undefined
13:07 < pats_Toms> any ideas what I am missing?
13:08 < d4Mn> pats_Toms i think u're tring to get object but it's anr array with object
13:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:09 < d4Mn> try random[0].title
13:10 < pats_Toms> thanks d4Mn 
13:10 < d4Mn> ner uz ka :D
13:25 < topi`> hi folks. we have a strange problem with node.js (v0.6.18) and express.js where we start to experience heavy slowdown somehow associated with the sql queries (node-mysql )
13:25 < topi`> we see lots of login requests piling up, and the "authenticated successfully" responses come like half a minute later in large batches. what's going on?
13:26 < topi`> the system has been running for two months more or less and now started to act, so I'm pretty baffled about this
13:26 < bnoordhuis> topi`: you sure the problem is not on the side of the db?
13:26 < topi`> i've tested the same sql queries using mysql command line, and no latency whatsoever
13:26 < bnoordhuis> have you turned on slow query logging?
13:27 < topi`> we also have other systems running on same host which use mysql (albeit different db's and tables) which work normally
13:27 < topi`> no idea about slow query logging. how can one do that?
13:27 < bnoordhuis> google for 'mysql slow query logging', it's in the mysql docs somewhere
13:28 < bnoordhuis> there also all other kinds of instrumentation you can turn on
13:28 < topi`> we have this installed: mysql@2.0.0-alpha3 
13:29 < topi`> I guess it's a version that was recent in December
13:29 < bnoordhuis> i mean the database itself, not the node module for it
13:31 < bnoordhuis> if you've determined that node fires off the request but that it takes a long time for the answer to come back, the issue must be either with the database or with the network path
13:31 < topi`> I think the issue is with node, since we see incoming API queries block even though they do not touch the database at all
13:32 < faceleg> hi bnoordhuis thanks for your help some hours ago
13:32 < topi`> i.e. there are a few functions that generate response from global state
13:32 < faceleg> OMG OMG HEY HEY bnoordhuis 
13:32 < faceleg> I THINK I JUST DID IT
13:33 < faceleg> You know what!? I had just given up, been trying to get my head around v8 + the nodegit "way" and C++ for over a week of nights
13:33 < faceleg> late, late nights
13:33 < faceleg> and I just now realised that I was being a bit dumb in one aspect
13:33 < faceleg> but it doesn't matter
13:33 < faceleg> because I think I have got it. that's right. thanks to you bnoordhuis, you're my hero. Now at least I'll be able to enforce cleanliness on the C++ side, will look @ tidying the JS side later
13:34 < faceleg> YES YES YES 
13:34 < faceleg> I can *gasp* make _progress_ now!
13:34 < faceleg> Witness: 0108dc5485e6e3c2c1e6150908d0d796ec1c54fc ab23d6a8a8c74e08aef0fbca737eec8ee1485d54
13:35 < bnoordhuis> faceleg: haha, happy to help :)
13:35 < faceleg> That, boys and girls, is what success looks like
13:35 < faceleg> You know what it iwas?
13:35 < LuckyBurger> some sorta hash
13:35 < faceleg> Tonight I tried your sugg, it appeared not to work (JS reported {} when console.log function result)
13:35 < faceleg> so I went on a wild goose chase
13:35 < faceleg> for HOURS
13:35 < faceleg> (it's 2:30am now)
13:35 < faceleg> and then realised
13:35 < faceleg> hold up
13:35 < topi`> would there be some good way to debug the node-mysql module itself? i.e. I want to see when it tries to run a SQL query and when it gets the response
13:36 < faceleg> in JS, ther eis the "raw" library, emulating libgit2, and the "convenience" library, wrapping the former
13:36 < topi`> I suppose there is a connection pool with threads since mysql itself is blocking
13:36 < faceleg> ofc, the returned value was a *raw* git commit
13:36 < faceleg> and I was expecing a wrapped one, which when logged has a bunch of properties
13:36 < bnoordhuis> topi`: is it felixge's module? that one doesn't use threads. try NODE_DEBUG="net" node script.js
13:36 < faceleg> rant over
13:36 < topi`> hmm
13:36 < faceleg> thanks people
13:37 < faceleg> NODE 4 LYFE
13:37 < faceleg> <--- out
13:37 < bnoordhuis> faceleg: glad you got it working :)
13:37 < faceleg> yes
13:37 < faceleg> I grok, but not in fullness
13:37 < faceleg> Waiting is a goodness, grokking will come.
13:37 < faceleg> Share water.
13:38 < faceleg> bnoordhuis: if you care about StackOverflow you can answer the queston here, your help was the solution: http://stackoverflow.com/questions/15202676/instantiate-pass-c-object-to-node-js-function-v8#comment21459828_15202676
13:41 < faceleg> "Why are you trying to pass the whole class? Surely you can find a cleaner way to communicate between node and C++? Maybe you can design your project so the C++ program outputs the data you need to stdin and your js program takes it from stdin. "
13:41 < faceleg> most helpful comment ever
13:42 < bnoordhuis> faceleg: oh, i don't have a SO account
13:42 < faceleg> bnoordhuis: probably a good thing, give us noobs a chance to gather rep in your stead
13:44 < SargoDarya> faceleg: output json, read json.
13:44 < SargoDarya> or screw json, way too much overhead. Use binary \o/
13:46 < fermion> qq for long-time users of node in production â€”Â do you use any sort of exception aggregator when uncaughtExceptions occur?
13:48 < fermion> I'm trying to debug why my https.request() doesn't seem to go anywhere when handling real exceptions yet works fine on the console
13:58 < topi`> bnoordhuis: what I don't understand is how can felixge's mysql do non-blocking db ops if it doesn't use any threads? (i.e. it must block the main thread)
14:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:04 < asdf12> it's a native addon, so they can create threads there
14:04 < asdf12> i don't know if thats exactly what it does though
14:04 < felixge> topi`: I've implemented the MySQL protocol in pure JS, using node's net module. All I/O it does is therefor non-blocking
14:04 < felixge> asdf12: it's not an addon, it's a pure JS module
14:05 < topi`> felixge: so, it doesn't interface via any C bindings, but just raw connection to the Mysql socket?
14:07 < topi`> felixge: any tips as to how to debug DB accesses? we're seeing the service block when any kind of DB query is being performed, but there's something that triggers this behaviour (i.e. the service works for the first 2 minutes)
14:08 < topi`> and it worked for the past few months just fine, up until now, and we haven't upgraded any components.
14:14 < asdf12> Array.prototype.slice.call(arguments) is expensive!
14:16 < mscdex> asdf12: afaik anytime you 'use' the arguments variable it incurs extra overhead
14:16 < substack> it's really not terribly expensive
14:17 < substack> I can call Array.prototype.slice.call(arguments) 1 million times in 300 milliseconds on my crappy laptop
14:17 < asdf12> mscdex: no it's slice itself and well call()
14:17 < substack> an empty function executes in 100 ms
14:18 < substack> so unless you care calling Array.prototype.slice.call(arguments) millions of times who cares?
14:18 < substack> plenty of milliseconds to go around
14:19 < asdf12> i do even if it's not a million times, i like to optimize
14:21 < juliangruber> asdf12: prematurely? :P
14:21 < asdf12> i don't think you can optimize prematurely as some like to think
14:22 < juliangruber> i've been there, and i think every programmer has. it takes your attention away from the truly important things
14:23 < juliangruber> most of the time your code has way bigger issues than some wasted milliseconds
14:24 < asdf12> no i agree it can be an issue, what i mean is, some people always like to assume it's always premature to optimize
14:26 < AAA_awright> How do I make a proxy-like request out of a server?
14:26 <@isaacbw> focus on algorithmic optimization from the beginning
14:26 < AAA_awright> I want to do literally this:
14:26 < AAA_awright> GET http://localhost:8080/path HTTP/1.1
14:26 < AAA_awright> (etc)
14:26 < asdf12> i mean as soon as i get enough test coverage (integration tests) to start be able to start refactoring, i always start optimizing
14:27 < asdf12> man that sentence had a lot of starts
14:27 < juliangruber> for what?
14:28 < juliangruber> most of the times optimizations render code more complex and thus less readable / maintainable
14:29 < mscdex> AAA_awright: http already allows for that
14:29 < AAA_awright> mscdex: Right, I'm wondering how Node.js does that
14:29 < mscdex> probably just passes it as .url
14:30 < rideh> I've recently learned that my attempts to optimize as I go have really lead me to a lot of failure. For me personally I need to just produce produce produce, get it working, get features added. Ultimately as I add more stuff I see thigngs to change / refactor and I'll either do it right then or make a note for later.  I used to spend so much time trying to make sure everything was perfect before moving on - and nothing ever is, and i'd have
14:30 < rideh> idea if it were close until later anyways.
14:30 < AAA_awright> mscdex: I also want to make sure it goes to the server I send it to, that Node.js isn't going to try and parse that URL, if I request literally GET http://example.com/ HTTP/1.1
14:30 < rideh> Wasted a lot of time, would get frustrated, stuck etc. Projects would get put to the side or features never implemented because of my own ocd.
14:31 < SargoDarya> rideh: premature optimization is a killer
14:32 < mscdex> rideh: it's also true that some optimizations can cause your project design to completely change too, so doing that afterwards can cause more heartache then doing it from the get-go
14:32 < asdf12> trying to optimize things to me gives you leaner code (of course tests are a huge part of that, which is why i only start after i have enough test coverage)
14:32 < asdf12> mscdex: exactly
14:32 < asdf12> it guides you in refactoring
14:32 < pachet> what mscdex said x 1000
14:32 < rideh> mscdex: Sure i've certainly seen some of that but i think that falls more into architecture and planning than coding per say.. certainly a lot of overlap
14:32 < pachet> coding is 90% planning
14:33 < mscdex> node.js 100% rules!
14:34 < asdf12> besides, if you were going to change your code around, and you don't know if its worth it, having numbers to prove is at least enough reason 
14:34 < asdf12> to know you aren't wasting your time
14:35 < MI6> joyent/libuv: Ben Noordhuis v0.8 * b0c5e62 : linux: make uv_cpu_info() handle absent procfs  Return an error when read - http://git.io/4lk7xA
14:36 < rideh> mscdex my experiences with that have typically come from not clear enough goals at the begining, or a change of how people use a tool.   Perhaps this is because I've worked on smaller projects though.
14:38 < pachet> what director was it that said that the movie was done as soon as he wrote the script
14:38 < pachet> all the rest was execution
14:38 < asdf12> well on the point of how people use a tool, if you mean like a open source lib/module
14:38 < pachet> maybe hitchcock
14:38 < asdf12> to me i feel its my responsibility to not waste cpu cycles for people who use it :P
14:39 < pachet> in which case execution is a double entendre
14:40 < rideh> this is probably also related to coder skill. I'm still a novice and can get hung up on some very simple things sometimes because of limited or misunderstanding of how some things work. This can get very frustrating when the logic is so simple.
14:42 < MI6> joyent/libuv: Timothy J Fontaine v0.8 * c0f5582 : test: fix tap output even when ok but have output (+1 more commits) - http://git.io/mRBUHw
14:44 < MI6> joyent/libuv: Timothy J Fontaine v0.8 * 95577a8 : test: fix tap output even when ok but have output  This is a back-port of (+1 more commits) - http://git.io/bUS8aw
14:45 < MI6> joyent/node: Ben Noordhuis v0.8 * 532d992 : cluster: propagate bind errors  This commit fixes a bug where the cluster - http://git.io/l-IIWA
14:46 < MI6> joyent/node: Ben Noordhuis master * 862f7b8 : Merge remote-tracking branch 'origin/v0.8' (+3 more commits) - http://git.io/RYkhLg
14:52 < liuk78> Hi
14:54 < pachet> hi
14:54 < liuk78> this is my first time on irc channel, if I wrong something please tell me :)
14:54 < ahungry> hi
14:56 < liuk78> I have a question about node's native modules, can I ask you?
14:56 <@isaacbw> the first rule of IRC is don't ask to ask
14:57 < liuk78> perfect, first time first wrong :)
14:58 < StevenMcD> This may seem like a flamebait question but I swear it is not. How seriously are people taking Meteor? Is it worth jumping straight into Meteor or sticking with Node to rather learn the essentials
14:58 <@isaacbw> they server different roles
14:58 <@isaacbw> *serve
14:59 < SargoDarya> liuk78: Common mistake ;) Meta questions: http://www.urbandictionary.com/define.php?term=metaquestion
14:59 <@isaacbw> you can accomplish the same thing using node as part of the solution, but meteor is meant to be a very structured framework for both the client and the server
15:00 < pachet> ^
15:00 < StevenMcD> ah okay, thanks
15:00 < pachet> it can be rather unnecessarily constraining :[
15:00 <@isaacbw> also, meteor is for crazy people
15:00 < StevenMcD> IÂ´m still working through NodeJS In Action and really enjoying it but I was just starting to see Meteor popping up everywhere and was wondering if that should be my next focus
15:00 < sinclair|work> isaacbw: how so?
15:02 < sinclair|work> isaacbw: what's your beef with meteor, and microsoft
15:02 < sinclair|work> ?
15:03 < pachet> he hates microsoft because they produce such excellent software
15:03 < pachet> its jealousy
15:03 < context> what pachet said
15:03 < sinclair|work> i thought everyone in here hated MS 
15:03 < StevenMcD> and here I am, a .Net developer.... *hides*
15:04 <@isaacbw> sinclair|work: you mean my outlook complaints?
15:04 < sinclair|work> isaacbw: no, just joking about the Microsoft part, but what is wrong with meteor?
15:05 <@isaacbw> that much magic will warp your mind and drive you mad
15:05 < sinclair|work> isaacbw: oh, i dont know about that
15:05 < liuk78> Where can I find a complete list of native module? I read on doc that I can find on sources. So my question is: If I want to know all methods of native http module, where can I check? On /lib  node's sources?
15:06 < sinclair|work> liuk78: the documentation perhaps?
15:06 < StevenMcD> that was my one worry about jumping into Meteor was that they seem to Â¨hideÂ¨ a lot of what is happening in the background
15:06 < sinclair|work> StevenMcD: that's not a bad thing, thats called "encapulation"
15:06 < sinclair|work> sorry, encapsulation 
15:07 < sinclair|work> StevenMcD: who cares how it works, so long as it works
15:07 < StevenMcD> IÂ´m 50/50 on that
15:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:07 < sinclair|work> liuk78: http://nodejs.org/api/http.html
15:07 < StevenMcD> because when it breaks I want to know why
15:07 <@isaacbw> 'so long as it works'
15:08 < sinclair|work> StevenMcD: yeah, with nodejs, i expect there would be more need to fluff around with the innards of modules
15:08 < StevenMcD> I think I will dig further into Node before trying Meteor
15:11 < MI6> joyent/libuv: Ben Noordhuis master * 0b26af3 : unix: handle POLLERR and POLLHUP in uv__stream_io  Fixes a busy loop when - http://git.io/laHSWQ
15:16 < liuk78> sinclair: thanks
15:16 < ahungry> Hey guys, anyone wanna take a second to review this file of mine? https://github.com/jehiva/ahungry-tactics/blob/master/socket.io/lisp-client.js
15:17 < ahungry> Its pretty small, I am using node js as a wrapper to pass websocket requests from the browser to a tcp listener in a different language and sending the data back and forth via json
15:17 < ahungry> Is there a way to reduce my 3 function lines from 66 to 77 into one generic handler
15:17 < MI6> joyent/node: Ben Noordhuis master * f7b06e0 : deps: upgrade libuv to 0b26af3 - http://git.io/C0lPrA
15:19 <@isaacbw> lisp?
15:22 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
15:23 < ahungry> yea the listening tcp server is written in lisp
15:23 < ahungry> but the websocket support in lisp isn't as featureful as node's
15:23 < ahungry> so i'm using it as a pass through basically
15:59 < abe> hay...im not really a back end developer but need to build some resful web services that plug into a data base...is nodejs a good idea for that
16:00 < pachet> awye!
16:01 < abe> not familiar with that term
16:01 < s3shs> In response to an event outside ember-land I need to transition to a new route.  How do I do this?
16:01 < s3shs> Whoops, wrong room.
16:02 <@isaacbw> abe: "yes"
16:02 <@isaacbw> node is great for that
16:02 < abe> isaacbw: figured as much
16:03 < abe> any recommend modules 
16:03 < holzp> async
16:03 < abe> got node isntalled on my server
16:03 < draginx> http://clock.co.uk/tech-blogs/preventing-http-raise-hangup-error-on-destroyed-socket-write-from-crashing-your-nodejs-server is this still required on 0.8.21 ?
16:04 < holzp> abe what db are you using?
16:04 < abe> duno was thinking of using mongojs
16:05 < abe> have used sql based ones before but the hype sounds good at the mo for mongo
16:06 < abe> holzp: any recommendations?
16:06 <@isaacbw> mongodb is very enjoyable to use
16:06 < holzp> oh, I had thought you already had the data
16:06 < holzp> what kind of data is it?
16:07 < abe> back end for a mobile game
16:07 <@isaacbw> but you shouldn't pick a piece of software solely on hype
16:07 < abe> true
16:08 < abe> which is why im here
16:08 <@isaacbw> you just gotta do your research
16:08 < holzp> something ive done in cases where there is very structured/stable data and temporary fast adding/removing temporary data is a hybrid approach
16:08 <@isaacbw> it depends on what you're doing
16:08 < holzp> mysql for the former, redis for the latter
16:08 < abe> it does nto really matter if the data is stored relationally of flat as there is not that much of it
16:09 < abe> its more about ease of build
16:09 < holzp> then go with what you know
16:10 < holzp> thats easiest!!
16:10 < abe> thats true
16:11 < abe> but i guess it woudl be fun to try something new...what little i have read about mongoDB is the js interface to is mongoJS is pretty good and easy to use
16:12 < abe> have any of you used nodejs on dreamhost?
16:13 < context> does dreamhost support node
16:13 < pixie79> hi all - i am trying to write the output of a spawn stdout to a file, to do this i call a write_file function. The data is getting to the function because if i do console.log(data) i can see it but for some reason it is no longer going into the file, instead i get a '0' byte file created - any ideas ? https://gist.github.com/pixie79/5091404
16:13 < abe> iv got it all working on there but have just realised there is a lot of dedicated hosts for nodejs
16:14 < abe> is there a reason you should use a dedicated nodeJS host 
16:15 < abe> context: your right they dont support nodejs out of the box but you can install it your self if you want
16:15 < holzp> abe, Node is new enought
16:15 < holzp> I wouldnt try to mix up too much new stuff if you are trying to learn node at the same time
16:16 < abe> holzp: that makes sense will see what sql support there is for node then  
16:17 < juliangruber> pixie79: spawn(...).pipe(fs.createWriteStream(...))
16:17 <@isaacbw> oh cool, node-snappy was updated for gyp
16:17 < pixie79> juliangruber: arh ok thanks
16:18 < sshaginyan> Hey guys can someone please tell me how I can extend this? https://github.com/lovebear/quality
16:18 < sshaginyan> I want to make some parameters optional 
16:19 < sshaginyan> It says "Extendable"
16:19 < asdf12> what
16:19 < asdf12> which paramters
16:19 < MI6> joyent/node: Paolo Fragomeni master * 8e2376b : Update domain.markdown - http://git.io/ouUVog
16:19 < sshaginyan> asdf12: Where you the one the made this library?
16:19 < asdf12> yea
16:19 < sshaginyan> asdf12: How can I make something optional
16:19 < sshaginyan> for example
16:20 < asdf12> don't specify it
16:20 < asdf12> you only write the properties you want to check
16:20  * abe thankful to all who helped :)
16:21 < sshaginyan> asdf12: and this will check upper/lower case for keys?
16:21 < sshaginyan> asdf12: For example {one:1} and {ONe: 1}
16:21 < asdf12> no it won't do that
16:22 < sshaginyan> asdf12: So it won't throw an error on upper/lower case
16:23 < asdf12> it will, it'll say 'one' doesn't exist
16:25 < sshaginyan> k
16:26 < ahungry> so, did anyone take a peek at my code? (https://github.com/jehiva/ahungry-tactics/blob/master/socket.io/lisp-client.js) using node js as a wrapper for passing browser data to another tcp listener
16:28 < sshaginyan> asdf12: And I can still validate it if the optional value exists
16:28 < substack> http://substack.net/images/substack.gif
16:30 < sshaginyan> asdf12: So lets say I have this { categoryId: { _equal: /^[0-9]*$/ }, channel: { _equal: /^(site|registry|mobile)$/i }  };
16:30 < sshaginyan> asdf12: and channel is an optional parameter
16:31 < asdf12> oh that, no
16:31 < sshaginyan> asdf12: If I'm validating it against { categoryId: { _equal: /^[0-9]*$/ } }
16:31 < sshaginyan> asdf12: Yes you said it's extendable 
16:31 < sshaginyan> So how would I do this?
16:32 < asdf12> i'm confused, what do you mean validating it against? you mean channel depends on categoryId ?
16:32 < sshaginyan> no
16:34 < sshaginyan> asdf12: quality.test({ one: {_equal: '1'}, (optional) two: {_equal: 2} }, {one: '1'} <- this results in true/success
16:36 < asdf12> there's no way to say if two exists validate it, otherwise don't error if it doesn't at the moment
16:38 < euoia> what media do people use to stay up to date with nodejs? I'm only aware of this channel, the nodeup podcast, planetnodejs.com, reddit and hackernews
16:38 < euoia> and various people on twitter
16:39 <@isaacbw> what do you mean stay up to date
16:39 <@isaacbw> watch github?
16:40 < euoia> Observe discussions, hear announcements about changes in node core or about significant packages
16:41 < euoia> yeah, I have starred some github repos and followed a few people on github
16:41 < euoia> just wondering if there's any big source that I have missed
16:42 < pachet> euoia: i have electrodes hooked up to my nipples that deliver a mild shock whenever someone pushes to the node repo
16:42 < pachet> whenever that happens i sit up really fast in my chair and feel very connected with the community
16:43 < skope> pachet: and you wish that there would be plenty of pushes
16:43 < pachet> fix those issues, people
16:46 < euoia> pachet: I shall plug myself in post-haste
16:46 < pachet> sit back and await the rapture
16:47 < asdf12> to be honest, all i do is just look at whats trending on github
16:48 < Sven_vB> sometimes when i see what a strange place irc is, i wonder why i'm here
16:49 < shesek> euoia, javascriptweekly is pretty nice
16:49 < shesek> tho not nodejs-specific
16:50 < euoia> shesek: that's fine... general javascript discussion is still useful
16:51 < euoia> there's also the nodejs google group which I receive a digest of
16:54 < kenperkins> morning
16:54 < kenperkins> anyone planning on the portland node conf in may?
16:54 < asdf12> you should be knee deep in nodejs affairs then 
16:55 < asdf12> you're subscribed to everything
16:55 < damarusama> I am looking for something similar to lamernews.js but using something like couchdb or simply json
16:55 < damarusama> or maybe I should just start learning redis... 
16:58 < kenperkins> is learning redis an obstacle? seems painfully straightforward to me :D
16:58 < damarusama> haven't tough about it yet ;) not sure if it easy to install on debian
16:58 < pachet> maybe if you lived on a cloud where they served you TSQL statements on a golden platter all day
16:59 < SargoDarya> redis is not that hard
17:00 < SargoDarya> kenperkins: http://try.redis.io/
17:00 -!- mode/#Node.js [+o sblom] by ChanServ
17:00 < kenperkins> I was being sarcastic :D
17:00 < kenperkins> We've been using redis for ~2 years :D
17:01 < damarusama> yeah I read redis is quite popular 
17:01 < codingkevin> redis is awesome!
17:01 < codingkevin> fantastic tool.  have had much success with it in high volume environments
17:01 < kenperkins> if only they had cluster done :D
17:02 < codingkevin> soon
17:02 < codingkevin> SOON!
17:02 < codingkevin> but that's a nice to have really
17:02 < codingkevin> memcache has the same issue
17:02 < kenperkins> I saw a funny comment from my soon to be boss, who lives in San Antonioâ€¦ "the weather is nice today butâ€¦â€¦â€¦summer is coming"
17:02 < damarusama> hum compiling now
17:02 < codingkevin> but once clustering is done.  that will really simplify things
17:03 < echo> I agree, I love using redis as a cache store on the app layer with Riak being the distributed persistence to disk.
17:03  * codingkevin has also had really good success with riak
17:04 < damarusama> ALL CAP -- Why?!?
17:04 < codingkevin> que?
17:04 < SargoDarya> BECAUSE CAPS LOCK KEY IS BROKEN
17:05 < asdf12> erlanggggggg
17:05 < SargoDarya> Thanks for reminding me, always wanted to try it out
17:05 < damarusama> my pinky aren't happy about redis all cap operation
17:05 < codingkevin> so
17:06 < codingkevin> the main author of redis is italian
17:06 < codingkevin> and italians love to talk with their hands
17:06 < codingkevin> hence, the caps
17:06 < codingkevin> but - they operations are not case sensitive
17:06 < damarusama> ha! that does make sense... I love spagetti too
17:06 < yawnt> codingkevin: lol not all of us :P
17:06 < damarusama> so I should love redis
17:06 < kenperkins> redis is great, for what it's great at 
17:07 < kenperkins> transient things, lists, pub-sub, sets
17:07 < kenperkins> we use it for session stuff, counters, top lists
17:07 < kenperkins> my only wish is you could set ttl on hash values
17:07 < SargoDarya> I once abused pubsub..
17:07 < codingkevin> pornhub uses it as their primary data store
17:07 < kenperkins> really?
17:07 < kenperkins> who knew
17:07 < codingkevin> si
17:07 < codingkevin> 32 redis servers, all slaved up
17:07 < SargoDarya> hehe.. slaved up
17:08 < tpayne> anyone here use moment? Trying to find a clean way to see if an end time has been passed
17:08 < codingkevin> the masters don't flush.  slaves flush every second or so
17:08 < kenperkins> <rimshot>
17:08 < pachet> gross
17:08  * codingkevin has said too much
17:08 < damarusama> nice - yeap I want to create a social cli app rating - that would work for redis i guess
17:10 < EyePulp> tpayne: I've started using moment recently - seems like a nice lib
17:10 < tpayne> yeah
17:12  * kenperkins adds moment to the list of packages to read
17:12 < draginx> tpayne: i use moment
17:13 < kenperkins> Ah, so it's basically a DateTime library
17:13 < kenperkins> as opposed to a timer lib
17:13 < tpayne> http://momentjs.com
17:13 < kenperkins> yes, I hate working with JS Dates
17:13 < draginx> tpayne: couldnt u echo out the epoch time?
17:13 < tpayne> trying to make this cleaner
17:13 < draginx> or timeago
17:13 < jocafa> i heart momentjs
17:13 < kenperkins> i <3 async and request
17:13 < kenperkins> my favorite two packages
17:13 < kenperkins> followed closely by _
17:14 < tpayne> if (moment(dateRange.start) > moment() || dateRange.end < moment()) {
17:14 < draginx> tpayne: http://momentjs.com/docs/#/displaying/difference/
17:14 < tpayne> if (moment(dateRange.start) > moment() || moment(dateRange.end) < moment()) {  **
17:14 < tpayne> does .diff default to now?
17:14 < jocafa> is anyone using Backbone.Mutators?  i asked in #documentcloud but no response...
17:14 < draginx> yeah
17:14 < draginx> although u can do..
17:15 < draginx> kenperkins: i wish someone would take lodash and make it async
17:15 < kenperkins> hm
17:15 < kenperkins> async meaning with flow control?
17:15 < draginx> i tried convincing coloan to make .groupBy for async but he wouldnt budge (he does have sortBy but that shouldnt even be in there)
17:15 < draginx> kenperkins: yessir
17:15 < draginx> but utilizes process.nextTick()
17:17 < kenperkins> right
17:17 < kenperkins> I mostly use _ for object/collection/set manipulators
17:17 < kenperkins> i.e. map/filter/etc
17:17 < kenperkins> and async for flow control
17:20 < nlf> kenperkins: something wrong with node's native map and filter?
17:22 < kenperkins> you mean [].map() ?
17:22 < draginx> kenperkins: i mean it def makes sense to use things like that (also i recommend lodash over underscore)
17:22 < draginx> nlf: I don't think its async?
17:22 < kenperkins> yes, I know lodash
17:22 < nlf> yeah
17:22 < draginx> i remember .forEach not being async and i still think thats true
17:23 < nlf> yeah i don't think it is actually
17:23 < kenperkins> nlf: that's a good point
17:23 < kenperkins> I often forget to use the builtin functions
17:23 < kenperkins> just not enough room in my head I guess :S
17:24 < draginx> so yer it depends if u need async or not :D
17:24 < draginx> but it *is* funny seeing people use _.map and whatnot for ES5 JS :P
17:24 < nlf> i've just gotten in the habit of keeping my map/filter stuff sync
17:24 < kenperkins> I actually agree with you nlf: i'd rather they be sync
17:25 < kenperkins> most of the time I'm doing a map/filter is as an inline argument to something else
17:25 < kenperkins> having it be async is kind of a pita
17:25 < nlf> yeah, in those instances keeping it sync is much nicer
17:25 < nobitanobi> For all those node.js beginners, please read this article: http://code.danyork.com/2011/01/25/node-js-doctors-offices-and-fast-food-restaurants-understanding-event-driven-programming/
17:25 < nobitanobi> such a pleasure to finally understand event driven development :)
17:26 < Platz> If i have some numbers in a text file, after reading a slice into a buffer, do I have to convert the buffer slice to a string and then parseInt that string, or is there a way to get the int from the buffer directly?
17:27 < sinclair|work> has anyone here done anything with OT before?
17:27 < sinclair|work> OT meaning "operational transformations"
17:28 < Platz> (I had tried buf.readInt32LE, but that expects a fixed-byte width for the buffer slice)
17:30 < kenperkins> Platz: what are you trying to do?
17:32 < Platz> Read a column of numbers from a text file into memory as fast as possible.  I already have it working by streaming over the buffer, stopping at newline chars, and then converting the slice from the last newline into a string, then parsing that string
17:32 < Platz> just wondered if the string conversion was necessary
17:34 < RLa> in text file you have text representation of integer numbers not numbers themself
17:35 < Platz> right, so it's inevitable then
17:35 < RLa> you could store them in the binary file and then use readInt* methods
17:35 < RLa> is string conversion really bottleneck there?
17:36 < RLa> hm, i guess once file is cached/buffered by os
17:36 < Platz> it's just an exercise, but was just time to get the program faster
17:36 < kenperkins> Platz: have you looked at the lazy module from pkrumins
17:36 < kenperkins> it's really good at stream processing
17:37 < Platz> i did see lazy, but i proabably didn't use it effectively, because it was much slower than my manual implementation
17:37 < Platz> like this: http://pastebin.com/Z0ttcNnG
17:38 < kenperkins> ah, so you care that much about speed :P
17:38 < kenperkins> can you paste a bit of your expected input?
17:39 < Platz> I only care about speed inas much as was trying to get comparable results to the C++ guys.  in a webapp i wouldn't care
17:39 < asdf12> pastebin always shows porn links on the recent pastes section
17:39 < kenperkins> asdf12: it uses recently viewed sites to inform what ads to show
17:40 < kenperkins> I see travel ads, you seen porn
17:40 < kenperkins> :D
17:40 < asdf12> no, not ads, pastes
17:40 < kenperkins> ah :D
17:40 < kenperkins> haha
17:41 < Platz> sample input: http://pastebin.com/d0792t2B
17:41 < Platz> about 5,000,000 rows
17:42 < Platz> in other languages it seems possible to read this in under a second, but so far I'm around 4.8 sec
17:43 < kenperkins> hm
17:44 < kenperkins> Platz: did you read this? It might have some applicability
17:44 < kenperkins> https://speakerdeck.com/alex/why-python-ruby-and-javascript-are-slow
17:45 < Platz> kenperkins: that's a great deck; saw that on HN the other day.  I think this is the most likely case; no harm, no foul
17:46 < kenperkins> :D
17:46 < kenperkins> absent running the experiments myself, I can't really comment
17:46 < kenperkins> my expertise has never been in the depth of languages, but rather at the high level :P
17:47 < Platz> I'm used to high level as well; which is why I ask questions about buffers ;). But it's good to try something different now and then
17:49 < mscdex> Platz: also threads are used on *nix to do non-blocking file operations
17:49 < mscdex> so there's overhead there too if you use those
17:50 < mscdex> Platz: also you don't need to slice first to get a string, you can just do something like `buf.toString('utf8', 0, 12);`
17:51 < Platz> mscdex: nice, thanks
18:05 < AlphaPinky> hi. I donÂ´t understand why I cant create in node a http server running in port 80. http.createServer().listen(1337, "127.0.0.1"); // Should be enough. What IÂ´m doing wrong?
18:05 < AlphaPinky> ops
18:05 < mscdex> wrong port?
18:05 < AlphaPinky> instead of 1337 it is 80.
18:05 < mscdex> :-)
18:06 < AlphaPinky> Sorry. I pasted the wrong sentence. (I was trying random stuff)
18:06 < cjb> AlphaPinky: do you know about the <1024 superuser port restriction?
18:06 < cjb> what error do you get?
18:06 < AlphaPinky> cjb, no.
18:06 < cjb> you need to be root to bind to port 80
18:06 < cjb> but you don't want to run node as root
18:06 < AlphaPinky> is it possible to run node as a service in windows?
18:06 < mscdex> either that or you need a rule in iptables to forward port 80 to some higher port
18:06 < AlphaPinky> IÂ´m using Windows for development.
18:07 < mscdex> oh
18:07 < cjb> you should probably stop using Windows
18:07 < deoxxa> my condolences
18:07 < cjb> in general, ideally :)
18:07 < AlphaPinky> I should. But my notebook had issues when I tried Ubuntu. It was over heating. :)
18:07 < mscdex> there have been some projects to use node scripts as Windows services
18:08 < AlphaPinky> right. IÂ´ll google it. cjb I think you got the issue. Thanks.
18:08 < comp_> I recently stumbled upon a project that used node. A real time twitter statistics viewer. Does anyone know where I can find it?
18:08 < Platz> There are some projects which are trying to embed node in executables but are still in development i believe
18:08 < mscdex> AlphaPinky: maybe something like this?: https://npmjs.org/package/windows-service
18:09 < mscdex> that one does it natively i think
18:09 < mscdex> using Windows APIs
18:10 < Platz> this is not what you wanted but it's still neat: https://speakerdeck.com/zcbenz/node-webkit-app-runtime-based-on-chromium-and-node-dot-js
18:11 < warz> hi all, i feel like ive seen a module or a simple way to do the following: convert an array like [1,2,3,4,5] to an array or arrays, like [[1,2], [3,4], [5]]
18:11 < warz> is there? im trying to do grouped iteration
18:11 < warz> over the first array
18:11 < creationix> wars, there is nothing built-in in javascript
18:11 < creationix> but it's pretty easy to implement using a for(;;) loop
18:12 < comp_> I found that twitter statistics page if anyone else is interested: http://tweetping.net/
18:14 < Platz> almost zipping the evens with the odds, except for the last elt
18:14 < creationix> warz:  var chunked = []; for (var i = 0; i < original.length; i += 2) { var part = []; for (var j = i; j < original.length && j < i + 2; j++) { part.push(original[j]) } chunked.push(part); }
18:15 < creationix> warz: though to clean things up, I would probably write a generic chunk function
18:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:17 < cxreg> isaacs: I think maybe c7b2e29e5e added a regression, process.on('...') wont warn about leaks anymore
18:17 < creationix> I expose this as a primitive in my new language https://github.com/creationix/jack/blob/master/samples/i-helpers.jk#L11
18:17 < cxreg> not sure about other EEs
18:18 < creationix> warz: with JS implementation at https://github.com/creationix/jack/blob/master/runtime.js#L633-L642
18:18 < warz> creationix, neat thanks
18:22 < cxreg> yeah, just process.on
18:25 < kenperkins> AlphaPinky: did you consider running a VM?
18:25 < AlphaPinky> for running Linux?
18:25 < kenperkins> yea
18:26 < AlphaPinky> IÂ´ve just decided to get a Linux box and use Node from there.
18:28 < d4Mn> is there an alternate way to get unique id of user from socket.io and save it during sessions not using cookies
18:29 < pachet> is that meant to read 'is there an alternate secure way'
18:30 < d4Mn> pachet yes
18:36 < pachet> d4mn: https://github.com/LearnBoost/socket.io/wiki/Authorizing
18:36 < pachet> meant to find that quicker, but my bookmarks folder is like woah
18:42 <@isaacs> cxreg: indeed.  that seems like a weird effect.
18:44 < MI6> joyent/node: Bert Belder master * c0a5af8 : Revert "build, windows: disable SEH"  This is no longer necessary - the u (+1 more commits) - http://git.io/bDAR4A
18:52 < cxreg> isaacs: i opened a ticket for it
18:57 < faceleg|work> AlphaPinky: windows is going to be unhelpful every step of the way
18:58 < AlphaPinky> agreed.
18:58 < niggler> windows will actively sabotage your efforts
18:59 < AlphaPinky> niggler, for example?
18:59 < faceleg|work> Well; you'll go to install nodejs, but you'll endup with C# and visual studio
19:00 < AlphaPinky> faceleg|work, my issue is, users use windows. if wasnt for that I didnt have to use it.
19:00 < faceleg|work> AlphaPinky: can't you run linux/os x and have windows in a vm? 
19:00 < niggler> lol lots of modules use unix-specific features
19:00 < faceleg|work> I mean, where it belongs?
19:00 < faceleg|work> Yeah you're going to have a horrible time installing anything but the simplest modules
19:01 < faceleg|work> (I've had a horrible time in the past attempting to do so on co-workers disgusting windows machine)
19:01 < AlphaPinky> faceleg|work, I will use linux for development. Just set up a VPS for me.
19:02 < faceleg|work> done; connect on 123.123.123.123
19:02 < faceleg|work> user:user pass:secret
19:10 < SandorKrasna> hello everyone, anyone with backbonejs view event experience?
19:10 < SandorKrasna> im trying to bind an onended event of a video element but the callback is not being called
19:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:12 < MI6> joyent/libuv: piscisaureus created branch sblom-reviewme - http://git.io/8uGNcw
19:21 < faceleg|work> SandorKrasna: post link to broken code
19:22 < SolitudeX> Hello - If I come here everyday. Will you all learn to love me?
19:23 < codingkevin> are you loveable?
19:23 < SolitudeX> Are You Mr Kevin?
19:23 < codingkevin> are we playing a game?
19:23 <@mbalho> caught in a landslide no escape from reality
19:23 < SandorKrasna> Does anyone know why my ended event is not firing http://pastebin.com/fstydqjg
19:23  * codingkevin fines mbalho 3 points for messing it up
19:24 <@mbalho> but i got 5 points for referencing bohemian rhapsody
19:24 < codingkevin> from whom?
19:24 < codingkevin> who gave you these points?
19:24 <@mbalho> its a channel rule
19:24 < faceleg|work> I gave him the points
19:24 < SandorKrasna> the click event does work but ended never gets called 
19:24 < faceleg|work> I'm the points bank
19:25 <@mbalho> faceleg|work: can i cash in my points for a node.js knitted sweater?
19:25 < codingkevin> i'm calling shenanigans
19:26 < faceleg|work> mbalho: sure, a bargain at 10^100 points
19:26 <@mbalho> wow!
19:26 <@mbalho> not bad
19:26 < faceleg|work> I know, as I said: a bargain
19:27 < faceleg|work> *postage not included
19:30 < tpayne> what's backbone.js?
19:31 < havvy> http://lmgtfy.com/?q=backbone.js
19:31 < tpayne> looking for a human response, jerk :)
19:32 < SandorKrasna> backbone is a framework that runs on the client
19:32 < euoia> tpayne: it's a javascript utility belt
19:32 <@mbalho> tpayne: i bet they have an irc client
19:32 <@mbalho> tpayne: s/client/channel
19:32 < SandorKrasna> i couldn't find a backbone channel
19:32 < euoia> tpayne: oops actually I was thinking of underscore
19:32 < euoia> As SandorKrasna says, it's a client-side framework
19:33 < tpayne> so it's an express competitor?
19:33 < SandorKrasna> it lets you create Models and Views on the client
19:33 < SandorKrasna> It can be used with express, Im using it with express
19:33 < euoia> tpayne: isn't express a server-side framework?
19:33 < tpayne> oh, so it's like a moo tools replacement
19:33 < d48> euoia is correct. express is server side framework. Backone.js is a client-side framework
19:33 < SandorKrasna> http://pastebin.com/fstydqjg does anyone know why my event is not firing, i know the event is attached because i can inspect the element and see the event attached
19:34 < tpayne> what a misleading name name.. I thought it was node.js but for an API that communicates directly with a persistence layer, really easy
19:34 < tpayne> cool thanks
19:35 <@mbalho> backbone in the skeletal sense not the engineering sense
19:35 <@mbalho> well i guess its both
19:35 < d48> SandorKrasna: what's your html look like?
19:35 < MI6> joyent/libuv: Bert Belder sblom-reviewme * f89125e : win/tty: fix typo in color attributes enumeration - http://git.io/n4qTDQ
19:36 < bmatusiak> http://stackoverflow.com/q/15231713/1092965 - native mouse and keyboard bindings question
19:36 < Guest38088> Is there an prebuilt nodejs package for freebsd?
19:37 <@mbalho> Guest38088: heres the official binaries http://nodejs.org/dist/
19:37 < euoia> regarding backbone, I noticed that this game which was part of node knockout uses it http://somethingcoded.nko3.jitsu.com/
19:37 < euoia> there's a blog entry regarding its development, but it doesn't mention backbone
19:37 < euoia> http://somethingcoded.net/post/35723553608/disasteroids-how-we-built-a-real-time-gravity-based
19:37 < meeech> has any tried to use pahantomjs with mocha? trying to test an api, but there's a step where the user needs to go through and approve an action, so trying to work that into the test.
19:37 < SandorKrasna> client code here http://pastebin.com/3xHmNZuN
19:37 < meeech> open to suggestions
19:37 < SandorKrasna> d48 http://pastebin.com/3xHmNZuN
19:38 < aandy_> anyone using vim-powerline?
19:38 < ins0mnia> hey guys, need some help with express routes: given two routes /profile and /profile/:id and given app.get('/profile/:id',..) how can I get express to "trigger" the "/profile" cb first, followed by "/profile/:id"? (I'm rendering the templates dynamically and the intention is to inject the output of /profile/:id into /profile and req.send() the merged html)
19:38 < ins0mnia> sorry res.send()
19:38 < d48> SandorKrasna: taking a look
19:38 < euoia> aandy_: I tried it a few months ago, but I couldn't get it working with the fonts on Mac OS X
19:39 < context> "/profile(/:id)?" ? can you do that ? and check if :id was given in the action
19:39 < euoia> aandy_: you could ask in the #vim channel, it is generally quite active
19:39 < ins0mnia> context: I'm not in "control" of this, the use case is strictly /profile and /profile/:id...
19:39 < context> what
19:40 < SandorKrasna> full html here http://pastebin.com/wxcn5u7v
19:40 < context> im saying merge the two together if express will let you make a route like that (which i thought it did)
19:40 < ins0mnia> context: I can't use "/profile(/:id)?"
19:40 < aandy_> euoia: yes, i was having the same problem :) i haven't patched any myself yet, but managed to get it working using some consolas (yikes) font
19:40 < context> so you have no control over how it works, but you want to change how it works
19:40 < context> is this what im hearing
19:41 < ins0mnia> context: no, I'm asking if there's a different way of achieving that
19:41 < context> ins0mnia: give the "/profile" method a name, passing it req/res, and some how tell it not to end if it does
19:41 < d48> SandorKrasna: does your event fire if you remove 'ended' in event object and you just have 'interactive' function do console.log to test?
19:41 < context> so you 'call' profile() from profile_id() or whatever
19:42 < SandorKrasna> yes it does
19:42 < SandorKrasna> even with it not removed it fired
19:42 < d48> SandorKrasna: cool. so which event not firing do you have a question about?
19:43 < SandorKrasna> ended does not fire when the video ends
19:43 < aandy_> euoia: got it working on my end now. i'll try patching some fonts on osx and let you know how if i solve it :)
19:43 < euoia> aandy_: I used some patched fonts and for some reason it still wasn't working
19:44 < aandy_> as in chars looked weird, you didn't have the bar at all or just no colors?
19:44 < SandorKrasna> basically i have a click event and ended event attached to a video element 
19:44 < SandorKrasna> click fires but ended never fires when video has ended
19:44 < euoia> aandy_: IIRC it just looked weird and didn't align properly... In the end I decided I didn't really care about it
19:45 < aandy_> okay :)
19:45 < euoia> aandy_: the plugin that is, not the weirdness
19:45 < aandy_> not sure what i think of it yet either, just wanted to give it a go
19:45 < ins0mnia> context: I'm doing this right now more or less, I'm creating an array of possible paths, ['/profile/:id', '/profile'] then passing those to my renderer; what I'm struggling with is finding a way to ask express whether each path in the array is a "valid" as in one that matches a predefined one 
19:46 < d48> in browser you're testing in, see if element has this property: videoId.hasOwnProperty('onended')
19:46 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:47 < SandorKrasna> will do
19:48 < SandorKrasna> thats a negative d48
19:49 < d48> check another browser and see if that returns something
19:49 < d48> it may be browser specific
19:50 < SandorKrasna> yeah did it for click it doesnt return anything even though click event is still firing
19:50 < SandorKrasna> hasOwnProperty is not the right test
19:52 < d48> sorry
19:53 < d48> should be videoId.hasOwnProperty('ended')
19:53 < d48> just did a check and it worked via Chrome
19:53 < d48> for this page http://www.html5rocks.com/en/tutorials/video/basics/
19:53 < d48> $('video')[0].hasOwnProperty('ended')
19:53 < d48> returned true
19:53 < d48> just trying to see if browser you have code on supports it
19:54 < SandorKrasna> im on chrome
19:54 < SandorKrasna> returns true 
19:55 < SandorKrasna> $(".clientplayer")[0].hasOwnProperty('ended');
19:55 < SandorKrasna> so that works
19:55 < d48> SandorKrasna: okay cool, so you can rule that out
19:55 < d48> good
19:55 < SandorKrasna> its something with backbone view events
19:55 < SandorKrasna> since the click works 
19:55 < d48> does videoended console.log fire?
19:56 < SandorKrasna> nope
19:56 < SandorKrasna> my function is not firing 
19:56 < d48> k
19:58 < d48> SandorKrasna: see if you can manually add event listener to test as well 
19:58 < d48> videoId.addEventListener('ended', videoended)
19:58 < d48> see if it will fire then. 
19:59 < SandorKrasna> in chrome developer console?
19:59 < d48> SandorKrasna: sure, you can do from console
19:59 < SandorKrasna> its saying videoended is not defined
20:00 < SandorKrasna> that function is local 
20:00 < lz> videoended is a callback function, you need to define it before you listen to the event or use an anonymous function
20:00 < d48> yes, what lz said
20:01 < d48> or if PlayerView on global scope, see if PlayerView.videoended available
20:01 < d48> to add event listener to. going to lunch, brb
20:01 < JohnMcLear> released etherpad 1.2.8 for anyone who cares.  /promotion
20:02 -!- mode/#Node.js [+o sblom] by ChanServ
20:03 < niggler> you mean ether pad lite, right JohnMcLear ?
20:04 < JohnMcLear> we dropped the lite bit
20:04 < JohnMcLear> so now it's just plain ol "Etherpad"
20:05 < JohnMcLear> http://blog.etherpad.org/2012/02/01/getting-a-name-wrong/
20:07 < SandorKrasna> i was able to bind ended with this $('.clientplayer').bind("ended",function(){alert('t');})
20:10 < bb6xt> hello all
20:10 < evantill> hi all
20:11 < niggler> !hello @ evantill 
20:11 < evantill> question from a newbie
20:11 < evantill> I am writting a plugin for brunch
20:11 < evantill> brunch has a "sub module" logger
20:11 < bb6xt> pls could anyone explain to me how to use the csrf middleware, i am quite new to node/express
20:12 < evantill> how can use it with require  
20:12 < evantill> something like requi
20:12 < evantill> require('brunch/logger' ?
20:14 < evantill> join /#chaplinjs
20:14 < evantill> sorry
20:14 < deoxxa> bb6xt: #express might be more useful for you
20:15 < bb6xt> @deoxxa: Thanks dude!
20:15 < deoxxa> :D
20:16 < evantill> no one can help me for using a "submodule" of an other node module ?
20:16 < draginx> mscdex: nice job on the mariadb port :) Any idea why PHP is generally faster though? :/
20:17 < faceleg|work> evantill: have a look at the code in the parent module, to see how they're requiring it?
20:17 < deoxxa> evantill: you might just be able to do require("something/somethingelse") depending on how their files are set up
20:17 < deoxxa> evantill: or you might have to do something like require("something").somethingelse
20:17 < deoxxa> evantill: really depends on how the code is structured
20:18 < evantill> deoxxa: I will check thank you
20:21 < evantill> faceleg|work: logger is defined here https://github.com/brunch/brunch/blob/master/src/logger.coffee
20:21 < diogogmt> draginx: is mariadb stable enough to replace mysql? should new projects go with mariadb from the get go?
20:21 < niggler> draginx where is php faster?
20:21 < niggler> diogogmt mariadb is mysql
20:21 < evantill> module.exports = Object.seal logger
20:21 < evantill> and export like this : module.exports = Object.seal logger
20:21 < draginx> diogogmt: i would think so
20:21 < draginx> niggler: on his github page (hold on)
20:21 < niggler> *a fork
20:21 < diogogmt> niggler: so is it backwards compatible with older versions of mysql?
20:22 < draginx> niggler: http://mscdex.github.com/node-mysql-benchmarks/
20:22 < niggler> the version numbers don't line up perfectly if that's what you are asking
20:23 < niggler> but unless you are doing something really exotic using some bleeding edge feature of mysql, you can expect mariadb to be the same
20:23 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:32 < amy0> Hola
20:33 < amy0> Is there someone new in node.js?
20:34 < amy0> I would like to learn js server side, where csn i start for?
20:34 < havvy> amy0: There's a video that people point to. I heard its linked on the front page of the Nodejs website.
20:35 < amy0> Thanks havvy
20:37 < niggler> woah woah havvy you have a youtube link?
20:37 < havvy> It's Ryan Dhal's introductory video. I've not actually watched it.
20:41 < SandorKrasna> does ryan visit this channel
20:43 < draginx> im pretty sure ryan /internetquit
20:44 < bingomanatee> I've heard that Ryan visits trollers at home and smothers them with their own body fat. 
20:44 < faceleg|work> evantill: ugh coffee, sorry can' thelp you
20:48 < evantill> and in javascript ? not specific to coffee ?
20:53 < styol> Would anyone recommend monit over forever or any other approach for keeping node instances running? In particular curious about that aspect combined with running the instances after a server is (re)booted. Utilizing ubuntu and seeing a lot of things recommending upstart/init.d + monit. Any feedback would be greatly appreciated.
20:55 < styol> While utilizing forever it was easy enough to create a bash script to execute the required commands to run various instances with forever upon boot while using rc.local, but it is running forever as root and I've yet to work around that but it begs the question of a better solution
20:57 < RLa> styol, you can always use su <user> -c 'command'
20:57 < styol> RLa: aha, command at the end.. that was the problem I was having with that approach :) thanks
20:59 < niggler> styol sudo
20:59 < styol> niggler: sudo makes forever start the instances as root
20:59 < niggler> sudo also takes -u
21:00 < niggler> and the advantage is that the user only needs to type his password (and you have more fine-grained control via /etc/sudoers)
21:00 < styol> niggler: ah, interesting.. but upon boot there wouldn't be a user to type in a password
21:01 < evantill> faceleg|work: in brunch logger is required using require('./logger') what is the meaning of the ./ ?
21:02 < niggler> hmm yeah in that case su -l is better
21:05 < rcaskey> any convenience libraries I should look at for serializing objects with circular dependencies?
21:05 < draginx> styol: sudo -u <user. will work too
21:06 < draginx> oh sorry didnt scroll all the way down :)
21:06 < draginx> late to thep arty
21:06 < styol> niggler: seems that could work also indeed, though I did just get the other approach working.. /etc/rc.local has a line in it like `su theUser -c /home/theUser/startup.sh` and startup.sh has stuff in it like `cd /home/theUser/app/; forever start app.js`
21:07 < styol> draginx: no worries, thanks :)
21:07 < jn> what's the canonical way to download and store data with a module? i.e if i have a listing of plugins that ships with my module and want to keep it updated
21:07 < jn> without having to publish a new version on npm
21:07 < faceleg|work> evantill: ./ means "this directory"
21:07 < faceleg|work> ../ means "back one directory"
21:07 < faceleg|work> so ./file.txt
21:08 < faceleg|work> would refer to a file named file.txt in the current directory, or the directory that the script containing this code is in
21:12 < samholmes> Would someone take a look at my dilema: https://gist.github.com/samholmes/5094282
21:12 < samholmes> Please? :)
21:16 < Jamiltz> Ok so I have a weird question. node_modules/ is in my gitignore file. However I changed the source code of one module. Is there a way in git not to ignore a folder contained in a folder its ignoring :|
21:18 < RLa> Jamiltz, is the module in github?
21:19 < Jamiltz> no
21:19 < RLa> i think the correct thing would be to fork the module, make changes in your fork, and then add it as git dependency
21:19 < context> s/in/on/
21:19 < context> jamiltz: git add -f
21:19 < context> jamiltz: and keep node_modules in ignore
21:19 < RLa> hm, i guess that works too :)
21:20 < Jamiltz> ok i see thanks
21:20 < context> though i would look at getting your updates pulled upstream
21:21 < samholmes> substack: Hey, could I ask you a question on DNode if you're not too busy?
21:21 < HyperEnergy> Hey all.
21:24 < HyperEnergy> I am fooling with node on windows, I am trying to compile a handlebar template using the handlebars compiler.  However after I do this command: "test demo.handlebars -f demo.js", three dots appear... and nothing seems to happen.  Am I missing something to run this?
21:26 < samholmes> If I were to use DNode across multiple scripts, I would need to modularize a script that makes the DNode connection, and then use that module in other scripts. But how would I know when the connection is ready? I would need those other scripts to listen to an event when there is connection. But then what if the connection is lost?.. There's a lot involved in this.
21:27 < samholmes> DNode works like this dnode(function(remote){ /* use remote object here */ }). But how do I make other scripts use the remote object? Should I just repeat the whole dnode() bit in other scripts hand have repeated connections?
21:28 < faceleg|work> HyperEnergy: you're missing a *nix os
21:28 < substack> samholmes: callbacks
21:28 < samholmes> substack: Could you be a little less vague? Sorry. :P
21:28 < deoxxa> hey substack, you inspired me to make my own RPC thing
21:29 < deoxxa> hooray for ideas!
21:29 < samholmes> deoxxa: I'm interested, show me?
21:29 < deoxxa> https://github.com/deoxxa/pillion
21:30 < abe> any one know if there are any known issues with the 0.8.9 that makes using a 6. version worth while
21:30 < deoxxa> abe: 0.8.9 isn't the latest stable version - 0.8.21 is
21:31 < Domenic_> abe: the known issue with 0.8.9 is that it's 12 versions out of date
21:31 < abe> bugger
21:31 < abe> thx
21:31 < abe> thats prolly it
21:31 < abe> cheers guys
21:31 < samholmes> burro?
21:32 < HyperEnergy> faceleg|work: what do you mean?
21:32 < deoxxa> samholmes: length-prefixed json serialisation thing
21:32 < HyperEnergy> faceleg|work: Are you saying it wont work on windows?
21:32 < samholmes> deoxxa: oh
21:33 < samholmes> Too much over my head. x_x
21:33 < samholmes> substack: Callbacks to what?
21:33 < deoxxa> well that's why burro has such an easy API :>
21:33 < deoxxa> var s = burro.wrap(net.connect(12345));
21:35 < samholmes> https://github.com/naomik/burro
21:35 < samholmes> stream.Transform?
21:35 < samholmes> stream.PassThrough?
21:36 < deoxxa> yep, node 0.9.x
21:36 < deoxxa> brand new, baby
21:36 < samholmes> Oh
21:36 < samholmes> I couldn't find the docs on tis
21:36 < daekano> omg deoxxa in the wild
21:36  * deoxxa stalks in the long grass
21:37 < samholmes> deoxxa: How do you know about these?
21:37 < daekano> deoxxa knows all
21:37 < samholmes> Do you just follow #nodejs?
21:37 < othiym23> or he follows the joyent/node repo
21:37 < samholmes> @nodejs
21:37 < othiym23> always a good source of mirth
21:37 < azylman> It's come up in this channel a lot
21:37 < deoxxa> samholmes: http://nodejs.org/docs/v0.9.10/api/all.html and a few days worth of messing about with the APIs
21:37 < azylman> And isaacs has given lots of talks on it
21:38 < deoxxa> but how i found out about it? yeah, just being in here
21:38 < samholmes> I see
21:38 < samholmes> I remember when I use to visit Ajaxian.com a lot to keep up with new browser stuff
21:39 < samholmes> But that site died and now I don't know what site to visit for goodies
21:39 < deoxxa> protip: the stream.Readable api becomes a lot clearer if you mentally rename "callback" to "respond"
21:39 < faceleg|work> HyperEnergy: windows is just pretty horrible to work with when attempting to use node
21:40 < othiym23> Windows is fine for Node
21:40 < samholmes> othiym23: I don't think so
21:40 < JohnMcLear> othiym23: paths are an issue
21:41 < samholmes> othiym23: I'm so much more happy with Mac when doing Node or unixy things
21:41 < othiym23> JohnMcLear: example?
21:41 < JohnMcLear> othiym23: ../../ in a path wont work on windows afaik
21:41 < othiym23> sure it will
21:41 < othiym23> try it ;)
21:41 < samholmes> substack: CALLBACKS?!@ XD
21:42 < JohnMcLear> I can't remember exactly but afaik I have lots of issues w/ windows paths w/ require
21:42 < othiym23> samholmes: the tooling around Node sucks on Windows, and a lot of us (including me) assume that we have tools like gmake available when we're writing packaging, but Node itself has had a fair amount of effort put into it to make it Windows friendly
21:43 < havvy> The tooling around anything not CLR sucks on Windows. ;)
21:43 < deoxxa> node itself runs great on windows
21:43 < deoxxa> stuff written *for* node, not so much
21:43 < josieliang> I am looking for mysql driver for nodejs, I find the module mysql and db-mysql, wonder if there  is more out of there and which one I should use
21:43 < deoxxa> josieliang: `npm install mysql' - done
21:43 < samholmes> othiym23: Right. But it's not fair to say that Node.js is fine on Windows when it leads to impress that Node.js and it's tooling is fine.
21:43 < samholmes> othiym23: idk
21:43 < josieliang> yes, I did that, that is for the mysql module
21:44 < samholmes> I just realized that I had pasted the wrong file into my gist: https://gist.github.com/samholmes/5094282
21:44 < josieliang> I also installed db-mysql 'npm install db-mysql'
21:44 < mscdex> josieliang: there's also the one i wrote: mariasql
21:44 < deoxxa> josieliang: https://github.com/felixge/node-mysql << that's what you get when you install the `mysql' module
21:44 < josieliang> I see
21:45 < josieliang> so why there are so many of them? 
21:45 < deoxxa> well a lot of them sit on top of felixge's driver
21:45 < mscdex> draginx: i'm not sure, i haven't really researched it
21:45 < draginx> yeah that seems rather odd
21:45 < mscdex> josieliang: the one i wrote uses mariadb's non-blocking C library
21:46 < josieliang> wonder what type of user cases different mysql drivers serve
21:46 < draginx> considering v8 is faster than php and im assuming ur lib is non blocking
21:46 < draginx> yeah
21:46 < mscdex> josieliang: which also works with mysql
21:46 < josieliang> right, 
21:46 < josieliang> so the base module is the node-mysql using 'npm install mysql'
21:46 < josieliang> then, I was in the http://nodejsdb.org/
21:47 < josieliang> that one is 'npm install db-mysql'
21:47 < abe> is forever dependent on apache?
21:47 < faceleg|work> samholmes: othiym23 I had unholy trouble compiling C++ modules for node in windows
21:47 < faceleg|work> whereas in *nix it was a breeze
21:47 < CoverSlide> why would forever have anything to do with apache>
21:47 < abe> CoverSlide: thx...was hoping not
21:50 < josieliang> Hi mscdex:  so the mysql drive you write is designed to use a different c library
21:50 < josieliang> but no other reason?
21:50 < mscdex> draginx: i'd guess maybe php somehow has a lower script->c++ barrier?
21:50 < othiym23> faceleg|work: gyp's designed to make that easier, but that's a cross-platform issue, and not really Windows' fault
21:51 < draginx> mscdex: im pretty sure it does, libuv is pretty resource hungry from what ive heard
21:51 < othiym23> I'm no Windows apologist, just somebody who's been surprised about how easy it's been for me to support my product on Windows
21:51 < faceleg|work> othiym23: my exp comes from the node-waf days
21:51 < mscdex> josieliang: the issue is that the regular libmysqlclient only offers blocking methods. the client library distributed with mariadb contains non-blocking counterparts, and that is what i use
21:52 < mscdex> josieliang: so if you use the blocking libmysqlclient methods and you don't want to block, you have to run them in a thread. mariadb's non-blocking functions do not use threads at all
21:52 < josieliang> I see, the libmysqlclient is used by db-mysql
21:53 < josieliang> mscdex:  Thanks
21:53 < SandorKrasna> Hey guys, im still having issues with backbone onended event not binding to video ended
21:55 < d48> SandorKrasna: also check out #documentcloud 
21:55 < d48> they'll definitely be able to spot what may be the issue
21:56 < SandorKrasna> ok thank
21:56 < echo> #document-cloud has much more activity, not to be rude, just trying to help.
21:58 < josieliang> Hi mscdex: I just did ' npm install mariasql', got some errors
22:02 < HyperEnergy> faceleg|work: Yeah, I understand that, but it seems like it works for some on Windows, just curious if I am doing something wrong...
22:03 < josieliang> mscdex: I wonder if you could have a quick peek at this: https://gist.github.com/5094712.git
22:04 < faceleg|work> HyperEnergy: I'm just biased against, take my opinions on Win with grain of salt, I intentionally avoid it
22:05 < HyperEnergy> Yeah, unfortunately thats my environment I have to work with currently...
22:05 < EyePulp> argh.  isn't there an elegant way to tie together sockets and http sessions?   using sockjs, express, redis (as my backend to keep state/sessions).   I have a dumb way where I send the session ID (from the express cookie) back across the socket, and use that, but it seemsâ€¦ insecure and/or inelegant.  There has to be a smarter way.
22:05 < faceleg|work> HyperEnergy: windows 8? my colleague found out that w/o internet he can't login to his machine, lol...
22:09 < cris_> Trying to proxy a webrtc server over nginx 1.3, anyone managed this?
22:10 < cris_> My NGINX conf looks like this
22:11 < cris_> server {
22:11 < cris_>   listen 80;
22:11 < cris_>   server_name  test.myserver.com;
22:11 < cris_>   location / { 
22:11 < cris_>     proxy_pass  http://127.0.0.1:8001; 
22:11 < cris_>     proxy_http_version 1.1;
22:11 < cris_>     proxy_set_header Upgrade $http_upgrade;
22:11 < cris_>     proxy_set_header Connection "upgrade";
22:11 < cris_>   }
22:11 < cris_> }
22:11 < niggler> woah woah no pasting
22:12 < st_luke> isaacs: issue triage ftw
22:12 <@isaacs> st_luke: :)
22:12 < cris_> Sorry
22:13 < niggler> isaacs is purr running?
22:13 < niggler> !paste @ cris_
22:13 <@isaacs> niggler: dunno
22:13 <@isaacs> niggler: ask elliottcable 
22:13 <@isaacs> purr: hi
22:13  * isaacs <3 purr
22:13 <@isaacs> doesn't look like it
22:13 -!- purr was kicked from #Node.js by isaacs [purr]
22:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:14  * niggler slaps purr
22:14 < niggler> bad kitty!
22:18 < mscdex> josieliang: seems like you have a funky libtool installation somewhere possibly? what does `which libtool` say?
22:19 < josieliang> mscdex: I got /Applications/MAMP/Library/bin/libtool
22:19 < mscdex> josieliang: make sure that /usr/bin/libtool gets seen first instead by adjusting your $PATH
22:20 < josieliang> mscdex: I see, let me try
22:23 < MI6> joyent/node: Nathan Rajlich master * dd6432d : process: invoke EventEmitter on `process`  This properly sets the `_maxLi - http://git.io/ozu18Q
22:24 < draginx> cris_: what exact version do u have?
22:24 < draginx> because 1.13 does not support websockets
22:24 < cris_> nginx version: nginx/1.3.13
22:25 < cris_> it's connecting and getting a socket - I'm messing with the demo from here https://github.com/webRTC/webrtc.io-demo/tree/master/site
22:27 < cris_> It's ok, go it working, had an older version of the client which worked on localhost, but not remote
22:27 < HyperEnergy> node on windows, I am trying to compile a handlebar template using the handlebars compiler.  However after I do this command: "test demo.handlebars -f demo.js", three dots appear... and nothing seems to happen.  Am I missing something to run this?
22:27 < HyperEnergy> faceleg|work: Actually, just windows 7
22:29 < Almindor> hey
22:29 < Almindor> is it possible to have different routes based on subdomain?
22:29 < Almindor> e.g.: sub1.domain.net/api/call would be different from sub2.domain.net/api/call
22:30 < Almindor> currently using express for routing
22:30 < josieliang> mscdex: thanks.  change the libtool worked.  I have installed mariasql, the installation produced a couple of warnings. Do you want them?
22:30 < mscdex> i think i saw them in the log you provided, i wouldn't worry about them
22:30 < josieliang> mscdex:  OK. thanks very much
22:35 < d48> Almindor: look into this lib to manage the subdomain routing in express https://github.com/WilsonPage/express-subdomain-handler
22:47 < MI6> joyent/node: Timothy J Fontaine master * f9ba9f7 : build: define nightly tag external to build system (+5 more commits) - http://git.io/bLTeoQ
22:54 < Eigen_> https://gist.github.com/anonymous/5095089
22:54 < Eigen_> can I not do this?
22:55 < elis2013> guys/girls: before I go and make a fool out of myself posting it online, can you tell me what you think of this:
22:55 < elis2013> https://github.com/elis/desckit/wiki/hiring
22:56 < euoia> elis2013: "Want to work on Desckit"
22:56 < euoia> I don't know what Desckit is
22:56 < elis2013> makes sense
22:56 < euoia> so it's an odd thing to start with
22:56 < elis2013> well, it's in a repository
22:56 < elis2013> you can look around
22:57 < elis2013> I guess it's part of it all
22:57 < euoia> okay, so you are targeting existing users
22:57 < deoxxa> HI EVERYBODY! i made a thing: https://github.com/deoxxa/asciitable
22:57 < elis2013> (note that this is not your average hiring post..)
22:57 < elis2013> nice deoxxa!!
22:57 < euoia> elis2013: what I mean is, you're not sending this out to people who wouldn't know about it
22:57 < elis2013> useful as hell too!
22:58 < RLa> "full featured smart glass" <- yay
22:58 < d48> deoxxa that looks awesome
22:58 < niggler> deoxxa you need to put +'s 
22:59 < Gambit--> euoia: probably want to start with a "wtf desckit is" at the top.  Also, get your own domain.
22:59 < niggler> *in the corners
22:59 < deoxxa> niggler: oh, good idea
22:59 < Gambit--> whups
22:59 < Gambit--> elis2013 I mean.
22:59 < elis2013> got the domain
22:59 < elis2013> i'm not sure about publishing it just yet
22:59 < inspiron> does anyone use webstorm ide
23:00 < elis2013> and the idea is you kinda have to explore
23:00 < elis2013> I know it's wanky
23:00 < RLa> inspiron, i used 2 weeks ago, then switched away
23:00 < elis2013> but that's why i'm running it past here before I go full steam..
23:00 < d48> inspiron, i do a little for node.js debugging
23:01 < inspiron> do you know how to disable the blue pop ups or any of the popups when hovering the cursor over code. Its so annoying
23:01 < inspiron> I disabled all the "intentions" but the help topics still pop up
23:01 < niggler> also deoxxa can you make a csv2tbl bin?
23:02 < d48> inspiron, don't know
23:02 < deoxxa> niggler: i could!
23:02 < Eigen_> what is the type
23:02 < RLa> inspiron, you must disable them for each project manually, no global conf
23:02 < elis2013> gambit and others, thanks for the commnets, very helpful!! :)
23:02 < Eigen_> of  req.query
23:02 < Eigen_> is it a string?
23:02 < RLa> inspiron, that was the thing i finally got sick of
23:02 < euoia> elis2013: "an advanced code editing" -> "an advanced code editor"
23:03 < euoia> elis2013: I think that entire paragraph runs on a bit
23:03 < RLa> inspiron, i never got help bubbles
23:03 < RLa> inspiron, but i always got "configure your node.js sources blah blah"
23:03 < euoia> elis2013: the next one too - too many clauses separated by commas imo
23:03 < RLa> and "git root not registered"
23:04 < elis2013> being told the same thing in the bitcoin chat
23:04 < euoia> elis2013: "Still think Desckit is great?" -> I find this a bit presumptuous
23:04 < elis2013> and bad sounding
23:04 < elis2013> yes
23:05 < samholmes> what made websockets insecure previously?
23:05 < RLa> "full featured smart glass" <- just put it on top, everyone will read further to get what the heck it is
23:09 < deoxxa> niggler: change pushed!
23:09 < elis2013> the domain forwarding hasn't kicked in yet
23:09 < elis2013> so I'm using my gmail address
23:10 < niggler> you didn't update read me deoxxa 
23:10 < d48> deoxxa, looking sweet
23:10 < deoxxa> niggler: refresh
23:11 < niggler> oh you didn't publish the update lol
23:11 < Guest81816> hey am currently busy but before I forget it, and since I am a curiouse guy, is this creating a closure/memoryleak ? http://jsfiddle.net/LMBfF/
23:11 < niggler> yeah looks cool
23:12 < OliverJAsh> can anyone recommend an open source tool for parsing web content such as how readability works? given a url, i want it to return the stripped back content. are there any existing projects for this out there?
23:13 < elis2013> euoia, I've added a small clause at the end
23:13 < elis2013> any comments on that?
23:13 <@mbalho> OliverJAsh: look up boilerpipe
23:13 < havvy> OliverJAsh: There's a browser extension for Firefox.
23:13 <@mbalho> OliverJAsh: and write a node module for it :D
23:13 < elis2013> https://github.com/elis/desckit/wiki/hiring
23:13 < elis2013> (just to elimate scrolling needs)
23:14 < niggler> deoxxa now you need a utility command (call it csv2tbl) that reads CSV on stdin and generates the table output
23:14 < OliverJAsh> Oh godâ€¦ haha, cheers mbalho 
23:14 < niggler> and add it to the bin
23:14 < euoia> elis2013: yeah I guess it's worth putting that at the end... although if the reader has made it that far I'd assume they would realise it is not your regular hiring post
23:14 < deoxxa> niggler: i've been thinking about how to do it properly with a stream, and the only way i can think of to get it perfectly right is to do two runs through the stream
23:14 < niggler> you don't need to do it as a stream for now
23:14 < euoia> elis2013: I do like the extra attempt to recruit :)
23:15 < deoxxa> also, i just made the + thing optional, because i got mixed reports about whether or not it looks better
23:15 < elis2013> heh
23:15 < niggler> just drain the stream and generate the output
23:16 < niggler> ultimately i want to connect it with https://github.com/niggler/js-xlsx and generate readable table output from excel files
23:16 < deoxxa> niggler: yeah, that's the easiest way to do it
23:16 < deoxxa> ha
23:16 < deoxxa> haha
23:16 < deoxxa> that's awesome
23:18 < elis2013> thanks a bunch euoia!! :)
23:18 < euoia> elis2013: no worries
23:18 < elis2013> veyr kind of you, that proof reading you did and the comments you gave
23:19 < Guest81816> is there a tool for closuredetection?
23:19 < OliverJAsh> where does one begin writing a node wrapper for a java library when one knows no java? ;P
23:19 < niggler> can you rewrite the library OliverJAsh ?
23:20 < RLa> OliverJAsh, interesting, i'm just trying to get some old java crap working
23:21 < OliverJAsh> niggler: not sure, haha, i just know that there's a text extractor called boilerplate, written in java, and i need to port it to node somehow. guess i have a bit of learning to do!
23:21 < RLa> god damn what a folder nest a java project is
23:21 < elis2013> that's why people love PHP
23:21 < elis2013> at least in it's purest form
23:22 < daekano> please don't use the J word.
23:22 < elis2013> and also nodejs
23:22 < niggler> wtf is there someone with nick also logged in?
23:22 < elis2013> daekano, the entire word is inside the name of the channel, node.JAVAscript
23:22 < elis2013> :P
23:22 < niggler> OliverJAsh you could write a command line utility and just call it with child_process
23:24 < OliverJAsh> i'm a young/beginner programmerâ€¦ i've never done java before. can anyone tell me, why do people hate it?
23:24 < RLa> niggler, since when is java command line friendly?
23:24 < RLa> you need to do soap and wsdl and hardcore xml service
23:24 < niggler> java -jar wtf.jar
23:25 < euoia> OliverJAsh: It can be quite a lot of work even to do simple things in Java
23:25 < niggler> i aliased `closure` on my macs to `java -jar /usr/bin/compiler.jar`
23:26 < euoia> OliverJAsh: It's also heavily associated with enterprise applications; most people writing enterprise applications aren't writing code for fun
23:26 < niggler> euoia he has a java thing already and can either rewrite in JS or find a way to salvage the JS
23:26 < niggler> *salvage the java
23:26 < euoia> niggler: I was trying to provide some justification as to why people might hate Java
23:26 < niggler> ah ok
23:27 < euoia> OliverJAsh: But... Minecraft is written in Java :D
23:27 < faceleg|work> people love PHP?
23:27 < niggler> OliverJAsh not only is java incredibly verbose, it tries to force an object-based pattern that isn't natural in many contexts
23:27 < niggler> but there are a boatload of people who see java as a hammer and hit every problem with it
23:27 < faceleg|work> OliverJAsh: people hate java because in the early days it was slow, so it got a really bad rep 
23:27 < niggler> it *is* slow
23:28 < faceleg|work> also it's enterprisey, which makes some people hate automatically
23:28 < faceleg|work> yeah it is
23:28 < niggler> and on mac, every other update breaks
23:28 < faceleg|work> once I wrote a java app that read a massive wikipedia dump into a db
23:28 < faceleg|work> it literally would never finish
23:28 < faceleg|work> rewrite in perl and that code finished in 10's of minutes
23:28 < niggler> hammer
23:28 < niggler> perl is best for text stuff
23:28 < OliverJAsh> haha, very interesting. thanks for the facts all. it seems to be a highly sought after skill, must be enterprise like you sayâ€¦
23:28 < faceleg|work> yeah
23:29 < faceleg|work> java is also generally used for instruction at university
23:29 < faceleg|work> at least at mine it was from 2nd year onwards
23:29 < niggler> which is sad
23:29 < faceleg|work> it's like the profs are absolutely in love with it
23:29 < niggler> I'm told that APCSAB switched to java
23:29 < faceleg|work> even more sad, MS has wooed them all towards C# now
23:29 < niggler> and then they got rid of it
23:29 < faceleg|work> I'm told by recuiters that there ar ea bunch of enterprisey places 
23:29 < faceleg|work> moving off java
23:29 < niggler> c# is solid
23:30 < faceleg|work> into node, ruby etc whatever is suitable for their domain
23:30 < niggler> it suffers from feature creep
23:30 < faceleg|work> yea like poop is solid
23:30 < niggler> but as an environment, .NET CLR isn't the worst thing
23:30 < niggler> iron python, for example, has its usecases
23:30 < faceleg|work> only xp I've had with .net is ye olde .net, back in 2006
23:30 < faceleg|work> I was horribler than now @ programming so I found it horrible
23:31 < faceleg|work> OliverJAsh: java skills are sought after
23:31 < niggler> LINQ is crap
23:31 < niggler> if you are going to learn a language
23:31 < faceleg|work> but what I hear is that enterprisey jobs are soul sucking demons that will leave you hating programming
23:31 < faceleg|work> learn chinese
23:31 < niggler> focus on something that will be strong 10 years from now
23:31 < faceleg|work> yeah
23:31 < faceleg|work> for example
23:31 < faceleg|work> node
23:31 < faceleg|work> js
23:31 < faceleg|work> or FORTRAN
23:32 < faceleg|work> COBOL you know
23:32 < niggler> i still use fortran
23:32 < faceleg|work> those
23:32 < niggler> dont hate on fortran
23:32 < faceleg|work> no you don't 
23:32 < faceleg|work> take that back
23:32 < faceleg|work> I've never even seen FORTRAN code
23:32  * niggler <3 fortran
23:32 < niggler> g77 bitch
23:32 < faceleg|work> goto: getout
23:32 < niggler> most versions of lapack are merely f2c run on fortran
23:33 < faceleg|work> also oracle acquired Java, therefore it sucks
23:33 < faceleg|work> it went from easy to install on linux
23:33 < faceleg|work> to hoopland
23:34 < faceleg|lunch> OliverJAsh: are you new to programming
23:34 < faceleg|lunch> ?
23:34 < OliverJAsh> faceleg|lunch: i come from a web development background. i'm 20 and i've been doing front-end engineering for quite sometime (mv* on the client-side), now i'm moving into the back-end with node.
23:35 < OliverJAsh> i've never done software engineering outside of web apps.
23:35 < faceleg|lunch> Learn Cocoa (Objective C)
23:36 < faceleg|lunch> if you want something completely different that will make you think
23:36 < faceleg|lunch> assuming you have a mac of course
23:36 < faceleg|lunch> you can use it to make native iOS / OS X apps, usually those consume JSON which you can easily generate with node.js
23:36 < euoia> OliverJAsh: Not sure what OS you are running, but your life will be easier tinkering with node on a Mac or using Linux than if you run Windows
23:36 < faceleg|lunch> yes please for the love of god, if you have a windows machine dual boot and do dev in linux, save yourself years of life
23:37 < OliverJAsh> faceleg|lunch: euoia: i'm an OS X user, and i definitely agree :) made the switch early in my career, fortunately
23:37 < faceleg|lunch> OliverJAsh: consider learning some OBjC then
23:38 < OliverJAsh> faceleg|lunch: funny you should mention that, i'm currently building a REST API in node, and if this project goes well then i may end up creating an iOS app on top of the API i'm building.
23:38 < amurdaca> for ios app i usually use phonegap btw..
23:38 < faceleg|lunch> it's going to be very diff to waht you know, I assume, it's good to learn a wide range of languages, not focus on only one "type"
23:38 < amurdaca> it's much better you can "target" every smartphone
23:38 < OliverJAsh> i do wonder what languages will be the most prominent in my future career. javascript on the client is getting quite bigâ€¦
23:38 < faceleg|lunch> amurdaca: I'm not saying you can't use that, I'm talking about the learning
23:38 < faceleg|lunch> JS IMHO
23:39 < faceleg|lunch> I was floored when I realised the benefits of Node on the server
23:39 < niggler> serious question: if there were a modern BASIC would you consider using it?
23:39 < faceleg|lunch> and cognitively, I think that using JS sever / client is going to remove a lot of context switching
23:39 < mscdex> niggler: there is a modern BASIC
23:39 < OliverJAsh> amurdaca: yes, i would probably go straight to phonegap.
23:39 < faceleg|lunch> never touched BASIC so likely no unless I had to
23:39 < niggler> link me mscdex 
23:39 < niggler> unless you mean js
23:39 < mscdex> niggler: http://en.wikipedia.org/wiki/Qb64
23:40 < amurdaca> OliverJAsh, yup with your knowledge of front-end dev you can easly build almost everything with phonegap
23:40 < OliverJAsh> is that where software development is heading? to javascript? it's running on just about every device.
23:40 < niggler> holy crap mscdex 
23:41 < amurdaca> never seen a most cross-platform thibg OliverJAsh think jquery
23:41 < niggler> fuck jquery
23:41 < amurdaca> *thing
23:41 < amurdaca> that's actually js..simplified why fuck niggler ?
23:41 < base698> OliverJAsh: I hope not.  When all you have is a hammer....  There is a lot you can't learn unless you get outside your comfort zone.  * Disclaimer I make most of my income from JS *
23:42 < mscdex> node.bas!
23:43 < niggler> query solves some problems very elegantly, but many developers use it for things that don't actually need jquery
23:44 < styol> Hola. I've got a max number / ceiling and need to perform a series of asynchronous functions on each number, some passing from async function 1 to async function 2 based on a truthy scenario and I ultimately need to create an object of other objects from the results. It seems that async.whilst is the correct call or amiwrong?
23:44 < niggler> mscdex i was thinking a compiler from basic to js
23:44 < OliverJAsh> niggler: yup, you're right! fortunately front-end development is getting more modular, you can build your own version of jquery with just the modules you need, and that's just the start.
23:45 < havvy> s/front-end development/all development
23:45 < mscdex> niggler: i'm sure there are some out there now
23:46 < mscdex> niggler: here's one: https://github.com/danielflower/JSBasic
23:46 < OliverJAsh> havvy: ofc, just traditionally front-end development has been terrible for its modularity, or lack thereof.
23:47 < AlphaPinky> which IDE is best for working with Node.JS? Atm my Node server is a remote linux box. And IÂ´m looking for an easy way to update code there without having to use SSH/Terminal/Vim.
23:47 < AlphaPinky> *is in
23:47 < niggler> lol its a c# project mscdex 
23:47 < mscdex> niggler: it was the first hit on google ;-)
23:47 < havvy> AlphaPinky: I use Sublime Text personally.
23:47 < AlphaPinky> havvy, can you edit source code remotely?
23:48 < havvy> There's probably some plugin for allowing that.
23:48 < euoia> AlphaPinky: You may be able to use sshfs to mount the remote filesystem
23:49 < AlphaPinky> IÂ´ll google this Â¨sshfsÂ¨. Thanks. my notebook runs Win8.
23:49 < euoia> AlphaPinky: Otherwise you could write a shell script to rsync your project directory to the remote server, and create a keybinding for it in - or even have it run automatically when any buffer is saved
23:51 < euoia> AlphaPinky: there is also this plugin for vim, but I don't have experience with it http://www.vim.org/scripts/script.php?script_id=1075
23:51 < AlphaPinky> my vim is remote.
23:51 < AlphaPinky> I run windows in my notebook.
23:52 < euoia> AlphaPinky: ah! okay. I think you can still run vim in Windows
23:52 < AlphaPinky> IÂ´ll try doing sshfs first. and then rsync.
23:52 < AlphaPinky> I think SSHFS might be good enough if it works.
23:53 < euoia> AlphaPinky: great!
23:53 < AlphaPinky> It is really for development. For production I will have to think of something else, maybe Git.
23:54 < AlphaPinky> today here I was told to avoid using windows for development, and thatÂ´s what iÂ´m doing.
23:56 < mscdex> AlphaPinky: Windows should generally be fine, performance won't be as good in some places though
23:56 < euoia> AlphaPinky: I think it really depends on your situation. A lot of people will tell you to avoid Windows for development, but you find a lot of psychological bias when it comes to using an OS. If you can easily switch, then do it but if your company all runs Windows or you rely on Windows-only tools then it's probably not the right move
23:57 < euoia> AlphaPinky: There's also the option to run a linux VM on your Windows machine which can work well
--- Log closed Wed Mar 06 00:00:24 2013
