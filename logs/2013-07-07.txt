--- Log opened Sun Jul 07 00:00:11 2013
--- Day changed Sun Jul 07 2013
00:00 < ckknight> I tend not to, generally
00:00 < duko> do you always clone the object being inherited and the define new properties directly?
00:00 < ckknight> but Object.create(obj) works fine
00:00 < ckknight> yeah
00:00 < ckknight> that's the idea
00:00 < duko> can I see a sample of your code in the large?
00:00 < dimadima> substack: what's the best option for using jquery w/ browserify? i'm seeing a few out there
00:01 < ckknight> for the most part, I use "classes", i.e. object factories that resemble classes
00:01 < dimadima> none are at 2.0+
00:01 < ckknight> so my inheritance is generally from a Func.prototype if anywhere
00:02 < duko> I've been defining objects in a module pattern -each one has a constructor method
00:02 < duko> and the constructor method clones a prototype definition and then redefines certain properties passed in
00:02 < ckknight> alright
00:02 < duko> I would like to see how other people are doing this once on module needs to inherit from another and so on
00:03 < disorder_> ok I have this problem:
00:03 < duko> in that case you can't simply use Object.create but the module inheriting from another it will need to be formatted differently
00:03 < disorder_> I have a module 'db' that handles db
00:03 < duko> for consistency, maybe I should never use object literals... 
00:04 < disorder_> and many different controllers module
00:04 < dimadima> oh jquery 2.0 seems to export
00:04 < disorder_> I would like that the main app initialize the db and than every other controller will remain connected to the db
00:05 < disorder_> however, if I import the db module in the controller, the module is reinitialized
00:06 < ckknight> duko: if you want an example of my code, here you go, but it might be a bit cryptic: https://github.com/ckknight/gorillascript/blob/master/lib/parser-nodes.js#L360
00:06 < ckknight> also, it's the generated JavaScript, so the comments are nonexistent compared to the source
00:06 < euphrate> hi ckknight 
00:06 < ckknight> euphrate, my nemesis
00:06 < euphrate> :(
00:06 < euphrate> why
00:07 < euphrate> i didn't want to be anybody's nemesis, now look at the mess i'm in
00:07 < euphrate> thanks a lot niggler 
00:07 < dimadima> i don
00:07 < substack> dimadima: it's easiest to just use a separate script tag for jquery
00:07 < niggler> lol euphrate 
00:08 < niggler> hey hey ckknight stop being -ist
00:08 < substack> dimadima: jquery is not modular and takes forever to parse
00:08 < substack> dimadima: http://substack.net/weaning_yourself_off_jquery
00:08 < dimadima> substack: oh cool. roger that. i was just about to type though, that it appears that since 2.0 beta 2, "Node.js compatibility. If the jquery.js file is included in Node via require(), it will export the jQuery object."
00:08 < substack> which is completely stupid I think
00:08 < dimadima> substack: ah ha, yeah, so... zepto eh?
00:08 < ckknight> euphrate: it was your choice to become one of niggler's henchmen.
00:08 < dimadima> i just like deferreds!
00:08 < euphrate> ckknight: that's what you think
00:08 < substack> I don't see the point of zepto either
00:08 < niggler> hey ckknight there's no grand conspiracy here
00:08 < substack> browsers have document.querySelector()
00:09 < ckknight> that's exactly what a grand conspirator would say!
00:09 < substack> IE8 even has document.querySelector()
00:09 < dimadima> substack: i will read and then ask further. thank you
00:09 < M28> what's the cause for node's 1.7 GB memory limit in 64 bit?
00:09 < M28> a v8 limitation?
00:10 < euphrate> yeah afaik
00:10 < euphrate> but you can change it
00:17 < AAA_awright> There's this nifty API that most browsers have
00:17 < AAA_awright> It's called DOM
00:17 < jony_kalavera> hi im getting an error when trying to install cordoba with npm. something related to another package callled ripple-emulator
00:17 < jony_kalavera> i was wondering if this has something to do with my nodejs version
00:18 < jony_kalavera> i just installed the default one for ubuntu 13.04 
00:18 < niggler> you probably need to symlink node -> nodejs
00:18 < jony_kalavera> which is 0.6.19
00:18 < niggler> and upgrade node
00:18 < jony_kalavera> anyways this is the error http://pastebin.com/jigQ9vSC
00:21 < jony_kalavera> niggler where you suggesting that to me? should i symlink node -> nodejs?
00:21 < dimadima> hmm yeah, i think i will drop jquery. my biggest site has 3% traffic from ie 7 and ie 8
00:21 < niggler> "No compatible version found: ripple-emulator@'>=0.9.15'" means you need to upgrade node
00:22 < dimadima> jquery is the oldest shim
00:22 < niggler> the other thing is due to a conflict with the preexisting node package
00:23 < jony_kalavera> ok let me try that
00:23 < niggler> jony_kalavera get the source and build it
00:24 < jony_kalavera> will do
00:24 < jony_kalavera> brb
01:03 < jesusabdullah> man quiet today
01:03 < ckknight> mhmm
01:04 <@nexxy> shhhh
01:07 < Beg> THE DAY WE GET RID OF CASE-SENSITIVE COMPUTERS WILL BE A NICE DAY.
01:20 < othiym23> why isn't LOUDBOT in here?
01:22 < Beg> :(
01:24 < bingomanatee> the OSX' s file system is case insensitive and it causes some very bad false positives when pushing to Linux
01:42 < Aredridel> That and the unicode normalization. Eww.
01:46 < nav_> What is the best book out there for learning to dev in Node Js in your opinion? 
01:46 < owen1> I need help with a name for a coming talk. it's about decisions we had to make while building a full-stack js app. things like web framework, oo vs functional style, control-flow aproach, organizing the client-side etc.
01:59 < sinclair|net> hi nexxy 
02:02 < owen1> Here are some ideas for a name - 1. A Guide to Navigate the Node Jungle  2. The Hitchhiker's Guide to Node  3. 2013: A JavaScript Odyssey - one company's journey to Node
02:04 < timetocode> owen1, are your finding summarized anywhere on the web yet? I'd be interested to read 'em. 
02:04 < timetocode> owen1, what did you conclude about oo vs functional? maybe there's a name to be had in that
02:04 < owen1> timetocode: summary of what? it's a talk i plan
02:05 < timetocode> owen1, summary of decisions and rationales in your full stack app
02:07 < owen1> timetocode: for theh oo vs functional, here is a quick email i sent to my team a while ago
02:07 < owen1> https://github.com/oren/daily-node-email/blob/master/class-vs-function/partial-apps.md
02:07 < owen1> i prefer the idiomatic approach, but i don't think it matters, as long as you are consistant
02:10 < owen1> we use browserify for client side and so far really like it
02:10 < owen1> we chose express but might switch to createServer one day
02:11 < owen1> didn't have time to evaluate hapi but it can be nice as well
02:11 < owen1> we use callbacks and not promises
02:11 < owen1> and not using async for now
02:11 < owen1> or any control flow library
02:12 < owen1> what do u think of my talk name? anything u prefer out of the 3?
02:13 < timetocode> owen1, i like #2 out of htose
02:13 < timetocode> owen1, so when using callbacks instead of something like async, does that mean the code just nests callbacks as needed?
02:15 < owen1> yeah. u can name your functions, and if u need parallel you use simple counter to know when the last one was called
02:17 < owen1> like the first example here - https://github.com/oren/oren.github.com/blob/master/posts/control-flow-2.md
02:17 < owen1> (the done function is the important piece)
02:17 < owen1> if (i === 3)
02:18 < owen1> thanks for the feedback
02:18 < timetocode> owen1, how does storing state work with the idiomatic closure style
02:18 < timetocode> that's a part i always get stuck on
02:19 < owen1> var talk = behavior({verbose: true});
02:20 < owen1> the object u passed is your state,
02:20 < owen1> and the inner function that is returned has a reference to that object
02:20 < owen1> it 'encloses' on this variable.
02:21 < owen1> (that's why it's called a closure)
02:21 < timetocode> owen1, so if you wanted to know if talk was verbose after the fact, is there a way to get that again?
02:22 < owen1> timetocode: interesting question. let me copy paste the code and see how to do that.
02:25 < timetocode> owen1, i also wonder if there's anything wrong with that idea (storing the data in a closure as if it were an object). I'm never really sure if my brain is defaulting to OO or defaulting to functional when laying something out in node
02:27 < owen1> the only thing u need to be aware of is that as long as your function is in memory, the enclosed variables are also alive.
02:27 < owen1> so if you create many functions with a lot of state it might be a memory issue.
02:28 < owen1> (think of a web service that gets 1000 req/sec and u create a lot of those)
02:29 < timetocode> yea i could see that getting messy
02:33 < owen1> http://pastebin.com/scjvupSZ
02:33 < owen1> timetocode: i added .config to the returned function
02:33 < owen1> maybe someone here can give me feedback but that seems to be fine
02:34 < owen1> a function is just an object so u can add key values to it.
02:34 < timetocode> owen1, and do you free memory for such a thing with  talk = null?
02:37 < owen1> i guess u can do that, but i am not sure if it's common. usualy you function is being used and removed by the gc
02:37 < owen1> the gc takes care of that
02:57 < Aredridel> Yeah, better to close over fewer variables, and let the whole thing go at once. 
02:58 < Aredridel> Objects aren't really much more or less efficient. They're a bit more explicit, for better and worse, and V8 does some funky magic with allocation to make them efficient, which using them as general storage negates.
02:58 < Aredridel> So: measure.
03:08 < sinclair|net> ok, i have a question
03:08 < sinclair|net> assume i have a path
03:08 < sinclair|net> in fact, no, i got this
03:14 < ningu> if it's the six-fold path, you should follow it
03:19 < timoxley> so it seems you can only use built-in node streams with process.spawn
03:19 < timoxley> https://github.com/joyent/node/blob/master/lib/child_process.js#L819
03:23 < jdelgado_> Anyone have an opinion on app.js vs node-webkit?
03:25 < poincare101> Hi guys. I'm currently using bcrypt, and there seems to be a callback for hashing password. Can I just block on it? The thing is that I'm basically separating my code into MVC, and its turning out to be just callbacks everywhere because apparently I can't call anything in sync. Is this true?
03:26 < jesusabdullah> jdelgado_: didn't like app.js's api but node-webkit is huuuuge
03:26 < jesusabdullah> jdelgado_: adobe has a new thing that does something similar it's on their github, I've heard good things
03:26 < jdelgado_> jesusabdullah: Their shell?
03:26 < jdelgado_> jesusabdullah: For brackets?
03:27 < jesusabdullah> jdelgado_: yeah, brackets
03:28 < jdelgado_> jesusabdullah: Yeah, worth a look
03:28 < jesusabdullah> poincare101: yup that is true
03:29 < poincare101> jesusabdullah: so, Node code is essentially callbacks fucking everywhere
03:29 < jesusabdullah> poincare101: yup!
03:29 < jesusabdullah> poincare101: you get used to it
03:29 < jdelgado_> poincare101: Efficient* fucking everywhere
03:29 < jesusabdullah> poincare101: yup, it's the secret sauce for speed
03:29 < poincare101> Ha. I hope I get used to it.
03:29 < jesusabdullah> You will
03:29 < jesusabdullah> poincare101: http://callbackhell.com
03:29 < poincare101> I thought I could forget about that stuff after Twisted. Apparently not.
03:30 < jdelgado_> poincare101: Honestly, after a week you'll be set. I hated it at first, now I can't stand other languages that are in sync
03:30 < poincare101> Alright. Thanks for the help.
03:30 < jesusabdullah> poincare101: no but you can forget the stupid class structures twisted imposes
03:31 < zeekay> twisted was pretty awesome in 2000, :p
03:31 < zeekay> a lot of that was to deal with limitations of python in early 2000
03:42 < jdelgado_> jesusabdullah: Yeah, digging into the appjs api, I completely agree.
03:46 <@nexxy> hi sinclair|net 
03:46 < sinclair|net> nexxy: hello
03:47 < Aredridel> Twisted was also made by twited (ha) lisp programmers.
03:47 < Aredridel> er.. twisted. That'd be funnier if I didn't screw it up.
03:50 < jesusabdullah> Aredridel: close enough.
04:07 < RalieghFhang> This... This is probably going to come off as a stupid question, but is it possible to have an HTML page with javascript imbedded RUN a Node script seamlessly?
04:07 < HeartOfAce> well
04:07 < HeartOfAce> you could have a page that has a js script that connects to a server and runs a a script, I suppose
04:08 < RalieghFhang> Basically I'm trying to find the best way to create a website that will run a script upon a form submission.
04:09 < HeartOfAce> well
04:09 < RalieghFhang> In the end, those form submits will have needed variables that will be placed in the script, but baby steps for now.
04:09 < RalieghFhang> Baby steps.
04:09 < HeartOfAce> you can have your server run said script 
04:09 < HeartOfAce> it seems like you wanna run a server and then have it post some data...
04:10 < RalieghFhang> Basically. An overview: I've already coted auto-create scripts to auto-create directories, and edit config files based on variables set in the script.
04:10 < RalieghFhang> Now I just need a way to run these Node scripts from a visible web-page.
04:11 < HeartOfAce> uhhh, why don't you just host a node server that servers those pages and then on POST run the script? 
04:11 < roots47> Hello.  I just went through the 'nodeJS beginner' book, i thought it was once free, maybe i'm mistaken... but are there any good free online resources/tutorials for learning node
04:11 < roots47> a more comprehensive tutorial perhaps
04:11 < RalieghFhang> Because for the life of me I can't find any documentation on how to even begin that Heart.
04:11 < HeartOfAce> alright
04:11 < HeartOfAce> Hmmm
04:12 < HeartOfAce> expressjs.com check out expressjs
04:12 < RalieghFhang> Don't get me wrong there's a few examples on how to make a listen socket and display "Hello World", but nothing to design or do the functions I'm requesting.
04:13 < HeartOfAce> but like, you just need a form to POST
04:13 < HeartOfAce> and then when it's handling it, spin off a thread or something to run the node script
04:13 < jalcine> What's a good, lightweight webapp framework for Node.js?
04:13 < roots47> express.js
04:13 < HeartOfAce> Expressjs is probably the standard one
04:13 < RalieghFhang> Also I've snagged Express but go figure there's no installation whatsoever on how to use it.
04:14 < AAA_awright> RalieghFhang: You make a request to the HTTP server and run code on the server. Are you familiar with how HTTP works?
04:14 < jalcine> I'm seeing Express, Geddy, Meteor, etc.
04:14 < RalieghFhang> This is a VPS I'm using btw, so I have no GUI
04:14 < HeartOfAce> jalcine: Meteor is more of a client side thing
04:14 < roots47> Best online beginner tutorial?
04:14 < RalieghFhang> AAA_awright, very basics of it.
04:15 < HeartOfAce> roots47: I don't know any good free tutorials
04:15 < AAA_awright> RalieghFhang: Go check out RFC 2616 and get cozy with it, it'll go through what is a resource, how to fetch it, modify it, run commands on the server, etc
04:15 < bc___> roots47: https://github.com/maxogden/art-of-node give this a read
04:16 < jalcine> HeartOfAce: I'm looking to build a lil' app that just shows off some images and a bit of db operations
04:16 < jalcine> having a ORM/ODM would be nice.
04:16 < HeartOfAce> but if you're willing to pay, I found these videotutorials really great when I got started: https://tutsplus.com/course/building-web-apps-in-node-and-express/
04:16 <@isaacbw> how much do you think he makes doing video tutorials
04:17 < HeartOfAce> Andrew? probably a lot, I love his tuts 
04:17 < AAA_awright> It's hardly a career, but probably a profit
04:17 < roots47> bc___: thanks this looks promising
04:17 < HeartOfAce> I think he has some of the bet tuts 
04:18 < HeartOfAce> jalcine, check out express and like mongoose or something
04:18 < jalcine> +1 for tutsplus
04:18 < jalcine> definitely the way to go
04:18 < HeartOfAce> the tutorail I linked to is great
04:18 < RalieghFhang> Just a simple question, how do you even USE Express? Is it a GUI thing? I think I saw a video of someone using it and it looked like they were in a specific program. Because once I installed it on my system I noticed no difference in anything, and of course their site has no documentation whatsoever.
04:18 < roots47> HeartOfAce: that looks like it focuses on using express?
04:19 < HeartOfAce> roots47: it does
04:19 < jalcine> RalieghFhang: Express is a web application framework like Sinatra
04:19 < jalcine> Sinatra = Ruby
04:19 < HeartOfAce> RalieghFhang: it's a web framework that does a lot of the heavy lifting for you
04:20 < roots47> I'm just looking to write vanilla node for now
04:20 < roots47> i may check that out in the future though
04:21 <@isaacbw> express doesn't really do a whole lot
04:21 < HeartOfAce> what exactly are your goals :p?
04:21 < RalieghFhang> Mine?
04:21 < HeartOfAce> no, roots47
04:21 < RalieghFhang> Ah.
04:21 < HeartOfAce> you should check out the tuts+ thing, though
04:21 < HeartOfAce> all you wanna do is handle a POST requesta
04:22 < HeartOfAce> and then when you get that POST you run your script
04:22 < roots47> eventually I'd like to learn some web frameworks in node, but like any framework, i always prefer learning some of the underlying language first
04:22 <@isaacbw> express isn't really a framework
04:22 < roots47> not to say I don't understand javascript itself
04:22 <@isaacbw> at least not anything like rails, and not really much like sinatra
04:22 <@isaacbw> sinatra has a lot more going on than express
04:22 < HeartOfAce> express lets you fuck up just like if you were doing it barebones 
04:23 < RalieghFhang> HeartOfAce: I'm a poor man, paying for tutorials is impossible in my current position, heh.
04:23 < memo-> For what it's worth, it calls itself a framework.
04:23 < HeartOfAce> RalieghFhang: just install express: npm install -g express 
04:23 < HeartOfAce> and  then run: express APPNAME 
04:24 < HeartOfAce> and take a look at the files it generates
04:24 < memo-> Also, the express site has pretty good documentation, even a getting started guide. I've be weary of video tutorials. They're almost always outdated.
04:24 < HeartOfAce> I don't really know any good tutorials 
04:24 < Beg> sometimes i am so smart, I impress myself.
04:25 < HeartOfAce> http://www.internetify.me/ I welcome people to the internet.
04:25 < HeartOfAce> what do YOU do, huh!? 
04:25 <@isaacbw> HeartOfAce: don't install it globally
04:25 <@isaacbw> that's a no no
04:25 < HeartOfAce> really? 
04:25 <@isaacbw> yea
04:25 < HeartOfAce> what if you wanna use express to generate the scaffolding? 
04:25 < HeartOfAce> or do you just use something like yeoman or w/e?
04:25 <@isaacbw> lol, are you joking?
04:26 < RalieghFhang> Wow Heart, now that I actually have something to work on I can pick this apart and figure out how it ticks.
04:26 < RalieghFhang> Thanks.
04:26 < RalieghFhang> Woulda been nice if they told you that simple command would have made a basework...
04:26 <@isaacbw> afaik express has no generation component
04:26 < memo-> it does 
04:26 <@isaacbw> what
04:26 <@isaacbw> no way
04:26 < HeartOfAce> you can run: express AppName
04:26 < memo-> express new `app` just creates a simple folder structure and index.js
04:26 < HeartOfAce> and you can select if it uses like normal css sass or w/e
04:27 <@isaacbw> that's weird
04:27 < RalieghFhang> Aye, it's a base for me to work with and it was never ever mentioned before.
04:27 < RalieghFhang> Quite handy. Time to dissect.
04:27 < HeartOfAce> RalieghFhang: don't they mention it in their guide? 
04:28 < HeartOfAce> isaacbw: they mention it in the guide: Using express to generate an app
04:28 <@isaacbw> still, don't install it globally
04:28 < RalieghFhang> Not that I saw. Just how to build it yourself.
04:28 < HeartOfAce> http://expressjs.com/guide.html it's right there lol
04:28 <@isaacbw> ignore the guide
04:28 <@isaacbw> it's made of farts
04:29 < HeartOfAce> why not install globally? 
04:29 < RalieghFhang> Yes, yes it is.
04:29 < HeartOfAce> I never use the global version for anything other than to generate the scaffolding 
04:29 < HeartOfAce> it still installs itself locally as well 
04:29 <@isaacbw> because it's a bad habit
04:29 < HeartOfAce> I have nodemon globally too :|
04:29 < memo-> If you don't install globally you can still run the binary to auto-create the files with ./node_modules/express/bin/express
04:30 <@isaacbw> because the express generator is one of many possible ways to use express
04:30 <@isaacbw> you're basically locking yourself in to one technique
04:30 <@isaacbw> broaden your horizons
04:30 < HeartOfAce> I've been looking into Yeoman :)
04:31 < HeartOfAce> but that also installs globally
04:31 <@isaacbw> I mean for laying out your application
04:31 <@isaacbw> you don't need to generate anything
04:31 < HeartOfAce> oh, I've been playing around a bit with how I structure my apps
04:31 < RalieghFhang> If there's no good free documentation to learn how to lay out your app, or any good documentation at all really.
04:31 < RalieghFhang> Yeah, you kinda do. :/
04:32 < HeartOfAce> Express lets you sorta set your own way 
04:32 <@isaacbw> RalieghFhang: there are plenty of samples on the express github
04:32 < HeartOfAce> it's pretty unopinionated 
04:33 < HeartOfAce> isaacbw: I've found that whenever I try to do anything too big, it starts to get messy very easily; but that's more of my fault, I need to modularize mystuff better
04:34 <@isaacbw> I don't think express scales very well
04:34 < HeartOfAce> I've been meaning to check out Sails 
04:34 < HeartOfAce> it's like the Rails equivalent in node
04:35 < HeartOfAce> or so I've read
04:35 < HeartOfAce> idk
04:35 <@isaacbw> if you want rails, use rails
04:35 <@isaacbw> it's going to be a lot more mature than any node equivalent
04:35 < HeartOfAce> I use Rails at work :p, I use node in my free time for fun 
04:35 <@isaacbw> node is great for small modular components 
04:36 <@isaacbw> that piece together into larger networked systems
04:36 <@isaacbw> I don't think we've seen a really good routing implementation yet
04:36 < HeartOfAce> I still like node more than rails 
04:37 < AAA_awright> That's sort of comparing apples and oranges, I think
04:37 <@isaacbw> I think the crux of it is that node tends to eschew frameworks
04:37 <@isaacbw> *the node community
04:38 <@isaacbw> the node ecosystem is kind of the anti-rails
04:38 < AAA_awright> True they're both libraries, but Rails tries to be a framework, Node.js is just a system API
04:39 < HeartOfAce> Rails pushes you to do things the Rails way, and it does it well. Even with Express, it just says: well, here's some stuff, play around with it. I understand that the goals are different, though :p
04:41 < jalcine> Rails does that to ensure stability, though.
04:41 < jalcine> They take (partial) blame for what happens in the app.
04:42 < HeartOfAce> yeah
04:51 < AAA_awright> And portability
05:01 < fesener_> guys, assume I have a clients array that holds username comes from my client to my server , how can I also save user ids within this ?
05:02 < gildean> fesener_: use an object instead
05:02 < fesener_> gildean would you give me a small example
05:03 < gildean> fesener_: so if you have this now: var users = ['user1', 'user2']; you would have something like: var users = { user1: 'idstring', user2: 'idstring' };
05:04 < gildean> or instead of having just one string as the value of the user, it could also be an object and hold more than a single value
05:04 < fesener_> i have var clients = {}; and i do       clients[user.username] = socket.id; on every connection
05:05 < gildean> fesener_: that would save the id to the username on the object, yes
05:06 < fesener_> gildean, but i dont want to save just socket.id
05:06 < fesener_> i want to also save user.userid comes from my client
05:06 < gildean> fesener_: then do: clients[user.username] = { socketid: socket.id, otherid: whatever }
05:06 < fesener_> ok i'll try it now
05:07 < fesener_> thank you
05:07 < gildean> np
05:08 < animali> hello peoples
05:08 < animali> i have a question
05:09 < animali> if may sound simple
05:09 < animali> preface by saying i am new to the world of programming and creating
05:09 < animali> yet i am knee deep in the CRUD
05:10 < animali> what is Node.js, what does it do and why should it be in my web application? Why should i bother learning it?
05:10 < gluxon> animali: There's no reason it *should* be in your web application.
05:11 < gluxon> Node has a bigger purpose, but in terms of web applications, it's just another alternative.
05:11 <@nexxy> unless you want your application to be full of web-scale awesome and asynchronous win
05:11 < animali> Let me rephrase. Why would I need it or How could it be useful or make my life easier or make my user happier?
05:12 < gluxon> animali: Done right, asynchonous is pretty scarily fast.
05:12 < gkatsev> you don't need it. Move along
05:12 < gkatsev> jk
05:12 < gluxon> animali: I see it as another way of doing things.
05:12 < sinclair|net> gluxon: whats nodes bigger purpose?
05:12 < gluxon> animali: It is my personal preferred way because for me, JavaScript is pretty awesome.
05:12 < animali> So node in essence is like a framework?
05:13 < gluxon> sinclair|net: Networking?
05:13 < gluxon> sinclair|net: In general.
05:13 < gkatsev> animali: you don't necessarily need node.js. It depends on what you're doing specifically. Node excels at IO bound tasks. For other things, it is just as good as anything else.
05:13 < gluxon> Web apps is just one part of computer networking.
05:14 < sinclair|net> gluxon: speaking of web apps
05:14 <@nexxy> Node.js will make you better at life
05:14 < sinclair|net> gluxon: nexxy look what i made https://github.com/sinclairzx81/appex
05:14 < sinclair|net> yay \o/
05:14 < animali> gluxon, i'm guessing you're saying that node.js is meant is really meant for tasks other than web dev.. like i saw a group of kids use it to create home automation system.. pretty cool but don't see how that will make my web app better
05:14 <@nexxy> very fancy
05:15 < gluxon> sinclair|net: :)
05:15 < sinclair|net> yay, typed web services, just like i always wanted
05:15 < sinclair|net> with extra syntactic sugar
05:15 < gluxon> animali: I'm saying it can do a lot of things, and in the field of web apps, it is just another tool you can use.
05:16 < gluxon> animali: Like the syntax and language constructions of JavaScript? Then you might like Node.
05:16 < gluxon> animali: If you do web apps in Node.js, you'll find that it's pretty similar to how it's done in Ruby.
05:16 < animali> well gluxon, I get the impression that node would be used instead of rails or django, am I correct? 
05:16 < gluxon> MVC architecture, modules..
05:17 < animali> Oh i see
05:17 <@nexxy> animali, https://github.com/maxogden/art-of-node
05:17 < animali> I had the idea that node.js was similar to  jquery
05:17 <@nexxy> way more concise than the ramblings you'll get on irc
05:17 < gluxon> animali: Yes. Node.js + Express and Ruby + Rails.
05:17 <@nexxy> express is hardly like rails
05:17 < animali> nexxy, at this time of night ramblings > concise  
05:17 < animali> lol
05:18 < gluxon> nexxy: I'm making the comparison that they are both web frameworks.
05:18 <@nexxy> animali, fair enough ;P just expect to receive many (conflicting) report
05:18 <@nexxy> s
05:18 <@nexxy> gluxon, yeah ok
05:18 <@nexxy> that's true!
05:20 < freze> test
05:20 < animali> see neexy ... I went to check out your link and suddenly im looking at http://jsforcats.com/ LOL
05:20 < animali> nexxy*
05:20 < freze> test
05:21 < animali> freze testing 123
05:21 < animali> your mic workds
05:21 < animali> works*
05:21 < animali> now sing to us!
05:21 < freze> ?
05:21 < fesener_> gildean, i've done what you told me to do and it seems to work but there's a problem
05:21 < animali> j/k
05:26 < fesener_> gildean, would you check http://pastebin.com/4EbsuQz8 when you come back, what I want is to get userid value from server which i saved as you said and put it to {{ USERID HERE}} part
05:29 < gildean> fesener_: you're only sending the usernames, the Object.keys only creates an array of the object properties i.e. the usernames
05:31 < fesener_> should I send as {"currentUsers": JSON.stringify(clients)} ? 
05:33 < gildean> fesener_: iirc socket.io does the json stringifying for you
05:33 < fesener_> it just prints out Object when I console.log
05:34 < fesener_> when I add stringify output is: {"test":{"socketid":"j5BooE4wU6cW2Hsundr-","userid":"3"},"ruless":{"socketid":"6mX9VDBcOZRF3yi1ndsA","userid":"2"}} 
05:34 < fesener_> with 2 online users
05:37 < gildean> fesener_: if you're talking about a browsers, the object it prints out should be inspectable, at least on chrome and ff
05:37 < fesener_> yes those results are coming from inspection
05:54 <@nexxy> animali, welcome to nodeland :)
06:03 < jalcine> is there a API helper package?
06:03  * jalcine searches npm
06:15 < ningu> jalcine: restify
06:24 < sinclair|net> jalcine: what do you mean API helper package?
06:25 < jalcine> something like https://github.com/intridea/grape
06:25 < jalcine> I'm coming from the Ruby world and moving into the place I should have started with so I'm poking for replacements
06:39 -!- Topic for #Node.js: no'd.js - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
06:39 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Mon Jul  1 04:22:48 2013]
06:39 [Users #Node.js]
06:39 [@isaacbw         ] [ Cronoh          ] [ guiambros       ] [ LanyonM       ] [ phI||Ip        ] [ stevegill      ] 
06:39 [@isaacs          ] [ cTIDE           ] [ guilleiguaran_  ] [ lea           ] [ Phunky         ] [ Stew-a         ] 
06:39 [@konobi          ] [ culturelabs     ] [ guor            ] [ Lee-          ] [ piggybox       ] [ stonecob_      ] 
06:39 [@MI6             ] [ cvo             ] [ guybrush        ] [ LeftWing      ] [ pksunkara      ] [ Stoob_         ] 
06:39 [@nexxy           ] [ cxreg           ] [ Gwl             ] [ leoalves      ] [ poorman_       ] [ Stoob__        ] 
06:39 [@tjfontaine      ] [ D4RK-PH0ENiX    ] [ gwoo            ] [ leonardo      ] [ PotatoLa1ke    ] [ Str1ngS        ] 
06:39 [@trevnorris      ] [ dagerik         ] [ gyaresu_        ] [ leptonix_     ] [ pquerna        ] [ strax          ] 
06:39 [ 36DAAX0FK       ] [ daleee          ] [ hackygolucky    ] [ Linkedipsoul  ] [ prawnsalad     ] [ stride         ] 
06:39 [ [[zzz]]         ] [ daleharvey_     ] [ Hadaka          ] [ lmatteis      ] [ prettyrobots   ] [ strmpnk        ] 
06:39 [ [Fudge]         ] [ danmactough     ] [ hakunin         ] [ LocalPCGuy    ] [ prismatictrail ] [ Stumbler       ] 
06:39 [ \mSg            ] [ darkc0met       ] [ halfhalo        ] [ Lorentz       ] [ Probeus_       ] [ stutter        ] 
06:39 [ ^o-_-o^         ] [ darknyan        ] [ happyfac1       ] [ lulzbane      ] [ Proditor       ] [ stylus         ] 
06:39 [ __main__        ] [ davad           ] [ Havvy           ] [ Lulzon        ] [ prophile       ] [ styol          ] 
06:39 [ __sri           ] [ dawolf          ] [ heath           ] [ Lunar_Lamp    ] [ przemoc        ] [ subbyyy        ] 
06:39 [ _Blorb          ] [ dazoe           ] [ heidar          ] [ luruke        ] [ psino          ] [ substack       ] 
06:39 [ _br_            ] [ dcamp           ] [ hello_kitty     ] [ m0            ] [ purr           ] [ sunz           ] 
06:39 [ _janne          ] [ deadalus        ] [ HeN             ] [ M28           ] [ pyykkis        ] [ superjoe       ] 
06:39 [ _qrada          ] [ dec_            ] [ heroux          ] [ M2Ys4U        ] [ qbit           ] [ sveisvei       ] 
06:39 [ _Steve_         ] [ deetb           ] [ hichaelmart     ] [ maaarghk-     ] [ qrada          ] [ SvenDowideit   ] 
06:39 [ _th_n_          ] [ defaultro       ] [ hij1nx          ] [ Mack          ] [ quuxman_       ] [ svnlto         ] 
06:39 [ `3rdEden        ] [ DefSek_         ] [ hipsterslapfight] [ madscientist_ ] [ r00tb0y        ] [ swaagie        ] 
06:39 [ `MArceLL`       ] [ defunctzombie_zz] [ HSL             ] [ Maerten       ] [ r04r|away      ] [ swaj           ] 
06:39 [ AAA_awright     ] [ Denmad          ] [ hydrawat        ] [ majek_        ] [ r0tha_         ] [ Swizec         ] 
06:39 [ aandy           ] [ denysonique     ] [ iain_           ] [ maloik        ] [ radiodario     ] [ sxpert2        ] 
06:39 [ aboudreault     ] [ Derander        ] [ iaincarsberg_   ] [ manacit       ] [ rakl           ] [ syntax         ] 
06:39 [ abstractj       ] [ dested          ] [ ian_            ] [ ManneW        ] [ RalieghFhang   ] [ szop_ninja     ] 
06:39 [ admc            ] [ DeVito          ] [ ianjm           ] [ manung        ] [ ralphholzmann  ] [ taaz           ] 
06:39 [ admc1           ] [ diffalot-away   ] [ ibrahim_        ] [ mape_         ] [ Ralt           ] [ tahu           ] 
06:39 [ aeberlin        ] [ digiwano_       ] [ ickyb0d         ] [ mappum        ] [ rampr          ] [ tanepiper      ] 
06:39 [ aep             ] [ dimadima        ] [ igl1            ] [ maqr          ] [ randallagordon ] [ tankbusta      ] 
06:39 [ afflicto        ] [ diminoten       ] [ iiie2           ] [ marienz       ] [ Rantanen       ] [ tassmjau       ] 
06:39 [ afmacedo        ] [ djoot           ] [ iksik           ] [ marlun        ] [ raph_          ] [ taterbase      ] 
06:39 [ ag4ve           ] [ dleonardi       ] [ ilteris         ] [ Marsup        ] [ rawtaz         ] [ teadict        ] 
06:39 [ agustinfl       ] [ dmilith         ] [ imarcusthis-    ] [ maru_cc_      ] [ rax0           ] [ tec27          ] 
06:39 [ aidanie_        ] [ dmz             ] [ ImBcmDth        ] [ mashlol       ] [ Raynos         ] [ TechnoCat      ] 
06:39 [ Aikar           ] [ dnyy            ] [ imton           ] [ master5o1|work] [ rblackwe       ] [ TehLink        ] 
06:39 [ airtonix        ] [ Domenic_        ] [ Incip           ] [ matbee        ] [ rcombs         ] [ tellnes        ] 
06:39 [ ajpiano         ] [ dominictarr     ] [ InezK_away      ] [ matjas        ] [ rcs            ] [ terietor       ] 
06:39 [ akiress         ] [ don_jones       ] [ inimino         ] [ matt_c        ] [ ree            ] [ terinjokes     ] 
06:39 [ akshayms_       ] [ DonRichie       ] [ innociv         ] [ mattdawson    ] [ reid           ] [ tg             ] 
06:39 [ alanmeira       ] [ dooglus         ] [ Inoperable      ] [ mattmcma_     ] [ ReinH          ] [ The_Fly        ] 
06:39 [ alekibango      ] [ Draggor         ] [ instence        ] [ mawuli        ] [ remysharp      ] [ theCole        ] 
06:39 [ alekibango_     ] [ drano           ] [ Internet13      ] [ max_well1r    ] [ rgmarcha_      ] [ thedaywillcome ] 
06:39 [ alexgo          ] [ drean           ] [ ips|malc_       ] [ mbalho        ] [ rhalff         ] [ TheFuzzball    ] 
06:39 [ alexwhitman     ] [ drean_          ] [ irclogger_com   ] [ mbor          ] [ RichardBronosky] [ TheJH          ] 
06:39 [ algesten        ] [ drey            ] [ ircretary       ] [ Mchl          ] [ Ricki          ] [ thelamest      ] 
06:39 [ ali             ] [ drodger         ] [ ironfroggy_     ] [ mclee         ] [ riku           ] [ TheMoonMaster  ] 
06:39 [ AllStruck       ] [ dscape__        ] [ isaacs_         ] [ McMAGIC--Copy ] [ Ritzton        ] [ TheNumb        ] 
06:39 [ amartens        ] [ durnik          ] [ isieo           ] [ mdedetrich    ] [ rksm           ] [ therealk_      ] 
06:39 [ AntelopeSalad   ] [ dustjn          ] [ Iskarlar        ] [ mdel          ] [ rkusa          ] [ thorsteinsson  ] 
06:39 [ arduix_         ] [ dwierenga       ] [ ismlages        ] [ mdevolving    ] [ rmill          ] [ thread         ] 
06:39 [ arielserafini_  ] [ eataix          ] [ isomorphismes   ] [ medice        ] [ rnowak         ] [ threecreepio   ] 
06:39 [ arnorhs_        ] [ ec              ] [ itsnotlupus     ] [ medoix        ] [ Robbilie       ] [ tilgovi        ] 
06:39 [ asherkin        ] [ ec_             ] [ itsrache1fish   ] [ meizaps       ] [ robertkowalski ] [ tim_smart      ] 
06:39 [ ashnur          ] [ edude03         ] [ itsrachelfish   ] [ mekwall       ] [ roger_rabbit   ] [ timetocode     ] 
06:39 [ atatsu          ] [ eins78          ] [ ivan\           ] [ melter        ] [ roger_raymond  ] [ timkuijsten1   ] 
06:39 [ atti7           ] [ ejnahc          ] [ ivan`           ] [ mephux_       ] [ Rolken         ] [ timoxley       ] 
06:39 [ automata        ] [ elijah-mbp      ] [ j0ni            ] [ MerlinDMC     ] [ rolleiflex     ] [ TimTim`        ] 
06:39 [ avital          ] [ elliotf         ] [ j3lte           ] [ mertimor      ] [ rom1504        ] [ tjb1982        ] 
06:39 [ awc737          ] [ emilsedgh_      ] [ jackyyll        ] [ meso          ] [ romainhuet     ] [ tjbarber       ] 
06:39 [ azend           ] [ emptynine       ] [ jalcine         ] [ metellus      ] [ rphillips      ] [ tklun          ] 
06:39 [ azhwkd|away     ] [ epa_            ] [ jamesbathgate   ] [ mferranti     ] [ rtgibbons      ] [ tkuchiki       ] 
06:39 [ b0c1            ] [ Epeli           ] [ jammsen         ] [ mfrauenholtz  ] [ rtjure         ] [ tmpvar_        ] 
06:39 [ balgarath       ] [ EPIK            ] [ jan____         ] [ mgc___        ] [ Rubennn        ] [ tokuhirom_     ] 
06:39 [ bandroidx       ] [ epiloque_       ] [ jaredrhine      ] [ mh0           ] [ rudolfrck      ] [ tomaw          ] 
06:39 [ banzounet       ] [ ePirat          ] [ jareiko         ] [ mikeal        ] [ ruff           ] [ tomb_          ] 
06:39 [ baranaby        ] [ epochwolf       ] [ JasonSmith      ] [ mikeal1       ] [ runningsm      ] [ tomtomaso      ] 
06:39 [ barneybook      ] [ er1c_           ] [ Jaylee__        ] [ mikegerwitz   ] [ rurufufuss     ] [ toothrot       ] 
06:39 [ bartt1          ] [ Erakso          ] [ jayne           ] [ mikey_p       ] [ RushPL         ] [ topaxi_        ] 
06:39 [ bastinat0r      ] [ ereslibre       ] [ jayrobot        ] [ miql          ] [ russfrank      ] [ topek_         ] 
06:39 [ baudehlo1       ] [ ericnakagawa    ] [ jb__            ] [ mirkok        ] [ rvagg          ] [ torgeir        ] 
06:39 [ bbloom          ] [ Erriond__       ] [ jbolie          ] [ MitchW_       ] [ rwaldron       ] [ TorpedoSkyline ] 
06:39 [ bear            ] [ EToS            ] [ jbowes          ] [ MitchyNuts    ] [ rworth         ] [ Torsten        ] 
06:39 [ beawesomeinstead] [ eugeneware      ] [ JBreit          ] [ mjr841        ] [ ryanhirsch     ] [ towski         ] 
06:39 [ Beg             ] [ eventualbuddha  ] [ jcamins         ] [ mkozjak       ] [ ryanseddon     ] [ Tox            ] 
06:39 [ ben_alman       ] [ EvilJStoker     ] [ jcastelli       ] [ mlocher       ] [ s00pcan        ] [ trodrigues     ] 
06:39 [ benatkin        ] [ EvilPacket      ] [ jden            ] [ mmalecki      ] [ s2g_           ] [ tuhoojabotti   ] 
06:39 [ bencevans_afk   ] [ EvRide          ] [ jednorozec      ] [ mnaser        ] [ s3shs          ] [ txdv           ] 
06:39 [ bengl           ] [ execut3         ] [ jesusabdullah   ] [ moazam_       ] [ s4muel         ] [ tylersmi_      ] 
06:39 [ bentruyman      ] [ exos_           ] [ jetienne        ] [ monokrome     ] [ s5fs           ] [ Typo           ] 
06:39 [ Benvie          ] [ EyePulp         ] [ jez0990         ] [ MoRn          ] [ s_e            ] [ Tyrantelf      ] 
06:39 [ bergquist       ] [ Ezku            ] [ jgjeong         ] [ MrDHat        ] [ saintcajetan   ] [ upgrayeddd     ] 
06:39 [ beuk_           ] [ Fabryz          ] [ jgornick        ] [ mreeder       ] [ Sam-T          ] [ uxtx           ] 
06:39 [ Bilge           ] [ faern           ] [ JHartig_        ] [ mrkurt        ] [ SargoDarya     ] [ Validatorian   ] 
06:39 [ billy           ] [ fastman         ] [ jhgaylor        ] [ MrMaksimize   ] [ savardc        ] [ varmais        ] 
06:39 [ BitDestroyer    ] [ faulkner        ] [ jimmyff         ] [ mrmoneyc      ] [ sayd           ] [ Vbits          ] 
06:39 [ blakearnold_    ] [ fdc_            ] [ jjore           ] [ MrNibbles     ] [ scathen^C      ] [ VesQ           ] 
06:39 [ blissdev        ] [ fearh           ] [ jkarsrud        ] [ mrpibb        ] [ schredder      ] [ Wa             ] 
06:39 [ Blkt            ] [ felixge         ] [ jkn             ] [ mstefanko     ] [ schuranator    ] [ wadey          ] 
06:39 [ boaz            ] [ ferz            ] [ jlord_          ] [ multiply      ] [ SchwarzeLocke  ] [ wagtag         ] 
06:39 [ Bob_Gneu        ] [ fesener_        ] [ jmanoto         ] [ munro         ] [ sCoRpi         ] [ wedgeV_        ] 
06:39 [ bobbylaporte_   ] [ ffog            ] [ jmaugue_        ] [ MX80          ] [ scott_gonzalez ] [ wereHamster    ] 
06:39 [ bodisjw         ] [ fikst           ] [ jmfcool         ] [ myf           ] [ sdboyer        ] [ wesside        ] 
06:39 [ BombStrike      ] [ filleokus_      ] [ jmonay          ] [ myndzi        ] [ seantimm       ] [ whirlibulf     ] 
06:39 [ bondar          ] [ fivethre1o      ] [ JmZ_            ] [ n0cturnal     ] [ SebastianFlyte ] [ whitglint      ] 
06:39 [ Bonuspunkt      ] [ fiws|meh        ] [ jn_             ] [ n0n           ] [ Secutor        ] [ whyhankee      ] 
06:39 [ booo            ] [ fix2fax         ] [ jocafa          ] [ nail_         ] [ Segrel         ] [ willwh         ] 
06:39 [ booyaa          ] [ flagg0204       ] [ Johnny-         ] [ nanashiRei    ] [ seich          ] [ Will|          ] 
06:39 [ brainproxy      ] [ flazz_gone      ] [ johnste         ] [ nav_          ] [ sent_hil_      ] [ winni          ] 
06:39 [ brainv          ] [ Fli-c           ] [ jolo2           ] [ Ned_          ] [ sente          ] [ Wizek          ] 
06:39 [ brettlangdon    ] [ FMJaggy         ] [ Jonathan1cClare ] [ neeky         ] [ Seventoes      ] [ wizonesolutions] 
06:39 [ brianc1         ] [ Fofr_           ] [ JonathanMcClare ] [ neshmi        ] [ sf             ] [ wolfeidau      ] 
06:39 [ brianloveswords ] [ fomatin         ] [ josephg         ] [ netj          ] [ sfurnival2     ] [ wolfspraul     ] 
06:39 [ brimstone       ] [ FooBarWidget    ] [ joshontheweb    ] [ neverendingo  ] [ sg             ] [ wookiehangover ] 
06:39 [ brownbathrobe   ] [ Franz__         ] [ joshskidmore    ] [ Nexen         ] [ Shadda         ] [ WorkingClassDev] 
06:39 [ brycebaril      ] [ frdmn           ] [ joshthecoder    ] [ nicholasf     ] [ Shadowized     ] [ wpreul         ] 
06:39 [ Bubo            ] [ freewil         ] [ joukokar        ] [ niclone       ] [ shanejonas     ] [ wutz           ] 
06:39 [ buckstabu       ] [ fu9ar           ] [ jp232           ] [ nicod         ] [ shanlar        ] [ wyan           ] 
06:39 [ buritica        ] [ Furai           ] [ JPT             ] [ niftylettuce  ] [ shanse         ] [ wycats_        ] 
06:39 [ bwall           ] [ Fuu             ] [ jso             ] [ niggler       ] [ shapeshe1      ] [ XBOCT          ] 
06:39 [ Bwild           ] [ Fuu``           ] [ jstout24        ] [ NimeshNeema   ] [ shapeshed      ] [ xorox90        ] 
06:39 [ C0deMaver1ck    ] [ fwg             ] [ juho_           ] [ ninegrid      ] [ shoky          ] [ xSmurf         ] 
06:39 [ candlejackson   ] [ Gabriel403      ] [ juliangruber    ] [ ningu         ] [ simius_        ] [ xtsee          ] 
06:39 [ caolanm_        ] [ gabriel__       ] [ jvolkman        ] [ nlf           ] [ simon^^        ] [ xxblakefailxx  ] 
06:39 [ cburyta         ] [ garann          ] [ jwm             ] [ NoFaTe        ] [ sinclair|net   ] [ xxtjaxx        ] 
06:39 [ cce             ] [ Garrick         ] [ k1ng            ] [ noocx         ] [ sindresorhus   ] [ y3k_           ] 
06:39 [ celogeek        ] [ gbit86          ] [ k308de          ] [ nsm           ] [ SinnerNyx      ] [ Yaakov_        ] 
06:39 [ cgsawtell       ] [ gdbz            ] [ ka2n            ] [ nsno          ] [ siong1987      ] [ yacks          ] 
06:39 [ cha0s           ] [ geb_            ] [ kafitz          ] [ nuba          ] [ sir_tyri1n     ] [ yano           ] 
06:39 [ chapel          ] [ gf3             ] [ kai             ] [ nuckrophilia  ] [ sirecote       ] [ yawnt          ] 
06:39 [ chayin_         ] [ ghoti           ] [ Kaimei          ] [ nutcase       ] [ SirFunk        ] [ yhpark_talk____] 
06:39 [ Cheery          ] [ gildean         ] [ Kaltiz          ] [ nyuszika7h    ] [ six            ] [ yjmsf20        ] 
06:39 [ cheese1756      ] [ gildo           ] [ kanzure         ] [ oblio         ] [ Sixmsj         ] [ yogurt_truck   ] 
06:39 [ chiel           ] [ gkatsev         ] [ kborchers       ] [ odin_         ] [ skebcio        ] [ YoY            ] 
06:39 [ chjj            ] [ GlitchMr        ] [ kc8qvp          ] [ odyniec       ] [ skoude         ] [ yuwang         ] 
06:39 [ chomwitt        ] [ gluxon          ] [ kelt            ] [ ofan          ] [ slacko_        ] [ yuya           ] 
06:39 [ ChrisAnn_       ] [ gnarf           ] [ kenperkins      ] [ ohan          ] [ Slashbunny     ] [ zaheera        ] 
06:39 [ chrisbuchholz   ] [ GoddeR          ] [ Kester          ] [ ohcibi        ] [ slicky         ] [ zaleb          ] 
06:39 [ chrisdickinson  ] [ gorillatron     ] [ kevinfagan      ] [ olegp_        ] [ slurp          ] [ zanea          ] 
06:39 [ chrisdico       ] [ gozala          ] [ kickandrew      ] [ ootje         ] [ Sly            ] [ zaphod1984     ] 
06:39 [ christoffer__   ] [ greeno          ] [ killfill        ] [ optixx        ] [ smlgbl         ] [ zapu           ] 
06:39 [ chxane          ] [ greg5green      ] [ kinabalu        ] [ Orbitrix      ] [ snappy         ] [ Zauberfisch_   ] 
06:39 [ cjm             ] [ Grephix         ] [ Kingdutch       ] [ orospakr      ] [ sneakyness     ] [ Zaxnyd_        ] 
06:39 [ clarkbox        ] [ groundwater     ] [ KiNgMaR         ] [ othiym23      ] [ snet           ] [ zedas          ] 
06:39 [ ClaudioAlbertin ] [ gsf_            ] [ Kjerski         ] [ Outsider_     ] [ Snow-          ] [ zeekay         ] 
06:39 [ clone1018       ] [ gshipley        ] [ klobucar        ] [ over          ] [ socketwiz      ] [ zemm           ] 
06:39 [ coaster         ] [ Guest22624      ] [ koalallama      ] [ overra        ] [ SoF            ] [ zenodub        ] 
06:39 [ Coco`mo         ] [ Guest30675      ] [ kppullin        ] [ owen1         ] [ SomeoneWeird   ] [ Zerot          ] 
06:39 [ codelahoma      ] [ Guest36119      ] [ kraft           ] [ oz            ] [ Sonder         ] [ zhware         ] 
06:39 [ codingkevin     ] [ Guest39539      ] [ krainboltgreene ] [ Pagan         ] [ sordina1       ] [ zivester       ] 
06:39 [ Codynyx         ] [ Guest51847      ] [ krill           ] [ pandark_      ] [ sorensen       ] [ zodiak         ] 
06:39 [ Connorhd_       ] [ Guest52672      ] [ krishagel       ] [ passcod       ] [ SpNg_          ] [ zokeber        ] 
06:39 [ conradev        ] [ Guest57220      ] [ krishagel_      ] [ patrickod     ] [ spresser       ] [ zomg           ] 
06:39 [ context         ] [ Guest61225      ] [ krishna_        ] [ patsToms      ] [ Spudly         ] [ zorzar         ] 
06:39 [ CookieNinja     ] [ Guest69427      ] [ krnflake        ] [ Paul__        ] [ SpX            ] [ zz_runningskull] 
06:39 [ CookieNomster   ] [ Guest7032       ] [ krunc           ] [ pcarrier__    ] [ sr78ger        ] [ zz_silvers     ] 
06:39 [ coolnalu        ] [ Guest70452      ] [ Kudos           ] [ Pengoo        ] [ sriley         ] [ |Freeman|      ] 
06:39 [ Couto           ] [ Guest75672      ] [ kuja            ] [ percival      ] [ stack_         ] [ |Gobo|         ] 
06:39 [ crankycoder     ] [ Guest77781      ] [ kumavis         ] [ petercarr     ] [ stalled        ] 
06:39 [ Crawford        ] [ Guest82317      ] [ kuranai|bnc     ] [ petschm       ] [ standoo        ] 
06:39 [ creationix      ] [ Guest92743      ] [ kuuranne        ] [ ph8           ] [ stbuehle1      ] 
06:39 [ crescend1       ] [ Guest93816      ] [ kzrl_           ] [ PhanLord_     ] [ stef           ] 
06:39 [ crodas          ] [ Guest99026      ] [ L_star___       ] [ PhilK         ] [ StephenS       ] 
06:39 -!- Irssi: #Node.js: Total of 913 nicks [7 ops, 0 halfops, 0 voices, 906 normal]
06:39 -!- Home page for #node.js: http://nodejs.org/
06:39 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
06:40 -!- Irssi: Join to #Node.js was synced in 28 secs
07:07 < dimadima> substack: your shit is great man, thanks for it all
07:26 < ashnur> haha
07:41 < medice> that's what my plumber said
07:45 < sb5134> hi
07:45 < sb5134> hi
07:45 < sb5134> hi
07:46 < ashnur> bye
07:48 < sb5134> hi
07:49 < sb5134> hi
07:49 < sb5134> hi
07:51 < sb5134> hi
07:53 < sb5134> hi
07:53 < sb5134> hi
07:53 < ningu> problem?
07:55 < sb5134> hi
07:55 < sb5134> hi
07:56 < sb5134> hi
07:58 < ashnur> hmm
07:58 < ashnur> i think he responds to every join
07:59 < medice> i have joins ignored so i wouldn't know
08:00 < sb5134> hi
08:00 < sb5134> hi
08:01 < ashnur> medice: what irc client?
08:01 < medice> irssi
08:01 < ashnur> okay
08:01 < sb5134> hi
08:01 < medice> and you use weechat i see
08:01 < sb5134> hi
08:01 < sb5134> hi
08:04 < sb5134> hi
08:07 < sb5134> hi
08:09 < ashnur> medice: yes, and in weechat it is a simple key combination to toggle, so i asked because if you had weechat i could've told you how to check it
08:09 < ashnur> he is most definitely responding to joins
08:09 < sb5134> hi
08:10 < sb5134> hi
08:11 < sb5134> hi
08:15 < sb5134> hi
08:15 < sb5134> hi
08:18 < rom1504> a script or a bot...
08:19 < sb5134> hi
08:19 < sb5134> hi
08:20 < sb5134> hi
08:20 < sb5134> hi
08:21 < sb5134> hi
08:21 < medice> what's the difference
08:22 < sb5134> hi
08:26 < rom1504> well if it's a script there might be someone using the client too (I mean something like an irssi script) whereas if it's a bot nobody use the client
08:27 < sb5134> hi
08:27 < fayimora> sb5134: at least say hi [Name]
08:28 < sb5134> hi
08:28 < sb5134> hi
08:32 < sb5134> hi
08:34 < sb5134> hi
08:34 < sb5134> hi
08:36 < sb5134> hi
08:36 < sb5134> hi
08:37 < sb5134> hi
08:37 < sb5134> hi
08:38 < sb5134> hi
08:39 < sb5134> hi
08:39 < sb5134> hi
08:40 < rom1504> can somebody kick him or something ?
08:44 < sb5134> hi
08:45 < sb5134> hi
08:46 < sb5134> hi
08:49 < sb5134> hi
08:49 < sb5134> hi
08:52 < sb5134> hi
08:54 < fesener_> would somebody help me ? isnt it possible to use bootstrap functions in the tags that are generated by node.js signals ?
08:55 < sb5134> hi
08:57 < sb5134> hi
08:57 < sb5134> hi
08:58 < sb5134> hi
08:58 < sb5134> hi
08:59 < sb5134> hi
08:59 < sb5134> hi
09:01 < sb5134> hi
09:08 < sb5134> hi
09:08 < sb5134> hi
09:09 < sb5134> hi
09:10 < patsToms> sb5134, what are you doin?
09:10 < sb5134> hi
09:10 < sb5134> hi
09:12 < sb5134> hi
09:12 < sb5134> hi
09:13 < sb5134> hi
09:14 < sb5134> hi
09:15 < sb5134> hi
09:16 < sb5134> hi
09:17 < ferz> patsToms: it's a client bug loop for sb5134
09:18 < ferz> can anyone kick it?
09:18 < sb5134> hi
09:19 < ferz> http://paste.scsys.co.uk/260295  Where can I find fs.js?
09:19 < patsToms> isaacbw, konobi, MI6, nexxy, trevnorris, sorry about mention, but can sb5134 be kicked?
09:20 < sb5134> hi
09:20 < patsToms> fearh, http://nodejs.org/api/fs.html
09:20 < sb5134> hi
09:20 < ferz> patsToms: thank you
09:20 < patsToms> fearh, just require('fs')
09:21 < ferz> patsToms: I would like to port npm on DragonflyBSD that it's an OS similar to FreeBSD, but I got that error during make install
09:21 < sb5134> hi
09:22 < ferz> patsToms: so should fs.js source code be in nodejs package?
09:23 < sb5134> hi
09:23 < patsToms> fearh, seems like there is some issue with "TypeError: path must be a string"
09:24 < sb5134> hi
09:26 < sb5134> hi
09:26 < patsToms> and lstat just gives info about system calls
09:27 < ferz> patsToms: so, it's a bug in the make install script execution not in nodejs src.
09:27 < sb5134> hi
09:28 < sb5134> hi
09:28 < ferz> sb5134: Hi, may you shut up your client?
09:28 < sb5134> hi
09:29 < sb5134> hi
09:31 < sb5134> hi
09:32 < PeterNor> How to get my clients IP ????
09:32 < sb5134> hi
09:32 < raduu> from the req
09:33 < raduu> http://stackoverflow.com/a/8107922/971459
09:33 < foofoobar> Hi. I want to build something where a users enters a URL and the web page at this URL is crawled/spidered. 
09:33 < foofoobar> How should I do this in node? As I read there are no threads to use
09:33 < sb5134> hi
09:34 < sb5134> hi
09:34 < ckknight> foofoobar: just use the asynchronous apis.
09:34 < sb5134> hi
09:34 < foofoobar> ckknight, asyn apis?
09:34 < ckknight> there's not much magic. Because they're async, you can do multiple at once, without threads.
09:35 < foofoobar> ckknight, I think I have to put that crawling in a background job and let the user wait until it is finished, because when I just let the request wait
09:35 < PeterNor> This gives me an IP address different from what whatismyip.com
09:35 < foofoobar> the browser might kill the connection because of a timeout
09:35 < PeterNor> request.connection.remoteAddress
09:35 < raduu> PeterNor did you also check the X-Forwarded header
09:35 < foofoobar> PeterNor, if you are requesting from local, you might get your local ip adress
09:36 < PeterNor> yes raduu
09:36 < ckknight> foofoobar: putting it in a background task won't make it take any more or less time, likely.
09:36 < foofoobar> ckknight, thats right, but lets say it needs about 40secs
09:36 < foofoobar> Then the browser might kill the connection at 30secs
09:37 < foofoobar> so when I put it in the background and redirect the user to a page which periodically checks if the background job is ready
09:37 < PeterNor> To test , i took diff sys and started testing ... I'm not getting
09:37 < ckknight> foofoobar: doing a web crawl as a response to a user request is bad karma
09:37 < foofoobar> he is not going to get a timeout
09:37 < ckknight> foofoobar: yeah, you could do that.
09:37 < PeterNor>  X-Forwarded-for : I'm getting null
09:37 < foofoobar> so the steps would be: 1) users enters url 2) url-crawling is put in the background 3) user is redirect to a page which periodically checks if job is finished
09:38 < foofoobar> so how to make this background jobs?
09:38 < raduu> what doest remoteAddress give you
09:38 < ckknight> you immediately jump to background job, unnecessarily.
09:39 < foofoobar> How do you mean this?
09:42 < ashnur> anyone has a clue what "Referencepath" might be?
09:42 < sb5134> hi
09:42 < ashnur> google isn't finding anything related
09:42 < sb5134> hi
09:43 < PeterNor> raduu, I'm getting an IP which is different completely different 
09:44 < ferz> ckknight: "putting it in a background task won't make it take any more or less time, likely"  in a single core I agree with you but in a multicore system putting it in background on another thread or process can do the same work in less time.
09:45 < ckknight> ferz: it depends on what kind of work he's doing.
09:45 < ckknight> i.e. what kind of crawling
09:46 < ferz> ckknight: just parse a complex page can be cpu intensive and do that in a local core cache/ram can be good enough to improve execution time.
09:46 < sb5134> hi
09:47 < foofoobar> ckknight, can you give me a link or something about this background jobs?
09:47 < ckknight> foofoobar: http://nodejs.org/api/child_process.html
09:47 < sb5134> hi
09:48 < sb5134> hi
09:48 < foofoobar> ckknight, but this calls an external program
09:48 < ckknight> yes, that's how you do it in node
09:48 < foofoobar> I want to just put some code in the background
09:48 < ckknight> child_process.fork() might do what you want
09:49 < sb5134> hi
09:51 < ferz> foofoobar: I usually when I need to do complex and long running task I just split presentation and model: I enqueue the request on a queue like (activemq, gearman or such) then some queue consumers will do the job on same server or in multi node cluster, then they just write their result and presentation show it as soon as it's available.
09:52 < foofoobar> ferz ok
09:52 < sb5134> hi
09:52 < ferz> foofoobar: so it's not a single process, it's a multi service application running multiple process.
09:52 < foofoobar> ok
09:53 < ferz> s/multiple process/multiple processes/
09:53 < sb5134> hi
09:53 < sb5134> hi
09:53 < sb5134> hi
09:55 < sb5134> hi
09:55 < sb5134> hi
09:57 < sb5134> hi
09:57 < sb5134> hi
09:59 < sb5134> hi
09:59 < sb5134> hi
10:00 < sb5134> hi
10:01 < sb5134> hi
10:02 < sb5134> hi
10:03 < sb5134> hi
10:03 < sb5134> hi
10:03 < PeterNor> I there an Echo ?
10:03 < sb5134> hi
10:04 < sb5134> hi
10:05 < PeterNor> I didnt know How to get client IP
10:05 < sb5134> hi
10:05 < PeterNor> This is disgusting
10:05 < sb5134> hi
10:06 < sb5134> hi
10:06 < sb5134> hi
10:07 < PeterNor> Mod are you on Tour ?
10:07 < rakl> lol
10:09 < sb5134> hi
10:09 < PeterNor> isaacbw ???
10:09 < sb5134> hi
10:09 < PeterNor> a
10:12 < sb5134> hi
10:16 < sb5134> hi
10:18 < ckknight> sb5134: shut up
10:18 < ckknight> we saw you say "hi" the first time
10:18 < ckknight> no one cared then, no one cares now. I'm only responding due to your annoyance.
10:19 < sb5134> hi
10:21 < foofoobar> How do I implement a "layout" behaviour with ejs in expressjs? Seems like using a layout file is deprecated in express3
10:21 < sb5134> hi
10:22 < faern> Hello. Could someone point me to some information on how I'm supposed to link js-files in my output document. I'm using Express and Jade. I mean, is there some standard way to make a module included in the html?
10:22 < sb5134> hi
10:23 < PeterNor> sb5134 Who the Heck are you ?
10:23 < faern> A bot I guess?
10:26 < faern> I know I can use: script(src='/whatever.js')
10:26 < sb5134> hi
10:26 < sb5134> hi
10:26 < faern> But is there not any standard way to include whatever version of a module I'm using?
10:26 < faern> Say I have done: npm install ws. And now I want to be able to use ws on the client
10:29 < sb5134> hi
10:30 < sb5134> hi
10:32 < sb5134> hi
10:32 < sb5134> hi
10:32 < ckknight> isaacbw, konobi, MI6, nexxy, trevnorris: sorry to bother you, but can one of you do something about sb5134?
10:33 < sb5134> hi
10:33 < sb5134> hi
10:33 < timoxley> anyone got any idea why my permissions seem funny when executing scripts via npm run?
10:33 < ashnur> why don't you just ignore him? :)
10:33 < ashnur> or it*
10:33 < sb5134> hi
10:33 < ashnur> because this isn't a person.
10:33 < ckknight> I suppose that would be effective
10:33 < timoxley> i.e. https://groups.google.com/forum/?fromgroups=#!topic/nodejs/f_mFpm76XaE
10:34 < ckknight> it feels so heartless, though
10:34 < ckknight> like ignoring a person on the side of the street when instead we can kick them out of town
10:36 < ashnur> :D
10:38 < sb5134> hi
10:42 < sb5134> hi
10:42 < timetocode> hi2u2 sb5134 bot
10:45 < sb5134> hi
10:46 < sb5134> hi
10:46 < sb5134> hi
10:46 < sb5134> hi
10:49 < sb5134> hi
10:49 < sb5134> hi
10:52 < sb5134> hi
10:57 < sb5134> hi
10:57 < sb5134> hi
10:58 < sb5134> hi
10:58 < sb5134> hi
11:00 < sb5134> hi
11:03 < sb5134> hi
11:04 < sb5134> hi
11:08 < SomeoneWeird> sb5134, stop it
11:09 < gildean> SomeoneWeird: it's obviously a bot or a script that says hi after someone joins
11:09 < aandy> how is that idiot not perm banned yet? :>
11:09 < SomeoneWeird> could be someone silly
11:09 < sb5134> hi
11:09 < SomeoneWeird> or not.
11:10 < sb5134> hi
11:10 < sb5134> hi
11:10 < aandy> setInterval(function() { irc.announce("node.js", "hi"); }, 10000); ?
11:11 < aandy> rule #1 of writing bots: don't screw up
11:11 < aandy> rule #2 of writing bots: don't leave unattended while debugging
11:11 < aandy> also, DBAA
11:11 < SomeoneWeird> aandy, more like irc.on('join', function(channel, nick) { irc.say(channel, 'hi'); })
11:12 < sb5134> hi
11:12 < aandy> i have join/leave/quit ignored  here, so all i see is walls of hi
11:12 < aandy> :>
11:12 < SomeoneWeird> ah
11:12 < SomeoneWeird> well, it's everytime someone joins, as gildean said :)
11:13 < aandy> http://logs.nodejs.org/node.js/latest hehe 
11:13 < SomeoneWeird> ಠ_ಠ
11:14  * aandy lights torch
11:14 < aandy> :(
11:14 < timetocode> im addicted to callbacks
11:15 < ashnur> btw, this hi thing started ~210 minutes ago
11:15 < sb5134> hi
11:15 < aandy> ironic how a guy saying hi a thousands times is not welcome
11:15 < ashnur> i don't find it ironic =)
11:16 < aandy> or, 148 rather
11:16 < ashnur> lol
11:16 < timetocode> as an amateur functional programmer, i often find myself reading critcisms of node's callback spaghetti, but i have no basis by which to know if the critcism is valid
11:16 < sb5134> hi
11:16 < aandy> hi indeed
11:16 < timetocode> what do ppl think of the callbacks and the "middleware" concept
11:16 < ckknight> code is better laid out as lasagna, not spaghetti
11:17 < sb5134> hi
11:17 < substack> timetocode: http://callbackhell.com/
11:17 < aandy> timetocode: if you don't want callbacks, then js is generally not for you. there are alternatives like promises, but for the most part it's a different way of programming than blocking languages. comparing it to blocking languages is not really productive
11:17 < substack> you probably don't need middleware
11:18 < timetocode> you can name a closure?! 
11:19 < ckknight> yeah
11:19 < ashnur> =)
11:19 < ckknight> note that it causes weirdness in IE
11:19 < ckknight> but it's perfectly fine in node.js
11:19 < sb5134> hi
11:19 < timetocode> my code was so glorious (in a bad way) before someone pointed me to async
11:20  * ckknight likes promises
11:21  * aandy likes kept promises
11:24 < timetocode> aandy, i think i like the callbacks tooo much... my C# and lua are now full of them after a month with node
11:24 < ckknight> in lua, that's fine. in C#, that has await/async now
11:25 < aandy> i kind of despise them in C#, but sure
11:26 < timetocode> maybe what im wrong about what im calling a callback, does something like this count? function addFive(num, callback) { num+=5; callback(num); }
11:26 < ckknight> that's fine, but unnecessary since it's sync anyway
11:26 < aandy> by definition, sure. what i'd generally call callback is when the function returns immidiately, and has a function assigned to run later
11:26 < ckknight> and generally you should use the (err, result) pattern
11:27 < sb5134> hi
11:27 < aandy> DUDE
11:27 < sb5134> hi
11:27 < sb5134> hi
11:28 < timetocode> the reason i started using a pattern like that without any pieces of code that legitimately take up time, was that i wanted to add small bits of functionality to other functions while still feeling decoupled
11:29 < sb5134> hi
11:29 < timetocode> im may be missing a better and more fundamental pattern for cases like that
11:31 < sb5134> hi
11:31 < aandy> concepts are good. overuse of concepts where they don't apply, is not good. common sense shouldn't be left out
11:31 < aandy> that wasn't directed at your function, timetocode. more of a general "tip"
11:31 < aandy> goes for all languages
11:31 < sb5134> hi
11:32 < ckknight> if a chunk of code can be synchronous, it should be synchronous. As soon as you introduce an async element (such as IO), then it should be asynchronous.
11:32 < sb5134> hi
11:32 < ckknight> that's generally what I go by
11:32 < hipsterslapfight> wonder what happens to the sb5134 on a netsplit ...
11:32  * ckknight slaps hipsterslapfight
11:33 < timetocode> i have some lua that looks nearly identical to js where im applying the same concept if anyone has any suggestions: http://pastebin.com/v9YfamCk
11:33 < aandy> hipsterslapfight: it becomes someone elses problem
11:33 < aandy> :p
11:33 < sb5134> hi
11:33 < aandy> momentarily bliss
11:33 < ckknight> timetocode: I see too many commas
11:33 < hipsterslapfight> ckknight: not to mention that running sync code inside async loops can cause real issues
11:33 < sb5134> hi
11:33 < ckknight> I think you mean the other way around, hipsterslapfight
11:33 < ali_j> hi guys, anybody knows how can i extract the http auth username and password from a responds ?
11:33 < hipsterslapfight> no, both works
11:34 < hipsterslapfight> maybe it was a side effect of the async library itself but i had some real issues mixing sync and async code inside async loops
11:34 < ckknight> hipsterslapfight: I see nothing wrong with sync code inside async loops.
11:34 < aandy> ali_j: it's the Authentication header. base64 encoded "user:pass"
11:34 < ckknight> async code inside sync loops = a nightmare
11:34 < hipsterslapfight> this is js surely you mean === :v
11:34 < aandy> authorization* sorry
11:34 < ckknight> this is IRC, hipsterslapfight
11:35 < aandy> e.g. Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
11:35 < sb5134> hi
11:35 < ali_j> aandy: thanks man, do you know how i can do that in express? res.header.??
11:35 < aandy> maybe he keeps looping hi until someone actually says hi back? you know, like the indian in one flew over the cuckoos nest?
11:36 < timetocode> im not trying to do anythign async with my these particular callbacks, is that a red flag?  I'm usingthe callback to keep the code DRY, is basically a functional version of inheritence
11:36 < ckknight> aandy: pretty sure he's just a bot
11:37 < ckknight> timetocode: yeah, since JavaScript lacks TCO, you could run into stack issues.
11:37 < hipsterslapfight> yeah that's what i mean ckknight
11:37 < hipsterslapfight> stack issues
11:37 < aandy> ali_j: exactly. then extract the portion after Basic and base64 decode it (and then split on ':' to get an array of [user, pass])
11:37 < sb5134> hi
11:37 < hipsterslapfight> maximum callback size exceeded or whatever it is
11:37 < sb5134> hi
11:37 < sb5134> hi
11:37 < aandy> ckknight: we'll never know for sure o_O
11:38 < timetocode> i thought TCO was only an issue with recursion?
11:38 < ckknight> timetocode: it usually is, since it's so easy to fix recursion with TCO. For normal calls, imagine if you get yourself into a mess where you've called 500 nested callbacks
11:38 < ckknight> boom, app breaks
11:39 < ckknight> also, the fact that you simply do have to save the local stack each time is extra pain on the VM
11:39 < ckknight> as compared to doing it synchronously which would just be a `return`
11:40 < aandy> ali_j: btw, express has a function (middleware) called express.basicAuth
11:40 < aandy> or rather, connect does
11:40 < aandy> http://www.senchalabs.org/connect/middleware-basicAuth.html
11:40 < sb5134> hi
11:41 < sb5134> hi
11:42 < sb5134> hi
11:42 < sb5134> hi
11:42 < sb5134> hi
11:43 < sb5134> hi
11:45 < sb5134> hi
11:45 < sb5134> hi
11:46 < sb5134> hi
11:49 < sb5134> hi
11:50 < sb5134> hi
11:50 < sb5134> hi
11:50 < sb5134> hi
11:51 < sb5134> hi
11:52 < sb5134> hi
11:53 < sb5134> hi
11:56 < sb5134> hi
11:56 < sb5134> hi
11:57 < sb5134> hi
11:57 < sb5134> hi
11:57 < sb5134> hi
11:57 < sb5134> hi
11:58 < sb5134> hi
12:01 < sb5134> hi
12:01 < sb5134> hi
12:02 < sb5134> hi
12:03 < sb5134> hi
12:05 < sb5134> hi
12:06 < sb5134> hi
12:07 < sb5134> hi
12:08 < sb5134> hi
12:09 < sb5134> hi
12:10 < sb5134> hi
12:12 < sb5134> hi
12:13 < mstefanko> testing your script?
12:13 < sb5134> hi
12:13 < sb5134> hi
12:13 < mstefanko> on an amazon instance, interesting
12:14 < ashnur> i think he is testing our temper
12:14 < ashnur> for 4 hours now
12:14 < mstefanko> it's just a script
12:14 < ashnur> is it? :D
12:15 < mstefanko> or some meta/troll experiment
12:15 < ashnur> i was certain there is someone who looks for a joins and types h,i, enter every time he sees one :D
12:15 < sb5134> hi
12:15 < sb5134> hi
12:16 < innociv> ahahaha
12:16 < mstefanko> oh he says it everytime somebody joins?
12:16 < sb5134> hi
12:16 < mstefanko> ( i have join notifications turned off )
12:16 < ashnur> mstefanko: yes.
12:16 < mstefanko> i guess isaacbw konobi MI6 nexxy or trevnorris could take care of him
12:16 < ashnur> yeah, me too, but the pattern was kinda obvious, and i can toggle on/off join parts in weechat, so it was easy to see
12:17 < ashnur> mstefanko: everyone can ignore him easily. yet no one does :D
12:17 < mstefanko> oh good idea * Added *!*sbtester@ec2-54-251-241-151.ap-southeast-1.compute.amazonaws.com to ignore list
12:17 < ashnur> =)
12:19 < sb5134> hi
12:20 < sb5134> hi
12:23 < sb5134> hi
12:23 < sb5134> hi
12:23 < sb5134> hi
12:23 < sb5134> hi
12:24 < sb5134> hi
12:24 < sb5134> hi
12:25 < sb5134> hi
12:25 < sb5134> hi
12:25 < sb5134> hi
12:25 < sb5134> hi
12:25 < sb5134> hi
12:27 < sb5134> hi
12:28 < sb5134> hi
12:29 < sb5134> hi
12:29 < sb5134> hi
12:30 < sb5134> hi
12:32 < sb5134> hi
12:33 < sb5134> hi
12:36 < sb5134> hi
12:38 < sb5134> hi
12:38 < sb5134> hi
12:38 < PeterNor> Is node.js is in 0.2 as a current version?
12:39 < sb5134> hi
12:39 < Trudko> Guys I would like to reproduce this pattern but without using requirejs http://jurberg.github.io/blog/2013/04/10/express-requirejs-controllers/ any tips?
12:40 < sb5134> hi
12:40 < sb5134> hi
12:41 < SomeoneWeird> PeterNor, the current node version is 0.10.x
12:41 < SomeoneWeird> 0.2 is very very very old
12:42 < PeterNor> Really SomeoneWeird ??? ... I couldn't get IP address in 0.10.x :D .... I couldn't find a single answer that fill the bill.
12:42 < SomeoneWeird> you couldn't get ip address?
12:42 < SomeoneWeird> what?
12:43 < PeterNor> yes
12:43 < PeterNor> All it shows the local ip
12:43 < PeterNor> and undefined for most
12:43 < sb5134> hi
12:43 < PeterNor> undefined
12:44 < PeterNor> undefined
12:44 < sb5134> hi
12:44 < PeterNor> undefined
12:44 < PeterNor> undefined ip address
12:44 < PeterNor> 192.168.2.1 your IP haha ...I'm unable to get remote client IP
12:45 < PeterNor> What a pain
12:49 < PeterNor> Unable to get IP
12:49 < PeterNor> undefined ip address
12:49 < PeterNor> undefined ip address
12:49 < PeterNor> undefined ip address
12:49 < PeterNor> undefined ip address
12:49 < PeterNor> undefined ip address
12:49 < PeterNor> undefined ip address
12:50 < sb5134> hi
12:50 < sb5134> hi
12:51 < sb5134> hi
12:53 < sb5134> hi
12:54 < sb5134> hi
12:54 < sb5134> hi
12:54 < sb5134> hi
12:55 < sb5134> hi
12:57 < sb5134> hi
12:58 < sb5134> hi
12:58 < sb5134> hi
12:59 < sb5134> hi
13:00 < sb5134> hi
13:00 < sb5134> hi
13:01 < pandark_> sb5134: I may be wrong but I think this is not the best chan to test this kinda-flooding bot
13:01 < sb5134> hi
13:02 < sb5134> hi
13:04 < sb5134> hi
13:06 < sb5134> hi
13:09 < sb5134> hi
13:10 < sb5134> hi
13:13 < sb5134> hi
13:14 < sb5134> hi
13:15 < sb5134> hi
13:17 < sb5134> hi
13:17 < sb5134> hi
13:17 < sb5134> hi
13:18 < Steve^> If I'm looking to make a simple webserver with some easy-to-configure routing, would express be a good choice? (I'm think the equivalent of Python's flask)
13:19 < sb5134> hi
13:19 < sb5134> hi
13:19 < sb5134> hi
13:19 < sb5134> hi
13:19 < sb5134> hi
13:20 < sb5134> hi
13:20 < sb5134> hi
13:22 < sb5134> hi
13:22 < sb5134> hi
13:22 < daedeloth> I'm writing a module that uses socket.io
13:22 < daedeloth> how can I append a handler to a http server?
13:23 < sb5134> hi
13:23 < daedeloth> so that I only react on /remote/control, otherwise the application's handler takes over
13:24 < daedeloth> is it as simple as server.on ('request', function () {}); ?
13:24 < sb5134> hi
13:24 < sb5134> hi
13:24 < sb5134> hi
13:24 < sb5134> hi
13:24 < sb5134> hi
13:25 < rom1504> come on please kick sb5134
13:25 < sb5134> hi
13:25 < sb5134> hi
13:25 < gheraint> sb5134, is that all you say?
13:25 < sb5134> hi
13:25 -!- mode/#Node.js [+o gheraint] by ChanServ
13:25 -!- mode/#Node.js [+q *!*@ec2-54-251-241-151.ap-southeast-1.compute.amazonaws.com] by gheraint
13:25 -!- mode/#Node.js [-o gheraint] by ChanServ
13:26 < rom1504> yes it is all he has said so far
13:26 < aandy> thanks, gheraint 
13:26 < gheraint> that's over
13:26 < gheraint> please inform the regular ops when they appear
13:26 < Th0masR0ss> Yay
13:26 < rom1504> thanks :)
13:41 < daedeloth> so, let me rephrase my question, when I have a http server
13:41 < daedeloth> and two listeners for a request
13:41 < daedeloth> how do I avoid that both listeners react?
13:51 < daedeloth> well, simply, what I want to achieve is: when calling /webremote/* I want to send a response from my new module, in any other case I want my app listener to handle the response
13:51 < daedeloth> in the same way socket.io works, but I can't figure how it does it's magic
14:00 < daedeloth> ok, figured it out
14:01 < aandy> ckknight: congratulations on gorillascript btw
14:01 < ckknight> thanks
14:01 < ckknight> did you find out from the ycombinator news thing?
14:02 < aandy> yeah checked it just now. haven't had a chance to try it out yet
14:04 < ckknight> someone posted that story without even telling me beforehand, now I have all these people in my IRC channel
14:04 < ckknight> it's freaky
14:05 < alasi> cknight this channel?
14:05 < ckknight> no, #gorillascript
14:05 < alasi> Whats that?
14:05 < ckknight> !gorillascript
14:06 < ckknight> oh yeah, ecmabot's not here
14:06 < alasi> !gorillascript
14:06 < alasi> I'll check it out
14:06 < ckknight> http://ckknight.github.io/gorillascript/
14:06 < alasi> a compiled lang?
14:06 < nsno> ckknight: some of the comments on how the documentation is structured are worth looking at btw
14:06 < ckknight> oh yeah
14:06 < nsno> it does take a long time to get to the really good stuff
14:07 < alasi> false + false === 0
14:07 < alasi> false + true === 1
14:07 < alasi> true + true === 2
14:07 < ckknight> I wanted to restructure it before I publicized it to various news places
14:07 < alasi> null + null === 0
14:07 < alasi> ^makes sense
14:07 < nsno> but congratulations, it looks great.
14:07 < ckknight> alasi: of course it does.
14:07 < alasi> haha
14:07 < ckknight> [] + []
14:07 < ckknight> mmmhmm
14:07 < alasi> You said they were oddities
14:07 < ckknight> I know
14:07 < ckknight> they're terrible
14:07 < ckknight> [] == ![] is one of my favorites
14:08 < alasi> I've tried to build languages really stupidly, but a compiled language sounds better than a run language
14:08 < alasi> I could make a brainfuck that compiles to js
14:09 < alasi> not I in terms of confidence though
14:09 < nsno> You could also drink a litre of bleach. Neither are great ideas though :P
14:09 < alasi> yea
14:09 < alasi> but just look at http://esolangs.org
14:09 < ckknight> I've made a brainfuck that compiles to JS
14:09 < ckknight> it's pretty pointless.
14:10 < nsno> ckknight: have you built anything significant with gorillascript yet?
14:10 < alasi> haha
14:10 < ckknight> well, GorillaScript
14:10 < ckknight> :P
14:10 < alasi> http://esolangs.org/wiki/Zetaplex
14:10 < ckknight> <.<
14:11 < ckknight> >.>
14:11 < nsno> :P
14:11 < alasi> haha
14:11 < ckknight> I'm writing an IRC client in it now.
14:11 < alasi> Whoa
14:11 < ckknight> not a huge deal
14:11 < alasi> But the connections..
14:11 < alasi> How is it routed?
14:11 < ckknight> just socketstream, irc library, everyauth for initial authentication, mongodb for storage
14:11 < alasi> IRC is it's own protocol
14:11 < alasi> or its socket based!
14:12 < ckknight> https://github.com/martynsmith/node-irc
14:12 < alasi> oh
14:12 < ckknight> I use that to connect to IRC
14:12 < alasi> So you DO need a server though
14:12 < ckknight> socketstream to talk between browser and server
14:12 < ckknight> yes, I do.
14:12 < ckknight> I want the server to run the IRC connection
14:12 < ckknight> and do the logging and all that
14:12 < alasi> Cause when you said client I thought you meant CLIENT
14:12 < alasi> :P
14:12 < ckknight> be able to have as lightweight a possible frontend
14:12 < alasi> cool
14:12 < ckknight> even if you have a bunch of connections or months worth of logs
14:13 < ckknight> Linkinus takes up 500 MiB for me, consistently
14:13 < ckknight> way too much for my liking
14:13 < alasi> Is it something new or are you experimenting?
14:13 < nsno> Law of Software Development #15: Everything will eventually either implement or be implemented as an IRC client
14:13 < alasi> haha
14:13 < alasi> Even brainfuck?
14:13 < nsno> https://github.com/SirCmpwn/bf-irc-bot
14:14 < alasi> LOOL
14:14 < alasi> CLICK HERE IF YOU JUST WANT TO READ THE CODE thank you
14:14 < ckknight> nsno: which law is it that "everything that can be written in JavaScript will be written in JavaScript"
14:14 < nsno> Atwood's
14:15 < alasi> The compiler does some of the work though
14:15 < alasi> it seems
14:15 < alasi> afk breakfast
14:22 < Industrial> Anyone use browserify and a compile to js language like coffeescript/livescript? I can't seem to load a module: https://gist.github.com/Industrial/abc9cd954dbec20af3e0
14:22 < Industrial> I guess I should not load and pack all the code I require on the server side in the helpers, anyway.
14:27 < AdamMagaluk> daedeloth: You can filter based on the request url on the request object. req.url. It makes it easier if you parse with require('url') http://nodejs.org/api/url.html
14:39 < alasi> back
14:52 < jcamins> Are there any paginator modules people would particularly suggest that are usable both client-side and server-side? My models are currently stored in MySQL and accessed via node-mysql, but I'll be switching to Titan/node-gremlin, and I'm using express on the server.
14:54 < jcamins> Actually, I'd be interested in server-side-only paginators if anyone has any recommendations there, too.
14:55 < Industrial> When I run `browserify -c 'livescript -cb' static/js/app.ls`, why is static/js/lib/helpers.ls not recognized and a require fails?
14:57 < Industrial> if I compile that file first
14:57 < Industrial> and then try to run browserify, it will find the module, but then its JS and not LS, and it will try to compile the JS to JS
15:05 < alasi> Stupid question: Where should I put my client side js's and how are they linked in index.html
15:06 < ckknight> they're linked by a <script> tag. I tend to stick them in public/js/*.js
15:06 < ckknight> where public is a staticly-served directory
15:06 < bogus__> hello guys, this is not a node question but you may know the answer
15:06 < bogus__> i'm trying to minify different js script in a single one
15:06 < bogus__> how to handle the different licences that comes for each one?
15:07 < bogus__> they are also created by different authors
15:07 < alasi> ckknight, would they be linked in index.html like "<script src="public/js/.js" or "script src=js/js"?
15:09 < ckknight> alasi: the latter, likely.
15:10 < alasi> oh
15:10 < alasi> Weird but ok
15:10 < Industrial> ckknight: How are you packaging assets?
15:10 < Industrial> ckknight: I guess now with web components/polymer, that's no longer a real issue
15:10 < ckknight> for the most part, all js gets compiled to a single file, all css to a single file
15:10 < ckknight> that solves the brunt of it
15:10 < ckknight> ideally that should be exported to a CDN
15:11 < jcamins> alasi: you can map public/ however you want using aliases/rewrite rules/base paths in your web server.
15:11 < alasi> For the heroku cedar stack?
15:12 < jcamins> alasi: oh, that I don't know. Sorry, I didn't realize you were asking about Heroku.
15:12 < ckknight> oh, I dunno about heroku
15:12 < alasi> I would guess so
15:12 < alasi> ...
15:12 < alasi> ...
15:13 < alasi> Coda 2 is so awesone
15:13 < alasi> Serverside js in one pane, index.html in another, preview of index.html, clientside js. And in another TAB is a terminal
15:14 < ckknight> cool
15:14 < alasi> Wait if I do modifications while the server is running then..
15:14 < alasi> Like if I modify my app.js while it's running no big deal?
15:14 < alasi> It's not like im doing databases or anything
15:14 < ckknight> depends if it auto-restarts or not
15:14 < alasi> hmm
15:15 < ckknight> in dev, I have my setup to restart on code changes
15:15 < ckknight> quite handy
15:15 < alasi> Oh
15:15 < alasi> Coda auto-refreshes my index.html
15:15 < alasi> so..
15:15 < jcamins> ckknight: how do you make it do that?
15:15 < ckknight> I use supervisor
15:15 < alasi> Are you not in dev right now? :P
15:16 < alasi> I'm young, so I can do dev and stuff whenever the hell I want
15:16 < alasi> Hmm weird: Cannot GET /index.html
15:16 < alasi> whyy?
15:16 < alasi> ckknight
15:17 < alasi> Cannot GET /index.html
15:18 < jcamins> ckknight: cool, thanks! That looks very useful. And a heck of a lot less annoying than Switch tab + Ctrl-C + up arrow + enter every few seconds.
15:18 < alasi> --__--
15:19 < alasi> must be afk
15:19 < ckknight> alasi: I don't use Heroku
15:19 < alasi> oh
15:19 < ckknight> so I'm out of my depth for your issue
15:19 < alasi> ckknight: Its locally
15:19 < alasi> Im devving locally
15:19 < alasi> Cannot GET /index.html
15:19 < ckknight> so does that mean you're using raw node, express, what?
15:19 < alasi> Express, socketsio
15:20 < alasi> Same script as another thing that DID work
15:20 < alasi> its weird
15:20 < alasi> Index.html is right here with me
15:20 < pachet> obviously its not
15:21 < jdelgado> Whats the problem?
15:21 < pachet> console.log(process.__dirname) wherever you set express.static
15:21 < alasi> hmm?
15:21 < pachet> er, s/process//
15:21 < alasi> app.get('/', function (req, res) {
15:21 < alasi>   res.sendfile(__dirname + '/index.html');
15:21 < alasi> });
15:21 < alasi> ^ serves index.html
15:21 < alasi> works fine in another script
15:21 < jdelgado> Oh, you can't do that
15:22 < alasi> why
15:22 < alasi> I need a different port?
15:22 < alasi> I switched the port same error
15:23 < alasi> jdelgado: same error
15:23 < alasi> jdelgado: why
15:23 < pachet> console.log(__dirname) in that route
15:23 < alasi> pachet: serverside or clientside?
15:23 < alasi> nvm
15:23 < alasi> serverside
15:23 < jdelgado> alasi: I'm pretty sure your __dirname isn't going to be the path to your index, unless you are throwing everything together in one big mess
15:24 < jdelgado> pachet is correct
15:24 < alasi> Its the same route yess
15:24 < alasi> I put the index.html in the root
15:25 < alasi> The folder housing all the stuff
15:25 < alasi> Idk why it works fine in another project
15:25 < alasi> Same exact script
15:25 < alasi> The console log is correct
15:26 < alasi> app.get('/', function (req, res) {
15:26 < alasi>   res.sendfile(__dirname + '/index.html');
15:26 < alasi> });
15:26 < alasi> ...
15:27 < alasi> jdelgado: Should the index.html be in /public?
15:27 < ckknight> yes
15:27 < alasi> but.
15:27 < alasi> ..
15:27 < alasi> ok
15:27 < ckknight> what what in the butt
15:27 < alasi> lol
15:28 < alasi> Cause I served index.html perfectly fine in another project with the same script, npm's, everything
15:28 < pachet> you're running on heroku?
15:28 < alasi> but ok
15:28 < alasi> pachet: no locally
15:28 < pachet> both are local?
15:28 < alasi> whaddya mean?
15:28 < alasi> I never deployed
15:28 < alasi> Just testing down here
15:29 < pachet> post some code, i guess
15:29 < alasi> okey
15:29 < pachet> at this point it's almost certainly user error
15:29 < alasi> app.js:
15:29 < pachet> no
15:29 < alasi> var app = require('express')()
15:29 < alasi>   , server = require('http').createServer(app)
15:29 < alasi>   , io = require('socket.io').listen(server);
15:29 < pachet> in a pastebin
15:29 < alasi> server.listen(8080);
15:29 < alasi> app.get('/', function (req, res) {
15:29 < pachet> not in the channel
15:29 < alasi>   res.sendfile(__dirname + '/index.html');
15:29 < ckknight> !paste
15:29 < alasi> });
15:29 < alasi> console.log(__dirname);
15:29 < alasi> oh
15:29 < ckknight> alasi: don't paste more than one line here
15:29 < alasi> haha ok
15:29 < ckknight> you're a monster.
15:30 < alasi> haha ok
15:30 < jdelgado> Yeah, stuff like that gets you banned around here
15:30 < alasi> Oh :(
15:30 < alasi> Limechat had the paste thing built in
15:30 < pachet> irssi or bust
15:31 < alasi> http://pastebin.com/8WXA7akp
15:31 < alasi> ^Where index.html is in root
15:31 < alasi> so is app.js
15:31 < alasi> js/client.js is root/public/js/client.js
15:32 < ckknight> okay
15:32 < alasi> so..
15:32 < ckknight> there are far better ways to send static files
15:32 < alasi> Its not really static
15:32 < alasi> Since it is sockets
15:32 < ckknight> express.static()
15:32 < pachet> no, it's static
15:32 < jdelgado> 0_0
15:32 < alasi> og
15:32 < pachet> you dont change the markup between requests
15:32 < alasi> oh
15:33 < ckknight> well, express.static(__dirname + "/public")
15:33 < alasi> app.get wont cut it?
15:33 < jdelgado> ckknight: Aren't you supposed to path join that?
15:33 < alasi> ckknight: where does that line go?
15:34 < ckknight> jdelgado: ...yeah, probably.
15:34 < jdelgado> ckknight: :P
15:34 < ckknight> alasi: before app.get
15:34 < alasi> ok
15:34 < ckknight> jdelgado: don't look at me! I'm not supposed to be caught doing stupid things
15:34 < jdelgado> heh
15:34 < ckknight> but really, all current popular operating systems view / as a directory separator
15:34 < ckknight> so it's not the worst thing
15:35 < alasi> ckknight: should it be app.express.static();?
15:35 < jdelgado> It just cleans the __dirname, because sometimes it has a wierd output
15:35 < ckknight> alasi: app.use(express.static(...
15:35 < alasi> uhh
15:35 < alasi> Wut?
15:35 < ckknight> don't make me write your whole app for you.
15:35 < ckknight> jeez
15:35 < alasi> ik ik
15:36 <@isaacbw> oh man I missed the excitement
15:36 < alasi> I'm confused about your proposal
15:36 < jdelgado> isaacbw: Hah!
15:36 < ckknight> app.use(express.static(__dirname + "/public"))
15:36 < alasi> YAY issacbw's here!!
15:36 <@isaacbw> hi
15:36 <@isaacbw> hi hi hi
15:36 <@isaacbw> hi
15:36 < alasi> hi
15:36 < ckknight> it bothers me that excitement and excrement are so similar
15:36 < jdelgado> isaacbw: You got your OP back
15:37 < alasi> isaacbw: My chat demo worked, but I was making another project with virtually the same code an' it said Cannot GET /index.html
15:37 < alasi> Oh wait I know why
15:37 < alasi> wait..
15:37 <@isaacbw> I just wasn't identified with nickerv :P
15:37 < jdelgado> Ah
15:37 < alasi> hahahahaha
15:37 < ckknight> oh dear, alasi's gone mad.
15:38 < pachet> < pachet> at this point it's almost certainly user error
15:38 < alasi> ckknight: My coda 2 had the preview directory already on /index.html
15:38 < alasi> HAHAHAHAHA
15:38 < alasi> IT WORKS NOW
15:38 < alasi> ITS ALIIIVEEEE
15:38 < ckknight> indoor voice, alasi
15:38 < alasi> sorry man
15:38 < jdelgado> What is this community turning into
15:38 < alasi> lol
15:38 < ckknight> something terrible no one could have predicted, jdelgado
15:38 < pachet> jdelgado hang out in #jquery for a while
15:39 < pachet> the fate of all popular frameworks
15:39 < jdelgado> pachet: lmfao! Yeah, that one got deleted from my channel list.
15:39 < jaya> Hello
15:39 < pachet> hi
15:39 < jdelgado> I really liked how people asked how to do math with JQuery.
15:40 < jdelgado> They thought JQuery was the language
15:40 < ckknight> um
15:40 < ckknight> math in jQuery is easy
15:40 < ckknight> $(5).plus(6).val()
15:40 < ckknight> durr
15:40 < jdelgado> 0_0
15:40 < ckknight> you just need to install a few plugins
15:40 < ckknight> based on what operators you need
15:40 < alasi> dafuq
15:40 < jdelgado> this guy
15:41 < alasi> CKknight I tried your line to serve me static content in public/js/
15:41 < alasi> but express is still not defined
15:42 < alasi> :(
15:42 < jdelgado> alasi: Ok, lets use our head. Express is not defined, what does that mean, how can you fix it?
15:42 < ckknight> jdelgado: http://openclipart.org/image/800px/svg_to_png/130795/Trollface.png
15:42 < jdelgado> lmfao
15:42 < alasi> Well, it's not defined because I never declared it apparently
15:42 < alasi> Even though i thought i did
15:42 < ckknight> crisis averted.
15:42 < alasi> haha
15:42 < jdelgado> alasi: So how can you fix it?
15:43 < jdelgado> alasi: You have to learn to start figuring out stuff on your own, or you'll never get anywhere
15:43 < alasi> well..
15:43 < alasi> The var app = require('express')
15:43 < alasi> so
15:43 < ckknight> no, you have require('express')()
15:43 < ckknight> totally different.
15:44 < alasi> so I need to do app = new express() ??
15:44 < alasi> lol
15:44 < ckknight> why would you think you needed `new`?
15:44 < ckknight> if you didn't before
15:44 < alasi> I have no idea
15:44 < jdelgado> jesus, just change express to app on that line and call it a day.
15:44 < pachet> var express = require('express'); var app = express();
15:44 < pachet> next customer
15:44 < alasi> ohh!
15:44 < ckknight> pachet, he was supposed to figure it out on his own
15:45 < jdelgado> ckknight: It was getting painful
15:45 < ckknight> it's like watching a puppy take its first steps
15:45 < jaya> Hello
15:45 < ckknight> note: the puppy may not have legs in this case
15:45 < ckknight> hey, jaya
15:45 < jdelgado> It's like watching a puppy fall down the stairs
15:45 < ckknight> regardless, we can all agree that a puppy is involved.
15:45 < jdelgado> lol
15:45 < pachet> that much is clear
15:45 < ckknight> that much has been established.
15:45 < jaya> Hello
15:46 < alasi> poopy
15:46 < ckknight> you already said hello, jaya
15:46 < alasi> :(
15:46 < jaya> Hello
15:46 < alasi> lol
15:47 < jaya> Hello
15:47 < jdelgado> lets see how long it takes for the ban hammer
15:47 < pachet> jaya wrap it in $()
15:47 < ckknight> isaacbw: you're here, right?
15:47 < jdelgado> pachet: lmfao
15:47 < alasi> yes isaacbw PLEASE help meeeeeeeeeeeeeeeee
15:47 < alasi> haha
15:48 < jdelgado> You're aware that issacbw isn't issacs, right?
15:48 < jaya> Hello
15:48 < ckknight> he has ops and talked about 5 minutes ago
15:48 < ckknight> he wields the power
15:48 < jaya> Hello
15:48 < disorder> hi, I have a little problem:
15:48 < disorder> I have a module which manage the db
15:48 < jaya> Hello
15:49 < disorder> and every module in my app should import that db module
15:49 < disorder> however, every time I need to reconnect to the db
15:49 < jdelgado> Let me stop you there, why are you disconnecting from the db?
15:49 < disorder> since every time a module requires the db module, every info is lost
15:49 < alasi> WHEE it works because I somehow ignored pachet's magical message!
15:49 < jaya> Hello
15:50 < alasi> thank you !
15:50 < jaya> Hello
15:50 < alasi> thank you !
15:50 < jdelgado> nexxy: You around? :)
15:50 < jaya> Hello
15:51 < Stumbler> Does Jaya belong to someone?  I think he's calling introduction() recursively :\
15:51 < disorder> jdelgado: in the db module, I store the db var, however every time I import the db module from a module, the db var is set to null
15:51 < jdelgado> Stumbler: Just a troll, an OP will ban him soon
15:51 < pachet> disorder that sounds unnatural
15:52 < pachet> disorder have some code?
15:52 < disorder> yep
15:52 < jdelgado> Yeah that's not good disorder 
15:52 < disorder> I'll paste it to pastebin
15:52 < jaya> Hello
15:52 < alasi> thanks pachet for that message I somehow missed
15:52 < jaya> Hello
15:52 < jdelgado> Just reference the db module, don't copy it over
15:52 < jaya> Hello
15:52 < jaya> Hello
15:52 < jaya> Hello
15:52 < jaya> Hello
15:52 < pachet> alasi yw
15:52 < pachet> jaya use a closure
15:52 < jdelgado> isaacbw: Your time to shine
15:53 < ckknight> this channel needs a votekick mechanism
15:53 < ckknight> :P
15:53 < jaya> Hello
15:57 < jaya> Hello
15:57 < jaya> Hello
15:57 < jaya> Hello
15:57 < jaya> Hello
15:57 < jaya> Hello
15:57 < jaya> Hello
15:58  * jaya terminated
15:58 < disorder> jdelgado: pachet    http://pastebin.com/cjsTCe43
15:58 < jaya> Watzz Up ? ckknight 
15:58 < disorder> the dbmodule set db in the connect function
15:58 < jdelgado> Just do it out of dbmodule and call it a day
15:59 < disorder> out of dbmodule?
16:03 < jaya> There something wrong with my bot 
16:07 < ckknight> jaya: yes there is. It's not cool to have your bot go haywire in a public channel like this.
16:07 < jdelgado> ckknight: You're getting trolled, he just doesn't want to get banned
16:08 <@isaacbw> oh what
16:08 <@isaacbw> hey
16:08 < ckknight> isaacbw: you have come to the rescue far too late
16:08 <@isaacbw> damn
16:08 < jdelgado> isaacbw: Look at the chat ^ jaya
16:09 < jdelgado> Just spamming Hello for 20min
16:10 <@isaacbw> twenty minutes? HOW LONG HAVE I BEEN ASLEEP
16:10 < jaya> Long Long time isaacbw
16:10 < jdelgado> Most like a half an hour looking at the log
16:10 < jaya> How are you ?
16:10 <@isaacbw> out of coffee and suffering for it
16:11 < jaya> hmmm
16:13 < Hotroot> Is Cluster experimental enough that Child Process is generally preferred for multiple cores?
16:13 < jdelgado> Hotroot: no
16:13 < jdelgado> Hotroot: Cluster is very reliable
16:14 < Hotroot> Oh, cluster uses Child Process. Odd, why not threads?
16:18 <@isaacbw> because node doesn't really have a thread mechanism
16:20 < Hotroot> Hmm. Aside from the memory overhead, I assume it isn't really a problem.
16:21 <@isaacbw> it has to be implemented by someone
16:21 < Hotroot> It says it balances across workers well when they're "accept()"ing on the same resource. I'm guessing that means like .listen() ?
16:24 < tjfontai1e> Hotroot: it was explored, and reverted as it didn't provide as much benefit as was hoped and significantly increased complexity of the code required to maintain it
16:24 -!- mode/#Node.js [+o tjfontaine] by ChanServ
16:25 < Hotroot> tjfontaine: Using threads, or balancing across .listen()?
16:25 <@tjfontaine> threads
16:25 <@tjfontaine> and yes to the listen question
16:26 < Hotroot> Awesome. Still a bit confused on passing sockets though. 
16:32 < Hotroot> For example, when passing a socket. Can the master delete the reference to socket after passing it, and then incur no overhead for that line of communication?
16:39 < EGreg> hey guys
16:39 < EGreg> I remember ryan wanted to make the context follow functions around for better stack traces in async calls
16:39 < EGreg> anything ever happend ith that?
16:46 <@isaacbw> does anyone know of a css normalizing optimizer?
16:46 < jdelgado> isaacbw: As in a prefixer?
16:47 <@isaacbw> something that optimizes your classes to reduce repeated properties
16:47 <@isaacbw> this makes no sense
16:47 <@isaacbw> words are hard
16:47 < jdelgado> oh I know of a reewby one
16:47 <@isaacbw> lol, reewby
16:48 < Hotroot> Hehe
16:48 < jdelgado> https://github.com/rhulse/ruby-css-toolkit
16:48 < jdelgado> that is one
16:50 < pachet> isaacbw maybe look at http://zamez.org/factorcss
16:52 <@isaacbw> css tidy seems to do a lot of silly optimizations
16:52 <@isaacbw> "removes comments"
16:52 < jdelgado> HEY THATS IMPORTANT
16:52 < jdelgado> :P
16:52 <@isaacbw> pachet: ah cool, that's totally what I meant
16:55 <@isaacbw> haskell, nice
16:55 <@isaacbw> no benchmarks though :(
16:55 <@isaacbw> man, look at how tiny that codebase is
16:55 <@isaacbw> haskell 4 lyfe
17:08 < brainv> any recommended soap client?
17:13 < sinclair|net> brainv: working on one
17:19 < Hotroot> So with Cluster, if I have only Master listening on a port, and it passes a socket to a worker, I assume the socket is still a reference to the one in master? Is master getting hit by overhead there?
17:30 < brainv> anyone had problem with soap?
17:35 < pandark_> Don't let it slip. Oh no, did I say it out loud? :P
17:40 < raduu> how do I keep tcp connections alive? 
17:41 < ckknight> you gotta make sure to feed them every day
17:41 < raduu> :)
17:42 < raduu> https://gist.github.com/samsonradu/cf953c298f62af24f95c
17:42 < raduu> how can I make something like this not fail
17:53 < jdelgado> Anyone know a way to get the primary harddrive of a windows machine if it isn't C?
17:53 < jdelgado> IE - if C is a disk drive, how would I know the drive is H
17:53 < jdelgado> Programatically
17:55 <@isaacbw> ask it nicely?\
17:55 < jdelgado> Ah - I'll just regex the enviorment vars :)
17:55 < jdelgado> lol this guy'
17:56 < jdelgado> isaacbw: How is that phone service I sent you? Any good?
17:56 < alasi> Apparently socket.io doesn't like sending objects?
17:56 <@isaacbw> jdelgado: I haven't actually gotten around to trying it out yet
17:56 <@isaacbw> but it looked good 
17:56 < jdelgado> lol nice
17:56 <@isaacbw> I like the "free for development" model
17:57 <@isaacbw> fontdeck does that too
17:57 <@isaacbw> what makes you say that alasi 
17:57 < jdelgado> yeah
17:57 < jdelgado> alasi: Ah it's this guy again
17:57 < alasi> isaacbw: Well IK you can do {poop: smelly} but what about toilet?
17:57 < alasi> toilet.poop = smelly
17:58 < alasi> socket.emit('toiletstatus' toilet)
17:58 < alasi> doesn't like that^
17:58 < alasi> *,
17:58 <@isaacbw> should be fine
17:58 < alasi> huh
17:59 <@isaacbw> they're the same thing
17:59 < alasi> I got a clientside error for socketio itself saying it doesn't like JSON or something like that though isaacbw
17:59 <@isaacbw> semantically at least
17:59 <@isaacbw> maybe share the actual error
17:59 <@isaacbw> that's weird
17:59 < alasi> alright
18:00 < alasi> one moment
18:00 < alasi> isaacbw: socket.io.js:1066TypeError: JSON.stringify cannot serialize cyclic structures.
18:00 < alasi> ^
18:01 < jdelgado> http://lmgtfy.com/?q=json.stringify+cannot+serialize+cyclic+structures
18:02 < alasi> dude
18:02 <@isaacbw> do you know what cyclic means
18:02 < alasi> no
18:03 < alasi> ..
18:03 <@isaacbw> https://en.wikipedia.org/wiki/Circular_reference
18:04 < alasi> so..
18:05 < alasi> How is this relevant to strings/objects?
18:05 < alasi> Cause theyre referencing each other?
18:05 < jdelgado> lol
18:05 <@isaacbw> yup that's it
18:05 < alasi> huh
18:05 <@isaacbw> and you can't serialize that kind of structure into json
18:06 < alasi> Well the value of smelly is a string (poop)
18:06 < alasi> But poop itself is a variable
18:06 < alasi> Referencing to a string
18:07 < alasi> So socket.io isn't smart enough to get the values of some stuff?
18:07 < jdelgado> Hey max, how is it in massachusetts?
18:07 < alasi> haha
18:07 < jdelgado> Specifically Needham
18:07 < alasi> ARE YOU GOING TO FIND ME AND KILL ME, MATE?
18:07 < alasi> whoa
18:07 < jdelgado> and for some reason your UI folder on your localhost is forbidden, gota fix that.
18:08 < alasi> lool
18:08 < alasi> I'm regretting ever doing irc..
18:08 < jdelgado> lol
18:08 < jdelgado> I was just trying to figure out if you were a troll
18:08 < alasi> oh
18:08 < alasi> Like if I was on vpn or something?
18:09 < alasi> or would I respond a certain way?
18:09 < jdelgado> nah dont worry about it
18:09 < alasi> ok xD
18:09 < alasi> How is it in Rennes, france?
18:09 < jdelgado> lmfao
18:10 < jdelgado> was that in reference to me?
18:10 < alasi> oh god
18:10 < alasi> LOOL dynamic IP, eh?
18:10 < jdelgado> Is that really what this IP resolves to?
18:10 < jdelgado> Yeah i'm in the US bruh
18:10 < alasi> I guess.
18:10 < jdelgado> multiple VPN's
18:10 < alasi> Oh
18:10 < jdelgado> It resolves to cali for me
18:10 < alasi> I got a cyberghost subscription code, but I cant figure out how to redeem it
18:11 < alasi> hm
18:11 < alasi> Is there a way for the client to hide his whois info?
18:11 < alasi> realname: Realname Eh?
18:11 < jdelgado> pwnt
18:11 < alasi> lol
18:12 < alasi> wait a sec..
18:12 < alasi> I was lookin at the server info mynad
18:13 < alasi> Well anyway... socket.io
18:16 < alasi> Are you in pratchett....
18:23 < raduu> how can I achieve a tcp keepalive in node? https://gist.github.com/samsonradu/cf953c298f62af24f95c
18:28 < gildean> raduu: http://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay
18:30 < aandy> hi
18:38 < alasi> Dammit
18:38 < alasi>         socket.brodcast.emit('disconnection', cn);
18:38 < alasi>                         ^
18:38 < alasi> TypeError: Cannot call method 'emit' of undefined
18:39 < alasi> whyyyy
18:39 < jdelgado> are you serious right now
18:39 < alasi> lol
18:39 < jdelgado> don't paste every error you get in here
18:39 < jdelgado> you spelt broadcast wrong
18:39 < alasi> sorry
18:39 < alasi> OH!
18:39 < alasi> thank you!
18:39 < alasi> haha sorry
18:39 < jdelgado> it's not funny
18:39 < jdelgado> it's getting annoying
18:40 < alasi> I overlooked the fact that I spelled something wrong..
18:41 < alasi> It's not like i'm interrupting anything either..
18:42 <@isaacbw> pb&j sammich with malk
18:43 < alasi> ...
18:43 <@isaacbw> mmmmm dats tasty
18:43 < alasi> naht as tasty as a bacon lettish tomater sammich
18:44 < Stumbler> alasi: It's a matter of respect, not that everyone is too busy.  Most of the people here have worked very hard to get to their current understanding of node, and technology in general.   I think it's expected by everyone here that you at least attempt solving your own problems first, before asking for us to hold your hand through your learning process.   google should be your first stop, if you dont understand an error or the 
18:44 < Stumbler> documentation.
18:44 < raduu> @gildean but I set the setKeepAlive to true 
18:44 < raduu> https://gist.github.com/samsonradu/cf953c298f62af24f95c
18:44 < jdelgado> Stumbler: Couldn't have said it better myself.
18:45 < Stumbler> I use the term *us* loosely here, since I havnt helped at all of course.    however, if you want a bit of guidance on how to search for help. I would be happy to give you a primer in private message
18:45 < alasi> Stumbler: ok, sorry, thanks
18:46 < alasi> My spaces workflow (mac) put IRC in one space BEFORE my chrome.. so I naturally look up my issue here BEFORE google
18:46 < alasi> I'll rearrange that
18:46 < Kakera> what exactly is the callback passed to http.get and http.request?
18:47 < ferz> I was trying to port npm on DragonFlyBSD and I've tracked the error until this part: http://paste.scsys.co.uk/260386
18:47 < ferz> Can you help me to fix it?
18:52 < Kakera> I just realized that I check for statusCode in my request and don't consume the data if it's anything other than 200
18:52 < Kakera> what's the preferred way to discard the data?
18:52 < Kakera> res.resume() or res.read()
19:00 < MarkVolkmann> Maybe I forgot something really basic. I am trying to create a custom Writable stream. When I do this: var stream = require('stream');
19:01 < MarkVolkmann> I get a Stream constructor, not an object that has Readable and Writable properties.
19:01 < MarkVolkmann> The docs indicate that I should get an object that has those properties.
19:04 < gildean> MarkVolkmann: where does it say that in the docs?
19:05 < MarkVolkmann> http://nodejs.org/api/stream.html refers to stream.Writable. I assumed that means Writable is a property of what require('stream') returns.
19:06 < mbalho> MarkVolkmann: generally speaking require('through') is way easier and achieves the same goals as what you're trying to do
19:07 < MarkVolkmann> I haven't heard of 'through'. What is that?
19:07 < mbalho> MarkVolkmann: a node module
19:08 < gildean> MarkVolkmann: it says that it's a class and right below gives you the way to use it with the new keyword to construct an instance
19:08 < gildean> mbalho: doesn't the stream.Duplex do the same thing tho'?
19:08 < MarkVolkmann> Yes, but stream.Writable is undefined for me. That's the issue I'm trying to get past.
19:09 < Crystalvoid> i am curious .. what is the correct way to have a socket server listen on both ipv4 and v6 .. from searching i found .listen(Port, '::')  but that seems strange
19:09 < MarkVolkmann> I'm using Node 0.10.12.
19:09 < mbalho> gildean: they are different levels of abstraction, most people dont need to know stream implementer details
19:10 < MarkVolkmann> I want to create a Writable stream that is like /dev/null and just ignores whatever is sent to it. I thought I would do this by creating a class that inherits from stream.Writable.
19:10 < gildean> MarkVolkmann: var stream = require('stream'); var writable = new stream.Writable(); should work if you're on a current version
19:11 < gildean> mbalho: that is true
19:12 < MarkVolkmann> Thanks! That works.
19:14 < MarkVolkmann> I see what was causing my confusion. Later in the code I was assigning the result of fs.createReadStream to the variable named stream. That was wiping out what I got from require('stream'). Sorry for the noise.
19:17 < gildean> MarkVolkmann: you should try and lint your code in the future, it'll save you from those kinds of problems
19:18 < gildean> i use jshint myself, it's not as strict about some things
19:20 < alasi> How do I open a serverside repl while the server is running? I tried doing array[0][0] but it didnt work -.0
19:21 < alasi> I gues.. nvm 
19:21 < Hotroot> gildean: +1 to jshint. Way more useful when looking for actual problems
19:22 < Hotroot> Not sure why I targeted that at you.
19:27 < Kakera> what happens if I never consume the data in http.request?
19:29 <@isaacbw> your computer will overheat from the influx of unhandled data
19:30 < Kakera> I didn't notice any memory usage growth
19:30 < Kakera> wouldn't the data be garbage collected together with the response object?
19:30 <@isaacbw> did you check your internal temperature?
19:30 <@isaacbw> your pipelines might burst
19:31 <@isaacbw> and leak into the conduits causing cloggages
19:31 < Kakera> I don't think my VPS provides such data
19:31 <@isaacbw> bastards
19:31 <@isaacbw> send them an angry letter
19:31 <@tjfontaine> which provide?
19:32 <@tjfontaine> *provider
19:32 < Stumbler> gah, I hate cleaning out computers when that happens.  http data is always sticky :\
19:32 < Kakera> leaseweb
19:33 < Kakera> the docs says "you must consume the data from the response object"
19:33 < Kakera> the bold makes it sound serious
19:34 <@tjfontaine> you should .pipe it or, .resume or .on('data' it
19:34 <@tjfontaine> otherwise things will appear to not progress
19:34 <@tjfontaine> well they won't actually progress
19:34 < Kakera> but I don't even listen for 'end'
19:34 < Kakera> I see that I got a bad statusCode, I don't care about the response anymore
19:35 <@tjfontaine> do you .end() it then?
19:35 < Kakera> no
19:35 <@tjfontaine> or a .setTimeout?
19:36 < Kakera> the response object doesn't even have such methods
19:36 <@isaacbw> send them an angry letter
19:36 <@tjfontaine> if you're not reading from the response, and not ending it, then chances are you're leaking file descriptors while the connection stays open
19:36 <@isaacbw> dammit
19:37 < konr> Is there a bin directory with all npm packages I can add to my path?
19:38 < Kakera> leaking file descriptors is bad I guess
19:38 <@tjfontaine> there is ./node_modules/.bin if you install them without -g, but if you install them with -g they go in ${PREFIX}/bin
19:38 < Kakera> but it sounds like a node.js problem
19:39 < Kakera> why doesn't it close the file descriptor when the response gets garbage collected?
19:40 <@tjfontaine> Kakera: it will, but that isn't exactly a defined timeframe, if you know you're done with it you should say "hey, no really go away"
19:41 < Kakera> tjfontaine: you mean if I make say 2000 requests and never consume them, I might run out of file descriptors for some time?
19:41 <@tjfontaine> it's certainly feasible, you should always be explicit in this regard
19:42 < Hotroot> I was going to attempt a little Twitter game, but they limit direct messages to 250 a day =/ Seems really low arbitrary when the tweet limit is 1000.
19:43 < Kakera> why does node need to keep the file descriptor open anyway?
19:44 < Kakera> let's say I get the response object, but I consume the data 15 seconds later. Where is the data during those 15 seconds?
19:45 <@tjfontaine> depends, could be in the kernel, could be in a buffer between libuv and you
19:48 < Kakera> what if the data is several gigabytes
19:48 < Kakera> surely it wouldn't store it all in memory
19:48 <@tjfontaine> read up on how tcp works
19:49 < Kakera> no, this is a node question
19:49 <@tjfontaine> no, it's a tcp question
19:49 < Kakera> it's clear what happens with the old streams
19:49 <@tjfontaine> if libuv isn't reading, then the kernel isn't acking the received packets, meaning the other side isn't sending the rest of the data
19:50 <@tjfontaine> more or less
19:50 < raduu> I cannot manage to keepalive a basic tcp connection, I have .setKeepAlive(true) on both client and server
19:51 < raduu> http://imgur.com/9TCgtBg
19:51 < Kakera> okay, that's what I wanted to know
19:58 < Hotroot> raduu: Does it work if you remove stream.push('footnote')? 
19:59 < raduu> no 
20:03 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:04 < Hotroot> raduu: Try adding stream.read(); after stream.pipe(socket) ?
20:06 < pooya> this is weird. i'm using a delayed logging pattern that i was always using without any issue but it is now causing a "max stack" in my code. can someone take a quick look and tell what i'm doing wrong: http://pastebin.com/JqnjQCQB
20:08 < raduu> Hotroot , it doesn t change anything
20:08 < raduu> http://imgur.com/EOn1gbo
20:08 < raduu> client socket is closed instantly
20:11 < SunMoonStar> Is it correct or incorrect to push dependency modules 
20:14 < Hotroot> raduu: You aren't setting type in net.Socket
20:14 < raduu> meaning
20:21 < Hotroot> raduu: PM'd you to try to reduce the spam a little
20:23 < dooglus> I'm wondering what's a good way of findong out how long it is until next Sunday noon
20:24 < poincare1011> Hi guys. If i have a route, say /login that has some kind of "notice variable" and I need to render the index page, should I just render the index page or redirect to it (and then have the notice variable on the session)?
20:25 < poincare1011> (basically a flash)
20:25 < poincare101> I just identified with NickServ - did you guys get my last message?
20:25 < garbados> poincare101: yep!
20:25 < dooglus> yes
20:26 < poincare101> Alright, thanks.
20:26 < garbados> poincare101: how do you mean "notice variable"?
20:26 < poincare101> garbados: a flash basically. 
20:26 < testBottie01> testBottie01...dude...welcome here!
20:26 < garbados> poincare101: oh, i get it. probably easier to just render index then and there.
20:27 < garbados> not sure if that's bad practice, but it's more straightforward.
20:27 < poincare101> garbados: okay, thanks.
20:27 < qq99> so I'd like to cryptographically secure https://github.com/qq99/echoplexus and I'm not 100% how best to approach it
20:28 < qq99> welcoming all thoughts comments about that / or on the project in general
20:28 < testBottie01> carlosrodriguez...dude...welcome here!
20:28 < garbados> i'm using request to do a reverse proxy to a couchdb instance, and while GETs work, POSTs and PUTs hang indefinitely. Couchdb doesn't acknowledge the receipt of these requests, so i'm not sure if they're even leaving my express app.
20:29 < garbados> i put up an SO question about it here: http://stackoverflow.com/questions/17515981/reverse-proxy-to-couchdb-hangs-on-post-and-put-in-node-js
20:35 < ub|k> hi there
20:36 < ub|k> i was wondering. is there any lib that can automatically make the source code of a module available at the client-side?
20:36 < ub|k> like browserify, but without the bundling step
20:37 < ub|k> i want to include a series of libs in my project that can be used from both sides. i'd like to use npm to install them, but then to be able to include them from the browser
20:38 < qq99> ub|k, it might be easiest just to do it either way, npm install underscore for use in node, bower install underscore for use in client
20:38 < qq99> sorry I know that doesn't answer or address your question
20:39 < ub|k> qq99:  it's ok, thanks anyway :)
20:39 < gkatsev> ub|k: take a look at beef for browserify
20:39 < gkatsev> um... or w/e it is called
20:40 < rhalff> is npm also available for personal use? Or something equivalent, I want to create like 100 tiny packages, but they will be useless for somebody else.
20:41 < gkatsev> rhalff: you can run npm yourself. Or you can just make private packages
20:41 < ub|k> gkatsev:  i can't find anything. i the name of the pkg really 'beef'?
20:41 < substack> ub|k: what's so bad about a compile step?
20:41 < rhalff> gkatsev, ok, will have to setup my own server then?
20:41 < gkatsev> ub|k: don't remember what it's called exactly
20:42 < gkatsev> substack: that's that thing that auto builds browserify and then serves it?
20:42 < substack> gkatsev: beefy
20:42 < substack> but there's also watchify
20:42 < gkatsev> rhalff: well, you probably don't need a whole registry.
20:42 < gkatsev> substack: ah, beefy, I was close.
20:42 < gkatsev> rhalff: you can just write them locally and then use `npm link` to link the modules together
20:43 < ub|k> yeah, but that's a dev server
20:43 < substack> ub|k: `watchify main.js -o bundle.js` and it will recompile your code any time you update a file
20:43 < rhalff> gkatsev, hmz ok
20:43 < ub|k> substack:  yes, but that's not exactly what i want. I'd like to have the functionality that is provided by browserify, but without having it all bundled in a single JS file
20:44 < substack> ub|k: why?
20:44 < gkatsev> sourcemaps?
20:44 < ub|k> substack:  i'd like to use something like require.js to load them asynchronously
20:44 < substack> why?
20:44 < substack> first: don't ever do that ever
20:45 < substack> what does loading files asynchronously buy you specifically?
20:45 < ub|k> substack: because i want to defer loading, and i don't want to load code that i don't need for a particular page
20:45 < gkatsev> ub|k: browserify supports sourcemaps, so you could have one file by in dev tools it looks like many.
20:45 < substack> ub|k: https://github.com/substack/node-browserify#multiple-bundles
20:46 < ub|k> substack: oh, cool, thanks
20:46 < ub|k> that might do the trick
20:48  * rhalff *nah, ofcourse I need a whole npm registry for myself, I'm worth it! :-p*
20:49 < gkatsev> rhalff: lol
20:49 < gkatsev> rhalff: you could run it locally, if you really wish.
20:49 < gkatsev> it's pretty easy if you don't mind getting couch installed
20:49 < meme> strawberry
20:49 < gkatsev> raspberry
20:49 < meme> pineapple
20:50 < gkatsev> that's not a berry
20:50 < mr_luc> sooo ... npm is down, right?
20:51 < terite> I think so, I can't publish and the website is super-slow
20:51 < gkatsev> looks like it's just being slow
20:51 < gkatsev> at least the website itself
20:51 < rhalff> gkatsev, neh on heroku and then after 2 days of tweaking forget I ever installed it, moving on to other ideas I never finish.
20:52 < gkatsev> rhalff: well, running couch whereever it the easiest. But you don't need to run couch.
20:53 < mr_luc> status.npmjs.org shows the registry as ... red. whatever that means.
20:54 < EnosFeedler> im seeing a strange issue that I am hoping someone else has run into. Im using express on a server and in my handler I have to wait a long time before I send any data back to the client (via res.write()). For some reason, my client (also a node.js process, using the request module) is seeing an 'end' and 'close' event on the response object before I ever terminate the request on the server.  Any ideas why this might
20:54 < EnosFeedler> be happening?  I add a setInterval and just start writing "ping" string right away, then the request stays alive until the actual end().
20:54 < gkatsev> mr_luc: red doesn't sound good
20:54 < Alexandria1> Alexandria1...dude...welcome!
20:55 < EnosFeedler> so something, somewhere does not like the "dead air" on the socket
20:55 < meme> pineapple
20:56 < Hotroot> EnosFeedler: Are you setting socket.setKeepAlive(true)? 
20:57 < slava> hi
20:57 < EnosFeedler> no, i am not.  is this something that needs to be set?  I thought that was related to keeping the socket alive _after_ the request is complete
20:57 < EnosFeedler> whereas this is terminating the socket during an in-flight request
20:59 < Hotroot> EnosFeedler: Well it's pretty core, TCP itself is what does the keep-alive stuff unless I'm mistaken
21:00 < EnosFeedler> I see.  i was just checking the docs on setKeepAlive and perhaps this will fix it.  Do I set this on the server-side, in my request handler?
21:01 < Hotroot> EnosFeedler: I can't remember if the OS handles TCP, but if it does, it doesn't know what the browser is doing, only keep-alive at the TCP level
21:03 < Hotroot> EnosFeedler: Not sure there. I would guess either can do it.
21:04 < Hotroot> EnosFeedler: Err, actually, disregard the second part. Not sure how certain things play into it.
21:05 < EnosFeedler> I am going to try request.setSocketKeepAlive(true); when handling an incoming request
21:06 < meme> pineapple
21:06 < HeartOfAce> yes
21:07 < HeartOfAce> is anyone having issues with npmjs.org? it's loading really slow for me, and I keep trying to push to heroku and it keeps failing cuz the connection times out
21:08 < meme> pineapple
21:08 < Alexandria1> sorry?
21:08 < Abraxsi> Is there much point in server side jQuery?
21:08 < qq99> Abraxsi, unless you were using it in phantomjs, I don't see much of one
21:08 < rhalff> HeartOfAce, neh I just mentioned npmjs and I'm on the national security list, although it's not even my country :p they are spidering it now for suspicious activities.
21:08 < HeartOfAce> Abraxsi: If you want to download websites and extract info from em it might be useful 
21:09 < HeartOfAce> lol
21:09 < qq99> how do you know you're on the list?
21:09 < HeartOfAce> We're all on the list~ 
21:09 < qq99> lol
21:09 < Abraxsi> Can it work on content without a dom being there though? would document fragments be able to be created/queried?
21:10 < HeartOfAce> I have no clue
21:10 < qq99> Abraxsi, like using it on strings of text that represent DOM?  I would guess not unless there were an actual DOM
21:10 < substack> new blog post: http://substack.net/shared_rendering_in_node_and_the_browser
21:11 < Abraxsi> qq99, yeah I imagine it wouldn't work. I think there's a module that allows you to load a dom into node. But unless you were implementing a sort of proxy where you were adjusting content it might be mostly pointless
21:15 < zpr> hello. i have a function that has an async function within it. basically this function answer() { Model.findOne({id: 1}, function(err, res) { return (res.val) ? true : false; }} 
21:15 < zpr> however since findOne() is asynchronous, answer() always returns undefined
21:15 < zpr> is there anyway to make this work?
21:15 < zpr> or what's the sane way to do this
21:18 < r04r> zpr: Use callbacks
21:18 < alasi> What's the recommended packet interval for a multiplayer game with definite x and y coordinates?
21:18 < zpr> r04r: i thought thats what i was doing?
21:18 < mbalho> zpr: https://github.com/maxogden/art-of-node#callbacks
21:19 < r04r> zpr: function answer(callback) { Model.findOne({id: 1}, function(err, res) { callback(res.val) ? true : false; }) }
21:19 < r04r> zpr: function answer(callback) { Model.findOne({id: 1}, function(err, res) { callback(res.val ? true : false); }) } ** sorry
21:19 < raduu> zpr: and then learn how to use a promise library (Q)
21:19 < raduu> to return a promise and handle it
21:20 < zpr> raduu: Q is the name of the library ?
21:20 < raduu> yes
21:20 < zpr> r04r: thanks, that looks promising ;) i'll give it a go
21:20 < zpr> raduu: if this callback solution works, why would I need another library?
21:20 < alasi> Does anyone recommend it?
21:21 < alasi> Cause right now it's "1 ms"
21:22 < raduu> https://gist.github.com/samsonradu/814a5553255c938211a1
21:22 < raduu> zpr: here is a basic usage example
21:22 < raduu> let s you control the flow of your code
21:23 < raduu> but you still need to understand what s going on.. this is just *sugar*
21:24 < zpr> raduu: thanks, i'll look into it.
21:30 < qq99> alasi, your question is pretty vague
21:31 < alasi> nevermind, all set on ##javascript qq99
21:34 < LaMakina> raduu: i've never used a promise library but from the gist you linked to, it looks like  promise.resolve(obj) is the trigger and .then() sets up the handler. is that what's going on? 
21:34 < raduu> yep
21:34 < raduu> there is also a .fail
21:34 < raduu> for when it s rejected
21:34 < LaMakina> pretty cool.
21:34 < raduu> it is
21:34 < raduu> for when your code becomes "rich"
21:35 < raduu> Q can do some cool tricks
21:35 < raduu> hey, I m trying to wrap my head around this new "stream2" interface. basically if I have a net.Socket(), how do I pull data out of it?
21:36 < raduu> I shouldn t add a .on'('data?
21:36 < LaMakina> i haven't touched sockets yet. seems like a good time to look at it.
21:38 < Abraxsi> alasi, what answer did you get to your question? i'm interested to know any advice you were given
21:38 < alasi> For what question, Abraxsi ?
21:39 < Abraxsi>  What's the recommended packet interval for a multiplayer game with definite x and y coordinates?
21:39 < Abraxsi> i'd like to make a simple multiplayer top down space shooter
21:40 < Abraxsi> i imagine that your question is one i will eventually be asking
21:40 < alasi> Well.
21:40 < alasi> .
21:40 < alasi> Mine was based on html5 canvas
21:40 < Abraxsi> ok i suppose that would make for the most lightweight approach
21:41 < Abraxsi> rather than moving divs around the page etc.. which would be a bit crazy
21:41 < alasi> ??????????
21:41 < alasi> Dude that would be horrible xD
21:41 < Abraxsi> lol yeh
21:41 < alasi> Also, websockets
21:41 < alasi> Of course
21:41 < alasi> You know how to do them, Abraxsi?
21:41 < alasi> I literally learned today
21:42 < Abraxsi> afraid not :-( i've looked into them before but never implemented
21:43 < Abraxsi> so you're pushing events then. what type of game is it?
21:43 < Stumbler> I keep wanting to respond to that question.. packet interval... but holy crap- that's a rabbit hole.
21:43 < Abraxsi> wouldn't the 'correct' answer to co=ordinates be to use a lossy but fast protocol
21:43 < alasi> Sorry for the late response
21:44 < alasi> But..
21:44 < alasi> Yea Websockets
21:44 < alasi> And I'm mirroring the fps with the packet serving
21:45 < alasi> And so it was slow..
21:45 < alasi> :P
21:45 < alasi> In terms of FPS
21:45 < alasi> because of a clientside issue
21:45 < alasi> Because of settimeout
21:45 < Abraxsi> mmm
21:46 < alasi> So I'm figuring out reQuestanimationframe on ##javascript
21:46 < gkatsev> requestAnimationFrame
21:47 < alasi> yea :P
21:47 < alasi> gkatsev will it be ok to send those packets at the requestAnimationFrame rate?
21:47 < gkatsev> sure
21:48 < gkatsev> just don't send the packets synchronously
21:49 < alasi> What do you mean?
21:49 < alasi> Isnt the client side nonblocking too?
21:49 < gkatsev> yeah, ajax isn't synchronous
21:49 < alasi> This is node.js buddy
21:49 < alasi> :P
21:49 < gkatsev> I know
21:49 < alasi> I'm using websockets
21:49 < alasi> :P
21:49 < alasi> No ajax allowed
21:49 < gkatsev> lol
21:50 < alasi> so thats fine?
21:50 < alasi> if I use ws's?
21:50 < gkatsev> yeah, probably
21:50 < alasi> Alright :D
21:50 < alasi> thanks 4 the help
21:51 < alasi> gkatsev: to increase the speeds I increase the framerate?
21:51 < gkatsev> no
21:51 < Abraxsi> alasi, why are you representing framerate on the server?
21:51 < alasi> idk
21:51 < Abraxsi> framerate should be only a client side concern
21:51 < alasi> It's not
21:51 < alasi> Yeah
21:51 < Abraxsi> oh ok
21:51 < alasi> But the packets are sent at the framerate
21:51 < alasi> :P
21:51 < gkatsev> so?
21:52 < gkatsev> who cares how fast/slow the packets are sent
21:52 < alasi> yeah
21:52 < r04r> alasi, why not send packets when new stuff happens instead of at the framerated?
21:52 < alasi> r04r, because I'm drawing other balls too. Remember, this is a multiplayer game :P
21:52 < Abraxsi> i would separate the framerate from the transmission of the co-ordinates
21:52 < alasi> Why?
21:53 < alasi> This is a simple test
21:53 < Abraxsi> oh ok
21:53 < r04r> alasi, i understand it´s a multiplayer game. Still don´t see why you would want to attach it to the framerate. That´s just asking for trouble, it seems to me
21:53 < alasi> If it were a serious massive scale thing, then I may do key events instead
21:53 < alasi> r04r: because of smooth animations
21:53 < gkatsev> you can send the coordinates at the framerate but that fact that it's being transmitted than shouldn't have an effect on how you handle the packets serverside
21:53 < alasi> It's completely x and y broadcasted
21:53 < Abraxsi> sorry. difficult without knowing everything around your situation
21:53 < r04r> alasi so if one person has a slow machine/connection their framerate goes down for everyone?
21:54 < alasi> Abraxsi:  np, you're the curious one :P
21:54 < Abraxsi> indeed!
21:54 < alasi> r04r: not necessarily, their packets are just slower
21:54 < alasi> If you get what im saying
21:54 < alasi> The framerate is not variable
21:54 < r04r> alasi, alright, i dont really but I have to go. Good luck and good night :D
21:54 < alasi> It's like.. 60fps
21:55 < alasi> cu
21:55 < alasi> Abraxsi: do you get it? It's just the refresh rate.
21:55 < alasi> Which is the same as the framerate
21:55 < alasi> The animation
21:56 < alasi> I'll put my stuff on github when I can
21:56 < Abraxsi> i remember trying to write an interpolation algo ages ago that took into account the co-ordinates received, and tried to guess where they'd be currently, and sort of interpolate between the current position, the actual last known co-ordinate and the prediction of where theoretically where they should be based on speed etc. I eventually gave up. 
21:57 < Abraxsi> cool
21:57 < alasi> Abraxsi: This is literally my first experience writing anything multiplayer :P
21:57 < alasi> or with canvas
21:58 < Abraxsi> so you decided to learn websockets and canvas
21:58 < alasi> Yes :D
21:58 < Abraxsi> i assume you have done node webserver stuff before tho
21:58 < alasi> Nope :D
21:58 < alasi> You? I'm guessing?
21:59 < alasi> I know javascript, but socketio's API is as easy as heck
21:59 < Abraxsi> haha. i've this week been making my first node web servers, playing with express/jade etc
21:59 < Abraxsi> but the intention is to try making a game at some point
22:00 < alasi> Abraxsi: yeah
22:00 < Sean3z> does node core have big-endian support?
22:00 <@tjfontaine> depends on what you mean
22:00 < alasi> I'm a kid, and my friend wanted to me help make his game, so here I am :P
22:01 < Abraxsi> years ago i used a program called Blender3d to make games. it had a 3d render engine with physics, and let you write python scripts. 
22:01 < alasi> Abraxsi: Yeah, I've "blended" before!
22:01 <@tjfontaine> Sean3z: you can certainly write to buffers with a specific endianess
22:01 < Abraxsi> ;-)
22:01 < alasi> but no scripting
22:01 < alasi> Just some crappy rendering of a gumball machine
22:01 < alasi> And an animation of a transit concept I had in my head
22:02 < Abraxsi> yeh. i was more into the game engine than the modelling/animation
22:02 < alasi> I started doing games on this thing called Stencyl
22:02 < alasi> It's so buggy though
22:02 < alasi> It's like scratch but has flash/ios export
22:02 < Sean3z> tjfontaine: thanks! recieveing data however, looks like it'll require manual conversion
22:03 <@tjfontaine> Sean3z: you get your data in a buffer you just need to specify the endianess on your .read* methods
22:03 <@tjfontaine> Sean3z: see http://nodejs.org/api/buffer.html
22:03 < alasi> Abraxsi: I just realized we have similar nicks :P
22:04 < Sean3z> tjfontaine: this is excellent! thanks! exactly what i was looking for
22:05 < Abraxsi> yes. but this room is quite big so... bound to be some similarities somewhere!
22:06 < alasi> Yeah
22:06 < alasi> <- I had no idea what came from my head for this one
22:16 < insel> should i write node.js code in "module pattern"? 
22:16 < teadict> insel: yes
22:17 < insel> ty
22:17 < RLa> no need to wrap yourself, node's commonjs implementation does that
22:18 < RLa> just check out Modules in docs
22:19 < insel> i was confused because a lot of example code that i found is top-bottom-function-style 
22:23 < serapath> hi, whom to ask with a question about passport.js?
22:24 < serapath> there is a function set by passportjs which evaluates whether a user it authenticated or not. its set to the response object. res.isAuthenticated
22:24 < serapath> it always evaluates to true and i dont know why or where to look for the problem
22:34 < SunMoonStar> How can I get the output of a callback (one of those <response.on('complete', callback)> callbacks) to the enclosing function? I can't figure out how to get the return value of the callback to the enclosing function
22:52 < serapath> ok another question. i try to use drywall https://github.com/jedireza/drywall/
22:52 < serapath> In the readme it tells me to add a few entries to my mongoDB
22:53 < serapath> the first one: db.admingroups.insert({ _id: 'root', name: 'Root' });
22:53 < serapath> where do i do this?
22:54 < sinclair|net> gawd, this typescript ast is doing my head in
22:55 < brainproxy> SunMoonStar: what do you mean by "to the encolsing function"?
22:58 < SunMoonStar> i have a function (let's name it A) within it there's a http get request with a on success callback. The callback does some stuff and I want it to return that result back to A
22:58 < SunMoonStar> perhaps this is conceptually flawed
22:59 < mbalho> SunMoonStar: https://github.com/maxogden/art-of-node#callbacks additional reading
23:01 < SunMoonStar> looks like it is explaining my problem exactly
23:01 < brainproxy> SunMoonStar: yes, that's conceptually flawed
23:01 < brainproxy> functions in javascript represent synchronization boundaries; by the time the callback wraps up, the enclosing function will already have returned
23:01 < SunMoonStar> so everything i want to do with that data has to be done within the callback?
23:02 < brainproxy> SunMoonStar: yes, essentially
23:02 < SunMoonStar> looks like ill have to make a lot of helper functions
23:02 < brainproxy> you may also want to look into using "promises"
23:02 < brainproxy> promises let you create a value for a not-yet-finished computation
23:02 < brainproxy> and pass them around as first-class values
23:02 < SunMoonStar> im familiar with promises
23:03 < SunMoonStar> this is bringing back functional programming stuff
23:03 < brainproxy> sure
23:03 < brainproxy> SunMoonStar: this is one of the better promises libs for JS
23:03 < brainproxy> https://github.com/kriskowal/q
23:03 < brainproxy> works in browsers and node.js
23:03 < SunMoonStar> thank you 
23:04 < brainproxy> you're welcome
23:26 < owen1> brainproxy: before jumping to promises, i would try simple callbacks, especially if the project will be used by others in the future.
23:26 < serapath> Could someone please help me out or hint me how to solve the problem?
23:27 < serapath> i try to use drywalljs and it works fine so far, but i need to create an admin account in my mongoDB
23:27 < serapath> i'm somhow lost on how to do that
23:27 < owen1> maybe paste your code here and also on the google group
23:27 < brainproxy> owen1: depends on perspective I guess; I spend a lot of time w/ Clojure and other functional lang stuff and vastly prefer value semantics as a basic building block in my js apps too
23:28 < owen1> sure, but since most js/node developers use callbacks and not promises, it will be harder for your project to get adoption or contributions if u use them.
23:28 < owen1> (them = promises)
23:29 < brainproxy> owen1: depends; if you build the public api around callbacks but use promises internally, may not be a problem
23:31 < brainproxy> also, if anyone doesn't want to use my stuff because it favors promises, that's fine, they can use someone else's lib :D
23:31 < brainproxy> though again, I do think that public API's ought to support the "standard" callback pattern
23:31 < AAA_awright> That's not exactly a thing to be :D celebrating
23:32 < AAA_awright> I prefer DOM-style events
23:32 < AAA_awright> No one seems to talk about those much
23:32 < brainproxy> AAA_awright: actually i've been doing more of that lately
23:32 < AAA_awright> Even though it's used by, you know, the whole Web
23:32 < AAA_awright> cough cough
23:32 < brainproxy> that style is basically the way you do things w/ Google Polymer
23:32 < brainproxy> which is my new fav thing
23:33 < brainproxy> but my point above went more toward the fact that in a big ecosystem, developer prefs will inevitably shape their works' audiences
23:34 < brainproxy> i may develop a kill REST framework thingamabob in Clojure, even though I'm active in the Nodejs scene, and I can expect that few node folks will pick it up
23:34 < brainproxy> *killer
23:34 < brainproxy> in the same way; if I choose to go the promises route, I do so knowing that some folks will choose to avoid my libs
23:34 < brainproxy> that's just life
23:35 < AAA_awright> You say REST framework and a kitten dies
23:35 < AAA_awright> What do you mean by that?
23:36 < brainproxy> substitute whatever
23:36 < brainproxy> i meant, as a nodejs developer and a clojure developer
23:36 < brainproxy> I may develop Cool Lib X
23:36 < brainproxy> and choose to do it in Clojure, w/ no node equiv
23:36 < AAA_awright> No, like, APIs should be RESTful... but no one does it correctly. Twitter's website is more RESTful than their so-called RESTful API
23:36 < brainproxy> and I have to expect that most node devs won't pick it up
23:37 < brainproxy> sure, well you're right that most people don't "do" REST correctly
23:37 < brainproxy> I'm a fan of Amundsen's work in that area
23:37 < brainproxy> "Hypermedia APIs"
23:37 < brainproxy> his book and some of his articles helped me to appreciate HATEOAS
23:38 < AAA_awright> Make your website your API, pretty much
23:38 < brainproxy> yep
23:38 < brainproxy> the commercial prod I'm building is built around the idea that HTML is the API
23:38 < AAA_awright> That's my idea behind http://magnode.org/
23:38 < brainproxy> we document our conventions for class, rel, name, etc.
23:39 < brainproxy> such that working w/ the API basically means using CSS selectors
23:39 < brainproxy> on the returned responses
23:40 < brainproxy> AAA_awright: ever looked at Amundsen's ALPS example?
23:40 < brainproxy> http://amundsen.com/hypermedia/profiles/
23:40 < AAA_awright> Oh yeah, someone just linked me to that
23:40 < brainproxy> that's a little dated, he's done some more interesting work since then
23:40 < brainproxy> but still a good example
23:40 < AAA_awright> I don't like using class names - they're supposed to be opaque
23:41 < AAA_awright> Or rather, they're namespaced local to the document
23:41 < AAA_awright> or similar... standardizing class names isn't a good idea, then you have to declare you're using such a vocabulary... it's icky
23:42 < brainproxy> not that bad in our experience; but there are perhaps other better ways
23:42 < brainproxy> RDFa, JSON-LD
23:42 < brainproxy> haven't spent much time with those, personally
23:43 < AAA_awright> If you're coupling to a particular API perhaps it's not that bad
23:43 < AAA_awright> Or good, actually
23:43 < AAA_awright> But generic user agents can't make use of them
23:43 < brainproxy> depends on the user agent
23:43 < brainproxy> if it's a human driving a browser
23:43 < brainproxy> then those things can become the basis for visual cues
23:44 < brainproxy> e.g. styling faciliates the "follow your nose" principle
23:44 < AAA_awright> If it's a web browser then the webpage defines what the class name means
23:44 < AAA_awright> Or how it's styled
23:44 < AAA_awright> I mean, yeah, I guess
23:44 < brainproxy> but you're right that programmatic agents have to be written in such a way that they "know" about the api
23:44 < brainproxy> i mean the conventions
23:46 < brainproxy> the question is whether such efforts are really that big a deal, if they can be facilitated w/ "helper" libraries that encode those conventions, and so on
23:46 < brainproxy> right now, my coworker and I are working on several layers of Google Polymer based custom elements that do that every thing
23:46 < brainproxy> *very
23:47 < brainproxy> iow, someone building against our API could do it "in the raw" w/ css selectors in just about any lang/runtime that can do http and parse html
23:47 < brainproxy> or if they're working in a browser context, they can use our components
23:47 < brainproxy> in a pluggable way
23:48 < brainproxy> and since our API is HTML5 based, it's perfectly serviceable in a bare-bones kind of way using just a web browser
23:48 < brainproxy> as it's all just links and forms
23:48 < brainproxy> GET and POST requests
23:55 < dj_corncob> can someone help me get karma installed on osx? I keep running into an issue.  Error log: http://pastebin.com/GaF0cHbk
23:55 < ningu> dj_corncob: sudo npm ...
23:56 < dj_corncob> that doesn't work either, posting the log now
23:56 < ningu> ok
23:56 < ningu> must be a different error
23:57 < dj_corncob> http://pastebin.com/ZSdN2A1Q
23:58 < jesusabdullah> wait that looks fine dj_corncob ?
23:58 < mbalho> dj_corncob: yea that last one worked
23:58 < mbalho> dj_corncob: type 'karma'
23:59 < dj_corncob> if it got installed it's not in my path
23:59 < dj_corncob> lemme check
--- Log closed Mon Jul 08 00:00:00 2013
