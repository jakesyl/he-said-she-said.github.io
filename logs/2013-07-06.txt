--- Log opened Sat Jul 06 00:00:02 2013
--- Day changed Sat Jul 06 2013
00:00 < UserCC> i am just experimenting, i don't do something professional
00:00 < UserCC> i ask the tool name used to make that
00:00 < andrewaclt> euphrate, ah I see I found the documentation in express, thanks
00:00 < jcamins> UserCC: perhaps archive.org's book reader would be able to do what you need.
00:00 < mindcruzer> UserCC: The link i sent you produces flash output almost exactly like your example
00:01 <@isaacbw> you guys
00:01 <@isaacbw> I already found the exact thing he's looking for
00:01 <@isaacbw> WHY DOESN'T ANYONE LISTEN TO ME
00:01 < Aredridel> HEh, I think we're on mute.
00:01 < mindcruzer> isaacbw: yeah, there are a ton of them
00:02 <@isaacbw> NO MINE IS RIGHT
00:02 < UserCC> the both two above has this in the page source "<!--<ProductVersion>1.5.8</ProductVersion>-->"
00:02 < jdelgado> UserCC: lol
00:02 < mindcruzer> ok...
00:02 < jdelgado> UserCC: sorry wrong mention
00:02 < jdelgado> isaacbw: lol
00:03 < UserCC> sorry for bombarding with noobiness :D
00:03 < mindcruzer> UserCC: just go to one of those websites... bring money
00:06 < UserCC> 3d book and flippagemaker isn't what i am looking for
00:06 < mindcruzer> are you looking for the EXACT tool that made the example you posted?
00:07 < UserCC> yes mindcruzer
00:07 < qard> Is there a node equivalent to ruby's ohai?
00:08 < mbalho> require('os')
00:09 < qard> Not nearly in-depth enough.
00:10 < mbalho> niether was your question :)
00:10 < mbalho> you can also try npm
00:10 < qard> The os module just identifies all linux variants as "linux" rather than an actual distro name, which makes it pretty useful for detecting system configuration.
00:11 < othiym23> exec("uname -a")
00:11 < mindcruzer> UserCC: those examples don't say anything about what made it, so you may be out of luck
00:11 < qard> uname -a is horribly unreliable.
00:11 < othiym23> fs.readFile("/etc/issue", function (err, distroString) {})
00:12 <@isaacbw> woo, finally filled that hole with color
00:12 <@isaacbw> color scheme
00:12 <@isaacbw> hold
00:12 <@isaacbw> hole
00:12 <@isaacbw> erm
00:12 < niggler> I'm told that lewd jokes aren't approved here
00:13 < qard> The data in /etc/issue is useless too. It's just the login message, it doesn't necessarily contain ANY identifying info.
00:13 < qard> And also doesn't necessarily even exist on some platforms.
00:14 <@isaacbw> qard: you're hoping to be able to detect system configuration from distro information? That sounds messy
00:14 < neeky> UserCC, those looks like a generic flash based bookmaker
00:14 < othiym23> qard: ohai itself is a huge pile of heuristics
00:14 < othiym23> you're much better off explicitly testing for the features you care about
00:14 < qard> I'm hoping to be able to identify the default state of the system and use several other things to identify hardware configuration, like filesystem and such.
00:15 < qard> The point is, I don't know what data is useful. I need to grab as much identifying information as I can, but it's useless if the data is inconsistent.
00:17 < othiym23> qard: your way is clear -- port ohai to Node ;)
00:17 < qard> This isn't for feature detection, this is mining data about the server platform that can be correlated to other data.
00:18 < qard> Yeah, that's kind of what I'm figuring. I just hoped someone had already done it. Or at least had some amount of it.
00:18 < othiym23> I do some environment scraping for the New Relic agent, and I'm satisfied with the amount of data I get back: https://github.com/newrelic/nodejs_agent/blob/master/lib/environment.js
00:18 < othiym23> oops you can't see that version
00:18 < othiym23> https://github.com/newrelic/node-newrelic/blob/master/lib/environment.js
00:18 < othiym23> that one is accessible
00:19 < owen1> othiym23: is newrelic ready for production?
00:20 <@isaacbw> qard: it sounds like a configuration file is in order
00:20 <@isaacbw> rather than making assumptions about the system
00:21 < othiym23> owen1: officially, no, because the transaction tracer isn't fully functional yet, which is very much akin to saying the transaction tracer doesn't work at all
00:21 < othiym23> owen1: if all you care about is error tracing and HTTP request timings, it's solid
00:22 < othiym23> othiym23: either way, it's not officially supported, but a bunch (~200) of applications are using it
00:22 < owen1> what does transaction tracer means?
00:22 < owen1> to see what function calls what function?
00:23 < othiym23> owen1: the transaction tracer is the thing that puts together the transaction breakdowns that show you how long each chunk of the request (template rendering, database calls, etc) takes
00:23 <@isaacbw> does anyone here use fontdeck? My font caches don't seem to be updating :(
00:23 < othiym23> so yeah, that plus the timings for each function
00:28 < owen1> othiym23: got it. thanks
00:29  * owen1 always wondered how newrelic showed me the time spent on each section of my ruby app
00:29 <@isaacbw> oh, it's a chromium caching issue
00:29  * owen1 start writing a newrelic clone
00:29 < othiym23> owen1: that's the Ruby agent transaction tracer ;)
00:29 < othiym23> it's way easier to do in Rails than Node, but still not particularly easy
00:30 < owen1> easier? why?
00:30 < othiym23> because Rails is synchronous, so you just need to wrap call stacks
00:30 <@isaacbw> wait no
00:30 <@isaacbw> gaah
00:31 < othiym23> instead of trying to move transactional scope across continuation chains
00:32 < brycebaril> othiym23: I couldn't figure out how to query data in that awesome mangodb you linked, so I made a new database https://npmjs.org/package/infinite-monkey-db
00:32 < othiym23> brycebaril: awesome, lots of room in the infinitely scalable NoSQL space
00:32 < othiym23> MangoDB is very eventually consistent
00:34 < mbalho> does this data storage support recursive idempotent promises
00:34 < othiym23> mbalho: yes
00:34 < owen1> interesting
00:34 < mbalho> othiym23: awesome, switching
00:35 < othiym23> we should be ready to switch npm over to it soon after couchup is ready
00:35 < brycebaril> No, don't use mangodb, infinite-monkey-db is just as good, but also supports queries!
00:35 < mindcruzer> but you cant eat it
00:36 < othiym23> brycebaril: sorry, I was saying infinite-monkey-db supports recursive idempotent promise factories
00:36 < othiym23> MangoDB is in Python *spits*
00:36 < othiym23> so clearly infinite-monkey-db is better
00:36 < mbalho> pythons cant even eat mangos
00:36 < brycebaril> what? Of course you can eat it. You could eat infintite monkeys *forever*
00:36 < groundwater> othiym23: tell us how you really feel
00:36 < othiym23> I bet they could squeeze them pretty good
00:36 < mbalho> mangrovedb, the swampy nosql platform
00:37 < othiym23> groundwater: my actual opinions are closely guarded secrets
00:37 < mbalho> mongbrodb, do you even scale?
00:38 < othiym23> mbalho: for someone who hates being called a bro, you sure do talk about bros a lot
00:38 < mbalho> bro no i dont
00:38 < othiym23> whatevs bro
00:39 < othiym23> man, this year's Tour de France is just straight-up masochism to watch
00:39 < othiym23> hours of boring-ass nothing happening and then like 3 seconds of excitement at the end
00:39 < brycebaril> Punctuated by discussion of doping every 15 seconds?
00:39 < othiym23> it was better when they were all massively abusing performance-enhancing substances
00:39 < mbalho> any spectators get hit yet?
00:39 < othiym23> no, they absolutely do NOT talk about doping at all
00:40 < othiym23> there's Contador riding along, not even any mention that at one point he was a 2-time winner of the tour doot de doo
00:40 < othiym23> mbalho: no, and no truly grotesque crashes yet, thankfully
00:40 < brycebaril> man if I had infinite-money-db I'd have flown to france just to draw chalk outlines of syringes all over the course
00:40 < othiym23> two years ago I thought I was gonna barf after they showed poor Johnny Hoogerlund getting tossed into the barbed wire fence over and over again
00:41  * othiym23 stops talking about something that has even less to do with JS than most of the stuff he talks about
00:41 < othiym23> *I* want infinite-money-db
00:42 < brycebaril> bitcoin.pipe(othiym23) ?
00:42 < othiym23> that would be a good start
00:42 < othiym23> but that's still a finite amount of money due to the finite number of bitcoins
00:44 < brycebaril> I'm sure you could use domains to address that issue
00:44 < groundwater> guardians
00:44 < othiym23> anytime the value of BTC drops, reality throws, a guardian catches it and continues at the old price
00:44 < brycebaril> I prefer "safteynets" or "hugs"
00:44 < othiym23> "hugs" sounds very isaacs-friendly
00:48 < groundwater> there is no webscale npm module yet
00:48 < groundwater> brycebaril: you need to break infinite-monkey-db into smaller components
00:48 < brycebaril> groundwater: probably true.
00:59 <@isaacbw> owen1: regarding using the straight http api, here's a little experiment I started a while ago: https://gist.github.com/isaacbwagner/5938106
00:59 < neeky> brycebaril, you are the cancer that is killing npm
00:59 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:01 < brycebaril> neeky: if you say so, it must be.
01:01 < owen1> isaacbw: sweet. don't go anywhere. we'r gona have a little talk (:
01:02 <@isaacbw> wait what aaaragggh
01:02 < neeky> ;)
01:03 < neeky> but seriously, npm needs a rating system IMO
01:03 < alasi> If I were to ask a mongodb question at some point, could it be here or mongoose or some other channel?
01:04 < neeky> mongo channel is somewhat active
01:04 < alasi> #mongo ? #mongodb ?
01:04 < neeky> #mongoosejs? tumbleweeds
01:04 < alasi> ah
01:04 < neeky> mongodb
01:04 < alasi> ok
01:05 < neeky> but i'll plug again: anyone that uses mongoose /please/ join #mongoosejs 
01:05 < neeky> i don't know enough about it to help, but I try, and probably piss more people off than I help
01:06 < alasi> Hey, I'm newb/n00b/vamp. I'll listen to anything someone says :P
01:07 < owen1> neeky: just use the native driver
01:07 < alasi> owen1 for mongo or something else?
01:08 < neeky> owen1, i probab;y could, but mongoose exists for a reason, and I seem to think I need it for whatever reason that it
01:08 < neeky> is
01:09 < othiym23> 10gen themselves tell you to use mongoose to simplify working with node-mongodb-native
01:09 < othiym23> and it is good advice
01:09 < othiym23> he said obscurely
01:09 < neeky> but you are probably right.   My app has a schema that I need to enforce though, and I don't know how to do it without an ORM thing in the middle
01:09 < alasi> Is there an afk command?
01:09 <@isaacbw> mongoose is silly
01:10 < neeky> here we go...
01:10 <@isaacbw> lol
01:10 < alasi> haha
01:10 <@isaacbw> if you mention mongoose, I gotta call it silly
01:10 <@isaacbw> ahbligayshons
01:11 < neeky> alasi: i dont know what afk is
01:11 <@isaacbw> alasi: some irc clients do
01:11 < neeky> oh that
01:11 < neeky> /away does it fopr me
01:12 < alasi> I use limechat
01:12 < alasi> Ok here goes
01:12 < neeky> try //away
01:12 < alasi> /away
01:12 < neeky> heh
01:12 < alasi> nah
01:12 < neeky> single slash away
01:12 < neeky> /away
01:12 < alasi> Reply(305): You are no longer marked as being away
01:12 < alasi> huh
01:12 < owen1> alasi: neeky use the native driver first, and if u feel any pain, look for more abstractions
01:13 < alasi> alright
01:13 < owen1> the same with vanilla.js vs express
01:13 < owen1> callbacks vs async vs promises
01:13 < owen1> js vs CS
01:13 < euphrate> oh?
01:13 < owen1> promises vs generators
01:13 < euphrate> mongoose is evil too
01:14 < euphrate> i really like the new generators :P
01:14 < owen1> i really like the old callbacks
01:14 < alasi> Wait question: I've seen mongo linked as a clientside js file. Does this interact with the port stream itself or do I still have to do some sort of http / socket/ajax thing?
01:14 < neeky> but my main document is > 6k each, with > 100 fields -  
01:14 < neeky> mongoose owns that for me
01:14 < euphrate> well i have no problem with using async.js
01:14 < euphrate> but i think the new generator syntax is pretty nifty
01:14 < owen1> what do u use async for?
01:15 < alasi> Or are the mongo queries done from the clientside?
01:15 < alasi> Which is weird
01:15 < euphrate> avoiding nested callbacks owen1 
01:15 < euphrate> mainly use waterfall and parallel but depending on the situation there are other useful functions
01:15 < alasi> Well just so yall know, i'll be AFK :P
01:16 < niggler> gnite alasi 
01:16 < owen1> euphrate: how many levels of callbacks do u have?
01:16 < euphrate> i use async when there are 3 or more
01:17 < owen1> u can also try using named functions insteaf of annonymos
01:17 < alasi> cu niggler
01:17 < euphrate> nahh
01:17 < euphrate> owen1: async does the error handling too which is nice
01:18 < euphrate> well not the handling but the delegation 
01:22 < Beg> so my computer crashes when I use sublimetext over sshfs
01:23 < Beg> and I can't use meteor over virtualboxsf
01:23 < Beg> and meteor doesnt work in windows how i want it to
01:25 < owen1> Beg: vim
01:28 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:36 <@isaacbw> fffdsdljhfdskjhlsdafkljhfsadhjklsfda
01:39  * owen1 looking at isaacbw's no-frameworks code
01:40 < Tyrantelf> It is confrmed: the people in ##php are useless
01:42 <@isaacbw> owen1: most of it's nonsense
01:42 < hello_kitty> with async.parallel do the inner callbacks need to return errors like this: http://pastebin.com/XjgMEy24  or can they be dealt with in the final alone?
01:43 < owen1> isaacbw: it's poetry. now i am looking into loadRoutes
01:43 <@isaacbw> :,D
01:45 < owen1> it's interesting. u pass controllers hash into the router function
01:45 <@isaacbw> I could have just had a global variable
01:45 <@isaacbw> I did a few strange things in there, looking back at it now
01:46 < owen1> i don't understand what loadRoutes is doing. what's in ./routes.json ?
01:49 <@isaacbw> owen1: alright, updated the gist with more files
01:50 <@isaacbw> it was an experiment with application layout but I ended up hating it
01:51 < owen1> now we're talking. let me try actualy running it
01:52 <@isaacbw> lol okay
01:52 <@isaacbw> it's not that exciting
01:52 < euphrate> hello_kitty: they can be dealt with in the last parameter 
01:52 < owen1> i'll try to mock whatever i need to
01:52 <@isaacbw> just a convoluted router
01:53 < mscdex> linksys.js
01:55 < dooglus> hi guys.  is there any kind of profiling available for node.js?  my node process gets 'stuck' at 100% cpu after 24h or so and I have to kill and restart it
01:56 < dooglus> it's a sockets.io / express server
01:57 < owen1> dooglus: console.log (:
01:58 <@isaacbw> dooglus: how's your memory doing?
01:59 < dooglus> isaacbw: long term is pretty good, but don't ask me what i had for breakfast
02:00 <@isaacbw> lol
02:00 < dooglus> free -m: total 7500, +/- buffers/cache; used: 2100 free 5350
02:00 < dooglus> swap: 32000 used 13
02:01 <@isaacbw> does the process seem to be gobbling up memory though?
02:01 < dooglus> owen: console.log output stops altogether when its at 100%
02:01 <@isaacbw> I imagine a clogged garbage collector would impact CPU usage
02:01 < dooglus> isaac: I don't think so, no
02:01 <@isaacbw> oh okay
02:02 < dooglus> top shows 1354m 492m 7812 R  31.1  6.6 107:17.29 node right now
02:03 < dooglus> will check again in an hour
02:03 < dooglus> (that's VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND)
02:03 < dooglus> I've not seen it at 31% CPU before - usually it's <10 or 100%
02:04 <@isaacbw> that seems strange
02:04 < dooglus> well, it should be <10 all the time - then 'something' happens
02:13 < mscdex> dooglus: there's always `node --prof foo.js`. that will create a v8 log that you then process with v8's linux-tick-processor. it will show you how much time was spent where
02:15 < Stumbler> I really should learn how to use node's command line features .. and debugger for that matter.  
02:15 < niggler> node --help is your friend Stumbler 
02:16 < Stumbler> I wonder is there an ide that take advantage of the node debugger?  Visual step and stepin etc?
02:21 < owen1> my nodeconf video - http://engineering.yp.com/post/nodeconf
02:24 < dooglus> mscdex: that sounds like what I need.  is there some way of doing it retrospectively to an already-running node process?
02:24 < owen1> dooglus: yes. u need to pass USER1 signal or something similar. let me find it.
02:25 < owen1> dooglus: oh. sorry, what i meant is u can debug a running process.
02:25 < owen1> not sure about --prof
02:26 < hello_kitty> ty euphrate 
02:26 < mscdex> owen1: yeah the sending SIGUSR2 is for node-webkit-agent and the like
02:26 < mscdex> owen1: --prof is different
02:28 < owen1> mscdex: is it documented or blogged somewhere?
02:35 < owen1> mscdex: "show you how much time was spent where" sounds perfect
02:37 < mscdex> owen1: it's a v8 option, listed with all the others in `node --v8-options`
02:37 < euphrate> welcome qard 
02:38 < Ritzton> hello
02:38 < Ritzton>  I am using express.io, I dont understand why req.io.emit work and not req.io.room, I am doing something like that http://pastebin.com/tQtBKGk6 any idea ?
03:27 < niggler> is there an easy way to dump all of the data in a Buffer?
03:27 < niggler> nvm INSPECT_MAX_BYTES
03:41 < gigo1980> hi all, is there an faster way to serialize javascript objects than use JSON.stringify and JSON.parse ?
03:42 -!- mode/#Node.js [+o TooTallNate] by ChanServ
03:44 < othiym23> gigo1980: unless you want to use some kind of JSON stream, no
03:45 < dtudury> is there a good json stream reader?
03:46 < dtudury> dispatches events when new data gets added to existing objects from the continuing parse...
04:02 < andrewaclt> Why would my req.session be undefined when I have app.use(express.cookieParser()); and app.use(express.cookieSession()); ??
04:08 < ningu> andrewaclt: I thought you needed to app.use(express.session())
04:10 < andrewaclt> ningu, no it seems the issue is that it needs to occur before app.use(app.router);
04:10 < andrewaclt> This is express 3.x
04:15 < scathen^C> hey all trying to understand what you would put varnish->nginx/node-http-proxy->node and not just varnish->node. Anyone able to explain this to me?
04:15 < ningu> andrewaclt: well duh, yes, you need to load your session before you run the routes if you want the session to be available then!
04:16 < andrewaclt> ningu, yes that was my issue :(
04:23 < LuckyBurger> Any1 around? I'm getting a build error :x http://pastebin.com/s7HtaFcf
04:28 < ningu> LuckyBurger: out of memory?
04:28 < LuckyBurger> 512
04:28 < LuckyBurger> perhaps tho
04:29 < ningu> check your kern.log
04:29 < LuckyBurger> In the past it was more verbose about OOM
04:31 < LuckyBurger> yeah it is
04:31 < LuckyBurger> Out of memory: Kill process 20099 (cc1plus) score 252 or sacrifice child
04:31 < LuckyBurger> zzz
04:32 < ningu> ooh, child sacrifice
04:32 < zipp> the last one
04:32 < zipp> i like the last one
04:32 < LuckyBurger> :)
04:32 < LuckyBurger> my server knows me too well.
04:32 < LuckyBurger> heh heh heh
04:42 < LuckyBurger> o epel has a binary version :d
04:42 < LuckyBurger> well then
04:47 < taoist> Hello, I am sitting here learning node from a book. I am about to install node-supervisor and I don't understand the instructions. I would post at StackO but I don't want to be publicly executed. So, here is what it sayd on the docs: Usage:   supervisor [options] <program>   supervisor [options] -- <program> [args ...] I am simply curious if the patter for using this is as simple as a require() line suimilar to express or if it's more 
04:47 < taoist> *pattern
04:47 < LuckyBurger> a book?
04:47 < LuckyBurger> when was it published?
04:47 < taoist> A book and a computer
04:47 < LuckyBurger> cuz its probably out-dated now haha
04:47 < jesusabdullah> which book
04:48 < taoist> Well, I'm trying t install node-supervisor on my own outside the book
04:48 < jesusabdullah> ahh
04:48 < jesusabdullah> that's a command line tool taoist 
04:48 < jesusabdullah> you run it in the terminal
04:48 < othiym23> taoist: npm -g install supervisor
04:48 < jesusabdullah> taoist: what's your os?
04:49 < taoist> I already did the actual npm install
04:49 < jesusabdullah> did you -g it?
04:49 < jesusabdullah> I mean, just to make sure
04:49 < jesusabdullah> also what's your os?
04:49 < taoist> mac snow leopard. 
04:49 < jesusabdullah> okay cool
04:49 < jesusabdullah> so you have the terminal cracked open?
04:49 < taoist> of course
04:49 < jesusabdullah> If not you can do the whole "search finder" thing
04:49 < jesusabdullah> okay cool
04:49 < jesusabdullah> so type "superviso"
04:49 < jesusabdullah> supervisor
04:49 < jesusabdullah> in the terminal
04:49 < jesusabdullah> XD
04:50 < taoist> I assume this is a node command 
04:50 < taoist> node supervisor
04:50 < taoist> of course it is scratch that
04:51 < jesusabdullah> nope
04:51 < jesusabdullah> it's a regular command
04:51 < jesusabdullah> :)
04:51 < taoist> oh
04:51 < taoist> ok
04:51 < taoist> bash supervisor command not found
04:52 < jesusabdullah> taoist: what if you open a new terminal window? Maybe it didn't path right?
04:52 < jesusabdullah> taoist: and you typed the 'g' when installing?
04:52 < jesusabdullah> taoist: as in, `npm install supervisor -g` and not `npm install supervisor`
04:52 < jesusabdullah> taoist: finally: idk supervisor, this is all general stuff
04:53 < ningu> taoist: it says right in the docs to install it with -g
04:56 < taoist> Ok, so that's my problem I verred away from using -g as I have had trouble with my machine when installing packages globally
04:56 < ningu> what sort of trouble?
04:56 < taoist> and I missed that in the docs
04:56 < jesusabdullah> It wasn't in the docs
04:56 < taoist> Well, give me one sec and I'll try it and be more than happy to point out the error
04:57 < ningu> jesusabdullah: yes it was
04:57 < jesusabdullah> was it?
04:57 < jesusabdullah> I take that back then
04:57 < ningu> hehe
04:57 < ningu> gotta get your docs in a row
04:57 < jesusabdullah> yeah maybe
04:57 < jesusabdullah> ugh I hate this npm warning spam so much
04:58 < taoist> The first error the following , but the after there is a batch of errors. npm ERR! Error: EACCES, mkdir '/usr/local/lib/node_modules/supervisor'
04:59 < othiym23> taoist: sudo npm -g install supervisor
04:59 < ningu> sudo npm ... 
04:59 < othiym23> needs write permissions on /usr/local
04:59 < taoist> sudo did the trick
04:59 < taoist> !
05:00 < jesusabdullah> gratz
05:00 < taoist> THanks
05:01 < taoist> Ok, so supervisor command works now
05:02 < taoist> I see so the command is just :    supervisor app.js
05:02 < jesusabdullah> yes
05:02 < LuckyBurger> heres a Q for u guys... I am setting up a HTTPS service, Do I self-sign a cert, or go buy one?
05:03 < dtudury> for what purpose is your cert?
05:03 < jesusabdullah> if you want other people to use your service, the latter
05:03 < LuckyBurger> its a back-end system for a video game
05:03 < jesusabdullah> if it's just you, the former is fine and cheaper
05:03 < dtudury> facebook?
05:03 < LuckyBurger> its got some fb components yes
05:04 < dtudury> pay the money
05:04 < dtudury> but if you can, you can put your service behind someone else's
05:05 < LuckyBurger> cant sadly.
05:05 < dtudury> use their cert
05:05 < dtudury> ah
05:05 < dtudury> they're cheap
05:05 < LuckyBurger> yeah i was wondering how expensive to go
05:05 < dtudury> you already spend the $10 on a domain :)
05:05 < LuckyBurger> ;)
05:05 < LuckyBurger> $8 for the cert
05:05 < LuckyBurger> :D
05:05 < dtudury> yep
05:05 < dtudury> good enough for facebook
05:06 < LuckyBurger> i probably wont buy it until dev is finished anyway
05:06 < dtudury> most browsers self-signed is good enough, certainly good enough for dev
05:06 < ningu> quickcert is better than bubble cert or insertion cert
05:06 < dtudury> but integration those other 20% of browsers will matter :)
05:07 < dtudury> err… production
05:08 < LuckyBurger> ill do some testing, its a mobile game done in a game engine that has a wrapper for internet stuffs
05:08 < ningu> should be fine as long as the wrapper is biodegradable
05:09 < LuckyBurger> all wrappers should be...its 2013
05:18 < LuckyBurger> node is hilarious.
05:18 < LuckyBurger> 2 hours have a working https server :D
05:19 < dtudury> can I hear a "AMEN"?
05:20 < dtudury> (sorry in advance)
05:21 < dtudury> wait until you need to write a proxy server
05:21 < dtudury> is like one line (I'm new here too)
05:24 < LuckyBurger> haha :)
05:46 < LuckyBurger> hmm
05:47 < dtudury> no luck?
05:47 < LuckyBurger> node doesnt like self-signed certs ?
05:47 < LuckyBurger> DEPTH_ZERO_SELF_SIGNED_CERT
05:47 < dooglus> I said "top shows 1354m 492m 7812 R  31.1  6.6 107:17.29 node right now", well now it's: 1595m 742m 7812 S  36.9  9.9 182:47.48 node
05:47 < dooglus> guess there's a leak of some kind
05:51 < dtudury> I don't think node cares whether your cert is self-signed
05:52 < dtudury> in the words of the first engineer: "works on my machine"
05:52 < LuckyBurger> definitely does. rejectUnauthorized is true
05:52 < LuckyBurger> theres a way to turn it off tho
05:52 < LuckyBurger> trying to find it :p
05:52 < ningu> I am sure it can be made to work
05:52 < LuckyBurger> yar
05:53 < LuckyBurger> bug. https://github.com/visionmedia/superagent/issues/188
05:55 < kenetik> anyone familiar w/ a good blog (or blog cms) on node?
06:01 < LuckyBurger> cool got it workin
06:01 < LuckyBurger> thanks guys :D
06:02 < jesusabdullah> kenetik: not really
06:02 < dtudury> LuckyBurger: congrats
06:03 < LuckyBurger|nap> :D time for sleep ahha
06:03 < LuckyBurger|nap> night all
06:05 < AAA_awright> So I just modified Node.js so you can embed your own libraries as native modules. Now I have require('jade') as a native module.
06:08 < SomeoneWeird> AAA_awright, nice!
06:13 < AAA_awright> The magic is my completely insane rewriting of tools/js2c.py in bash
06:25 < SomeoneWeird> AAA_awright, neat, so it actually includes the lib in the node source?
06:25 < AAA_awright> It's compiled into `node` like the other core modules are (fs, net, etc)
06:27 < SomeoneWeird> s/source/binary/
06:27 < SomeoneWeird> yeah
06:28 < hagi_82> and the advantage over a global library is ….
06:28 < AAA_awright> I have absolutely no idea
06:29 < hagi_82> does not matter, its cool to do that one time until you have to compile node because of code change of your lib :)
06:30 < AAA_awright> I'm thinking this is for compiling VM images, where you'll be rebuilding the image to update it anyways
06:30 < AAA_awright> Also, you could levy the same arguments at the builtin modules too
06:31 < dtudury> it's good to be comfortable rebuilding node
06:32 < hagi_82> lol, nice had that idea a week ago, integrate grunt, shells into node, to do setup magic with node.
06:32 < hagi_82> like puppet in node.js 
06:33 < hagi_82> i agree that idea still sounds nice ..
06:33 < dtudury> at some point you'll want to call something written in C and you'll be happy you know how
06:33 < dtudury> (he says as if he knows how...)
06:37 < lethjakman> hey, is there any good way to take node.js and hook it into a cluster of many computers? 
06:37 < dtudury> like "http"?
06:38 < dtudury> or something more exotic?
06:39 < jesusabdullah> lethjakman: elaborate.
06:39 < lethjakman> dtudury: well, yeah http. I basically want to make a program that I can expand through through buying additional VPS if the need arises. 
06:40 < lethjakman> cluster computing I guess it would be called
06:40 < lethjakman> it's basically using node.js as access to a database, with a web frontend. 
06:40 < lethjakman> each customer would be a single node and they'd be independant of everyone else
06:40 < dtudury> lethjakman: could maybe be http and clever hashing?
06:40 < lethjakman> I guess with that I could just break them out since it doesn't need to be one giant computing base, just many small ones. 
06:41 < lethjakman> dtudury: hrm, perhaps. I heard someone talking about snowflaking a while back. 
06:41 < dtudury> if it's a machine per customer it's pretty straight forward
06:41 < dtudury> if it's some machines per some customers not so much
06:41 < dtudury> but still solvable
06:41 < lethjakman> however, being able to hook several node machines together could be a really interesting way to solve large problems. 
06:42 < lethjakman> I don't think one customer would ever need more than one machine. 
06:42 < dtudury> will have to look up snowflaking...
06:42 < lethjakman> dtudury: it's basically what twitter does to keep each and every post unique. 
06:42 < lethjakman> you can't do it through a standard database since you need to break them up. 
06:42 < lethjakman> it's a weird problem that I'm trying to solve. 
06:43 < dtudury> what does a machine do?
06:43 < dtudury> like could it restart?
06:43 < dtudury> is all data on the database?
06:43 < lethjakman> dtudury: restarting would be bad, but that's not a hard problem to solve I just need replication. 
06:43 < dtudury> or on the machine
06:43 < lethjakman> basically a machine replicates and deals with all of the transactions that many remote machines would be dealing with. 
06:44 < dtudury> what's the client?
06:45 < dtudury> can it be smart?
06:45 < lethjakman> dtudury: yes, the client will be relatively smart, it will know the ip of the initial and backup boxes. 
06:46 < dtudury> lethjakman: so is the client on it's own smart enough to solve your problem?
06:46 < lethjakman> hrm, I think I changed my solution a little. talking to someone else always helps :)
06:46 < lethjakman> thank you. 
06:47 < lethjakman> I think my client will be smart enough since I'm ujst going to try and break it out rathre than making a super computer. 
06:47 < lethjakman> is there a tutorial I should use to dive into node?
06:47 < dtudury> lethjakman: to a man with a hammer... :)
06:47 < lethjakman> lol. 
06:48 < dtudury> apparently, this channel, twitter, github, npm
06:48 < dtudury> it's a very generous community
06:48 < lethjakman> I'm shocked as to how many people there are here
06:48 < dtudury> (I'm new here too)
06:48 < lethjakman> brilliant, how well do you know node.js?
06:49 < dtudury> I just told you to solve it on the client...
06:49 < dtudury> ;)
06:49 < lethjakman> I'm pretty good with JS. but I think I'm gonna pick up node now. 
06:49 < lethjakman> lol
06:50 < dtudury> I'm coming from flash, so I know a strange version of js and have sensibilities that make me an easy scape-goat :)
06:50 < lethjakman> blah, flash. 
06:50 < lethjakman> I've been getting into webgl
06:50 < lethjakman> it's brilliant. 
06:51 < dtudury> yeah, no, flash is dead, no need to beat that horse
06:51 < dtudury> well… not dead, but having no future is effectively the same as dead
06:51 < dtudury> webgl is very cool
06:51 < lethjakman> thank god, it's about time. 
06:52 < lethjakman> it's more difficult, but I'm looking forward to the frameworks coming out for it. 
06:53 < dtudury> if adobe has any sense it'll put it's resources into making flash to webgl converters
06:53 < dtudury> 'cause love it or hate it, flash played nicely with designers
06:55 < dtudury> (though it'd be awesome if someone beat them to it)
06:57 < dtudury> lethjakman: good night, good luck, welcome to (I think) a great community
07:07 < ningu> the node community is one of the main reasons I stick around
07:15 < hagi_82> are there any advantages using unix sockets over port based sockets ?
07:16 < hagi_82> currenty i get more errors using unix sockets but maybe my server just sucks.
07:26 < ningu> I thought unix sockets were more efficient
07:36 < Irulan> Hello
07:37 < Irulan> I compiled node.js, and I get a Segmentation fault on startup
07:38 < Irulan> http://pastebin.com/qmXUp5FD
07:39 < ningu> I knew a worm once that had a segmentation fault
08:19 < Ritzton>  I am using express.io, I dont understand why req.io.emit work and not req.io.room, I am doing something like that http://pastebin.com/tQtBKGk6 any idea ?
08:24 < hello_kitty> i read a blog recommending to use the async lib for anything beyond a singlely nested callback... opinions?
08:24 < odin_> hello, how do I upgrade on windows ?  is there a way for it to remember the mobiles you have loaded and reinstall them ?
08:24 < odin_> does the windows installer take care of everything ?
08:24 < odin_> s/mobiles/modules/
08:25 < hello_kitty> odin_, i use npm alongside a package.json file
08:26 < odin_> I have %USERPROFILE%\node_modules folder, I also have such a folder in C:\Program Files\nodejs
08:27 < odin_> maybe I should not be concerned?  and just run new installed over the top of existing install ?
08:29 < odin_> ok I saved package.json files, just in case
08:30 < Ritzton> any idea for my problem please ?
08:55 < yoodit> hey there.
08:56 < yoodit> hope that everyone is well
08:56 < yoodit> any one using intellij and is up for a quick question?
09:19 < gigo1980> hi all, what do you use to generate xml including attributes in nodejs. i come from the java world and there it is easy to do serialization with simple annotations… what is the prefered way on javascript / node.js
09:20 < gigo1980> @yoodit, i use intellij
09:20 < yoodit> @gigo1980 hey there
09:21 < yoodit> i'm having some problems with intellisense. do you know anything about that?
09:22 < gigo1980> only for node.js or also for java projects ?
09:22 < yoodit> i don't use java
09:22 < yoodit> only node
09:23 < gigo1980> do you use coffeescript or javascript ?
09:23 < yoodit> js
09:23 < yoodit> my problem is like this:
09:23 < gigo1980> so in coffeescript the intellisense does not work sometimes
09:23 < yoodit> my project looks like this:
09:23 < yoodit> project
09:23 < yoodit>  |- module 1
09:23 < yoodit>    - index.js
09:23 < yoodit>  |- module 2
09:23 < yoodit>    - index.js
09:24 < yoodit> module 1 is requiring module 2
09:24 < gigo1980> you have multiple modules in you project ?
09:24 < yoodit> and intellisense doesn't see the exports
09:24 < yoodit> yes
09:25 < yoodit> all use the same pattern
09:25 < yoodit> feels to me like intellisense is happening in the scope of the module, but not the scope of the project
09:25 < yoodit> (noob warning) :)
09:27 < gigo1980> this can be posiblem.. so an modulie is something like an closes application. you have to set the include paths.. but can not find in in the node.js view (idea 13)
09:27 < gigo1980> on phpstorm (same ide base or rubymine) you can set this in the project settings
09:29 < yoodit> i see
09:30 < gigo1980> so you have to say the ide that modul 1 depends on modul 2 and also have something like an include path
09:30 < gigo1980> this is the normal way
09:30 < yoodit> everything works really well, but intellisense is confused..
09:31 < yoodit> where do i specify the include path? i've looked all over
09:44 < gigo1980> i also do not find this option…. in other ide´s from jetbrain it is posible
10:27 < bulkan> anyone online ?
10:28 < timetocode> could someone critique my api? i'm new to the async lib.  I have a 1v1 puzzle game, this is the api call after a match is finished and a player acknowledges that they saw the final score: http://pastebin.com/xzYKKhJ6
10:33 < timetocode> is 8 node instances (1 per core) opening 5 mongodb connections each okay?
10:38 < Abraxsi> timetocode i haven't used async before. do the functions in the array need to both complete before the final function is run?
10:39 < timetocode> Abraxsi, the final function runs after all functions in the array hit callback()
10:40 < Abraxsi> ok. so have you tested it works, you're just asking if this is the intended use pattern for the async package
10:40 < timetocode> yea, and any ther javascriptish critiques, like my removal of a match from the matches array
10:41 < timetocode> which works, i just wasnt sure if it was typical or not
10:45 < Abraxsi> the removal of the matchid from the array of matchids is typical of removing a number from an array of numbers... if that helps
10:46 < Abraxsi> do you know any libraries like underscorejs?
10:47 < Abraxsi> they can sometimes provide functions that make common operations like this a bit more succinct
10:48 < Abraxsi> but I think how you've done it is very transparent which is good. The use of async... I wonder if people ever use jQuery promises to do this sort of thing on Node
10:48 < timetocode> Abraxsi, i was just reading about underscore today
10:49 < timetocode> im guessing that my 'remove from array by value' case there is a normal 
10:50 < Abraxsi> yes.. i've read about it alot.. but it's a helper library, and when I'm coding I tend to just code rather than spend time researching if there is a helper method... sadly this doesn't help me learn underscore. hopefully at some point i'll stumble upon something that i really need it for, and i'll get into it
10:51 < timetocode> is there a mongoose.js query concept for 'except' or 'not' ?
10:52 < timetocode> can always pass actual javascript to mongodb, but i figured somewhere in the query syntax theres a simplified exclusion
10:54 < Abraxsi> what does your current query look like
10:56 < timetocode> Abraxsi, http://pastebin.com/TrYzAknL
10:58 < timetocode> my 'WaitingForOpponent' is a list of players that get matchmade together whenever another player tries to find a game
10:59 < timetocode> the functional version of that code has no query at all, and then i manually check to make sure I dont match a player against himself:  if (waitingForOpponent && (String(waitingForOpponent.player) !== String(player._id))) 
11:00 < timetocode> ultra ugly b/c the Ids are mongo objects, not real strings so i gotta cast em all
11:02 < timetocode> Abraxsi, i think i found one version: { _id: { $ne: ObjectId('4ecf92f31993a52c58e07f6a') }}
11:05 < gildean> timetocode: for future reference, you should be able to use _id.toString()
11:06 < timetocode> gildean, can the result of an _id.toString() be compared?
11:08 < timetocode> i just tested it, and they can, thanks
11:08 < gildean> timetocode: it's just a string after the .toString()
11:08 < timetocode> i can't remember when it is that making something a string ends up with an object returned
11:09 < Abraxsi> timetocode, is this any help http://docs.mongodb.org/manual/reference/operator/nin/
11:10 < Abraxsi> referenced here in mongoose api http://mongoosejs.com/docs/api.html#query_Query-nin
11:10 < timetocode> Abraxsi, thanks, that one is good too
11:13 < hio_> Hi, is it possible to use the nodejs file api from another a v8 that isn't started by nodejs?
11:14 < aandy> hio_: can you elaborate?
11:15 < hio_> aandy, I'm starting a c++ application and loading v8.so myself. Can I call a nodejs api ? What would I need to load in terms of c++ libraries from node to make it possible?
11:17 < aandy> i haven't used v8 to such an extend, but i'd expect it to be possible. have you checked which functions are exported by v8.so (and crypt etc.)?
11:22 < n2liquid> Gah! What is the currently preferred way to mock dependencies in node today?
11:22 < n2liquid> I was reading stuff from 2012, browsed through a lot of unmaintaned packages on npm, and I'm still lost
11:23 < Abraxsi> 'mock' dependencies?
11:23 < n2liquid> Abraxsi: yes, with Sinon or some other lib
11:24 < n2liquid> Making test subjects require mock objects I supply instead of true modules
11:25 < n2liquid> I could roll my own "dependency injection" module for my project, but I'm a minimalist
11:25 < n2liquid> If it's possible to use require for that, that's what I want
11:43 < daslicht> __defineGetter__ is depreciated?
11:43 < daslicht> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter
11:43 < daslicht> ?
11:46 < n2liquid> daslicht: Perhaps in favor of Proxies?
11:46 < daslicht> essentially i jiust liek to know if it is still safe to use them under node
11:46 < daslicht> what do you think/
11:46 < daslicht> ?
11:47 < n2liquid> daslicht: You better use Object.defineProperty, apparently: https://github.com/chaijs/chai/issues/2
11:48 < n2liquid> Forget what I said about Proxies
11:48 < n2liquid> If __defineGetter__ is deprecated, it will eventually be removed from V8 and thus Node, I would say
11:49 < daslicht> thanks
11:49 < daslicht> i try it
11:49 < n2liquid> Good luck
11:50 < n2liquid> Can anyone help me with dependency injection / spying-stubbing-mocking whole Node modules with Sinon or something similar?
11:51 < daslicht> cool that works
11:57 <@MI6> joyent/node: Fedor Indutny master * f0a05e4 : buffer: use macro (+1 more commits) - http://git.io/RI-Gkw
12:13 < daslicht> I am trying to use the get and set functions of a prototype:
12:13 < daslicht> http://jsfiddle.net/daslicht/Pgbfp/
12:14 < daslicht> what am i missing ?
12:14 < daslicht> as described here:
12:14 < daslicht> http://ejohn.org/blog/javascript-getters-and-setters/
12:15 < daslicht> the get method seams to returns infinite 
12:15 < daslicht> Uncaught RangeError: Maximum call stack size exceeded
12:21 < Zerot> daslicht: you named the get function the same as the backing variable, meaning that to resolve the getter, it calls itself
12:22 < n2liquid> daslicht: The getter calls the getter, which calls the getter, which calls the getter...
12:22 < daslicht> ahh ok so the NEED to be different
12:22 < aandy> get it? get it? get it? get it?
12:22 < Abraxsi> is there a use for prototypes in javascript programming these days?
12:23 < n2liquid> Abraxsi: wah?
12:23 < n2liquid> Can you elaborate? I'm curious
12:23 < daslicht> hehe
12:23 < daslicht> http://jsfiddle.net/daslicht/LPaDF/
12:23 < daslicht> yeah i got it 
12:23 < daslicht> lol
12:23 < daslicht> how stupid 
12:24 < n2liquid> ^^
12:25 < Abraxsi> n2liquid lol.. i'm trying to accustom myself to the 'real world'. I've been programming html, css, javascript, jquery, through to java spring mysql backend for 5 years. but i've never really found a place in chatrooms and found it difficult to know which technology trends to follow. finally feel with node community I have a chance to get to grips with the 'bigger' picture. So please excuse anything I say that might seem crazy.
12:25 < Abraxsi> regarding prototypes.. i am wondering what type of problem you use them for
12:26 < n2liquid> Abraxsi: you mean prototypal inheritance?
12:26 < Abraxsi> i don't tend to find the need to extend objects very often
12:26 < Abraxsi> yes
12:26 < Abraxsi> in fact. I never extend objects
12:26 < Abraxsi> i use libraries, write functions.. and use them
12:27 < n2liquid> Hm
12:27 < n2liquid> Well, then there's nothing special about prototypes; you don't use inheritance in general
12:27 < Abraxsi> happy to learn where i should be plugging them into my overall approach
12:28 < Abraxsi> is it more for when you're writing a library of your own
12:28 < Abraxsi> ?
12:28 < n2liquid> Not sure; I'm inclined to say yes
12:28 < Abraxsi> i've written a few jquery plugins using widget factory... again not needed prototypical inheritance
12:28 < n2liquid> But it might as well not be related
12:30 < n2liquid> Abraxsi: If you wanna know something I use prototypes for which is not inheritance per se, take a look at this: https://github.com/n2liquid/js-emitter/blob/master/lib/main.js
12:30 < n2liquid> That program receives JSON objects and needs to act upon them
12:30 < n2liquid> The JSON objects are tagged with a "type" property which I use to link them to a prototype
12:31 < n2liquid> In the prototypes, I put the behavior (methods) which act upon object data
12:33 < Abraxsi> so you don't use a wrapper object. you're actually giving the json object access to a set of methods it thinks belong to it
12:35 < Abraxsi> i guess i tend to keep my data and functions separate
12:36 < Abraxsi> thanks for explaining your use case though
12:37 < Abraxsi> perhaps it's something more c/c++/c# people do? (making an assuption based on your brace formatting ;-) )
12:42 < n2liquid> Abraxsi: Not really, that's not even possible in C++ (you guessed right, I'm a C++ programmer)
12:44 < n2liquid> I just think that writing a wrapper would be more verbose :P
12:45 < nsno> allman bracing, the One True Style :P
12:45 < nsno> *hides*
12:45 < n2liquid> I don't do that all the time, though, only when I'm operating on syntax trees
12:45 < n2liquid> Do we have a beer bot here?
12:46 < n2liquid> nsno++
12:46 < n2liquid> Or something :P
12:47 < SomeoneWeird> lol
12:47 < Abraxsi> nothing can beat numbered lines and goto statements for control loop formatting if we're honest :-S
12:47 < n2liquid> Well, I'm leaving, bye guys
12:47 < Abraxsi> bye
12:58 < Beg> hey guys, do you guys know if I need the less file from bootstrap if I use the css?
12:58 < Beg> I imagine not, but just wanna make sure :>
13:06 < CodeZone> Hello
13:06 < noocx> hello
13:28 < Paul___> Hello everybody
13:29 < Tyrantelf> Hello
13:31 < bulkan> hello
13:32 < Paul___> I like to develop a project of social network but I wondered if It's better do everything with node.js (site = chat + wall ...) or use for exemple symfony then do in ajax the chat and wall
13:34 < alasi> Chat definitely
13:35 < alasi> And it might be good to just focus on one technology as long as u dont mind headaches Paul___
13:36 < Paul___> okay
13:41 < Trudko> Guys it is common to use MVC pattern with express js? I am used to MVC , are there any drawbacks for using MVC specific to nodejs/express?
13:45 < Beg> Is there a library for drag and drop editing pages?
13:53 < rootools> Hi, smth work with Steam OpenID?
13:54 < rootools> at nodejs =)
13:55 < Beg> passwords rootools ?
13:55 < Beg> passport* rootools with openId library
13:57 < Abraxsi> Beg, drag and drop editing [html] pages doesn't sound very node.js
13:58 < rootools> Beg, in passport examples passport use to auth users in express, but i need get users_auth_key to get requests to steam api
13:58 < Beg> Abraxsi> True that, but I was thinking of a complete page editing solution combined with nodejs+html+mongodb
13:59 < Beg> rootools> Passport is able to use any openId link. My knowledge ends there.
15:40 < camping> hi
15:40 < camping> hello
15:40 < camping> is anyone there?
15:40 < camping> hello
15:40 < camping> hello
15:40 < camping> who's there?
15:40 < camping> who wants to talk?
15:40 < camping> hello
15:40 < bradleymeck> ...
15:41 < camping> hey did any of you read the internet news?
15:41 < camping> i read the news on nerws.ycombinator
15:41 < camping> did you read it?
15:41 < camping> hello
15:41 < camping> hey
15:42 < camping> give me channel operator whatever
15:42 < camping> make me operator
15:42 < camping> make me operator
15:42 < camping> i love new york
15:43 < bnoordhuis> eh? i don't even
15:43 < rhalff> ban the bot please :-)
15:43 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
15:44 < camping> how's the weather
15:44 < camping> ?
15:44 < camping> the weather outside is great
15:44 -!- camping was kicked from #Node.js by bnoordhuis [bye]
15:44 <@bnoordhuis> let's see if he gets the hint
15:44 < ozette> thank god
15:46 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
15:47 < basdfg> this is boring and i'm leaving right now:
15:47 < bradleymeck> why is json-schema so fin hard to make fast… (well any schema for that matter)
15:50 < rhalff> bradleymeck, thanks I never heard of json schema :-) Seems like an alterhative for xml and relax ng.
15:50 < rhalff> ofcourse all I did was opening the website, so no idea if I'm right.
15:50 < bradleymeck> yea, but denormalizing and recursive schemas are painful :/
15:51 < bradleymeck> it is single pass recursive … which is an odd attribute
15:52 < Epiphany> looking for a node.js user group in Raleigh, NC. Anyone know of one?
15:55 < bradleymeck> rmurphey would be the person to ask shes out of durham
16:49 < owen1> i plan a talk about conerting large codebase to node. any suggestions for name?
16:49 < owen1> converting
16:50 < owen1> (name of the talk)
16:51 < wdbl> you should call it: using Typescript with Node.js
16:52 < wdbl> (i kid)
16:53 < EaterOfCorpses> hi all :)
16:53 < wdbl> Seriously, "Converting a Large Codebase to Node" sounds fine to me.
16:53 < wdbl> or "Porting a Large...."
16:56 < owen1> wdbl: From Big Ball of Mud to JavaScript Poetry
16:57 < wdbl> I'm not sure I'd know what that talk is about.
16:57 < owen1> good point
16:59 < owen1> "From a Big Ball of Mud to JavaScript Poetry - migrating large codebase"
16:59 < groundwater> owen1: "practical refactoring"
17:00 < wdbl> I would put the migrating large codebase part first and use the ball/mud/poetry thing as the tagline.
17:00 < owen1> groundwater: nice
17:00 < owen1> "Practical Refactoring - From a Big Ball of Mud to JavaScript Poetry"
17:01 < groundwater> owen1: who is the target? people already loving JS or people you have to convince?
17:01 < owen1> js lovers
17:01 < wdbl> are you going from a large JS codebase to node or from some other language to js/node?
17:01 < owen1> ruby -> node
17:01 < owen1> large, yeah
17:02 < wdbl> if going from other language to js/node, then it's not really refactoring
17:02 < wdbl> it's porting
17:02 < wdbl> or converting
17:02 < wdbl> (or migrating - actually i like that word the best)
17:02 < groundwater> that's what the quotes are for
17:02 < groundwater> it's a joke
17:02 < wdbl> ahhh I see
17:02 < groundwater> =]
17:02 < wdbl> I have no sense of humor
17:03 < owen1> i didn't get it as well
17:03 < owen1> "The Big Migration - from a Ball of Mud to Javascript Haiku"
17:05 < groundwater> have you watched Erin Hammer's talk about the same thing?
17:06 < owen1> groundwater: yup. and talked to him at nodeconf
17:06 < owen1> one of my topics will be express vs hapi vs http.createServer
17:06 < groundwater> owen1: i really liked his talk, i actually used it to convince some people at work to migrate certain services to node
17:07 < owen1> groundwater: yeah. we are going to use http-proxy to route requests to our legacy ruby code
17:07 < groundwater> us too!
17:07 < owen1> oh sweet
17:07 < fiveisprime> what's the talk called so I can go find it?
17:07 < groundwater> don't replace ruby, just avoid it =]
17:08 < owen1> fiveisprime: looking. 1 sec
17:09 < owen1> fiveisprime: http://www.joyent.com/blog/is-node-ready-for-the-enterprise
17:09 < fiveisprime> cool, thanks a lot
17:09 < owen1> yw
17:18 < owen1> i think it would be cool to give a talk titled: Web Frameworks fight! Hapi vs Express vs http.createServer
17:22 < TEE> hi
17:23 < TEE> i'm a programming in thai
17:25 < owen1> that's awesome
17:44 < superic> new to node and playing around with tempating. I see this list https://github.com/joyent/node/wiki/modules#wiki-templating and it's huge. can someone recommend their favorite or 'best' preference for a templating engine?
17:46 < andrewaclt> superic, jade has worked well for me. I've also use handlebars
17:46 < niggler> where are you coming from superic ?
17:47 < superic> I've used mustache and razor quite a bit
17:48 < niggler> handlebars is probably the best next step
17:48 < superic> maybe that means handlebars 
17:48 < superic> yeah
17:48 < niggler> I like EJS 
17:51 < owen1> superic: ejs or jade are the most popular, i believe
17:52 < superic> I'm leaning toward ejs now (if only to experiment.) I don't prefer the jade/haml syntax.
17:55 < mindcruzer> i didnt like jade either
17:56 < mindcruzer> coming from jinja2 and handlebars, but you can make templates really fast once you get used to it
17:56 < mindcruzer> in my experience anyway
17:57 < robojuice> Hi guys. I have a newb question on using decipher. I pass update a buffer (the output of a previous cipher) and concatinate final, expecting the result to be a buffer also. However i get an error saying "wrong final block length")
18:28 < disorder_> hi
18:29 < disorder_> I'm trying to make an app with mongodb
18:30 < disorder_> however I don't know how to pass the db variable to the routing functions
18:30 < disorder_> http://pastebin.com/985jGcFu
18:40 < andrewaclt> disorder_, instead of doing it that way, why not just connect to the db inside your view functions?
18:40 < andrewaclt> Sorry, I guess they are technically the controller functions :)
18:43 < andrewaclt> disorder_, e.g. in the ShowDocs function in your example
18:55 < oklada> does anyone have a good handle on the difference between module.export and exports
18:55 < disorder_> andrewaclt: mmh yes I can do that
18:56 < disorder_> I didn't want to connect to the db in every function
18:56 < disorder_> but it's a solution
18:56 < andrewaclt> disorder_, create a db module that is a closure around the actual connection
18:56 < andrewaclt> require it in any file that needs the db
18:59 < disorder_> andrewaclt: thanks
18:59 < disorder_> it looks good
19:00 < disorder_> I could do also define a global var and then assign it inside the connect callback
19:00 < disorder_> but your module solution is better
19:08 < gluxon> isaacbw, isaacs: My brother's been playing Deadspace and I'm forced to listen to all the audio from that game. Isaac seems a bit cooler of a name now.
19:16 < sinclair|net> hey isaacbw 
19:44 < alasi> For a node multiplayer game with gravity and animations, is it better to stream the exact x and y's of all the players at all times or to stream their keystrokes?
19:45 < mbalho> if youre running physics on the server you wanna do keystrokes
19:46 < kenperkins> man
19:46 < kenperkins> another 777 crash with no fatalities
19:46 < kenperkins> I guess that's the plane to fly
19:46 < kenperkins> (if something is going to go wrong)
19:47 < sinclair|net> alasi: http://gafferongames.com/game-physics/networked-physics/
19:48 < sinclair|net> also, maybe you don't want to be using nodejs for physics?
19:48 < alasi> sinclair|net: Clientside gravity
19:48 < alasi> Treat it as an animation or somethin'
19:49 < sinclair|net> alasi: read the article
19:49 < alasi> ok
19:50 < sinclair|net> yay, npm cache refreshed
19:50 < alasi> is the article in C? :P
19:50 < sinclair|net> language is irrelephant 
19:50 < alasi> Ah yes cheating
19:50 < alasi> hmm
19:51 < sinclair|net> mbalho: hello there
19:52  * mbalho waves
19:52 < alasi> haha
19:52 < sinclair|net> mbalho: can i show you my new npm module?
19:52 < sinclair|net> mbalho: its pretty damn awesome
19:53 < sinclair|net> at least, i think it is
19:53 < mbalho> you cant show it to me, sorry
19:53 < mbalho> not allowed
19:54 < AAA_awright> alasi: Keystrokes?
19:54 < sinclair|net> AAA_awright: oh, you would be interested..
19:54 < alasi> yis
19:54 < alasi> haha
19:54 < alasi> AAA_awright: You have multiplayer experience? :P
19:54 < sinclair|net> AAA_awright: finally got around to putting this one up https://npmjs.org/package/appex
19:54 < AAA_awright> In gaming you usually send a position and velocity vectors, and rotational velocity
19:55 < alasi> that makes sense
19:55 < AAA_awright> Perhaps a timestamp too, to minimize jitter
19:55 < alasi> Or just do a destination position
19:55 < AAA_awright> Depends on the game
19:55 < alasi> Like a 2d sideview shooter?
19:56 < jwm> hmm
19:56 < AAA_awright> But basically, you're sending a formula so you can calculate where a player will be at, at time t
19:56 < jwm> #mongodb is dead right now
19:56 < AAA_awright> And that formula gets updated as they change where they're going
19:56 < jwm> anyone use mongo in a replicate set/sharding
19:56 < alasi> Ah
19:56 < alasi> How does the timestamp come into play?
19:56 < AAA_awright> So everything looks smooth, it appears they're continously moving
19:56 < jwm> I was wondering if I can do so across from a private network to a public
19:56 < alasi> Oh
19:56 < sinclair|net> AAA_awright: ?
19:57 < AAA_awright> alasi: Because not all packets will arrive at the same time, if you add timestamps you can take this into account in position calculations
19:57 < AAA_awright> sinclair|net: I'll take a look
19:57 < alasi> even in sockets?
19:57 < alasi> Wait nvm stupid question :D
19:57 < AAA_awright> alasi: I mean, the roundtrip ping times change, one packet might take 100ms, another 110ms
19:58 < alasi> But the timestamp will be eaten by the server.. right?
19:58 < AAA_awright> It's pretty advanced stuff to try and account for that, a simple linear calculation is good enough for most games
19:58 < alasi> Ah
19:58 < AAA_awright> alasi: Uh, no?
19:58 < sinclair|net> AAA_awright: keen to hear your thoughts
19:58 < AAA_awright> alasi: Clients timestamp their own packets, send out a packet every 400ms or so, and also whenever the player changes where they're moving (changes their velocity), up to every 50ms perhaps
19:59 < alasi> Ok
19:59 < AAA_awright> This is done in 2D or 3D space. 3D space is just tricky if you want to do angular velocity.
19:59 < alasi> Yea, Im planning 2d space probably
20:00 < alasi> But I have another candidate, a tile based topdown game
20:00 < alasi> No gravity
20:00 < sinclair|net> alasi: http://box2d-js.sourceforge.net/
20:00 < AAA_awright> The goal you're aiming for, is if a client suddenly lost its network connection, the player should be moving in a straight line or in a circle (if it has angular velocity)
20:00 < alasi> sinclair|net: yep
20:00 < AAA_awright> Basically, know your kinematics
20:01 < sinclair|net> alasi: and probably running on the server 
20:01 < sinclair|net> alasi: read that article i posted to you
20:01 < alasi> hmm
20:01 < alasi> How would that be rendered, sinclair on the server?
20:01 < sinclair|net> alasi: physics are not rendered
20:01 < sinclair|net> physics are pure math
20:01 < AAA_awright> sinclair|net: What problem does this solve?
20:01 < alasi> I have a lot to learn :D
20:02 < alasi> Should physics be clientside and serverside, serverside for verification and even other clientsides for verification?
20:02 < sinclair|net> AAA_awright: if you have multiple clients, they all need to simulate things, however, the server also needs to simulate things, and help sync conflicts between clients
20:02 < sinclair|net> again, read the article
20:02 < AAA_awright> alasi: For instance if you're simulating a ship flying in space, you have 3D angular velocity, 3D positional velocity, a 3D position,*and* one, two, or three dimensions of acceleration too
20:02 < AAA_awright> It can get complicated
20:02 < alasi> alright
20:02 < AAA_awright> alasi: That doesn't really make much sense
20:03 < alasi> sorry sinclair
20:03 < sinclair|net> AAA_awright: http://gafferongames.com/game-physics/networked-physics/
20:03 < AAA_awright> Clients can lie about their position, it's a network application after all
20:03 < alasi> AAA_awright: but for other clients that are hopefully honest?
20:03 < sinclair|net> AAA_awright: ready to take a look at that module?
20:03 < alasi> haha
20:03 < alasi> ah watever
20:04 < AAA_awright> alasi: But given a position vector, velocity vector, and angular velocity (for a 2D shooter, perhaps), how would you "render" that on the server? Unless you're rendering the graphics on the server and streaming video to clients... That's information for clients to use.
20:04 < AAA_awright> sinclair|net: Yeah, and... what problem does it solve?
20:04 < sinclair|net> AAA_awright: https://github.com/sinclairzx81/appex
20:04 < sinclair|net> lets you export modules over http
20:05 < sinclair|net> lets you export modules over http and provide typed contracts to clients
20:05 < alasi> AAA_awright: IDK
20:05 < sinclair|net> lets you export modules over http and generate backbone models
20:05 < sinclair|net> AAA_awright: lets you write http endpoints with functions
20:06 < sinclair|net> AAA_awright: so, solves a lot of problems
20:06 < sinclair|net> as well as introducing new functionality into nodejs
20:07 < alasi> I'm going to test out socketsio right now
20:08 < sinclair|net> AAA_awright: was going to work on a .... var whatever appex.require('http://localhost:3000'); 
20:08 < sinclair|net> type of thing with it
20:08 < alasi> sinclair when we first started you said you didnt recommend gravity on a node server..
20:09 < sinclair|net> alasi: javascript is still not the ideal thing for physics simulations
20:09 < alasi> ah
20:09 < alasi> But for player physics?
20:09 < alasi> Jumping.. and falling?
20:09 < AAA_awright> Really?
20:09 < AAA_awright> Kinematics is fairly straightforward
20:09 < sinclair|net> AAA_awright: or perhaps a appex.require('http://localhost:3000', function(module){})
20:10 < sinclair|net> AAA_awright: k, can see you aint interested
20:10  * sinclair|net moves on
20:10 < alasi> Are there any good socketio demos out there that can work with heroku?
20:10 < AAA_awright> sinclair|net: Someone is asking questions, I'm reading what you're providing me with
20:11 < mdel> alasi, heroku doesn't officially support websockets
20:11 < alasi> yes
20:11 < AAA_awright> Who is it going to seem like I'm taking to more :p
20:11 < alasi> but socketio makes it happen apparently mdel
20:11 < mdel> well yes, but prepare yourself for issues
20:11 < alasi> or does it not?
20:11 < alasi> like what
20:11 < alasi> some packets not being accepted?
20:11 < mdel> it falls back to xhr polling. it's not reliable.
20:12 < alasi> hmmm
20:12 < mdel> on a single dyno at least
20:12 < sinclair|net> AAA_awright: ive already sent a in depth article on how to do networked physics simulation, and he aint reading it
20:12 < sinclair|net> soooo
20:12 < mdel> alasi, bottom line, if you want socketio, just avoid Heroku for now
20:12 < alasi> the other options are nodejitsu, vpn, or a raspberry pi, mdel?
20:12 < mdel> raspberry pi lol
20:12 < alasi> whaaat? xD
20:13 < mdel> you could try nodejitsu, joyent, etc
20:13 < alasi> yea
20:13 < alasi> I just want a free tier
20:13 < AAA_awright> sinclair|net: So it'll return a function when you make a request?
20:13 < mdel> i would suggest just getting a VPN and doing it yourself though, unless you need their tools
20:13 < alasi> mm
20:13 < mdel> very easy with nginx
20:13 < sinclair|net> AAA_awright: nope, it will return a library of functions
20:13 < AAA_awright> Well, still
20:14 < alasi> mdel, it seems if I develop locally I may not be able to tell if my sockets work globally tho?
20:14 < mdel> alasi, i really have no idea what that means
20:14 < AAA_awright> How is this done? It doesn't seem much more complex than what Node.js already does, except over HTTP
20:14 < sinclair|net> AAA_awright: have a think about how you would do that otherwise
20:14 < mdel> develop locally, and if your deployment target is set up properly, it will "Just Work"
20:15 < alasi> Alright
20:15 < alasi> Are sockets themselves questionable?
20:15 < sinclair|net> AAA_awright: var mymodule = require('mymodule'); // how to you make that module callable over http?
20:15 < mdel> alasi depends on your application
20:15 < alasi> Like, am I better off with another protocol mdel?
20:15 < alasi> A game
20:15 < alasi> Multiplayer
20:16 < AAA_awright> sinclair|net: require('requirehttp')('http://example.org/mymodule')
20:16 < AAA_awright> I guess that's what you're doing but I don't see a nice clean seperation of client-side code from server-side
20:16 < mdel> alasi, I can't really tell you if sockets are right for you, but many people use them to power games and other real-time applications
20:16 < sinclair|net> AAA_awright: what do you mean?
20:16 < mdel> you will need to research the pros/cons anyway, so you should do that before making a decision
20:17 < alasi> Okay
20:17 < alasi> thanks
20:17 < alasi> I'll afk for a bit
20:17 < mdel> :)
20:17 < alasi> thanks AAA_awright and sinclair too
20:17 < AAA_awright> sinclair|net: I'd focus on how I can e.g. make my own server. Do I just return application/ecmascript, which gets eval'ed?
20:17 < sinclair|net> AAA_awright: for one, require is synchronous, so that wouldn't work
20:17 < sinclair|net> AAA_awright: no
20:17 < sinclair|net> AAA_awright: there is no eval
20:18 < AAA_awright> sinclair|net: Well you'd have to add a callback argument or something
20:18 < sinclair|net> there is only a http client with a proxy
20:18 < sinclair|net> appex.require() would
20:18 < AAA_awright> Uh... So how is executable code getting to the client?
20:18 < sinclair|net> 1) go to the endpoint, read the metadata
20:18 < AAA_awright> It's either new Function() or eval()
20:18 < sinclair|net> 2) generate a js proxy from metadata
20:18 < sinclair|net> 3) return to client
20:19 < sinclair|net> AAA_awright: which is the other thing appex is good at, meta data...automatically generating that meta data
20:21 < sinclair|net> AAA_awright: so, lets assume you have an express instance, and you want to write an restful api, appex would be a good candidate for that as it can produce meaningful metadata about the endpoints without the developer doing more than writing functions
20:21 < AAA_awright> How is this RESTful?
20:21 < AAA_awright> Or how would you use it as such
20:22 < AAA_awright> Particularly, how would you use this to manage resources on a server, that contain links to each other
20:22 < sinclair|net> AAA_awright: i am not sure i follow what you mean by "how is this RESTful"
20:22 < AAA_awright> Well actually, I forget, REST allows for "code on demand"
20:22 < sinclair|net> AAA_awright: as in, what do you do in instances where you need /path/path/(*.) ?
20:23 < sinclair|net> where (*.) is some wildcard to some resource?
20:23 < AAA_awright> sinclair|net: So when building a RESTful service there's a few things I consider. You have to manage a set of resources, identified by URIs
20:23 < sinclair|net> correct
20:23 < AAA_awright> These resources have hyperlinks to each other
20:24 < AAA_awright> And they can contain code, so if you don't know how to use them, you execute code to do so
20:24 < sinclair|net> hyperlinks are not a server side concern
20:24 < sinclair|net> rather, creating urls that map to resources are
20:24 < AAA_awright> Yeah they are... If I add a comment to a blog post, that's a link relationship
20:24 < AAA_awright> If I delete the post, I may want to delete the comments too, the server has to understand that relationship
20:24 < sinclair|net> AAA_awright: then your terminology is wrong
20:25 < AAA_awright> What would you call that?
20:25 < sinclair|net> AAA_awright: not a hyperlink
20:26 <@isaacbw> HYPERDRIVE
20:26 < AAA_awright> A hyperlink is a reference to another resource, especially one that can be followed
20:26 <@isaacbw> ZOOOOOOOOOOOOOOOOM
20:26 < sinclair|net> AAA_awright: also, name a technology that does this automatically (outside of SQL Server foreign key constaints with DELETE rules)
20:26 < AAA_awright> sinclair|net: REST requires that it be globally addressable, I don't really have a method of identifying a record on an arbritrary SQL server
20:27 < AAA_awright> Lots of things do this automatically?
20:27 < sinclair|net> AAA_awright: of course you do
20:27 < AAA_awright> Content managemement systems?
20:27 < sinclair|net> AAA_awright: are you saying its impossible to map a url to a database record?
20:27 < ckknight> of course it's possible
20:27 < sinclair|net> exactly
20:27 < ckknight> given a sane URL structure
20:27 < AAA_awright> sinclair|net: Not impossible, just not done to arbritrary records
20:27 < ckknight> in fact, it's necessary
20:27 <@isaacbw> ssshhh
20:28 < ckknight> but only the server-side needs to know how to do said mapping
20:28 < sinclair|net> ckknight: ++
20:28 < AAA_awright> Yeah, URIs being opaque
20:28 <@isaacbw> my URIs are rainbow
20:28 < ckknight> I love when you can have URLs not have ugly IDs in them
20:28 < ckknight> e.g. /users/ckknight, not /users/123456-ckknight
20:28 < ckknight> ick
20:28 < ckknight> slugs > ids
20:30 < pachet> you know what's a terrible example of that
20:30 < pachet> imdb
20:30 < AAA_awright> sinclair|net: What about embedding content? If I visit the front page of a website, the server has to know what kinds of content it's going to display, it understands that there's a relationship between content on some minimal level
20:31 < pachet> how many steve-buschemi collisions can you have
20:31 <@isaacbw> imdb is made of farts
20:31 < ckknight> pachet: ick. Especially with SAG restrictions on names
20:31 < AAA_awright> sinclair|net: In any event, it seems like the practical application would be code-on-demand
20:31 < ckknight> what I think is nice is when you have /users/blah then /users/blah-2 on conflict
20:31 < pachet> yeah
20:31 < ckknight> so at least you don't get huge-as-hell numbers
20:31 <@isaacbw> launch an empty page and develop your app based on bug reports
20:32 <@isaacbw> "app doesn't exist"
20:32 <@isaacbw> ^ code on demand
20:32 < ckknight> isaacbw: "app should tell me it doesn't exist if it doesn't exist"
20:45 <@isaacbw> if you use sequential ids in urls, then your users will know how few other people are actually using your app
20:45 < ckknight> isaacbw: yes, they must never know how truly alone they are.
20:45 <@isaacbw> lol
20:48 < tuxnani> hi, i am trying to install node.js in ubuntu, and after installation, i cant use node
20:48 < ckknight> what error are you getting?
20:48 < tuxnani> nothing
20:48 < tuxnani> no error, no version nothing
20:48 < tuxnani> blank
20:49 <@isaacbw> it's opening a repl
20:49 <@isaacbw> type something in
20:49 < alasi> type 2+2 tuxnani
20:50 < alasi> $ node   then type 2+2
20:50 < tuxnani> it doesnt open anything
20:50 < alasi> it goes back to $?
20:50 < tuxnani> returns me back to regular shell
20:50 < tuxnani> yes
20:50 < alasi> hmm
20:50 <@isaacbw> what does node --version tell you
20:50 < tuxnani> i am trying to build from source anyway
20:50 < alasi> eew
20:50 <@isaacbw> did you install this from the ppa or from ubuntu repos?
20:50 <@isaacbw> because ubuntu repos are a mess
20:50 < tuxnani> again it send me back to $
20:50 <@isaacbw> someone link that ppa
20:51 < alasi> I have socket.io and express 3 installed.. I get this after the message socket.io started: "warn  - error raised: Error: listen EACCES"
20:51 < alasi> then, it also goes back to $
20:51 < tuxnani> isaacbw: i first tried repos and then chris lea's ppa
20:51 <@isaacbw> weird
20:51 < Aredridel> What port are you trying to listen on, alasi ?
20:52 < alasi> 80
20:52 < alasi> afk for a sec
20:52 < Aredridel> Under most unixes, 80 requires you to run as root.
20:52 < Aredridel> (anything under 1024 does)
20:53 < alasi> so I should do another port?
20:53 < alasi> 8000?
20:53 < alasi> 8888?
20:53 <@nexxy> 1337, obviously
20:53 < ckknight> 3000, 8000, 8888 are good ports for dev testing
20:54 < alasi> why's that nexxy?
20:54 <@nexxy> it makes you leet
20:54 < ckknight> I usually do x000 where x is a specific integer of a project I'm working on
20:54 < alasi> ah
20:54 < alasi> I'm gonna do 9000 is thats ok
20:54 < ckknight> 9000, the forbidden port
20:54 < alasi> ooh
20:54 < alasi> lool
20:54 < ckknight> :P
20:54 < ckknight> better do 9001
20:54 < bingomanatee> hi there!
20:55 < alasi> wait seriously tho?
20:55 <@isaacbw> 8080 is what cool people use
20:55 < bingomanatee> Have created an extensive MVC solution at http://wonderlandlabs.com/blog_folder/hive_mvc
20:55 < alasi> hmm :P
20:55 < alasi> ok
20:55 < ckknight> then someone can ask "what port do you use" and you can say "it's over nine thousand!"
20:55 < ckknight> alasi: anything over 1024 is perfectly fine as long as another process hasn't claimed the port.
20:55 < alasi> alright
20:56 < alasi> are there any background processes I should be aware of?
20:56 < alasi> "Heartbeat packet" a default packet to make sure the sockets not closed?
20:57 < ashnur> morning
20:58 < alasi> Hmm how are multi-connections interpreted? New objects with generated hashes? Or wut?
20:59 <@isaacbw> what
20:59 < alasi> For sockets
20:59 < alasi> sockets io specifically
20:59 < ckknight> however socket.io handles it
20:59 < ckknight> probably with a unique object per connection
20:59 < ckknight> that's how I'd do it
20:59 < alasi> ah
20:59 < alasi> how do I get that object?
21:01 < tuxnani> hey, i am frustrated, even building from source, i end up with $ return for "node -i"
21:01 < ckknight> alasi: why don't you play around with Socket.IO and do what you're "supposed to" do first?
21:01 < alasi> yea
21:01 < alasi> I already did the hello world object
21:01 < ckknight> tuxnani: node -p "1 + 2"
21:02 < tuxnani> my bad, i didnt restart apache! 
21:02 < tuxnani> now got it
21:02 < ckknight> I have no idea how that's related.
21:02 < alasi> hha
21:02 < alasi> maybe theyre on the same port
21:02 < alasi> or no
21:04 < alasi> Ima make a real stupid chat client
21:07 < Aredridel> bingomanatee: Did you make the problem to go with it?
21:08 < bingomanatee> sorry? 
21:08 < bingomanatee> there were several tasks I had underway with it
21:08 < bingomanatee> I had a local API for PersonalCapital I had to emulate
21:08 < bingomanatee> basic blog I was working on
21:18 < Aredridel> Sorry. Just so easy to mock someone when they say they have a solution.
21:21 <@isaacbw> solution has a few different meanings
21:22 <@isaacbw> you shouldn't mock someone for solving problems
21:25 <@isaacbw> and structuring large applications *is* a problem
21:25 <@isaacbw> that said, it's hard to tell what you've actually done from your website bingomanatee
21:25 <@isaacbw> damn
21:25 <@isaacbw> bastard left
21:26 < alasi> If 'sockets' is the global stream all the clients are listening to, then is 'socket' the this
21:26 < alasi> sorry
21:26 <@isaacbw> lol what
21:26 < alasi> If 'sockets' is the global stream all the clients are listening to, then is 'socket' the 'this' client connection?
21:27 < alasi> I pressed enter while typing :D
21:27 < alasi> in the subject of sockets.io
21:27 <@isaacbw> what do you mean this
21:27 < alasi> sockets.io
21:28 <@isaacbw> your question doesn't make sense
21:29 <@isaacbw> what is "the 'this' client connection"
21:29 <@isaacbw> do you maybe have a code snippet?
21:29 < alasi> shore
21:30 < alasi> io.sockets.on('connection', function (socket) {
21:30 < alasi>   socket.emit('news', { hello: 'world' });
21:30 < alasi>   socket.on('my other event', function (data) {
21:30 < alasi>     console.log(data);
21:30 < alasi>   });
21:30 < alasi> });
21:30 < alasi> oh wait
21:30 < alasi> heh
21:30 < alasi> nevermind
21:30 < alasi> no actually
21:30 <@isaacbw> so what's your question
21:30 < alasi> still have my question
21:30 <@isaacbw> in the context of that snippet
21:31 < alasi> so in the 'connection' object, how can I apply a property to that on the client side and get that on the server side?
21:31 < alasi> for example connection.username ?
21:31 < alasi> if that makes sense
21:32 <@isaacbw> the connection object?
21:32 < alasi> oh wait
21:32 < alasi> thats an even
21:32 < alasi> t
21:32 <@isaacbw> well, socket.io is just for sending messages
21:32 <@isaacbw> so you would send a message, maybe, like "set-property"
21:32 < alasi> From the client, yes
21:33 <@isaacbw> there's no object sharing mechanism built into socket.io
21:33 <@isaacbw> it's just messages back and forth
21:33 < alasi> but then how do you identify a specific connection?
21:33 <@isaacbw> 'this' is meaningless in both of those closures
21:33 < alasi> For, say, showing a username on a chatroom?
21:33 <@isaacbw> alasi: maybe you don't understand closures completely
21:34 < alasi> probably :P
21:34 <@isaacbw> do you mean how would you send client information to the server?
21:34 < alasi> yis
21:34 <@isaacbw> just send a message like, "client-id" with a json object containing info
21:34 < alasi> Okey
21:35 < alasi> But then how do I res info back to that sender?
21:35 <@isaacbw> socket.emit(...)
21:35 <@isaacbw> why would you have to send it back though?
21:36 < alasi> not "it" specifically, but say the server wanted to send somethin' to you and only you?
21:36 < alasi> Would the other clients have to just ignore it?
21:36 <@isaacbw> your socket object is unique per connection
21:36 <@isaacbw> inside that closure
21:36 < alasi> ahh
21:36 <@isaacbw> if that makes sense
21:37 < alasi> And then if I wanted to globally emit something?
21:37 < alasi> sorry if im going in circles
21:37 <@isaacbw> I think there's a global emit function somewhere
21:37 <@isaacbw> otherwise just keep a list of all sockets somewhere and loop through it
21:37 < alasi> like broadcast, yes
21:37 <@isaacbw> make sure to remove closed sockets from the list
21:37 < alasi> alright
21:37 < alasi> thanks isaacbw!
21:37 <@isaacbw> np
21:37 <@isaacbw> let me know if you have more questions
21:38 < alasi> Ill hang around though while I try this thing
21:38 <@isaacbw> closures can be conceptually difficult at first
21:38 < sinclair|net> real javascript question for someone
21:38 < sinclair|net> lets say i have a method ...
21:39 < sinclair|net> function method(a, b, c, d) {}
21:39 < sinclair|net> i can call that method like ... method(1, 2, 3, 4) {}
21:39 < sinclair|net> however, can i call that method with ...
21:39 < sinclair|net> var array = [1, 2, 3, 4];
21:39 < sinclair|net> method(array); 
21:39 <@isaacbw> apply
21:39 < sinclair|net> method.apply(array) ?
21:40 <@isaacbw> damn, my internet just crapped out so I can't link you to it
21:40 <@isaacbw> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fapply
21:40 <@isaacbw> method.apply(null, array)
21:40 < alasi> sinclair|net why not just do a while loop and parse the array if the type is an array?
21:40 <@isaacbw> or whatever
21:40 <@isaacbw> this usually doesn't matter
21:40 < alasi> oh wait
21:40 <@isaacbw> I have one line in some DI code I wrote a while ago
21:40 <@isaacbw> let me find it
21:41 <@isaacbw> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fapply
21:41 <@isaacbw> dammit
21:41 <@isaacbw> Function.prototype.bind.apply(binding, injectedArgs); 
21:41 < sinclair|net> isaacbw: well, isnt javascript all of a sudden awesome
21:41 <@isaacbw> and a comment: //hallelujah!
21:41 < alasi> isaacbw, should the socket.emit('newmessage', { message: 'HULLO' }); also include a username property within the event?
21:42 <@isaacbw> alasi: I don't think so
21:42 < alasi> that can just be a one time emit then?
21:42 <@isaacbw> sure
21:42 < alasi> socket.emit('meusername', { name: 'alasi' });
21:43 < alasi> ^ that?
21:43 < alasi> on connection?
21:43 <@isaacbw> it's up to you, really, but identifying information is implicit thanks to closures
21:43 <@isaacbw> yea, that looks good
21:43 < alasi> alright
21:47 < alasi> When the server picks up a connection, is it good to respond   socket.emit('recognized', true); and then client listens for that to be an all clear?
21:48 < alasi> isaacbw sorry to ping you, but ^
21:48 <@isaacbw> sure, you could
21:49 <@isaacbw> I think socket.io might make that reduntant though
21:49 < alasi> ah
21:49 < alasi> ok!
21:53 < alasi> WOO! Well, got down that part
22:02 < sinclair|net> isaacbw: woot, just got wildcard routing working
22:02 < sinclair|net> isaacbw: nice one bro
22:03 < sinclair|net> isaacbw: https://github.com/sinclairzx81/appex#wildcard_functions
22:05 < sinclair|net> AAA_awright: in answer to your question on RESTful stuff, see link
22:06 < ningu> I want a rustful api, it would slowly oxidize over time
22:06 < ckknight> but code rots already with time
22:06 <@isaacbw> sinclair|net: nice
22:06 < dimadima> hi. can anyone recommend a library for packing up templates to use on the client side? i'm having trouble googling this. or refer me to a better channel in which to ask, if this isn't the right chan
22:06 < ningu> ckknight: if it's made of wood, sure. if it's bronze it gets a patina, if it's iron it rusts. so it varies ;)
22:07 < ningu> dimadima: do you mean like minifying the templates and storing them all in one file?
22:07 < sinclair|net> isaacbw: now, i can map to any url with functions alone
22:08 < alasi> isaacbw, how do I stick connecting to the socket inside a function while keeping the object global?
22:08 < ningu> alasi: it sounds like you would do just that, declare it global and connect inside a function
22:08 < dimadima> ningu: more or less, yeah. i'm using swig as my template engine, and right now i'm manually fs.readFile()ing them, stripping \n, and passing them as strings to the front end, where they are compiled and used
22:08 < alasi> ningu, it says it's undefined in another function tho
22:09 <@MI6> joyent/node: Trevor Norris master * eec4335 : smalloc: revert change to use pointer indirection - http://git.io/gSEzDw
22:09 < dimadima> ningu: i feel like there must be an existing way to do this 
22:09 < ningu> alasi: so I guess it hasn't been defined yet
22:09 < alasi> yah it has...
22:09 < alasi> var socket;
22:09 < ningu> alasi: I doubt it, if it's saying it's undefined :)
22:09 < ningu> alasi: that just declares it.
22:09 < alasi> yeah
22:09 < ningu> you have to assign something to it
22:09 < alasi> But..
22:09 < ningu> dimadima: there are things like browserify. but I don't know if you can bundle static assets like that.
22:10 < alasi> I have a connect and a sendmessage function ningu
22:10 < ningu> dimadima: it's a good question, though.
22:10 < ningu> alasi: if you put up the code somewhere that might help
22:10 < alasi> alright
22:10 < dimadima> ningu: for me one of the biggest draws of node is rolling the same stuff on the front and back. i imagine that's the big draw for lots of people. so i'm surprised i'm having trouble googling this
22:10 < ningu> 9/10 chance it's an async issue
22:10 < dimadima> will check out browserify though
22:11 < ningu> dimadima: browserify is mainly for modules
22:11 < ningu> dimadima: I kinda wonder if grunt has a plugin for this but I've never looked
22:11 < substack> dimadima: http://github.com/substack/brfs
22:11 < dimadima> i believe "jammit" does this with rails for documentcloud
22:12 < alasi> ningu: http://pastebin.com/Cw52mhqX
22:12 < substack> with brfs you fs.readFileSync() in your browser code and brfs inlines the file contents in-place
22:12 < dimadima> thanks substack, ningu, will check this stuff out
22:12 < ningu> substack: oh right, thanks
22:12 < ningu> I forgot about that
22:12 < dimadima> woah... fs.readFileSync() in browser? 
22:13 < dimadima> i'm not even sure what that might mean :)
22:13 < ningu> dimadima: it just defines a method that does the right thing
22:13 < AAA_awright> ningu: The whole point of REST is that it avoids code rot
22:13 < substack> dimadima: it just inlines the content at compile-time
22:13 < alasi> ningu
22:13 < AAA_awright> While doing highly interlinked application designs
22:13 < dimadima> cool i'll explore this stuff!
22:13 < ningu> alasi: you can't emit until the socket is ready
22:13 < alasi> yah
22:13 < dimadima> i feel like rolling templates on the back and front end is my personal holy grail here
22:14 < dimadima> i mean, the sample templates and the same code to achieve html rendering
22:14 < alasi> ningu but the emit function is user activated, so there has to be a few seconds latency with that
22:14 < alasi> however I do still get an error yes
22:14 < alasi> So how can I fix this?
22:14 < alasi> Manually connecting?
22:14 < ningu> alasi: huh?
22:14 < alasi> what
22:14 < ningu> alasi: the socket emits 'connect' when the connection is established
22:15 < ningu> I don't know what "manually connecting" even means
22:15 < alasi> Like..
22:15 < substack> dimadima: check out https://github.com/substack/hyperspace#example
22:15 < alasi> I want to connect to my socket at a certain point ningu
22:16 < alasi> is that possible?
22:16 < alasi> Like hitting a button
22:16 < substack> that example covers rendering the initial result set server-side and then adding on-demand content and realtime updates browser-side
22:16 < ningu> alasi: socket = io.connect(...); socket.on('connect', function () { /* do something */ });
22:16 < substack> using the same rendering logic
22:16 <@isaacbw> just don't call io.connect in your client until the button is clicked
22:16 < ningu> alasi: that doesn't make a lot of sense. the whole point of websockets is you connect when the page loads and keep the connection. otherwise you can't really use them.
22:16 < alasi> oh
22:16 < alasi> ok
22:16 < ningu> but yes, you can wait for when to call io.connect, sure. it's not hard to do.
22:17 < ningu> especially if you want multiple sockets or whatever, that might make sense.
22:17 < ningu> but usually one is enough I'd think.
22:17 < alasi> But not hard to do means more than a few functions eh?
22:17 < ningu> alasi: huh? no, just do what isaacbw said.
22:17 < ningu> you already have the function connect(). just call it when you want to call it.
22:17 < alasi> yeah
22:17 < ningu> I don't really see what the issue is
22:19 < dimadima> substack: you know, brfs looks like it's totally fine for what i'm looking for.
22:20 < ningu> dimadima: yeah, hopefully I'll remember next time. but substack basically wrote the book on this stuff.
22:20 < dimadima> substack: oh and shit, hyperspace, heh: "Use the same rendering logic in the browser and the server to build SEO-friendly pages with indexable realtime updates."
22:20 < dimadima> ningu: thanks man :)
22:20 < dimadima> can't believe it took me this long to /j node.js and ask. heh. 
22:21 < ningu> dimadima: basically sharing between client and server cleanly is hard even when both are JS, so it's taken a while, but people seem to be standardizing around browserify at least
22:21 < ningu> hyperspace is newer
22:22 <@isaacbw> it's cool alasi, this stuff takes time to understand
22:22 < varloc2000> hello
22:23 < dimadima> well this is pretty great already. i mean, even w/ my own fs.readFile() stuff, i'm like "hell yeah!", but i couldn't believe that this hasn't been worked on by other people for a while now. and indeed, clearly it has been. i wanna use whatever people are working on, you know :D, instead of rolling my own fs reads
22:23 < alasi> sorry bout that isaax
22:23 < alasi> isaac
22:23 < alasi> *
22:23 < varloc2000> who are you Alasi?
22:23 <@isaacbw> lol
22:24 < ningu> dimadima: sure. most of these things have already been done, but you have to do some poking around to find it sometimes
22:24 < varloc2000> alasi you are hear me?
22:25 < dimadima> well in the 3 minutes i've been here i've been pointed to more good stuff than all my poking on google in the past few days. many thanks!
22:25 < ningu> I don't think sound travels over irc
22:25 < ningu> dimadima: human search engines are still the best sometimes :P
22:25 <@isaacbw> maybe if you shout louder
22:26 < niggler> lol isaacbw 
22:27 < AAA_awright> sinclair|net: So you use typescript?
22:27 < sinclair|net> yes
22:28 < sinclair|net> AAA_awright: its web application written with typescript
22:28 < AAA_awright> I just modified Node.js to embed custom modules as native modules
22:28 < AAA_awright> i.e. be able to load typescript etc. modules natively
22:28 < AAA_awright> As well as require('jade') and such builtin
22:29 < AAA_awright> Or whatever you want
22:29 <@isaacbw> what does that mean/accomplish exactly
22:30 < AAA_awright> It means no installing modules for typescript, jade, async, ...
22:31 <@isaacbw> ah okay
22:31 < ningu> so where are they stored?
22:32 < AAA_awright> ningu: They're compiled in as a string, like the other native modules
22:32 <@isaacbw> native module is a little ambiguous. At first I thought you meant modules written with C++ components
22:33 < AAA_awright> It is. The utility to do it is a part of V8, it's called js2c.py... But it's not compiling anything, it's just stringifying the file and placing it in a .h header file
22:33 <@isaacbw> what would that do AAA_awright? Are you hoping node will start shipping with popular modules, or is it a way that you would make prepackaged node distributions?
22:34 < AAA_awright> isaacbw: It would be useful for typescript developers, for instance
22:34 < AAA_awright> Yes, prepackaged distributions too, for instance, compiling a minimal VM image
22:34 < ningu> AAA_awright: you still haven't said *why* it would be useful.
22:35 < AAA_awright> ningu: Normally to use alternative scripting languages you need to do weird stuff like define a custom extension or compile them into .js with a Makefile
22:35 < AAA_awright> But the support can exist natively
22:35 < ningu> what exactly are "alternative scripting languages"?
22:35 < AAA_awright> Typescript?
22:35 < ningu> bash? perl? 
22:35 < AAA_awright> Etc.
22:36 < AAA_awright> ningu: Stuff people have invented to compile into Javascript/Ecmascript
22:36 < ningu> ok. you could have just said JS transpilers :)
22:36 < AAA_awright> trans...piler. Huh.
22:36 < ningu> that's the term people usually use.
22:36 < AAA_awright> I'm talking about the language itself
22:37 < AAA_awright> Not the utility
22:37 < ningu> oh. well, then languages transpiled to JS, I guess.
22:37 < AAA_awright> Bringing native support for alternative scripting languages is about right
22:37 < ningu> AAA_awright: no, because it leaves completely vague what languages might qualify.
22:37 < AAA_awright> That's the point
22:38 < AAA_awright> It could be anything
22:38 < ningu> so you could bring support for perl?
22:38 < AAA_awright> If you wrote such a compiler, perhaps. But it doesn't even have to be executed languages.
22:38 < AAA_awright> It could be e.g. JSON, as Node.js does natively already
22:39 < AAA_awright> So you could also do require('config.yaml')
22:39 < AAA_awright> Natively
22:39 < AAA_awright> require('config.xml') and it returns a DOM object
22:39 < AAA_awright> etc
22:39 < AAA_awright> That's not compiled/transpiled, it's just an alternative language
22:40 < ningu> hmm
22:40 < ningu> ok
22:40 < ningu> then perhaps you should take out "scripting" :)
22:40 < ningu> apparently it just lets you insert any routine you want for requiring something with a different extension
22:50 < ferz> hi
22:51 < AAA_awright> ningu: And native modules too, like require('jade') without any installed libraries
22:55 < sinclair|net> AAA_awright: https://github.com/sinclairzx81/appex#wildcard_functions
22:55 < sinclair|net> AAA_awright: "typed" url arguments ftw
22:56 < AAA_awright> I'm trying to do URL-to-record matching using JSON Schema
22:57 < sinclair|net> AAA_awright: oh?
22:57 < sinclair|net> why do you need that?
23:00 < fesener_> Hey everyone, I'm using node.js and socket.io for the first time and I'm trying to show current active users to everyone live, I have generated userlist so far but should I socket.emit this list everytime a user connects&disconnects to all sockets or is there any other way ?
23:00 < AAA_awright> sinclair|net: Well with JSON Schema, you can provide a rel=self link to give JSON objects a URI
23:00 < AAA_awright> That link is calculated using URI Templates
23:00 < AAA_awright> that URI, rather, is calculated with URI Templates
23:01 < AAA_awright> It has {variables} in the URI pattern that get substituted, and such
23:01 < AAA_awright> I'm taking those patterns, and reversing them back into a JSON object, which I can use to query a database for the original object
23:02 < AAA_awright> JSON Schema has types, so I know which variables are supposed to be integers and such
23:02 < AAA_awright> And I can even assign them minimum lengths, so I know "100" is an invalid number for a year
23:02 < sinclair|net> AAA_awright: yeah, and i bet you manually type out those JSON Schema?
23:02 < AAA_awright> Well I have to anyways
23:02 < AAA_awright> Adding a single rel=self link on top of that is nothing
23:04 < sinclair|net> AAA_awright: generating schemas from type or meta information is way better
23:04 < AAA_awright> The schema *is* the meta information
23:05 < fesener_> Hey everyone, I'm using node.js and socket.io for the first time and I'm trying to show current active users to everyone live, I have generated userlist so far but should I socket.emit this list everytime a user connects&disconnects to all sockets or is there any other way ?
23:06 < AAA_awright> sinclair|net: My JSON Schema is where I define what widgets to use for displaying the object, how to edit it, render it, store it, etc
23:07 < AAA_awright> You need not do all this of course
23:13 < tinjaw> I want to build an API that returns an JSON string or an image
23:14 < tinjaw> image could be png, jpg, svg, etc
23:14 < tinjaw> should I use express? Seems like not right package since I won't be using whole web pages.
23:15 < sinclair|net> tinjaw: i got one for you
23:15 < tinjaw> or am I confusing express with express + template engine?
23:15 < sinclair|net> tinjaw: go on, be the first https://github.com/sinclairzx81/appex
23:17 < tinjaw> sinclair|net: not sure how that answers my question
23:18 < sinclair|net> you probably want to use something like the mime module
23:19 < sinclair|net> mime module, nodes fs, and a nodejs http server
23:22 < tinjaw> after reading some more, I am thinking that express is the way to go. I think I was thinking express was more than it is. It looks like a nice lightweight framework that would work well.
23:24 < Beg> tinjaw, check meteor, it's a complete solution, you won't have to pick then
23:29 < ningu> tinjaw: use express, not meteor :P
23:29 < niggler> screw meteor
23:29 < ningu> screwing a meteor sounds like it would be very painful.
23:30 < niggler> you get used to it after the first
23:31 < tinjaw> I have no clue what meteor does even after watching the video
23:31 < ningu> tinjaw: exactly
23:32 < niggler> meteor is an agile-motivated cloud-based api framework for CRM, optimized for SEO and WTF
23:32 < ningu> buzzword compliant
23:36 < dimadima> interesting... curl https://install.meteor.com | /bin/sh
23:36 < duko> hi I'm woondering what #node.js recommends for cloning an object and extending it with new methods?
23:36 < duko> I can think of many ways to do this, but I would like to know the most efficient or common way of doing it
23:37 < ckknight> duko: do you need the same prototype?
23:38 < ckknight> duko: and do you want to actually clone the object or would it be better to just make a new object with your old object as its prototype?
23:39 < duko> ckknight I want the same prototype. I would prefer to make a new object with the old object as its prototype.
23:39 < duko> maybe I should just clone the object and define new methods on the returned result?
23:40 < duko> but I would like to define the new methods with an object-literal 
23:41 < ckknight> firstly, what would be detrimental about simply making a new object with its prototype as the one you're "extending"?
23:42 < ferz> I would like to port npm on DragonflyBSD that it's an OS similar to FreeBSD, but I got following error: http://paste.scsys.co.uk/260295
23:42 < ferz> I've grep looking for fs.js without success. I've never used node until now. Anyone has hint to fix it?
23:43 < duko> ckknight I like doing just that -but I want extend the prototype with an object-literal
23:44 < ckknight> duko: then you'll have to do something like var clone = Object.create(Object.getPrototypeOf(thingy)); for (var k in thingy) { if (Object.prototype.hasOwnProperty.call(thingy, k)) { clone[k] = thingy[k]; } }
23:44 < ckknight> and then add properties to clone as appropriate
23:45 < duko> it looks like ckknight I am doing something like that currently. It looks like there aren't better alternatives.
23:47 < ckknight> duko: copying from an arbitrary prototype is kinda bad karma, imo
23:48 < ckknight> it won't work in all cases, and if user code expects a constructor to be run on all instances, that's a broken contract
23:48 < duko> ckknight: agreed :/
23:48 < duko> maybe I need defineProperties
23:48 < ckknight> a far easier way: var clone = Object.create(thingy)
23:48 < ckknight> :P
23:48 < ckknight> but that's cheating
23:48 < ckknight> and if `thingy` changes, `clone` will appear to change
23:48 < duko> why cheating?
23:49 < ckknight> because its prototype is the object you're "cloning"
23:49 < ckknight> which doesn't clone at all
23:51 < dimadima> seems a bit crazy that browserify isn't one of the top repos on github. are there other libs that do the same thing? cause this is awesome...
23:52 < Beg> https://gist.github.com/Aleksandar-Novakovic/a8ebad83922a12d786e7 anyone fancy on handlebars?
23:52 < tinjaw> when I do 'nom list' one of the items has 'invalid' next to it. what does that mean? what do I need to do to 'fix' that?
23:53 < tinjaw> correction - 'nom list'
23:53 < tinjaw> damn auto correction
23:54 < tinjaw> correction 'npm list'
23:58 < duko> ckknight: thanks
23:59 < duko> ckknight: when you construct objects in a way that leads to a deep prototype chain how do you do it?
--- Log closed Sun Jul 07 00:00:09 2013
