--- Log opened Wed Dec 19 00:00:02 2012
--- Day changed Wed Dec 19 2012
00:00 <@isaacs> mbalho: i'm like, "SHIT THEY CAN HACK YOUR LIFE NOW!?"
00:00 < mbalho> isaacs: i can consult you via dm on big data antihack strategies, just paypal me first
00:00 <@isaacs> i saw that movie with angelina jolie.
00:00 < othiym23> Ghostery is my best friend and how I make all my blogwriter friends sad
00:00 <@isaacs> i know what hacking is all about.
00:00 < ruff> yeah i have everything disabled
00:00 < mistertwig> except java of course
00:00 < Raynos> mistertwig: its two versions if you do client side rendering
00:00 < substack> that reminds me
00:00 < ruff> i browse the web via telegrams my friend sends me
00:00 < mistertwig> java applets are all the rage
00:00 < substack> of all the fun times I had with netscape communicator 4.x
00:00 < othiym23> man the meta is getting pretty thick here
00:00 < ruff> google dot com stop
00:00 < mistertwig> Raynos: that's true
00:00 < substack> it had a javascript debugger and everything!
00:01 < substack> and remember <layer> tags?
00:01 < othiym23> I remember trying to write JavaScript to talk to an applet in 1997
00:01 < substack> I was so hoping they would win out but <div> won instead
00:01 < othiym23> those were some of the worst weeks of my life as a software engineer
00:01 < mbalho> protip: set your browser to html6 so you can futurebrowse thereby using the internet before any hackers write hack programs for it
00:01 < mscdex> othiym23: don't forget the 'mayscript' attribute!
00:02 < othiym23> mscdex: why the fuck not?
00:02 < mistertwig> <layer> is great
00:02 < mscdex> :-D
00:02 < othiym23> goodddddddd I'm still mad
00:02 < mistertwig> we should all use it 
00:02 < mistertwig> it'll be improved on in HTML6 i'm sure
00:02 < substack> you could use <layer> to build DHTML pages
00:02 < substack> remember DHTML?
00:02 < mscdex> remember vml?
00:02 < othiym23> applet in one frame, JS in another, crazy Macgyver bullshit getting them to talk to each other
00:02 < substack> it was like HTML only [D]ynamic
00:02 < substack> mscdex: oh yes
00:03 < othiym23> applets were the worst
00:03 < mscdex> :-)
00:03 < othiym23> mscdex: vml or VRML?
00:03 < othiym23> I can't remember VRML without thinking of Mark Pesce's glasses
00:03 < mistertwig> i loved having to wait 2 minutes for the applet to load
00:03 < othiym23> I remember his glasses better than I remember the rest of him
00:03 < mistertwig> i enjoyed watching the spinning loading circle 
00:03 < CoverSlide> VML is microsoft's vector language
00:03 < mscdex> othiym23: vml... but vrml works too :-)
00:03 < substack> othiym23: file systems didn't have enough letters for .vrml in those days!
00:03 < mscdex> i still work with vrml
00:03 < othiym23> oh yeah, vml
00:03 < CoverSlide> really?
00:03 < mscdex> they used .wrl
00:04 < othiym23> Microsoft bought the company that came up with that, didn't they?
00:04 < CoverSlide> i didn't know ANYONE ever used VRML except the cortana folks
00:04 < mistertwig> soon we'll all be using typescript as well
00:04 < othiym23> one of their devs was the roommate of a friend of mine
00:04 < mistertwig> the ES4 microsoft never got
00:04 < substack> I remember trying to build some things with vrml and it not working
00:04 < mscdex> CoverSlide: lots of places used vrml back in the 90's, there's still a 3d voice chat community that is based on vrml 1.0
00:04 < substack> but that was probably more because I was in middle school and using slow computers
00:04 < othiym23> I remember the CEO hanging out in their living room pleading with him to take the house on Lake Washington and ridiculous relocation bonus they were offering him to get the acquisition to go through
00:05 < othiym23> I got VRML working, but working upstairs from Mark Pesce in an office full of SGI and SPARC machines helped a lot with that
00:05 < mscdex> i even wrote my own vrml 1.0 parser for node awhile back :P
00:06 < CoverSlide> HTML is a stupid language for writing documents, and any language build off of that model that isn't about writing documents is a horrible piece of crap
00:06 < othiym23> mscdex: how tough would it be to write a VRML<->WebGL translator?
00:06 < mscdex> othiym23: well, you can always use osgconv in a child process
00:07 < mscdex> i don't think they use "webgl" per se, but they have a plugin that outputs json
00:07 < othiym23> google tells me that would not be fun
00:07 < mscdex> and there's an osgjs that can read it in and render
00:07 < othiym23> I like things that are fun and tend to not like things that are not fun
00:07 < mscdex> heh
00:08 < mbalho> https://twitter.com/joyent/status/281188380484726784
00:09 < substack> hahaha
00:09 < mbalho> so good
00:09 < CoverSlide> hahaha nice
00:09 < CoverSlide> substack: does the #enterprise hashtag do anything?
00:10 < CoverSlide> substack: if not you really should
00:10 < mscdex> ircretary: what is the meaning of life?
00:10 < ircretary> mscdex: what was last seen at 2011-09-12T11:30:09.531Z, joining #Node.js
00:10 < context> hahaha
00:10 < context> custom skinned version of windowsME == enterprise!
00:10 < context> i LOVE it
00:10 < othiym23> trolling the marketing department seems unfair somehow
00:10 < mbalho> i didnt even @ mention them
00:11 < mbalho> i mean... enterprise substack didnt...
00:11 < mbalho> dang my covers blown!
00:11 < othiym23> lolol
00:11 < substack> joyent must be paying someone to sit on the twitter realtime search for "joyent"
00:11 < othiym23> I'm trying to explain to my own marketing department that mentioning Forrester in a press release is unlikely to win fans in the Node community
00:11 < othiym23> I now have an example to send to her
00:12 < substack> what is a forrester
00:12 < CoverSlide> substack: there are vendors that do that
00:12 < substack> othiym23: is that a paper company?
00:12 < othiym23> substack: they gotta make good on their investment in Node, and pushing it in the enterprise seems to be one of their strategies
00:12 < othiym23> substack: Forrester makes magic quadrants
00:12 < othiym23> which are good because magic!
00:13 < substack> forest wizards. got it.
00:13 < mbalho> forest wizard is the tree master
00:13 < othiym23> which are different from Forrest wizarding, which is what I do
00:15 < aweeks> I've run into an issue which seems to be somewhere between a bug and a feature:  If you send 304 HTTP response, and set the Transfer-Encoding header, then an empty chunked body is sent.  This response (with the 0 terminating the empty chunk) is in violation of RFC 2616 (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5): "The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line
00:15 < substack> mbalho: look what you did now I'm reading twitter instead of rolling out testling-ci bundle status updates
00:16 < mbalho> i was paid by ruby people to distract you as much as possible
00:16 < substack> that makes too much sense
00:16 < othiym23> aw is images.jit.su already toast?
00:16 < mbalho> no
00:16 < aweeks> there seems to have been an effort to address this in http.js: https://github.com/joyent/node/blob/master/lib/http.js#L983
00:17 < othiym23> mbalho: belay that, pilot derp
00:17 < deoxxa> > (100 <= statusCode && statusCode <= 199)
00:17 < deoxxa> how is that meant to be clear
00:17 < mbalho> othiym23: have you tried turning it off and on
00:17 < othiym23> I got out of the car and back in again, and more importantly looked more closely at my URLs
00:17 < mbalho> deoxxa: blur your eyes and look at it and you will see 100 ---- status code ---- 1999
00:17 < mbalho> *199
00:18 < deoxxa> wow.
00:18 < deoxxa> that's absolutely horrible
00:18 < mbalho> nah its literally showing how status code should be between 100 and 199
00:18  * deoxxa tries to poke in the internals as little as possible
00:18 < inolen> that's quite clear...
00:19 < othiym23> Node's internals are about the nicest JS I look at on a daily basis
00:21 < s5fs> my code is the nicest js i look at on the daily. i need to expand my horizons more.
00:21 < CoverSlide> Some of them are
00:21 < CoverSlide> some not so
00:21 < othiym23> I hate my own code with the the passion a tyrannical despot reserves for disappointing heirs
00:22 < othiym23> which makes my code Kim Jong Un, I guess
00:22 < othiym23> new code name!
00:22 < CoverSlide> deoxxa: hey do you think irc-client a viable replacement for irc?
00:22 < astropirate> So.. when is the TNG remastered edition going to be released?
00:23 < deoxxa> CoverSlide: i think it depends what you're doing with it
00:23 < CoverSlide> What about Kim Jong Deux and Kim Jong Trois
00:23 < deoxxa> CoverSlide: i think irc-client is easier to mess with, and it does a lot less than irc
00:23 < CoverSlide> well, an irc client library, basically
00:24 < CoverSlide> like just a simple bot
00:24 < deoxxa> not to mention the protocol stuff is completely separate, so there's no chance of that becoming a twisty mess of parsing/logic
00:24 < deoxxa> well i'm using it for some stuff at work
00:24 < deoxxa> and it seems solid enough
00:25 < deoxxa> by easier to extend, i mean you can do things like this: https://github.com/deoxxa/irc-client/blob/master/example.js
00:26 < deoxxa> but i'm pretty darn specific about how i want things to work, and my opinions are often contrary to other people's, so that may or may not be a good thing :P
00:26 < CoverSlide> cool, been meaning to write some bots in irc, and i used irc a while ago, but i just saw your library and seems leaner and easier to read
00:26 < deoxxa> it becomes a lot simpler once you separate the protocol and the logic
00:27 < deoxxa> that was my main gripe with all the other irc packages
00:27 < deoxxa> they all had some kind of mix of parsing and logic going on
00:33 < eldios_> is nconf still the best way to use a JSON config file?
00:37 < othiym23> when I finally get 1.0 of my project out, the first thing I'm going to do is explode it into a set of loosely coupled modules
00:37 < othiym23> I think I have about 80% of nconf embedded in my codebase (which for a variety of reasons can't use dependencies)
00:38 < CoverSlide> eldios_: i personally just use require('config.json')
00:38 < eldios_> like var conf = require('config.json') ?
00:38 < CoverSlide> eldios_: yes
00:38 < othiym23> or even better require('config.js'), and then I can use comments
00:38 < eldios_> isn't that async?
00:38 < CoverSlide> eldios_: no
00:38 < eldios_> ok
00:38 < eldios_> nice
00:38 < othiym23> nope, require is synchronous to the maxx
00:39 < mbalho> yes all the way to me
00:39 < eldios_> well using -->  var conf = require('nconf').use('file','./config.json').load();
00:39 < eldios_> doesn't bother me and gives a few more gimmicks
00:39 < othiym23> mbalho: was thinking more of http://www.imgbase.info/images/safe-wallpapers/miscellaneous/1_other_wallpapers/4303_the_maxx.jpg
00:39 < eldios_> anyway thanks for your suggestion CoverSlide 
00:39 < ec> Hey, all.
00:40 < ec> I've got the weirdest bug. I've got a function that's somehow not working as expected; and the debugger *won't step into it*.
00:40 < mbalho> post yer codez!
00:40 < ec> When I try to “s” on the function-call, it just steps right over the call.
00:40 < mbalho> avast
00:40 < othiym23> ec: is it being called via process.nextTick() or as an event handler?
00:41 < othiym23> gotta set a breakpoint inside async handlers to break on them
00:41 < ec> I can't seem to reproduce it in a simple context; I spent most of yesterday stepping through the relevant code, and trying to reproduce the exact chain of events so I could post it here; but no luck. Outside of the extremely complex framework it occurs in, trying to reproduce the same steps doesn't have any of the issues.
00:43 < othiym23> ec: the only times I haven't been able to step into function calls in node-inspector, it's either been because stepping goes off the end of the call stack in the event loop, the JIT is handing execution off to a native method or extension, or I'm trying to step into a standard ECMAScript function like Array.prototype.forEach()
00:44 < ec> othiym23: (using `node debug`, not node-inspector, by the way; but they both use the same debugging interface, so I can't imagine that's relevant)
00:44 < othiym23> yeah, just being clear that my toolchain is a little different from yours
00:44 < ec> Here's the function in question, that I can't seem to step into; not that it's helpful, to you, 'cause the code's insane:
00:44 < ec> https://github.com/elliottcable/muPaws.js/blob/6a260611564d977d2daf4f41d4243d47482f932e/µPaws.js#L148-L152
00:45 < othiym23> I can't imagine there are cases that node-inspector would handle but the command-line debugger wouldn't
00:45 < ec> of note: the function in question is bound (.bind(…)'d)
00:45 < ec> but I've never had trouble stepping into bound functions before, so I also think that's irrelevant (also, my experiments yesterday with bound functions, had no issues)
00:46 < othiym23> ec: ultra-dumb question: have you tried splitting the innermost function into a few lines and sticking a debugger; statement in there?
00:46 < ec> … ultra-dumb answer: nope.
00:47 < othiym23> give it a shot
00:47 < ec> thinking about it now that you've pointed it out … unfortunately, the content of that's going to get called a few thousand times.
00:47 < othiym23> that's my go-to when the debugger starts frustrating me
00:47 < ec> let me see if I can conditionally-debugger-out
00:47 < othiym23> could you put it behind a conditional?
00:47 < othiym23> yeah
00:47 < othiym23> it would be sooooo nice if the v8 debugger supported watchpoints
00:48 < ec> lol this is the hackies.
00:48 < ec> hackiest*
00:48 < ec> debug.OKAYBREAKNOW = false
00:48 < ec> if (debug.OKAYBREAKNOW) debugger;
00:48 < othiym23> lol
00:48 < ec> then another ;debugger; statement elsewhere that's a little bit more under my control, and using the repo to turn OKAYBREAKNOW on.
00:48 < ec> >,<
00:52 < othiym23> is ǁ a legit identifier in JS?
00:52 < othiym23> could I start sticking emoji in my source for variables?
00:52 < othiym23> because that would be amusing to me
00:52 < othiym23> and would probably get me lynched by my coworkers
00:52 < ec> yep
00:52 < ec> you can do dirtier things than that, by far
00:53 < othiym23> hot damn, I learned something today
00:54 < etcetera> anyone used Meteor?
00:54 < CoverSlide> noone has used meteor ever
00:54 < mistertwig> :P
00:55 < ec> othiym23: http://asenbozhilov.com/articles/identifiers-en.html#unicode_letter
00:55 < etcetera> caveat: in production*
00:55 < etcetera> Meteor has some serious backers. Wondering why it's failing to gain traction?
00:56 < ec> one of the cooler available things is that you can use roman numerals
00:56 < CoverSlide> there are specific unicodes for roman numerals?
00:56 < CoverSlide> you can make roman numerals with the ascii set you know
00:57 < ec> Ah, that's not the one I was looking for
00:57 < ec> http://mathiasbynens.be/notes/javascript-identifiers
00:58 < ec> CoverSlide: yep. Ⅰ, Ⅱ, Ⅲ, Ⅳ, Ⅴ, Ⅵ, Ⅶ, Ⅷ, Ⅸ, Ⅹ, Ⅺ, Ⅻ
00:58 < ec> I use them when I have nested iterators that for various reasons need to be self-named function expressions
01:00 < ec> >> ~function Ⅱ(){ if (Ⅱ.caller !== Ⅱ) Ⅱ.call(); ~function Ⅲ(){ if (Ⅲ.caller !== Ⅲ) Ⅲ.call(); console.log('two') }(); console.log('one') }()
01:00 < purr> ec: (number) -1; Console: 'two', 'two', 'one', 'two', 'two', 'one'
01:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:03  * CoverSlide hunts for those keys 
01:03 < CoverSlide> hmm can't find em
01:06 <@Nexxy> rly ec 
01:06 <@Nexxy> rly
01:12 < substack> lots of perl hackers doing node these days
01:12  * substack included
01:13 < ec> Nexxy: wat
01:13  * notelliottcable hides
01:13 <@Nexxy> mhmm.
01:14 < chilts> substack: me too, did Perl for 10 years :)
01:14 < notelliottcable> I did Perl last night.
01:14 < notelliottcable> she didn't like it very much. #nonconsensualprogramming
01:14 < chilts> was saying to the Wellington PerlMongers this morning that my perl is rusty
01:14 < chilts> I keep writing var instead of my
01:14 <@Nexxy> unicode function names
01:14 < chilts> and I had to think about array refs again :)
01:15 < notelliottcable> Nexxy: all night long, bby
01:15 <@Nexxy> you would.
01:15 < othiym23> Nexxy: you're thinking too small: emoji function names
01:15 < notelliottcable> :D
01:15 < notelliottcable> othiym23: Emoji aren't valid
01:15 < notelliottcable> at least in JavaScript
01:15 <@Nexxy> othiym23, don't give him any ideas
01:15 < notelliottcable> I've done such in Ruby several times, though
01:15 < othiym23> notelliottcable: but they're Unicode!
01:15 < notelliottcable> Nexxy: hey, be happy you didn't see the code I linked othiym23 in here earlier.
01:15 < othiym23> just cuz they're in a private range doesn't mean they're not valid
01:15 < notelliottcable> othiym23: it's not “all Unicode,” it's a particular subset thereof.
01:16 < othiym23> notelliottcable: eh, I've written worse
01:16 < notelliottcable> othiym23: see the article I linked, http://mathiasbynens.be/notes/javascript-identifiers
01:16 < othiym23> OK
01:16  * notelliottcable smiles
01:16 < othiym23> there go my dreams of all my erorbacks being named [SMILING POOP]
01:16 <@Nexxy> le sigh
01:17 < othiym23> aw, no composing characters either
01:17 < othiym23> why does JS hate Vietnamese?
01:18 < notelliottcable> othiym23: wat.
01:18 <@Nexxy> easy now
01:18 < notelliottcable> oh, does purr not do that in here?
01:18  * notelliottcable pokes purr
01:18 < notelliottcable> http://💩.la
01:19 < notelliottcable> ↑ best of ALL of the websites.
01:20 < notelliottcable> also, othiym23, I owe you A) a beer or B) assistance debugging the gnarliest bug† you ever encounter; your “stupid question” totally allowed me to force the debugger to descend into that. Now I can solve my bug!
01:21 < othiym23> notelliottcable: yayyyyyy glad it helped
01:21 < notelliottcable> †: (restricted to linguistically-related bugs; I don't do the DOM or shitty frameworks like Rails. further restricted to languages I know well, so JavaScript, Ruby, C, ObjC, Lua … etceteras.)
01:22 < othiym23> how about problems getting IORef and ST playing nice together in Haskell? ;)
01:23 < substack> oh cripes not that
01:23 < substack> or boxed c types versus non-boxed io pointers
01:24 < substack> or when you have those but then the library you want to use expects a bytestream as input
01:24 < othiym23> notelliottcable: I spent the summer with my head buried in node-inspector trying to do some stuff you really shouldn't do with JavaScript involving direct stack manipulation and the v8 stactrace formatter, which forced me to get real practical about debugging continuations
01:24 < notelliottcable> othiym23: /invite'd you to a channel, /join it
01:24 < substack> then you need to drop down to the IO monad because one of the types is impure, cascading back up through all your type signatures
01:26 < othiym23> substack: but when it all works it's just so magical!
01:34 < nanashiRei> hm, how would i accomblish a CLI UI like the one in bitchx or irssi? :s
01:36 < nanashiRei> Never did a CLI UI that outputs stuff while waiting for input :/
01:37 < nanashiRei> I need a way to prevent stdout from overriding my input
01:44 < Raynos> copy and pasting multiple lines into the node REPL fails
01:44 < Raynos> is there any way to safely do that?
01:45 < nanashiRei> "Fails" like how?
01:47 < Raynos> nanashiRei: https://gist.github.com/4333713
01:48 < nanashiRei> oh
01:49 < nanashiRei> wait eh
01:49 < nanashiRei> I think it's because of the function and the chain behind the return
01:50 < wolfeidau> Trying to debug an issue with a native npm module, can't seem to call the method when it is installed via npm, but can require the .node file and call it require('./node_modules/netif/build/Debug/netif') any ideas?
01:50 < Raynos> ?
01:50 < nanashiRei> it start's complaining about undefined right after split
01:50 < Raynos> whatever it is its valid in the browser console
01:50 < nanashiRei> so my guess is it tries to evaluate it there already
01:51 < nanashiRei> if it's just for you trying stuff, try wrapping your pated code in eval( )
01:51 < nanashiRei> pasted*
01:51 < Raynos> your right
01:51 < Raynos> if I add the . at the end of the line
01:51 < Raynos> and not at the start it doesnt break
01:51 < nanashiRei> :)
01:51 < Raynos> ill change my style conventions!
01:51 < Raynos> thanks
01:52 < nanashiRei> np
01:52 <@Nexxy> othiym23, don't do it
01:52 <@Nexxy> it's a trap
01:52 < notelliottcable> gozala: I've been instructed to recruit you to a channel, as you're apparently “crazy” and “smart.”
01:52 < notelliottcable> gozala: you've an /invite incoming; come say hi. (=
01:52 <@Nexxy> oh god
01:52 < nanashiRei> xDDD
01:52 <@Nexxy> this is how he gets you
01:53 < othiym23> lol
01:53 < nanashiRei> Nooo i'm being sucked into the vortex!
01:53 < nanashiRei> or something...
01:53 <@Nexxy> SPOILER: they don't even talk about hats
01:53 < nanashiRei> :(
01:53 < gozala> notelliottcable: sorry I don't follow 
01:53 < Raynos> notelliottcable: he lives in #stackvm too
01:53 < othiym23> gozala: PL nerds talking about PL nerd things
01:53 < notelliottcable> gozala: I quote, “he's a total nutbar but a super smart one”
01:54 <@Nexxy> nope
01:54 <@Nexxy> just you wait
01:54 < Raynos> I dont think gozala is crazy
01:54 < Raynos> He just writes unreadable code.
01:54 < Raynos> There's a difference.
01:54 <@Nexxy> rofl
01:54 < gozala> :)
01:54 < Raynos> Really clever unreadable code though
01:54 <@Nexxy> being clever is overrated
01:54 < gozala> Yeah I don't know if I'm smart crazy or unreadable code but sure
01:54 < gozala> send it over
01:55 < notelliottcable> really clever unreadable code
01:55 < notelliottcable> D:
01:55 < notelliottcable> oh my god I've found my long-lost twin
01:55 < nanashiRei> cleverly cloaked as-if-it-were-bad code!
01:55 <@Nexxy> lol elliott
01:56 < gozala> Raynos: BTW a lot of people complemented my code being readable
01:56 < nanashiRei> The cake is a lie.
01:56 < nanashiRei> i mean, compliment.
01:56 < Raynos> gozala: did they grok FP ?
01:57 <@Nexxy> nanashiRei, did you know that your name is an anagram for "insane hair"?
01:57 <@Nexxy> just thought you should know
01:57 < mbalho> soulmate?
01:58 < nanashiRei> It's actually japanese for anonymous case, but well have it your way.
01:58 < gozala> Raynos: it was not reducers related stuff
01:58 <@Nexxy> oh I will.
01:58 < gozala> so it was less functional 
01:58 < gozala> I also think it's really a matter of commonality
01:59 < gozala> I have hard time following your train of thoughts when reading your code too
01:59 <@Nexxy> afk cinammon challenge
01:59 <@Nexxy> cinnamon even
02:05 < Raynos> gozala: I finally started doing the copy and pasting code into REPLs workflow
02:08 < Raynos> gozala: what tooling do you have to make that workflow suck less
02:09 < gozala> Raynos: integrate repl with editor
02:09 < Raynos> kind of have that.
02:10 < gozala> This tool is best I know of http://common-lisp.net/project/slime/
02:10 < Raynos> have a REPL plugin that makes one of my tabs a REPL
02:10 < Raynos> but its not that good
02:10 < gozala> and there is js mode https://github.com/swank-js
02:10 < gozala> no in slime you tell it to execute expressions you're on
02:10 < Raynos> yeah I would have to write that tooling for my editor or change editor
02:19 < AAA_awright> Let's try this again...
02:19 < AAA_awright> Is there any library that does message-passing from server to web browser?
02:19 < AAA_awright> That's not horribly bloated
02:20 < asadpakistani> is comet and long polling the same thing?
02:20 < Raynos> AAA_awright: websocket
02:21 < AAA_awright> Raynos: Websockets by themselves aren't effective
02:22 < Raynos> AAA_awright: https://github.com/Raynos/engine.io-stream
02:22 < Raynos> the next layer up is WS abstraction
02:22 < Raynos> or based on SockJS https://github.com/Raynos/sockjs-stream if you prefer
02:22 < AAA_awright> I'm not looking for streams either, only messages
02:22 < whyzhi> Can anyone help me with something with ImageMagick Nodejs https://github.com/rsms/node-imagemagick
02:23 < Raynos> AAA_awright: streams are messages
02:24 < AAA_awright> No, they're different concepts
02:24 < Raynos> AAA_awright: your only looking for push
02:24 <@Nexxy> lolwat
02:24 < AAA_awright> A stream is a sequence of bytes. TCP is a stream. A message is a... message. UDP is a message.
02:24 < mbalho> in node a stream is a thing that emits data and begins and ends
02:24 < Raynos> AAA_awright: https://npmjs.org/package/sse-stream
02:25 < mbalho> in node core most streams are binary but in npm land streams can emit anything
02:25 < Raynos> AAA_awright: there is no such thing as UDP in browsers unless you want webrtc datachannels
02:25 < AAA_awright> A stream continues indefinately until closed, a message is delivered all at once.
02:25 < AAA_awright> *indefinitely
02:25 < mbalho> Raynos: firefox has a udp experimental thing
02:25 < Raynos> AAA_awright: you can model that on top of streams or ajax
02:26 < Raynos> if you want to send a single message from server to client consider Server sent events
02:26 <@Nexxy> AAA_awright, the reason streams are recommended is because of your requirement of getting the message to the browser
02:26 <@Nexxy> it's a pretty easy way to implement 'message passing'
02:26 <@Nexxy> browserify an event emitter 
02:26 <@Nexxy> or something
02:28 < AAA_awright> Guys
02:28 < AAA_awright> It's really not that complex
02:28 < AAA_awright> I just want something to deliver JSON objects without any hassle
02:28 < AAA_awright> And without any bloat
02:29 <@Nexxy> pretty sure you were just offered 3+ ways to do it
02:29 <@Nexxy> but you're too busy objecting to the transport
02:29 <@Nexxy> so roll something yourself :)
02:29 < Raynos> AAA_awright: poll a json ajax end point
02:29 < qbit> anyone know of something that changed between 0.8.11 and 0.8.15 that would cause c++ modules to compile to a .so vs a .node file? 
02:29 < mbalho> AAA_awright: you should try http, web browsers use it
02:29 < AAA_awright> Raynos: No! The whole point of asking for a module is so I don't have to code it myself
02:29 < Raynos> and converge onto reinventing the json polling transport in engine.io
02:30 <@Nexxy> then pick one of the modules that were mentioned
02:30 <@Nexxy> lol
02:30 < AAA_awright> Which one does that?
02:30 < Raynos> AAA_awright: https://github.com/yojimbo87/minotaur
02:30 < Raynos> thats a long polling server
02:31 < whyzhi> if anyone is familiar with node-imagemagick please message me. Appreciate it!
02:31 < AAA_awright> mbalho: I'm already using HTTP where I need stateless messages delivered, for this I need a stateful protocol
02:31 < AAA_awright> But thanks
02:31 < qbit> specifically with node-gir .. with 0.8.11 it built girepository.node.. 0.8.15 it's pumping out girepository.so
02:32 < mbalho> what is an example of a stateful protocol that delivers all its data at once
02:32 <@Nexxy> lol
02:32 <@Nexxy> mbalho, the DMV?
02:33 < qbit> perhaps a change in gyp? 
02:34 < substack> the day the internet stood still
02:34 < mbalho> what do ya'll think of this introduction to node for cats https://gist.github.com/4011336
02:34 < mbalho> (ive only done the intro so far)
02:34 < mbalho> and the outline
02:36 < mbalho> i might move the bit about what async is into its own section
02:37 <@Nexxy> mbalho, awesome :D
02:37 < Sly> Nexxy: <3 :x
02:37 <@Nexxy> we should put something like this in the onjoin message
02:37 <@Nexxy> Sly, <3
02:38 < VinSpee> evening, gents
02:38 < mbalho> Nexxy: it will be at node.for-cats.com soon enough
02:38 <@Nexxy> cool!
02:38 <@Nexxy> VinSpee, I see how it is
02:38 < VinSpee> and lovely ladies
02:39 < VinSpee> and those that don't identify with a specific gender
02:39 <@Nexxy> yes!
02:39 <@Nexxy> that's the ticket
02:39 < mbalho> what about cats
02:39 <@Nexxy> haha
02:39 <@Nexxy> or those that don't identify with a particular species?!
02:39 < mbalho> YEA YOU SPECIESIST!
02:40 <@Nexxy> it's getting tumblr in here
02:40 < VinSpee> Somebody cracked the booze in the Node.js channel
02:40 < mbalho> im not drunk im just a buzzed
02:40 <@Nexxy> I've been drinking bloody marys since hard hack
02:40 < mbalho> also what happen to my op status
02:40 < mbalho> did i get stripped of my authority
02:40 <@Nexxy> try /msg chanserv op #node.js 
02:41 <@Nexxy> you probably just weren't nickserv identified when you joined
02:41 <@Nexxy> or aren't still
02:41 < mbalho> not authorized
02:41 < sneakyness> ヾ(´･ ･｀｡)ノ”
02:41 -!- mode/#Node.js [+o mbalho] by ChanServ
02:41 < VinSpee> sneakyness in da hizz
02:41 <@mbalho> OH
02:41 <@Nexxy> there we go :D
02:41 < sneakyness> VinSpee: what da fuk r u doin tn
02:41 <@Nexxy> uh oh
02:41 < VinSpee> trolling
02:41 < VinSpee> noobing
02:42 < VinSpee> i thought u h8 js sneakyness 
02:42 < VinSpee> what happened to obj-c?
02:42 < sneakyness> everybody in this fuck ass town sucks so much dick that they can't even come out to drink on a tuesday night because they have to deliver pizzas tomorrow or some shit
02:42 < VinSpee> are you home?
02:42 < sneakyness> yea
02:42 < VinSpee> damnnnnnnnn
02:42 <@mbalho> who are you people
02:42 < sneakyness> VinSpee: I've always loved js r u retarded
02:42 < sneakyness> I hate when fuckheads write js 
02:43 < VinSpee> so usually
02:43 < sneakyness> yes
02:43 < othiym23> so much swearing
02:43 <@Nexxy> sneakyness, check your PMs :)
02:43 < othiym23> it must be time for me to go home and walk my dog
02:43  * othiym23 aways
02:43 < VinSpee> sneakyness want to beer later?
02:43 <@mbalho> othiym23: if you see jerrysv tell him to get on irc so ic an ask him raspberry pi questions
02:44 < VinSpee> I'm WFH tomorrow, so I can afford to be up late sneakyness 
02:44 < sneakyness> VinSpee: tonight or this week? 
02:44 < VinSpee> tn
02:44 < sneakyness> either way I don't have a car here 
02:44 < sneakyness> so I'd have to like cab it out or something
02:44 < VinSpee> oh damn
02:45 < VinSpee> still rocking that saturn?
02:45 < sneakyness> ye
02:45 -!- sneakyness was kicked from #Node.js by Nexxy [sneakyness]
02:45 < VinSpee> the vibe finally died, 250K miles
02:45 <@mbalho> Nexxy: i think i wanna make a 'use node in your browser' command line emulator thing, have you seen anything liek that?
02:45 < VinSpee> i'm between cars now.
02:45 <@Nexxy> not for node
02:46 < VinSpee> driving my dad's old Dodge Dakota Sport V8 5 speed maunal lol
02:46 <@mbalho> substack: do you have a module that does that
02:46 <@mbalho> substack: sandboxed node repl in browser
02:46 -!- mode/#Node.js [+b *!*@c-68-60-146-144.hsd1.mi.comcast.net] by ChanServ
02:46 -!- sneakyness was kicked from #Node.js by ChanServ [User is banned from this channel]
02:47 -!- mode/#Node.js [-b *!*@c-68-60-146-144.hsd1.mi.comcast.net] by ChanServ
02:48 <@mbalho> aww yea alunny to the rescue http://npm-repl.jitsu.com/
02:51 < substack> mbalho: nope
02:51 < VinSpee> so I'm noobing hard over here. Setting up a restful express.js API based on this tut: http://www.pixelhandler.com/blog/2012/02/09/develop-a-restful-api-using-node-js-with-express-and-mongoose/
02:52 < VinSpee> my post and get requests are working, but delete isnt
02:52 < VinSpee> so if i navigate to http://localhost:8080/api/bills/50d120f7fb5daf65d4000001
02:52 < AAA_awright> VinSpee: It's worth noting that HTTP is already RESTful
02:53 < AAA_awright> RESTful HTTP API is redundant
02:53 < VinSpee> agreed.
02:53 < mistertwig> :P
02:53 < mistertwig> yes
02:53 < VinSpee> anyway, if I navigate to http://localhost:8080/api/bills/50d120f7fb5daf65d4000001 I get the expected JSON
02:54 < VinSpee> but if I do a $.ajax delete, I get a 404
02:54 < VinSpee> the exact call is http://jsfiddle.net/vHEzj/
02:55 <@Nexxy> what do your app.delete blocks look like?
02:55 < VinSpee> http://jsfiddle.net/Z8LBz/
02:55 < VinSpee> like that ^
02:56 <@Nexxy> wait a minute, that's not javascript
02:56 < VinSpee> lulz
02:56 < AAA_awright> tjholowaychuk: There has to be some misunderstanding, I'm just asking you push the Git repo URL in the npm website,. How do you prefer to do that?
02:57 < mistertwig> in node, how can i get hostname from IP?
02:57 < AAA_awright> *push to
02:57 < tjholowaychuk> AAA_awright it has to be in the package.json to get there
02:57 < VinSpee> @Nexxy http://jsfiddle.net/Z8LBz/1/
02:57 < tjholowaychuk> IMO someone should write a bot that does these pull-requets
02:57 < tjholowaychuk> like i did for component
02:57 < tjholowaychuk> maintainers cant be bothered
02:57 < tjholowaychuk> with small shit like this
02:58 < AAA_awright> tjholowaychuk: The maintainer's job is to properly annotate meta-data, for the programmer
02:58 <@Nexxy> they're far too important deciding what is a suitable charity
02:58  * JohnMcLear quirks an eyebrow
02:58 <@Nexxy> lol
02:58 < JohnMcLear> hey tj
02:59 < AAA_awright> tjholowaychuk: Now in my experience, applying a three-line patch is far less effort than messing with npm
02:59 < AAA_awright> tjholowaychuk: Would you agree or say differently?
02:59 < tjholowaychuk> AAA_awright my point is that it's annoying / somewhat disrespectful to be like hey here's some code you put it in
02:59 < tjholowaychuk> when it's something you want
03:00 < AAA_awright> It's a feature request for something present in the vast majority of existing packages. If there's a more respectful way to ask for it I'm nto sure how!
03:00 < JohnMcLear> This is why I like plugin frameworks
03:00 < tjholowaychuk> AAA_awright to press the edit button / add it
03:00 < JohnMcLear> you want extra functionality, okay, install it yourself on top of core
03:01 < tjholowaychuk> and press submit so maintainers only have to click one button quickly
03:01 < JohnMcLear> nothing stops plugins from being part of core, problem solved if it gets popular.
03:01 < tjholowaychuk> it adds up when you have hundreds of repos
03:01  * JohnMcLear nods
03:01 < VinSpee> @Nexxy any ideas?
03:01 <@Nexxy> 1 sec
03:02 <@Nexxy> I'm really not familiar with mongoose
03:02 < tjholowaychuk> AAA_awright you're not the first person to do it haha dont worry, that's why it annoys me though I get that all the time, a bot could be doing this
03:02 < AAA_awright> tjholowaychuk: I'm asking about pushing to npm primarially - not something I can do - you do use the package.json in the repository though?
03:03 < tjholowaychuk> yes?
03:03 < tjholowaychuk> there's nothing else I could use
03:03 < tjholowaychuk> i dont get what you're saying there
03:03 < tjholowaychuk> that package.json is what ends up in npm
03:03 < AAA_awright> Next time you make a push
03:03 < AAA_awright> I guess I could wait that long
03:03 < SomeoneWeird> wat
03:03 < AAA_awright> I don't know how many projects are considered 'stable'
03:05 < AAA_awright> And for instance, I don't commit any package.json files. Git annotated tags are better suited for that task.
03:06 < AAA_awright> And other meta-data e.g. for dependencies
03:09 < tjholowaychuk> if npm used GH repo style only we wouldn't have this :D
03:10 < tjholowaychuk> that's the lame part about introducing these props way late in the game
03:10 < tjholowaychuk> no one wants to update hundreds of repos
03:10 < elliottcable> Why are some of the debugger commands functions, and some of them getters?
03:10 < elliottcable> i.e. why do I only need parentheses after *some* of them? Is there a reasoning behind this interface's design?
03:27 < muloka> BAA/clear
03:28 < ehershey> well said
03:56 < mistertwig> can node handle packet queues rather than handling them as they come (as events)?
03:57 < mistertwig> so i can just add it to an array when it comes and handle it in a ticker?
03:57 < hbeck> if I build node/npm from source with the default options, {prefix} is /usr/local ... so the npm global config would be /usr/local/etc/npmrc ???  looking at https://npmjs.org/doc/config.html
04:07 < sk_> How to pass argument to soap in node -soap since I tried many time but its not taking any input parameters
04:11 < sk_> hi any luck with node-soap
04:14 < mscdex> SOAP is a lye
04:18 < sk_> @ mscdex can yo explain me bit more
04:19 < mscdex> sk_: i'm just being punny ;-)
04:21 < sk_> @ mscdex :)
04:24 < stopi> Hi guys
04:24 < stopi> i'm trying to serve "already gzipped" static files and cannot find a way
04:24 < stopi> i've tried this solution : http://51elliot.blogspot.com/2012/08/serve-gzipped-files-with-expressjs.html
04:25 < stopi> but it doesn't work with express.static and express-resource
04:25 < stopi> any idea ?
05:21 < MitchW> what's best practice for joining on multiple asynchronous function calls in node? (eg: I launch 50 DB requests, and I need to execute some code after all of them complete)
05:22 < MitchW> currently doing it manually counting my jobs, but I figure there's no doubt a module out there that abstracts the concept and provides utility functions - without me reinventing the wheel
05:22 < deoxxa> caolan/async on github
05:23 < MitchW> cheers
05:24 < chilts> yeah, async rocks :)
05:33 < niggler> assync
05:53 < wolfeidau> Gday all, having some issues with the prebuilt nodejs binaries published on http://nodejs.org/dist/v0.8.16/ crashing, where my locally built binary doesn't
05:53 < wolfeidau> Wondering how the binary distributions are built, anyone now how and where their compiled and packaged?
05:54 < niggler> wolfeidau what os?
05:56 < wolfeidau> niggler: ubuntu linux 10.04
05:56 < wolfeidau> It is intrigueing as if i build the same version locally it is fine
05:56 < wolfeidau> Also the node binary is smaller in the package than the one I build
05:57 < niggler> 32/64 bit?
05:57 < wolfeidau> 64 bit 
05:58 < wolfeidau> My version is 11M (no debug) and the dist version is 9.7M 
05:59 < wolfeidau> This is the crash http://paste.dollyfish.net.nz/53ae15.txt provided by chilts
06:00 < wolfeidau> Some applications imbed the flags they were compiled with in the application, which is show when you run -version 
06:01 < wolfeidau> unfortunately node doesn't :(
06:01 < AAA_awright> What's the preferred, or rather, a good module for simple Redis usage?
06:02 < SomeoneWeird> AAA_awright, redis?
06:02 < SomeoneWeird> 'redis'?
06:02 < AAA_awright> Yeah, Redis
06:02 < AAA_awright> No, what's the module
06:02 < AAA_awright> https://github.com/mranney/node_redis ?
06:02 < AAA_awright> Looks good enough
06:06 < wolfeidau> O well will try and nut it out 
06:08 < AAA_awright> 2296	/usr/local/bin/node
06:08 < AAA_awright> That's just over 2M
06:09 < AAA_awright> wolfeidau: What options are you using?
06:09 < AAA_awright> No, not 2M
06:09 < mistertwig> i need to perform base 37 encoding on  a string
06:09 < AAA_awright> 2k!
06:09 < mistertwig> to convert it to a "long"
06:09 < mistertwig> what would be the best way to do this accurately 
06:09 < mistertwig> i need some sort of bigint library 
06:09 < wolfeidau> AAA_awright: do a file /usr/local/bin/node
06:10 < wolfeidau> it is probably a link would be my guess
06:10 < AAA_awright> On mine? /usr/local/bin/node: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, not stripped
06:11 < AAA_awright> Yeah, I use the system OpenSSL and V8, as does MongoDB
06:11 < SomeoneWeird> <AAA_awright> No, what's the module < whatever "redis" is in npm, so yes, node_redis
06:12 < AAA_awright> SomeoneWeird: Alright cool, I need the Git repository
06:12 < AAA_awright> It's not like everyone uses npm >_>
06:13 < wolfeidau> AAA_awright: Just downloaded the distribution from nodejs.org and node is 9.7M
06:14 < AAA_awright> Goes to show V8 is a massive project compared to Node.js
06:14 < AAA_awright> (And OpenSSL for that matter)
06:23 < kenperkins> man I'm a dumbass. published my nodule and had a busted path for main :(
06:24 < SomeoneWeird> just update it?
06:29 < d4rklit3> hey
06:30 < d4rklit3> im having an issue where on windows express routes stuff fine, but on mac it totally breaks
06:31 < d4rklit3> Error: EN0ENT 'path/to/file'
06:33 < deoxxa> d4rklit3: windows is case-insensitive
06:33 < deoxxa> d4rklit3: stop relying on that
06:33 < d4rklit3> everything is lowercase
06:34 < d4rklit3> like
06:34 < d4rklit3> i have a route "/scripts/main.js"
06:34 < d4rklit3> that file doesn't really exist
06:34 < d4rklit3> its dynamic
06:35 < d4rklit3> app.get('/scripts/main.js' , function (req,res) { ... } );
06:35 < d4rklit3> i also have this after it
06:35 < d4rklit3> app.get('/scripts/:action', function(req, res) {   res.sendfile(path.join(__dirname, "/deploy/scripts/")); });
06:35 < d4rklit3> so basically if it finds a static file there it should serve it up
06:35 < d4rklit3> this is the only i found to make it serve static files that are not routes
06:36 < d4rklit3> app.get('/:action', function(req, res) {   res.sendfile(path.join(__dirname, "/deploy/index.html")); });
06:36 < d4rklit3> i have that as the last thing, basically saying, if this path isn't a static, then just serve this file
06:36 < SomeoneWeird> you should really use a static file handler todo that
06:36 < d4rklit3> i have one
06:37 < deoxxa> why :action?
06:37 < deoxxa> you're not using it
06:37 < d4rklit3> i don't know man
06:37 < deoxxa> well that's a problem in itself
06:37 < d4rklit3>  app.use(express.static(path.join(__dirname, 'deploy')));
06:37 < d4rklit3> in my app.configure(
06:38 < deoxxa> if i were you, i'd step back a bit and figure out what's going on
06:38 < deoxxa> sounds like you're neck-deep and confused
06:38 < d4rklit3> yeah..
06:38 < d4rklit3> all i want 
06:39 < d4rklit3> is for the server to serve index.html unless the path is otherwise defined or is static
06:39 < SomeoneWeird> <SomeoneWeird> you should really use a static file handler todo that
06:39 < d4rklit3> am i using it wrong?
06:40 < dnz-> d4rklit3: do u put off lots of uv
06:40 < dnz-> n make things glo
06:40 < dnz-> liek blacklight
06:40 < SomeoneWeird> lol
06:41 < d4rklit3> what am i supposed to read here? 
06:41 < d4rklit3> im tryin to figure this out
06:42 < d4rklit3> is this wrong? app.use("/deploy", express.static(path.join(__dirname, '/deploy')));
06:43 < dnz-> yes
06:43 < timeturner> you can't "use" a route
06:44 < d4rklit3> do i net set the use inside of configure?
06:44 < timeturner> no
06:44 < timeturner> configure is obsolete
06:44 < timeturner> app.use only takes middleware functions
06:44 < timeturner> if you want to filter by route
06:44 < timeturner> then you need to check req.method
06:44 < timeturner> and req.path
06:44 < timeturner> manually
06:45 < deoxxa> timeturner: what
06:45 < deoxxa> timeturner: you can so have a prefix (not a route) in .use
06:45 < d4rklit3> i think i figured it out
06:45 < timeturner> what method would it match?
06:45 < timeturner> GET/POST/PUT etc.
06:46 < SomeoneWeird> ALL OF THEM
06:46 < deoxxa> i don't know, what content type would it match?
06:46 < deoxxa> what cookie value would it match?
06:46 < deoxxa> what user-agent would it match?
06:46 < mscdex> mmm cookies
06:46 < timeturner> well, it's ambiguous imo
06:47 < SomeoneWeird> u maek mi hungary
06:47 < mscdex> the whole country? :O
06:47 < timeturner> easier to use app.all
06:47 < d4rklit3> ok
06:47 < d4rklit3> thanks for tough love i guess
06:47 < d4rklit3> heh
06:47 < deoxxa> timeturner: except that they're completely different
06:47 < deoxxa> timeturner: app.all puts a method into the router
06:47 < deoxxa> timeturner: app.use puts a method into the middleware chain
06:47 < deoxxa> timeturner: if you can't see how they're different, well, lol
06:48 < timeturner> matching routes outside of the router kind of defeats the purpose of using the router
06:48 < deoxxa> it's not a route
06:48 < d4rklit3> timeturner problem was i had app.use() in configure
06:48 < deoxxa> it's a prefix
06:48 < d4rklit3> also the :action thing
06:48 < d4rklit3> was useless
06:48 < timeturner> ah, I see
06:48 < d4rklit3> i set up my routes first
06:49 < d4rklit3> then put the static at the bottom
06:49 < d4rklit3> problem solved
06:49 < timeturner> great
06:49 < d4rklit3> i may haave updated my express.js at some point and not read the changelog
06:49 < d4rklit3> like i ever do
06:57 < Anton_> does anyone use winston for logging?
06:57 < Anton_> is there a way to flush logs?
06:58 < dnz-> u cant
06:58 < dnz-> u need to do it manually
07:25 < pyrotechnick> hi comrades
07:25 < pyrotechnick> which BSD distro plays nicest with node?
07:26 <@Nexxy> OSX
07:26 < pyrotechnick> :p
07:26 < pyrotechnick> but srsly
07:26 < pyrotechnick> what do you run on your arduinos?
07:27 <@Nexxy> C
07:27 <@Nexxy> sometimes C++
07:27 < pyrotechnick> what OS
07:27 <@Nexxy> it's just an 8 bit processor
07:27 < pyrotechnick> dont u run node?
07:27 <@Nexxy> not on the arduino
07:27 < pyrotechnick> ohh
07:27 <@Nexxy> I run node on the beagleboard
07:27 < pyrotechnick> so u just control it?
07:27 <@Nexxy> which runs ubuntu
07:27 <@Nexxy> yeah
07:27 < pyrotechnick> wow really?
07:27 <@Nexxy> node-serialport
07:27 < pyrotechnick> its light enough?
07:27 <@Nexxy> yes
07:27 < pyrotechnick> hmm
07:27 <@Nexxy> minimal install is like 70mb
07:27 < pyrotechnick> i wanna play with proper BSD though
07:27 <@Nexxy> or something
07:28 < pyrotechnick> i always use ubuntu
07:28 <@Nexxy> angstrom?
07:28 <@Nexxy> still linux but
07:28 <@Nexxy> more DIYish
07:28 < pyrotechnick> mmm
07:28 < pyrotechnick> i might try dragonfly it looks kinda node-y
07:29 < pyrotechnick> i can see my formatting alot tonight
07:33 < pyrotechnick> haha angstrom too hardcore for me Nexxy :)
07:33 < pyrotechnick> bbl
07:34 < mscdex> freebsd and openbsd are supported iirc
07:34 < mscdex> not sure about netbsd
07:35 < pyrotechnick> probably not dragonfly then
07:35 < pyrotechnick> maybe as a challenge i will see, if it doesnt compile, if i can get it to
07:35 < pyrotechnick> shouldn't be too much right?
07:35 < mscdex> heh
07:36 < pyrotechnick> maybe alot?
07:36 <@Nexxy> you can do it
07:36 < mscdex> pyrotechnick: fwiw (in master): https://github.com/joyent/node/commit/a25ebb1997dc14ef16f1314cd8c8ede07a5a29e3
07:37 < pyrotechnick> im thinking most the problems will be in uv right?
07:37 < pyrotechnick> o0o0o maybe it is running
07:37 < mscdex> i'd say just try it
07:37 < pyrotechnick> ill suss it out when i get home, thankyou very much sir
07:41 < chovy> does anyone know what "module boundaries" are?
07:41 < chovy> just read it in a job description
07:41 < TehShrike> Probably either something about module scope, or how many things you think a single module should do?
07:42  * TehShrike shrugs
07:42 < sshaginyan> Guys I have a weird question I have var x = Something… where x.constructor === x returns true
07:43 < sshaginyan> Are there any variables that point to constructor?
07:45 < sshaginyan> Does anyone have a map of all the objects in javascript?
07:45 < sshaginyan> like what goes where and what references what
07:45 < SomeoneWeird>  wat
07:45 < SomeoneWeird> wa
07:45 < SomeoneWeird> t
07:45 < chovy> sshaginyan: i read about this recently, but i forget the answer.
07:45 < chovy> wish i knew where i saw it
07:45 < sshaginyan> SomeoneWeird: For example String is from Object
07:45 < sshaginyan> come chivy I believe in you
07:46 < deoxxa> why is there so much ifdefing for OS's in node, instead of feature tests?
07:46 < sshaginyan> you can do it
07:46 < TehShrike> sshaginyan: there's https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/instanceof
07:47 < chovy> sshaginyan: probably something like the function is a constructor?
07:47 < sshaginyan> okay? oS?
07:47 < TehShrike> There's also https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/constructor
07:48 < SoulRaven> hello
07:49 < sshaginyan> TehShrike: I need a reference where the reference constructor is the reference
07:49 < SoulRaven> is posibile to instantate a object from the require stament?
07:49 < TehShrike> sshaginyan: try again, I didn't get that
07:49 < sshaginyan> I need reference === reference.constructor to be true
07:49 < SoulRaven> something like var s = require('module').()
07:49 < SoulRaven> or something like that
07:49 < TehShrike> sshaginyan: how would that ever be possible?
07:50 < TehShrike> sshaginyan: it couldn't exist until it was constructed, how could it be its own constructor?
07:50 < sshaginyan> TehShrike: one way to do this is
07:50 < sshaginyan> x.constructor === x.constructor.constructor
07:50 < TehShrike> SoulRaven: something like var s = new (require('module'))() ?
07:50 < sshaginyan> this returns true due to it's circular reference
07:50 < SoulRaven> i guess
07:50 < SoulRaven> like that
07:50 < SoulRaven> thx
07:51 < SoulRaven> let me try
07:59 < sshaginyan> IS there any other way I can access Object.constructor without using constructor?
07:59 < sshaginyan> Is there anything else pointing to constructor?
07:59 < sshaginyan> I've looked though __proto__ and prototype
08:00 < ljharb> sshaginyan: why do you want to access the constructor property?
08:00 < sshaginyan> for fun
08:00 < sshaginyan> I just need it that way
08:00 < ljharb> sshaginyan: more specifically, when are you coding so fast and loose that you can't hardcode it?
08:01 < sshaginyan> It's an old competition question 
08:01 < ljharb> go on
08:01 < ljharb> (personally i think anytime you're using the constructor property, it's a code smell)
08:02 < sshaginyan> so I have var x = Something….; then I have x === x.constructor is true
08:02 < sshaginyan> this was the question
08:02 < sshaginyan> So I can just fill in x.
08:02 < sshaginyan> This is driving me crazy 
08:02 < ljharb> wait, what was the question?
08:03 < sshaginyan> var x = Something….; then I have x === x.constructor
08:03 < ljharb> and who is asking you this?
08:03 < AAA_awright> sshaginyan: Object ?
08:03 < ljharb> so your job is to fill in "Something…"?
08:03 < sshaginyan> it's google code challenge 
08:03 < ljharb> oh lordy. don't trust anything JS-related from google.
08:03 < sshaginyan> AAA_awright: nope I tried it
08:03 < SomeoneWeird> lmao
08:03 < AAA_awright> sshaginyan: Wait no, that's prototype
08:03 < AAA_awright> sshaginyan: Function
08:03 < ljharb> the answer is Function, yes
08:04 < ljharb> but that's a stupid question
08:04 < ljharb> (because knowing the answer means nothing)
08:04 < AAA_awright> It means $50 in a future quiz show
08:05 < ljharb> lol
08:08 < sshaginyan> You guys rule
08:08 < sshaginyan> omg I would buy you all beers
08:08 < sshaginyan> How the hellllllll ldid you know that
08:09 < sshaginyan> .....
08:09 < ljharb> new Function() is a function. Function is a constructor, thus a function.
08:09 < ljharb> since all constructors or functions, what else could it be?
08:09 < ljharb> *are
08:14 < sshaginyan> AAA_awright: IS there a map of evverything...?
08:14 < sshaginyan> Like is there a graph that shows what is inherited from String and etc....
08:14 < sshaginyan> like a huge JSON
08:15 < AAA_awright> Pfft it's a tiny bit more complex than that
08:15 < AAA_awright> sshaginyan: Read http://ecma-international.org/ecma-262/5.1/
08:15 < ljharb> inherited from string?
08:16 < ljharb> everything "inherits" from Object. altho "inherits" is the wrong word since it's not classical inheritance, it's prototypical inheritance
08:32 < be5invis> Anyone here?
08:33 < SoulRaven> yes
08:33 < be5invis> I'd like to do a survey
08:33 < be5invis> What (feature/feature absence/…) confuses you most while you are learning JavaScript?
08:33 < guor> implicit type conversion
08:33 < be5invis> Stackoverflow closed this question......
08:36 < be5invis> anything else?
08:36 < be5invis> not just feature, for example, "absence of coroutine" is also something confuses or annoys you.
08:37 < be5invis> "automatic semicolon insertion" is ok too.
08:38 < [AD]Turbo> hi there
08:40 < thealphanerd> anyone here have much experience with jekyll (OT I know)
08:40 < substack> automatic semicolon insertion is great even if you use semicolons
08:40 < thealphanerd> just curious peoples opinion on the platform
08:40 < substack> because if you forget one it's no bigs
08:41 < thealphanerd> be5invis: I think the thing that confuses people the most is functional scope 
08:41 < SomeoneWeird> you ask about a ruby site generator in a javascript channel, don't know what kind of response you're going to get thealphanerd 
08:41 < md_5> How can I make the socket data accumulate until I have enough to construct my packet?
08:41 < SomeoneWeird> md_5, wat
08:41 < md_5> I need to construct packets from a socket
08:42 < SomeoneWeird> define socket
08:42 < md_5> net
08:42 < thealphanerd> SomeoneWeird: I would hope that people are agnostic regarding tools that can get the job done… or potentially suggest a node / js based alternative if one exists
08:42 < md_5> net.createServer or whatever
08:42 < md_5> #jekyll btw
08:42 < md_5> I do not know the length of the packet until I have parsed the bytes within.
08:43 < thealphanerd> md_5: couldn't you have the data collect in a model on the server
08:43 < md_5> The buffer provided in on('data') or whatever might not contain enough bytes
08:43 < thealphanerd> and not execute a call back until it is ready?
08:43 < md_5> is there a way I can 'replay' this buffer
08:43 < thealphanerd> or do you want to comprise the packet before sending?
08:43 < md_5> (built into node)
08:44 < thealphanerd> SomeoneWeird: do you know of any node based tools that do what jekyll does?
08:45 < deoxxa> md_5: no
08:46 < md_5> heya deoxxa 
08:46 < md_5> Just looked at Burning Pig, and I see it has its own replayer
08:46 < deoxxa> md_5: however, https://github.com/deoxxa/dissolve
08:46 < md_5> you probably do the same
08:46 < deoxxa> what's burning pig? :x
08:47 < md_5> deoxxa jsmc alternative
08:47 < deoxxa> ahh
08:47 < deoxxa> nice
08:47 < be5invis> Anything else about my question?
08:50 < Borja> I need to create a socket server with nodejs, Any framework that can help me?
08:50 < thealphanerd> socket.io?
08:50 < thealphanerd> or shoe?
08:51 < Borja> thealphanerd:  a framework like express
08:51 < thealphanerd> ahhh
08:51 < Borja> express.js is only oriented web application?
08:51 < be5invis> WHAT confuses you most while you are learning/using JavaScript (except DOM and browser sh*ts).
08:52 < thealphanerd> Borja: what is your end goal
08:52 < kramutils> hi nodes! :-)
08:53 < Borja> The user connects to the application with a socket, not a WebSocket, much like a chat and using a PC application
08:53 < thealphanerd> have you seen meteor?
08:54 < thealphanerd> although I think meteor is websocket based
08:54 < thealphanerd> it is an interesting framework
08:54 < Borja> thanks
08:55 < deoxxa> be5invis: if you could answer any hypothetical question, what would it be?
08:56 < be5invis> decoxxx: type conversion is a good example
08:56 < Borja> thealphanerd:  I think is only web: Meteor is an ultra-simple environment for building modern websites.   
08:56 < Borja> :(
08:57 < thealphanerd> Borja: are you looking to do things on local networks?
08:57 < Borja> no, i want use internet
08:59 < Borja> thealphanerd:  https://github.com/alexyoung/ircd.js is a ircd proyect, allow mirc connect to a server
09:00 < thealphanerd> then is also node-irc
09:00 < Borja> It is similar but with another program, not irc
09:00 < thealphanerd> npm install irc
09:00 < thealphanerd> ahhh
09:00 < thealphanerd> what program then?
09:00 < Borja> private program
09:01 < thealphanerd> unfortunately I don't really know how to hepl with the information you are giving
09:01 < thealphanerd> sorry :(
09:02 < Borja> thealphanerd:  thanks
09:03 < deoxxa> Borja: i don't think what you're looking for exists
09:03 < deoxxa> Borja: there's just so many different ways to do what you're talking about, it wouldn't make sense for someone to try to build a framework (and thus a following) around just one of them
09:04 < deoxxa> Borja: i mean, you have line-oriented protocols, protocols with length-prefixed messages, others that are extremely context-sensitive and have neither, etc
09:05 < mscdex> i have an idea for the next killer app for node.js!
09:05 < deoxxa> mscdex: is it a robot that kills people
09:05 < mscdex> realtime web-based chat!
09:05 < deoxxa> that's not so exciting
09:06 < Borja> deoxxa:  Can you tell me a manual to structure an application of this type. has many events and is interactive.
09:06 < mscdex> :-D
09:06 < Borja> mscdex:  https://github.com/alexyoung/ircd.js 
09:07 < mscdex> Borja: i was being sarcastic ;-)
09:09 < skapism> Can I use the method contains on an object's index?
09:10 < SomeoneWeird> skapism, index?
09:12 < sshaginyan> You guys out of all the rooms I've been to on free node this one is clearly the best. Honestly the people here are just amazing.
09:12 < timeturner> why thank you
09:12 < sshaginyan> Is there anyway I can contribute anything?
09:12 < timeturner> create modules! :D
09:13 < timeturner> contribute to others' modules and perhaps even core
09:13 < sshaginyan> I have a huge web crawler in node using  bloom filter and hyper log log
09:13 < sshaginyan> I extended to C++
09:13 < sshaginyan> I can put that up there
09:14 < timeturner> sounds cool
09:14 < timeturner> yeah put that up
09:15 < sshaginyan> I surely will you guys rock!
09:15 < skapism> SomeoneWeird: the property names of objects, in case they are strings, can I use the method contains on them?
09:16 < skapism> It's weird, since when I display typeof propertyName, it says string, but it gives me a TypeError when I try to use the method contains on it
09:19 < skapism> Other methods like 'split' work...
09:19 < skapism> Oh, it appears to just not have been implemented yet, maybe I should use some flags to activate harmony features
09:20 < skapism> 'test'.contains('t') doesn't work either
09:22 < deoxxa> skapism: "test".indexOf("t") !== -1
09:23 < mscdex> >> "node.js rules.indexOf("js")
09:23 < purr> mscdex: SyntaxError: Unexpected identifier
09:23 < mscdex> >> "node.js rules".indexOf("js")
09:23 < purr> mscdex: (number) 5
09:23 < skapism> I don't suppose I should play with the prototype of String, right?
09:23 < mscdex> >> ["node", "js", "rules"].indexOf("js")
09:23 < purr> mscdex: (number) 1
09:24 < asadpakistani>  How do I enable partial search on a key in couchdb views...lets say if the key is LoremIpsum how can i search giving Lorem*, do i have to emmit the key every 3 letters of the string to provide a minimum 3 letter searchability???
09:24 < deoxxa> skapism: not if you want anyone else to use your code
09:25 < deoxxa> skapism: if it's just for you though, go nuts! javascript treats you like an adult and lets you poke around in places you probably shouldn't
09:30 < skapism> deoxxa: thanks
10:04 < jvanveen> hey
10:04 < jvanveen> does es6-shim support class notition ?
10:05 < ljharb> es6 isn't finalized. what es6-shim are you talking about?
10:06 < ljharb> and no, new syntax isn't shimmable, including class notation.
10:06 < jvanveen> ehm ok thanks
10:07 < jvanveen> does the harmony parameter in nodejs enable some of the es6 features?
10:07 < ljharb> also i wouldn't use an es6-shim unless it's as rigorous as https://github.com/kriskowal/es5-shim in following the spec.
10:07 < ljharb> some, but not all
10:07 < jvanveen> does it support named parameters?
10:08 < ljharb> i don't think so, but you can do that in ES3 if you just pass a hash as a single argument
10:19 < MI6> joyent/node: Timothy J Fontaine master * 14ed173 : test: add TAP output to the test runner - http://git.io/tqlCqQ
10:22 < Gottox> Is s.o. here going to visit 29c3?
10:25 < samholmes> redistogo is a bit price don't you think?
10:26 < samholmes> intovps' VPS boxes are only 10 bucks and you get 512MB RAM
10:26 < samholmes> Why is redistogo so expensive?
10:27 < aandy> you probably don't have the redistogo team to fix your problems with backup, uptime and iops on intovps
10:31 < AAA_awright> What's the proper way to extend Error?
10:32 < AAA_awright> I mean, create your own error type?
10:32 < Sou|Raven> prototype?
10:32 < AAA_awright> I know that's the correct thing to do but nobody seems tod o it
10:32 < AAA_awright> For instance, create a UserInputError and a ServerError for emitting 4xx and 5xx errors, respectively
10:33 < ljharb> AAA_awright: function Custom() { this.name = 'Custom'; Error.call(this, msg); Error.captureStackTrace(this, arguments.callee); }; Custom.prototype.__proto__ = Error.prototype;
10:33 < ljharb> that's how i do it for that exact purpose
10:33 < AAA_awright> Awesome
10:34 < ljharb> please note: that's awful awful code, and messing with callee and __proto__ is awful, but i don't know of a better way.
10:34 < deoxxa> AAA_awright: i use http-error for that actual case
10:34 < deoxxa> or is it http-status
10:34 < deoxxa> hrm
10:34 < AAA_awright> ljharb: Yeah I'm looking at that now
10:35 < AAA_awright> I've done Custom.prototype = new Error;
10:35 < ljharb> ooh, interesting - i should use that
10:35 < AAA_awright> for inheritance
10:35 < AAA_awright> deoxxa: Link?
10:35 < deoxxa> https://github.com/c9/node-http-error
10:35 < AAA_awright> ljharb: Also this.name might be redundant if you're naming the function
10:35 < deoxxa> can you even modify .name meaningfully?
10:35 < ljharb> perhaps
10:35 < ljharb> no idea, i copied it from elsewhere.
10:36 < AAA_awright> ljharb: Actually, use Object.create()
10:36 < AAA_awright> Custom.prototype = Object.create(Error.prototype);
10:37 < ljharb> O.o does that do the same thing? i haven't used non-shimmable ES5 features much.
10:40 < gildean> or just use the until.inherits
10:41 < gildean> which'll make the object "inherit" the prototype of another object
10:41 < ljharb> i'm not sure that will work for Errors, they're special
10:41 < gildean> util.inherits(Custom, Error);
10:41 < ljharb> but maybe
10:42 < gildean> yeah, i've never tried
10:42 < gildean> but i'd think so
10:42 < samholmes> aandy: You could write an application that watches the DB and keeps uptime and backups. How hard would this be to implement and open source such a project?
10:43 < aandy> or you could *not* do that and have someone else in charge of it - who you pay to take that responsability 
10:43 < gildean> ljharb: i checked the source, and for what i can see, it should work
10:44 < aandy> just goes to show, you're not just paying for a redis installation on an ec2 instance
10:44 < aandy> you were asking why it was more expensive than running it yourself, or on a vps
10:44 < AAA_awright> It appears util.inherits also uses Object.create
10:44 < AAA_awright> Huh
10:44 < AAA_awright> I haven't actually looked at it
10:44 < aandy> and yes, most services are much cheaper to run yourself - if you know how
10:44 < AAA_awright> It also sets the constructor, of course
10:45 < AAA_awright> Since by default a function Func has a prototype with {constructor: Func}
10:45 < aandy> aws for instance is not just a virtual box. if that's what you're looking for, then vmware has some great retailers
10:46 < aandy> or you could stack up 10-20 pc's in your basement. would also be cheaper, if price is the only thing that matters. point is, you get what you pay for. and if your time is worth nothing, then yes, you're saving money :)
10:46 < AAA_awright> ljharb: Also arguments.callee is going away, but you can self-reference the function by using its name within the function (even for expression functions inside an assignment, instead of statement functions which are their own statement)
10:47 < Shinster> I found a nice vps provider for 7 euros a month
10:47 < ljharb> AAA_awright: ah, true. i should update my code
10:47 < Shinster> gig of ram, 20gb storage - I'm sure they suck in other ways but it's been solid for me so far for my node adventures
11:05 < planet_en> anyone have any idea how to run aliases you created in bash via a nodejs file?
11:06 < gildean> planet_en: you can exec them, or spawn them
11:06 < gildean> planet_en: check the child_process module in the core
11:06 < gildean> http://nodejs.org/api/child_process.html
11:07 < planet_en> gildean: tried it, it doesn't work with aliases..
11:07 < gildean> even exec?
11:07 < planet_en> gildean: { [Error: Command failed: /bin/sh: branchinfo: command not found
11:07 < planet_en> ] killed: false, code: 127, signal: null } '
11:07 < planet_en> gildean: thats what I got
11:07 < gildean> are the aliases set on the same user you use to run the app?
11:07 < planet_en> gildean: yupp exec
11:09 < planet_en> gildean: aliases are set through a shell file, but I run the nodejs file after sourcing the alias file
11:11 < Vill> hello friends
11:12 < planet_en> how can I set something like this from nodejs "HOST=`who am i | sed -r "s/.*\((.*)\).*/\\1/"`"
11:12 < planet_en> it kind-of fails to set the value
11:13 < be5invis> I have to write a great program before the doomsday...
11:13 < planet_en> process.env['host'] = '`who am i | sed -r "s/.*\((.*)\).*/\\1/"`'
11:13 < planet_en> that doesnt evaluate 
11:13 < be5invis> USE CHILD PROCESS!
11:15 < Vill> hey, I'm following the Nodetuts.org, i've done everything as stated in the tutorial, but an error occured: http://img534.imageshack.us/img534/7673/circlev.png
11:16 < Vill> could someone please tell me, why node is not expecting the calculation after my variable x?
11:16 < planet_en> be5invis: IT DOESNT WORK, TRY FOR YOURSELF http://pastebin.com/2ucDGjjR
11:18 < be5invis> Child process does support pipelines......
11:20 < planet_en> be5invis: clearly the outputs are different if you run it on console and if you run it through nodejs
11:20 < be5invis> ......
11:20 < planet_en> be5invis: i know right..
11:20 < be5invis> i am not familiar with child-processes.
11:21 < be5invis> that familiar.
11:21 < planet_en> be5invis: lol
11:21 < be5invis> perhaps you should start 2 processes and pipe them manually
11:52 < _dave_h_d> hi all, what is the easiest way to install the latest node on amazon linux, right now yum does 0.6.18-1.el6 
11:56 < AAA_awright> I can't find the place in the ECMAScript that actually specifies "constructor" property on Function#prototype
11:57 < RLa> _dave_h_d: use official binary
11:57 < _dave_h_d> RLa: from source?
11:57 < RLa> and if it's not micro instance, you can compile from source too
11:58 < RLa> no, the official binary on nodejs.org
11:58 < RLa> oh wait, what you mean by latest?
11:58 < RLa> master branch?
11:58 < _dave_h_d> Current version: v0.8.16
12:00 < RLa> http://nodejs.org/download/ <- Linux binaries
12:03 < _dave_h_d> RLa: I have downloaded the binary and unzipped it, not sure what to do next
12:04 < RLa> _dave_h_d: as root, move it to /opt/node
12:05 < RLa> then symlink both node and npm binaries to /usr/local/bin
12:06 < RLa> something like ln -sf /opt/node/bin/node /usr/local/bin/node
12:06 < RLa> and same for npm binary
12:06 < Industrial> Is there a guide to the ideal way of setting up a directory structure of a nodejs module (to be exported to npm)?
12:06 < RLa> _dave_h_d: all these files should be owned by root:root
12:07 < _dave_h_d> RLa: perhaps it would be a safer bet to it via yum
12:07 < _dave_h_d> perhaps there is a way i can change the repo file
12:07 < RLa> oh ok, good luck then
13:02 < urbann> I can't get debugging to work
13:02 < urbann> I have this:
13:02 < urbann> function test(x) {console.log(x * x)};  test(5);
13:03 < urbann> and then I run node debug x.js
13:03 < urbann> I get:
13:03 < urbann> < debugger listening on port 5858
13:03 < urbann> connecting... ok
13:03 < urbann> break in x.js:1
13:03 < urbann>   1 function test(x) {console.log(x * x)};  test(5);
13:03 < urbann>   2 });
13:04 < urbann> why like this?
13:19 < shannonmoeller> The debugger is just pausing on the first line of execution to give you a chance to step through your code.
13:20 < shannonmoeller> urbann: type 'help' at the debug prompt
13:22 < shannonmoeller> urbann: I think you're looking for the 'cont' command.
13:23 < urbann> shannonmoeller: thanks, I think I start to grasp how to work with the debugger, the documentation I used was outdated
13:24 < urbann> are going throw the docs at http://nodejs.org/api/debugger.html for the moment
13:25 < test_> hi
13:28 < papachan> nodejitsu site says: An error has occured  {"code": "ECONNREFUSED"  ... }
13:28 < test_> need help, anybody
13:28 < papachan> sorry i was thinking i was at #nodejitsu
13:32 < gildean> test_: unless you explain your problem, you won't get any help
13:33 < test_> guys, I cant activate my webstorm IDE which ok button was automatically disabled
13:34 < test_> suggestions?
13:35 < gildean> test_: webstorm doesn't have a support channel or something like that?
13:37 < test_> no, I want to use webstorm with node.js
13:59 < zbzzn> I am using webstorm with node.js
14:07 < scott_gonzalez> isaacs: Is there a way to resolve a module's require path based on CWD instead of the path of the current file?
14:07 < yug> Hi 
14:07 < yug> anyone here familier with 'ws' module?
14:11 < gildean> yug: somewhat, yes
14:12 < sk8ball> So whats the preferred editor/ide for node development on a windows machine (other than sublime)
14:12 < gildean> yug: just ask your question and people might respond
14:12 < planet_en> how do I set encoding for 'data' so I can get the readable string? http://pastebin.com/YB4watYa
14:12 < sk8ball> what do you all think about webmatrix2?
14:13 < zbzzn> scott_gonzalez: you need to concat with __dirname
14:14 < scott_gonzalez> zbzzn: No, I need to do the path walking.
14:14 < whiskers75> Is there any telnet ASCII GUI module?
14:14 < scott_gonzalez> I want the equivalent of spawning node in CWD and running require.resolve().
14:14 < planet_en> heres the code: http://pastebin.com/YB4watYa
14:14 < scott_gonzalez> zbzzn: I'm looking for an installed module, not a file in my code.
14:15 < zbzzn> I have no idea then :)
14:17 < scott_gonzalez> I have a feeling it can't be down without spawning another node process.
14:19 < whiskers75> Is there any way to _dynamically_ allocate memory to a child process? i.e. if memory usage increases to 900/1024MV
14:19 < whiskers75> allocate another 1024MB
14:19 < whiskers75> MV -> MB*
14:21 < bnoordhuis> whiskers75: the answer is 'possibly'. what are you trying to do?
14:21 < yug> gildean
14:21 < gildean> 
14:21 < yug> So i have this weird problem that happens only from my home network
14:22 < whiskers75> bnoordhuis: run a Minecraft server
14:22 < yug> im using the ws module to connect a websocket from the browser to my node.js server 
14:22 < whiskers75> bnoordhuis: (github.com/whiskers75/miney)
14:22 < yug> and from my home network i'm getting onopen and right after onclose
14:22 < bnoordhuis> whiskers75: let me reword that as 'what do you need the extra memory for?' :)
14:23 < whiskers75> bnoordhuis: to prevent server lag
14:23 < whiskers75> bnoordhuis: while not using all the memory
14:23 < yug> So i have this weird problem that happens only from my home network. im using the ws module to connect a websocket from the browser to my node.js server and from my home network i'm getting onopen and right after onclose
14:23 < gildean> yug: are you using https, as in wss:// or just plaintext ws://
14:23 < bnoordhuis> whiskers75: still not following. memory management is mostly transparent in node. do you keep big buffers around or anything?
14:23 < yug> as if the connection always disconnect right after connection 
14:24 < yug> plain ws://
14:24 < bnoordhuis> i initially mistyped that as 'big buggers'. would've been an amusing typo
14:24 < whiskers75> bnoordhuis: I'm spawning a child process to run Java
14:24 < gildean> yug: can you see the connection form on the servers side?
14:24 < bnoordhuis> whiskers75: okay. so why does the node process need more memory?
14:24 < gildean> yug: and does either side emit any errors?
14:25 < whiskers75> bnoordhuis: It doesn't. I mean the child process
14:25 < whiskers75> meant*
14:25 < bnoordhuis> whiskers75: the java process? you don't have to allocate memory for it, that's what the operating system is for
14:25 < bnoordhuis> unless there's resource limits in effect
14:26 < bnoordhuis> but that's not really node specific
14:26 < yug> gildean:Can't check that now cause it happens only from on my home network.
14:26 < yug> gildean:will debug that later today. thought maybe someone faced this already
14:26 < whiskers75> bnoordhuis: I'm going to have multiple servers running
14:27 < gildean> yug: bit hard to help then, i'd start by adding some indicators on the serverside that the connection is made correctly, and make sure you're handling emitted errors
14:27 < bnoordhuis> whiskers75: yes. that doesn't change anything
14:27 < whiskers75> bnoordhuis: So, I will limit the total memory
14:27 < yug> gildean:will do that. whats the best module for working with websocket server in node.js?
14:27 < bnoordhuis> whiskers75: you may want to look at ulimit. there may be modules on npm that let you set rlimits
14:27 < whiskers75> bnoordhuis: ah. i get it now 
14:28 < whiskers75>  /facepalm
14:28 < bnoordhuis> whiskers75: no worries :)
14:28 < whiskers75> IRC should add it in. :)
14:28 < yug> gildean:some func. is missing in the ws implementation, for example knowing the ip where the request came from.
14:29 < yug> gildean:i used to use socket.io but switched due to the fact that it was not possible to send binary via socket.io
14:29 < gildean> socket.io uses ws too
14:30 < Shinster> socketio doesn't support data?
14:30 < Shinster> erm binary
14:30 < `3rdEden> supporting binary kinda defeats the purpose of beeing a crossbrowser realtime library..
14:30 < `3rdEden> binary cannot be crossbrowser supported
14:30 < yug> nope socket.io
14:30 < yug> yes
14:30 < yug> agree
14:30 < yug> but 
14:31 < yug> if i know my app works only on supported browsers 
14:31 < `3rdEden> yug: then why use socket.io?
14:31 < `3rdEden> and not just pure ws?
14:31 < yug> and only with websocket, i want to be able to send binary 
14:31 < yug> I don't use it anymore 
14:31 < yug> i switched 
14:31 < `3rdEden> ohhohhh
14:32 < yug> but socketio had really good func. in terms of other features
14:32 < `3rdEden> i got confused by all the socket.io and binary chatter ;p
14:32 < yug> all the msg sending 
14:32 < yug> on and emit
14:32 < yug> yeah 
14:32 < hendore> How would I handle validation for a browser game? Quick example, player model has a variable for how many coins they have, or a map of items (inventory). This info is used to render the game.
14:33 < hendore> However I don't want that information to be used for logic, if the player purchases something, the coins should be checked on the server side right? and not what is in the player object
14:34 < gildean> hendore: the client side should only reflect the data from the sever
14:35 < qbit> bnoordhuis: do you happen to know of any changes that would cause native modules to compile to a .so vs a .node file? ( changes between 0.8.11 and 0.8.15 specifically )
14:36 < bnoordhuis> qbit: how do those modules build? with node-gyp, node-waf, something else?
14:36 < qbit> node-gyp
14:36 < bnoordhuis> qbit: barring bugs in node-gyp, nothing
14:37 < bnoordhuis> qbit: maybe ask TooTallNate when he's around, he maintains node-gyp
14:37 < qbit> aye - was gonna ask him lastnight - but never got around to it 
14:37 < qbit> thanks! 
14:37 < MI6> joyent/libuv: Vlad Tudose master * 4b115f8 : build: build libuv.a and libuv.so in different dirs  Fixes #659. (+1 more commits) - http://git.io/GkPxmA
14:41 < hendore> gildean, thats right, on first load the player data will be loaded in full (name, stats, inventory etc..) however every action in the game should validate with the server and then push those changes back to the client for drawing that information
14:41 < hendore> gildean, Im just not sure on how I should approach it
14:42 < gildean> hendore: what are you using now? socket.io?
14:50 < hendore> gildean, Socket.io is the intention yes, I haven't got much code written on the node side yet as I'm still in the planning stage
14:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:00 < exit2> Anyone here familiar with using passports TwitterStrategy?
15:01 < mrvisser> exit2: we have it working in our app, I might be of some assistance
15:02 < exit2> mrvisser: Well, for some reason I occasionally get a callback error but other times it seems to be working fine.  I'm also using the GitHubStrategy and it has no issues when logging it
15:02 < exit2> usually if I try to login once, it'll kick back an error and I'll go back and try again and it works :|
15:02 < mrvisser> exit2: are you running in a cluster?
15:02 < exit2> mrvisser: not sure what that is :)
15:03 < mrvisser> exit2: more than one node.js process running
15:03 < exit2> mrvisser: nope, just the one instance
15:11 < Kakera> if my socket emits an 'error' even, how do I check programmatically what kind of an error it is?
15:11 < Kakera> for example, how to check whether it is ECONNREFUSED?
15:13 < Kakera> is there any documentation on the Error object?
15:22 < exit2> what's the deal with 'partial' in ejs? I'm getting an error when trying to use it
15:48 <@isaacs> scott_gonzalez: no
15:48 < scott_gonzalez> isaacs: Didn't think so. I ended up just spawning a new process to get the module paths to be what I wanted.
15:48 < exit2> is there a decorator type thing I can do to allow views only if a user is signed in?
15:48 <@isaacs> scott_gonzalez: that works
15:52 < Kakera> are there any plans to allow writing non-string types directly to a Steam, without creating a Buffer first?
15:53 < Kakera> s/Steam/Stream
16:05 < romario333> Hi, what do you think about using npm as a package manager for client-side libraries?
16:07 < mrvisser> romario333: can you explain your scenario a little better? I'm not quite sure if I understand, but if others do I'll back up into the shadows :)
16:09 < romario333> Basically I want to consume npm packages from browser and publish UI-related packages into npm.
16:10 < jtomasrl> what does the ~ operator do?
16:10 < gavri> I'd like to performance profile a node.js app so that I can find out where most of the time is spent. what's the usual approach? neither of the node.js books I bought has any info about this
16:10 < romario333> I plan to do something what browserify does - to translate CommonJS packages into AMD ones and serve them with RequireJS
16:11 <@Nexxy> jtomasrl, bitwise not
16:11 < jtomasrl> Nexxy: ty
16:11 < mrvisser> romario333: doh, beyond my scope of knowledge, sorry friend!
16:11 < mrvisser> gavri: there are some services like node-time, which has helped me a couple times
16:12 < gavri> mrvisser: thanks. why does it have to be a service though?
16:12 < mrvisser> gavri: the option I use the most is dtrace with stack-vis: http://blog.nodejs.org/2012/04/25/profiling-node-js/
16:12 < mrvisser> gavri: not sure, I think they want to make money :)
16:13 < gavri> mrvisser: thanks :D
16:13 < mrvisser> with d-trace+stackvis, you'll need to be on a illumos-based OS as it has the dependencies
16:13 < mrvisser> also, if you have the option a 32bit machine will be better, the data in the flamegraph won't be so cryptic
16:14 < mrvisser> all this stuff is summarized in the link I gave you, but I skimmed by it and it bit me.
16:21 < exit2> does anyone know why I'm getting this error? http://pastie.org/5553317
16:24 < gavri> mrvisser: so I won't be able to get this to work on ubuntu or centos?
16:24 < mrvisser> gavri: not the dtrace stuff, no
16:27 < gavri> mrvisser: what I'd also like is to be able to know how much time is spent on each IO action
16:27 < gavri> that would mean that it would have to time these calls until the callback is called
16:29 < sx> any recommendations for server-side workarounds for cross domain requests?
16:29 < sx> for simple html request and JSONify
16:30 < gildean> sx: proxy?
16:32 < mrvisser> gavri: dtrace won't tell you how much time is spent on IO actions, it will tell you how the node process is spending it's (blocked) time I believe
16:32 < mrvisser> if you need IO operations, have a look at node-time, or perhaps add in some trace logging and time it manually.
16:34 < mrvisser> gavri: for communicating w/ external systems, I generally wrap things up in a central API where I can grab, log (trace), count and time all data interchanged.
16:35 < mrvisser> just to monitor their responsiveness and IO times. hope that helps.
16:39 < alFReD-NSH> url.format has a `slashes` option. Is that private api or undocumented public api?
16:39 < exit2> I can't find a way to iterate through JS from mangoose in EJS
16:39 < exit2> through JSON*
16:40 < gavri> mrvisser: thanks
16:41 < mrvisser> cheers
16:52 < sgallagh> isaacs, bnoordhuis: I have a question regarding SPDY support in Node.js. Specifically, I was wondering whether it would be possible to disable it at build-time so that I could link against an older version of openssl on older platforms
17:07 <@konobi> it's bundled
17:07 < sgallagh> konobi: 0.9.4 has the ability to link against a system copy of openssl
17:08 < sgallagh> Well, "will have". The patches were accepted and will be included when it's released
17:08 < chomwitt> is it more secure to run npm without sudo (install packages only local) ?
17:09 < Shinster> chomwitt: yes
17:09 <@isaacs> chomwitt: depends.
17:09 < Shinster> it'sm ore secure to do * when not running it as sudo
17:10 <@isaacs> chomwitt: if you're installing them globally, it's more secure TO use sudo
17:10 <@isaacs> Shinster: ^
17:10 <@konobi> sgallagh: is there something special about your system openssl?
17:10 <@isaacs> chomwitt: if you trust npm to do the right thing, but don't trust the package's install scripts.
17:10 <@isaacs> chomwitt: when running as root, npm will execute build scripts as "nobody"
17:10 <@isaacs> chomwitt: but non-root users can't change their uid, so in that case, npm just runs them as you.
17:10 <@isaacs> have to go up to get down :)
17:13 < sgallagh> konobi: Well, it works just fine on Fedora with openssl 1.0.1 (which includes upstreamed patches for SPDY support)
17:13 < sgallagh> But I also want to backport the Node.js package to RHEL/CentOS 6, and that's using an older version of openssl that lacks SPDY
17:14  * chomwitt thanks isaacs 
17:32 <@konobi> sgallagh: so use the bundled version?
17:33 < sgallagh> konobi: That's not considered acceptable. Bundled libraries are expressly forbidden because they cause all kinds of deployment issues and problems when dealing with security bugs.
17:35 <@konobi> or use a non-package system version
17:38 < sgallagh> konobi: I think you're missing the point.
17:38 < sgallagh> The problem is that having two copies of the same library on the system causes issues. I'm trying to avoid that and I'm looking for real solutions.
17:41 < cool_boy> .js stuff sucks me 
17:41 < cool_boy> :(
17:42 <@konobi> sgallagh: it's your issue... it's solved for everyone else
17:42 < sgallagh> konobi: No, actually most others are a ticking time bomb :)
17:43 < cool_boy> how is possible to know on browser which .js is responsible for some work , which is happening?
17:43 < cool_boy> from which file it is comming?
17:43 < sgallagh> Carrying around a special, non-security-reviewed version of openssl on a system that deals with network traffic? That's a recipe for disaster.
17:44 <@Nexxy> cool_boy, there is no file
17:45 < cool_boy> Nexxy: not asking ..on browser, I am asking if an application is running on browser and uses .js then is possible to know?
17:47 <@Nexxy> cool_boy, I'm not sure I understand the question
17:47 < cool_boy> I am too bad in making understand things
17:47 < cool_boy> :(
17:47 <@Nexxy> :(
17:48 < CoverSlide> if there is an animation or something on the browser, you can't really trace it back to the originating code without modifying the originating code
17:48 < CoverSlide> there are debug tools like the chrome debugger that make some of this easier, but still you'd have to dig down into the code to really do it
17:48 <@konobi> sgallagh: but you're happy enough to build your own node, without installing a security reviewed package?
17:49 < CoverSlide> openssh isn't bundled, it's statically linked
17:50 < sgallagh> CoverSlide: openssl, and static linking is a form of bundling :)
17:50 < CoverSlide> right, openssl
17:51 < sgallagh> konobi: OpenSSL is security-reviewed by Red Hat for suitability in production usage. The copy bundled with Node.js is not. It's insane to ship an untrusted *crypto* library.
17:51 < CoverSlide> well does openssl for RHEL6 not compile with current versions of node?
17:51 <@konobi> sgallagh: patches welcome then
17:51 < sgallagh> CoverSlide: It's lacking SPDY functionality
17:51 < CoverSlide> sorry i just jumped into the conversation here
17:51 < CoverSlide> oh right
17:52 < sgallagh> konobi: I'd love to, that's why I've been asking. I'm trying to figure out where I need to start looking. It's a big codebase and I'm not yet familiar with it.
17:52 <@konobi> probably the gyp
17:52 < superjoe> do we have a release date for 0.10?
17:53 < sgallagh> konobi: Can you be more explicit? The gyp is already capable of linking against a system lib, but I need to know where in the code we're consuming the SPDY protocol and whether there's any way I can make that an optional feature (i.e. use SPDY if available, otherwise fall back to traditional protocols)
17:53 < superjoe> just noticed the topic
17:54 <@konobi> sgallagh: it's not "spdy" being available... it's an extra function or option in openssl
17:54 <@konobi> npn
17:55 < bright_day> i have links on my site ex: site.com/group/The%20Host%20-%20Stephenie%20Meyers url with spaces. so i use expressjs and want urls to be decoded in url bar dont want ugly urls can i do that?
17:55 < sgallagh> konobi: Please enlighten me. As I said, I'm new to this here.
17:55 < CoverSlide> bright_day: you can use + signs instead of %20
17:56 < bright_day> CoverSlide how i do that?
17:56 <@konobi> sgallagh: http://en.wikipedia.org/wiki/Next_Protocol_Negotiation
17:56 <@Nexxy> uh, excuse me; Stephenie Meyer*
17:57 < CoverSlide> bright_day: although if you want to have good seo links, you'd convert your spaces to dashes
17:58 < ThePrimeMedian> need a quick help from someone; im a n00b at regex: what I am trying to do is:
17:58 < CoverSlide> Nexxy: twi-tard?
17:58 <@Nexxy> wow CoverSlide have some respect
17:58 < ThePrimeMedian> oops.. hi tenter premature
17:59 < CoverSlide> ain't no shame in it
17:59 < ThePrimeMedian> need a quick help from someone; im a n00b at regex: what I am trying to do is:   if ( req.path matches /api/(anything after) ) {}
17:59 <@konobi> sgallagh: then look at node_crypto.cc
17:59 < sgallagh> konobi: Thanks
17:59 <@Nexxy> > tard
17:59 <@Nexxy> qq
17:59 < CoverSlide> it's all good, my wife is too
18:00 <@Nexxy> omg so is mine!
18:00 < jcrew> ThePrimeMedian: /^\/api\/.*$/g
18:01 < ThePrimeMedian> jcrew: thank you.. 
18:01 <@konobi> jcrew: skip the g
18:01 <@konobi> and you want .+ not .*
18:02 <@konobi> sgallagh: looks like there's already defines in there
18:02 < jcrew> konobi: i assumed he wanted "/api/" to be valid,
18:03 < ThePrimeMedian> yes, I want /api/ to be valid
18:03 <@konobi> how bout /api ?
18:03 < CoverSlide> so do you want /api to be valid also?
18:03 < ThePrimeMedian> i just want to trap the /api/ in the middleware so I can validate any authentication
18:03 < ThePrimeMedian> no. /api should not be valid
18:03 < jcrew> you should drop the g, too
18:03 < jcrew> like konobi said
18:04 <@konobi> yeah... .*?$
18:04 < sgallagh> konobi: Ah cool. Thank you very much. This is the info I was looking for.
18:04 < jcrew> ? seems unneccessary
18:04 <@konobi> jcrew: maybe, i just tend to find it's good practice
18:05 < jcrew> certainly helps in long regexes too
18:05 < jcrew> when trying to debug
18:06 <@konobi> sgallagh: have you tried linking with an older version?
18:06 <@konobi> i would assume it should work
18:07 < sgallagh> konobi: I hadn't yet. I was looking for some idea of what level of effort I would be undertaking, since I need to backport a number of dependencies first.
18:07 < sgallagh> I didn't want to spend a week backporting deps to discover I couldn't actually build Node.js
18:08 <@konobi> sgallagh: TIAS
18:08 <@konobi> openssl wasn't always bundled
18:08 < sgallagh> TIAS?
18:08 <@konobi> try it and see
18:08 < sgallagh> ah, gotcha
18:08 < sgallagh> Yeah, like I said, it'll take a while to get to that point, but I wanted to make sure the lead-up work was worthwhile
18:08 < sgallagh> Or at least, get a sense that I wasn't going to be slapped in the face when I got there :)
18:12 < tnorris> if I'd like to rebase my commits to remote HEAD after creating a pull request, do I need to close the current and open a new one, or will github handle that?
18:16 < exit2> anyone here familiar with express-partials?
18:21 < superjoe> don't ask to ask, just ask.
18:31 < TehShrike1> yay yay yay yay YAY streams2 https://gist.github.com/4329277
18:32 < exit2> superjoe: Well I'm trying to figure out why I can't do something like <%- partial('comment', post.comments) %>
18:33 < othiym23> mbalho: the earliest I'll see jerrysv is next week when I'm in PDX for hols with the fam
18:33 < superjoe> TehShrike, I'm so excited about this :D
18:33 < TehShrike1> me too
18:33 < tnorris> TehShrike: seriously. waiting for v0.10 almost physically hurts.
18:34 < TehShrike1> I haven't been using streams a ton, in part because I'm worried about messing up edge cases I'm not up on
18:34 < Draggor> Anyone here able to take some time and help out with some OAuth stuff?
18:34 < TehShrike1> I'm really excited about this
18:34 < superjoe> TehShrike1, I do the exact same thing
18:34 < superjoe> tnorris, maybe if we all hold hands and wish it to come faster, it will
18:35  * tnorris takes two people by the hands and begins to chant
18:35 < TehShrike|Work> "I *do* believe in streams!"
18:35 < Draggor> Main goal:  I want to have a restful API, and I don't want to have server side sessions.  If a user has a google account and auth with it, they can make requests against the api.  Right now I'm trying to poke at express.js and passport.js
18:36 < ryo> Compiling node on RaspPi takes SO LONG. I've tried cross compiling, but that's a whole other can of worms.
18:37 < superjoe> ryo, how long?
18:37 < superjoe> I hope to receive mine in the mail soon
18:38 < ryo> superjoe: ~2.5 hours. If I overclock, I can get it just under 1.5.
18:38 < othiym23> ryo: there are people with prebuilt packages for Raspian if you poke around a bit
18:38 < othiym23> I don't know whether there are both hard and soft float versions, though
18:38 < thealphanerd> ryo: cross compiling isn't the worst inthe world
18:38 < thealphanerd> there was a compiled version on github
18:38 < superjoe> wow.
18:38 < thealphanerd> want I should find it for you?
18:38 < TehShrike|Work> thealphanerd: YES!
18:39 < othiym23> and jerrysv was telling me it took him about 20 minutes to build Node, so you might see if you can poke at him on Twitter / GitHub and get his build sekrits from him
18:39 < CoverSlide> or use archlinux-arm which has a nodejs-0.16 module: http://us.mirror.archlinuxarm.org/arm/community/nodejs-0.8.16-1-arm.pkg.tar.xz
18:39 < CoverSlide> *0.8.16
18:39 < ryo> thealphanerd: sure! I've been hacking away on adding RaspPi support to this: https://github.com/felixge/node-cross-compiler
18:39 < thealphanerd> hmmmm
18:39 < thealphanerd> interesting
18:39 < gildean> idk if ubuntu runs on raspi, but ppa:chris-lea/node.js includes also armel and armhf builds of latest node
18:40 < ryo> gildean: raspi is debian based. there are packages available, for its for node 0.6.x
18:40 < thealphanerd> gildean: rasbian is debian
18:40 < thealphanerd> so it should
18:40 < othiym23> if you guys really want to get 0.10 out faster, you could pitch in on fixing the performance regressions shown in https://docs.google.com/a/newrelic.com/spreadsheet/ccc?key=0AganzoeqkiHddE9uRlA5WS0xSF9NTGN1QS0zZ3FRSWc#gid=0 ;)
18:41 < TehShrike|Work> I'm dumb, what are the numbers?
18:41 < gildean> ryo: i know most run debian on raspi, i was mainly wondering if minimal ubuntu would run it too, but afaik it's not officially supported
18:41 < csurap> How can I get the "created at" timestamp of the uploaded file ?
18:41 < ryo> CoverSlide: Thanks! I'll give these a try. Hopefully 0.8.16 is compatible with Johhny-5
18:41 < superjoe> othiym23, nice, thanks for sharing this
18:42 < CoverSlide> ryo: of course using a package from another distro there's always potential for failure, but fingers crossed and best of luck
18:42 < superjoe> aw how sad
18:43 < superjoe> streams2 is pretty slow by comparison
18:44 < thealphanerd> TehShrike|Work: can't find the compiled ones
18:44 < thealphanerd> poop
18:44 < TehShrike|Work> ah well.
18:44 < othiym23> TehShrike|Work: benchmark execution times, I believe
18:44 < thealphanerd> ryo: http://n8.io/cross-compiling-nodejs-v0.8/
18:44 < thealphanerd> foudn this
18:44 < ryo> If I can find the time I'd like to add Raspi support to the node cross compiler and run a AWS instance that kicks out new ARM builds for latest node versions
18:45 < thealphanerd> ryo: that would be sexy
18:45 < ryo> thealphanerd: Yeah, I was looking at that yesterday. It's missing one critical element.
18:46 < ryo> "This tutorial doesn't directly cover the setup of your cross-compiler. It is assumed you have that part figured out already."
18:46 < thealphanerd> ahh
18:46 < CoverSlide> whoa, just noticed Nate's awesome neckbeard action
18:46 < ryo> I've got it mostly figured out -- the necessary binaries are at: https://github.com/raspberrypi/tools
18:47 < thealphanerd> so what exactly is vagrant?
18:47 < CoverSlide> thealphanerd: it's a ruby gem for automating virtualbox
18:47 < thealphanerd> ahh
18:47 < thealphanerd> so we are allowed to talk about ruby stuffs here now
18:47 < thealphanerd> lol
18:47 < thealphanerd> I got yelled at by gentlemen last evening
18:47 < thealphanerd> for asking about jekyll
18:48 < CoverSlide> ruby ruby ruby gem install bundle update rake db:migrate
18:48 < thealphanerd> I just wanted to know opinions and if there was a node implementation of something like it
18:48 < CoverSlide> rails generate scaffold
18:48 < thealphanerd> so elegant
18:48 < thealphanerd> so brave
18:48 < CoverSlide> i'm a rebel
18:49 < superjoe> why would you want to talk about ruby?
18:49 < thealphanerd> LOL
18:49 < CoverSlide> the googles have told me this: https://github.com/azer/node-virtualbox
18:50 < CoverSlide> although vagrant does a bunch of other stuff like automating with chef, etc
18:50 < CoverSlide> iirc
18:50 < thealphanerd> ryo: so you are using vm ware to set up a VM
18:50 < thealphanerd> then getting the cross compile tool chains in place
18:50 < thealphanerd> compiling
18:50 < thealphanerd> then linking?
18:51 < CoverSlide> http://rubyrogues.com/082-rr-vagrant-with-michael-ries/ << all you need to know about vagrant, in only 51 minutes
18:51 < thealphanerd> LOL I dun have 51 minutes
18:52 < ryo> thealphanerd: vagarant uses virtualbox for the hypervisor.
18:53 < thealphanerd> so right now you are just trying to figure out what tool chain to use to cross compile for raspi?
18:53 < ryo> thealphanerd: ubuntu VM, pull down the latest node source, the cross compiler binaries, built with ARM as target arch
18:54 < thealphanerd> so where are you stuck right now?
18:54 < thealphanerd> do you have a fork?
18:54 < ryo> thealphanerd: we need hard floating point, so the binaries are here: https://github.com/raspberrypi/tools/tree/master/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/arm-bcm2708hardfp-linux-gnueabi
18:54 < CoverSlide> i've got 10,000 spoons when all i need is a fork
18:54 < TehShrike|Work> How ironic.
18:54 < ryo> Not stuck, just complaining as I'm wiring it all up :)
18:55 < thealphanerd> lol
18:55 < thealphanerd> well shuddup and code monkey
18:55 < thealphanerd> muahahaha
18:55 < thealphanerd> :P
18:55 < thealphanerd> j/k
18:55 < thealphanerd> thanks for doing the dredge work
18:55 < ryo> code monkey code! 
18:55 < thealphanerd> are you documenting the tool chain stuff?
18:55 < thealphanerd> would be nice to have a blog article about how to set it up
18:55 < ryo> yeah, once I get it all figured out 
18:57 <@Nexxy> http://n8.io/cross-compiling-nodejs-v0.8/
18:57 < thealphanerd> Nexxy: hehehe
18:57 < thealphanerd> we were just talkign aboot that
18:57 <@Nexxy> o
18:57 < thealphanerd> btw
18:57 < thealphanerd> https://www.youtube.com/watch?v=1SDDe4OsjDY
18:57 < thealphanerd> for you nexxy
18:57 < thealphanerd> since you like my nerdy music stuff
18:57 <@Nexxy> oh cool
18:57 < MI6> joyent/node: isaacs master * 9f4c098 : streams2: Process write buffer in a loop, not recursively  This fixes pum (+3 more commits) - http://git.io/L-wuBQ
19:00 < CoverSlide> what's the guy on the right doing? is that a theremin?
19:00 <@Nexxy> looks kind of like a salvia trip
19:01 < thealphanerd> CoverSlide: its a gamtrack controller
19:01 < MI6> joyent/node: piscisaureus created branch openssl-asm2 - http://git.io/medDwA
19:01 < thealphanerd> he's playing with this
19:01 < thealphanerd> https://github.com/spencersalazar/Fragment-String
19:02 < CoverSlide> crazy
19:03 < thealphanerd> chuck is a fun dsp language
19:03 < thealphanerd> but can be frustrating
19:03 < thealphanerd> like c and java had a noisy baby
19:05 <@Nexxy> thealphanerd, very cool
19:05 < DeathByDoubleDip> thealphanerd: ha. signal. noisy. i see what you did there.
19:06 < thealphanerd> I'm all about the puns
19:06 < thealphanerd> we were actually talking about doing a node implementation
19:06 < thealphanerd> called shredder
19:06 < thealphanerd> so with chuck you create a dsp thread with a shred
19:07 < thealphanerd> so I was thinking it would be could if you could deploy / kill shreds with node
19:07 < thealphanerd> Spencer is one of the leads devs on the chuck project righ now… so we are going to hack on it in the new year
19:07 < thealphanerd> I would like to add some more functional stuff to the chuck language… but short of that we could have some node bindings
19:09 < kwhinnery> read me for my module on nom hasn't updated for weeks - saw a few GH issues on this that indicate it's resolved, but not so much: https://npmjs.org/package/twilio
19:11 <@Nexxy> nom :D
19:16 < louiedog> What is the best way to read chars in a buffer? I'm able to read an 8 bit int that is the first char of the protocol and now i need to read in the rest as text.
19:17 < exit2> I'm attempting to iterate through JSON 'posts' http://pastie.org/5554046 but I can't seem to make the template not show the raw JSON
19:18 < mscdex> louiedog: buffer.toString
19:20 < louiedog> ty mscdex. Does that work on streams as well as buffers?
19:20 < mscdex> it works on Buffer
19:20 < louiedog> i asked the question poorly im sorry.
19:20 < mscdex> but streams generally emit Buffers
19:21 < mscdex> unless of course you used setEncoding or it's a weird stream
19:22 < louiedog> i'm on not using setEncoding
19:22 < mscdex> ok, you should be fine then
19:23 < louiedog> would i use that on the entire buffer or do i need to loop through each index?
19:23 < mscdex> louiedog: http://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end
19:23 < bnoordhuis> mscdex: you had a question about tls sessions? or was that substack?
19:23 < mscdex> bnoordhuis: it was me, but i looked at tls.js and found my answer
19:23 < mscdex> :-)
19:23 < bnoordhuis> okay, cool
19:24 < mscdex> i wonder if it should be documented though
19:24 < CoverSlide> RTFS is usually the best answer
19:24 < mscdex> read the file system? :-D
19:24 < CoverSlide> pfft. documentation is for wimps
19:24 < bnoordhuis> mscdex: i don't like documenting things. it means i need to keep it working
19:24 < mscdex> well it's useful (or in my case can be _required) to re-use tls sessions
19:25 < mscdex> :S
19:25 < CoverSlide> fact: 100% of programmers hate documenting
19:25 < bnoordhuis> i kid, i kid - good docs are important
19:25 < bnoordhuis> what were you looking for anyway?
19:26 < context> coverslide speaks truth
19:26 < louiedog> mscdex: you have saved whats left of my hair!
19:27 < louiedog> the link was just what i needed. Thank you so much!
19:27 < CoverSlide> fact: 100% of programmers complain when they aren't given good docs
19:27 < mscdex> bnoordhuis: the tls docs don't have CleartextStream.getSession or the 'session' option for tls.connect() documented
19:28 < mscdex> those two things are needed for session re-use
19:29 < mscdex> depending on the server configuration for FTPES, session re-use can be required
19:29 < bnoordhuis> mscdex: i can live with documenting those
19:36 < khmer_> ugh, there doesn't seem to be a good utility for copying recursively and overwriting files
19:37 < khmer_> and i don't count wrench
19:38 < chrisjaure> khmer_: there are a few, i've used this one: https://npmjs.org/package/cpr
19:39 < mrvisser> we use shelljs
19:40 < context> khmer_: rsync ?
19:57 < terinjokes> anyone have success in calling phantomjs from node?
19:58 <@mbalho> CoverSlide: i dont care about docs if the code is easy to read and it is a node module that is appropriately scoped
19:58 < CoverSlide> terinjokes: child_process.spawn('phantomjs')
19:58 < CoverSlide> done!
19:59 < CoverSlide> what do i win?
20:00 < terinjokes> CoverSlide: guess i should have been more clear, and that I wanted to communicate with it
20:00 < Fudge|> anyone heard of Brandon Wirtz's video criticising node.js?
20:00 < CoverSlide> terinjokes: child_process.spawn('phantomjs', ['script.js'])
20:00 < CoverSlide> done!
20:00 < terinjokes> CoverSlide: that's still one-way
20:00 < terinjokes> ;)
20:01 < CoverSlide> terinjokes: have you tried:  https://github.com/sgentle/phantomjs-node
20:06 < MI6> joyent/node: Bert Belder openssl-asm2 * c77724f : openssl: enable optimized asm code on x86 and x64 (+2 more commits) - http://git.io/Nl5nFA
20:07 < mscdex> Fudge|: who is that?
20:07 < Fudge|> mscdex: http://www.youtube.com/watch?v=1e1zzna-dNw
20:07 < mscdex> oh, that troll
20:08 < mscdex> yeah that's old
20:08 < Fudge|> mscdex: I'm going to ring him in an hour
20:08 < Fudge|> anything you'd like me to pass on to him?
20:08 < mscdex> i doubt there is much that would be worthwhile
20:09 < Fudge|> I rang there a min ago
20:09 < Fudge|> the receptionist said he's out of office
20:09 < Fudge|> but will be back in an hour
20:09 < Fudge|> (stremor)
20:11 < CoverSlide> it's funny cause someone ran a bunch of benchmarks of node vs vert.x, and vert.x ran slightly ahead in most of them, but one that node ran ahead in was calculating fibonnacci to x amount of places
20:12 < Fudge|> ooh
20:12 < Fudge|> vert.x looks interesting
20:12 < Fudge|> didn't know of it
20:12 < CoverSlide> i remember that one other blogger gave  fibonnacci as an example as something that node would be slow at compared to java, but then someone else actually benchmarked a node server doing this vs a java server, and node came out ahaid in that
20:13 < superjoe> if you were going to write the fibonacci node server, you'd do it as a separate process 
20:13 < superjoe> and you'd still come out ahead
20:13 < CoverSlide> without any nexttick stuff, without any caching, just plain recursive fibonnacci
20:14 < tnorris> I'm attempting (poorly) to make a new buffer implementation. started by coping the existing and making a few small changes (e.g. change the class name) but for some reason it still exports as 'SlowBuffer': http://git.io/rjeSYw
20:14 < tnorris> any ideas why?
20:14 < CoverSlide> and he ran it on netty or some other bullshit java nio thing
20:15 < mscdex> who's going to be serving up fibonacci results though?
20:15 < matbee> me
20:15 < matbee> i do it on the daily
20:15 < warz> on the reg
20:16 < matbee> randomly some request responses are replacedw ith fibonacci calculations
20:21 < ryanrolds_w> superjoe: Thanks for the Route 53 recommendation. We had a ticket in with enom to adjust some TTLs and they still hadn't handled it after 6 day. I can't believe enom doesn't support customers changing TTL.
20:21 < superjoe> ryanrolds_w, I'm glad it worked out for you
20:22 < ryanrolds_w> superjoe: Went smooth as butter.
20:26 < tnorris> nm, figured it out.
20:39 < sampo_v2> what's a reliable png library? I need to generate pngs in node. the 'png' library (c++) is segfaulting on me
20:39 < CoverSlide> imageMagick
20:40 < CoverSlide> sampo_v2: oh generating pngs? have you looked at canvas?
20:40 < superjoe> I second the canvas recommendation
20:41 < sampo_v2> cool. i will check it out
20:41 < sampo_v2> i imagine I can feed an rgba array to it?
20:42 < CoverSlide> you use it like a browser canvas
20:46 < sampo_v2> CoverSlide: thanks
20:47 < CoverSlide> oh i guess there are extensions to it to use buffers and stuff
20:49 < Draggor> My openssl on osx 10.8 says it supports aes-256-cbc, yet node-crypto claims that is not found.  WHat do I do?
20:51 < BlakeRG> i've got a restify server service setup and i want to read a flat JSON file and just spit it back out, what's the best way to do that?
20:51 < BlakeRG> i'm using fs.readFile right now and it looks like base64 encoded data =|
20:52 < BlakeRG> http://pastebin.com/wkZkXzMZ
20:53 <@konobi> Draggor: default node builds use a bundled openssl
20:53 < TooTallNate> BlakeRG: it's not base64, it's just a Buffer instance
20:56 < db42> what is the recommended way for handling lots of error checks in a big async func ?
20:56 < ciupicri> I'm getting this error http://fpaste.org/HSUV/ on Fedora 17 x86_64 when running make test after building v0.8.16
20:56 < db42> i hate writing tons of bipolare if (err) code all over the place...
20:56 < zomg> Use monads. Oh wait, wrong language.
20:56 < zomg> =)
20:57 < db42> also, has there any work on trying to do in node.js something like C# 5's "async" keyword ?
20:57 < zomg> What does it do?
20:57 < CoverSlide> db42: tamejs
20:57 < db42> you code async code, but in sync mode
20:57 < rhdoenges> Isn't it like a promise
20:58 < zomg> db42: I think there's some node precompiler which does sort of like that
20:58 < db42> the compiler behind the scene splits the code into async functions and passes arguments / return values / exception the correct way
20:59 < db42> ok, what about the bipolare code for handling err ?
20:59 < zomg> I wonder what was it called...
20:59 < db42> i want to do 3 async functions, and if they fail, do one error handler for them all
20:59 < zomg> db42: use something like the async library
20:59 < CoverSlide> db42: then you may want to use a promise
20:59 < CoverSlide> db42: https://github.com/kriskowal/q
21:00 < zomg> Yeah promises or async or whatever
21:00 < zomg> they both do the same but in a bit differing ways :)
21:00 < CoverSlide> right
21:00 < BlakeRG> ok, i figured out my problem. The node JS docs example shows a file and a callback for fs.readFile(). I had to add the encoding parameter to make it work or else i get that buffer.. is that a documentation problem?
21:01 < db42> hmm? k will look @ them both
21:01 < db42> q looks cool
21:01 < CoverSlide> one thing you do need to know is that with javascript you won't be able to "return" from an async function. no library can do that for you
21:02 < PigDude> node.js -- let's create as many single-letter libraries as possible!
21:02 < CoverSlide> these libraries can only make callbacks easier to deal with
21:02 < db42> yeah? unless it had some "async" magic :)
21:02 <@Nexxy> PigDude, 26.
21:02 < db42> in https://github.com/kriskowal/q example on the front page, where are value 1 to 3
21:02 < CoverSlide> db42: no, that's a feature of the language. it won't happen. you will need a callback function somewhere
21:02 < PigDude> Nexxy, ooh i'm creating my "26" package
21:02 < PigDude> Nexxy, take all the latin letters!
21:02 < CoverSlide> Nexxy: haha
21:03 <@Nexxy> will it be a bundle of all the single letter packages?
21:03 < CoverSlide> PigDude: actually, you may find they are all taken
21:03 < zomg> db42: I think this was the library which sort of did what async does in C# https://github.com/Sage/streamlinejs
21:03 <@Nexxy> nom install twenty-six
21:03 < zomg> Sort of.
21:03 < substack> ☃
21:03 < PigDude> nom nom nom
21:03 <@Nexxy> is that a durian?
21:03 < CoverSlide> substack: forever alone guy?
21:03 <@Nexxy> it looks like a durian
21:04 < PigDude> i'm going to guess it's a snowman
21:04 < db42> any1 care to look at the Q library example ? where is value 1 till 3 ??
21:04 < db42> are they acceicable from the step 4 function ?
21:04 < CoverSlide> http://ilovereachingmilestones.files.wordpress.com/2011/08/forever-alone.jpg?w=839
21:04 < harrisonm> Yeah it's a snowman
21:04 < CoverSlide> i guess it's turned the other way
21:04 < CoverSlide> forever alone snowman?
21:05 < terinjokes> CoverSlide: forever aloneman?
21:05 < PigDude> unless you're in a very cold place, there's no forever snowman
21:05 < PigDude> snowmen live in the moment
21:05 < PigDude> and for the moment!
21:05 < PigDude> ain't no party like a snowman party
21:05 < harrisonm> There's not enough crying for it to be a foreveraloneman
21:06 < harrisonm> Can snowmen cry?
21:06 < harrisonm> do they cry snow?
21:06 < PigDude> when it gets hot they do
21:06 < harrisonm> fair enough
21:09 < db42> i'm looking for something i can easily do: dofunc(funca, funcb, funcc).with(outputa, outputb, outputc).iferror(err)
21:09 < CoverSlide> db42: look into q or async.
21:10 < CoverSlide> db42: if they don't do what you want, then you probably will have to write your own
21:11 < db42> cool, asyncs seem to be able to do it
21:11 < db42> tryin gnow
21:12 < db42> all this "low-level" is so funny to be needing to find a lib which does it (and there are too many)
21:13 < db42> how do i pass to async.series a function with a signature(input, cb) and not signature(cb) ?
21:14 < db42> if i input signature(input) i guess it wont work ?
21:14 < db42> do i need to do what is called currying ?
21:14 < chrisjaure> async has an apply helper func that will do that
21:15 < chrisjaure> or you can bind
21:16 < db42> nice
21:16 < schofld> hi
21:16 < schofld> what do i have to do to get https://github.com/mdomi/node-static-dev-server to run 
21:16 < schofld> i am missing something 
21:17 < schofld> i am looking for a simple dev server to just test and edit some html 
21:17 < rhdoenges> does it need to be node.js? all you're doing is hosting html
21:17 < schofld> any ideas
21:17 < schofld> no it doesn't 
21:17 < schofld> just would be nice
21:18 < schofld> i used to use some simple server in ruby but have forgotten waht it was called and can't remember how use it:)
21:18 < rhdoenges> python2 -m SimpleHTTPServer works fine
21:18 < rhdoenges> comes by default w/ python 2. run it in the directory you want to server
21:19 < schofld> k will have to check what version of python i have
21:19 < rhdoenges> (don't use for public-facing websites, of course)
21:20 < db42> node.js needs an "SimpleHTTPServer" as well :)
21:20 < db42> how / when is something decided to be including in the core package ?
21:20 < schofld> db42: thought this could be it https://github.com/mdomi/node-static-dev-server
21:20 < jocafa> Haha I have a .zshrc alias for that
21:21 < schofld> git python version 2.5.4 
21:21 < schofld> got*
21:21 < jocafa> alias servethis=python -m SimpleHTTPServer 8888
21:21 < Iszak> How do people log node.js output when using monit?
21:23 < CoverSlide> schofld: I keep this in my bin folder: http://sprunge.us/bfGK
21:23 < CoverSlide> although I've recently switched to using node-static which has a cli
21:24 < schofld> CoverSlide: node-static ?? 
21:24 < db42> static typing in node ?!?
21:24 < db42> :)
21:24 < CoverSlide> schofld: https://github.com/cloudhead/node-static
21:24 < schofld> by cloudhead
21:24 < db42> tnx for the async tips, r0x !
21:24 < schofld> just what i discovored 
21:26 < db42> in async, in the cb for an async.series, instead of function (err, results), can i do function (err, res1, res2, res3) and it will auto expand them ?
21:26 < schofld> going to try node-static (though the python solution was good enough)
21:26 < db42> i hate typing results[0].append(results[1]), etc....
21:26 < zomg> db42: iirc no, I wrote a custom version of some of the async funcs because of that :)
21:26 < db42> heh
21:26 < exit2> I wrote this view method http://dpaste.com/848808/ and when ever it's called to the browser sticks and doesn't process the redirect.  If I cancel it and refresh manually the method works and deletes the post.  Does anyone know why this it?
21:26 < db42> is it npmed ?
21:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:27 < schofld> does everyone else have to run npm as sudo (root/admin)
21:27 < zomg> db42: no and I forgot where I put it :P
21:27 < schofld> i have to ?? is this wrong ? 
21:27 < zomg> db42: it's not too tricky to do it though and it's good practice for fiddling with async stuff =)
21:28 < db42> schofld, for port less than 1024 ?
21:28 < schofld> no when i install 
21:28 < zomg> schofld: it shouldn't require root access unless you're in a directory where your own user has no access
21:29 < schofld> hum maybe i am... i am running on a mac
21:29 < db42> zomg, guess i'll be using async with results[0].results[1] for now :)
21:30 < schofld> $sudo npm install -g node-static    >>> is what works for me... no problems just thought that sudo shouldn't be necessary 
21:30 < db42> question, when handling an error in node.js
21:30 < db42> is if (err) cb(err); enough
21:30 < zomg> schofld: ah maybe the -g flag requires it
21:30 < db42> or should i do if (err) { cb(err); return; }
21:30 < db42> ?
21:30 < schofld> i can then run without sudo
21:30 < schofld> -g >>> for global 
21:30 < purr> schofld: Center for Global Development (CGD) <http://www.cgdev.org/>
21:31 < zomg> schofld: does it work if you run without -g?
21:31 < schofld> maybe it would 
21:31 < zomg> yeah usually libs aren't installed globally when using npm
21:31 < zomg> only those which have some executables of their own
21:31 < schofld> aah right
21:32 < schofld> node-static is exactly what i was looking for 
21:32 < schofld> just can't understand why i coldnt find this myself
21:32 < db42> so it is useless to return on err ? 
21:32 < CoverSlide> schofld: you can have npm point to your home directory for global installs if you do `echo prefix = $HOME > ~/.npmrc`
21:33 < CoverSlide> schofld: then all you have to do is have $HOME/bin in your $PATH
21:33 < schofld> now all i do is type 'static' and the can dev my html and javascript easily 
21:33 < CoverSlide> it's what I do
21:33 < zomg> schofld: I was lazy and just set up apache to server a dir under my node app :P
21:33 < schofld> CoverSlide: i think i read something about this a while back sound's familiar 
21:34 < schofld> zomg: node-static is a breeze 
21:34 < CoverSlide> yes, i always recommend to dev inside their $HOME directory instead of system-wide
21:35 < schofld> always want to keep to node now... i think all the other shit is going to die out. i have had a great time dev with node.js 
21:35 < Industrial> Say I want a Stream that under the hood has an input stream and an output stream, can I make it so that if I pipe a 'regular' stream into this stream, it would pipe it into the input stream, and when piping from this Stream, it would be piping from the output stream?
21:35 < CoverSlide> i've once tried to set up apache, mysql, mongo, and couch to run locally. that was an exercise in futility
21:35 < Industrial> Right Now I'm using in() and out() methods to return streams ..
21:35 < CoverSlide> I wish I still had those config files, but I wiped them all when cleaning up some directories
21:35 < CoverSlide> redis though is dead simple to have run locally
21:36 < schofld> i have wiped a lot of my old shit to... and the rest i just cannot find 
21:37 < schofld> seriously cannot remember how to do things i did 1year ago :D
21:37 < schofld> actually maybe only 6monthis 
21:39 < schofld> thanks guys for all your kind help
21:40 < db42> new humble bundle out, yey
21:40 < db42> CoverSlide, can you shime in on the err issue ?
21:44 < Draggor> konobi: How do I make it use an openssl with aes-256-cbc?
21:56 < Draggor> Oh, I was using an older flag, let's try --shared-openssl
21:58 < woopwoop> what's the eqivilent of frontend js indexOf in nodejs? 
21:58 < astropirate> indexOf()  o_O
21:58 < woopwoop> like  function(data) { if (data.stringOf('test') >= -1) { res.send("available")
21:59 < woopwoop> lol
21:59 < woopwoop> bad typo
21:59 < woopwoop> thanks
22:00 < astropirate> :|
22:01 < db42> is there a reason ever to do if (err) { cb(err); return; } ?
22:02 < styol> db42: another option is if (err) return cb(err); and the reason why you might want to return is so that the function returns right there as opposed to continuing its present operation.. suppose it depends on how you'd like it to work
22:03 < styol> db42: another thing to consider is throw err; and return cb(new Error('Descriptive error'));
22:06 < astropirate> Hello nodelings 
22:08 < CoverSlide> db42: almost all my callbacks start with if(err) return cb(err)
22:10 < db42> didn't think about combining return with calling cb, thanks
22:10 < db42> how is the node.js book industry ? is it still time to write a beginner books ? :)
22:10 < CoverSlide> there's several node books out now
22:11 < CoverSlide> db42: http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&field-keywords=nodejs&sprefix=nodej%2Caps&rh=i%3Aaps%2Ck%3Anodejs
22:11 < db42> dang
22:12 < db42> is there a convention on how i should put my own stuff in a "req" middleware to not conflict with others ?
22:14 < CoverSlide> not really. 
22:15 < CoverSlide> just be sensible, not too generic
22:18 < sl00> Hi. I just created a test app with nodejs/mongodb to try different ways to get a group count on the different values of a key. Quickest is (to my surprise) distinct+count at ~500ms for 100000 documents (if I have an index). IMO it (group, aggregate and distinct+count) is very slow and I wonder if that is normal?
22:18 < murvin> hi
22:18 < wjen> so is there a recommended book? or even a recommended direction, should one start with node from a js for dummies perspective? 
22:18 < wjen> i saw these: http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&field-keywords=nodejs&sprefix=nodej%2Caps&rh=i%3Aaps%2Ck%3Anodejs
22:19 < murvin> anyone knows if there is a js lib taking sound stream input from client (web browser), and send back to Server for analysis?
22:19 < CoverSlide> wjen: Node Beginner book would be a good start for beginners
22:19 < CoverSlide> wjen: Smashing Node.js is a good one too, but a bit more advances
22:19 < CoverSlide> *d
22:19 < wjen> @coverslide oh i went through that, it was on his website right? 
22:20 < murvin> wjen: u don't need a book.   Go to nodejs website, tehre are some resources.   look to the nodetut   or other online tutorial.  take you half day to learn.   remember, you gotta learn how to use modules,  especially Express. it will make your life easier
22:21 < wjen> murvin: i was trying to look at the socket.io examples and see if i understood anything. i'll checkout the node.js site. because i went through the www.nodebeginner.org/ and left feeling a little in the dark still. 
22:23 < murvin> wjen:   look into npmjs.org    and look into socket.io  https://npmjs.org/package/socket.io      follow the example, and you will learn
22:23 < db42> what is a good routing middleware for express ?
22:24 < CoverSlide> db42: express has its own router, it's pretty decent
22:24 < db42> murvin, cool, didn't know about npmjs.org
22:24 < wjen> murvin: thanks! 
22:24 < db42> CoverSlide, ok, will look into it
22:25 < db42> i first try to do everything solo, then when i understand the gist, i go figure something to do it auto fo rme
22:26 < murvin> for node.js,  I don't recommend anyone just code with native node.js code without using any module.  that will make yourself miserable.   So, using npm (modules) is very important and make your code much simpler
22:26 < chapel> murvin: depends on your goal
22:26 < db42> ohh, qpp.pq4qm lookw dool
22:27 < chilts> also depends on what you already know and what modules you know about :)
22:27 < chapel> if you are trying to learn node.js but are good at javascript, I think its a great way to go
22:27 < db42> murvin, i know about npm and use it, just didn't know about the site with the snippets
22:27 < murvin> some modules I think are important:  underscore, express, node-inspector
22:27 < CoverSlide> underscore is not important
22:27 < nerph> Using Jade -> I need to loop over a json object and get the objects string and value… {"phone":{"mobile":"000-000-0000","work":"111-111-1111","home":"222-222-2222"} - how do you get those two values?
22:27 < chapel> it lets you figure out what modules you want and why, versus just picking one and assuming its the right one
22:27 < db42> CoverSlide, it seems to be hidden in the site itself (Documentation-wise)
22:27 < chapel> most of underscore is native to js
22:27 < chapel> and the things that aren't are easy to do by hand
22:27 < nerph> each phone in user[0].custom_fields.phone
22:27 < murvin> chapel:  yes.. but for most people using npm is essential.  unless you are advance expert creating a base module....
22:28 < chapel> again, learn how to do it yourself, or learn how others do it, don't just use it without knowing why
22:28 < murvin> db42: oh i see. ya.. 
22:28 < chapel> murvin: Im not saying ignore npm
22:28 < murvin> ok.. np  got ya
22:28 < db42> app.routes, k
22:28 < chapel> I like express and use it primarily
22:29 < murvin> anyway.. so, i have a question.  Is there a way to take audio input from web and stream to node server for sound analysis....?
22:29 < chapel> but I also know how to use node.js core modules to do the same thing
22:29 < chapel> I've also read most of the express codebase
22:29 < CoverSlide> app.routes is the router middleware, use app.get, app.put, app.post, etc to add routes to the middleware
22:30 < db42> ahh, so thats what you meant by it's got a decent one
22:30 < wjen> murvin: you're better off making use of chrome's experimental in browser analysis : : http://chromium.googlecode.com/svn/trunk/samples/audio/index.html
22:30 < db42> well, atleast i discovered app.params and friends
22:30 < murvin> wjen:  cool.   let me take a look.   
22:30 < murvin> thanks
22:32 < db42> CoverSlide, how do i tell app.get to parse a url like 'add_user/<user_id>/to_user/<user_id>" in such a way that app.params can auto parse the user ids
22:32 < CoverSlide> app.get('add_user/:user_id/to_user/:user_id', function(){...})
22:33 < CoverSlide> er, well probably should be post or put
22:33 < db42> yeh post
22:33 < db42> how does it diff between the first and second user_id if it's the same : ?
22:33 < sayd> is there a way to basically to a npm show .
22:33 < chapel> app.get('/add_user/:user_id/to_user/:to_user')
22:33 < CoverSlide> ah yeah that would be better
22:33 < chapel> db42: you can name them anything
22:33 < sayd> cat package.json seems wrong
22:33 < db42> cool, thanks !
22:34 < chapel> sayd: npm ls
22:34 < sayd> chapel: ok, but that doesnt show me any metadata
22:34 < chapel> what kind of metadata?
22:34 < CoverSlide> sayd: any of the metadata that npm uses is in the package.json
22:34 < sayd> chapel: yeah like the dependencies and such
22:34 < CoverSlide> you can publish the module and then npm view <module-name>
22:35 < sayd> authors
22:35 < sayd> so i guess i just vim package.json 
22:35 < db42> can i somehow use app.params or an app.post to parse me vars from the POST data, not from the URL itself ?
22:35 < chapel> db42: you should use post or put for adding users though
22:35 < db42> chapel, ofc
22:36 < db42> but can i pass the user params in the post request itself ?
22:36 < chapel> if you posting or putting there is app.body
22:36 < chapel> which is the body from the request
22:36 < db42> and then i need to manually parse it out (like i can't have app.param auto fill it) ?
22:36 < chapel> auto fill?
22:36 < CoverSlide> sayd: if it's your package it's whatever's in your ~/.npmrc file. if it's not, npm show <module-name> will give that info
22:36 < chapel> what is sent in the body is made into an object
22:36 < chapel> or whatever
22:37 < db42> chapel, you meant req.body, yeah ? or is there app.body as well ?
22:37 < CoverSlide> req.body
22:37 < chapel> yeah sorry
22:37 < CoverSlide> the body is per-request
22:38 < CoverSlide> but to parse the body there is the bodyParser middleware
22:39 < owen1> how to check if my node binary has ssl support built-in?
22:40 < wjen> so if node is based on an event model, how can it easily run everything concurrently? 
22:40 < owen1> or is it automatic (0.8.15 on a mac)
22:40 <@mbalho> wjen: http://nikhilm.github.com/uvbook/
22:41 < mscdex> owen1: you can at least check process.versions.openssl or check if require('crypto') throws
22:41 < db42> wjen, it doesn't run concurrently, it just uses the dead periods when one task is doing I/O (disk, network, etc?.) to proecss another task
22:41 < wjen> mbalho: from the horses mouth :) thanks
22:42 < db42> dead periods of the CPU that is
22:43 < wjen> db42: so if i was running a feed of data from twitter and it was a really popular event that i was pulling in, getting tweets at an irrational speed, and i was also say, playing pong between myself and someone in thailand … would i have to make any special architecture decisions to run those two processes ?  
22:44 < db42> wjen, both from the same node.js process ?
22:45 < db42> ohh, two processes, not sure what you are saying there
22:45 < wjen> i guess that is what i need to learn. 
22:45 <@mbalho> wjen: that sounds like a good example use case for node
22:45 < db42> if you have one core, and a few processes using it, they will battle for it's usage
22:46 < wjen> db42: so is there a priority i can give some? like say i don't care if there is a lag with the twitter stream but i want the pong game to always keep it's process 
22:46 < substack> just use multiple processes
22:46 < db42> wjen, yeah, altough thats an OS thing, and not a node related question
22:47 < db42> i.e. if you have 2 procsses battling on cpu usage, there will be a fight regardless of which stack you use
22:47 < Draggor> is node's base64 url safe?
22:47 <@mbalho> wjen didnt describe to processes but rather 2 separate async tasks
22:47 < substack> wjen: man nice
22:47 <@mbalho> (for the record)
22:47 < db42> mbalho, he said "to run those two processes"
22:47 <@mbalho> db42: you take things too literally :)
22:48 < tpayne> Is there a way to tell node to show requests that are going on (including post data) in the console.log?
22:48 < db42> mbalho, :)
22:48 < CoverSlide> tpayne: write a logger
22:48 <@mbalho> tpayne: req.pipe(process.stdout)
22:48 < tpayne> mbalho: where should i stick that?
22:48 < wjen> db42: so if that was on a stack then conceivably i'd have to figure out how i should set that up. maybe i should use a load balancer? or put each of those processes on a different stack? 
22:49 <@mbalho> tpayne: wherever your requests get handled
22:49 < tpayne> this is for outgoing requests
22:49 < db42> wjen, sorry, we are getting confused here, maybe someone else can explain it better :)
22:49 <@mbalho> tpayne: so http server responses? you would just pipe the http response to stdout instead
22:49 < wjen> ah nah i kinda understand
22:49 < wjen> i appreciate it. 
22:51 < tpayne> hmm ok i'll figure it out, i thought perhaps there was some really low level place that could turn on something similar to a access log
22:55 < sayd> do you put md5 of your package in your package.json?
22:56 < misterhat> does node support typed arrays?
22:56 <@mbalho> misterhat: nope but it has Buffers which do the same stuff
22:57 < mscdex> node has typed arrays
22:57 < mscdex> but Buffers are more common
22:57 < misterhat> where's typed array documentation
22:58 < misterhat> or how can i use them?
22:58 < mscdex> afaik it's the same as in the browser
22:58 < misterhat> oh
22:59 < misterhat> yeah i don't see how they would be different from buffer then
22:59 < mscdex> i think there is even a way to go from Buffer to typed array or the other way
22:59 < mscdex> Buffer offers similar, if not more, functionality
22:59 < misterhat> yeah seems that way
23:03 < owen1> mscdex: thanks
23:07 < TooTallNate> misterhat: they're very similar… Buffers are slightly faster since they don't have to be 0-filled upon creation
23:07 < TooTallNate> misterhat: but a cool fact is that you can create typed array views on top of node Buffer instances
23:07 <@mbalho> has anyone seen a module that can buffer a http server request? like https://npmjs.org/package/pause-stream but also has to preserve the req object itself
23:07 < misterhat> TooTallNate: very neat 
23:08 < TooTallNate> mbalho: streams2?
23:08 < TooTallNate> haha
23:08 <@mbalho> ya srsly
23:08 <@mbalho> i should just upgrade!
23:08 < TooTallNate> mbalho: hmm… even readable-stream's .wrap() will return a new object
23:08 < TooTallNate> which is not what you want
23:09 < deoxxa> sayd: how would you do that?
23:09 <@mbalho> TooTallNate: maybe i could use the same req object but reset the stream?
23:10 < TooTallNate> mbalho: what are you trying to do exactly? reusing a stream seems weird to me
23:11 <@mbalho> TooTallNate: http.createServer(function(req, res){ getUserSession(req, res, function(err, session) { // now do other stuff with req } )})
23:12 <@mbalho> TooTallNate: so i have to buffer req until getUserSession fires but i want req to look and act the same then as it does initially so that i can use other functions that expect (req, res)
23:12 < TooTallNate> gotcha
23:13 < TooTallNate> ya so it sounds like you want a pause-resume kinda thing that does hot-patching
23:13 < TooTallNate> rather than creating a new object
23:13 <@mbalho> either way is cool with me
23:13 <@mbalho> a function that clones a request objects metadata and lets me pipe new data into it wouldb ecool
23:14 < TooTallNate> sounds like pause-resume or readable.wrap() + copying the metadata manually is your option
23:14 <@mbalho> pausedStream.pipe(SimulateNewRequestObjectFromOldRequestObject(req))
23:14 < TooTallNate> this *is* one of those cases that streams2 was designed to solve
23:15 <@mbalho> i got mikeal to add a thing to request for this same thing but a proxy use case https://github.com/mikeal/request/blob/master/main.js#L716
23:15 <@mbalho> isaacs: maybe you know how to do this elegantly?
23:15 <@mbalho> ps anyone in oakland wanna get burritos
23:15 < AAA_awright> It's not immediately obvious how I'm supposed to get require('modulename') with browserify
23:16 < AAA_awright> Anyone know?
23:16 < MI6> joyent/libuv: isaacs created tag node-v0.8.16 - http://git.io/LWCj3g
23:16 < AAA_awright> I thought browserify should detect the require and include it with the outputted file, but it's not
23:17 <@mbalho> AAA_awright: step 1) browserify -r events -o file.js. step 2) load file.js in a script tag in your page. step 3) require('events')
23:17 < AAA_awright> mbalho: I get a "cannot find module" but it's sitting right there in node_modules like a good little module
23:18 < substack> mbalho: paste the command you're running
23:19 < substack> mbalho: people should probably stop using -r
23:19 <@mbalho> substack: i dont have a bug
23:19 <@mbalho> substack: its AAA_awright 
23:19 < substack> yes but
23:19 < substack> mbalho: -r is really at odds with how the new browserify will need to work
23:19 < substack> it will be messy
23:20 < AAA_awright> substack: I was using -e but that throws no error at command-time
23:20 < AAA_awright> At browser-time it says the module can't be found
23:20 <@mbalho> substack: new browserify wont let you require on the client?
23:20 < AAA_awright> node_modules/browserify/bin/cli.js -e app.js -o app.browser.js
23:20 < acidjazz> i love jade and stylus but i need the PHPs
23:20 < acidjazz> wheres the jade+stylus php project
23:21 < kenperkins> say I'm developing two npm packages at the same time, and one depends on the other. Is there a way to setup the package.json to have a dependency of ../somefolder ?
23:21 <@mbalho> kenperkins: develop from inside a node_modules folder and you can just use the package name to require
23:22 < kenperkins> mbalho: as in git clone into the node_modules of one of them
23:22 < kenperkins> not sure why I didn't think of that
23:23 < db42> if i have a script. block in jade
23:23 < AAA_awright> substack: My impression is that -r is for being able to require('package') from outside the compiled script, right? I'd keep that
23:23 < db42> can i put jade #{stuff} inside the script. block and it will parse it ?
23:24 < CoverSlide> db42: try it
23:28 < db42> k, tnx, night
23:31 < AAA_awright> substack, any other browserify wizards?
23:32 < curious111> This is my frist project that uses node.js. I usually write python backend code and js/html/css for frontend. In this case, do i use npm local installs and put it in a makefile that pulls the code? or whats the correct way to do this?
23:33 < Leeol> Wtf, i have two accounts on npm 
23:33 < Leeol> Projects on each account, and i can't access the 2nd account /mindblown
23:33 < curious111> I use mercurial and read that i should use npm install and checkin the npm pulled code in the repo. Any suggestions on how to set this up
23:34 < AAA_awright> curious111: Ew no
23:34 < Salve> I'm having a namespace problem when I run all my mocha tests together. Here is what my Makefile looks like http://pastie.org/5555014  It just runs all the tests with a simple command: make tests
23:34 < curious111> AAA_awright: how do i do this then?
23:34 < Salve> Anyone else have this problem?
23:34 < AAA_awright> curious111: Setting dependencies in package.json is sufficent
23:34 < AAA_awright> curious111: Using e.g. git submodules would be the best
23:35 < AAA_awright> curious111: npm can lock your dependencies at a certain version if you want that functionality
23:35 < curious111> AAA_awright: I currently have a web directory that has css/ js/ html/ directories
23:35 < tjholowaychuk> Salve https://github.com/component/enumerable/blob/master/Makefile#L11
23:35 < tjholowaychuk> i usually do something like that
23:35 < tjholowaychuk> use ./node_modules/.bin/mocha
23:35 < tjholowaychuk> instead
23:36 < Salve> tjholowaychuk: Awesome thanks!
23:36 < AAA_awright> Salve: In the top of the make file define MOCHA=./node_modules/.bin/mocha, and then use $(MOCHA)
23:36 < curious111> AAA_awright: any writeups i should read? I did read the npm faq
23:36 < Leeol> Anyone know if there is anyone you can talk to to correct npmjs.org bugs/errors? I'm not sure if the server bugged out, or if i broke something a long time ago, but i have two usernames on npmjs with packages on each. My email is the username for one, and the email for the other.. 
23:36 < AAA_awright> Salve: That way people can set their own environemnt variable if they want to use their own
23:37 < Salve> AAA_awright: perfect. Thanks everyone!
23:37 < AAA_awright> er, wait, that's tjholowaychuk's file, but same suggestion goes to Salve
23:38 < curious111> AAA_awright: when one develops, do they get jquery using npm and then check it in? or jquery code is never checked in the codebase? If I want jquery to be installed in project/web/js/libs/jquery -- that is how i do it now -- is that something npm can help with? 
23:39 < AAA_awright> jquery is... strange. I suppose someone has a jquery package you can use.
23:39 < AAA_awright> curious111: Usually I just use a hosted version of jQuery off Google's servers
23:39 < Leeol> isaacs: Ping?
23:39 <@isaacs> Leeol: pong
23:39 < justinabrahms> hey folks. npm question. If I execute `npm install .`, how do I get that to NOT install the devDependencies?
23:40 <@isaacs> justinabrahms: npm install --production
23:40 < justinabrahms> ty!
23:40 <@isaacs> justinabrahms: np
23:40 < Leeol> isaacs: Is there any known issue with accounts "splitting"? I seem to have one account on npmjs.org with my username, and another account with my email. To make matters worse, my original password contained a now invalid character (!), and the same email is used for both accounts
23:41 < Leeol> "with my username and with my email", i mean my username is being used as a username on one account, and another account is using my email as the username as well. I am unable to gain access to that username account though, https://github.com/isaacs/npm-www/issues/215
23:43 <@isaacs> Leeol: so, that's odd
23:43 < Salve> Hrm,. I guess I got a little over excited there. The updates I made to my Makefile didn't help me with the problem at all
23:43 < curious111> AAA_awright: what about bootstrap or css frameworks? I currently pull it out and put it in project/web
23:44 <@isaacs> Leeol: i'd suggest using the password reset dance on the "good username" one
23:44 < Leeol> isaacs: No kidding right? I can't even explain it :s
23:44 <@isaacs> Leeol: that *should* have been impossible, but for a while it wasn't, so you snuck in :)
23:44 < Leeol> isaacs: Already did, i have access to the good one, but i have 3 projects stranded on the "back" account
23:44 <@isaacs> Leeol: i see.
23:44 < Leeol> bad*
23:44 <@isaacs> what's that one called?
23:44 < AAA_awright> curious111: That boilerplace stuff is meant to  be forked and modified...
23:44 <@isaacs> or, what are the projects?
23:45 < curious111> AAA_awright: perfect
23:47 < curious111> AAA_awright: perfect. What about if i want mocha in my project? Just git clone it in web/js or should i install it using npm?
23:48 < AAA_awright> curious111: Add it to dev dependencies, I wouldn't check it for the same reason I wouldn't check gcc into my project, heh, since people often have it installed to their system path. 
23:48 < AAA_awright> *devDependencies
23:49 < curious111> AAA_awright: My backend is in python that picks up the web directory and renders it on the client browser. Doesnt mocha run on the client, which means it has to be on project/web?
23:49 < tjholowaychuk> curious111 mocha has an "init" command to bootstrap some basic stuff
23:49 < tjholowaychuk> $ mocha init test
23:49 < tjholowaychuk> etc
23:49 < AAA_awright> curious111: Well actually it depends what you're using mocha for, if it's server-side tests or if you want to include it in the web browser
23:49 < AAA_awright> I forgot about the latter possibility
23:50 < curious111> I want to run some tests in the browser
23:50 < curious111> so mostly looking for js framework that can test js/html/css on the client browser
23:50 < AAA_awright> add it to dependencies and do whatever it requires to include that code
23:50 < curious111> any other suggestions that i could use?
23:50 < AAA_awright> If the npm package of mocha lets you do that
23:50 < tjholowaychuk> curious111 it works in the browser
23:51 < AAA_awright> Now where'd substack go, he seemed like he was going to answer a browserify question...
23:51 < substack> AAA_awright: that's not a question
23:52 < AAA_awright> substack: It looks too obvious to be a bug
23:52 < curious111> tjholowaychuk: so the server has to embed and serve mocha to the client browser, right? Which brings me back to the main question i started with. If I wast to use npm to install mocha in project/web somehow, so that my server code and pick it up and render it, what is the correct way of using npm in this case?
23:52 < tjholowaychuk> curious111c no
23:52 < tjholowaychuk> it has nothing to do with npm or node
23:52 < tjholowaychuk> on the client
23:52 < tjholowaychuk> rails people use it etc
23:53 < AAA_awright> substack: I didn't ping you initially, but then you asked what command line I was using. That looks correct, yes?
23:53 < curious111> tjholowaychuk: one way i can do this is by git cloning mocha in my project/web directory and serving it using my server code. 
23:53 < AAA_awright> $ node_modules/browserify/bin/cli.js -e app.js -o app.browser.js
23:53 < tjholowaychuk> curious111 yeah however the html gets to the browser is up to you, whatever you like
23:53 < tjholowaychuk> as long as mocha.{js,css} get in there it'll work
23:53 < AAA_awright> It won't build in even ./file.js references
23:54 < curious111> tjholowaychuk: I understand. Now can I use npm to get the mocha.css/js in project/web directory instead of git cloning or wgetting it?
23:54 < substack> AAA_awright: what version of browserify?
23:54 < jocafa> substack:  just saw your musical node modules on dailyjs… ever play with ChucK?
23:54 < tjholowaychuk> curious111 you should be able to, i didnt add the build files to .npmignore
23:54 < substack> jocafa: no
23:54 < curious111> tjholowaychuk: what is the recommended way of getting these things to a project
23:54 < substack> and I dislike most audio software
23:55 < AAA_awright> substack: 1.9.4
23:55 < AAA_awright> I don't think it requires any building?
23:55 < jocafa> i don't *like* it myself, but it's certainly an interesting project: http://chuck.cs.princeton.edu/
23:56 < jocafa> just thought you may be interested :)
23:56 < curious111> tjholowaychuk: what do you use at the server end?
23:58 < tjholowaychuk> curious111 I usually submodule it into ./test but the funky to ../node_modules/mocha/ would be fine too
23:58 < substack> jocafa: they invented their own language >_<
23:58 < substack> why do people do that
23:58 < jocafa> yes. yes they did. and it's fairly painful
23:58 < tjholowaychuk> haha dsls are all fun an games until they suck
23:58 < tjholowaychuk>  </monit>
23:58 < jocafa> but!  it's kinda neat.
23:59 < substack> I just want to return a value between -1 and 1, inclusive
23:59 < substack> you can do everything once you've got the time and can just return an amplitude
23:59 < substack> it's easy at that point
--- Log closed Thu Dec 20 00:00:01 2012
