--- Log opened Fri Mar 29 00:00:41 2013
00:05 < node123> Hello I'm a little confused about callbacks. Can someone help me?
00:05 < node123> Here's my code: http://hastebin.com/kurukowavo.coffee
00:06 < node123> I don't want to call fs.readdir until the request in line 10 is finished. Where can I put the code to wait for that callback?
00:06 < ningu> this must be callback week
00:06 < ningu> actually, at node, every week is callback week
00:06 < node123> do I have to add a function after request in line 10?
00:07 < node123> If it's not a simple question don't worry about it
00:07 < ningu> node123: is request() not an async method then?
00:08 < node123> https://github.com/voxpelli/node-request
00:08 < node123> I think it is async
00:08 < ningu> oh, it's mikeal's request, ok
00:08 < ningu> I wasn't sure
00:08 < CoverSlide> you have to listen on the end event of the requiest object, and in the listener do your fs.readdir stuff
00:09 < ningu> yes, what he said :)
00:15 < kenperkins> https://github.com/mikeal/request fyi node123 
00:15 < kenperkins> is the definitive request module
00:16 < node123> Oh yeah thats actually what I'm using
00:18 < ningu> timers: fix off-by-one ms error
00:18 < ningu> good to know they're that accurate :P
00:22 < JohnMcLear> Coverslide sitll no luck with 0.10.1 etherpad still hangs after first http request
00:23 < Cainus> hey all... anyone have a favourite of way of talking to postgres (other than the low-level driver)?
00:25 < node123> Ok thanks for the help. I got my request eventListener working.. now I can't see where to put archive.finalize
00:25 < node123> http://hastebin.com/fotigabama.coffee
00:26 < node123> Can I add an event listener to forEach in line 7?
00:27 < NodeNewb> any updated modules examples of using express+mongodb for session storage? everything I've found is outdated...
00:28 < NodeNewb> "modules *or examples"
00:29 < heath> https://gist.github.com/heath/5267890
00:29 < heath> ^ an attempt to install a package
00:29 < heath> ...and the resulting failure, hints?
00:29 < heath> for some reason testacular needs it
00:38 < WeeJeWel> Hey guys! I'm trying to create a SSL express3+socket.io server, but I have a certificate in .cer format. How would I use this (all examples use .pem + .key)?
00:39 < node123> How can I add a listener for the last cycle in a forEach loop?
00:39 < node123> Or is there a better way for me to do this?
00:39 < node123> http://hastebin.com/fotigabama.coffee
00:40 < ljharb> node123: ugh, can't read coffeescript. the second arg to the iterator is "index", and the third "arr", so you could compare that to the arr.length - 1
00:40 < bnoordhuis> WeeJeWel: you probably need to convert it to pem
00:40 < WeeJeWel> bnoordhuis: how? :p
00:40 < node123> not coffeescript
00:41 < niggler> ljharb hastebin guesses JS is coffee
00:41 < bnoordhuis> WeeJeWel: openssl x509 -inform der -in file.cer -out file.pem iirc
00:41 < ljharb> lol then hastebin is stupid
00:41 < niggler> http://hastebin.com/fotigabama.js
00:41 < node123> You're saying I do that check on every iteration?  And if true I emit something?
00:42 < ljharb> node123: that's one way
00:42 < WeeJeWel> bnoordhuis: i get an error; http://pastebin.com/T1rr83G1
00:42 < ljharb> node123: but since forEach is synchronous, you could also just emit something after the forEach is done
00:44 < bnoordhuis> WeeJeWel: no idea. maybe google knows
00:44 < node123> Yeah that's what I can't work out! I don't know where to emit
00:44 < wjw> google says the same command you gave me haha
00:44 < node123> Sorry if I'm missing something obvious
00:44 < wjw> my .cer file has only one section in it though - is that OK?
00:44 < ljharb> node123: line 15 and a half
00:45 < wjw> oh they're already ascii, so that command seems not to be nescessary
00:50 < node123> ljharb: I'm going to need a little more guidance. What do I append to line 15.5?  .emit("something")? Or .on("something")? Or something else??
00:51 < ljharb> node123: you said you wanted something to happen after the last forEach. between lines 15 and 16 is where you'd do that. i don't know what you're trying to achieve
00:51 < node123> Yes, I just want to run archive.finalize after the last forEach.
00:52 < ljharb> then just run it after?
00:52 < ljharb> ie run archive.finalize after line 15.
00:54 < JamesMGreene> Heeeeey TooTallNate isaacs ryah et al: can you tell me how Node.js can load native modules at runtime?
00:54 <@TooTallNate> JamesMGreene: see uv_dlopen()
00:54 < bnoordhuis> also magic pixie dust
00:54 <@TooTallNate> uv_dl*()
00:54 < JamesMGreene> TooTallNate: in libuv or its usage in Node.js core?
00:55 < node123> That's what I tried but it still prints to the console before any of my prints in forEach. So I don't think that works
00:55 <@TooTallNate> JamesMGreene: well both
00:55 < JamesMGreene> bnoordhuis: Oh, that makes more sense. Thanks!
00:55 <@TooTallNate> JamesMGreene: more context would be required :)
00:56 < JamesMGreene> TooTallNate: Basically I'm tinkering with implementing the same functionality for PhantomJS (Qt-based) but I'm not sure that it's [as] possible
00:59 < node123> ljharb: Here's what I have http://hastebin.com/ximaludogi.js line 19 still runs before line 11
01:00 < ljharb> node123: well sure, that anonymous function is async
01:00 < ljharb> if you want to do something after all of the anonymous functions you've fired from the forEach have finished, i suggest using promises
01:00 < node123> Ok I'll read into that
01:01 < ljharb> ie, var promises = data.posts.map(function (post) { … var p = new Promise(); request(function () { … p.resolve(); }); return p;); when(promises).then(doStuff)
01:01 < ljharb> something like that, depending on your promises library.
01:02 < node123> Ok cool thanks again
01:04 < ljharb> np
01:22 < aeberlin> With the `assert` module, how would one assert the opposite of something like `isUndefined`? e.g. I'm looking for something like `notUndefined` or `isDefined`, but I'm wondering if there's a general way to do this across all of the assertion tests? I tried !assert.isUndefined(), but, as I expected, that didn't work.
01:25 < node123> ljharb: do you recommend a specific promise module?
01:26 < ljharb> node123: i think i use "promises", but when.js is pretty good i hear
01:27 < SomeoneWeird> q
01:27 < niggler> aeberlin check for equal
01:27 < SomeoneWeird> aeberlin, asset.isUndefined(a != undefined)
01:27 < SomeoneWeird> niggler, damnit! 
01:27 < SomeoneWeird> :P
01:28  * niggler pets SomeoneWeird 
01:28 < SomeoneWeird> er
01:28 < niggler> actually it should be deepEqual
01:28 < niggler> because null == undefined but null !== undefined
01:28 < SomeoneWeird> asset.<whatever you use to check for true>(a != undefined);
01:28 < niggler> !==
01:29 < SomeoneWeird> ehh
01:29 < SomeoneWeird> yeah, i suppose
01:29 < aeberlin> Ahh, okay. I found the `should` library in the mean time which I'm now playing with.
01:29 < aeberlin> Should work nicely with vows ^_^
01:30 < aeberlin> thanks though
01:30  * niggler pets aeberlin 
01:34 < howdynihao> *should* work nicely with vows, get it? zing
01:35 < aeberlin> haha - somebody's used vows before.
01:35 < howdynihao> i never used it, i was just making a joke on the should module, should work nicely
01:36 < eo> ;;
01:36 < eo> um..
01:37 < aeberlin> lol. vows is nice, it does some things with the this context that mess with my usual metaprogrammey antics.
01:37 < aeberlin> more a feature than a bug, really, since it keeps you from messing with the vows internals too much :P
01:38 < ganzuul> :DD
01:38 < ganzuul> My first project of my very own!
01:38 < ganzuul> that isn't banging rocks together...
01:38 < ganzuul> https://github.com/ganzuul/JPEG-progressiveEnhance
01:39 < ganzuul>  // TO-DO make it work in the browser too
01:39 < niggler> ganzuul your copy is messed up
01:39 < niggler> "You should not see a flower. If not, your browser might still support binary websockets."
01:40 < niggler> lol ganzuul "ganzuul authored in a few seconds"
01:41 < ganzuul> That's technically correct. It creates many pictures each containing one jpeg scan right now.
01:43 < ganzuul> I need to make it contain the same number of images next, but with culmulative scans.
01:45 < ganzuul> ...oh
01:45 < ganzuul> forgot to change the url in index.html, come to think of it.
02:01 < fpsjosh01> I finally get a solution for tootallnate, and he's not even online lol
02:09 < fpsjosh01> I think I found the fix for jquery
02:09 < fpsjosh01> not working anyway
02:11 < fpsjosh01> npm install jquery fails if Setting the Path and Environment Variables for Command-Line Builds hasn't been done yet
02:11 < fpsjosh01> it's a simple batch file, and I have jquery running on 0.10.2
02:12 < fpsjosh01> >_>
02:14 < node123> ljharb: I did it without promises
02:14 < node123> http://hastebin.com/fafurisewe.js if you're interested
02:15 < fpsjosh01> node123, nice
02:17 < min|dvir|us> Does anyone use Jasmine?
02:17 < min|dvir|us> I can't get it to find any test files.
02:18 < StephenS> I node myself
02:19 < niggler> do you node yourself during the day StephenS or only at night?
02:21 < StephenS> only at half 'a daynight
02:21 < StephenS> GOT YA
02:22 < fpsjosh01> >> [].push("bazinga")
02:22 < purr> fpsjosh01: (number) 1
02:23 < ningu> the inscription on the temple at delphi: node thyself
02:26 < fpsjosh01> ningu, you mean nodelphi
02:27 < fpsjosh01> >> require("underscore")
02:27 < purr> fpsjosh01: ReferenceError: require is not defined
02:27 < fpsjosh01> well that would have been silly lol
02:37 < Guest22730> is anyone using this?
02:51 < OTBS4Life> Hey guys, anyone kinow how to get npm to install from a Github repo?
02:51 < OTBS4Life> npm install https://github.com/akoenig/winston.git isn't working.
02:52 < OTBS4Life> It says ERR! not a package
02:56 < OTBS4Life> Ahh, I needed npm install https://github.com/akoenig/winston/tarball/master
03:08 < ljharb> node123: nice. altho if you moved the "counter++; if (count==20) {}" code outside of the if/else block it'd run in both cases
03:11 < NodeNewb> Need opinion/best practice on a security design pattern...my site sets a secret-keyed cookie of a user's id (mongodb _id), and name/id are placed in session. Then I open a socket, passing the session to the socket...if the SERVER disconnects,the client keeps attempting to reconnect. Upon reconnect, it finds the cookie, re-queries the db and re-sets the session.
03:13 < Zolmeister> The way I do sessions is with mongodb, which stores the sessions persistently even if the server goes down
03:14 < Zolmeister> theres no need to re-auth on the socket connection
03:14 < Zolmeister> I think...
03:14 < jaha> NodeNewb: https://github.com/kcbanner/connect-mongo
03:15 < jaha> if youre using express/connect, but there are plenty of others also
03:15 < NodeNewb> but how would you do that in a socket?
03:16 < jaha> socket.io?
03:16 < Zolmeister> your talking about a writable api over socket?
03:16 < jaha> are you using ^^?
03:17 < NodeNewb> yes socket.io (with sessions-socket)
03:17 < jaha> there are some recent npms i think that handle tying in socket authentication to the connect sessions, there are also some blog posts i remember seeing when trying it in the past
03:17 < NodeNewb> jaha yeah, I read those...the problem is the syntax is either deprecated or incomplete for me to reverse engineer
03:18 < jaha> sry i dont know the specifics off the top of my head
03:18 < NodeNewb> plus, I'm using mongoose, which complicates using that npm
03:18 < NodeNewb> no, I appreciate the help
03:18 < jaha> i know i saw something recently that was supposed to wrapp all the confusion in a nice package (cant rememebr the name)
03:19 < Zolmeister> so, whats wrong with session-sockets? It seems like all you need to do is set the session store for it to be mongodb
03:21 < NodeNewb> jaha if you do remember, I'd love to find something nice and neat...this is becoming a real mess
03:22 < jaha> try refining your google searches by date (recent), might help weed out some of the older popular ones
03:23 < NodeNewb> Zolmeister -- not sure I understand how it works...if the server disconnects, and then the client reconnects, how does it know the user matches with the mongo-stored session?
03:23 < jaha> i could be crazy also ;)
03:24 < NodeNewb> yeah I learned to put (2012|2013) in all of my searches :)
03:24 < Zolmeister> have you tried it?
03:25 < NodeNewb> I did...but none of the examples use mongoose so it's hard for me to understand the syntax
03:26 -!- mode/#Node.js [+o Nexxy] by ChanServ
03:26 < NodeNewb> it seems most of them use the mongo native drivers as their example
03:27 < NodeNewb> I know I need to change this somehow to use the connect-mongo: sessionStore = new connect.middleware.session.MemoryStore()
03:27 < Zolmeister> NodeNewb: try this: https://github.com/bartt/connect-session-mongo
03:28 < NodeNewb> I saw that, but I get nervous when it says no updates in 2 years :) would it still work?
03:29 < Zolmeister> I use it, and it works fine for me
03:30 < NodeNewb> ok great, I'll give it a shot...and does it bridge the client to the server and restore the session?
03:30 < NodeNewb> I'm guessing via a cookie, similar to what I was going to do, so that will save some time
03:31 < Zolmeister> The session is persistent, no need to restore it, and yes the session is saved in the cookie
03:32 < Zolmeister> btw, there are a few forks of that repo that you may want to look at (if you run into issues)
03:34 < NodeNewb> Zolmeister how did you fix the "safe variable" warning?
03:35 < Zolmeister> Never encountered it
03:36 < Zolmeister> are you using express?
03:37 < NodeNewb> yes
03:37 < NodeNewb> and connect
03:38 < Zolmeister> MongoStore = require('connect-session-mongo');app.use(express.cookieParser(settings.SESSION_SECRET));app.use(express.session({
03:38 < Zolmeister>         secret: settings.SESSION_SECRET,
03:38 < Zolmeister>         store: new MongoStore()
03:38 < Zolmeister>     })) //auth
03:38 < Zolmeister> try that
03:40 < jamescarr> hey, how do you assign someone publishing rights to an npm package?
03:41 < ljharb> npm owner add $user $package
03:41 < ljharb> https://npmjs.org/doc/owner.html
03:42 < zeromodulus> Eep. I think I'm making a race condition. :x
03:46 < aeberlin> Race conditions >_<
03:47 < NodeNewb> Zolmeister -- ok, that worked!!! However...I have no idea where the session is being stored lol...I just checked my mongolab collections, and there's nothing there
03:48 < NodeNewb> don't I have to tell it the mongo connection string?
03:49 < Zolmeister> NodeNewb: My sessions are in a 'connect-sessions' db, what do you mean by mongo connection string (my code uses the default port on localhost)
03:50 < NodeNewb> mine has to use mongodb://<user>:<pass>@<server>:<port>/<instance>
03:50 < NodeNewb> but I didn't tell it to use that
03:50 < NodeNewb> so it must be using my local install of mongo, I see
03:52 < Zolmeister> look at the docs, there appears to be a server config object  you can pass to the mongostore object
03:55 < NodeNewb> yeah, but no option for username/password
03:59 < zeromodulus> Aw, I don't think I can fork my own gist. :P
04:02 < zeromodulus> I wonder if I'm pioneering asynchronous techniques, or just happening upon some that exist already. :P
04:03 < zeromodulus> hmm...
04:06 < zeromodulus> is there a shorthand for... var a = [{foo: true}, {foo: true}, {foo: true}]; a.every(foo);?
04:06 < zeromodulus> where foo is something that tests for foo.
04:07 < ljharb> zeromodulus: no, there's not
04:07 < zeromodulus> I think Ruby has like, &property.
04:07 < ljharb> zeromodulus: function (a) { return a.foo; }
04:07 < ljharb> JS doesn't have symbol_to_proc
04:07 < zeromodulus> k.
04:07 < zeromodulus> thanks.
04:09 < jaha> any ideas how to override console.log for a winston transport, this example: https://gist.github.com/spmason/1670196, is throwing a max call stack error
04:10 < NodeNewb> Zolmeister -- I ended up using connect-mongo and got it working, I had my sessions set up right, so that helped...thanks for the help, you too jaha
04:11 < jaha> NodeNewb: good to hear
04:11 < Zolmeister> NodeNewb: no problem
04:11 < Zolmeister> jaha: why do you want to override? why not just call it directly?
04:12 < jaha> Zolmeister: i want console.log to call the winston logger as well, winston has its own console transport which i still want but is causing the infinite loop
04:16 < Zolmeister> jaha: I created a log.js file which exports the configured winston module, so maybe try importing as 'console'? Though i'm surprised its failing, perhaps you added the transport twice? (the default is to log to console)
04:18 < jaha> Zolmeister: i configured it to instantiate it myself so I should still need to include the console transport right?
04:19 < Zolmeister> jaha: I'm not sure, you could try removing it, then adding it (just to see if it makes a difference)
04:20 < Zolmeister> I also noticed that you are settings things to winston.Logger(), not sure if it matters (or is a version thing) but I set them directly to the winston object (eg. winston.add(winston.transports....)
04:38 < zeromodulus> hmm... so it seems that callbacks nested in an indexed for loop do not work.
04:38 < zeromodulus> because the value of i is ever-changing.
04:39 < ljharb> zeromodulus: that's right
04:39 < ljharb> zeromodulus: you should use Array#forEach to iterate over an array anyways
04:39 < zeromodulus> dang, I thought... I thought i would be the value of the iteration that the function was defined.
04:40 < zeromodulus> :/
04:40 < ljharb> JS has function scope, not block scope.
04:40 < ljharb> especially if you need scope, just use a forEach
04:40 < ljharb> items.forEach(function (item, index, arr) { … })
04:41 < zeromodulus> .forEach is sequential yeah?
04:41 < zeromodulus> ah.
04:41 < zeromodulus> I assume yes, since there's an index.
04:42 < ljharb> yes
04:42 < zeromodulus> I'm at about... 10 WTFs/min.
04:42 < zeromodulus> :P
04:43 < howdynihao> welllllllll
04:44 < zeromodulus> woohoo! success.
04:44 < howdynihao> you -can- do block scope
04:45 < mscdex> setImmediate in node behaves the same as process.nextTick in node 0.8.x right?
04:46 < howdynihao> no mscdex
04:46 < zeromodulus> Do node programmers typically use like, var a = [stuff...]; if (a.every(function(el){return el;true}) { callback(); } when making multiple async calls?
04:46 < zeromodulus> er, I messed that up.
04:46 < mscdex> hrmm i thought nextTick semantics changed in v0.10....
04:46 < zeromodulus> :P
04:47 < zeromodulus> but I'm making multiple async calls, and appending each result to an object. So, to make sure all objects have been appended, I use an array.every() call.
04:47 < howdynihao> it just made things more obvious
04:47 < ljharb> zeromodulus: no, you can't return from an async call. you either would have to use a bunch of flags, or promises
04:48 < zeromodulus> I'm not returning from an async call, I'm just doing a check in my async callback.
04:48 < howdynihao> mscdex: if anything i'd say setTimeout(fn, 0) is more like setImmediate than process.nextTick
04:48 < zeromodulus> the callback appends data to an object, and then after each time that same callback is called, a check to see if all objects are available is done.
04:49 < zeromodulus> ljharb: here's an example: https://gist.github.com/zeromodulus/5268663
04:49 < zeromodulus> see example_two.js
04:49 < zeromodulus> I was writing example_one.js when I thought of example_two.js.
04:49 < ljharb> zeromodulus: so if you make N async calls, you have to iterate over the array N^2 times?
04:49 < ljharb> that seems incredibly inefficient
04:50 < zeromodulus> well, the page finished rendering at 149ms.
04:52 < zeromodulus> trying to figure out how to get the total latency.
04:52 < liliEA> Hi, I would like some advice about how to learn nodejs in a OO way
04:52 < zeromodulus> 149ms is the latency of the actual rendered html, excluding dependencies like client-side .js files.
04:52 < howdynihao> is that with network latency
04:53 < zeromodulus> although, as far as I can tell, it's pretty much instantaneous.
04:53 < zeromodulus> local network latency, yes.
04:54 < howdynihao> thats slow
04:54 < zeromodulus> well, it works. :P
04:54 < zeromodulus> slow it may be, but, I can always optimize it later.
04:55 < zeromodulus> maybe later I could call a callback that increments a done count.
04:55 < zeromodulus> then I'd just have to compare the count to the length of the records.
04:56 < zeromodulus> but, I'm not complaining, yet.
04:56 < zeromodulus> I'm building an SQL layer from scratch. :P
04:56 < zeromodulus> It's coming along quite nicely.
04:57 < howdynihao> whats your avatar
04:57 < howdynihao> i like it
04:57 < zeromodulus> Kosuna, from the anime Desert Punk.
04:57 < howdynihao> oh
04:57 < howdynihao> it looked cute and innocent
04:58 < howdynihao> until i saw the large image, shes holding a gun!
04:58 < zeromodulus> :P
04:58 < Paccc> Would anyone mind helping me figure out why my felixge/node-mysql query submits are timing out? I'm switching over from db-mysql, because it's not longer supported and I haven't gotten felixge's to quite work yet.
04:58 < zeromodulus> She's a mercenary!
04:58 < zeromodulus> :D
04:58 < zeromodulus> Paccc: heh, I had problems like that too buddy, I feel ya.
04:58 < zeromodulus> I ended up rolling my own SQL layer.
04:59 < Paccc> Hah.. I don't have time for all that
04:59 < zeromodulus> apparently the maintainer doesn't have time either.
04:59 < zeromodulus> :D
04:59 < Paccc> Problem is: it doesn't throw any errors connecting to the DB. But, after some timeout, probably about 2 minutes, my query attempt times out.
05:00 < Paccc> I haven't yet gotten this to work. (npm install mysql)
05:00 < Paccc> However, my old one did work. 
05:00 < Paccc> Debug is throwing this at me:
05:00 < Paccc> { [Error: Connection lost: The server closed the connection.] fatal: true, code: 'PROTOCOL_CONNECTION_LOST' }
05:02  * zeromodulus shrugs.
05:02 < zeromodulus> :P
05:03 < Paccc> sighhhh
05:03 < zeromodulus> MySQL is dead to me now.
05:03 < zeromodulus> Since Oracle bought it.
05:03 < Paccc> yeah, I was thinking about mongo 
05:03 < zeromodulus> PostgreSQL is still a good option.
05:03 < zeromodulus> Way better than MySQL.
05:03 < Paccc> I already have enough of my stuff implemented and I know MySQL, and the deficiencies don't really hinder my app at all.
05:04 < zeromodulus> Is your mysql npm module just a connection layer, or is it a query layer?
05:05 < zeromodulus> If it's a connection layer, you could use any-db, I've been using it, and it supports I think mysql as well as postgresql.
05:06 < Paccc> I would imagine that it's just mysql because it's called 'mysql'
05:06 < zeromodulus> huh... well, any-db makes connecting pretty simple.
05:06 < Paccc> but even so, more than just node talks to the database, I would have a lot of rewriting to do to change DBs
05:06 < zeromodulus> it does depend on the mysql driver for its mysql support.
05:07 < niggler> zeromodulus WTF?
05:07 < niggler> "MySQL is dead to me now.\nSince Oracle bought it."
05:07 < zeromodulus> What?
05:07 < zeromodulus> :P
05:07 < niggler> why?  its not like the product magically starts sucking
05:07 < zeromodulus> 'Cause they're sellouts.
05:07 < zeromodulus> And make you register to download their products.
05:07 < niggler> ok what are you using now
05:08 < zeromodulus> It's mainly because of minor inconvenience that I hate them now.
05:08 < niggler> what computer are you using now
05:08  * zeromodulus isn't telling.
05:08 < zeromodulus> :D
05:08 < niggler> I'm pretty sure we can walk the line and find at least five things you are using from companies that can be described as bigger sellouts
05:08 < Paccc> windows I would imagine 
05:08 < zeromodulus> lol, no.
05:08 < niggler> im using a mac now
05:08 < talus46> Apple
05:08 < niggler> I'm not ashamed of it
05:08 < zeromodulus> I'm actually using Linux. :D
05:09 <@mbalho> #node.js, come for the javascript stay for the ethical discussions
05:09  * niggler pets zeromodulus 
05:09 < howdynihao> my computer is organically grown from the local factory
05:09  * niggler pets mbalho 
05:09 < zeromodulus> O.o
05:09 <@mbalho> howdynihao: is it free range?
05:09 < niggler> grass-fed
05:10 <@mbalho> were the cows in the gateway ads in the 90's free range?
05:10 < zeromodulus> Paccc: any-db accepts connection strings, e.g. "mysql://username:password@server:port/database"
05:10 < zeromodulus> Paccc: it's been working great for me. :D
05:11 < zeromodulus> er, connection URLs.
05:12 < Paccc> I'm passing in an object exactly like their documentation shows :/
05:12 < zeromodulus> maybe there's some kind of server setting you're overlooking?
05:12 < zeromodulus> does the mysql console work with your settings?
05:13 < Paccc> It was working earlier today with my old module
05:13 < zeromodulus> i.e. mysql --username username --password password --host host etc.
05:13 < Paccc> I upgraded to the newest node, and the old module had some deprecated stuff
05:13 < zeromodulus> test the credentials on the console.
05:13 < Paccc> http://pastie.org/7158487
05:13 < zeromodulus> and see if you get the same timeouts too
05:13 < zeromodulus> did you config = {};?
05:14 < Paccc> yeah, I actually pulled that out of another include
05:14 < Paccc> the object is what it looks like it should be
05:15 < zeromodulus> well, maybe there's a timeout parameter.
05:15 < zeromodulus> ?
05:16 < Paccc> A timeout parameter would only set the amount of time it should wait for a timeout
05:16 < zeromodulus> looks like it hasn't been implemented.
05:16 < Paccc> but the fact that it has timed out at all is the issue
05:16 < zeromodulus> says in the todo: setTimeout() for Connection / Query.
05:16 < zeromodulus> so it times out after like, 2 minutes?
05:16 < Paccc> ~ish
05:17 < zeromodulus> hm, dunno, I'd try the mysql shell console.
05:17 < zeromodulus> test whether that works.
05:18 < zeromodulus> sounds like a connection issue and not really an issue with your code.
05:19 < Paccc> I changed my config to invalid creds, and it immediately didn't connect
05:19 < Paccc> debug: {"db_connection_err_char":{"code":"ER_ACCESS_DENIED_ERROR","fatal":true}}
05:19 < Paccc> so it is connecting, it's just when the query comes about
05:19 < zeromodulus> do a console.log('connected.') in your connection.connect callback.
05:19 < Paccc> the callback isn't firing because it's timing out
05:20 < zeromodulus> and couldn't hurt to console.log(connection) either.
05:20 < Paccc> It wouldn't fire that first one
05:20 < zeromodulus> var util = require('util'); console.log(util.inspect(connection));
05:21 < Paccc> If it would, it would fire the (err)
05:21 < Paccc> one sec, I have my own output module
05:21 < zeromodulus> uh, also...
05:21 < zeromodulus> I don't think you're doing callbacks right. :P
05:22 < arhart> Anyone have an idea why these behave differently? Is it a bug?
05:22 < arhart> node -e 'process.stdin.pipe(process.stdout); process.nextTick(function(){process.stdin.unpipe();});'
05:22 < arhart> node -e 'process.stdin.pipe(process.stdout); setTimeout(function(){process.stdin.unpipe();}, 0);'
05:22 < howdynihao> no
05:22 < zeromodulus> Paccc: Your connection.connect() call and connection.query() call happen right after the other, asynchronously.
05:23 < howdynihao> theyre not the same thing
05:23 < zeromodulus> Paccc: You need to execute the connection.query in your callback, that's the only way to ensure that the query will execute *after* the connection is made.
05:24 < zeromodulus> Paccc: In other words, call connection.query() in the callback of connection.connect(). That will ensure that connection.query() is executed *only* after a connection has successfully been made.
05:24 < Paccc> OHH FUCK
05:24 < Paccc> lol
05:24 < arhart> howdynihao: I know nextTick and setTimeout differ, but in this case I don't understand why they aren't equivalent
05:25 < zeromodulus> :P
05:25 < Paccc> well let me see if this works sigh
05:25 < arhart> The setTimeout one terminates immediately; the other waits for some input, does NOT echo it, then terminates.
05:26 < s3shs> Anybody able to build the latest master of node on Mac?  I've got the devtools installed, but the make crashes.
05:26 < Paccc> well, alright, I see what you're saying, but they're not actually asyncronous, the connection.connect is syncronous 
05:26 < Paccc> I also have a 
05:26 < Paccc>             console.log("Cannot connect to database with current config")
05:26 < Paccc> in the callback
05:27 < Paccc> and that never sees the light of day unless the config to connect is wrong
05:28 < zeromodulus> hm, dunno.
05:28 < Paccc> With how my pastie is, the console.log(err) would show an [undefined] of some sort when it connects, but it does not. The callback on connect() only fires on an error
05:28 < vickyrp> Hello
05:29 < zeromodulus> Paccc: what about this part in the docs? Closing the connection is done using end() which makes sure all remaining queries are executed before sending a quit packet to the mysql server.
05:29 < howdynihao> arhart: oh, i actually dont know why you're seeing the latter
05:29 < zeromodulus> Paccc: maybe you need that end() call.
05:29 < Paccc> that's actually in my code as well
05:29 < Paccc> I didn't pastie my whole program, it's pretty sloppy right now
05:30 < Paccc> the end() just basically kills the connection
05:30 < zeromodulus> Paccc: oh, haha, I found something that might be useful...
05:31 < Paccc> O_O
05:31 < zeromodulus> Paccc: On https://npmjs.org/package/mysql see "Server disconnects".
05:31 < zeromodulus> Particularly... if (err.code !== 'PROTOCOL_CONNECTION_LOST') {throw err;}
05:32 < Paccc> Yeah, that's exactly what I'm getting.. hmm 
05:32 < Paccc> crappy module :S
05:32 < zeromodulus> Paccc: I'd try any-db.
05:32 < Paccc> I don't understand why it would timeout on a localhost lol
05:32 < zeromodulus> any-db uses the mysql driver you're using, but probably makes it not so sucky for ya.
05:33 < Paccc> yeah, I'll give that a try
05:33 < Paccc> for christ's sake, I just wanted to get some coding done today. 
05:33 < Paccc> Murphy's law, I suppose
05:35 < zeromodulus> I don't quite understand the any-db source, but it looks like it does some error handling.
05:35 < howdynihao> what if  that was someones name
05:35 < howdynihao> Murphy S Law
05:35 < Paccc> That'll be my first child's name
05:36 < Paccc> daughter/son, doesn't matter
05:36 < Paccc> Murphina S. Law
05:36 < mscdex> woohoo pageant support for ssh2 \o/
06:01 < Paccc> figured out my problem
06:02 < Paccc> it was the damn port, that port I had set was for something else 
06:02 < niggler> lol Paccc wrong port
06:03 < Paccc> well atleast I'll be able to sleep tonight lol
06:03 < Paccc> adios, thanks for listening/trying to help
06:03 < howdynihao> http://bodil.org/winning-the-war/slides/m/dash.gif
06:04 < Paccc> http://cdn.memegenerator.net/instances/250x250/30461384.jpg
06:11 < ningu> is there some one-liner to do something like [0] x 3 => [0,0,0] ?
06:12 < niggler> >>> new Array(4).join("0").split("") @ ningu
06:12 < purr> ningu: (object) ['0', '0', '0']
06:12 < ningu> hmm... yeah, that works
06:12 < ningu> although it doesn't work for numbers
06:12 < niggler> >>> function foo(n, x) { return new Array(n+1).join(x).split("").map(Number); } foo(3,'0') @ ningu
06:12 < purr> ningu: (object) [0, 0, 0]
06:12 < niggler> how's that? :)
06:13 < ningu> hehe
06:13 < ningu> well it does work
06:13 < howdynihao> slow
06:13 < niggler> howdynihao speed wasn't a criterion
06:13 < ningu> I think I'll just do an old fashioned for loop
06:13 < ningu> yeah, speed isn't that relevant really
06:13 < ningu> but there's no need for *too* excessive cleverness :)
06:14 < niggler> if it makes you feel better ningu i needed to do a single-character lookbehind
06:14 < niggler> which I ended up doing by reversing the string and doing a lookahead
06:15 < ningu> I'm currently trying to implement a string subtraction function
06:15 < ningu> basically it will decode each char into its unicode codepoint and subtract against the corresponding char
06:16 < RLa> what it would be useful for?
06:16 < ningu> I guess I'll use decimal places
06:16 < ningu> RLa: basically I want to allow a query to the api to my database where users will ask for results WHERE foo >= bar AND foo <= baz
06:17 < ningu> I want to be sure they don't ask for bar and baz too far apart since that would be hundreds of thousands of rows
06:17 < ningu> so it's a heuristic rather than doing a count(*) on the database which is also expensive
06:18 < RLa> hm, interesting
06:19 < ningu> RLa: however no one seems to have written a function to do quite what I'm doing in comparing string distance
06:19 < ningu> I don't want Levenshtein distance, order is the paramount concern
06:19 < RLa> it assumes that your data is evenly distributed?
06:20 < ningu> yeah, it kind of has to
06:20 < ningu> it's an approximation
06:20 < ningu> basically the goal is to err on the side of not allowing queries that return more than, say, 10,000 or so rows
06:20 < niggler> ningu what's the query language?  SQL?
06:20 < niggler> *how are users specifying the bounds
06:21 < ningu> if it rules out some smaller ones that isn't such a big deal since that means that particular data set is smaller and they can get most of it some other way
06:21 < ningu> niggler: the database is an SQL database. queries come in via a JSON api over HTTP requests
06:21 < niggler> so is the SQL query sent as a key in the JSON object?
06:21 < ningu> and the users specify the start string and end string of the range, asking for all rows in that range
06:22 < ningu> yeah, "range": ['column_name', 'start_string', 'end_string' ]
06:22 < ningu> niggler: keep in mind I'm just making this up as I go, the api is not set in stone
06:22 < niggler> so why don't you JSON.parse it and then read the range
06:22 < ningu> what does "read the range" mean?
06:22 < ningu> that's what I'm doing. the point is to know how far apart the two strings are in some quantitative way.
06:23 < ningu> if it was two numbers I could just subtract them.
06:23 < ningu> and I could say: you can only specify ranges that are 1000 or less apart, or whatever.
06:23 < niggler> oh so bar and baz are string literals
06:23 < RLa> i would just limit the number of results to first 1000
06:24 < niggler> why not decode and take the difference?
06:24 < niggler> a=1,b=2,….
06:24 < ningu> RLa: I do that already, but they can also do another query specifying OFFSET
06:24 < ningu> niggler: that's what I'm doing :)
06:24 < ningu> it's just slightly tricky to implement but not so bad really
06:24 < niggler> ah
06:24 < ningu> I think another solution is just something like an offset maximum
06:25 < ningu> that will basically rule out all queries producing more than that number of rows, at least, rule out retrieving the rows
06:25 < ningu> but I kind of want to rule out some queries that would produce that many rows too
06:25 < RLa> offset should not rule out limit clause
06:26 < ningu> RLa: there is a global limit clause on everything already
06:26 < ningu> but what's expensive about a query that returns a million rows, assuming you have LIMIT 1000, is when OFFSET is really high
06:26 < ningu> so that's why restricting OFFSET to 50,000 or less or some number I pick is a reasonable idea
06:26 < RLa> db should be able to do limit and offset quite efficiently when the column is indexed and you do range query
06:27 < ningu> RLa: it degrades linearly as OFFSET increases.
06:27 < RLa> what db is that?
06:27 < ningu> indexing doesn't solve that.
06:27 < ningu> postgres.
06:27 < RLa> are you sure it does that?
06:27 < ningu> yes, quite sure
06:28 < ningu> I've been reading about it all day
06:28 < ningu> see e.g. http://microjet.ath.cx/WebWiki/ResultPaginationWithPostgresql.html
06:30 < jhgaylor> hi guys.  I'm working with node.js for the first time and using deployd. i'm trying to decide how best to trigger events if a record changed at all.  deployed exposes `previous` as a copy of the original record and `this` as a reference to the record being submitted for updating.  my end goal is to create a collection of records saying who changed a record and when.
06:30 < ningu> it's hard for me to use the WHERE clause pagination solutions because users can also specify the sort order
06:39 < mikrowelt> hey guys how r you?
06:39 < mikrowelt> does any1 uses jitsu for node?
06:39 < mikrowelt> i have one issue
06:40 < mikrowelt> i just cant get how to store mongo session on the remote mongodb...
06:42 < ningu> niggler: hrm... any opinion on which "base" it makes sense to make each character of the string? maybe the largest normal unicode character value like 0xFFFF...
06:43 < ningu> but that might quickly get too big
06:43 < niggler> ningu you could just do base 26 and implement a really quick horner
06:43 < ningu> horner?
06:43 < ningu> niggler: remember these are arbitrary unicode strings
06:44 < niggler> define "arbitrary"
06:44 < ningu> they could be in any language
06:44 < niggler> if utf8 then 0xFFFFFFFF is a safe bet
06:44 < ningu> there are thousands in the db already in pretty much all possible scripts
06:44 < ningu> yeah utf8
06:44 < niggler> although that's probably too big
06:44 < ningu> I thought 3 bytes was enough
06:45 < niggler> err you are correct ningu 
06:45 < niggler> yeah then 0xFFFFFF is good
06:45 < ningu> and that won't go beyond node's capacity? I don't know how good its precision is with large numbers
06:45 < niggler> depends on the strings
06:46 < niggler> explain how the range works with arbitrary unicode characters
06:46 < niggler> *
06:46 < niggler> * at least how you envision it works
06:47 < ningu> niggler: they could be asking for a small range of entries in Arabic and the start and end of the range could both be Arabic characters for example
06:47 < ningu> I think the out-of-range issue is not so serious because I only want to accept small ranges anyway
06:47 < ningu> so as long as large numbers don't flip back around to zero
06:48 < ningu> but I think base 0xFFFFFF is way too big because then, for example, az and ba are way too far apart
06:49 < ningu> and in practice this will be for a particular language or small(ish) set of languages... it's just those could be pretty much anything
06:49 < ningu> so it has to perform ok with any string but it can assume whatever it is, it's an "alphabet" of a small-ish size
06:50 < ningu> yeah, if I set the base to 50 then az - ba = 25
06:50 < ningu> instead of 16777190 with base 0xFFFFFF
06:51 < niggler> ningu the alternative
06:51 < niggler> is just to look at the code-point differences
06:51 < ningu> well that's what I'm doing
06:51 < ningu> but the order in the string is significant
06:52 < niggler> if you said it was just letters, then you could do base 26
06:52 < niggler> but its not even clear to me that your operation is well defined over UTF8
06:52 < ningu> yeah
06:53 < niggler> what does it mean for a string to be between the unicode snowman and the semicolon
06:53 < ningu> hehe
06:54 < niggler> so i *suspect* that you can set up a reasonable restriction
06:55 < ningu> how so?
06:56 < niggler> again, explain why someone would be asking for something in a range between two arbitrary codepoints
06:57 < niggler> even take the simple case of a single-character limit
06:57 < niggler> foo >= 'a' and foo <= 'b'
06:57 < niggler> now replace a with the snowman and b with ;
06:57 < niggler> foo >= '☃' and foo <= ';'
06:57 < niggler> what does that mean?
06:58 < ningu> it's well defined in sql even if it isn't clear why someone would do it
06:58 < ningu> you *can* assume these are largely natural language written forms
06:58 < ningu> but just in many languages
06:58 < ningu> so it's not just *any* UTF8 string but there is some punctuation -- like dashes and whatnot
06:59 < niggler> so can you devise a reasonable subset per language?
06:59 < ningu> and some entries are rather odd like the names of chemical elements with numbers in them
06:59 < niggler> like a windows codepage
06:59 < ningu> there are too many languages
06:59 < niggler> http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT
06:59 < ningu> so in theory, maybe, but not in practice
06:59 < niggler> http://www.unicode.org/Public/MAPPINGS/
06:59 < ningu> also, the results from those query are not restricted to just one language
06:59 < ningu> I know.
06:59 < ningu> believe me, there are too many.
07:00 < ningu> this query*
07:00 < niggler> are you at the stage now where you have users in many languages?
07:01 < niggler> or is this something you are planning for
07:01 < ningu> niggler: it's the whole point of the project
07:01 < niggler> lol ok
07:01 < ningu> so not taking it into account means we should basically do something else
07:01 < ningu> we do have few users at the moment
07:02 < ningu> I could do something stupid like say: you can only do this query if the first char of both strings in the range match
07:02 < ningu> that might rule out some legitimate queries
07:02 < niggler> https://github.com/ashtuchkin/iconv-lite/blob/master/encodings/singlebyte.js
07:03 < ningu> interesting
07:03 < ningu> but that's just a couple hundred languages
07:03 < ningu> plus we only do unicode
07:03 < niggler> those are unicode
07:03 < ningu> eh? koi8r is not unicode
07:04 < niggler> https://github.com/ashtuchkin/iconv-lite/blob/master/encodings/singlebyte.js#L324 those aren't unicode?
07:04 < ningu> but I see, it seems to be an attempt to specify what its conversion to unicode could result in
07:04 < niggler> there are standard unicode codepages
07:04 < niggler> and that's what this tries to represent
07:04 < ningu> hmm ok
07:05 < ningu> cause koi8r is also a pre-unicode encoding for russian cyrillic
07:05 < ningu> but I guess it was taken over into unicode in some form
07:05 < niggler> no what happened was
07:05 < niggler> when unicode was established
07:05 < niggler> a mapping was defined
07:05 < niggler> so what you see here is an encoding of that mapping, and this library has a mechanism for converting to and from the encodings
07:06 < ningu> ah ok
07:06 < niggler> that link i sent you from unicode.org has a full listing
07:07 < niggler> lol I'm fighting a similar issue now because excel is a PITA
07:07 < ningu> hrm... well between 'a' and 'azz' there are still >500K rows
07:07 < ningu> when I include all languages
07:07 < ningu> so just saying the first char should match isn't quite enough to get the count down
07:08 < ningu> if the first two chars match that does it
07:10 < ningu> I think I'll just do something dumb like that
07:33 < loranB> hi all
07:35 < loranB> hello?
07:38 < zello> hello
07:48 < wiherek> hi
07:48 < wiherek> I am trying to install nodejs on windows server with winser, and I am getting this notice
07:49 < wiherek> 'you must run this tool as an administrator'
07:49 < wiherek> (it is executed by npm)
07:49 < wiherek> but when I do something like:                    runas /user:Administrator npm                    <- that doesnt work at all
07:50 < wiherek> it returns that the file cant be found
07:56 < Sven_vB> wiherek, is the installer on a physical disk? i get those errors when a network mapping is mapped only for the non-admin user and the same drive letter from the admin's view is not defined
07:56 < Sven_vB> it also occurs with "subst" pseudo drives
07:57 < wiherek> it is a physical disk
07:58 < Sven_vB> ok... then try to run the shell as admin, and in there try to locate and start npm
08:00 < wiherek> Sven_vB I did, the shell is run ad administrator (I see 'Administrator: command line' in the title)
08:03 < Sven_vB> you do know how to use the shell, right?
08:04 < wiherek> do you mean the node shell?
08:04 < Sven_vB> no, the windows shell
08:04 < Sven_vB> like how to get to the node installer and run it
08:04 < Sven_vB> err i mean npm
08:04 < wiherek> yea, but I still cant access it as adm
08:05 < wiherek> npm is npm.cmd in node installation directory?
08:05 < Sven_vB> i think so, however now there should be a better error message
08:05 < Sven_vB> dunno where it is, i've got no windows machine up for reference
08:27 < roel_> https://registry.npmjs.org is down. Anybody else has issues?
08:27 < zaleb> down for me to
08:29 < roel_> ok 
08:29 < roel_> can you report this anywhere?
08:29 < roel_> or should we just wait
08:32 < gildean> seems up here
08:32 < roel_> yes, it started reacting again but very very slow
08:32 < roel_> I'm just gonna wait a little longer and then it will be fixed i guess
08:41 < ak5> is there a nice and simple TDD framework for node?
08:45 < tando> mocha
08:48 < [AD]Turbo> hi there
08:49 < ak5> I am reading about grunt, tando 
08:54 < Purefan> Goood morning!
09:04 < Purefan> Anybody know why var oStream = require('fs'); oStream.exists would say Object has no method stream ? => if I do require('fs').exists(... it works though | NodeJS 0.8.15
09:30 < spobat> are there any projects I might know of that use node.js behind the scenes? :D 
09:41 < roel_> spobat: https://kiwiirc.com/ uses socket.io and node.js
09:41 < roel_> spobat: https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node
09:45 < spobat> roel_, thanks :D
10:10 < roel_> I have a mysql-database and I want to report to all users if anything changes. Now I wanted to work with mysql-trigger and …. (This is what I don't know.) Something should use pub sub of redis to go through nodejs to all the clients connected. Has anybody tried something like that. And what did you use to notify Node that something changed in mysql?
10:15 < alchimista> hi cronopio:
10:19 < Aartsie> Goodmorning all
10:43 < rickdrink> hi there
10:47 < spobat> hi
10:56 < spobat> how do I start a simple server-binary?
10:58 < spobat> i know it's a simple question, but i can't spot the solution online :o
10:59 -!- mode/#Node.js [+o Nexxy] by ChanServ
11:08 < khurram> is there any spelling checker api any one seen i can use ?
11:18 < khurram> huh
11:18 < khurram> too drunk
11:22 < alchimista> Hi everyone, I am using pkgcloud and want to createServer(instance) an openstack instance, but i get this error: Error: Invalid URI "/servers"
11:22 < alchimista> btw this is my code https://gist.github.com/anonymous/882abc0a5c1c53bf6206
11:23 < sshaginyan> Guys I've google and done my research but I can't seem to use any tools to detect memory leaks. Most projects seem dead.
11:24 < agu10^> hey!
11:24 < sshaginyan> What are the best practices to find leaks in js?
11:24 < agu10^> how can i kill my node process in linux and restart it?
11:24 < agu10^> nodemon is throwing an error
11:26 < agu10^> 29 Mar 11:20:19 - [nodemon] exception in nodemon killing node
11:26 < agu10^> Error: watch EMFILE
11:26 < agu10^>     at errnoException (fs.js:636:11)
11:28 < khurram> huh
11:30 < agu10^> How do i get nodemon to ignore .git?
11:38 < agu10^> NODEMON is not reading .nodemonignore
11:52 < rgl> is there a way to compress an http response by using the same interface as response? I've this code http://pastie.org/7160740 but I'm not figuring out how to make it work :-/
12:03 < agu10^> I need to make a big app with database tables and a UI to create/delete/edit/list like in ASP.net. Should I use node.js instead?
12:04 < Andy-> you want to make a REST API using Node.JS over .NET?
12:04 < cracken> no
12:04 < Andy-> who released you?
12:04 < cracken> with asp mvc you get much help, with node.js you get no help
12:05 < cracken> and in asp.net you can pretty much, a) design your database and get the views/model created for you or b) create the views/datamodel and let it create the database for you
12:06 < astropirate> thats magic, its forbidden in node.js
12:06 < astropirate> we dont speak of it
12:06 < cracken> yes, I know, thats why he should go for asp.net
12:06 < Andy-> shh, you've said too much
12:07 < Andy-> no reason why he can't cross-platform something though
12:07 < Andy-> .net mvc api with node pushed data thourgh WS
12:07 < Andy-> nom.
12:07 < cracken> you could however build your solution with pure html/javascript and use node.js for servicelayer with database in couchdb
12:07 < cracken> that way you only need to learn javascript and html and css
12:08 < cracken> that solution would be a quick one, if you knew what you were doing, if you don't, the asp.net is an easier way, where your hands are held more tightly
12:09 < agu10^> cracken, holding hands sounds nice if i hire people
12:09 < agu10^> cause most of them will be morons
12:09 < cracken> =)
12:10 < agu10^> but what can i use on linux like asp.net?
12:10  * cracken deals with morons in asp.net on a daily basis
12:10 < agu10^> oh really? but i still should use asp.net if i hire people, right?
12:10 < cracken> it's not that easy
12:10 < agu10^> hmm... what then?
12:10 < agu10^> how
12:11 < Bonuspunkt> isnt there a mono asp.net thingy?
12:11 < agu10^> yes but it's not really bugfree
12:11 < cracken> to be able to give a good answer, you must present your problem, what employees you are looking for, what pay are you offering etc.
12:11 < Bonuspunkt> hmm what about owin?
12:12 < cracken> if you look for the lowest wages employees, I would chose a technology where the architecture was set, and all the developer had to was fill in the blanks
12:12 < cracken> there are many such technologies, depending on the language yuo are aiming for
12:13 < cracken> if you want cross plattform, there are probably java solutions
12:13 < cracken> or python solutions,
12:13 < cracken> e.g django
12:14 < cracken> but it's not a yes/no question, you must think things more through
12:14 < cracken> then weigh the pros and cons
12:14 < cracken> for your environment
12:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:59 < SrPx> Does anyone know what this means?Assertion failed: (!!(events & UV__IO_READ) ^ !!(events & UV__IO_WRITE)), function uv__stream_io, file ../deps/uv/src/unix/stream.c, line 732. 
13:21 < Industrial> Say I want to create a network service that stores service adresses (name, version, host, port) in a key value database and is queryable for it, what database (nosql?) would be suitable for this?
13:27 < radar_> If all you need is a key value store my preference would be redis
13:28 < zaleb> what he said ^
13:28 < radar_> ya. real fast and easy to use with node_redis
13:28 < neeky> does anyone know of a node SOAP library tat actually works with WCF web services? 
13:29 < neeky> the issue is WCF web services use includes and imorts in the WSDL, which no sopa client i can find supports
13:29 < radar_> a quick google: https://github.com/yaronn/wcf.js
13:30 < neeky> yeah, i can gogle too, but that client doesnt even read WSDL
13:31 < neeky> these are still SOAP calls, so reading WSDL is a requirement
13:32 < neeky> but the service I have to consume has god-aweful imports and includes in the WSDL
13:32 < neeky> there is a way to generate flatwsdl, but they chose not to
13:33 < neeky> php has a good soap client, i guess i could use it as a proxy
13:36 < radar_> yeah, i have to deal with SOAP / WCF at the office since our entire development group is still .NET 
13:36 < radar_> I try not to code against their services if I can avoid it for that very reason
13:38 < neeky> I got no choice here - it's weird, this is a company that just launched a year or two ago, and they only support SOAP 
13:38 < neeky> no REST
13:41 < pachet> no REST for the wicked bro
13:41 < Bergle_1> there are many peole who still dont speak rest...
13:41 < Bergle_1> they have mouthfull of soap :)
13:43 < neeky> ypu'd think someone would have written a better soap client by now
13:43 < neeky> in node
13:48 < Borja> I have an application and within minutes consumes all memory. How I can know which objects are filling memory? Thanks
13:48 < raffer> nodetime
13:48 < pachet> Borja: https://hacks.mozilla.org/2012/11/tracking-down-memory-leaks-in-node-js-a-node-js-holiday-season/
13:50 < nodenoob> when a package fails to install using npm (npm install handlebars) whats the best way to debug this? looks like an error in a dependency package.json, do i need to install all of it by hand, or?
13:50 < radar_> wow, I definitely haven't seen that
13:51 < radar_> except sometimes i need to run npm install as root
13:52 < nodenoob> just tried that - didn't work
13:52 < nodenoob> get the same "failed to parse json" error
14:29 < agu10^> nodemon ignore does not work!
14:51 < skelterjohn> anyone here use sm? i'm having trouble installing it
14:52 < skelterjohn> http://pastebin.com/T510eX7U
14:56 < fayimora> hey guys, I'm looking at "kue".. Still can't figure out how to actually run a job! you know, like send an email. How do I queue up a series of jobs, each of which runs some commands on the terminal(like returning the result of "ls -l" )
14:56 < fayimora> Basically, I don't understand how you define what task to perform
15:06 < MI6> joyent/libuv: Ben Noordhuis master * c43e851 : src: bump version to 0.11.1-pre (+7 more commits) - http://git.io/8WoSeQ
15:19 < seismo> i'm trying to get those examples to work: https://github.com/onedayitwillmake/RealtimeMultiplayerNodeJs
15:19 < seismo> but somehow socket.io has problems connecting. what could it be?
15:20 < seismo> afaik it's not a problem to open the html files locally
15:20 < MI6> joyent/node: Ben Noordhuis master * 3f091c7 : src: fix Persistent<> deprecation warning  Pass the Isolate to Persistent (+2 more commits) - http://git.io/Gyahig
15:20 < seismo> but even if i get them from a local server that doesn't change anything
15:21 < gildean> seismo: where's the actual server?
15:22 < seismo> the server of those example files?
15:22 < seismo> gildean: it run the node server on my local machine.
15:23 < seismo> *I
15:24 < seismo> would be awesome if somebody could tell me if you have the same problems :>
15:28 < jocafa> ohsnapitsmichaeldeol
15:31 < michaeldeol> ha, goodmorning jocafa
15:32 < shesek> how can I download a package from npm, without installing it?
15:37 < gildean> shesek: ... you install it?
15:37 < gildean> shesek: or maybe check if the project is shared somewhere like github
15:38 < ljharb> shesek: when is downloading a package different from installing it?
15:39 < AAA_awright> When you're getting the targz
15:39 < AAA_awright> You probably want to use Git
15:39 < omgnodes> i've got a question, if you are connecting to a db trough node, do u need to make a connection per request, or is using a connectionpool the way to go. im a bit puzzled how connection sharing works 
15:40 < gildean> ljharb: it would be different if the package has pre- or postinstall scripts etc.
15:41 < ljharb> ah, ok
15:42 < pachet> omgnodes: one conn per request would be a real drag
15:43 < omgnodes> pachet, ok but then it means that it would be shared and there would be some sort of queue mechanism in order to handle the request per user
15:43 < draginx> what do u guys use for deployment?
15:45 < ljharb> git
15:45 < omgnodes> im also using git but thinking about capistrano or deliver
15:51 < shesek> gildean, ljharb, AAA_awright, installing it also executes the install hooks, which I want to avoid
15:51 < shesek> and the code on github is not guaranteed to be the same as the one on npm
15:51 < AAA_awright> shesek: So just use Git
15:51 < AAA_awright> shesek: That's a good reason not to use npm if anything
15:52 < shesek> I want to audit some packages for potential security issues, either malicious or not
15:52 < shesek> when you install it, the author can do pretty much whatever he wants with the install hooks
15:52 < JamesMGreene> Do I need to do something special to override `console.X` methods globally inside a module (for testing)?
15:52 < shesek> and even remove the malicious code afterwards, so that you wouldn't notice it
15:53 < JamesMGreene> I thought `console.log = function() { /* do other stuff */ };` would cover it but negatory
15:53 < ljharb> thats pretty paranoid
15:53 < AAA_awright> JamesMGreene: That's what I do to hide output
15:53 < JamesMGreene> Do I need to do `global.console.log` or something?
15:53 < AAA_awright> console.log=function(){}
15:54 < JamesMGreene> I'm overriding it like that from my test module but it doesn't seem like it's working...?
15:54 < JamesMGreene> Unless nodeunit overrides it already or something?
15:54 < ljharb> shesek: http://stackoverflow.com/questions/15035786/download-source-from-npm-without-npm-install-xxx
15:54 < shesek> ljharb, somewhat, yes. I wouldn't check packages by respected authors
15:54 < ljharb> shesek: basically, just do a normal npm install in a folder you don't care about
15:55 < ljharb> either way, as long as your app is under version control, and node_modules isn't ignored, you'll be able to audit everything it did
15:55 < shesek> but when installing small packages from people I never heard of... letting them execute arbitrary code on my machine is somewhat concerning
15:55 < ljharb> and if it made changes outside of it's node_modules folder, thats the only time you should really be concerned.
15:55 < shesek> npm install executes the install hooks, meaning the author can do whatever he wants
15:56 < ljharb> you're not running it with sudo
15:56 < ljharb> how much damage could they possibly do?
15:57 < shesek> ljharb, they could access everything my user has access to - all my code, my private keys, even my npm auth code
15:57 < ljharb> shesek: ok i found your answer.  npm cache add $package will add it to your cache without installing it.
15:57 < JamesMGreene> Would `console.log` override not work because the module I'm hoping to override it in is actually `require`d before I override it? That would make sense
15:57 < shesek> ljharb, ah, cool. it'll install it to ~/.npm than, right?
15:57 < ljharb> shesek: ~/.npm is the cache i think
15:57 < ljharb> yes
15:58 < ljharb> JamesMGreene: what's a console.log override?
15:58 < JamesMGreene> O_o
15:58 < JamesMGreene> `console.log = otherFn;`
16:00 < shesek> (I got a bit paranoid after watching http://www.youtube.com/watch?v=z-5bO0Q1J9s, if anyone is interested)
16:01 < ljharb> JamesMGreene: why would that ever not work? that's a global
16:02 < JamesMGreene> Just figured if the module whose actual usage I want to override is `require`d before the override then it probably gets a closure ref to the original global console methods
16:03 < JamesMGreene> but since I'm referencing the `console` object and not the methods directly, maybe I'm wrong there too
16:03 < JamesMGreene> I dunno but long-story-short it's not working
16:03 < segomos> it would work as long as it doesn't call the console.log before you override, afterwards it's all gravy
16:03 < JamesMGreene> I just switched the order and it's still not working :-|
16:04 < ljharb> the "console" object is always the same. it's only if that module is indeed grabbing a reference to the full log function (which would be weird) that it wouldn't work
16:07 < JamesMGreene> Hmm
16:07 < JamesMGreene> Must be something wrong with my actual code then that's making it not reach the console method invocations
16:07 < JamesMGreene> Thanks for reaffirming I'm not crazy
16:08 < ljharb> well, you are overriding console.log
16:08 < ljharb> :-p
16:08 < JamesMGreene> Just for testing :)
16:09 < JamesMGreene> Yeah, seems that my glob is ending up with an empty array
16:14 < segomos> JamesMGreene: https://gist.github.com/tony-o/5271789
16:14 < segomos> log2 shows why your override wouldn't work..
16:14 < segomos> one reason^
16:43 < zot> extension question: I have something which may be a v8::String, ::Number, ::Int32 or ::Uint32.  I want an Int32 out of it, at the end of the day.  what's the smart way to do this?  (i haven't found any good examples so far...)
16:45 < zot> my intuition says: coerce, and check if it worked/failed, but I don't actually see how to do that.
16:45 < MI6> joyent/node: isaacs v0.10 * 7af075e : crypto: Pass options to ctor calls - http://git.io/MLEymg
16:48 < owen1> anyone used leveldb and can give me some usecases for using it?
16:50 < JamesMGreene> a-ha!
16:50 < JamesMGreene> There's the culprit
16:51 < segomos> owen1: the limitations look like enough to not use it
16:51 < JamesMGreene> Accidentally had `files.push.apply(globbedFiles);` instead of `files.push.apply(files, globbedFiles);`
17:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:02 <@TooTallNate> nathan7: yo
17:02 < nathan7> TooTallNate: ayo
17:03 < nathan7> TooTallNate: so I'm trying to figure out when gyp started doing symlinks
17:03 < nathan7> TooTallNate: err, hardlinks
17:03 < nathan7> TooTallNate: the odd thing is that even the gyp in node 0.8.0 seems to do this
17:04 < nathan7> TooTallNate: I was trying to bisect it and I couldn't find a good revision q=
17:04 <@TooTallNate> nathan7: ya i haven't updated node-gyp's copy of gyp for quite a while
17:05 < nathan7> TooTallNate: mhm
17:05 < oon_> Does JugglingDB have an irc channel?
17:05 < nathan7> TooTallNate: so our (Nodejitsu) build server is choking on the hardlinks generated
17:06 < nathan7> TooTallNate: and as far as I can tell they were being generated all the way back to 0.8.0's bundled version
17:06 < nathan7> TooTallNate: and in the earliest gyp bundled with node-gyp
17:06 <@TooTallNate> nathan7: ok
17:06 <@TooTallNate> sounds like you've done your research :p
17:06 <@TooTallNate> nathan7: so a few things need to happen
17:06 <@TooTallNate> nathan7: you can write a patch :)
17:07 <@TooTallNate> nathan7: i can float it for now (i already am doing so for a few other patches)
17:07 <@TooTallNate> nathan7: but we should also submit it upstream probably
17:07 < nathan7> TooTallNate: float?
17:07 < nathan7> TooTallNate: ah
17:07 <@TooTallNate> nathan7: or at least inquire as to why they're using hardlinks in the first place
17:07 < nathan7> TooTallNate: this is intended behaviour, but I have no idea how it started breaking things suddenly
17:07 < nathan7>  ~/code/node ⮀ ➦ b07b391 ⮀ grep -R 'ln -f' tools/gyp
17:07 < nathan7> tools/gyp/pylib/gyp/generator/make.py:cmd_copy = ln -f "$<" "$@" 2>/dev/null || (rm -rf "$@" && cp -af "$<" "$@")
17:07 < nathan7> tools/gyp/pylib/gyp/generator/ninja.py:      command='ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)')
17:08 <@TooTallNate> nathan7: how come this is only now becoming a problem?
17:08 < tjfontaine> probably has to do with chrooting of some sort
17:08 < nathan7> TooTallNate: our build systems haven't been commited in two months. I haven't got the slightest clue.
17:08 < nathan7> tjfontaine: That won't break hardlinks
17:09 < tjfontaine> I didn't mean to indicate that hardlinks in general would
17:09 < nathan7> I mean, at all
17:09 < nathan7> they'll always resolve
17:10 < nathan7> TooTallNate: at some point our npm was upgraded breaking our build service entirely (node 0.8.16 and npm 1.2 don't play nice, it expects WritableStream#close)
17:10 < nathan7> TooTallNate: so we upgraded node
17:10 < nathan7> TooTallNate: and arrived at today
17:13 < nathan7> TooTallNate: should I change to softlink or just drop in the cp fallback?
17:14 <@TooTallNate> nathan7: i don't have a preference honestly
17:14 <@TooTallNate> probably softlink
17:19 < NodeNewb> anyone run into the TTL issue when using mongo-connect? It just randomly appears when I restart my app...if I keep restarting it eventually works, very strange...
17:20 < NodeNewb> for session persistence, I mean
17:20 < CoverSlide> wtf .. aws elastic beanstalk for node uses apache?
17:20  * CoverSlide sigh
17:20 < nathan7> CoverSlide: They are, after all, Amazon
17:20 < CoverSlide> yeah i know
17:21 < CoverSlide> i noticed they just launched node support, but then i was like awww ..
17:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:25 < oon_> CoverSlide: It seems that you can choose between Apache and nginx according to http://aws.typepad.com/aws/2013/03/aws-elastic-beanstalk-for-nodejs.html
17:26 < hobbit125> that also says you can choose "no proxy"
17:26 < hobbit125> and use node.js directly
17:27 < jodahpop> Anyone use couchdb with node?
17:28 < hobbit125> No, everyone uses mongodb.
17:29 < pachet> are you a real hobbit
17:29 < ljharb> npmjs.org uses couchdb
17:29 < radar_> ^
17:30 < nathan7> Nodejitsu uses CouchDB :D
17:31 < hobbit125> i am a real hobbit, yes.
17:31 < pachet> ok, good
17:32 < pachet> cause i've had a lot of fake hobbits in my life
17:32 < pachet> saying they're a real hobbit, then you ask them where they keep their stash of southern star
17:32 < pachet> and they're like what
17:33 < hobbit125> i wonder what the ratio is for people writing full blown sites w/ express, etc. vs. people writing JSON APIs and using things like knockout, angular, etc. to connect to them.
17:33 < radar_> pretty sure its moving in the front-end mvc direction hobbit
17:33 < hobbit125> mvc or mvvm?
17:34 < radar_> well I guess mvvm technically
17:34 < hobbit125> either way, that's what i would think too.
17:34 < radar_> It's all new to me but after seeing a few videos it basically blew my mind so I can imagine lots of other people feel the same way but I can imagine it not being the right fit sometimes
17:34 < hobbit125> it's a very nice way to do things.
17:35 < radar_> agreed.
17:35 < hobbit125> especially through node, and extra especially with mongo behind node.  (JS all the way down)
17:37 < radar_> ya, i'm new to javascript so its nice to be able to learn one language for both server and client.. mongo definitely helps though its taking some getting used to (coming from MySQL/Maria)
17:37 < howdynihao> couchdb uses javascript too you know
17:37 < hobbit125> howdynihao, interesting.  i didn't know.  to be honest, i've not looked at couchdb at all.
17:38 < radar_> couchdb vs mongodb seems to be largely preference or am I off base?
17:38 < ljharb> i don't think there's any one preference. use what works for you.
17:38 < hobbit125> there's a lot more industry noise (good and bad) around mongo, but that's not always a great indicator.
17:38 < nathan7> MongoDB's consistency guarantees are shit
17:38 < radar_> no, but it does help having something like mongoose if you're new
17:39 < radar_> though i'm sure couchdb has some similar clients for node
17:39 < hobbit125> nathan7, only by default, and not anymore.  they switched to guaranteed writes by default now.
17:39 < nathan7> Resourceful for CouchDB
17:39 < hobbit125> *just now*
17:39 < radar_> ty nathan
17:39 < nathan7> hobbit125: just now?
17:39 < hobbit125> yes.  just now. 
17:40 < hobbit125> mongoose is pretty neat, yeah.
17:41 < howdynihao> radar_: communication with couchdb is just http (rest), and documents are just json
17:42 < howdynihao> so its kind of** easy to use without abstractions
17:42 < radar_> howdynihao: wow. well that changes things.
17:42 < nathan7> and delicious mapreduce for queries
17:42 < hobbit125> mongoose isn't really about abstractions/orms.  it's about adding validation, etc.
17:43 < howdynihao> haha well i simplified it, there are some things to make sense of still 
17:43 < radar_> I'm sure but honestly.. I'm brand new to json/document-based dbs
17:43 < hobbit125> interesting that couchdb communication is all done through REST though...
17:43 < radar_> so its good to play around with a few
17:43 < hobbit125> very cool
17:43 <@mbalho> radar_: i like the npmjs.org/request module for couchdb
17:45 < radar_> mbalho: I'm using that for other requests already. I'm sure that would have been the natural choice. Its a pretty functional module and not bad now that a lot of things have been stripped out too
17:46 < howdynihao> idk how effective that would be
17:46 < howdynihao> outside of simple usage
17:46 < howdynihao> mainly because of the http pooling (httpAgent) 
17:47 < nathan7> howdynihao: http://npmjs.org/hyperquest
17:50 < howdynihao> its curious to see a lot of the couchdb abstraction modules not do pooling though
17:50 < emkei> Hello does anyone have any idea how to get express.js + passport.js uploads to get working 
17:50 < emkei> ?
17:50 < ljharb> uploads have nothing to do with passport
17:51 < howdynihao> or i mean do better pooling, since it all just uses httpAgent
17:52 < emkei> actually it does if i disable passport session formidable manages to parse theme
17:55 < emkei> exactly the same issue: http://stackoverflow.com/questions/14479343/in-node-js-why-does-passport-session-stop-formidable-from-triggering-file-even
17:55 < SNE> Just to be sure, if I install Express and I c an example of some code that uses connect, I can just use it as is cause of Express right? (https://github.com/tenorviol/node-facebook-sdk the code though I'll probably use another)
17:56 < CamonZ> hi, what alternatives are there to node-ijod?
18:13 < Skaag> Hello! :)
18:13 < Skaag> I have a small binary I wrote in C that controls some LED lights, and I want it to be easily accessible from node.js
18:14 < Skaag> I'm wondering if I should use a lightweight http server within it, and run it as a daemon, or if there is perhaps another, simpler way to do it
18:17 < AAA_awright> Skaag: Read stdin, or HTTP is okay too
18:18 < AAA_awright> Nah, if you're not retreiving any data, just use a simple protocol and read from stdin
18:18 < AAA_awright> Something like "ON 1\nOFF 2\n"
18:21 < Skaag> how would I communicate with it from a node.js app then?
18:21 < Skaag> ideally i'd like it to be as fast as possible, and only launch once, to minimize the risk for two of them running in parallel and talking to the hardware same time
18:23 < Skaag> that's why I thought a daemon would work well, because the binary would be up, and time won't be waste on forking
18:23 < AAA_awright> Skaag: It's standard input, you know how that works right?
18:23 < Skaag> yes
18:23 < Skaag> but I don't know how node.js app can use that
18:24 < AAA_awright> You open the process and write to it
18:24 < Skaag> ok so you need to open it, meaning it will fork
18:24 < Skaag> and once done, it will be closed (not running)
18:24 < AAA_awright> Well it has to start up one way or another
18:24 < Skaag> if it's a daemon I start it up once on boot
18:25 < AAA_awright> As far as I know the only way an OS starts new processes is using fork()
18:25 < Skaag> yes of course
18:25 <@Nexxy> Skaag, what kind of LEDs?
18:25 < Skaag> i'm trying to fork just once
18:25 < AAA_awright> How many processes are you planning on running?
18:26 < Skaag> It's an LED strip, which is used both as a flash (all LED's shine white, and maximum brightness), to take photos
18:26 < Skaag> But also blink red, or green, based on user interaction (ok / fail)
18:26 <@Nexxy> cool
18:26 < Skaag> it's hooked up to an olimex Olinuxino A13 board
18:26 < Skaag> I read QR codes, and execute stuff :)
18:26 <@Nexxy> you could also just control it with javascript :D
18:27 < Skaag> to do that I need access to the I2C bus
18:27 < Skaag> that's why I wrote the little program in C
18:27 <@Nexxy> https://github.com/rwldrn/johnny-five
18:27 <@Nexxy> that uses firmata, which supports i2c
18:27 < Skaag> awesome
18:27 < Skaag> ha, there's an awesome.md file there ;)
18:28 <@Nexxy> although johnny-five is pretty tied to the arduino
18:29 <@Nexxy> Skaag, what controls the GPIO on that board?
18:30 < Skaag> for now, nothing
18:30 < Skaag> I have access to the pins, input/output
18:31 < Skaag> I need to find a very high res USB camera, for document photocopying
18:31 < Skaag> most of them are pretty low res
18:33 <@Nexxy> Skaag, I think those are called "scanners"
18:33 < owen1> segomos: it's used by sqlite and chrome. what kind of limitations?
18:34 < jodahpop> The thing I like about CouchDB is that it speaks native HTTP
18:35 < min|dvir1us> Anyone here use the csv module?
18:35 < jodahpop> Which is not that hard to use.  So you can make Couch calls without a node module.
18:36 < min|dvir|us-work> I think it's completely broken.
18:36 < jodahpop> Just do a GET, POST, DELETE, or whatever straight from Nodejs and send it to CouchDB
18:36 < jodahpop> So I conclude...but I have never done this.
18:37 < jodahpop> ON paper, it looks right
18:38 < min|dvir|us-work> Why is this throwing an error?! https://gist.github.com/dan-transparensee/fa72aba383ca4485dfd6
18:38 < min|dvir|us-work> Literally just trying to process one line of CSV.
18:39 < min|dvir|us-work> Can anyone reproduce?
18:39 <@Nexxy> min|dvir|us-work, myCSV.split(',');
18:39 < min|dvir|us-work> Is that another library?
18:40 <@Nexxy> yes.
18:40 <@Nexxy> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split
18:40 < CoverSlide> haha
18:40 < min|dvir|us-work> Nexxy: in the future please do not recommend that for CSV.
18:40 <@Nexxy> "one line of CSV"
18:40 < min|dvir|us-work> CSV is a subtly complicated format.
18:40 <@Nexxy> > one line
18:41 <@Nexxy> lol yes, all those blank values are very complicated
18:41 < min|dvir|us-work> Can anyone help me?
18:41 < AAA_awright> >> "1,2,3".split(',')
18:41 < purr> AAA_awright: (object) ['1', '2', '3']
18:41 < CoverSlide> file an issue with the csv module
18:41 < AAA_awright> It seems tow ork for me, min|dvir|us-work
18:41 < min|dvir|us-work> AAA_awright: that's what I needed to hear -- no errors or anything?
18:41 < min|dvir|us-work> You're running exactly what I wrote?
18:41 < CoverSlide> here's an issue with split and csv:
18:42 < AAA_awright> I mean String#split
18:42 < CoverSlide> >> '1,"2,3",4'.split(',')
18:42 < purr> CoverSlide: (object) ['1', '"2', '3"', '4']
18:42 < min|dvir|us-work> Yes, there are other intricacies as well.
18:42 < CoverSlide> should be ['1','2,3','4']
18:42 < min|dvir|us-work> Multi-quotes too.
18:42 < CoverSlide> yeah
18:43 < CoverSlide> it's possible that the csv module is shit and you shouldn't use it
18:43 < min|dvir|us-work> CoverSlide: can you reproduce my issue?
18:43 < CoverSlide> nah i don't care enough to
18:43 < AAA_awright> What are you trying to do
18:43 < min|dvir|us-work> AAA_awright: https://gist.github.com/dan-transparensee/fa72aba383ca4485dfd6
18:43 < min|dvir|us-work> Run that code without error.
18:43 < AAA_awright> Yes I see that
18:43 < AAA_awright> What's the problem
18:43 < min|dvir|us-work> It seems to fail parsing the line.
18:43 < min|dvir|us-work> I just want to make sure it's not me that's crazy.
18:44 < AAA_awright> What are you trying to do? I doubt it's just that one line, I can split that by hand
18:44 < min|dvir|us-work> AAA_awright: my entire CSV is many gigabytes.
18:44 < min|dvir|us-work> This is the line it chokes on.
18:45 < min|dvir|us-work> Does anyone care to confirm my suspicion? It should only take 30 seconds of your time.
18:46 < CoverSlide> maybe it's this part: ,\"Golliwogg's Cakewalk\". Golliwog's Cakewalk,
18:47 < CoverSlide> doesn't the whole string have to quoted?
18:47 < CoverSlide> and literal quotations have to be double quotes?
18:47 < min|dvir|us-work> CoverSlide: hmmm.
18:48 < ljharb> every json key and value must be double quotes.
18:48 < ljharb> *quoted
18:48 < AAA_awright> That is the quote?
18:48 < AAA_awright> >> console.log("8661,6173,100,Children's Corner (Golliwogg's Cakewalk),\"Golliwogg's Cakewalk\". Golliwog's Cakewalk, Claude Debussy, KLA3010, Debussy Piano Works, An invitation to discover Debussy's world., 1900s (Edwardian) __ Acoustic __ Bouncy __ Carefree __ Cheeky/Naughty __ Cheerful/Happy __ Childlike __ Children __ Classical __ Comedy __ Comical/Humorous __ Daytime/Magazine __ Europe __ Films __ France __ G __ Golliwogg's Cakewalk - Children's Corner
18:48 < AAA_awright>  (Debussy) __ Happy/Positive __ In a Classical style __ Influence __ Keyboard __ Light hearted __ Mainland Europe __ Medium-fast (121-135bpm) __ Motion __ Musical Feel __ Opera __ Overture __ Piano __ Romantic 1810-1910 __ Silent Movie __ Slapstick __ Television __ Whimsical,NULL, 10047 __ 10142 __ 10339 __ 11212 __ 11216 __ 11243 __ 11244 __ 11245 __ 11249 __ 11261 __ 11302 __ 11398 __ 11426 __ 11489 __ 11607 __ 11645 __ 11652 __ 12034 __ 12104 __ 12438,
18:48 < AAA_awright> 17928,4111,1714,738892800,0,12665,4017306,3,1,222")
18:48 < purr> AAA_awright: SyntaxError: Unexpected token ILLEGAL
18:48 < AAA_awright> uh
18:48 <@Nexxy> lol ljharb 
18:48 < min|dvir|us-work> AAA_awright: that's the right line, yeah.
18:48 < CoverSlide> ljharb: we're talking about csv
18:48 < min|dvir|us-work> I'm trying to get csv to parse it.
18:48 < ljharb> lol yeah nvm, i'm wrong. every key, and every string value
18:48 < ljharb> oh
18:48 < ljharb> ew
18:49 < AAA_awright> >> console.log("8661,6173,100,Children's Corner (Golliwogg's Cakewalk),\"Golliwogg's Cakewalk\". Golliwog's Cakewal65,4017306,3,1,222")
18:49 < purr> AAA_awright: undefined; Console: "8661,6173,100,Children's Corner (Golliwogg's Cakewalk),\"Golliwogg's Cakewalk\". Golliwog's Cakewal65,4017306,3,1,222"
18:49 < AAA_awright> No I don't want you to quote my string thank you very much purr
18:49 < CoverSlide> min|dvir|us-work: try removing the quotes on that one and see what you get
18:50 < min|dvir|us-work> CoverSlide: confirmed, that fixes that line.
18:50 < min|dvir|us-work> But now there are more errors.
18:51 < min|dvir|us-work> I think you're right in that it expects the whole line to be quoted.
18:51 < CoverSlide> well then it sounds like there's a problem with your exporter
18:51 < min|dvir|us-work> Nothing I can do about that.
18:51 < min|dvir|us-work> The data is static and one-time use only.
18:52 < CoverSlide> well then you probably have to write your own parser, since this format isn't compatible with node-csv-parser
18:52 < CoverSlide> but afaik, that isn't proper csv
18:52 < min|dvir|us-work> There's really no proper CSV anyway, but you're right.
18:52 < CoverSlide> true
18:53 < min|dvir|us-work> ("no proper CSV" meaning "no standardized CSV format")
18:53 < CoverSlide> min|dvir|us-work: http://tools.ietf.org/html/rfc4180
18:54 < CoverSlide>    5.  Each field may or may not be enclosed in double quotes (however
18:54 < CoverSlide>        some programs, such as Microsoft Excel, do not use double quotes
18:54 < CoverSlide>        at all).  If fields are not enclosed with double quotes, then
18:54 < CoverSlide>        double quotes may not appear inside the fields.
18:54 < CoverSlide> oops
18:54 < min|dvir|us-work> Very nice.
18:54 < min|dvir|us-work> Thanks a lot, CoverSlide.
18:54 < min|dvir|us-work> Also, I stand corrected. :)
18:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:04 < samholmes> How do I explicitly set priority on a route in express?
19:04 < tjholowaychuk> order
19:04 < tjholowaychuk> is it
19:04 < samholmes> tjholowaychuk: Eh, is this the only means?
19:04 < tjholowaychuk> yup
19:04 < tjholowaychuk> anything else is confusign IMO
19:04 < tjholowaychuk> order is very clear
19:05 < samholmes> I'm going to loop through files in a directory called /controllers and for each file/module in that directory I'm going to call a .router method on the exported object (if method exists), passing the app variable. The router for each file would add routing callbacks to the app.
19:06 < samholmes> Doing this will make it difficult to control the order of routes, because now it depends on what order the fs.readdir gives me of the files.
19:06 < tjholowaychuk> if you're doing a bunch of meta stuff you could do your own .sort()ing
19:06 <@Nexxy> tjholowaychuk, you mean there's no z-index?!
19:06 < tjholowaychuk> based on some weight thingy
19:06 < shesek> I usually just require('./foo')(app)
19:06 < howdynihao> tjholowaychuk: thoughts on bundling browser compatible version of should with the module pkg?
19:07 < samholmes> shesek: That's what I'm doing now. But, I have a bunch of them in the app.js file and it's kind of a pain on the eyes. :P
19:07 < shesek> but usually different controllers add routes for different base paths, so the order they're loaded doesn't really matter
19:07 < CoverSlide> i agree, that is very janky. probably best to use regular requires instead of some shitty fs traversal thing. i hate when people write things like that
19:08 < samholmes> shesek: Usually, but if you have an authorization route, that should be placed above all..
19:08 <@Nexxy> CoverSlide, that's no fair
19:08 < CoverSlide> my hatrad is very fair
19:08 < CoverSlide> *hatred
19:09 <@Nexxy> DUDE! RAD HAT!
19:09 <@Nexxy> I think it's perfectly reasonable to load routes from a directory
19:09 <@Nexxy> especially when you have a lot of them and get tired of adding them in several places
19:10 <@Nexxy> other times you actually *need* to
19:11 < SNE> Just to be sure, if I install Express and I c an example of some code that uses connect, I can just use it as is cause of Express right? (https://github.com/tenorviol/node-facebook-sdk the code though I'll probably use another)
19:11 < CoverSlide> depends on how it's done
19:11 < context> expresses uses connect. that does not mean they are the same
19:12 < SNE> context: so it doesnt extend it? (support backward functionality?)
19:12 < CoverSlide> SNE: that uses an old version of connect. it is very likely it's not compatible with connect 2.x or express 3.x
19:13 < SNE> CoverSlide: that's ok I don't want to use it anyhow, I just showed it as an example 
19:14 < CoverSlide> express is built on top of connect. anything you do with connect you SHOULD easily be done with express as a drop-in replacement. however, there might be some inconsistencies
19:15 < SNE> ok kewl, thx for the answer
19:15 < radar_> this is very likely going to come across as a stupid question but I'm going to ask it anyway.. I'm trying to be very minimalist in this app.. if I needed functionality to just route requests (like POST /articles) to a routing function which will either render or perform some operation.. what is the recommend module? I currently use express but there seems to be a lot there I am currently not using
19:16 < radar_> recommended module*
19:16 < CoverSlide> radar_: npm uses a module called "routes" if routes is all you need, then that should work fine
19:17 < radar_> beautiful. i'm sure ill get beyond that at some point but I'm thinking for a learning experience i should avoid frameworks to start
19:17 < radar_> thanks
19:18 < howdynihao> radar_ if you're learning, it'll be a good excercise to write your own router :P
19:18 < tjholowaychuk> that's a good way to go, start with just regular node, see all the stuff you end up repeating
19:18 < tjholowaychuk> and use something else
19:18 < fayimora> tjholowaychuk: holla
19:19 < fayimora> I'm looking at "kue".. Still can't figure out how to actually run a job! you know, like send an email. How do I queue up a series of jobs, each of which runs some commands on the terminal(like returning the result of "ls -l" )
19:19 < radar_> howdynihao: true. haha. does it really all start with the module?
19:19 < radar_> url module I mean
19:19 < ljharb> i'm having trouble using tape, and having my test plan count seemingly be inaccurate
19:19 < booyaa> are there alternatives to search.npmjs.org for finding modules
19:20 < CoverSlide> http://nodetoolbox.com/
19:20 < booyaa> it would be cool if it searched github 
19:20 < ljharb> does tape's deepEqual count as more than 1 test?
19:20 < booyaa> cheers CoverSlide it's beena while since i been on that site
19:20 < booyaa> wasn't there a bloke called erikb who wrote something too?
19:20  * CoverSlide shrugs
19:21 < CoverSlide> not sure how up-to-date they keep it though
19:21 < radar_> fayimora: I would use redid for a simple FIFO queue and then just pull the next job from the queue when the first completes
19:21 < radar_> redis* ugh. autocorrect
19:21 < CoverSlide> i usually just use http://npmjs.org/browse/keyword/what-you're-searching-for-here
19:22 < radar_> fayimora: http://rediscookbook.org/implement_a_fifo_queue.html +  https://github.com/mranney/node_redis
19:24 < fayimora> radar_: not that actually.. Was referring to the job itself.. I'm assuming I can queue "anything".. So say i want to queue up a series of "java generateResult" commands.. The way i ono it is, create a "class" that extends Job and provides a run/perform/execute method
19:25 < fayimora> TL;DR, say i want to run a task, how do i actually tell cue what the task is?
19:25 < fayimora> *kue
19:25  * fayimora hates auto-correction on mac
19:26 < radar_> I haven't used kue but you're likely going to have to programmatically identify the job 
19:26 < radar_> then pass it to some function
19:26 < fayimora> radar_: yeah that's what I was expecting too
19:27 < fayimora> I was looking at this https://github.com/LearnBoost/kue/blob/master/examples/video.js
19:28 < fayimora> It talks about video conversion but I don't even see where it actually does the conversion 
19:28 < radar_> convertFrame looks like the actual job
19:28 < radar_> and its all sample code.. so its just a timeout
19:29 < fayimora> Ahh makes sense! I guess i was taking the example a little too seriously.. 
19:30 < fayimora> Thanks radar_ .
19:30 < glipson> with the new streams implementation, if i write a string or buffer to a PassThrough stream, it will fire the "data" event, but will not pipe to a writable destination
19:30 < radar_> fayimora: it happens haha np
19:30 < glipson> what am i doing wrong?
19:31 < fayimora> radar_: tought you were strictly a ruby/rails guy
19:35 < radar_> fayimora: I'm actually new to the this channel. did i steal someones nick?
19:35 < radar_> sidenote: I can't stand ruby's syntax
19:35 < TheLink> does npm communicate over a special port?
19:36 < fayimora> radar_: do you use another queuing lib?
19:36 < nathan7> TheLink: No.
19:37 < nathan7> TheLink: npm just uses HTTP
19:37 < nathan7> TheLink: for the registry
19:37 < radar_> fayimora: I just use plain old redis 
19:37 < nathan7> TheLink: (it can do git:// too)
19:37 < radar_> fayimora: it ain't pretty but it does the job
19:38 < fayimora> radar_: hmm ok
19:38 < fayimora> radar_: You are not the Radar in #rubyonrails?
19:38 < radar_> fayimora: nope
19:39 < fayimora> hahah funny
19:41 < radar_> fayimora: I'm actually coming back to IRC after quite a few years just because of node. unless there are other node channels ill pretty much stick to this one
19:41 < fayimora> cool
19:44 < s5fs> I'm having trouble with node-js, when I use getAll() it's returning an inconsistent number of records. Is this correct behavior and I should be using something else, or is this a bug?
19:44 < s5fs> Crap, I meant "riak-js"!
19:44 < PARLIAMENT> mother of god I just sucked down a gulp of water from a water bottle that has been sitting here for weeks
19:45 < s5fs> I can post example code if needed, but it's pretty straightforward.
19:45 < PARLIAMENT> I probably crippled an entire civilization of primitive life forms
19:45 < PARLIAMENT> and now the war begins in my stomach
19:45 < PARLIAMENT> should I eat hand sanitizer
19:46 < s5fs> PARLIAMENT: chase it with an egg salad sandwich from a truck stop restroom
19:46 < s3shs> I have a question about event emitters.  How am I supposed to know what events a library emits/
19:46 < s3shs> ?
19:48 < TheLink> ok, so it's generally port 80
19:48 < ashnur> hi
19:48 < PARLIAMENT> s5fs: yes! divide and conquer. I just need a second invading army to distract the water people of "Bottle Labeled INNOVATION"
19:49 < ashnur> i need a bit of advice. how could I refactor this: https://github.com/silentmatt/javascript-biginteger/blob/master/test/test-biginteger.js#L10
19:49 < TheLink> thanks nathan7 
19:49 < ashnur> to work in Node.js?
19:49 < CoverSlide> s3shs: read the docs and / or source
19:49 < CoverSlide> s3shs: or just the source, that usually tells you what you need to know
19:49 < s3shs> Just search for strings, I guess.
19:49 < s3shs> Ok.
19:50 < CoverSlide> search for "emit"
19:50 < PARLIAMENT> oh no. innovation. if bacteria develop intelligence in any water bottle, it would be in one labeled innovation
19:50 < nathan7> ashnur: that looks like a require()
19:51 < ashnur> nathan7: yeah, my problem is the load in the loop, in the if
19:52 < ashnur> also, it's not exactly a require, it's more like an include
19:52 < ashnur> because it seems that the variable defined in the a file is visible from the loaded files 
19:54 < ashnur> and also expects a variable to be defined which is only defined in the loaded file, so not all loaded files use the exports
20:06 < s3shs> CoverSlide, right.  :-)
20:06 < s3shs> Thank you.
20:08 < PARLIAMENT> you guys have to shoot me. I'm going to transform any moment
20:08 < PARLIAMENT> I can feel my control over my hunger for human flesh slipping
20:09 < EyePulp> PARLIAMENT: So normally you have a craving for human flesh, but it's in check.
20:12 < PARLIAMENT> EyePulp: it's this vile demon water that I accidentally drank. It's been on this desk brooding at me for billions of years. Who knows how many apocalyptic biological weapons have evolved inside
20:15 < s3shs> Anybody able to build node trunk on Mac OS X 10.8.3?
20:16 < pachet> PARLIAMENT: beer before liquor bro
20:16 < s3shs> Is this the node.js room?
20:19 < gildean> s3shs: no, it's just named node.js
20:19 < s3shs> ok, mr. funny-man.  Explain that to parliament.
20:20 < howdynihao> s3shs: i was thinking something similar
20:20 < s3shs> :-)
20:20 < gildean> PARLIAMENT: go home, you're drunk
20:21 < howdynihao> s3shs, about event emitter
20:21 < geNAZt> hi i have some npm related issues
20:21 < geNAZt> i can seem to get installing from a non github repo working
20:21 < s3shs> I see events emitted more often than ever.  And they're even less documented than the rest of the library.
20:21 < ljharb> s3shs: "build trunk"? trunk is svn, this is git, and i can configure && make && make install it just fine, yes
20:21 < howdynihao> you should have some way to tell what events are going to be emitted programaticallu
20:21 < geNAZt> http://hastebin.com/ratujirawa.text
20:21 < CoverSlide> geNAZt: what's the dependencies line look like?
20:22 < geNAZt> git+http://npm-pull:npm-pull@stash.cube-space.net/scm/fram/passport-socketio.git
20:22 < s3shs> ljharb, I installed the CLI tools from inside Xcode.  Did you do anything else?
20:22 < radar_> s3shs: use homebrew
20:22 < CoverSlide> hmm maybe npm doesn't support basic auth urls?
20:23 < radar_> but ./configure && make && make install worked for me on 10.8.3 too
20:23 < s3shs> Let me try again. I'll pastebin the results back.
20:23 < geNAZt> well npm takes it an executes it in git or ?
20:23  * CoverSlide shrugs
20:23 < geNAZt> like the console says
20:23 < ljharb> s3shs: those cli tools should be sufficient
20:23 < geNAZt> npm ERR! git clone http://npm-pull:npm-pull@stash.cube-space.net/scm/fram/passport-socketio.git undefined
20:23 < geNAZt> so he tries to run the git clone with the url
20:23 < geNAZt> which if i run it manually works
20:24 < geNAZt> ah i see no branch :D
20:24 < s3shs> With git, how does one checkout the "latest"?
20:25 < CoverSlide> define "latest"
20:25 < radar_> git clone
20:25 < radar_> keep it simple
20:25 < CoverSlide> usually that means master
20:25 < CoverSlide> but not always
20:25 < radar_> that'll put you up to date
20:25 < geNAZt> npm docs say: If no <commit-ish> is specified, then master is used.
20:26 < geNAZt> so i dont know ? is this a issue ?
20:26 < CoverSlide> there is a master in that branch then?
20:26 < CoverSlide> s/branch/reop
20:26 < geNAZt> yes
20:26 < s3shs> I'm following the instructions here:  https://github.com/joyent/node/wiki/Installation
20:27 < s3shs> With export of CC and CXX.
20:27 < radar_> ugh, I didn't do any of that
20:27 < _C1D> Hello.
20:27 < radar_> clone the repo
20:27 < radar_> cd into it
20:28 < radar_> ./configure && make && sudo make install
20:28 < CoverSlide> also what version of npm?
20:28 < s3shs> I think I know the issue.  I have a space in my "checkouts" directory name.  I do this purposefully to find bugs in my makefiles with spaces.
20:28 < s3shs> Looks like the node stuff doesn't like spaces in paths.
20:28 < geNAZt> node v0.10.2
20:28 < s3shs> I will clone elsewhere.
20:28 < _C1D> Does any one know what the best Redis provider is?
20:28 < geNAZt> npm 1.2.15
20:29 < s3shs> Oh, 10.2 is on the site.  I'll pull that down instead.
20:29 < radar_> cloud-based or module you mean?
20:29 < howdynihao> http://nodejs.org/docs/latest/api/events.html does a stability 4 - api frozen mean i can try to get a patch in for new non api changes?
20:29 < radar_> s3shs: if you git clone you don't have to checkout
20:29 < howdynihao> non breaking current api* changes
20:29 < radar_> you'll automatically be at master
20:29 < radar_> e.g 0.10.2
20:29 < s3shs> radar_, yeah.  I don't use git very much.  Thanks, all.
20:29 < ljharb> radar_: master isn't necessarily 0.10.2
20:29 < ljharb> you should checkout the tag "v0.10.2" if that's what you want
20:30 < niallo> is there a version of NPM which works under both node 0.8.x and 0.10.x ?
20:30 < s3shs> The power fixed a bug after 10.1.  I just need that fix, is all.
20:30 < radar_> ljharb: true but if he runs git clone right now it will be 0.10.2, thats all I meant
20:30 < niallo> npm 1.1.71 doesn't work entirely right under node 0.10.x
20:30 < ljharb> radar_: actually master is 0.11, so he won't.
20:31 < radar_> ljharb: so I kinda derped on that one lol
20:31 < radar_> sorry about that
20:31 < ljharb> always install from a tag
20:32 < radar_> did that get committed today btw?
20:32 < s3shs> Hmm.  So yeah, my fix may not be in 10.2.  Could be in 11.  How can I know?
20:32 < s3shs> (my fix -> their fix.  :-))
20:35 < CoverSlide> geNAZt: npm install "git+http://npm-pull:npm-pull@stash.cube-space.net/scm/fram/passport-socketio.git" works for me
20:36 < buzzedword> i have a general question. i've been using mongo as my persistence, and interfacing with mongo. just got out of a code review for the unit i'm on and was posed with an interesting query: the point of noSQL is that it's schemaless. why does enforcing a schema through mongoose benefit at all, and isn't it abusing the platform?
20:36 < geNAZt> CoverSlide: i get an error
20:36 < CoverSlide> in deps: "passport-socketio": "git+http://npm-pull:npm-pull@stash.cube-space.net/scm/fram/passport-socketio.git" works too
20:36 < CoverSlide> maybe windows is effing up
20:37 < Zolmeister> buzzedword: speed and flexibility, changing the schema is super easy with noSQL
20:37 < ljharb> buzzedword: because it means you don't need a schema to read the data. a schema is just part of your app code.
20:37 < ljharb> buzzedword: more to the point, with a relational DB, the schema lives in the DB, not in your code.
20:37 < buzzedword> my gut reaction there is, "no, it provides validation through your code so you can avoid over-architecting your code, not a schema on the DB side"
20:37 < buzzedword> right
20:37 < Zolmeister> yup
20:38 < buzzedword> so to defend that position, it benefits your CODE more than the database, am I correct?
20:38 < stagas> geNAZt: what is the error?
20:38 < radar_> buzzedword: also see http://mongoosejs.com/docs/api.html#schema_Schema-add
20:38 < echo|> buzzedword: There's many points. That's just one "freedom" that attracts developers who feel stuck within a structure. Your information should still be validated and organized, with NOSQL, it just means you don't have to hard codedly tell your DB what data is going where, it's all done at the app layer.
20:38 < geNAZt> 20 error git clone http://npm-pull:npm-pull@stash.cube-space.net/scm/fram/passport-socketio.git undefined
20:39 < geNAZt> 22 error Error: spawn ENOENT.....
20:39 < buzzedword> radar_: thanks for the link :) was more looking on defending the "why" over "how"
20:39 < buzzedword> which all of you fine folk have helped me with :)
20:40 < radar_> I figured after hearing more but I was already at the page so I said why not haha
20:40 < buzzedword> lol
20:40 < stagas> geNAZt: npm set loglevel=verbose
20:40 < stagas> geNAZt: and gist :)
20:41 < buzzedword> so, to expand that question:
20:41 < geNAZt> https://gist.github.com/geNAZt/50ffa0cc048361e35657
20:41 < buzzedword> why is it that mongoose is the only ORM driver which requires a schema, and other implementations do not?
20:41 < buzzedword> is it a pattern you have to build out yourself and is poor form not to, or is mongoose adding heavy opinionation to their implementation?
20:41 < geNAZt> buzzedword: bacuse mongodb is a schema less dbms
20:42 < s3shs> Yup, it was the spaces.
20:42 < geNAZt> mongoose adds this to a dbal
20:42 < s3shs> Hmm.  Should I file a bug or try to fix it?
20:42 < s3shs> (First time for everything!)
20:42 < kenperkins> anyone using .on('response') in mikeal's request package?
20:43 < CoverSlide> kenperkins: i'ved used it, why?
20:43 < buzzedword> geNAZt: right-- completely understood. the original question was "does implementing a schema against a schemaless dbms counteract the strengths of said dbms", and was asking how to defend the app-level schema thought process
20:43 < CoverSlide> (although that was maybe a year ago)
20:43 < kenperkins> well, I'm looking at a proposal that moves the emit one line in the source code 
20:43 < kenperkins> which may have a hard to detect impact
20:44 < buzzedword> geNAZt: i think the general idea is that the code will always still have to be validated and structured, which is why mongoose provides the schema layer
20:44 < buzzedword> the followup to that was, why only mongoose?
20:44 < geNAZt> stagas: well i fixed it
20:44 < stagas> geNAZt: oh how
20:44 < geNAZt> it works in "git bash" but not in a "windows cmd"
20:44 < CoverSlide> windows, i knew it
20:45 < radar_> ^ lol
20:45 < stagas> geNAZt: yeah I have the same issue, it's because of git.cmd being in path instead of git.exe. didn't know about the git bash trick! nice
20:45 < geNAZt> now i get gyp errors -_-
20:46 < geNAZt> well i uninstall node x64
20:46 < geNAZt> it doesnt work well :D
20:47 < radar_> geNAZt: would it be too difficult or resource heavy to install a *nix virtual machine? That might be the better way to go
20:47 < geNAZt> well i have 2 unix computers
20:47 < CoverSlide> or convert the windows box to a nix box
20:47 < geNAZt> but why would it be bad to have it running on windows ?
20:47 < geNAZt> :D
20:47 < radar_> just less of a headache is all
20:48 < radar_> but more power to you haha
20:48 < geNAZt> "it doesnt run on windows, install *nix" is a bad solution
20:48 < amasad> anyone know how to install node v0.8 (not latest) from apt?
20:49 < radar_> does not appear to be in chris-lea/nodejs any longer
20:49 < geNAZt> chris-lea only has the latest stable and the latest unstable i think
20:49 < geNAZt> why not build it from source ?
20:49 < radar_> actually https://launchpad.net/~chris-lea/+archive/node.js-legacy
20:49 < radar_> there you go
20:50 < amasad> thanks radar_!
20:51 < radar_> np the google fu is strong today
20:51 < nathan7> https://blog.nodejitsu.com/nathan-zadoks-is-a-jitsuka \o/
21:06 < kenperkins> mikeal: successive runs of test for request have different results. Is there a reason they aren't deterministic?
21:07 < kenperkins> it looks like they are run in parallel (no flow control) such that the object used for validation could be different (hits)
21:10 < samholmes> How could I just get the textual content of markdown? Remove all of markdown's syntax basically.
21:10 < samholmes> So if I have images, links, bold stuff, lists, etc. then the visible text would only be what remains.
21:11 < ningu> samholmes: you could use cheerio and .text()
21:11 < samholmes> cheerios are good, but honey cheerios are better. Even so, I don't see how this fits within context of my question. xP
21:12 < ningu> samholmes: you don't know the cheerio module or are you just being facetious?
21:12 < samholmes> the latter
21:12 < samholmes> or should I say, ladder. ;P
21:14 < samholmes> So, I'll convert the markdown to HTML using marked, then convert the HTML to text using cheerio. Isn't there a way to skip a step?
21:14 < ningu> samholmes: I see. hmm... not sure.
21:15 < ningu> not that I can think of in any obvious way.
21:22 < samholmes> Too bad marked didn't just have this feature
21:26 < nathan7> samholmes: hack marked
21:26 < nathan7> samholmes: marked's source is easy to understand
21:26 < samholmes> nathan7: I also put out an issue
21:26 < samholmes> https://github.com/chjj/marked/issues/145
21:26 < samholmes> Maybe I could hack it then pull requesty it
21:27 < nathan7> samholmes: making it an option makes the code a lot worse
21:27 < samholmes> why?
21:29 < nathan7> two branches for everything that outputs HTML
21:29 < nathan7> s/<[^>]+>// would probably do
21:30 < ariestav> anybody successfully install node.js on a synology disk station?
21:30 < ariestav> i keep getting a syntax error when I try to build
21:35 < segomos> owen1: no indexing, no client<->server support, single process access to the DB
21:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:40 < kornnflake> >> [].length
21:40 < purr> kornnflake: (number) 0
21:41 < segomos> >> (![]).length
21:41 < purr> segomos: undefined
21:41 < segomos> i win
21:41 < owen1> segomos: interesting. what does it mean no client server support?
21:42 < segomos> i'm guessing they mean no client side libraries, that you need to bake it into your application
21:42 < segomos> http://leveldb.googlecode.com/svn/trunk/doc/index.html
21:48 <@mbalho> it means it is a c++ library and there is no db server daemon
21:48 <@mbalho> listen to http://nodeup.com/fortyone
21:49 < owen1> mbalho: it's not a separate process, like a regular db
21:49 < owen1> (mongo, mysql, etc)
21:49 < owen1> what the implications? what usecases?
21:49 <@mbalho> listen to the podcast
21:49 < owen1> mbalho: thanks for that link!
21:49 < owen1> awesmoe
21:50 < windsurf_> what's the simplest way to store an object in memory that is accessible in an express app with socket.io and routes? I was thinking for my simple one-computer, one-user app I'd use a global variable. thoughts?
21:50 < owen1> mbalho: did u try using it or do u know of good usecases?
21:50 < windsurf_> either that or maybe a singleton module?
21:50 < monokrome> I have a script that builds a bunch of coffee into a lib/ folder. This is my `npm prepublish` script. However, the lib/ directory isn't published. Any ideas why?
21:52 < AAA_awright> What I'd really like is a pure-ES database
21:52 < AAA_awright> Filesystem based, filesystem locking, etc
21:54 < monokrome> The prepublish script is ran, however
21:54 < monokrome> So, this is confusing.
21:54 < kenperkins> how would you track down timing inconsistencies with node, when doing http requests? i.e. sometimes I initiate a request and see it handled (within same process) in as little as 5ms. Other times it takes upwards of 300ms.
21:56 < pachet> kenperkins: console.time() & console.timeEnd()
21:56 < kenperkins> well I'm doing crude approximations of that with Date().getTime() but yea
21:57 < kenperkins> I guess i need to get into node source :S
21:57 < min|dvir|us> Nexxy: I think you know a lot about a lot but I also think that it would be better if you didn't talk about what you don't know. I wouldn't be saying this if you didn't mock people for disagreeing with your wrong beliefs.
21:57 < min|dvir|us> With all due respect, of course.
21:58 < AAA_awright> Who would know anything about getting a byte-level lock on files?
21:58 < AAA_awright> How do I do that?
21:58 < AAA_awright> You'd think Node.js can do that
21:59 < ningu> AAA_awright: not sure if it's possibe in all OS's
21:59 < min|dvir|us> AAA_awright: files depend on the filesystem, which is typically implemented in the kernl.
21:59 < min|dvir|us> *kernel
21:59 < ningu> but good question
21:59 < ningu> yeah, I didn't think of the fs
21:59 < min|dvir|us> So Node.js or not, it depends on the filesystem.
21:59 < AAA_awright> Half of what Node.js does isn't possible in all OSes
21:59 < min|dvir|us> In almost all cases locking happens on the actual file.
21:59 < min|dvir|us> AAA_awright: that's not true.
21:59 < AAA_awright> I just want to get it working in those that do support it
22:00 < min|dvir|us> AAA_awright: you'll have to hack on filesystem drivers.
22:00 < AAA_awright> min|dvir|us: You can show me that half the features of Node.js are supported in every single OS?
22:00 < ningu> well, on *nix and windows
22:00 < AAA_awright> I'll be friendly and exclude Windows
22:00 < min|dvir|us> Yeah, that's what I'm refering to. And Mac, if you call that *nix.
22:00 < min|dvir|us> All major OSes.
22:00 < ningu> min|dvir|us: I was including it :)
22:00 < min|dvir|us> Node.js is nothing special.
22:00 < min|dvir|us> I mean, it is, but it doesn't do anything special software-wise.
22:01 < ningu> that's one of its major positives imo
22:01 < min|dvir|us> Agreed. :)
22:01 < ningu> you don't run into weird unexpected issues
22:01 < ningu> and the core is very lightweight
22:03 < min|dvir|us> For those interested, anything you can call a computer simply requires a polling event loop to interact with hardware at all.
22:04 < min|dvir|us> Any blocking API one uses is actually a bastardization.
22:05 < ljharb> well, that's not entirely true. there's nothing about an event loop that prevents a CPU call out to hardware from waiting on a response.
22:06 < ljharb> it may be bad programming, but it's valid
22:06 < min|dvir|us> Yes, it's possible to send signals without a loop, but not receive them.
22:08 < Industrial> Is there an IRC channel discussing software testing practises?
22:16 < OliverJAsh> substack: is there any way of requiring a directory of files in browserify?
22:18 < Industrial> OliverJAsh: maybe set up an index.js that requres everything in it
22:18 < OliverJAsh> Industrial: good idea
22:19 < kenperkins> so what exactly happens when you call req.end() (where req = http.request())
22:19 < min|dvir|us> kenperkins: two newlines are sent, terminating the current HTTP request.
22:19 < kenperkins> it looks like this goes through to cleanup in stream.js?
22:20 < kenperkins> https://github.com/joyent/node/blob/master/lib/stream.js#L102
22:20 < OliverJAsh> i really like the rails way of requiring things, with require_tree and files with a _ prefix being treated as partials (added to build file first). anything like this in node?
22:20 < kenperkins> am I reading that right?
22:22 < kenperkins> min|dvir|us: I'm trying to account for variability between when req.end() is called and when function(req, res) is called
22:22 < kenperkins> as in sometimes there's ~5ms bewteen req.end and the response handler being invoked, othertimes it's upwards of 400ms
22:24 < NodeNewb> is it normal to have both a connect.sid and express.sid cookie, when using just express cookies?
22:25 < substack> OliverJAsh: if you think you need that you're probably doing something wrong
22:25 < ljharb> OliverJAsh: rails does lots of magic implicit things. be more explicit.
22:25 < substack> but you *could* do `browserify $(find -name \*.js)`
22:25 < substack> but don't ever do that
22:25 < OliverJAsh> substack: yeah, i'm not sure if i need browserify any longer. for my application i've had to implement a custom module system with submodules (marionette.js).
22:26 < substack> just use require() with an obvious entry point
22:26 < OliverJAsh> maybe it's time to use something like mincer.
22:26 < substack> OliverJAsh: what do you need a custom module system for inside of a module system?
22:26 < AAA_awright> You should really always have an index.js file
22:26 < AAA_awright> I don't know why they've become less popular recently
22:27 < substack> AAA_awright: I've always done it that way
22:27 < substack> I can require('./') before I've written my package.json, which I typically only do right before publishing 0.0.0
22:28 < OliverJAsh> substack: because i assign modules to an object. for instance, there's the "Links" module, which has a Show module ("Links.Show"), which might have a Controller module ("Links.Show.Controller"). so they are required in order and that object is created, instead of having dependencies such as "Links", "LinksShow", and "LinksShowController"
22:28 < substack> OliverJAsh: don't do that
22:28 < substack> write modular code instead
22:29 < substack> modules are independent and have explicit dependency relationships
22:29 < substack> what you've just described sounds very tightly-coupled
22:29 < substack> where all the modules need to know about all the other modules
22:30 < NodeNewb> I don't fully understand modules just yet, is it just a way to keep code cleaner?
22:31 < min|dvir|us> FWIW, I've never seen that paradigm among the languages I've used.
22:31 < ningu> NodeNewb: more maintainable
22:31 < min|dvir|us> You explicitly import each module you want to use -- no implicit imports.
22:31 < ljharb> NodeNewb: to keep code encapsulated. coupling makes the baby jesus cry
22:31 < ningu> and more reusable
22:32 < NodeNewb> ok...my code is starting to get out of hand, I have it on my "to learn" list
22:32 < substack> NodeNewb: modules let you solve one problem at a time so it STAYS solved
22:33 < substack> so you can test each solution independently and iterate with separate, explicit versioning and semver compatibility ranges
22:33 < NodeNewb> so I could put all of my db schema code in a module, my route handling in another, and my socket handling in another?
22:33 < ningu> NodeNewb: yes, that's a good example
22:33 < substack> so that your stack can evolve incrementally piece-by-piece instead of being pegged to some super-version
22:33 < NodeNewb> got it, man that will be handy
22:34 < ningu> NodeNewb: require() is cached so you can require() the same modules various places in your app and it will return the exact same object
22:34 < ningu> comes in handy a lot
22:35 < NodeNewb> is there any performance gain overall?
22:35 < ningu> it's not about performance
22:35 < NodeNewb> ok
22:35 < ningu> there is no performance *loss* which is what's important :)
22:36 < NodeNewb> yeah, right now the performance loss is me scrolling up and down a single .js file
22:36 < ningu> well, that's development cost versus runtime
22:36 < min|dvir|us-work> NodeNewb: if you're not working with anyone else, write however the hell you want.
22:36 < ningu> also you shouldn't be afraid to put any common code in a function even if it's two lines long
22:36 < ningu> min|dvir|us-work: I'm getting the sense he wants to work more efficiently than he has been
22:37 < NodeNewb> it's just me learning, but it's frustrating trying to keep my flow straight
22:40 < NodeNewb> the problem I think I'll have with modules is the linear-nature that node reads my code...if I move a section up or down, it could potentially break
22:40 < NodeNewb> so seeing the require() in different sections gets confusing
22:49 < kenperkins> what exactly is ENOENT
22:49 < kenperkins> I can't find any reference to it in the docs
22:49 < ningu> kenperkins: file not found usually
22:49 < ningu> it's a unix error
22:49 < min|dvir|us-work> NO ENTRY
22:49 < kenperkins> I can't find any reference to it in the docs
22:49 < kenperkins> oops
22:50 < Guest86795> Hi all, i got net.js error when my app handling many connections
22:50 < Guest86795> I created a stack overflow topic here, if someone can take a look : http://stackoverflow.com/questions/15581978/nodejs-how-to-debug-eventemitter-memory-leak-detected-11-listeners-added
22:51 < Guest86795> It is really strange, it appears that net.js is entering in infinite loop while trying to read end of socket
22:53 < AnaelFavre> nobody here for helping some very strange problems ? ^^
22:58 < AAA_awright> AnaelFavre: What's the error
22:58 < AnaelFavre> I have a high network usage app (nodejs proxy implementation)
22:59 < Scrat> why would crypto.pbkdf2() throw an error?
22:59 < AnaelFavre> and when there are many http connexions at the same time, net.js is entering in infinite loop using 100% cpu and filling memory
22:59 < AAA_awright> Scrat: What's the error
22:59 < AnaelFavre> i put net in debug here : https://gist.github.com/AnaelFavre/5274181
22:59 < AAA_awright> It shouldn't
22:59 < Scrat> AAA_awright: none, it just says in the docs that it can throw an error
22:59 < Scrat> which is puzzling
23:00 < AAA_awright> Crypto is weird like that
23:00 < AnaelFavre> there are more informations on my stack overflow topic : http://stackoverflow.com/questions/15581978/nodejs-how-to-debug-eventemitter-memory-leak-detected-11-listeners-added
23:00 < AAA_awright> Cryptography in general, I mean
23:00 < Scrat> ( http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen )
23:00 < AAA_awright> Scrat: I'd suggest that it might throw a RNG-not-seeded error but no, PBKDF2 doesn't do that
23:00 < Scrat> I understand that random can throw an error if it has no entropy but this is a hash
23:00 < Scrat> heh what you said
23:01 < AAA_awright> Scrat: It probably only throws a TypeError, e.g. providng an Array where it expected a Buffer or String
23:01 < AAA_awright> or invalid iterations
23:02 < AAA_awright> "1" is not a good choice for iterations
23:02 < Scrat> AAA_awright: alright
23:05 < NodeNewb> an anyone help me simplify a model, or how to do this more efficiently? http://pastebin.com/EvfbTU2m
23:06 < NodeNewb> seems like a lot of re-writing, but I'm not sure how I put a custom function inside of a new model
23:06 < NodeNewb> re-writing=re-typing of the same thing
23:06 < AAA_awright> var s = s || 0; s |= 1; s
23:06 < AAA_awright> >> var s = s || 0; s |= 1; s
23:06 < purr> AAA_awright: (number) 1
23:06 < AAA_awright> huh
23:08 < Industrial> Has anyone ever debugged a Mocha test in IntelliJ WebStorm? Instead of calling mocha from the commandline, can I require it to perform a test by running the file with node?
23:13 < kenperkins> Industrial: how'd you get that setup
23:19 < Industrial> kenperkins: I just use Webstorm. It has a debugger for Node.JS built in, so I can also debug a test while it's running. I'm just not sure how to set it up, when using mocha.
23:19 < kenperkins> i'll take offline :P
23:20 < Industrial> yes. I still have to figure out wether I could hook it up to the chrome debugger :> that'd be awesome.
23:22 < ningu> what is the cmdline switch to turn on tracing? --trace_all or something like that?
23:22 < turtlekitty> Hola.  Anyone know how to tell which network interface an http request came in on?
23:23 < ningu> oh, it's just trace.
23:24 < Industrial> kenperkins: got it working
23:24 < nathan7> turtlekitty: socket's address?
23:25 < Industrial> just leav the path to node.js as is, then configure the application js file to be /usr/local/lib/node_modules/mocha/bin/_mocha and in my case application parameters --recursive.
23:25 < turtlekitty> nathan7: request.socket.address(), or something like that?
23:26 < nathan7> turtlekitty: not sure, RTFM q=
23:27 < Industrial> kenperkins: I have it only run, not debug now though.
23:27 < turtlekitty> Man, what you think I've been doing the past twenty minutes... got tired of reading the source. *smirk*
23:27 < nathan7> turtlekitty: yep, req.socket.address()
23:27 < turtlekitty> Bless you.
23:27 < nathan7> turtlekitty: http://nodejs.org/api/net.html#net_socket_address
23:28 < Industrial> kenperkins: actually, I can just set a breakpoint in my test now.
23:28 < kenperkins> which version of webstorm are you using
23:29 < turtlekitty> You rock, nathan7
23:29 < nathan7> I do my best C=
23:33 < ningu> ok I just confused myself for a good 5 minutes because I didn't realize the terminal I was in was the remote and not the local version of my app...
23:36 < kenperkins> Industrial: how did you get debugging working
23:37 < Industrial> kenperkins: just leav the path to node.js as is, then configure the application js file to be /usr/local/lib/node_modules/mocha/bin/_mocha and in my case application parameters --recursive.
23:37 < kenperkins> yea, I got tests running
23:37 < kenperkins> but Not debugging
23:37 < Industrial> just set a breakpoint in a test and press debug instead of run
23:38 < kenperkins> hm, mine's not working. anything else relevant?
23:39 < Industrial> kenperkins: don't think so; http://images.gammatester.com/pics/cf068f82d697e94c2ef230e9e224dcc6.png
23:40 < kenperkins> hm
23:41 < kenperkins> and it's in the integrated debugger or chrome?
23:41 < Industrial> kenperkins: in the webstorm debugger
23:41 < Industrial> I'm faily new to testing; I'm trying to write these tests before implementing, so I'm thinking about how to test API argument validity. https://gist.github.com/Industrial/3cf19c1a5e4e5a2ee58e#file-node-test-js-L88 is this a good way? Should I return a different error message for each of these cases (since I need all the info to be there)?
23:42 < kenperkins> bbiab
23:43 < TheJH> why does, although npm fetches packages over https, gyp fetch the node source tarball over plain http?
23:50 <@TooTallNate> TheJH: the tarballs aren't hosted on https
23:50 <@TooTallNate> is that a problem for you?
23:52 < TheJH> TooTallNate, not really
23:55 < samholmes> How do I test the facebook.com debugger with my localhost pages?
23:55 < ningu> TooTallNate: I'm seeing segfaults with node-sqlite3, which uses gyp. but it's hard for me to narrow down what's causing it -- using the sqlite3 module directly works fine, but using it through any-db segfaults. any idea how to go about debugging this?
23:56 <@TooTallNate> ningu: sounds like a bug in any-db
23:56 < ningu> TooTallNate: yes, but what sort of bug could cause a segfault?
23:58 < MI6> joyent/node: Trevor Norris master * 2093e7d : lint: add isolate, remove semicolon - http://git.io/wUswyg
23:59 < ningu> anydb is pure-js
--- Log closed Sat Mar 30 00:00:47 2013
